
obj/kern/kernel:     file format elf32-i386


Disassembly of section .text:

f0100000 <start_of_kernel-0xc>:
.long MULTIBOOT_HEADER_FLAGS
.long CHECKSUM

.globl		start_of_kernel
start_of_kernel:
	movw	$0x1234,0x472			# warm boot
f0100000:	02 b0 ad 1b 03 00    	add    0x31bad(%eax),%dh
f0100006:	00 00                	add    %al,(%eax)
f0100008:	fb                   	sti    
f0100009:	4f                   	dec    %edi
f010000a:	52                   	push   %edx
f010000b:	e4                   	.byte 0xe4

f010000c <start_of_kernel>:
f010000c:	66 c7 05 72 04 00 00 	movw   $0x1234,0x472
f0100013:	34 12 

	# Establish our own GDT in place of the boot loader's temporary GDT.
	lgdt	RELOC(mygdtdesc)		# load descriptor table
f0100015:	0f 01 15 18 e0 18 00 	lgdtl  0x18e018

	# Immediately reload all segment registers (including CS!)
	# with segment selectors from the new GDT.
	movl	$DATA_SEL, %eax			# Data segment selector
f010001c:	b8 10 00 00 00       	mov    $0x10,%eax
	movw	%ax,%ds				# -> DS: Data Segment
f0100021:	8e d8                	mov    %eax,%ds
	movw	%ax,%es				# -> ES: Extra Segment
f0100023:	8e c0                	mov    %eax,%es
	movw	%ax,%ss				# -> SS: Stack Segment
f0100025:	8e d0                	mov    %eax,%ss
	ljmp	$CODE_SEL,$relocated		# reload CS by jumping
f0100027:	ea 2e 00 10 f0 08 00 	ljmp   $0x8,$0xf010002e

f010002e <relocated>:
relocated:

	# Clear the frame pointer register (EBP)
	# so that once we get into debugging C code,
	# stack backtraces will be terminated properly.
	movl	$0x0,%ebp			# nuke frame pointer
f010002e:	bd 00 00 00 00       	mov    $0x0,%ebp

        # Leave a few words on the stack for the user trap frame
	movl	$(ptr_stack_top-SIZEOF_STRUCT_TRAPFRAME),%esp
f0100033:	bc bc df 18 f0       	mov    $0xf018dfbc,%esp

	# now to C code
	call	FOS_initialize
f0100038:	e8 22 00 00 00       	call   f010005f <FOS_initialize>

f010003d <spin>:

	# Should never get here, but in case we do, just spin.
spin:	jmp	spin
f010003d:	eb fe                	jmp    f010003d <spin>

f010003f <setKHeapPlacementStrategyFIRSTFIT>:
#define KHP_PLACE_BESTFIT 	0x2
#define KHP_PLACE_NEXTFIT 	0x3
#define KHP_PLACE_WORSTFIT 	0x4

static inline void setKHeapPlacementStrategyCONTALLOC(){_KHeapPlacementStrategy = KHP_PLACE_CONTALLOC;}
static inline void setKHeapPlacementStrategyFIRSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_FIRSTFIT;}
f010003f:	55                   	push   %ebp
f0100040:	89 e5                	mov    %esp,%ebp
f0100042:	c7 05 18 be 2b f0 01 	movl   $0x1,0xf02bbe18
f0100049:	00 00 00 
f010004c:	90                   	nop
f010004d:	5d                   	pop    %ebp
f010004e:	c3                   	ret    

f010004f <setUHeapPlacementStrategyFIRSTFIT>:

//***********************************
/*2015*/ //USER HEAP STRATEGIES
uint32 _UHeapPlacementStrategy;

static inline void setUHeapPlacementStrategyFIRSTFIT(){_UHeapPlacementStrategy = UHP_PLACE_FIRSTFIT;}
f010004f:	55                   	push   %ebp
f0100050:	89 e5                	mov    %esp,%ebp
f0100052:	c7 05 ec bd 2b f0 01 	movl   $0x1,0xf02bbdec
f0100059:	00 00 00 
f010005c:	90                   	nop
f010005d:	5d                   	pop    %ebp
f010005e:	c3                   	ret    

f010005f <FOS_initialize>:
void print_welcome_message();
//=======================================

//First ever function called in FOS kernel
void FOS_initialize()
{
f010005f:	55                   	push   %ebp
f0100060:	89 e5                	mov    %esp,%ebp
f0100062:	83 ec 08             	sub    $0x8,%esp
	extern char start_of_uninitialized_data_section[], end_of_kernel[];

	// Before doing anything else,
	// clear the uninitialized global data (BSS) section of our program, from start_of_uninitialized_data_section to end_of_kernel
	// This ensures that all static/global variables start with zero value.
	memset(start_of_uninitialized_data_section, 0, end_of_kernel - start_of_uninitialized_data_section);
f0100065:	ba 6c e5 2d f0       	mov    $0xf02de56c,%edx
f010006a:	b8 06 2f 25 f0       	mov    $0xf0252f06,%eax
f010006f:	29 c2                	sub    %eax,%edx
f0100071:	89 d0                	mov    %edx,%eax
f0100073:	83 ec 04             	sub    $0x4,%esp
f0100076:	50                   	push   %eax
f0100077:	6a 00                	push   $0x0
f0100079:	68 06 2f 25 f0       	push   $0xf0252f06
f010007e:	e8 a8 ef 02 00       	call   f012f02b <memset>
f0100083:	83 c4 10             	add    $0x10,%esp

	/*2022*/
	scheduler_status = SCH_UNINITIALIZED;
f0100086:	c7 05 14 be 2b f0 ff 	movl   $0xffffffff,0xf02bbe14
f010008d:	ff ff ff 

	// Initialize the console.
	// Can't call cprintf until after we do this!
	console_initialize();
f0100090:	e8 e4 0c 00 00       	call   f0100d79 <console_initialize>

	//print welcome message
	print_welcome_message();
f0100095:	e8 9d 00 00 00       	call   f0100137 <print_welcome_message>

	// Lab 2 memory management initialization functions
	detect_memory();
f010009a:	e8 d6 6a 00 00       	call   f0106b75 <detect_memory>
	initialize_kernel_VM();
f010009f:	e8 af 66 00 00       	call   f0106753 <initialize_kernel_VM>
	initialize_paging();
f01000a4:	e8 2a 6e 00 00       	call   f0106ed3 <initialize_paging>
	//	page_check();

	// Lab 3 user environment initialization functions
	env_init();
f01000a9:	e8 17 9a 00 00       	call   f0109ac5 <env_init>
	idt_init();
f01000ae:	e8 39 af 00 00       	call   f010afec <idt_init>
	//2021
	//setPageReplacmentAlgorithmNchanceCLOCK();
	//setPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX);
	//setPageReplacmentAlgorithmFIFO();
	//setPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX);
	setPageReplacmentAlgorithmFIFO();
f01000b3:	e8 7f d6 00 00       	call   f010d737 <setPageReplacmentAlgorithmFIFO>
	setUHeapPlacementStrategyFIRSTFIT();
f01000b8:	e8 92 ff ff ff       	call   f010004f <setUHeapPlacementStrategyFIRSTFIT>
	setKHeapPlacementStrategyFIRSTFIT();
f01000bd:	e8 7d ff ff ff       	call   f010003f <setKHeapPlacementStrategyFIRSTFIT>
		test_initialize_dyn_block_system(freeFrames_before, freeDiskFrames_before, freeFrames_after, freeDiskFrames_after);
	}
	MAX_SHARES = (KERNEL_SHARES_ARR_INIT_SIZE) / sizeof(struct Share);
	MAX_SEMAPHORES = (KERNEL_SEMAPHORES_ARR_INIT_SIZE) / sizeof(struct Semaphore);
#endif
	create_shares_array(MAX_SHARES);
f01000c2:	83 ec 0c             	sub    $0xc,%esp
f01000c5:	6a 64                	push   $0x64
f01000c7:	e8 d9 79 00 00       	call   f0107aa5 <create_shares_array>
f01000cc:	83 c4 10             	add    $0x10,%esp
	create_semaphores_array(MAX_SEMAPHORES);
f01000cf:	83 ec 0c             	sub    $0xc,%esp
f01000d2:	6a 64                	push   $0x64
f01000d4:	e8 48 d8 00 00       	call   f010d921 <create_semaphores_array>
f01000d9:	83 c4 10             	add    $0x10,%esp


	enableBuffering(0);
f01000dc:	83 ec 0c             	sub    $0xc,%esp
f01000df:	6a 00                	push   $0x0
f01000e1:	e8 4e d7 00 00       	call   f010d834 <enableBuffering>
f01000e6:	83 c4 10             	add    $0x10,%esp
	//enableModifiedBuffer(1) ;
	enableModifiedBuffer(0) ;
f01000e9:	83 ec 0c             	sub    $0xc,%esp
f01000ec:	6a 00                	push   $0x0
f01000ee:	e8 29 d7 00 00       	call   f010d81c <enableModifiedBuffer>
f01000f3:	83 c4 10             	add    $0x10,%esp
	setModifiedBufferLength(1000);
f01000f6:	83 ec 0c             	sub    $0xc,%esp
f01000f9:	68 e8 03 00 00       	push   $0x3e8
f01000fe:	e8 49 d7 00 00       	call   f010d84c <setModifiedBufferLength>
f0100103:	83 c4 10             	add    $0x10,%esp

	// Lab 4 multitasking initialization functions
	pic_init();
f0100106:	e8 c2 64 00 00       	call   f01065cd <pic_init>
	sched_init() ;
f010010b:	e8 bf 60 00 00       	call   f01061cf <sched_init>
	//Project initializations

	// start the kernel command prompt.
	while (1==1)
	{
		cprintf("\nWelcome to the FOS kernel command prompt!\n");
f0100110:	83 ec 0c             	sub    $0xc,%esp
f0100113:	68 60 03 13 f0       	push   $0xf0130360
f0100118:	e8 14 0d 00 00       	call   f0100e31 <cprintf>
f010011d:	83 c4 10             	add    $0x10,%esp
		cprintf("Type 'help' for a list of commands.\n");
f0100120:	83 ec 0c             	sub    $0xc,%esp
f0100123:	68 8c 03 13 f0       	push   $0xf013038c
f0100128:	e8 04 0d 00 00       	call   f0100e31 <cprintf>
f010012d:	83 c4 10             	add    $0x10,%esp
		run_command_prompt();
f0100130:	e8 1b 1a 00 00       	call   f0101b50 <run_command_prompt>
	}
f0100135:	eb d9                	jmp    f0100110 <FOS_initialize+0xb1>

f0100137 <print_welcome_message>:
}


void print_welcome_message()
{
f0100137:	55                   	push   %ebp
f0100138:	89 e5                	mov    %esp,%ebp
f010013a:	83 ec 08             	sub    $0x8,%esp
	cprintf("\n\n\n");
f010013d:	83 ec 0c             	sub    $0xc,%esp
f0100140:	68 b1 03 13 f0       	push   $0xf01303b1
f0100145:	e8 e7 0c 00 00       	call   f0100e31 <cprintf>
f010014a:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
f010014d:	83 ec 0c             	sub    $0xc,%esp
f0100150:	68 b8 03 13 f0       	push   $0xf01303b8
f0100155:	e8 d7 0c 00 00       	call   f0100e31 <cprintf>
f010015a:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                                                             !!\n");
f010015d:	83 ec 0c             	sub    $0xc,%esp
f0100160:	68 00 04 13 f0       	push   $0xf0130400
f0100165:	e8 c7 0c 00 00       	call   f0100e31 <cprintf>
f010016a:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                   !! FCIS says HELLO !!                     !!\n");
f010016d:	83 ec 0c             	sub    $0xc,%esp
f0100170:	68 48 04 13 f0       	push   $0xf0130448
f0100175:	e8 b7 0c 00 00       	call   f0100e31 <cprintf>
f010017a:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                                                             !!\n");
f010017d:	83 ec 0c             	sub    $0xc,%esp
f0100180:	68 00 04 13 f0       	push   $0xf0130400
f0100185:	e8 a7 0c 00 00       	call   f0100e31 <cprintf>
f010018a:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
f010018d:	83 ec 0c             	sub    $0xc,%esp
f0100190:	68 b8 03 13 f0       	push   $0xf01303b8
f0100195:	e8 97 0c 00 00       	call   f0100e31 <cprintf>
f010019a:	83 c4 10             	add    $0x10,%esp
	cprintf("\n\n\n\n");
f010019d:	83 ec 0c             	sub    $0xc,%esp
f01001a0:	68 8d 04 13 f0       	push   $0xf013048d
f01001a5:	e8 87 0c 00 00       	call   f0100e31 <cprintf>
f01001aa:	83 c4 10             	add    $0x10,%esp
}
f01001ad:	90                   	nop
f01001ae:	c9                   	leave  
f01001af:	c3                   	ret    

f01001b0 <_panic>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit the curenv and schedule the next environment.
 */
void _panic(const char *file, int line, const char *fmt,...)
{
f01001b0:	55                   	push   %ebp
f01001b1:	89 e5                	mov    %esp,%ebp
f01001b3:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f01001b6:	8b 45 10             	mov    0x10(%ebp),%eax
f01001b9:	a3 20 2f 25 f0       	mov    %eax,0xf0252f20

	va_start(ap, fmt);
f01001be:	8d 45 10             	lea    0x10(%ebp),%eax
f01001c1:	83 c0 04             	add    $0x4,%eax
f01001c4:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f01001c7:	83 ec 04             	sub    $0x4,%esp
f01001ca:	ff 75 0c             	pushl  0xc(%ebp)
f01001cd:	ff 75 08             	pushl  0x8(%ebp)
f01001d0:	68 92 04 13 f0       	push   $0xf0130492
f01001d5:	e8 57 0c 00 00       	call   f0100e31 <cprintf>
f01001da:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f01001dd:	8b 45 10             	mov    0x10(%ebp),%eax
f01001e0:	83 ec 08             	sub    $0x8,%esp
f01001e3:	ff 75 f4             	pushl  -0xc(%ebp)
f01001e6:	50                   	push   %eax
f01001e7:	e8 1c 0c 00 00       	call   f0100e08 <vcprintf>
f01001ec:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f01001ef:	83 ec 0c             	sub    $0xc,%esp
f01001f2:	68 ab 04 13 f0       	push   $0xf01304ab
f01001f7:	e8 35 0c 00 00       	call   f0100e31 <cprintf>
f01001fc:	83 c4 10             	add    $0x10,%esp
	va_end(ap);

	dead:
	/* break into the fos scheduler */
	//2013: Check if the panic occur when running an environment
	if (curenv != NULL && curenv->env_status == ENV_RUNNABLE)
f01001ff:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f0100204:	85 c0                	test   %eax,%eax
f0100206:	74 12                	je     f010021a <_panic+0x6a>
f0100208:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f010020d:	8b 40 54             	mov    0x54(%eax),%eax
f0100210:	83 f8 02             	cmp    $0x2,%eax
f0100213:	75 05                	jne    f010021a <_panic+0x6a>
	{
		//2015
		env_exit();
f0100215:	e8 95 97 00 00       	call   f01099af <env_exit>
		//env_run_cmd_prmpt() ;
	}

	/*2022*///Check if the scheduler is successfully initialized or not
	if (scheduler_status != SCH_UNINITIALIZED)
f010021a:	a1 14 be 2b f0       	mov    0xf02bbe14,%eax
f010021f:	83 f8 ff             	cmp    $0xffffffff,%eax
f0100222:	74 1b                	je     f010023f <_panic+0x8f>
	{
		cprintf("scheduler_status=%d\n", scheduler_status);
f0100224:	a1 14 be 2b f0       	mov    0xf02bbe14,%eax
f0100229:	83 ec 08             	sub    $0x8,%esp
f010022c:	50                   	push   %eax
f010022d:	68 ad 04 13 f0       	push   $0xf01304ad
f0100232:	e8 fa 0b 00 00       	call   f0100e31 <cprintf>
f0100237:	83 c4 10             	add    $0x10,%esp
		//2015
		fos_scheduler();
f010023a:	e8 da 5f 00 00       	call   f0106219 <fos_scheduler>
	}
	else
	{
		curenv = NULL;
f010023f:	c7 05 74 31 25 f0 00 	movl   $0x0,0xf0253174
f0100246:	00 00 00 
		lcr3(phys_page_directory);
f0100249:	a1 70 be 2b f0       	mov    0xf02bbe70,%eax
f010024e:	89 45 f0             	mov    %eax,-0x10(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0100251:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0100254:	0f 22 d8             	mov    %eax,%cr3
		while (1)
			run_command_prompt(NULL);
f0100257:	83 ec 0c             	sub    $0xc,%esp
f010025a:	6a 00                	push   $0x0
f010025c:	e8 ef 18 00 00       	call   f0101b50 <run_command_prompt>
f0100261:	83 c4 10             	add    $0x10,%esp
f0100264:	eb f1                	jmp    f0100257 <_panic+0xa7>

f0100266 <_panic_all>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit all env's and then enters the kernel command prompt.
 */
void _panic_all(const char *file, int line, const char *fmt,...)
{
f0100266:	55                   	push   %ebp
f0100267:	89 e5                	mov    %esp,%ebp
f0100269:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f010026c:	8b 45 10             	mov    0x10(%ebp),%eax
f010026f:	a3 20 2f 25 f0       	mov    %eax,0xf0252f20

	va_start(ap, fmt);
f0100274:	8d 45 10             	lea    0x10(%ebp),%eax
f0100277:	83 c0 04             	add    $0x4,%eax
f010027a:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f010027d:	83 ec 04             	sub    $0x4,%esp
f0100280:	ff 75 0c             	pushl  0xc(%ebp)
f0100283:	ff 75 08             	pushl  0x8(%ebp)
f0100286:	68 92 04 13 f0       	push   $0xf0130492
f010028b:	e8 a1 0b 00 00       	call   f0100e31 <cprintf>
f0100290:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f0100293:	8b 45 10             	mov    0x10(%ebp),%eax
f0100296:	83 ec 08             	sub    $0x8,%esp
f0100299:	ff 75 f4             	pushl  -0xc(%ebp)
f010029c:	50                   	push   %eax
f010029d:	e8 66 0b 00 00       	call   f0100e08 <vcprintf>
f01002a2:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f01002a5:	83 ec 0c             	sub    $0xc,%esp
f01002a8:	68 ab 04 13 f0       	push   $0xf01304ab
f01002ad:	e8 7f 0b 00 00       	call   f0100e31 <cprintf>
f01002b2:	83 c4 10             	add    $0x10,%esp
	va_end(ap);

	dead:
	/* break into the fos scheduler */
	/*2022*///Check if the scheduler is successfully initialized or not
	if (scheduler_status != SCH_UNINITIALIZED)
f01002b5:	a1 14 be 2b f0       	mov    0xf02bbe14,%eax
f01002ba:	83 f8 ff             	cmp    $0xffffffff,%eax
f01002bd:	74 27                	je     f01002e6 <_panic_all+0x80>
	{
		//exit all ready env's
		sched_exit_all_ready_envs();
f01002bf:	e8 cc 5c 00 00       	call   f0105f90 <sched_exit_all_ready_envs>
		if (curenv != NULL)
f01002c4:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f01002c9:	85 c0                	test   %eax,%eax
f01002cb:	74 14                	je     f01002e1 <_panic_all+0x7b>
		{
			//cprintf("exit curenv...........\n");
			sched_exit_env(curenv->env_id);
f01002cd:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f01002d2:	8b 40 4c             	mov    0x4c(%eax),%eax
f01002d5:	83 ec 0c             	sub    $0xc,%esp
f01002d8:	50                   	push   %eax
f01002d9:	e8 f3 50 00 00       	call   f01053d1 <sched_exit_env>
f01002de:	83 c4 10             	add    $0x10,%esp
			//env_run_cmd_prmpt() ;
		}

		fos_scheduler();
f01002e1:	e8 33 5f 00 00       	call   f0106219 <fos_scheduler>
	}
	else
	{
		curenv = NULL;
f01002e6:	c7 05 74 31 25 f0 00 	movl   $0x0,0xf0253174
f01002ed:	00 00 00 
		lcr3(phys_page_directory);
f01002f0:	a1 70 be 2b f0       	mov    0xf02bbe70,%eax
f01002f5:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01002f8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01002fb:	0f 22 d8             	mov    %eax,%cr3
		while (1)
			run_command_prompt(NULL);
f01002fe:	83 ec 0c             	sub    $0xc,%esp
f0100301:	6a 00                	push   $0x0
f0100303:	e8 48 18 00 00       	call   f0101b50 <run_command_prompt>
f0100308:	83 c4 10             	add    $0x10,%esp
f010030b:	eb f1                	jmp    f01002fe <_panic_all+0x98>

f010030d <_panic_into_prompt>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit the curenv (if any) and break into the command prompt.
 */
void _panic_into_prompt(const char *file, int line, const char *fmt,...)
{
f010030d:	55                   	push   %ebp
f010030e:	89 e5                	mov    %esp,%ebp
f0100310:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f0100313:	8b 45 10             	mov    0x10(%ebp),%eax
f0100316:	a3 20 2f 25 f0       	mov    %eax,0xf0252f20

	va_start(ap, fmt);
f010031b:	8d 45 10             	lea    0x10(%ebp),%eax
f010031e:	83 c0 04             	add    $0x4,%eax
f0100321:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f0100324:	83 ec 04             	sub    $0x4,%esp
f0100327:	ff 75 0c             	pushl  0xc(%ebp)
f010032a:	ff 75 08             	pushl  0x8(%ebp)
f010032d:	68 92 04 13 f0       	push   $0xf0130492
f0100332:	e8 fa 0a 00 00       	call   f0100e31 <cprintf>
f0100337:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f010033a:	8b 45 10             	mov    0x10(%ebp),%eax
f010033d:	83 ec 08             	sub    $0x8,%esp
f0100340:	ff 75 f4             	pushl  -0xc(%ebp)
f0100343:	50                   	push   %eax
f0100344:	e8 bf 0a 00 00       	call   f0100e08 <vcprintf>
f0100349:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f010034c:	83 ec 0c             	sub    $0xc,%esp
f010034f:	68 ab 04 13 f0       	push   $0xf01304ab
f0100354:	e8 d8 0a 00 00       	call   f0100e31 <cprintf>
f0100359:	83 c4 10             	add    $0x10,%esp
	va_end(ap);

	dead:
	/* break into the fos scheduler */
	//2013: Check if the panic occur when running an environment
	if (curenv != NULL && curenv->env_status == ENV_RUNNABLE)
f010035c:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f0100361:	85 c0                	test   %eax,%eax
f0100363:	74 28                	je     f010038d <_panic_into_prompt+0x80>
f0100365:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f010036a:	8b 40 54             	mov    0x54(%eax),%eax
f010036d:	83 f8 02             	cmp    $0x2,%eax
f0100370:	75 1b                	jne    f010038d <_panic_into_prompt+0x80>
	{
		sched_insert_exit(curenv);
f0100372:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f0100377:	83 ec 0c             	sub    $0xc,%esp
f010037a:	50                   	push   %eax
f010037b:	e8 cb 4e 00 00       	call   f010524b <sched_insert_exit>
f0100380:	83 c4 10             	add    $0x10,%esp
		curenv = NULL;
f0100383:	c7 05 74 31 25 f0 00 	movl   $0x0,0xf0253174
f010038a:	00 00 00 
	}

	lcr3(phys_page_directory);
f010038d:	a1 70 be 2b f0       	mov    0xf02bbe70,%eax
f0100392:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0100395:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0100398:	0f 22 d8             	mov    %eax,%cr3

	/*2022*///Check if the scheduler is successfully initialized or not
	if (scheduler_status != SCH_UNINITIALIZED)
f010039b:	a1 14 be 2b f0       	mov    0xf02bbe14,%eax
f01003a0:	83 f8 ff             	cmp    $0xffffffff,%eax
f01003a3:	74 0a                	je     f01003af <_panic_into_prompt+0xa2>
	{
		scheduler_status = SCH_STOPPED;
f01003a5:	c7 05 14 be 2b f0 00 	movl   $0x0,0xf02bbe14
f01003ac:	00 00 00 
	}
	while (1)
		run_command_prompt(NULL);
f01003af:	83 ec 0c             	sub    $0xc,%esp
f01003b2:	6a 00                	push   $0x0
f01003b4:	e8 97 17 00 00       	call   f0101b50 <run_command_prompt>
f01003b9:	83 c4 10             	add    $0x10,%esp
f01003bc:	eb f1                	jmp    f01003af <_panic_into_prompt+0xa2>

f01003be <_warn>:
}

/* like panic, but don't enters the kernel command prompt*/
void _warn(const char *file, int line, const char *fmt,...)
{
f01003be:	55                   	push   %ebp
f01003bf:	89 e5                	mov    %esp,%ebp
f01003c1:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	va_start(ap, fmt);
f01003c4:	8d 45 10             	lea    0x10(%ebp),%eax
f01003c7:	83 c0 04             	add    $0x4,%eax
f01003ca:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel warning at %s:%d: ", file, line);
f01003cd:	83 ec 04             	sub    $0x4,%esp
f01003d0:	ff 75 0c             	pushl  0xc(%ebp)
f01003d3:	ff 75 08             	pushl  0x8(%ebp)
f01003d6:	68 c2 04 13 f0       	push   $0xf01304c2
f01003db:	e8 51 0a 00 00       	call   f0100e31 <cprintf>
f01003e0:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f01003e3:	8b 45 10             	mov    0x10(%ebp),%eax
f01003e6:	83 ec 08             	sub    $0x8,%esp
f01003e9:	ff 75 f4             	pushl  -0xc(%ebp)
f01003ec:	50                   	push   %eax
f01003ed:	e8 16 0a 00 00       	call   f0100e08 <vcprintf>
f01003f2:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f01003f5:	83 ec 0c             	sub    $0xc,%esp
f01003f8:	68 ab 04 13 f0       	push   $0xf01304ab
f01003fd:	e8 2f 0a 00 00       	call   f0100e31 <cprintf>
f0100402:	83 c4 10             	add    $0x10,%esp
	va_end(ap);
}
f0100405:	90                   	nop
f0100406:	c9                   	leave  
f0100407:	c3                   	ret    

f0100408 <serial_proc_data>:

static bool serial_exists;

int
serial_proc_data(void)
{
f0100408:	55                   	push   %ebp
f0100409:	89 e5                	mov    %esp,%ebp
f010040b:	83 ec 10             	sub    $0x10,%esp
f010040e:	c7 45 f8 fd 03 00 00 	movl   $0x3fd,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100415:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0100418:	89 c2                	mov    %eax,%edx
f010041a:	ec                   	in     (%dx),%al
f010041b:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f010041e:	8a 45 f7             	mov    -0x9(%ebp),%al
	if (!(inb(COM1+COM_LSR) & COM_LSR_DATA))
f0100421:	0f b6 c0             	movzbl %al,%eax
f0100424:	83 e0 01             	and    $0x1,%eax
f0100427:	85 c0                	test   %eax,%eax
f0100429:	75 07                	jne    f0100432 <serial_proc_data+0x2a>
		return -1;
f010042b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0100430:	eb 16                	jmp    f0100448 <serial_proc_data+0x40>
f0100432:	c7 45 fc f8 03 00 00 	movl   $0x3f8,-0x4(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100439:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010043c:	89 c2                	mov    %eax,%edx
f010043e:	ec                   	in     (%dx),%al
f010043f:	88 45 f6             	mov    %al,-0xa(%ebp)
	return data;
f0100442:	8a 45 f6             	mov    -0xa(%ebp),%al
	return inb(COM1+COM_RX);
f0100445:	0f b6 c0             	movzbl %al,%eax
}
f0100448:	c9                   	leave  
f0100449:	c3                   	ret    

f010044a <serial_intr>:

void
serial_intr(void)
{
f010044a:	55                   	push   %ebp
f010044b:	89 e5                	mov    %esp,%ebp
f010044d:	83 ec 08             	sub    $0x8,%esp
	if (serial_exists)
f0100450:	a1 44 2f 25 f0       	mov    0xf0252f44,%eax
f0100455:	85 c0                	test   %eax,%eax
f0100457:	74 10                	je     f0100469 <serial_intr+0x1f>
		cons_intr(serial_proc_data);
f0100459:	83 ec 0c             	sub    $0xc,%esp
f010045c:	68 08 04 10 f0       	push   $0xf0100408
f0100461:	e8 58 07 00 00       	call   f0100bbe <cons_intr>
f0100466:	83 c4 10             	add    $0x10,%esp
}
f0100469:	90                   	nop
f010046a:	c9                   	leave  
f010046b:	c3                   	ret    

f010046c <serial_init>:

void
serial_init(void)
{
f010046c:	55                   	push   %ebp
f010046d:	89 e5                	mov    %esp,%ebp
f010046f:	83 ec 40             	sub    $0x40,%esp
f0100472:	c7 45 fc fa 03 00 00 	movl   $0x3fa,-0x4(%ebp)
f0100479:	c6 45 ce 00          	movb   $0x0,-0x32(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f010047d:	8a 45 ce             	mov    -0x32(%ebp),%al
f0100480:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0100483:	ee                   	out    %al,(%dx)
f0100484:	c7 45 f8 fb 03 00 00 	movl   $0x3fb,-0x8(%ebp)
f010048b:	c6 45 cf 80          	movb   $0x80,-0x31(%ebp)
f010048f:	8a 45 cf             	mov    -0x31(%ebp),%al
f0100492:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0100495:	ee                   	out    %al,(%dx)
f0100496:	c7 45 f4 f8 03 00 00 	movl   $0x3f8,-0xc(%ebp)
f010049d:	c6 45 d0 0c          	movb   $0xc,-0x30(%ebp)
f01004a1:	8a 45 d0             	mov    -0x30(%ebp),%al
f01004a4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01004a7:	ee                   	out    %al,(%dx)
f01004a8:	c7 45 f0 f9 03 00 00 	movl   $0x3f9,-0x10(%ebp)
f01004af:	c6 45 d1 00          	movb   $0x0,-0x2f(%ebp)
f01004b3:	8a 45 d1             	mov    -0x2f(%ebp),%al
f01004b6:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01004b9:	ee                   	out    %al,(%dx)
f01004ba:	c7 45 ec fb 03 00 00 	movl   $0x3fb,-0x14(%ebp)
f01004c1:	c6 45 d2 03          	movb   $0x3,-0x2e(%ebp)
f01004c5:	8a 45 d2             	mov    -0x2e(%ebp),%al
f01004c8:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01004cb:	ee                   	out    %al,(%dx)
f01004cc:	c7 45 e8 fc 03 00 00 	movl   $0x3fc,-0x18(%ebp)
f01004d3:	c6 45 d3 00          	movb   $0x0,-0x2d(%ebp)
f01004d7:	8a 45 d3             	mov    -0x2d(%ebp),%al
f01004da:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01004dd:	ee                   	out    %al,(%dx)
f01004de:	c7 45 e4 f9 03 00 00 	movl   $0x3f9,-0x1c(%ebp)
f01004e5:	c6 45 d4 01          	movb   $0x1,-0x2c(%ebp)
f01004e9:	8a 45 d4             	mov    -0x2c(%ebp),%al
f01004ec:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01004ef:	ee                   	out    %al,(%dx)
f01004f0:	c7 45 e0 fd 03 00 00 	movl   $0x3fd,-0x20(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01004f7:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01004fa:	89 c2                	mov    %eax,%edx
f01004fc:	ec                   	in     (%dx),%al
f01004fd:	88 45 d5             	mov    %al,-0x2b(%ebp)
	return data;
f0100500:	8a 45 d5             	mov    -0x2b(%ebp),%al
	// Enable rcv interrupts
	outb(COM1+COM_IER, COM_IER_RDI);

	// Clear any preexisting overrun indications and interrupts
	// Serial port doesn't exist if COM_LSR returns 0xFF
	serial_exists = (inb(COM1+COM_LSR) != 0xFF);
f0100503:	3c ff                	cmp    $0xff,%al
f0100505:	0f 95 c0             	setne  %al
f0100508:	0f b6 c0             	movzbl %al,%eax
f010050b:	a3 44 2f 25 f0       	mov    %eax,0xf0252f44
f0100510:	c7 45 dc fa 03 00 00 	movl   $0x3fa,-0x24(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100517:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010051a:	89 c2                	mov    %eax,%edx
f010051c:	ec                   	in     (%dx),%al
f010051d:	88 45 d6             	mov    %al,-0x2a(%ebp)
f0100520:	c7 45 d8 f8 03 00 00 	movl   $0x3f8,-0x28(%ebp)
f0100527:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010052a:	89 c2                	mov    %eax,%edx
f010052c:	ec                   	in     (%dx),%al
f010052d:	88 45 d7             	mov    %al,-0x29(%ebp)
	(void) inb(COM1+COM_IIR);
	(void) inb(COM1+COM_RX);

}
f0100530:	90                   	nop
f0100531:	c9                   	leave  
f0100532:	c3                   	ret    

f0100533 <delay>:
// page.

// Stupid I/O delay routine necessitated by historical PC design flaws
static void
delay(void)
{
f0100533:	55                   	push   %ebp
f0100534:	89 e5                	mov    %esp,%ebp
f0100536:	83 ec 20             	sub    $0x20,%esp
f0100539:	c7 45 fc 84 00 00 00 	movl   $0x84,-0x4(%ebp)
f0100540:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100543:	89 c2                	mov    %eax,%edx
f0100545:	ec                   	in     (%dx),%al
f0100546:	88 45 ec             	mov    %al,-0x14(%ebp)
f0100549:	c7 45 f8 84 00 00 00 	movl   $0x84,-0x8(%ebp)
f0100550:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0100553:	89 c2                	mov    %eax,%edx
f0100555:	ec                   	in     (%dx),%al
f0100556:	88 45 ed             	mov    %al,-0x13(%ebp)
f0100559:	c7 45 f4 84 00 00 00 	movl   $0x84,-0xc(%ebp)
f0100560:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0100563:	89 c2                	mov    %eax,%edx
f0100565:	ec                   	in     (%dx),%al
f0100566:	88 45 ee             	mov    %al,-0x12(%ebp)
f0100569:	c7 45 f0 84 00 00 00 	movl   $0x84,-0x10(%ebp)
f0100570:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0100573:	89 c2                	mov    %eax,%edx
f0100575:	ec                   	in     (%dx),%al
f0100576:	88 45 ef             	mov    %al,-0x11(%ebp)
	inb(0x84);
	inb(0x84);
	inb(0x84);
	inb(0x84);
}
f0100579:	90                   	nop
f010057a:	c9                   	leave  
f010057b:	c3                   	ret    

f010057c <lpt_putc>:

static void
lpt_putc(int c)
{
f010057c:	55                   	push   %ebp
f010057d:	89 e5                	mov    %esp,%ebp
f010057f:	83 ec 20             	sub    $0x20,%esp
	int i;

	for (i = 0; !(inb(0x378+1) & 0x80) && i < 2800; i++) //12800
f0100582:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0100589:	eb 08                	jmp    f0100593 <lpt_putc+0x17>
		delay();
f010058b:	e8 a3 ff ff ff       	call   f0100533 <delay>
static void
lpt_putc(int c)
{
	int i;

	for (i = 0; !(inb(0x378+1) & 0x80) && i < 2800; i++) //12800
f0100590:	ff 45 fc             	incl   -0x4(%ebp)
f0100593:	c7 45 ec 79 03 00 00 	movl   $0x379,-0x14(%ebp)
f010059a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010059d:	89 c2                	mov    %eax,%edx
f010059f:	ec                   	in     (%dx),%al
f01005a0:	88 45 eb             	mov    %al,-0x15(%ebp)
	return data;
f01005a3:	8a 45 eb             	mov    -0x15(%ebp),%al
f01005a6:	84 c0                	test   %al,%al
f01005a8:	78 09                	js     f01005b3 <lpt_putc+0x37>
f01005aa:	81 7d fc ef 0a 00 00 	cmpl   $0xaef,-0x4(%ebp)
f01005b1:	7e d8                	jle    f010058b <lpt_putc+0xf>
		delay();
	outb(0x378+0, c);
f01005b3:	8b 45 08             	mov    0x8(%ebp),%eax
f01005b6:	0f b6 c0             	movzbl %al,%eax
f01005b9:	c7 45 f4 78 03 00 00 	movl   $0x378,-0xc(%ebp)
f01005c0:	88 45 e8             	mov    %al,-0x18(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01005c3:	8a 45 e8             	mov    -0x18(%ebp),%al
f01005c6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01005c9:	ee                   	out    %al,(%dx)
f01005ca:	c7 45 f0 7a 03 00 00 	movl   $0x37a,-0x10(%ebp)
f01005d1:	c6 45 e9 0d          	movb   $0xd,-0x17(%ebp)
f01005d5:	8a 45 e9             	mov    -0x17(%ebp),%al
f01005d8:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01005db:	ee                   	out    %al,(%dx)
f01005dc:	c7 45 f8 7a 03 00 00 	movl   $0x37a,-0x8(%ebp)
f01005e3:	c6 45 ea 08          	movb   $0x8,-0x16(%ebp)
f01005e7:	8a 45 ea             	mov    -0x16(%ebp),%al
f01005ea:	8b 55 f8             	mov    -0x8(%ebp),%edx
f01005ed:	ee                   	out    %al,(%dx)
	outb(0x378+2, 0x08|0x04|0x01);
	outb(0x378+2, 0x08);
}
f01005ee:	90                   	nop
f01005ef:	c9                   	leave  
f01005f0:	c3                   	ret    

f01005f1 <cga_init>:
static uint16 *crt_buf;
static uint16 crt_pos;

void
cga_init(void)
{
f01005f1:	55                   	push   %ebp
f01005f2:	89 e5                	mov    %esp,%ebp
f01005f4:	83 ec 20             	sub    $0x20,%esp
	volatile uint16 *cp;
	uint16 was;
	unsigned pos;

	cp = (uint16*) (KERNEL_BASE + CGA_BUF);
f01005f7:	c7 45 fc 00 80 0b f0 	movl   $0xf00b8000,-0x4(%ebp)
	was = *cp;
f01005fe:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100601:	66 8b 00             	mov    (%eax),%ax
f0100604:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
	*cp = (uint16) 0xA55A;
f0100608:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010060b:	66 c7 00 5a a5       	movw   $0xa55a,(%eax)
	if (*cp != 0xA55A) {
f0100610:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100613:	66 8b 00             	mov    (%eax),%ax
f0100616:	66 3d 5a a5          	cmp    $0xa55a,%ax
f010061a:	74 13                	je     f010062f <cga_init+0x3e>
		cp = (uint16*) (KERNEL_BASE + MONO_BUF);
f010061c:	c7 45 fc 00 00 0b f0 	movl   $0xf00b0000,-0x4(%ebp)
		addr_6845 = MONO_BASE;
f0100623:	c7 05 48 2f 25 f0 b4 	movl   $0x3b4,0xf0252f48
f010062a:	03 00 00 
f010062d:	eb 14                	jmp    f0100643 <cga_init+0x52>
	} else {
		*cp = was;
f010062f:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0100632:	66 8b 45 fa          	mov    -0x6(%ebp),%ax
f0100636:	66 89 02             	mov    %ax,(%edx)
		addr_6845 = CGA_BASE;
f0100639:	c7 05 48 2f 25 f0 d4 	movl   $0x3d4,0xf0252f48
f0100640:	03 00 00 
	}

	/* Extract cursor location */
	outb(addr_6845, 14);
f0100643:	a1 48 2f 25 f0       	mov    0xf0252f48,%eax
f0100648:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010064b:	c6 45 e0 0e          	movb   $0xe,-0x20(%ebp)
f010064f:	8a 45 e0             	mov    -0x20(%ebp),%al
f0100652:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100655:	ee                   	out    %al,(%dx)
	pos = inb(addr_6845 + 1) << 8;
f0100656:	a1 48 2f 25 f0       	mov    0xf0252f48,%eax
f010065b:	40                   	inc    %eax
f010065c:	89 45 ec             	mov    %eax,-0x14(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010065f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0100662:	89 c2                	mov    %eax,%edx
f0100664:	ec                   	in     (%dx),%al
f0100665:	88 45 e1             	mov    %al,-0x1f(%ebp)
	return data;
f0100668:	8a 45 e1             	mov    -0x1f(%ebp),%al
f010066b:	0f b6 c0             	movzbl %al,%eax
f010066e:	c1 e0 08             	shl    $0x8,%eax
f0100671:	89 45 f0             	mov    %eax,-0x10(%ebp)
	outb(addr_6845, 15);
f0100674:	a1 48 2f 25 f0       	mov    0xf0252f48,%eax
f0100679:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010067c:	c6 45 e2 0f          	movb   $0xf,-0x1e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0100680:	8a 45 e2             	mov    -0x1e(%ebp),%al
f0100683:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0100686:	ee                   	out    %al,(%dx)
	pos |= inb(addr_6845 + 1);
f0100687:	a1 48 2f 25 f0       	mov    0xf0252f48,%eax
f010068c:	40                   	inc    %eax
f010068d:	89 45 e4             	mov    %eax,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100690:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0100693:	89 c2                	mov    %eax,%edx
f0100695:	ec                   	in     (%dx),%al
f0100696:	88 45 e3             	mov    %al,-0x1d(%ebp)
	return data;
f0100699:	8a 45 e3             	mov    -0x1d(%ebp),%al
f010069c:	0f b6 c0             	movzbl %al,%eax
f010069f:	09 45 f0             	or     %eax,-0x10(%ebp)

	crt_buf = (uint16*) cp;
f01006a2:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01006a5:	a3 4c 2f 25 f0       	mov    %eax,0xf0252f4c
	crt_pos = pos;
f01006aa:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01006ad:	66 a3 50 2f 25 f0    	mov    %ax,0xf0252f50
}
f01006b3:	90                   	nop
f01006b4:	c9                   	leave  
f01006b5:	c3                   	ret    

f01006b6 <cga_putc>:
//2016: Preliminary backward and forward cursor movement was added to FOS
// 		Thanks to student Abdullah Mohammad Ma3en, 3rd year, and TA Ghada Hamed.

void
cga_putc(int c)
{
f01006b6:	55                   	push   %ebp
f01006b7:	89 e5                	mov    %esp,%ebp
f01006b9:	53                   	push   %ebx
f01006ba:	83 ec 24             	sub    $0x24,%esp
	// if no attribute given, then use black on white
	if (!(c & ~0xFF))
f01006bd:	8b 45 08             	mov    0x8(%ebp),%eax
f01006c0:	b0 00                	mov    $0x0,%al
f01006c2:	85 c0                	test   %eax,%eax
f01006c4:	75 07                	jne    f01006cd <cga_putc+0x17>
		c |= 0x0700;
f01006c6:	81 4d 08 00 07 00 00 	orl    $0x700,0x8(%ebp)

	switch (c & 0xff) {
f01006cd:	8b 45 08             	mov    0x8(%ebp),%eax
f01006d0:	0f b6 c0             	movzbl %al,%eax
f01006d3:	83 f8 0a             	cmp    $0xa,%eax
f01006d6:	74 77                	je     f010074f <cga_putc+0x99>
f01006d8:	83 f8 0a             	cmp    $0xa,%eax
f01006db:	7f 13                	jg     f01006f0 <cga_putc+0x3a>
f01006dd:	83 f8 08             	cmp    $0x8,%eax
f01006e0:	74 2e                	je     f0100710 <cga_putc+0x5a>
f01006e2:	83 f8 09             	cmp    $0x9,%eax
f01006e5:	0f 84 a8 00 00 00    	je     f0100793 <cga_putc+0xdd>
f01006eb:	e9 22 01 00 00       	jmp    f0100812 <cga_putc+0x15c>
f01006f0:	3d e4 00 00 00       	cmp    $0xe4,%eax
f01006f5:	0f 84 de 00 00 00    	je     f01007d9 <cga_putc+0x123>
f01006fb:	3d e5 00 00 00       	cmp    $0xe5,%eax
f0100700:	0f 84 f1 00 00 00    	je     f01007f7 <cga_putc+0x141>
f0100706:	83 f8 0d             	cmp    $0xd,%eax
f0100709:	74 5d                	je     f0100768 <cga_putc+0xb2>
f010070b:	e9 02 01 00 00       	jmp    f0100812 <cga_putc+0x15c>
	case '\b':
		if (crt_pos > 0) {
f0100710:	66 a1 50 2f 25 f0    	mov    0xf0252f50,%ax
f0100716:	66 85 c0             	test   %ax,%ax
f0100719:	0f 84 4f 01 00 00    	je     f010086e <cga_putc+0x1b8>
			crt_pos--;
f010071f:	66 a1 50 2f 25 f0    	mov    0xf0252f50,%ax
f0100725:	48                   	dec    %eax
f0100726:	66 a3 50 2f 25 f0    	mov    %ax,0xf0252f50
			crt_buf[crt_pos] = (c & ~0xff) | ' ';
f010072c:	8b 15 4c 2f 25 f0    	mov    0xf0252f4c,%edx
f0100732:	66 a1 50 2f 25 f0    	mov    0xf0252f50,%ax
f0100738:	0f b7 c0             	movzwl %ax,%eax
f010073b:	01 c0                	add    %eax,%eax
f010073d:	01 c2                	add    %eax,%edx
f010073f:	8b 45 08             	mov    0x8(%ebp),%eax
f0100742:	b0 00                	mov    $0x0,%al
f0100744:	83 c8 20             	or     $0x20,%eax
f0100747:	66 89 02             	mov    %ax,(%edx)
		}
		break;
f010074a:	e9 1f 01 00 00       	jmp    f010086e <cga_putc+0x1b8>
	case '\n':
		crt_pos += CRT_COLS;
f010074f:	66 a1 50 2f 25 f0    	mov    0xf0252f50,%ax
f0100755:	83 c0 50             	add    $0x50,%eax
f0100758:	66 a3 50 2f 25 f0    	mov    %ax,0xf0252f50
		text_length = 0;
f010075e:	c7 05 40 2f 25 f0 00 	movl   $0x0,0xf0252f40
f0100765:	00 00 00 
		/* fallthru */
	case '\r':
		crt_pos -= (crt_pos % CRT_COLS);
f0100768:	66 8b 0d 50 2f 25 f0 	mov    0xf0252f50,%cx
f010076f:	66 a1 50 2f 25 f0    	mov    0xf0252f50,%ax
f0100775:	bb 50 00 00 00       	mov    $0x50,%ebx
f010077a:	ba 00 00 00 00       	mov    $0x0,%edx
f010077f:	66 f7 f3             	div    %bx
f0100782:	89 d0                	mov    %edx,%eax
f0100784:	29 c1                	sub    %eax,%ecx
f0100786:	89 c8                	mov    %ecx,%eax
f0100788:	66 a3 50 2f 25 f0    	mov    %ax,0xf0252f50
		break;
f010078e:	e9 e5 00 00 00       	jmp    f0100878 <cga_putc+0x1c2>
	case '\t':
		cons_putc(' ');
f0100793:	83 ec 0c             	sub    $0xc,%esp
f0100796:	6a 20                	push   $0x20
f0100798:	e8 ba 05 00 00       	call   f0100d57 <cons_putc>
f010079d:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01007a0:	83 ec 0c             	sub    $0xc,%esp
f01007a3:	6a 20                	push   $0x20
f01007a5:	e8 ad 05 00 00       	call   f0100d57 <cons_putc>
f01007aa:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01007ad:	83 ec 0c             	sub    $0xc,%esp
f01007b0:	6a 20                	push   $0x20
f01007b2:	e8 a0 05 00 00       	call   f0100d57 <cons_putc>
f01007b7:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01007ba:	83 ec 0c             	sub    $0xc,%esp
f01007bd:	6a 20                	push   $0x20
f01007bf:	e8 93 05 00 00       	call   f0100d57 <cons_putc>
f01007c4:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01007c7:	83 ec 0c             	sub    $0xc,%esp
f01007ca:	6a 20                	push   $0x20
f01007cc:	e8 86 05 00 00       	call   f0100d57 <cons_putc>
f01007d1:	83 c4 10             	add    $0x10,%esp
		break;
f01007d4:	e9 9f 00 00 00       	jmp    f0100878 <cga_putc+0x1c2>
	case 228:
              if(crt_pos>0)
f01007d9:	66 a1 50 2f 25 f0    	mov    0xf0252f50,%ax
f01007df:	66 85 c0             	test   %ax,%ax
f01007e2:	0f 84 89 00 00 00    	je     f0100871 <cga_putc+0x1bb>
		     crt_pos--;
f01007e8:	66 a1 50 2f 25 f0    	mov    0xf0252f50,%ax
f01007ee:	48                   	dec    %eax
f01007ef:	66 a3 50 2f 25 f0    	mov    %ax,0xf0252f50
		     break;
f01007f5:	eb 7a                	jmp    f0100871 <cga_putc+0x1bb>
	case 229:
		if (crt_pos < CRT_SIZE)
f01007f7:	66 a1 50 2f 25 f0    	mov    0xf0252f50,%ax
f01007fd:	66 3d cf 07          	cmp    $0x7cf,%ax
f0100801:	77 71                	ja     f0100874 <cga_putc+0x1be>
			     crt_pos++;
f0100803:	66 a1 50 2f 25 f0    	mov    0xf0252f50,%ax
f0100809:	40                   	inc    %eax
f010080a:	66 a3 50 2f 25 f0    	mov    %ax,0xf0252f50
			     break;
f0100810:	eb 62                	jmp    f0100874 <cga_putc+0x1be>
	default: {
		if (c != KEY_LF && c != KEY_RT) {
f0100812:	81 7d 08 e4 00 00 00 	cmpl   $0xe4,0x8(%ebp)
f0100819:	74 5c                	je     f0100877 <cga_putc+0x1c1>
f010081b:	81 7d 08 e5 00 00 00 	cmpl   $0xe5,0x8(%ebp)
f0100822:	74 53                	je     f0100877 <cga_putc+0x1c1>
		crt_buf[crt_pos++] = c;		/* write the character */
f0100824:	8b 0d 4c 2f 25 f0    	mov    0xf0252f4c,%ecx
f010082a:	66 a1 50 2f 25 f0    	mov    0xf0252f50,%ax
f0100830:	8d 50 01             	lea    0x1(%eax),%edx
f0100833:	66 89 15 50 2f 25 f0 	mov    %dx,0xf0252f50
f010083a:	0f b7 c0             	movzwl %ax,%eax
f010083d:	01 c0                	add    %eax,%eax
f010083f:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0100842:	8b 45 08             	mov    0x8(%ebp),%eax
f0100845:	66 89 02             	mov    %ax,(%edx)
			if (crt_pos > 1920 + text_length)
f0100848:	66 a1 50 2f 25 f0    	mov    0xf0252f50,%ax
f010084e:	0f b7 c0             	movzwl %ax,%eax
f0100851:	8b 15 40 2f 25 f0    	mov    0xf0252f40,%edx
f0100857:	81 c2 80 07 00 00    	add    $0x780,%edx
f010085d:	39 d0                	cmp    %edx,%eax
f010085f:	7e 16                	jle    f0100877 <cga_putc+0x1c1>
				text_length++;
f0100861:	a1 40 2f 25 f0       	mov    0xf0252f40,%eax
f0100866:	40                   	inc    %eax
f0100867:	a3 40 2f 25 f0       	mov    %eax,0xf0252f40
		}
		break;
f010086c:	eb 09                	jmp    f0100877 <cga_putc+0x1c1>
	case '\b':
		if (crt_pos > 0) {
			crt_pos--;
			crt_buf[crt_pos] = (c & ~0xff) | ' ';
		}
		break;
f010086e:	90                   	nop
f010086f:	eb 07                	jmp    f0100878 <cga_putc+0x1c2>
		cons_putc(' ');
		break;
	case 228:
              if(crt_pos>0)
		     crt_pos--;
		     break;
f0100871:	90                   	nop
f0100872:	eb 04                	jmp    f0100878 <cga_putc+0x1c2>
	case 229:
		if (crt_pos < CRT_SIZE)
			     crt_pos++;
			     break;
f0100874:	90                   	nop
f0100875:	eb 01                	jmp    f0100878 <cga_putc+0x1c2>
		if (c != KEY_LF && c != KEY_RT) {
		crt_buf[crt_pos++] = c;		/* write the character */
			if (crt_pos > 1920 + text_length)
				text_length++;
		}
		break;
f0100877:	90                   	nop
	}
	}

	// What is the purpose of this?
	if (crt_pos >= CRT_SIZE) {
f0100878:	66 a1 50 2f 25 f0    	mov    0xf0252f50,%ax
f010087e:	66 3d cf 07          	cmp    $0x7cf,%ax
f0100882:	76 58                	jbe    f01008dc <cga_putc+0x226>
		int i;

		memcpy(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16));
f0100884:	a1 4c 2f 25 f0       	mov    0xf0252f4c,%eax
f0100889:	8d 90 a0 00 00 00    	lea    0xa0(%eax),%edx
f010088f:	a1 4c 2f 25 f0       	mov    0xf0252f4c,%eax
f0100894:	83 ec 04             	sub    $0x4,%esp
f0100897:	68 00 0f 00 00       	push   $0xf00
f010089c:	52                   	push   %edx
f010089d:	50                   	push   %eax
f010089e:	e8 b8 e7 02 00       	call   f012f05b <memcpy>
f01008a3:	83 c4 10             	add    $0x10,%esp
		for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i++)
f01008a6:	c7 45 f4 80 07 00 00 	movl   $0x780,-0xc(%ebp)
f01008ad:	eb 15                	jmp    f01008c4 <cga_putc+0x20e>
			crt_buf[i] = 0x0700 | ' ';
f01008af:	8b 15 4c 2f 25 f0    	mov    0xf0252f4c,%edx
f01008b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01008b8:	01 c0                	add    %eax,%eax
f01008ba:	01 d0                	add    %edx,%eax
f01008bc:	66 c7 00 20 07       	movw   $0x720,(%eax)
	// What is the purpose of this?
	if (crt_pos >= CRT_SIZE) {
		int i;

		memcpy(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16));
		for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i++)
f01008c1:	ff 45 f4             	incl   -0xc(%ebp)
f01008c4:	81 7d f4 cf 07 00 00 	cmpl   $0x7cf,-0xc(%ebp)
f01008cb:	7e e2                	jle    f01008af <cga_putc+0x1f9>
			crt_buf[i] = 0x0700 | ' ';
		crt_pos -= CRT_COLS;
f01008cd:	66 a1 50 2f 25 f0    	mov    0xf0252f50,%ax
f01008d3:	83 e8 50             	sub    $0x50,%eax
f01008d6:	66 a3 50 2f 25 f0    	mov    %ax,0xf0252f50
	}

	/* move that little blinky thing */
	outb(addr_6845, 14);
f01008dc:	a1 48 2f 25 f0       	mov    0xf0252f48,%eax
f01008e1:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01008e4:	c6 45 e0 0e          	movb   $0xe,-0x20(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01008e8:	8a 45 e0             	mov    -0x20(%ebp),%al
f01008eb:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01008ee:	ee                   	out    %al,(%dx)
	outb(addr_6845 + 1, crt_pos >> 8);
f01008ef:	66 a1 50 2f 25 f0    	mov    0xf0252f50,%ax
f01008f5:	66 c1 e8 08          	shr    $0x8,%ax
f01008f9:	0f b6 c0             	movzbl %al,%eax
f01008fc:	8b 15 48 2f 25 f0    	mov    0xf0252f48,%edx
f0100902:	42                   	inc    %edx
f0100903:	89 55 ec             	mov    %edx,-0x14(%ebp)
f0100906:	88 45 e1             	mov    %al,-0x1f(%ebp)
f0100909:	8a 45 e1             	mov    -0x1f(%ebp),%al
f010090c:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010090f:	ee                   	out    %al,(%dx)
	outb(addr_6845, 15);
f0100910:	a1 48 2f 25 f0       	mov    0xf0252f48,%eax
f0100915:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0100918:	c6 45 e2 0f          	movb   $0xf,-0x1e(%ebp)
f010091c:	8a 45 e2             	mov    -0x1e(%ebp),%al
f010091f:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0100922:	ee                   	out    %al,(%dx)
	outb(addr_6845 + 1, crt_pos);
f0100923:	66 a1 50 2f 25 f0    	mov    0xf0252f50,%ax
f0100929:	0f b6 c0             	movzbl %al,%eax
f010092c:	8b 15 48 2f 25 f0    	mov    0xf0252f48,%edx
f0100932:	42                   	inc    %edx
f0100933:	89 55 e4             	mov    %edx,-0x1c(%ebp)
f0100936:	88 45 e3             	mov    %al,-0x1d(%ebp)
f0100939:	8a 45 e3             	mov    -0x1d(%ebp),%al
f010093c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010093f:	ee                   	out    %al,(%dx)
}
f0100940:	90                   	nop
f0100941:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0100944:	c9                   	leave  
f0100945:	c3                   	ret    

f0100946 <kbd_proc_data>:
 * Get data from the keyboard.  If we finish a character, return it.  Else 0.
 * Return -1 if no data.
 */
static int
kbd_proc_data(void)
{
f0100946:	55                   	push   %ebp
f0100947:	89 e5                	mov    %esp,%ebp
f0100949:	83 ec 28             	sub    $0x28,%esp
f010094c:	c7 45 dc 64 00 00 00 	movl   $0x64,-0x24(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100953:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0100956:	89 c2                	mov    %eax,%edx
f0100958:	ec                   	in     (%dx),%al
f0100959:	88 45 db             	mov    %al,-0x25(%ebp)
	return data;
f010095c:	8a 45 db             	mov    -0x25(%ebp),%al
	int c;
	uint8 data;
	static uint32 shift;

	if ((inb(KBSTATP) & KBS_DIB) == 0)
f010095f:	0f b6 c0             	movzbl %al,%eax
f0100962:	83 e0 01             	and    $0x1,%eax
f0100965:	85 c0                	test   %eax,%eax
f0100967:	75 0a                	jne    f0100973 <kbd_proc_data+0x2d>
		return -1;
f0100969:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f010096e:	e9 2a 02 00 00       	jmp    f0100b9d <kbd_proc_data+0x257>
f0100973:	c7 45 e4 60 00 00 00 	movl   $0x60,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010097a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010097d:	89 c2                	mov    %eax,%edx
f010097f:	ec                   	in     (%dx),%al
f0100980:	88 45 da             	mov    %al,-0x26(%ebp)
	return data;
f0100983:	8a 45 da             	mov    -0x26(%ebp),%al

	data = inb(KBDATAP);
f0100986:	88 45 f3             	mov    %al,-0xd(%ebp)

	if (data == 0xE0) {
f0100989:	80 7d f3 e0          	cmpb   $0xe0,-0xd(%ebp)
f010098d:	75 17                	jne    f01009a6 <kbd_proc_data+0x60>
		// E0 escape character
		shift |= E0ESC;
f010098f:	a1 68 31 25 f0       	mov    0xf0253168,%eax
f0100994:	83 c8 40             	or     $0x40,%eax
f0100997:	a3 68 31 25 f0       	mov    %eax,0xf0253168
		return 0;
f010099c:	b8 00 00 00 00       	mov    $0x0,%eax
f01009a1:	e9 f7 01 00 00       	jmp    f0100b9d <kbd_proc_data+0x257>
	} else if (data & 0x80) {
f01009a6:	8a 45 f3             	mov    -0xd(%ebp),%al
f01009a9:	84 c0                	test   %al,%al
f01009ab:	79 44                	jns    f01009f1 <kbd_proc_data+0xab>
		// Key released
		data = (shift & E0ESC ? data : data & 0x7F);
f01009ad:	a1 68 31 25 f0       	mov    0xf0253168,%eax
f01009b2:	83 e0 40             	and    $0x40,%eax
f01009b5:	85 c0                	test   %eax,%eax
f01009b7:	75 08                	jne    f01009c1 <kbd_proc_data+0x7b>
f01009b9:	8a 45 f3             	mov    -0xd(%ebp),%al
f01009bc:	83 e0 7f             	and    $0x7f,%eax
f01009bf:	eb 03                	jmp    f01009c4 <kbd_proc_data+0x7e>
f01009c1:	8a 45 f3             	mov    -0xd(%ebp),%al
f01009c4:	88 45 f3             	mov    %al,-0xd(%ebp)
		shift &= ~(shiftcode[data] | E0ESC);
f01009c7:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f01009cb:	8a 80 20 e0 18 f0    	mov    -0xfe71fe0(%eax),%al
f01009d1:	83 c8 40             	or     $0x40,%eax
f01009d4:	0f b6 c0             	movzbl %al,%eax
f01009d7:	f7 d0                	not    %eax
f01009d9:	89 c2                	mov    %eax,%edx
f01009db:	a1 68 31 25 f0       	mov    0xf0253168,%eax
f01009e0:	21 d0                	and    %edx,%eax
f01009e2:	a3 68 31 25 f0       	mov    %eax,0xf0253168
		return 0;
f01009e7:	b8 00 00 00 00       	mov    $0x0,%eax
f01009ec:	e9 ac 01 00 00       	jmp    f0100b9d <kbd_proc_data+0x257>
	} else if (shift & E0ESC) {
f01009f1:	a1 68 31 25 f0       	mov    0xf0253168,%eax
f01009f6:	83 e0 40             	and    $0x40,%eax
f01009f9:	85 c0                	test   %eax,%eax
f01009fb:	74 11                	je     f0100a0e <kbd_proc_data+0xc8>
		// Last character was an E0 escape; or with 0x80
		data |= 0x80;
f01009fd:	80 4d f3 80          	orb    $0x80,-0xd(%ebp)
		shift &= ~E0ESC;
f0100a01:	a1 68 31 25 f0       	mov    0xf0253168,%eax
f0100a06:	83 e0 bf             	and    $0xffffffbf,%eax
f0100a09:	a3 68 31 25 f0       	mov    %eax,0xf0253168
	}

	shift |= shiftcode[data];
f0100a0e:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0100a12:	8a 80 20 e0 18 f0    	mov    -0xfe71fe0(%eax),%al
f0100a18:	0f b6 d0             	movzbl %al,%edx
f0100a1b:	a1 68 31 25 f0       	mov    0xf0253168,%eax
f0100a20:	09 d0                	or     %edx,%eax
f0100a22:	a3 68 31 25 f0       	mov    %eax,0xf0253168
	shift ^= togglecode[data];
f0100a27:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0100a2b:	8a 80 20 e1 18 f0    	mov    -0xfe71ee0(%eax),%al
f0100a31:	0f b6 d0             	movzbl %al,%edx
f0100a34:	a1 68 31 25 f0       	mov    0xf0253168,%eax
f0100a39:	31 d0                	xor    %edx,%eax
f0100a3b:	a3 68 31 25 f0       	mov    %eax,0xf0253168

	c = charcode[shift & (CTL | SHIFT)][data];
f0100a40:	a1 68 31 25 f0       	mov    0xf0253168,%eax
f0100a45:	83 e0 03             	and    $0x3,%eax
f0100a48:	8b 14 85 20 e5 18 f0 	mov    -0xfe71ae0(,%eax,4),%edx
f0100a4f:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0100a53:	01 d0                	add    %edx,%eax
f0100a55:	8a 00                	mov    (%eax),%al
f0100a57:	0f b6 c0             	movzbl %al,%eax
f0100a5a:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (c == KEY_DEL) {
f0100a5d:	81 7d f4 e9 00 00 00 	cmpl   $0xe9,-0xc(%ebp)
f0100a64:	0f 85 9c 00 00 00    	jne    f0100b06 <kbd_proc_data+0x1c0>
		if (text_length > 0) {
f0100a6a:	a1 40 2f 25 f0       	mov    0xf0252f40,%eax
f0100a6f:	85 c0                	test   %eax,%eax
f0100a71:	0f 8e 85 00 00 00    	jle    f0100afc <kbd_proc_data+0x1b6>
			if (crt_pos == 1920 + text_length)
f0100a77:	66 a1 50 2f 25 f0    	mov    0xf0252f50,%ax
f0100a7d:	0f b7 c0             	movzwl %ax,%eax
f0100a80:	8b 15 40 2f 25 f0    	mov    0xf0252f40,%edx
f0100a86:	81 c2 80 07 00 00    	add    $0x780,%edx
f0100a8c:	39 d0                	cmp    %edx,%eax
f0100a8e:	75 0a                	jne    f0100a9a <kbd_proc_data+0x154>
				return 0;
f0100a90:	b8 00 00 00 00       	mov    $0x0,%eax
f0100a95:	e9 03 01 00 00       	jmp    f0100b9d <kbd_proc_data+0x257>
			else {
			text_length--;
f0100a9a:	a1 40 2f 25 f0       	mov    0xf0252f40,%eax
f0100a9f:	48                   	dec    %eax
f0100aa0:	a3 40 2f 25 f0       	mov    %eax,0xf0252f40
				int crt_pos_Length = crt_pos - 1925;
f0100aa5:	66 a1 50 2f 25 f0    	mov    0xf0252f50,%ax
f0100aab:	0f b7 c0             	movzwl %ax,%eax
f0100aae:	2d 85 07 00 00       	sub    $0x785,%eax
f0100ab3:	89 45 ec             	mov    %eax,-0x14(%ebp)
				for (int i = crt_pos; crt_pos_Length <= text_length;
f0100ab6:	66 a1 50 2f 25 f0    	mov    0xf0252f50,%ax
f0100abc:	0f b7 c0             	movzwl %ax,%eax
f0100abf:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0100ac2:	eb 26                	jmp    f0100aea <kbd_proc_data+0x1a4>
						++i, crt_pos_Length++) {
					crt_buf[i] = crt_buf[i + 1];
f0100ac4:	8b 15 4c 2f 25 f0    	mov    0xf0252f4c,%edx
f0100aca:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0100acd:	01 c0                	add    %eax,%eax
f0100acf:	01 c2                	add    %eax,%edx
f0100ad1:	a1 4c 2f 25 f0       	mov    0xf0252f4c,%eax
f0100ad6:	8b 4d e8             	mov    -0x18(%ebp),%ecx
f0100ad9:	41                   	inc    %ecx
f0100ada:	01 c9                	add    %ecx,%ecx
f0100adc:	01 c8                	add    %ecx,%eax
f0100ade:	66 8b 00             	mov    (%eax),%ax
f0100ae1:	66 89 02             	mov    %ax,(%edx)
				return 0;
			else {
			text_length--;
				int crt_pos_Length = crt_pos - 1925;
				for (int i = crt_pos; crt_pos_Length <= text_length;
						++i, crt_pos_Length++) {
f0100ae4:	ff 45 e8             	incl   -0x18(%ebp)
f0100ae7:	ff 45 ec             	incl   -0x14(%ebp)
			if (crt_pos == 1920 + text_length)
				return 0;
			else {
			text_length--;
				int crt_pos_Length = crt_pos - 1925;
				for (int i = crt_pos; crt_pos_Length <= text_length;
f0100aea:	a1 40 2f 25 f0       	mov    0xf0252f40,%eax
f0100aef:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0100af2:	7e d0                	jle    f0100ac4 <kbd_proc_data+0x17e>
						++i, crt_pos_Length++) {
					crt_buf[i] = crt_buf[i + 1];
				}
				return c;
f0100af4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0100af7:	e9 a1 00 00 00       	jmp    f0100b9d <kbd_proc_data+0x257>
			}
		}
		return 0;
f0100afc:	b8 00 00 00 00       	mov    $0x0,%eax
f0100b01:	e9 97 00 00 00       	jmp    f0100b9d <kbd_proc_data+0x257>
	}
	if (shift & CAPSLOCK) {
f0100b06:	a1 68 31 25 f0       	mov    0xf0253168,%eax
f0100b0b:	83 e0 08             	and    $0x8,%eax
f0100b0e:	85 c0                	test   %eax,%eax
f0100b10:	74 22                	je     f0100b34 <kbd_proc_data+0x1ee>
		if ('a' <= c && c <= 'z')
f0100b12:	83 7d f4 60          	cmpl   $0x60,-0xc(%ebp)
f0100b16:	7e 0c                	jle    f0100b24 <kbd_proc_data+0x1de>
f0100b18:	83 7d f4 7a          	cmpl   $0x7a,-0xc(%ebp)
f0100b1c:	7f 06                	jg     f0100b24 <kbd_proc_data+0x1de>
			c += 'A' - 'a';
f0100b1e:	83 6d f4 20          	subl   $0x20,-0xc(%ebp)
f0100b22:	eb 10                	jmp    f0100b34 <kbd_proc_data+0x1ee>
		else if ('A' <= c && c <= 'Z')
f0100b24:	83 7d f4 40          	cmpl   $0x40,-0xc(%ebp)
f0100b28:	7e 0a                	jle    f0100b34 <kbd_proc_data+0x1ee>
f0100b2a:	83 7d f4 5a          	cmpl   $0x5a,-0xc(%ebp)
f0100b2e:	7f 04                	jg     f0100b34 <kbd_proc_data+0x1ee>
			c += 'a' - 'A';
f0100b30:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
	}

	// Process special keys
	if ((int) shift == NUMLOCK && c >= '0' && c <= '9')
f0100b34:	a1 68 31 25 f0       	mov    0xf0253168,%eax
f0100b39:	83 f8 10             	cmp    $0x10,%eax
f0100b3c:	75 13                	jne    f0100b51 <kbd_proc_data+0x20b>
f0100b3e:	83 7d f4 2f          	cmpl   $0x2f,-0xc(%ebp)
f0100b42:	7e 0d                	jle    f0100b51 <kbd_proc_data+0x20b>
f0100b44:	83 7d f4 39          	cmpl   $0x39,-0xc(%ebp)
f0100b48:	7f 07                	jg     f0100b51 <kbd_proc_data+0x20b>
		return 0;
f0100b4a:	b8 00 00 00 00       	mov    $0x0,%eax
f0100b4f:	eb 4c                	jmp    f0100b9d <kbd_proc_data+0x257>
	if (c == 255)
f0100b51:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
f0100b58:	75 07                	jne    f0100b61 <kbd_proc_data+0x21b>
		return 0;
f0100b5a:	b8 00 00 00 00       	mov    $0x0,%eax
f0100b5f:	eb 3c                	jmp    f0100b9d <kbd_proc_data+0x257>
	// Ctrl-Alt-Del: reboot
	if (!(~shift & (CTL | ALT)) && c == KEY_DEL) {
f0100b61:	a1 68 31 25 f0       	mov    0xf0253168,%eax
f0100b66:	f7 d0                	not    %eax
f0100b68:	83 e0 06             	and    $0x6,%eax
f0100b6b:	85 c0                	test   %eax,%eax
f0100b6d:	75 2b                	jne    f0100b9a <kbd_proc_data+0x254>
f0100b6f:	81 7d f4 e9 00 00 00 	cmpl   $0xe9,-0xc(%ebp)
f0100b76:	75 22                	jne    f0100b9a <kbd_proc_data+0x254>
		cprintf("Rebooting!\n");
f0100b78:	83 ec 0c             	sub    $0xc,%esp
f0100b7b:	68 dd 04 13 f0       	push   $0xf01304dd
f0100b80:	e8 ac 02 00 00       	call   f0100e31 <cprintf>
f0100b85:	83 c4 10             	add    $0x10,%esp
f0100b88:	c7 45 e0 92 00 00 00 	movl   $0x92,-0x20(%ebp)
f0100b8f:	c6 45 d9 03          	movb   $0x3,-0x27(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0100b93:	8a 45 d9             	mov    -0x27(%ebp),%al
f0100b96:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0100b99:	ee                   	out    %al,(%dx)
		outb(0x92, 0x3); // courtesy of Chris Frost
	}

	return c;
f0100b9a:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0100b9d:	c9                   	leave  
f0100b9e:	c3                   	ret    

f0100b9f <kbd_intr>:

void
kbd_intr(void)
{
f0100b9f:	55                   	push   %ebp
f0100ba0:	89 e5                	mov    %esp,%ebp
f0100ba2:	83 ec 08             	sub    $0x8,%esp
	cons_intr(kbd_proc_data);
f0100ba5:	83 ec 0c             	sub    $0xc,%esp
f0100ba8:	68 46 09 10 f0       	push   $0xf0100946
f0100bad:	e8 0c 00 00 00       	call   f0100bbe <cons_intr>
f0100bb2:	83 c4 10             	add    $0x10,%esp
}
f0100bb5:	90                   	nop
f0100bb6:	c9                   	leave  
f0100bb7:	c3                   	ret    

f0100bb8 <kbd_init>:

void
kbd_init(void)
{
f0100bb8:	55                   	push   %ebp
f0100bb9:	89 e5                	mov    %esp,%ebp
}
f0100bbb:	90                   	nop
f0100bbc:	5d                   	pop    %ebp
f0100bbd:	c3                   	ret    

f0100bbe <cons_intr>:

// called by device interrupt routines to feed input characters
// into the circular console input buffer.
void
cons_intr(int (*proc)(void))
{
f0100bbe:	55                   	push   %ebp
f0100bbf:	89 e5                	mov    %esp,%ebp
f0100bc1:	83 ec 18             	sub    $0x18,%esp
	int c;

	while ((c = (*proc)()) != -1) {
f0100bc4:	eb 35                	jmp    f0100bfb <cons_intr+0x3d>
		if (c == 0)
f0100bc6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100bca:	75 02                	jne    f0100bce <cons_intr+0x10>
			continue;
f0100bcc:	eb 2d                	jmp    f0100bfb <cons_intr+0x3d>
		cons.buf[cons.wpos++] = c;
f0100bce:	a1 64 31 25 f0       	mov    0xf0253164,%eax
f0100bd3:	8d 50 01             	lea    0x1(%eax),%edx
f0100bd6:	89 15 64 31 25 f0    	mov    %edx,0xf0253164
f0100bdc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100bdf:	88 90 60 2f 25 f0    	mov    %dl,-0xfdad0a0(%eax)
		if (cons.wpos == CONSBUFSIZE)
f0100be5:	a1 64 31 25 f0       	mov    0xf0253164,%eax
f0100bea:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100bef:	75 0a                	jne    f0100bfb <cons_intr+0x3d>
			cons.wpos = 0;
f0100bf1:	c7 05 64 31 25 f0 00 	movl   $0x0,0xf0253164
f0100bf8:	00 00 00 
void
cons_intr(int (*proc)(void))
{
	int c;

	while ((c = (*proc)()) != -1) {
f0100bfb:	8b 45 08             	mov    0x8(%ebp),%eax
f0100bfe:	ff d0                	call   *%eax
f0100c00:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100c03:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f0100c07:	75 bd                	jne    f0100bc6 <cons_intr+0x8>
			continue;
		cons.buf[cons.wpos++] = c;
		if (cons.wpos == CONSBUFSIZE)
			cons.wpos = 0;
	}
}
f0100c09:	90                   	nop
f0100c0a:	c9                   	leave  
f0100c0b:	c3                   	ret    

f0100c0c <cons_getc>:

// return the next input character from the console, or 0 if none waiting
int
cons_getc(void)
{
f0100c0c:	55                   	push   %ebp
f0100c0d:	89 e5                	mov    %esp,%ebp
f0100c0f:	83 ec 18             	sub    $0x18,%esp
	int c;

	// poll for any pending input characters,
	// so that this function works even when interrupts are disabled
	// (e.g., when called from the kernel monitor).
	serial_intr();
f0100c12:	e8 33 f8 ff ff       	call   f010044a <serial_intr>
	kbd_intr();
f0100c17:	e8 83 ff ff ff       	call   f0100b9f <kbd_intr>

	// grab the next character from the input buffer.
	if (cons.rpos != cons.wpos) {
f0100c1c:	8b 15 60 31 25 f0    	mov    0xf0253160,%edx
f0100c22:	a1 64 31 25 f0       	mov    0xf0253164,%eax
f0100c27:	39 c2                	cmp    %eax,%edx
f0100c29:	74 35                	je     f0100c60 <cons_getc+0x54>
		c = cons.buf[cons.rpos++];
f0100c2b:	a1 60 31 25 f0       	mov    0xf0253160,%eax
f0100c30:	8d 50 01             	lea    0x1(%eax),%edx
f0100c33:	89 15 60 31 25 f0    	mov    %edx,0xf0253160
f0100c39:	8a 80 60 2f 25 f0    	mov    -0xfdad0a0(%eax),%al
f0100c3f:	0f b6 c0             	movzbl %al,%eax
f0100c42:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if (cons.rpos == CONSBUFSIZE)
f0100c45:	a1 60 31 25 f0       	mov    0xf0253160,%eax
f0100c4a:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100c4f:	75 0a                	jne    f0100c5b <cons_getc+0x4f>
			cons.rpos = 0;
f0100c51:	c7 05 60 31 25 f0 00 	movl   $0x0,0xf0253160
f0100c58:	00 00 00 
		return c;
f0100c5b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0100c5e:	eb 05                	jmp    f0100c65 <cons_getc+0x59>
	}
	return 0;
f0100c60:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0100c65:	c9                   	leave  
f0100c66:	c3                   	ret    

f0100c67 <cons_getc2>:

// return the next input character from the console, or 0 if none waiting
int
cons_getc2(void)
{
f0100c67:	55                   	push   %ebp
f0100c68:	89 e5                	mov    %esp,%ebp
f0100c6a:	83 ec 18             	sub    $0x18,%esp

	// poll for any pending input characters,
	// so that this function works even when interrupts are disabled
	// (e.g., when called from the kernel monitor).

	int c1 = 0;
f0100c6d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	//serial_intr();
	{
		if (serial_exists)
f0100c74:	a1 44 2f 25 f0       	mov    0xf0252f44,%eax
f0100c79:	85 c0                	test   %eax,%eax
f0100c7b:	74 41                	je     f0100cbe <cons_getc2+0x57>
		{
			if ((c1 = serial_proc_data()) != -1) {
f0100c7d:	e8 86 f7 ff ff       	call   f0100408 <serial_proc_data>
f0100c82:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100c85:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f0100c89:	74 33                	je     f0100cbe <cons_getc2+0x57>
				if (c1 == 0)
f0100c8b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100c8f:	74 2d                	je     f0100cbe <cons_getc2+0x57>
				{
					//continue;
				}
				else
				{
					cons.buf[cons.wpos++] = c1;
f0100c91:	a1 64 31 25 f0       	mov    0xf0253164,%eax
f0100c96:	8d 50 01             	lea    0x1(%eax),%edx
f0100c99:	89 15 64 31 25 f0    	mov    %edx,0xf0253164
f0100c9f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100ca2:	88 90 60 2f 25 f0    	mov    %dl,-0xfdad0a0(%eax)
					if (cons.wpos == CONSBUFSIZE)
f0100ca8:	a1 64 31 25 f0       	mov    0xf0253164,%eax
f0100cad:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100cb2:	75 0a                	jne    f0100cbe <cons_getc2+0x57>
						cons.wpos = 0;
f0100cb4:	c7 05 64 31 25 f0 00 	movl   $0x0,0xf0253164
f0100cbb:	00 00 00 
				}
			}
		}
	}

	int c2 = 0;
f0100cbe:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	//kbd_intr();
	{
		if ((c2 = kbd_proc_data()) != -1) {
f0100cc5:	e8 7c fc ff ff       	call   f0100946 <kbd_proc_data>
f0100cca:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0100ccd:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
f0100cd1:	74 33                	je     f0100d06 <cons_getc2+0x9f>
			if (c2 == 0)
f0100cd3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0100cd7:	74 2d                	je     f0100d06 <cons_getc2+0x9f>
			{
				//continue;
			}
			else
			{
				cons.buf[cons.wpos++] = c2;
f0100cd9:	a1 64 31 25 f0       	mov    0xf0253164,%eax
f0100cde:	8d 50 01             	lea    0x1(%eax),%edx
f0100ce1:	89 15 64 31 25 f0    	mov    %edx,0xf0253164
f0100ce7:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100cea:	88 90 60 2f 25 f0    	mov    %dl,-0xfdad0a0(%eax)
				if (cons.wpos == CONSBUFSIZE)
f0100cf0:	a1 64 31 25 f0       	mov    0xf0253164,%eax
f0100cf5:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100cfa:	75 0a                	jne    f0100d06 <cons_getc2+0x9f>
					cons.wpos = 0;
f0100cfc:	c7 05 64 31 25 f0 00 	movl   $0x0,0xf0253164
f0100d03:	00 00 00 
	}

	// grab the next character from the input buffer.
	//cprintf("%d, %d \n", c1, c2);
	//if(c1 > 0 && c2 > 0)
	if(c2 > 0)
f0100d06:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0100d0a:	7e 44                	jle    f0100d50 <cons_getc2+0xe9>
	{
		if (cons.rpos != cons.wpos) {
f0100d0c:	8b 15 60 31 25 f0    	mov    0xf0253160,%edx
f0100d12:	a1 64 31 25 f0       	mov    0xf0253164,%eax
f0100d17:	39 c2                	cmp    %eax,%edx
f0100d19:	74 35                	je     f0100d50 <cons_getc2+0xe9>
			c = cons.buf[cons.rpos++];
f0100d1b:	a1 60 31 25 f0       	mov    0xf0253160,%eax
f0100d20:	8d 50 01             	lea    0x1(%eax),%edx
f0100d23:	89 15 60 31 25 f0    	mov    %edx,0xf0253160
f0100d29:	8a 80 60 2f 25 f0    	mov    -0xfdad0a0(%eax),%al
f0100d2f:	0f b6 c0             	movzbl %al,%eax
f0100d32:	89 45 ec             	mov    %eax,-0x14(%ebp)
			if (cons.rpos == CONSBUFSIZE)
f0100d35:	a1 60 31 25 f0       	mov    0xf0253160,%eax
f0100d3a:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100d3f:	75 0a                	jne    f0100d4b <cons_getc2+0xe4>
				cons.rpos = 0;
f0100d41:	c7 05 60 31 25 f0 00 	movl   $0x0,0xf0253160
f0100d48:	00 00 00 
			return c;
f0100d4b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0100d4e:	eb 05                	jmp    f0100d55 <cons_getc2+0xee>
		}
	}
	return 0;
f0100d50:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0100d55:	c9                   	leave  
f0100d56:	c3                   	ret    

f0100d57 <cons_putc>:

// output a character to the console
void
cons_putc(int c)
{
f0100d57:	55                   	push   %ebp
f0100d58:	89 e5                	mov    %esp,%ebp
f0100d5a:	83 ec 08             	sub    $0x8,%esp
	lpt_putc(c);
f0100d5d:	ff 75 08             	pushl  0x8(%ebp)
f0100d60:	e8 17 f8 ff ff       	call   f010057c <lpt_putc>
f0100d65:	83 c4 04             	add    $0x4,%esp
	cga_putc(c);
f0100d68:	83 ec 0c             	sub    $0xc,%esp
f0100d6b:	ff 75 08             	pushl  0x8(%ebp)
f0100d6e:	e8 43 f9 ff ff       	call   f01006b6 <cga_putc>
f0100d73:	83 c4 10             	add    $0x10,%esp
}
f0100d76:	90                   	nop
f0100d77:	c9                   	leave  
f0100d78:	c3                   	ret    

f0100d79 <console_initialize>:

// initialize the console devices
void
console_initialize(void)
{
f0100d79:	55                   	push   %ebp
f0100d7a:	89 e5                	mov    %esp,%ebp
f0100d7c:	83 ec 08             	sub    $0x8,%esp
	cga_init();
f0100d7f:	e8 6d f8 ff ff       	call   f01005f1 <cga_init>
	kbd_init();
f0100d84:	e8 2f fe ff ff       	call   f0100bb8 <kbd_init>
	serial_init();
f0100d89:	e8 de f6 ff ff       	call   f010046c <serial_init>

	if (!serial_exists)
f0100d8e:	a1 44 2f 25 f0       	mov    0xf0252f44,%eax
f0100d93:	85 c0                	test   %eax,%eax
f0100d95:	75 10                	jne    f0100da7 <console_initialize+0x2e>
		cprintf("Serial port does not exist!\n");
f0100d97:	83 ec 0c             	sub    $0xc,%esp
f0100d9a:	68 e9 04 13 f0       	push   $0xf01304e9
f0100d9f:	e8 8d 00 00 00       	call   f0100e31 <cprintf>
f0100da4:	83 c4 10             	add    $0x10,%esp
}
f0100da7:	90                   	nop
f0100da8:	c9                   	leave  
f0100da9:	c3                   	ret    

f0100daa <cputchar>:

// `High'-level console I/O.  Used by readline and cprintf.

void
cputchar(int c)
{
f0100daa:	55                   	push   %ebp
f0100dab:	89 e5                	mov    %esp,%ebp
f0100dad:	83 ec 08             	sub    $0x8,%esp
	cons_putc(c);
f0100db0:	83 ec 0c             	sub    $0xc,%esp
f0100db3:	ff 75 08             	pushl  0x8(%ebp)
f0100db6:	e8 9c ff ff ff       	call   f0100d57 <cons_putc>
f0100dbb:	83 c4 10             	add    $0x10,%esp
}
f0100dbe:	90                   	nop
f0100dbf:	c9                   	leave  
f0100dc0:	c3                   	ret    

f0100dc1 <getchar>:

int
getchar(void)
{
f0100dc1:	55                   	push   %ebp
f0100dc2:	89 e5                	mov    %esp,%ebp
f0100dc4:	83 ec 18             	sub    $0x18,%esp
	int c;

	while ((c = cons_getc()) == 0)
f0100dc7:	e8 40 fe ff ff       	call   f0100c0c <cons_getc>
f0100dcc:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100dcf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100dd3:	74 f2                	je     f0100dc7 <getchar+0x6>
		/* do nothing */;
	return c;
f0100dd5:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0100dd8:	c9                   	leave  
f0100dd9:	c3                   	ret    

f0100dda <iscons>:

int
iscons(int fdnum)
{
f0100dda:	55                   	push   %ebp
f0100ddb:	89 e5                	mov    %esp,%ebp
	// used by readline
	return 1;
f0100ddd:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0100de2:	5d                   	pop    %ebp
f0100de3:	c3                   	ret    

f0100de4 <putch>:
#include <inc/stdarg.h>


static void
putch(int ch, int *cnt)
{
f0100de4:	55                   	push   %ebp
f0100de5:	89 e5                	mov    %esp,%ebp
f0100de7:	83 ec 08             	sub    $0x8,%esp
	cputchar(ch);
f0100dea:	83 ec 0c             	sub    $0xc,%esp
f0100ded:	ff 75 08             	pushl  0x8(%ebp)
f0100df0:	e8 b5 ff ff ff       	call   f0100daa <cputchar>
f0100df5:	83 c4 10             	add    $0x10,%esp
	(*cnt)++;
f0100df8:	8b 45 0c             	mov    0xc(%ebp),%eax
f0100dfb:	8b 00                	mov    (%eax),%eax
f0100dfd:	8d 50 01             	lea    0x1(%eax),%edx
f0100e00:	8b 45 0c             	mov    0xc(%ebp),%eax
f0100e03:	89 10                	mov    %edx,(%eax)
}
f0100e05:	90                   	nop
f0100e06:	c9                   	leave  
f0100e07:	c3                   	ret    

f0100e08 <vcprintf>:

int
vcprintf(const char *fmt, va_list ap)
{
f0100e08:	55                   	push   %ebp
f0100e09:	89 e5                	mov    %esp,%ebp
f0100e0b:	83 ec 18             	sub    $0x18,%esp
	int cnt = 0;
f0100e0e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	vprintfmt((void*)putch, &cnt, fmt, ap);
f0100e15:	ff 75 0c             	pushl  0xc(%ebp)
f0100e18:	ff 75 08             	pushl  0x8(%ebp)
f0100e1b:	8d 45 f4             	lea    -0xc(%ebp),%eax
f0100e1e:	50                   	push   %eax
f0100e1f:	68 e4 0d 10 f0       	push   $0xf0100de4
f0100e24:	e8 66 d9 02 00       	call   f012e78f <vprintfmt>
f0100e29:	83 c4 10             	add    $0x10,%esp
	return cnt;
f0100e2c:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0100e2f:	c9                   	leave  
f0100e30:	c3                   	ret    

f0100e31 <cprintf>:

int
cprintf(const char *fmt, ...)
{
f0100e31:	55                   	push   %ebp
f0100e32:	89 e5                	mov    %esp,%ebp
f0100e34:	83 ec 18             	sub    $0x18,%esp
	va_list ap;
	int cnt;

	va_start(ap, fmt);
f0100e37:	8d 45 0c             	lea    0xc(%ebp),%eax
f0100e3a:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cnt = vcprintf(fmt, ap);
f0100e3d:	8b 45 08             	mov    0x8(%ebp),%eax
f0100e40:	83 ec 08             	sub    $0x8,%esp
f0100e43:	ff 75 f4             	pushl  -0xc(%ebp)
f0100e46:	50                   	push   %eax
f0100e47:	e8 bc ff ff ff       	call   f0100e08 <vcprintf>
f0100e4c:	83 c4 10             	add    $0x10,%esp
f0100e4f:	89 45 f0             	mov    %eax,-0x10(%ebp)
	va_end(ap);

	return cnt;
f0100e52:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0100e55:	c9                   	leave  
f0100e56:	c3                   	ret    

f0100e57 <clearandwritecommand>:
#define HISTORY_MAX 19
int last_command_idx = -1;
char command_history[HISTORY_MAX+1][BUFLEN];
char empty[BUFLEN];

void clearandwritecommand(int* i, int commandidx, char* buf, int *last_index) {
f0100e57:	55                   	push   %ebp
f0100e58:	89 e5                	mov    %esp,%ebp
f0100e5a:	83 ec 18             	sub    $0x18,%esp
	for (int j = 0; j < *i; j++) {
f0100e5d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0100e64:	eb 10                	jmp    f0100e76 <clearandwritecommand+0x1f>
		cputchar('\b');
f0100e66:	83 ec 0c             	sub    $0xc,%esp
f0100e69:	6a 08                	push   $0x8
f0100e6b:	e8 3a ff ff ff       	call   f0100daa <cputchar>
f0100e70:	83 c4 10             	add    $0x10,%esp
int last_command_idx = -1;
char command_history[HISTORY_MAX+1][BUFLEN];
char empty[BUFLEN];

void clearandwritecommand(int* i, int commandidx, char* buf, int *last_index) {
	for (int j = 0; j < *i; j++) {
f0100e73:	ff 45 f4             	incl   -0xc(%ebp)
f0100e76:	8b 45 08             	mov    0x8(%ebp),%eax
f0100e79:	8b 00                	mov    (%eax),%eax
f0100e7b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0100e7e:	7f e6                	jg     f0100e66 <clearandwritecommand+0xf>
		cputchar('\b');
	}
	int len = strlen(command_history[commandidx]);
f0100e80:	8b 45 0c             	mov    0xc(%ebp),%eax
f0100e83:	c1 e0 0a             	shl    $0xa,%eax
f0100e86:	05 80 4e 2d f0       	add    $0xf02d4e80,%eax
f0100e8b:	83 ec 0c             	sub    $0xc,%esp
f0100e8e:	50                   	push   %eax
f0100e8f:	e8 a9 df 02 00       	call   f012ee3d <strlen>
f0100e94:	83 c4 10             	add    $0x10,%esp
f0100e97:	89 45 f0             	mov    %eax,-0x10(%ebp)
	memcpy(buf, empty, BUFLEN);
f0100e9a:	83 ec 04             	sub    $0x4,%esp
f0100e9d:	68 00 04 00 00       	push   $0x400
f0100ea2:	68 80 9e 2d f0       	push   $0xf02d9e80
f0100ea7:	ff 75 10             	pushl  0x10(%ebp)
f0100eaa:	e8 ac e1 02 00       	call   f012f05b <memcpy>
f0100eaf:	83 c4 10             	add    $0x10,%esp
	for (*i = 0; *i < len; (*i)++) {
f0100eb2:	8b 45 08             	mov    0x8(%ebp),%eax
f0100eb5:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0100ebb:	eb 52                	jmp    f0100f0f <clearandwritecommand+0xb8>
		cputchar(command_history[commandidx][*i]);
f0100ebd:	8b 45 08             	mov    0x8(%ebp),%eax
f0100ec0:	8b 00                	mov    (%eax),%eax
f0100ec2:	8b 55 0c             	mov    0xc(%ebp),%edx
f0100ec5:	c1 e2 0a             	shl    $0xa,%edx
f0100ec8:	01 d0                	add    %edx,%eax
f0100eca:	05 80 4e 2d f0       	add    $0xf02d4e80,%eax
f0100ecf:	8a 00                	mov    (%eax),%al
f0100ed1:	0f be c0             	movsbl %al,%eax
f0100ed4:	83 ec 0c             	sub    $0xc,%esp
f0100ed7:	50                   	push   %eax
f0100ed8:	e8 cd fe ff ff       	call   f0100daa <cputchar>
f0100edd:	83 c4 10             	add    $0x10,%esp
		buf[*i] = command_history[commandidx][*i];
f0100ee0:	8b 45 08             	mov    0x8(%ebp),%eax
f0100ee3:	8b 00                	mov    (%eax),%eax
f0100ee5:	89 c2                	mov    %eax,%edx
f0100ee7:	8b 45 10             	mov    0x10(%ebp),%eax
f0100eea:	01 c2                	add    %eax,%edx
f0100eec:	8b 45 08             	mov    0x8(%ebp),%eax
f0100eef:	8b 00                	mov    (%eax),%eax
f0100ef1:	8b 4d 0c             	mov    0xc(%ebp),%ecx
f0100ef4:	c1 e1 0a             	shl    $0xa,%ecx
f0100ef7:	01 c8                	add    %ecx,%eax
f0100ef9:	05 80 4e 2d f0       	add    $0xf02d4e80,%eax
f0100efe:	8a 00                	mov    (%eax),%al
f0100f00:	88 02                	mov    %al,(%edx)
	for (int j = 0; j < *i; j++) {
		cputchar('\b');
	}
	int len = strlen(command_history[commandidx]);
	memcpy(buf, empty, BUFLEN);
	for (*i = 0; *i < len; (*i)++) {
f0100f02:	8b 45 08             	mov    0x8(%ebp),%eax
f0100f05:	8b 00                	mov    (%eax),%eax
f0100f07:	8d 50 01             	lea    0x1(%eax),%edx
f0100f0a:	8b 45 08             	mov    0x8(%ebp),%eax
f0100f0d:	89 10                	mov    %edx,(%eax)
f0100f0f:	8b 45 08             	mov    0x8(%ebp),%eax
f0100f12:	8b 00                	mov    (%eax),%eax
f0100f14:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0100f17:	7c a4                	jl     f0100ebd <clearandwritecommand+0x66>
		cputchar(command_history[commandidx][*i]);
		buf[*i] = command_history[commandidx][*i];
	}
	*last_index = len;
f0100f19:	8b 45 14             	mov    0x14(%ebp),%eax
f0100f1c:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100f1f:	89 10                	mov    %edx,(%eax)
}
f0100f21:	90                   	nop
f0100f22:	c9                   	leave  
f0100f23:	c3                   	ret    

f0100f24 <RoundAutoCompleteCommandWithTheSamePrefix>:

void RoundAutoCompleteCommandWithTheSamePrefix(int old_buf_len, char* prefix_element,
		char* buf, int* i, int *last_index) {
f0100f24:	55                   	push   %ebp
f0100f25:	89 e5                	mov    %esp,%ebp
f0100f27:	83 ec 18             	sub    $0x18,%esp
	for (int j = 0; j < old_buf_len; j++) {
f0100f2a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0100f31:	eb 10                	jmp    f0100f43 <RoundAutoCompleteCommandWithTheSamePrefix+0x1f>
		cputchar('\b');
f0100f33:	83 ec 0c             	sub    $0xc,%esp
f0100f36:	6a 08                	push   $0x8
f0100f38:	e8 6d fe ff ff       	call   f0100daa <cputchar>
f0100f3d:	83 c4 10             	add    $0x10,%esp
	*last_index = len;
}

void RoundAutoCompleteCommandWithTheSamePrefix(int old_buf_len, char* prefix_element,
		char* buf, int* i, int *last_index) {
	for (int j = 0; j < old_buf_len; j++) {
f0100f40:	ff 45 f4             	incl   -0xc(%ebp)
f0100f43:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0100f46:	3b 45 08             	cmp    0x8(%ebp),%eax
f0100f49:	7c e8                	jl     f0100f33 <RoundAutoCompleteCommandWithTheSamePrefix+0xf>
		cputchar('\b');
	}
	int len = strlen(prefix_element);
f0100f4b:	83 ec 0c             	sub    $0xc,%esp
f0100f4e:	ff 75 0c             	pushl  0xc(%ebp)
f0100f51:	e8 e7 de 02 00       	call   f012ee3d <strlen>
f0100f56:	83 c4 10             	add    $0x10,%esp
f0100f59:	89 45 f0             	mov    %eax,-0x10(%ebp)
	memcpy(buf, empty, BUFLEN);
f0100f5c:	83 ec 04             	sub    $0x4,%esp
f0100f5f:	68 00 04 00 00       	push   $0x400
f0100f64:	68 80 9e 2d f0       	push   $0xf02d9e80
f0100f69:	ff 75 10             	pushl  0x10(%ebp)
f0100f6c:	e8 ea e0 02 00       	call   f012f05b <memcpy>
f0100f71:	83 c4 10             	add    $0x10,%esp
	for (*i = 0; *i < len; (*i)++) {
f0100f74:	8b 45 14             	mov    0x14(%ebp),%eax
f0100f77:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0100f7d:	eb 46                	jmp    f0100fc5 <RoundAutoCompleteCommandWithTheSamePrefix+0xa1>
		cputchar(prefix_element[*i]);
f0100f7f:	8b 45 14             	mov    0x14(%ebp),%eax
f0100f82:	8b 00                	mov    (%eax),%eax
f0100f84:	89 c2                	mov    %eax,%edx
f0100f86:	8b 45 0c             	mov    0xc(%ebp),%eax
f0100f89:	01 d0                	add    %edx,%eax
f0100f8b:	8a 00                	mov    (%eax),%al
f0100f8d:	0f be c0             	movsbl %al,%eax
f0100f90:	83 ec 0c             	sub    $0xc,%esp
f0100f93:	50                   	push   %eax
f0100f94:	e8 11 fe ff ff       	call   f0100daa <cputchar>
f0100f99:	83 c4 10             	add    $0x10,%esp
		buf[*i] = prefix_element[*i];
f0100f9c:	8b 45 14             	mov    0x14(%ebp),%eax
f0100f9f:	8b 00                	mov    (%eax),%eax
f0100fa1:	89 c2                	mov    %eax,%edx
f0100fa3:	8b 45 10             	mov    0x10(%ebp),%eax
f0100fa6:	01 c2                	add    %eax,%edx
f0100fa8:	8b 45 14             	mov    0x14(%ebp),%eax
f0100fab:	8b 00                	mov    (%eax),%eax
f0100fad:	89 c1                	mov    %eax,%ecx
f0100faf:	8b 45 0c             	mov    0xc(%ebp),%eax
f0100fb2:	01 c8                	add    %ecx,%eax
f0100fb4:	8a 00                	mov    (%eax),%al
f0100fb6:	88 02                	mov    %al,(%edx)
	for (int j = 0; j < old_buf_len; j++) {
		cputchar('\b');
	}
	int len = strlen(prefix_element);
	memcpy(buf, empty, BUFLEN);
	for (*i = 0; *i < len; (*i)++) {
f0100fb8:	8b 45 14             	mov    0x14(%ebp),%eax
f0100fbb:	8b 00                	mov    (%eax),%eax
f0100fbd:	8d 50 01             	lea    0x1(%eax),%edx
f0100fc0:	8b 45 14             	mov    0x14(%ebp),%eax
f0100fc3:	89 10                	mov    %edx,(%eax)
f0100fc5:	8b 45 14             	mov    0x14(%ebp),%eax
f0100fc8:	8b 00                	mov    (%eax),%eax
f0100fca:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0100fcd:	7c b0                	jl     f0100f7f <RoundAutoCompleteCommandWithTheSamePrefix+0x5b>
		cputchar(prefix_element[*i]);
		buf[*i] = prefix_element[*i];
	}
	*last_index = len;
f0100fcf:	8b 45 18             	mov    0x18(%ebp),%eax
f0100fd2:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100fd5:	89 10                	mov    %edx,(%eax)
}
f0100fd7:	90                   	nop
f0100fd8:	c9                   	leave  
f0100fd9:	c3                   	ret    

f0100fda <clear_prefix_list>:

char PrefixList[100][1024];
void clear_prefix_list()
{
f0100fda:	55                   	push   %ebp
f0100fdb:	89 e5                	mov    %esp,%ebp
f0100fdd:	83 ec 18             	sub    $0x18,%esp
	for (int i = 0; i < 100; ++i) {
f0100fe0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0100fe7:	eb 21                	jmp    f010100a <clear_prefix_list+0x30>
		memset(PrefixList[i], 0, 1024);}
f0100fe9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0100fec:	c1 e0 0a             	shl    $0xa,%eax
f0100fef:	05 80 be 2b f0       	add    $0xf02bbe80,%eax
f0100ff4:	83 ec 04             	sub    $0x4,%esp
f0100ff7:	68 00 04 00 00       	push   $0x400
f0100ffc:	6a 00                	push   $0x0
f0100ffe:	50                   	push   %eax
f0100fff:	e8 27 e0 02 00       	call   f012f02b <memset>
f0101004:	83 c4 10             	add    $0x10,%esp
}

char PrefixList[100][1024];
void clear_prefix_list()
{
	for (int i = 0; i < 100; ++i) {
f0101007:	ff 45 f4             	incl   -0xc(%ebp)
f010100a:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
f010100e:	7e d9                	jle    f0100fe9 <clear_prefix_list+0xf>
		memset(PrefixList[i], 0, 1024);}
}
f0101010:	90                   	nop
f0101011:	c9                   	leave  
f0101012:	c3                   	ret    

f0101013 <command_prompt_readline>:

void command_prompt_readline(const char *prompt, char* buf) {
f0101013:	55                   	push   %ebp
f0101014:	89 e5                	mov    %esp,%ebp
f0101016:	57                   	push   %edi
f0101017:	53                   	push   %ebx
f0101018:	81 ec d0 08 00 00    	sub    $0x8d0,%esp
	int i, c, echoing, lastIndex;
	if (prompt != NULL)
f010101e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0101022:	74 13                	je     f0101037 <command_prompt_readline+0x24>
		cprintf("%s", prompt);
f0101024:	83 ec 08             	sub    $0x8,%esp
f0101027:	ff 75 08             	pushl  0x8(%ebp)
f010102a:	68 08 05 13 f0       	push   $0xf0130508
f010102f:	e8 fd fd ff ff       	call   f0100e31 <cprintf>
f0101034:	83 c4 10             	add    $0x10,%esp

	int commandidx = last_command_idx + 1;
f0101037:	a1 30 e5 18 f0       	mov    0xf018e530,%eax
f010103c:	40                   	inc    %eax
f010103d:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int prefix_list_idx = lastIndex = i = 0;
f0101040:	c7 85 78 ff ff ff 00 	movl   $0x0,-0x88(%ebp)
f0101047:	00 00 00 
f010104a:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0101050:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0101056:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f010105c:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int prefix_list_size, last_c;
	echoing = iscons(0);
f010105f:	83 ec 0c             	sub    $0xc,%esp
f0101062:	6a 00                	push   $0x0
f0101064:	e8 71 fd ff ff       	call   f0100dda <iscons>
f0101069:	83 c4 10             	add    $0x10,%esp
f010106c:	89 45 98             	mov    %eax,-0x68(%ebp)
	bool is_run_cmd = 0;
f010106f:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	bool is_tst_cmd = 0;
f0101076:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)

	while (1) {
		c = getchar();
f010107d:	e8 3f fd ff ff       	call   f0100dc1 <getchar>
f0101082:	89 45 94             	mov    %eax,-0x6c(%ebp)
		if (i > lastIndex)
f0101085:	8b 95 78 ff ff ff    	mov    -0x88(%ebp),%edx
f010108b:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0101091:	39 c2                	cmp    %eax,%edx
f0101093:	7e 0c                	jle    f01010a1 <command_prompt_readline+0x8e>
			lastIndex = i;
f0101095:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f010109b:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
		if (c < 0) {
f01010a1:	83 7d 94 00          	cmpl   $0x0,-0x6c(%ebp)
f01010a5:	79 22                	jns    f01010c9 <command_prompt_readline+0xb6>

			if (c != -E_EOF)
f01010a7:	83 7d 94 07          	cmpl   $0x7,-0x6c(%ebp)
f01010ab:	0f 84 94 0a 00 00    	je     f0101b45 <command_prompt_readline+0xb32>
				cprintf("read error: %e\n", c);
f01010b1:	83 ec 08             	sub    $0x8,%esp
f01010b4:	ff 75 94             	pushl  -0x6c(%ebp)
f01010b7:	68 0b 05 13 f0       	push   $0xf013050b
f01010bc:	e8 70 fd ff ff       	call   f0100e31 <cprintf>
f01010c1:	83 c4 10             	add    $0x10,%esp
			return;
f01010c4:	e9 7c 0a 00 00       	jmp    f0101b45 <command_prompt_readline+0xb32>
		} else if (c == 226) { // Up arrow
f01010c9:	81 7d 94 e2 00 00 00 	cmpl   $0xe2,-0x6c(%ebp)
f01010d0:	75 2a                	jne    f01010fc <command_prompt_readline+0xe9>
			if (commandidx)
f01010d2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01010d6:	74 03                	je     f01010db <command_prompt_readline+0xc8>
				commandidx--;
f01010d8:	ff 4d f4             	decl   -0xc(%ebp)
			clearandwritecommand(&i, commandidx, buf, &lastIndex);
f01010db:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
f01010e1:	50                   	push   %eax
f01010e2:	ff 75 0c             	pushl  0xc(%ebp)
f01010e5:	ff 75 f4             	pushl  -0xc(%ebp)
f01010e8:	8d 85 78 ff ff ff    	lea    -0x88(%ebp),%eax
f01010ee:	50                   	push   %eax
f01010ef:	e8 63 fd ff ff       	call   f0100e57 <clearandwritecommand>
f01010f4:	83 c4 10             	add    $0x10,%esp
f01010f7:	e9 32 0a 00 00       	jmp    f0101b2e <command_prompt_readline+0xb1b>
		} else if (c == 227) { // Down arrow
f01010fc:	81 7d 94 e3 00 00 00 	cmpl   $0xe3,-0x6c(%ebp)
f0101103:	75 3b                	jne    f0101140 <command_prompt_readline+0x12d>
			if (commandidx < last_command_idx)
f0101105:	a1 30 e5 18 f0       	mov    0xf018e530,%eax
f010110a:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010110d:	7d 03                	jge    f0101112 <command_prompt_readline+0xff>
				commandidx++;
f010110f:	ff 45 f4             	incl   -0xc(%ebp)
			if (last_command_idx >= 0)
f0101112:	a1 30 e5 18 f0       	mov    0xf018e530,%eax
f0101117:	85 c0                	test   %eax,%eax
f0101119:	0f 88 0f 0a 00 00    	js     f0101b2e <command_prompt_readline+0xb1b>
				clearandwritecommand(&i, commandidx, buf, &lastIndex);
f010111f:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
f0101125:	50                   	push   %eax
f0101126:	ff 75 0c             	pushl  0xc(%ebp)
f0101129:	ff 75 f4             	pushl  -0xc(%ebp)
f010112c:	8d 85 78 ff ff ff    	lea    -0x88(%ebp),%eax
f0101132:	50                   	push   %eax
f0101133:	e8 1f fd ff ff       	call   f0100e57 <clearandwritecommand>
f0101138:	83 c4 10             	add    $0x10,%esp
f010113b:	e9 ee 09 00 00       	jmp    f0101b2e <command_prompt_readline+0xb1b>
		} else if (c == 9) { // Tab button
f0101140:	83 7d 94 09          	cmpl   $0x9,-0x6c(%ebp)
f0101144:	0f 85 6d 07 00 00    	jne    f01018b7 <command_prompt_readline+0x8a4>
			if (last_c != 9) {
f010114a:	83 7d e8 09          	cmpl   $0x9,-0x18(%ebp)
f010114e:	0f 84 fc 06 00 00    	je     f0101850 <command_prompt_readline+0x83d>
				clear_prefix_list(PrefixList, 100);
f0101154:	83 ec 08             	sub    $0x8,%esp
f0101157:	6a 64                	push   $0x64
f0101159:	68 80 be 2b f0       	push   $0xf02bbe80
f010115e:	e8 77 fe ff ff       	call   f0100fda <clear_prefix_list>
f0101163:	83 c4 10             	add    $0x10,%esp
				if (strlen(buf) == 0 || last_c == 255)
f0101166:	83 ec 0c             	sub    $0xc,%esp
f0101169:	ff 75 0c             	pushl  0xc(%ebp)
f010116c:	e8 cc dc 02 00       	call   f012ee3d <strlen>
f0101171:	83 c4 10             	add    $0x10,%esp
f0101174:	85 c0                	test   %eax,%eax
f0101176:	0f 84 bd 09 00 00    	je     f0101b39 <command_prompt_readline+0xb26>
f010117c:	81 7d e8 ff 00 00 00 	cmpl   $0xff,-0x18(%ebp)
f0101183:	0f 84 b0 09 00 00    	je     f0101b39 <command_prompt_readline+0xb26>
					continue;
				char *arguments[MAX_ARGUMENTS];
				int number_of_arguments = prefix_list_size = 0;
f0101189:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0101190:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101193:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
				char temp_buf[1024];
				strcpy(temp_buf, buf);
f0101199:	83 ec 08             	sub    $0x8,%esp
f010119c:	ff 75 0c             	pushl  0xc(%ebp)
f010119f:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
f01011a5:	50                   	push   %eax
f01011a6:	e8 e1 dc 02 00       	call   f012ee8c <strcpy>
f01011ab:	83 c4 10             	add    $0x10,%esp
				int bufLength = strlen(buf);
f01011ae:	83 ec 0c             	sub    $0xc,%esp
f01011b1:	ff 75 0c             	pushl  0xc(%ebp)
f01011b4:	e8 84 dc 02 00       	call   f012ee3d <strlen>
f01011b9:	83 c4 10             	add    $0x10,%esp
f01011bc:	89 45 90             	mov    %eax,-0x70(%ebp)
				if (buf[bufLength - 1] == ' ')
f01011bf:	8b 45 90             	mov    -0x70(%ebp),%eax
f01011c2:	8d 50 ff             	lea    -0x1(%eax),%edx
f01011c5:	8b 45 0c             	mov    0xc(%ebp),%eax
f01011c8:	01 d0                	add    %edx,%eax
f01011ca:	8a 00                	mov    (%eax),%al
f01011cc:	3c 20                	cmp    $0x20,%al
f01011ce:	0f 84 6b 09 00 00    	je     f0101b3f <command_prompt_readline+0xb2c>
					continue;
				strsplit(temp_buf, WHITESPACE, arguments, &number_of_arguments);
f01011d4:	8d 85 70 ff ff ff    	lea    -0x90(%ebp),%eax
f01011da:	50                   	push   %eax
f01011db:	8d 85 30 f7 ff ff    	lea    -0x8d0(%ebp),%eax
f01011e1:	50                   	push   %eax
f01011e2:	68 1b 05 13 f0       	push   $0xf013051b
f01011e7:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
f01011ed:	50                   	push   %eax
f01011ee:	e8 7e e2 02 00       	call   f012f471 <strsplit>
f01011f3:	83 c4 10             	add    $0x10,%esp
				int it_str = 0;
f01011f6:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
				if (number_of_arguments > 1) {
f01011fd:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0101203:	83 f8 01             	cmp    $0x1,%eax
f0101206:	0f 8e 28 01 00 00    	jle    f0101334 <command_prompt_readline+0x321>
					if((strcmp(arguments[0], "run") != 0) && (strcmp(arguments[0], "load") != 0)
f010120c:	8b 85 30 f7 ff ff    	mov    -0x8d0(%ebp),%eax
f0101212:	83 ec 08             	sub    $0x8,%esp
f0101215:	68 20 05 13 f0       	push   $0xf0130520
f010121a:	50                   	push   %eax
f010121b:	e8 29 dd 02 00       	call   f012ef49 <strcmp>
f0101220:	83 c4 10             	add    $0x10,%esp
f0101223:	85 c0                	test   %eax,%eax
f0101225:	74 3c                	je     f0101263 <command_prompt_readline+0x250>
f0101227:	8b 85 30 f7 ff ff    	mov    -0x8d0(%ebp),%eax
f010122d:	83 ec 08             	sub    $0x8,%esp
f0101230:	68 24 05 13 f0       	push   $0xf0130524
f0101235:	50                   	push   %eax
f0101236:	e8 0e dd 02 00       	call   f012ef49 <strcmp>
f010123b:	83 c4 10             	add    $0x10,%esp
f010123e:	85 c0                	test   %eax,%eax
f0101240:	74 21                	je     f0101263 <command_prompt_readline+0x250>
							&& (strcmp(arguments[0], "tst") != 0)) // to autocomplete only in case that the command take arguments and defined arguments (run & load & tst) only
f0101242:	8b 85 30 f7 ff ff    	mov    -0x8d0(%ebp),%eax
f0101248:	83 ec 08             	sub    $0x8,%esp
f010124b:	68 29 05 13 f0       	push   $0xf0130529
f0101250:	50                   	push   %eax
f0101251:	e8 f3 dc 02 00       	call   f012ef49 <strcmp>
f0101256:	83 c4 10             	add    $0x10,%esp
f0101259:	85 c0                	test   %eax,%eax
f010125b:	74 06                	je     f0101263 <command_prompt_readline+0x250>
						continue;
f010125d:	90                   	nop
				clearandwritecommand(&i, commandidx, buf, &lastIndex);
		} else if (c == 9) { // Tab button
			if (last_c != 9) {
				clear_prefix_list(PrefixList, 100);
				if (strlen(buf) == 0 || last_c == 255)
					continue;
f010125e:	e9 d6 08 00 00       	jmp    f0101b39 <command_prompt_readline+0xb26>
				int it_str = 0;
				if (number_of_arguments > 1) {
					if((strcmp(arguments[0], "run") != 0) && (strcmp(arguments[0], "load") != 0)
							&& (strcmp(arguments[0], "tst") != 0)) // to autocomplete only in case that the command take arguments and defined arguments (run & load & tst) only
						continue;
					if ((strcmp(arguments[0], "tst") == 0))
f0101263:	8b 85 30 f7 ff ff    	mov    -0x8d0(%ebp),%eax
f0101269:	83 ec 08             	sub    $0x8,%esp
f010126c:	68 29 05 13 f0       	push   $0xf0130529
f0101271:	50                   	push   %eax
f0101272:	e8 d2 dc 02 00       	call   f012ef49 <strcmp>
f0101277:	83 c4 10             	add    $0x10,%esp
f010127a:	85 c0                	test   %eax,%eax
f010127c:	75 09                	jne    f0101287 <command_prompt_readline+0x274>
					{
						is_tst_cmd = 1;
f010127e:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
f0101285:	eb 07                	jmp    f010128e <command_prompt_readline+0x27b>
					}
					else
					{
						is_run_cmd = 1;
f0101287:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
					}
					char temp[1024] = "";
f010128e:	c7 85 70 fb ff ff 00 	movl   $0x0,-0x490(%ebp)
f0101295:	00 00 00 
f0101298:	8d 95 74 fb ff ff    	lea    -0x48c(%ebp),%edx
f010129e:	b9 ff 00 00 00       	mov    $0xff,%ecx
f01012a3:	b8 00 00 00 00       	mov    $0x0,%eax
f01012a8:	89 d7                	mov    %edx,%edi
f01012aa:	f3 ab                	rep stos %eax,%es:(%edi)
					int TotalLen = bufLength - strlen(arguments[number_of_arguments - 1]);
f01012ac:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01012b2:	48                   	dec    %eax
f01012b3:	8b 84 85 30 f7 ff ff 	mov    -0x8d0(%ebp,%eax,4),%eax
f01012ba:	83 ec 0c             	sub    $0xc,%esp
f01012bd:	50                   	push   %eax
f01012be:	e8 7a db 02 00       	call   f012ee3d <strlen>
f01012c3:	83 c4 10             	add    $0x10,%esp
f01012c6:	8b 55 90             	mov    -0x70(%ebp),%edx
f01012c9:	29 c2                	sub    %eax,%edx
f01012cb:	89 d0                	mov    %edx,%eax
f01012cd:	89 45 8c             	mov    %eax,-0x74(%ebp)
					for (int var = 0; var < TotalLen; ++var) {
f01012d0:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f01012d7:	eb 1d                	jmp    f01012f6 <command_prompt_readline+0x2e3>
						temp[it_str++] = buf[var];
f01012d9:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01012dc:	8d 50 01             	lea    0x1(%eax),%edx
f01012df:	89 55 dc             	mov    %edx,-0x24(%ebp)
f01012e2:	8b 4d d8             	mov    -0x28(%ebp),%ecx
f01012e5:	8b 55 0c             	mov    0xc(%ebp),%edx
f01012e8:	01 ca                	add    %ecx,%edx
f01012ea:	8a 12                	mov    (%edx),%dl
f01012ec:	88 94 05 70 fb ff ff 	mov    %dl,-0x490(%ebp,%eax,1)
					{
						is_run_cmd = 1;
					}
					char temp[1024] = "";
					int TotalLen = bufLength - strlen(arguments[number_of_arguments - 1]);
					for (int var = 0; var < TotalLen; ++var) {
f01012f3:	ff 45 d8             	incl   -0x28(%ebp)
f01012f6:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01012f9:	3b 45 8c             	cmp    -0x74(%ebp),%eax
f01012fc:	7c db                	jl     f01012d9 <command_prompt_readline+0x2c6>
						temp[it_str++] = buf[var];
					}
					strcpy(buf, temp);   //buf contains all arguments except the last one
f01012fe:	83 ec 08             	sub    $0x8,%esp
f0101301:	8d 85 70 fb ff ff    	lea    -0x490(%ebp),%eax
f0101307:	50                   	push   %eax
f0101308:	ff 75 0c             	pushl  0xc(%ebp)
f010130b:	e8 7c db 02 00       	call   f012ee8c <strcpy>
f0101310:	83 c4 10             	add    $0x10,%esp
					strcpy(temp_buf, arguments[number_of_arguments - 1]);   //temp_buf contains the last argument
f0101313:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0101319:	48                   	dec    %eax
f010131a:	8b 84 85 30 f7 ff ff 	mov    -0x8d0(%ebp,%eax,4),%eax
f0101321:	83 ec 08             	sub    $0x8,%esp
f0101324:	50                   	push   %eax
f0101325:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
f010132b:	50                   	push   %eax
f010132c:	e8 5b db 02 00       	call   f012ee8c <strcpy>
f0101331:	83 c4 10             	add    $0x10,%esp
				}
				int it_prefix_list = 0;
f0101334:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
				if(number_of_arguments == 1)
f010133b:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0101341:	83 f8 01             	cmp    $0x1,%eax
f0101344:	0f 85 30 01 00 00    	jne    f010147a <command_prompt_readline+0x467>
				{
					for (int var = 0; var < NUM_OF_COMMANDS; ++var) {
f010134a:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
f0101351:	e9 0f 01 00 00       	jmp    f0101465 <command_prompt_readline+0x452>
						int x = strncmp(temp_buf, commands[var].name, strlen(temp_buf));
f0101356:	83 ec 0c             	sub    $0xc,%esp
f0101359:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
f010135f:	50                   	push   %eax
f0101360:	e8 d8 da 02 00       	call   f012ee3d <strlen>
f0101365:	83 c4 10             	add    $0x10,%esp
f0101368:	89 c1                	mov    %eax,%ecx
f010136a:	8b 55 d0             	mov    -0x30(%ebp),%edx
f010136d:	89 d0                	mov    %edx,%eax
f010136f:	01 c0                	add    %eax,%eax
f0101371:	01 d0                	add    %edx,%eax
f0101373:	c1 e0 03             	shl    $0x3,%eax
f0101376:	05 40 e5 18 f0       	add    $0xf018e540,%eax
f010137b:	8b 00                	mov    (%eax),%eax
f010137d:	83 ec 04             	sub    $0x4,%esp
f0101380:	51                   	push   %ecx
f0101381:	50                   	push   %eax
f0101382:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
f0101388:	50                   	push   %eax
f0101389:	e8 f3 db 02 00       	call   f012ef81 <strncmp>
f010138e:	83 c4 10             	add    $0x10,%esp
f0101391:	89 45 88             	mov    %eax,-0x78(%ebp)
						if (x == 0) {
f0101394:	83 7d 88 00          	cmpl   $0x0,-0x78(%ebp)
f0101398:	0f 85 c4 00 00 00    	jne    f0101462 <command_prompt_readline+0x44f>
							it_str = -1;
f010139e:	c7 45 dc ff ff ff ff 	movl   $0xffffffff,-0x24(%ebp)
							char string[1024] = "";
f01013a5:	c7 85 70 fb ff ff 00 	movl   $0x0,-0x490(%ebp)
f01013ac:	00 00 00 
f01013af:	8d 95 74 fb ff ff    	lea    -0x48c(%ebp),%edx
f01013b5:	b9 ff 00 00 00       	mov    $0xff,%ecx
f01013ba:	b8 00 00 00 00       	mov    $0x0,%eax
f01013bf:	89 d7                	mov    %edx,%edi
f01013c1:	f3 ab                	rep stos %eax,%es:(%edi)
							for (int var3 = 0; var3 < strlen(commands[var].name); ++var3) {
f01013c3:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f01013ca:	eb 2d                	jmp    f01013f9 <command_prompt_readline+0x3e6>
								string[++it_str] = commands[var].name[var3];
f01013cc:	ff 45 dc             	incl   -0x24(%ebp)
f01013cf:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01013d2:	89 d0                	mov    %edx,%eax
f01013d4:	01 c0                	add    %eax,%eax
f01013d6:	01 d0                	add    %edx,%eax
f01013d8:	c1 e0 03             	shl    $0x3,%eax
f01013db:	05 40 e5 18 f0       	add    $0xf018e540,%eax
f01013e0:	8b 10                	mov    (%eax),%edx
f01013e2:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01013e5:	01 d0                	add    %edx,%eax
f01013e7:	8a 00                	mov    (%eax),%al
f01013e9:	8d 8d 70 fb ff ff    	lea    -0x490(%ebp),%ecx
f01013ef:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01013f2:	01 ca                	add    %ecx,%edx
f01013f4:	88 02                	mov    %al,(%edx)
					for (int var = 0; var < NUM_OF_COMMANDS; ++var) {
						int x = strncmp(temp_buf, commands[var].name, strlen(temp_buf));
						if (x == 0) {
							it_str = -1;
							char string[1024] = "";
							for (int var3 = 0; var3 < strlen(commands[var].name); ++var3) {
f01013f6:	ff 45 cc             	incl   -0x34(%ebp)
f01013f9:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01013fc:	89 d0                	mov    %edx,%eax
f01013fe:	01 c0                	add    %eax,%eax
f0101400:	01 d0                	add    %edx,%eax
f0101402:	c1 e0 03             	shl    $0x3,%eax
f0101405:	05 40 e5 18 f0       	add    $0xf018e540,%eax
f010140a:	8b 00                	mov    (%eax),%eax
f010140c:	83 ec 0c             	sub    $0xc,%esp
f010140f:	50                   	push   %eax
f0101410:	e8 28 da 02 00       	call   f012ee3d <strlen>
f0101415:	83 c4 10             	add    $0x10,%esp
f0101418:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f010141b:	7f af                	jg     f01013cc <command_prompt_readline+0x3b9>
								string[++it_str] = commands[var].name[var3];
							}
							memset(PrefixList[it_prefix_list], 0, 1024);
f010141d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0101420:	c1 e0 0a             	shl    $0xa,%eax
f0101423:	05 80 be 2b f0       	add    $0xf02bbe80,%eax
f0101428:	83 ec 04             	sub    $0x4,%esp
f010142b:	68 00 04 00 00       	push   $0x400
f0101430:	6a 00                	push   $0x0
f0101432:	50                   	push   %eax
f0101433:	e8 f3 db 02 00       	call   f012f02b <memset>
f0101438:	83 c4 10             	add    $0x10,%esp
							strncpy(PrefixList[it_prefix_list], string, it_str + 1);
f010143b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010143e:	40                   	inc    %eax
f010143f:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0101442:	c1 e2 0a             	shl    $0xa,%edx
f0101445:	81 c2 80 be 2b f0    	add    $0xf02bbe80,%edx
f010144b:	83 ec 04             	sub    $0x4,%esp
f010144e:	50                   	push   %eax
f010144f:	8d 85 70 fb ff ff    	lea    -0x490(%ebp),%eax
f0101455:	50                   	push   %eax
f0101456:	52                   	push   %edx
f0101457:	e8 5e da 02 00       	call   f012eeba <strncpy>
f010145c:	83 c4 10             	add    $0x10,%esp
							it_prefix_list++;
f010145f:	ff 45 d4             	incl   -0x2c(%ebp)
					strcpy(temp_buf, arguments[number_of_arguments - 1]);   //temp_buf contains the last argument
				}
				int it_prefix_list = 0;
				if(number_of_arguments == 1)
				{
					for (int var = 0; var < NUM_OF_COMMANDS; ++var) {
f0101462:	ff 45 d0             	incl   -0x30(%ebp)
f0101465:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0101468:	a1 60 e9 18 f0       	mov    0xf018e960,%eax
f010146d:	39 c2                	cmp    %eax,%edx
f010146f:	0f 82 e1 fe ff ff    	jb     f0101356 <command_prompt_readline+0x343>
f0101475:	e9 fe 02 00 00       	jmp    f0101778 <command_prompt_readline+0x765>
						}
					}
				}
				else
				{
					if(is_run_cmd)
f010147a:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010147e:	0f 84 7b 01 00 00    	je     f01015ff <command_prompt_readline+0x5ec>
					{
						for (int var = 0; var < NUM_USER_PROGS; ++var) {
f0101484:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
f010148b:	e9 5c 01 00 00       	jmp    f01015ec <command_prompt_readline+0x5d9>
							int x = strncmp(temp_buf, ptr_UserPrograms[var].name, strlen(temp_buf));
f0101490:	83 ec 0c             	sub    $0xc,%esp
f0101493:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
f0101499:	50                   	push   %eax
f010149a:	e8 9e d9 02 00       	call   f012ee3d <strlen>
f010149f:	83 c4 10             	add    $0x10,%esp
f01014a2:	89 c1                	mov    %eax,%ecx
f01014a4:	8b 1d 68 ea 18 f0    	mov    0xf018ea68,%ebx
f01014aa:	8b 55 c8             	mov    -0x38(%ebp),%edx
f01014ad:	89 d0                	mov    %edx,%eax
f01014af:	01 c0                	add    %eax,%eax
f01014b1:	01 d0                	add    %edx,%eax
f01014b3:	c1 e0 02             	shl    $0x2,%eax
f01014b6:	01 d8                	add    %ebx,%eax
f01014b8:	8b 00                	mov    (%eax),%eax
f01014ba:	83 ec 04             	sub    $0x4,%esp
f01014bd:	51                   	push   %ecx
f01014be:	50                   	push   %eax
f01014bf:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
f01014c5:	50                   	push   %eax
f01014c6:	e8 b6 da 02 00       	call   f012ef81 <strncmp>
f01014cb:	83 c4 10             	add    $0x10,%esp
f01014ce:	89 45 84             	mov    %eax,-0x7c(%ebp)
							if (x == 0) {
f01014d1:	83 7d 84 00          	cmpl   $0x0,-0x7c(%ebp)
f01014d5:	0f 85 0e 01 00 00    	jne    f01015e9 <command_prompt_readline+0x5d6>
								it_str = -1;
f01014db:	c7 45 dc ff ff ff ff 	movl   $0xffffffff,-0x24(%ebp)
								char string[1024] = "";
f01014e2:	c7 85 70 fb ff ff 00 	movl   $0x0,-0x490(%ebp)
f01014e9:	00 00 00 
f01014ec:	8d 95 74 fb ff ff    	lea    -0x48c(%ebp),%edx
f01014f2:	b9 ff 00 00 00       	mov    $0xff,%ecx
f01014f7:	b8 00 00 00 00       	mov    $0x0,%eax
f01014fc:	89 d7                	mov    %edx,%edi
f01014fe:	f3 ab                	rep stos %eax,%es:(%edi)
								if (number_of_arguments > 1) {
f0101500:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0101506:	83 f8 01             	cmp    $0x1,%eax
f0101509:	7e 39                	jle    f0101544 <command_prompt_readline+0x531>
									for (int var2 = 0; var2 < strlen(buf); ++var2) {
f010150b:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
f0101512:	eb 1d                	jmp    f0101531 <command_prompt_readline+0x51e>
										string[++it_str] = buf[var2];
f0101514:	ff 45 dc             	incl   -0x24(%ebp)
f0101517:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f010151a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010151d:	01 d0                	add    %edx,%eax
f010151f:	8a 00                	mov    (%eax),%al
f0101521:	8d 8d 70 fb ff ff    	lea    -0x490(%ebp),%ecx
f0101527:	8b 55 dc             	mov    -0x24(%ebp),%edx
f010152a:	01 ca                	add    %ecx,%edx
f010152c:	88 02                	mov    %al,(%edx)
							int x = strncmp(temp_buf, ptr_UserPrograms[var].name, strlen(temp_buf));
							if (x == 0) {
								it_str = -1;
								char string[1024] = "";
								if (number_of_arguments > 1) {
									for (int var2 = 0; var2 < strlen(buf); ++var2) {
f010152e:	ff 45 c4             	incl   -0x3c(%ebp)
f0101531:	83 ec 0c             	sub    $0xc,%esp
f0101534:	ff 75 0c             	pushl  0xc(%ebp)
f0101537:	e8 01 d9 02 00       	call   f012ee3d <strlen>
f010153c:	83 c4 10             	add    $0x10,%esp
f010153f:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0101542:	7f d0                	jg     f0101514 <command_prompt_readline+0x501>
										string[++it_str] = buf[var2];
									}
								}
								for (int var3 = 0; var3 < strlen(ptr_UserPrograms[var].name) ; ++var3) {
f0101544:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
f010154b:	eb 30                	jmp    f010157d <command_prompt_readline+0x56a>
									string[++it_str] = ptr_UserPrograms[var].name[var3];
f010154d:	ff 45 dc             	incl   -0x24(%ebp)
f0101550:	8b 0d 68 ea 18 f0    	mov    0xf018ea68,%ecx
f0101556:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0101559:	89 d0                	mov    %edx,%eax
f010155b:	01 c0                	add    %eax,%eax
f010155d:	01 d0                	add    %edx,%eax
f010155f:	c1 e0 02             	shl    $0x2,%eax
f0101562:	01 c8                	add    %ecx,%eax
f0101564:	8b 10                	mov    (%eax),%edx
f0101566:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0101569:	01 d0                	add    %edx,%eax
f010156b:	8a 00                	mov    (%eax),%al
f010156d:	8d 8d 70 fb ff ff    	lea    -0x490(%ebp),%ecx
f0101573:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0101576:	01 ca                	add    %ecx,%edx
f0101578:	88 02                	mov    %al,(%edx)
								if (number_of_arguments > 1) {
									for (int var2 = 0; var2 < strlen(buf); ++var2) {
										string[++it_str] = buf[var2];
									}
								}
								for (int var3 = 0; var3 < strlen(ptr_UserPrograms[var].name) ; ++var3) {
f010157a:	ff 45 c0             	incl   -0x40(%ebp)
f010157d:	8b 0d 68 ea 18 f0    	mov    0xf018ea68,%ecx
f0101583:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0101586:	89 d0                	mov    %edx,%eax
f0101588:	01 c0                	add    %eax,%eax
f010158a:	01 d0                	add    %edx,%eax
f010158c:	c1 e0 02             	shl    $0x2,%eax
f010158f:	01 c8                	add    %ecx,%eax
f0101591:	8b 00                	mov    (%eax),%eax
f0101593:	83 ec 0c             	sub    $0xc,%esp
f0101596:	50                   	push   %eax
f0101597:	e8 a1 d8 02 00       	call   f012ee3d <strlen>
f010159c:	83 c4 10             	add    $0x10,%esp
f010159f:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f01015a2:	7f a9                	jg     f010154d <command_prompt_readline+0x53a>
									string[++it_str] = ptr_UserPrograms[var].name[var3];
								}
								memset(PrefixList[it_prefix_list], 0, 1024);
f01015a4:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01015a7:	c1 e0 0a             	shl    $0xa,%eax
f01015aa:	05 80 be 2b f0       	add    $0xf02bbe80,%eax
f01015af:	83 ec 04             	sub    $0x4,%esp
f01015b2:	68 00 04 00 00       	push   $0x400
f01015b7:	6a 00                	push   $0x0
f01015b9:	50                   	push   %eax
f01015ba:	e8 6c da 02 00       	call   f012f02b <memset>
f01015bf:	83 c4 10             	add    $0x10,%esp
								strncpy(PrefixList[it_prefix_list], string, it_str + 1);
f01015c2:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01015c5:	40                   	inc    %eax
f01015c6:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f01015c9:	c1 e2 0a             	shl    $0xa,%edx
f01015cc:	81 c2 80 be 2b f0    	add    $0xf02bbe80,%edx
f01015d2:	83 ec 04             	sub    $0x4,%esp
f01015d5:	50                   	push   %eax
f01015d6:	8d 85 70 fb ff ff    	lea    -0x490(%ebp),%eax
f01015dc:	50                   	push   %eax
f01015dd:	52                   	push   %edx
f01015de:	e8 d7 d8 02 00       	call   f012eeba <strncpy>
f01015e3:	83 c4 10             	add    $0x10,%esp
								it_prefix_list++;
f01015e6:	ff 45 d4             	incl   -0x2c(%ebp)
				}
				else
				{
					if(is_run_cmd)
					{
						for (int var = 0; var < NUM_USER_PROGS; ++var) {
f01015e9:	ff 45 c8             	incl   -0x38(%ebp)
f01015ec:	a1 6c ea 18 f0       	mov    0xf018ea6c,%eax
f01015f1:	39 45 c8             	cmp    %eax,-0x38(%ebp)
f01015f4:	0f 8c 96 fe ff ff    	jl     f0101490 <command_prompt_readline+0x47d>
f01015fa:	e9 79 01 00 00       	jmp    f0101778 <command_prompt_readline+0x765>
								strncpy(PrefixList[it_prefix_list], string, it_str + 1);
								it_prefix_list++;
							}
						}
					}
					else if(is_tst_cmd)
f01015ff:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0101603:	0f 84 6f 01 00 00    	je     f0101778 <command_prompt_readline+0x765>
					{
						for (int var = 0; var < NUM_OF_TESTS; ++var) {
f0101609:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
f0101610:	e9 53 01 00 00       	jmp    f0101768 <command_prompt_readline+0x755>
							int x = strncmp(temp_buf, tests[var].name, strlen(temp_buf));
f0101615:	83 ec 0c             	sub    $0xc,%esp
f0101618:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
f010161e:	50                   	push   %eax
f010161f:	e8 19 d8 02 00       	call   f012ee3d <strlen>
f0101624:	83 c4 10             	add    $0x10,%esp
f0101627:	89 c1                	mov    %eax,%ecx
f0101629:	8b 55 bc             	mov    -0x44(%ebp),%edx
f010162c:	89 d0                	mov    %edx,%eax
f010162e:	01 c0                	add    %eax,%eax
f0101630:	01 d0                	add    %edx,%eax
f0101632:	c1 e0 02             	shl    $0x2,%eax
f0101635:	05 80 ea 18 f0       	add    $0xf018ea80,%eax
f010163a:	8b 00                	mov    (%eax),%eax
f010163c:	83 ec 04             	sub    $0x4,%esp
f010163f:	51                   	push   %ecx
f0101640:	50                   	push   %eax
f0101641:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
f0101647:	50                   	push   %eax
f0101648:	e8 34 d9 02 00       	call   f012ef81 <strncmp>
f010164d:	83 c4 10             	add    $0x10,%esp
f0101650:	89 45 80             	mov    %eax,-0x80(%ebp)
							if (x == 0) {
f0101653:	83 7d 80 00          	cmpl   $0x0,-0x80(%ebp)
f0101657:	0f 85 08 01 00 00    	jne    f0101765 <command_prompt_readline+0x752>
								it_str = -1;
f010165d:	c7 45 dc ff ff ff ff 	movl   $0xffffffff,-0x24(%ebp)
								char string[1024] = "";
f0101664:	c7 85 70 fb ff ff 00 	movl   $0x0,-0x490(%ebp)
f010166b:	00 00 00 
f010166e:	8d 95 74 fb ff ff    	lea    -0x48c(%ebp),%edx
f0101674:	b9 ff 00 00 00       	mov    $0xff,%ecx
f0101679:	b8 00 00 00 00       	mov    $0x0,%eax
f010167e:	89 d7                	mov    %edx,%edi
f0101680:	f3 ab                	rep stos %eax,%es:(%edi)
								if (number_of_arguments > 1) {
f0101682:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0101688:	83 f8 01             	cmp    $0x1,%eax
f010168b:	7e 39                	jle    f01016c6 <command_prompt_readline+0x6b3>
									for (int var2 = 0; var2 < strlen(buf); ++var2) {
f010168d:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
f0101694:	eb 1d                	jmp    f01016b3 <command_prompt_readline+0x6a0>
										string[++it_str] = buf[var2];
f0101696:	ff 45 dc             	incl   -0x24(%ebp)
f0101699:	8b 55 b8             	mov    -0x48(%ebp),%edx
f010169c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010169f:	01 d0                	add    %edx,%eax
f01016a1:	8a 00                	mov    (%eax),%al
f01016a3:	8d 8d 70 fb ff ff    	lea    -0x490(%ebp),%ecx
f01016a9:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01016ac:	01 ca                	add    %ecx,%edx
f01016ae:	88 02                	mov    %al,(%edx)
							int x = strncmp(temp_buf, tests[var].name, strlen(temp_buf));
							if (x == 0) {
								it_str = -1;
								char string[1024] = "";
								if (number_of_arguments > 1) {
									for (int var2 = 0; var2 < strlen(buf); ++var2) {
f01016b0:	ff 45 b8             	incl   -0x48(%ebp)
f01016b3:	83 ec 0c             	sub    $0xc,%esp
f01016b6:	ff 75 0c             	pushl  0xc(%ebp)
f01016b9:	e8 7f d7 02 00       	call   f012ee3d <strlen>
f01016be:	83 c4 10             	add    $0x10,%esp
f01016c1:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f01016c4:	7f d0                	jg     f0101696 <command_prompt_readline+0x683>
										string[++it_str] = buf[var2];
									}
								}
								for (int var3 = 0; var3 < strlen(tests[var].name) ; ++var3) {
f01016c6:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%ebp)
f01016cd:	eb 2d                	jmp    f01016fc <command_prompt_readline+0x6e9>
									string[++it_str] = tests[var].name[var3];
f01016cf:	ff 45 dc             	incl   -0x24(%ebp)
f01016d2:	8b 55 bc             	mov    -0x44(%ebp),%edx
f01016d5:	89 d0                	mov    %edx,%eax
f01016d7:	01 c0                	add    %eax,%eax
f01016d9:	01 d0                	add    %edx,%eax
f01016db:	c1 e0 02             	shl    $0x2,%eax
f01016de:	05 80 ea 18 f0       	add    $0xf018ea80,%eax
f01016e3:	8b 10                	mov    (%eax),%edx
f01016e5:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01016e8:	01 d0                	add    %edx,%eax
f01016ea:	8a 00                	mov    (%eax),%al
f01016ec:	8d 8d 70 fb ff ff    	lea    -0x490(%ebp),%ecx
f01016f2:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01016f5:	01 ca                	add    %ecx,%edx
f01016f7:	88 02                	mov    %al,(%edx)
								if (number_of_arguments > 1) {
									for (int var2 = 0; var2 < strlen(buf); ++var2) {
										string[++it_str] = buf[var2];
									}
								}
								for (int var3 = 0; var3 < strlen(tests[var].name) ; ++var3) {
f01016f9:	ff 45 b4             	incl   -0x4c(%ebp)
f01016fc:	8b 55 bc             	mov    -0x44(%ebp),%edx
f01016ff:	89 d0                	mov    %edx,%eax
f0101701:	01 c0                	add    %eax,%eax
f0101703:	01 d0                	add    %edx,%eax
f0101705:	c1 e0 02             	shl    $0x2,%eax
f0101708:	05 80 ea 18 f0       	add    $0xf018ea80,%eax
f010170d:	8b 00                	mov    (%eax),%eax
f010170f:	83 ec 0c             	sub    $0xc,%esp
f0101712:	50                   	push   %eax
f0101713:	e8 25 d7 02 00       	call   f012ee3d <strlen>
f0101718:	83 c4 10             	add    $0x10,%esp
f010171b:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f010171e:	7f af                	jg     f01016cf <command_prompt_readline+0x6bc>
									string[++it_str] = tests[var].name[var3];
								}
								memset(PrefixList[it_prefix_list], 0, 1024);
f0101720:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0101723:	c1 e0 0a             	shl    $0xa,%eax
f0101726:	05 80 be 2b f0       	add    $0xf02bbe80,%eax
f010172b:	83 ec 04             	sub    $0x4,%esp
f010172e:	68 00 04 00 00       	push   $0x400
f0101733:	6a 00                	push   $0x0
f0101735:	50                   	push   %eax
f0101736:	e8 f0 d8 02 00       	call   f012f02b <memset>
f010173b:	83 c4 10             	add    $0x10,%esp
								strncpy(PrefixList[it_prefix_list], string, it_str + 1);
f010173e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0101741:	40                   	inc    %eax
f0101742:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0101745:	c1 e2 0a             	shl    $0xa,%edx
f0101748:	81 c2 80 be 2b f0    	add    $0xf02bbe80,%edx
f010174e:	83 ec 04             	sub    $0x4,%esp
f0101751:	50                   	push   %eax
f0101752:	8d 85 70 fb ff ff    	lea    -0x490(%ebp),%eax
f0101758:	50                   	push   %eax
f0101759:	52                   	push   %edx
f010175a:	e8 5b d7 02 00       	call   f012eeba <strncpy>
f010175f:	83 c4 10             	add    $0x10,%esp
								it_prefix_list++;
f0101762:	ff 45 d4             	incl   -0x2c(%ebp)
							}
						}
					}
					else if(is_tst_cmd)
					{
						for (int var = 0; var < NUM_OF_TESTS; ++var) {
f0101765:	ff 45 bc             	incl   -0x44(%ebp)
f0101768:	8b 55 bc             	mov    -0x44(%ebp),%edx
f010176b:	a1 1c eb 18 f0       	mov    0xf018eb1c,%eax
f0101770:	39 c2                	cmp    %eax,%edx
f0101772:	0f 82 9d fe ff ff    	jb     f0101615 <command_prompt_readline+0x602>
								it_prefix_list++;
							}
						}
					}
				}
				prefix_list_size = it_prefix_list;
f0101778:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010177b:	89 45 ec             	mov    %eax,-0x14(%ebp)
				if (it_prefix_list) {
f010177e:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f0101782:	0f 84 a6 03 00 00    	je     f0101b2e <command_prompt_readline+0xb1b>
					prefix_list_idx = it_str = 0;
f0101788:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f010178f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0101792:	89 45 f0             	mov    %eax,-0x10(%ebp)
					for (int var2 = 0; var2 < strlen(PrefixList[0]); ++var2) {
f0101795:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%ebp)
f010179c:	eb 1f                	jmp    f01017bd <command_prompt_readline+0x7aa>
						buf[it_str++] = PrefixList[0][var2];}
f010179e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01017a1:	8d 50 01             	lea    0x1(%eax),%edx
f01017a4:	89 55 dc             	mov    %edx,-0x24(%ebp)
f01017a7:	89 c2                	mov    %eax,%edx
f01017a9:	8b 45 0c             	mov    0xc(%ebp),%eax
f01017ac:	01 c2                	add    %eax,%edx
f01017ae:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01017b1:	05 80 be 2b f0       	add    $0xf02bbe80,%eax
f01017b6:	8a 00                	mov    (%eax),%al
f01017b8:	88 02                	mov    %al,(%edx)
					}
				}
				prefix_list_size = it_prefix_list;
				if (it_prefix_list) {
					prefix_list_idx = it_str = 0;
					for (int var2 = 0; var2 < strlen(PrefixList[0]); ++var2) {
f01017ba:	ff 45 b0             	incl   -0x50(%ebp)
f01017bd:	83 ec 0c             	sub    $0xc,%esp
f01017c0:	68 80 be 2b f0       	push   $0xf02bbe80
f01017c5:	e8 73 d6 02 00       	call   f012ee3d <strlen>
f01017ca:	83 c4 10             	add    $0x10,%esp
f01017cd:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f01017d0:	7f cc                	jg     f010179e <command_prompt_readline+0x78b>
						buf[it_str++] = PrefixList[0][var2];}
					for (int var = 0; var < bufLength; ++var) {
f01017d2:	c7 45 ac 00 00 00 00 	movl   $0x0,-0x54(%ebp)
f01017d9:	eb 10                	jmp    f01017eb <command_prompt_readline+0x7d8>
						cputchar('\b');}
f01017db:	83 ec 0c             	sub    $0xc,%esp
f01017de:	6a 08                	push   $0x8
f01017e0:	e8 c5 f5 ff ff       	call   f0100daa <cputchar>
f01017e5:	83 c4 10             	add    $0x10,%esp
				prefix_list_size = it_prefix_list;
				if (it_prefix_list) {
					prefix_list_idx = it_str = 0;
					for (int var2 = 0; var2 < strlen(PrefixList[0]); ++var2) {
						buf[it_str++] = PrefixList[0][var2];}
					for (int var = 0; var < bufLength; ++var) {
f01017e8:	ff 45 ac             	incl   -0x54(%ebp)
f01017eb:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01017ee:	3b 45 90             	cmp    -0x70(%ebp),%eax
f01017f1:	7c e8                	jl     f01017db <command_prompt_readline+0x7c8>
						cputchar('\b');}
					for (int j = 0; j < strlen(buf); ++j) {
f01017f3:	c7 45 a8 00 00 00 00 	movl   $0x0,-0x58(%ebp)
f01017fa:	eb 1c                	jmp    f0101818 <command_prompt_readline+0x805>
						cputchar(buf[j]);}
f01017fc:	8b 55 a8             	mov    -0x58(%ebp),%edx
f01017ff:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101802:	01 d0                	add    %edx,%eax
f0101804:	8a 00                	mov    (%eax),%al
f0101806:	0f be c0             	movsbl %al,%eax
f0101809:	83 ec 0c             	sub    $0xc,%esp
f010180c:	50                   	push   %eax
f010180d:	e8 98 f5 ff ff       	call   f0100daa <cputchar>
f0101812:	83 c4 10             	add    $0x10,%esp
					prefix_list_idx = it_str = 0;
					for (int var2 = 0; var2 < strlen(PrefixList[0]); ++var2) {
						buf[it_str++] = PrefixList[0][var2];}
					for (int var = 0; var < bufLength; ++var) {
						cputchar('\b');}
					for (int j = 0; j < strlen(buf); ++j) {
f0101815:	ff 45 a8             	incl   -0x58(%ebp)
f0101818:	83 ec 0c             	sub    $0xc,%esp
f010181b:	ff 75 0c             	pushl  0xc(%ebp)
f010181e:	e8 1a d6 02 00       	call   f012ee3d <strlen>
f0101823:	83 c4 10             	add    $0x10,%esp
f0101826:	3b 45 a8             	cmp    -0x58(%ebp),%eax
f0101829:	7f d1                	jg     f01017fc <command_prompt_readline+0x7e9>
						cputchar(buf[j]);}
					i = lastIndex = strlen(buf);
f010182b:	83 ec 0c             	sub    $0xc,%esp
f010182e:	ff 75 0c             	pushl  0xc(%ebp)
f0101831:	e8 07 d6 02 00       	call   f012ee3d <strlen>
f0101836:	83 c4 10             	add    $0x10,%esp
f0101839:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f010183f:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0101845:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f010184b:	e9 de 02 00 00       	jmp    f0101b2e <command_prompt_readline+0xb1b>
				}
			}
			else {
				if (prefix_list_size > 0) {	int prev = prefix_list_idx;
f0101850:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0101854:	0f 8e d4 02 00 00    	jle    f0101b2e <command_prompt_readline+0xb1b>
f010185a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010185d:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
				prefix_list_idx = (prefix_list_idx + 1) % prefix_list_size;
f0101863:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101866:	40                   	inc    %eax
f0101867:	99                   	cltd   
f0101868:	f7 7d ec             	idivl  -0x14(%ebp)
f010186b:	89 55 f0             	mov    %edx,-0x10(%ebp)
				RoundAutoCompleteCommandWithTheSamePrefix(strlen(PrefixList[prev]), PrefixList[prefix_list_idx], buf, &i, &lastIndex);
f010186e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101871:	c1 e0 0a             	shl    $0xa,%eax
f0101874:	8d 98 80 be 2b f0    	lea    -0xfd44180(%eax),%ebx
f010187a:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0101880:	c1 e0 0a             	shl    $0xa,%eax
f0101883:	05 80 be 2b f0       	add    $0xf02bbe80,%eax
f0101888:	83 ec 0c             	sub    $0xc,%esp
f010188b:	50                   	push   %eax
f010188c:	e8 ac d5 02 00       	call   f012ee3d <strlen>
f0101891:	83 c4 10             	add    $0x10,%esp
f0101894:	83 ec 0c             	sub    $0xc,%esp
f0101897:	8d 95 74 ff ff ff    	lea    -0x8c(%ebp),%edx
f010189d:	52                   	push   %edx
f010189e:	8d 95 78 ff ff ff    	lea    -0x88(%ebp),%edx
f01018a4:	52                   	push   %edx
f01018a5:	ff 75 0c             	pushl  0xc(%ebp)
f01018a8:	53                   	push   %ebx
f01018a9:	50                   	push   %eax
f01018aa:	e8 75 f6 ff ff       	call   f0100f24 <RoundAutoCompleteCommandWithTheSamePrefix>
f01018af:	83 c4 20             	add    $0x20,%esp
f01018b2:	e9 77 02 00 00       	jmp    f0101b2e <command_prompt_readline+0xb1b>
				}
			}
		}

		else if (c == 228) { // left arrow
f01018b7:	81 7d 94 e4 00 00 00 	cmpl   $0xe4,-0x6c(%ebp)
f01018be:	75 2e                	jne    f01018ee <command_prompt_readline+0x8db>
			if (i > 0) {
f01018c0:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01018c6:	85 c0                	test   %eax,%eax
f01018c8:	0f 8e 60 02 00 00    	jle    f0101b2e <command_prompt_readline+0xb1b>
				i--;
f01018ce:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01018d4:	48                   	dec    %eax
f01018d5:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
				cputchar(c);
f01018db:	83 ec 0c             	sub    $0xc,%esp
f01018de:	ff 75 94             	pushl  -0x6c(%ebp)
f01018e1:	e8 c4 f4 ff ff       	call   f0100daa <cputchar>
f01018e6:	83 c4 10             	add    $0x10,%esp
f01018e9:	e9 40 02 00 00       	jmp    f0101b2e <command_prompt_readline+0xb1b>
			}
		} else if (c == 229) { // right arrow
f01018ee:	81 7d 94 e5 00 00 00 	cmpl   $0xe5,-0x6c(%ebp)
f01018f5:	75 34                	jne    f010192b <command_prompt_readline+0x918>
			if (i < lastIndex) {
f01018f7:	8b 95 78 ff ff ff    	mov    -0x88(%ebp),%edx
f01018fd:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0101903:	39 c2                	cmp    %eax,%edx
f0101905:	0f 8d 23 02 00 00    	jge    f0101b2e <command_prompt_readline+0xb1b>
				i++;
f010190b:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0101911:	40                   	inc    %eax
f0101912:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
				cputchar(c);
f0101918:	83 ec 0c             	sub    $0xc,%esp
f010191b:	ff 75 94             	pushl  -0x6c(%ebp)
f010191e:	e8 87 f4 ff ff       	call   f0100daa <cputchar>
f0101923:	83 c4 10             	add    $0x10,%esp
f0101926:	e9 03 02 00 00       	jmp    f0101b2e <command_prompt_readline+0xb1b>
			}
		}
		else if (c == 0xE9 && i > 0) {		 // KEY_DEL
f010192b:	81 7d 94 e9 00 00 00 	cmpl   $0xe9,-0x6c(%ebp)
f0101932:	75 4c                	jne    f0101980 <command_prompt_readline+0x96d>
f0101934:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f010193a:	85 c0                	test   %eax,%eax
f010193c:	7e 42                	jle    f0101980 <command_prompt_readline+0x96d>
			for (int var = i; var <= lastIndex; ++var) {
f010193e:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0101944:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f0101947:	eb 1a                	jmp    f0101963 <command_prompt_readline+0x950>
				buf[var] = buf[var + 1];
f0101949:	8b 55 a4             	mov    -0x5c(%ebp),%edx
f010194c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010194f:	01 c2                	add    %eax,%edx
f0101951:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0101954:	8d 48 01             	lea    0x1(%eax),%ecx
f0101957:	8b 45 0c             	mov    0xc(%ebp),%eax
f010195a:	01 c8                	add    %ecx,%eax
f010195c:	8a 00                	mov    (%eax),%al
f010195e:	88 02                	mov    %al,(%edx)
				i++;
				cputchar(c);
			}
		}
		else if (c == 0xE9 && i > 0) {		 // KEY_DEL
			for (int var = i; var <= lastIndex; ++var) {
f0101960:	ff 45 a4             	incl   -0x5c(%ebp)
f0101963:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0101969:	39 45 a4             	cmp    %eax,-0x5c(%ebp)
f010196c:	7e db                	jle    f0101949 <command_prompt_readline+0x936>
				buf[var] = buf[var + 1];
			}
			lastIndex--;
f010196e:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0101974:	48                   	dec    %eax
f0101975:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f010197b:	e9 ae 01 00 00       	jmp    f0101b2e <command_prompt_readline+0xb1b>
		}
		else if (c >= ' ' && i < BUFLEN - 1 && c != 229 && c != 228) {
f0101980:	83 7d 94 1f          	cmpl   $0x1f,-0x6c(%ebp)
f0101984:	7e 60                	jle    f01019e6 <command_prompt_readline+0x9d3>
f0101986:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f010198c:	3d fe 03 00 00       	cmp    $0x3fe,%eax
f0101991:	7f 53                	jg     f01019e6 <command_prompt_readline+0x9d3>
f0101993:	81 7d 94 e5 00 00 00 	cmpl   $0xe5,-0x6c(%ebp)
f010199a:	74 4a                	je     f01019e6 <command_prompt_readline+0x9d3>
f010199c:	81 7d 94 e4 00 00 00 	cmpl   $0xe4,-0x6c(%ebp)
f01019a3:	74 41                	je     f01019e6 <command_prompt_readline+0x9d3>
			if (echoing)
f01019a5:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
f01019a9:	74 0e                	je     f01019b9 <command_prompt_readline+0x9a6>
				cputchar(c);
f01019ab:	83 ec 0c             	sub    $0xc,%esp
f01019ae:	ff 75 94             	pushl  -0x6c(%ebp)
f01019b1:	e8 f4 f3 ff ff       	call   f0100daa <cputchar>
f01019b6:	83 c4 10             	add    $0x10,%esp
			buf[i++] = c;
f01019b9:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01019bf:	8d 50 01             	lea    0x1(%eax),%edx
f01019c2:	89 95 78 ff ff ff    	mov    %edx,-0x88(%ebp)
f01019c8:	89 c2                	mov    %eax,%edx
f01019ca:	8b 45 0c             	mov    0xc(%ebp),%eax
f01019cd:	01 d0                	add    %edx,%eax
f01019cf:	8b 55 94             	mov    -0x6c(%ebp),%edx
f01019d2:	88 10                	mov    %dl,(%eax)
			lastIndex++;
f01019d4:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01019da:	40                   	inc    %eax
f01019db:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f01019e1:	e9 48 01 00 00       	jmp    f0101b2e <command_prompt_readline+0xb1b>
		} else if (c == '\b' && i > 0) {
f01019e6:	83 7d 94 08          	cmpl   $0x8,-0x6c(%ebp)
f01019ea:	75 60                	jne    f0101a4c <command_prompt_readline+0xa39>
f01019ec:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01019f2:	85 c0                	test   %eax,%eax
f01019f4:	7e 56                	jle    f0101a4c <command_prompt_readline+0xa39>

			if (echoing)
f01019f6:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
f01019fa:	74 0e                	je     f0101a0a <command_prompt_readline+0x9f7>
				cputchar(c);
f01019fc:	83 ec 0c             	sub    $0xc,%esp
f01019ff:	ff 75 94             	pushl  -0x6c(%ebp)
f0101a02:	e8 a3 f3 ff ff       	call   f0100daa <cputchar>
f0101a07:	83 c4 10             	add    $0x10,%esp
			for (int var = i; var <= i; ++var) {
f0101a0a:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0101a10:	89 45 a0             	mov    %eax,-0x60(%ebp)
f0101a13:	eb 1a                	jmp    f0101a2f <command_prompt_readline+0xa1c>
				buf[var - 1] = buf[var];
f0101a15:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0101a18:	8d 50 ff             	lea    -0x1(%eax),%edx
f0101a1b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101a1e:	01 c2                	add    %eax,%edx
f0101a20:	8b 4d a0             	mov    -0x60(%ebp),%ecx
f0101a23:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101a26:	01 c8                	add    %ecx,%eax
f0101a28:	8a 00                	mov    (%eax),%al
f0101a2a:	88 02                	mov    %al,(%edx)
			lastIndex++;
		} else if (c == '\b' && i > 0) {

			if (echoing)
				cputchar(c);
			for (int var = i; var <= i; ++var) {
f0101a2c:	ff 45 a0             	incl   -0x60(%ebp)
f0101a2f:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0101a35:	39 45 a0             	cmp    %eax,-0x60(%ebp)
f0101a38:	7e db                	jle    f0101a15 <command_prompt_readline+0xa02>
				buf[var - 1] = buf[var];
			}
			i--;
f0101a3a:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0101a40:	48                   	dec    %eax
f0101a41:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f0101a47:	e9 e2 00 00 00       	jmp    f0101b2e <command_prompt_readline+0xb1b>
		} else if (c == '\n' || c == '\r') {
f0101a4c:	83 7d 94 0a          	cmpl   $0xa,-0x6c(%ebp)
f0101a50:	74 0a                	je     f0101a5c <command_prompt_readline+0xa49>
f0101a52:	83 7d 94 0d          	cmpl   $0xd,-0x6c(%ebp)
f0101a56:	0f 85 d2 00 00 00    	jne    f0101b2e <command_prompt_readline+0xb1b>

			if (echoing)
f0101a5c:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
f0101a60:	74 0e                	je     f0101a70 <command_prompt_readline+0xa5d>
				cputchar(c);
f0101a62:	83 ec 0c             	sub    $0xc,%esp
f0101a65:	ff 75 94             	pushl  -0x6c(%ebp)
f0101a68:	e8 3d f3 ff ff       	call   f0100daa <cputchar>
f0101a6d:	83 c4 10             	add    $0x10,%esp

			buf[lastIndex] = 0;
f0101a70:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0101a76:	89 c2                	mov    %eax,%edx
f0101a78:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101a7b:	01 d0                	add    %edx,%eax
f0101a7d:	c6 00 00             	movb   $0x0,(%eax)
			if (last_command_idx == HISTORY_MAX) {
f0101a80:	a1 30 e5 18 f0       	mov    0xf018e530,%eax
f0101a85:	83 f8 13             	cmp    $0x13,%eax
f0101a88:	75 56                	jne    f0101ae0 <command_prompt_readline+0xacd>
				for (int idx = 0; idx < HISTORY_MAX; idx++) {
f0101a8a:	c7 45 9c 00 00 00 00 	movl   $0x0,-0x64(%ebp)
f0101a91:	eb 2d                	jmp    f0101ac0 <command_prompt_readline+0xaad>
					memcpy(command_history[idx], command_history[idx + 1],
f0101a93:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0101a96:	40                   	inc    %eax
f0101a97:	c1 e0 0a             	shl    $0xa,%eax
f0101a9a:	8d 90 80 4e 2d f0    	lea    -0xfd2b180(%eax),%edx
f0101aa0:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0101aa3:	c1 e0 0a             	shl    $0xa,%eax
f0101aa6:	05 80 4e 2d f0       	add    $0xf02d4e80,%eax
f0101aab:	83 ec 04             	sub    $0x4,%esp
f0101aae:	68 00 04 00 00       	push   $0x400
f0101ab3:	52                   	push   %edx
f0101ab4:	50                   	push   %eax
f0101ab5:	e8 a1 d5 02 00       	call   f012f05b <memcpy>
f0101aba:	83 c4 10             	add    $0x10,%esp
			if (echoing)
				cputchar(c);

			buf[lastIndex] = 0;
			if (last_command_idx == HISTORY_MAX) {
				for (int idx = 0; idx < HISTORY_MAX; idx++) {
f0101abd:	ff 45 9c             	incl   -0x64(%ebp)
f0101ac0:	83 7d 9c 12          	cmpl   $0x12,-0x64(%ebp)
f0101ac4:	7e cd                	jle    f0101a93 <command_prompt_readline+0xa80>
					memcpy(command_history[idx], command_history[idx + 1],
							BUFLEN);
				}
				memcpy(command_history[HISTORY_MAX], buf, BUFLEN);
f0101ac6:	83 ec 04             	sub    $0x4,%esp
f0101ac9:	68 00 04 00 00       	push   $0x400
f0101ace:	ff 75 0c             	pushl  0xc(%ebp)
f0101ad1:	68 80 9a 2d f0       	push   $0xf02d9a80
f0101ad6:	e8 80 d5 02 00       	call   f012f05b <memcpy>
f0101adb:	83 c4 10             	add    $0x10,%esp
			} else if (strcmp(command_history[last_command_idx], buf) != 0) {
				memcpy(command_history[++last_command_idx], buf, BUFLEN);
			}
			return;
f0101ade:	eb 68                	jmp    f0101b48 <command_prompt_readline+0xb35>
				for (int idx = 0; idx < HISTORY_MAX; idx++) {
					memcpy(command_history[idx], command_history[idx + 1],
							BUFLEN);
				}
				memcpy(command_history[HISTORY_MAX], buf, BUFLEN);
			} else if (strcmp(command_history[last_command_idx], buf) != 0) {
f0101ae0:	a1 30 e5 18 f0       	mov    0xf018e530,%eax
f0101ae5:	c1 e0 0a             	shl    $0xa,%eax
f0101ae8:	05 80 4e 2d f0       	add    $0xf02d4e80,%eax
f0101aed:	83 ec 08             	sub    $0x8,%esp
f0101af0:	ff 75 0c             	pushl  0xc(%ebp)
f0101af3:	50                   	push   %eax
f0101af4:	e8 50 d4 02 00       	call   f012ef49 <strcmp>
f0101af9:	83 c4 10             	add    $0x10,%esp
f0101afc:	85 c0                	test   %eax,%eax
f0101afe:	74 48                	je     f0101b48 <command_prompt_readline+0xb35>
				memcpy(command_history[++last_command_idx], buf, BUFLEN);
f0101b00:	a1 30 e5 18 f0       	mov    0xf018e530,%eax
f0101b05:	40                   	inc    %eax
f0101b06:	a3 30 e5 18 f0       	mov    %eax,0xf018e530
f0101b0b:	a1 30 e5 18 f0       	mov    0xf018e530,%eax
f0101b10:	c1 e0 0a             	shl    $0xa,%eax
f0101b13:	05 80 4e 2d f0       	add    $0xf02d4e80,%eax
f0101b18:	83 ec 04             	sub    $0x4,%esp
f0101b1b:	68 00 04 00 00       	push   $0x400
f0101b20:	ff 75 0c             	pushl  0xc(%ebp)
f0101b23:	50                   	push   %eax
f0101b24:	e8 32 d5 02 00       	call   f012f05b <memcpy>
f0101b29:	83 c4 10             	add    $0x10,%esp
			}
			return;
f0101b2c:	eb 1a                	jmp    f0101b48 <command_prompt_readline+0xb35>

		}
		last_c = c;
f0101b2e:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0101b31:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0101b34:	e9 44 f5 ff ff       	jmp    f010107d <command_prompt_readline+0x6a>
				clearandwritecommand(&i, commandidx, buf, &lastIndex);
		} else if (c == 9) { // Tab button
			if (last_c != 9) {
				clear_prefix_list(PrefixList, 100);
				if (strlen(buf) == 0 || last_c == 255)
					continue;
f0101b39:	90                   	nop
f0101b3a:	e9 3e f5 ff ff       	jmp    f010107d <command_prompt_readline+0x6a>
				int number_of_arguments = prefix_list_size = 0;
				char temp_buf[1024];
				strcpy(temp_buf, buf);
				int bufLength = strlen(buf);
				if (buf[bufLength - 1] == ' ')
					continue;
f0101b3f:	90                   	nop
			}
			return;

		}
		last_c = c;
	}
f0101b40:	e9 38 f5 ff ff       	jmp    f010107d <command_prompt_readline+0x6a>
			lastIndex = i;
		if (c < 0) {

			if (c != -E_EOF)
				cprintf("read error: %e\n", c);
			return;
f0101b45:	90                   	nop
f0101b46:	eb 01                	jmp    f0101b49 <command_prompt_readline+0xb36>
				}
				memcpy(command_history[HISTORY_MAX], buf, BUFLEN);
			} else if (strcmp(command_history[last_command_idx], buf) != 0) {
				memcpy(command_history[++last_command_idx], buf, BUFLEN);
			}
			return;
f0101b48:	90                   	nop

		}
		last_c = c;
	}
}
f0101b49:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0101b4c:	5b                   	pop    %ebx
f0101b4d:	5f                   	pop    %edi
f0101b4e:	5d                   	pop    %ebp
f0101b4f:	c3                   	ret    

f0101b50 <run_command_prompt>:
// ******************************************************************
// ******************************************************************

//invoke the command prompt
void run_command_prompt()
{
f0101b50:	55                   	push   %ebp
f0101b51:	89 e5                	mov    %esp,%ebp
f0101b53:	81 ec 08 04 00 00    	sub    $0x408,%esp
	/*2024*/
	LIST_INIT(&foundCommands);
f0101b59:	c7 05 50 be 2b f0 00 	movl   $0x0,0xf02bbe50
f0101b60:	00 00 00 
f0101b63:	c7 05 54 be 2b f0 00 	movl   $0x0,0xf02bbe54
f0101b6a:	00 00 00 
f0101b6d:	c7 05 5c be 2b f0 00 	movl   $0x0,0xf02bbe5c
f0101b74:	00 00 00 
		//readline("FOS> ", command_line);

		// ********** This DosKey supported readline function is a combined implementation from **********
		// ********** 		Mohamed Raafat & Mohamed Yousry, 3rd year students, FCIS, 2017		**********
		// ********** 				Combined, edited and modified by TA\Ghada Hamed				**********
		memset(command_line, 0, sizeof(command_line));
f0101b77:	83 ec 04             	sub    $0x4,%esp
f0101b7a:	68 00 04 00 00       	push   $0x400
f0101b7f:	6a 00                	push   $0x0
f0101b81:	8d 85 f8 fb ff ff    	lea    -0x408(%ebp),%eax
f0101b87:	50                   	push   %eax
f0101b88:	e8 9e d4 02 00       	call   f012f02b <memset>
f0101b8d:	83 c4 10             	add    $0x10,%esp
		command_prompt_readline("FOS> ", command_line);
f0101b90:	83 ec 08             	sub    $0x8,%esp
f0101b93:	8d 85 f8 fb ff ff    	lea    -0x408(%ebp),%eax
f0101b99:	50                   	push   %eax
f0101b9a:	68 2d 05 13 f0       	push   $0xf013052d
f0101b9f:	e8 6f f4 ff ff       	call   f0101013 <command_prompt_readline>
f0101ba4:	83 c4 10             	add    $0x10,%esp

		//parse and execute the command
		if (command_line != NULL)
			if (execute_command(command_line) < 0)
f0101ba7:	83 ec 0c             	sub    $0xc,%esp
f0101baa:	8d 85 f8 fb ff ff    	lea    -0x408(%ebp),%eax
f0101bb0:	50                   	push   %eax
f0101bb1:	e8 0d 00 00 00       	call   f0101bc3 <execute_command>
f0101bb6:	83 c4 10             	add    $0x10,%esp
f0101bb9:	85 c0                	test   %eax,%eax
f0101bbb:	78 02                	js     f0101bbf <run_command_prompt+0x6f>
				break;
	}
f0101bbd:	eb b8                	jmp    f0101b77 <run_command_prompt+0x27>
		command_prompt_readline("FOS> ", command_line);

		//parse and execute the command
		if (command_line != NULL)
			if (execute_command(command_line) < 0)
				break;
f0101bbf:	90                   	nop
	}
}
f0101bc0:	90                   	nop
f0101bc1:	c9                   	leave  
f0101bc2:	c3                   	ret    

f0101bc3 <execute_command>:
#define WHITESPACE "\t\r\n "

//Function to parse any command and execute it
//(simply by calling its corresponding function)
int execute_command(char *command_string)
{
f0101bc3:	55                   	push   %ebp
f0101bc4:	89 e5                	mov    %esp,%ebp
f0101bc6:	83 ec 78             	sub    $0x78,%esp
	int number_of_arguments;
	//allocate array of char * of size MAX_ARGUMENTS = 16 found in string.h
	char *arguments[MAX_ARGUMENTS];


	strsplit(command_string, WHITESPACE, arguments, &number_of_arguments) ;
f0101bc9:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0101bcc:	50                   	push   %eax
f0101bcd:	8d 45 90             	lea    -0x70(%ebp),%eax
f0101bd0:	50                   	push   %eax
f0101bd1:	68 1b 05 13 f0       	push   $0xf013051b
f0101bd6:	ff 75 08             	pushl  0x8(%ebp)
f0101bd9:	e8 93 d8 02 00       	call   f012f471 <strsplit>
f0101bde:	83 c4 10             	add    $0x10,%esp
	if (number_of_arguments == 0)
f0101be1:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0101be4:	85 c0                	test   %eax,%eax
f0101be6:	75 0a                	jne    f0101bf2 <execute_command+0x2f>
		return 0;
f0101be8:	b8 00 00 00 00       	mov    $0x0,%eax
f0101bed:	e9 a4 02 00 00       	jmp    f0101e96 <execute_command+0x2d3>

	int ret = process_command(number_of_arguments, arguments);
f0101bf2:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0101bf5:	83 ec 08             	sub    $0x8,%esp
f0101bf8:	8d 55 90             	lea    -0x70(%ebp),%edx
f0101bfb:	52                   	push   %edx
f0101bfc:	50                   	push   %eax
f0101bfd:	e8 e4 03 00 00       	call   f0101fe6 <process_command>
f0101c02:	83 c4 10             	add    $0x10,%esp
f0101c05:	89 45 e0             	mov    %eax,-0x20(%ebp)

	//cprintf("cmd %s, num of args %d, return %d\n", arguments[0], number_of_arguments, ret);

	if (ret == CMD_INVALID)
f0101c08:	83 7d e0 fd          	cmpl   $0xfffffffd,-0x20(%ebp)
f0101c0c:	75 19                	jne    f0101c27 <execute_command+0x64>
	{
		cprintf("Unknown command '%s'\n", arguments[0]);
f0101c0e:	8b 45 90             	mov    -0x70(%ebp),%eax
f0101c11:	83 ec 08             	sub    $0x8,%esp
f0101c14:	50                   	push   %eax
f0101c15:	68 33 05 13 f0       	push   $0xf0130533
f0101c1a:	e8 12 f2 ff ff       	call   f0100e31 <cprintf>
f0101c1f:	83 c4 10             	add    $0x10,%esp
f0101c22:	e9 6a 02 00 00       	jmp    f0101e91 <execute_command+0x2ce>
	}
	else if (ret == CMD_INV_NUM_ARGS)
f0101c27:	83 7d e0 fe          	cmpl   $0xfffffffe,-0x20(%ebp)
f0101c2b:	75 4f                	jne    f0101c7c <execute_command+0xb9>
	{
		int numOfFoundCmds = LIST_SIZE(&foundCommands);
f0101c2d:	a1 5c be 2b f0       	mov    0xf02bbe5c,%eax
f0101c32:	89 45 d8             	mov    %eax,-0x28(%ebp)
		if (numOfFoundCmds != 1)
f0101c35:	83 7d d8 01          	cmpl   $0x1,-0x28(%ebp)
f0101c39:	74 17                	je     f0101c52 <execute_command+0x8f>
		{
			panic("command is found but the list is either empty or contains more than one command!");
f0101c3b:	83 ec 04             	sub    $0x4,%esp
f0101c3e:	68 4c 05 13 f0       	push   $0xf013054c
f0101c43:	68 3d 01 00 00       	push   $0x13d
f0101c48:	68 9d 05 13 f0       	push   $0xf013059d
f0101c4d:	e8 5e e5 ff ff       	call   f01001b0 <_panic>
		}
		struct Command * cmd = LIST_FIRST(&foundCommands);
f0101c52:	a1 50 be 2b f0       	mov    0xf02bbe50,%eax
f0101c57:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		cprintf("%s: invalid number of args.\nDescription: %s\n", cmd->name, cmd->description);
f0101c5a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0101c5d:	8b 50 04             	mov    0x4(%eax),%edx
f0101c60:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0101c63:	8b 00                	mov    (%eax),%eax
f0101c65:	83 ec 04             	sub    $0x4,%esp
f0101c68:	52                   	push   %edx
f0101c69:	50                   	push   %eax
f0101c6a:	68 b8 05 13 f0       	push   $0xf01305b8
f0101c6f:	e8 bd f1 ff ff       	call   f0100e31 <cprintf>
f0101c74:	83 c4 10             	add    $0x10,%esp
f0101c77:	e9 15 02 00 00       	jmp    f0101e91 <execute_command+0x2ce>
	}
	else if (ret == CMD_MATCHED)
f0101c7c:	83 7d e0 ff          	cmpl   $0xffffffff,-0x20(%ebp)
f0101c80:	0f 85 e6 01 00 00    	jne    f0101e6c <execute_command+0x2a9>
	{
		int i = 1;
f0101c86:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		int numOfFoundCmds = LIST_SIZE(&foundCommands);
f0101c8d:	a1 5c be 2b f0       	mov    0xf02bbe5c,%eax
f0101c92:	89 45 dc             	mov    %eax,-0x24(%ebp)
		if (numOfFoundCmds == 0)
f0101c95:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0101c99:	75 17                	jne    f0101cb2 <execute_command+0xef>
		{
			panic("command is matched but the list is empty!");
f0101c9b:	83 ec 04             	sub    $0x4,%esp
f0101c9e:	68 e8 05 13 f0       	push   $0xf01305e8
f0101ca3:	68 48 01 00 00       	push   $0x148
f0101ca8:	68 9d 05 13 f0       	push   $0xf013059d
f0101cad:	e8 fe e4 ff ff       	call   f01001b0 <_panic>
		}
		struct Command * cmd = NULL;
f0101cb2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		LIST_FOREACH(cmd, &foundCommands)
f0101cb9:	a1 50 be 2b f0       	mov    0xf02bbe50,%eax
f0101cbe:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0101cc1:	eb 28                	jmp    f0101ceb <execute_command+0x128>
		{
			cprintf("[%d] %s\n", i++, cmd->name);
f0101cc3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101cc6:	8b 10                	mov    (%eax),%edx
f0101cc8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101ccb:	8d 48 01             	lea    0x1(%eax),%ecx
f0101cce:	89 4d f4             	mov    %ecx,-0xc(%ebp)
f0101cd1:	83 ec 04             	sub    $0x4,%esp
f0101cd4:	52                   	push   %edx
f0101cd5:	50                   	push   %eax
f0101cd6:	68 12 06 13 f0       	push   $0xf0130612
f0101cdb:	e8 51 f1 ff ff       	call   f0100e31 <cprintf>
f0101ce0:	83 c4 10             	add    $0x10,%esp
		if (numOfFoundCmds == 0)
		{
			panic("command is matched but the list is empty!");
		}
		struct Command * cmd = NULL;
		LIST_FOREACH(cmd, &foundCommands)
f0101ce3:	a1 58 be 2b f0       	mov    0xf02bbe58,%eax
f0101ce8:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0101ceb:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0101cef:	74 08                	je     f0101cf9 <execute_command+0x136>
f0101cf1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101cf4:	8b 40 10             	mov    0x10(%eax),%eax
f0101cf7:	eb 05                	jmp    f0101cfe <execute_command+0x13b>
f0101cf9:	b8 00 00 00 00       	mov    $0x0,%eax
f0101cfe:	a3 58 be 2b f0       	mov    %eax,0xf02bbe58
f0101d03:	a1 58 be 2b f0       	mov    0xf02bbe58,%eax
f0101d08:	85 c0                	test   %eax,%eax
f0101d0a:	75 b7                	jne    f0101cc3 <execute_command+0x100>
f0101d0c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0101d10:	75 b1                	jne    f0101cc3 <execute_command+0x100>
		{
			cprintf("[%d] %s\n", i++, cmd->name);
		}
		cprintf("Please select the required command [1] to [%d] and press enter? or press any other key to cancel: ", numOfFoundCmds);
f0101d12:	83 ec 08             	sub    $0x8,%esp
f0101d15:	ff 75 dc             	pushl  -0x24(%ebp)
f0101d18:	68 1c 06 13 f0       	push   $0xf013061c
f0101d1d:	e8 0f f1 ff ff       	call   f0100e31 <cprintf>
f0101d22:	83 c4 10             	add    $0x10,%esp
		char Chose = getchar();
f0101d25:	e8 97 f0 ff ff       	call   f0100dc1 <getchar>
f0101d2a:	88 45 ef             	mov    %al,-0x11(%ebp)
		cputchar(Chose);
f0101d2d:	0f be 45 ef          	movsbl -0x11(%ebp),%eax
f0101d31:	83 ec 0c             	sub    $0xc,%esp
f0101d34:	50                   	push   %eax
f0101d35:	e8 70 f0 ff ff       	call   f0100daa <cputchar>
f0101d3a:	83 c4 10             	add    $0x10,%esp
		int selection = 0;
f0101d3d:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
		while (Chose >= '0' && Chose <= '9')
f0101d44:	eb 40                	jmp    f0101d86 <execute_command+0x1c3>
		{
			selection = selection*10 + (Chose - '0') ;
f0101d46:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0101d49:	89 d0                	mov    %edx,%eax
f0101d4b:	c1 e0 02             	shl    $0x2,%eax
f0101d4e:	01 d0                	add    %edx,%eax
f0101d50:	01 c0                	add    %eax,%eax
f0101d52:	89 c2                	mov    %eax,%edx
f0101d54:	0f be 45 ef          	movsbl -0x11(%ebp),%eax
f0101d58:	83 e8 30             	sub    $0x30,%eax
f0101d5b:	01 d0                	add    %edx,%eax
f0101d5d:	89 45 e8             	mov    %eax,-0x18(%ebp)
			if (selection < 1 || selection > numOfFoundCmds)
f0101d60:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0101d64:	7e 2c                	jle    f0101d92 <execute_command+0x1cf>
f0101d66:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0101d69:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f0101d6c:	7f 24                	jg     f0101d92 <execute_command+0x1cf>
				break;

			Chose = getchar();
f0101d6e:	e8 4e f0 ff ff       	call   f0100dc1 <getchar>
f0101d73:	88 45 ef             	mov    %al,-0x11(%ebp)
			cputchar(Chose);
f0101d76:	0f be 45 ef          	movsbl -0x11(%ebp),%eax
f0101d7a:	83 ec 0c             	sub    $0xc,%esp
f0101d7d:	50                   	push   %eax
f0101d7e:	e8 27 f0 ff ff       	call   f0100daa <cputchar>
f0101d83:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("Please select the required command [1] to [%d] and press enter? or press any other key to cancel: ", numOfFoundCmds);
		char Chose = getchar();
		cputchar(Chose);
		int selection = 0;
		while (Chose >= '0' && Chose <= '9')
f0101d86:	80 7d ef 2f          	cmpb   $0x2f,-0x11(%ebp)
f0101d8a:	7e 06                	jle    f0101d92 <execute_command+0x1cf>
f0101d8c:	80 7d ef 39          	cmpb   $0x39,-0x11(%ebp)
f0101d90:	7e b4                	jle    f0101d46 <execute_command+0x183>
				break;

			Chose = getchar();
			cputchar(Chose);
		}
		cputchar('\n');
f0101d92:	83 ec 0c             	sub    $0xc,%esp
f0101d95:	6a 0a                	push   $0xa
f0101d97:	e8 0e f0 ff ff       	call   f0100daa <cputchar>
f0101d9c:	83 c4 10             	add    $0x10,%esp
		if (selection >= 1 && selection <= numOfFoundCmds)
f0101d9f:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0101da3:	0f 8e e8 00 00 00    	jle    f0101e91 <execute_command+0x2ce>
f0101da9:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0101dac:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f0101daf:	0f 8f dc 00 00 00    	jg     f0101e91 <execute_command+0x2ce>
		{
			int c = 1;
f0101db5:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
			LIST_FOREACH(cmd, &foundCommands)
f0101dbc:	a1 50 be 2b f0       	mov    0xf02bbe50,%eax
f0101dc1:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0101dc4:	eb 75                	jmp    f0101e3b <execute_command+0x278>
			{
				if (c++ == selection)
f0101dc6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0101dc9:	8d 50 01             	lea    0x1(%eax),%edx
f0101dcc:	89 55 e4             	mov    %edx,-0x1c(%ebp)
f0101dcf:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0101dd2:	75 5f                	jne    f0101e33 <execute_command+0x270>
				{
					if (cmd->num_of_args == 0)
f0101dd4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101dd7:	8b 40 0c             	mov    0xc(%eax),%eax
f0101dda:	85 c0                	test   %eax,%eax
f0101ddc:	75 31                	jne    f0101e0f <execute_command+0x24c>
					{
						cprintf("FOS> %s\n", cmd->name);
f0101dde:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101de1:	8b 00                	mov    (%eax),%eax
f0101de3:	83 ec 08             	sub    $0x8,%esp
f0101de6:	50                   	push   %eax
f0101de7:	68 7f 06 13 f0       	push   $0xf013067f
f0101dec:	e8 40 f0 ff ff       	call   f0100e31 <cprintf>
f0101df1:	83 c4 10             	add    $0x10,%esp
						return cmd->function_to_execute(number_of_arguments, arguments);
f0101df4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101df7:	8b 40 08             	mov    0x8(%eax),%eax
f0101dfa:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0101dfd:	83 ec 08             	sub    $0x8,%esp
f0101e00:	8d 4d 90             	lea    -0x70(%ebp),%ecx
f0101e03:	51                   	push   %ecx
f0101e04:	52                   	push   %edx
f0101e05:	ff d0                	call   *%eax
f0101e07:	83 c4 10             	add    $0x10,%esp
f0101e0a:	e9 87 00 00 00       	jmp    f0101e96 <execute_command+0x2d3>
					}
					else
					{
						cprintf("%s: %s\n", cmd->name, cmd->description);
f0101e0f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101e12:	8b 50 04             	mov    0x4(%eax),%edx
f0101e15:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101e18:	8b 00                	mov    (%eax),%eax
f0101e1a:	83 ec 04             	sub    $0x4,%esp
f0101e1d:	52                   	push   %edx
f0101e1e:	50                   	push   %eax
f0101e1f:	68 88 06 13 f0       	push   $0xf0130688
f0101e24:	e8 08 f0 ff ff       	call   f0100e31 <cprintf>
f0101e29:	83 c4 10             	add    $0x10,%esp
						return 0;
f0101e2c:	b8 00 00 00 00       	mov    $0x0,%eax
f0101e31:	eb 63                	jmp    f0101e96 <execute_command+0x2d3>
		}
		cputchar('\n');
		if (selection >= 1 && selection <= numOfFoundCmds)
		{
			int c = 1;
			LIST_FOREACH(cmd, &foundCommands)
f0101e33:	a1 58 be 2b f0       	mov    0xf02bbe58,%eax
f0101e38:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0101e3b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0101e3f:	74 08                	je     f0101e49 <execute_command+0x286>
f0101e41:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101e44:	8b 40 10             	mov    0x10(%eax),%eax
f0101e47:	eb 05                	jmp    f0101e4e <execute_command+0x28b>
f0101e49:	b8 00 00 00 00       	mov    $0x0,%eax
f0101e4e:	a3 58 be 2b f0       	mov    %eax,0xf02bbe58
f0101e53:	a1 58 be 2b f0       	mov    0xf02bbe58,%eax
f0101e58:	85 c0                	test   %eax,%eax
f0101e5a:	0f 85 66 ff ff ff    	jne    f0101dc6 <execute_command+0x203>
f0101e60:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0101e64:	0f 85 5c ff ff ff    	jne    f0101dc6 <execute_command+0x203>
f0101e6a:	eb 25                	jmp    f0101e91 <execute_command+0x2ce>
			}
		}
	}
	else
	{
		return commands[ret].function_to_execute(number_of_arguments, arguments);
f0101e6c:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0101e6f:	89 d0                	mov    %edx,%eax
f0101e71:	01 c0                	add    %eax,%eax
f0101e73:	01 d0                	add    %edx,%eax
f0101e75:	c1 e0 03             	shl    $0x3,%eax
f0101e78:	05 48 e5 18 f0       	add    $0xf018e548,%eax
f0101e7d:	8b 00                	mov    (%eax),%eax
f0101e7f:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0101e82:	83 ec 08             	sub    $0x8,%esp
f0101e85:	8d 4d 90             	lea    -0x70(%ebp),%ecx
f0101e88:	51                   	push   %ecx
f0101e89:	52                   	push   %edx
f0101e8a:	ff d0                	call   *%eax
f0101e8c:	83 c4 10             	add    $0x10,%esp
f0101e8f:	eb 05                	jmp    f0101e96 <execute_command+0x2d3>
	}
	return 0;
f0101e91:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101e96:	c9                   	leave  
f0101e97:	c3                   	ret    

f0101e98 <subSequence>:
bool subSequence(char* str1, char* substr){
f0101e98:	55                   	push   %ebp
f0101e99:	89 e5                	mov    %esp,%ebp
f0101e9b:	83 ec 28             	sub    $0x28,%esp
	bool res=0;
f0101e9e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int len=strlen(str1);
f0101ea5:	83 ec 0c             	sub    $0xc,%esp
f0101ea8:	ff 75 08             	pushl  0x8(%ebp)
f0101eab:	e8 8d cf 02 00       	call   f012ee3d <strlen>
f0101eb0:	83 c4 10             	add    $0x10,%esp
f0101eb3:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int subl=strlen(substr);
f0101eb6:	83 ec 0c             	sub    $0xc,%esp
f0101eb9:	ff 75 0c             	pushl  0xc(%ebp)
f0101ebc:	e8 7c cf 02 00       	call   f012ee3d <strlen>
f0101ec1:	83 c4 10             	add    $0x10,%esp
f0101ec4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	int subi=0;
f0101ec7:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	for (int i=0;i<len;i++){
f0101ece:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0101ed5:	eb 1e                	jmp    f0101ef5 <subSequence+0x5d>
		if(str1[i]==substr[subi]){
f0101ed7:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0101eda:	8b 45 08             	mov    0x8(%ebp),%eax
f0101edd:	01 d0                	add    %edx,%eax
f0101edf:	8a 10                	mov    (%eax),%dl
f0101ee1:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f0101ee4:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101ee7:	01 c8                	add    %ecx,%eax
f0101ee9:	8a 00                	mov    (%eax),%al
f0101eeb:	38 c2                	cmp    %al,%dl
f0101eed:	75 03                	jne    f0101ef2 <subSequence+0x5a>
			subi++;
f0101eef:	ff 45 f0             	incl   -0x10(%ebp)
bool subSequence(char* str1, char* substr){
	bool res=0;
	int len=strlen(str1);
	int subl=strlen(substr);
	int subi=0;
	for (int i=0;i<len;i++){
f0101ef2:	ff 45 ec             	incl   -0x14(%ebp)
f0101ef5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101ef8:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0101efb:	7c da                	jl     f0101ed7 <subSequence+0x3f>
		if(str1[i]==substr[subi]){
			subi++;
		}
	}
	if(subi==subl){
f0101efd:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101f00:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0101f03:	75 07                	jne    f0101f0c <subSequence+0x74>
		res=1;
f0101f05:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
	}
	return res;
f0101f0c:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0101f0f:	c9                   	leave  
f0101f10:	c3                   	ret    

f0101f11 <erase>:
void erase(){
f0101f11:	55                   	push   %ebp
f0101f12:	89 e5                	mov    %esp,%ebp
f0101f14:	83 ec 18             	sub    $0x18,%esp
	struct Command *command;
	LIST_FOREACH(command,&(foundCommands)){
f0101f17:	a1 50 be 2b f0       	mov    0xf02bbe50,%eax
f0101f1c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0101f1f:	e9 90 00 00 00       	jmp    f0101fb4 <erase+0xa3>
		LIST_REMOVE(&foundCommands,command);
f0101f24:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0101f28:	75 17                	jne    f0101f41 <erase+0x30>
f0101f2a:	83 ec 04             	sub    $0x4,%esp
f0101f2d:	68 90 06 13 f0       	push   $0xf0130690
f0101f32:	68 8a 01 00 00       	push   $0x18a
f0101f37:	68 9d 05 13 f0       	push   $0xf013059d
f0101f3c:	e8 6f e2 ff ff       	call   f01001b0 <_panic>
f0101f41:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101f44:	8b 40 10             	mov    0x10(%eax),%eax
f0101f47:	85 c0                	test   %eax,%eax
f0101f49:	74 11                	je     f0101f5c <erase+0x4b>
f0101f4b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101f4e:	8b 40 10             	mov    0x10(%eax),%eax
f0101f51:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0101f54:	8b 52 14             	mov    0x14(%edx),%edx
f0101f57:	89 50 14             	mov    %edx,0x14(%eax)
f0101f5a:	eb 0b                	jmp    f0101f67 <erase+0x56>
f0101f5c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101f5f:	8b 40 14             	mov    0x14(%eax),%eax
f0101f62:	a3 54 be 2b f0       	mov    %eax,0xf02bbe54
f0101f67:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101f6a:	8b 40 14             	mov    0x14(%eax),%eax
f0101f6d:	85 c0                	test   %eax,%eax
f0101f6f:	74 11                	je     f0101f82 <erase+0x71>
f0101f71:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101f74:	8b 40 14             	mov    0x14(%eax),%eax
f0101f77:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0101f7a:	8b 52 10             	mov    0x10(%edx),%edx
f0101f7d:	89 50 10             	mov    %edx,0x10(%eax)
f0101f80:	eb 0b                	jmp    f0101f8d <erase+0x7c>
f0101f82:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101f85:	8b 40 10             	mov    0x10(%eax),%eax
f0101f88:	a3 50 be 2b f0       	mov    %eax,0xf02bbe50
f0101f8d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101f90:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
f0101f97:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101f9a:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f0101fa1:	a1 5c be 2b f0       	mov    0xf02bbe5c,%eax
f0101fa6:	48                   	dec    %eax
f0101fa7:	a3 5c be 2b f0       	mov    %eax,0xf02bbe5c
	}
	return res;
}
void erase(){
	struct Command *command;
	LIST_FOREACH(command,&(foundCommands)){
f0101fac:	a1 58 be 2b f0       	mov    0xf02bbe58,%eax
f0101fb1:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0101fb4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0101fb8:	74 08                	je     f0101fc2 <erase+0xb1>
f0101fba:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101fbd:	8b 40 10             	mov    0x10(%eax),%eax
f0101fc0:	eb 05                	jmp    f0101fc7 <erase+0xb6>
f0101fc2:	b8 00 00 00 00       	mov    $0x0,%eax
f0101fc7:	a3 58 be 2b f0       	mov    %eax,0xf02bbe58
f0101fcc:	a1 58 be 2b f0       	mov    0xf02bbe58,%eax
f0101fd1:	85 c0                	test   %eax,%eax
f0101fd3:	0f 85 4b ff ff ff    	jne    f0101f24 <erase+0x13>
f0101fd9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0101fdd:	0f 85 41 ff ff ff    	jne    f0101f24 <erase+0x13>
		LIST_REMOVE(&foundCommands,command);
	}
}
f0101fe3:	90                   	nop
f0101fe4:	c9                   	leave  
f0101fe5:	c3                   	ret    

f0101fe6 <process_command>:
int process_command(int number_of_arguments, char** arguments)
{
f0101fe6:	55                   	push   %ebp
f0101fe7:	89 e5                	mov    %esp,%ebp
f0101fe9:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT'23.MS1 - #2] [1] PLAY WITH CODE! - process_command
	//Comment the following line before start coding...
	//panic("process_command is not implemented yet");


	int command_found = 0;
f0101fec:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	erase();
f0101ff3:	e8 19 ff ff ff       	call   f0101f11 <erase>
	for (int i = 0; i < NUM_OF_COMMANDS; i++)
f0101ff8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0101fff:	e9 19 02 00 00       	jmp    f010221d <process_command+0x237>
		{
			int strl= strlen(commands[i].name);
f0102004:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0102007:	89 d0                	mov    %edx,%eax
f0102009:	01 c0                	add    %eax,%eax
f010200b:	01 d0                	add    %edx,%eax
f010200d:	c1 e0 03             	shl    $0x3,%eax
f0102010:	05 40 e5 18 f0       	add    $0xf018e540,%eax
f0102015:	8b 00                	mov    (%eax),%eax
f0102017:	83 ec 0c             	sub    $0xc,%esp
f010201a:	50                   	push   %eax
f010201b:	e8 1d ce 02 00       	call   f012ee3d <strlen>
f0102020:	83 c4 10             	add    $0x10,%esp
f0102023:	89 45 ec             	mov    %eax,-0x14(%ebp)
			if ((strncmp(arguments[0], commands[i].name,strl)) == 0)
f0102026:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f0102029:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010202c:	89 d0                	mov    %edx,%eax
f010202e:	01 c0                	add    %eax,%eax
f0102030:	01 d0                	add    %edx,%eax
f0102032:	c1 e0 03             	shl    $0x3,%eax
f0102035:	05 40 e5 18 f0       	add    $0xf018e540,%eax
f010203a:	8b 10                	mov    (%eax),%edx
f010203c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010203f:	8b 00                	mov    (%eax),%eax
f0102041:	83 ec 04             	sub    $0x4,%esp
f0102044:	51                   	push   %ecx
f0102045:	52                   	push   %edx
f0102046:	50                   	push   %eax
f0102047:	e8 35 cf 02 00       	call   f012ef81 <strncmp>
f010204c:	83 c4 10             	add    $0x10,%esp
f010204f:	85 c0                	test   %eax,%eax
f0102051:	0f 85 f5 00 00 00    	jne    f010214c <process_command+0x166>
			{
				if((number_of_arguments-1)==commands[i].num_of_args||(number_of_arguments>1&&commands[i].num_of_args==-1)){
f0102057:	8b 45 08             	mov    0x8(%ebp),%eax
f010205a:	8d 48 ff             	lea    -0x1(%eax),%ecx
f010205d:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0102060:	89 d0                	mov    %edx,%eax
f0102062:	01 c0                	add    %eax,%eax
f0102064:	01 d0                	add    %edx,%eax
f0102066:	c1 e0 03             	shl    $0x3,%eax
f0102069:	05 4c e5 18 f0       	add    $0xf018e54c,%eax
f010206e:	8b 00                	mov    (%eax),%eax
f0102070:	39 c1                	cmp    %eax,%ecx
f0102072:	74 1e                	je     f0102092 <process_command+0xac>
f0102074:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f0102078:	7e 27                	jle    f01020a1 <process_command+0xbb>
f010207a:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010207d:	89 d0                	mov    %edx,%eax
f010207f:	01 c0                	add    %eax,%eax
f0102081:	01 d0                	add    %edx,%eax
f0102083:	c1 e0 03             	shl    $0x3,%eax
f0102086:	05 4c e5 18 f0       	add    $0xf018e54c,%eax
f010208b:	8b 00                	mov    (%eax),%eax
f010208d:	83 f8 ff             	cmp    $0xffffffff,%eax
f0102090:	75 0f                	jne    f01020a1 <process_command+0xbb>
					command_found=1;
f0102092:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
					return i;
f0102099:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010209c:	e9 9e 01 00 00       	jmp    f010223f <process_command+0x259>
				}
				else{
					LIST_INSERT_TAIL(&foundCommands,&commands[i]);
f01020a1:	8b 15 54 be 2b f0    	mov    0xf02bbe54,%edx
f01020a7:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f01020aa:	89 c8                	mov    %ecx,%eax
f01020ac:	01 c0                	add    %eax,%eax
f01020ae:	01 c8                	add    %ecx,%eax
f01020b0:	c1 e0 03             	shl    $0x3,%eax
f01020b3:	05 54 e5 18 f0       	add    $0xf018e554,%eax
f01020b8:	89 10                	mov    %edx,(%eax)
f01020ba:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01020bd:	89 d0                	mov    %edx,%eax
f01020bf:	01 c0                	add    %eax,%eax
f01020c1:	01 d0                	add    %edx,%eax
f01020c3:	c1 e0 03             	shl    $0x3,%eax
f01020c6:	05 54 e5 18 f0       	add    $0xf018e554,%eax
f01020cb:	8b 00                	mov    (%eax),%eax
f01020cd:	85 c0                	test   %eax,%eax
f01020cf:	74 1c                	je     f01020ed <process_command+0x107>
f01020d1:	8b 15 54 be 2b f0    	mov    0xf02bbe54,%edx
f01020d7:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f01020da:	89 c8                	mov    %ecx,%eax
f01020dc:	01 c0                	add    %eax,%eax
f01020de:	01 c8                	add    %ecx,%eax
f01020e0:	c1 e0 03             	shl    $0x3,%eax
f01020e3:	05 40 e5 18 f0       	add    $0xf018e540,%eax
f01020e8:	89 42 10             	mov    %eax,0x10(%edx)
f01020eb:	eb 16                	jmp    f0102103 <process_command+0x11d>
f01020ed:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01020f0:	89 d0                	mov    %edx,%eax
f01020f2:	01 c0                	add    %eax,%eax
f01020f4:	01 d0                	add    %edx,%eax
f01020f6:	c1 e0 03             	shl    $0x3,%eax
f01020f9:	05 40 e5 18 f0       	add    $0xf018e540,%eax
f01020fe:	a3 50 be 2b f0       	mov    %eax,0xf02bbe50
f0102103:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0102106:	89 d0                	mov    %edx,%eax
f0102108:	01 c0                	add    %eax,%eax
f010210a:	01 d0                	add    %edx,%eax
f010210c:	c1 e0 03             	shl    $0x3,%eax
f010210f:	05 40 e5 18 f0       	add    $0xf018e540,%eax
f0102114:	a3 54 be 2b f0       	mov    %eax,0xf02bbe54
f0102119:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010211c:	89 d0                	mov    %edx,%eax
f010211e:	01 c0                	add    %eax,%eax
f0102120:	01 d0                	add    %edx,%eax
f0102122:	c1 e0 03             	shl    $0x3,%eax
f0102125:	05 50 e5 18 f0       	add    $0xf018e550,%eax
f010212a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0102130:	a1 5c be 2b f0       	mov    0xf02bbe5c,%eax
f0102135:	40                   	inc    %eax
f0102136:	a3 5c be 2b f0       	mov    %eax,0xf02bbe5c
					command_found=1;
f010213b:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
					return CMD_INV_NUM_ARGS;
f0102142:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
f0102147:	e9 f3 00 00 00       	jmp    f010223f <process_command+0x259>
				}
			}
			else if(subSequence(commands[i].name,arguments[0])){
f010214c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010214f:	8b 10                	mov    (%eax),%edx
f0102151:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f0102154:	89 c8                	mov    %ecx,%eax
f0102156:	01 c0                	add    %eax,%eax
f0102158:	01 c8                	add    %ecx,%eax
f010215a:	c1 e0 03             	shl    $0x3,%eax
f010215d:	05 40 e5 18 f0       	add    $0xf018e540,%eax
f0102162:	8b 00                	mov    (%eax),%eax
f0102164:	83 ec 08             	sub    $0x8,%esp
f0102167:	52                   	push   %edx
f0102168:	50                   	push   %eax
f0102169:	e8 2a fd ff ff       	call   f0101e98 <subSequence>
f010216e:	83 c4 10             	add    $0x10,%esp
f0102171:	85 c0                	test   %eax,%eax
f0102173:	0f 84 a1 00 00 00    	je     f010221a <process_command+0x234>
				command_found=1;
f0102179:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
				LIST_INSERT_TAIL(&foundCommands,&commands[i]);
f0102180:	8b 15 54 be 2b f0    	mov    0xf02bbe54,%edx
f0102186:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f0102189:	89 c8                	mov    %ecx,%eax
f010218b:	01 c0                	add    %eax,%eax
f010218d:	01 c8                	add    %ecx,%eax
f010218f:	c1 e0 03             	shl    $0x3,%eax
f0102192:	05 54 e5 18 f0       	add    $0xf018e554,%eax
f0102197:	89 10                	mov    %edx,(%eax)
f0102199:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010219c:	89 d0                	mov    %edx,%eax
f010219e:	01 c0                	add    %eax,%eax
f01021a0:	01 d0                	add    %edx,%eax
f01021a2:	c1 e0 03             	shl    $0x3,%eax
f01021a5:	05 54 e5 18 f0       	add    $0xf018e554,%eax
f01021aa:	8b 00                	mov    (%eax),%eax
f01021ac:	85 c0                	test   %eax,%eax
f01021ae:	74 1c                	je     f01021cc <process_command+0x1e6>
f01021b0:	8b 15 54 be 2b f0    	mov    0xf02bbe54,%edx
f01021b6:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f01021b9:	89 c8                	mov    %ecx,%eax
f01021bb:	01 c0                	add    %eax,%eax
f01021bd:	01 c8                	add    %ecx,%eax
f01021bf:	c1 e0 03             	shl    $0x3,%eax
f01021c2:	05 40 e5 18 f0       	add    $0xf018e540,%eax
f01021c7:	89 42 10             	mov    %eax,0x10(%edx)
f01021ca:	eb 16                	jmp    f01021e2 <process_command+0x1fc>
f01021cc:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01021cf:	89 d0                	mov    %edx,%eax
f01021d1:	01 c0                	add    %eax,%eax
f01021d3:	01 d0                	add    %edx,%eax
f01021d5:	c1 e0 03             	shl    $0x3,%eax
f01021d8:	05 40 e5 18 f0       	add    $0xf018e540,%eax
f01021dd:	a3 50 be 2b f0       	mov    %eax,0xf02bbe50
f01021e2:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01021e5:	89 d0                	mov    %edx,%eax
f01021e7:	01 c0                	add    %eax,%eax
f01021e9:	01 d0                	add    %edx,%eax
f01021eb:	c1 e0 03             	shl    $0x3,%eax
f01021ee:	05 40 e5 18 f0       	add    $0xf018e540,%eax
f01021f3:	a3 54 be 2b f0       	mov    %eax,0xf02bbe54
f01021f8:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01021fb:	89 d0                	mov    %edx,%eax
f01021fd:	01 c0                	add    %eax,%eax
f01021ff:	01 d0                	add    %edx,%eax
f0102201:	c1 e0 03             	shl    $0x3,%eax
f0102204:	05 50 e5 18 f0       	add    $0xf018e550,%eax
f0102209:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010220f:	a1 5c be 2b f0       	mov    0xf02bbe5c,%eax
f0102214:	40                   	inc    %eax
f0102215:	a3 5c be 2b f0       	mov    %eax,0xf02bbe5c
	//panic("process_command is not implemented yet");


	int command_found = 0;
	erase();
	for (int i = 0; i < NUM_OF_COMMANDS; i++)
f010221a:	ff 45 f0             	incl   -0x10(%ebp)
f010221d:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0102220:	a1 60 e9 18 f0       	mov    0xf018e960,%eax
f0102225:	39 c2                	cmp    %eax,%edx
f0102227:	0f 82 d7 fd ff ff    	jb     f0102004 <process_command+0x1e>
			else if(subSequence(commands[i].name,arguments[0])){
				command_found=1;
				LIST_INSERT_TAIL(&foundCommands,&commands[i]);
			}
		}
	if(command_found==0){
f010222d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102231:	75 07                	jne    f010223a <process_command+0x254>
		return CMD_INVALID;
f0102233:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
f0102238:	eb 05                	jmp    f010223f <process_command+0x259>
	}
	return CMD_MATCHED;
f010223a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
f010223f:	c9                   	leave  
f0102240:	c3                   	ret    

f0102241 <setKHeapPlacementStrategyCONTALLOC>:
#define KHP_PLACE_FIRSTFIT 	0x1
#define KHP_PLACE_BESTFIT 	0x2
#define KHP_PLACE_NEXTFIT 	0x3
#define KHP_PLACE_WORSTFIT 	0x4

static inline void setKHeapPlacementStrategyCONTALLOC(){_KHeapPlacementStrategy = KHP_PLACE_CONTALLOC;}
f0102241:	55                   	push   %ebp
f0102242:	89 e5                	mov    %esp,%ebp
f0102244:	c7 05 18 be 2b f0 00 	movl   $0x0,0xf02bbe18
f010224b:	00 00 00 
f010224e:	90                   	nop
f010224f:	5d                   	pop    %ebp
f0102250:	c3                   	ret    

f0102251 <setKHeapPlacementStrategyFIRSTFIT>:
static inline void setKHeapPlacementStrategyFIRSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_FIRSTFIT;}
f0102251:	55                   	push   %ebp
f0102252:	89 e5                	mov    %esp,%ebp
f0102254:	c7 05 18 be 2b f0 01 	movl   $0x1,0xf02bbe18
f010225b:	00 00 00 
f010225e:	90                   	nop
f010225f:	5d                   	pop    %ebp
f0102260:	c3                   	ret    

f0102261 <setKHeapPlacementStrategyBESTFIT>:
static inline void setKHeapPlacementStrategyBESTFIT(){_KHeapPlacementStrategy = KHP_PLACE_BESTFIT;}
f0102261:	55                   	push   %ebp
f0102262:	89 e5                	mov    %esp,%ebp
f0102264:	c7 05 18 be 2b f0 02 	movl   $0x2,0xf02bbe18
f010226b:	00 00 00 
f010226e:	90                   	nop
f010226f:	5d                   	pop    %ebp
f0102270:	c3                   	ret    

f0102271 <setKHeapPlacementStrategyNEXTFIT>:
static inline void setKHeapPlacementStrategyNEXTFIT(){_KHeapPlacementStrategy = KHP_PLACE_NEXTFIT;}
f0102271:	55                   	push   %ebp
f0102272:	89 e5                	mov    %esp,%ebp
f0102274:	c7 05 18 be 2b f0 03 	movl   $0x3,0xf02bbe18
f010227b:	00 00 00 
f010227e:	90                   	nop
f010227f:	5d                   	pop    %ebp
f0102280:	c3                   	ret    

f0102281 <setKHeapPlacementStrategyWORSTFIT>:
static inline void setKHeapPlacementStrategyWORSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_WORSTFIT;}
f0102281:	55                   	push   %ebp
f0102282:	89 e5                	mov    %esp,%ebp
f0102284:	c7 05 18 be 2b f0 04 	movl   $0x4,0xf02bbe18
f010228b:	00 00 00 
f010228e:	90                   	nop
f010228f:	5d                   	pop    %ebp
f0102290:	c3                   	ret    

f0102291 <isKHeapPlacementStrategyCONTALLOC>:

static inline uint8 isKHeapPlacementStrategyCONTALLOC(){if(_KHeapPlacementStrategy == KHP_PLACE_CONTALLOC) return 1; return 0;}
f0102291:	55                   	push   %ebp
f0102292:	89 e5                	mov    %esp,%ebp
f0102294:	a1 18 be 2b f0       	mov    0xf02bbe18,%eax
f0102299:	85 c0                	test   %eax,%eax
f010229b:	75 04                	jne    f01022a1 <isKHeapPlacementStrategyCONTALLOC+0x10>
f010229d:	b0 01                	mov    $0x1,%al
f010229f:	eb 02                	jmp    f01022a3 <isKHeapPlacementStrategyCONTALLOC+0x12>
f01022a1:	b0 00                	mov    $0x0,%al
f01022a3:	5d                   	pop    %ebp
f01022a4:	c3                   	ret    

f01022a5 <isKHeapPlacementStrategyFIRSTFIT>:
static inline uint8 isKHeapPlacementStrategyFIRSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_FIRSTFIT) return 1; return 0;}
f01022a5:	55                   	push   %ebp
f01022a6:	89 e5                	mov    %esp,%ebp
f01022a8:	a1 18 be 2b f0       	mov    0xf02bbe18,%eax
f01022ad:	83 f8 01             	cmp    $0x1,%eax
f01022b0:	75 04                	jne    f01022b6 <isKHeapPlacementStrategyFIRSTFIT+0x11>
f01022b2:	b0 01                	mov    $0x1,%al
f01022b4:	eb 02                	jmp    f01022b8 <isKHeapPlacementStrategyFIRSTFIT+0x13>
f01022b6:	b0 00                	mov    $0x0,%al
f01022b8:	5d                   	pop    %ebp
f01022b9:	c3                   	ret    

f01022ba <isKHeapPlacementStrategyBESTFIT>:
static inline uint8 isKHeapPlacementStrategyBESTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_BESTFIT) return 1; return 0;}
f01022ba:	55                   	push   %ebp
f01022bb:	89 e5                	mov    %esp,%ebp
f01022bd:	a1 18 be 2b f0       	mov    0xf02bbe18,%eax
f01022c2:	83 f8 02             	cmp    $0x2,%eax
f01022c5:	75 04                	jne    f01022cb <isKHeapPlacementStrategyBESTFIT+0x11>
f01022c7:	b0 01                	mov    $0x1,%al
f01022c9:	eb 02                	jmp    f01022cd <isKHeapPlacementStrategyBESTFIT+0x13>
f01022cb:	b0 00                	mov    $0x0,%al
f01022cd:	5d                   	pop    %ebp
f01022ce:	c3                   	ret    

f01022cf <isKHeapPlacementStrategyNEXTFIT>:
static inline uint8 isKHeapPlacementStrategyNEXTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_NEXTFIT) return 1; return 0;}
f01022cf:	55                   	push   %ebp
f01022d0:	89 e5                	mov    %esp,%ebp
f01022d2:	a1 18 be 2b f0       	mov    0xf02bbe18,%eax
f01022d7:	83 f8 03             	cmp    $0x3,%eax
f01022da:	75 04                	jne    f01022e0 <isKHeapPlacementStrategyNEXTFIT+0x11>
f01022dc:	b0 01                	mov    $0x1,%al
f01022de:	eb 02                	jmp    f01022e2 <isKHeapPlacementStrategyNEXTFIT+0x13>
f01022e0:	b0 00                	mov    $0x0,%al
f01022e2:	5d                   	pop    %ebp
f01022e3:	c3                   	ret    

f01022e4 <isKHeapPlacementStrategyWORSTFIT>:
static inline uint8 isKHeapPlacementStrategyWORSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_WORSTFIT) return 1; return 0;}
f01022e4:	55                   	push   %ebp
f01022e5:	89 e5                	mov    %esp,%ebp
f01022e7:	a1 18 be 2b f0       	mov    0xf02bbe18,%eax
f01022ec:	83 f8 04             	cmp    $0x4,%eax
f01022ef:	75 04                	jne    f01022f5 <isKHeapPlacementStrategyWORSTFIT+0x11>
f01022f1:	b0 01                	mov    $0x1,%al
f01022f3:	eb 02                	jmp    f01022f7 <isKHeapPlacementStrategyWORSTFIT+0x13>
f01022f5:	b0 00                	mov    $0x0,%al
f01022f7:	5d                   	pop    %ebp
f01022f8:	c3                   	ret    

f01022f9 <setUHeapPlacementStrategyFIRSTFIT>:

//***********************************
/*2015*/ //USER HEAP STRATEGIES
uint32 _UHeapPlacementStrategy;

static inline void setUHeapPlacementStrategyFIRSTFIT(){_UHeapPlacementStrategy = UHP_PLACE_FIRSTFIT;}
f01022f9:	55                   	push   %ebp
f01022fa:	89 e5                	mov    %esp,%ebp
f01022fc:	c7 05 ec bd 2b f0 01 	movl   $0x1,0xf02bbdec
f0102303:	00 00 00 
f0102306:	90                   	nop
f0102307:	5d                   	pop    %ebp
f0102308:	c3                   	ret    

f0102309 <setUHeapPlacementStrategyBESTFIT>:
static inline void setUHeapPlacementStrategyBESTFIT(){_UHeapPlacementStrategy = UHP_PLACE_BESTFIT;}
f0102309:	55                   	push   %ebp
f010230a:	89 e5                	mov    %esp,%ebp
f010230c:	c7 05 ec bd 2b f0 02 	movl   $0x2,0xf02bbdec
f0102313:	00 00 00 
f0102316:	90                   	nop
f0102317:	5d                   	pop    %ebp
f0102318:	c3                   	ret    

f0102319 <setUHeapPlacementStrategyNEXTFIT>:
static inline void setUHeapPlacementStrategyNEXTFIT(){_UHeapPlacementStrategy = UHP_PLACE_NEXTFIT;}
f0102319:	55                   	push   %ebp
f010231a:	89 e5                	mov    %esp,%ebp
f010231c:	c7 05 ec bd 2b f0 03 	movl   $0x3,0xf02bbdec
f0102323:	00 00 00 
f0102326:	90                   	nop
f0102327:	5d                   	pop    %ebp
f0102328:	c3                   	ret    

f0102329 <setUHeapPlacementStrategyWORSTFIT>:
static inline void setUHeapPlacementStrategyWORSTFIT(){_UHeapPlacementStrategy = UHP_PLACE_WORSTFIT;}
f0102329:	55                   	push   %ebp
f010232a:	89 e5                	mov    %esp,%ebp
f010232c:	c7 05 ec bd 2b f0 04 	movl   $0x4,0xf02bbdec
f0102333:	00 00 00 
f0102336:	90                   	nop
f0102337:	5d                   	pop    %ebp
f0102338:	c3                   	ret    

f0102339 <isUHeapPlacementStrategyFIRSTFIT>:

static inline uint8 isUHeapPlacementStrategyFIRSTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_FIRSTFIT) return 1; return 0;}
f0102339:	55                   	push   %ebp
f010233a:	89 e5                	mov    %esp,%ebp
f010233c:	a1 ec bd 2b f0       	mov    0xf02bbdec,%eax
f0102341:	83 f8 01             	cmp    $0x1,%eax
f0102344:	75 04                	jne    f010234a <isUHeapPlacementStrategyFIRSTFIT+0x11>
f0102346:	b0 01                	mov    $0x1,%al
f0102348:	eb 02                	jmp    f010234c <isUHeapPlacementStrategyFIRSTFIT+0x13>
f010234a:	b0 00                	mov    $0x0,%al
f010234c:	5d                   	pop    %ebp
f010234d:	c3                   	ret    

f010234e <isUHeapPlacementStrategyBESTFIT>:
static inline uint8 isUHeapPlacementStrategyBESTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_BESTFIT) return 1; return 0;}
f010234e:	55                   	push   %ebp
f010234f:	89 e5                	mov    %esp,%ebp
f0102351:	a1 ec bd 2b f0       	mov    0xf02bbdec,%eax
f0102356:	83 f8 02             	cmp    $0x2,%eax
f0102359:	75 04                	jne    f010235f <isUHeapPlacementStrategyBESTFIT+0x11>
f010235b:	b0 01                	mov    $0x1,%al
f010235d:	eb 02                	jmp    f0102361 <isUHeapPlacementStrategyBESTFIT+0x13>
f010235f:	b0 00                	mov    $0x0,%al
f0102361:	5d                   	pop    %ebp
f0102362:	c3                   	ret    

f0102363 <isUHeapPlacementStrategyNEXTFIT>:
static inline uint8 isUHeapPlacementStrategyNEXTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_NEXTFIT) return 1; return 0;}
f0102363:	55                   	push   %ebp
f0102364:	89 e5                	mov    %esp,%ebp
f0102366:	a1 ec bd 2b f0       	mov    0xf02bbdec,%eax
f010236b:	83 f8 03             	cmp    $0x3,%eax
f010236e:	75 04                	jne    f0102374 <isUHeapPlacementStrategyNEXTFIT+0x11>
f0102370:	b0 01                	mov    $0x1,%al
f0102372:	eb 02                	jmp    f0102376 <isUHeapPlacementStrategyNEXTFIT+0x13>
f0102374:	b0 00                	mov    $0x0,%al
f0102376:	5d                   	pop    %ebp
f0102377:	c3                   	ret    

f0102378 <isUHeapPlacementStrategyWORSTFIT>:
static inline uint8 isUHeapPlacementStrategyWORSTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_WORSTFIT) return 1; return 0;}
f0102378:	55                   	push   %ebp
f0102379:	89 e5                	mov    %esp,%ebp
f010237b:	a1 ec bd 2b f0       	mov    0xf02bbdec,%eax
f0102380:	83 f8 04             	cmp    $0x4,%eax
f0102383:	75 04                	jne    f0102389 <isUHeapPlacementStrategyWORSTFIT+0x11>
f0102385:	b0 01                	mov    $0x1,%al
f0102387:	eb 02                	jmp    f010238b <isUHeapPlacementStrategyWORSTFIT+0x13>
f0102389:	b0 00                	mov    $0x0,%al
f010238b:	5d                   	pop    %ebp
f010238c:	c3                   	ret    

f010238d <to_frame_info>:
{
	return to_frame_number(ptr_frame_info) << PGSHIFT;
}

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f010238d:	55                   	push   %ebp
f010238e:	89 e5                	mov    %esp,%ebp
f0102390:	53                   	push   %ebx
f0102391:	83 ec 04             	sub    $0x4,%esp
	if (PPN(physical_address) >= number_of_frames)
f0102394:	8b 45 08             	mov    0x8(%ebp),%eax
f0102397:	c1 e8 0c             	shr    $0xc,%eax
f010239a:	89 c2                	mov    %eax,%edx
f010239c:	a1 d0 bd 2b f0       	mov    0xf02bbdd0,%eax
f01023a1:	39 c2                	cmp    %eax,%edx
f01023a3:	72 14                	jb     f01023b9 <to_frame_info+0x2c>
		panic("to_frame_info called with invalid pa");
f01023a5:	83 ec 04             	sub    $0x4,%esp
f01023a8:	68 b0 06 13 f0       	push   $0xf01306b0
f01023ad:	6a 55                	push   $0x55
f01023af:	68 d8 06 13 f0       	push   $0xf01306d8
f01023b4:	e8 f7 dd ff ff       	call   f01001b0 <_panic>
	return &frames_info[PPN(physical_address)];
f01023b9:	8b 0d 10 be 2b f0    	mov    0xf02bbe10,%ecx
f01023bf:	8b 45 08             	mov    0x8(%ebp),%eax
f01023c2:	c1 e8 0c             	shr    $0xc,%eax
f01023c5:	89 c2                	mov    %eax,%edx
f01023c7:	89 d0                	mov    %edx,%eax
f01023c9:	01 c0                	add    %eax,%eax
f01023cb:	01 d0                	add    %edx,%eax
f01023cd:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f01023d4:	01 d8                	add    %ebx,%eax
f01023d6:	01 d0                	add    %edx,%eax
f01023d8:	01 c8                	add    %ecx,%eax
}
f01023da:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01023dd:	c9                   	leave  
f01023de:	c3                   	ret    

f01023df <command_help>:

/***** Implementations of basic kernel command prompt commands *****/

//print name and description of each command
int command_help(int number_of_arguments, char **arguments)
{
f01023df:	55                   	push   %ebp
f01023e0:	89 e5                	mov    %esp,%ebp
f01023e2:	53                   	push   %ebx
f01023e3:	83 ec 14             	sub    $0x14,%esp

	int i;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f01023e6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01023ed:	eb 3b                	jmp    f010242a <command_help+0x4b>
		cprintf("%s - %s\n", commands[i].name, commands[i].description);
f01023ef:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01023f2:	89 d0                	mov    %edx,%eax
f01023f4:	01 c0                	add    %eax,%eax
f01023f6:	01 d0                	add    %edx,%eax
f01023f8:	c1 e0 03             	shl    $0x3,%eax
f01023fb:	05 44 e5 18 f0       	add    $0xf018e544,%eax
f0102400:	8b 10                	mov    (%eax),%edx
f0102402:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0102405:	89 c8                	mov    %ecx,%eax
f0102407:	01 c0                	add    %eax,%eax
f0102409:	01 c8                	add    %ecx,%eax
f010240b:	c1 e0 03             	shl    $0x3,%eax
f010240e:	05 40 e5 18 f0       	add    $0xf018e540,%eax
f0102413:	8b 00                	mov    (%eax),%eax
f0102415:	83 ec 04             	sub    $0x4,%esp
f0102418:	52                   	push   %edx
f0102419:	50                   	push   %eax
f010241a:	68 7f 0f 13 f0       	push   $0xf0130f7f
f010241f:	e8 0d ea ff ff       	call   f0100e31 <cprintf>
f0102424:	83 c4 10             	add    $0x10,%esp
//print name and description of each command
int command_help(int number_of_arguments, char **arguments)
{

	int i;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f0102427:	ff 45 f4             	incl   -0xc(%ebp)
f010242a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010242d:	a1 60 e9 18 f0       	mov    0xf018e960,%eax
f0102432:	39 c2                	cmp    %eax,%edx
f0102434:	72 b9                	jb     f01023ef <command_help+0x10>
		cprintf("%s - %s\n", commands[i].name, commands[i].description);

	cprintf("-------------------\n");
f0102436:	83 ec 0c             	sub    $0xc,%esp
f0102439:	68 88 0f 13 f0       	push   $0xf0130f88
f010243e:	e8 ee e9 ff ff       	call   f0100e31 <cprintf>
f0102443:	83 c4 10             	add    $0x10,%esp

	for (i = 0; i < NUM_USER_PROGS; i++)
f0102446:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010244d:	eb 42                	jmp    f0102491 <command_help+0xb2>
		cprintf("run %s - %s [User Program]\n", ptr_UserPrograms[i].name, ptr_UserPrograms[i].desc);
f010244f:	8b 0d 68 ea 18 f0    	mov    0xf018ea68,%ecx
f0102455:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0102458:	89 d0                	mov    %edx,%eax
f010245a:	01 c0                	add    %eax,%eax
f010245c:	01 d0                	add    %edx,%eax
f010245e:	c1 e0 02             	shl    $0x2,%eax
f0102461:	01 c8                	add    %ecx,%eax
f0102463:	8b 50 04             	mov    0x4(%eax),%edx
f0102466:	8b 1d 68 ea 18 f0    	mov    0xf018ea68,%ebx
f010246c:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f010246f:	89 c8                	mov    %ecx,%eax
f0102471:	01 c0                	add    %eax,%eax
f0102473:	01 c8                	add    %ecx,%eax
f0102475:	c1 e0 02             	shl    $0x2,%eax
f0102478:	01 d8                	add    %ebx,%eax
f010247a:	8b 00                	mov    (%eax),%eax
f010247c:	83 ec 04             	sub    $0x4,%esp
f010247f:	52                   	push   %edx
f0102480:	50                   	push   %eax
f0102481:	68 9d 0f 13 f0       	push   $0xf0130f9d
f0102486:	e8 a6 e9 ff ff       	call   f0100e31 <cprintf>
f010248b:	83 c4 10             	add    $0x10,%esp
	for (i = 0; i < NUM_OF_COMMANDS; i++)
		cprintf("%s - %s\n", commands[i].name, commands[i].description);

	cprintf("-------------------\n");

	for (i = 0; i < NUM_USER_PROGS; i++)
f010248e:	ff 45 f4             	incl   -0xc(%ebp)
f0102491:	a1 6c ea 18 f0       	mov    0xf018ea6c,%eax
f0102496:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f0102499:	7c b4                	jl     f010244f <command_help+0x70>
		cprintf("run %s - %s [User Program]\n", ptr_UserPrograms[i].name, ptr_UserPrograms[i].desc);
	return 0;
f010249b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01024a0:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01024a3:	c9                   	leave  
f01024a4:	c3                   	ret    

f01024a5 <command_str2lower>:
int command_str2lower(int number_of_arguments,char **arguments){
f01024a5:	55                   	push   %ebp
f01024a6:	89 e5                	mov    %esp,%ebp
f01024a8:	83 ec 18             	sub    $0x18,%esp
	char*s=str2lower(arguments[1],arguments[2]);
f01024ab:	8b 45 0c             	mov    0xc(%ebp),%eax
f01024ae:	83 c0 08             	add    $0x8,%eax
f01024b1:	8b 10                	mov    (%eax),%edx
f01024b3:	8b 45 0c             	mov    0xc(%ebp),%eax
f01024b6:	83 c0 04             	add    $0x4,%eax
f01024b9:	8b 00                	mov    (%eax),%eax
f01024bb:	83 ec 08             	sub    $0x8,%esp
f01024be:	52                   	push   %edx
f01024bf:	50                   	push   %eax
f01024c0:	e8 80 d0 02 00       	call   f012f545 <str2lower>
f01024c5:	83 c4 10             	add    $0x10,%esp
f01024c8:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("%s\n",s);
f01024cb:	83 ec 08             	sub    $0x8,%esp
f01024ce:	ff 75 f4             	pushl  -0xc(%ebp)
f01024d1:	68 b9 0f 13 f0       	push   $0xf0130fb9
f01024d6:	e8 56 e9 ff ff       	call   f0100e31 <cprintf>
f01024db:	83 c4 10             	add    $0x10,%esp
return 0;
f01024de:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01024e3:	c9                   	leave  
f01024e4:	c3                   	ret    

f01024e5 <command_kernel_info>:
//print information about kernel addresses and kernel size
int command_kernel_info(int number_of_arguments, char **arguments )
{
f01024e5:	55                   	push   %ebp
f01024e6:	89 e5                	mov    %esp,%ebp
f01024e8:	83 ec 08             	sub    $0x8,%esp
	extern char start_of_kernel[], end_of_kernel_code_section[], start_of_uninitialized_data_section[], end_of_kernel[];

	cprintf("Special kernel symbols:\n");
f01024eb:	83 ec 0c             	sub    $0xc,%esp
f01024ee:	68 bd 0f 13 f0       	push   $0xf0130fbd
f01024f3:	e8 39 e9 ff ff       	call   f0100e31 <cprintf>
f01024f8:	83 c4 10             	add    $0x10,%esp
	cprintf("  Start Address of the kernel 			%08x (virt)  %08x (phys)\n", start_of_kernel, start_of_kernel - KERNEL_BASE);
f01024fb:	b8 0c 00 10 00       	mov    $0x10000c,%eax
f0102500:	83 ec 04             	sub    $0x4,%esp
f0102503:	50                   	push   %eax
f0102504:	68 0c 00 10 f0       	push   $0xf010000c
f0102509:	68 d8 0f 13 f0       	push   $0xf0130fd8
f010250e:	e8 1e e9 ff ff       	call   f0100e31 <cprintf>
f0102513:	83 c4 10             	add    $0x10,%esp
	cprintf("  End address of kernel code  			%08x (virt)  %08x (phys)\n", end_of_kernel_code_section, end_of_kernel_code_section - KERNEL_BASE);
f0102516:	b8 49 03 13 00       	mov    $0x130349,%eax
f010251b:	83 ec 04             	sub    $0x4,%esp
f010251e:	50                   	push   %eax
f010251f:	68 49 03 13 f0       	push   $0xf0130349
f0102524:	68 14 10 13 f0       	push   $0xf0131014
f0102529:	e8 03 e9 ff ff       	call   f0100e31 <cprintf>
f010252e:	83 c4 10             	add    $0x10,%esp
	cprintf("  Start addr. of uninitialized data section 	%08x (virt)  %08x (phys)\n", start_of_uninitialized_data_section, start_of_uninitialized_data_section - KERNEL_BASE);
f0102531:	b8 06 2f 25 00       	mov    $0x252f06,%eax
f0102536:	83 ec 04             	sub    $0x4,%esp
f0102539:	50                   	push   %eax
f010253a:	68 06 2f 25 f0       	push   $0xf0252f06
f010253f:	68 50 10 13 f0       	push   $0xf0131050
f0102544:	e8 e8 e8 ff ff       	call   f0100e31 <cprintf>
f0102549:	83 c4 10             	add    $0x10,%esp
	cprintf("  End address of the kernel   			%08x (virt)  %08x (phys)\n", end_of_kernel, end_of_kernel - KERNEL_BASE);
f010254c:	b8 6c e5 2d 00       	mov    $0x2de56c,%eax
f0102551:	83 ec 04             	sub    $0x4,%esp
f0102554:	50                   	push   %eax
f0102555:	68 6c e5 2d f0       	push   $0xf02de56c
f010255a:	68 98 10 13 f0       	push   $0xf0131098
f010255f:	e8 cd e8 ff ff       	call   f0100e31 <cprintf>
f0102564:	83 c4 10             	add    $0x10,%esp
	cprintf("Kernel executable memory footprint: %d KB\n",
			(end_of_kernel-start_of_kernel+1023)/1024);
f0102567:	b8 6c e5 2d f0       	mov    $0xf02de56c,%eax
f010256c:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
f0102572:	b8 0c 00 10 f0       	mov    $0xf010000c,%eax
f0102577:	29 c2                	sub    %eax,%edx
f0102579:	89 d0                	mov    %edx,%eax
	cprintf("Special kernel symbols:\n");
	cprintf("  Start Address of the kernel 			%08x (virt)  %08x (phys)\n", start_of_kernel, start_of_kernel - KERNEL_BASE);
	cprintf("  End address of kernel code  			%08x (virt)  %08x (phys)\n", end_of_kernel_code_section, end_of_kernel_code_section - KERNEL_BASE);
	cprintf("  Start addr. of uninitialized data section 	%08x (virt)  %08x (phys)\n", start_of_uninitialized_data_section, start_of_uninitialized_data_section - KERNEL_BASE);
	cprintf("  End address of the kernel   			%08x (virt)  %08x (phys)\n", end_of_kernel, end_of_kernel - KERNEL_BASE);
	cprintf("Kernel executable memory footprint: %d KB\n",
f010257b:	85 c0                	test   %eax,%eax
f010257d:	79 05                	jns    f0102584 <command_kernel_info+0x9f>
f010257f:	05 ff 03 00 00       	add    $0x3ff,%eax
f0102584:	c1 f8 0a             	sar    $0xa,%eax
f0102587:	83 ec 08             	sub    $0x8,%esp
f010258a:	50                   	push   %eax
f010258b:	68 d4 10 13 f0       	push   $0xf01310d4
f0102590:	e8 9c e8 ff ff       	call   f0100e31 <cprintf>
f0102595:	83 c4 10             	add    $0x10,%esp
			(end_of_kernel-start_of_kernel+1023)/1024);
	return 0;
f0102598:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010259d:	c9                   	leave  
f010259e:	c3                   	ret    

f010259f <command_writeusermem>:

//*****************************************************************************************//
//***************************** PROJECT HELPERS COMMAND ***********************************//
//*****************************************************************************************//
int command_writeusermem(int number_of_arguments, char **arguments)
{
f010259f:	55                   	push   %ebp
f01025a0:	89 e5                	mov    %esp,%ebp
f01025a2:	83 ec 38             	sub    $0x38,%esp
	//deal with the kernel page directory
	if (number_of_arguments == 3)
f01025a5:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f01025a9:	75 37                	jne    f01025e2 <command_writeusermem+0x43>
	{
		unsigned int address = strtol(arguments[1], NULL, 16);
f01025ab:	8b 45 0c             	mov    0xc(%ebp),%eax
f01025ae:	83 c0 04             	add    $0x4,%eax
f01025b1:	8b 00                	mov    (%eax),%eax
f01025b3:	83 ec 04             	sub    $0x4,%esp
f01025b6:	6a 10                	push   $0x10
f01025b8:	6a 00                	push   $0x0
f01025ba:	50                   	push   %eax
f01025bb:	e8 dd cb 02 00       	call   f012f19d <strtol>
f01025c0:	83 c4 10             	add    $0x10,%esp
f01025c3:	89 45 dc             	mov    %eax,-0x24(%ebp)
		unsigned char *ptr = (unsigned char *)(address) ;
f01025c6:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01025c9:	89 45 d8             	mov    %eax,-0x28(%ebp)

		*ptr = arguments[2][0];
f01025cc:	8b 45 0c             	mov    0xc(%ebp),%eax
f01025cf:	83 c0 08             	add    $0x8,%eax
f01025d2:	8b 00                	mov    (%eax),%eax
f01025d4:	8a 00                	mov    (%eax),%al
f01025d6:	88 c2                	mov    %al,%dl
f01025d8:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01025db:	88 10                	mov    %dl,(%eax)
f01025dd:	e9 bc 00 00 00       	jmp    f010269e <command_writeusermem+0xff>
	}
	//deal with a page directory of specific environment
	else if (number_of_arguments == 4)
f01025e2:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f01025e6:	0f 85 a2 00 00 00    	jne    f010268e <command_writeusermem+0xef>
	{
		int32 envId = strtol(arguments[1],NULL, 10);
f01025ec:	8b 45 0c             	mov    0xc(%ebp),%eax
f01025ef:	83 c0 04             	add    $0x4,%eax
f01025f2:	8b 00                	mov    (%eax),%eax
f01025f4:	83 ec 04             	sub    $0x4,%esp
f01025f7:	6a 0a                	push   $0xa
f01025f9:	6a 00                	push   $0x0
f01025fb:	50                   	push   %eax
f01025fc:	e8 9c cb 02 00       	call   f012f19d <strtol>
f0102601:	83 c4 10             	add    $0x10,%esp
f0102604:	89 45 f4             	mov    %eax,-0xc(%ebp)
		struct Env* env = NULL;
f0102607:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
		envid2env(envId, &env, 0 );
f010260e:	83 ec 04             	sub    $0x4,%esp
f0102611:	6a 00                	push   $0x0
f0102613:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0102616:	50                   	push   %eax
f0102617:	ff 75 f4             	pushl  -0xc(%ebp)
f010261a:	e8 af 73 00 00       	call   f01099ce <envid2env>
f010261f:	83 c4 10             	add    $0x10,%esp

		int address = strtol(arguments[2], NULL, 16);
f0102622:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102625:	83 c0 08             	add    $0x8,%eax
f0102628:	8b 00                	mov    (%eax),%eax
f010262a:	83 ec 04             	sub    $0x4,%esp
f010262d:	6a 10                	push   $0x10
f010262f:	6a 00                	push   $0x0
f0102631:	50                   	push   %eax
f0102632:	e8 66 cb 02 00       	call   f012f19d <strtol>
f0102637:	83 c4 10             	add    $0x10,%esp
f010263a:	89 45 f0             	mov    %eax,-0x10(%ebp)

		if(env == NULL) return 0;
f010263d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0102640:	85 c0                	test   %eax,%eax
f0102642:	75 07                	jne    f010264b <command_writeusermem+0xac>
f0102644:	b8 00 00 00 00       	mov    $0x0,%eax
f0102649:	eb 58                	jmp    f01026a3 <command_writeusermem+0x104>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f010264b:	0f 20 d8             	mov    %cr3,%eax
f010264e:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return val;
f0102651:	8b 45 e8             	mov    -0x18(%ebp),%eax

		uint32 oldDir = rcr3();
f0102654:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
		lcr3((uint32) (env->env_cr3));
f0102657:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010265a:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f0102660:	89 45 e0             	mov    %eax,-0x20(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0102663:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0102666:	0f 22 d8             	mov    %eax,%cr3

		unsigned char *ptr = (unsigned char *)(address) ;
f0102669:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010266c:	89 45 e4             	mov    %eax,-0x1c(%ebp)

		//Write the given Character
		*ptr = arguments[3][0];
f010266f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102672:	83 c0 0c             	add    $0xc,%eax
f0102675:	8b 00                	mov    (%eax),%eax
f0102677:	8a 00                	mov    (%eax),%al
f0102679:	88 c2                	mov    %al,%dl
f010267b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010267e:	88 10                	mov    %dl,(%eax)
f0102680:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0102683:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0102686:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0102689:	0f 22 d8             	mov    %eax,%cr3
f010268c:	eb 10                	jmp    f010269e <command_writeusermem+0xff>
		lcr3(oldDir);
	}
	else
	{
		cprintf("wum command: invalid number of arguments\n") ;
f010268e:	83 ec 0c             	sub    $0xc,%esp
f0102691:	68 00 11 13 f0       	push   $0xf0131100
f0102696:	e8 96 e7 ff ff       	call   f0100e31 <cprintf>
f010269b:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f010269e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01026a3:	c9                   	leave  
f01026a4:	c3                   	ret    

f01026a5 <command_writemem_k>:

int command_writemem_k(int number_of_arguments, char **arguments)
{
f01026a5:	55                   	push   %ebp
f01026a6:	89 e5                	mov    %esp,%ebp
f01026a8:	83 ec 18             	sub    $0x18,%esp
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
f01026ab:	8b 45 0c             	mov    0xc(%ebp),%eax
f01026ae:	83 c0 04             	add    $0x4,%eax
f01026b1:	8b 00                	mov    (%eax),%eax
f01026b3:	83 ec 04             	sub    $0x4,%esp
f01026b6:	6a 10                	push   $0x10
f01026b8:	6a 00                	push   $0x0
f01026ba:	50                   	push   %eax
f01026bb:	e8 dd ca 02 00       	call   f012f19d <strtol>
f01026c0:	83 c4 10             	add    $0x10,%esp
f01026c3:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01026c8:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int c, i=0;
f01026cb:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	int stringLen = strlen(arguments[2]);
f01026d2:	8b 45 0c             	mov    0xc(%ebp),%eax
f01026d5:	83 c0 08             	add    $0x8,%eax
f01026d8:	8b 00                	mov    (%eax),%eax
f01026da:	83 ec 0c             	sub    $0xc,%esp
f01026dd:	50                   	push   %eax
f01026de:	e8 5a c7 02 00       	call   f012ee3d <strlen>
f01026e3:	83 c4 10             	add    $0x10,%esp
f01026e6:	89 45 ec             	mov    %eax,-0x14(%ebp)

	for(i=0;i < stringLen; i++)
f01026e9:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01026f0:	eb 1c                	jmp    f010270e <command_writemem_k+0x69>
	{
		*address = arguments[2][i];
f01026f2:	8b 45 0c             	mov    0xc(%ebp),%eax
f01026f5:	83 c0 08             	add    $0x8,%eax
f01026f8:	8b 10                	mov    (%eax),%edx
f01026fa:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01026fd:	01 d0                	add    %edx,%eax
f01026ff:	8a 00                	mov    (%eax),%al
f0102701:	88 c2                	mov    %al,%dl
f0102703:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102706:	88 10                	mov    %dl,(%eax)
		address++;
f0102708:	ff 45 f4             	incl   -0xc(%ebp)
{
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
	int c, i=0;
	int stringLen = strlen(arguments[2]);

	for(i=0;i < stringLen; i++)
f010270b:	ff 45 f0             	incl   -0x10(%ebp)
f010270e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0102711:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0102714:	7c dc                	jl     f01026f2 <command_writemem_k+0x4d>
	{
		*address = arguments[2][i];
		address++;
	}

	return 0;
f0102716:	b8 00 00 00 00       	mov    $0x0,%eax


}
f010271b:	c9                   	leave  
f010271c:	c3                   	ret    

f010271d <command_readusermem>:

int command_readusermem(int number_of_arguments, char **arguments)
{
f010271d:	55                   	push   %ebp
f010271e:	89 e5                	mov    %esp,%ebp
f0102720:	83 ec 38             	sub    $0x38,%esp
	//deal with the kernel page directory
	if (number_of_arguments == 2)
f0102723:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f0102727:	75 42                	jne    f010276b <command_readusermem+0x4e>
	{
		unsigned int address = strtol(arguments[1], NULL, 16);
f0102729:	8b 45 0c             	mov    0xc(%ebp),%eax
f010272c:	83 c0 04             	add    $0x4,%eax
f010272f:	8b 00                	mov    (%eax),%eax
f0102731:	83 ec 04             	sub    $0x4,%esp
f0102734:	6a 10                	push   $0x10
f0102736:	6a 00                	push   $0x0
f0102738:	50                   	push   %eax
f0102739:	e8 5f ca 02 00       	call   f012f19d <strtol>
f010273e:	83 c4 10             	add    $0x10,%esp
f0102741:	89 45 dc             	mov    %eax,-0x24(%ebp)
		unsigned char *ptr = (unsigned char *)(address ) ;
f0102744:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0102747:	89 45 d8             	mov    %eax,-0x28(%ebp)

		cprintf("value at address %x = %c\n", ptr, *ptr);
f010274a:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010274d:	8a 00                	mov    (%eax),%al
f010274f:	0f b6 c0             	movzbl %al,%eax
f0102752:	83 ec 04             	sub    $0x4,%esp
f0102755:	50                   	push   %eax
f0102756:	ff 75 d8             	pushl  -0x28(%ebp)
f0102759:	68 2a 11 13 f0       	push   $0xf013112a
f010275e:	e8 ce e6 ff ff       	call   f0100e31 <cprintf>
f0102763:	83 c4 10             	add    $0x10,%esp
f0102766:	e9 c7 00 00 00       	jmp    f0102832 <command_readusermem+0x115>
	}
	//deal with a page directory of specific environment
	else if (number_of_arguments == 3)
f010276b:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f010276f:	0f 85 ad 00 00 00    	jne    f0102822 <command_readusermem+0x105>
	{
		int32 envId = strtol(arguments[1],NULL, 10);
f0102775:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102778:	83 c0 04             	add    $0x4,%eax
f010277b:	8b 00                	mov    (%eax),%eax
f010277d:	83 ec 04             	sub    $0x4,%esp
f0102780:	6a 0a                	push   $0xa
f0102782:	6a 00                	push   $0x0
f0102784:	50                   	push   %eax
f0102785:	e8 13 ca 02 00       	call   f012f19d <strtol>
f010278a:	83 c4 10             	add    $0x10,%esp
f010278d:	89 45 f4             	mov    %eax,-0xc(%ebp)
		struct Env* env = NULL;
f0102790:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
		envid2env(envId, &env, 0 );
f0102797:	83 ec 04             	sub    $0x4,%esp
f010279a:	6a 00                	push   $0x0
f010279c:	8d 45 d0             	lea    -0x30(%ebp),%eax
f010279f:	50                   	push   %eax
f01027a0:	ff 75 f4             	pushl  -0xc(%ebp)
f01027a3:	e8 26 72 00 00       	call   f01099ce <envid2env>
f01027a8:	83 c4 10             	add    $0x10,%esp

		int address = strtol(arguments[2], NULL, 16);
f01027ab:	8b 45 0c             	mov    0xc(%ebp),%eax
f01027ae:	83 c0 08             	add    $0x8,%eax
f01027b1:	8b 00                	mov    (%eax),%eax
f01027b3:	83 ec 04             	sub    $0x4,%esp
f01027b6:	6a 10                	push   $0x10
f01027b8:	6a 00                	push   $0x0
f01027ba:	50                   	push   %eax
f01027bb:	e8 dd c9 02 00       	call   f012f19d <strtol>
f01027c0:	83 c4 10             	add    $0x10,%esp
f01027c3:	89 45 f0             	mov    %eax,-0x10(%ebp)

		if(env == NULL) return 0;
f01027c6:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01027c9:	85 c0                	test   %eax,%eax
f01027cb:	75 07                	jne    f01027d4 <command_readusermem+0xb7>
f01027cd:	b8 00 00 00 00       	mov    $0x0,%eax
f01027d2:	eb 63                	jmp    f0102837 <command_readusermem+0x11a>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f01027d4:	0f 20 d8             	mov    %cr3,%eax
f01027d7:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return val;
f01027da:	8b 45 e8             	mov    -0x18(%ebp),%eax

		uint32 oldDir = rcr3();
f01027dd:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
		lcr3((uint32)( env->env_cr3));
f01027e0:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01027e3:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f01027e9:	89 45 e0             	mov    %eax,-0x20(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f01027ec:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01027ef:	0f 22 d8             	mov    %eax,%cr3

		unsigned char *ptr = (unsigned char *)(address) ;
f01027f2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01027f5:	89 45 e4             	mov    %eax,-0x1c(%ebp)

		//Write the given Character
		cprintf("value at address %x = %c\n", address, *ptr);
f01027f8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01027fb:	8a 00                	mov    (%eax),%al
f01027fd:	0f b6 c0             	movzbl %al,%eax
f0102800:	83 ec 04             	sub    $0x4,%esp
f0102803:	50                   	push   %eax
f0102804:	ff 75 f0             	pushl  -0x10(%ebp)
f0102807:	68 2a 11 13 f0       	push   $0xf013112a
f010280c:	e8 20 e6 ff ff       	call   f0100e31 <cprintf>
f0102811:	83 c4 10             	add    $0x10,%esp
f0102814:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0102817:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f010281a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010281d:	0f 22 d8             	mov    %eax,%cr3
f0102820:	eb 10                	jmp    f0102832 <command_readusermem+0x115>

		lcr3(oldDir);
	}
	else
	{
		cprintf("rum command: invalid number of arguments\n") ;
f0102822:	83 ec 0c             	sub    $0xc,%esp
f0102825:	68 44 11 13 f0       	push   $0xf0131144
f010282a:	e8 02 e6 ff ff       	call   f0100e31 <cprintf>
f010282f:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f0102832:	b8 00 00 00 00       	mov    $0x0,%eax

}
f0102837:	c9                   	leave  
f0102838:	c3                   	ret    

f0102839 <command_readmem_k>:

int command_readmem_k(int number_of_arguments, char **arguments)
{
f0102839:	55                   	push   %ebp
f010283a:	89 e5                	mov    %esp,%ebp
f010283c:	83 ec 18             	sub    $0x18,%esp
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
f010283f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102842:	83 c0 04             	add    $0x4,%eax
f0102845:	8b 00                	mov    (%eax),%eax
f0102847:	83 ec 04             	sub    $0x4,%esp
f010284a:	6a 10                	push   $0x10
f010284c:	6a 00                	push   $0x0
f010284e:	50                   	push   %eax
f010284f:	e8 49 c9 02 00       	call   f012f19d <strtol>
f0102854:	83 c4 10             	add    $0x10,%esp
f0102857:	2d 00 00 00 10       	sub    $0x10000000,%eax
f010285c:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int i=0;
f010285f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	cprintf("%c",*address);
f0102866:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102869:	8a 00                	mov    (%eax),%al
f010286b:	0f b6 c0             	movzbl %al,%eax
f010286e:	83 ec 08             	sub    $0x8,%esp
f0102871:	50                   	push   %eax
f0102872:	68 6e 11 13 f0       	push   $0xf013116e
f0102877:	e8 b5 e5 ff ff       	call   f0100e31 <cprintf>
f010287c:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f010287f:	83 ec 0c             	sub    $0xc,%esp
f0102882:	68 71 11 13 f0       	push   $0xf0131171
f0102887:	e8 a5 e5 ff ff       	call   f0100e31 <cprintf>
f010288c:	83 c4 10             	add    $0x10,%esp
	return 0;
f010288f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102894:	c9                   	leave  
f0102895:	c3                   	ret    

f0102896 <command_readuserblock>:


int command_readuserblock(int number_of_arguments, char **arguments)
{
f0102896:	55                   	push   %ebp
f0102897:	89 e5                	mov    %esp,%ebp
f0102899:	83 ec 38             	sub    $0x38,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f010289c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010289f:	83 c0 04             	add    $0x4,%eax
f01028a2:	8b 00                	mov    (%eax),%eax
f01028a4:	83 ec 04             	sub    $0x4,%esp
f01028a7:	6a 0a                	push   $0xa
f01028a9:	6a 00                	push   $0x0
f01028ab:	50                   	push   %eax
f01028ac:	e8 ec c8 02 00       	call   f012f19d <strtol>
f01028b1:	83 c4 10             	add    $0x10,%esp
f01028b4:	89 45 ec             	mov    %eax,-0x14(%ebp)
	struct Env* env = NULL;
f01028b7:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
	envid2env(envId, &env, 0 );
f01028be:	83 ec 04             	sub    $0x4,%esp
f01028c1:	6a 00                	push   $0x0
f01028c3:	8d 45 d0             	lea    -0x30(%ebp),%eax
f01028c6:	50                   	push   %eax
f01028c7:	ff 75 ec             	pushl  -0x14(%ebp)
f01028ca:	e8 ff 70 00 00       	call   f01099ce <envid2env>
f01028cf:	83 c4 10             	add    $0x10,%esp

	int address = strtol(arguments[2], NULL, 16);
f01028d2:	8b 45 0c             	mov    0xc(%ebp),%eax
f01028d5:	83 c0 08             	add    $0x8,%eax
f01028d8:	8b 00                	mov    (%eax),%eax
f01028da:	83 ec 04             	sub    $0x4,%esp
f01028dd:	6a 10                	push   $0x10
f01028df:	6a 00                	push   $0x0
f01028e1:	50                   	push   %eax
f01028e2:	e8 b6 c8 02 00       	call   f012f19d <strtol>
f01028e7:	83 c4 10             	add    $0x10,%esp
f01028ea:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int nBytes = strtol(arguments[3], NULL, 10);
f01028ed:	8b 45 0c             	mov    0xc(%ebp),%eax
f01028f0:	83 c0 0c             	add    $0xc,%eax
f01028f3:	8b 00                	mov    (%eax),%eax
f01028f5:	83 ec 04             	sub    $0x4,%esp
f01028f8:	6a 0a                	push   $0xa
f01028fa:	6a 00                	push   $0x0
f01028fc:	50                   	push   %eax
f01028fd:	e8 9b c8 02 00       	call   f012f19d <strtol>
f0102902:	83 c4 10             	add    $0x10,%esp
f0102905:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	unsigned char *ptr = (unsigned char *)(address) ;
f0102908:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010290b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//Write the given Character

	if(env == NULL) return 0;
f010290e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0102911:	85 c0                	test   %eax,%eax
f0102913:	75 07                	jne    f010291c <command_readuserblock+0x86>
f0102915:	b8 00 00 00 00       	mov    $0x0,%eax
f010291a:	eb 68                	jmp    f0102984 <command_readuserblock+0xee>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f010291c:	0f 20 d8             	mov    %cr3,%eax
f010291f:	89 45 d8             	mov    %eax,-0x28(%ebp)
	return val;
f0102922:	8b 45 d8             	mov    -0x28(%ebp),%eax

	uint32 oldDir = rcr3();
f0102925:	89 45 dc             	mov    %eax,-0x24(%ebp)
	//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
	lcr3((uint32)( env->env_cr3));
f0102928:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010292b:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f0102931:	89 45 d4             	mov    %eax,-0x2c(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0102934:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0102937:	0f 22 d8             	mov    %eax,%cr3

	int i;
	for(i = 0;i<nBytes; i++)
f010293a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0102941:	eb 28                	jmp    f010296b <command_readuserblock+0xd5>
	{
		cprintf("%08x : %02x  %c\n", ptr, *ptr, *ptr);
f0102943:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102946:	8a 00                	mov    (%eax),%al
f0102948:	0f b6 d0             	movzbl %al,%edx
f010294b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010294e:	8a 00                	mov    (%eax),%al
f0102950:	0f b6 c0             	movzbl %al,%eax
f0102953:	52                   	push   %edx
f0102954:	50                   	push   %eax
f0102955:	ff 75 f4             	pushl  -0xc(%ebp)
f0102958:	68 73 11 13 f0       	push   $0xf0131173
f010295d:	e8 cf e4 ff ff       	call   f0100e31 <cprintf>
f0102962:	83 c4 10             	add    $0x10,%esp
		ptr++;
f0102965:	ff 45 f4             	incl   -0xc(%ebp)
	uint32 oldDir = rcr3();
	//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
	lcr3((uint32)( env->env_cr3));

	int i;
	for(i = 0;i<nBytes; i++)
f0102968:	ff 45 f0             	incl   -0x10(%ebp)
f010296b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010296e:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0102971:	7c d0                	jl     f0102943 <command_readuserblock+0xad>
f0102973:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0102976:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0102979:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010297c:	0f 22 d8             	mov    %eax,%cr3
		cprintf("%08x : %02x  %c\n", ptr, *ptr, *ptr);
		ptr++;
	}
	lcr3(oldDir);

	return 0;
f010297f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102984:	c9                   	leave  
f0102985:	c3                   	ret    

f0102986 <command_remove_table>:

int command_remove_table(int number_of_arguments, char **arguments)
{
f0102986:	55                   	push   %ebp
f0102987:	89 e5                	mov    %esp,%ebp
f0102989:	83 ec 28             	sub    $0x28,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f010298c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010298f:	83 c0 04             	add    $0x4,%eax
f0102992:	8b 00                	mov    (%eax),%eax
f0102994:	83 ec 04             	sub    $0x4,%esp
f0102997:	6a 0a                	push   $0xa
f0102999:	6a 00                	push   $0x0
f010299b:	50                   	push   %eax
f010299c:	e8 fc c7 02 00       	call   f012f19d <strtol>
f01029a1:	83 c4 10             	add    $0x10,%esp
f01029a4:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct Env* env = NULL;
f01029a7:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	envid2env(envId, &env, 0 );
f01029ae:	83 ec 04             	sub    $0x4,%esp
f01029b1:	6a 00                	push   $0x0
f01029b3:	8d 45 d8             	lea    -0x28(%ebp),%eax
f01029b6:	50                   	push   %eax
f01029b7:	ff 75 f4             	pushl  -0xc(%ebp)
f01029ba:	e8 0f 70 00 00       	call   f01099ce <envid2env>
f01029bf:	83 c4 10             	add    $0x10,%esp
	if(env == 0) return 0;
f01029c2:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01029c5:	85 c0                	test   %eax,%eax
f01029c7:	75 0a                	jne    f01029d3 <command_remove_table+0x4d>
f01029c9:	b8 00 00 00 00       	mov    $0x0,%eax
f01029ce:	e9 aa 00 00 00       	jmp    f0102a7d <command_remove_table+0xf7>

	uint32 address = strtol(arguments[2], NULL, 16);
f01029d3:	8b 45 0c             	mov    0xc(%ebp),%eax
f01029d6:	83 c0 08             	add    $0x8,%eax
f01029d9:	8b 00                	mov    (%eax),%eax
f01029db:	83 ec 04             	sub    $0x4,%esp
f01029de:	6a 10                	push   $0x10
f01029e0:	6a 00                	push   $0x0
f01029e2:	50                   	push   %eax
f01029e3:	e8 b5 c7 02 00       	call   f012f19d <strtol>
f01029e8:	83 c4 10             	add    $0x10,%esp
f01029eb:	89 45 f0             	mov    %eax,-0x10(%ebp)
	unsigned char *va = (unsigned char *)(address) ;
f01029ee:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01029f1:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 table_pa = env->env_page_directory[PDX(address)] & 0xFFFFF000;
f01029f4:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01029f7:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f01029fd:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0102a00:	c1 ea 16             	shr    $0x16,%edx
f0102a03:	c1 e2 02             	shl    $0x2,%edx
f0102a06:	01 d0                	add    %edx,%eax
f0102a08:	8b 00                	mov    (%eax),%eax
f0102a0a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0102a0f:	89 45 e8             	mov    %eax,-0x18(%ebp)
		kfree((void*)kheap_virtual_address(table_pa));
	}
	else
	{
		// get the physical address and FrameInfo of the page table
		struct FrameInfo *table_FrameInfo = to_frame_info(table_pa);
f0102a12:	83 ec 0c             	sub    $0xc,%esp
f0102a15:	ff 75 e8             	pushl  -0x18(%ebp)
f0102a18:	e8 70 f9 ff ff       	call   f010238d <to_frame_info>
f0102a1d:	83 c4 10             	add    $0x10,%esp
f0102a20:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		// set references of the table frame to 0 then free it by adding
		// to the free frame list
		table_FrameInfo->references = 0;
f0102a23:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0102a26:	66 c7 40 08 00 00    	movw   $0x0,0x8(%eax)
		free_frame(table_FrameInfo);
f0102a2c:	83 ec 0c             	sub    $0xc,%esp
f0102a2f:	ff 75 e4             	pushl  -0x1c(%ebp)
f0102a32:	e8 06 4a 00 00       	call   f010743d <free_frame>
f0102a37:	83 c4 10             	add    $0x10,%esp
	}

	// set the corresponding entry in the directory to 0
	uint32 dir_index = PDX(va);
f0102a3a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0102a3d:	c1 e8 16             	shr    $0x16,%eax
f0102a40:	89 45 e0             	mov    %eax,-0x20(%ebp)
	env->env_page_directory[dir_index] &= (~PERM_PRESENT);
f0102a43:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0102a46:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0102a4c:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0102a4f:	c1 e2 02             	shl    $0x2,%edx
f0102a52:	01 c2                	add    %eax,%edx
f0102a54:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0102a57:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0102a5d:	8b 4d e0             	mov    -0x20(%ebp),%ecx
f0102a60:	c1 e1 02             	shl    $0x2,%ecx
f0102a63:	01 c8                	add    %ecx,%eax
f0102a65:	8b 00                	mov    (%eax),%eax
f0102a67:	83 e0 fe             	and    $0xfffffffe,%eax
f0102a6a:	89 02                	mov    %eax,(%edx)

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f0102a6c:	0f 20 d8             	mov    %cr3,%eax
f0102a6f:	89 45 dc             	mov    %eax,-0x24(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f0102a72:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0102a75:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
	return 0;
f0102a78:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102a7d:	c9                   	leave  
f0102a7e:	c3                   	ret    

f0102a7f <command_allocuserpage>:

int command_allocuserpage(int number_of_arguments, char **arguments)
{
f0102a7f:	55                   	push   %ebp
f0102a80:	89 e5                	mov    %esp,%ebp
f0102a82:	83 ec 28             	sub    $0x28,%esp
	if (number_of_arguments < 3 || number_of_arguments > 4)
f0102a85:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f0102a89:	7e 06                	jle    f0102a91 <command_allocuserpage+0x12>
f0102a8b:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f0102a8f:	7e 1a                	jle    f0102aab <command_allocuserpage+0x2c>
	{
		cprintf("aup command: invalid number of arguments\n") ;
f0102a91:	83 ec 0c             	sub    $0xc,%esp
f0102a94:	68 84 11 13 f0       	push   $0xf0131184
f0102a99:	e8 93 e3 ff ff       	call   f0100e31 <cprintf>
f0102a9e:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102aa1:	b8 00 00 00 00       	mov    $0x0,%eax
f0102aa6:	e9 4c 01 00 00       	jmp    f0102bf7 <command_allocuserpage+0x178>
	}
	int32 envId = strtol(arguments[1],NULL, 10);
f0102aab:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102aae:	83 c0 04             	add    $0x4,%eax
f0102ab1:	8b 00                	mov    (%eax),%eax
f0102ab3:	83 ec 04             	sub    $0x4,%esp
f0102ab6:	6a 0a                	push   $0xa
f0102ab8:	6a 00                	push   $0x0
f0102aba:	50                   	push   %eax
f0102abb:	e8 dd c6 02 00       	call   f012f19d <strtol>
f0102ac0:	83 c4 10             	add    $0x10,%esp
f0102ac3:	89 45 f0             	mov    %eax,-0x10(%ebp)
	struct Env* env = NULL;
f0102ac6:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	envid2env(envId, &env, 0 );
f0102acd:	83 ec 04             	sub    $0x4,%esp
f0102ad0:	6a 00                	push   $0x0
f0102ad2:	8d 45 e4             	lea    -0x1c(%ebp),%eax
f0102ad5:	50                   	push   %eax
f0102ad6:	ff 75 f0             	pushl  -0x10(%ebp)
f0102ad9:	e8 f0 6e 00 00       	call   f01099ce <envid2env>
f0102ade:	83 c4 10             	add    $0x10,%esp
	if(env == 0) return 0;
f0102ae1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0102ae4:	85 c0                	test   %eax,%eax
f0102ae6:	75 0a                	jne    f0102af2 <command_allocuserpage+0x73>
f0102ae8:	b8 00 00 00 00       	mov    $0x0,%eax
f0102aed:	e9 05 01 00 00       	jmp    f0102bf7 <command_allocuserpage+0x178>

	uint32 va = strtol(arguments[2], NULL, 16);
f0102af2:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102af5:	83 c0 08             	add    $0x8,%eax
f0102af8:	8b 00                	mov    (%eax),%eax
f0102afa:	83 ec 04             	sub    $0x4,%esp
f0102afd:	6a 10                	push   $0x10
f0102aff:	6a 00                	push   $0x0
f0102b01:	50                   	push   %eax
f0102b02:	e8 96 c6 02 00       	call   f012f19d <strtol>
f0102b07:	83 c4 10             	add    $0x10,%esp
f0102b0a:	89 45 ec             	mov    %eax,-0x14(%ebp)

	// Allocate a single frame from the free frame list
	struct FrameInfo * ptr_FrameInfo ;
	int ret = allocate_frame(&ptr_FrameInfo);
f0102b0d:	83 ec 0c             	sub    $0xc,%esp
f0102b10:	8d 45 e0             	lea    -0x20(%ebp),%eax
f0102b13:	50                   	push   %eax
f0102b14:	e8 0c 48 00 00       	call   f0107325 <allocate_frame>
f0102b19:	83 c4 10             	add    $0x10,%esp
f0102b1c:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret == E_NO_MEM)
f0102b1f:	83 7d e8 fc          	cmpl   $0xfffffffc,-0x18(%ebp)
f0102b23:	75 1a                	jne    f0102b3f <command_allocuserpage+0xc0>
	{
		cprintf("ERROR: no enough memory\n");
f0102b25:	83 ec 0c             	sub    $0xc,%esp
f0102b28:	68 ae 11 13 f0       	push   $0xf01311ae
f0102b2d:	e8 ff e2 ff ff       	call   f0100e31 <cprintf>
f0102b32:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102b35:	b8 00 00 00 00       	mov    $0x0,%eax
f0102b3a:	e9 b8 00 00 00       	jmp    f0102bf7 <command_allocuserpage+0x178>
	}

	if (number_of_arguments == 3)
f0102b3f:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f0102b43:	75 20                	jne    f0102b65 <command_allocuserpage+0xe6>
	{
		// Map this frame to the given user virtual address with PERM_WRITEABLE
		map_frame(env->env_page_directory, ptr_FrameInfo, va, PERM_WRITEABLE | PERM_USER);
f0102b45:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0102b48:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0102b4b:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0102b51:	6a 06                	push   $0x6
f0102b53:	ff 75 ec             	pushl  -0x14(%ebp)
f0102b56:	52                   	push   %edx
f0102b57:	50                   	push   %eax
f0102b58:	e8 63 4b 00 00       	call   f01076c0 <map_frame>
f0102b5d:	83 c4 10             	add    $0x10,%esp
f0102b60:	e9 8d 00 00 00       	jmp    f0102bf2 <command_allocuserpage+0x173>
	}
	else if (number_of_arguments == 4)
f0102b65:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f0102b69:	0f 85 83 00 00 00    	jne    f0102bf2 <command_allocuserpage+0x173>
	{
		// Map this frame to the given user virtual address with the given permission
		uint32 rw ;
		if (arguments[3][0] == 'r' || arguments[3][0] == 'R')
f0102b6f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b72:	83 c0 0c             	add    $0xc,%eax
f0102b75:	8b 00                	mov    (%eax),%eax
f0102b77:	8a 00                	mov    (%eax),%al
f0102b79:	3c 72                	cmp    $0x72,%al
f0102b7b:	74 0e                	je     f0102b8b <command_allocuserpage+0x10c>
f0102b7d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b80:	83 c0 0c             	add    $0xc,%eax
f0102b83:	8b 00                	mov    (%eax),%eax
f0102b85:	8a 00                	mov    (%eax),%al
f0102b87:	3c 52                	cmp    $0x52,%al
f0102b89:	75 09                	jne    f0102b94 <command_allocuserpage+0x115>
			rw = 0 ;
f0102b8b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0102b92:	eb 3c                	jmp    f0102bd0 <command_allocuserpage+0x151>
		else if (arguments[3][0] == 'w' || arguments[3][0] == 'W')
f0102b94:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b97:	83 c0 0c             	add    $0xc,%eax
f0102b9a:	8b 00                	mov    (%eax),%eax
f0102b9c:	8a 00                	mov    (%eax),%al
f0102b9e:	3c 77                	cmp    $0x77,%al
f0102ba0:	74 0e                	je     f0102bb0 <command_allocuserpage+0x131>
f0102ba2:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102ba5:	83 c0 0c             	add    $0xc,%eax
f0102ba8:	8b 00                	mov    (%eax),%eax
f0102baa:	8a 00                	mov    (%eax),%al
f0102bac:	3c 57                	cmp    $0x57,%al
f0102bae:	75 09                	jne    f0102bb9 <command_allocuserpage+0x13a>
			rw = PERM_WRITEABLE ;
f0102bb0:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
f0102bb7:	eb 17                	jmp    f0102bd0 <command_allocuserpage+0x151>
		else
		{
			cprintf("aup command: wrong permission (r/w)... will continue as writable\n") ;
f0102bb9:	83 ec 0c             	sub    $0xc,%esp
f0102bbc:	68 c8 11 13 f0       	push   $0xf01311c8
f0102bc1:	e8 6b e2 ff ff       	call   f0100e31 <cprintf>
f0102bc6:	83 c4 10             	add    $0x10,%esp
			rw = PERM_WRITEABLE ;
f0102bc9:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
		}

		map_frame(env->env_page_directory, ptr_FrameInfo, va, rw | PERM_USER);
f0102bd0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102bd3:	83 c8 04             	or     $0x4,%eax
f0102bd6:	89 c1                	mov    %eax,%ecx
f0102bd8:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0102bdb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0102bde:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0102be4:	51                   	push   %ecx
f0102be5:	ff 75 ec             	pushl  -0x14(%ebp)
f0102be8:	52                   	push   %edx
f0102be9:	50                   	push   %eax
f0102bea:	e8 d1 4a 00 00       	call   f01076c0 <map_frame>
f0102bef:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f0102bf2:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102bf7:	c9                   	leave  
f0102bf8:	c3                   	ret    

f0102bf9 <command_meminfo>:

int command_meminfo(int number_of_arguments, char **arguments)
{
f0102bf9:	55                   	push   %ebp
f0102bfa:	89 e5                	mov    %esp,%ebp
f0102bfc:	56                   	push   %esi
f0102bfd:	53                   	push   %ebx
f0102bfe:	83 ec 10             	sub    $0x10,%esp
	struct freeFramesCounters counters =calculate_available_frames();
f0102c01:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0102c04:	83 ec 0c             	sub    $0xc,%esp
f0102c07:	50                   	push   %eax
f0102c08:	e8 23 4d 00 00       	call   f0107930 <calculate_available_frames>
f0102c0d:	83 c4 0c             	add    $0xc,%esp
	cprintf("Total available frames = %d\nFree Buffered = %d\nFree Not Buffered = %d\nModified = %d\n",
f0102c10:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0102c13:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0102c16:	8b 45 ec             	mov    -0x14(%ebp),%eax
			counters.freeBuffered+ counters.freeNotBuffered+ counters.modified, counters.freeBuffered, counters.freeNotBuffered, counters.modified);
f0102c19:	8b 75 ec             	mov    -0x14(%ebp),%esi
f0102c1c:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0102c1f:	01 de                	add    %ebx,%esi
f0102c21:	8b 5d f4             	mov    -0xc(%ebp),%ebx
}

int command_meminfo(int number_of_arguments, char **arguments)
{
	struct freeFramesCounters counters =calculate_available_frames();
	cprintf("Total available frames = %d\nFree Buffered = %d\nFree Not Buffered = %d\nModified = %d\n",
f0102c24:	01 f3                	add    %esi,%ebx
f0102c26:	83 ec 0c             	sub    $0xc,%esp
f0102c29:	51                   	push   %ecx
f0102c2a:	52                   	push   %edx
f0102c2b:	50                   	push   %eax
f0102c2c:	53                   	push   %ebx
f0102c2d:	68 0c 12 13 f0       	push   $0xf013120c
f0102c32:	e8 fa e1 ff ff       	call   f0100e31 <cprintf>
f0102c37:	83 c4 20             	add    $0x20,%esp
			counters.freeBuffered+ counters.freeNotBuffered+ counters.modified, counters.freeBuffered, counters.freeNotBuffered, counters.modified);

	cprintf("Num of calls for kheap_virtual_address [in last run] = %d\n", numOfKheapVACalls);
f0102c3a:	a1 28 be 2b f0       	mov    0xf02bbe28,%eax
f0102c3f:	83 ec 08             	sub    $0x8,%esp
f0102c42:	50                   	push   %eax
f0102c43:	68 64 12 13 f0       	push   $0xf0131264
f0102c48:	e8 e4 e1 ff ff       	call   f0100e31 <cprintf>
f0102c4d:	83 c4 10             	add    $0x10,%esp

	return 0;
f0102c50:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102c55:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0102c58:	5b                   	pop    %ebx
f0102c59:	5e                   	pop    %esi
f0102c5a:	5d                   	pop    %ebp
f0102c5b:	c3                   	ret    

f0102c5c <CreateEnv>:

//2020
struct Env * CreateEnv(int number_of_arguments, char **arguments)
{
f0102c5c:	55                   	push   %ebp
f0102c5d:	89 e5                	mov    %esp,%ebp
f0102c5f:	83 ec 18             	sub    $0x18,%esp
	struct Env* env;
	uint32 pageWSSize = __PWS_MAX_SIZE;		//arg#3 default
f0102c62:	c7 45 ec 88 13 00 00 	movl   $0x1388,-0x14(%ebp)
	uint32 LRUSecondListSize = 0;			//arg#4 default
f0102c69:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 percent_WS_pages_to_remove = 0;	//arg#5 default
f0102c70:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		assert(percent_WS_pages_to_remove >= 0 && percent_WS_pages_to_remove <= 100);

	}
#else
	{
		switch (number_of_arguments)
f0102c77:	8b 45 08             	mov    0x8(%ebp),%eax
f0102c7a:	83 f8 02             	cmp    $0x2,%eax
f0102c7d:	74 39                	je     f0102cb8 <CreateEnv+0x5c>
f0102c7f:	83 f8 03             	cmp    $0x3,%eax
f0102c82:	75 1d                	jne    f0102ca1 <CreateEnv+0x45>
		{
		case 3:
			percent_WS_pages_to_remove = strtol(arguments[2], NULL, 10);
f0102c84:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102c87:	83 c0 08             	add    $0x8,%eax
f0102c8a:	8b 00                	mov    (%eax),%eax
f0102c8c:	83 ec 04             	sub    $0x4,%esp
f0102c8f:	6a 0a                	push   $0xa
f0102c91:	6a 00                	push   $0x0
f0102c93:	50                   	push   %eax
f0102c94:	e8 04 c5 02 00       	call   f012f19d <strtol>
f0102c99:	83 c4 10             	add    $0x10,%esp
f0102c9c:	89 45 f0             	mov    %eax,-0x10(%ebp)
			break;
f0102c9f:	eb 18                	jmp    f0102cb9 <CreateEnv+0x5d>
		case 2:
			break;
		default:
			cprintf("ERROR: invalid number of args\nUsage: <command> <prog_name> [<DYN_LOC_SCOPE_percent_WS_to_remove>]\naborting...\n");
f0102ca1:	83 ec 0c             	sub    $0xc,%esp
f0102ca4:	68 a0 12 13 f0       	push   $0xf01312a0
f0102ca9:	e8 83 e1 ff ff       	call   f0100e31 <cprintf>
f0102cae:	83 c4 10             	add    $0x10,%esp
			return NULL;
f0102cb1:	b8 00 00 00 00       	mov    $0x0,%eax
f0102cb6:	eb 58                	jmp    f0102d10 <CreateEnv+0xb4>
		{
		case 3:
			percent_WS_pages_to_remove = strtol(arguments[2], NULL, 10);
			break;
		case 2:
			break;
f0102cb8:	90                   	nop
			cprintf("ERROR: invalid number of args\nUsage: <command> <prog_name> [<DYN_LOC_SCOPE_percent_WS_to_remove>]\naborting...\n");
			return NULL;

			break;
		}
		if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0102cb9:	83 ec 0c             	sub    $0xc,%esp
f0102cbc:	6a 02                	push   $0x2
f0102cbe:	e8 bc aa 00 00       	call   f010d77f <isPageReplacmentAlgorithmLRU>
f0102cc3:	83 c4 10             	add    $0x10,%esp
f0102cc6:	85 c0                	test   %eax,%eax
f0102cc8:	74 07                	je     f0102cd1 <CreateEnv+0x75>
		{
			LRUSecondListSize = __LRU_SNDLST_SIZE;
f0102cca:	c7 45 f4 f4 01 00 00 	movl   $0x1f4,-0xc(%ebp)
		}
	}
#endif
	assert(percent_WS_pages_to_remove >= 0 && percent_WS_pages_to_remove <= 100);
f0102cd1:	83 7d f0 64          	cmpl   $0x64,-0x10(%ebp)
f0102cd5:	76 19                	jbe    f0102cf0 <CreateEnv+0x94>
f0102cd7:	68 10 13 13 f0       	push   $0xf0131310
f0102cdc:	68 55 13 13 f0       	push   $0xf0131355
f0102ce1:	68 bb 01 00 00       	push   $0x1bb
f0102ce6:	68 6a 13 13 f0       	push   $0xf013136a
f0102ceb:	e8 c0 d4 ff ff       	call   f01001b0 <_panic>
	env = env_create(arguments[1], pageWSSize, LRUSecondListSize, percent_WS_pages_to_remove);
f0102cf0:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102cf3:	83 c0 04             	add    $0x4,%eax
f0102cf6:	8b 00                	mov    (%eax),%eax
f0102cf8:	ff 75 f0             	pushl  -0x10(%ebp)
f0102cfb:	ff 75 f4             	pushl  -0xc(%ebp)
f0102cfe:	ff 75 ec             	pushl  -0x14(%ebp)
f0102d01:	50                   	push   %eax
f0102d02:	e8 c4 5f 00 00       	call   f0108ccb <env_create>
f0102d07:	83 c4 10             	add    $0x10,%esp
f0102d0a:	89 45 e8             	mov    %eax,-0x18(%ebp)

	return env;
f0102d0d:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
f0102d10:	c9                   	leave  
f0102d11:	c3                   	ret    

f0102d12 <command_run_program>:

int command_run_program(int number_of_arguments, char **arguments)
{
f0102d12:	55                   	push   %ebp
f0102d13:	89 e5                	mov    %esp,%ebp
f0102d15:	83 ec 18             	sub    $0x18,%esp
	//[1] Create and initialize a new environment for the program to be run
	struct Env *env = CreateEnv(number_of_arguments, arguments);
f0102d18:	83 ec 08             	sub    $0x8,%esp
f0102d1b:	ff 75 0c             	pushl  0xc(%ebp)
f0102d1e:	ff 75 08             	pushl  0x8(%ebp)
f0102d21:	e8 36 ff ff ff       	call   f0102c5c <CreateEnv>
f0102d26:	83 c4 10             	add    $0x10,%esp
f0102d29:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if(env == NULL) return 0;
f0102d2c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102d30:	75 07                	jne    f0102d39 <command_run_program+0x27>
f0102d32:	b8 00 00 00 00       	mov    $0x0,%eax
f0102d37:	eb 46                	jmp    f0102d7f <command_run_program+0x6d>
	cprintf("\nEnvironment Id= %d\n",env->env_id);
f0102d39:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102d3c:	8b 40 4c             	mov    0x4c(%eax),%eax
f0102d3f:	83 ec 08             	sub    $0x8,%esp
f0102d42:	50                   	push   %eax
f0102d43:	68 7e 13 13 f0       	push   $0xf013137e
f0102d48:	e8 e4 e0 ff ff       	call   f0100e31 <cprintf>
f0102d4d:	83 c4 10             	add    $0x10,%esp

	numOfKheapVACalls = 0;
f0102d50:	c7 05 28 be 2b f0 00 	movl   $0x0,0xf02bbe28
f0102d57:	00 00 00 

	//[2] Run the created environment by adding it to the "ready" queue then invoke the scheduler to execute it
	sched_new_env(env);
f0102d5a:	83 ec 0c             	sub    $0xc,%esp
f0102d5d:	ff 75 f4             	pushl  -0xc(%ebp)
f0102d60:	e8 ce 25 00 00       	call   f0105333 <sched_new_env>
f0102d65:	83 c4 10             	add    $0x10,%esp
	sched_run_env(env->env_id);
f0102d68:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102d6b:	8b 40 4c             	mov    0x4c(%eax),%eax
f0102d6e:	83 ec 0c             	sub    $0xc,%esp
f0102d71:	50                   	push   %eax
f0102d72:	e8 d9 25 00 00       	call   f0105350 <sched_run_env>
f0102d77:	83 c4 10             	add    $0x10,%esp

	return 0;
f0102d7a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102d7f:	c9                   	leave  
f0102d80:	c3                   	ret    

f0102d81 <command_kill_program>:

int command_kill_program(int number_of_arguments, char **arguments)
{
f0102d81:	55                   	push   %ebp
f0102d82:	89 e5                	mov    %esp,%ebp
f0102d84:	83 ec 18             	sub    $0x18,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f0102d87:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102d8a:	83 c0 04             	add    $0x4,%eax
f0102d8d:	8b 00                	mov    (%eax),%eax
f0102d8f:	83 ec 04             	sub    $0x4,%esp
f0102d92:	6a 0a                	push   $0xa
f0102d94:	6a 00                	push   $0x0
f0102d96:	50                   	push   %eax
f0102d97:	e8 01 c4 02 00       	call   f012f19d <strtol>
f0102d9c:	83 c4 10             	add    $0x10,%esp
f0102d9f:	89 45 f4             	mov    %eax,-0xc(%ebp)

	sched_kill_env(envId);
f0102da2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102da5:	83 ec 0c             	sub    $0xc,%esp
f0102da8:	50                   	push   %eax
f0102da9:	e8 63 28 00 00       	call   f0105611 <sched_kill_env>
f0102dae:	83 c4 10             	add    $0x10,%esp

	return 0;
f0102db1:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102db6:	c9                   	leave  
f0102db7:	c3                   	ret    

f0102db8 <commnad_load_env>:

int commnad_load_env(int number_of_arguments, char **arguments)
{
f0102db8:	55                   	push   %ebp
f0102db9:	89 e5                	mov    %esp,%ebp
f0102dbb:	83 ec 18             	sub    $0x18,%esp
	struct Env *env = CreateEnv(number_of_arguments, arguments);
f0102dbe:	83 ec 08             	sub    $0x8,%esp
f0102dc1:	ff 75 0c             	pushl  0xc(%ebp)
f0102dc4:	ff 75 08             	pushl  0x8(%ebp)
f0102dc7:	e8 90 fe ff ff       	call   f0102c5c <CreateEnv>
f0102dcc:	83 c4 10             	add    $0x10,%esp
f0102dcf:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (env == NULL)
f0102dd2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102dd6:	75 07                	jne    f0102ddf <commnad_load_env+0x27>
		return 0 ;
f0102dd8:	b8 00 00 00 00       	mov    $0x0,%eax
f0102ddd:	eb 2a                	jmp    f0102e09 <commnad_load_env+0x51>

	sched_new_env(env) ;
f0102ddf:	83 ec 0c             	sub    $0xc,%esp
f0102de2:	ff 75 f4             	pushl  -0xc(%ebp)
f0102de5:	e8 49 25 00 00       	call   f0105333 <sched_new_env>
f0102dea:	83 c4 10             	add    $0x10,%esp

	cprintf("\nEnvironment Id= %d\n",env->env_id);
f0102ded:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102df0:	8b 40 4c             	mov    0x4c(%eax),%eax
f0102df3:	83 ec 08             	sub    $0x8,%esp
f0102df6:	50                   	push   %eax
f0102df7:	68 7e 13 13 f0       	push   $0xf013137e
f0102dfc:	e8 30 e0 ff ff       	call   f0100e31 <cprintf>
f0102e01:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102e04:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102e09:	c9                   	leave  
f0102e0a:	c3                   	ret    

f0102e0b <command_run_all>:

int command_run_all(int number_of_arguments, char **arguments)
{
f0102e0b:	55                   	push   %ebp
f0102e0c:	89 e5                	mov    %esp,%ebp
f0102e0e:	83 ec 08             	sub    $0x8,%esp
	numOfKheapVACalls = 0;
f0102e11:	c7 05 28 be 2b f0 00 	movl   $0x0,0xf02bbe28
f0102e18:	00 00 00 
	sched_run_all();
f0102e1b:	e8 ba 2d 00 00       	call   f0105bda <sched_run_all>

	return 0 ;
f0102e20:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102e25:	c9                   	leave  
f0102e26:	c3                   	ret    

f0102e27 <command_print_all>:

int command_print_all(int number_of_arguments, char **arguments)
{
f0102e27:	55                   	push   %ebp
f0102e28:	89 e5                	mov    %esp,%ebp
f0102e2a:	83 ec 08             	sub    $0x8,%esp
	sched_print_all();
f0102e2d:	e8 a6 2b 00 00       	call   f01059d8 <sched_print_all>

	return 0 ;
f0102e32:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102e37:	c9                   	leave  
f0102e38:	c3                   	ret    

f0102e39 <command_kill_all>:

int command_kill_all(int number_of_arguments, char **arguments)
{
f0102e39:	55                   	push   %ebp
f0102e3a:	89 e5                	mov    %esp,%ebp
f0102e3c:	83 ec 08             	sub    $0x8,%esp
	sched_kill_all();
f0102e3f:	e8 09 2e 00 00       	call   f0105c4d <sched_kill_all>

	return 0 ;
f0102e44:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102e49:	c9                   	leave  
f0102e4a:	c3                   	ret    

f0102e4b <command_set_page_rep_LRU>:

int command_set_page_rep_LRU(int number_of_arguments, char **arguments)
{
f0102e4b:	55                   	push   %ebp
f0102e4c:	89 e5                	mov    %esp,%ebp
f0102e4e:	83 ec 18             	sub    $0x18,%esp
	if (number_of_arguments < 2)
f0102e51:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f0102e55:	7f 1a                	jg     f0102e71 <command_set_page_rep_LRU+0x26>
	{
		cprintf("ERROR: please specify the LRU Approx Type (1: TimeStamp Approx, 2: Lists Approx), aborting...\n");
f0102e57:	83 ec 0c             	sub    $0xc,%esp
f0102e5a:	68 94 13 13 f0       	push   $0xf0131394
f0102e5f:	e8 cd df ff ff       	call   f0100e31 <cprintf>
f0102e64:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102e67:	b8 00 00 00 00       	mov    $0x0,%eax
f0102e6c:	e9 83 00 00 00       	jmp    f0102ef4 <command_set_page_rep_LRU+0xa9>
	}
	int LRU_TYPE = strtol(arguments[1], NULL, 10) ;
f0102e71:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102e74:	83 c0 04             	add    $0x4,%eax
f0102e77:	8b 00                	mov    (%eax),%eax
f0102e79:	83 ec 04             	sub    $0x4,%esp
f0102e7c:	6a 0a                	push   $0xa
f0102e7e:	6a 00                	push   $0x0
f0102e80:	50                   	push   %eax
f0102e81:	e8 17 c3 02 00       	call   f012f19d <strtol>
f0102e86:	83 c4 10             	add    $0x10,%esp
f0102e89:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (LRU_TYPE == PG_REP_LRU_TIME_APPROX)
f0102e8c:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0102e90:	75 20                	jne    f0102eb2 <command_set_page_rep_LRU+0x67>
	{
		setPageReplacmentAlgorithmLRU(LRU_TYPE);
f0102e92:	83 ec 0c             	sub    $0xc,%esp
f0102e95:	ff 75 f4             	pushl  -0xc(%ebp)
f0102e98:	e8 57 a8 00 00       	call   f010d6f4 <setPageReplacmentAlgorithmLRU>
f0102e9d:	83 c4 10             	add    $0x10,%esp
		cprintf("Page replacement algorithm is now LRU with TimeStamp approximation\n");
f0102ea0:	83 ec 0c             	sub    $0xc,%esp
f0102ea3:	68 f4 13 13 f0       	push   $0xf01313f4
f0102ea8:	e8 84 df ff ff       	call   f0100e31 <cprintf>
f0102ead:	83 c4 10             	add    $0x10,%esp
f0102eb0:	eb 3d                	jmp    f0102eef <command_set_page_rep_LRU+0xa4>
	}
	else if (LRU_TYPE == PG_REP_LRU_LISTS_APPROX)
f0102eb2:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0102eb6:	75 20                	jne    f0102ed8 <command_set_page_rep_LRU+0x8d>
	{
		setPageReplacmentAlgorithmLRU(LRU_TYPE);
f0102eb8:	83 ec 0c             	sub    $0xc,%esp
f0102ebb:	ff 75 f4             	pushl  -0xc(%ebp)
f0102ebe:	e8 31 a8 00 00       	call   f010d6f4 <setPageReplacmentAlgorithmLRU>
f0102ec3:	83 c4 10             	add    $0x10,%esp
		cprintf("Page replacement algorithm is now LRU with LISTS approximation\n");
f0102ec6:	83 ec 0c             	sub    $0xc,%esp
f0102ec9:	68 38 14 13 f0       	push   $0xf0131438
f0102ece:	e8 5e df ff ff       	call   f0100e31 <cprintf>
f0102ed3:	83 c4 10             	add    $0x10,%esp
f0102ed6:	eb 17                	jmp    f0102eef <command_set_page_rep_LRU+0xa4>
	}
	else
	{
		cprintf("ERROR: Invalid LRU Approx Type (1: TimeStamp Approx, 2: Lists Approx), aborting...\n");
f0102ed8:	83 ec 0c             	sub    $0xc,%esp
f0102edb:	68 78 14 13 f0       	push   $0xf0131478
f0102ee0:	e8 4c df ff ff       	call   f0100e31 <cprintf>
f0102ee5:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102ee8:	b8 00 00 00 00       	mov    $0x0,%eax
f0102eed:	eb 05                	jmp    f0102ef4 <command_set_page_rep_LRU+0xa9>
	}
	return 0;
f0102eef:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102ef4:	c9                   	leave  
f0102ef5:	c3                   	ret    

f0102ef6 <command_set_page_rep_nthCLOCK>:
//2021
int command_set_page_rep_nthCLOCK(int number_of_arguments, char **arguments)
{
f0102ef6:	55                   	push   %ebp
f0102ef7:	89 e5                	mov    %esp,%ebp
f0102ef9:	83 ec 18             	sub    $0x18,%esp
	uint32 PageWSMaxSweeps = strtol(arguments[1], NULL, 10);
f0102efc:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102eff:	83 c0 04             	add    $0x4,%eax
f0102f02:	8b 00                	mov    (%eax),%eax
f0102f04:	83 ec 04             	sub    $0x4,%esp
f0102f07:	6a 0a                	push   $0xa
f0102f09:	6a 00                	push   $0x0
f0102f0b:	50                   	push   %eax
f0102f0c:	e8 8c c2 02 00       	call   f012f19d <strtol>
f0102f11:	83 c4 10             	add    $0x10,%esp
f0102f14:	89 45 f4             	mov    %eax,-0xc(%ebp)
	setPageReplacmentAlgorithmNchanceCLOCK(PageWSMaxSweeps);
f0102f17:	83 ec 0c             	sub    $0xc,%esp
f0102f1a:	ff 75 f4             	pushl  -0xc(%ebp)
f0102f1d:	e8 45 a8 00 00       	call   f010d767 <setPageReplacmentAlgorithmNchanceCLOCK>
f0102f22:	83 c4 10             	add    $0x10,%esp
	cprintf("Page replacement algorithm is now N chance CLOCK\n");
f0102f25:	83 ec 0c             	sub    $0xc,%esp
f0102f28:	68 cc 14 13 f0       	push   $0xf01314cc
f0102f2d:	e8 ff de ff ff       	call   f0100e31 <cprintf>
f0102f32:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102f35:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102f3a:	c9                   	leave  
f0102f3b:	c3                   	ret    

f0102f3c <command_set_page_rep_CLOCK>:
int command_set_page_rep_CLOCK(int number_of_arguments, char **arguments)
{
f0102f3c:	55                   	push   %ebp
f0102f3d:	89 e5                	mov    %esp,%ebp
f0102f3f:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmCLOCK();
f0102f42:	e8 e0 a7 00 00       	call   f010d727 <setPageReplacmentAlgorithmCLOCK>
	cprintf("Page replacement algorithm is now CLOCK\n");
f0102f47:	83 ec 0c             	sub    $0xc,%esp
f0102f4a:	68 00 15 13 f0       	push   $0xf0131500
f0102f4f:	e8 dd de ff ff       	call   f0100e31 <cprintf>
f0102f54:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102f57:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102f5c:	c9                   	leave  
f0102f5d:	c3                   	ret    

f0102f5e <command_set_page_rep_FIFO>:

int command_set_page_rep_FIFO(int number_of_arguments, char **arguments)
{
f0102f5e:	55                   	push   %ebp
f0102f5f:	89 e5                	mov    %esp,%ebp
f0102f61:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmFIFO();
f0102f64:	e8 ce a7 00 00       	call   f010d737 <setPageReplacmentAlgorithmFIFO>
	cprintf("Page replacement algorithm is now FIFO\n");
f0102f69:	83 ec 0c             	sub    $0xc,%esp
f0102f6c:	68 2c 15 13 f0       	push   $0xf013152c
f0102f71:	e8 bb de ff ff       	call   f0100e31 <cprintf>
f0102f76:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102f79:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102f7e:	c9                   	leave  
f0102f7f:	c3                   	ret    

f0102f80 <command_set_page_rep_ModifiedCLOCK>:

int command_set_page_rep_ModifiedCLOCK(int number_of_arguments, char **arguments)
{
f0102f80:	55                   	push   %ebp
f0102f81:	89 e5                	mov    %esp,%ebp
f0102f83:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmModifiedCLOCK();
f0102f86:	e8 bc a7 00 00       	call   f010d747 <setPageReplacmentAlgorithmModifiedCLOCK>
	cprintf("Page replacement algorithm is now Modified CLOCK\n");
f0102f8b:	83 ec 0c             	sub    $0xc,%esp
f0102f8e:	68 54 15 13 f0       	push   $0xf0131554
f0102f93:	e8 99 de ff ff       	call   f0100e31 <cprintf>
f0102f98:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102f9b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102fa0:	c9                   	leave  
f0102fa1:	c3                   	ret    

f0102fa2 <command_sch_RR>:

/*2018*///BEGIN======================================================
int command_sch_RR(int number_of_arguments, char **arguments)
{
f0102fa2:	55                   	push   %ebp
f0102fa3:	89 e5                	mov    %esp,%ebp
f0102fa5:	83 ec 18             	sub    $0x18,%esp
	uint8 quantum = strtol(arguments[1], NULL, 10);
f0102fa8:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102fab:	83 c0 04             	add    $0x4,%eax
f0102fae:	8b 00                	mov    (%eax),%eax
f0102fb0:	83 ec 04             	sub    $0x4,%esp
f0102fb3:	6a 0a                	push   $0xa
f0102fb5:	6a 00                	push   $0x0
f0102fb7:	50                   	push   %eax
f0102fb8:	e8 e0 c1 02 00       	call   f012f19d <strtol>
f0102fbd:	83 c4 10             	add    $0x10,%esp
f0102fc0:	88 45 f7             	mov    %al,-0x9(%ebp)

	sched_init_RR(quantum);
f0102fc3:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
f0102fc7:	83 ec 0c             	sub    $0xc,%esp
f0102fca:	50                   	push   %eax
f0102fcb:	e8 44 33 00 00       	call   f0106314 <sched_init_RR>
f0102fd0:	83 c4 10             	add    $0x10,%esp
	cprintf("Scheduler is now set to Round Robin with quantum %d ms\n", quantums[0]);
f0102fd3:	a0 e8 bd 2b f0       	mov    0xf02bbde8,%al
f0102fd8:	0f b6 c0             	movzbl %al,%eax
f0102fdb:	83 ec 08             	sub    $0x8,%esp
f0102fde:	50                   	push   %eax
f0102fdf:	68 88 15 13 f0       	push   $0xf0131588
f0102fe4:	e8 48 de ff ff       	call   f0100e31 <cprintf>
f0102fe9:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102fec:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102ff1:	c9                   	leave  
f0102ff2:	c3                   	ret    

f0102ff3 <command_sch_MLFQ>:
int command_sch_MLFQ(int number_of_arguments, char **arguments)
{
f0102ff3:	55                   	push   %ebp
f0102ff4:	89 e5                	mov    %esp,%ebp
f0102ff6:	53                   	push   %ebx
f0102ff7:	83 ec 24             	sub    $0x24,%esp
	uint8 numOfLevels = strtol(arguments[1], NULL, 10);
f0102ffa:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102ffd:	83 c0 04             	add    $0x4,%eax
f0103000:	8b 00                	mov    (%eax),%eax
f0103002:	83 ec 04             	sub    $0x4,%esp
f0103005:	6a 0a                	push   $0xa
f0103007:	6a 00                	push   $0x0
f0103009:	50                   	push   %eax
f010300a:	e8 8e c1 02 00       	call   f012f19d <strtol>
f010300f:	83 c4 10             	add    $0x10,%esp
f0103012:	88 45 ef             	mov    %al,-0x11(%ebp)
	uint8 quantumOfEachLevel[MAX_ARGUMENTS - 2] ;
	for (int i = 2 ; i < number_of_arguments ; i++)
f0103015:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
f010301c:	eb 2e                	jmp    f010304c <command_sch_MLFQ+0x59>
	{
		quantumOfEachLevel[i-2] = strtol(arguments[i], NULL, 10);
f010301e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103021:	8d 58 fe             	lea    -0x2(%eax),%ebx
f0103024:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103027:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010302e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103031:	01 d0                	add    %edx,%eax
f0103033:	8b 00                	mov    (%eax),%eax
f0103035:	83 ec 04             	sub    $0x4,%esp
f0103038:	6a 0a                	push   $0xa
f010303a:	6a 00                	push   $0x0
f010303c:	50                   	push   %eax
f010303d:	e8 5b c1 02 00       	call   f012f19d <strtol>
f0103042:	83 c4 10             	add    $0x10,%esp
f0103045:	88 44 1d e1          	mov    %al,-0x1f(%ebp,%ebx,1)
}
int command_sch_MLFQ(int number_of_arguments, char **arguments)
{
	uint8 numOfLevels = strtol(arguments[1], NULL, 10);
	uint8 quantumOfEachLevel[MAX_ARGUMENTS - 2] ;
	for (int i = 2 ; i < number_of_arguments ; i++)
f0103049:	ff 45 f4             	incl   -0xc(%ebp)
f010304c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010304f:	3b 45 08             	cmp    0x8(%ebp),%eax
f0103052:	7c ca                	jl     f010301e <command_sch_MLFQ+0x2b>
	{
		quantumOfEachLevel[i-2] = strtol(arguments[i], NULL, 10);
	}

	sched_init_MLFQ(numOfLevels, quantumOfEachLevel);
f0103054:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
f0103058:	83 ec 08             	sub    $0x8,%esp
f010305b:	8d 55 e1             	lea    -0x1f(%ebp),%edx
f010305e:	52                   	push   %edx
f010305f:	50                   	push   %eax
f0103060:	e8 05 33 00 00       	call   f010636a <sched_init_MLFQ>
f0103065:	83 c4 10             	add    $0x10,%esp

	cprintf("Scheduler is now set to MLFQ with quantums: ");
f0103068:	83 ec 0c             	sub    $0xc,%esp
f010306b:	68 c0 15 13 f0       	push   $0xf01315c0
f0103070:	e8 bc dd ff ff       	call   f0100e31 <cprintf>
f0103075:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues; i++)
f0103078:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010307f:	eb 21                	jmp    f01030a2 <command_sch_MLFQ+0xaf>
	{
		cprintf("%d   ", quantums[i]) ;
f0103081:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103084:	05 e8 bd 2b f0       	add    $0xf02bbde8,%eax
f0103089:	8a 00                	mov    (%eax),%al
f010308b:	0f b6 c0             	movzbl %al,%eax
f010308e:	83 ec 08             	sub    $0x8,%esp
f0103091:	50                   	push   %eax
f0103092:	68 ed 15 13 f0       	push   $0xf01315ed
f0103097:	e8 95 dd ff ff       	call   f0100e31 <cprintf>
f010309c:	83 c4 10             	add    $0x10,%esp
	}

	sched_init_MLFQ(numOfLevels, quantumOfEachLevel);

	cprintf("Scheduler is now set to MLFQ with quantums: ");
	for (int i = 0 ; i < num_of_ready_queues; i++)
f010309f:	ff 45 f0             	incl   -0x10(%ebp)
f01030a2:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01030a7:	0f b6 c0             	movzbl %al,%eax
f01030aa:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01030ad:	7f d2                	jg     f0103081 <command_sch_MLFQ+0x8e>
	{
		cprintf("%d   ", quantums[i]) ;
	}
	cprintf("\n");
f01030af:	83 ec 0c             	sub    $0xc,%esp
f01030b2:	68 71 11 13 f0       	push   $0xf0131171
f01030b7:	e8 75 dd ff ff       	call   f0100e31 <cprintf>
f01030bc:	83 c4 10             	add    $0x10,%esp
	return 0;
f01030bf:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01030c4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01030c7:	c9                   	leave  
f01030c8:	c3                   	ret    

f01030c9 <command_sch_BSD>:
int command_sch_BSD(int number_of_arguments, char **arguments)
{
f01030c9:	55                   	push   %ebp
f01030ca:	89 e5                	mov    %esp,%ebp
f01030cc:	83 ec 18             	sub    $0x18,%esp
	uint8 numOfLevels = strtol(arguments[1], NULL, 10);
f01030cf:	8b 45 0c             	mov    0xc(%ebp),%eax
f01030d2:	83 c0 04             	add    $0x4,%eax
f01030d5:	8b 00                	mov    (%eax),%eax
f01030d7:	83 ec 04             	sub    $0x4,%esp
f01030da:	6a 0a                	push   $0xa
f01030dc:	6a 00                	push   $0x0
f01030de:	50                   	push   %eax
f01030df:	e8 b9 c0 02 00       	call   f012f19d <strtol>
f01030e4:	83 c4 10             	add    $0x10,%esp
f01030e7:	88 45 f7             	mov    %al,-0x9(%ebp)
	uint8 quantum = strtol(arguments[2], NULL, 10);
f01030ea:	8b 45 0c             	mov    0xc(%ebp),%eax
f01030ed:	83 c0 08             	add    $0x8,%eax
f01030f0:	8b 00                	mov    (%eax),%eax
f01030f2:	83 ec 04             	sub    $0x4,%esp
f01030f5:	6a 0a                	push   $0xa
f01030f7:	6a 00                	push   $0x0
f01030f9:	50                   	push   %eax
f01030fa:	e8 9e c0 02 00       	call   f012f19d <strtol>
f01030ff:	83 c4 10             	add    $0x10,%esp
f0103102:	88 45 f6             	mov    %al,-0xa(%ebp)

	sched_init_BSD(numOfLevels, quantum);
f0103105:	0f b6 55 f6          	movzbl -0xa(%ebp),%edx
f0103109:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
f010310d:	83 ec 08             	sub    $0x8,%esp
f0103110:	52                   	push   %edx
f0103111:	50                   	push   %eax
f0103112:	e8 62 32 00 00       	call   f0106379 <sched_init_BSD>
f0103117:	83 c4 10             	add    $0x10,%esp

	cprintf("Scheduler is now set to BSD with %d levels & quantum = %d\n", numOfLevels, quantum);
f010311a:	0f b6 55 f6          	movzbl -0xa(%ebp),%edx
f010311e:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
f0103122:	83 ec 04             	sub    $0x4,%esp
f0103125:	52                   	push   %edx
f0103126:	50                   	push   %eax
f0103127:	68 f4 15 13 f0       	push   $0xf01315f4
f010312c:	e8 00 dd ff ff       	call   f0100e31 <cprintf>
f0103131:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f0103134:	83 ec 0c             	sub    $0xc,%esp
f0103137:	68 71 11 13 f0       	push   $0xf0131171
f010313c:	e8 f0 dc ff ff       	call   f0100e31 <cprintf>
f0103141:	83 c4 10             	add    $0x10,%esp
	return 0;
f0103144:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103149:	c9                   	leave  
f010314a:	c3                   	ret    

f010314b <command_print_sch_method>:
int command_print_sch_method(int number_of_arguments, char **arguments)
{
f010314b:	55                   	push   %ebp
f010314c:	89 e5                	mov    %esp,%ebp
f010314e:	83 ec 18             	sub    $0x18,%esp
	if (isSchedMethodMLFQ())
f0103151:	e8 43 30 00 00       	call   f0106199 <isSchedMethodMLFQ>
f0103156:	85 c0                	test   %eax,%eax
f0103158:	74 59                	je     f01031b3 <command_print_sch_method+0x68>
	{
		cprintf("Current scheduler method is MLFQ with quantums: ");
f010315a:	83 ec 0c             	sub    $0xc,%esp
f010315d:	68 30 16 13 f0       	push   $0xf0131630
f0103162:	e8 ca dc ff ff       	call   f0100e31 <cprintf>
f0103167:	83 c4 10             	add    $0x10,%esp
		for (int i = 0 ; i < num_of_ready_queues; i++)
f010316a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0103171:	eb 21                	jmp    f0103194 <command_print_sch_method+0x49>
		{
			cprintf("%d   ", quantums[i]) ;
f0103173:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103176:	05 e8 bd 2b f0       	add    $0xf02bbde8,%eax
f010317b:	8a 00                	mov    (%eax),%al
f010317d:	0f b6 c0             	movzbl %al,%eax
f0103180:	83 ec 08             	sub    $0x8,%esp
f0103183:	50                   	push   %eax
f0103184:	68 ed 15 13 f0       	push   $0xf01315ed
f0103189:	e8 a3 dc ff ff       	call   f0100e31 <cprintf>
f010318e:	83 c4 10             	add    $0x10,%esp
int command_print_sch_method(int number_of_arguments, char **arguments)
{
	if (isSchedMethodMLFQ())
	{
		cprintf("Current scheduler method is MLFQ with quantums: ");
		for (int i = 0 ; i < num_of_ready_queues; i++)
f0103191:	ff 45 f4             	incl   -0xc(%ebp)
f0103194:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0103199:	0f b6 c0             	movzbl %al,%eax
f010319c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010319f:	7f d2                	jg     f0103173 <command_print_sch_method+0x28>
		{
			cprintf("%d   ", quantums[i]) ;
		}
		cprintf("\n");
f01031a1:	83 ec 0c             	sub    $0xc,%esp
f01031a4:	68 71 11 13 f0       	push   $0xf0131171
f01031a9:	e8 83 dc ff ff       	call   f0100e31 <cprintf>
f01031ae:	83 c4 10             	add    $0x10,%esp
f01031b1:	eb 61                	jmp    f0103214 <command_print_sch_method+0xc9>
	}
	else if (isSchedMethodRR())
f01031b3:	e8 c7 2f 00 00       	call   f010617f <isSchedMethodRR>
f01031b8:	85 c0                	test   %eax,%eax
f01031ba:	74 1b                	je     f01031d7 <command_print_sch_method+0x8c>
	{
		cprintf("Current scheduler method is Round Robin with quantum %d ms\n", quantums[0]);
f01031bc:	a0 e8 bd 2b f0       	mov    0xf02bbde8,%al
f01031c1:	0f b6 c0             	movzbl %al,%eax
f01031c4:	83 ec 08             	sub    $0x8,%esp
f01031c7:	50                   	push   %eax
f01031c8:	68 64 16 13 f0       	push   $0xf0131664
f01031cd:	e8 5f dc ff ff       	call   f0100e31 <cprintf>
f01031d2:	83 c4 10             	add    $0x10,%esp
f01031d5:	eb 3d                	jmp    f0103214 <command_print_sch_method+0xc9>
	}
	else if (isSchedMethodBSD())
f01031d7:	e8 d8 2f 00 00       	call   f01061b4 <isSchedMethodBSD>
f01031dc:	85 c0                	test   %eax,%eax
f01031de:	74 24                	je     f0103204 <command_print_sch_method+0xb9>
	{
		cprintf("Scheduler is now set to BSD with %d levels & quantum = %d\n", num_of_ready_queues, quantums[0]);
f01031e0:	a0 e8 bd 2b f0       	mov    0xf02bbde8,%al
f01031e5:	0f b6 d0             	movzbl %al,%edx
f01031e8:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01031ed:	0f b6 c0             	movzbl %al,%eax
f01031f0:	83 ec 04             	sub    $0x4,%esp
f01031f3:	52                   	push   %edx
f01031f4:	50                   	push   %eax
f01031f5:	68 f4 15 13 f0       	push   $0xf01315f4
f01031fa:	e8 32 dc ff ff       	call   f0100e31 <cprintf>
f01031ff:	83 c4 10             	add    $0x10,%esp
f0103202:	eb 10                	jmp    f0103214 <command_print_sch_method+0xc9>
	}
	else
		cprintf("Current scheduler method is UNDEFINED\n");
f0103204:	83 ec 0c             	sub    $0xc,%esp
f0103207:	68 a0 16 13 f0       	push   $0xf01316a0
f010320c:	e8 20 dc ff ff       	call   f0100e31 <cprintf>
f0103211:	83 c4 10             	add    $0x10,%esp

	return 0;
f0103214:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103219:	c9                   	leave  
f010321a:	c3                   	ret    

f010321b <command_sch_test>:
int command_sch_test(int number_of_arguments, char **arguments)
{
f010321b:	55                   	push   %ebp
f010321c:	89 e5                	mov    %esp,%ebp
f010321e:	83 ec 18             	sub    $0x18,%esp
	int status  = strtol(arguments[1], NULL, 10);
f0103221:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103224:	83 c0 04             	add    $0x4,%eax
f0103227:	8b 00                	mov    (%eax),%eax
f0103229:	83 ec 04             	sub    $0x4,%esp
f010322c:	6a 0a                	push   $0xa
f010322e:	6a 00                	push   $0x0
f0103230:	50                   	push   %eax
f0103231:	e8 67 bf 02 00       	call   f012f19d <strtol>
f0103236:	83 c4 10             	add    $0x10,%esp
f0103239:	89 45 f4             	mov    %eax,-0xc(%ebp)
	chksch(status);
f010323c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010323f:	0f b6 c0             	movzbl %al,%eax
f0103242:	83 ec 0c             	sub    $0xc,%esp
f0103245:	50                   	push   %eax
f0103246:	e8 8f ae 02 00       	call   f012e0da <chksch>
f010324b:	83 c4 10             	add    $0x10,%esp
	if (status == 0)
f010324e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103252:	75 12                	jne    f0103266 <command_sch_test+0x4b>
		cprintf("Testing the scheduler is TURNED OFF\n");
f0103254:	83 ec 0c             	sub    $0xc,%esp
f0103257:	68 c8 16 13 f0       	push   $0xf01316c8
f010325c:	e8 d0 db ff ff       	call   f0100e31 <cprintf>
f0103261:	83 c4 10             	add    $0x10,%esp
f0103264:	eb 16                	jmp    f010327c <command_sch_test+0x61>
	else if (status == 1)
f0103266:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f010326a:	75 10                	jne    f010327c <command_sch_test+0x61>
		cprintf("Testing the scheduler is TURNED ON\n");
f010326c:	83 ec 0c             	sub    $0xc,%esp
f010326f:	68 f0 16 13 f0       	push   $0xf01316f0
f0103274:	e8 b8 db ff ff       	call   f0100e31 <cprintf>
f0103279:	83 c4 10             	add    $0x10,%esp
	return 0;
f010327c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103281:	c9                   	leave  
f0103282:	c3                   	ret    

f0103283 <command_print_page_rep>:
/*2018*///END======================================================


/*2015*///BEGIN======================================================
int command_print_page_rep(int number_of_arguments, char **arguments)
{
f0103283:	55                   	push   %ebp
f0103284:	89 e5                	mov    %esp,%ebp
f0103286:	83 ec 08             	sub    $0x8,%esp
	if (isPageReplacmentAlgorithmCLOCK())
f0103289:	e8 07 a5 00 00       	call   f010d795 <isPageReplacmentAlgorithmCLOCK>
f010328e:	85 c0                	test   %eax,%eax
f0103290:	74 15                	je     f01032a7 <command_print_page_rep+0x24>
		cprintf("Page replacement algorithm is CLOCK\n");
f0103292:	83 ec 0c             	sub    $0xc,%esp
f0103295:	68 14 17 13 f0       	push   $0xf0131714
f010329a:	e8 92 db ff ff       	call   f0100e31 <cprintf>
f010329f:	83 c4 10             	add    $0x10,%esp
f01032a2:	e9 8c 00 00 00       	jmp    f0103333 <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX))
f01032a7:	83 ec 0c             	sub    $0xc,%esp
f01032aa:	6a 01                	push   $0x1
f01032ac:	e8 ce a4 00 00       	call   f010d77f <isPageReplacmentAlgorithmLRU>
f01032b1:	83 c4 10             	add    $0x10,%esp
f01032b4:	85 c0                	test   %eax,%eax
f01032b6:	74 12                	je     f01032ca <command_print_page_rep+0x47>
		cprintf("Page replacement algorithm is LRU with TimeStamp approximation\n");
f01032b8:	83 ec 0c             	sub    $0xc,%esp
f01032bb:	68 3c 17 13 f0       	push   $0xf013173c
f01032c0:	e8 6c db ff ff       	call   f0100e31 <cprintf>
f01032c5:	83 c4 10             	add    $0x10,%esp
f01032c8:	eb 69                	jmp    f0103333 <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f01032ca:	83 ec 0c             	sub    $0xc,%esp
f01032cd:	6a 02                	push   $0x2
f01032cf:	e8 ab a4 00 00       	call   f010d77f <isPageReplacmentAlgorithmLRU>
f01032d4:	83 c4 10             	add    $0x10,%esp
f01032d7:	85 c0                	test   %eax,%eax
f01032d9:	74 12                	je     f01032ed <command_print_page_rep+0x6a>
		cprintf("Page replacement algorithm is LRU with LISTS approximation\n");
f01032db:	83 ec 0c             	sub    $0xc,%esp
f01032de:	68 7c 17 13 f0       	push   $0xf013177c
f01032e3:	e8 49 db ff ff       	call   f0100e31 <cprintf>
f01032e8:	83 c4 10             	add    $0x10,%esp
f01032eb:	eb 46                	jmp    f0103333 <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmFIFO())
f01032ed:	e8 be a4 00 00       	call   f010d7b0 <isPageReplacmentAlgorithmFIFO>
f01032f2:	85 c0                	test   %eax,%eax
f01032f4:	74 12                	je     f0103308 <command_print_page_rep+0x85>
		cprintf("Page replacement algorithm is FIFO\n");
f01032f6:	83 ec 0c             	sub    $0xc,%esp
f01032f9:	68 b8 17 13 f0       	push   $0xf01317b8
f01032fe:	e8 2e db ff ff       	call   f0100e31 <cprintf>
f0103303:	83 c4 10             	add    $0x10,%esp
f0103306:	eb 2b                	jmp    f0103333 <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmModifiedCLOCK())
f0103308:	e8 be a4 00 00       	call   f010d7cb <isPageReplacmentAlgorithmModifiedCLOCK>
f010330d:	85 c0                	test   %eax,%eax
f010330f:	74 12                	je     f0103323 <command_print_page_rep+0xa0>
		cprintf("Page replacement algorithm is Modified CLOCK\n");
f0103311:	83 ec 0c             	sub    $0xc,%esp
f0103314:	68 dc 17 13 f0       	push   $0xf01317dc
f0103319:	e8 13 db ff ff       	call   f0100e31 <cprintf>
f010331e:	83 c4 10             	add    $0x10,%esp
f0103321:	eb 10                	jmp    f0103333 <command_print_page_rep+0xb0>
	else
		cprintf("Page replacement algorithm is UNDEFINED\n");
f0103323:	83 ec 0c             	sub    $0xc,%esp
f0103326:	68 0c 18 13 f0       	push   $0xf013180c
f010332b:	e8 01 db ff ff       	call   f0100e31 <cprintf>
f0103330:	83 c4 10             	add    $0x10,%esp

	return 0;
f0103333:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103338:	c9                   	leave  
f0103339:	c3                   	ret    

f010333a <command_set_uheap_plac_FIRSTFIT>:


int command_set_uheap_plac_FIRSTFIT(int number_of_arguments, char **arguments)
{
f010333a:	55                   	push   %ebp
f010333b:	89 e5                	mov    %esp,%ebp
f010333d:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyFIRSTFIT();
f0103340:	e8 b4 ef ff ff       	call   f01022f9 <setUHeapPlacementStrategyFIRSTFIT>
	cprintf("User Heap placement strategy is now FIRST FIT\n");
f0103345:	83 ec 0c             	sub    $0xc,%esp
f0103348:	68 38 18 13 f0       	push   $0xf0131838
f010334d:	e8 df da ff ff       	call   f0100e31 <cprintf>
f0103352:	83 c4 10             	add    $0x10,%esp
	return 0;
f0103355:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010335a:	c9                   	leave  
f010335b:	c3                   	ret    

f010335c <command_set_uheap_plac_BESTFIT>:

int command_set_uheap_plac_BESTFIT(int number_of_arguments, char **arguments)
{
f010335c:	55                   	push   %ebp
f010335d:	89 e5                	mov    %esp,%ebp
f010335f:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyBESTFIT();
f0103362:	e8 a2 ef ff ff       	call   f0102309 <setUHeapPlacementStrategyBESTFIT>
	cprintf("User Heap placement strategy is now BEST FIT\n");
f0103367:	83 ec 0c             	sub    $0xc,%esp
f010336a:	68 68 18 13 f0       	push   $0xf0131868
f010336f:	e8 bd da ff ff       	call   f0100e31 <cprintf>
f0103374:	83 c4 10             	add    $0x10,%esp
	return 0;
f0103377:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010337c:	c9                   	leave  
f010337d:	c3                   	ret    

f010337e <command_set_uheap_plac_NEXTFIT>:

int command_set_uheap_plac_NEXTFIT(int number_of_arguments, char **arguments)
{
f010337e:	55                   	push   %ebp
f010337f:	89 e5                	mov    %esp,%ebp
f0103381:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyNEXTFIT();
f0103384:	e8 90 ef ff ff       	call   f0102319 <setUHeapPlacementStrategyNEXTFIT>
	cprintf("User Heap placement strategy is now NEXT FIT\n");
f0103389:	83 ec 0c             	sub    $0xc,%esp
f010338c:	68 98 18 13 f0       	push   $0xf0131898
f0103391:	e8 9b da ff ff       	call   f0100e31 <cprintf>
f0103396:	83 c4 10             	add    $0x10,%esp
	return 0;
f0103399:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010339e:	c9                   	leave  
f010339f:	c3                   	ret    

f01033a0 <command_set_uheap_plac_WORSTFIT>:
int command_set_uheap_plac_WORSTFIT(int number_of_arguments, char **arguments)
{
f01033a0:	55                   	push   %ebp
f01033a1:	89 e5                	mov    %esp,%ebp
f01033a3:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyWORSTFIT();
f01033a6:	e8 7e ef ff ff       	call   f0102329 <setUHeapPlacementStrategyWORSTFIT>
	cprintf("User Heap placement strategy is now WORST FIT\n");
f01033ab:	83 ec 0c             	sub    $0xc,%esp
f01033ae:	68 c8 18 13 f0       	push   $0xf01318c8
f01033b3:	e8 79 da ff ff       	call   f0100e31 <cprintf>
f01033b8:	83 c4 10             	add    $0x10,%esp
	return 0;
f01033bb:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01033c0:	c9                   	leave  
f01033c1:	c3                   	ret    

f01033c2 <command_print_uheap_plac>:

int command_print_uheap_plac(int number_of_arguments, char **arguments)
{
f01033c2:	55                   	push   %ebp
f01033c3:	89 e5                	mov    %esp,%ebp
f01033c5:	83 ec 08             	sub    $0x8,%esp
	if (isUHeapPlacementStrategyFIRSTFIT())
f01033c8:	e8 6c ef ff ff       	call   f0102339 <isUHeapPlacementStrategyFIRSTFIT>
f01033cd:	84 c0                	test   %al,%al
f01033cf:	74 12                	je     f01033e3 <command_print_uheap_plac+0x21>
		cprintf("User Heap placement strategy is FIRST FIT\n");
f01033d1:	83 ec 0c             	sub    $0xc,%esp
f01033d4:	68 f8 18 13 f0       	push   $0xf01318f8
f01033d9:	e8 53 da ff ff       	call   f0100e31 <cprintf>
f01033de:	83 c4 10             	add    $0x10,%esp
f01033e1:	eb 61                	jmp    f0103444 <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyBESTFIT())
f01033e3:	e8 66 ef ff ff       	call   f010234e <isUHeapPlacementStrategyBESTFIT>
f01033e8:	84 c0                	test   %al,%al
f01033ea:	74 12                	je     f01033fe <command_print_uheap_plac+0x3c>
		cprintf("User Heap placement strategy is BEST FIT\n");
f01033ec:	83 ec 0c             	sub    $0xc,%esp
f01033ef:	68 24 19 13 f0       	push   $0xf0131924
f01033f4:	e8 38 da ff ff       	call   f0100e31 <cprintf>
f01033f9:	83 c4 10             	add    $0x10,%esp
f01033fc:	eb 46                	jmp    f0103444 <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyNEXTFIT())
f01033fe:	e8 60 ef ff ff       	call   f0102363 <isUHeapPlacementStrategyNEXTFIT>
f0103403:	84 c0                	test   %al,%al
f0103405:	74 12                	je     f0103419 <command_print_uheap_plac+0x57>
		cprintf("User Heap placement strategy is NEXT FIT\n");
f0103407:	83 ec 0c             	sub    $0xc,%esp
f010340a:	68 50 19 13 f0       	push   $0xf0131950
f010340f:	e8 1d da ff ff       	call   f0100e31 <cprintf>
f0103414:	83 c4 10             	add    $0x10,%esp
f0103417:	eb 2b                	jmp    f0103444 <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyWORSTFIT())
f0103419:	e8 5a ef ff ff       	call   f0102378 <isUHeapPlacementStrategyWORSTFIT>
f010341e:	84 c0                	test   %al,%al
f0103420:	74 12                	je     f0103434 <command_print_uheap_plac+0x72>
		cprintf("User Heap placement strategy is WORST FIT\n");
f0103422:	83 ec 0c             	sub    $0xc,%esp
f0103425:	68 7c 19 13 f0       	push   $0xf013197c
f010342a:	e8 02 da ff ff       	call   f0100e31 <cprintf>
f010342f:	83 c4 10             	add    $0x10,%esp
f0103432:	eb 10                	jmp    f0103444 <command_print_uheap_plac+0x82>
	else
		cprintf("User Heap placement strategy is UNDEFINED\n");
f0103434:	83 ec 0c             	sub    $0xc,%esp
f0103437:	68 a8 19 13 f0       	push   $0xf01319a8
f010343c:	e8 f0 d9 ff ff       	call   f0100e31 <cprintf>
f0103441:	83 c4 10             	add    $0x10,%esp

	return 0;
f0103444:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103449:	c9                   	leave  
f010344a:	c3                   	ret    

f010344b <command_set_kheap_plac_CONTALLOC>:
/*2015*///END======================================================

/*2017*///BEGIN======================================================

int command_set_kheap_plac_CONTALLOC(int number_of_arguments, char **arguments)
{
f010344b:	55                   	push   %ebp
f010344c:	89 e5                	mov    %esp,%ebp
f010344e:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyCONTALLOC();
f0103451:	e8 eb ed ff ff       	call   f0102241 <setKHeapPlacementStrategyCONTALLOC>
	cprintf("Kernel Heap placement strategy is now FIRST FIT\n");
f0103456:	83 ec 0c             	sub    $0xc,%esp
f0103459:	68 d4 19 13 f0       	push   $0xf01319d4
f010345e:	e8 ce d9 ff ff       	call   f0100e31 <cprintf>
f0103463:	83 c4 10             	add    $0x10,%esp
	return 0;
f0103466:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010346b:	c9                   	leave  
f010346c:	c3                   	ret    

f010346d <command_set_kheap_plac_FIRSTFIT>:

int command_set_kheap_plac_FIRSTFIT(int number_of_arguments, char **arguments)
{
f010346d:	55                   	push   %ebp
f010346e:	89 e5                	mov    %esp,%ebp
f0103470:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyFIRSTFIT();
f0103473:	e8 d9 ed ff ff       	call   f0102251 <setKHeapPlacementStrategyFIRSTFIT>
	cprintf("Kernel Heap placement strategy is now FIRST FIT\n");
f0103478:	83 ec 0c             	sub    $0xc,%esp
f010347b:	68 d4 19 13 f0       	push   $0xf01319d4
f0103480:	e8 ac d9 ff ff       	call   f0100e31 <cprintf>
f0103485:	83 c4 10             	add    $0x10,%esp
	return 0;
f0103488:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010348d:	c9                   	leave  
f010348e:	c3                   	ret    

f010348f <command_set_kheap_plac_BESTFIT>:

int command_set_kheap_plac_BESTFIT(int number_of_arguments, char **arguments)
{
f010348f:	55                   	push   %ebp
f0103490:	89 e5                	mov    %esp,%ebp
f0103492:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyBESTFIT();
f0103495:	e8 c7 ed ff ff       	call   f0102261 <setKHeapPlacementStrategyBESTFIT>
	cprintf("Kernel Heap placement strategy is now BEST FIT\n");
f010349a:	83 ec 0c             	sub    $0xc,%esp
f010349d:	68 08 1a 13 f0       	push   $0xf0131a08
f01034a2:	e8 8a d9 ff ff       	call   f0100e31 <cprintf>
f01034a7:	83 c4 10             	add    $0x10,%esp
	return 0;
f01034aa:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01034af:	c9                   	leave  
f01034b0:	c3                   	ret    

f01034b1 <command_set_kheap_plac_NEXTFIT>:

int command_set_kheap_plac_NEXTFIT(int number_of_arguments, char **arguments)
{
f01034b1:	55                   	push   %ebp
f01034b2:	89 e5                	mov    %esp,%ebp
f01034b4:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyNEXTFIT();
f01034b7:	e8 b5 ed ff ff       	call   f0102271 <setKHeapPlacementStrategyNEXTFIT>
	cprintf("Kernel Heap placement strategy is now NEXT FIT\n");
f01034bc:	83 ec 0c             	sub    $0xc,%esp
f01034bf:	68 38 1a 13 f0       	push   $0xf0131a38
f01034c4:	e8 68 d9 ff ff       	call   f0100e31 <cprintf>
f01034c9:	83 c4 10             	add    $0x10,%esp
	return 0;
f01034cc:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01034d1:	c9                   	leave  
f01034d2:	c3                   	ret    

f01034d3 <command_set_kheap_plac_WORSTFIT>:
int command_set_kheap_plac_WORSTFIT(int number_of_arguments, char **arguments)
{
f01034d3:	55                   	push   %ebp
f01034d4:	89 e5                	mov    %esp,%ebp
f01034d6:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyWORSTFIT();
f01034d9:	e8 a3 ed ff ff       	call   f0102281 <setKHeapPlacementStrategyWORSTFIT>
	cprintf("Kernel Heap placement strategy is now WORST FIT\n");
f01034de:	83 ec 0c             	sub    $0xc,%esp
f01034e1:	68 68 1a 13 f0       	push   $0xf0131a68
f01034e6:	e8 46 d9 ff ff       	call   f0100e31 <cprintf>
f01034eb:	83 c4 10             	add    $0x10,%esp
	return 0;
f01034ee:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01034f3:	c9                   	leave  
f01034f4:	c3                   	ret    

f01034f5 <command_print_kheap_plac>:

int command_print_kheap_plac(int number_of_arguments, char **arguments)
{
f01034f5:	55                   	push   %ebp
f01034f6:	89 e5                	mov    %esp,%ebp
f01034f8:	83 ec 08             	sub    $0x8,%esp
	if (isKHeapPlacementStrategyCONTALLOC())
f01034fb:	e8 91 ed ff ff       	call   f0102291 <isKHeapPlacementStrategyCONTALLOC>
f0103500:	84 c0                	test   %al,%al
f0103502:	74 12                	je     f0103516 <command_print_kheap_plac+0x21>
		cprintf("Kernel Heap placement strategy is CONTINUOUS ALLOCATION\n");
f0103504:	83 ec 0c             	sub    $0xc,%esp
f0103507:	68 9c 1a 13 f0       	push   $0xf0131a9c
f010350c:	e8 20 d9 ff ff       	call   f0100e31 <cprintf>
f0103511:	83 c4 10             	add    $0x10,%esp
f0103514:	eb 7c                	jmp    f0103592 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyFIRSTFIT())
f0103516:	e8 8a ed ff ff       	call   f01022a5 <isKHeapPlacementStrategyFIRSTFIT>
f010351b:	84 c0                	test   %al,%al
f010351d:	74 12                	je     f0103531 <command_print_kheap_plac+0x3c>
		cprintf("Kernel Heap placement strategy is FIRST FIT\n");
f010351f:	83 ec 0c             	sub    $0xc,%esp
f0103522:	68 d8 1a 13 f0       	push   $0xf0131ad8
f0103527:	e8 05 d9 ff ff       	call   f0100e31 <cprintf>
f010352c:	83 c4 10             	add    $0x10,%esp
f010352f:	eb 61                	jmp    f0103592 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyBESTFIT())
f0103531:	e8 84 ed ff ff       	call   f01022ba <isKHeapPlacementStrategyBESTFIT>
f0103536:	84 c0                	test   %al,%al
f0103538:	74 12                	je     f010354c <command_print_kheap_plac+0x57>
		cprintf("Kernel Heap placement strategy is BEST FIT\n");
f010353a:	83 ec 0c             	sub    $0xc,%esp
f010353d:	68 08 1b 13 f0       	push   $0xf0131b08
f0103542:	e8 ea d8 ff ff       	call   f0100e31 <cprintf>
f0103547:	83 c4 10             	add    $0x10,%esp
f010354a:	eb 46                	jmp    f0103592 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyNEXTFIT())
f010354c:	e8 7e ed ff ff       	call   f01022cf <isKHeapPlacementStrategyNEXTFIT>
f0103551:	84 c0                	test   %al,%al
f0103553:	74 12                	je     f0103567 <command_print_kheap_plac+0x72>
		cprintf("Kernel Heap placement strategy is NEXT FIT\n");
f0103555:	83 ec 0c             	sub    $0xc,%esp
f0103558:	68 34 1b 13 f0       	push   $0xf0131b34
f010355d:	e8 cf d8 ff ff       	call   f0100e31 <cprintf>
f0103562:	83 c4 10             	add    $0x10,%esp
f0103565:	eb 2b                	jmp    f0103592 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyWORSTFIT())
f0103567:	e8 78 ed ff ff       	call   f01022e4 <isKHeapPlacementStrategyWORSTFIT>
f010356c:	84 c0                	test   %al,%al
f010356e:	74 12                	je     f0103582 <command_print_kheap_plac+0x8d>
		cprintf("Kernel Heap placement strategy is WORST FIT\n");
f0103570:	83 ec 0c             	sub    $0xc,%esp
f0103573:	68 60 1b 13 f0       	push   $0xf0131b60
f0103578:	e8 b4 d8 ff ff       	call   f0100e31 <cprintf>
f010357d:	83 c4 10             	add    $0x10,%esp
f0103580:	eb 10                	jmp    f0103592 <command_print_kheap_plac+0x9d>
	else
		cprintf("Kernel Heap placement strategy is UNDEFINED\n");
f0103582:	83 ec 0c             	sub    $0xc,%esp
f0103585:	68 90 1b 13 f0       	push   $0xf0131b90
f010358a:	e8 a2 d8 ff ff       	call   f0100e31 <cprintf>
f010358f:	83 c4 10             	add    $0x10,%esp

	return 0;
f0103592:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103597:	c9                   	leave  
f0103598:	c3                   	ret    

f0103599 <command_disable_modified_buffer>:

/*2017*///END======================================================

int command_disable_modified_buffer(int number_of_arguments, char **arguments)
{
f0103599:	55                   	push   %ebp
f010359a:	89 e5                	mov    %esp,%ebp
f010359c:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f010359f:	e8 9e a2 00 00       	call   f010d842 <isBufferingEnabled>
f01035a4:	84 c0                	test   %al,%al
f01035a6:	75 12                	jne    f01035ba <command_disable_modified_buffer+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering first.\n");
f01035a8:	83 ec 0c             	sub    $0xc,%esp
f01035ab:	68 c0 1b 13 f0       	push   $0xf0131bc0
f01035b0:	e8 7c d8 ff ff       	call   f0100e31 <cprintf>
f01035b5:	83 c4 10             	add    $0x10,%esp
f01035b8:	eb 1d                	jmp    f01035d7 <command_disable_modified_buffer+0x3e>
	}
	else
	{
		enableModifiedBuffer(0);
f01035ba:	83 ec 0c             	sub    $0xc,%esp
f01035bd:	6a 00                	push   $0x0
f01035bf:	e8 58 a2 00 00       	call   f010d81c <enableModifiedBuffer>
f01035c4:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified Buffer is now DISABLED\n");
f01035c7:	83 ec 0c             	sub    $0xc,%esp
f01035ca:	68 fc 1b 13 f0       	push   $0xf0131bfc
f01035cf:	e8 5d d8 ff ff       	call   f0100e31 <cprintf>
f01035d4:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f01035d7:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01035dc:	c9                   	leave  
f01035dd:	c3                   	ret    

f01035de <command_enable_modified_buffer>:


int command_enable_modified_buffer(int number_of_arguments, char **arguments)
{
f01035de:	55                   	push   %ebp
f01035df:	89 e5                	mov    %esp,%ebp
f01035e1:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f01035e4:	e8 59 a2 00 00       	call   f010d842 <isBufferingEnabled>
f01035e9:	84 c0                	test   %al,%al
f01035eb:	75 12                	jne    f01035ff <command_enable_modified_buffer+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering first.\n");
f01035ed:	83 ec 0c             	sub    $0xc,%esp
f01035f0:	68 c0 1b 13 f0       	push   $0xf0131bc0
f01035f5:	e8 37 d8 ff ff       	call   f0100e31 <cprintf>
f01035fa:	83 c4 10             	add    $0x10,%esp
f01035fd:	eb 1d                	jmp    f010361c <command_enable_modified_buffer+0x3e>
	}
	else
	{
		enableModifiedBuffer(1);
f01035ff:	83 ec 0c             	sub    $0xc,%esp
f0103602:	6a 01                	push   $0x1
f0103604:	e8 13 a2 00 00       	call   f010d81c <enableModifiedBuffer>
f0103609:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified Buffer is now ENABLED\n");
f010360c:	83 ec 0c             	sub    $0xc,%esp
f010360f:	68 20 1c 13 f0       	push   $0xf0131c20
f0103614:	e8 18 d8 ff ff       	call   f0100e31 <cprintf>
f0103619:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f010361c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103621:	c9                   	leave  
f0103622:	c3                   	ret    

f0103623 <command_disable_buffering>:

/*2016 ============================================================================*/

int command_disable_buffering(int number_of_arguments, char **arguments)
{
f0103623:	55                   	push   %ebp
f0103624:	89 e5                	mov    %esp,%ebp
f0103626:	83 ec 08             	sub    $0x8,%esp
	enableBuffering(0);
f0103629:	83 ec 0c             	sub    $0xc,%esp
f010362c:	6a 00                	push   $0x0
f010362e:	e8 01 a2 00 00       	call   f010d834 <enableBuffering>
f0103633:	83 c4 10             	add    $0x10,%esp
	enableModifiedBuffer(0);
f0103636:	83 ec 0c             	sub    $0xc,%esp
f0103639:	6a 00                	push   $0x0
f010363b:	e8 dc a1 00 00       	call   f010d81c <enableModifiedBuffer>
f0103640:	83 c4 10             	add    $0x10,%esp
	cprintf("Buffering is now DISABLED\n");
f0103643:	83 ec 0c             	sub    $0xc,%esp
f0103646:	68 40 1c 13 f0       	push   $0xf0131c40
f010364b:	e8 e1 d7 ff ff       	call   f0100e31 <cprintf>
f0103650:	83 c4 10             	add    $0x10,%esp
	return 0;
f0103653:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103658:	c9                   	leave  
f0103659:	c3                   	ret    

f010365a <command_enable_buffering>:


int command_enable_buffering(int number_of_arguments, char **arguments)
{
f010365a:	55                   	push   %ebp
f010365b:	89 e5                	mov    %esp,%ebp
f010365d:	83 ec 78             	sub    $0x78,%esp
	enableBuffering(1);
f0103660:	83 ec 0c             	sub    $0xc,%esp
f0103663:	6a 01                	push   $0x1
f0103665:	e8 ca a1 00 00       	call   f010d834 <enableBuffering>
f010366a:	83 c4 10             	add    $0x10,%esp
	enableModifiedBuffer(1);
f010366d:	83 ec 0c             	sub    $0xc,%esp
f0103670:	6a 01                	push   $0x1
f0103672:	e8 a5 a1 00 00       	call   f010d81c <enableModifiedBuffer>
f0103677:	83 c4 10             	add    $0x10,%esp
	if(getModifiedBufferLength() == 0)
f010367a:	e8 db a1 00 00       	call   f010d85a <getModifiedBufferLength>
f010367f:	85 c0                	test   %eax,%eax
f0103681:	75 59                	jne    f01036dc <command_enable_buffering+0x82>
	{
		cprintf("Modified buffer enabled but with length = 0\n");
f0103683:	83 ec 0c             	sub    $0xc,%esp
f0103686:	68 5c 1c 13 f0       	push   $0xf0131c5c
f010368b:	e8 a1 d7 ff ff       	call   f0100e31 <cprintf>
f0103690:	83 c4 10             	add    $0x10,%esp
		char str[100];
		readline("Please enter the modified buff length = ", str);
f0103693:	83 ec 08             	sub    $0x8,%esp
f0103696:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0103699:	50                   	push   %eax
f010369a:	68 8c 1c 13 f0       	push   $0xf0131c8c
f010369f:	e8 93 b5 02 00       	call   f012ec37 <readline>
f01036a4:	83 c4 10             	add    $0x10,%esp
		setModifiedBufferLength(strtol(str, NULL, 10));
f01036a7:	83 ec 04             	sub    $0x4,%esp
f01036aa:	6a 0a                	push   $0xa
f01036ac:	6a 00                	push   $0x0
f01036ae:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01036b1:	50                   	push   %eax
f01036b2:	e8 e6 ba 02 00       	call   f012f19d <strtol>
f01036b7:	83 c4 10             	add    $0x10,%esp
f01036ba:	83 ec 0c             	sub    $0xc,%esp
f01036bd:	50                   	push   %eax
f01036be:	e8 89 a1 00 00       	call   f010d84c <setModifiedBufferLength>
f01036c3:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified buffer length updated = %d\n", getModifiedBufferLength());
f01036c6:	e8 8f a1 00 00       	call   f010d85a <getModifiedBufferLength>
f01036cb:	83 ec 08             	sub    $0x8,%esp
f01036ce:	50                   	push   %eax
f01036cf:	68 b8 1c 13 f0       	push   $0xf0131cb8
f01036d4:	e8 58 d7 ff ff       	call   f0100e31 <cprintf>
f01036d9:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("Buffering is now ENABLED\n");
f01036dc:	83 ec 0c             	sub    $0xc,%esp
f01036df:	68 dd 1c 13 f0       	push   $0xf0131cdd
f01036e4:	e8 48 d7 ff ff       	call   f0100e31 <cprintf>
f01036e9:	83 c4 10             	add    $0x10,%esp
	return 0;
f01036ec:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01036f1:	c9                   	leave  
f01036f2:	c3                   	ret    

f01036f3 <command_set_modified_buffer_length>:

int command_set_modified_buffer_length(int number_of_arguments, char **arguments)
{
f01036f3:	55                   	push   %ebp
f01036f4:	89 e5                	mov    %esp,%ebp
f01036f6:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f01036f9:	e8 44 a1 00 00       	call   f010d842 <isBufferingEnabled>
f01036fe:	84 c0                	test   %al,%al
f0103700:	75 12                	jne    f0103714 <command_set_modified_buffer_length+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering to use the modified buffer.\n");
f0103702:	83 ec 0c             	sub    $0xc,%esp
f0103705:	68 f8 1c 13 f0       	push   $0xf0131cf8
f010370a:	e8 22 d7 ff ff       	call   f0100e31 <cprintf>
f010370f:	83 c4 10             	add    $0x10,%esp
f0103712:	eb 19                	jmp    f010372d <command_set_modified_buffer_length+0x3a>
	}
	else if (!isModifiedBufferEnabled())
f0103714:	e8 11 a1 00 00       	call   f010d82a <isModifiedBufferEnabled>
f0103719:	84 c0                	test   %al,%al
f010371b:	75 10                	jne    f010372d <command_set_modified_buffer_length+0x3a>
	{
		cprintf("Modified Buffering is not enabled. Please enable modified buffering.\n");
f010371d:	83 ec 0c             	sub    $0xc,%esp
f0103720:	68 48 1d 13 f0       	push   $0xf0131d48
f0103725:	e8 07 d7 ff ff       	call   f0100e31 <cprintf>
f010372a:	83 c4 10             	add    $0x10,%esp
	}
	setModifiedBufferLength(strtol(arguments[1], NULL, 10));
f010372d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103730:	83 c0 04             	add    $0x4,%eax
f0103733:	8b 00                	mov    (%eax),%eax
f0103735:	83 ec 04             	sub    $0x4,%esp
f0103738:	6a 0a                	push   $0xa
f010373a:	6a 00                	push   $0x0
f010373c:	50                   	push   %eax
f010373d:	e8 5b ba 02 00       	call   f012f19d <strtol>
f0103742:	83 c4 10             	add    $0x10,%esp
f0103745:	83 ec 0c             	sub    $0xc,%esp
f0103748:	50                   	push   %eax
f0103749:	e8 fe a0 00 00       	call   f010d84c <setModifiedBufferLength>
f010374e:	83 c4 10             	add    $0x10,%esp
	cprintf("Modified buffer length updated = %d\n", getModifiedBufferLength());
f0103751:	e8 04 a1 00 00       	call   f010d85a <getModifiedBufferLength>
f0103756:	83 ec 08             	sub    $0x8,%esp
f0103759:	50                   	push   %eax
f010375a:	68 b8 1c 13 f0       	push   $0xf0131cb8
f010375f:	e8 cd d6 ff ff       	call   f0100e31 <cprintf>
f0103764:	83 c4 10             	add    $0x10,%esp
	return 0;
f0103767:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010376c:	c9                   	leave  
f010376d:	c3                   	ret    

f010376e <command_get_modified_buffer_length>:

int command_get_modified_buffer_length(int number_of_arguments, char **arguments)
{
f010376e:	55                   	push   %ebp
f010376f:	89 e5                	mov    %esp,%ebp
f0103771:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f0103774:	e8 c9 a0 00 00       	call   f010d842 <isBufferingEnabled>
f0103779:	84 c0                	test   %al,%al
f010377b:	75 12                	jne    f010378f <command_get_modified_buffer_length+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering to use the modified buffer.\n");
f010377d:	83 ec 0c             	sub    $0xc,%esp
f0103780:	68 f8 1c 13 f0       	push   $0xf0131cf8
f0103785:	e8 a7 d6 ff ff       	call   f0100e31 <cprintf>
f010378a:	83 c4 10             	add    $0x10,%esp
f010378d:	eb 19                	jmp    f01037a8 <command_get_modified_buffer_length+0x3a>
	}
	else if (!isModifiedBufferEnabled())
f010378f:	e8 96 a0 00 00       	call   f010d82a <isModifiedBufferEnabled>
f0103794:	84 c0                	test   %al,%al
f0103796:	75 10                	jne    f01037a8 <command_get_modified_buffer_length+0x3a>
	{
		cprintf("Modified Buffering is not enabled. Please enable modified buffering.\n");
f0103798:	83 ec 0c             	sub    $0xc,%esp
f010379b:	68 48 1d 13 f0       	push   $0xf0131d48
f01037a0:	e8 8c d6 ff ff       	call   f0100e31 <cprintf>
f01037a5:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("Modified buffer length = %d\n", getModifiedBufferLength());
f01037a8:	e8 ad a0 00 00       	call   f010d85a <getModifiedBufferLength>
f01037ad:	83 ec 08             	sub    $0x8,%esp
f01037b0:	50                   	push   %eax
f01037b1:	68 8e 1d 13 f0       	push   $0xf0131d8e
f01037b6:	e8 76 d6 ff ff       	call   f0100e31 <cprintf>
f01037bb:	83 c4 10             	add    $0x10,%esp
	return 0;
f01037be:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01037c3:	c9                   	leave  
f01037c4:	c3                   	ret    

f01037c5 <command_tst>:

int command_tst(int number_of_arguments, char **arguments)
{
f01037c5:	55                   	push   %ebp
f01037c6:	89 e5                	mov    %esp,%ebp
f01037c8:	83 ec 08             	sub    $0x8,%esp
	return tst_handler(number_of_arguments, arguments);
f01037cb:	83 ec 08             	sub    $0x8,%esp
f01037ce:	ff 75 0c             	pushl  0xc(%ebp)
f01037d1:	ff 75 08             	pushl  0x8(%ebp)
f01037d4:	e8 c7 a4 00 00       	call   f010dca0 <tst_handler>
f01037d9:	83 c4 10             	add    $0x10,%esp
}
f01037dc:	c9                   	leave  
f01037dd:	c3                   	ret    

f01037de <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f01037de:	55                   	push   %ebp
f01037df:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f01037e1:	8b 45 08             	mov    0x8(%ebp),%eax
f01037e4:	8b 15 10 be 2b f0    	mov    0xf02bbe10,%edx
f01037ea:	29 d0                	sub    %edx,%eax
f01037ec:	c1 f8 02             	sar    $0x2,%eax
f01037ef:	89 c2                	mov    %eax,%edx
f01037f1:	89 d0                	mov    %edx,%eax
f01037f3:	c1 e0 03             	shl    $0x3,%eax
f01037f6:	01 d0                	add    %edx,%eax
f01037f8:	c1 e0 03             	shl    $0x3,%eax
f01037fb:	01 d0                	add    %edx,%eax
f01037fd:	c1 e0 03             	shl    $0x3,%eax
f0103800:	01 d0                	add    %edx,%eax
f0103802:	c1 e0 03             	shl    $0x3,%eax
f0103805:	01 d0                	add    %edx,%eax
f0103807:	89 c1                	mov    %eax,%ecx
f0103809:	c1 e1 0f             	shl    $0xf,%ecx
f010380c:	01 c8                	add    %ecx,%eax
f010380e:	c1 e0 03             	shl    $0x3,%eax
f0103811:	01 d0                	add    %edx,%eax
f0103813:	f7 d8                	neg    %eax
}
f0103815:	5d                   	pop    %ebp
f0103816:	c3                   	ret    

f0103817 <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f0103817:	55                   	push   %ebp
f0103818:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f010381a:	ff 75 08             	pushl  0x8(%ebp)
f010381d:	e8 bc ff ff ff       	call   f01037de <to_frame_number>
f0103822:	83 c4 04             	add    $0x4,%esp
f0103825:	c1 e0 0c             	shl    $0xc,%eax
}
f0103828:	c9                   	leave  
f0103829:	c3                   	ret    

f010382a <to_frame_info>:

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f010382a:	55                   	push   %ebp
f010382b:	89 e5                	mov    %esp,%ebp
f010382d:	53                   	push   %ebx
f010382e:	83 ec 04             	sub    $0x4,%esp
	if (PPN(physical_address) >= number_of_frames)
f0103831:	8b 45 08             	mov    0x8(%ebp),%eax
f0103834:	c1 e8 0c             	shr    $0xc,%eax
f0103837:	89 c2                	mov    %eax,%edx
f0103839:	a1 d0 bd 2b f0       	mov    0xf02bbdd0,%eax
f010383e:	39 c2                	cmp    %eax,%edx
f0103840:	72 14                	jb     f0103856 <to_frame_info+0x2c>
		panic("to_frame_info called with invalid pa");
f0103842:	83 ec 04             	sub    $0x4,%esp
f0103845:	68 ac 1d 13 f0       	push   $0xf0131dac
f010384a:	6a 55                	push   $0x55
f010384c:	68 d4 1d 13 f0       	push   $0xf0131dd4
f0103851:	e8 5a c9 ff ff       	call   f01001b0 <_panic>
	return &frames_info[PPN(physical_address)];
f0103856:	8b 0d 10 be 2b f0    	mov    0xf02bbe10,%ecx
f010385c:	8b 45 08             	mov    0x8(%ebp),%eax
f010385f:	c1 e8 0c             	shr    $0xc,%eax
f0103862:	89 c2                	mov    %eax,%edx
f0103864:	89 d0                	mov    %edx,%eax
f0103866:	01 c0                	add    %eax,%eax
f0103868:	01 d0                	add    %edx,%eax
f010386a:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0103871:	01 d8                	add    %ebx,%eax
f0103873:	01 d0                	add    %edx,%eax
f0103875:	01 c8                	add    %ecx,%eax
}
f0103877:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010387a:	c9                   	leave  
f010387b:	c3                   	ret    

f010387c <read_disk_page>:
void __pf_remove_env_all_tables(struct Env* ptr_env);
void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address);


int read_disk_page(uint32 dfn, void* va)
{
f010387c:	55                   	push   %ebp
f010387d:	89 e5                	mov    %esp,%ebp
f010387f:	83 ec 18             	sub    $0x18,%esp
	uint32 df_start_sector = PAGE_FILE_START_SECTOR+dfn*SECTOR_PER_PAGE;
f0103882:	8b 45 08             	mov    0x8(%ebp),%eax
f0103885:	05 00 14 00 00       	add    $0x1400,%eax
f010388a:	c1 e0 03             	shl    $0x3,%eax
f010388d:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_STATMENT( cprintf("reading from disk to mem addr %x at sector %d\n",va,df_start_sector);  );
	int success = ide_read(df_start_sector, (void*)va, SECTOR_PER_PAGE);
f0103890:	83 ec 04             	sub    $0x4,%esp
f0103893:	6a 08                	push   $0x8
f0103895:	ff 75 0c             	pushl  0xc(%ebp)
f0103898:	ff 75 f4             	pushl  -0xc(%ebp)
f010389b:	e8 58 bd 02 00       	call   f012f5f8 <ide_read>
f01038a0:	83 c4 10             	add    $0x10,%esp
f01038a3:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//LOG_STATMENT( if(success==0) {cprintf("read from disk successuflly.\n");} else {cprintf("read from disk failed !!\n");} );

	return success;
f01038a6:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f01038a9:	c9                   	leave  
f01038aa:	c3                   	ret    

f01038ab <write_disk_page>:


int write_disk_page(uint32 dfn, void* va)
{
f01038ab:	55                   	push   %ebp
f01038ac:	89 e5                	mov    %esp,%ebp
f01038ae:	83 ec 18             	sub    $0x18,%esp
	//write disk at wanted frame
	uint32 df_start_sector = PAGE_FILE_START_SECTOR+dfn*SECTOR_PER_PAGE;
f01038b1:	8b 45 08             	mov    0x8(%ebp),%eax
f01038b4:	05 00 14 00 00       	add    $0x1400,%eax
f01038b9:	c1 e0 03             	shl    $0x3,%eax
f01038bc:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_STATMENT( cprintf(">>> writing to disk from mem addr %x at sector %d\n",va,df_start_sector);  );
	int success = ide_write(df_start_sector, (void*)va, SECTOR_PER_PAGE);
f01038bf:	83 ec 04             	sub    $0x4,%esp
f01038c2:	6a 08                	push   $0x8
f01038c4:	ff 75 0c             	pushl  0xc(%ebp)
f01038c7:	ff 75 f4             	pushl  -0xc(%ebp)
f01038ca:	e8 69 be 02 00       	call   f012f738 <ide_write>
f01038cf:	83 c4 10             	add    $0x10,%esp
f01038d2:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//LOG_STATMENT( if(success==0) {cprintf(">>> written to disk successfully.\n");} else {cprintf(">>> written to disk failed !!\n");} );

	if(success != 0)
f01038d5:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01038d9:	74 14                	je     f01038ef <write_disk_page+0x44>
		panic("Error writing on disk\n");
f01038db:	83 ec 04             	sub    $0x4,%esp
f01038de:	68 f6 1d 13 f0       	push   $0xf0131df6
f01038e3:	6a 2e                	push   $0x2e
f01038e5:	68 0d 1e 13 f0       	push   $0xf0131e0d
f01038ea:	e8 c1 c8 ff ff       	call   f01001b0 <_panic>
	return success;
f01038ef:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f01038f2:	c9                   	leave  
f01038f3:	c3                   	ret    

f01038f4 <initialize_disk_page_file>:
// After this point, ONLY use the functions below
// to allocate and deallocate physical memory via the disk_free_frame_list,
// and NEVER use boot_allocate_space() or the related boot-time functions above.
//
void initialize_disk_page_file()
{
f01038f4:	55                   	push   %ebp
f01038f5:	89 e5                	mov    %esp,%ebp
f01038f7:	56                   	push   %esi
f01038f8:	53                   	push   %ebx
f01038f9:	83 ec 10             	sub    $0x10,%esp
	int i;
	LIST_INIT(&disk_free_frame_list);
f01038fc:	c7 05 84 a2 2d f0 00 	movl   $0x0,0xf02da284
f0103903:	00 00 00 
f0103906:	c7 05 88 a2 2d f0 00 	movl   $0x0,0xf02da288
f010390d:	00 00 00 
f0103910:	c7 05 90 a2 2d f0 00 	movl   $0x0,0xf02da290
f0103917:	00 00 00 

	//LOG_STATMENT(cprintf("PAGES_PER_FILE = %d, PAGE_FILE_START_SECTOR = %d\n",PAGES_PER_FILE,PAGE_FILE_START_SECTOR););
	for (i = 1; i < PAGES_PER_FILE; i++)
f010391a:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
f0103921:	e9 20 01 00 00       	jmp    f0103a46 <initialize_disk_page_file+0x152>
	{
		initialize_frame_info(&(disk_frames_info[i]));
f0103926:	8b 0d 50 3a 25 f0    	mov    0xf0253a50,%ecx
f010392c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010392f:	89 d0                	mov    %edx,%eax
f0103931:	01 c0                	add    %eax,%eax
f0103933:	01 d0                	add    %edx,%eax
f0103935:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f010393c:	01 d8                	add    %ebx,%eax
f010393e:	01 d0                	add    %edx,%eax
f0103940:	01 c8                	add    %ecx,%eax
f0103942:	83 ec 0c             	sub    $0xc,%esp
f0103945:	50                   	push   %eax
f0103946:	e8 bf 39 00 00       	call   f010730a <initialize_frame_info>
f010394b:	83 c4 10             	add    $0x10,%esp

		//disk_frames_info[i].references = 0;
		LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[i]);
f010394e:	8b 0d 50 3a 25 f0    	mov    0xf0253a50,%ecx
f0103954:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103957:	89 d0                	mov    %edx,%eax
f0103959:	01 c0                	add    %eax,%eax
f010395b:	01 d0                	add    %edx,%eax
f010395d:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0103964:	01 d8                	add    %ebx,%eax
f0103966:	01 d0                	add    %edx,%eax
f0103968:	01 c8                	add    %ecx,%eax
f010396a:	85 c0                	test   %eax,%eax
f010396c:	75 14                	jne    f0103982 <initialize_disk_page_file+0x8e>
f010396e:	83 ec 04             	sub    $0x4,%esp
f0103971:	68 2c 1e 13 f0       	push   $0xf0131e2c
f0103976:	6a 59                	push   $0x59
f0103978:	68 0d 1e 13 f0       	push   $0xf0131e0d
f010397d:	e8 2e c8 ff ff       	call   f01001b0 <_panic>
f0103982:	8b 0d 50 3a 25 f0    	mov    0xf0253a50,%ecx
f0103988:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010398b:	89 d0                	mov    %edx,%eax
f010398d:	01 c0                	add    %eax,%eax
f010398f:	01 d0                	add    %edx,%eax
f0103991:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0103998:	01 d8                	add    %ebx,%eax
f010399a:	01 d0                	add    %edx,%eax
f010399c:	01 c8                	add    %ecx,%eax
f010399e:	8b 15 84 a2 2d f0    	mov    0xf02da284,%edx
f01039a4:	89 10                	mov    %edx,(%eax)
f01039a6:	8b 00                	mov    (%eax),%eax
f01039a8:	85 c0                	test   %eax,%eax
f01039aa:	74 27                	je     f01039d3 <initialize_disk_page_file+0xdf>
f01039ac:	8b 0d 84 a2 2d f0    	mov    0xf02da284,%ecx
f01039b2:	8b 1d 50 3a 25 f0    	mov    0xf0253a50,%ebx
f01039b8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01039bb:	89 d0                	mov    %edx,%eax
f01039bd:	01 c0                	add    %eax,%eax
f01039bf:	01 d0                	add    %edx,%eax
f01039c1:	8d 34 c5 00 00 00 00 	lea    0x0(,%eax,8),%esi
f01039c8:	01 f0                	add    %esi,%eax
f01039ca:	01 d0                	add    %edx,%eax
f01039cc:	01 d8                	add    %ebx,%eax
f01039ce:	89 41 04             	mov    %eax,0x4(%ecx)
f01039d1:	eb 21                	jmp    f01039f4 <initialize_disk_page_file+0x100>
f01039d3:	8b 0d 50 3a 25 f0    	mov    0xf0253a50,%ecx
f01039d9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01039dc:	89 d0                	mov    %edx,%eax
f01039de:	01 c0                	add    %eax,%eax
f01039e0:	01 d0                	add    %edx,%eax
f01039e2:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f01039e9:	01 d8                	add    %ebx,%eax
f01039eb:	01 d0                	add    %edx,%eax
f01039ed:	01 c8                	add    %ecx,%eax
f01039ef:	a3 88 a2 2d f0       	mov    %eax,0xf02da288
f01039f4:	8b 0d 50 3a 25 f0    	mov    0xf0253a50,%ecx
f01039fa:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01039fd:	89 d0                	mov    %edx,%eax
f01039ff:	01 c0                	add    %eax,%eax
f0103a01:	01 d0                	add    %edx,%eax
f0103a03:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0103a0a:	01 d8                	add    %ebx,%eax
f0103a0c:	01 d0                	add    %edx,%eax
f0103a0e:	01 c8                	add    %ecx,%eax
f0103a10:	a3 84 a2 2d f0       	mov    %eax,0xf02da284
f0103a15:	8b 0d 50 3a 25 f0    	mov    0xf0253a50,%ecx
f0103a1b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103a1e:	89 d0                	mov    %edx,%eax
f0103a20:	01 c0                	add    %eax,%eax
f0103a22:	01 d0                	add    %edx,%eax
f0103a24:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0103a2b:	01 d8                	add    %ebx,%eax
f0103a2d:	01 d0                	add    %edx,%eax
f0103a2f:	01 c8                	add    %ecx,%eax
f0103a31:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0103a38:	a1 90 a2 2d f0       	mov    0xf02da290,%eax
f0103a3d:	40                   	inc    %eax
f0103a3e:	a3 90 a2 2d f0       	mov    %eax,0xf02da290
{
	int i;
	LIST_INIT(&disk_free_frame_list);

	//LOG_STATMENT(cprintf("PAGES_PER_FILE = %d, PAGE_FILE_START_SECTOR = %d\n",PAGES_PER_FILE,PAGE_FILE_START_SECTOR););
	for (i = 1; i < PAGES_PER_FILE; i++)
f0103a43:	ff 45 f4             	incl   -0xc(%ebp)
f0103a46:	81 7d f4 ff 07 02 00 	cmpl   $0x207ff,-0xc(%ebp)
f0103a4d:	0f 8e d3 fe ff ff    	jle    f0103926 <initialize_disk_page_file+0x32>
		initialize_frame_info(&(disk_frames_info[i]));

		//disk_frames_info[i].references = 0;
		LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[i]);
	}
}
f0103a53:	90                   	nop
f0103a54:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0103a57:	5b                   	pop    %ebx
f0103a58:	5e                   	pop    %esi
f0103a59:	5d                   	pop    %ebp
f0103a5a:	c3                   	ret    

f0103a5b <to_disk_frame_number>:
// Initialize a Frame_Info structure.
// The result has null links and 0 references.
// Note that the corresponding physical frame is NOT initialized!
//
static inline uint32 to_disk_frame_number(struct FrameInfo *ptr_frame_info)
{
f0103a5b:	55                   	push   %ebp
f0103a5c:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - disk_frames_info;
f0103a5e:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a61:	8b 15 50 3a 25 f0    	mov    0xf0253a50,%edx
f0103a67:	29 d0                	sub    %edx,%eax
f0103a69:	c1 f8 02             	sar    $0x2,%eax
f0103a6c:	89 c2                	mov    %eax,%edx
f0103a6e:	89 d0                	mov    %edx,%eax
f0103a70:	c1 e0 03             	shl    $0x3,%eax
f0103a73:	01 d0                	add    %edx,%eax
f0103a75:	c1 e0 03             	shl    $0x3,%eax
f0103a78:	01 d0                	add    %edx,%eax
f0103a7a:	c1 e0 03             	shl    $0x3,%eax
f0103a7d:	01 d0                	add    %edx,%eax
f0103a7f:	c1 e0 03             	shl    $0x3,%eax
f0103a82:	01 d0                	add    %edx,%eax
f0103a84:	89 c1                	mov    %eax,%ecx
f0103a86:	c1 e1 0f             	shl    $0xf,%ecx
f0103a89:	01 c8                	add    %ecx,%eax
f0103a8b:	c1 e0 03             	shl    $0x3,%eax
f0103a8e:	01 d0                	add    %edx,%eax
f0103a90:	f7 d8                	neg    %eax
}
f0103a92:	5d                   	pop    %ebp
f0103a93:	c3                   	ret    

f0103a94 <allocate_disk_frame>:
// RETURNS
//   0 -- on success
//   E_NO_PAGE_FILE_SPACE -- otherwise
//
int allocate_disk_frame(uint32 *dfn)
{
f0103a94:	55                   	push   %ebp
f0103a95:	89 e5                	mov    %esp,%ebp
f0103a97:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	struct FrameInfo *ptr_frame_info = LIST_FIRST(&disk_free_frame_list);
f0103a9a:	a1 84 a2 2d f0       	mov    0xf02da284,%eax
f0103a9f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(ptr_frame_info == NULL)
f0103aa2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103aa6:	75 0a                	jne    f0103ab2 <allocate_disk_frame+0x1e>
		return E_NO_PAGE_FILE_SPACE;
f0103aa8:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f0103aad:	e9 a7 00 00 00       	jmp    f0103b59 <allocate_disk_frame+0xc5>

	LIST_REMOVE(&disk_free_frame_list, ptr_frame_info);
f0103ab2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103ab6:	75 14                	jne    f0103acc <allocate_disk_frame+0x38>
f0103ab8:	83 ec 04             	sub    $0x4,%esp
f0103abb:	68 4f 1e 13 f0       	push   $0xf0131e4f
f0103ac0:	6a 78                	push   $0x78
f0103ac2:	68 0d 1e 13 f0       	push   $0xf0131e0d
f0103ac7:	e8 e4 c6 ff ff       	call   f01001b0 <_panic>
f0103acc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103acf:	8b 00                	mov    (%eax),%eax
f0103ad1:	85 c0                	test   %eax,%eax
f0103ad3:	74 10                	je     f0103ae5 <allocate_disk_frame+0x51>
f0103ad5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103ad8:	8b 00                	mov    (%eax),%eax
f0103ada:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103add:	8b 52 04             	mov    0x4(%edx),%edx
f0103ae0:	89 50 04             	mov    %edx,0x4(%eax)
f0103ae3:	eb 0b                	jmp    f0103af0 <allocate_disk_frame+0x5c>
f0103ae5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103ae8:	8b 40 04             	mov    0x4(%eax),%eax
f0103aeb:	a3 88 a2 2d f0       	mov    %eax,0xf02da288
f0103af0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103af3:	8b 40 04             	mov    0x4(%eax),%eax
f0103af6:	85 c0                	test   %eax,%eax
f0103af8:	74 0f                	je     f0103b09 <allocate_disk_frame+0x75>
f0103afa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103afd:	8b 40 04             	mov    0x4(%eax),%eax
f0103b00:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103b03:	8b 12                	mov    (%edx),%edx
f0103b05:	89 10                	mov    %edx,(%eax)
f0103b07:	eb 0a                	jmp    f0103b13 <allocate_disk_frame+0x7f>
f0103b09:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103b0c:	8b 00                	mov    (%eax),%eax
f0103b0e:	a3 84 a2 2d f0       	mov    %eax,0xf02da284
f0103b13:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103b16:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0103b1c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103b1f:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0103b26:	a1 90 a2 2d f0       	mov    0xf02da290,%eax
f0103b2b:	48                   	dec    %eax
f0103b2c:	a3 90 a2 2d f0       	mov    %eax,0xf02da290
	initialize_frame_info(ptr_frame_info);
f0103b31:	83 ec 0c             	sub    $0xc,%esp
f0103b34:	ff 75 f4             	pushl  -0xc(%ebp)
f0103b37:	e8 ce 37 00 00       	call   f010730a <initialize_frame_info>
f0103b3c:	83 c4 10             	add    $0x10,%esp
	*dfn = to_disk_frame_number(ptr_frame_info);
f0103b3f:	83 ec 0c             	sub    $0xc,%esp
f0103b42:	ff 75 f4             	pushl  -0xc(%ebp)
f0103b45:	e8 11 ff ff ff       	call   f0103a5b <to_disk_frame_number>
f0103b4a:	83 c4 10             	add    $0x10,%esp
f0103b4d:	89 c2                	mov    %eax,%edx
f0103b4f:	8b 45 08             	mov    0x8(%ebp),%eax
f0103b52:	89 10                	mov    %edx,(%eax)
	return 0;
f0103b54:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103b59:	c9                   	leave  
f0103b5a:	c3                   	ret    

f0103b5b <free_disk_frame>:

//
// Return a frame to the disk_free_frame_list.
//
inline void free_disk_frame(uint32 dfn)
{
f0103b5b:	55                   	push   %ebp
f0103b5c:	89 e5                	mov    %esp,%ebp
f0103b5e:	56                   	push   %esi
f0103b5f:	53                   	push   %ebx
	// Fill this function in
	if(dfn == 0) return;
f0103b60:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0103b64:	0f 84 fa 00 00 00    	je     f0103c64 <free_disk_frame+0x109>
	LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[dfn]);
f0103b6a:	8b 0d 50 3a 25 f0    	mov    0xf0253a50,%ecx
f0103b70:	8b 55 08             	mov    0x8(%ebp),%edx
f0103b73:	89 d0                	mov    %edx,%eax
f0103b75:	01 c0                	add    %eax,%eax
f0103b77:	01 d0                	add    %edx,%eax
f0103b79:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0103b80:	01 d8                	add    %ebx,%eax
f0103b82:	01 d0                	add    %edx,%eax
f0103b84:	01 c8                	add    %ecx,%eax
f0103b86:	85 c0                	test   %eax,%eax
f0103b88:	75 17                	jne    f0103ba1 <free_disk_frame+0x46>
f0103b8a:	83 ec 04             	sub    $0x4,%esp
f0103b8d:	68 2c 1e 13 f0       	push   $0xf0131e2c
f0103b92:	68 85 00 00 00       	push   $0x85
f0103b97:	68 0d 1e 13 f0       	push   $0xf0131e0d
f0103b9c:	e8 0f c6 ff ff       	call   f01001b0 <_panic>
f0103ba1:	8b 0d 50 3a 25 f0    	mov    0xf0253a50,%ecx
f0103ba7:	8b 55 08             	mov    0x8(%ebp),%edx
f0103baa:	89 d0                	mov    %edx,%eax
f0103bac:	01 c0                	add    %eax,%eax
f0103bae:	01 d0                	add    %edx,%eax
f0103bb0:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0103bb7:	01 d8                	add    %ebx,%eax
f0103bb9:	01 d0                	add    %edx,%eax
f0103bbb:	01 c8                	add    %ecx,%eax
f0103bbd:	8b 15 84 a2 2d f0    	mov    0xf02da284,%edx
f0103bc3:	89 10                	mov    %edx,(%eax)
f0103bc5:	8b 00                	mov    (%eax),%eax
f0103bc7:	85 c0                	test   %eax,%eax
f0103bc9:	74 27                	je     f0103bf2 <free_disk_frame+0x97>
f0103bcb:	8b 0d 84 a2 2d f0    	mov    0xf02da284,%ecx
f0103bd1:	8b 1d 50 3a 25 f0    	mov    0xf0253a50,%ebx
f0103bd7:	8b 55 08             	mov    0x8(%ebp),%edx
f0103bda:	89 d0                	mov    %edx,%eax
f0103bdc:	01 c0                	add    %eax,%eax
f0103bde:	01 d0                	add    %edx,%eax
f0103be0:	8d 34 c5 00 00 00 00 	lea    0x0(,%eax,8),%esi
f0103be7:	01 f0                	add    %esi,%eax
f0103be9:	01 d0                	add    %edx,%eax
f0103beb:	01 d8                	add    %ebx,%eax
f0103bed:	89 41 04             	mov    %eax,0x4(%ecx)
f0103bf0:	eb 21                	jmp    f0103c13 <free_disk_frame+0xb8>
f0103bf2:	8b 0d 50 3a 25 f0    	mov    0xf0253a50,%ecx
f0103bf8:	8b 55 08             	mov    0x8(%ebp),%edx
f0103bfb:	89 d0                	mov    %edx,%eax
f0103bfd:	01 c0                	add    %eax,%eax
f0103bff:	01 d0                	add    %edx,%eax
f0103c01:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0103c08:	01 d8                	add    %ebx,%eax
f0103c0a:	01 d0                	add    %edx,%eax
f0103c0c:	01 c8                	add    %ecx,%eax
f0103c0e:	a3 88 a2 2d f0       	mov    %eax,0xf02da288
f0103c13:	8b 0d 50 3a 25 f0    	mov    0xf0253a50,%ecx
f0103c19:	8b 55 08             	mov    0x8(%ebp),%edx
f0103c1c:	89 d0                	mov    %edx,%eax
f0103c1e:	01 c0                	add    %eax,%eax
f0103c20:	01 d0                	add    %edx,%eax
f0103c22:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0103c29:	01 d8                	add    %ebx,%eax
f0103c2b:	01 d0                	add    %edx,%eax
f0103c2d:	01 c8                	add    %ecx,%eax
f0103c2f:	a3 84 a2 2d f0       	mov    %eax,0xf02da284
f0103c34:	8b 0d 50 3a 25 f0    	mov    0xf0253a50,%ecx
f0103c3a:	8b 55 08             	mov    0x8(%ebp),%edx
f0103c3d:	89 d0                	mov    %edx,%eax
f0103c3f:	01 c0                	add    %eax,%eax
f0103c41:	01 d0                	add    %edx,%eax
f0103c43:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0103c4a:	01 d8                	add    %ebx,%eax
f0103c4c:	01 d0                	add    %edx,%eax
f0103c4e:	01 c8                	add    %ecx,%eax
f0103c50:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0103c57:	a1 90 a2 2d f0       	mov    0xf02da290,%eax
f0103c5c:	40                   	inc    %eax
f0103c5d:	a3 90 a2 2d f0       	mov    %eax,0xf02da290
f0103c62:	eb 01                	jmp    f0103c65 <free_disk_frame+0x10a>
// Return a frame to the disk_free_frame_list.
//
inline void free_disk_frame(uint32 dfn)
{
	// Fill this function in
	if(dfn == 0) return;
f0103c64:	90                   	nop
	LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[dfn]);
}
f0103c65:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0103c68:	5b                   	pop    %ebx
f0103c69:	5e                   	pop    %esi
f0103c6a:	5d                   	pop    %ebp
f0103c6b:	c3                   	ret    

f0103c6c <get_disk_page_table>:

int get_disk_page_table(uint32 *ptr_disk_page_directory, const uint32 virtual_address, int create, uint32 **ptr_disk_page_table)
{
f0103c6c:	55                   	push   %ebp
f0103c6d:	89 e5                	mov    %esp,%ebp
f0103c6f:	83 ec 28             	sub    $0x28,%esp
	// Fill this function in
	uint32 disk_page_directory_entry = ptr_disk_page_directory[PDX(virtual_address)];
f0103c72:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103c75:	c1 e8 16             	shr    $0x16,%eax
f0103c78:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103c7f:	8b 45 08             	mov    0x8(%ebp),%eax
f0103c82:	01 d0                	add    %edx,%eax
f0103c84:	8b 00                	mov    (%eax),%eax
f0103c86:	89 45 f4             	mov    %eax,-0xc(%ebp)
	{
		*ptr_disk_page_table = (uint32*)kheap_virtual_address(EXTRACT_ADDRESS(disk_page_directory_entry));
	}
	else
	{
		*ptr_disk_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(disk_page_directory_entry)) ;
f0103c89:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103c8c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103c91:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0103c94:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103c97:	c1 e8 0c             	shr    $0xc,%eax
f0103c9a:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0103c9d:	a1 d0 bd 2b f0       	mov    0xf02bbdd0,%eax
f0103ca2:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0103ca5:	72 17                	jb     f0103cbe <get_disk_page_table+0x52>
f0103ca7:	ff 75 f0             	pushl  -0x10(%ebp)
f0103caa:	68 70 1e 13 f0       	push   $0xf0131e70
f0103caf:	68 92 00 00 00       	push   $0x92
f0103cb4:	68 0d 1e 13 f0       	push   $0xf0131e0d
f0103cb9:	e8 f2 c4 ff ff       	call   f01001b0 <_panic>
f0103cbe:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103cc1:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0103cc6:	89 c2                	mov    %eax,%edx
f0103cc8:	8b 45 14             	mov    0x14(%ebp),%eax
f0103ccb:	89 10                	mov    %edx,(%eax)
	}

	if (disk_page_directory_entry == 0)
f0103ccd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103cd1:	0f 85 b7 00 00 00    	jne    f0103d8e <get_disk_page_table+0x122>
	{
		//LOG_STATMENT(cprintf("get_disk_page_table: disk directory at %x",ptr_disk_page_directory));
		//LOG_STATMENT(cprintf("get_disk_page_table: page table not found "));
		if (create)
f0103cd7:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0103cdb:	0f 84 9d 00 00 00    	je     f0103d7e <get_disk_page_table+0x112>
						,PERM_PRESENT);
			}
#else
			{
				struct FrameInfo* ptr_frame_info;
				allocate_frame(&ptr_frame_info) ;
f0103ce1:	83 ec 0c             	sub    $0xc,%esp
f0103ce4:	8d 45 dc             	lea    -0x24(%ebp),%eax
f0103ce7:	50                   	push   %eax
f0103ce8:	e8 38 36 00 00       	call   f0107325 <allocate_frame>
f0103ced:	83 c4 10             	add    $0x10,%esp

				//LOG_STATMENT(cprintf("created table"));
				uint32 phys_page_table = to_physical_address(ptr_frame_info);
f0103cf0:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0103cf3:	83 ec 0c             	sub    $0xc,%esp
f0103cf6:	50                   	push   %eax
f0103cf7:	e8 1b fb ff ff       	call   f0103817 <to_physical_address>
f0103cfc:	83 c4 10             	add    $0x10,%esp
f0103cff:	89 45 e8             	mov    %eax,-0x18(%ebp)
				*ptr_disk_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(phys_page_table) ;
f0103d02:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103d05:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0103d08:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0103d0b:	c1 e8 0c             	shr    $0xc,%eax
f0103d0e:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0103d11:	a1 d0 bd 2b f0       	mov    0xf02bbdd0,%eax
f0103d16:	39 45 e0             	cmp    %eax,-0x20(%ebp)
f0103d19:	72 17                	jb     f0103d32 <get_disk_page_table+0xc6>
f0103d1b:	ff 75 e4             	pushl  -0x1c(%ebp)
f0103d1e:	68 70 1e 13 f0       	push   $0xf0131e70
f0103d23:	68 ae 00 00 00       	push   $0xae
f0103d28:	68 0d 1e 13 f0       	push   $0xf0131e0d
f0103d2d:	e8 7e c4 ff ff       	call   f01001b0 <_panic>
f0103d32:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0103d35:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0103d3a:	89 c2                	mov    %eax,%edx
f0103d3c:	8b 45 14             	mov    0x14(%ebp),%eax
f0103d3f:	89 10                	mov    %edx,(%eax)
				ptr_frame_info->references = 1;
f0103d41:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0103d44:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
				ptr_disk_page_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(phys_page_table,PERM_PRESENT);
f0103d4a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103d4d:	c1 e8 16             	shr    $0x16,%eax
f0103d50:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103d57:	8b 45 08             	mov    0x8(%ebp),%eax
f0103d5a:	01 d0                	add    %edx,%eax
f0103d5c:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0103d5f:	83 ca 01             	or     $0x1,%edx
f0103d62:	89 10                	mov    %edx,(%eax)
			}
#endif
			//initialize new page table by 0's
			memset(*ptr_disk_page_table , 0, PAGE_SIZE);
f0103d64:	8b 45 14             	mov    0x14(%ebp),%eax
f0103d67:	8b 00                	mov    (%eax),%eax
f0103d69:	83 ec 04             	sub    $0x4,%esp
f0103d6c:	68 00 10 00 00       	push   $0x1000
f0103d71:	6a 00                	push   $0x0
f0103d73:	50                   	push   %eax
f0103d74:	e8 b2 b2 02 00       	call   f012f02b <memset>
f0103d79:	83 c4 10             	add    $0x10,%esp
f0103d7c:	eb 10                	jmp    f0103d8e <get_disk_page_table+0x122>
			//virtual_address, ptr_disk_page_directory[PDX(virtual_address)]));
		}
		else
		{
			//LOG_STATMENT(cprintf("NOT creating table ..."));
			*ptr_disk_page_table = 0;
f0103d7e:	8b 45 14             	mov    0x14(%ebp),%eax
f0103d81:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			return 0;
f0103d87:	b8 00 00 00 00       	mov    $0x0,%eax
f0103d8c:	eb 05                	jmp    f0103d93 <get_disk_page_table+0x127>
		}
	}
	//LOG_STATMENT(cprintf("found table at %x", *ptr_disk_page_table));
	return 0;
f0103d8e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103d93:	c9                   	leave  
f0103d94:	c3                   	ret    

f0103d95 <pf_add_empty_env_page>:

int pf_add_empty_env_page( struct Env* ptr_env, uint32 virtual_address, uint8 initializeByZero)
{
f0103d95:	55                   	push   %ebp
f0103d96:	89 e5                	mov    %esp,%ebp
f0103d98:	83 ec 28             	sub    $0x28,%esp
f0103d9b:	8b 45 10             	mov    0x10(%ebp),%eax
f0103d9e:	88 45 e4             	mov    %al,-0x1c(%ebp)
	//2016: FIX:
	if (initializeByZero)
f0103da1:	80 7d e4 00          	cmpb   $0x0,-0x1c(%ebp)
f0103da5:	74 75                	je     f0103e1c <pf_add_empty_env_page+0x87>
	{
		//2020
		if (virtual_address > USTACKBOTTOM && virtual_address < USTACKTOP - ptr_env->initNumStackPages * PAGE_SIZE)
f0103da7:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
f0103dae:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103db1:	2d 01 e0 f9 5f       	sub    $0x5ff9e001,%eax
f0103db6:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0103db9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103dbc:	ba 00 00 00 00       	mov    $0x0,%edx
f0103dc1:	f7 75 f4             	divl   -0xc(%ebp)
f0103dc4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103dc7:	29 d0                	sub    %edx,%eax
f0103dc9:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0103dcc:	73 32                	jae    f0103e00 <pf_add_empty_env_page+0x6b>
f0103dce:	8b 45 08             	mov    0x8(%ebp),%eax
f0103dd1:	8b 90 a4 00 00 00    	mov    0xa4(%eax),%edx
f0103dd7:	b8 00 00 00 00       	mov    $0x0,%eax
f0103ddc:	29 d0                	sub    %edx,%eax
f0103dde:	c1 e0 0c             	shl    $0xc,%eax
f0103de1:	2d 00 20 40 11       	sub    $0x11402000,%eax
f0103de6:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0103de9:	76 15                	jbe    f0103e00 <pf_add_empty_env_page+0x6b>
			ptr_env->nNewPageAdded++ ;
f0103deb:	8b 45 08             	mov    0x8(%ebp),%eax
f0103dee:	8b 80 98 da 01 00    	mov    0x1da98(%eax),%eax
f0103df4:	8d 50 01             	lea    0x1(%eax),%edx
f0103df7:	8b 45 08             	mov    0x8(%ebp),%eax
f0103dfa:	89 90 98 da 01 00    	mov    %edx,0x1da98(%eax)
		//======================
		return pf_add_env_page(ptr_env, virtual_address, ptr_zero_page);
f0103e00:	a1 1c be 2b f0       	mov    0xf02bbe1c,%eax
f0103e05:	83 ec 04             	sub    $0x4,%esp
f0103e08:	50                   	push   %eax
f0103e09:	ff 75 0c             	pushl  0xc(%ebp)
f0103e0c:	ff 75 08             	pushl  0x8(%ebp)
f0103e0f:	e8 b7 00 00 00       	call   f0103ecb <pf_add_env_page>
f0103e14:	83 c4 10             	add    $0x10,%esp
f0103e17:	e9 ad 00 00 00       	jmp    f0103ec9 <pf_add_empty_env_page+0x134>
	}

	uint32 *ptr_disk_page_table;
	assert((uint32)virtual_address < KERNEL_BASE);
f0103e1c:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f0103e23:	76 19                	jbe    f0103e3e <pf_add_empty_env_page+0xa9>
f0103e25:	68 a0 1e 13 f0       	push   $0xf0131ea0
f0103e2a:	68 c6 1e 13 f0       	push   $0xf0131ec6
f0103e2f:	68 d1 00 00 00       	push   $0xd1
f0103e34:	68 0d 1e 13 f0       	push   $0xf0131e0d
f0103e39:	e8 72 c3 ff ff       	call   f01001b0 <_panic>

	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f0103e3e:	8b 45 08             	mov    0x8(%ebp),%eax
f0103e41:	05 a8 00 00 00       	add    $0xa8,%eax
f0103e46:	83 ec 08             	sub    $0x8,%esp
f0103e49:	50                   	push   %eax
f0103e4a:	ff 75 08             	pushl  0x8(%ebp)
f0103e4d:	e8 86 06 00 00       	call   f01044d8 <get_disk_page_directory>
f0103e52:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir,  virtual_address, 1, &ptr_disk_page_table) ;
f0103e55:	8b 45 08             	mov    0x8(%ebp),%eax
f0103e58:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f0103e5e:	8d 55 ec             	lea    -0x14(%ebp),%edx
f0103e61:	52                   	push   %edx
f0103e62:	6a 01                	push   $0x1
f0103e64:	ff 75 0c             	pushl  0xc(%ebp)
f0103e67:	50                   	push   %eax
f0103e68:	e8 ff fd ff ff       	call   f0103c6c <get_disk_page_table>
f0103e6d:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f0103e70:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103e73:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103e76:	c1 ea 0c             	shr    $0xc,%edx
f0103e79:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103e7f:	c1 e2 02             	shl    $0x2,%edx
f0103e82:	01 d0                	add    %edx,%eax
f0103e84:	8b 00                	mov    (%eax),%eax
f0103e86:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if( dfn == 0)
f0103e89:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103e8c:	85 c0                	test   %eax,%eax
f0103e8e:	75 34                	jne    f0103ec4 <pf_add_empty_env_page+0x12f>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f0103e90:	83 ec 0c             	sub    $0xc,%esp
f0103e93:	8d 45 e8             	lea    -0x18(%ebp),%eax
f0103e96:	50                   	push   %eax
f0103e97:	e8 f8 fb ff ff       	call   f0103a94 <allocate_disk_frame>
f0103e9c:	83 c4 10             	add    $0x10,%esp
f0103e9f:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0103ea2:	75 07                	jne    f0103eab <pf_add_empty_env_page+0x116>
f0103ea4:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f0103ea9:	eb 1e                	jmp    f0103ec9 <pf_add_empty_env_page+0x134>
		ptr_disk_page_table[PTX(virtual_address)] = dfn;
f0103eab:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103eae:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103eb1:	c1 ea 0c             	shr    $0xc,%edx
f0103eb4:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103eba:	c1 e2 02             	shl    $0x2,%edx
f0103ebd:	01 c2                	add    %eax,%edx
f0103ebf:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103ec2:	89 02                	mov    %eax,(%edx)
	}

	return 0;
f0103ec4:	b8 00 00 00 00       	mov    $0x0,%eax

}
f0103ec9:	c9                   	leave  
f0103eca:	c3                   	ret    

f0103ecb <pf_add_env_page>:

int pf_add_env_page( struct Env* ptr_env, uint32 virtual_address, void* dataSrc)
{
f0103ecb:	55                   	push   %ebp
f0103ecc:	89 e5                	mov    %esp,%ebp
f0103ece:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("========================== create_env_page");
	uint32 *ptr_disk_page_table;
	assert((uint32)virtual_address < KERNEL_BASE);
f0103ed1:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f0103ed8:	76 19                	jbe    f0103ef3 <pf_add_env_page+0x28>
f0103eda:	68 a0 1e 13 f0       	push   $0xf0131ea0
f0103edf:	68 c6 1e 13 f0       	push   $0xf0131ec6
f0103ee4:	68 e6 00 00 00       	push   $0xe6
f0103ee9:	68 0d 1e 13 f0       	push   $0xf0131e0d
f0103eee:	e8 bd c2 ff ff       	call   f01001b0 <_panic>

	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f0103ef3:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ef6:	05 a8 00 00 00       	add    $0xa8,%eax
f0103efb:	83 ec 08             	sub    $0x8,%esp
f0103efe:	50                   	push   %eax
f0103eff:	ff 75 08             	pushl  0x8(%ebp)
f0103f02:	e8 d1 05 00 00       	call   f01044d8 <get_disk_page_directory>
f0103f07:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir,  virtual_address, 1, &ptr_disk_page_table) ;
f0103f0a:	8b 45 08             	mov    0x8(%ebp),%eax
f0103f0d:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f0103f13:	8d 55 f0             	lea    -0x10(%ebp),%edx
f0103f16:	52                   	push   %edx
f0103f17:	6a 01                	push   $0x1
f0103f19:	ff 75 0c             	pushl  0xc(%ebp)
f0103f1c:	50                   	push   %eax
f0103f1d:	e8 4a fd ff ff       	call   f0103c6c <get_disk_page_table>
f0103f22:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f0103f25:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103f28:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103f2b:	c1 ea 0c             	shr    $0xc,%edx
f0103f2e:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103f34:	c1 e2 02             	shl    $0x2,%edx
f0103f37:	01 d0                	add    %edx,%eax
f0103f39:	8b 00                	mov    (%eax),%eax
f0103f3b:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if( dfn == 0)
f0103f3e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103f41:	85 c0                	test   %eax,%eax
f0103f43:	75 34                	jne    f0103f79 <pf_add_env_page+0xae>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f0103f45:	83 ec 0c             	sub    $0xc,%esp
f0103f48:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0103f4b:	50                   	push   %eax
f0103f4c:	e8 43 fb ff ff       	call   f0103a94 <allocate_disk_frame>
f0103f51:	83 c4 10             	add    $0x10,%esp
f0103f54:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0103f57:	75 07                	jne    f0103f60 <pf_add_env_page+0x95>
f0103f59:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f0103f5e:	eb 31                	jmp    f0103f91 <pf_add_env_page+0xc6>
		ptr_disk_page_table[PTX(virtual_address)] = dfn;
f0103f60:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103f63:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103f66:	c1 ea 0c             	shr    $0xc,%edx
f0103f69:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103f6f:	c1 e2 02             	shl    $0x2,%edx
f0103f72:	01 c2                	add    %eax,%edx
f0103f74:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103f77:	89 02                	mov    %eax,(%edx)
	//	uint32 oldDir = rcr3();
	//	lcr3(K_PHYSICAL_ADDRESS(ptr_env->env_pgdir));
	//	int ret = write_disk_page(dfn, (void*)dataSrc);
	//	lcr3(oldDir);

	int ret = write_disk_page(dfn, (void*)dataSrc);
f0103f79:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103f7c:	83 ec 08             	sub    $0x8,%esp
f0103f7f:	ff 75 10             	pushl  0x10(%ebp)
f0103f82:	50                   	push   %eax
f0103f83:	e8 23 f9 ff ff       	call   f01038ab <write_disk_page>
f0103f88:	83 c4 10             	add    $0x10,%esp
f0103f8b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	return ret;
f0103f8e:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0103f91:	c9                   	leave  
f0103f92:	c3                   	ret    

f0103f93 <pf_update_env_page>:

int pf_update_env_page(struct Env* ptr_env, uint32 virtual_address, struct FrameInfo* modified_page_frame_info)
{
f0103f93:	55                   	push   %ebp
f0103f94:	89 e5                	mov    %esp,%ebp
f0103f96:	83 ec 38             	sub    $0x38,%esp
	int ret;
	uint32 *ptr_disk_page_table;
	//ROUND DOWN it on 4 KB boundary in order to update the entire page starting from its first address.
	//virtual_address = ROUNDDOWN(virtual_address, PAGE_SIZE);

	assert((uint32)virtual_address < KERNEL_BASE);
f0103f99:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f0103fa0:	76 19                	jbe    f0103fbb <pf_update_env_page+0x28>
f0103fa2:	68 a0 1e 13 f0       	push   $0xf0131ea0
f0103fa7:	68 c6 1e 13 f0       	push   $0xf0131ec6
f0103fac:	68 08 01 00 00       	push   $0x108
f0103fb1:	68 0d 1e 13 f0       	push   $0xf0131e0d
f0103fb6:	e8 f5 c1 ff ff       	call   f01001b0 <_panic>
	//char c = *((char*)virtual_address);
	//Get/Create the directory table
	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f0103fbb:	8b 45 08             	mov    0x8(%ebp),%eax
f0103fbe:	05 a8 00 00 00       	add    $0xa8,%eax
f0103fc3:	83 ec 08             	sub    $0x8,%esp
f0103fc6:	50                   	push   %eax
f0103fc7:	ff 75 08             	pushl  0x8(%ebp)
f0103fca:	e8 09 05 00 00       	call   f01044d8 <get_disk_page_directory>
f0103fcf:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f0103fd2:	8b 45 08             	mov    0x8(%ebp),%eax
f0103fd5:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f0103fdb:	8d 55 d4             	lea    -0x2c(%ebp),%edx
f0103fde:	52                   	push   %edx
f0103fdf:	6a 00                	push   $0x0
f0103fe1:	ff 75 0c             	pushl  0xc(%ebp)
f0103fe4:	50                   	push   %eax
f0103fe5:	e8 82 fc ff ff       	call   f0103c6c <get_disk_page_table>
f0103fea:	83 c4 10             	add    $0x10,%esp

	//2022
	if(ptr_disk_page_table == NULL || (ptr_disk_page_table != NULL && ptr_disk_page_table[PTX(virtual_address)]== 0))
f0103fed:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0103ff0:	85 c0                	test   %eax,%eax
f0103ff2:	74 29                	je     f010401d <pf_update_env_page+0x8a>
f0103ff4:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0103ff7:	85 c0                	test   %eax,%eax
f0103ff9:	0f 84 46 01 00 00    	je     f0104145 <pf_update_env_page+0x1b2>
f0103fff:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0104002:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104005:	c1 ea 0c             	shr    $0xc,%edx
f0104008:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010400e:	c1 e2 02             	shl    $0x2,%edx
f0104011:	01 d0                	add    %edx,%eax
f0104013:	8b 00                	mov    (%eax),%eax
f0104015:	85 c0                	test   %eax,%eax
f0104017:	0f 85 28 01 00 00    	jne    f0104145 <pf_update_env_page+0x1b2>
	{
		uint32 VA = (uint32)virtual_address ;
f010401d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104020:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if ((VA >= USER_HEAP_START && VA < USER_HEAP_MAX) || (VA >= USTACKBOTTOM && VA < USTACKTOP))
f0104023:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104026:	85 c0                	test   %eax,%eax
f0104028:	79 09                	jns    f0104033 <pf_update_env_page+0xa0>
f010402a:	81 7d f4 ff ff ff 9f 	cmpl   $0x9fffffff,-0xc(%ebp)
f0104031:	76 38                	jbe    f010406b <pf_update_env_page+0xd8>
f0104033:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
f010403a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010403d:	2d 01 e0 f9 5f       	sub    $0x5ff9e001,%eax
f0104042:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0104045:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104048:	ba 00 00 00 00       	mov    $0x0,%edx
f010404d:	f7 75 f0             	divl   -0x10(%ebp)
f0104050:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104053:	29 d0                	sub    %edx,%eax
f0104055:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0104058:	0f 87 d0 00 00 00    	ja     f010412e <pf_update_env_page+0x19b>
f010405e:	81 7d f4 ff df bf ee 	cmpl   $0xeebfdfff,-0xc(%ebp)
f0104065:	0f 87 c3 00 00 00    	ja     f010412e <pf_update_env_page+0x19b>
		{
			uint32 *ptr_table ;
			struct FrameInfo* ptr_fi = get_frame_info(ptr_env->env_page_directory, virtual_address, &ptr_table);
f010406b:	8b 45 08             	mov    0x8(%ebp),%eax
f010406e:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0104074:	83 ec 04             	sub    $0x4,%esp
f0104077:	8d 55 d0             	lea    -0x30(%ebp),%edx
f010407a:	52                   	push   %edx
f010407b:	ff 75 0c             	pushl  0xc(%ebp)
f010407e:	50                   	push   %eax
f010407f:	e8 fb 36 00 00       	call   f010777f <get_frame_info>
f0104084:	83 c4 10             	add    $0x10,%esp
f0104087:	89 45 e8             	mov    %eax,-0x18(%ebp)
			//if VA already mapped on the same modified_page_frame_info, then write it directly from the VA
			if (ptr_fi == modified_page_frame_info)
f010408a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010408d:	3b 45 10             	cmp    0x10(%ebp),%eax
f0104090:	75 52                	jne    f01040e4 <pf_update_env_page+0x151>
			{
				ret = pf_add_env_page(ptr_env, VA, (void*)virtual_address) ;
f0104092:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104095:	83 ec 04             	sub    $0x4,%esp
f0104098:	50                   	push   %eax
f0104099:	ff 75 f4             	pushl  -0xc(%ebp)
f010409c:	ff 75 08             	pushl  0x8(%ebp)
f010409f:	e8 27 fe ff ff       	call   f0103ecb <pf_add_env_page>
f01040a4:	83 c4 10             	add    $0x10,%esp
f01040a7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				if (ret == E_NO_PAGE_FILE_SPACE)
f01040aa:	83 7d e4 f8          	cmpl   $0xfffffff8,-0x1c(%ebp)
f01040ae:	75 17                	jne    f01040c7 <pf_update_env_page+0x134>
				{
					panic("pf_update_env_page: page file out of space!") ;
f01040b0:	83 ec 04             	sub    $0x4,%esp
f01040b3:	68 dc 1e 13 f0       	push   $0xf0131edc
f01040b8:	68 1d 01 00 00       	push   $0x11d
f01040bd:	68 0d 1e 13 f0       	push   $0xf0131e0d
f01040c2:	e8 e9 c0 ff ff       	call   f01001b0 <_panic>
				}
				ptr_env->nNewPageAdded++ ;
f01040c7:	8b 45 08             	mov    0x8(%ebp),%eax
f01040ca:	8b 80 98 da 01 00    	mov    0x1da98(%eax),%eax
f01040d0:	8d 50 01             	lea    0x1(%eax),%edx
f01040d3:	8b 45 08             	mov    0x8(%ebp),%eax
f01040d6:	89 90 98 da 01 00    	mov    %edx,0x1da98(%eax)
				return ret ;
f01040dc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01040df:	e9 02 01 00 00       	jmp    f01041e6 <pf_update_env_page+0x253>
			}
			//Else, just add a new empty page to the page file, then update it with the given modified_page_frame_info in the below code
			else
			{
				ret = pf_add_empty_env_page(ptr_env, VA, 0);
f01040e4:	83 ec 04             	sub    $0x4,%esp
f01040e7:	6a 00                	push   $0x0
f01040e9:	ff 75 f4             	pushl  -0xc(%ebp)
f01040ec:	ff 75 08             	pushl  0x8(%ebp)
f01040ef:	e8 a1 fc ff ff       	call   f0103d95 <pf_add_empty_env_page>
f01040f4:	83 c4 10             	add    $0x10,%esp
f01040f7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				if (ret == E_NO_PAGE_FILE_SPACE)
f01040fa:	83 7d e4 f8          	cmpl   $0xfffffff8,-0x1c(%ebp)
f01040fe:	75 17                	jne    f0104117 <pf_update_env_page+0x184>
				{
					panic("pf_update_env_page: attempt to add a new page, but page file out of space!") ;
f0104100:	83 ec 04             	sub    $0x4,%esp
f0104103:	68 08 1f 13 f0       	push   $0xf0131f08
f0104108:	68 28 01 00 00       	push   $0x128
f010410d:	68 0d 1e 13 f0       	push   $0xf0131e0d
f0104112:	e8 99 c0 ff ff       	call   f01001b0 <_panic>
				}
				ptr_env->nNewPageAdded++ ;
f0104117:	8b 45 08             	mov    0x8(%ebp),%eax
f010411a:	8b 80 98 da 01 00    	mov    0x1da98(%eax),%eax
f0104120:	8d 50 01             	lea    0x1(%eax),%edx
f0104123:	8b 45 08             	mov    0x8(%ebp),%eax
f0104126:	89 90 98 da 01 00    	mov    %edx,0x1da98(%eax)
	//2022
	if(ptr_disk_page_table == NULL || (ptr_disk_page_table != NULL && ptr_disk_page_table[PTX(virtual_address)]== 0))
	{
		uint32 VA = (uint32)virtual_address ;
		if ((VA >= USER_HEAP_START && VA < USER_HEAP_MAX) || (VA >= USTACKBOTTOM && VA < USTACKTOP))
		{
f010412c:	eb 17                	jmp    f0104145 <pf_update_env_page+0x1b2>
				ptr_env->nNewPageAdded++ ;
			}
		}
		else
		{
			panic("pf_update_env_page: Invalid Access - Attempt to add a new page to page file that's outside the USER HEAP and USER STACK!");
f010412e:	83 ec 04             	sub    $0x4,%esp
f0104131:	68 54 1f 13 f0       	push   $0xf0131f54
f0104136:	68 2f 01 00 00       	push   $0x12f
f010413b:	68 0d 1e 13 f0       	push   $0xf0131e0d
f0104140:	e8 6b c0 ff ff       	call   f01001b0 <_panic>
		}
	}
	//2022 END========================================

	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f0104145:	8b 45 08             	mov    0x8(%ebp),%eax
f0104148:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f010414e:	8d 55 d4             	lea    -0x2c(%ebp),%edx
f0104151:	52                   	push   %edx
f0104152:	6a 00                	push   $0x0
f0104154:	ff 75 0c             	pushl  0xc(%ebp)
f0104157:	50                   	push   %eax
f0104158:	e8 0f fb ff ff       	call   f0103c6c <get_disk_page_table>
f010415d:	83 c4 10             	add    $0x10,%esp
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f0104160:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0104163:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104166:	c1 ea 0c             	shr    $0xc,%edx
f0104169:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010416f:	c1 e2 02             	shl    $0x2,%edx
f0104172:	01 d0                	add    %edx,%eax
f0104174:	8b 00                	mov    (%eax),%eax
f0104176:	89 45 e0             	mov    %eax,-0x20(%ebp)

		//cprintf("[%s] updating page\n",ptr_env->prog_name);
	}
#else
	{
		ret = write_disk_page(dfn, STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(modified_page_frame_info)));
f0104179:	83 ec 0c             	sub    $0xc,%esp
f010417c:	ff 75 10             	pushl  0x10(%ebp)
f010417f:	e8 93 f6 ff ff       	call   f0103817 <to_physical_address>
f0104184:	83 c4 10             	add    $0x10,%esp
f0104187:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010418a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010418d:	c1 e8 0c             	shr    $0xc,%eax
f0104190:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0104193:	a1 d0 bd 2b f0       	mov    0xf02bbdd0,%eax
f0104198:	39 45 d8             	cmp    %eax,-0x28(%ebp)
f010419b:	72 17                	jb     f01041b4 <pf_update_env_page+0x221>
f010419d:	ff 75 dc             	pushl  -0x24(%ebp)
f01041a0:	68 70 1e 13 f0       	push   $0xf0131e70
f01041a5:	68 47 01 00 00       	push   $0x147
f01041aa:	68 0d 1e 13 f0       	push   $0xf0131e0d
f01041af:	e8 fc bf ff ff       	call   f01001b0 <_panic>
f01041b4:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01041b7:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01041bc:	83 ec 08             	sub    $0x8,%esp
f01041bf:	50                   	push   %eax
f01041c0:	ff 75 e0             	pushl  -0x20(%ebp)
f01041c3:	e8 e3 f6 ff ff       	call   f01038ab <write_disk_page>
f01041c8:	83 c4 10             	add    $0x10,%esp
f01041cb:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		//cprintf("[%s] finished updating page\n",ptr_env->prog_name);
	}
#endif
	//2020
	ptr_env->nPageOut++ ;
f01041ce:	8b 45 08             	mov    0x8(%ebp),%eax
f01041d1:	8b 80 94 da 01 00    	mov    0x1da94(%eax),%eax
f01041d7:	8d 50 01             	lea    0x1(%eax),%edx
f01041da:	8b 45 08             	mov    0x8(%ebp),%eax
f01041dd:	89 90 94 da 01 00    	mov    %edx,0x1da94(%eax)
	//======================

	return ret;
f01041e3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
}
f01041e6:	c9                   	leave  
f01041e7:	c3                   	ret    

f01041e8 <pf_read_env_page>:

	return write_disk_page(dfn, STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(page_modified_frame_info)));
}
 */
int pf_read_env_page(struct Env* ptr_env, void* virtual_address)
{
f01041e8:	55                   	push   %ebp
f01041e9:	89 e5                	mov    %esp,%ebp
f01041eb:	83 ec 18             	sub    $0x18,%esp
	uint32 *ptr_disk_page_table;

	//ROUND DOWN it on 4 KB boundary in order to read the entire page starting from its first address.
	virtual_address = ROUNDDOWN(virtual_address, PAGE_SIZE);
f01041ee:	8b 45 0c             	mov    0xc(%ebp),%eax
f01041f1:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01041f4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01041f7:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01041fc:	89 45 0c             	mov    %eax,0xc(%ebp)

	if( ptr_env->disk_env_pgdir == 0) return E_PAGE_NOT_EXIST_IN_PF;
f01041ff:	8b 45 08             	mov    0x8(%ebp),%eax
f0104202:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f0104208:	85 c0                	test   %eax,%eax
f010420a:	75 0a                	jne    f0104216 <pf_read_env_page+0x2e>
f010420c:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f0104211:	e9 96 00 00 00       	jmp    f01042ac <pf_read_env_page+0xc4>

	get_disk_page_table(ptr_env->disk_env_pgdir, (uint32) virtual_address, 0, &ptr_disk_page_table);
f0104216:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104219:	8b 45 08             	mov    0x8(%ebp),%eax
f010421c:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f0104222:	8d 4d e8             	lea    -0x18(%ebp),%ecx
f0104225:	51                   	push   %ecx
f0104226:	6a 00                	push   $0x0
f0104228:	52                   	push   %edx
f0104229:	50                   	push   %eax
f010422a:	e8 3d fa ff ff       	call   f0103c6c <get_disk_page_table>
f010422f:	83 c4 10             	add    $0x10,%esp
	if(ptr_disk_page_table == 0) return E_PAGE_NOT_EXIST_IN_PF;
f0104232:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0104235:	85 c0                	test   %eax,%eax
f0104237:	75 07                	jne    f0104240 <pf_read_env_page+0x58>
f0104239:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f010423e:	eb 6c                	jmp    f01042ac <pf_read_env_page+0xc4>

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f0104240:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0104243:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104246:	c1 ea 0c             	shr    $0xc,%edx
f0104249:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010424f:	c1 e2 02             	shl    $0x2,%edx
f0104252:	01 d0                	add    %edx,%eax
f0104254:	8b 00                	mov    (%eax),%eax
f0104256:	89 45 f0             	mov    %eax,-0x10(%ebp)

	if( dfn == 0) return E_PAGE_NOT_EXIST_IN_PF;
f0104259:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010425d:	75 07                	jne    f0104266 <pf_read_env_page+0x7e>
f010425f:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f0104264:	eb 46                	jmp    f01042ac <pf_read_env_page+0xc4>

	int disk_read_error = read_disk_page(dfn, virtual_address);
f0104266:	83 ec 08             	sub    $0x8,%esp
f0104269:	ff 75 0c             	pushl  0xc(%ebp)
f010426c:	ff 75 f0             	pushl  -0x10(%ebp)
f010426f:	e8 08 f6 ff ff       	call   f010387c <read_disk_page>
f0104274:	83 c4 10             	add    $0x10,%esp
f0104277:	89 45 ec             	mov    %eax,-0x14(%ebp)

	//reset modified bit to 0: because FOS copies the placed or replaced page from
	//HD to memory, the page modified bit is set to 1, but we want the modified bit to be
	// affected only by "user code" modifications, not our (FOS kernel) modifications
	pt_set_page_permissions(ptr_env->env_page_directory, (uint32)virtual_address, 0, PERM_MODIFIED);
f010427a:	8b 55 0c             	mov    0xc(%ebp),%edx
f010427d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104280:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0104286:	6a 40                	push   $0x40
f0104288:	6a 00                	push   $0x0
f010428a:	52                   	push   %edx
f010428b:	50                   	push   %eax
f010428c:	e8 8e 3d 00 00       	call   f010801f <pt_set_page_permissions>
f0104291:	83 c4 10             	add    $0x10,%esp

	//2020
	ptr_env->nPageIn++ ;
f0104294:	8b 45 08             	mov    0x8(%ebp),%eax
f0104297:	8b 80 90 da 01 00    	mov    0x1da90(%eax),%eax
f010429d:	8d 50 01             	lea    0x1(%eax),%edx
f01042a0:	8b 45 08             	mov    0x8(%ebp),%eax
f01042a3:	89 90 90 da 01 00    	mov    %edx,0x1da90(%eax)
	//======================

	return disk_read_error;
f01042a9:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
f01042ac:	c9                   	leave  
f01042ad:	c3                   	ret    

f01042ae <pf_remove_env_page>:

void pf_remove_env_page(struct Env* ptr_env, uint32 virtual_address)
{
f01042ae:	55                   	push   %ebp
f01042af:	89 e5                	mov    %esp,%ebp
f01042b1:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("pf_remove_env_page: 0");
	uint32 *ptr_disk_page_table;

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_pgdir == 0) return;
f01042b4:	8b 45 08             	mov    0x8(%ebp),%eax
f01042b7:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f01042bd:	85 c0                	test   %eax,%eax
f01042bf:	74 65                	je     f0104326 <pf_remove_env_page+0x78>

	//LOG_STRING("pf_remove_env_page: 1");
	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f01042c1:	8b 45 08             	mov    0x8(%ebp),%eax
f01042c4:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f01042ca:	8d 55 f0             	lea    -0x10(%ebp),%edx
f01042cd:	52                   	push   %edx
f01042ce:	6a 00                	push   $0x0
f01042d0:	ff 75 0c             	pushl  0xc(%ebp)
f01042d3:	50                   	push   %eax
f01042d4:	e8 93 f9 ff ff       	call   f0103c6c <get_disk_page_table>
f01042d9:	83 c4 10             	add    $0x10,%esp
	if(ptr_disk_page_table == 0) return;
f01042dc:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01042df:	85 c0                	test   %eax,%eax
f01042e1:	74 46                	je     f0104329 <pf_remove_env_page+0x7b>

	//LOG_STRING("pf_remove_env_page: 2");
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f01042e3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01042e6:	8b 55 0c             	mov    0xc(%ebp),%edx
f01042e9:	c1 ea 0c             	shr    $0xc,%edx
f01042ec:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01042f2:	c1 e2 02             	shl    $0x2,%edx
f01042f5:	01 d0                	add    %edx,%eax
f01042f7:	8b 00                	mov    (%eax),%eax
f01042f9:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_disk_page_table[PTX(virtual_address)] = 0;
f01042fc:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01042ff:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104302:	c1 ea 0c             	shr    $0xc,%edx
f0104305:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010430b:	c1 e2 02             	shl    $0x2,%edx
f010430e:	01 d0                	add    %edx,%eax
f0104310:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	free_disk_frame(dfn);
f0104316:	83 ec 0c             	sub    $0xc,%esp
f0104319:	ff 75 f4             	pushl  -0xc(%ebp)
f010431c:	e8 3a f8 ff ff       	call   f0103b5b <free_disk_frame>
f0104321:	83 c4 10             	add    $0x10,%esp
f0104324:	eb 04                	jmp    f010432a <pf_remove_env_page+0x7c>
{
	//LOG_STRING("pf_remove_env_page: 0");
	uint32 *ptr_disk_page_table;

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_pgdir == 0) return;
f0104326:	90                   	nop
f0104327:	eb 01                	jmp    f010432a <pf_remove_env_page+0x7c>

	//LOG_STRING("pf_remove_env_page: 1");
	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
	if(ptr_disk_page_table == 0) return;
f0104329:	90                   	nop
	//LOG_STRING("pf_remove_env_page: 2");
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
	ptr_disk_page_table[PTX(virtual_address)] = 0;
	free_disk_frame(dfn);
	//LOG_STRING("pf_remove_env_page: 3");
}
f010432a:	c9                   	leave  
f010432b:	c3                   	ret    

f010432c <pf_free_env>:

void pf_free_env(struct Env* ptr_env)
{
f010432c:	55                   	push   %ebp
f010432d:	89 e5                	mov    %esp,%ebp
f010432f:	83 ec 28             	sub    $0x28,%esp
	uint32 pdeno;

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0104332:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0104339:	e9 f7 00 00 00       	jmp    f0104435 <pf_free_env+0x109>
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdeno] & PERM_PRESENT))
f010433e:	8b 45 08             	mov    0x8(%ebp),%eax
f0104341:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f0104347:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010434a:	c1 e2 02             	shl    $0x2,%edx
f010434d:	01 d0                	add    %edx,%eax
f010434f:	8b 00                	mov    (%eax),%eax
f0104351:	83 e0 01             	and    $0x1,%eax
f0104354:	85 c0                	test   %eax,%eax
f0104356:	0f 84 d5 00 00 00    	je     f0104431 <pf_free_env+0x105>
			continue;

		// find the pa and va of the page table
		uint32 pa = EXTRACT_ADDRESS(ptr_env->disk_env_pgdir[pdeno]);
f010435c:	8b 45 08             	mov    0x8(%ebp),%eax
f010435f:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f0104365:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104368:	c1 e2 02             	shl    $0x2,%edx
f010436b:	01 d0                	add    %edx,%eax
f010436d:	8b 00                	mov    (%eax),%eax
f010436f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0104374:	89 45 ec             	mov    %eax,-0x14(%ebp)
		{
			pt = (uint32*) kheap_virtual_address(pa);
		}
#else
		{
			pt = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(pa);
f0104377:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010437a:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010437d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0104380:	c1 e8 0c             	shr    $0xc,%eax
f0104383:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0104386:	a1 d0 bd 2b f0       	mov    0xf02bbdd0,%eax
f010438b:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f010438e:	72 17                	jb     f01043a7 <pf_free_env+0x7b>
f0104390:	ff 75 e8             	pushl  -0x18(%ebp)
f0104393:	68 70 1e 13 f0       	push   $0xf0131e70
f0104398:	68 a7 01 00 00       	push   $0x1a7
f010439d:	68 0d 1e 13 f0       	push   $0xf0131e0d
f01043a2:	e8 09 be ff ff       	call   f01001b0 <_panic>
f01043a7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01043aa:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01043af:	89 45 e0             	mov    %eax,-0x20(%ebp)
		}
#endif
		// unmap all PTEs in this page table
		uint32 pteno;
		for (pteno = 0; pteno < 1024; pteno++)
f01043b2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01043b9:	eb 3a                	jmp    f01043f5 <pf_free_env+0xc9>
		{
			// remove the disk page from disk page table
			uint32 dfn=pt[pteno];
f01043bb:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01043be:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01043c5:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01043c8:	01 d0                	add    %edx,%eax
f01043ca:	8b 00                	mov    (%eax),%eax
f01043cc:	89 45 dc             	mov    %eax,-0x24(%ebp)
			pt[pteno] = 0;
f01043cf:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01043d2:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01043d9:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01043dc:	01 d0                	add    %edx,%eax
f01043de:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			// and declare it free
			free_disk_frame(dfn);
f01043e4:	83 ec 0c             	sub    $0xc,%esp
f01043e7:	ff 75 dc             	pushl  -0x24(%ebp)
f01043ea:	e8 6c f7 ff ff       	call   f0103b5b <free_disk_frame>
f01043ef:	83 c4 10             	add    $0x10,%esp
			pt = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(pa);
		}
#endif
		// unmap all PTEs in this page table
		uint32 pteno;
		for (pteno = 0; pteno < 1024; pteno++)
f01043f2:	ff 45 f0             	incl   -0x10(%ebp)
f01043f5:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
f01043fc:	76 bd                	jbe    f01043bb <pf_free_env+0x8f>
			// and declare it free
			free_disk_frame(dfn);
		}

		// free the disk page table itself
		ptr_env->disk_env_pgdir[pdeno] = 0;
f01043fe:	8b 45 08             	mov    0x8(%ebp),%eax
f0104401:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f0104407:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010440a:	c1 e2 02             	shl    $0x2,%edx
f010440d:	01 d0                	add    %edx,%eax
f010440f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		{
			kfree(pt);
		}
#else
		{
			decrement_references(to_frame_info(pa));
f0104415:	83 ec 0c             	sub    $0xc,%esp
f0104418:	ff 75 ec             	pushl  -0x14(%ebp)
f010441b:	e8 0a f4 ff ff       	call   f010382a <to_frame_info>
f0104420:	83 c4 10             	add    $0x10,%esp
f0104423:	83 ec 0c             	sub    $0xc,%esp
f0104426:	50                   	push   %eax
f0104427:	e8 8b 30 00 00       	call   f01074b7 <decrement_references>
f010442c:	83 c4 10             	add    $0x10,%esp
f010442f:	eb 01                	jmp    f0104432 <pf_free_env+0x106>

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdeno] & PERM_PRESENT))
			continue;
f0104431:	90                   	nop

void pf_free_env(struct Env* ptr_env)
{
	uint32 pdeno;

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0104432:	ff 45 f4             	incl   -0xc(%ebp)
f0104435:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f010443c:	0f 86 fc fe ff ff    	jbe    f010433e <pf_free_env+0x12>
	{
		kfree(ptr_env->disk_env_pgdir);
	}
#else
	{
		decrement_references(to_frame_info(ptr_env->disk_env_pgdir_PA));
f0104442:	8b 45 08             	mov    0x8(%ebp),%eax
f0104445:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
f010444b:	83 ec 0c             	sub    $0xc,%esp
f010444e:	50                   	push   %eax
f010444f:	e8 d6 f3 ff ff       	call   f010382a <to_frame_info>
f0104454:	83 c4 10             	add    $0x10,%esp
f0104457:	83 ec 0c             	sub    $0xc,%esp
f010445a:	50                   	push   %eax
f010445b:	e8 57 30 00 00       	call   f01074b7 <decrement_references>
f0104460:	83 c4 10             	add    $0x10,%esp
	}
#endif
	ptr_env->disk_env_pgdir = 0;
f0104463:	8b 45 08             	mov    0x8(%ebp),%eax
f0104466:	c7 80 a8 00 00 00 00 	movl   $0x0,0xa8(%eax)
f010446d:	00 00 00 
	ptr_env->disk_env_pgdir_PA = 0;
f0104470:	8b 45 08             	mov    0x8(%ebp),%eax
f0104473:	c7 80 ac 00 00 00 00 	movl   $0x0,0xac(%eax)
f010447a:	00 00 00 


	// remove all tables and the disk table
	if (ptr_env->disk_env_tabledir == 0)
f010447d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104480:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f0104486:	85 c0                	test   %eax,%eax
f0104488:	74 4b                	je     f01044d5 <pf_free_env+0x1a9>
		return;
	__pf_remove_env_all_tables(ptr_env);
f010448a:	83 ec 0c             	sub    $0xc,%esp
f010448d:	ff 75 08             	pushl  0x8(%ebp)
f0104490:	e8 17 04 00 00       	call   f01048ac <__pf_remove_env_all_tables>
f0104495:	83 c4 10             	add    $0x10,%esp
	{
		kfree(ptr_env->disk_env_tabledir);
	}
#else
	{
		decrement_references(to_frame_info(ptr_env->disk_env_tabledir_PA));
f0104498:	8b 45 08             	mov    0x8(%ebp),%eax
f010449b:	8b 80 b4 00 00 00    	mov    0xb4(%eax),%eax
f01044a1:	83 ec 0c             	sub    $0xc,%esp
f01044a4:	50                   	push   %eax
f01044a5:	e8 80 f3 ff ff       	call   f010382a <to_frame_info>
f01044aa:	83 c4 10             	add    $0x10,%esp
f01044ad:	83 ec 0c             	sub    $0xc,%esp
f01044b0:	50                   	push   %eax
f01044b1:	e8 01 30 00 00       	call   f01074b7 <decrement_references>
f01044b6:	83 c4 10             	add    $0x10,%esp
	}
#endif
	ptr_env->disk_env_tabledir = 0;
f01044b9:	8b 45 08             	mov    0x8(%ebp),%eax
f01044bc:	c7 80 b0 00 00 00 00 	movl   $0x0,0xb0(%eax)
f01044c3:	00 00 00 
	ptr_env->disk_env_tabledir_PA = 0;
f01044c6:	8b 45 08             	mov    0x8(%ebp),%eax
f01044c9:	c7 80 b4 00 00 00 00 	movl   $0x0,0xb4(%eax)
f01044d0:	00 00 00 
f01044d3:	eb 01                	jmp    f01044d6 <pf_free_env+0x1aa>
	ptr_env->disk_env_pgdir_PA = 0;


	// remove all tables and the disk table
	if (ptr_env->disk_env_tabledir == 0)
		return;
f01044d5:	90                   	nop
	}
#endif
	ptr_env->disk_env_tabledir = 0;
	ptr_env->disk_env_tabledir_PA = 0;

}
f01044d6:	c9                   	leave  
f01044d7:	c3                   	ret    

f01044d8 <get_disk_page_directory>:


int get_disk_page_directory(struct Env* ptr_env, uint32** ptr_disk_page_directory)
{
f01044d8:	55                   	push   %ebp
f01044d9:	89 e5                	mov    %esp,%ebp
f01044db:	83 ec 18             	sub    $0x18,%esp
	*ptr_disk_page_directory = ptr_env->disk_env_pgdir;
f01044de:	8b 45 08             	mov    0x8(%ebp),%eax
f01044e1:	8b 90 a8 00 00 00    	mov    0xa8(%eax),%edx
f01044e7:	8b 45 0c             	mov    0xc(%ebp),%eax
f01044ea:	89 10                	mov    %edx,(%eax)
	if(*ptr_disk_page_directory == 0)
f01044ec:	8b 45 0c             	mov    0xc(%ebp),%eax
f01044ef:	8b 00                	mov    (%eax),%eax
f01044f1:	85 c0                	test   %eax,%eax
f01044f3:	0f 85 ad 00 00 00    	jne    f01045a6 <get_disk_page_directory+0xce>
			ptr_env->disk_env_pgdir_PA = kheap_physical_address((unsigned int)*ptr_disk_page_directory);
		}
#else
		{
			int r;
			struct FrameInfo *p = NULL;
f01044f9:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)

			if ((r = allocate_frame(&p)) < 0)
f0104500:	83 ec 0c             	sub    $0xc,%esp
f0104503:	8d 45 e8             	lea    -0x18(%ebp),%eax
f0104506:	50                   	push   %eax
f0104507:	e8 19 2e 00 00       	call   f0107325 <allocate_frame>
f010450c:	83 c4 10             	add    $0x10,%esp
f010450f:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104512:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104516:	79 08                	jns    f0104520 <get_disk_page_directory+0x48>
				return r;
f0104518:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010451b:	e9 8b 00 00 00       	jmp    f01045ab <get_disk_page_directory+0xd3>
			p->references = 1;
f0104520:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0104523:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)

			//[4] initialize the new environment by the virtual address of the page directory
			// Hint: use "initialize_environment" function
			*ptr_disk_page_directory = STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(p));
f0104529:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010452c:	83 ec 0c             	sub    $0xc,%esp
f010452f:	50                   	push   %eax
f0104530:	e8 e2 f2 ff ff       	call   f0103817 <to_physical_address>
f0104535:	83 c4 10             	add    $0x10,%esp
f0104538:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010453b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010453e:	c1 e8 0c             	shr    $0xc,%eax
f0104541:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0104544:	a1 d0 bd 2b f0       	mov    0xf02bbdd0,%eax
f0104549:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f010454c:	72 17                	jb     f0104565 <get_disk_page_directory+0x8d>
f010454e:	ff 75 f0             	pushl  -0x10(%ebp)
f0104551:	68 70 1e 13 f0       	push   $0xf0131e70
f0104556:	68 ff 01 00 00       	push   $0x1ff
f010455b:	68 0d 1e 13 f0       	push   $0xf0131e0d
f0104560:	e8 4b bc ff ff       	call   f01001b0 <_panic>
f0104565:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104568:	2d 00 00 00 10       	sub    $0x10000000,%eax
f010456d:	89 c2                	mov    %eax,%edx
f010456f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104572:	89 10                	mov    %edx,(%eax)
			ptr_env->disk_env_pgdir_PA = to_physical_address(p);
f0104574:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0104577:	83 ec 0c             	sub    $0xc,%esp
f010457a:	50                   	push   %eax
f010457b:	e8 97 f2 ff ff       	call   f0103817 <to_physical_address>
f0104580:	83 c4 10             	add    $0x10,%esp
f0104583:	89 c2                	mov    %eax,%edx
f0104585:	8b 45 08             	mov    0x8(%ebp),%eax
f0104588:	89 90 ac 00 00 00    	mov    %edx,0xac(%eax)
		}
#endif
		memset(*ptr_disk_page_directory , 0, PAGE_SIZE);
f010458e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104591:	8b 00                	mov    (%eax),%eax
f0104593:	83 ec 04             	sub    $0x4,%esp
f0104596:	68 00 10 00 00       	push   $0x1000
f010459b:	6a 00                	push   $0x0
f010459d:	50                   	push   %eax
f010459e:	e8 88 aa 02 00       	call   f012f02b <memset>
f01045a3:	83 c4 10             	add    $0x10,%esp

		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> Disk directory created at %x", *ptr_disk_page_directory));
	}
	return 0;
f01045a6:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01045ab:	c9                   	leave  
f01045ac:	c3                   	ret    

f01045ad <pf_calculate_allocated_pages>:

int pf_calculate_allocated_pages(struct Env* ptr_env)
{
f01045ad:	55                   	push   %ebp
f01045ae:	89 e5                	mov    %esp,%ebp
f01045b0:	83 ec 28             	sub    $0x28,%esp
	uint32 *pt;
	uint32 pdIndex;
	uint32 pa;
	uint32 counter=0;
f01045b3:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
f01045ba:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01045c1:	e9 ac 00 00 00       	jmp    f0104672 <pf_calculate_allocated_pages+0xc5>
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdIndex] & PERM_PRESENT))
f01045c6:	8b 45 08             	mov    0x8(%ebp),%eax
f01045c9:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f01045cf:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01045d2:	c1 e2 02             	shl    $0x2,%edx
f01045d5:	01 d0                	add    %edx,%eax
f01045d7:	8b 00                	mov    (%eax),%eax
f01045d9:	83 e0 01             	and    $0x1,%eax
f01045dc:	85 c0                	test   %eax,%eax
f01045de:	0f 84 8a 00 00 00    	je     f010466e <pf_calculate_allocated_pages+0xc1>
			continue;

		// find the pa and va of the page table
		pa = EXTRACT_ADDRESS(ptr_env->disk_env_pgdir[pdIndex]);
f01045e4:	8b 45 08             	mov    0x8(%ebp),%eax
f01045e7:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f01045ed:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01045f0:	c1 e2 02             	shl    $0x2,%edx
f01045f3:	01 d0                	add    %edx,%eax
f01045f5:	8b 00                	mov    (%eax),%eax
f01045f7:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01045fc:	89 45 e8             	mov    %eax,-0x18(%ebp)
		{
			pt = (uint32*) kheap_virtual_address(pa);
		}
#else
		{
			pt = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(pa);
f01045ff:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0104602:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0104605:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0104608:	c1 e8 0c             	shr    $0xc,%eax
f010460b:	89 45 e0             	mov    %eax,-0x20(%ebp)
f010460e:	a1 d0 bd 2b f0       	mov    0xf02bbdd0,%eax
f0104613:	39 45 e0             	cmp    %eax,-0x20(%ebp)
f0104616:	72 17                	jb     f010462f <pf_calculate_allocated_pages+0x82>
f0104618:	ff 75 e4             	pushl  -0x1c(%ebp)
f010461b:	68 70 1e 13 f0       	push   $0xf0131e70
f0104620:	68 1f 02 00 00       	push   $0x21f
f0104625:	68 0d 1e 13 f0       	push   $0xf0131e0d
f010462a:	e8 81 bb ff ff       	call   f01001b0 <_panic>
f010462f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0104632:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0104637:	89 45 dc             	mov    %eax,-0x24(%ebp)
		}
#endif

		// unmap all PTEs in this page table
		uint32 ptIndex;
		for (ptIndex = 0; ptIndex < 1024; ptIndex++)
f010463a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0104641:	eb 20                	jmp    f0104663 <pf_calculate_allocated_pages+0xb6>
		{
			// remove the disk page from disk page table
			uint32 dfn=pt[ptIndex];
f0104643:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104646:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010464d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0104650:	01 d0                	add    %edx,%eax
f0104652:	8b 00                	mov    (%eax),%eax
f0104654:	89 45 d8             	mov    %eax,-0x28(%ebp)
			if(dfn != 0)
f0104657:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
f010465b:	74 03                	je     f0104660 <pf_calculate_allocated_pages+0xb3>
				counter ++;
f010465d:	ff 45 f0             	incl   -0x10(%ebp)
		}
#endif

		// unmap all PTEs in this page table
		uint32 ptIndex;
		for (ptIndex = 0; ptIndex < 1024; ptIndex++)
f0104660:	ff 45 ec             	incl   -0x14(%ebp)
f0104663:	81 7d ec ff 03 00 00 	cmpl   $0x3ff,-0x14(%ebp)
f010466a:	76 d7                	jbe    f0104643 <pf_calculate_allocated_pages+0x96>
f010466c:	eb 01                	jmp    f010466f <pf_calculate_allocated_pages+0xc2>

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdIndex] & PERM_PRESENT))
			continue;
f010466e:	90                   	nop
	uint32 *pt;
	uint32 pdIndex;
	uint32 pa;
	uint32 counter=0;

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
f010466f:	ff 45 f4             	incl   -0xc(%ebp)
f0104672:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f0104679:	0f 86 47 ff ff ff    	jbe    f01045c6 <pf_calculate_allocated_pages+0x19>
			if(dfn != 0)
				counter ++;
		}
	}

	return counter;
f010467f:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0104682:	c9                   	leave  
f0104683:	c3                   	ret    

f0104684 <pf_calculate_free_frames>:

//2016:
//calculate the disk free frames from the disk free frame list
int pf_calculate_free_frames()
{
f0104684:	55                   	push   %ebp
f0104685:	89 e5                	mov    %esp,%ebp
f0104687:	83 ec 10             	sub    $0x10,%esp
	struct FrameInfo *ptr;
	uint32 totalFreeDiskFrames = 0 ;
f010468a:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	LIST_FOREACH(ptr, &disk_free_frame_list)
f0104691:	a1 84 a2 2d f0       	mov    0xf02da284,%eax
f0104696:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0104699:	eb 0b                	jmp    f01046a6 <pf_calculate_free_frames+0x22>
	{
		totalFreeDiskFrames++ ;
f010469b:	ff 45 f8             	incl   -0x8(%ebp)
int pf_calculate_free_frames()
{
	struct FrameInfo *ptr;
	uint32 totalFreeDiskFrames = 0 ;

	LIST_FOREACH(ptr, &disk_free_frame_list)
f010469e:	a1 8c a2 2d f0       	mov    0xf02da28c,%eax
f01046a3:	89 45 fc             	mov    %eax,-0x4(%ebp)
f01046a6:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f01046aa:	74 07                	je     f01046b3 <pf_calculate_free_frames+0x2f>
f01046ac:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01046af:	8b 00                	mov    (%eax),%eax
f01046b1:	eb 05                	jmp    f01046b8 <pf_calculate_free_frames+0x34>
f01046b3:	b8 00 00 00 00       	mov    $0x0,%eax
f01046b8:	a3 8c a2 2d f0       	mov    %eax,0xf02da28c
f01046bd:	a1 8c a2 2d f0       	mov    0xf02da28c,%eax
f01046c2:	85 c0                	test   %eax,%eax
f01046c4:	75 d5                	jne    f010469b <pf_calculate_free_frames+0x17>
f01046c6:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f01046ca:	75 cf                	jne    f010469b <pf_calculate_free_frames+0x17>
	{
		totalFreeDiskFrames++ ;
	}
	return totalFreeDiskFrames;
f01046cc:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f01046cf:	c9                   	leave  
f01046d0:	c3                   	ret    

f01046d1 <get_disk_table_directory>:



/*========================== TABLE FILE MANAGMENT ==============================*/
int get_disk_table_directory(struct Env* ptr_env, uint32** ptr_disk_table_directory)
{
f01046d1:	55                   	push   %ebp
f01046d2:	89 e5                	mov    %esp,%ebp
f01046d4:	83 ec 18             	sub    $0x18,%esp
	*ptr_disk_table_directory = ptr_env->disk_env_tabledir;
f01046d7:	8b 45 08             	mov    0x8(%ebp),%eax
f01046da:	8b 90 b0 00 00 00    	mov    0xb0(%eax),%edx
f01046e0:	8b 45 0c             	mov    0xc(%ebp),%eax
f01046e3:	89 10                	mov    %edx,(%eax)
	if(*ptr_disk_table_directory == 0)
f01046e5:	8b 45 0c             	mov    0xc(%ebp),%eax
f01046e8:	8b 00                	mov    (%eax),%eax
f01046ea:	85 c0                	test   %eax,%eax
f01046ec:	0f 85 ad 00 00 00    	jne    f010479f <get_disk_table_directory+0xce>
			ptr_env->disk_env_tabledir_PA = kheap_physical_address((uint32)*ptr_disk_table_directory);
		}
#else
		{
			int r;
			struct FrameInfo *p = NULL;
f01046f2:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)

			if ((r = allocate_frame(&p)) < 0)
f01046f9:	83 ec 0c             	sub    $0xc,%esp
f01046fc:	8d 45 e8             	lea    -0x18(%ebp),%eax
f01046ff:	50                   	push   %eax
f0104700:	e8 20 2c 00 00       	call   f0107325 <allocate_frame>
f0104705:	83 c4 10             	add    $0x10,%esp
f0104708:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010470b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010470f:	79 08                	jns    f0104719 <get_disk_table_directory+0x48>
				return r;
f0104711:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104714:	e9 8b 00 00 00       	jmp    f01047a4 <get_disk_table_directory+0xd3>
			p->references = 1;
f0104719:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010471c:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)

			//[4] initialize the new environment by the virtual address of the page directory
			// Hint: use "initialize_environment" function
			*ptr_disk_table_directory = STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(p));
f0104722:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0104725:	83 ec 0c             	sub    $0xc,%esp
f0104728:	50                   	push   %eax
f0104729:	e8 e9 f0 ff ff       	call   f0103817 <to_physical_address>
f010472e:	83 c4 10             	add    $0x10,%esp
f0104731:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0104734:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104737:	c1 e8 0c             	shr    $0xc,%eax
f010473a:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010473d:	a1 d0 bd 2b f0       	mov    0xf02bbdd0,%eax
f0104742:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0104745:	72 17                	jb     f010475e <get_disk_table_directory+0x8d>
f0104747:	ff 75 f0             	pushl  -0x10(%ebp)
f010474a:	68 70 1e 13 f0       	push   $0xf0131e70
f010474f:	68 5d 02 00 00       	push   $0x25d
f0104754:	68 0d 1e 13 f0       	push   $0xf0131e0d
f0104759:	e8 52 ba ff ff       	call   f01001b0 <_panic>
f010475e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104761:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0104766:	89 c2                	mov    %eax,%edx
f0104768:	8b 45 0c             	mov    0xc(%ebp),%eax
f010476b:	89 10                	mov    %edx,(%eax)
			ptr_env->disk_env_tabledir_PA = to_physical_address(p);
f010476d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0104770:	83 ec 0c             	sub    $0xc,%esp
f0104773:	50                   	push   %eax
f0104774:	e8 9e f0 ff ff       	call   f0103817 <to_physical_address>
f0104779:	83 c4 10             	add    $0x10,%esp
f010477c:	89 c2                	mov    %eax,%edx
f010477e:	8b 45 08             	mov    0x8(%ebp),%eax
f0104781:	89 90 b4 00 00 00    	mov    %edx,0xb4(%eax)
		}
#endif
		memset(*ptr_disk_table_directory , 0, PAGE_SIZE);
f0104787:	8b 45 0c             	mov    0xc(%ebp),%eax
f010478a:	8b 00                	mov    (%eax),%eax
f010478c:	83 ec 04             	sub    $0x4,%esp
f010478f:	68 00 10 00 00       	push   $0x1000
f0104794:	6a 00                	push   $0x0
f0104796:	50                   	push   %eax
f0104797:	e8 8f a8 02 00       	call   f012f02b <memset>
f010479c:	83 c4 10             	add    $0x10,%esp

		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> Disk directory created at %x", *ptr_disk_page_directory));
	}
	return 0;
f010479f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01047a4:	c9                   	leave  
f01047a5:	c3                   	ret    

f01047a6 <__pf_write_env_table>:

int __pf_write_env_table( struct Env* ptr_env, uint32 virtual_address, uint32* tableKVirtualAddress)
{
f01047a6:	55                   	push   %ebp
f01047a7:	89 e5                	mov    %esp,%ebp
f01047a9:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("========================== create_env_page");
	assert((uint32)virtual_address < KERNEL_BASE);
f01047ac:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f01047b3:	76 19                	jbe    f01047ce <__pf_write_env_table+0x28>
f01047b5:	68 a0 1e 13 f0       	push   $0xf0131ea0
f01047ba:	68 c6 1e 13 f0       	push   $0xf0131ec6
f01047bf:	68 6b 02 00 00       	push   $0x26b
f01047c4:	68 0d 1e 13 f0       	push   $0xf0131e0d
f01047c9:	e8 e2 b9 ff ff       	call   f01001b0 <_panic>

	get_disk_table_directory(ptr_env, &(ptr_env->disk_env_tabledir)) ;
f01047ce:	8b 45 08             	mov    0x8(%ebp),%eax
f01047d1:	05 b0 00 00 00       	add    $0xb0,%eax
f01047d6:	83 ec 08             	sub    $0x8,%esp
f01047d9:	50                   	push   %eax
f01047da:	ff 75 08             	pushl  0x8(%ebp)
f01047dd:	e8 ef fe ff ff       	call   f01046d1 <get_disk_table_directory>
f01047e2:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f01047e5:	8b 45 08             	mov    0x8(%ebp),%eax
f01047e8:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f01047ee:	8b 55 0c             	mov    0xc(%ebp),%edx
f01047f1:	c1 ea 16             	shr    $0x16,%edx
f01047f4:	c1 e2 02             	shl    $0x2,%edx
f01047f7:	01 d0                	add    %edx,%eax
f01047f9:	8b 00                	mov    (%eax),%eax
f01047fb:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if( dfn == 0)
f01047fe:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104801:	85 c0                	test   %eax,%eax
f0104803:	75 34                	jne    f0104839 <__pf_write_env_table+0x93>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f0104805:	83 ec 0c             	sub    $0xc,%esp
f0104808:	8d 45 f0             	lea    -0x10(%ebp),%eax
f010480b:	50                   	push   %eax
f010480c:	e8 83 f2 ff ff       	call   f0103a94 <allocate_disk_frame>
f0104811:	83 c4 10             	add    $0x10,%esp
f0104814:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0104817:	75 07                	jne    f0104820 <__pf_write_env_table+0x7a>
f0104819:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f010481e:	eb 31                	jmp    f0104851 <__pf_write_env_table+0xab>
		ptr_env->disk_env_tabledir[PDX(virtual_address)] = dfn;
f0104820:	8b 45 08             	mov    0x8(%ebp),%eax
f0104823:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f0104829:	8b 55 0c             	mov    0xc(%ebp),%edx
f010482c:	c1 ea 16             	shr    $0x16,%edx
f010482f:	c1 e2 02             	shl    $0x2,%edx
f0104832:	01 c2                	add    %eax,%edx
f0104834:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104837:	89 02                	mov    %eax,(%edx)
	//	lcr3(oldDir);

	//We already read it from the KERNEL mapping instead of the USER mapping

	//cprintf("[%s] writing table\n",ptr_env->prog_name);
	int ret = write_disk_page(dfn, (void*)tableKVirtualAddress);
f0104839:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010483c:	83 ec 08             	sub    $0x8,%esp
f010483f:	ff 75 10             	pushl  0x10(%ebp)
f0104842:	50                   	push   %eax
f0104843:	e8 63 f0 ff ff       	call   f01038ab <write_disk_page>
f0104848:	83 c4 10             	add    $0x10,%esp
f010484b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//cprintf("[%s] finished writing table\n",ptr_env->prog_name);
	return ret;
f010484e:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0104851:	c9                   	leave  
f0104852:	c3                   	ret    

f0104853 <__pf_read_env_table>:

int __pf_read_env_table(struct Env* ptr_env, uint32 virtual_address, uint32* tableKVirtualAddress)
{
f0104853:	55                   	push   %ebp
f0104854:	89 e5                	mov    %esp,%ebp
f0104856:	83 ec 18             	sub    $0x18,%esp
	if( ptr_env->disk_env_tabledir == 0) return E_TABLE_NOT_EXIST_IN_PF;
f0104859:	8b 45 08             	mov    0x8(%ebp),%eax
f010485c:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f0104862:	85 c0                	test   %eax,%eax
f0104864:	75 07                	jne    f010486d <__pf_read_env_table+0x1a>
f0104866:	b8 f6 ff ff ff       	mov    $0xfffffff6,%eax
f010486b:	eb 3d                	jmp    f01048aa <__pf_read_env_table+0x57>

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f010486d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104870:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f0104876:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104879:	c1 ea 16             	shr    $0x16,%edx
f010487c:	c1 e2 02             	shl    $0x2,%edx
f010487f:	01 d0                	add    %edx,%eax
f0104881:	8b 00                	mov    (%eax),%eax
f0104883:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if( dfn == 0) return E_TABLE_NOT_EXIST_IN_PF;
f0104886:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010488a:	75 07                	jne    f0104893 <__pf_read_env_table+0x40>
f010488c:	b8 f6 ff ff ff       	mov    $0xfffffff6,%eax
f0104891:	eb 17                	jmp    f01048aa <__pf_read_env_table+0x57>

	int disk_read_error = read_disk_page(dfn, tableKVirtualAddress);
f0104893:	83 ec 08             	sub    $0x8,%esp
f0104896:	ff 75 10             	pushl  0x10(%ebp)
f0104899:	ff 75 f4             	pushl  -0xc(%ebp)
f010489c:	e8 db ef ff ff       	call   f010387c <read_disk_page>
f01048a1:	83 c4 10             	add    $0x10,%esp
f01048a4:	89 45 f0             	mov    %eax,-0x10(%ebp)

	return disk_read_error;
f01048a7:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f01048aa:	c9                   	leave  
f01048ab:	c3                   	ret    

f01048ac <__pf_remove_env_all_tables>:

void __pf_remove_env_all_tables(struct Env* ptr_env)
{
f01048ac:	55                   	push   %ebp
f01048ad:	89 e5                	mov    %esp,%ebp
f01048af:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("pf_remove_env_page: 0");

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;
f01048b2:	8b 45 08             	mov    0x8(%ebp),%eax
f01048b5:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f01048bb:	85 c0                	test   %eax,%eax
f01048bd:	74 52                	je     f0104911 <__pf_remove_env_all_tables+0x65>

	uint32 pdeno;
	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f01048bf:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01048c6:	eb 3e                	jmp    f0104906 <__pf_remove_env_all_tables+0x5a>
	{
		uint32 dfn=ptr_env->disk_env_tabledir[pdeno];
f01048c8:	8b 45 08             	mov    0x8(%ebp),%eax
f01048cb:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f01048d1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01048d4:	c1 e2 02             	shl    $0x2,%edx
f01048d7:	01 d0                	add    %edx,%eax
f01048d9:	8b 00                	mov    (%eax),%eax
f01048db:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_env->disk_env_tabledir[pdeno] = 0;
f01048de:	8b 45 08             	mov    0x8(%ebp),%eax
f01048e1:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f01048e7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01048ea:	c1 e2 02             	shl    $0x2,%edx
f01048ed:	01 d0                	add    %edx,%eax
f01048ef:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		free_disk_frame(dfn);
f01048f5:	83 ec 0c             	sub    $0xc,%esp
f01048f8:	ff 75 f0             	pushl  -0x10(%ebp)
f01048fb:	e8 5b f2 ff ff       	call   f0103b5b <free_disk_frame>
f0104900:	83 c4 10             	add    $0x10,%esp

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;

	uint32 pdeno;
	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0104903:	ff 45 f4             	incl   -0xc(%ebp)
f0104906:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f010490d:	76 b9                	jbe    f01048c8 <__pf_remove_env_all_tables+0x1c>
f010490f:	eb 01                	jmp    f0104912 <__pf_remove_env_all_tables+0x66>
void __pf_remove_env_all_tables(struct Env* ptr_env)
{
	//LOG_STRING("pf_remove_env_page: 0");

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;
f0104911:	90                   	nop
		uint32 dfn=ptr_env->disk_env_tabledir[pdeno];
		ptr_env->disk_env_tabledir[pdeno] = 0;
		free_disk_frame(dfn);
	}
	//LOG_STRING("pf_remove_env_page: 3");
}
f0104912:	c9                   	leave  
f0104913:	c3                   	ret    

f0104914 <__pf_remove_env_table>:

void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address)
{
f0104914:	55                   	push   %ebp
f0104915:	89 e5                	mov    %esp,%ebp
f0104917:	83 ec 18             	sub    $0x18,%esp
	if (virtual_address == 0)
f010491a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f010491e:	75 10                	jne    f0104930 <__pf_remove_env_table+0x1c>
		cprintf("REMOVING table 0 from page file\n");
f0104920:	83 ec 0c             	sub    $0xc,%esp
f0104923:	68 d0 1f 13 f0       	push   $0xf0131fd0
f0104928:	e8 04 c5 ff ff       	call   f0100e31 <cprintf>
f010492d:	83 c4 10             	add    $0x10,%esp
	if( ptr_env->disk_env_tabledir == 0) return;
f0104930:	8b 45 08             	mov    0x8(%ebp),%eax
f0104933:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f0104939:	85 c0                	test   %eax,%eax
f010493b:	74 43                	je     f0104980 <__pf_remove_env_table+0x6c>

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f010493d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104940:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f0104946:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104949:	c1 ea 16             	shr    $0x16,%edx
f010494c:	c1 e2 02             	shl    $0x2,%edx
f010494f:	01 d0                	add    %edx,%eax
f0104951:	8b 00                	mov    (%eax),%eax
f0104953:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_env->disk_env_tabledir[PDX(virtual_address)] = 0;
f0104956:	8b 45 08             	mov    0x8(%ebp),%eax
f0104959:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f010495f:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104962:	c1 ea 16             	shr    $0x16,%edx
f0104965:	c1 e2 02             	shl    $0x2,%edx
f0104968:	01 d0                	add    %edx,%eax
f010496a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	free_disk_frame(dfn);
f0104970:	83 ec 0c             	sub    $0xc,%esp
f0104973:	ff 75 f4             	pushl  -0xc(%ebp)
f0104976:	e8 e0 f1 ff ff       	call   f0103b5b <free_disk_frame>
f010497b:	83 c4 10             	add    $0x10,%esp
f010497e:	eb 01                	jmp    f0104981 <__pf_remove_env_table+0x6d>

void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address)
{
	if (virtual_address == 0)
		cprintf("REMOVING table 0 from page file\n");
	if( ptr_env->disk_env_tabledir == 0) return;
f0104980:	90                   	nop

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
	ptr_env->disk_env_tabledir[PDX(virtual_address)] = 0;
	free_disk_frame(dfn);
}
f0104981:	c9                   	leave  
f0104982:	c3                   	ret    

f0104983 <test_disk_01>:
///========================== END OF TABLE FILE MANAGMENT =============================


void test_disk_01(void *virtual_address)
{
f0104983:	55                   	push   %ebp
f0104984:	89 e5                	mov    %esp,%ebp
f0104986:	83 ec 18             	sub    $0x18,%esp
	LOG_STATMENT(cprintf("doing tests for ide_write()\n"));
	int i=90157;
f0104989:	c7 45 f4 2d 60 01 00 	movl   $0x1602d,-0xc(%ebp)
	for(;i<140000;i += 500)
f0104990:	eb 1f                	jmp    f01049b1 <test_disk_01+0x2e>
	{
		if(ide_write(i,(void *)virtual_address,8) != 0)
f0104992:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104995:	83 ec 04             	sub    $0x4,%esp
f0104998:	6a 08                	push   $0x8
f010499a:	ff 75 08             	pushl  0x8(%ebp)
f010499d:	50                   	push   %eax
f010499e:	e8 95 ad 02 00       	call   f012f738 <ide_write>
f01049a3:	83 c4 10             	add    $0x10,%esp
f01049a6:	85 c0                	test   %eax,%eax
f01049a8:	75 12                	jne    f01049bc <test_disk_01+0x39>

void test_disk_01(void *virtual_address)
{
	LOG_STATMENT(cprintf("doing tests for ide_write()\n"));
	int i=90157;
	for(;i<140000;i += 500)
f01049aa:	81 45 f4 f4 01 00 00 	addl   $0x1f4,-0xc(%ebp)
f01049b1:	81 7d f4 df 22 02 00 	cmpl   $0x222df,-0xc(%ebp)
f01049b8:	7e d8                	jle    f0104992 <test_disk_01+0xf>
		{
			//LOG_STATMENT(cprintf("written at sector %d\n",i););
		}
	}
	LOG_STATMENT(cprintf("ide_write() test done\n"););
}
f01049ba:	eb 01                	jmp    f01049bd <test_disk_01+0x3a>
	for(;i<140000;i += 500)
	{
		if(ide_write(i,(void *)virtual_address,8) != 0)
		{
			LOG_STATMENT(cprintf("FAILURE to write sector %d\n",i););
			break;
f01049bc:	90                   	nop
		{
			//LOG_STATMENT(cprintf("written at sector %d\n",i););
		}
	}
	LOG_STATMENT(cprintf("ide_write() test done\n"););
}
f01049bd:	90                   	nop
f01049be:	c9                   	leave  
f01049bf:	c3                   	ret    

f01049c0 <mc146818_read>:
#include <kern/cpu/picirq.h>


unsigned
mc146818_read(unsigned reg)
{
f01049c0:	55                   	push   %ebp
f01049c1:	89 e5                	mov    %esp,%ebp
f01049c3:	83 ec 10             	sub    $0x10,%esp
	outb(IO_RTC, reg);
f01049c6:	8b 45 08             	mov    0x8(%ebp),%eax
f01049c9:	0f b6 c0             	movzbl %al,%eax
f01049cc:	c7 45 fc 70 00 00 00 	movl   $0x70,-0x4(%ebp)
f01049d3:	88 45 f6             	mov    %al,-0xa(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01049d6:	8a 45 f6             	mov    -0xa(%ebp),%al
f01049d9:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01049dc:	ee                   	out    %al,(%dx)
f01049dd:	c7 45 f8 71 00 00 00 	movl   $0x71,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01049e4:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01049e7:	89 c2                	mov    %eax,%edx
f01049e9:	ec                   	in     (%dx),%al
f01049ea:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f01049ed:	8a 45 f7             	mov    -0x9(%ebp),%al
	return inb(IO_RTC+1);
f01049f0:	0f b6 c0             	movzbl %al,%eax
}
f01049f3:	c9                   	leave  
f01049f4:	c3                   	ret    

f01049f5 <mc146818_write>:

void
mc146818_write(unsigned reg, unsigned datum)
{
f01049f5:	55                   	push   %ebp
f01049f6:	89 e5                	mov    %esp,%ebp
f01049f8:	83 ec 10             	sub    $0x10,%esp
	outb(IO_RTC, reg);
f01049fb:	8b 45 08             	mov    0x8(%ebp),%eax
f01049fe:	0f b6 c0             	movzbl %al,%eax
f0104a01:	c7 45 fc 70 00 00 00 	movl   $0x70,-0x4(%ebp)
f0104a08:	88 45 f6             	mov    %al,-0xa(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0104a0b:	8a 45 f6             	mov    -0xa(%ebp),%al
f0104a0e:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0104a11:	ee                   	out    %al,(%dx)
	outb(IO_RTC+1, datum);
f0104a12:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104a15:	0f b6 c0             	movzbl %al,%eax
f0104a18:	c7 45 f8 71 00 00 00 	movl   $0x71,-0x8(%ebp)
f0104a1f:	88 45 f7             	mov    %al,-0x9(%ebp)
f0104a22:	8a 45 f7             	mov    -0x9(%ebp),%al
f0104a25:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0104a28:	ee                   	out    %al,(%dx)
}
f0104a29:	90                   	nop
f0104a2a:	c9                   	leave  
f0104a2b:	c3                   	ret    

f0104a2c <kclock_start>:


void
kclock_start(uint8 quantum_in_ms)
{
f0104a2c:	55                   	push   %ebp
f0104a2d:	89 e5                	mov    %esp,%ebp
f0104a2f:	53                   	push   %ebx
f0104a30:	83 ec 24             	sub    $0x24,%esp
f0104a33:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a36:	88 45 e4             	mov    %al,-0x1c(%ebp)
f0104a39:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f0104a40:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f0104a44:	8a 45 ef             	mov    -0x11(%ebp),%al
f0104a47:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104a4a:	ee                   	out    %al,(%dx)
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);

	//2017
//	outb(TIMER_CNTR0, TIMER_DIV((1000/CLOCK_INTERVAL_IN_MS)) % 256);
//	outb(TIMER_CNTR0, TIMER_DIV((1000/CLOCK_INTERVAL_IN_MS)) / 256);
	if (IS_VALID_QUANTUM(quantum_in_ms))
f0104a4b:	80 7d e4 35          	cmpb   $0x35,-0x1c(%ebp)
f0104a4f:	77 48                	ja     f0104a99 <kclock_start+0x6d>
f0104a51:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f0104a58:	c6 45 ee 34          	movb   $0x34,-0x12(%ebp)
f0104a5c:	8a 45 ee             	mov    -0x12(%ebp),%al
f0104a5f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104a62:	ee                   	out    %al,(%dx)
	{
		outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
		kclock_write_cnt0_LSB_first(TIMER_DIV((1000/quantum_in_ms))) ;
f0104a63:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f0104a67:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f0104a6c:	99                   	cltd   
f0104a6d:	f7 fb                	idiv   %ebx
f0104a6f:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f0104a75:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f0104a79:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f0104a7e:	99                   	cltd   
f0104a7f:	f7 fb                	idiv   %ebx
f0104a81:	89 c3                	mov    %eax,%ebx
f0104a83:	89 c8                	mov    %ecx,%eax
f0104a85:	99                   	cltd   
f0104a86:	f7 fb                	idiv   %ebx
f0104a88:	0f b7 c0             	movzwl %ax,%eax
f0104a8b:	83 ec 0c             	sub    $0xc,%esp
f0104a8e:	50                   	push   %eax
f0104a8f:	e8 dd 01 00 00       	call   f0104c71 <kclock_write_cnt0_LSB_first>
f0104a94:	83 c4 10             	add    $0x10,%esp
f0104a97:	eb 13                	jmp    f0104aac <kclock_start+0x80>
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
f0104a99:	6a 35                	push   $0x35
f0104a9b:	68 f4 1f 13 f0       	push   $0xf0131ff4
f0104aa0:	6a 33                	push   $0x33
f0104aa2:	68 50 20 13 f0       	push   $0xf0132050
f0104aa7:	e8 04 b7 ff ff       	call   f01001b0 <_panic>
//	cprintf("c = %d\n", c) ;

//	uint16 cnt0_after = kclock_read_cnt0() ;

	//cprintf("	Setup timer interrupts via 8259A\n");
	irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
f0104aac:	66 a1 64 e9 18 f0    	mov    0xf018e964,%ax
f0104ab2:	0f b7 c0             	movzwl %ax,%eax
f0104ab5:	25 fe ff 00 00       	and    $0xfffe,%eax
f0104aba:	83 ec 0c             	sub    $0xc,%esp
f0104abd:	50                   	push   %eax
f0104abe:	e8 3a 1c 00 00       	call   f01066fd <irq_setmask_8259A>
f0104ac3:	83 c4 10             	add    $0x10,%esp
	//cprintf("	unmasked timer interrupt\n");

	//cprintf("Timer STARTED: Counter0 Before Lag = %d, After lag = %d\n", cnt0_before, cnt0_after );

}
f0104ac6:	90                   	nop
f0104ac7:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0104aca:	c9                   	leave  
f0104acb:	c3                   	ret    

f0104acc <kclock_stop>:

void
kclock_stop(void)
{
f0104acc:	55                   	push   %ebp
f0104acd:	89 e5                	mov    %esp,%ebp
f0104acf:	83 ec 18             	sub    $0x18,%esp
f0104ad2:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f0104ad9:	c6 45 f3 34          	movb   $0x34,-0xd(%ebp)
f0104add:	8a 45 f3             	mov    -0xd(%ebp),%al
f0104ae0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104ae3:	ee                   	out    %al,(%dx)
//	for (int i = 0 ; i <20; i++)
//	{
//		cnt0 = kclock_read_cnt0();
//		cprintf("STOP AFTER: cnt0 = %d\n",cnt0);
//	}
	irq_setmask_8259A(0xFFFF);
f0104ae4:	83 ec 0c             	sub    $0xc,%esp
f0104ae7:	68 ff ff 00 00       	push   $0xffff
f0104aec:	e8 0c 1c 00 00       	call   f01066fd <irq_setmask_8259A>
f0104af1:	83 c4 10             	add    $0x10,%esp
//	uint16 cnt0 = kclock_read_cnt0() ;
//	cprintf("Timer STOPPED: Counter0 Value = %x\n", cnt0 );
	//cprintf("Timer STOPPED: Status Value = %x\n", status);


}
f0104af4:	90                   	nop
f0104af5:	c9                   	leave  
f0104af6:	c3                   	ret    

f0104af7 <kclock_resume>:

void
kclock_resume(void)
{
f0104af7:	55                   	push   %ebp
f0104af8:	89 e5                	mov    %esp,%ebp
f0104afa:	83 ec 18             	sub    $0x18,%esp
	uint16 cnt0 = kclock_read_cnt0() ;
f0104afd:	e8 b1 01 00 00       	call   f0104cb3 <kclock_read_cnt0>
f0104b02:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
	//2017: if the remaining time is small, then increase it a bit to avoid invoking the CLOCK INT
	//		before returning back to the environment (this cause INT inside INT!!!) el7 :)
	if (cnt0 < 20)
f0104b06:	66 83 7d f6 13       	cmpw   $0x13,-0xa(%ebp)
f0104b0b:	77 06                	ja     f0104b13 <kclock_resume+0x1c>
	{
		cnt0 = 20;
f0104b0d:	66 c7 45 f6 14 00    	movw   $0x14,-0xa(%ebp)
	}

	if (cnt0 % 2 == 1)
f0104b13:	66 8b 45 f6          	mov    -0xa(%ebp),%ax
f0104b17:	83 e0 01             	and    $0x1,%eax
f0104b1a:	66 85 c0             	test   %ax,%ax
f0104b1d:	74 09                	je     f0104b28 <kclock_resume+0x31>
		cnt0++;
f0104b1f:	66 8b 45 f6          	mov    -0xa(%ebp),%ax
f0104b23:	40                   	inc    %eax
f0104b24:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
f0104b28:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f0104b2f:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f0104b33:	8a 45 ef             	mov    -0x11(%ebp),%al
f0104b36:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104b39:	ee                   	out    %al,(%dx)

	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
	kclock_write_cnt0_LSB_first(cnt0) ;
f0104b3a:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
f0104b3e:	83 ec 0c             	sub    $0xc,%esp
f0104b41:	50                   	push   %eax
f0104b42:	e8 2a 01 00 00       	call   f0104c71 <kclock_write_cnt0_LSB_first>
f0104b47:	83 c4 10             	add    $0x10,%esp
//	uint16 cnt0_after = kclock_read_cnt0() ;
//	cprintf("Timer RESUMED: Counter0 Before Lag = %d, After lag = %d\n", cnt0_before, cnt0_after );


	//cprintf("	Setup timer interrupts via 8259A\n");
	irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
f0104b4a:	66 a1 64 e9 18 f0    	mov    0xf018e964,%ax
f0104b50:	0f b7 c0             	movzwl %ax,%eax
f0104b53:	25 fe ff 00 00       	and    $0xfffe,%eax
f0104b58:	83 ec 0c             	sub    $0xc,%esp
f0104b5b:	50                   	push   %eax
f0104b5c:	e8 9c 1b 00 00       	call   f01066fd <irq_setmask_8259A>
f0104b61:	83 c4 10             	add    $0x10,%esp
	//cprintf("	unmasked timer interrupt\n");
}
f0104b64:	90                   	nop
f0104b65:	c9                   	leave  
f0104b66:	c3                   	ret    

f0104b67 <kclock_start_counter>:


//==============

void kclock_start_counter(uint8 cnt0)
{
f0104b67:	55                   	push   %ebp
f0104b68:	89 e5                	mov    %esp,%ebp
f0104b6a:	83 ec 28             	sub    $0x28,%esp
f0104b6d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b70:	88 45 e4             	mov    %al,-0x1c(%ebp)
f0104b73:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f0104b7a:	c6 45 f3 34          	movb   $0x34,-0xd(%ebp)
f0104b7e:	8a 45 f3             	mov    -0xd(%ebp),%al
f0104b81:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104b84:	ee                   	out    %al,(%dx)
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
	kclock_write_cnt0_LSB_first(cnt0) ;
f0104b85:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
f0104b89:	83 ec 0c             	sub    $0xc,%esp
f0104b8c:	50                   	push   %eax
f0104b8d:	e8 df 00 00 00       	call   f0104c71 <kclock_write_cnt0_LSB_first>
f0104b92:	83 c4 10             	add    $0x10,%esp
	irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
f0104b95:	66 a1 64 e9 18 f0    	mov    0xf018e964,%ax
f0104b9b:	0f b7 c0             	movzwl %ax,%eax
f0104b9e:	25 fe ff 00 00       	and    $0xfffe,%eax
f0104ba3:	83 ec 0c             	sub    $0xc,%esp
f0104ba6:	50                   	push   %eax
f0104ba7:	e8 51 1b 00 00       	call   f01066fd <irq_setmask_8259A>
f0104bac:	83 c4 10             	add    $0x10,%esp

}
f0104baf:	90                   	nop
f0104bb0:	c9                   	leave  
f0104bb1:	c3                   	ret    

f0104bb2 <kclock_set_quantum>:
//2018
//Reset the CNT0 to the given quantum value without affecting the interrupt status
void kclock_set_quantum(uint8 quantum_in_ms)
{
f0104bb2:	55                   	push   %ebp
f0104bb3:	89 e5                	mov    %esp,%ebp
f0104bb5:	56                   	push   %esi
f0104bb6:	53                   	push   %ebx
f0104bb7:	83 ec 20             	sub    $0x20,%esp
f0104bba:	8b 45 08             	mov    0x8(%ebp),%eax
f0104bbd:	88 45 e4             	mov    %al,-0x1c(%ebp)
	if (IS_VALID_QUANTUM(quantum_in_ms))
f0104bc0:	80 7d e4 35          	cmpb   $0x35,-0x1c(%ebp)
f0104bc4:	0f 87 8a 00 00 00    	ja     f0104c54 <kclock_set_quantum+0xa2>
	{
		/*2023*/
//		int cnt = TIMER_DIV((1000/quantum_in_ms));
//		if (cnt%2 == 1)
//			cnt++;
		int cnt = NUM_CLKS_PER_QUANTUM(quantum_in_ms);
f0104bca:	0f b6 75 e4          	movzbl -0x1c(%ebp),%esi
f0104bce:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f0104bd3:	99                   	cltd   
f0104bd4:	f7 fe                	idiv   %esi
f0104bd6:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f0104bdc:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f0104be0:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f0104be5:	99                   	cltd   
f0104be6:	f7 fb                	idiv   %ebx
f0104be8:	89 c6                	mov    %eax,%esi
f0104bea:	89 c8                	mov    %ecx,%eax
f0104bec:	99                   	cltd   
f0104bed:	f7 fe                	idiv   %esi
f0104bef:	89 c3                	mov    %eax,%ebx
f0104bf1:	0f b6 4d e4          	movzbl -0x1c(%ebp),%ecx
f0104bf5:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f0104bfa:	99                   	cltd   
f0104bfb:	f7 f9                	idiv   %ecx
f0104bfd:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f0104c03:	0f b6 75 e4          	movzbl -0x1c(%ebp),%esi
f0104c07:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f0104c0c:	99                   	cltd   
f0104c0d:	f7 fe                	idiv   %esi
f0104c0f:	89 c6                	mov    %eax,%esi
f0104c11:	89 c8                	mov    %ecx,%eax
f0104c13:	99                   	cltd   
f0104c14:	f7 fe                	idiv   %esi
f0104c16:	25 01 00 00 80       	and    $0x80000001,%eax
f0104c1b:	85 c0                	test   %eax,%eax
f0104c1d:	79 05                	jns    f0104c24 <kclock_set_quantum+0x72>
f0104c1f:	48                   	dec    %eax
f0104c20:	83 c8 fe             	or     $0xfffffffe,%eax
f0104c23:	40                   	inc    %eax
f0104c24:	01 d8                	add    %ebx,%eax
f0104c26:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104c29:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f0104c30:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f0104c34:	8a 45 ef             	mov    -0x11(%ebp),%al
f0104c37:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104c3a:	ee                   	out    %al,(%dx)


		//cprintf("QUANTUM is set to %d ms (%d)\n", quantum_in_ms, TIMER_DIV((1000/quantum_in_ms)));
		outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
		kclock_write_cnt0_LSB_first(cnt) ;
f0104c3b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104c3e:	0f b7 c0             	movzwl %ax,%eax
f0104c41:	83 ec 0c             	sub    $0xc,%esp
f0104c44:	50                   	push   %eax
f0104c45:	e8 27 00 00 00       	call   f0104c71 <kclock_write_cnt0_LSB_first>
f0104c4a:	83 c4 10             	add    $0x10,%esp
		kclock_stop();
f0104c4d:	e8 7a fe ff ff       	call   f0104acc <kclock_stop>
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
	}
}
f0104c52:	eb 16                	jmp    f0104c6a <kclock_set_quantum+0xb8>
		kclock_stop();
		//uint16 cnt0 = kclock_read_cnt0_latch() ; //read after write to ensure it's set to the desired value
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
f0104c54:	6a 35                	push   $0x35
f0104c56:	68 f4 1f 13 f0       	push   $0xf0131ff4
f0104c5b:	68 cc 00 00 00       	push   $0xcc
f0104c60:	68 50 20 13 f0       	push   $0xf0132050
f0104c65:	e8 46 b5 ff ff       	call   f01001b0 <_panic>
	}
}
f0104c6a:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0104c6d:	5b                   	pop    %ebx
f0104c6e:	5e                   	pop    %esi
f0104c6f:	5d                   	pop    %ebp
f0104c70:	c3                   	ret    

f0104c71 <kclock_write_cnt0_LSB_first>:


//2017
void
kclock_write_cnt0_LSB_first(uint16 val)
{
f0104c71:	55                   	push   %ebp
f0104c72:	89 e5                	mov    %esp,%ebp
f0104c74:	83 ec 14             	sub    $0x14,%esp
f0104c77:	8b 45 08             	mov    0x8(%ebp),%eax
f0104c7a:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	outb(TIMER_CNTR0, (uint8)(val & 0x00FF));
f0104c7e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104c81:	0f b6 c0             	movzbl %al,%eax
f0104c84:	c7 45 fc 40 00 00 00 	movl   $0x40,-0x4(%ebp)
f0104c8b:	88 45 f6             	mov    %al,-0xa(%ebp)
f0104c8e:	8a 45 f6             	mov    -0xa(%ebp),%al
f0104c91:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0104c94:	ee                   	out    %al,(%dx)
	outb(TIMER_CNTR0, (uint8)((val>>8) & 0x00FF));
f0104c95:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104c98:	66 c1 e8 08          	shr    $0x8,%ax
f0104c9c:	0f b6 c0             	movzbl %al,%eax
f0104c9f:	c7 45 f8 40 00 00 00 	movl   $0x40,-0x8(%ebp)
f0104ca6:	88 45 f7             	mov    %al,-0x9(%ebp)
f0104ca9:	8a 45 f7             	mov    -0x9(%ebp),%al
f0104cac:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0104caf:	ee                   	out    %al,(%dx)
}
f0104cb0:	90                   	nop
f0104cb1:	c9                   	leave  
f0104cb2:	c3                   	ret    

f0104cb3 <kclock_read_cnt0>:
//==============


uint16
kclock_read_cnt0(void)
{
f0104cb3:	55                   	push   %ebp
f0104cb4:	89 e5                	mov    %esp,%ebp
f0104cb6:	83 ec 20             	sub    $0x20,%esp
f0104cb9:	c7 45 f8 40 00 00 00 	movl   $0x40,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0104cc0:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0104cc3:	89 c2                	mov    %eax,%edx
f0104cc5:	ec                   	in     (%dx),%al
f0104cc6:	88 45 ee             	mov    %al,-0x12(%ebp)
	return data;
f0104cc9:	8a 45 ee             	mov    -0x12(%ebp),%al
	uint8 cnt0_lo =  inb(TIMER_CNTR0);
f0104ccc:	88 45 ff             	mov    %al,-0x1(%ebp)
f0104ccf:	c7 45 f0 40 00 00 00 	movl   $0x40,-0x10(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0104cd6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104cd9:	89 c2                	mov    %eax,%edx
f0104cdb:	ec                   	in     (%dx),%al
f0104cdc:	88 45 ef             	mov    %al,-0x11(%ebp)
	return data;
f0104cdf:	8a 45 ef             	mov    -0x11(%ebp),%al
	uint8 cnt0_hi =  inb(TIMER_CNTR0);
f0104ce2:	88 45 f7             	mov    %al,-0x9(%ebp)
	uint16 cnt0 = (cnt0_hi << 8) | cnt0_lo ;
f0104ce5:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
f0104ce9:	c1 e0 08             	shl    $0x8,%eax
f0104cec:	89 c2                	mov    %eax,%edx
f0104cee:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
f0104cf2:	09 d0                	or     %edx,%eax
f0104cf4:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
	return cnt0 ;
f0104cf8:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0104cfb:	c9                   	leave  
f0104cfc:	c3                   	ret    

f0104cfd <kclock_read_cnt0_latch>:


uint16
kclock_read_cnt0_latch(void)
{
f0104cfd:	55                   	push   %ebp
f0104cfe:	89 e5                	mov    %esp,%ebp
f0104d00:	83 ec 30             	sub    $0x30,%esp
f0104d03:	c7 45 f8 43 00 00 00 	movl   $0x43,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0104d0a:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0104d0d:	89 c2                	mov    %eax,%edx
f0104d0f:	ec                   	in     (%dx),%al
f0104d10:	88 45 db             	mov    %al,-0x25(%ebp)
	return data;
f0104d13:	8a 45 db             	mov    -0x25(%ebp),%al
	uint8 old_mode = inb(TIMER_MODE) ;
f0104d16:	88 45 ff             	mov    %al,-0x1(%ebp)
f0104d19:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f0104d20:	c6 45 dc 00          	movb   $0x0,-0x24(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0104d24:	8a 45 dc             	mov    -0x24(%ebp),%al
f0104d27:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104d2a:	ee                   	out    %al,(%dx)
f0104d2b:	c7 45 ec 40 00 00 00 	movl   $0x40,-0x14(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0104d32:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104d35:	89 c2                	mov    %eax,%edx
f0104d37:	ec                   	in     (%dx),%al
f0104d38:	88 45 dd             	mov    %al,-0x23(%ebp)
	return data;
f0104d3b:	8a 45 dd             	mov    -0x23(%ebp),%al
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_LATCH);

	uint8 cnt0_lo =  inb(TIMER_CNTR0);
f0104d3e:	88 45 f3             	mov    %al,-0xd(%ebp)
f0104d41:	c7 45 e4 40 00 00 00 	movl   $0x40,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0104d48:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0104d4b:	89 c2                	mov    %eax,%edx
f0104d4d:	ec                   	in     (%dx),%al
f0104d4e:	88 45 de             	mov    %al,-0x22(%ebp)
	return data;
f0104d51:	8a 45 de             	mov    -0x22(%ebp),%al
	uint8 cnt0_hi =  inb(TIMER_CNTR0);
f0104d54:	88 45 eb             	mov    %al,-0x15(%ebp)
	uint16 cnt0 = (cnt0_hi << 8) | cnt0_lo ;
f0104d57:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
f0104d5b:	c1 e0 08             	shl    $0x8,%eax
f0104d5e:	89 c2                	mov    %eax,%edx
f0104d60:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0104d64:	09 d0                	or     %edx,%eax
f0104d66:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
	outb(TIMER_MODE, old_mode);
f0104d6a:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
f0104d6e:	c7 45 e0 43 00 00 00 	movl   $0x43,-0x20(%ebp)
f0104d75:	88 45 df             	mov    %al,-0x21(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0104d78:	8a 45 df             	mov    -0x21(%ebp),%al
f0104d7b:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0104d7e:	ee                   	out    %al,(%dx)

	return cnt0 ;
f0104d7f:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
f0104d82:	c9                   	leave  
f0104d83:	c3                   	ret    

f0104d84 <init_queue>:

//================================
// [1] Initialize the given queue:
//================================
void init_queue(struct Env_Queue* queue)
{
f0104d84:	55                   	push   %ebp
f0104d85:	89 e5                	mov    %esp,%ebp
	if(queue != NULL)
f0104d87:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104d8b:	74 1d                	je     f0104daa <init_queue+0x26>
	{
		LIST_INIT(queue);
f0104d8d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104d90:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0104d96:	8b 45 08             	mov    0x8(%ebp),%eax
f0104d99:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0104da0:	8b 45 08             	mov    0x8(%ebp),%eax
f0104da3:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
	}
}
f0104daa:	90                   	nop
f0104dab:	5d                   	pop    %ebp
f0104dac:	c3                   	ret    

f0104dad <queue_size>:

//================================
// [2] Get queue size:
//================================
int queue_size(struct Env_Queue* queue)
{
f0104dad:	55                   	push   %ebp
f0104dae:	89 e5                	mov    %esp,%ebp
	if(queue != NULL)
f0104db0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104db4:	74 08                	je     f0104dbe <queue_size+0x11>
	{
		return LIST_SIZE(queue);
f0104db6:	8b 45 08             	mov    0x8(%ebp),%eax
f0104db9:	8b 40 0c             	mov    0xc(%eax),%eax
f0104dbc:	eb 05                	jmp    f0104dc3 <queue_size+0x16>
	}
	else
	{
		return 0;
f0104dbe:	b8 00 00 00 00       	mov    $0x0,%eax
	}
}
f0104dc3:	5d                   	pop    %ebp
f0104dc4:	c3                   	ret    

f0104dc5 <enqueue>:

//====================================
// [3] Enqueue env in the given queue:
//====================================
void enqueue(struct Env_Queue* queue, struct Env* env)
{
f0104dc5:	55                   	push   %ebp
f0104dc6:	89 e5                	mov    %esp,%ebp
f0104dc8:	83 ec 08             	sub    $0x8,%esp
	assert(queue != NULL)	;
f0104dcb:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104dcf:	75 16                	jne    f0104de7 <enqueue+0x22>
f0104dd1:	68 64 20 13 f0       	push   $0xf0132064
f0104dd6:	68 72 20 13 f0       	push   $0xf0132072
f0104ddb:	6a 33                	push   $0x33
f0104ddd:	68 87 20 13 f0       	push   $0xf0132087
f0104de2:	e8 c9 b3 ff ff       	call   f01001b0 <_panic>
	if(env != NULL)
f0104de7:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0104deb:	74 66                	je     f0104e53 <enqueue+0x8e>
	{
		LIST_INSERT_HEAD(queue, env);
f0104ded:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0104df1:	75 14                	jne    f0104e07 <enqueue+0x42>
f0104df3:	83 ec 04             	sub    $0x4,%esp
f0104df6:	68 a0 20 13 f0       	push   $0xf01320a0
f0104dfb:	6a 36                	push   $0x36
f0104dfd:	68 87 20 13 f0       	push   $0xf0132087
f0104e02:	e8 a9 b3 ff ff       	call   f01001b0 <_panic>
f0104e07:	8b 45 08             	mov    0x8(%ebp),%eax
f0104e0a:	8b 10                	mov    (%eax),%edx
f0104e0c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104e0f:	89 50 44             	mov    %edx,0x44(%eax)
f0104e12:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104e15:	8b 40 44             	mov    0x44(%eax),%eax
f0104e18:	85 c0                	test   %eax,%eax
f0104e1a:	74 0d                	je     f0104e29 <enqueue+0x64>
f0104e1c:	8b 45 08             	mov    0x8(%ebp),%eax
f0104e1f:	8b 00                	mov    (%eax),%eax
f0104e21:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104e24:	89 50 48             	mov    %edx,0x48(%eax)
f0104e27:	eb 09                	jmp    f0104e32 <enqueue+0x6d>
f0104e29:	8b 45 08             	mov    0x8(%ebp),%eax
f0104e2c:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104e2f:	89 50 04             	mov    %edx,0x4(%eax)
f0104e32:	8b 45 08             	mov    0x8(%ebp),%eax
f0104e35:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104e38:	89 10                	mov    %edx,(%eax)
f0104e3a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104e3d:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0104e44:	8b 45 08             	mov    0x8(%ebp),%eax
f0104e47:	8b 40 0c             	mov    0xc(%eax),%eax
f0104e4a:	8d 50 01             	lea    0x1(%eax),%edx
f0104e4d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104e50:	89 50 0c             	mov    %edx,0xc(%eax)
	}
}
f0104e53:	90                   	nop
f0104e54:	c9                   	leave  
f0104e55:	c3                   	ret    

f0104e56 <dequeue>:

//======================================
// [4] Dequeue env from the given queue:
//======================================
struct Env* dequeue(struct Env_Queue* queue)
{
f0104e56:	55                   	push   %ebp
f0104e57:	89 e5                	mov    %esp,%ebp
f0104e59:	83 ec 18             	sub    $0x18,%esp
	if (queue == NULL) return NULL;
f0104e5c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104e60:	75 0a                	jne    f0104e6c <dequeue+0x16>
f0104e62:	b8 00 00 00 00       	mov    $0x0,%eax
f0104e67:	e9 a0 00 00 00       	jmp    f0104f0c <dequeue+0xb6>
	struct Env* envItem = LIST_LAST(queue);
f0104e6c:	8b 45 08             	mov    0x8(%ebp),%eax
f0104e6f:	8b 40 04             	mov    0x4(%eax),%eax
f0104e72:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (envItem != NULL)
f0104e75:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104e79:	0f 84 8a 00 00 00    	je     f0104f09 <dequeue+0xb3>
	{
		LIST_REMOVE(queue, envItem);
f0104e7f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104e83:	75 14                	jne    f0104e99 <dequeue+0x43>
f0104e85:	83 ec 04             	sub    $0x4,%esp
f0104e88:	68 c3 20 13 f0       	push   $0xf01320c3
f0104e8d:	6a 43                	push   $0x43
f0104e8f:	68 87 20 13 f0       	push   $0xf0132087
f0104e94:	e8 17 b3 ff ff       	call   f01001b0 <_panic>
f0104e99:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104e9c:	8b 40 44             	mov    0x44(%eax),%eax
f0104e9f:	85 c0                	test   %eax,%eax
f0104ea1:	74 11                	je     f0104eb4 <dequeue+0x5e>
f0104ea3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104ea6:	8b 40 44             	mov    0x44(%eax),%eax
f0104ea9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104eac:	8b 52 48             	mov    0x48(%edx),%edx
f0104eaf:	89 50 48             	mov    %edx,0x48(%eax)
f0104eb2:	eb 0c                	jmp    f0104ec0 <dequeue+0x6a>
f0104eb4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104eb7:	8b 50 48             	mov    0x48(%eax),%edx
f0104eba:	8b 45 08             	mov    0x8(%ebp),%eax
f0104ebd:	89 50 04             	mov    %edx,0x4(%eax)
f0104ec0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104ec3:	8b 40 48             	mov    0x48(%eax),%eax
f0104ec6:	85 c0                	test   %eax,%eax
f0104ec8:	74 11                	je     f0104edb <dequeue+0x85>
f0104eca:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104ecd:	8b 40 48             	mov    0x48(%eax),%eax
f0104ed0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104ed3:	8b 52 44             	mov    0x44(%edx),%edx
f0104ed6:	89 50 44             	mov    %edx,0x44(%eax)
f0104ed9:	eb 0b                	jmp    f0104ee6 <dequeue+0x90>
f0104edb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104ede:	8b 50 44             	mov    0x44(%eax),%edx
f0104ee1:	8b 45 08             	mov    0x8(%ebp),%eax
f0104ee4:	89 10                	mov    %edx,(%eax)
f0104ee6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104ee9:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0104ef0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104ef3:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0104efa:	8b 45 08             	mov    0x8(%ebp),%eax
f0104efd:	8b 40 0c             	mov    0xc(%eax),%eax
f0104f00:	8d 50 ff             	lea    -0x1(%eax),%edx
f0104f03:	8b 45 08             	mov    0x8(%ebp),%eax
f0104f06:	89 50 0c             	mov    %edx,0xc(%eax)
	}
	return envItem;
f0104f09:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0104f0c:	c9                   	leave  
f0104f0d:	c3                   	ret    

f0104f0e <remove_from_queue>:

//====================================
// [5] Remove env from the given queue:
//====================================
void remove_from_queue(struct Env_Queue* queue, struct Env* e)
{
f0104f0e:	55                   	push   %ebp
f0104f0f:	89 e5                	mov    %esp,%ebp
f0104f11:	83 ec 08             	sub    $0x8,%esp
	assert(queue != NULL)	;
f0104f14:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104f18:	75 16                	jne    f0104f30 <remove_from_queue+0x22>
f0104f1a:	68 64 20 13 f0       	push   $0xf0132064
f0104f1f:	68 72 20 13 f0       	push   $0xf0132072
f0104f24:	6a 4d                	push   $0x4d
f0104f26:	68 87 20 13 f0       	push   $0xf0132087
f0104f2b:	e8 80 b2 ff ff       	call   f01001b0 <_panic>

	if (e != NULL)
f0104f30:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0104f34:	0f 84 8a 00 00 00    	je     f0104fc4 <remove_from_queue+0xb6>
	{
		LIST_REMOVE(queue, e);
f0104f3a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0104f3e:	75 14                	jne    f0104f54 <remove_from_queue+0x46>
f0104f40:	83 ec 04             	sub    $0x4,%esp
f0104f43:	68 c3 20 13 f0       	push   $0xf01320c3
f0104f48:	6a 51                	push   $0x51
f0104f4a:	68 87 20 13 f0       	push   $0xf0132087
f0104f4f:	e8 5c b2 ff ff       	call   f01001b0 <_panic>
f0104f54:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104f57:	8b 40 44             	mov    0x44(%eax),%eax
f0104f5a:	85 c0                	test   %eax,%eax
f0104f5c:	74 11                	je     f0104f6f <remove_from_queue+0x61>
f0104f5e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104f61:	8b 40 44             	mov    0x44(%eax),%eax
f0104f64:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104f67:	8b 52 48             	mov    0x48(%edx),%edx
f0104f6a:	89 50 48             	mov    %edx,0x48(%eax)
f0104f6d:	eb 0c                	jmp    f0104f7b <remove_from_queue+0x6d>
f0104f6f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104f72:	8b 50 48             	mov    0x48(%eax),%edx
f0104f75:	8b 45 08             	mov    0x8(%ebp),%eax
f0104f78:	89 50 04             	mov    %edx,0x4(%eax)
f0104f7b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104f7e:	8b 40 48             	mov    0x48(%eax),%eax
f0104f81:	85 c0                	test   %eax,%eax
f0104f83:	74 11                	je     f0104f96 <remove_from_queue+0x88>
f0104f85:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104f88:	8b 40 48             	mov    0x48(%eax),%eax
f0104f8b:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104f8e:	8b 52 44             	mov    0x44(%edx),%edx
f0104f91:	89 50 44             	mov    %edx,0x44(%eax)
f0104f94:	eb 0b                	jmp    f0104fa1 <remove_from_queue+0x93>
f0104f96:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104f99:	8b 50 44             	mov    0x44(%eax),%edx
f0104f9c:	8b 45 08             	mov    0x8(%ebp),%eax
f0104f9f:	89 10                	mov    %edx,(%eax)
f0104fa1:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104fa4:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0104fab:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104fae:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0104fb5:	8b 45 08             	mov    0x8(%ebp),%eax
f0104fb8:	8b 40 0c             	mov    0xc(%eax),%eax
f0104fbb:	8d 50 ff             	lea    -0x1(%eax),%edx
f0104fbe:	8b 45 08             	mov    0x8(%ebp),%eax
f0104fc1:	89 50 0c             	mov    %edx,0xc(%eax)
	}
}
f0104fc4:	90                   	nop
f0104fc5:	c9                   	leave  
f0104fc6:	c3                   	ret    

f0104fc7 <find_env_in_queue>:

//========================================
// [6] Search by envID in the given queue:
//========================================
struct Env* find_env_in_queue(struct Env_Queue* queue, uint32 envID)
{
f0104fc7:	55                   	push   %ebp
f0104fc8:	89 e5                	mov    %esp,%ebp
f0104fca:	83 ec 10             	sub    $0x10,%esp
	if (queue == NULL) return NULL;
f0104fcd:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104fd1:	75 07                	jne    f0104fda <find_env_in_queue+0x13>
f0104fd3:	b8 00 00 00 00       	mov    $0x0,%eax
f0104fd8:	eb 58                	jmp    f0105032 <find_env_in_queue+0x6b>

	struct Env * ptr_env=NULL;
f0104fda:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	LIST_FOREACH(ptr_env, queue)
f0104fe1:	8b 45 08             	mov    0x8(%ebp),%eax
f0104fe4:	8b 00                	mov    (%eax),%eax
f0104fe6:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0104fe9:	eb 19                	jmp    f0105004 <find_env_in_queue+0x3d>
	{
		if(ptr_env->env_id == envID)
f0104feb:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0104fee:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104ff1:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0104ff4:	75 05                	jne    f0104ffb <find_env_in_queue+0x34>
		{
			return ptr_env;
f0104ff6:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0104ff9:	eb 37                	jmp    f0105032 <find_env_in_queue+0x6b>
struct Env* find_env_in_queue(struct Env_Queue* queue, uint32 envID)
{
	if (queue == NULL) return NULL;

	struct Env * ptr_env=NULL;
	LIST_FOREACH(ptr_env, queue)
f0104ffb:	8b 45 08             	mov    0x8(%ebp),%eax
f0104ffe:	8b 40 08             	mov    0x8(%eax),%eax
f0105001:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0105004:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0105008:	74 08                	je     f0105012 <find_env_in_queue+0x4b>
f010500a:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010500d:	8b 40 44             	mov    0x44(%eax),%eax
f0105010:	eb 05                	jmp    f0105017 <find_env_in_queue+0x50>
f0105012:	b8 00 00 00 00       	mov    $0x0,%eax
f0105017:	8b 55 08             	mov    0x8(%ebp),%edx
f010501a:	89 42 08             	mov    %eax,0x8(%edx)
f010501d:	8b 45 08             	mov    0x8(%ebp),%eax
f0105020:	8b 40 08             	mov    0x8(%eax),%eax
f0105023:	85 c0                	test   %eax,%eax
f0105025:	75 c4                	jne    f0104feb <find_env_in_queue+0x24>
f0105027:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f010502b:	75 be                	jne    f0104feb <find_env_in_queue+0x24>
		if(ptr_env->env_id == envID)
		{
			return ptr_env;
		}
	}
	return NULL;
f010502d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0105032:	c9                   	leave  
f0105033:	c3                   	ret    

f0105034 <sched_delete_ready_queues>:

//========================================
// [1] Delete all ready queues:
//========================================
void sched_delete_ready_queues()
{
f0105034:	55                   	push   %ebp
f0105035:	89 e5                	mov    %esp,%ebp
	if (env_ready_queues != NULL)
		kfree(env_ready_queues);
	if (quantums != NULL)
		kfree(quantums);
#endif
}
f0105037:	90                   	nop
f0105038:	5d                   	pop    %ebp
f0105039:	c3                   	ret    

f010503a <sched_insert_ready0>:

//=================================================
// [2] Insert the given Env in the 1st Ready Queue:
//=================================================
void sched_insert_ready0(struct Env* env)
{
f010503a:	55                   	push   %ebp
f010503b:	89 e5                	mov    %esp,%ebp
f010503d:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0105040:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0105044:	74 1d                	je     f0105063 <sched_insert_ready0+0x29>
	{
		env->env_status = ENV_READY ;
f0105046:	8b 45 08             	mov    0x8(%ebp),%eax
f0105049:	c7 40 54 01 00 00 00 	movl   $0x1,0x54(%eax)
		enqueue(&(env_ready_queues[0]), env);
f0105050:	83 ec 08             	sub    $0x8,%esp
f0105053:	ff 75 08             	pushl  0x8(%ebp)
f0105056:	68 60 3a 25 f0       	push   $0xf0253a60
f010505b:	e8 65 fd ff ff       	call   f0104dc5 <enqueue>
f0105060:	83 c4 10             	add    $0x10,%esp
	}
}
f0105063:	90                   	nop
f0105064:	c9                   	leave  
f0105065:	c3                   	ret    

f0105066 <sched_remove_ready>:

//=================================================
// [3] Remove the given Env from the Ready Queue(s):
//=================================================
void sched_remove_ready(struct Env* env)
{
f0105066:	55                   	push   %ebp
f0105067:	89 e5                	mov    %esp,%ebp
f0105069:	83 ec 18             	sub    $0x18,%esp
	if(env != NULL)
f010506c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0105070:	0f 84 02 01 00 00    	je     f0105178 <sched_remove_ready+0x112>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105076:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010507d:	e9 e5 00 00 00       	jmp    f0105167 <sched_remove_ready+0x101>
		{
			struct Env * ptr_env = find_env_in_queue(&(env_ready_queues[i]), env->env_id);
f0105082:	8b 45 08             	mov    0x8(%ebp),%eax
f0105085:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105088:	89 c2                	mov    %eax,%edx
f010508a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010508d:	c1 e0 04             	shl    $0x4,%eax
f0105090:	05 60 3a 25 f0       	add    $0xf0253a60,%eax
f0105095:	52                   	push   %edx
f0105096:	50                   	push   %eax
f0105097:	e8 2b ff ff ff       	call   f0104fc7 <find_env_in_queue>
f010509c:	83 c4 08             	add    $0x8,%esp
f010509f:	89 45 f0             	mov    %eax,-0x10(%ebp)
			if (ptr_env != NULL)
f01050a2:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01050a6:	0f 84 b8 00 00 00    	je     f0105164 <sched_remove_ready+0xfe>
			{
				LIST_REMOVE(&(env_ready_queues[i]), env);
f01050ac:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01050b0:	75 17                	jne    f01050c9 <sched_remove_ready+0x63>
f01050b2:	83 ec 04             	sub    $0x4,%esp
f01050b5:	68 c3 20 13 f0       	push   $0xf01320c3
f01050ba:	68 90 00 00 00       	push   $0x90
f01050bf:	68 87 20 13 f0       	push   $0xf0132087
f01050c4:	e8 e7 b0 ff ff       	call   f01001b0 <_panic>
f01050c9:	8b 45 08             	mov    0x8(%ebp),%eax
f01050cc:	8b 40 44             	mov    0x44(%eax),%eax
f01050cf:	85 c0                	test   %eax,%eax
f01050d1:	74 11                	je     f01050e4 <sched_remove_ready+0x7e>
f01050d3:	8b 45 08             	mov    0x8(%ebp),%eax
f01050d6:	8b 40 44             	mov    0x44(%eax),%eax
f01050d9:	8b 55 08             	mov    0x8(%ebp),%edx
f01050dc:	8b 52 48             	mov    0x48(%edx),%edx
f01050df:	89 50 48             	mov    %edx,0x48(%eax)
f01050e2:	eb 14                	jmp    f01050f8 <sched_remove_ready+0x92>
f01050e4:	8b 45 08             	mov    0x8(%ebp),%eax
f01050e7:	8b 40 48             	mov    0x48(%eax),%eax
f01050ea:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01050ed:	c1 e2 04             	shl    $0x4,%edx
f01050f0:	81 c2 64 3a 25 f0    	add    $0xf0253a64,%edx
f01050f6:	89 02                	mov    %eax,(%edx)
f01050f8:	8b 45 08             	mov    0x8(%ebp),%eax
f01050fb:	8b 40 48             	mov    0x48(%eax),%eax
f01050fe:	85 c0                	test   %eax,%eax
f0105100:	74 11                	je     f0105113 <sched_remove_ready+0xad>
f0105102:	8b 45 08             	mov    0x8(%ebp),%eax
f0105105:	8b 40 48             	mov    0x48(%eax),%eax
f0105108:	8b 55 08             	mov    0x8(%ebp),%edx
f010510b:	8b 52 44             	mov    0x44(%edx),%edx
f010510e:	89 50 44             	mov    %edx,0x44(%eax)
f0105111:	eb 14                	jmp    f0105127 <sched_remove_ready+0xc1>
f0105113:	8b 45 08             	mov    0x8(%ebp),%eax
f0105116:	8b 40 44             	mov    0x44(%eax),%eax
f0105119:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010511c:	c1 e2 04             	shl    $0x4,%edx
f010511f:	81 c2 60 3a 25 f0    	add    $0xf0253a60,%edx
f0105125:	89 02                	mov    %eax,(%edx)
f0105127:	8b 45 08             	mov    0x8(%ebp),%eax
f010512a:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0105131:	8b 45 08             	mov    0x8(%ebp),%eax
f0105134:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010513b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010513e:	c1 e0 04             	shl    $0x4,%eax
f0105141:	05 6c 3a 25 f0       	add    $0xf0253a6c,%eax
f0105146:	8b 00                	mov    (%eax),%eax
f0105148:	8d 50 ff             	lea    -0x1(%eax),%edx
f010514b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010514e:	c1 e0 04             	shl    $0x4,%eax
f0105151:	05 6c 3a 25 f0       	add    $0xf0253a6c,%eax
f0105156:	89 10                	mov    %edx,(%eax)
				env->env_status = ENV_UNKNOWN;
f0105158:	8b 45 08             	mov    0x8(%ebp),%eax
f010515b:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
				return;
f0105162:	eb 14                	jmp    f0105178 <sched_remove_ready+0x112>
//=================================================
void sched_remove_ready(struct Env* env)
{
	if(env != NULL)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105164:	ff 45 f4             	incl   -0xc(%ebp)
f0105167:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f010516c:	0f b6 c0             	movzbl %al,%eax
f010516f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0105172:	0f 8f 0a ff ff ff    	jg     f0105082 <sched_remove_ready+0x1c>
				env->env_status = ENV_UNKNOWN;
				return;
			}
		}
	}
}
f0105178:	c9                   	leave  
f0105179:	c3                   	ret    

f010517a <sched_insert_new>:

//=================================================
// [4] Insert the given Env in NEW Queue:
//=================================================
void sched_insert_new(struct Env* env)
{
f010517a:	55                   	push   %ebp
f010517b:	89 e5                	mov    %esp,%ebp
f010517d:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0105180:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0105184:	74 1d                	je     f01051a3 <sched_insert_new+0x29>
	{
		env->env_status = ENV_NEW ;
f0105186:	8b 45 08             	mov    0x8(%ebp),%eax
f0105189:	c7 40 54 04 00 00 00 	movl   $0x4,0x54(%eax)
		enqueue(&env_new_queue, env);
f0105190:	83 ec 08             	sub    $0x8,%esp
f0105193:	ff 75 08             	pushl  0x8(%ebp)
f0105196:	68 f8 bd 2b f0       	push   $0xf02bbdf8
f010519b:	e8 25 fc ff ff       	call   f0104dc5 <enqueue>
f01051a0:	83 c4 10             	add    $0x10,%esp
	}
}
f01051a3:	90                   	nop
f01051a4:	c9                   	leave  
f01051a5:	c3                   	ret    

f01051a6 <sched_remove_new>:

//=================================================
// [5] Remove the given Env from NEW Queue:
//=================================================
void sched_remove_new(struct Env* env)
{
f01051a6:	55                   	push   %ebp
f01051a7:	89 e5                	mov    %esp,%ebp
f01051a9:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f01051ac:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01051b0:	0f 84 92 00 00 00    	je     f0105248 <sched_remove_new+0xa2>
	{
		LIST_REMOVE(&env_new_queue, env) ;
f01051b6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01051ba:	75 17                	jne    f01051d3 <sched_remove_new+0x2d>
f01051bc:	83 ec 04             	sub    $0x4,%esp
f01051bf:	68 c3 20 13 f0       	push   $0xf01320c3
f01051c4:	68 ab 00 00 00       	push   $0xab
f01051c9:	68 87 20 13 f0       	push   $0xf0132087
f01051ce:	e8 dd af ff ff       	call   f01001b0 <_panic>
f01051d3:	8b 45 08             	mov    0x8(%ebp),%eax
f01051d6:	8b 40 44             	mov    0x44(%eax),%eax
f01051d9:	85 c0                	test   %eax,%eax
f01051db:	74 11                	je     f01051ee <sched_remove_new+0x48>
f01051dd:	8b 45 08             	mov    0x8(%ebp),%eax
f01051e0:	8b 40 44             	mov    0x44(%eax),%eax
f01051e3:	8b 55 08             	mov    0x8(%ebp),%edx
f01051e6:	8b 52 48             	mov    0x48(%edx),%edx
f01051e9:	89 50 48             	mov    %edx,0x48(%eax)
f01051ec:	eb 0b                	jmp    f01051f9 <sched_remove_new+0x53>
f01051ee:	8b 45 08             	mov    0x8(%ebp),%eax
f01051f1:	8b 40 48             	mov    0x48(%eax),%eax
f01051f4:	a3 fc bd 2b f0       	mov    %eax,0xf02bbdfc
f01051f9:	8b 45 08             	mov    0x8(%ebp),%eax
f01051fc:	8b 40 48             	mov    0x48(%eax),%eax
f01051ff:	85 c0                	test   %eax,%eax
f0105201:	74 11                	je     f0105214 <sched_remove_new+0x6e>
f0105203:	8b 45 08             	mov    0x8(%ebp),%eax
f0105206:	8b 40 48             	mov    0x48(%eax),%eax
f0105209:	8b 55 08             	mov    0x8(%ebp),%edx
f010520c:	8b 52 44             	mov    0x44(%edx),%edx
f010520f:	89 50 44             	mov    %edx,0x44(%eax)
f0105212:	eb 0b                	jmp    f010521f <sched_remove_new+0x79>
f0105214:	8b 45 08             	mov    0x8(%ebp),%eax
f0105217:	8b 40 44             	mov    0x44(%eax),%eax
f010521a:	a3 f8 bd 2b f0       	mov    %eax,0xf02bbdf8
f010521f:	8b 45 08             	mov    0x8(%ebp),%eax
f0105222:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0105229:	8b 45 08             	mov    0x8(%ebp),%eax
f010522c:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0105233:	a1 04 be 2b f0       	mov    0xf02bbe04,%eax
f0105238:	48                   	dec    %eax
f0105239:	a3 04 be 2b f0       	mov    %eax,0xf02bbe04
		env->env_status = ENV_UNKNOWN;
f010523e:	8b 45 08             	mov    0x8(%ebp),%eax
f0105241:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
	}
}
f0105248:	90                   	nop
f0105249:	c9                   	leave  
f010524a:	c3                   	ret    

f010524b <sched_insert_exit>:

//=================================================
// [6] Insert the given Env in EXIT Queue:
//=================================================
void sched_insert_exit(struct Env* env)
{
f010524b:	55                   	push   %ebp
f010524c:	89 e5                	mov    %esp,%ebp
f010524e:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0105251:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0105255:	74 34                	je     f010528b <sched_insert_exit+0x40>
	{
		if(isBufferingEnabled()) {cleanup_buffers(env);}
f0105257:	e8 e6 85 00 00       	call   f010d842 <isBufferingEnabled>
f010525c:	84 c0                	test   %al,%al
f010525e:	74 0e                	je     f010526e <sched_insert_exit+0x23>
f0105260:	83 ec 0c             	sub    $0xc,%esp
f0105263:	ff 75 08             	pushl  0x8(%ebp)
f0105266:	e8 32 5b 00 00       	call   f010ad9d <cleanup_buffers>
f010526b:	83 c4 10             	add    $0x10,%esp
		env->env_status = ENV_EXIT ;
f010526e:	8b 45 08             	mov    0x8(%ebp),%eax
f0105271:	c7 40 54 05 00 00 00 	movl   $0x5,0x54(%eax)
		enqueue(&env_exit_queue, env);
f0105278:	83 ec 08             	sub    $0x8,%esp
f010527b:	ff 75 08             	pushl  0x8(%ebp)
f010527e:	68 c4 99 2b f0       	push   $0xf02b99c4
f0105283:	e8 3d fb ff ff       	call   f0104dc5 <enqueue>
f0105288:	83 c4 10             	add    $0x10,%esp
	}
}
f010528b:	90                   	nop
f010528c:	c9                   	leave  
f010528d:	c3                   	ret    

f010528e <sched_remove_exit>:
//=================================================
// [7] Remove the given Env from EXIT Queue:
//=================================================
void sched_remove_exit(struct Env* env)
{
f010528e:	55                   	push   %ebp
f010528f:	89 e5                	mov    %esp,%ebp
f0105291:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0105294:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0105298:	0f 84 92 00 00 00    	je     f0105330 <sched_remove_exit+0xa2>
	{
		LIST_REMOVE(&env_exit_queue, env) ;
f010529e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01052a2:	75 17                	jne    f01052bb <sched_remove_exit+0x2d>
f01052a4:	83 ec 04             	sub    $0x4,%esp
f01052a7:	68 c3 20 13 f0       	push   $0xf01320c3
f01052ac:	68 c3 00 00 00       	push   $0xc3
f01052b1:	68 87 20 13 f0       	push   $0xf0132087
f01052b6:	e8 f5 ae ff ff       	call   f01001b0 <_panic>
f01052bb:	8b 45 08             	mov    0x8(%ebp),%eax
f01052be:	8b 40 44             	mov    0x44(%eax),%eax
f01052c1:	85 c0                	test   %eax,%eax
f01052c3:	74 11                	je     f01052d6 <sched_remove_exit+0x48>
f01052c5:	8b 45 08             	mov    0x8(%ebp),%eax
f01052c8:	8b 40 44             	mov    0x44(%eax),%eax
f01052cb:	8b 55 08             	mov    0x8(%ebp),%edx
f01052ce:	8b 52 48             	mov    0x48(%edx),%edx
f01052d1:	89 50 48             	mov    %edx,0x48(%eax)
f01052d4:	eb 0b                	jmp    f01052e1 <sched_remove_exit+0x53>
f01052d6:	8b 45 08             	mov    0x8(%ebp),%eax
f01052d9:	8b 40 48             	mov    0x48(%eax),%eax
f01052dc:	a3 c8 99 2b f0       	mov    %eax,0xf02b99c8
f01052e1:	8b 45 08             	mov    0x8(%ebp),%eax
f01052e4:	8b 40 48             	mov    0x48(%eax),%eax
f01052e7:	85 c0                	test   %eax,%eax
f01052e9:	74 11                	je     f01052fc <sched_remove_exit+0x6e>
f01052eb:	8b 45 08             	mov    0x8(%ebp),%eax
f01052ee:	8b 40 48             	mov    0x48(%eax),%eax
f01052f1:	8b 55 08             	mov    0x8(%ebp),%edx
f01052f4:	8b 52 44             	mov    0x44(%edx),%edx
f01052f7:	89 50 44             	mov    %edx,0x44(%eax)
f01052fa:	eb 0b                	jmp    f0105307 <sched_remove_exit+0x79>
f01052fc:	8b 45 08             	mov    0x8(%ebp),%eax
f01052ff:	8b 40 44             	mov    0x44(%eax),%eax
f0105302:	a3 c4 99 2b f0       	mov    %eax,0xf02b99c4
f0105307:	8b 45 08             	mov    0x8(%ebp),%eax
f010530a:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0105311:	8b 45 08             	mov    0x8(%ebp),%eax
f0105314:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010531b:	a1 d0 99 2b f0       	mov    0xf02b99d0,%eax
f0105320:	48                   	dec    %eax
f0105321:	a3 d0 99 2b f0       	mov    %eax,0xf02b99d0
		env->env_status = ENV_UNKNOWN;
f0105326:	8b 45 08             	mov    0x8(%ebp),%eax
f0105329:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
	}
}
f0105330:	90                   	nop
f0105331:	c9                   	leave  
f0105332:	c3                   	ret    

f0105333 <sched_new_env>:

//=================================================
// [8] Sched the given Env in NEW Queue:
//=================================================
void sched_new_env(struct Env* e)
{
f0105333:	55                   	push   %ebp
f0105334:	89 e5                	mov    %esp,%ebp
f0105336:	83 ec 08             	sub    $0x8,%esp
	//add the given env to the scheduler NEW queue
	if (e!=NULL)
f0105339:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010533d:	74 0e                	je     f010534d <sched_new_env+0x1a>
	{
		sched_insert_new(e);
f010533f:	83 ec 0c             	sub    $0xc,%esp
f0105342:	ff 75 08             	pushl  0x8(%ebp)
f0105345:	e8 30 fe ff ff       	call   f010517a <sched_insert_new>
f010534a:	83 c4 10             	add    $0x10,%esp
	}
}
f010534d:	90                   	nop
f010534e:	c9                   	leave  
f010534f:	c3                   	ret    

f0105350 <sched_run_env>:

//=================================================
// [9] Run the given EnvID:
//=================================================
void sched_run_env(uint32 envId)
{
f0105350:	55                   	push   %ebp
f0105351:	89 e5                	mov    %esp,%ebp
f0105353:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f0105356:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	LIST_FOREACH(ptr_env, &env_new_queue)
f010535d:	a1 f8 bd 2b f0       	mov    0xf02bbdf8,%eax
f0105362:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105365:	eb 3d                	jmp    f01053a4 <sched_run_env+0x54>
	{
		if(ptr_env->env_id == envId)
f0105367:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010536a:	8b 40 4c             	mov    0x4c(%eax),%eax
f010536d:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105370:	75 2a                	jne    f010539c <sched_run_env+0x4c>
		{
			sched_remove_new(ptr_env);
f0105372:	83 ec 0c             	sub    $0xc,%esp
f0105375:	ff 75 f4             	pushl  -0xc(%ebp)
f0105378:	e8 29 fe ff ff       	call   f01051a6 <sched_remove_new>
f010537d:	83 c4 10             	add    $0x10,%esp
			sched_insert_ready0(ptr_env);
f0105380:	83 ec 0c             	sub    $0xc,%esp
f0105383:	ff 75 f4             	pushl  -0xc(%ebp)
f0105386:	e8 af fc ff ff       	call   f010503a <sched_insert_ready0>
f010538b:	83 c4 10             	add    $0x10,%esp

			/*2015*///if scheduler not run yet, then invoke it!
			if (scheduler_status == SCH_STOPPED)
f010538e:	a1 14 be 2b f0       	mov    0xf02bbe14,%eax
f0105393:	85 c0                	test   %eax,%eax
f0105395:	75 36                	jne    f01053cd <sched_run_env+0x7d>
			{
				fos_scheduler();
f0105397:	e8 7d 0e 00 00       	call   f0106219 <fos_scheduler>
// [9] Run the given EnvID:
//=================================================
void sched_run_env(uint32 envId)
{
	struct Env* ptr_env=NULL;
	LIST_FOREACH(ptr_env, &env_new_queue)
f010539c:	a1 00 be 2b f0       	mov    0xf02bbe00,%eax
f01053a1:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01053a4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01053a8:	74 08                	je     f01053b2 <sched_run_env+0x62>
f01053aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01053ad:	8b 40 44             	mov    0x44(%eax),%eax
f01053b0:	eb 05                	jmp    f01053b7 <sched_run_env+0x67>
f01053b2:	b8 00 00 00 00       	mov    $0x0,%eax
f01053b7:	a3 00 be 2b f0       	mov    %eax,0xf02bbe00
f01053bc:	a1 00 be 2b f0       	mov    0xf02bbe00,%eax
f01053c1:	85 c0                	test   %eax,%eax
f01053c3:	75 a2                	jne    f0105367 <sched_run_env+0x17>
f01053c5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01053c9:	75 9c                	jne    f0105367 <sched_run_env+0x17>
	//	LIST_FOREACH(ptr_env, &env_ready_queue)
	//	{
	//		cprintf("%s - %d\n", ptr_env->prog_name, ptr_env->env_id);
	//	}

}
f01053cb:	eb 01                	jmp    f01053ce <sched_run_env+0x7e>
			/*2015*///if scheduler not run yet, then invoke it!
			if (scheduler_status == SCH_STOPPED)
			{
				fos_scheduler();
			}
			break;
f01053cd:	90                   	nop
	//	LIST_FOREACH(ptr_env, &env_ready_queue)
	//	{
	//		cprintf("%s - %d\n", ptr_env->prog_name, ptr_env->env_id);
	//	}

}
f01053ce:	90                   	nop
f01053cf:	c9                   	leave  
f01053d0:	c3                   	ret    

f01053d1 <sched_exit_env>:

//=================================================
// [10] Exit the given EnvID:
//=================================================
void sched_exit_env(uint32 envId)
{
f01053d1:	55                   	push   %ebp
f01053d2:	89 e5                	mov    %esp,%ebp
f01053d4:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f01053d7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int found = 0;
f01053de:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	if (!found)
f01053e5:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01053e9:	75 59                	jne    f0105444 <sched_exit_env+0x73>
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f01053eb:	a1 f8 bd 2b f0       	mov    0xf02bbdf8,%eax
f01053f0:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01053f3:	eb 28                	jmp    f010541d <sched_exit_env+0x4c>
		{
			if(ptr_env->env_id == envId)
f01053f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01053f8:	8b 40 4c             	mov    0x4c(%eax),%eax
f01053fb:	3b 45 08             	cmp    0x8(%ebp),%eax
f01053fe:	75 15                	jne    f0105415 <sched_exit_env+0x44>
			{
				sched_remove_new(ptr_env);
f0105400:	83 ec 0c             	sub    $0xc,%esp
f0105403:	ff 75 f4             	pushl  -0xc(%ebp)
f0105406:	e8 9b fd ff ff       	call   f01051a6 <sched_remove_new>
f010540b:	83 c4 10             	add    $0x10,%esp
				found = 1;
f010540e:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
{
	struct Env* ptr_env=NULL;
	int found = 0;
	if (!found)
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f0105415:	a1 00 be 2b f0       	mov    0xf02bbe00,%eax
f010541a:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010541d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105421:	74 08                	je     f010542b <sched_exit_env+0x5a>
f0105423:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105426:	8b 40 44             	mov    0x44(%eax),%eax
f0105429:	eb 05                	jmp    f0105430 <sched_exit_env+0x5f>
f010542b:	b8 00 00 00 00       	mov    $0x0,%eax
f0105430:	a3 00 be 2b f0       	mov    %eax,0xf02bbe00
f0105435:	a1 00 be 2b f0       	mov    0xf02bbe00,%eax
f010543a:	85 c0                	test   %eax,%eax
f010543c:	75 b7                	jne    f01053f5 <sched_exit_env+0x24>
f010543e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105442:	75 b1                	jne    f01053f5 <sched_exit_env+0x24>
				found = 1;
				//			return;
			}
		}
	}
	if (!found)
f0105444:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105448:	0f 85 6e 01 00 00    	jne    f01055bc <sched_exit_env+0x1eb>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f010544e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0105455:	e9 4e 01 00 00       	jmp    f01055a8 <sched_exit_env+0x1d7>
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
f010545a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010545d:	c1 e0 04             	shl    $0x4,%eax
f0105460:	05 60 3a 25 f0       	add    $0xf0253a60,%eax
f0105465:	8b 00                	mov    (%eax),%eax
f0105467:	85 c0                	test   %eax,%eax
f0105469:	0f 84 30 01 00 00    	je     f010559f <sched_exit_env+0x1ce>
			{
				ptr_env=NULL;
f010546f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105476:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105479:	c1 e0 04             	shl    $0x4,%eax
f010547c:	05 60 3a 25 f0       	add    $0xf0253a60,%eax
f0105481:	8b 00                	mov    (%eax),%eax
f0105483:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105486:	e9 d4 00 00 00       	jmp    f010555f <sched_exit_env+0x18e>
				{
					if(ptr_env->env_id == envId)
f010548b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010548e:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105491:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105494:	0f 85 b5 00 00 00    	jne    f010554f <sched_exit_env+0x17e>
					{
						LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f010549a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010549e:	75 17                	jne    f01054b7 <sched_exit_env+0xe6>
f01054a0:	83 ec 04             	sub    $0x4,%esp
f01054a3:	68 c3 20 13 f0       	push   $0xf01320c3
f01054a8:	68 10 01 00 00       	push   $0x110
f01054ad:	68 87 20 13 f0       	push   $0xf0132087
f01054b2:	e8 f9 ac ff ff       	call   f01001b0 <_panic>
f01054b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01054ba:	8b 40 44             	mov    0x44(%eax),%eax
f01054bd:	85 c0                	test   %eax,%eax
f01054bf:	74 11                	je     f01054d2 <sched_exit_env+0x101>
f01054c1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01054c4:	8b 40 44             	mov    0x44(%eax),%eax
f01054c7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01054ca:	8b 52 48             	mov    0x48(%edx),%edx
f01054cd:	89 50 48             	mov    %edx,0x48(%eax)
f01054d0:	eb 14                	jmp    f01054e6 <sched_exit_env+0x115>
f01054d2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01054d5:	8b 40 48             	mov    0x48(%eax),%eax
f01054d8:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01054db:	c1 e2 04             	shl    $0x4,%edx
f01054de:	81 c2 64 3a 25 f0    	add    $0xf0253a64,%edx
f01054e4:	89 02                	mov    %eax,(%edx)
f01054e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01054e9:	8b 40 48             	mov    0x48(%eax),%eax
f01054ec:	85 c0                	test   %eax,%eax
f01054ee:	74 11                	je     f0105501 <sched_exit_env+0x130>
f01054f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01054f3:	8b 40 48             	mov    0x48(%eax),%eax
f01054f6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01054f9:	8b 52 44             	mov    0x44(%edx),%edx
f01054fc:	89 50 44             	mov    %edx,0x44(%eax)
f01054ff:	eb 14                	jmp    f0105515 <sched_exit_env+0x144>
f0105501:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105504:	8b 40 44             	mov    0x44(%eax),%eax
f0105507:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010550a:	c1 e2 04             	shl    $0x4,%edx
f010550d:	81 c2 60 3a 25 f0    	add    $0xf0253a60,%edx
f0105513:	89 02                	mov    %eax,(%edx)
f0105515:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105518:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f010551f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105522:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0105529:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010552c:	c1 e0 04             	shl    $0x4,%eax
f010552f:	05 6c 3a 25 f0       	add    $0xf0253a6c,%eax
f0105534:	8b 00                	mov    (%eax),%eax
f0105536:	8d 50 ff             	lea    -0x1(%eax),%edx
f0105539:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010553c:	c1 e0 04             	shl    $0x4,%eax
f010553f:	05 6c 3a 25 f0       	add    $0xf0253a6c,%eax
f0105544:	89 10                	mov    %edx,(%eax)
						found = 1;
f0105546:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
						break;
f010554d:	eb 50                	jmp    f010559f <sched_exit_env+0x1ce>
		for (int i = 0 ; i < num_of_ready_queues ; i++)
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
			{
				ptr_env=NULL;
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f010554f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105552:	c1 e0 04             	shl    $0x4,%eax
f0105555:	05 68 3a 25 f0       	add    $0xf0253a68,%eax
f010555a:	8b 00                	mov    (%eax),%eax
f010555c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010555f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105563:	74 08                	je     f010556d <sched_exit_env+0x19c>
f0105565:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105568:	8b 40 44             	mov    0x44(%eax),%eax
f010556b:	eb 05                	jmp    f0105572 <sched_exit_env+0x1a1>
f010556d:	b8 00 00 00 00       	mov    $0x0,%eax
f0105572:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105575:	c1 e2 04             	shl    $0x4,%edx
f0105578:	81 c2 68 3a 25 f0    	add    $0xf0253a68,%edx
f010557e:	89 02                	mov    %eax,(%edx)
f0105580:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105583:	c1 e0 04             	shl    $0x4,%eax
f0105586:	05 68 3a 25 f0       	add    $0xf0253a68,%eax
f010558b:	8b 00                	mov    (%eax),%eax
f010558d:	85 c0                	test   %eax,%eax
f010558f:	0f 85 f6 fe ff ff    	jne    f010548b <sched_exit_env+0xba>
f0105595:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105599:	0f 85 ec fe ff ff    	jne    f010548b <sched_exit_env+0xba>
						found = 1;
						break;
					}
				}
			}
			if (found)
f010559f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01055a3:	75 16                	jne    f01055bb <sched_exit_env+0x1ea>
			}
		}
	}
	if (!found)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f01055a5:	ff 45 ec             	incl   -0x14(%ebp)
f01055a8:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01055ad:	0f b6 c0             	movzbl %al,%eax
f01055b0:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01055b3:	0f 8f a1 fe ff ff    	jg     f010545a <sched_exit_env+0x89>
f01055b9:	eb 01                	jmp    f01055bc <sched_exit_env+0x1eb>
						break;
					}
				}
			}
			if (found)
				break;
f01055bb:	90                   	nop
		}
	}
	if (!found)
f01055bc:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01055c0:	75 1c                	jne    f01055de <sched_exit_env+0x20d>
	{
		if (curenv->env_id == envId)
f01055c2:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f01055c7:	8b 40 4c             	mov    0x4c(%eax),%eax
f01055ca:	3b 45 08             	cmp    0x8(%ebp),%eax
f01055cd:	75 0f                	jne    f01055de <sched_exit_env+0x20d>
		{
			ptr_env = curenv;
f01055cf:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f01055d4:	89 45 f4             	mov    %eax,-0xc(%ebp)
			found = 1;
f01055d7:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
		}
	}

	if (found)
f01055de:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01055e2:	74 2a                	je     f010560e <sched_exit_env+0x23d>
	{
		sched_insert_exit(ptr_env);
f01055e4:	83 ec 0c             	sub    $0xc,%esp
f01055e7:	ff 75 f4             	pushl  -0xc(%ebp)
f01055ea:	e8 5c fc ff ff       	call   f010524b <sched_insert_exit>
f01055ef:	83 c4 10             	add    $0x10,%esp

		//If it's the curenv, then reinvoke the scheduler as there's no meaning to return back to an exited env
		if (curenv->env_id == envId)
f01055f2:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f01055f7:	8b 40 4c             	mov    0x4c(%eax),%eax
f01055fa:	3b 45 08             	cmp    0x8(%ebp),%eax
f01055fd:	75 0f                	jne    f010560e <sched_exit_env+0x23d>
		{
			curenv = NULL;
f01055ff:	c7 05 74 31 25 f0 00 	movl   $0x0,0xf0253174
f0105606:	00 00 00 
			fos_scheduler();
f0105609:	e8 0b 0c 00 00       	call   f0106219 <fos_scheduler>
		}
	}
}
f010560e:	90                   	nop
f010560f:	c9                   	leave  
f0105610:	c3                   	ret    

f0105611 <sched_kill_env>:
/*2015*/
//=================================================
// [11] KILL the given EnvID:
//=================================================
void sched_kill_env(uint32 envId)
{
f0105611:	55                   	push   %ebp
f0105612:	89 e5                	mov    %esp,%ebp
f0105614:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f0105617:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int found = 0;
f010561e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	if (!found)
f0105625:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105629:	0f 85 9d 00 00 00    	jne    f01056cc <sched_kill_env+0xbb>
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f010562f:	a1 f8 bd 2b f0       	mov    0xf02bbdf8,%eax
f0105634:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105637:	eb 64                	jmp    f010569d <sched_kill_env+0x8c>
															{
			if(ptr_env->env_id == envId)
f0105639:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010563c:	8b 40 4c             	mov    0x4c(%eax),%eax
f010563f:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105642:	75 51                	jne    f0105695 <sched_kill_env+0x84>
			{
				cprintf("killing[%d] %s from the NEW queue...", ptr_env->env_id, ptr_env->prog_name);
f0105644:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105647:	8d 50 5c             	lea    0x5c(%eax),%edx
f010564a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010564d:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105650:	83 ec 04             	sub    $0x4,%esp
f0105653:	52                   	push   %edx
f0105654:	50                   	push   %eax
f0105655:	68 e4 20 13 f0       	push   $0xf01320e4
f010565a:	e8 d2 b7 ff ff       	call   f0100e31 <cprintf>
f010565f:	83 c4 10             	add    $0x10,%esp
				sched_remove_new(ptr_env);
f0105662:	83 ec 0c             	sub    $0xc,%esp
f0105665:	ff 75 f4             	pushl  -0xc(%ebp)
f0105668:	e8 39 fb ff ff       	call   f01051a6 <sched_remove_new>
f010566d:	83 c4 10             	add    $0x10,%esp
				env_free(ptr_env);
f0105670:	83 ec 0c             	sub    $0xc,%esp
f0105673:	ff 75 f4             	pushl  -0xc(%ebp)
f0105676:	e8 2e 43 00 00       	call   f01099a9 <env_free>
f010567b:	83 c4 10             	add    $0x10,%esp
				cprintf("DONE\n");
f010567e:	83 ec 0c             	sub    $0xc,%esp
f0105681:	68 09 21 13 f0       	push   $0xf0132109
f0105686:	e8 a6 b7 ff ff       	call   f0100e31 <cprintf>
f010568b:	83 c4 10             	add    $0x10,%esp
				found = 1;
f010568e:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
{
	struct Env* ptr_env=NULL;
	int found = 0;
	if (!found)
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f0105695:	a1 00 be 2b f0       	mov    0xf02bbe00,%eax
f010569a:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010569d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01056a1:	74 08                	je     f01056ab <sched_kill_env+0x9a>
f01056a3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01056a6:	8b 40 44             	mov    0x44(%eax),%eax
f01056a9:	eb 05                	jmp    f01056b0 <sched_kill_env+0x9f>
f01056ab:	b8 00 00 00 00       	mov    $0x0,%eax
f01056b0:	a3 00 be 2b f0       	mov    %eax,0xf02bbe00
f01056b5:	a1 00 be 2b f0       	mov    0xf02bbe00,%eax
f01056ba:	85 c0                	test   %eax,%eax
f01056bc:	0f 85 77 ff ff ff    	jne    f0105639 <sched_kill_env+0x28>
f01056c2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01056c6:	0f 85 6d ff ff ff    	jne    f0105639 <sched_kill_env+0x28>
				found = 1;
				//			return;
			}
															}
	}
	if (!found)
f01056cc:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01056d0:	0f 85 aa 01 00 00    	jne    f0105880 <sched_kill_env+0x26f>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f01056d6:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f01056dd:	e9 8a 01 00 00       	jmp    f010586c <sched_kill_env+0x25b>
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
f01056e2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01056e5:	c1 e0 04             	shl    $0x4,%eax
f01056e8:	05 60 3a 25 f0       	add    $0xf0253a60,%eax
f01056ed:	8b 00                	mov    (%eax),%eax
f01056ef:	85 c0                	test   %eax,%eax
f01056f1:	0f 84 6c 01 00 00    	je     f0105863 <sched_kill_env+0x252>
			{
				ptr_env=NULL;
f01056f7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f01056fe:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105701:	c1 e0 04             	shl    $0x4,%eax
f0105704:	05 60 3a 25 f0       	add    $0xf0253a60,%eax
f0105709:	8b 00                	mov    (%eax),%eax
f010570b:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010570e:	e9 10 01 00 00       	jmp    f0105823 <sched_kill_env+0x212>
				{
					if(ptr_env->env_id == envId)
f0105713:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105716:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105719:	3b 45 08             	cmp    0x8(%ebp),%eax
f010571c:	0f 85 f1 00 00 00    	jne    f0105813 <sched_kill_env+0x202>
					{
						cprintf("killing[%d] %s from the READY queue #%d...", ptr_env->env_id, ptr_env->prog_name, i);
f0105722:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105725:	8d 50 5c             	lea    0x5c(%eax),%edx
f0105728:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010572b:	8b 40 4c             	mov    0x4c(%eax),%eax
f010572e:	ff 75 ec             	pushl  -0x14(%ebp)
f0105731:	52                   	push   %edx
f0105732:	50                   	push   %eax
f0105733:	68 10 21 13 f0       	push   $0xf0132110
f0105738:	e8 f4 b6 ff ff       	call   f0100e31 <cprintf>
f010573d:	83 c4 10             	add    $0x10,%esp
						LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f0105740:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105744:	75 17                	jne    f010575d <sched_kill_env+0x14c>
f0105746:	83 ec 04             	sub    $0x4,%esp
f0105749:	68 c3 20 13 f0       	push   $0xf01320c3
f010574e:	68 54 01 00 00       	push   $0x154
f0105753:	68 87 20 13 f0       	push   $0xf0132087
f0105758:	e8 53 aa ff ff       	call   f01001b0 <_panic>
f010575d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105760:	8b 40 44             	mov    0x44(%eax),%eax
f0105763:	85 c0                	test   %eax,%eax
f0105765:	74 11                	je     f0105778 <sched_kill_env+0x167>
f0105767:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010576a:	8b 40 44             	mov    0x44(%eax),%eax
f010576d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105770:	8b 52 48             	mov    0x48(%edx),%edx
f0105773:	89 50 48             	mov    %edx,0x48(%eax)
f0105776:	eb 14                	jmp    f010578c <sched_kill_env+0x17b>
f0105778:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010577b:	8b 40 48             	mov    0x48(%eax),%eax
f010577e:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105781:	c1 e2 04             	shl    $0x4,%edx
f0105784:	81 c2 64 3a 25 f0    	add    $0xf0253a64,%edx
f010578a:	89 02                	mov    %eax,(%edx)
f010578c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010578f:	8b 40 48             	mov    0x48(%eax),%eax
f0105792:	85 c0                	test   %eax,%eax
f0105794:	74 11                	je     f01057a7 <sched_kill_env+0x196>
f0105796:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105799:	8b 40 48             	mov    0x48(%eax),%eax
f010579c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010579f:	8b 52 44             	mov    0x44(%edx),%edx
f01057a2:	89 50 44             	mov    %edx,0x44(%eax)
f01057a5:	eb 14                	jmp    f01057bb <sched_kill_env+0x1aa>
f01057a7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01057aa:	8b 40 44             	mov    0x44(%eax),%eax
f01057ad:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01057b0:	c1 e2 04             	shl    $0x4,%edx
f01057b3:	81 c2 60 3a 25 f0    	add    $0xf0253a60,%edx
f01057b9:	89 02                	mov    %eax,(%edx)
f01057bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01057be:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f01057c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01057c8:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f01057cf:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01057d2:	c1 e0 04             	shl    $0x4,%eax
f01057d5:	05 6c 3a 25 f0       	add    $0xf0253a6c,%eax
f01057da:	8b 00                	mov    (%eax),%eax
f01057dc:	8d 50 ff             	lea    -0x1(%eax),%edx
f01057df:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01057e2:	c1 e0 04             	shl    $0x4,%eax
f01057e5:	05 6c 3a 25 f0       	add    $0xf0253a6c,%eax
f01057ea:	89 10                	mov    %edx,(%eax)
						env_free(ptr_env);
f01057ec:	83 ec 0c             	sub    $0xc,%esp
f01057ef:	ff 75 f4             	pushl  -0xc(%ebp)
f01057f2:	e8 b2 41 00 00       	call   f01099a9 <env_free>
f01057f7:	83 c4 10             	add    $0x10,%esp
						cprintf("DONE\n");
f01057fa:	83 ec 0c             	sub    $0xc,%esp
f01057fd:	68 09 21 13 f0       	push   $0xf0132109
f0105802:	e8 2a b6 ff ff       	call   f0100e31 <cprintf>
f0105807:	83 c4 10             	add    $0x10,%esp
						found = 1;
f010580a:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
						break;
f0105811:	eb 50                	jmp    f0105863 <sched_kill_env+0x252>
		for (int i = 0 ; i < num_of_ready_queues ; i++)
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
			{
				ptr_env=NULL;
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105813:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105816:	c1 e0 04             	shl    $0x4,%eax
f0105819:	05 68 3a 25 f0       	add    $0xf0253a68,%eax
f010581e:	8b 00                	mov    (%eax),%eax
f0105820:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105823:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105827:	74 08                	je     f0105831 <sched_kill_env+0x220>
f0105829:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010582c:	8b 40 44             	mov    0x44(%eax),%eax
f010582f:	eb 05                	jmp    f0105836 <sched_kill_env+0x225>
f0105831:	b8 00 00 00 00       	mov    $0x0,%eax
f0105836:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105839:	c1 e2 04             	shl    $0x4,%edx
f010583c:	81 c2 68 3a 25 f0    	add    $0xf0253a68,%edx
f0105842:	89 02                	mov    %eax,(%edx)
f0105844:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105847:	c1 e0 04             	shl    $0x4,%eax
f010584a:	05 68 3a 25 f0       	add    $0xf0253a68,%eax
f010584f:	8b 00                	mov    (%eax),%eax
f0105851:	85 c0                	test   %eax,%eax
f0105853:	0f 85 ba fe ff ff    	jne    f0105713 <sched_kill_env+0x102>
f0105859:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010585d:	0f 85 b0 fe ff ff    	jne    f0105713 <sched_kill_env+0x102>
						break;
						//return;
					}
				}
			}
			if (found)
f0105863:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105867:	75 16                	jne    f010587f <sched_kill_env+0x26e>
			}
															}
	}
	if (!found)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105869:	ff 45 ec             	incl   -0x14(%ebp)
f010586c:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0105871:	0f b6 c0             	movzbl %al,%eax
f0105874:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0105877:	0f 8f 65 fe ff ff    	jg     f01056e2 <sched_kill_env+0xd1>
f010587d:	eb 01                	jmp    f0105880 <sched_kill_env+0x26f>
						//return;
					}
				}
			}
			if (found)
				break;
f010587f:	90                   	nop
		}
	}
	if (!found)
f0105880:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105884:	0f 85 a4 00 00 00    	jne    f010592e <sched_kill_env+0x31d>
	{
		ptr_env=NULL;
f010588a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0105891:	a1 c4 99 2b f0       	mov    0xf02b99c4,%eax
f0105896:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105899:	eb 64                	jmp    f01058ff <sched_kill_env+0x2ee>
		{
			if(ptr_env->env_id == envId)
f010589b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010589e:	8b 40 4c             	mov    0x4c(%eax),%eax
f01058a1:	3b 45 08             	cmp    0x8(%ebp),%eax
f01058a4:	75 51                	jne    f01058f7 <sched_kill_env+0x2e6>
			{
				cprintf("killing[%d] %s from the EXIT queue...", ptr_env->env_id, ptr_env->prog_name);
f01058a6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01058a9:	8d 50 5c             	lea    0x5c(%eax),%edx
f01058ac:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01058af:	8b 40 4c             	mov    0x4c(%eax),%eax
f01058b2:	83 ec 04             	sub    $0x4,%esp
f01058b5:	52                   	push   %edx
f01058b6:	50                   	push   %eax
f01058b7:	68 3c 21 13 f0       	push   $0xf013213c
f01058bc:	e8 70 b5 ff ff       	call   f0100e31 <cprintf>
f01058c1:	83 c4 10             	add    $0x10,%esp
				sched_remove_exit(ptr_env);
f01058c4:	83 ec 0c             	sub    $0xc,%esp
f01058c7:	ff 75 f4             	pushl  -0xc(%ebp)
f01058ca:	e8 bf f9 ff ff       	call   f010528e <sched_remove_exit>
f01058cf:	83 c4 10             	add    $0x10,%esp
				env_free(ptr_env);
f01058d2:	83 ec 0c             	sub    $0xc,%esp
f01058d5:	ff 75 f4             	pushl  -0xc(%ebp)
f01058d8:	e8 cc 40 00 00       	call   f01099a9 <env_free>
f01058dd:	83 c4 10             	add    $0x10,%esp
				cprintf("DONE\n");
f01058e0:	83 ec 0c             	sub    $0xc,%esp
f01058e3:	68 09 21 13 f0       	push   $0xf0132109
f01058e8:	e8 44 b5 ff ff       	call   f0100e31 <cprintf>
f01058ed:	83 c4 10             	add    $0x10,%esp
				found = 1;
f01058f0:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
		}
	}
	if (!found)
	{
		ptr_env=NULL;
		LIST_FOREACH(ptr_env, &env_exit_queue)
f01058f7:	a1 cc 99 2b f0       	mov    0xf02b99cc,%eax
f01058fc:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01058ff:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105903:	74 08                	je     f010590d <sched_kill_env+0x2fc>
f0105905:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105908:	8b 40 44             	mov    0x44(%eax),%eax
f010590b:	eb 05                	jmp    f0105912 <sched_kill_env+0x301>
f010590d:	b8 00 00 00 00       	mov    $0x0,%eax
f0105912:	a3 cc 99 2b f0       	mov    %eax,0xf02b99cc
f0105917:	a1 cc 99 2b f0       	mov    0xf02b99cc,%eax
f010591c:	85 c0                	test   %eax,%eax
f010591e:	0f 85 77 ff ff ff    	jne    f010589b <sched_kill_env+0x28a>
f0105924:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105928:	0f 85 6d ff ff ff    	jne    f010589b <sched_kill_env+0x28a>
				//return;
			}
		}
	}

	if (!found)
f010592e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105932:	0f 85 9d 00 00 00    	jne    f01059d5 <sched_kill_env+0x3c4>
	{
		if (curenv->env_id == envId)
f0105938:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f010593d:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105940:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105943:	0f 85 8c 00 00 00    	jne    f01059d5 <sched_kill_env+0x3c4>
		{
			ptr_env = curenv;
f0105949:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f010594e:	89 45 f4             	mov    %eax,-0xc(%ebp)
			assert(ptr_env->env_status == ENV_RUNNABLE);
f0105951:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105954:	8b 40 54             	mov    0x54(%eax),%eax
f0105957:	83 f8 02             	cmp    $0x2,%eax
f010595a:	74 19                	je     f0105975 <sched_kill_env+0x364>
f010595c:	68 64 21 13 f0       	push   $0xf0132164
f0105961:	68 72 20 13 f0       	push   $0xf0132072
f0105966:	68 77 01 00 00       	push   $0x177
f010596b:	68 87 20 13 f0       	push   $0xf0132087
f0105970:	e8 3b a8 ff ff       	call   f01001b0 <_panic>
			cprintf("killing a RUNNABLE environment [%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0105975:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105978:	8d 50 5c             	lea    0x5c(%eax),%edx
f010597b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010597e:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105981:	83 ec 04             	sub    $0x4,%esp
f0105984:	52                   	push   %edx
f0105985:	50                   	push   %eax
f0105986:	68 88 21 13 f0       	push   $0xf0132188
f010598b:	e8 a1 b4 ff ff       	call   f0100e31 <cprintf>
f0105990:	83 c4 10             	add    $0x10,%esp
			env_free(ptr_env);
f0105993:	83 ec 0c             	sub    $0xc,%esp
f0105996:	ff 75 f4             	pushl  -0xc(%ebp)
f0105999:	e8 0b 40 00 00       	call   f01099a9 <env_free>
f010599e:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f01059a1:	83 ec 0c             	sub    $0xc,%esp
f01059a4:	68 09 21 13 f0       	push   $0xf0132109
f01059a9:	e8 83 b4 ff ff       	call   f0100e31 <cprintf>
f01059ae:	83 c4 10             	add    $0x10,%esp
			found = 1;
f01059b1:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
			//If it's the curenv, then reset it and reinvoke the scheduler
			//as there's no meaning to return back to a killed env
			//lcr3(K_PHYSICAL_ADDRESS(ptr_page_directory));
			lcr3(phys_page_directory);
f01059b8:	a1 70 be 2b f0       	mov    0xf02bbe70,%eax
f01059bd:	89 45 e8             	mov    %eax,-0x18(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f01059c0:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01059c3:	0f 22 d8             	mov    %eax,%cr3
			curenv = NULL;
f01059c6:	c7 05 74 31 25 f0 00 	movl   $0x0,0xf0253174
f01059cd:	00 00 00 
			fos_scheduler();
f01059d0:	e8 44 08 00 00       	call   f0106219 <fos_scheduler>
		}
	}
}
f01059d5:	90                   	nop
f01059d6:	c9                   	leave  
f01059d7:	c3                   	ret    

f01059d8 <sched_print_all>:

//=================================================
// [12] PRINT ALL Envs from all queues:
//=================================================
void sched_print_all()
{
f01059d8:	55                   	push   %ebp
f01059d9:	89 e5                	mov    %esp,%ebp
f01059db:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
f01059de:	a1 f8 bd 2b f0       	mov    0xf02bbdf8,%eax
f01059e3:	85 c0                	test   %eax,%eax
f01059e5:	74 69                	je     f0105a50 <sched_print_all+0x78>
	{
		cprintf("\nThe processes in NEW queue are:\n");
f01059e7:	83 ec 0c             	sub    $0xc,%esp
f01059ea:	68 b4 21 13 f0       	push   $0xf01321b4
f01059ef:	e8 3d b4 ff ff       	call   f0100e31 <cprintf>
f01059f4:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_new_queue)
f01059f7:	a1 f8 bd 2b f0       	mov    0xf02bbdf8,%eax
f01059fc:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01059ff:	eb 26                	jmp    f0105a27 <sched_print_all+0x4f>
		{
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f0105a01:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105a04:	8d 50 5c             	lea    0x5c(%eax),%edx
f0105a07:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105a0a:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105a0d:	83 ec 04             	sub    $0x4,%esp
f0105a10:	52                   	push   %edx
f0105a11:	50                   	push   %eax
f0105a12:	68 d6 21 13 f0       	push   $0xf01321d6
f0105a17:	e8 15 b4 ff ff       	call   f0100e31 <cprintf>
f0105a1c:	83 c4 10             	add    $0x10,%esp
{
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
	{
		cprintf("\nThe processes in NEW queue are:\n");
		LIST_FOREACH(ptr_env, &env_new_queue)
f0105a1f:	a1 00 be 2b f0       	mov    0xf02bbe00,%eax
f0105a24:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105a27:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105a2b:	74 08                	je     f0105a35 <sched_print_all+0x5d>
f0105a2d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105a30:	8b 40 44             	mov    0x44(%eax),%eax
f0105a33:	eb 05                	jmp    f0105a3a <sched_print_all+0x62>
f0105a35:	b8 00 00 00 00       	mov    $0x0,%eax
f0105a3a:	a3 00 be 2b f0       	mov    %eax,0xf02bbe00
f0105a3f:	a1 00 be 2b f0       	mov    0xf02bbe00,%eax
f0105a44:	85 c0                	test   %eax,%eax
f0105a46:	75 b9                	jne    f0105a01 <sched_print_all+0x29>
f0105a48:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105a4c:	75 b3                	jne    f0105a01 <sched_print_all+0x29>
f0105a4e:	eb 10                	jmp    f0105a60 <sched_print_all+0x88>
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
		}
	}
	else
	{
		cprintf("\nNo processes in NEW queue\n");
f0105a50:	83 ec 0c             	sub    $0xc,%esp
f0105a53:	68 e0 21 13 f0       	push   $0xf01321e0
f0105a58:	e8 d4 b3 ff ff       	call   f0100e31 <cprintf>
f0105a5d:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("================================================\n");
f0105a60:	83 ec 0c             	sub    $0xc,%esp
f0105a63:	68 fc 21 13 f0       	push   $0xf01321fc
f0105a68:	e8 c4 b3 ff ff       	call   f0100e31 <cprintf>
f0105a6d:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105a70:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0105a77:	e9 c8 00 00 00       	jmp    f0105b44 <sched_print_all+0x16c>
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
f0105a7c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105a7f:	c1 e0 04             	shl    $0x4,%eax
f0105a82:	05 60 3a 25 f0       	add    $0xf0253a60,%eax
f0105a87:	8b 00                	mov    (%eax),%eax
f0105a89:	85 c0                	test   %eax,%eax
f0105a8b:	0f 84 8d 00 00 00    	je     f0105b1e <sched_print_all+0x146>
		{
			cprintf("The processes in READY queue #%d are:\n", i);
f0105a91:	83 ec 08             	sub    $0x8,%esp
f0105a94:	ff 75 f0             	pushl  -0x10(%ebp)
f0105a97:	68 30 22 13 f0       	push   $0xf0132230
f0105a9c:	e8 90 b3 ff ff       	call   f0100e31 <cprintf>
f0105aa1:	83 c4 10             	add    $0x10,%esp
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105aa4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105aa7:	c1 e0 04             	shl    $0x4,%eax
f0105aaa:	05 60 3a 25 f0       	add    $0xf0253a60,%eax
f0105aaf:	8b 00                	mov    (%eax),%eax
f0105ab1:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105ab4:	eb 2e                	jmp    f0105ae4 <sched_print_all+0x10c>
			{
				cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f0105ab6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105ab9:	8d 50 5c             	lea    0x5c(%eax),%edx
f0105abc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105abf:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105ac2:	83 ec 04             	sub    $0x4,%esp
f0105ac5:	52                   	push   %edx
f0105ac6:	50                   	push   %eax
f0105ac7:	68 d6 21 13 f0       	push   $0xf01321d6
f0105acc:	e8 60 b3 ff ff       	call   f0100e31 <cprintf>
f0105ad1:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
		{
			cprintf("The processes in READY queue #%d are:\n", i);
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105ad4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105ad7:	c1 e0 04             	shl    $0x4,%eax
f0105ada:	05 68 3a 25 f0       	add    $0xf0253a68,%eax
f0105adf:	8b 00                	mov    (%eax),%eax
f0105ae1:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105ae4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105ae8:	74 08                	je     f0105af2 <sched_print_all+0x11a>
f0105aea:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105aed:	8b 40 44             	mov    0x44(%eax),%eax
f0105af0:	eb 05                	jmp    f0105af7 <sched_print_all+0x11f>
f0105af2:	b8 00 00 00 00       	mov    $0x0,%eax
f0105af7:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105afa:	c1 e2 04             	shl    $0x4,%edx
f0105afd:	81 c2 68 3a 25 f0    	add    $0xf0253a68,%edx
f0105b03:	89 02                	mov    %eax,(%edx)
f0105b05:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105b08:	c1 e0 04             	shl    $0x4,%eax
f0105b0b:	05 68 3a 25 f0       	add    $0xf0253a68,%eax
f0105b10:	8b 00                	mov    (%eax),%eax
f0105b12:	85 c0                	test   %eax,%eax
f0105b14:	75 a0                	jne    f0105ab6 <sched_print_all+0xde>
f0105b16:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105b1a:	75 9a                	jne    f0105ab6 <sched_print_all+0xde>
f0105b1c:	eb 13                	jmp    f0105b31 <sched_print_all+0x159>
				cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
			}
		}
		else
		{
			cprintf("No processes in READY queue #%d\n", i);
f0105b1e:	83 ec 08             	sub    $0x8,%esp
f0105b21:	ff 75 f0             	pushl  -0x10(%ebp)
f0105b24:	68 58 22 13 f0       	push   $0xf0132258
f0105b29:	e8 03 b3 ff ff       	call   f0100e31 <cprintf>
f0105b2e:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("================================================\n");
f0105b31:	83 ec 0c             	sub    $0xc,%esp
f0105b34:	68 fc 21 13 f0       	push   $0xf01321fc
f0105b39:	e8 f3 b2 ff ff       	call   f0100e31 <cprintf>
f0105b3e:	83 c4 10             	add    $0x10,%esp
	else
	{
		cprintf("\nNo processes in NEW queue\n");
	}
	cprintf("================================================\n");
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105b41:	ff 45 f0             	incl   -0x10(%ebp)
f0105b44:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0105b49:	0f b6 c0             	movzbl %al,%eax
f0105b4c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0105b4f:	0f 8f 27 ff ff ff    	jg     f0105a7c <sched_print_all+0xa4>
		{
			cprintf("No processes in READY queue #%d\n", i);
		}
		cprintf("================================================\n");
	}
	if (!LIST_EMPTY(&env_exit_queue))
f0105b55:	a1 c4 99 2b f0       	mov    0xf02b99c4,%eax
f0105b5a:	85 c0                	test   %eax,%eax
f0105b5c:	74 69                	je     f0105bc7 <sched_print_all+0x1ef>
	{
		cprintf("The processes in EXIT queue are:\n");
f0105b5e:	83 ec 0c             	sub    $0xc,%esp
f0105b61:	68 7c 22 13 f0       	push   $0xf013227c
f0105b66:	e8 c6 b2 ff ff       	call   f0100e31 <cprintf>
f0105b6b:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0105b6e:	a1 c4 99 2b f0       	mov    0xf02b99c4,%eax
f0105b73:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105b76:	eb 26                	jmp    f0105b9e <sched_print_all+0x1c6>
		{
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f0105b78:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105b7b:	8d 50 5c             	lea    0x5c(%eax),%edx
f0105b7e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105b81:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105b84:	83 ec 04             	sub    $0x4,%esp
f0105b87:	52                   	push   %edx
f0105b88:	50                   	push   %eax
f0105b89:	68 d6 21 13 f0       	push   $0xf01321d6
f0105b8e:	e8 9e b2 ff ff       	call   f0100e31 <cprintf>
f0105b93:	83 c4 10             	add    $0x10,%esp
		cprintf("================================================\n");
	}
	if (!LIST_EMPTY(&env_exit_queue))
	{
		cprintf("The processes in EXIT queue are:\n");
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0105b96:	a1 cc 99 2b f0       	mov    0xf02b99cc,%eax
f0105b9b:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105b9e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105ba2:	74 08                	je     f0105bac <sched_print_all+0x1d4>
f0105ba4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105ba7:	8b 40 44             	mov    0x44(%eax),%eax
f0105baa:	eb 05                	jmp    f0105bb1 <sched_print_all+0x1d9>
f0105bac:	b8 00 00 00 00       	mov    $0x0,%eax
f0105bb1:	a3 cc 99 2b f0       	mov    %eax,0xf02b99cc
f0105bb6:	a1 cc 99 2b f0       	mov    0xf02b99cc,%eax
f0105bbb:	85 c0                	test   %eax,%eax
f0105bbd:	75 b9                	jne    f0105b78 <sched_print_all+0x1a0>
f0105bbf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105bc3:	75 b3                	jne    f0105b78 <sched_print_all+0x1a0>
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
	}
}
f0105bc5:	eb 10                	jmp    f0105bd7 <sched_print_all+0x1ff>
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
		}
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
f0105bc7:	83 ec 0c             	sub    $0xc,%esp
f0105bca:	68 9e 22 13 f0       	push   $0xf013229e
f0105bcf:	e8 5d b2 ff ff       	call   f0100e31 <cprintf>
f0105bd4:	83 c4 10             	add    $0x10,%esp
	}
}
f0105bd7:	90                   	nop
f0105bd8:	c9                   	leave  
f0105bd9:	c3                   	ret    

f0105bda <sched_run_all>:

//=================================================
// [13] MOVE ALL NEW Envs into READY Q:
//=================================================
void sched_run_all()
{
f0105bda:	55                   	push   %ebp
f0105bdb:	89 e5                	mov    %esp,%ebp
f0105bdd:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f0105be0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	LIST_FOREACH(ptr_env, &env_new_queue)
f0105be7:	a1 f8 bd 2b f0       	mov    0xf02bbdf8,%eax
f0105bec:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105bef:	eb 24                	jmp    f0105c15 <sched_run_all+0x3b>
	{
		sched_remove_new(ptr_env);
f0105bf1:	83 ec 0c             	sub    $0xc,%esp
f0105bf4:	ff 75 f4             	pushl  -0xc(%ebp)
f0105bf7:	e8 aa f5 ff ff       	call   f01051a6 <sched_remove_new>
f0105bfc:	83 c4 10             	add    $0x10,%esp
		sched_insert_ready0(ptr_env);
f0105bff:	83 ec 0c             	sub    $0xc,%esp
f0105c02:	ff 75 f4             	pushl  -0xc(%ebp)
f0105c05:	e8 30 f4 ff ff       	call   f010503a <sched_insert_ready0>
f0105c0a:	83 c4 10             	add    $0x10,%esp
// [13] MOVE ALL NEW Envs into READY Q:
//=================================================
void sched_run_all()
{
	struct Env* ptr_env=NULL;
	LIST_FOREACH(ptr_env, &env_new_queue)
f0105c0d:	a1 00 be 2b f0       	mov    0xf02bbe00,%eax
f0105c12:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105c15:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105c19:	74 08                	je     f0105c23 <sched_run_all+0x49>
f0105c1b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105c1e:	8b 40 44             	mov    0x44(%eax),%eax
f0105c21:	eb 05                	jmp    f0105c28 <sched_run_all+0x4e>
f0105c23:	b8 00 00 00 00       	mov    $0x0,%eax
f0105c28:	a3 00 be 2b f0       	mov    %eax,0xf02bbe00
f0105c2d:	a1 00 be 2b f0       	mov    0xf02bbe00,%eax
f0105c32:	85 c0                	test   %eax,%eax
f0105c34:	75 bb                	jne    f0105bf1 <sched_run_all+0x17>
f0105c36:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105c3a:	75 b5                	jne    f0105bf1 <sched_run_all+0x17>
	{
		sched_remove_new(ptr_env);
		sched_insert_ready0(ptr_env);
	}
	/*2015*///if scheduler not run yet, then invoke it!
	if (scheduler_status == SCH_STOPPED)
f0105c3c:	a1 14 be 2b f0       	mov    0xf02bbe14,%eax
f0105c41:	85 c0                	test   %eax,%eax
f0105c43:	75 05                	jne    f0105c4a <sched_run_all+0x70>
		fos_scheduler();
f0105c45:	e8 cf 05 00 00       	call   f0106219 <fos_scheduler>
}
f0105c4a:	90                   	nop
f0105c4b:	c9                   	leave  
f0105c4c:	c3                   	ret    

f0105c4d <sched_kill_all>:

//=================================================
// [14] KILL ALL Envs in the System:
//=================================================
void sched_kill_all()
{
f0105c4d:	55                   	push   %ebp
f0105c4e:	89 e5                	mov    %esp,%ebp
f0105c50:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
f0105c53:	a1 f8 bd 2b f0       	mov    0xf02bbdf8,%eax
f0105c58:	85 c0                	test   %eax,%eax
f0105c5a:	0f 84 95 00 00 00    	je     f0105cf5 <sched_kill_all+0xa8>
	{
		cprintf("\nKILLING the processes in the NEW queue...\n");
f0105c60:	83 ec 0c             	sub    $0xc,%esp
f0105c63:	68 bc 22 13 f0       	push   $0xf01322bc
f0105c68:	e8 c4 b1 ff ff       	call   f0100e31 <cprintf>
f0105c6d:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_new_queue)
f0105c70:	a1 f8 bd 2b f0       	mov    0xf02bbdf8,%eax
f0105c75:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105c78:	eb 52                	jmp    f0105ccc <sched_kill_all+0x7f>
		{
			cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0105c7a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105c7d:	8d 50 5c             	lea    0x5c(%eax),%edx
f0105c80:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105c83:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105c86:	83 ec 04             	sub    $0x4,%esp
f0105c89:	52                   	push   %edx
f0105c8a:	50                   	push   %eax
f0105c8b:	68 e8 22 13 f0       	push   $0xf01322e8
f0105c90:	e8 9c b1 ff ff       	call   f0100e31 <cprintf>
f0105c95:	83 c4 10             	add    $0x10,%esp
			sched_remove_new(ptr_env);
f0105c98:	83 ec 0c             	sub    $0xc,%esp
f0105c9b:	ff 75 f4             	pushl  -0xc(%ebp)
f0105c9e:	e8 03 f5 ff ff       	call   f01051a6 <sched_remove_new>
f0105ca3:	83 c4 10             	add    $0x10,%esp
			env_free(ptr_env);
f0105ca6:	83 ec 0c             	sub    $0xc,%esp
f0105ca9:	ff 75 f4             	pushl  -0xc(%ebp)
f0105cac:	e8 f8 3c 00 00       	call   f01099a9 <env_free>
f0105cb1:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f0105cb4:	83 ec 0c             	sub    $0xc,%esp
f0105cb7:	68 09 21 13 f0       	push   $0xf0132109
f0105cbc:	e8 70 b1 ff ff       	call   f0100e31 <cprintf>
f0105cc1:	83 c4 10             	add    $0x10,%esp
{
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
	{
		cprintf("\nKILLING the processes in the NEW queue...\n");
		LIST_FOREACH(ptr_env, &env_new_queue)
f0105cc4:	a1 00 be 2b f0       	mov    0xf02bbe00,%eax
f0105cc9:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105ccc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105cd0:	74 08                	je     f0105cda <sched_kill_all+0x8d>
f0105cd2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105cd5:	8b 40 44             	mov    0x44(%eax),%eax
f0105cd8:	eb 05                	jmp    f0105cdf <sched_kill_all+0x92>
f0105cda:	b8 00 00 00 00       	mov    $0x0,%eax
f0105cdf:	a3 00 be 2b f0       	mov    %eax,0xf02bbe00
f0105ce4:	a1 00 be 2b f0       	mov    0xf02bbe00,%eax
f0105ce9:	85 c0                	test   %eax,%eax
f0105ceb:	75 8d                	jne    f0105c7a <sched_kill_all+0x2d>
f0105ced:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105cf1:	75 87                	jne    f0105c7a <sched_kill_all+0x2d>
f0105cf3:	eb 10                	jmp    f0105d05 <sched_kill_all+0xb8>
			cprintf("DONE\n");
		}
	}
	else
	{
		cprintf("No processes in NEW queue\n");
f0105cf5:	83 ec 0c             	sub    $0xc,%esp
f0105cf8:	68 fb 22 13 f0       	push   $0xf01322fb
f0105cfd:	e8 2f b1 ff ff       	call   f0100e31 <cprintf>
f0105d02:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("================================================\n");
f0105d05:	83 ec 0c             	sub    $0xc,%esp
f0105d08:	68 fc 21 13 f0       	push   $0xf01321fc
f0105d0d:	e8 1f b1 ff ff       	call   f0100e31 <cprintf>
f0105d12:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105d15:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0105d1c:	e9 9d 01 00 00       	jmp    f0105ebe <sched_kill_all+0x271>
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
f0105d21:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105d24:	c1 e0 04             	shl    $0x4,%eax
f0105d27:	05 60 3a 25 f0       	add    $0xf0253a60,%eax
f0105d2c:	8b 00                	mov    (%eax),%eax
f0105d2e:	85 c0                	test   %eax,%eax
f0105d30:	0f 84 62 01 00 00    	je     f0105e98 <sched_kill_all+0x24b>
		{
			cprintf("KILLING the processes in the READY queue #%d...\n", i);
f0105d36:	83 ec 08             	sub    $0x8,%esp
f0105d39:	ff 75 f0             	pushl  -0x10(%ebp)
f0105d3c:	68 18 23 13 f0       	push   $0xf0132318
f0105d41:	e8 eb b0 ff ff       	call   f0100e31 <cprintf>
f0105d46:	83 c4 10             	add    $0x10,%esp
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105d49:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105d4c:	c1 e0 04             	shl    $0x4,%eax
f0105d4f:	05 60 3a 25 f0       	add    $0xf0253a60,%eax
f0105d54:	8b 00                	mov    (%eax),%eax
f0105d56:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105d59:	e9 f8 00 00 00       	jmp    f0105e56 <sched_kill_all+0x209>
			{
				cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0105d5e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105d61:	8d 50 5c             	lea    0x5c(%eax),%edx
f0105d64:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105d67:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105d6a:	83 ec 04             	sub    $0x4,%esp
f0105d6d:	52                   	push   %edx
f0105d6e:	50                   	push   %eax
f0105d6f:	68 e8 22 13 f0       	push   $0xf01322e8
f0105d74:	e8 b8 b0 ff ff       	call   f0100e31 <cprintf>
f0105d79:	83 c4 10             	add    $0x10,%esp
				LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f0105d7c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105d80:	75 17                	jne    f0105d99 <sched_kill_all+0x14c>
f0105d82:	83 ec 04             	sub    $0x4,%esp
f0105d85:	68 c3 20 13 f0       	push   $0xf01320c3
f0105d8a:	68 e5 01 00 00       	push   $0x1e5
f0105d8f:	68 87 20 13 f0       	push   $0xf0132087
f0105d94:	e8 17 a4 ff ff       	call   f01001b0 <_panic>
f0105d99:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105d9c:	8b 40 44             	mov    0x44(%eax),%eax
f0105d9f:	85 c0                	test   %eax,%eax
f0105da1:	74 11                	je     f0105db4 <sched_kill_all+0x167>
f0105da3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105da6:	8b 40 44             	mov    0x44(%eax),%eax
f0105da9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105dac:	8b 52 48             	mov    0x48(%edx),%edx
f0105daf:	89 50 48             	mov    %edx,0x48(%eax)
f0105db2:	eb 14                	jmp    f0105dc8 <sched_kill_all+0x17b>
f0105db4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105db7:	8b 40 48             	mov    0x48(%eax),%eax
f0105dba:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105dbd:	c1 e2 04             	shl    $0x4,%edx
f0105dc0:	81 c2 64 3a 25 f0    	add    $0xf0253a64,%edx
f0105dc6:	89 02                	mov    %eax,(%edx)
f0105dc8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105dcb:	8b 40 48             	mov    0x48(%eax),%eax
f0105dce:	85 c0                	test   %eax,%eax
f0105dd0:	74 11                	je     f0105de3 <sched_kill_all+0x196>
f0105dd2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105dd5:	8b 40 48             	mov    0x48(%eax),%eax
f0105dd8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105ddb:	8b 52 44             	mov    0x44(%edx),%edx
f0105dde:	89 50 44             	mov    %edx,0x44(%eax)
f0105de1:	eb 14                	jmp    f0105df7 <sched_kill_all+0x1aa>
f0105de3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105de6:	8b 40 44             	mov    0x44(%eax),%eax
f0105de9:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105dec:	c1 e2 04             	shl    $0x4,%edx
f0105def:	81 c2 60 3a 25 f0    	add    $0xf0253a60,%edx
f0105df5:	89 02                	mov    %eax,(%edx)
f0105df7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105dfa:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0105e01:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105e04:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0105e0b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105e0e:	c1 e0 04             	shl    $0x4,%eax
f0105e11:	05 6c 3a 25 f0       	add    $0xf0253a6c,%eax
f0105e16:	8b 00                	mov    (%eax),%eax
f0105e18:	8d 50 ff             	lea    -0x1(%eax),%edx
f0105e1b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105e1e:	c1 e0 04             	shl    $0x4,%eax
f0105e21:	05 6c 3a 25 f0       	add    $0xf0253a6c,%eax
f0105e26:	89 10                	mov    %edx,(%eax)
				env_free(ptr_env);
f0105e28:	83 ec 0c             	sub    $0xc,%esp
f0105e2b:	ff 75 f4             	pushl  -0xc(%ebp)
f0105e2e:	e8 76 3b 00 00       	call   f01099a9 <env_free>
f0105e33:	83 c4 10             	add    $0x10,%esp
				cprintf("DONE\n");
f0105e36:	83 ec 0c             	sub    $0xc,%esp
f0105e39:	68 09 21 13 f0       	push   $0xf0132109
f0105e3e:	e8 ee af ff ff       	call   f0100e31 <cprintf>
f0105e43:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
		{
			cprintf("KILLING the processes in the READY queue #%d...\n", i);
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105e46:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105e49:	c1 e0 04             	shl    $0x4,%eax
f0105e4c:	05 68 3a 25 f0       	add    $0xf0253a68,%eax
f0105e51:	8b 00                	mov    (%eax),%eax
f0105e53:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105e56:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105e5a:	74 08                	je     f0105e64 <sched_kill_all+0x217>
f0105e5c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105e5f:	8b 40 44             	mov    0x44(%eax),%eax
f0105e62:	eb 05                	jmp    f0105e69 <sched_kill_all+0x21c>
f0105e64:	b8 00 00 00 00       	mov    $0x0,%eax
f0105e69:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105e6c:	c1 e2 04             	shl    $0x4,%edx
f0105e6f:	81 c2 68 3a 25 f0    	add    $0xf0253a68,%edx
f0105e75:	89 02                	mov    %eax,(%edx)
f0105e77:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105e7a:	c1 e0 04             	shl    $0x4,%eax
f0105e7d:	05 68 3a 25 f0       	add    $0xf0253a68,%eax
f0105e82:	8b 00                	mov    (%eax),%eax
f0105e84:	85 c0                	test   %eax,%eax
f0105e86:	0f 85 d2 fe ff ff    	jne    f0105d5e <sched_kill_all+0x111>
f0105e8c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105e90:	0f 85 c8 fe ff ff    	jne    f0105d5e <sched_kill_all+0x111>
f0105e96:	eb 13                	jmp    f0105eab <sched_kill_all+0x25e>
				cprintf("DONE\n");
			}
		}
		else
		{
			cprintf("No processes in READY queue #%d\n",i);
f0105e98:	83 ec 08             	sub    $0x8,%esp
f0105e9b:	ff 75 f0             	pushl  -0x10(%ebp)
f0105e9e:	68 58 22 13 f0       	push   $0xf0132258
f0105ea3:	e8 89 af ff ff       	call   f0100e31 <cprintf>
f0105ea8:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("================================================\n");
f0105eab:	83 ec 0c             	sub    $0xc,%esp
f0105eae:	68 fc 21 13 f0       	push   $0xf01321fc
f0105eb3:	e8 79 af ff ff       	call   f0100e31 <cprintf>
f0105eb8:	83 c4 10             	add    $0x10,%esp
	else
	{
		cprintf("No processes in NEW queue\n");
	}
	cprintf("================================================\n");
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105ebb:	ff 45 f0             	incl   -0x10(%ebp)
f0105ebe:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0105ec3:	0f b6 c0             	movzbl %al,%eax
f0105ec6:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0105ec9:	0f 8f 52 fe ff ff    	jg     f0105d21 <sched_kill_all+0xd4>
			cprintf("No processes in READY queue #%d\n",i);
		}
		cprintf("================================================\n");
	}

	if (!LIST_EMPTY(&env_exit_queue))
f0105ecf:	a1 c4 99 2b f0       	mov    0xf02b99c4,%eax
f0105ed4:	85 c0                	test   %eax,%eax
f0105ed6:	0f 84 95 00 00 00    	je     f0105f71 <sched_kill_all+0x324>
	{
		cprintf("KILLING the processes in the EXIT queue...\n");
f0105edc:	83 ec 0c             	sub    $0xc,%esp
f0105edf:	68 4c 23 13 f0       	push   $0xf013234c
f0105ee4:	e8 48 af ff ff       	call   f0100e31 <cprintf>
f0105ee9:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0105eec:	a1 c4 99 2b f0       	mov    0xf02b99c4,%eax
f0105ef1:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105ef4:	eb 52                	jmp    f0105f48 <sched_kill_all+0x2fb>
		{
			cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0105ef6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105ef9:	8d 50 5c             	lea    0x5c(%eax),%edx
f0105efc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105eff:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105f02:	83 ec 04             	sub    $0x4,%esp
f0105f05:	52                   	push   %edx
f0105f06:	50                   	push   %eax
f0105f07:	68 e8 22 13 f0       	push   $0xf01322e8
f0105f0c:	e8 20 af ff ff       	call   f0100e31 <cprintf>
f0105f11:	83 c4 10             	add    $0x10,%esp
			sched_remove_exit(ptr_env);
f0105f14:	83 ec 0c             	sub    $0xc,%esp
f0105f17:	ff 75 f4             	pushl  -0xc(%ebp)
f0105f1a:	e8 6f f3 ff ff       	call   f010528e <sched_remove_exit>
f0105f1f:	83 c4 10             	add    $0x10,%esp
			env_free(ptr_env);
f0105f22:	83 ec 0c             	sub    $0xc,%esp
f0105f25:	ff 75 f4             	pushl  -0xc(%ebp)
f0105f28:	e8 7c 3a 00 00       	call   f01099a9 <env_free>
f0105f2d:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f0105f30:	83 ec 0c             	sub    $0xc,%esp
f0105f33:	68 09 21 13 f0       	push   $0xf0132109
f0105f38:	e8 f4 ae ff ff       	call   f0100e31 <cprintf>
f0105f3d:	83 c4 10             	add    $0x10,%esp
	}

	if (!LIST_EMPTY(&env_exit_queue))
	{
		cprintf("KILLING the processes in the EXIT queue...\n");
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0105f40:	a1 cc 99 2b f0       	mov    0xf02b99cc,%eax
f0105f45:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105f48:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105f4c:	74 08                	je     f0105f56 <sched_kill_all+0x309>
f0105f4e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105f51:	8b 40 44             	mov    0x44(%eax),%eax
f0105f54:	eb 05                	jmp    f0105f5b <sched_kill_all+0x30e>
f0105f56:	b8 00 00 00 00       	mov    $0x0,%eax
f0105f5b:	a3 cc 99 2b f0       	mov    %eax,0xf02b99cc
f0105f60:	a1 cc 99 2b f0       	mov    0xf02b99cc,%eax
f0105f65:	85 c0                	test   %eax,%eax
f0105f67:	75 8d                	jne    f0105ef6 <sched_kill_all+0x2a9>
f0105f69:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105f6d:	75 87                	jne    f0105ef6 <sched_kill_all+0x2a9>
f0105f6f:	eb 10                	jmp    f0105f81 <sched_kill_all+0x334>
			cprintf("DONE\n");
		}
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
f0105f71:	83 ec 0c             	sub    $0xc,%esp
f0105f74:	68 9e 22 13 f0       	push   $0xf013229e
f0105f79:	e8 b3 ae ff ff       	call   f0100e31 <cprintf>
f0105f7e:	83 c4 10             	add    $0x10,%esp
	}

	//reinvoke the scheduler since there're no env to return back to it
	curenv = NULL;
f0105f81:	c7 05 74 31 25 f0 00 	movl   $0x0,0xf0253174
f0105f88:	00 00 00 
	fos_scheduler();
f0105f8b:	e8 89 02 00 00       	call   f0106219 <fos_scheduler>

f0105f90 <sched_exit_all_ready_envs>:
/*2018*/
//=================================================
// [14] EXIT ALL Ready Envs:
//=================================================
void sched_exit_all_ready_envs()
{
f0105f90:	55                   	push   %ebp
f0105f91:	89 e5                	mov    %esp,%ebp
f0105f93:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f0105f96:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105f9d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0105fa4:	e9 3e 01 00 00       	jmp    f01060e7 <sched_exit_all_ready_envs+0x157>
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
f0105fa9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105fac:	c1 e0 04             	shl    $0x4,%eax
f0105faf:	05 60 3a 25 f0       	add    $0xf0253a60,%eax
f0105fb4:	8b 00                	mov    (%eax),%eax
f0105fb6:	85 c0                	test   %eax,%eax
f0105fb8:	0f 84 26 01 00 00    	je     f01060e4 <sched_exit_all_ready_envs+0x154>
		{
			ptr_env=NULL;
f0105fbe:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105fc5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105fc8:	c1 e0 04             	shl    $0x4,%eax
f0105fcb:	05 60 3a 25 f0       	add    $0xf0253a60,%eax
f0105fd0:	8b 00                	mov    (%eax),%eax
f0105fd2:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105fd5:	e9 ca 00 00 00       	jmp    f01060a4 <sched_exit_all_ready_envs+0x114>
			{
				LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f0105fda:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105fde:	75 17                	jne    f0105ff7 <sched_exit_all_ready_envs+0x67>
f0105fe0:	83 ec 04             	sub    $0x4,%esp
f0105fe3:	68 c3 20 13 f0       	push   $0xf01320c3
f0105fe8:	68 14 02 00 00       	push   $0x214
f0105fed:	68 87 20 13 f0       	push   $0xf0132087
f0105ff2:	e8 b9 a1 ff ff       	call   f01001b0 <_panic>
f0105ff7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105ffa:	8b 40 44             	mov    0x44(%eax),%eax
f0105ffd:	85 c0                	test   %eax,%eax
f0105fff:	74 11                	je     f0106012 <sched_exit_all_ready_envs+0x82>
f0106001:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106004:	8b 40 44             	mov    0x44(%eax),%eax
f0106007:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010600a:	8b 52 48             	mov    0x48(%edx),%edx
f010600d:	89 50 48             	mov    %edx,0x48(%eax)
f0106010:	eb 14                	jmp    f0106026 <sched_exit_all_ready_envs+0x96>
f0106012:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106015:	8b 40 48             	mov    0x48(%eax),%eax
f0106018:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010601b:	c1 e2 04             	shl    $0x4,%edx
f010601e:	81 c2 64 3a 25 f0    	add    $0xf0253a64,%edx
f0106024:	89 02                	mov    %eax,(%edx)
f0106026:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106029:	8b 40 48             	mov    0x48(%eax),%eax
f010602c:	85 c0                	test   %eax,%eax
f010602e:	74 11                	je     f0106041 <sched_exit_all_ready_envs+0xb1>
f0106030:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106033:	8b 40 48             	mov    0x48(%eax),%eax
f0106036:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106039:	8b 52 44             	mov    0x44(%edx),%edx
f010603c:	89 50 44             	mov    %edx,0x44(%eax)
f010603f:	eb 14                	jmp    f0106055 <sched_exit_all_ready_envs+0xc5>
f0106041:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106044:	8b 40 44             	mov    0x44(%eax),%eax
f0106047:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010604a:	c1 e2 04             	shl    $0x4,%edx
f010604d:	81 c2 60 3a 25 f0    	add    $0xf0253a60,%edx
f0106053:	89 02                	mov    %eax,(%edx)
f0106055:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106058:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f010605f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106062:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0106069:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010606c:	c1 e0 04             	shl    $0x4,%eax
f010606f:	05 6c 3a 25 f0       	add    $0xf0253a6c,%eax
f0106074:	8b 00                	mov    (%eax),%eax
f0106076:	8d 50 ff             	lea    -0x1(%eax),%edx
f0106079:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010607c:	c1 e0 04             	shl    $0x4,%eax
f010607f:	05 6c 3a 25 f0       	add    $0xf0253a6c,%eax
f0106084:	89 10                	mov    %edx,(%eax)
				sched_insert_exit(ptr_env);
f0106086:	83 ec 0c             	sub    $0xc,%esp
f0106089:	ff 75 f4             	pushl  -0xc(%ebp)
f010608c:	e8 ba f1 ff ff       	call   f010524b <sched_insert_exit>
f0106091:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
		{
			ptr_env=NULL;
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0106094:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106097:	c1 e0 04             	shl    $0x4,%eax
f010609a:	05 68 3a 25 f0       	add    $0xf0253a68,%eax
f010609f:	8b 00                	mov    (%eax),%eax
f01060a1:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01060a4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01060a8:	74 08                	je     f01060b2 <sched_exit_all_ready_envs+0x122>
f01060aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01060ad:	8b 40 44             	mov    0x44(%eax),%eax
f01060b0:	eb 05                	jmp    f01060b7 <sched_exit_all_ready_envs+0x127>
f01060b2:	b8 00 00 00 00       	mov    $0x0,%eax
f01060b7:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01060ba:	c1 e2 04             	shl    $0x4,%edx
f01060bd:	81 c2 68 3a 25 f0    	add    $0xf0253a68,%edx
f01060c3:	89 02                	mov    %eax,(%edx)
f01060c5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01060c8:	c1 e0 04             	shl    $0x4,%eax
f01060cb:	05 68 3a 25 f0       	add    $0xf0253a68,%eax
f01060d0:	8b 00                	mov    (%eax),%eax
f01060d2:	85 c0                	test   %eax,%eax
f01060d4:	0f 85 00 ff ff ff    	jne    f0105fda <sched_exit_all_ready_envs+0x4a>
f01060da:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01060de:	0f 85 f6 fe ff ff    	jne    f0105fda <sched_exit_all_ready_envs+0x4a>
// [14] EXIT ALL Ready Envs:
//=================================================
void sched_exit_all_ready_envs()
{
	struct Env* ptr_env=NULL;
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f01060e4:	ff 45 f0             	incl   -0x10(%ebp)
f01060e7:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01060ec:	0f b6 c0             	movzbl %al,%eax
f01060ef:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01060f2:	0f 8f b1 fe ff ff    	jg     f0105fa9 <sched_exit_all_ready_envs+0x19>
				LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
				sched_insert_exit(ptr_env);
			}
		}
	}
}
f01060f8:	90                   	nop
f01060f9:	c9                   	leave  
f01060fa:	c3                   	ret    

f01060fb <timer_ticks>:

/*2023*/
/********* for BSD Priority Scheduler *************/
int64 timer_ticks()
{
f01060fb:	55                   	push   %ebp
f01060fc:	89 e5                	mov    %esp,%ebp
	return ticks;
f01060fe:	a1 20 be 2b f0       	mov    0xf02bbe20,%eax
f0106103:	8b 15 24 be 2b f0    	mov    0xf02bbe24,%edx
}
f0106109:	5d                   	pop    %ebp
f010610a:	c3                   	ret    

f010610b <env_get_nice>:
int env_get_nice(struct Env* e)
{
f010610b:	55                   	push   %ebp
f010610c:	89 e5                	mov    %esp,%ebp
f010610e:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'23.MS3 - #3] [2] BSD SCHEDULER - env_get_nice
	//Your code is here
	//Comment the following line
	panic("Not implemented yet");
f0106111:	83 ec 04             	sub    $0x4,%esp
f0106114:	68 78 23 13 f0       	push   $0xf0132378
f0106119:	68 26 02 00 00       	push   $0x226
f010611e:	68 87 20 13 f0       	push   $0xf0132087
f0106123:	e8 88 a0 ff ff       	call   f01001b0 <_panic>

f0106128 <env_set_nice>:
	return 0;
}
void env_set_nice(struct Env* e, int nice_value)
{
f0106128:	55                   	push   %ebp
f0106129:	89 e5                	mov    %esp,%ebp
f010612b:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'23.MS3 - #3] [2] BSD SCHEDULER - env_set_nice
	//Your code is here
	//Comment the following line
	panic("Not implemented yet");
f010612e:	83 ec 04             	sub    $0x4,%esp
f0106131:	68 78 23 13 f0       	push   $0xf0132378
f0106136:	68 2e 02 00 00       	push   $0x22e
f010613b:	68 87 20 13 f0       	push   $0xf0132087
f0106140:	e8 6b a0 ff ff       	call   f01001b0 <_panic>

f0106145 <env_get_recent_cpu>:
}
int env_get_recent_cpu(struct Env* e)
{
f0106145:	55                   	push   %ebp
f0106146:	89 e5                	mov    %esp,%ebp
f0106148:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'23.MS3 - #3] [2] BSD SCHEDULER - env_get_recent_cpu
	//Your code is here
	//Comment the following line
	panic("Not implemented yet");
f010614b:	83 ec 04             	sub    $0x4,%esp
f010614e:	68 78 23 13 f0       	push   $0xf0132378
f0106153:	68 35 02 00 00       	push   $0x235
f0106158:	68 87 20 13 f0       	push   $0xf0132087
f010615d:	e8 4e a0 ff ff       	call   f01001b0 <_panic>

f0106162 <get_load_average>:
	return 0;
}
int get_load_average()
{
f0106162:	55                   	push   %ebp
f0106163:	89 e5                	mov    %esp,%ebp
f0106165:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'23.MS3 - #3] [2] BSD SCHEDULER - get_load_average
	//Your code is here
	//Comment the following line
	panic("Not implemented yet");
f0106168:	83 ec 04             	sub    $0x4,%esp
f010616b:	68 78 23 13 f0       	push   $0xf0132378
f0106170:	68 3d 02 00 00       	push   $0x23d
f0106175:	68 87 20 13 f0       	push   $0xf0132087
f010617a:	e8 31 a0 ff ff       	call   f01001b0 <_panic>

f010617f <isSchedMethodRR>:
#include <kern/mem/memory_manager.h>
#include <kern/tests/utilities.h>
#include <kern/cmd/command_prompt.h>


uint32 isSchedMethodRR(){if(scheduler_method == SCH_RR) return 1; return 0;}
f010617f:	55                   	push   %ebp
f0106180:	89 e5                	mov    %esp,%ebp
f0106182:	a1 08 be 2b f0       	mov    0xf02bbe08,%eax
f0106187:	85 c0                	test   %eax,%eax
f0106189:	75 07                	jne    f0106192 <isSchedMethodRR+0x13>
f010618b:	b8 01 00 00 00       	mov    $0x1,%eax
f0106190:	eb 05                	jmp    f0106197 <isSchedMethodRR+0x18>
f0106192:	b8 00 00 00 00       	mov    $0x0,%eax
f0106197:	5d                   	pop    %ebp
f0106198:	c3                   	ret    

f0106199 <isSchedMethodMLFQ>:
uint32 isSchedMethodMLFQ(){if(scheduler_method == SCH_MLFQ) return 1; return 0;}
f0106199:	55                   	push   %ebp
f010619a:	89 e5                	mov    %esp,%ebp
f010619c:	a1 08 be 2b f0       	mov    0xf02bbe08,%eax
f01061a1:	83 f8 01             	cmp    $0x1,%eax
f01061a4:	75 07                	jne    f01061ad <isSchedMethodMLFQ+0x14>
f01061a6:	b8 01 00 00 00       	mov    $0x1,%eax
f01061ab:	eb 05                	jmp    f01061b2 <isSchedMethodMLFQ+0x19>
f01061ad:	b8 00 00 00 00       	mov    $0x0,%eax
f01061b2:	5d                   	pop    %ebp
f01061b3:	c3                   	ret    

f01061b4 <isSchedMethodBSD>:
uint32 isSchedMethodBSD(){if(scheduler_method == SCH_BSD) return 1; return 0;}
f01061b4:	55                   	push   %ebp
f01061b5:	89 e5                	mov    %esp,%ebp
f01061b7:	a1 08 be 2b f0       	mov    0xf02bbe08,%eax
f01061bc:	83 f8 02             	cmp    $0x2,%eax
f01061bf:	75 07                	jne    f01061c8 <isSchedMethodBSD+0x14>
f01061c1:	b8 01 00 00 00       	mov    $0x1,%eax
f01061c6:	eb 05                	jmp    f01061cd <isSchedMethodBSD+0x19>
f01061c8:	b8 00 00 00 00       	mov    $0x0,%eax
f01061cd:	5d                   	pop    %ebp
f01061ce:	c3                   	ret    

f01061cf <sched_init>:

//===================================
// [1] Default Scheduler Initializer:
//===================================
void sched_init()
{
f01061cf:	55                   	push   %ebp
f01061d0:	89 e5                	mov    %esp,%ebp
f01061d2:	83 ec 08             	sub    $0x8,%esp
	old_pf_counter = 0;
f01061d5:	c7 05 d4 99 2b f0 00 	movl   $0x0,0xf02b99d4
f01061dc:	00 00 00 

	sched_init_RR(INIT_QUANTUM_IN_MS);
f01061df:	83 ec 0c             	sub    $0xc,%esp
f01061e2:	6a 0a                	push   $0xa
f01061e4:	e8 2b 01 00 00       	call   f0106314 <sched_init_RR>
f01061e9:	83 c4 10             	add    $0x10,%esp

	init_queue(&env_new_queue);
f01061ec:	83 ec 0c             	sub    $0xc,%esp
f01061ef:	68 f8 bd 2b f0       	push   $0xf02bbdf8
f01061f4:	e8 8b eb ff ff       	call   f0104d84 <init_queue>
f01061f9:	83 c4 10             	add    $0x10,%esp
	init_queue(&env_exit_queue);
f01061fc:	83 ec 0c             	sub    $0xc,%esp
f01061ff:	68 c4 99 2b f0       	push   $0xf02b99c4
f0106204:	e8 7b eb ff ff       	call   f0104d84 <init_queue>
f0106209:	83 c4 10             	add    $0x10,%esp
	scheduler_status = SCH_STOPPED;
f010620c:	c7 05 14 be 2b f0 00 	movl   $0x0,0xf02bbe14
f0106213:	00 00 00 
}
f0106216:	90                   	nop
f0106217:	c9                   	leave  
f0106218:	c3                   	ret    

f0106219 <fos_scheduler>:
//=========================
// [2] Main FOS Scheduler:
//=========================
void
fos_scheduler(void)
{
f0106219:	55                   	push   %ebp
f010621a:	89 e5                	mov    %esp,%ebp
f010621c:	83 ec 18             	sub    $0x18,%esp
	//	cprintf("inside scheduler\n");

	chk1();
f010621f:	e8 ef 7e 02 00       	call   f012e113 <chk1>
	scheduler_status = SCH_STARTED;
f0106224:	c7 05 14 be 2b f0 01 	movl   $0x1,0xf02bbe14
f010622b:	00 00 00 

	//This variable should be set to the next environment to be run (if any)
	struct Env* next_env = NULL;
f010622e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	if (scheduler_method == SCH_RR)
f0106235:	a1 08 be 2b f0       	mov    0xf02bbe08,%eax
f010623a:	85 c0                	test   %eax,%eax
f010623c:	75 48                	jne    f0106286 <fos_scheduler+0x6d>
		// and switch to such environment if found.
		// It's OK to choose the previously running env if no other env
		// is runnable.

		//If the curenv is still exist, then insert it again in the ready queue
		if (curenv != NULL)
f010623e:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f0106243:	85 c0                	test   %eax,%eax
f0106245:	74 16                	je     f010625d <fos_scheduler+0x44>
		{
			enqueue(&(env_ready_queues[0]), curenv);
f0106247:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f010624c:	83 ec 08             	sub    $0x8,%esp
f010624f:	50                   	push   %eax
f0106250:	68 60 3a 25 f0       	push   $0xf0253a60
f0106255:	e8 6b eb ff ff       	call   f0104dc5 <enqueue>
f010625a:	83 c4 10             	add    $0x10,%esp
		}

		//Pick the next environment from the ready queue
		next_env = dequeue(&(env_ready_queues[0]));
f010625d:	83 ec 0c             	sub    $0xc,%esp
f0106260:	68 60 3a 25 f0       	push   $0xf0253a60
f0106265:	e8 ec eb ff ff       	call   f0104e56 <dequeue>
f010626a:	83 c4 10             	add    $0x10,%esp
f010626d:	89 45 f4             	mov    %eax,-0xc(%ebp)

		//Reset the quantum
		//2017: Reset the value of CNT0 for the next clock interval
		kclock_set_quantum(quantums[0]);
f0106270:	a0 e8 bd 2b f0       	mov    0xf02bbde8,%al
f0106275:	0f b6 c0             	movzbl %al,%eax
f0106278:	83 ec 0c             	sub    $0xc,%esp
f010627b:	50                   	push   %eax
f010627c:	e8 31 e9 ff ff       	call   f0104bb2 <kclock_set_quantum>
f0106281:	83 c4 10             	add    $0x10,%esp
f0106284:	eb 26                	jmp    f01062ac <fos_scheduler+0x93>
		//uint16 cnt0 = kclock_read_cnt0_latch() ;
		//cprintf("CLOCK INTERRUPT AFTER RESET: Counter0 Value = %d\n", cnt0 );

	}
	else if (scheduler_method == SCH_MLFQ)
f0106286:	a1 08 be 2b f0       	mov    0xf02bbe08,%eax
f010628b:	83 f8 01             	cmp    $0x1,%eax
f010628e:	75 0a                	jne    f010629a <fos_scheduler+0x81>
	{
		next_env = fos_scheduler_MLFQ();
f0106290:	e8 f9 00 00 00       	call   f010638e <fos_scheduler_MLFQ>
f0106295:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0106298:	eb 12                	jmp    f01062ac <fos_scheduler+0x93>
	}
	else if (scheduler_method == SCH_BSD)
f010629a:	a1 08 be 2b f0       	mov    0xf02bbe08,%eax
f010629f:	83 f8 02             	cmp    $0x2,%eax
f01062a2:	75 08                	jne    f01062ac <fos_scheduler+0x93>
	{
		next_env = fos_scheduler_BSD();
f01062a4:	e8 02 01 00 00       	call   f01063ab <fos_scheduler_BSD>
f01062a9:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}
	//temporarily set the curenv by the next env JUST for checking the scheduler
	//Then: reset it again
	struct Env* old_curenv = curenv;
f01062ac:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f01062b1:	89 45 f0             	mov    %eax,-0x10(%ebp)
	curenv = next_env ;
f01062b4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01062b7:	a3 74 31 25 f0       	mov    %eax,0xf0253174
	chk2(next_env) ;
f01062bc:	83 ec 0c             	sub    $0xc,%esp
f01062bf:	ff 75 f4             	pushl  -0xc(%ebp)
f01062c2:	e8 89 7e 02 00       	call   f012e150 <chk2>
f01062c7:	83 c4 10             	add    $0x10,%esp
	curenv = old_curenv;
f01062ca:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01062cd:	a3 74 31 25 f0       	mov    %eax,0xf0253174

	//sched_print_all();

	if(next_env != NULL)
f01062d2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01062d6:	74 0b                	je     f01062e3 <fos_scheduler+0xca>
	{
		//		cprintf("\nScheduler select program '%s' [%d]... counter = %d\n", next_env->prog_name, next_env->env_id, kclock_read_cnt0());
		//		cprintf("Q0 = %d, Q1 = %d, Q2 = %d, Q3 = %d\n", queue_size(&(env_ready_queues[0])), queue_size(&(env_ready_queues[1])), queue_size(&(env_ready_queues[2])), queue_size(&(env_ready_queues[3])));
		env_run(next_env);
f01062d8:	83 ec 0c             	sub    $0xc,%esp
f01062db:	ff 75 f4             	pushl  -0xc(%ebp)
f01062de:	e8 69 36 00 00       	call   f010994c <env_run>
	}
	else
	{
		/*2015*///No more envs... curenv doesn't exist any more! return back to command prompt
		curenv = NULL;
f01062e3:	c7 05 74 31 25 f0 00 	movl   $0x0,0xf0253174
f01062ea:	00 00 00 
		//lcr3(K_PHYSICAL_ADDRESS(ptr_page_directory));
		lcr3(phys_page_directory);
f01062ed:	a1 70 be 2b f0       	mov    0xf02bbe70,%eax
f01062f2:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01062f5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01062f8:	0f 22 d8             	mov    %eax,%cr3

		//cprintf("SP = %x\n", read_esp());

		scheduler_status = SCH_STOPPED;
f01062fb:	c7 05 14 be 2b f0 00 	movl   $0x0,0xf02bbe14
f0106302:	00 00 00 
		//cprintf("[sched] no envs - nothing more to do!\n");
		while (1)
			run_command_prompt(NULL);
f0106305:	83 ec 0c             	sub    $0xc,%esp
f0106308:	6a 00                	push   $0x0
f010630a:	e8 41 b8 ff ff       	call   f0101b50 <run_command_prompt>
f010630f:	83 c4 10             	add    $0x10,%esp
f0106312:	eb f1                	jmp    f0106305 <fos_scheduler+0xec>

f0106314 <sched_init_RR>:

//=============================
// [3] Initialize RR Scheduler:
//=============================
void sched_init_RR(uint8 quantum)
{
f0106314:	55                   	push   %ebp
f0106315:	89 e5                	mov    %esp,%ebp
f0106317:	83 ec 18             	sub    $0x18,%esp
f010631a:	8b 45 08             	mov    0x8(%ebp),%eax
f010631d:	88 45 f4             	mov    %al,-0xc(%ebp)

	// Create 1 ready queue for the RR
	num_of_ready_queues = 1;
f0106320:	c6 05 44 be 2b f0 01 	movb   $0x1,0xf02bbe44
#if USE_KHEAP
	sched_delete_ready_queues();
	env_ready_queues = kmalloc(sizeof(struct Env_Queue));
	quantums = kmalloc(num_of_ready_queues * sizeof(uint8)) ;
#endif
	quantums[0] = quantum;
f0106327:	8a 45 f4             	mov    -0xc(%ebp),%al
f010632a:	a2 e8 bd 2b f0       	mov    %al,0xf02bbde8
	kclock_set_quantum(quantums[0]);
f010632f:	a0 e8 bd 2b f0       	mov    0xf02bbde8,%al
f0106334:	0f b6 c0             	movzbl %al,%eax
f0106337:	83 ec 0c             	sub    $0xc,%esp
f010633a:	50                   	push   %eax
f010633b:	e8 72 e8 ff ff       	call   f0104bb2 <kclock_set_quantum>
f0106340:	83 c4 10             	add    $0x10,%esp
	init_queue(&(env_ready_queues[0]));
f0106343:	83 ec 0c             	sub    $0xc,%esp
f0106346:	68 60 3a 25 f0       	push   $0xf0253a60
f010634b:	e8 34 ea ff ff       	call   f0104d84 <init_queue>
f0106350:	83 c4 10             	add    $0x10,%esp

	//=========================================
	//DON'T CHANGE THESE LINES=================
	scheduler_status = SCH_STOPPED;
f0106353:	c7 05 14 be 2b f0 00 	movl   $0x0,0xf02bbe14
f010635a:	00 00 00 
	scheduler_method = SCH_RR;
f010635d:	c7 05 08 be 2b f0 00 	movl   $0x0,0xf02bbe08
f0106364:	00 00 00 
	//=========================================
	//=========================================
}
f0106367:	90                   	nop
f0106368:	c9                   	leave  
f0106369:	c3                   	ret    

f010636a <sched_init_MLFQ>:

//===============================
// [4] Initialize MLFQ Scheduler:
//===============================
void sched_init_MLFQ(uint8 numOfLevels, uint8 *quantumOfEachLevel)
{
f010636a:	55                   	push   %ebp
f010636b:	89 e5                	mov    %esp,%ebp
f010636d:	83 ec 04             	sub    $0x4,%esp
f0106370:	8b 45 08             	mov    0x8(%ebp),%eax
f0106373:	88 45 fc             	mov    %al,-0x4(%ebp)
	scheduler_status = SCH_STOPPED;
	scheduler_method = SCH_MLFQ;
	//=========================================
	//=========================================
#endif
}
f0106376:	90                   	nop
f0106377:	c9                   	leave  
f0106378:	c3                   	ret    

f0106379 <sched_init_BSD>:

//===============================
// [5] Initialize BSD Scheduler:
//===============================
void sched_init_BSD(uint8 numOfLevels, uint8 quantum)
{
f0106379:	55                   	push   %ebp
f010637a:	89 e5                	mov    %esp,%ebp
f010637c:	83 ec 08             	sub    $0x8,%esp
f010637f:	8b 55 08             	mov    0x8(%ebp),%edx
f0106382:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106385:	88 55 fc             	mov    %dl,-0x4(%ebp)
f0106388:	88 45 f8             	mov    %al,-0x8(%ebp)
	scheduler_status = SCH_STOPPED;
	scheduler_method = SCH_BSD;
	//=========================================
	//=========================================
#endif
}
f010638b:	90                   	nop
f010638c:	c9                   	leave  
f010638d:	c3                   	ret    

f010638e <fos_scheduler_MLFQ>:

//=========================
// [6] MLFQ Scheduler:
//=========================
struct Env* fos_scheduler_MLFQ()
{
f010638e:	55                   	push   %ebp
f010638f:	89 e5                	mov    %esp,%ebp
f0106391:	83 ec 08             	sub    $0x8,%esp
	panic("not implemented");
f0106394:	83 ec 04             	sub    $0x4,%esp
f0106397:	68 8c 23 13 f0       	push   $0xf013238c
f010639c:	68 b9 00 00 00       	push   $0xb9
f01063a1:	68 9c 23 13 f0       	push   $0xf013239c
f01063a6:	e8 05 9e ff ff       	call   f01001b0 <_panic>

f01063ab <fos_scheduler_BSD>:

//=========================
// [7] BSD Scheduler:
//=========================
struct Env* fos_scheduler_BSD()
{
f01063ab:	55                   	push   %ebp
f01063ac:	89 e5                	mov    %esp,%ebp
f01063ae:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'23.MS3 - #5] [2] BSD SCHEDULER - fos_scheduler_BSD
	//Your code is here
	//Comment the following line
	panic("Not implemented yet");
f01063b1:	83 ec 04             	sub    $0x4,%esp
f01063b4:	68 ad 23 13 f0       	push   $0xf01323ad
f01063b9:	68 c5 00 00 00       	push   $0xc5
f01063be:	68 9c 23 13 f0       	push   $0xf013239c
f01063c3:	e8 e8 9d ff ff       	call   f01001b0 <_panic>

f01063c8 <clock_interrupt_handler>:
//========================================
// [8] Clock Interrupt Handler
//	  (Automatically Called Every Quantum)
//========================================
void clock_interrupt_handler()
{
f01063c8:	55                   	push   %ebp
f01063c9:	89 e5                	mov    %esp,%ebp
f01063cb:	83 ec 08             	sub    $0x8,%esp

	}


	/********DON'T CHANGE THIS LINE***********/
	ticks++ ;
f01063ce:	a1 20 be 2b f0       	mov    0xf02bbe20,%eax
f01063d3:	8b 15 24 be 2b f0    	mov    0xf02bbe24,%edx
f01063d9:	83 c0 01             	add    $0x1,%eax
f01063dc:	83 d2 00             	adc    $0x0,%edx
f01063df:	a3 20 be 2b f0       	mov    %eax,0xf02bbe20
f01063e4:	89 15 24 be 2b f0    	mov    %edx,0xf02bbe24
	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX))
f01063ea:	83 ec 0c             	sub    $0xc,%esp
f01063ed:	6a 01                	push   $0x1
f01063ef:	e8 8b 73 00 00       	call   f010d77f <isPageReplacmentAlgorithmLRU>
f01063f4:	83 c4 10             	add    $0x10,%esp
f01063f7:	85 c0                	test   %eax,%eax
f01063f9:	74 05                	je     f0106400 <clock_interrupt_handler+0x38>
	{
		update_WS_time_stamps();
f01063fb:	e8 05 00 00 00       	call   f0106405 <update_WS_time_stamps>
	}
	//cprintf("Clock Handler\n") ;
	fos_scheduler();
f0106400:	e8 14 fe ff ff       	call   f0106219 <fos_scheduler>

f0106405 <update_WS_time_stamps>:
//===================================================================
// [9] Update LRU Timestamp of WS Elements
//	  (Automatically Called Every Quantum in case of LRU Time Approx)
//===================================================================
void update_WS_time_stamps()
{
f0106405:	55                   	push   %ebp
f0106406:	89 e5                	mov    %esp,%ebp
f0106408:	53                   	push   %ebx
f0106409:	83 ec 34             	sub    $0x34,%esp
	struct Env *curr_env_ptr = curenv;
f010640c:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f0106411:	89 45 ec             	mov    %eax,-0x14(%ebp)

	if(curr_env_ptr != NULL)
f0106414:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0106418:	0f 84 a9 01 00 00    	je     f01065c7 <update_WS_time_stamps+0x1c2>
			int i ;
#if USE_KHEAP
			LIST_FOREACH(wse, &(curr_env_ptr->page_WS_list))
			{
#else
			for (i = 0 ; i < (curr_env_ptr->page_WS_max_size); i++)
f010641e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0106425:	e9 9f 00 00 00       	jmp    f01064c9 <update_WS_time_stamps+0xc4>
			{
				wse = &(curr_env_ptr->ptr_pageWorkingSet[i]);
f010642a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010642d:	89 d0                	mov    %edx,%eax
f010642f:	01 c0                	add    %eax,%eax
f0106431:	01 d0                	add    %edx,%eax
f0106433:	c1 e0 03             	shl    $0x3,%eax
f0106436:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
f010643c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010643f:	01 d0                	add    %edx,%eax
f0106441:	83 c0 08             	add    $0x8,%eax
f0106444:	89 45 e8             	mov    %eax,-0x18(%ebp)
				if( wse->empty == 1)
f0106447:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010644a:	8a 40 04             	mov    0x4(%eax),%al
f010644d:	3c 01                	cmp    $0x1,%al
f010644f:	74 74                	je     f01064c5 <update_WS_time_stamps+0xc0>
					continue;
#endif
				//update the time if the page was referenced
				uint32 page_va = wse->virtual_address ;
f0106451:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106454:	8b 00                	mov    (%eax),%eax
f0106456:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				uint32 perm = pt_get_page_permissions(curr_env_ptr->env_page_directory, page_va) ;
f0106459:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010645c:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0106462:	83 ec 08             	sub    $0x8,%esp
f0106465:	ff 75 e4             	pushl  -0x1c(%ebp)
f0106468:	50                   	push   %eax
f0106469:	e8 75 1c 00 00       	call   f01080e3 <pt_get_page_permissions>
f010646e:	83 c4 10             	add    $0x10,%esp
f0106471:	89 45 e0             	mov    %eax,-0x20(%ebp)
				uint32 oldTimeStamp = wse->time_stamp;
f0106474:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106477:	8b 40 08             	mov    0x8(%eax),%eax
f010647a:	89 45 dc             	mov    %eax,-0x24(%ebp)

				if (perm & PERM_USED)
f010647d:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106480:	83 e0 20             	and    $0x20,%eax
f0106483:	85 c0                	test   %eax,%eax
f0106485:	74 2e                	je     f01064b5 <update_WS_time_stamps+0xb0>
				{
					wse->time_stamp = (oldTimeStamp>>2) | 0x80000000;
f0106487:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010648a:	c1 e8 02             	shr    $0x2,%eax
f010648d:	0d 00 00 00 80       	or     $0x80000000,%eax
f0106492:	89 c2                	mov    %eax,%edx
f0106494:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106497:	89 50 08             	mov    %edx,0x8(%eax)
					pt_set_page_permissions(curr_env_ptr->env_page_directory, page_va, 0 , PERM_USED) ;
f010649a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010649d:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f01064a3:	6a 20                	push   $0x20
f01064a5:	6a 00                	push   $0x0
f01064a7:	ff 75 e4             	pushl  -0x1c(%ebp)
f01064aa:	50                   	push   %eax
f01064ab:	e8 6f 1b 00 00       	call   f010801f <pt_set_page_permissions>
f01064b0:	83 c4 10             	add    $0x10,%esp
f01064b3:	eb 11                	jmp    f01064c6 <update_WS_time_stamps+0xc1>
				}
				else
				{
					wse->time_stamp = (oldTimeStamp>>2);
f01064b5:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01064b8:	c1 e8 02             	shr    $0x2,%eax
f01064bb:	89 c2                	mov    %eax,%edx
f01064bd:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01064c0:	89 50 08             	mov    %edx,0x8(%eax)
f01064c3:	eb 01                	jmp    f01064c6 <update_WS_time_stamps+0xc1>
#else
			for (i = 0 ; i < (curr_env_ptr->page_WS_max_size); i++)
			{
				wse = &(curr_env_ptr->ptr_pageWorkingSet[i]);
				if( wse->empty == 1)
					continue;
f01064c5:	90                   	nop
			int i ;
#if USE_KHEAP
			LIST_FOREACH(wse, &(curr_env_ptr->page_WS_list))
			{
#else
			for (i = 0 ; i < (curr_env_ptr->page_WS_max_size); i++)
f01064c6:	ff 45 f4             	incl   -0xc(%ebp)
f01064c9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01064cc:	8b 90 7c d5 01 00    	mov    0x1d57c(%eax),%edx
f01064d2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01064d5:	39 c2                	cmp    %eax,%edx
f01064d7:	0f 87 4d ff ff ff    	ja     f010642a <update_WS_time_stamps+0x25>
			}
		}

		{
			int t ;
			for (t = 0 ; t < __TWS_MAX_SIZE; t++)
f01064dd:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01064e4:	e9 d4 00 00 00       	jmp    f01065bd <update_WS_time_stamps+0x1b8>
			{
				if( curr_env_ptr->__ptr_tws[t].empty != 1)
f01064e9:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f01064ec:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01064ef:	89 d0                	mov    %edx,%eax
f01064f1:	01 c0                	add    %eax,%eax
f01064f3:	01 d0                	add    %edx,%eax
f01064f5:	c1 e0 03             	shl    $0x3,%eax
f01064f8:	01 c8                	add    %ecx,%eax
f01064fa:	05 84 d5 01 00       	add    $0x1d584,%eax
f01064ff:	8a 00                	mov    (%eax),%al
f0106501:	3c 01                	cmp    $0x1,%al
f0106503:	0f 84 b1 00 00 00    	je     f01065ba <update_WS_time_stamps+0x1b5>
				{
					//update the time if the page was referenced
					uint32 table_va = curr_env_ptr->__ptr_tws[t].virtual_address;
f0106509:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f010650c:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010650f:	89 d0                	mov    %edx,%eax
f0106511:	01 c0                	add    %eax,%eax
f0106513:	01 d0                	add    %edx,%eax
f0106515:	c1 e0 03             	shl    $0x3,%eax
f0106518:	01 c8                	add    %ecx,%eax
f010651a:	05 80 d5 01 00       	add    $0x1d580,%eax
f010651f:	8b 00                	mov    (%eax),%eax
f0106521:	89 45 d8             	mov    %eax,-0x28(%ebp)
					uint32 oldTimeStamp = curr_env_ptr->__ptr_tws[t].time_stamp;
f0106524:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f0106527:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010652a:	89 d0                	mov    %edx,%eax
f010652c:	01 c0                	add    %eax,%eax
f010652e:	01 d0                	add    %edx,%eax
f0106530:	c1 e0 03             	shl    $0x3,%eax
f0106533:	01 c8                	add    %ecx,%eax
f0106535:	05 88 d5 01 00       	add    $0x1d588,%eax
f010653a:	8b 00                	mov    (%eax),%eax
f010653c:	89 45 d4             	mov    %eax,-0x2c(%ebp)

					if (pd_is_table_used(curr_env_ptr->env_page_directory, table_va))
f010653f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106542:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0106548:	83 ec 08             	sub    $0x8,%esp
f010654b:	ff 75 d8             	pushl  -0x28(%ebp)
f010654e:	50                   	push   %eax
f010654f:	e8 6b 1c 00 00       	call   f01081bf <pd_is_table_used>
f0106554:	83 c4 10             	add    $0x10,%esp
f0106557:	85 c0                	test   %eax,%eax
f0106559:	74 3f                	je     f010659a <update_WS_time_stamps+0x195>
					{
						curr_env_ptr->__ptr_tws[t].time_stamp = (oldTimeStamp>>2) | 0x80000000;
f010655b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010655e:	c1 e8 02             	shr    $0x2,%eax
f0106561:	0d 00 00 00 80       	or     $0x80000000,%eax
f0106566:	89 c1                	mov    %eax,%ecx
f0106568:	8b 5d ec             	mov    -0x14(%ebp),%ebx
f010656b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010656e:	89 d0                	mov    %edx,%eax
f0106570:	01 c0                	add    %eax,%eax
f0106572:	01 d0                	add    %edx,%eax
f0106574:	c1 e0 03             	shl    $0x3,%eax
f0106577:	01 d8                	add    %ebx,%eax
f0106579:	05 88 d5 01 00       	add    $0x1d588,%eax
f010657e:	89 08                	mov    %ecx,(%eax)
						pd_set_table_unused(curr_env_ptr->env_page_directory, table_va);
f0106580:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106583:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0106589:	83 ec 08             	sub    $0x8,%esp
f010658c:	ff 75 d8             	pushl  -0x28(%ebp)
f010658f:	50                   	push   %eax
f0106590:	e8 4e 1c 00 00       	call   f01081e3 <pd_set_table_unused>
f0106595:	83 c4 10             	add    $0x10,%esp
f0106598:	eb 20                	jmp    f01065ba <update_WS_time_stamps+0x1b5>
					}
					else
					{
						curr_env_ptr->__ptr_tws[t].time_stamp = (oldTimeStamp>>2);
f010659a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010659d:	c1 e8 02             	shr    $0x2,%eax
f01065a0:	89 c1                	mov    %eax,%ecx
f01065a2:	8b 5d ec             	mov    -0x14(%ebp),%ebx
f01065a5:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01065a8:	89 d0                	mov    %edx,%eax
f01065aa:	01 c0                	add    %eax,%eax
f01065ac:	01 d0                	add    %edx,%eax
f01065ae:	c1 e0 03             	shl    $0x3,%eax
f01065b1:	01 d8                	add    %ebx,%eax
f01065b3:	05 88 d5 01 00       	add    $0x1d588,%eax
f01065b8:	89 08                	mov    %ecx,(%eax)
			}
		}

		{
			int t ;
			for (t = 0 ; t < __TWS_MAX_SIZE; t++)
f01065ba:	ff 45 f0             	incl   -0x10(%ebp)
f01065bd:	83 7d f0 31          	cmpl   $0x31,-0x10(%ebp)
f01065c1:	0f 8e 22 ff ff ff    	jle    f01064e9 <update_WS_time_stamps+0xe4>
					}
				}
			}
		}
	}
}
f01065c7:	90                   	nop
f01065c8:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01065cb:	c9                   	leave  
f01065cc:	c3                   	ret    

f01065cd <pic_init>:
static bool didinit;

/* Initialize the 8259A interrupt controllers. */
void
pic_init(void)
{
f01065cd:	55                   	push   %ebp
f01065ce:	89 e5                	mov    %esp,%ebp
f01065d0:	83 ec 58             	sub    $0x58,%esp
	didinit = 1;
f01065d3:	c7 05 6c 31 25 f0 01 	movl   $0x1,0xf025316c
f01065da:	00 00 00 
f01065dd:	c7 45 f4 21 00 00 00 	movl   $0x21,-0xc(%ebp)
f01065e4:	c6 45 b2 ff          	movb   $0xff,-0x4e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01065e8:	8a 45 b2             	mov    -0x4e(%ebp),%al
f01065eb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01065ee:	ee                   	out    %al,(%dx)
f01065ef:	c7 45 f0 a1 00 00 00 	movl   $0xa1,-0x10(%ebp)
f01065f6:	c6 45 b3 ff          	movb   $0xff,-0x4d(%ebp)
f01065fa:	8a 45 b3             	mov    -0x4d(%ebp),%al
f01065fd:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106600:	ee                   	out    %al,(%dx)
f0106601:	c7 45 ec 20 00 00 00 	movl   $0x20,-0x14(%ebp)
f0106608:	c6 45 b4 11          	movb   $0x11,-0x4c(%ebp)
f010660c:	8a 45 b4             	mov    -0x4c(%ebp),%al
f010660f:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0106612:	ee                   	out    %al,(%dx)
f0106613:	c7 45 e8 21 00 00 00 	movl   $0x21,-0x18(%ebp)
f010661a:	c6 45 b5 20          	movb   $0x20,-0x4b(%ebp)
f010661e:	8a 45 b5             	mov    -0x4b(%ebp),%al
f0106621:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0106624:	ee                   	out    %al,(%dx)
f0106625:	c7 45 e4 21 00 00 00 	movl   $0x21,-0x1c(%ebp)
f010662c:	c6 45 b6 04          	movb   $0x4,-0x4a(%ebp)
f0106630:	8a 45 b6             	mov    -0x4a(%ebp),%al
f0106633:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0106636:	ee                   	out    %al,(%dx)
f0106637:	c7 45 e0 21 00 00 00 	movl   $0x21,-0x20(%ebp)
f010663e:	c6 45 b7 03          	movb   $0x3,-0x49(%ebp)
f0106642:	8a 45 b7             	mov    -0x49(%ebp),%al
f0106645:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0106648:	ee                   	out    %al,(%dx)
f0106649:	c7 45 dc a0 00 00 00 	movl   $0xa0,-0x24(%ebp)
f0106650:	c6 45 b8 11          	movb   $0x11,-0x48(%ebp)
f0106654:	8a 45 b8             	mov    -0x48(%ebp),%al
f0106657:	8b 55 dc             	mov    -0x24(%ebp),%edx
f010665a:	ee                   	out    %al,(%dx)
f010665b:	c7 45 d8 a1 00 00 00 	movl   $0xa1,-0x28(%ebp)
f0106662:	c6 45 b9 28          	movb   $0x28,-0x47(%ebp)
f0106666:	8a 45 b9             	mov    -0x47(%ebp),%al
f0106669:	8b 55 d8             	mov    -0x28(%ebp),%edx
f010666c:	ee                   	out    %al,(%dx)
f010666d:	c7 45 d4 a1 00 00 00 	movl   $0xa1,-0x2c(%ebp)
f0106674:	c6 45 ba 02          	movb   $0x2,-0x46(%ebp)
f0106678:	8a 45 ba             	mov    -0x46(%ebp),%al
f010667b:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f010667e:	ee                   	out    %al,(%dx)
f010667f:	c7 45 d0 a1 00 00 00 	movl   $0xa1,-0x30(%ebp)
f0106686:	c6 45 bb 01          	movb   $0x1,-0x45(%ebp)
f010668a:	8a 45 bb             	mov    -0x45(%ebp),%al
f010668d:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0106690:	ee                   	out    %al,(%dx)
f0106691:	c7 45 cc 20 00 00 00 	movl   $0x20,-0x34(%ebp)
f0106698:	c6 45 bc 68          	movb   $0x68,-0x44(%ebp)
f010669c:	8a 45 bc             	mov    -0x44(%ebp),%al
f010669f:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01066a2:	ee                   	out    %al,(%dx)
f01066a3:	c7 45 c8 20 00 00 00 	movl   $0x20,-0x38(%ebp)
f01066aa:	c6 45 bd 0a          	movb   $0xa,-0x43(%ebp)
f01066ae:	8a 45 bd             	mov    -0x43(%ebp),%al
f01066b1:	8b 55 c8             	mov    -0x38(%ebp),%edx
f01066b4:	ee                   	out    %al,(%dx)
f01066b5:	c7 45 c4 a0 00 00 00 	movl   $0xa0,-0x3c(%ebp)
f01066bc:	c6 45 be 68          	movb   $0x68,-0x42(%ebp)
f01066c0:	8a 45 be             	mov    -0x42(%ebp),%al
f01066c3:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01066c6:	ee                   	out    %al,(%dx)
f01066c7:	c7 45 c0 a0 00 00 00 	movl   $0xa0,-0x40(%ebp)
f01066ce:	c6 45 bf 0a          	movb   $0xa,-0x41(%ebp)
f01066d2:	8a 45 bf             	mov    -0x41(%ebp),%al
f01066d5:	8b 55 c0             	mov    -0x40(%ebp),%edx
f01066d8:	ee                   	out    %al,(%dx)
	outb(IO_PIC1, 0x0a);             /* read IRR by default */

	outb(IO_PIC2, 0x68);               /* OCW3 */
	outb(IO_PIC2, 0x0a);               /* OCW3 */

	if (irq_mask_8259A != 0xFFFF)
f01066d9:	66 a1 64 e9 18 f0    	mov    0xf018e964,%ax
f01066df:	66 83 f8 ff          	cmp    $0xffff,%ax
f01066e3:	74 15                	je     f01066fa <pic_init+0x12d>
		irq_setmask_8259A(irq_mask_8259A);
f01066e5:	66 a1 64 e9 18 f0    	mov    0xf018e964,%ax
f01066eb:	0f b7 c0             	movzwl %ax,%eax
f01066ee:	83 ec 0c             	sub    $0xc,%esp
f01066f1:	50                   	push   %eax
f01066f2:	e8 06 00 00 00       	call   f01066fd <irq_setmask_8259A>
f01066f7:	83 c4 10             	add    $0x10,%esp
}
f01066fa:	90                   	nop
f01066fb:	c9                   	leave  
f01066fc:	c3                   	ret    

f01066fd <irq_setmask_8259A>:

void
irq_setmask_8259A(uint16 mask)
{
f01066fd:	55                   	push   %ebp
f01066fe:	89 e5                	mov    %esp,%ebp
f0106700:	83 ec 14             	sub    $0x14,%esp
f0106703:	8b 45 08             	mov    0x8(%ebp),%eax
f0106706:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	int i;
	irq_mask_8259A = mask;
f010670a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010670d:	66 a3 64 e9 18 f0    	mov    %ax,0xf018e964
	if (!didinit)
f0106713:	a1 6c 31 25 f0       	mov    0xf025316c,%eax
f0106718:	85 c0                	test   %eax,%eax
f010671a:	74 34                	je     f0106750 <irq_setmask_8259A+0x53>
		return;
	outb(IO_PIC1+1, (char)mask);
f010671c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010671f:	0f b6 c0             	movzbl %al,%eax
f0106722:	c7 45 fc 21 00 00 00 	movl   $0x21,-0x4(%ebp)
f0106729:	88 45 f6             	mov    %al,-0xa(%ebp)
f010672c:	8a 45 f6             	mov    -0xa(%ebp),%al
f010672f:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0106732:	ee                   	out    %al,(%dx)
	outb(IO_PIC2+1, (char)(mask >> 8));
f0106733:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106736:	66 c1 e8 08          	shr    $0x8,%ax
f010673a:	0f b6 c0             	movzbl %al,%eax
f010673d:	c7 45 f8 a1 00 00 00 	movl   $0xa1,-0x8(%ebp)
f0106744:	88 45 f7             	mov    %al,-0x9(%ebp)
f0106747:	8a 45 f7             	mov    -0x9(%ebp),%al
f010674a:	8b 55 f8             	mov    -0x8(%ebp),%edx
f010674d:	ee                   	out    %al,(%dx)
f010674e:	eb 01                	jmp    f0106751 <irq_setmask_8259A+0x54>
irq_setmask_8259A(uint16 mask)
{
	int i;
	irq_mask_8259A = mask;
	if (!didinit)
		return;
f0106750:	90                   	nop
	//cprintf("enabled interrupts:");
	//for (i = 0; i < 16; i++)
		//if (~mask & (1<<i))
			//cprintf(" %d", i);
	//cprintf("\n");
}
f0106751:	c9                   	leave  
f0106752:	c3                   	ret    

f0106753 <initialize_kernel_VM>:
//
// From USER_TOP to USER_LIMIT, the user is allowed to read but not write.
// Above USER_LIMIT the user cannot read (or write).

void initialize_kernel_VM()
{
f0106753:	55                   	push   %ebp
f0106754:	89 e5                	mov    %esp,%ebp
f0106756:	83 ec 38             	sub    $0x38,%esp
	//panic("initialize_kernel_VM: This function is not finished\n");

	//////////////////////////////////////////////////////////////////////
	// create initial page directory.

	ptr_page_directory = boot_allocate_space(PAGE_SIZE, PAGE_SIZE);
f0106759:	83 ec 08             	sub    $0x8,%esp
f010675c:	68 00 10 00 00       	push   $0x1000
f0106761:	68 00 10 00 00       	push   $0x1000
f0106766:	e8 0a 02 00 00       	call   f0106975 <boot_allocate_space>
f010676b:	83 c4 10             	add    $0x10,%esp
f010676e:	a3 30 be 2b f0       	mov    %eax,0xf02bbe30
	/*2023: this line is moved to the boot_allocate_space()*/ //memset(ptr_page_directory, 0, PAGE_SIZE);
	phys_page_directory = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory);
f0106773:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f0106778:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010677b:	81 7d e8 ff ff ff ef 	cmpl   $0xefffffff,-0x18(%ebp)
f0106782:	77 14                	ja     f0106798 <initialize_kernel_VM+0x45>
f0106784:	ff 75 e8             	pushl  -0x18(%ebp)
f0106787:	68 c4 23 13 f0       	push   $0xf01323c4
f010678c:	6a 45                	push   $0x45
f010678e:	68 f8 23 13 f0       	push   $0xf01323f8
f0106793:	e8 18 9a ff ff       	call   f01001b0 <_panic>
f0106798:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010679b:	05 00 00 00 10       	add    $0x10000000,%eax
f01067a0:	a3 70 be 2b f0       	mov    %eax,0xf02bbe70
	// Map the kernel stack with VA range :
	//  [KERNEL_STACK_TOP-KERNEL_STACK_SIZE, KERNEL_STACK_TOP),
	// to physical address : "phys_stack_bottom".
	//     Permissions: kernel RW, user NONE
	// Your code goes here:
	boot_map_range(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE, KERNEL_STACK_SIZE, STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom), PERM_WRITEABLE) ;
f01067a5:	c7 45 e4 00 60 18 f0 	movl   $0xf0186000,-0x1c(%ebp)
f01067ac:	81 7d e4 ff ff ff ef 	cmpl   $0xefffffff,-0x1c(%ebp)
f01067b3:	77 14                	ja     f01067c9 <initialize_kernel_VM+0x76>
f01067b5:	ff 75 e4             	pushl  -0x1c(%ebp)
f01067b8:	68 c4 23 13 f0       	push   $0xf01323c4
f01067bd:	6a 4d                	push   $0x4d
f01067bf:	68 f8 23 13 f0       	push   $0xf01323f8
f01067c4:	e8 e7 99 ff ff       	call   f01001b0 <_panic>
f01067c9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01067cc:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edx
f01067d2:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f01067d7:	83 ec 0c             	sub    $0xc,%esp
f01067da:	6a 02                	push   $0x2
f01067dc:	52                   	push   %edx
f01067dd:	68 00 80 00 00       	push   $0x8000
f01067e2:	68 00 80 bf ef       	push   $0xefbf8000
f01067e7:	50                   	push   %eax
f01067e8:	e8 fc 01 00 00       	call   f01069e9 <boot_map_range>
f01067ed:	83 c4 20             	add    $0x20,%esp
	// Permissions: kernel RW, user NONE
	// Your code goes here:

	//2016:
	//boot tables
	unsigned long long sva = KERNEL_BASE;
f01067f0:	c7 45 f0 00 00 00 f0 	movl   $0xf0000000,-0x10(%ebp)
f01067f7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	unsigned int nTables=0;
f01067fe:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	for (;sva < 0xFFFFFFFF;  sva += PTSIZE)
f0106805:	eb 25                	jmp    f010682c <initialize_kernel_VM+0xd9>
	{
		++nTables;
f0106807:	ff 45 ec             	incl   -0x14(%ebp)
		boot_get_page_table(ptr_page_directory, (uint32)sva, 1);
f010680a:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010680d:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f0106812:	83 ec 04             	sub    $0x4,%esp
f0106815:	6a 01                	push   $0x1
f0106817:	52                   	push   %edx
f0106818:	50                   	push   %eax
f0106819:	e8 3f 02 00 00       	call   f0106a5d <boot_get_page_table>
f010681e:	83 c4 10             	add    $0x10,%esp

	//2016:
	//boot tables
	unsigned long long sva = KERNEL_BASE;
	unsigned int nTables=0;
	for (;sva < 0xFFFFFFFF;  sva += PTSIZE)
f0106821:	81 45 f0 00 00 40 00 	addl   $0x400000,-0x10(%ebp)
f0106828:	83 55 f4 00          	adcl   $0x0,-0xc(%ebp)
f010682c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0106830:	72 d5                	jb     f0106807 <initialize_kernel_VM+0xb4>
f0106832:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0106836:	77 06                	ja     f010683e <initialize_kernel_VM+0xeb>
f0106838:	83 7d f0 fe          	cmpl   $0xfffffffe,-0x10(%ebp)
f010683c:	76 c9                	jbe    f0106807 <initialize_kernel_VM+0xb4>
	//    - frames_info -- kernel RW, user NONE
	//    - the image mapped at READ_ONLY_FRAMES_INFO  -- kernel R, user R
	// Your code goes here:
	//cprintf("size of WorkingSetPage = %d\n",sizeof(struct WorkingSetPage));
	uint32 array_size;
	array_size = number_of_frames * sizeof(struct FrameInfo) ;
f010683e:	8b 15 d0 bd 2b f0    	mov    0xf02bbdd0,%edx
f0106844:	89 d0                	mov    %edx,%eax
f0106846:	01 c0                	add    %eax,%eax
f0106848:	01 d0                	add    %edx,%eax
f010684a:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f0106851:	01 c8                	add    %ecx,%eax
f0106853:	01 d0                	add    %edx,%eax
f0106855:	89 45 e0             	mov    %eax,-0x20(%ebp)
	frames_info = boot_allocate_space(array_size, PAGE_SIZE);
f0106858:	83 ec 08             	sub    $0x8,%esp
f010685b:	68 00 10 00 00       	push   $0x1000
f0106860:	ff 75 e0             	pushl  -0x20(%ebp)
f0106863:	e8 0d 01 00 00       	call   f0106975 <boot_allocate_space>
f0106868:	83 c4 10             	add    $0x10,%esp
f010686b:	a3 10 be 2b f0       	mov    %eax,0xf02bbe10
	//2016: Not valid any more since the RAM size exceed the 64 MB limit. This lead to the
	// 		size of "frames_info" can exceed the 4 MB space for "READ_ONLY_FRAMES_INFO"
	//boot_map_range(ptr_page_directory, READ_ONLY_FRAMES_INFO, array_size, STATIC_KERNEL_PHYSICAL_ADDRESS(frames_info),PERM_USER) ;


	uint32 disk_array_size = PAGES_PER_FILE * sizeof(struct FrameInfo);
f0106870:	c7 45 dc 00 e0 38 00 	movl   $0x38e000,-0x24(%ebp)
	disk_frames_info = boot_allocate_space(disk_array_size , PAGE_SIZE);
f0106877:	83 ec 08             	sub    $0x8,%esp
f010687a:	68 00 10 00 00       	push   $0x1000
f010687f:	ff 75 dc             	pushl  -0x24(%ebp)
f0106882:	e8 ee 00 00 00       	call   f0106975 <boot_allocate_space>
f0106887:	83 c4 10             	add    $0x10,%esp
f010688a:	a3 50 3a 25 f0       	mov    %eax,0xf0253a50
	/*2023: this line is moved to the boot_allocate_space()*/ //memset(disk_frames_info , 0, disk_array_size);

	// This allows the kernel & user to access any page table entry using a
	// specified VA for each: VPT for kernel and UVPT for User.
	setup_listing_to_all_page_tables_entries();
f010688f:	e8 fe 04 00 00       	call   f0106d92 <setup_listing_to_all_page_tables_entries>
	// Permissions:
	//    - envs itself -- kernel RW, user NONE
	//    - the image of envs mapped at UENVS  -- kernel R, user R

	// LAB 3: Your code here.
	cprintf("Max Envs = %d, Nearest Pow of 2 = %d\n",NENV, NEARPOW2NENV);
f0106894:	83 ec 0c             	sub    $0xc,%esp
f0106897:	6a 08                	push   $0x8
f0106899:	e8 2a 73 02 00       	call   f012dbc8 <nearest_pow2_ceil>
f010689e:	83 c4 10             	add    $0x10,%esp
f01068a1:	83 ec 04             	sub    $0x4,%esp
f01068a4:	50                   	push   %eax
f01068a5:	6a 08                	push   $0x8
f01068a7:	68 18 24 13 f0       	push   $0xf0132418
f01068ac:	e8 80 a5 ff ff       	call   f0100e31 <cprintf>
f01068b1:	83 c4 10             	add    $0x10,%esp
	int envs_size = NENV * sizeof(struct Env) ;
f01068b4:	c7 45 d8 00 d5 0e 00 	movl   $0xed500,-0x28(%ebp)

	//allocate space for "envs" array aligned on 4KB boundary
	envs = boot_allocate_space(envs_size, PAGE_SIZE);
f01068bb:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01068be:	83 ec 08             	sub    $0x8,%esp
f01068c1:	68 00 10 00 00       	push   $0x1000
f01068c6:	50                   	push   %eax
f01068c7:	e8 a9 00 00 00       	call   f0106975 <boot_allocate_space>
f01068cc:	83 c4 10             	add    $0x10,%esp
f01068cf:	a3 70 31 25 f0       	mov    %eax,0xf0253170
	/*2023: this line is moved to the boot_allocate_space()*/ //memset(envs , 0, envs_size);

	//make the user to access this array by mapping it to UPAGES linear address (UPAGES is in User/Kernel space)
	boot_map_range(ptr_page_directory, UENVS, envs_size, STATIC_KERNEL_PHYSICAL_ADDRESS(envs), PERM_USER) ;
f01068d4:	a1 70 31 25 f0       	mov    0xf0253170,%eax
f01068d9:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f01068dc:	81 7d d4 ff ff ff ef 	cmpl   $0xefffffff,-0x2c(%ebp)
f01068e3:	77 17                	ja     f01068fc <initialize_kernel_VM+0x1a9>
f01068e5:	ff 75 d4             	pushl  -0x2c(%ebp)
f01068e8:	68 c4 23 13 f0       	push   $0xf01323c4
f01068ed:	68 96 00 00 00       	push   $0x96
f01068f2:	68 f8 23 13 f0       	push   $0xf01323f8
f01068f7:	e8 b4 98 ff ff       	call   f01001b0 <_panic>
f01068fc:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01068ff:	8d 88 00 00 00 10    	lea    0x10000000(%eax),%ecx
f0106905:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0106908:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f010690d:	83 ec 0c             	sub    $0xc,%esp
f0106910:	6a 04                	push   $0x4
f0106912:	51                   	push   %ecx
f0106913:	52                   	push   %edx
f0106914:	68 00 00 c0 ee       	push   $0xeec00000
f0106919:	50                   	push   %eax
f010691a:	e8 ca 00 00 00       	call   f01069e9 <boot_map_range>
f010691f:	83 c4 20             	add    $0x20,%esp

	//update permissions of the corresponding entry in page directory to make it USER with PERMISSION read only
	ptr_page_directory[PDX(UENVS)] = ptr_page_directory[PDX(UENVS)]|(PERM_USER|(PERM_PRESENT & (~PERM_WRITEABLE)));
f0106922:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f0106927:	05 ec 0e 00 00       	add    $0xeec,%eax
f010692c:	8b 15 30 be 2b f0    	mov    0xf02bbe30,%edx
f0106932:	81 c2 ec 0e 00 00    	add    $0xeec,%edx
f0106938:	8b 12                	mov    (%edx),%edx
f010693a:	83 ca 05             	or     $0x5,%edx
f010693d:	89 10                	mov    %edx,(%eax)
		// map all used pages so far for the kernel
		boot_map_range(ptr_page_directory, KERNEL_BASE, (uint32)ptr_free_mem - KERNEL_BASE, 0, PERM_WRITEABLE) ;
	}
#else
	{
		boot_map_range(ptr_page_directory, KERNEL_BASE, 0xFFFFFFFF - KERNEL_BASE, 0, PERM_WRITEABLE) ;
f010693f:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f0106944:	83 ec 0c             	sub    $0xc,%esp
f0106947:	6a 02                	push   $0x2
f0106949:	6a 00                	push   $0x0
f010694b:	68 ff ff ff 0f       	push   $0xfffffff
f0106950:	68 00 00 00 f0       	push   $0xf0000000
f0106955:	50                   	push   %eax
f0106956:	e8 8e 00 00 00       	call   f01069e9 <boot_map_range>
f010695b:	83 c4 20             	add    $0x20,%esp
	}
#endif
	// Check that the initial page directory has been set up correctly.
	check_boot_pgdir();
f010695e:	e8 3c 7a 02 00       	call   f012e39f <check_boot_pgdir>

	memory_scarce_threshold_percentage = DEFAULT_MEM_SCARCE_PERCENTAGE;	// Memory remains plentiful till % of free frames gets below 25% of the memory space
f0106963:	c7 05 c0 99 2b f0 19 	movl   $0x19,0xf02b99c0
f010696a:	00 00 00 

	/*
	NOW: Turn off the segmentation by setting the segments' base to 0, and
	turn on the paging by setting the corresponding flags in control register 0 (cr0)
	 */
	turn_on_paging() ;
f010696d:	e8 20 03 00 00       	call   f0106c92 <turn_on_paging>
}
f0106972:	90                   	nop
f0106973:	c9                   	leave  
f0106974:	c3                   	ret    

f0106975 <boot_allocate_space>:
// It's too early to run out of memory.
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
void* boot_allocate_space(uint32 size, uint32 align)
{
f0106975:	55                   	push   %ebp
f0106976:	89 e5                	mov    %esp,%ebp
f0106978:	83 ec 18             	sub    $0x18,%esp
	// Initialize ptr_free_mem if this is the first time.
	// 'end_of_kernel' is a symbol automatically generated by the linker,
	// which points to the end of the kernel-
	// i.e., the first virtual address that the linker
	// did not assign to any kernel code or global variables.
	if (ptr_free_mem == 0)
f010697b:	a1 2c be 2b f0       	mov    0xf02bbe2c,%eax
f0106980:	85 c0                	test   %eax,%eax
f0106982:	75 0a                	jne    f010698e <boot_allocate_space+0x19>
		ptr_free_mem = end_of_kernel;
f0106984:	c7 05 2c be 2b f0 6c 	movl   $0xf02de56c,0xf02bbe2c
f010698b:	e5 2d f0 

	// Your code here:
	//	Step 1: round ptr_free_mem up to be aligned properly
	ptr_free_mem = ROUNDUP(ptr_free_mem, align) ;
f010698e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106991:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0106994:	a1 2c be 2b f0       	mov    0xf02bbe2c,%eax
f0106999:	89 c2                	mov    %eax,%edx
f010699b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010699e:	01 d0                	add    %edx,%eax
f01069a0:	48                   	dec    %eax
f01069a1:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01069a4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01069a7:	ba 00 00 00 00       	mov    $0x0,%edx
f01069ac:	f7 75 f4             	divl   -0xc(%ebp)
f01069af:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01069b2:	29 d0                	sub    %edx,%eax
f01069b4:	a3 2c be 2b f0       	mov    %eax,0xf02bbe2c

	//	Step 2: save current value of ptr_free_mem as allocated space
	void *ptr_allocated_mem;
	ptr_allocated_mem = ptr_free_mem ;
f01069b9:	a1 2c be 2b f0       	mov    0xf02bbe2c,%eax
f01069be:	89 45 ec             	mov    %eax,-0x14(%ebp)

	//	Step 3: increase ptr_free_mem to record allocation
	ptr_free_mem += size ;
f01069c1:	8b 15 2c be 2b f0    	mov    0xf02bbe2c,%edx
f01069c7:	8b 45 08             	mov    0x8(%ebp),%eax
f01069ca:	01 d0                	add    %edx,%eax
f01069cc:	a3 2c be 2b f0       	mov    %eax,0xf02bbe2c

	//// 2016: Step 3.5: initialize allocated space by ZEROOOOOOOOOOOOOO
	/*2023*/ /*THIS LINE IS UNCOMMENTED To Ensure that any boot allocations ARE SET TO ZERO
	 * This is mainly to ensure that any restart will be fresh and no grabage data will be exist
	 */
	memset(ptr_allocated_mem, 0, size);
f01069d1:	83 ec 04             	sub    $0x4,%esp
f01069d4:	ff 75 08             	pushl  0x8(%ebp)
f01069d7:	6a 00                	push   $0x0
f01069d9:	ff 75 ec             	pushl  -0x14(%ebp)
f01069dc:	e8 4a 86 02 00       	call   f012f02b <memset>
f01069e1:	83 c4 10             	add    $0x10,%esp

	//	Step 4: return allocated space
	return ptr_allocated_mem ;
f01069e4:	8b 45 ec             	mov    -0x14(%ebp),%eax

}
f01069e7:	c9                   	leave  
f01069e8:	c3                   	ret    

f01069e9 <boot_map_range>:
//
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
void boot_map_range(uint32 *ptr_page_directory, uint32 virtual_address, uint32 size, uint32 physical_address, int perm)
{
f01069e9:	55                   	push   %ebp
f01069ea:	89 e5                	mov    %esp,%ebp
f01069ec:	83 ec 18             	sub    $0x18,%esp
	int i = 0 ;
f01069ef:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	//physical_address = ROUNDUP(physical_address, PAGE_SIZE) ;
	///we assume here that all addresses are given divisible by 4 KB, look at boot_allocate_space ...

	for (i = 0 ; i < size ; i += PAGE_SIZE)
f01069f6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01069fd:	eb 53                	jmp    f0106a52 <boot_map_range+0x69>
	{
		uint32 *ptr_page_table = boot_get_page_table(ptr_page_directory, virtual_address, 1) ;
f01069ff:	83 ec 04             	sub    $0x4,%esp
f0106a02:	6a 01                	push   $0x1
f0106a04:	ff 75 0c             	pushl  0xc(%ebp)
f0106a07:	ff 75 08             	pushl  0x8(%ebp)
f0106a0a:	e8 4e 00 00 00       	call   f0106a5d <boot_get_page_table>
f0106a0f:	83 c4 10             	add    $0x10,%esp
f0106a12:	89 45 f0             	mov    %eax,-0x10(%ebp)
		uint32 index_page_table = PTX(virtual_address);
f0106a15:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106a18:	c1 e8 0c             	shr    $0xc,%eax
f0106a1b:	25 ff 03 00 00       	and    $0x3ff,%eax
f0106a20:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//LOG_VARS("\nCONSTRUCT_ENTRY = %x",physical_address);
		ptr_page_table[index_page_table] = CONSTRUCT_ENTRY(physical_address, perm | PERM_PRESENT) ;
f0106a23:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106a26:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106a2d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106a30:	01 c2                	add    %eax,%edx
f0106a32:	8b 45 18             	mov    0x18(%ebp),%eax
f0106a35:	0b 45 14             	or     0x14(%ebp),%eax
f0106a38:	83 c8 01             	or     $0x1,%eax
f0106a3b:	89 02                	mov    %eax,(%edx)

		physical_address += PAGE_SIZE ;
f0106a3d:	81 45 14 00 10 00 00 	addl   $0x1000,0x14(%ebp)
		virtual_address += PAGE_SIZE ;
f0106a44:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
{
	int i = 0 ;
	//physical_address = ROUNDUP(physical_address, PAGE_SIZE) ;
	///we assume here that all addresses are given divisible by 4 KB, look at boot_allocate_space ...

	for (i = 0 ; i < size ; i += PAGE_SIZE)
f0106a4b:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0106a52:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106a55:	3b 45 10             	cmp    0x10(%ebp),%eax
f0106a58:	72 a5                	jb     f01069ff <boot_map_range+0x16>
		ptr_page_table[index_page_table] = CONSTRUCT_ENTRY(physical_address, perm | PERM_PRESENT) ;

		physical_address += PAGE_SIZE ;
		virtual_address += PAGE_SIZE ;
	}
}
f0106a5a:	90                   	nop
f0106a5b:	c9                   	leave  
f0106a5c:	c3                   	ret    

f0106a5d <boot_get_page_table>:
// boot_get_page_table cannot fail.  It's too early to fail.
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
uint32* boot_get_page_table(uint32 *ptr_page_directory, uint32 virtual_address, int create)
{
f0106a5d:	55                   	push   %ebp
f0106a5e:	89 e5                	mov    %esp,%ebp
f0106a60:	83 ec 28             	sub    $0x28,%esp
	uint32 index_page_directory = PDX(virtual_address);
f0106a63:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106a66:	c1 e8 16             	shr    $0x16,%eax
f0106a69:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 page_directory_entry = ptr_page_directory[index_page_directory];
f0106a6c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106a6f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106a76:	8b 45 08             	mov    0x8(%ebp),%eax
f0106a79:	01 d0                	add    %edx,%eax
f0106a7b:	8b 00                	mov    (%eax),%eax
f0106a7d:	89 45 f0             	mov    %eax,-0x10(%ebp)

	//cprintf("boot d ind = %d, entry = %x\n",index_page_directory, page_directory_entry);
	uint32 phys_page_table = EXTRACT_ADDRESS(page_directory_entry);
f0106a80:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106a83:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106a88:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 *ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(phys_page_table);
f0106a8b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106a8e:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0106a91:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106a94:	c1 e8 0c             	shr    $0xc,%eax
f0106a97:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0106a9a:	a1 d0 bd 2b f0       	mov    0xf02bbdd0,%eax
f0106a9f:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f0106aa2:	72 17                	jb     f0106abb <boot_get_page_table+0x5e>
f0106aa4:	ff 75 e8             	pushl  -0x18(%ebp)
f0106aa7:	68 40 24 13 f0       	push   $0xf0132440
f0106aac:	68 18 01 00 00       	push   $0x118
f0106ab1:	68 f8 23 13 f0       	push   $0xf01323f8
f0106ab6:	e8 f5 96 ff ff       	call   f01001b0 <_panic>
f0106abb:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106abe:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0106ac3:	89 45 e0             	mov    %eax,-0x20(%ebp)
	if (phys_page_table == 0)
f0106ac6:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0106aca:	75 72                	jne    f0106b3e <boot_get_page_table+0xe1>
	{
		if (create)
f0106acc:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0106ad0:	74 65                	je     f0106b37 <boot_get_page_table+0xda>
		{
			ptr_page_table = boot_allocate_space(PAGE_SIZE, PAGE_SIZE) ;
f0106ad2:	83 ec 08             	sub    $0x8,%esp
f0106ad5:	68 00 10 00 00       	push   $0x1000
f0106ada:	68 00 10 00 00       	push   $0x1000
f0106adf:	e8 91 fe ff ff       	call   f0106975 <boot_allocate_space>
f0106ae4:	83 c4 10             	add    $0x10,%esp
f0106ae7:	89 45 e0             	mov    %eax,-0x20(%ebp)
			phys_page_table = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_table);
f0106aea:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106aed:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0106af0:	81 7d dc ff ff ff ef 	cmpl   $0xefffffff,-0x24(%ebp)
f0106af7:	77 17                	ja     f0106b10 <boot_get_page_table+0xb3>
f0106af9:	ff 75 dc             	pushl  -0x24(%ebp)
f0106afc:	68 c4 23 13 f0       	push   $0xf01323c4
f0106b01:	68 1e 01 00 00       	push   $0x11e
f0106b06:	68 f8 23 13 f0       	push   $0xf01323f8
f0106b0b:	e8 a0 96 ff ff       	call   f01001b0 <_panic>
f0106b10:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0106b13:	05 00 00 00 10       	add    $0x10000000,%eax
f0106b18:	89 45 ec             	mov    %eax,-0x14(%ebp)
			ptr_page_directory[index_page_directory] = CONSTRUCT_ENTRY(phys_page_table, PERM_PRESENT | PERM_WRITEABLE);
f0106b1b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106b1e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106b25:	8b 45 08             	mov    0x8(%ebp),%eax
f0106b28:	01 d0                	add    %edx,%eax
f0106b2a:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0106b2d:	83 ca 03             	or     $0x3,%edx
f0106b30:	89 10                	mov    %edx,(%eax)
			return ptr_page_table ;
f0106b32:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106b35:	eb 0a                	jmp    f0106b41 <boot_get_page_table+0xe4>
		}
		else
			return 0 ;
f0106b37:	b8 00 00 00 00       	mov    $0x0,%eax
f0106b3c:	eb 03                	jmp    f0106b41 <boot_get_page_table+0xe4>
	}
	return ptr_page_table ;
f0106b3e:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
f0106b41:	c9                   	leave  
f0106b42:	c3                   	ret    

f0106b43 <nvram_read>:


int nvram_read(int r)
{
f0106b43:	55                   	push   %ebp
f0106b44:	89 e5                	mov    %esp,%ebp
f0106b46:	53                   	push   %ebx
f0106b47:	83 ec 04             	sub    $0x4,%esp
	return mc146818_read(r) | (mc146818_read(r + 1) << 8);
f0106b4a:	8b 45 08             	mov    0x8(%ebp),%eax
f0106b4d:	83 ec 0c             	sub    $0xc,%esp
f0106b50:	50                   	push   %eax
f0106b51:	e8 6a de ff ff       	call   f01049c0 <mc146818_read>
f0106b56:	83 c4 10             	add    $0x10,%esp
f0106b59:	89 c3                	mov    %eax,%ebx
f0106b5b:	8b 45 08             	mov    0x8(%ebp),%eax
f0106b5e:	40                   	inc    %eax
f0106b5f:	83 ec 0c             	sub    $0xc,%esp
f0106b62:	50                   	push   %eax
f0106b63:	e8 58 de ff ff       	call   f01049c0 <mc146818_read>
f0106b68:	83 c4 10             	add    $0x10,%esp
f0106b6b:	c1 e0 08             	shl    $0x8,%eax
f0106b6e:	09 d8                	or     %ebx,%eax
}
f0106b70:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0106b73:	c9                   	leave  
f0106b74:	c3                   	ret    

f0106b75 <detect_memory>:

void detect_memory()
{
f0106b75:	55                   	push   %ebp
f0106b76:	89 e5                	mov    %esp,%ebp
f0106b78:	83 ec 28             	sub    $0x28,%esp
	uint32 maxpa;	// Maximum physical address
	uint32 size_of_base_mem;		// Amount of base memory (in bytes)
	uint32 size_of_extended_mem;		// Amount of extended memory (in bytes)

	// CMOS tells us how many kilobytes there are
	size_of_base_mem = ROUNDDOWN(nvram_read(NVRAM_BASELO)*1024, PAGE_SIZE);
f0106b7b:	83 ec 0c             	sub    $0xc,%esp
f0106b7e:	6a 15                	push   $0x15
f0106b80:	e8 be ff ff ff       	call   f0106b43 <nvram_read>
f0106b85:	83 c4 10             	add    $0x10,%esp
f0106b88:	c1 e0 0a             	shl    $0xa,%eax
f0106b8b:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0106b8e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106b91:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106b96:	89 45 e8             	mov    %eax,-0x18(%ebp)
	size_of_extended_mem = ROUNDDOWN(nvram_read(NVRAM_EXTLO)*1024, PAGE_SIZE);
f0106b99:	83 ec 0c             	sub    $0xc,%esp
f0106b9c:	6a 17                	push   $0x17
f0106b9e:	e8 a0 ff ff ff       	call   f0106b43 <nvram_read>
f0106ba3:	83 c4 10             	add    $0x10,%esp
f0106ba6:	c1 e0 0a             	shl    $0xa,%eax
f0106ba9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0106bac:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0106baf:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106bb4:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//2016
	//For physical memory larger than 16MB, we needed to read total memory size
	// from a different register of the MC chip, see here:
	// http://bochs.sourceforge.net/techspec/CMOS-reference.txt
	// "CMOS 34h - AMI -"
	uint32 size_of_other_mem = ROUNDDOWN(nvram_read(0x34)*1024*64, PAGE_SIZE);
f0106bb7:	83 ec 0c             	sub    $0xc,%esp
f0106bba:	6a 34                	push   $0x34
f0106bbc:	e8 82 ff ff ff       	call   f0106b43 <nvram_read>
f0106bc1:	83 c4 10             	add    $0x10,%esp
f0106bc4:	c1 e0 10             	shl    $0x10,%eax
f0106bc7:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0106bca:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106bcd:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106bd2:	89 45 dc             	mov    %eax,-0x24(%ebp)
	//cprintf("other mem = %dK\n", size_of_other_mem/1024);

	// Calculate the maximum physical address based on whether
	// or not there is any extended memory.  See comment in ../inc/mmu.h.
	//2016
	if(size_of_other_mem > 0)
f0106bd5:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0106bd9:	74 18                	je     f0106bf3 <detect_memory+0x7e>
	{
		maxpa = size_of_other_mem + 16*1024*1024;
f0106bdb:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0106bde:	05 00 00 00 01       	add    $0x1000000,%eax
f0106be3:	89 45 f4             	mov    %eax,-0xc(%ebp)
		size_of_extended_mem = maxpa - PHYS_EXTENDED_MEM;
f0106be6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106be9:	2d 00 00 10 00       	sub    $0x100000,%eax
f0106bee:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0106bf1:	eb 19                	jmp    f0106c0c <detect_memory+0x97>
	}
	else
	{
		if (size_of_extended_mem)
f0106bf3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0106bf7:	74 0d                	je     f0106c06 <detect_memory+0x91>
			maxpa = PHYS_EXTENDED_MEM + size_of_extended_mem;
f0106bf9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106bfc:	05 00 00 10 00       	add    $0x100000,%eax
f0106c01:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0106c04:	eb 06                	jmp    f0106c0c <detect_memory+0x97>
		else
			maxpa = size_of_extended_mem;
f0106c06:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106c09:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}

	uint32 kernel_virtual_area = ((0xFFFFFFFF-KERNEL_BASE)+1);
f0106c0c:	c7 45 d8 00 00 00 10 	movl   $0x10000000,-0x28(%ebp)
	if(USE_KHEAP == 0 && maxpa > kernel_virtual_area)
f0106c13:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106c16:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0106c19:	76 32                	jbe    f0106c4d <detect_memory+0xd8>
	{
		cprintf("Error!: Physical memory = %dK larger than kernel virtual area (%dK)\n", maxpa/1024, kernel_virtual_area/1024);
f0106c1b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0106c1e:	c1 e8 0a             	shr    $0xa,%eax
f0106c21:	89 c2                	mov    %eax,%edx
f0106c23:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106c26:	c1 e8 0a             	shr    $0xa,%eax
f0106c29:	83 ec 04             	sub    $0x4,%esp
f0106c2c:	52                   	push   %edx
f0106c2d:	50                   	push   %eax
f0106c2e:	68 70 24 13 f0       	push   $0xf0132470
f0106c33:	e8 f9 a1 ff ff       	call   f0100e31 <cprintf>
f0106c38:	83 c4 10             	add    $0x10,%esp
		cprintf("Cannot use physical memory larger than kernel virtual area\nTo enable physical memory larger than virtual kernel area, set USE_KHEAP = 1 in FOS code");
f0106c3b:	83 ec 0c             	sub    $0xc,%esp
f0106c3e:	68 b8 24 13 f0       	push   $0xf01324b8
f0106c43:	e8 e9 a1 ff ff       	call   f0100e31 <cprintf>
f0106c48:	83 c4 10             	add    $0x10,%esp
		while(1);
f0106c4b:	eb fe                	jmp    f0106c4b <detect_memory+0xd6>
	}
	number_of_frames = maxpa / PAGE_SIZE;
f0106c4d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106c50:	c1 e8 0c             	shr    $0xc,%eax
f0106c53:	a3 d0 bd 2b f0       	mov    %eax,0xf02bbdd0

	cprintf("Physical memory: %dK available, ", (int)(maxpa/1024));
f0106c58:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106c5b:	c1 e8 0a             	shr    $0xa,%eax
f0106c5e:	83 ec 08             	sub    $0x8,%esp
f0106c61:	50                   	push   %eax
f0106c62:	68 4c 25 13 f0       	push   $0xf013254c
f0106c67:	e8 c5 a1 ff ff       	call   f0100e31 <cprintf>
f0106c6c:	83 c4 10             	add    $0x10,%esp
	cprintf("base = %dK, extended = %dK\n", (int)(size_of_base_mem/1024), (int)(size_of_extended_mem/1024));
f0106c6f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106c72:	c1 e8 0a             	shr    $0xa,%eax
f0106c75:	89 c2                	mov    %eax,%edx
f0106c77:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106c7a:	c1 e8 0a             	shr    $0xa,%eax
f0106c7d:	83 ec 04             	sub    $0x4,%esp
f0106c80:	52                   	push   %edx
f0106c81:	50                   	push   %eax
f0106c82:	68 6d 25 13 f0       	push   $0xf013256d
f0106c87:	e8 a5 a1 ff ff       	call   f0100e31 <cprintf>
f0106c8c:	83 c4 10             	add    $0x10,%esp
}
f0106c8f:	90                   	nop
f0106c90:	c9                   	leave  
f0106c91:	c3                   	ret    

f0106c92 <turn_on_paging>:
// --------------------------------------------------------------
// Set up initial memory mappings and turn on MMU.
// --------------------------------------------------------------

void turn_on_paging()
{
f0106c92:	55                   	push   %ebp
f0106c93:	89 e5                	mov    %esp,%ebp
f0106c95:	83 ec 30             	sub    $0x30,%esp
	// (Limits our kernel to <4MB)

	//2016
	//ptr_page_directory[0] = ptr_page_directory[PDX(KERNEL_BASE)];
	{
		int i = PDX(KERNEL_BASE);
f0106c98:	c7 45 fc c0 03 00 00 	movl   $0x3c0,-0x4(%ebp)
		int j = 0;
f0106c9f:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f0106ca6:	eb 24                	jmp    f0106ccc <turn_on_paging+0x3a>
		{
			ptr_page_directory[j] = ptr_page_directory[i];
f0106ca8:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f0106cad:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0106cb0:	c1 e2 02             	shl    $0x2,%edx
f0106cb3:	01 c2                	add    %eax,%edx
f0106cb5:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f0106cba:	8b 4d fc             	mov    -0x4(%ebp),%ecx
f0106cbd:	c1 e1 02             	shl    $0x2,%ecx
f0106cc0:	01 c8                	add    %ecx,%eax
f0106cc2:	8b 00                	mov    (%eax),%eax
f0106cc4:	89 02                	mov    %eax,(%edx)
	//2016
	//ptr_page_directory[0] = ptr_page_directory[PDX(KERNEL_BASE)];
	{
		int i = PDX(KERNEL_BASE);
		int j = 0;
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f0106cc6:	ff 45 fc             	incl   -0x4(%ebp)
f0106cc9:	ff 45 f8             	incl   -0x8(%ebp)
f0106ccc:	a1 2c be 2b f0       	mov    0xf02bbe2c,%eax
f0106cd1:	c1 e8 16             	shr    $0x16,%eax
f0106cd4:	89 c2                	mov    %eax,%edx
f0106cd6:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0106cd9:	39 c2                	cmp    %eax,%edx
f0106cdb:	77 cb                	ja     f0106ca8 <turn_on_paging+0x16>
			ptr_page_directory[j] = ptr_page_directory[i];
		}
	}

	// Install page table.
	lcr3(phys_page_directory);
f0106cdd:	a1 70 be 2b f0       	mov    0xf02bbe70,%eax
f0106ce2:	89 45 e8             	mov    %eax,-0x18(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0106ce5:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106ce8:	0f 22 d8             	mov    %eax,%cr3

static __inline uint32
rcr0(void)
{
	uint32 val;
	__asm __volatile("movl %%cr0,%0" : "=r" (val));
f0106ceb:	0f 20 c0             	mov    %cr0,%eax
f0106cee:	89 45 e0             	mov    %eax,-0x20(%ebp)
	return val;
f0106cf1:	8b 45 e0             	mov    -0x20(%ebp),%eax

	// Turn on paging.
	uint32 cr0;
	cr0 = rcr0();
f0106cf4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	cr0 |= CR0_PE|CR0_PG|CR0_AM|CR0_WP|CR0_NE|CR0_TS|CR0_EM|CR0_MP;
f0106cf7:	81 4d e4 2f 00 05 80 	orl    $0x8005002f,-0x1c(%ebp)
	cr0 &= ~(CR0_TS|CR0_EM);
f0106cfe:	83 65 e4 f3          	andl   $0xfffffff3,-0x1c(%ebp)
f0106d02:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0106d05:	89 45 dc             	mov    %eax,-0x24(%ebp)
}

static __inline void
lcr0(uint32 val)
{
	__asm __volatile("movl %0,%%cr0" : : "r" (val));
f0106d08:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0106d0b:	0f 22 c0             	mov    %eax,%cr0

	// Current mapping: KERNEL_BASE+x => x => x.
	// (x < 4MB so uses paging ptr_page_directory[0])

	// Reload all segment registers.
	asm volatile("lgdt gdt_pd");
f0106d0e:	0f 01 15 b0 e9 18 f0 	lgdtl  0xf018e9b0
	asm volatile("movw %%ax,%%gs" :: "a" (GD_UD|3));
f0106d15:	b8 23 00 00 00       	mov    $0x23,%eax
f0106d1a:	8e e8                	mov    %eax,%gs
	asm volatile("movw %%ax,%%fs" :: "a" (GD_UD|3));
f0106d1c:	b8 23 00 00 00       	mov    $0x23,%eax
f0106d21:	8e e0                	mov    %eax,%fs
	asm volatile("movw %%ax,%%es" :: "a" (GD_KD));
f0106d23:	b8 10 00 00 00       	mov    $0x10,%eax
f0106d28:	8e c0                	mov    %eax,%es
	asm volatile("movw %%ax,%%ds" :: "a" (GD_KD));
f0106d2a:	b8 10 00 00 00       	mov    $0x10,%eax
f0106d2f:	8e d8                	mov    %eax,%ds
	asm volatile("movw %%ax,%%ss" :: "a" (GD_KD));
f0106d31:	b8 10 00 00 00       	mov    $0x10,%eax
f0106d36:	8e d0                	mov    %eax,%ss
	asm volatile("ljmp %0,$1f\n 1:\n" :: "i" (GD_KT));  // reload cs
f0106d38:	ea 3f 6d 10 f0 08 00 	ljmp   $0x8,$0xf0106d3f
	asm volatile("lldt %%ax" :: "a" (0));
f0106d3f:	b8 00 00 00 00       	mov    $0x0,%eax
f0106d44:	0f 00 d0             	lldt   %ax
	// This mapping was only used after paging was turned on but
	// before the segment registers were reloaded.
	//2016
	//ptr_page_directory[0] = 0;
	{
		int i = PDX(KERNEL_BASE);
f0106d47:	c7 45 f4 c0 03 00 00 	movl   $0x3c0,-0xc(%ebp)
		int j = 0;
f0106d4e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f0106d55:	eb 19                	jmp    f0106d70 <turn_on_paging+0xde>
		{
			ptr_page_directory[j] = 0;
f0106d57:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f0106d5c:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106d5f:	c1 e2 02             	shl    $0x2,%edx
f0106d62:	01 d0                	add    %edx,%eax
f0106d64:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	//2016
	//ptr_page_directory[0] = 0;
	{
		int i = PDX(KERNEL_BASE);
		int j = 0;
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f0106d6a:	ff 45 f4             	incl   -0xc(%ebp)
f0106d6d:	ff 45 f0             	incl   -0x10(%ebp)
f0106d70:	a1 2c be 2b f0       	mov    0xf02bbe2c,%eax
f0106d75:	c1 e8 16             	shr    $0x16,%eax
f0106d78:	89 c2                	mov    %eax,%edx
f0106d7a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106d7d:	39 c2                	cmp    %eax,%edx
f0106d7f:	77 d6                	ja     f0106d57 <turn_on_paging+0xc5>
		{
			ptr_page_directory[j] = 0;
		}
	}
	// Flush the TLB for good measure, to kill the ptr_page_directory[0] mapping.
	lcr3(phys_page_directory);
f0106d81:	a1 70 be 2b f0       	mov    0xf02bbe70,%eax
f0106d86:	89 45 ec             	mov    %eax,-0x14(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0106d89:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106d8c:	0f 22 d8             	mov    %eax,%cr3
}
f0106d8f:	90                   	nop
f0106d90:	c9                   	leave  
f0106d91:	c3                   	ret    

f0106d92 <setup_listing_to_all_page_tables_entries>:

void setup_listing_to_all_page_tables_entries()
{
f0106d92:	55                   	push   %ebp
f0106d93:	89 e5                	mov    %esp,%ebp
f0106d95:	83 ec 18             	sub    $0x18,%esp
	//////////////////////////////////////////////////////////////////////
	// Recursively insert PD in itself as a page table, to form
	// a virtual page table at virtual address VPT.

	// Permissions: kernel RW, user NONE
	uint32 phys_frame_address = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory);
f0106d98:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f0106d9d:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0106da0:	81 7d f4 ff ff ff ef 	cmpl   $0xefffffff,-0xc(%ebp)
f0106da7:	77 17                	ja     f0106dc0 <setup_listing_to_all_page_tables_entries+0x2e>
f0106da9:	ff 75 f4             	pushl  -0xc(%ebp)
f0106dac:	68 c4 23 13 f0       	push   $0xf01323c4
f0106db1:	68 ae 01 00 00       	push   $0x1ae
f0106db6:	68 f8 23 13 f0       	push   $0xf01323f8
f0106dbb:	e8 f0 93 ff ff       	call   f01001b0 <_panic>
f0106dc0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106dc3:	05 00 00 00 10       	add    $0x10000000,%eax
f0106dc8:	89 45 f0             	mov    %eax,-0x10(%ebp)
	ptr_page_directory[PDX(VPT)] = CONSTRUCT_ENTRY(phys_frame_address , PERM_PRESENT | PERM_WRITEABLE);
f0106dcb:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f0106dd0:	05 fc 0e 00 00       	add    $0xefc,%eax
f0106dd5:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106dd8:	83 ca 03             	or     $0x3,%edx
f0106ddb:	89 10                	mov    %edx,(%eax)

	// same for UVPT
	//Permissions: kernel R, user R
	ptr_page_directory[PDX(UVPT)] = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory)|PERM_USER|PERM_PRESENT;
f0106ddd:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f0106de2:	8d 90 f4 0e 00 00    	lea    0xef4(%eax),%edx
f0106de8:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f0106ded:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0106df0:	81 7d ec ff ff ff ef 	cmpl   $0xefffffff,-0x14(%ebp)
f0106df7:	77 17                	ja     f0106e10 <setup_listing_to_all_page_tables_entries+0x7e>
f0106df9:	ff 75 ec             	pushl  -0x14(%ebp)
f0106dfc:	68 c4 23 13 f0       	push   $0xf01323c4
f0106e01:	68 b3 01 00 00       	push   $0x1b3
f0106e06:	68 f8 23 13 f0       	push   $0xf01323f8
f0106e0b:	e8 a0 93 ff ff       	call   f01001b0 <_panic>
f0106e10:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106e13:	05 00 00 00 10       	add    $0x10000000,%eax
f0106e18:	83 c8 05             	or     $0x5,%eax
f0106e1b:	89 02                	mov    %eax,(%edx)

}
f0106e1d:	90                   	nop
f0106e1e:	c9                   	leave  
f0106e1f:	c3                   	ret    

f0106e20 <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f0106e20:	55                   	push   %ebp
f0106e21:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f0106e23:	8b 45 08             	mov    0x8(%ebp),%eax
f0106e26:	8b 15 10 be 2b f0    	mov    0xf02bbe10,%edx
f0106e2c:	29 d0                	sub    %edx,%eax
f0106e2e:	c1 f8 02             	sar    $0x2,%eax
f0106e31:	89 c2                	mov    %eax,%edx
f0106e33:	89 d0                	mov    %edx,%eax
f0106e35:	c1 e0 03             	shl    $0x3,%eax
f0106e38:	01 d0                	add    %edx,%eax
f0106e3a:	c1 e0 03             	shl    $0x3,%eax
f0106e3d:	01 d0                	add    %edx,%eax
f0106e3f:	c1 e0 03             	shl    $0x3,%eax
f0106e42:	01 d0                	add    %edx,%eax
f0106e44:	c1 e0 03             	shl    $0x3,%eax
f0106e47:	01 d0                	add    %edx,%eax
f0106e49:	89 c1                	mov    %eax,%ecx
f0106e4b:	c1 e1 0f             	shl    $0xf,%ecx
f0106e4e:	01 c8                	add    %ecx,%eax
f0106e50:	c1 e0 03             	shl    $0x3,%eax
f0106e53:	01 d0                	add    %edx,%eax
f0106e55:	f7 d8                	neg    %eax
}
f0106e57:	5d                   	pop    %ebp
f0106e58:	c3                   	ret    

f0106e59 <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f0106e59:	55                   	push   %ebp
f0106e5a:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f0106e5c:	ff 75 08             	pushl  0x8(%ebp)
f0106e5f:	e8 bc ff ff ff       	call   f0106e20 <to_frame_number>
f0106e64:	83 c4 04             	add    $0x4,%esp
f0106e67:	c1 e0 0c             	shl    $0xc,%eax
}
f0106e6a:	c9                   	leave  
f0106e6b:	c3                   	ret    

f0106e6c <to_frame_info>:

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f0106e6c:	55                   	push   %ebp
f0106e6d:	89 e5                	mov    %esp,%ebp
f0106e6f:	53                   	push   %ebx
f0106e70:	83 ec 04             	sub    $0x4,%esp
	if (PPN(physical_address) >= number_of_frames)
f0106e73:	8b 45 08             	mov    0x8(%ebp),%eax
f0106e76:	c1 e8 0c             	shr    $0xc,%eax
f0106e79:	89 c2                	mov    %eax,%edx
f0106e7b:	a1 d0 bd 2b f0       	mov    0xf02bbdd0,%eax
f0106e80:	39 c2                	cmp    %eax,%edx
f0106e82:	72 14                	jb     f0106e98 <to_frame_info+0x2c>
		panic("to_frame_info called with invalid pa");
f0106e84:	83 ec 04             	sub    $0x4,%esp
f0106e87:	68 8c 25 13 f0       	push   $0xf013258c
f0106e8c:	6a 55                	push   $0x55
f0106e8e:	68 b1 25 13 f0       	push   $0xf01325b1
f0106e93:	e8 18 93 ff ff       	call   f01001b0 <_panic>
	return &frames_info[PPN(physical_address)];
f0106e98:	8b 0d 10 be 2b f0    	mov    0xf02bbe10,%ecx
f0106e9e:	8b 45 08             	mov    0x8(%ebp),%eax
f0106ea1:	c1 e8 0c             	shr    $0xc,%eax
f0106ea4:	89 c2                	mov    %eax,%edx
f0106ea6:	89 d0                	mov    %edx,%eax
f0106ea8:	01 c0                	add    %eax,%eax
f0106eaa:	01 d0                	add    %edx,%eax
f0106eac:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0106eb3:	01 d8                	add    %ebx,%eax
f0106eb5:	01 d0                	add    %edx,%eax
f0106eb7:	01 c8                	add    %ecx,%eax
}
f0106eb9:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0106ebc:	c9                   	leave  
f0106ebd:	c3                   	ret    

f0106ebe <tlb_invalidate>:




void tlb_invalidate(uint32 *ptr_page_directory, void *virtual_address)
{
f0106ebe:	55                   	push   %ebp
f0106ebf:	89 e5                	mov    %esp,%ebp
f0106ec1:	83 ec 10             	sub    $0x10,%esp
f0106ec4:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106ec7:	89 45 fc             	mov    %eax,-0x4(%ebp)
}

static __inline void 
invlpg(void *addr)
{ 
	__asm __volatile("invlpg (%0)" : : "r" (addr) : "memory");
f0106eca:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0106ecd:	0f 01 38             	invlpg (%eax)
	// Flush the entry only if we're modifying the current address space.
	// For now, there is only one address space, so always invalidate.
	invlpg(virtual_address);
}
f0106ed0:	90                   	nop
f0106ed1:	c9                   	leave  
f0106ed2:	c3                   	ret    

f0106ed3 <initialize_paging>:
// and NEVER use boot_allocate_space() or the related boot-time functions above.
//

extern void initialize_disk_page_file();
void initialize_paging()
{
f0106ed3:	55                   	push   %ebp
f0106ed4:	89 e5                	mov    %esp,%ebp
f0106ed6:	56                   	push   %esi
f0106ed7:	53                   	push   %ebx
f0106ed8:	83 ec 20             	sub    $0x20,%esp
	//     Some of it is in use, some is free. Where is the kernel?
	//     Which frames are used for page tables and other data structures?
	//
	// Change the code to reflect this.
	int i;
	LIST_INIT(&free_frame_list);
f0106edb:	c7 05 d8 bd 2b f0 00 	movl   $0x0,0xf02bbdd8
f0106ee2:	00 00 00 
f0106ee5:	c7 05 dc bd 2b f0 00 	movl   $0x0,0xf02bbddc
f0106eec:	00 00 00 
f0106eef:	c7 05 e4 bd 2b f0 00 	movl   $0x0,0xf02bbde4
f0106ef6:	00 00 00 
	LIST_INIT(&modified_frame_list);
f0106ef9:	c7 05 40 3a 25 f0 00 	movl   $0x0,0xf0253a40
f0106f00:	00 00 00 
f0106f03:	c7 05 44 3a 25 f0 00 	movl   $0x0,0xf0253a44
f0106f0a:	00 00 00 
f0106f0d:	c7 05 4c 3a 25 f0 00 	movl   $0x0,0xf0253a4c
f0106f14:	00 00 00 

	frames_info[0].references = 1;
f0106f17:	a1 10 be 2b f0       	mov    0xf02bbe10,%eax
f0106f1c:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	frames_info[1].references = 1;
f0106f22:	a1 10 be 2b f0       	mov    0xf02bbe10,%eax
f0106f27:	83 c0 1c             	add    $0x1c,%eax
f0106f2a:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	frames_info[2].references = 1;
f0106f30:	a1 10 be 2b f0       	mov    0xf02bbe10,%eax
f0106f35:	83 c0 38             	add    $0x38,%eax
f0106f38:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	ptr_zero_page = (uint8*) KERNEL_BASE+PAGE_SIZE;
f0106f3e:	c7 05 1c be 2b f0 00 	movl   $0xf0001000,0xf02bbe1c
f0106f45:	10 00 f0 
	ptr_temp_page = (uint8*) KERNEL_BASE+2*PAGE_SIZE;
f0106f48:	c7 05 48 be 2b f0 00 	movl   $0xf0002000,0xf02bbe48
f0106f4f:	20 00 f0 
	i =0;
f0106f52:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;i<1024; i++)
f0106f59:	eb 1f                	jmp    f0106f7a <initialize_paging+0xa7>
	{
		ptr_zero_page[i]=0;
f0106f5b:	8b 15 1c be 2b f0    	mov    0xf02bbe1c,%edx
f0106f61:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106f64:	01 d0                	add    %edx,%eax
f0106f66:	c6 00 00             	movb   $0x0,(%eax)
		ptr_temp_page[i]=0;
f0106f69:	8b 15 48 be 2b f0    	mov    0xf02bbe48,%edx
f0106f6f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106f72:	01 d0                	add    %edx,%eax
f0106f74:	c6 00 00             	movb   $0x0,(%eax)
	frames_info[1].references = 1;
	frames_info[2].references = 1;
	ptr_zero_page = (uint8*) KERNEL_BASE+PAGE_SIZE;
	ptr_temp_page = (uint8*) KERNEL_BASE+2*PAGE_SIZE;
	i =0;
	for(;i<1024; i++)
f0106f77:	ff 45 f4             	incl   -0xc(%ebp)
f0106f7a:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f0106f81:	7e d8                	jle    f0106f5b <initialize_paging+0x88>
	{
		ptr_zero_page[i]=0;
		ptr_temp_page[i]=0;
	}

	int range_end = ROUNDUP(PHYS_IO_MEM,PAGE_SIZE);
f0106f83:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
f0106f8a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106f8d:	05 ff ff 09 00       	add    $0x9ffff,%eax
f0106f92:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0106f95:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106f98:	ba 00 00 00 00       	mov    $0x0,%edx
f0106f9d:	f7 75 f0             	divl   -0x10(%ebp)
f0106fa0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106fa3:	29 d0                	sub    %edx,%eax
f0106fa5:	89 45 e8             	mov    %eax,-0x18(%ebp)

	for (i = 3; i < range_end/PAGE_SIZE; i++)
f0106fa8:	c7 45 f4 03 00 00 00 	movl   $0x3,-0xc(%ebp)
f0106faf:	e9 20 01 00 00       	jmp    f01070d4 <initialize_paging+0x201>
	{

		initialize_frame_info(&(frames_info[i]));
f0106fb4:	8b 0d 10 be 2b f0    	mov    0xf02bbe10,%ecx
f0106fba:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106fbd:	89 d0                	mov    %edx,%eax
f0106fbf:	01 c0                	add    %eax,%eax
f0106fc1:	01 d0                	add    %edx,%eax
f0106fc3:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0106fca:	01 d8                	add    %ebx,%eax
f0106fcc:	01 d0                	add    %edx,%eax
f0106fce:	01 c8                	add    %ecx,%eax
f0106fd0:	83 ec 0c             	sub    $0xc,%esp
f0106fd3:	50                   	push   %eax
f0106fd4:	e8 31 03 00 00       	call   f010730a <initialize_frame_info>
f0106fd9:	83 c4 10             	add    $0x10,%esp
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
f0106fdc:	8b 0d 10 be 2b f0    	mov    0xf02bbe10,%ecx
f0106fe2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106fe5:	89 d0                	mov    %edx,%eax
f0106fe7:	01 c0                	add    %eax,%eax
f0106fe9:	01 d0                	add    %edx,%eax
f0106feb:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0106ff2:	01 d8                	add    %ebx,%eax
f0106ff4:	01 d0                	add    %edx,%eax
f0106ff6:	01 c8                	add    %ecx,%eax
f0106ff8:	85 c0                	test   %eax,%eax
f0106ffa:	75 14                	jne    f0107010 <initialize_paging+0x13d>
f0106ffc:	83 ec 04             	sub    $0x4,%esp
f0106fff:	68 cc 25 13 f0       	push   $0xf01325cc
f0107004:	6a 5c                	push   $0x5c
f0107006:	68 ef 25 13 f0       	push   $0xf01325ef
f010700b:	e8 a0 91 ff ff       	call   f01001b0 <_panic>
f0107010:	8b 0d 10 be 2b f0    	mov    0xf02bbe10,%ecx
f0107016:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107019:	89 d0                	mov    %edx,%eax
f010701b:	01 c0                	add    %eax,%eax
f010701d:	01 d0                	add    %edx,%eax
f010701f:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0107026:	01 d8                	add    %ebx,%eax
f0107028:	01 d0                	add    %edx,%eax
f010702a:	01 c8                	add    %ecx,%eax
f010702c:	8b 15 d8 bd 2b f0    	mov    0xf02bbdd8,%edx
f0107032:	89 10                	mov    %edx,(%eax)
f0107034:	8b 00                	mov    (%eax),%eax
f0107036:	85 c0                	test   %eax,%eax
f0107038:	74 27                	je     f0107061 <initialize_paging+0x18e>
f010703a:	8b 0d d8 bd 2b f0    	mov    0xf02bbdd8,%ecx
f0107040:	8b 1d 10 be 2b f0    	mov    0xf02bbe10,%ebx
f0107046:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107049:	89 d0                	mov    %edx,%eax
f010704b:	01 c0                	add    %eax,%eax
f010704d:	01 d0                	add    %edx,%eax
f010704f:	8d 34 c5 00 00 00 00 	lea    0x0(,%eax,8),%esi
f0107056:	01 f0                	add    %esi,%eax
f0107058:	01 d0                	add    %edx,%eax
f010705a:	01 d8                	add    %ebx,%eax
f010705c:	89 41 04             	mov    %eax,0x4(%ecx)
f010705f:	eb 21                	jmp    f0107082 <initialize_paging+0x1af>
f0107061:	8b 0d 10 be 2b f0    	mov    0xf02bbe10,%ecx
f0107067:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010706a:	89 d0                	mov    %edx,%eax
f010706c:	01 c0                	add    %eax,%eax
f010706e:	01 d0                	add    %edx,%eax
f0107070:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0107077:	01 d8                	add    %ebx,%eax
f0107079:	01 d0                	add    %edx,%eax
f010707b:	01 c8                	add    %ecx,%eax
f010707d:	a3 dc bd 2b f0       	mov    %eax,0xf02bbddc
f0107082:	8b 0d 10 be 2b f0    	mov    0xf02bbe10,%ecx
f0107088:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010708b:	89 d0                	mov    %edx,%eax
f010708d:	01 c0                	add    %eax,%eax
f010708f:	01 d0                	add    %edx,%eax
f0107091:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0107098:	01 d8                	add    %ebx,%eax
f010709a:	01 d0                	add    %edx,%eax
f010709c:	01 c8                	add    %ecx,%eax
f010709e:	a3 d8 bd 2b f0       	mov    %eax,0xf02bbdd8
f01070a3:	8b 0d 10 be 2b f0    	mov    0xf02bbe10,%ecx
f01070a9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01070ac:	89 d0                	mov    %edx,%eax
f01070ae:	01 c0                	add    %eax,%eax
f01070b0:	01 d0                	add    %edx,%eax
f01070b2:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f01070b9:	01 d8                	add    %ebx,%eax
f01070bb:	01 d0                	add    %edx,%eax
f01070bd:	01 c8                	add    %ecx,%eax
f01070bf:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01070c6:	a1 e4 bd 2b f0       	mov    0xf02bbde4,%eax
f01070cb:	40                   	inc    %eax
f01070cc:	a3 e4 bd 2b f0       	mov    %eax,0xf02bbde4
		ptr_temp_page[i]=0;
	}

	int range_end = ROUNDUP(PHYS_IO_MEM,PAGE_SIZE);

	for (i = 3; i < range_end/PAGE_SIZE; i++)
f01070d1:	ff 45 f4             	incl   -0xc(%ebp)
f01070d4:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01070d7:	85 c0                	test   %eax,%eax
f01070d9:	79 05                	jns    f01070e0 <initialize_paging+0x20d>
f01070db:	05 ff 0f 00 00       	add    $0xfff,%eax
f01070e0:	c1 f8 0c             	sar    $0xc,%eax
f01070e3:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01070e6:	0f 8f c8 fe ff ff    	jg     f0106fb4 <initialize_paging+0xe1>
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
	}

	for (i = PHYS_IO_MEM/PAGE_SIZE ; i < PHYS_EXTENDED_MEM/PAGE_SIZE; i++)
f01070ec:	c7 45 f4 a0 00 00 00 	movl   $0xa0,-0xc(%ebp)
f01070f3:	eb 25                	jmp    f010711a <initialize_paging+0x247>
	{
		frames_info[i].references = 1;
f01070f5:	8b 0d 10 be 2b f0    	mov    0xf02bbe10,%ecx
f01070fb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01070fe:	89 d0                	mov    %edx,%eax
f0107100:	01 c0                	add    %eax,%eax
f0107102:	01 d0                	add    %edx,%eax
f0107104:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f010710b:	01 d8                	add    %ebx,%eax
f010710d:	01 d0                	add    %edx,%eax
f010710f:	01 c8                	add    %ecx,%eax
f0107111:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
	}

	for (i = PHYS_IO_MEM/PAGE_SIZE ; i < PHYS_EXTENDED_MEM/PAGE_SIZE; i++)
f0107117:	ff 45 f4             	incl   -0xc(%ebp)
f010711a:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
f0107121:	7e d2                	jle    f01070f5 <initialize_paging+0x222>
	{
		frames_info[i].references = 1;
	}

	range_end = ROUNDUP(STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_free_mem), PAGE_SIZE);
f0107123:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f010712a:	a1 2c be 2b f0       	mov    0xf02bbe2c,%eax
f010712f:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0107132:	81 7d e0 ff ff ff ef 	cmpl   $0xefffffff,-0x20(%ebp)
f0107139:	77 14                	ja     f010714f <initialize_paging+0x27c>
f010713b:	ff 75 e0             	pushl  -0x20(%ebp)
f010713e:	68 0c 26 13 f0       	push   $0xf013260c
f0107143:	6a 64                	push   $0x64
f0107145:	68 ef 25 13 f0       	push   $0xf01325ef
f010714a:	e8 61 90 ff ff       	call   f01001b0 <_panic>
f010714f:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0107152:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edx
f0107158:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010715b:	01 d0                	add    %edx,%eax
f010715d:	48                   	dec    %eax
f010715e:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0107161:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0107164:	ba 00 00 00 00       	mov    $0x0,%edx
f0107169:	f7 75 e4             	divl   -0x1c(%ebp)
f010716c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010716f:	29 d0                	sub    %edx,%eax
f0107171:	89 45 e8             	mov    %eax,-0x18(%ebp)

	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
f0107174:	c7 45 f4 00 01 00 00 	movl   $0x100,-0xc(%ebp)
f010717b:	eb 25                	jmp    f01071a2 <initialize_paging+0x2cf>
	{
		frames_info[i].references = 1;
f010717d:	8b 0d 10 be 2b f0    	mov    0xf02bbe10,%ecx
f0107183:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107186:	89 d0                	mov    %edx,%eax
f0107188:	01 c0                	add    %eax,%eax
f010718a:	01 d0                	add    %edx,%eax
f010718c:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0107193:	01 d8                	add    %ebx,%eax
f0107195:	01 d0                	add    %edx,%eax
f0107197:	01 c8                	add    %ecx,%eax
f0107199:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
		frames_info[i].references = 1;
	}

	range_end = ROUNDUP(STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_free_mem), PAGE_SIZE);

	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
f010719f:	ff 45 f4             	incl   -0xc(%ebp)
f01071a2:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01071a5:	85 c0                	test   %eax,%eax
f01071a7:	79 05                	jns    f01071ae <initialize_paging+0x2db>
f01071a9:	05 ff 0f 00 00       	add    $0xfff,%eax
f01071ae:	c1 f8 0c             	sar    $0xc,%eax
f01071b1:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01071b4:	7f c7                	jg     f010717d <initialize_paging+0x2aa>
	{
		frames_info[i].references = 1;
	}

	for (i = range_end/PAGE_SIZE ; i < number_of_frames; i++)
f01071b6:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01071b9:	85 c0                	test   %eax,%eax
f01071bb:	79 05                	jns    f01071c2 <initialize_paging+0x2ef>
f01071bd:	05 ff 0f 00 00       	add    $0xfff,%eax
f01071c2:	c1 f8 0c             	sar    $0xc,%eax
f01071c5:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01071c8:	e9 20 01 00 00       	jmp    f01072ed <initialize_paging+0x41a>
	{
		initialize_frame_info(&(frames_info[i]));
f01071cd:	8b 0d 10 be 2b f0    	mov    0xf02bbe10,%ecx
f01071d3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01071d6:	89 d0                	mov    %edx,%eax
f01071d8:	01 c0                	add    %eax,%eax
f01071da:	01 d0                	add    %edx,%eax
f01071dc:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f01071e3:	01 d8                	add    %ebx,%eax
f01071e5:	01 d0                	add    %edx,%eax
f01071e7:	01 c8                	add    %ecx,%eax
f01071e9:	83 ec 0c             	sub    $0xc,%esp
f01071ec:	50                   	push   %eax
f01071ed:	e8 18 01 00 00       	call   f010730a <initialize_frame_info>
f01071f2:	83 c4 10             	add    $0x10,%esp

		//frames_info[i].references = 0;
		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
f01071f5:	8b 0d 10 be 2b f0    	mov    0xf02bbe10,%ecx
f01071fb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01071fe:	89 d0                	mov    %edx,%eax
f0107200:	01 c0                	add    %eax,%eax
f0107202:	01 d0                	add    %edx,%eax
f0107204:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f010720b:	01 d8                	add    %ebx,%eax
f010720d:	01 d0                	add    %edx,%eax
f010720f:	01 c8                	add    %ecx,%eax
f0107211:	85 c0                	test   %eax,%eax
f0107213:	75 14                	jne    f0107229 <initialize_paging+0x356>
f0107215:	83 ec 04             	sub    $0x4,%esp
f0107218:	68 cc 25 13 f0       	push   $0xf01325cc
f010721d:	6a 70                	push   $0x70
f010721f:	68 ef 25 13 f0       	push   $0xf01325ef
f0107224:	e8 87 8f ff ff       	call   f01001b0 <_panic>
f0107229:	8b 0d 10 be 2b f0    	mov    0xf02bbe10,%ecx
f010722f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107232:	89 d0                	mov    %edx,%eax
f0107234:	01 c0                	add    %eax,%eax
f0107236:	01 d0                	add    %edx,%eax
f0107238:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f010723f:	01 d8                	add    %ebx,%eax
f0107241:	01 d0                	add    %edx,%eax
f0107243:	01 c8                	add    %ecx,%eax
f0107245:	8b 15 d8 bd 2b f0    	mov    0xf02bbdd8,%edx
f010724b:	89 10                	mov    %edx,(%eax)
f010724d:	8b 00                	mov    (%eax),%eax
f010724f:	85 c0                	test   %eax,%eax
f0107251:	74 27                	je     f010727a <initialize_paging+0x3a7>
f0107253:	8b 0d d8 bd 2b f0    	mov    0xf02bbdd8,%ecx
f0107259:	8b 1d 10 be 2b f0    	mov    0xf02bbe10,%ebx
f010725f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107262:	89 d0                	mov    %edx,%eax
f0107264:	01 c0                	add    %eax,%eax
f0107266:	01 d0                	add    %edx,%eax
f0107268:	8d 34 c5 00 00 00 00 	lea    0x0(,%eax,8),%esi
f010726f:	01 f0                	add    %esi,%eax
f0107271:	01 d0                	add    %edx,%eax
f0107273:	01 d8                	add    %ebx,%eax
f0107275:	89 41 04             	mov    %eax,0x4(%ecx)
f0107278:	eb 21                	jmp    f010729b <initialize_paging+0x3c8>
f010727a:	8b 0d 10 be 2b f0    	mov    0xf02bbe10,%ecx
f0107280:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107283:	89 d0                	mov    %edx,%eax
f0107285:	01 c0                	add    %eax,%eax
f0107287:	01 d0                	add    %edx,%eax
f0107289:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0107290:	01 d8                	add    %ebx,%eax
f0107292:	01 d0                	add    %edx,%eax
f0107294:	01 c8                	add    %ecx,%eax
f0107296:	a3 dc bd 2b f0       	mov    %eax,0xf02bbddc
f010729b:	8b 0d 10 be 2b f0    	mov    0xf02bbe10,%ecx
f01072a1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01072a4:	89 d0                	mov    %edx,%eax
f01072a6:	01 c0                	add    %eax,%eax
f01072a8:	01 d0                	add    %edx,%eax
f01072aa:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f01072b1:	01 d8                	add    %ebx,%eax
f01072b3:	01 d0                	add    %edx,%eax
f01072b5:	01 c8                	add    %ecx,%eax
f01072b7:	a3 d8 bd 2b f0       	mov    %eax,0xf02bbdd8
f01072bc:	8b 0d 10 be 2b f0    	mov    0xf02bbe10,%ecx
f01072c2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01072c5:	89 d0                	mov    %edx,%eax
f01072c7:	01 c0                	add    %eax,%eax
f01072c9:	01 d0                	add    %edx,%eax
f01072cb:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f01072d2:	01 d8                	add    %ebx,%eax
f01072d4:	01 d0                	add    %edx,%eax
f01072d6:	01 c8                	add    %ecx,%eax
f01072d8:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01072df:	a1 e4 bd 2b f0       	mov    0xf02bbde4,%eax
f01072e4:	40                   	inc    %eax
f01072e5:	a3 e4 bd 2b f0       	mov    %eax,0xf02bbde4
	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
	{
		frames_info[i].references = 1;
	}

	for (i = range_end/PAGE_SIZE ; i < number_of_frames; i++)
f01072ea:	ff 45 f4             	incl   -0xc(%ebp)
f01072ed:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01072f0:	a1 d0 bd 2b f0       	mov    0xf02bbdd0,%eax
f01072f5:	39 c2                	cmp    %eax,%edx
f01072f7:	0f 82 d0 fe ff ff    	jb     f01071cd <initialize_paging+0x2fa>

		//frames_info[i].references = 0;
		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
	}

	initialize_disk_page_file();
f01072fd:	e8 f2 c5 ff ff       	call   f01038f4 <initialize_disk_page_file>
}
f0107302:	90                   	nop
f0107303:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0107306:	5b                   	pop    %ebx
f0107307:	5e                   	pop    %esi
f0107308:	5d                   	pop    %ebp
f0107309:	c3                   	ret    

f010730a <initialize_frame_info>:
// Initialize a Frame_Info structure.
// The result has null links and 0 references.
// Note that the corresponding physical frame is NOT initialized!
//
void initialize_frame_info(struct FrameInfo *ptr_frame_info)
{
f010730a:	55                   	push   %ebp
f010730b:	89 e5                	mov    %esp,%ebp
f010730d:	83 ec 08             	sub    $0x8,%esp
	memset(ptr_frame_info, 0, sizeof(*ptr_frame_info));
f0107310:	83 ec 04             	sub    $0x4,%esp
f0107313:	6a 1c                	push   $0x1c
f0107315:	6a 00                	push   $0x0
f0107317:	ff 75 08             	pushl  0x8(%ebp)
f010731a:	e8 0c 7d 02 00       	call   f012f02b <memset>
f010731f:	83 c4 10             	add    $0x10,%esp
}
f0107322:	90                   	nop
f0107323:	c9                   	leave  
f0107324:	c3                   	ret    

f0107325 <allocate_frame>:
// Hint: references should not be incremented

//extern void env_free(struct Env *e);

int allocate_frame(struct FrameInfo **ptr_frame_info)
{
f0107325:	55                   	push   %ebp
f0107326:	89 e5                	mov    %esp,%ebp
f0107328:	83 ec 18             	sub    $0x18,%esp
	*ptr_frame_info = LIST_FIRST(&free_frame_list);
f010732b:	8b 15 d8 bd 2b f0    	mov    0xf02bbdd8,%edx
f0107331:	8b 45 08             	mov    0x8(%ebp),%eax
f0107334:	89 10                	mov    %edx,(%eax)
	int c = 0;
f0107336:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	if (*ptr_frame_info == NULL)
f010733d:	8b 45 08             	mov    0x8(%ebp),%eax
f0107340:	8b 00                	mov    (%eax),%eax
f0107342:	85 c0                	test   %eax,%eax
f0107344:	75 17                	jne    f010735d <allocate_frame+0x38>
	{
		//TODO: [PROJECT'23.MS3 - BONUS] Free RAM when it's FULL
		panic("ERROR: Kernel run out of memory... allocate_frame cannot find a free frame.\n");
f0107346:	83 ec 04             	sub    $0x4,%esp
f0107349:	68 40 26 13 f0       	push   $0xf0132640
f010734e:	68 98 00 00 00       	push   $0x98
f0107353:	68 ef 25 13 f0       	push   $0xf01325ef
f0107358:	e8 53 8e ff ff       	call   f01001b0 <_panic>
		// When allocating new frame, if there's no free frame, then you should:
		//	1-	If any process has exited (those with status ENV_EXIT), then remove one or more of these exited processes from the main memory
		//	2-	otherwise, free at least 1 frame from the user working set by applying the FIFO algorithm
	}

	LIST_REMOVE(&free_frame_list,*ptr_frame_info);
f010735d:	8b 45 08             	mov    0x8(%ebp),%eax
f0107360:	8b 00                	mov    (%eax),%eax
f0107362:	85 c0                	test   %eax,%eax
f0107364:	75 17                	jne    f010737d <allocate_frame+0x58>
f0107366:	83 ec 04             	sub    $0x4,%esp
f0107369:	68 8d 26 13 f0       	push   $0xf013268d
f010736e:	68 9e 00 00 00       	push   $0x9e
f0107373:	68 ef 25 13 f0       	push   $0xf01325ef
f0107378:	e8 33 8e ff ff       	call   f01001b0 <_panic>
f010737d:	8b 45 08             	mov    0x8(%ebp),%eax
f0107380:	8b 00                	mov    (%eax),%eax
f0107382:	8b 00                	mov    (%eax),%eax
f0107384:	85 c0                	test   %eax,%eax
f0107386:	74 14                	je     f010739c <allocate_frame+0x77>
f0107388:	8b 45 08             	mov    0x8(%ebp),%eax
f010738b:	8b 00                	mov    (%eax),%eax
f010738d:	8b 00                	mov    (%eax),%eax
f010738f:	8b 55 08             	mov    0x8(%ebp),%edx
f0107392:	8b 12                	mov    (%edx),%edx
f0107394:	8b 52 04             	mov    0x4(%edx),%edx
f0107397:	89 50 04             	mov    %edx,0x4(%eax)
f010739a:	eb 0d                	jmp    f01073a9 <allocate_frame+0x84>
f010739c:	8b 45 08             	mov    0x8(%ebp),%eax
f010739f:	8b 00                	mov    (%eax),%eax
f01073a1:	8b 40 04             	mov    0x4(%eax),%eax
f01073a4:	a3 dc bd 2b f0       	mov    %eax,0xf02bbddc
f01073a9:	8b 45 08             	mov    0x8(%ebp),%eax
f01073ac:	8b 00                	mov    (%eax),%eax
f01073ae:	8b 40 04             	mov    0x4(%eax),%eax
f01073b1:	85 c0                	test   %eax,%eax
f01073b3:	74 13                	je     f01073c8 <allocate_frame+0xa3>
f01073b5:	8b 45 08             	mov    0x8(%ebp),%eax
f01073b8:	8b 00                	mov    (%eax),%eax
f01073ba:	8b 40 04             	mov    0x4(%eax),%eax
f01073bd:	8b 55 08             	mov    0x8(%ebp),%edx
f01073c0:	8b 12                	mov    (%edx),%edx
f01073c2:	8b 12                	mov    (%edx),%edx
f01073c4:	89 10                	mov    %edx,(%eax)
f01073c6:	eb 0c                	jmp    f01073d4 <allocate_frame+0xaf>
f01073c8:	8b 45 08             	mov    0x8(%ebp),%eax
f01073cb:	8b 00                	mov    (%eax),%eax
f01073cd:	8b 00                	mov    (%eax),%eax
f01073cf:	a3 d8 bd 2b f0       	mov    %eax,0xf02bbdd8
f01073d4:	8b 45 08             	mov    0x8(%ebp),%eax
f01073d7:	8b 00                	mov    (%eax),%eax
f01073d9:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01073df:	8b 45 08             	mov    0x8(%ebp),%eax
f01073e2:	8b 00                	mov    (%eax),%eax
f01073e4:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01073eb:	a1 e4 bd 2b f0       	mov    0xf02bbde4,%eax
f01073f0:	48                   	dec    %eax
f01073f1:	a3 e4 bd 2b f0       	mov    %eax,0xf02bbde4

	/******************* PAGE BUFFERING CODE *******************
	 ***********************************************************/

	if((*ptr_frame_info)->isBuffered)
f01073f6:	8b 45 08             	mov    0x8(%ebp),%eax
f01073f9:	8b 00                	mov    (%eax),%eax
f01073fb:	8a 40 14             	mov    0x14(%eax),%al
f01073fe:	84 c0                	test   %al,%al
f0107400:	74 23                	je     f0107425 <allocate_frame+0x100>
	{
		pt_clear_page_table_entry((*ptr_frame_info)->environment->env_page_directory,(*ptr_frame_info)->va);
f0107402:	8b 45 08             	mov    0x8(%ebp),%eax
f0107405:	8b 00                	mov    (%eax),%eax
f0107407:	8b 50 0c             	mov    0xc(%eax),%edx
f010740a:	8b 45 08             	mov    0x8(%ebp),%eax
f010740d:	8b 00                	mov    (%eax),%eax
f010740f:	8b 40 10             	mov    0x10(%eax),%eax
f0107412:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0107418:	83 ec 08             	sub    $0x8,%esp
f010741b:	52                   	push   %edx
f010741c:	50                   	push   %eax
f010741d:	e8 0a 0d 00 00       	call   f010812c <pt_clear_page_table_entry>
f0107422:	83 c4 10             	add    $0x10,%esp
	}

	/**********************************************************
	 ***********************************************************/

	initialize_frame_info(*ptr_frame_info);
f0107425:	8b 45 08             	mov    0x8(%ebp),%eax
f0107428:	8b 00                	mov    (%eax),%eax
f010742a:	83 ec 0c             	sub    $0xc,%esp
f010742d:	50                   	push   %eax
f010742e:	e8 d7 fe ff ff       	call   f010730a <initialize_frame_info>
f0107433:	83 c4 10             	add    $0x10,%esp
	return 0;
f0107436:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010743b:	c9                   	leave  
f010743c:	c3                   	ret    

f010743d <free_frame>:
//
// Return a frame to the free_frame_list.
// (This function should only be called when ptr_frame_info->references reaches 0.)
//
void free_frame(struct FrameInfo *ptr_frame_info)
{
f010743d:	55                   	push   %ebp
f010743e:	89 e5                	mov    %esp,%ebp
f0107440:	83 ec 08             	sub    $0x8,%esp
	/*2012: clear it to ensure that its members (env, isBuffered, ...) become NULL*/
	initialize_frame_info(ptr_frame_info);
f0107443:	83 ec 0c             	sub    $0xc,%esp
f0107446:	ff 75 08             	pushl  0x8(%ebp)
f0107449:	e8 bc fe ff ff       	call   f010730a <initialize_frame_info>
f010744e:	83 c4 10             	add    $0x10,%esp
	/*=============================================================================*/

	// Fill this function in
	LIST_INSERT_HEAD(&free_frame_list, ptr_frame_info);
f0107451:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0107455:	75 17                	jne    f010746e <free_frame+0x31>
f0107457:	83 ec 04             	sub    $0x4,%esp
f010745a:	68 cc 25 13 f0       	push   $0xf01325cc
f010745f:	68 bb 00 00 00       	push   $0xbb
f0107464:	68 ef 25 13 f0       	push   $0xf01325ef
f0107469:	e8 42 8d ff ff       	call   f01001b0 <_panic>
f010746e:	8b 15 d8 bd 2b f0    	mov    0xf02bbdd8,%edx
f0107474:	8b 45 08             	mov    0x8(%ebp),%eax
f0107477:	89 10                	mov    %edx,(%eax)
f0107479:	8b 45 08             	mov    0x8(%ebp),%eax
f010747c:	8b 00                	mov    (%eax),%eax
f010747e:	85 c0                	test   %eax,%eax
f0107480:	74 0d                	je     f010748f <free_frame+0x52>
f0107482:	a1 d8 bd 2b f0       	mov    0xf02bbdd8,%eax
f0107487:	8b 55 08             	mov    0x8(%ebp),%edx
f010748a:	89 50 04             	mov    %edx,0x4(%eax)
f010748d:	eb 08                	jmp    f0107497 <free_frame+0x5a>
f010748f:	8b 45 08             	mov    0x8(%ebp),%eax
f0107492:	a3 dc bd 2b f0       	mov    %eax,0xf02bbddc
f0107497:	8b 45 08             	mov    0x8(%ebp),%eax
f010749a:	a3 d8 bd 2b f0       	mov    %eax,0xf02bbdd8
f010749f:	8b 45 08             	mov    0x8(%ebp),%eax
f01074a2:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01074a9:	a1 e4 bd 2b f0       	mov    0xf02bbde4,%eax
f01074ae:	40                   	inc    %eax
f01074af:	a3 e4 bd 2b f0       	mov    %eax,0xf02bbde4
	//LOG_STATMENT(cprintf("FN # %d FREED",to_frame_number(ptr_frame_info)));
}
f01074b4:	90                   	nop
f01074b5:	c9                   	leave  
f01074b6:	c3                   	ret    

f01074b7 <decrement_references>:
//
// Decrement the reference count on a frame
// freeing it if there are no more references.
//
void decrement_references(struct FrameInfo* ptr_frame_info)
{
f01074b7:	55                   	push   %ebp
f01074b8:	89 e5                	mov    %esp,%ebp
f01074ba:	83 ec 08             	sub    $0x8,%esp
	if (--(ptr_frame_info->references) == 0)
f01074bd:	8b 45 08             	mov    0x8(%ebp),%eax
f01074c0:	8b 40 08             	mov    0x8(%eax),%eax
f01074c3:	48                   	dec    %eax
f01074c4:	8b 55 08             	mov    0x8(%ebp),%edx
f01074c7:	66 89 42 08          	mov    %ax,0x8(%edx)
f01074cb:	8b 45 08             	mov    0x8(%ebp),%eax
f01074ce:	8b 40 08             	mov    0x8(%eax),%eax
f01074d1:	66 85 c0             	test   %ax,%ax
f01074d4:	75 0e                	jne    f01074e4 <decrement_references+0x2d>
		free_frame(ptr_frame_info);
f01074d6:	83 ec 0c             	sub    $0xc,%esp
f01074d9:	ff 75 08             	pushl  0x8(%ebp)
f01074dc:	e8 5c ff ff ff       	call   f010743d <free_frame>
f01074e1:	83 c4 10             	add    $0x10,%esp
}
f01074e4:	90                   	nop
f01074e5:	c9                   	leave  
f01074e6:	c3                   	ret    

f01074e7 <get_page_table>:
//  TABLE_IN_MEMORY : if page table exists in main memory
//	TABLE_NOT_EXIST : if page table doesn't exist,
//

int get_page_table(uint32 *ptr_page_directory, const uint32 virtual_address, uint32 **ptr_page_table)
{
f01074e7:	55                   	push   %ebp
f01074e8:	89 e5                	mov    %esp,%ebp
f01074ea:	83 ec 28             	sub    $0x28,%esp
	//	cprintf("gpt .05\n");
	uint32 page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f01074ed:	8b 45 0c             	mov    0xc(%ebp),%eax
f01074f0:	c1 e8 16             	shr    $0x16,%eax
f01074f3:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01074fa:	8b 45 08             	mov    0x8(%ebp),%eax
f01074fd:	01 d0                	add    %edx,%eax
f01074ff:	8b 00                	mov    (%eax),%eax
f0107501:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//2022: check PERM_PRESENT of the table first before calculating its PA
	if ( (page_directory_entry & PERM_PRESENT) == PERM_PRESENT)
f0107504:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107507:	83 e0 01             	and    $0x1,%eax
f010750a:	85 c0                	test   %eax,%eax
f010750c:	74 4e                	je     f010755c <get_page_table+0x75>
			*ptr_page_table = (void *)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
			//cprintf("===>get_page_table: page_dir_entry = %x ptr_page_table = %x\n", page_directory_entry,*ptr_page_table);
		}
		else
		{
			*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f010750e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107511:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0107516:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0107519:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010751c:	c1 e8 0c             	shr    $0xc,%eax
f010751f:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0107522:	a1 d0 bd 2b f0       	mov    0xf02bbdd0,%eax
f0107527:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f010752a:	72 17                	jb     f0107543 <get_page_table+0x5c>
f010752c:	ff 75 f0             	pushl  -0x10(%ebp)
f010752f:	68 ac 26 13 f0       	push   $0xf01326ac
f0107534:	68 e2 00 00 00       	push   $0xe2
f0107539:	68 ef 25 13 f0       	push   $0xf01325ef
f010753e:	e8 6d 8c ff ff       	call   f01001b0 <_panic>
f0107543:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107546:	2d 00 00 00 10       	sub    $0x10000000,%eax
f010754b:	89 c2                	mov    %eax,%edx
f010754d:	8b 45 10             	mov    0x10(%ebp),%eax
f0107550:	89 10                	mov    %edx,(%eax)
		}
		return TABLE_IN_MEMORY;
f0107552:	b8 00 00 00 00       	mov    $0x0,%eax
f0107557:	e9 8f 00 00 00       	jmp    f01075eb <get_page_table+0x104>
	}
	else if (page_directory_entry != 0) //the table exists but not in main mem, so it must be in sec mem
f010755c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0107560:	74 7b                	je     f01075dd <get_page_table+0xf6>
f0107562:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107565:	89 45 e0             	mov    %eax,-0x20(%ebp)

//Ahmed 2010:
static __inline void
lcr2(uint32 val)
{
	__asm __volatile("movl %0,%%cr2" : : "r" (val));
f0107568:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010756b:	0f 22 d0             	mov    %eax,%cr2
		// Call the fault_handler() to load the table in memory for us ...
		//		cprintf("gpt .1\n, %x page_directory_entry\n", page_directory_entry);
		lcr2((uint32)virtual_address) ;

		//		cprintf("gpt .12\n");
		fault_handler(NULL);
f010756e:	83 ec 0c             	sub    $0xc,%esp
f0107571:	6a 00                	push   $0x0
f0107573:	e8 70 4f 00 00       	call   f010c4e8 <fault_handler>
f0107578:	83 c4 10             	add    $0x10,%esp

		//		cprintf("gpt .15\n");
		// now the page_fault_handler() should have returned successfully and updated the
		// directory with the new table frame number in memory
		page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f010757b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010757e:	c1 e8 16             	shr    $0x16,%eax
f0107581:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0107588:	8b 45 08             	mov    0x8(%ebp),%eax
f010758b:	01 d0                	add    %edx,%eax
f010758d:	8b 00                	mov    (%eax),%eax
f010758f:	89 45 f4             	mov    %eax,-0xc(%ebp)
		{
			*ptr_page_table = (void *)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
		}
		else
		{
			*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f0107592:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107595:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010759a:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010759d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01075a0:	c1 e8 0c             	shr    $0xc,%eax
f01075a3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01075a6:	a1 d0 bd 2b f0       	mov    0xf02bbdd0,%eax
f01075ab:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f01075ae:	72 17                	jb     f01075c7 <get_page_table+0xe0>
f01075b0:	ff 75 e8             	pushl  -0x18(%ebp)
f01075b3:	68 ac 26 13 f0       	push   $0xf01326ac
f01075b8:	68 fa 00 00 00       	push   $0xfa
f01075bd:	68 ef 25 13 f0       	push   $0xf01325ef
f01075c2:	e8 e9 8b ff ff       	call   f01001b0 <_panic>
f01075c7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01075ca:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01075cf:	89 c2                	mov    %eax,%edx
f01075d1:	8b 45 10             	mov    0x10(%ebp),%eax
f01075d4:	89 10                	mov    %edx,(%eax)
		}

		return TABLE_IN_MEMORY;
f01075d6:	b8 00 00 00 00       	mov    $0x0,%eax
f01075db:	eb 0e                	jmp    f01075eb <get_page_table+0x104>
	}
	else // there is no table for this va anywhere. This is a new table required, so check if the user want creation
	{
		//		cprintf("gpt .2\n");
		*ptr_page_table = 0;
f01075dd:	8b 45 10             	mov    0x10(%ebp),%eax
f01075e0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return TABLE_NOT_EXIST;
f01075e6:	b8 01 00 00 00       	mov    $0x1,%eax
	}
}
f01075eb:	c9                   	leave  
f01075ec:	c3                   	ret    

f01075ed <create_page_table>:

void * create_page_table(uint32 *ptr_directory, const uint32 virtual_address)
{
f01075ed:	55                   	push   %ebp
f01075ee:	89 e5                	mov    %esp,%ebp
f01075f0:	83 ec 18             	sub    $0x18,%esp
	memset(ptr_page_table , 0, PAGE_SIZE);
	tlbflush();

#else
	uint32 * ptr_page_table ;
	__static_cpt(ptr_directory, virtual_address, &ptr_page_table) ;
f01075f3:	83 ec 04             	sub    $0x4,%esp
f01075f6:	8d 45 f4             	lea    -0xc(%ebp),%eax
f01075f9:	50                   	push   %eax
f01075fa:	ff 75 0c             	pushl  0xc(%ebp)
f01075fd:	ff 75 08             	pushl  0x8(%ebp)
f0107600:	e8 08 00 00 00       	call   f010760d <__static_cpt>
f0107605:	83 c4 10             	add    $0x10,%esp
#endif

	return ptr_page_table;
f0107608:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010760b:	c9                   	leave  
f010760c:	c3                   	ret    

f010760d <__static_cpt>:

void __static_cpt(uint32 *ptr_directory, const uint32 virtual_address, uint32 **ptr_page_table)
{
f010760d:	55                   	push   %ebp
f010760e:	89 e5                	mov    %esp,%ebp
f0107610:	83 ec 28             	sub    $0x28,%esp
	struct FrameInfo* ptr_new_frame_info;
	int err = allocate_frame(&ptr_new_frame_info) ;
f0107613:	83 ec 0c             	sub    $0xc,%esp
f0107616:	8d 45 e0             	lea    -0x20(%ebp),%eax
f0107619:	50                   	push   %eax
f010761a:	e8 06 fd ff ff       	call   f0107325 <allocate_frame>
f010761f:	83 c4 10             	add    $0x10,%esp
f0107622:	89 45 f4             	mov    %eax,-0xc(%ebp)

	uint32 phys_page_table = to_physical_address(ptr_new_frame_info);
f0107625:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0107628:	83 ec 0c             	sub    $0xc,%esp
f010762b:	50                   	push   %eax
f010762c:	e8 28 f8 ff ff       	call   f0106e59 <to_physical_address>
f0107631:	83 c4 10             	add    $0x10,%esp
f0107634:	89 45 f0             	mov    %eax,-0x10(%ebp)
	*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(phys_page_table) ;
f0107637:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010763a:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010763d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107640:	c1 e8 0c             	shr    $0xc,%eax
f0107643:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0107646:	a1 d0 bd 2b f0       	mov    0xf02bbdd0,%eax
f010764b:	39 45 e8             	cmp    %eax,-0x18(%ebp)
f010764e:	72 17                	jb     f0107667 <__static_cpt+0x5a>
f0107650:	ff 75 ec             	pushl  -0x14(%ebp)
f0107653:	68 ac 26 13 f0       	push   $0xf01326ac
f0107658:	68 2f 01 00 00       	push   $0x12f
f010765d:	68 ef 25 13 f0       	push   $0xf01325ef
f0107662:	e8 49 8b ff ff       	call   f01001b0 <_panic>
f0107667:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010766a:	2d 00 00 00 10       	sub    $0x10000000,%eax
f010766f:	89 c2                	mov    %eax,%edx
f0107671:	8b 45 10             	mov    0x10(%ebp),%eax
f0107674:	89 10                	mov    %edx,(%eax)
	ptr_new_frame_info->references = 1;
f0107676:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0107679:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	ptr_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(phys_page_table, PERM_PRESENT | PERM_USER | PERM_WRITEABLE);
f010767f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107682:	c1 e8 16             	shr    $0x16,%eax
f0107685:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010768c:	8b 45 08             	mov    0x8(%ebp),%eax
f010768f:	01 d0                	add    %edx,%eax
f0107691:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0107694:	83 ca 07             	or     $0x7,%edx
f0107697:	89 10                	mov    %edx,(%eax)
	//initialize new page table by 0's
	memset(*ptr_page_table , 0, PAGE_SIZE);
f0107699:	8b 45 10             	mov    0x10(%ebp),%eax
f010769c:	8b 00                	mov    (%eax),%eax
f010769e:	83 ec 04             	sub    $0x4,%esp
f01076a1:	68 00 10 00 00       	push   $0x1000
f01076a6:	6a 00                	push   $0x0
f01076a8:	50                   	push   %eax
f01076a9:	e8 7d 79 02 00       	call   f012f02b <memset>
f01076ae:	83 c4 10             	add    $0x10,%esp

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f01076b1:	0f 20 d8             	mov    %cr3,%eax
f01076b4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f01076b7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01076ba:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
}
f01076bd:	90                   	nop
f01076be:	c9                   	leave  
f01076bf:	c3                   	ret    

f01076c0 <map_frame>:
//   0 on success
//
// Hint: implement using get_page_table() and unmap_frame().
//
int map_frame(uint32 *ptr_page_directory, struct FrameInfo *ptr_frame_info, uint32 virtual_address, int perm)
{
f01076c0:	55                   	push   %ebp
f01076c1:	89 e5                	mov    %esp,%ebp
f01076c3:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	uint32 physical_address = to_physical_address(ptr_frame_info);
f01076c6:	ff 75 0c             	pushl  0xc(%ebp)
f01076c9:	e8 8b f7 ff ff       	call   f0106e59 <to_physical_address>
f01076ce:	83 c4 04             	add    $0x4,%esp
f01076d1:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 *ptr_page_table;
	if( get_page_table(ptr_page_directory, virtual_address, &ptr_page_table) == TABLE_NOT_EXIST)
f01076d4:	83 ec 04             	sub    $0x4,%esp
f01076d7:	8d 45 ec             	lea    -0x14(%ebp),%eax
f01076da:	50                   	push   %eax
f01076db:	ff 75 10             	pushl  0x10(%ebp)
f01076de:	ff 75 08             	pushl  0x8(%ebp)
f01076e1:	e8 01 fe ff ff       	call   f01074e7 <get_page_table>
f01076e6:	83 c4 10             	add    $0x10,%esp
f01076e9:	83 f8 01             	cmp    $0x1,%eax
f01076ec:	75 15                	jne    f0107703 <map_frame+0x43>
			uint32* ptr_page_table2 =NULL;
			//cprintf("======> After the table created at %x\n\n", get_page_table(ptr_page_directory, virtual_address,&ptr_page_table2));
		}
#else
		{
			__static_cpt(ptr_page_directory, (uint32)virtual_address, &ptr_page_table);
f01076ee:	83 ec 04             	sub    $0x4,%esp
f01076f1:	8d 45 ec             	lea    -0x14(%ebp),%eax
f01076f4:	50                   	push   %eax
f01076f5:	ff 75 10             	pushl  0x10(%ebp)
f01076f8:	ff 75 08             	pushl  0x8(%ebp)
f01076fb:	e8 0d ff ff ff       	call   f010760d <__static_cpt>
f0107700:	83 c4 10             	add    $0x10,%esp
#endif

	}

	//cprintf("NOW .. map add = %x ptr_page_table = %x PTX(virtual_address) = %d\n", virtual_address, ptr_page_table,PTX(virtual_address));
	uint32 page_table_entry = ptr_page_table[PTX(virtual_address)];
f0107703:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107706:	8b 55 10             	mov    0x10(%ebp),%edx
f0107709:	c1 ea 0c             	shr    $0xc,%edx
f010770c:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0107712:	c1 e2 02             	shl    $0x2,%edx
f0107715:	01 d0                	add    %edx,%eax
f0107717:	8b 00                	mov    (%eax),%eax
f0107719:	89 45 f0             	mov    %eax,-0x10(%ebp)

	}*/

	/*NEW'15 CORRECT SOLUTION*/
	//If already mapped
	if ((page_table_entry & PERM_PRESENT) == PERM_PRESENT)
f010771c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010771f:	83 e0 01             	and    $0x1,%eax
f0107722:	85 c0                	test   %eax,%eax
f0107724:	74 25                	je     f010774b <map_frame+0x8b>
	{
		//on this pa, then do nothing
		if (EXTRACT_ADDRESS(page_table_entry) == physical_address)
f0107726:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107729:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010772e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0107731:	75 07                	jne    f010773a <map_frame+0x7a>
			return 0;
f0107733:	b8 00 00 00 00       	mov    $0x0,%eax
f0107738:	eb 43                	jmp    f010777d <map_frame+0xbd>
		//on another pa, then unmap it
		else
			unmap_frame(ptr_page_directory , virtual_address);
f010773a:	83 ec 08             	sub    $0x8,%esp
f010773d:	ff 75 10             	pushl  0x10(%ebp)
f0107740:	ff 75 08             	pushl  0x8(%ebp)
f0107743:	e8 a7 00 00 00       	call   f01077ef <unmap_frame>
f0107748:	83 c4 10             	add    $0x10,%esp
	}
	ptr_frame_info->references++;
f010774b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010774e:	8b 40 08             	mov    0x8(%eax),%eax
f0107751:	40                   	inc    %eax
f0107752:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107755:	66 89 42 08          	mov    %ax,0x8(%edx)
	ptr_page_table[PTX(virtual_address)] = CONSTRUCT_ENTRY(physical_address , perm | PERM_PRESENT);
f0107759:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010775c:	8b 55 10             	mov    0x10(%ebp),%edx
f010775f:	c1 ea 0c             	shr    $0xc,%edx
f0107762:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0107768:	c1 e2 02             	shl    $0x2,%edx
f010776b:	01 c2                	add    %eax,%edx
f010776d:	8b 45 14             	mov    0x14(%ebp),%eax
f0107770:	0b 45 f4             	or     -0xc(%ebp),%eax
f0107773:	83 c8 01             	or     $0x1,%eax
f0107776:	89 02                	mov    %eax,(%edx)

	return 0;
f0107778:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010777d:	c9                   	leave  
f010777e:	c3                   	ret    

f010777f <get_frame_info>:
// Return 0 if there is no frame mapped at virtual_address.
//
// Hint: implement using get_page_table() and get_frame_info().
//
struct FrameInfo * get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table)
{
f010777f:	55                   	push   %ebp
f0107780:	89 e5                	mov    %esp,%ebp
f0107782:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	//cprintf(".gfi .1\n %x, %x, %x, \n", ptr_page_directory, virtual_address, ptr_page_table);
	uint32 ret =  get_page_table(ptr_page_directory, virtual_address, ptr_page_table) ;
f0107785:	83 ec 04             	sub    $0x4,%esp
f0107788:	ff 75 10             	pushl  0x10(%ebp)
f010778b:	ff 75 0c             	pushl  0xc(%ebp)
f010778e:	ff 75 08             	pushl  0x8(%ebp)
f0107791:	e8 51 fd ff ff       	call   f01074e7 <get_page_table>
f0107796:	83 c4 10             	add    $0x10,%esp
f0107799:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//cprintf(".gfi .15\n");
	if((*ptr_page_table) != 0)
f010779c:	8b 45 10             	mov    0x10(%ebp),%eax
f010779f:	8b 00                	mov    (%eax),%eax
f01077a1:	85 c0                	test   %eax,%eax
f01077a3:	74 43                	je     f01077e8 <get_frame_info+0x69>
	{
		uint32 index_page_table = PTX(virtual_address);
f01077a5:	8b 45 0c             	mov    0xc(%ebp),%eax
f01077a8:	c1 e8 0c             	shr    $0xc,%eax
f01077ab:	25 ff 03 00 00       	and    $0x3ff,%eax
f01077b0:	89 45 f0             	mov    %eax,-0x10(%ebp)
		//cprintf(".gfi .2\n");
		uint32 page_table_entry = (*ptr_page_table)[index_page_table];
f01077b3:	8b 45 10             	mov    0x10(%ebp),%eax
f01077b6:	8b 00                	mov    (%eax),%eax
f01077b8:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01077bb:	c1 e2 02             	shl    $0x2,%edx
f01077be:	01 d0                	add    %edx,%eax
f01077c0:	8b 00                	mov    (%eax),%eax
f01077c2:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if( page_table_entry != 0)
f01077c5:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01077c9:	74 16                	je     f01077e1 <get_frame_info+0x62>
		{
			//cprintf(".gfi .3\n");
			return to_frame_info( EXTRACT_ADDRESS ( page_table_entry ) );
f01077cb:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01077ce:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01077d3:	83 ec 0c             	sub    $0xc,%esp
f01077d6:	50                   	push   %eax
f01077d7:	e8 90 f6 ff ff       	call   f0106e6c <to_frame_info>
f01077dc:	83 c4 10             	add    $0x10,%esp
f01077df:	eb 0c                	jmp    f01077ed <get_frame_info+0x6e>
		}
		return 0;
f01077e1:	b8 00 00 00 00       	mov    $0x0,%eax
f01077e6:	eb 05                	jmp    f01077ed <get_frame_info+0x6e>
	}
	return 0;
f01077e8:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01077ed:	c9                   	leave  
f01077ee:	c3                   	ret    

f01077ef <unmap_frame>:
//
// Hint: implement using get_frame_info(),
// 	tlb_invalidate(), and decrement_references().
//
void unmap_frame(uint32 *ptr_page_directory, uint32 virtual_address)
{
f01077ef:	55                   	push   %ebp
f01077f0:	89 e5                	mov    %esp,%ebp
f01077f2:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	uint32 *ptr_page_table;
	struct FrameInfo* ptr_frame_info = get_frame_info(ptr_page_directory, virtual_address, &ptr_page_table);
f01077f5:	83 ec 04             	sub    $0x4,%esp
f01077f8:	8d 45 f0             	lea    -0x10(%ebp),%eax
f01077fb:	50                   	push   %eax
f01077fc:	ff 75 0c             	pushl  0xc(%ebp)
f01077ff:	ff 75 08             	pushl  0x8(%ebp)
f0107802:	e8 78 ff ff ff       	call   f010777f <get_frame_info>
f0107807:	83 c4 10             	add    $0x10,%esp
f010780a:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if( ptr_frame_info != 0 )
f010780d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0107811:	74 60                	je     f0107873 <unmap_frame+0x84>
	{
		if (ptr_frame_info->isBuffered && !CHECK_IF_KERNEL_ADDRESS((uint32)virtual_address))
f0107813:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107816:	8a 40 14             	mov    0x14(%eax),%al
f0107819:	84 c0                	test   %al,%al
f010781b:	74 1c                	je     f0107839 <unmap_frame+0x4a>
f010781d:	81 7d 0c ff ff bf ee 	cmpl   $0xeebfffff,0xc(%ebp)
f0107824:	77 13                	ja     f0107839 <unmap_frame+0x4a>
			cprintf("Freeing BUFFERED frame at va %x!!!\n", virtual_address) ;
f0107826:	83 ec 08             	sub    $0x8,%esp
f0107829:	ff 75 0c             	pushl  0xc(%ebp)
f010782c:	68 dc 26 13 f0       	push   $0xf01326dc
f0107831:	e8 fb 95 ff ff       	call   f0100e31 <cprintf>
f0107836:	83 c4 10             	add    $0x10,%esp
		decrement_references(ptr_frame_info);
f0107839:	83 ec 0c             	sub    $0xc,%esp
f010783c:	ff 75 f4             	pushl  -0xc(%ebp)
f010783f:	e8 73 fc ff ff       	call   f01074b7 <decrement_references>
f0107844:	83 c4 10             	add    $0x10,%esp
		ptr_page_table[PTX(virtual_address)] = 0;
f0107847:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010784a:	8b 55 0c             	mov    0xc(%ebp),%edx
f010784d:	c1 ea 0c             	shr    $0xc,%edx
f0107850:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0107856:	c1 e2 02             	shl    $0x2,%edx
f0107859:	01 d0                	add    %edx,%eax
f010785b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		tlb_invalidate(ptr_page_directory, (void *)virtual_address);
f0107861:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107864:	83 ec 08             	sub    $0x8,%esp
f0107867:	50                   	push   %eax
f0107868:	ff 75 08             	pushl  0x8(%ebp)
f010786b:	e8 4e f6 ff ff       	call   f0106ebe <tlb_invalidate>
f0107870:	83 c4 10             	add    $0x10,%esp
	}
}
f0107873:	90                   	nop
f0107874:	c9                   	leave  
f0107875:	c3                   	ret    

f0107876 <loadtime_map_frame>:
// RETURNS:
//   0 on success
//
//
int loadtime_map_frame(uint32 *ptr_page_directory, struct FrameInfo *ptr_frame_info, uint32 virtual_address, int perm)
{
f0107876:	55                   	push   %ebp
f0107877:	89 e5                	mov    %esp,%ebp
f0107879:	83 ec 28             	sub    $0x28,%esp
	uint32 physical_address = to_physical_address(ptr_frame_info);
f010787c:	ff 75 0c             	pushl  0xc(%ebp)
f010787f:	e8 d5 f5 ff ff       	call   f0106e59 <to_physical_address>
f0107884:	83 c4 04             	add    $0x4,%esp
f0107887:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 *ptr_page_table;

	uint32 page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f010788a:	8b 45 10             	mov    0x10(%ebp),%eax
f010788d:	c1 e8 16             	shr    $0x16,%eax
f0107890:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0107897:	8b 45 08             	mov    0x8(%ebp),%eax
f010789a:	01 d0                	add    %edx,%eax
f010789c:	8b 00                	mov    (%eax),%eax
f010789e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	{
		ptr_page_table = (uint32*)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
	}
	else
	{
		ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f01078a1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01078a4:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01078a9:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01078ac:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01078af:	c1 e8 0c             	shr    $0xc,%eax
f01078b2:	89 45 e8             	mov    %eax,-0x18(%ebp)
f01078b5:	a1 d0 bd 2b f0       	mov    0xf02bbdd0,%eax
f01078ba:	39 45 e8             	cmp    %eax,-0x18(%ebp)
f01078bd:	72 17                	jb     f01078d6 <loadtime_map_frame+0x60>
f01078bf:	ff 75 ec             	pushl  -0x14(%ebp)
f01078c2:	68 ac 26 13 f0       	push   $0xf01326ac
f01078c7:	68 e5 01 00 00       	push   $0x1e5
f01078cc:	68 ef 25 13 f0       	push   $0xf01325ef
f01078d1:	e8 da 88 ff ff       	call   f01001b0 <_panic>
f01078d6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01078d9:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01078de:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	}

	//if page table not exist, create it in memory and link it with the directory
	if (page_directory_entry == 0)
f01078e1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01078e5:	75 15                	jne    f01078fc <loadtime_map_frame+0x86>
		{
			ptr_page_table = create_page_table(ptr_page_directory, virtual_address);
		}
#else
		{
			__static_cpt(ptr_page_directory, virtual_address, &ptr_page_table);
f01078e7:	83 ec 04             	sub    $0x4,%esp
f01078ea:	8d 45 e4             	lea    -0x1c(%ebp),%eax
f01078ed:	50                   	push   %eax
f01078ee:	ff 75 10             	pushl  0x10(%ebp)
f01078f1:	ff 75 08             	pushl  0x8(%ebp)
f01078f4:	e8 14 fd ff ff       	call   f010760d <__static_cpt>
f01078f9:	83 c4 10             	add    $0x10,%esp
		}
#endif
	}

	ptr_frame_info->references++;
f01078fc:	8b 45 0c             	mov    0xc(%ebp),%eax
f01078ff:	8b 40 08             	mov    0x8(%eax),%eax
f0107902:	40                   	inc    %eax
f0107903:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107906:	66 89 42 08          	mov    %ax,0x8(%edx)
	ptr_page_table[PTX(virtual_address)] = CONSTRUCT_ENTRY(physical_address , perm | PERM_PRESENT);
f010790a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010790d:	8b 55 10             	mov    0x10(%ebp),%edx
f0107910:	c1 ea 0c             	shr    $0xc,%edx
f0107913:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0107919:	c1 e2 02             	shl    $0x2,%edx
f010791c:	01 c2                	add    %eax,%edx
f010791e:	8b 45 14             	mov    0x14(%ebp),%eax
f0107921:	0b 45 f4             	or     -0xc(%ebp),%eax
f0107924:	83 c8 01             	or     $0x1,%eax
f0107927:	89 02                	mov    %eax,(%edx)

	return 0;
f0107929:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010792e:	c9                   	leave  
f010792f:	c3                   	ret    

f0107930 <calculate_available_frames>:



// calculate_available_frames:
struct freeFramesCounters calculate_available_frames()
{
f0107930:	55                   	push   %ebp
f0107931:	89 e5                	mov    %esp,%ebp
f0107933:	57                   	push   %edi
f0107934:	56                   	push   %esi
f0107935:	53                   	push   %ebx
f0107936:	83 ec 20             	sub    $0x20,%esp

	//calculate the free frames from the free frame list
	struct FrameInfo *ptr;
	uint32 totalFreeUnBuffered = 0 ;
f0107939:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	uint32 totalFreeBuffered = 0 ;
f0107940:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	uint32 totalModified = 0 ;
f0107947:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	LIST_FOREACH(ptr, &free_frame_list)
f010794e:	a1 d8 bd 2b f0       	mov    0xf02bbdd8,%eax
f0107953:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0107956:	eb 1a                	jmp    f0107972 <calculate_available_frames+0x42>
	{
		if (ptr->isBuffered)
f0107958:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010795b:	8a 40 14             	mov    0x14(%eax),%al
f010795e:	84 c0                	test   %al,%al
f0107960:	74 05                	je     f0107967 <calculate_available_frames+0x37>
			totalFreeBuffered++ ;
f0107962:	ff 45 e8             	incl   -0x18(%ebp)
f0107965:	eb 03                	jmp    f010796a <calculate_available_frames+0x3a>
		else
			totalFreeUnBuffered++ ;
f0107967:	ff 45 ec             	incl   -0x14(%ebp)
	struct FrameInfo *ptr;
	uint32 totalFreeUnBuffered = 0 ;
	uint32 totalFreeBuffered = 0 ;
	uint32 totalModified = 0 ;

	LIST_FOREACH(ptr, &free_frame_list)
f010796a:	a1 e0 bd 2b f0       	mov    0xf02bbde0,%eax
f010796f:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0107972:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0107976:	74 07                	je     f010797f <calculate_available_frames+0x4f>
f0107978:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010797b:	8b 00                	mov    (%eax),%eax
f010797d:	eb 05                	jmp    f0107984 <calculate_available_frames+0x54>
f010797f:	b8 00 00 00 00       	mov    $0x0,%eax
f0107984:	a3 e0 bd 2b f0       	mov    %eax,0xf02bbde0
f0107989:	a1 e0 bd 2b f0       	mov    0xf02bbde0,%eax
f010798e:	85 c0                	test   %eax,%eax
f0107990:	75 c6                	jne    f0107958 <calculate_available_frames+0x28>
f0107992:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0107996:	75 c0                	jne    f0107958 <calculate_available_frames+0x28>
			totalFreeBuffered++ ;
		else
			totalFreeUnBuffered++ ;
	}

	LIST_FOREACH(ptr, &modified_frame_list)
f0107998:	a1 40 3a 25 f0       	mov    0xf0253a40,%eax
f010799d:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01079a0:	eb 0b                	jmp    f01079ad <calculate_available_frames+0x7d>
	{
		totalModified++ ;
f01079a2:	ff 45 e4             	incl   -0x1c(%ebp)
			totalFreeBuffered++ ;
		else
			totalFreeUnBuffered++ ;
	}

	LIST_FOREACH(ptr, &modified_frame_list)
f01079a5:	a1 48 3a 25 f0       	mov    0xf0253a48,%eax
f01079aa:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01079ad:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01079b1:	74 07                	je     f01079ba <calculate_available_frames+0x8a>
f01079b3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01079b6:	8b 00                	mov    (%eax),%eax
f01079b8:	eb 05                	jmp    f01079bf <calculate_available_frames+0x8f>
f01079ba:	b8 00 00 00 00       	mov    $0x0,%eax
f01079bf:	a3 48 3a 25 f0       	mov    %eax,0xf0253a48
f01079c4:	a1 48 3a 25 f0       	mov    0xf0253a48,%eax
f01079c9:	85 c0                	test   %eax,%eax
f01079cb:	75 d5                	jne    f01079a2 <calculate_available_frames+0x72>
f01079cd:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01079d1:	75 cf                	jne    f01079a2 <calculate_available_frames+0x72>
	{
		totalModified++ ;
	}

	struct freeFramesCounters counters ;
	counters.freeBuffered = totalFreeBuffered ;
f01079d3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01079d6:	89 45 d8             	mov    %eax,-0x28(%ebp)
	counters.freeNotBuffered = totalFreeUnBuffered ;
f01079d9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01079dc:	89 45 dc             	mov    %eax,-0x24(%ebp)
	counters.modified = totalModified;
f01079df:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01079e2:	89 45 e0             	mov    %eax,-0x20(%ebp)
	return counters;
f01079e5:	8b 45 08             	mov    0x8(%ebp),%eax
f01079e8:	89 c3                	mov    %eax,%ebx
f01079ea:	8d 45 d8             	lea    -0x28(%ebp),%eax
f01079ed:	ba 03 00 00 00       	mov    $0x3,%edx
f01079f2:	89 df                	mov    %ebx,%edi
f01079f4:	89 c6                	mov    %eax,%esi
f01079f6:	89 d1                	mov    %edx,%ecx
f01079f8:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
}
f01079fa:	8b 45 08             	mov    0x8(%ebp),%eax
f01079fd:	83 c4 20             	add    $0x20,%esp
f0107a00:	5b                   	pop    %ebx
f0107a01:	5e                   	pop    %esi
f0107a02:	5f                   	pop    %edi
f0107a03:	5d                   	pop    %ebp
f0107a04:	c2 04 00             	ret    $0x4

f0107a07 <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f0107a07:	55                   	push   %ebp
f0107a08:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f0107a0a:	8b 45 08             	mov    0x8(%ebp),%eax
f0107a0d:	8b 15 10 be 2b f0    	mov    0xf02bbe10,%edx
f0107a13:	29 d0                	sub    %edx,%eax
f0107a15:	c1 f8 02             	sar    $0x2,%eax
f0107a18:	89 c2                	mov    %eax,%edx
f0107a1a:	89 d0                	mov    %edx,%eax
f0107a1c:	c1 e0 03             	shl    $0x3,%eax
f0107a1f:	01 d0                	add    %edx,%eax
f0107a21:	c1 e0 03             	shl    $0x3,%eax
f0107a24:	01 d0                	add    %edx,%eax
f0107a26:	c1 e0 03             	shl    $0x3,%eax
f0107a29:	01 d0                	add    %edx,%eax
f0107a2b:	c1 e0 03             	shl    $0x3,%eax
f0107a2e:	01 d0                	add    %edx,%eax
f0107a30:	89 c1                	mov    %eax,%ecx
f0107a32:	c1 e1 0f             	shl    $0xf,%ecx
f0107a35:	01 c8                	add    %ecx,%eax
f0107a37:	c1 e0 03             	shl    $0x3,%eax
f0107a3a:	01 d0                	add    %edx,%eax
f0107a3c:	f7 d8                	neg    %eax
}
f0107a3e:	5d                   	pop    %ebp
f0107a3f:	c3                   	ret    

f0107a40 <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f0107a40:	55                   	push   %ebp
f0107a41:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f0107a43:	ff 75 08             	pushl  0x8(%ebp)
f0107a46:	e8 bc ff ff ff       	call   f0107a07 <to_frame_number>
f0107a4b:	83 c4 04             	add    $0x4,%esp
f0107a4e:	c1 e0 0c             	shl    $0xc,%eax
}
f0107a51:	c9                   	leave  
f0107a52:	c3                   	ret    

f0107a53 <to_frame_info>:

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f0107a53:	55                   	push   %ebp
f0107a54:	89 e5                	mov    %esp,%ebp
f0107a56:	53                   	push   %ebx
f0107a57:	83 ec 04             	sub    $0x4,%esp
	if (PPN(physical_address) >= number_of_frames)
f0107a5a:	8b 45 08             	mov    0x8(%ebp),%eax
f0107a5d:	c1 e8 0c             	shr    $0xc,%eax
f0107a60:	89 c2                	mov    %eax,%edx
f0107a62:	a1 d0 bd 2b f0       	mov    0xf02bbdd0,%eax
f0107a67:	39 c2                	cmp    %eax,%edx
f0107a69:	72 14                	jb     f0107a7f <to_frame_info+0x2c>
		panic("to_frame_info called with invalid pa");
f0107a6b:	83 ec 04             	sub    $0x4,%esp
f0107a6e:	68 00 27 13 f0       	push   $0xf0132700
f0107a73:	6a 55                	push   $0x55
f0107a75:	68 25 27 13 f0       	push   $0xf0132725
f0107a7a:	e8 31 87 ff ff       	call   f01001b0 <_panic>
	return &frames_info[PPN(physical_address)];
f0107a7f:	8b 0d 10 be 2b f0    	mov    0xf02bbe10,%ecx
f0107a85:	8b 45 08             	mov    0x8(%ebp),%eax
f0107a88:	c1 e8 0c             	shr    $0xc,%eax
f0107a8b:	89 c2                	mov    %eax,%edx
f0107a8d:	89 d0                	mov    %edx,%eax
f0107a8f:	01 c0                	add    %eax,%eax
f0107a91:	01 d0                	add    %edx,%eax
f0107a93:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0107a9a:	01 d8                	add    %ebx,%eax
f0107a9c:	01 d0                	add    %edx,%eax
f0107a9e:	01 c8                	add    %ecx,%eax
}
f0107aa0:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0107aa3:	c9                   	leave  
f0107aa4:	c3                   	ret    

f0107aa5 <create_shares_array>:
// [1] Create "shares" array:
//===========================
//Dynamically allocate the array of shared objects
//initialize the array of shared objects by 0's and empty = 1
void create_shares_array(uint32 numOfElements)
{
f0107aa5:	55                   	push   %ebp
f0107aa6:	89 e5                	mov    %esp,%ebp
f0107aa8:	83 ec 18             	sub    $0x18,%esp
	if (shares == NULL)
	{
		panic("Kernel runs out of memory\nCan't create the array of shared objects.");
	}
#endif
	for (int i = 0; i < MAX_SHARES; ++i)
f0107aab:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0107ab2:	eb 5f                	jmp    f0107b13 <create_shares_array+0x6e>
	{
		memset(&(shares[i]), 0, sizeof(struct Share));
f0107ab4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107ab7:	89 d0                	mov    %edx,%eax
f0107ab9:	01 c0                	add    %eax,%eax
f0107abb:	01 d0                	add    %edx,%eax
f0107abd:	01 c0                	add    %eax,%eax
f0107abf:	01 d0                	add    %edx,%eax
f0107ac1:	c1 e0 02             	shl    $0x2,%eax
f0107ac4:	01 d0                	add    %edx,%eax
f0107ac6:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0107acd:	01 d0                	add    %edx,%eax
f0107acf:	c1 e0 04             	shl    $0x4,%eax
f0107ad2:	05 80 3a 25 f0       	add    $0xf0253a80,%eax
f0107ad7:	83 ec 04             	sub    $0x4,%esp
f0107ada:	68 50 10 00 00       	push   $0x1050
f0107adf:	6a 00                	push   $0x0
f0107ae1:	50                   	push   %eax
f0107ae2:	e8 44 75 02 00       	call   f012f02b <memset>
f0107ae7:	83 c4 10             	add    $0x10,%esp
		shares[i].empty = 1;
f0107aea:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107aed:	89 d0                	mov    %edx,%eax
f0107aef:	01 c0                	add    %eax,%eax
f0107af1:	01 d0                	add    %edx,%eax
f0107af3:	01 c0                	add    %eax,%eax
f0107af5:	01 d0                	add    %edx,%eax
f0107af7:	c1 e0 02             	shl    $0x2,%eax
f0107afa:	01 d0                	add    %edx,%eax
f0107afc:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0107b03:	01 d0                	add    %edx,%eax
f0107b05:	c1 e0 04             	shl    $0x4,%eax
f0107b08:	05 cd 3a 25 f0       	add    $0xf0253acd,%eax
f0107b0d:	c6 00 01             	movb   $0x1,(%eax)
	if (shares == NULL)
	{
		panic("Kernel runs out of memory\nCan't create the array of shared objects.");
	}
#endif
	for (int i = 0; i < MAX_SHARES; ++i)
f0107b10:	ff 45 f4             	incl   -0xc(%ebp)
f0107b13:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
f0107b17:	7e 9b                	jle    f0107ab4 <create_shares_array+0xf>
	{
		memset(&(shares[i]), 0, sizeof(struct Share));
		shares[i].empty = 1;
	}
}
f0107b19:	90                   	nop
f0107b1a:	c9                   	leave  
f0107b1b:	c3                   	ret    

f0107b1c <allocate_share_object>:
//	a) if succeed:
//		1. allocatedObject (pointer to struct Share) passed by reference
//		2. sharedObjectID (its index in the array) as a return parameter
//	b) E_NO_SHARE if the the array of shares is full (i.e. reaches "MAX_SHARES")
int allocate_share_object(struct Share **allocatedObject)
{
f0107b1c:	55                   	push   %ebp
f0107b1d:	89 e5                	mov    %esp,%ebp
f0107b1f:	83 ec 18             	sub    $0x18,%esp
	int32 sharedObjectID = -1 ;
f0107b22:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
	for (int i = 0; i < MAX_SHARES; ++i)
f0107b29:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0107b30:	eb 34                	jmp    f0107b66 <allocate_share_object+0x4a>
	{
		if (shares[i].empty)
f0107b32:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0107b35:	89 d0                	mov    %edx,%eax
f0107b37:	01 c0                	add    %eax,%eax
f0107b39:	01 d0                	add    %edx,%eax
f0107b3b:	01 c0                	add    %eax,%eax
f0107b3d:	01 d0                	add    %edx,%eax
f0107b3f:	c1 e0 02             	shl    $0x2,%eax
f0107b42:	01 d0                	add    %edx,%eax
f0107b44:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0107b4b:	01 d0                	add    %edx,%eax
f0107b4d:	c1 e0 04             	shl    $0x4,%eax
f0107b50:	05 cd 3a 25 f0       	add    $0xf0253acd,%eax
f0107b55:	8a 00                	mov    (%eax),%al
f0107b57:	84 c0                	test   %al,%al
f0107b59:	74 08                	je     f0107b63 <allocate_share_object+0x47>
		{
			sharedObjectID = i;
f0107b5b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107b5e:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f0107b61:	eb 09                	jmp    f0107b6c <allocate_share_object+0x50>
//		2. sharedObjectID (its index in the array) as a return parameter
//	b) E_NO_SHARE if the the array of shares is full (i.e. reaches "MAX_SHARES")
int allocate_share_object(struct Share **allocatedObject)
{
	int32 sharedObjectID = -1 ;
	for (int i = 0; i < MAX_SHARES; ++i)
f0107b63:	ff 45 f0             	incl   -0x10(%ebp)
f0107b66:	83 7d f0 63          	cmpl   $0x63,-0x10(%ebp)
f0107b6a:	7e c6                	jle    f0107b32 <allocate_share_object+0x16>
			sharedObjectID = i;
			break;
		}
	}

	if (sharedObjectID == -1)
f0107b6c:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f0107b70:	75 0a                	jne    f0107b7c <allocate_share_object+0x60>
	{
		return E_NO_SHARE ;
f0107b72:	b8 f2 ff ff ff       	mov    $0xfffffff2,%eax
f0107b77:	e9 8b 00 00 00       	jmp    f0107c07 <allocate_share_object+0xeb>
//			return E_NO_SHARE;
//		}
//#endif
	}

	*allocatedObject = &(shares[sharedObjectID]);
f0107b7c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107b7f:	89 d0                	mov    %edx,%eax
f0107b81:	01 c0                	add    %eax,%eax
f0107b83:	01 d0                	add    %edx,%eax
f0107b85:	01 c0                	add    %eax,%eax
f0107b87:	01 d0                	add    %edx,%eax
f0107b89:	c1 e0 02             	shl    $0x2,%eax
f0107b8c:	01 d0                	add    %edx,%eax
f0107b8e:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0107b95:	01 d0                	add    %edx,%eax
f0107b97:	c1 e0 04             	shl    $0x4,%eax
f0107b9a:	8d 90 80 3a 25 f0    	lea    -0xfdac580(%eax),%edx
f0107ba0:	8b 45 08             	mov    0x8(%ebp),%eax
f0107ba3:	89 10                	mov    %edx,(%eax)
	shares[sharedObjectID].empty = 0;
f0107ba5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107ba8:	89 d0                	mov    %edx,%eax
f0107baa:	01 c0                	add    %eax,%eax
f0107bac:	01 d0                	add    %edx,%eax
f0107bae:	01 c0                	add    %eax,%eax
f0107bb0:	01 d0                	add    %edx,%eax
f0107bb2:	c1 e0 02             	shl    $0x2,%eax
f0107bb5:	01 d0                	add    %edx,%eax
f0107bb7:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0107bbe:	01 d0                	add    %edx,%eax
f0107bc0:	c1 e0 04             	shl    $0x4,%eax
f0107bc3:	05 cd 3a 25 f0       	add    $0xf0253acd,%eax
f0107bc8:	c6 00 00             	movb   $0x0,(%eax)
#if USE_KHEAP
	{
		shares[sharedObjectID].framesStorage = create_frames_storage();
	}
#endif
	memset(shares[sharedObjectID].framesStorage, 0, PAGE_SIZE);
f0107bcb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107bce:	89 d0                	mov    %edx,%eax
f0107bd0:	01 c0                	add    %eax,%eax
f0107bd2:	01 d0                	add    %edx,%eax
f0107bd4:	01 c0                	add    %eax,%eax
f0107bd6:	01 d0                	add    %edx,%eax
f0107bd8:	c1 e0 02             	shl    $0x2,%eax
f0107bdb:	01 d0                	add    %edx,%eax
f0107bdd:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0107be4:	01 d0                	add    %edx,%eax
f0107be6:	c1 e0 04             	shl    $0x4,%eax
f0107be9:	83 c0 50             	add    $0x50,%eax
f0107bec:	05 80 3a 25 f0       	add    $0xf0253a80,%eax
f0107bf1:	83 ec 04             	sub    $0x4,%esp
f0107bf4:	68 00 10 00 00       	push   $0x1000
f0107bf9:	6a 00                	push   $0x0
f0107bfb:	50                   	push   %eax
f0107bfc:	e8 2a 74 02 00       	call   f012f02b <memset>
f0107c01:	83 c4 10             	add    $0x10,%esp

	return sharedObjectID;
f0107c04:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0107c07:	c9                   	leave  
f0107c08:	c3                   	ret    

f0107c09 <get_share_object_ID>:
//Search for the given shared object in the "shares" array
//Return:
//	a) if found: SharedObjectID (index of the shared object in the array)
//	b) else: E_SHARED_MEM_NOT_EXISTS
int get_share_object_ID(int32 ownerID, char* name)
{
f0107c09:	55                   	push   %ebp
f0107c0a:	89 e5                	mov    %esp,%ebp
f0107c0c:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f0107c0f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	for(; i< MAX_SHARES; ++i)
f0107c16:	e9 95 00 00 00       	jmp    f0107cb0 <get_share_object_ID+0xa7>
	{
		if (shares[i].empty)
f0107c1b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107c1e:	89 d0                	mov    %edx,%eax
f0107c20:	01 c0                	add    %eax,%eax
f0107c22:	01 d0                	add    %edx,%eax
f0107c24:	01 c0                	add    %eax,%eax
f0107c26:	01 d0                	add    %edx,%eax
f0107c28:	c1 e0 02             	shl    $0x2,%eax
f0107c2b:	01 d0                	add    %edx,%eax
f0107c2d:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0107c34:	01 d0                	add    %edx,%eax
f0107c36:	c1 e0 04             	shl    $0x4,%eax
f0107c39:	05 cd 3a 25 f0       	add    $0xf0253acd,%eax
f0107c3e:	8a 00                	mov    (%eax),%al
f0107c40:	84 c0                	test   %al,%al
f0107c42:	75 68                	jne    f0107cac <get_share_object_ID+0xa3>
			continue;

		//cprintf("shared var name = %s compared with %s\n", name, shares[i].name);
		if(shares[i].ownerID == ownerID && strcmp(name, shares[i].name)==0)
f0107c44:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107c47:	89 d0                	mov    %edx,%eax
f0107c49:	01 c0                	add    %eax,%eax
f0107c4b:	01 d0                	add    %edx,%eax
f0107c4d:	01 c0                	add    %eax,%eax
f0107c4f:	01 d0                	add    %edx,%eax
f0107c51:	c1 e0 02             	shl    $0x2,%eax
f0107c54:	01 d0                	add    %edx,%eax
f0107c56:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0107c5d:	01 d0                	add    %edx,%eax
f0107c5f:	c1 e0 04             	shl    $0x4,%eax
f0107c62:	05 80 3a 25 f0       	add    $0xf0253a80,%eax
f0107c67:	8b 00                	mov    (%eax),%eax
f0107c69:	3b 45 08             	cmp    0x8(%ebp),%eax
f0107c6c:	75 3f                	jne    f0107cad <get_share_object_ID+0xa4>
f0107c6e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107c71:	89 d0                	mov    %edx,%eax
f0107c73:	01 c0                	add    %eax,%eax
f0107c75:	01 d0                	add    %edx,%eax
f0107c77:	01 c0                	add    %eax,%eax
f0107c79:	01 d0                	add    %edx,%eax
f0107c7b:	c1 e0 02             	shl    $0x2,%eax
f0107c7e:	01 d0                	add    %edx,%eax
f0107c80:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0107c87:	01 d0                	add    %edx,%eax
f0107c89:	c1 e0 04             	shl    $0x4,%eax
f0107c8c:	05 80 3a 25 f0       	add    $0xf0253a80,%eax
f0107c91:	83 c0 04             	add    $0x4,%eax
f0107c94:	83 ec 08             	sub    $0x8,%esp
f0107c97:	50                   	push   %eax
f0107c98:	ff 75 0c             	pushl  0xc(%ebp)
f0107c9b:	e8 a9 72 02 00       	call   f012ef49 <strcmp>
f0107ca0:	83 c4 10             	add    $0x10,%esp
f0107ca3:	85 c0                	test   %eax,%eax
f0107ca5:	75 06                	jne    f0107cad <get_share_object_ID+0xa4>
		{
			//cprintf("%s found\n", name);
			return i;
f0107ca7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107caa:	eb 13                	jmp    f0107cbf <get_share_object_ID+0xb6>
	int i=0;

	for(; i< MAX_SHARES; ++i)
	{
		if (shares[i].empty)
			continue;
f0107cac:	90                   	nop
//	b) else: E_SHARED_MEM_NOT_EXISTS
int get_share_object_ID(int32 ownerID, char* name)
{
	int i=0;

	for(; i< MAX_SHARES; ++i)
f0107cad:	ff 45 f4             	incl   -0xc(%ebp)
f0107cb0:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
f0107cb4:	0f 8e 61 ff ff ff    	jle    f0107c1b <get_share_object_ID+0x12>
		{
			//cprintf("%s found\n", name);
			return i;
		}
	}
	return E_SHARED_MEM_NOT_EXISTS;
f0107cba:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
}
f0107cbf:	c9                   	leave  
f0107cc0:	c3                   	ret    

f0107cc1 <free_share_object>:
//delete the given sharedObjectID from the "shares" array
//Return:
//	a) 0 if succeed
//	b) E_SHARED_MEM_NOT_EXISTS if the shared object is not exists
int free_share_object(uint32 sharedObjectID)
{
f0107cc1:	55                   	push   %ebp
f0107cc2:	89 e5                	mov    %esp,%ebp
f0107cc4:	83 ec 08             	sub    $0x8,%esp
	if (sharedObjectID >= MAX_SHARES)
f0107cc7:	83 7d 08 63          	cmpl   $0x63,0x8(%ebp)
f0107ccb:	76 0a                	jbe    f0107cd7 <free_share_object+0x16>
		return E_SHARED_MEM_NOT_EXISTS;
f0107ccd:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
f0107cd2:	e9 93 00 00 00       	jmp    f0107d6a <free_share_object+0xa9>

	//panic("deleteSharedObject: not implemented yet");
	clear_frames_storage(shares[sharedObjectID].framesStorage);
f0107cd7:	8b 55 08             	mov    0x8(%ebp),%edx
f0107cda:	89 d0                	mov    %edx,%eax
f0107cdc:	01 c0                	add    %eax,%eax
f0107cde:	01 d0                	add    %edx,%eax
f0107ce0:	01 c0                	add    %eax,%eax
f0107ce2:	01 d0                	add    %edx,%eax
f0107ce4:	c1 e0 02             	shl    $0x2,%eax
f0107ce7:	01 d0                	add    %edx,%eax
f0107ce9:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0107cf0:	01 d0                	add    %edx,%eax
f0107cf2:	c1 e0 04             	shl    $0x4,%eax
f0107cf5:	83 c0 50             	add    $0x50,%eax
f0107cf8:	05 80 3a 25 f0       	add    $0xf0253a80,%eax
f0107cfd:	83 ec 0c             	sub    $0xc,%esp
f0107d00:	50                   	push   %eax
f0107d01:	e8 3e 01 00 00       	call   f0107e44 <clear_frames_storage>
f0107d06:	83 c4 10             	add    $0x10,%esp
#if USE_KHEAP
	kfree(shares[sharedObjectID].framesStorage);
#endif
	memset(&(shares[sharedObjectID]), 0, sizeof(struct Share));
f0107d09:	8b 55 08             	mov    0x8(%ebp),%edx
f0107d0c:	89 d0                	mov    %edx,%eax
f0107d0e:	01 c0                	add    %eax,%eax
f0107d10:	01 d0                	add    %edx,%eax
f0107d12:	01 c0                	add    %eax,%eax
f0107d14:	01 d0                	add    %edx,%eax
f0107d16:	c1 e0 02             	shl    $0x2,%eax
f0107d19:	01 d0                	add    %edx,%eax
f0107d1b:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0107d22:	01 d0                	add    %edx,%eax
f0107d24:	c1 e0 04             	shl    $0x4,%eax
f0107d27:	05 80 3a 25 f0       	add    $0xf0253a80,%eax
f0107d2c:	83 ec 04             	sub    $0x4,%esp
f0107d2f:	68 50 10 00 00       	push   $0x1050
f0107d34:	6a 00                	push   $0x0
f0107d36:	50                   	push   %eax
f0107d37:	e8 ef 72 02 00       	call   f012f02b <memset>
f0107d3c:	83 c4 10             	add    $0x10,%esp
	shares[sharedObjectID].empty = 1;
f0107d3f:	8b 55 08             	mov    0x8(%ebp),%edx
f0107d42:	89 d0                	mov    %edx,%eax
f0107d44:	01 c0                	add    %eax,%eax
f0107d46:	01 d0                	add    %edx,%eax
f0107d48:	01 c0                	add    %eax,%eax
f0107d4a:	01 d0                	add    %edx,%eax
f0107d4c:	c1 e0 02             	shl    $0x2,%eax
f0107d4f:	01 d0                	add    %edx,%eax
f0107d51:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0107d58:	01 d0                	add    %edx,%eax
f0107d5a:	c1 e0 04             	shl    $0x4,%eax
f0107d5d:	05 cd 3a 25 f0       	add    $0xf0253acd,%eax
f0107d62:	c6 00 01             	movb   $0x1,(%eax)

	return 0;
f0107d65:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0107d6a:	c9                   	leave  
f0107d6b:	c3                   	ret    

f0107d6c <create_frames_storage>:
//===========================
// [5] Create frames_storage:
//===========================
// if KHEAP = 1: Create the frames_storage by allocating a PAGE for its directory
inline uint32* create_frames_storage()
{
f0107d6c:	55                   	push   %ebp
f0107d6d:	89 e5                	mov    %esp,%ebp
f0107d6f:	83 ec 18             	sub    $0x18,%esp
	uint32* frames_storage = kmalloc(PAGE_SIZE);
f0107d72:	83 ec 0c             	sub    $0xc,%esp
f0107d75:	68 00 10 00 00       	push   $0x1000
f0107d7a:	e8 e0 01 00 00       	call   f0107f5f <kmalloc>
f0107d7f:	83 c4 10             	add    $0x10,%esp
f0107d82:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(frames_storage == NULL)
f0107d85:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0107d89:	75 17                	jne    f0107da2 <create_frames_storage+0x36>
	{
		panic("NOT ENOUGH KERNEL HEAP SPACE");
f0107d8b:	83 ec 04             	sub    $0x4,%esp
f0107d8e:	68 3f 27 13 f0       	push   $0xf013273f
f0107d93:	68 a6 00 00 00       	push   $0xa6
f0107d98:	68 5c 27 13 f0       	push   $0xf013275c
f0107d9d:	e8 0e 84 ff ff       	call   f01001b0 <_panic>
	}
	return frames_storage;
f0107da2:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0107da5:	c9                   	leave  
f0107da6:	c3                   	ret    

f0107da7 <add_frame_to_storage>:
//===========================
// [6] Add frame to storage:
//===========================
// Add a frame info to the storage of frames at the given index
inline void add_frame_to_storage(uint32* frames_storage, struct FrameInfo* ptr_frame_info, uint32 index)
{
f0107da7:	55                   	push   %ebp
f0107da8:	89 e5                	mov    %esp,%ebp
f0107daa:	53                   	push   %ebx
f0107dab:	83 ec 14             	sub    $0x14,%esp
	uint32 va = index * PAGE_SIZE ;
f0107dae:	8b 45 10             	mov    0x10(%ebp),%eax
f0107db1:	c1 e0 0c             	shl    $0xc,%eax
f0107db4:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 *ptr_page_table;
	int r = get_page_table(frames_storage,  va, &ptr_page_table);
f0107db7:	83 ec 04             	sub    $0x4,%esp
f0107dba:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0107dbd:	50                   	push   %eax
f0107dbe:	ff 75 f4             	pushl  -0xc(%ebp)
f0107dc1:	ff 75 08             	pushl  0x8(%ebp)
f0107dc4:	e8 1e f7 ff ff       	call   f01074e7 <get_page_table>
f0107dc9:	83 c4 10             	add    $0x10,%esp
f0107dcc:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if(r == TABLE_NOT_EXIST)
f0107dcf:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f0107dd3:	75 15                	jne    f0107dea <add_frame_to_storage+0x43>
		{
			ptr_page_table = create_page_table(frames_storage, (uint32)va);
		}
#else
		{
			__static_cpt(frames_storage, (uint32)va, &ptr_page_table);
f0107dd5:	83 ec 04             	sub    $0x4,%esp
f0107dd8:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0107ddb:	50                   	push   %eax
f0107ddc:	ff 75 f4             	pushl  -0xc(%ebp)
f0107ddf:	ff 75 08             	pushl  0x8(%ebp)
f0107de2:	e8 26 f8 ff ff       	call   f010760d <__static_cpt>
f0107de7:	83 c4 10             	add    $0x10,%esp

		}
#endif
	}
	ptr_page_table[PTX(va)] = CONSTRUCT_ENTRY(to_physical_address(ptr_frame_info), 0 | PERM_PRESENT);
f0107dea:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107ded:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107df0:	c1 ea 0c             	shr    $0xc,%edx
f0107df3:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0107df9:	c1 e2 02             	shl    $0x2,%edx
f0107dfc:	8d 1c 10             	lea    (%eax,%edx,1),%ebx
f0107dff:	83 ec 0c             	sub    $0xc,%esp
f0107e02:	ff 75 0c             	pushl  0xc(%ebp)
f0107e05:	e8 36 fc ff ff       	call   f0107a40 <to_physical_address>
f0107e0a:	83 c4 10             	add    $0x10,%esp
f0107e0d:	83 c8 01             	or     $0x1,%eax
f0107e10:	89 03                	mov    %eax,(%ebx)
}
f0107e12:	90                   	nop
f0107e13:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0107e16:	c9                   	leave  
f0107e17:	c3                   	ret    

f0107e18 <get_frame_from_storage>:
//===========================
// [7] Get frame from storage:
//===========================
// Get a frame info from the storage of frames at the given index
inline struct FrameInfo* get_frame_from_storage(uint32* frames_storage, uint32 index)
{
f0107e18:	55                   	push   %ebp
f0107e19:	89 e5                	mov    %esp,%ebp
f0107e1b:	83 ec 18             	sub    $0x18,%esp
	struct FrameInfo* ptr_frame_info;
	uint32 *ptr_page_table ;
	uint32 va = index * PAGE_SIZE ;
f0107e1e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107e21:	c1 e0 0c             	shl    $0xc,%eax
f0107e24:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_frame_info = get_frame_info(frames_storage,  va, &ptr_page_table);
f0107e27:	83 ec 04             	sub    $0x4,%esp
f0107e2a:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0107e2d:	50                   	push   %eax
f0107e2e:	ff 75 f4             	pushl  -0xc(%ebp)
f0107e31:	ff 75 08             	pushl  0x8(%ebp)
f0107e34:	e8 46 f9 ff ff       	call   f010777f <get_frame_info>
f0107e39:	83 c4 10             	add    $0x10,%esp
f0107e3c:	89 45 f0             	mov    %eax,-0x10(%ebp)
	return ptr_frame_info;
f0107e3f:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0107e42:	c9                   	leave  
f0107e43:	c3                   	ret    

f0107e44 <clear_frames_storage>:

//===========================
// [8] Clear the frames_storage:
//===========================
inline void clear_frames_storage(uint32* frames_storage)
{
f0107e44:	55                   	push   %ebp
f0107e45:	89 e5                	mov    %esp,%ebp
f0107e47:	83 ec 18             	sub    $0x18,%esp
	int fourMega = 1024 * PAGE_SIZE ;
f0107e4a:	c7 45 f0 00 00 40 00 	movl   $0x400000,-0x10(%ebp)
	int i ;
	for (i = 0 ; i < 1024 ; i++)
f0107e51:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0107e58:	eb 5b                	jmp    f0107eb5 <clear_frames_storage+0x71>
	{
		if (frames_storage[i] != 0)
f0107e5a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107e5d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0107e64:	8b 45 08             	mov    0x8(%ebp),%eax
f0107e67:	01 d0                	add    %edx,%eax
f0107e69:	8b 00                	mov    (%eax),%eax
f0107e6b:	85 c0                	test   %eax,%eax
f0107e6d:	74 43                	je     f0107eb2 <clear_frames_storage+0x6e>
			{
				kfree((void*)kheap_virtual_address(EXTRACT_ADDRESS(frames_storage[i])));
			}
#else
			{
				free_frame(to_frame_info(EXTRACT_ADDRESS(frames_storage[i])));
f0107e6f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107e72:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0107e79:	8b 45 08             	mov    0x8(%ebp),%eax
f0107e7c:	01 d0                	add    %edx,%eax
f0107e7e:	8b 00                	mov    (%eax),%eax
f0107e80:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0107e85:	83 ec 0c             	sub    $0xc,%esp
f0107e88:	50                   	push   %eax
f0107e89:	e8 c5 fb ff ff       	call   f0107a53 <to_frame_info>
f0107e8e:	83 c4 10             	add    $0x10,%esp
f0107e91:	83 ec 0c             	sub    $0xc,%esp
f0107e94:	50                   	push   %eax
f0107e95:	e8 a3 f5 ff ff       	call   f010743d <free_frame>
f0107e9a:	83 c4 10             	add    $0x10,%esp
			}
#endif
			frames_storage[i] = 0;
f0107e9d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107ea0:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0107ea7:	8b 45 08             	mov    0x8(%ebp),%eax
f0107eaa:	01 d0                	add    %edx,%eax
f0107eac:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
//===========================
inline void clear_frames_storage(uint32* frames_storage)
{
	int fourMega = 1024 * PAGE_SIZE ;
	int i ;
	for (i = 0 ; i < 1024 ; i++)
f0107eb2:	ff 45 f4             	incl   -0xc(%ebp)
f0107eb5:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f0107ebc:	7e 9c                	jle    f0107e5a <clear_frames_storage+0x16>
			}
#endif
			frames_storage[i] = 0;
		}
	}
}
f0107ebe:	90                   	nop
f0107ebf:	c9                   	leave  
f0107ec0:	c3                   	ret    

f0107ec1 <createSharedObject>:

//=========================
// [1] Create Share Object:
//=========================
int createSharedObject(int32 ownerID, char* shareName, uint32 size, uint8 isWritable, void* virtual_address)
{
f0107ec1:	55                   	push   %ebp
f0107ec2:	89 e5                	mov    %esp,%ebp
f0107ec4:	83 ec 18             	sub    $0x18,%esp
f0107ec7:	8b 45 14             	mov    0x14(%ebp),%eax
f0107eca:	88 45 f4             	mov    %al,-0xc(%ebp)
	panic("createSharedObject() is not implemented yet...!!");
f0107ecd:	83 ec 04             	sub    $0x4,%esp
f0107ed0:	68 80 27 13 f0       	push   $0xf0132780
f0107ed5:	68 f6 00 00 00       	push   $0xf6
f0107eda:	68 5c 27 13 f0       	push   $0xf013275c
f0107edf:	e8 cc 82 ff ff       	call   f01001b0 <_panic>

f0107ee4 <getSizeOfSharedObject>:

//==============================
// [2] Get Size of Share Object:
//==============================
int getSizeOfSharedObject(int32 ownerID, char* shareName)
{
f0107ee4:	55                   	push   %ebp
f0107ee5:	89 e5                	mov    %esp,%ebp
f0107ee7:	83 ec 08             	sub    $0x8,%esp
	panic("getSizeOfSharedObject() is not implemented yet...!!");
f0107eea:	83 ec 04             	sub    $0x4,%esp
f0107eed:	68 b4 27 13 f0       	push   $0xf01327b4
f0107ef2:	68 02 01 00 00       	push   $0x102
f0107ef7:	68 5c 27 13 f0       	push   $0xf013275c
f0107efc:	e8 af 82 ff ff       	call   f01001b0 <_panic>

f0107f01 <getSharedObject>:

//======================
// [3] Get Share Object:
//======================
int getSharedObject(int32 ownerID, char* shareName, void* virtual_address)
{
f0107f01:	55                   	push   %ebp
f0107f02:	89 e5                	mov    %esp,%ebp
f0107f04:	83 ec 08             	sub    $0x8,%esp
	panic("getSharedObject() is not implemented yet...!!");
f0107f07:	83 ec 04             	sub    $0x4,%esp
f0107f0a:	68 e8 27 13 f0       	push   $0xf01327e8
f0107f0f:	68 0c 01 00 00       	push   $0x10c
f0107f14:	68 5c 27 13 f0       	push   $0xf013275c
f0107f19:	e8 92 82 ff ff       	call   f01001b0 <_panic>

f0107f1e <freeSharedObject>:

//===================
// Free Share Object:
//===================
int freeSharedObject(int32 sharedObjectID, void *startVA)
{
f0107f1e:	55                   	push   %ebp
f0107f1f:	89 e5                	mov    %esp,%ebp
f0107f21:	83 ec 08             	sub    $0x8,%esp
	panic("freeSharedObject() is not implemented yet...!!");
f0107f24:	83 ec 04             	sub    $0x4,%esp
f0107f27:	68 18 28 13 f0       	push   $0xf0132818
f0107f2c:	68 1b 01 00 00       	push   $0x11b
f0107f31:	68 5c 27 13 f0       	push   $0xf013275c
f0107f36:	e8 75 82 ff ff       	call   f01001b0 <_panic>

f0107f3b <initialize_kheap_dynamic_allocator>:
#include <inc/dynamic_allocator.h>
#include "memory_manager.h"


int initialize_kheap_dynamic_allocator(uint32 daStart, uint32 initSizeToAllocate, uint32 daLimit)
{
f0107f3b:	55                   	push   %ebp
f0107f3c:	89 e5                	mov    %esp,%ebp
f0107f3e:	83 ec 08             	sub    $0x8,%esp
	//Return:
	//	On success: 0
	//	Otherwise (if no memory OR initial size exceed the given limit): E_NO_MEM

	//Comment the following line(s) before start coding...
	panic("not implemented yet");
f0107f41:	83 ec 04             	sub    $0x4,%esp
f0107f44:	68 48 28 13 f0       	push   $0xf0132848
f0107f49:	6a 13                	push   $0x13
f0107f4b:	68 5c 28 13 f0       	push   $0xf013285c
f0107f50:	e8 5b 82 ff ff       	call   f01001b0 <_panic>

f0107f55 <sbrk>:
	return 0;
}

void* sbrk(int increment)
{
f0107f55:	55                   	push   %ebp
f0107f56:	89 e5                	mov    %esp,%ebp
	 * 	3) Allocating additional pages for a kernel dynamic allocator will fail if the free frames are exhausted
	 * 		or the break exceed the limit of the dynamic allocator. If sbrk fails, kernel should panic(...)
	 */

	//MS2: COMMENT THIS LINE BEFORE START CODING====
	return (void*)-1 ;
f0107f58:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
	panic("not implemented yet");
}
f0107f5d:	5d                   	pop    %ebp
f0107f5e:	c3                   	ret    

f0107f5f <kmalloc>:


void* kmalloc(unsigned int size)
{
f0107f5f:	55                   	push   %ebp
f0107f60:	89 e5                	mov    %esp,%ebp
f0107f62:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'23.MS2 - #03] [1] KERNEL HEAP - kmalloc()
	//refer to the project presentation and documentation for details
	// use "isKHeapPlacementStrategyFIRSTFIT() ..." functions to check the current strategy

	//change this "return" according to your answer
	kpanic_into_prompt("kmalloc() is not implemented yet...!!");
f0107f65:	83 ec 04             	sub    $0x4,%esp
f0107f68:	68 70 28 13 f0       	push   $0xf0132870
f0107f6d:	6a 36                	push   $0x36
f0107f6f:	68 5c 28 13 f0       	push   $0xf013285c
f0107f74:	e8 94 83 ff ff       	call   f010030d <_panic_into_prompt>

f0107f79 <kfree>:
	return NULL;
}

void kfree(void* virtual_address)
{
f0107f79:	55                   	push   %ebp
f0107f7a:	89 e5                	mov    %esp,%ebp
f0107f7c:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'23.MS2 - #04] [1] KERNEL HEAP - kfree()
	//refer to the project presentation and documentation for details
	// Write your code here, remove the panic and write your code
	panic("kfree() is not implemented yet...!!");
f0107f7f:	83 ec 04             	sub    $0x4,%esp
f0107f82:	68 98 28 13 f0       	push   $0xf0132898
f0107f87:	6a 3f                	push   $0x3f
f0107f89:	68 5c 28 13 f0       	push   $0xf013285c
f0107f8e:	e8 1d 82 ff ff       	call   f01001b0 <_panic>

f0107f93 <kheap_virtual_address>:
}

unsigned int kheap_virtual_address(unsigned int physical_address)
{
f0107f93:	55                   	push   %ebp
f0107f94:	89 e5                	mov    %esp,%ebp
f0107f96:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'23.MS2 - #05] [1] KERNEL HEAP - kheap_virtual_address()
	//refer to the project presentation and documentation for details
	// Write your code here, remove the panic and write your code
	panic("kheap_virtual_address() is not implemented yet...!!");
f0107f99:	83 ec 04             	sub    $0x4,%esp
f0107f9c:	68 bc 28 13 f0       	push   $0xf01328bc
f0107fa1:	6a 47                	push   $0x47
f0107fa3:	68 5c 28 13 f0       	push   $0xf013285c
f0107fa8:	e8 03 82 ff ff       	call   f01001b0 <_panic>

f0107fad <kheap_physical_address>:
	//change this "return" according to your answer
	return 0;
}

unsigned int kheap_physical_address(unsigned int virtual_address)
{
f0107fad:	55                   	push   %ebp
f0107fae:	89 e5                	mov    %esp,%ebp
f0107fb0:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'23.MS2 - #06] [1] KERNEL HEAP - kheap_physical_address()
	//refer to the project presentation and documentation for details
	// Write your code here, remove the panic and write your code
	panic("kheap_physical_address() is not implemented yet...!!");
f0107fb3:	83 ec 04             	sub    $0x4,%esp
f0107fb6:	68 f0 28 13 f0       	push   $0xf01328f0
f0107fbb:	6a 54                	push   $0x54
f0107fbd:	68 5c 28 13 f0       	push   $0xf013285c
f0107fc2:	e8 e9 81 ff ff       	call   f01001b0 <_panic>

f0107fc7 <kfreeall>:
	return 0;
}


void kfreeall()
{
f0107fc7:	55                   	push   %ebp
f0107fc8:	89 e5                	mov    %esp,%ebp
f0107fca:	83 ec 08             	sub    $0x8,%esp
	panic("Not implemented!");
f0107fcd:	83 ec 04             	sub    $0x4,%esp
f0107fd0:	68 25 29 13 f0       	push   $0xf0132925
f0107fd5:	6a 5d                	push   $0x5d
f0107fd7:	68 5c 28 13 f0       	push   $0xf013285c
f0107fdc:	e8 cf 81 ff ff       	call   f01001b0 <_panic>

f0107fe1 <kshrink>:

}

void kshrink(uint32 newSize)
{
f0107fe1:	55                   	push   %ebp
f0107fe2:	89 e5                	mov    %esp,%ebp
f0107fe4:	83 ec 08             	sub    $0x8,%esp
	panic("Not implemented!");
f0107fe7:	83 ec 04             	sub    $0x4,%esp
f0107fea:	68 25 29 13 f0       	push   $0xf0132925
f0107fef:	6a 63                	push   $0x63
f0107ff1:	68 5c 28 13 f0       	push   $0xf013285c
f0107ff6:	e8 b5 81 ff ff       	call   f01001b0 <_panic>

f0107ffb <kexpand>:
}

void kexpand(uint32 newSize)
{
f0107ffb:	55                   	push   %ebp
f0107ffc:	89 e5                	mov    %esp,%ebp
f0107ffe:	83 ec 08             	sub    $0x8,%esp
	panic("Not implemented!");
f0108001:	83 ec 04             	sub    $0x4,%esp
f0108004:	68 25 29 13 f0       	push   $0xf0132925
f0108009:	6a 68                	push   $0x68
f010800b:	68 5c 28 13 f0       	push   $0xf013285c
f0108010:	e8 9b 81 ff ff       	call   f01001b0 <_panic>

f0108015 <krealloc>:

//	A call with virtual_address = null is equivalent to kmalloc().
//	A call with new_size = zero is equivalent to kfree().

void *krealloc(void *virtual_address, uint32 new_size)
{
f0108015:	55                   	push   %ebp
f0108016:	89 e5                	mov    %esp,%ebp
	//TODO: [PROJECT'23.MS2 - BONUS] [1] KERNEL HEAP - krealloc()
	// Write your code here, remove the panic and write your code
	return NULL;
f0108018:	b8 00 00 00 00       	mov    $0x0,%eax
	panic("krealloc() is not implemented yet...!!");
}
f010801d:	5d                   	pop    %ebp
f010801e:	c3                   	ret    

f010801f <pt_set_page_permissions>:
 */
#include "memory_manager.h"

/*[2.1] PAGE TABLE ENTRIES MANIPULATION */
inline void pt_set_page_permissions(uint32* page_directory, uint32 virtual_address, uint32 permissions_to_set, uint32 permissions_to_clear)
{
f010801f:	55                   	push   %ebp
f0108020:	89 e5                	mov    %esp,%ebp
f0108022:	83 ec 18             	sub    $0x18,%esp
	//[1] Get the table
	uint32* ptr_page_table ;
	int ret = get_page_table(page_directory, virtual_address, &ptr_page_table);
f0108025:	83 ec 04             	sub    $0x4,%esp
f0108028:	8d 45 f0             	lea    -0x10(%ebp),%eax
f010802b:	50                   	push   %eax
f010802c:	ff 75 0c             	pushl  0xc(%ebp)
f010802f:	ff 75 08             	pushl  0x8(%ebp)
f0108032:	e8 b0 f4 ff ff       	call   f01074e7 <get_page_table>
f0108037:	83 c4 10             	add    $0x10,%esp
f010803a:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//[2] If exists, update permissions
	if (ptr_page_table != NULL)
f010803d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108040:	85 c0                	test   %eax,%eax
f0108042:	74 64                	je     f01080a8 <pt_set_page_permissions+0x89>
	{
		ptr_page_table[PTX(virtual_address)] |= (permissions_to_set);
f0108044:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108047:	8b 55 0c             	mov    0xc(%ebp),%edx
f010804a:	c1 ea 0c             	shr    $0xc,%edx
f010804d:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0108053:	c1 e2 02             	shl    $0x2,%edx
f0108056:	01 c2                	add    %eax,%edx
f0108058:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010805b:	8b 4d 0c             	mov    0xc(%ebp),%ecx
f010805e:	c1 e9 0c             	shr    $0xc,%ecx
f0108061:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
f0108067:	c1 e1 02             	shl    $0x2,%ecx
f010806a:	01 c8                	add    %ecx,%eax
f010806c:	8b 00                	mov    (%eax),%eax
f010806e:	0b 45 10             	or     0x10(%ebp),%eax
f0108071:	89 02                	mov    %eax,(%edx)
		ptr_page_table[PTX(virtual_address)] &= (~permissions_to_clear);
f0108073:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108076:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108079:	c1 ea 0c             	shr    $0xc,%edx
f010807c:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0108082:	c1 e2 02             	shl    $0x2,%edx
f0108085:	01 d0                	add    %edx,%eax
f0108087:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010808a:	8b 4d 0c             	mov    0xc(%ebp),%ecx
f010808d:	c1 e9 0c             	shr    $0xc,%ecx
f0108090:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
f0108096:	c1 e1 02             	shl    $0x2,%ecx
f0108099:	01 ca                	add    %ecx,%edx
f010809b:	8b 12                	mov    (%edx),%edx
f010809d:	8b 4d 14             	mov    0x14(%ebp),%ecx
f01080a0:	f7 d1                	not    %ecx
f01080a2:	21 ca                	and    %ecx,%edx
f01080a4:	89 10                	mov    %edx,(%eax)
f01080a6:	eb 27                	jmp    f01080cf <pt_set_page_permissions+0xb0>

	}
	//[3] Else, should "panic" since the table should be exist
	else
	{
		cprintf("va=%x not exist and has no page table\n", virtual_address);
f01080a8:	83 ec 08             	sub    $0x8,%esp
f01080ab:	ff 75 0c             	pushl  0xc(%ebp)
f01080ae:	68 38 29 13 f0       	push   $0xf0132938
f01080b3:	e8 79 8d ff ff       	call   f0100e31 <cprintf>
f01080b8:	83 c4 10             	add    $0x10,%esp
		//cprintf("[%s] va = %x\n", ptr_env->prog_name, virtual_address) ;
		panic("function pt_set_page_permissions() called with invalid virtual address. The corresponding page table doesn't exist\n") ;
f01080bb:	83 ec 04             	sub    $0x4,%esp
f01080be:	68 60 29 13 f0       	push   $0xf0132960
f01080c3:	6a 1c                	push   $0x1c
f01080c5:	68 d4 29 13 f0       	push   $0xf01329d4
f01080ca:	e8 e1 80 ff ff       	call   f01001b0 <_panic>
	}

	//[4] Invalidate the cache memory (TLB) [call tlb_invalidate(..)]
	tlb_invalidate((void *)NULL, (void *)virtual_address);
f01080cf:	8b 45 0c             	mov    0xc(%ebp),%eax
f01080d2:	83 ec 08             	sub    $0x8,%esp
f01080d5:	50                   	push   %eax
f01080d6:	6a 00                	push   $0x0
f01080d8:	e8 e1 ed ff ff       	call   f0106ebe <tlb_invalidate>
f01080dd:	83 c4 10             	add    $0x10,%esp
}
f01080e0:	90                   	nop
f01080e1:	c9                   	leave  
f01080e2:	c3                   	ret    

f01080e3 <pt_get_page_permissions>:

inline int pt_get_page_permissions(uint32* page_directory, uint32 virtual_address )
{
f01080e3:	55                   	push   %ebp
f01080e4:	89 e5                	mov    %esp,%ebp
f01080e6:	83 ec 18             	sub    $0x18,%esp
	//[1] Get the table
	uint32* ptr_page_table ;
	int ret = get_page_table(page_directory, virtual_address, &ptr_page_table);
f01080e9:	83 ec 04             	sub    $0x4,%esp
f01080ec:	8d 45 f0             	lea    -0x10(%ebp),%eax
f01080ef:	50                   	push   %eax
f01080f0:	ff 75 0c             	pushl  0xc(%ebp)
f01080f3:	ff 75 08             	pushl  0x8(%ebp)
f01080f6:	e8 ec f3 ff ff       	call   f01074e7 <get_page_table>
f01080fb:	83 c4 10             	add    $0x10,%esp
f01080fe:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//[2] If exists, return the permissions
	if (ptr_page_table != NULL)
f0108101:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108104:	85 c0                	test   %eax,%eax
f0108106:	74 1d                	je     f0108125 <pt_get_page_permissions+0x42>
	{
		//cprintf("va=%x perm = %x\n", virtual_address, ptr_page_table[PTX(virtual_address)] & 0x00000FFF);
		return (ptr_page_table[PTX(virtual_address)] & 0x00000FFF);
f0108108:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010810b:	8b 55 0c             	mov    0xc(%ebp),%edx
f010810e:	c1 ea 0c             	shr    $0xc,%edx
f0108111:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0108117:	c1 e2 02             	shl    $0x2,%edx
f010811a:	01 d0                	add    %edx,%eax
f010811c:	8b 00                	mov    (%eax),%eax
f010811e:	25 ff 0f 00 00       	and    $0xfff,%eax
f0108123:	eb 05                	jmp    f010812a <pt_get_page_permissions+0x47>
	}
	//[3] Else, return -1
	else
	{
		//cprintf("va=%x not exist and has no page table\n", virtual_address);
		return -1;
f0108125:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
	}
}
f010812a:	c9                   	leave  
f010812b:	c3                   	ret    

f010812c <pt_clear_page_table_entry>:

inline void pt_clear_page_table_entry(uint32* page_directory, uint32 virtual_address)
{
f010812c:	55                   	push   %ebp
f010812d:	89 e5                	mov    %esp,%ebp
f010812f:	83 ec 18             	sub    $0x18,%esp
	//[1] Get the table
	uint32* ptr_page_table ;
	int ret = get_page_table(page_directory, virtual_address, &ptr_page_table);
f0108132:	83 ec 04             	sub    $0x4,%esp
f0108135:	8d 45 f0             	lea    -0x10(%ebp),%eax
f0108138:	50                   	push   %eax
f0108139:	ff 75 0c             	pushl  0xc(%ebp)
f010813c:	ff 75 08             	pushl  0x8(%ebp)
f010813f:	e8 a3 f3 ff ff       	call   f01074e7 <get_page_table>
f0108144:	83 c4 10             	add    $0x10,%esp
f0108147:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//[2] If exists, update permissions
	if (ptr_page_table != NULL)
f010814a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010814d:	85 c0                	test   %eax,%eax
f010814f:	74 46                	je     f0108197 <pt_clear_page_table_entry+0x6b>
	{
		cprintf("va=%x before clearing has perm = %x\n", virtual_address, ptr_page_table[PTX(virtual_address)]);
f0108151:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108154:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108157:	c1 ea 0c             	shr    $0xc,%edx
f010815a:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0108160:	c1 e2 02             	shl    $0x2,%edx
f0108163:	01 d0                	add    %edx,%eax
f0108165:	8b 00                	mov    (%eax),%eax
f0108167:	83 ec 04             	sub    $0x4,%esp
f010816a:	50                   	push   %eax
f010816b:	ff 75 0c             	pushl  0xc(%ebp)
f010816e:	68 f0 29 13 f0       	push   $0xf01329f0
f0108173:	e8 b9 8c ff ff       	call   f0100e31 <cprintf>
f0108178:	83 c4 10             	add    $0x10,%esp
		ptr_page_table[PTX(virtual_address)] = 0;
f010817b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010817e:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108181:	c1 ea 0c             	shr    $0xc,%edx
f0108184:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010818a:	c1 e2 02             	shl    $0x2,%edx
f010818d:	01 d0                	add    %edx,%eax
f010818f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0108195:	eb 14                	jmp    f01081ab <pt_clear_page_table_entry+0x7f>
	}
	//[3] Else, should "panic" since the table should be exist
	else
	{
		//cprintf("[%s] va = %x\n", ptr_env->prog_name, virtual_address) ;
		panic("function pt_clear_page_table_entry() called with invalid virtual address. The corresponding page table doesn't exist\n") ;
f0108197:	83 ec 04             	sub    $0x4,%esp
f010819a:	68 18 2a 13 f0       	push   $0xf0132a18
f010819f:	6a 47                	push   $0x47
f01081a1:	68 d4 29 13 f0       	push   $0xf01329d4
f01081a6:	e8 05 80 ff ff       	call   f01001b0 <_panic>
	}

	//[4] Invalidate the cache memory (TLB) [call tlb_invalidate(..)]
	tlb_invalidate((void *)NULL, (void *)virtual_address);
f01081ab:	8b 45 0c             	mov    0xc(%ebp),%eax
f01081ae:	83 ec 08             	sub    $0x8,%esp
f01081b1:	50                   	push   %eax
f01081b2:	6a 00                	push   $0x0
f01081b4:	e8 05 ed ff ff       	call   f0106ebe <tlb_invalidate>
f01081b9:	83 c4 10             	add    $0x10,%esp
}
f01081bc:	90                   	nop
f01081bd:	c9                   	leave  
f01081be:	c3                   	ret    

f01081bf <pd_is_table_used>:

///============================================================================================
/// Dealing with page directory entry flags

inline uint32 pd_is_table_used(uint32* page_directory, uint32 virtual_address)
{
f01081bf:	55                   	push   %ebp
f01081c0:	89 e5                	mov    %esp,%ebp
	return ( (page_directory[PDX(virtual_address)] & PERM_USED) == PERM_USED ? 1 : 0);
f01081c2:	8b 45 0c             	mov    0xc(%ebp),%eax
f01081c5:	c1 e8 16             	shr    $0x16,%eax
f01081c8:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01081cf:	8b 45 08             	mov    0x8(%ebp),%eax
f01081d2:	01 d0                	add    %edx,%eax
f01081d4:	8b 00                	mov    (%eax),%eax
f01081d6:	83 e0 20             	and    $0x20,%eax
f01081d9:	85 c0                	test   %eax,%eax
f01081db:	0f 95 c0             	setne  %al
f01081de:	0f b6 c0             	movzbl %al,%eax
}
f01081e1:	5d                   	pop    %ebp
f01081e2:	c3                   	ret    

f01081e3 <pd_set_table_unused>:

inline void pd_set_table_unused(uint32* page_directory, uint32 virtual_address)
{
f01081e3:	55                   	push   %ebp
f01081e4:	89 e5                	mov    %esp,%ebp
f01081e6:	83 ec 08             	sub    $0x8,%esp
	page_directory[PDX(virtual_address)] &= (~PERM_USED);
f01081e9:	8b 45 0c             	mov    0xc(%ebp),%eax
f01081ec:	c1 e8 16             	shr    $0x16,%eax
f01081ef:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01081f6:	8b 45 08             	mov    0x8(%ebp),%eax
f01081f9:	01 d0                	add    %edx,%eax
f01081fb:	8b 55 0c             	mov    0xc(%ebp),%edx
f01081fe:	c1 ea 16             	shr    $0x16,%edx
f0108201:	8d 0c 95 00 00 00 00 	lea    0x0(,%edx,4),%ecx
f0108208:	8b 55 08             	mov    0x8(%ebp),%edx
f010820b:	01 ca                	add    %ecx,%edx
f010820d:	8b 12                	mov    (%edx),%edx
f010820f:	83 e2 df             	and    $0xffffffdf,%edx
f0108212:	89 10                	mov    %edx,(%eax)
	tlb_invalidate((void *)NULL, (void *)virtual_address);
f0108214:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108217:	83 ec 08             	sub    $0x8,%esp
f010821a:	50                   	push   %eax
f010821b:	6a 00                	push   $0x0
f010821d:	e8 9c ec ff ff       	call   f0106ebe <tlb_invalidate>
f0108222:	83 c4 10             	add    $0x10,%esp
}
f0108225:	90                   	nop
f0108226:	c9                   	leave  
f0108227:	c3                   	ret    

f0108228 <pd_clear_page_dir_entry>:

inline void pd_clear_page_dir_entry(uint32* page_directory, uint32 virtual_address)
{
f0108228:	55                   	push   %ebp
f0108229:	89 e5                	mov    %esp,%ebp
f010822b:	83 ec 10             	sub    $0x10,%esp
	page_directory[PDX(virtual_address)] = 0 ;
f010822e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108231:	c1 e8 16             	shr    $0x16,%eax
f0108234:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010823b:	8b 45 08             	mov    0x8(%ebp),%eax
f010823e:	01 d0                	add    %edx,%eax
f0108240:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f0108246:	0f 20 d8             	mov    %cr3,%eax
f0108249:	89 45 fc             	mov    %eax,-0x4(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f010824c:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010824f:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
}
f0108252:	90                   	nop
f0108253:	c9                   	leave  
f0108254:	c3                   	ret    

f0108255 <env_page_ws_get_size>:
		}
	}
}
#else
inline uint32 env_page_ws_get_size(struct Env *e)
{
f0108255:	55                   	push   %ebp
f0108256:	89 e5                	mov    %esp,%ebp
f0108258:	83 ec 10             	sub    $0x10,%esp
	int i=0, counter=0;
f010825b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0108262:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for(;i<e->page_WS_max_size; i++) if(e->ptr_pageWorkingSet[i].empty == 0) counter++;
f0108269:	eb 22                	jmp    f010828d <env_page_ws_get_size+0x38>
f010826b:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010826e:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0108271:	89 d0                	mov    %edx,%eax
f0108273:	01 c0                	add    %eax,%eax
f0108275:	01 d0                	add    %edx,%eax
f0108277:	c1 e0 03             	shl    $0x3,%eax
f010827a:	01 c8                	add    %ecx,%eax
f010827c:	05 bc 00 00 00       	add    $0xbc,%eax
f0108281:	8a 00                	mov    (%eax),%al
f0108283:	84 c0                	test   %al,%al
f0108285:	75 03                	jne    f010828a <env_page_ws_get_size+0x35>
f0108287:	ff 45 f8             	incl   -0x8(%ebp)
f010828a:	ff 45 fc             	incl   -0x4(%ebp)
f010828d:	8b 45 08             	mov    0x8(%ebp),%eax
f0108290:	8b 90 7c d5 01 00    	mov    0x1d57c(%eax),%edx
f0108296:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0108299:	39 c2                	cmp    %eax,%edx
f010829b:	77 ce                	ja     f010826b <env_page_ws_get_size+0x16>
	return counter;
f010829d:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f01082a0:	c9                   	leave  
f01082a1:	c3                   	ret    

f01082a2 <env_page_ws_invalidate>:

inline void env_page_ws_invalidate(struct Env* e, uint32 virtual_address)
{
f01082a2:	55                   	push   %ebp
f01082a3:	89 e5                	mov    %esp,%ebp
f01082a5:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f01082a8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;i<e->page_WS_max_size; i++)
f01082af:	eb 4e                	jmp    f01082ff <env_page_ws_invalidate+0x5d>
	{
		if(ROUNDDOWN(e->ptr_pageWorkingSet[i].virtual_address,PAGE_SIZE) == ROUNDDOWN(virtual_address,PAGE_SIZE))
f01082b1:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01082b4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01082b7:	89 d0                	mov    %edx,%eax
f01082b9:	01 c0                	add    %eax,%eax
f01082bb:	01 d0                	add    %edx,%eax
f01082bd:	c1 e0 03             	shl    $0x3,%eax
f01082c0:	01 c8                	add    %ecx,%eax
f01082c2:	05 b8 00 00 00       	add    $0xb8,%eax
f01082c7:	8b 00                	mov    (%eax),%eax
f01082c9:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01082cc:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01082cf:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01082d4:	89 c2                	mov    %eax,%edx
f01082d6:	8b 45 0c             	mov    0xc(%ebp),%eax
f01082d9:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01082dc:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01082df:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01082e4:	39 c2                	cmp    %eax,%edx
f01082e6:	75 14                	jne    f01082fc <env_page_ws_invalidate+0x5a>
		{
			env_page_ws_clear_entry(e, i);
f01082e8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01082eb:	83 ec 08             	sub    $0x8,%esp
f01082ee:	50                   	push   %eax
f01082ef:	ff 75 08             	pushl  0x8(%ebp)
f01082f2:	e8 c8 00 00 00       	call   f01083bf <env_page_ws_clear_entry>
f01082f7:	83 c4 10             	add    $0x10,%esp
			break;
f01082fa:	eb 13                	jmp    f010830f <env_page_ws_invalidate+0x6d>
}

inline void env_page_ws_invalidate(struct Env* e, uint32 virtual_address)
{
	int i=0;
	for(;i<e->page_WS_max_size; i++)
f01082fc:	ff 45 f4             	incl   -0xc(%ebp)
f01082ff:	8b 45 08             	mov    0x8(%ebp),%eax
f0108302:	8b 90 7c d5 01 00    	mov    0x1d57c(%eax),%edx
f0108308:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010830b:	39 c2                	cmp    %eax,%edx
f010830d:	77 a2                	ja     f01082b1 <env_page_ws_invalidate+0xf>
		{
			env_page_ws_clear_entry(e, i);
			break;
		}
	}
}
f010830f:	90                   	nop
f0108310:	c9                   	leave  
f0108311:	c3                   	ret    

f0108312 <env_page_ws_set_entry>:

inline void env_page_ws_set_entry(struct Env* e, uint32 entry_index, uint32 virtual_address)
{
f0108312:	55                   	push   %ebp
f0108313:	89 e5                	mov    %esp,%ebp
f0108315:	53                   	push   %ebx
f0108316:	83 ec 14             	sub    $0x14,%esp
	assert(entry_index >= 0 && entry_index < e->page_WS_max_size);
f0108319:	8b 45 08             	mov    0x8(%ebp),%eax
f010831c:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0108322:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0108325:	77 16                	ja     f010833d <env_page_ws_set_entry+0x2b>
f0108327:	68 90 2a 13 f0       	push   $0xf0132a90
f010832c:	68 c6 2a 13 f0       	push   $0xf0132ac6
f0108331:	6a 77                	push   $0x77
f0108333:	68 dc 2a 13 f0       	push   $0xf0132adc
f0108338:	e8 73 7e ff ff       	call   f01001b0 <_panic>
	assert(virtual_address >= 0 && virtual_address < USER_TOP);
f010833d:	81 7d 10 ff ff bf ee 	cmpl   $0xeebfffff,0x10(%ebp)
f0108344:	76 16                	jbe    f010835c <env_page_ws_set_entry+0x4a>
f0108346:	68 fc 2a 13 f0       	push   $0xf0132afc
f010834b:	68 c6 2a 13 f0       	push   $0xf0132ac6
f0108350:	6a 78                	push   $0x78
f0108352:	68 dc 2a 13 f0       	push   $0xf0132adc
f0108357:	e8 54 7e ff ff       	call   f01001b0 <_panic>
	e->ptr_pageWorkingSet[entry_index].virtual_address = ROUNDDOWN(virtual_address,PAGE_SIZE);
f010835c:	8b 45 10             	mov    0x10(%ebp),%eax
f010835f:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0108362:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108365:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010836a:	89 c1                	mov    %eax,%ecx
f010836c:	8b 5d 08             	mov    0x8(%ebp),%ebx
f010836f:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108372:	89 d0                	mov    %edx,%eax
f0108374:	01 c0                	add    %eax,%eax
f0108376:	01 d0                	add    %edx,%eax
f0108378:	c1 e0 03             	shl    $0x3,%eax
f010837b:	01 d8                	add    %ebx,%eax
f010837d:	05 b8 00 00 00       	add    $0xb8,%eax
f0108382:	89 08                	mov    %ecx,(%eax)
	e->ptr_pageWorkingSet[entry_index].empty = 0;
f0108384:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108387:	8b 55 0c             	mov    0xc(%ebp),%edx
f010838a:	89 d0                	mov    %edx,%eax
f010838c:	01 c0                	add    %eax,%eax
f010838e:	01 d0                	add    %edx,%eax
f0108390:	c1 e0 03             	shl    $0x3,%eax
f0108393:	01 c8                	add    %ecx,%eax
f0108395:	05 bc 00 00 00       	add    $0xbc,%eax
f010839a:	c6 00 00             	movb   $0x0,(%eax)

	e->ptr_pageWorkingSet[entry_index].time_stamp = 0x80000000;
f010839d:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01083a0:	8b 55 0c             	mov    0xc(%ebp),%edx
f01083a3:	89 d0                	mov    %edx,%eax
f01083a5:	01 c0                	add    %eax,%eax
f01083a7:	01 d0                	add    %edx,%eax
f01083a9:	c1 e0 03             	shl    $0x3,%eax
f01083ac:	01 c8                	add    %ecx,%eax
f01083ae:	05 c0 00 00 00       	add    $0xc0,%eax
f01083b3:	c7 00 00 00 00 80    	movl   $0x80000000,(%eax)
	//e->ptr_pageWorkingSet[entry_index].time_stamp = time;
	return;
f01083b9:	90                   	nop
}
f01083ba:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01083bd:	c9                   	leave  
f01083be:	c3                   	ret    

f01083bf <env_page_ws_clear_entry>:

inline void env_page_ws_clear_entry(struct Env* e, uint32 entry_index)
{
f01083bf:	55                   	push   %ebp
f01083c0:	89 e5                	mov    %esp,%ebp
f01083c2:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f01083c5:	8b 45 08             	mov    0x8(%ebp),%eax
f01083c8:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f01083ce:	3b 45 0c             	cmp    0xc(%ebp),%eax
f01083d1:	77 19                	ja     f01083ec <env_page_ws_clear_entry+0x2d>
f01083d3:	68 30 2b 13 f0       	push   $0xf0132b30
f01083d8:	68 c6 2a 13 f0       	push   $0xf0132ac6
f01083dd:	68 83 00 00 00       	push   $0x83
f01083e2:	68 dc 2a 13 f0       	push   $0xf0132adc
f01083e7:	e8 c4 7d ff ff       	call   f01001b0 <_panic>
	e->ptr_pageWorkingSet[entry_index].virtual_address = 0;
f01083ec:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01083ef:	8b 55 0c             	mov    0xc(%ebp),%edx
f01083f2:	89 d0                	mov    %edx,%eax
f01083f4:	01 c0                	add    %eax,%eax
f01083f6:	01 d0                	add    %edx,%eax
f01083f8:	c1 e0 03             	shl    $0x3,%eax
f01083fb:	01 c8                	add    %ecx,%eax
f01083fd:	05 b8 00 00 00       	add    $0xb8,%eax
f0108402:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	e->ptr_pageWorkingSet[entry_index].empty = 1;
f0108408:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010840b:	8b 55 0c             	mov    0xc(%ebp),%edx
f010840e:	89 d0                	mov    %edx,%eax
f0108410:	01 c0                	add    %eax,%eax
f0108412:	01 d0                	add    %edx,%eax
f0108414:	c1 e0 03             	shl    $0x3,%eax
f0108417:	01 c8                	add    %ecx,%eax
f0108419:	05 bc 00 00 00       	add    $0xbc,%eax
f010841e:	c6 00 01             	movb   $0x1,(%eax)
	e->ptr_pageWorkingSet[entry_index].time_stamp = 0;
f0108421:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108424:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108427:	89 d0                	mov    %edx,%eax
f0108429:	01 c0                	add    %eax,%eax
f010842b:	01 d0                	add    %edx,%eax
f010842d:	c1 e0 03             	shl    $0x3,%eax
f0108430:	01 c8                	add    %ecx,%eax
f0108432:	05 c0 00 00 00       	add    $0xc0,%eax
f0108437:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
f010843d:	90                   	nop
f010843e:	c9                   	leave  
f010843f:	c3                   	ret    

f0108440 <env_page_ws_get_virtual_address>:

inline uint32 env_page_ws_get_virtual_address(struct Env* e, uint32 entry_index)
{
f0108440:	55                   	push   %ebp
f0108441:	89 e5                	mov    %esp,%ebp
f0108443:	83 ec 18             	sub    $0x18,%esp
	assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f0108446:	8b 45 08             	mov    0x8(%ebp),%eax
f0108449:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f010844f:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0108452:	77 19                	ja     f010846d <env_page_ws_get_virtual_address+0x2d>
f0108454:	68 30 2b 13 f0       	push   $0xf0132b30
f0108459:	68 c6 2a 13 f0       	push   $0xf0132ac6
f010845e:	68 8b 00 00 00       	push   $0x8b
f0108463:	68 dc 2a 13 f0       	push   $0xf0132adc
f0108468:	e8 43 7d ff ff       	call   f01001b0 <_panic>
	return ROUNDDOWN(e->ptr_pageWorkingSet[entry_index].virtual_address,PAGE_SIZE);
f010846d:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108470:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108473:	89 d0                	mov    %edx,%eax
f0108475:	01 c0                	add    %eax,%eax
f0108477:	01 d0                	add    %edx,%eax
f0108479:	c1 e0 03             	shl    $0x3,%eax
f010847c:	01 c8                	add    %ecx,%eax
f010847e:	05 b8 00 00 00       	add    $0xb8,%eax
f0108483:	8b 00                	mov    (%eax),%eax
f0108485:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0108488:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010848b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
}
f0108490:	c9                   	leave  
f0108491:	c3                   	ret    

f0108492 <env_page_ws_get_time_stamp>:

inline uint32 env_page_ws_get_time_stamp(struct Env* e, uint32 entry_index)
{
f0108492:	55                   	push   %ebp
f0108493:	89 e5                	mov    %esp,%ebp
f0108495:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f0108498:	8b 45 08             	mov    0x8(%ebp),%eax
f010849b:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f01084a1:	3b 45 0c             	cmp    0xc(%ebp),%eax
f01084a4:	77 19                	ja     f01084bf <env_page_ws_get_time_stamp+0x2d>
f01084a6:	68 30 2b 13 f0       	push   $0xf0132b30
f01084ab:	68 c6 2a 13 f0       	push   $0xf0132ac6
f01084b0:	68 91 00 00 00       	push   $0x91
f01084b5:	68 dc 2a 13 f0       	push   $0xf0132adc
f01084ba:	e8 f1 7c ff ff       	call   f01001b0 <_panic>
	return e->ptr_pageWorkingSet[entry_index].time_stamp;
f01084bf:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01084c2:	8b 55 0c             	mov    0xc(%ebp),%edx
f01084c5:	89 d0                	mov    %edx,%eax
f01084c7:	01 c0                	add    %eax,%eax
f01084c9:	01 d0                	add    %edx,%eax
f01084cb:	c1 e0 03             	shl    $0x3,%eax
f01084ce:	01 c8                	add    %ecx,%eax
f01084d0:	05 c0 00 00 00       	add    $0xc0,%eax
f01084d5:	8b 00                	mov    (%eax),%eax
}
f01084d7:	c9                   	leave  
f01084d8:	c3                   	ret    

f01084d9 <env_page_ws_is_entry_empty>:

inline uint32 env_page_ws_is_entry_empty(struct Env* e, uint32 entry_index)
{
f01084d9:	55                   	push   %ebp
f01084da:	89 e5                	mov    %esp,%ebp
	return e->ptr_pageWorkingSet[entry_index].empty;
f01084dc:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01084df:	8b 55 0c             	mov    0xc(%ebp),%edx
f01084e2:	89 d0                	mov    %edx,%eax
f01084e4:	01 c0                	add    %eax,%eax
f01084e6:	01 d0                	add    %edx,%eax
f01084e8:	c1 e0 03             	shl    $0x3,%eax
f01084eb:	01 c8                	add    %ecx,%eax
f01084ed:	05 bc 00 00 00       	add    $0xbc,%eax
f01084f2:	8a 00                	mov    (%eax),%al
f01084f4:	0f b6 c0             	movzbl %al,%eax
}
f01084f7:	5d                   	pop    %ebp
f01084f8:	c3                   	ret    

f01084f9 <env_page_ws_print>:

void env_page_ws_print(struct Env *e)
{
f01084f9:	55                   	push   %ebp
f01084fa:	89 e5                	mov    %esp,%ebp
f01084fc:	53                   	push   %ebx
f01084fd:	83 ec 24             	sub    $0x24,%esp
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0108500:	83 ec 0c             	sub    $0xc,%esp
f0108503:	6a 02                	push   $0x2
f0108505:	e8 75 52 00 00       	call   f010d77f <isPageReplacmentAlgorithmLRU>
f010850a:	83 c4 10             	add    $0x10,%esp
f010850d:	85 c0                	test   %eax,%eax
f010850f:	0f 84 fe 00 00 00    	je     f0108613 <env_page_ws_print+0x11a>
	{
		int i = 0;
f0108515:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		cprintf("ActiveList:\n============\n") ;
f010851c:	83 ec 0c             	sub    $0xc,%esp
f010851f:	68 68 2b 13 f0       	push   $0xf0132b68
f0108524:	e8 08 89 ff ff       	call   f0100e31 <cprintf>
f0108529:	83 c4 10             	add    $0x10,%esp
		struct WorkingSetElement * ptr_WS_element ;
		LIST_FOREACH(ptr_WS_element, &(e->ActiveList))
f010852c:	8b 45 08             	mov    0x8(%ebp),%eax
f010852f:	8b 80 44 da 01 00    	mov    0x1da44(%eax),%eax
f0108535:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0108538:	eb 2c                	jmp    f0108566 <env_page_ws_print+0x6d>
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
f010853a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010853d:	8b 10                	mov    (%eax),%edx
f010853f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108542:	8d 48 01             	lea    0x1(%eax),%ecx
f0108545:	89 4d f4             	mov    %ecx,-0xc(%ebp)
f0108548:	83 ec 04             	sub    $0x4,%esp
f010854b:	52                   	push   %edx
f010854c:	50                   	push   %eax
f010854d:	68 82 2b 13 f0       	push   $0xf0132b82
f0108552:	e8 da 88 ff ff       	call   f0100e31 <cprintf>
f0108557:	83 c4 10             	add    $0x10,%esp
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
	{
		int i = 0;
		cprintf("ActiveList:\n============\n") ;
		struct WorkingSetElement * ptr_WS_element ;
		LIST_FOREACH(ptr_WS_element, &(e->ActiveList))
f010855a:	8b 45 08             	mov    0x8(%ebp),%eax
f010855d:	8b 80 4c da 01 00    	mov    0x1da4c(%eax),%eax
f0108563:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0108566:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010856a:	74 08                	je     f0108574 <env_page_ws_print+0x7b>
f010856c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010856f:	8b 40 10             	mov    0x10(%eax),%eax
f0108572:	eb 05                	jmp    f0108579 <env_page_ws_print+0x80>
f0108574:	b8 00 00 00 00       	mov    $0x0,%eax
f0108579:	8b 55 08             	mov    0x8(%ebp),%edx
f010857c:	89 82 4c da 01 00    	mov    %eax,0x1da4c(%edx)
f0108582:	8b 45 08             	mov    0x8(%ebp),%eax
f0108585:	8b 80 4c da 01 00    	mov    0x1da4c(%eax),%eax
f010858b:	85 c0                	test   %eax,%eax
f010858d:	75 ab                	jne    f010853a <env_page_ws_print+0x41>
f010858f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0108593:	75 a5                	jne    f010853a <env_page_ws_print+0x41>
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
		}
		cprintf("\nSecondList:\n============\n") ;
f0108595:	83 ec 0c             	sub    $0xc,%esp
f0108598:	68 8a 2b 13 f0       	push   $0xf0132b8a
f010859d:	e8 8f 88 ff ff       	call   f0100e31 <cprintf>
f01085a2:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_WS_element, &(e->SecondList))
f01085a5:	8b 45 08             	mov    0x8(%ebp),%eax
f01085a8:	8b 80 54 da 01 00    	mov    0x1da54(%eax),%eax
f01085ae:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01085b1:	eb 2c                	jmp    f01085df <env_page_ws_print+0xe6>
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
f01085b3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01085b6:	8b 10                	mov    (%eax),%edx
f01085b8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01085bb:	8d 48 01             	lea    0x1(%eax),%ecx
f01085be:	89 4d f4             	mov    %ecx,-0xc(%ebp)
f01085c1:	83 ec 04             	sub    $0x4,%esp
f01085c4:	52                   	push   %edx
f01085c5:	50                   	push   %eax
f01085c6:	68 82 2b 13 f0       	push   $0xf0132b82
f01085cb:	e8 61 88 ff ff       	call   f0100e31 <cprintf>
f01085d0:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_WS_element, &(e->ActiveList))
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
		}
		cprintf("\nSecondList:\n============\n") ;
		LIST_FOREACH(ptr_WS_element, &(e->SecondList))
f01085d3:	8b 45 08             	mov    0x8(%ebp),%eax
f01085d6:	8b 80 5c da 01 00    	mov    0x1da5c(%eax),%eax
f01085dc:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01085df:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01085e3:	74 08                	je     f01085ed <env_page_ws_print+0xf4>
f01085e5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01085e8:	8b 40 10             	mov    0x10(%eax),%eax
f01085eb:	eb 05                	jmp    f01085f2 <env_page_ws_print+0xf9>
f01085ed:	b8 00 00 00 00       	mov    $0x0,%eax
f01085f2:	8b 55 08             	mov    0x8(%ebp),%edx
f01085f5:	89 82 5c da 01 00    	mov    %eax,0x1da5c(%edx)
f01085fb:	8b 45 08             	mov    0x8(%ebp),%eax
f01085fe:	8b 80 5c da 01 00    	mov    0x1da5c(%eax),%eax
f0108604:	85 c0                	test   %eax,%eax
f0108606:	75 ab                	jne    f01085b3 <env_page_ws_print+0xba>
f0108608:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010860c:	75 a5                	jne    f01085b3 <env_page_ws_print+0xba>
				cprintf(" <--");
			}
			cprintf("\n");
		}
	}
}
f010860e:	e9 a2 01 00 00       	jmp    f01087b5 <env_page_ws_print+0x2bc>
		}
	}
	else
	{
		uint32 i;
		cprintf("PAGE WS:\n");
f0108613:	83 ec 0c             	sub    $0xc,%esp
f0108616:	68 a5 2b 13 f0       	push   $0xf0132ba5
f010861b:	e8 11 88 ff ff       	call   f0100e31 <cprintf>
f0108620:	83 c4 10             	add    $0x10,%esp
		for(i=0; i< (e->page_WS_max_size); i++ )
f0108623:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f010862a:	e9 74 01 00 00       	jmp    f01087a3 <env_page_ws_print+0x2aa>
		{
			if (e->ptr_pageWorkingSet[i].empty)
f010862f:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108632:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0108635:	89 d0                	mov    %edx,%eax
f0108637:	01 c0                	add    %eax,%eax
f0108639:	01 d0                	add    %edx,%eax
f010863b:	c1 e0 03             	shl    $0x3,%eax
f010863e:	01 c8                	add    %ecx,%eax
f0108640:	05 bc 00 00 00       	add    $0xbc,%eax
f0108645:	8a 00                	mov    (%eax),%al
f0108647:	84 c0                	test   %al,%al
f0108649:	74 43                	je     f010868e <env_page_ws_print+0x195>
			{
				cprintf("EMPTY LOCATION");
f010864b:	83 ec 0c             	sub    $0xc,%esp
f010864e:	68 af 2b 13 f0       	push   $0xf0132baf
f0108653:	e8 d9 87 ff ff       	call   f0100e31 <cprintf>
f0108658:	83 c4 10             	add    $0x10,%esp
				if(i==e->page_last_WS_index )
f010865b:	8b 45 08             	mov    0x8(%ebp),%eax
f010865e:	8b 80 78 d5 01 00    	mov    0x1d578(%eax),%eax
f0108664:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0108667:	75 10                	jne    f0108679 <env_page_ws_print+0x180>
				{
					cprintf("		<--");
f0108669:	83 ec 0c             	sub    $0xc,%esp
f010866c:	68 be 2b 13 f0       	push   $0xf0132bbe
f0108671:	e8 bb 87 ff ff       	call   f0100e31 <cprintf>
f0108676:	83 c4 10             	add    $0x10,%esp
				}
				cprintf("\n");
f0108679:	83 ec 0c             	sub    $0xc,%esp
f010867c:	68 c4 2b 13 f0       	push   $0xf0132bc4
f0108681:	e8 ab 87 ff ff       	call   f0100e31 <cprintf>
f0108686:	83 c4 10             	add    $0x10,%esp
				continue;
f0108689:	e9 12 01 00 00       	jmp    f01087a0 <env_page_ws_print+0x2a7>
			}
			uint32 virtual_address = e->ptr_pageWorkingSet[i].virtual_address;
f010868e:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108691:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0108694:	89 d0                	mov    %edx,%eax
f0108696:	01 c0                	add    %eax,%eax
f0108698:	01 d0                	add    %edx,%eax
f010869a:	c1 e0 03             	shl    $0x3,%eax
f010869d:	01 c8                	add    %ecx,%eax
f010869f:	05 b8 00 00 00       	add    $0xb8,%eax
f01086a4:	8b 00                	mov    (%eax),%eax
f01086a6:	89 45 e8             	mov    %eax,-0x18(%ebp)
			uint32 time_stamp = e->ptr_pageWorkingSet[i].time_stamp;
f01086a9:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01086ac:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01086af:	89 d0                	mov    %edx,%eax
f01086b1:	01 c0                	add    %eax,%eax
f01086b3:	01 d0                	add    %edx,%eax
f01086b5:	c1 e0 03             	shl    $0x3,%eax
f01086b8:	01 c8                	add    %ecx,%eax
f01086ba:	05 c0 00 00 00       	add    $0xc0,%eax
f01086bf:	8b 00                	mov    (%eax),%eax
f01086c1:	89 45 e4             	mov    %eax,-0x1c(%ebp)

			uint32 perm = pt_get_page_permissions(e->env_page_directory, virtual_address) ;
f01086c4:	8b 45 08             	mov    0x8(%ebp),%eax
f01086c7:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f01086cd:	83 ec 08             	sub    $0x8,%esp
f01086d0:	ff 75 e8             	pushl  -0x18(%ebp)
f01086d3:	50                   	push   %eax
f01086d4:	e8 0a fa ff ff       	call   f01080e3 <pt_get_page_permissions>
f01086d9:	83 c4 10             	add    $0x10,%esp
f01086dc:	89 45 e0             	mov    %eax,-0x20(%ebp)
			char isModified = ((perm&PERM_MODIFIED) ? 1 : 0);
f01086df:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01086e2:	83 e0 40             	and    $0x40,%eax
f01086e5:	85 c0                	test   %eax,%eax
f01086e7:	0f 95 c0             	setne  %al
f01086ea:	88 45 df             	mov    %al,-0x21(%ebp)
			char isUsed= ((perm&PERM_USED) ? 1 : 0);
f01086ed:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01086f0:	83 e0 20             	and    $0x20,%eax
f01086f3:	85 c0                	test   %eax,%eax
f01086f5:	0f 95 c0             	setne  %al
f01086f8:	88 45 de             	mov    %al,-0x22(%ebp)
			char isBuffered= ((perm&PERM_BUFFERED) ? 1 : 0);
f01086fb:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01086fe:	25 00 02 00 00       	and    $0x200,%eax
f0108703:	85 c0                	test   %eax,%eax
f0108705:	0f 95 c0             	setne  %al
f0108708:	88 45 dd             	mov    %al,-0x23(%ebp)


			cprintf("address @ %d = %x",i, e->ptr_pageWorkingSet[i].virtual_address);
f010870b:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010870e:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0108711:	89 d0                	mov    %edx,%eax
f0108713:	01 c0                	add    %eax,%eax
f0108715:	01 d0                	add    %edx,%eax
f0108717:	c1 e0 03             	shl    $0x3,%eax
f010871a:	01 c8                	add    %ecx,%eax
f010871c:	05 b8 00 00 00       	add    $0xb8,%eax
f0108721:	8b 00                	mov    (%eax),%eax
f0108723:	83 ec 04             	sub    $0x4,%esp
f0108726:	50                   	push   %eax
f0108727:	ff 75 ec             	pushl  -0x14(%ebp)
f010872a:	68 c6 2b 13 f0       	push   $0xf0132bc6
f010872f:	e8 fd 86 ff ff       	call   f0100e31 <cprintf>
f0108734:	83 c4 10             	add    $0x10,%esp

			//2021
			cprintf(", used= %d, modified= %d, buffered= %d, time stamp= %x, sweeps_cnt= %d", isUsed, isModified, isBuffered, time_stamp, e->ptr_pageWorkingSet[i].sweeps_counter) ;
f0108737:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010873a:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010873d:	89 d0                	mov    %edx,%eax
f010873f:	01 c0                	add    %eax,%eax
f0108741:	01 d0                	add    %edx,%eax
f0108743:	c1 e0 03             	shl    $0x3,%eax
f0108746:	01 c8                	add    %ecx,%eax
f0108748:	05 c4 00 00 00       	add    $0xc4,%eax
f010874d:	8b 18                	mov    (%eax),%ebx
f010874f:	0f be 4d dd          	movsbl -0x23(%ebp),%ecx
f0108753:	0f be 55 df          	movsbl -0x21(%ebp),%edx
f0108757:	0f be 45 de          	movsbl -0x22(%ebp),%eax
f010875b:	83 ec 08             	sub    $0x8,%esp
f010875e:	53                   	push   %ebx
f010875f:	ff 75 e4             	pushl  -0x1c(%ebp)
f0108762:	51                   	push   %ecx
f0108763:	52                   	push   %edx
f0108764:	50                   	push   %eax
f0108765:	68 d8 2b 13 f0       	push   $0xf0132bd8
f010876a:	e8 c2 86 ff ff       	call   f0100e31 <cprintf>
f010876f:	83 c4 20             	add    $0x20,%esp

			if(i==e->page_last_WS_index )
f0108772:	8b 45 08             	mov    0x8(%ebp),%eax
f0108775:	8b 80 78 d5 01 00    	mov    0x1d578(%eax),%eax
f010877b:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010877e:	75 10                	jne    f0108790 <env_page_ws_print+0x297>
			{
				cprintf(" <--");
f0108780:	83 ec 0c             	sub    $0xc,%esp
f0108783:	68 1f 2c 13 f0       	push   $0xf0132c1f
f0108788:	e8 a4 86 ff ff       	call   f0100e31 <cprintf>
f010878d:	83 c4 10             	add    $0x10,%esp
			}
			cprintf("\n");
f0108790:	83 ec 0c             	sub    $0xc,%esp
f0108793:	68 c4 2b 13 f0       	push   $0xf0132bc4
f0108798:	e8 94 86 ff ff       	call   f0100e31 <cprintf>
f010879d:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		uint32 i;
		cprintf("PAGE WS:\n");
		for(i=0; i< (e->page_WS_max_size); i++ )
f01087a0:	ff 45 ec             	incl   -0x14(%ebp)
f01087a3:	8b 45 08             	mov    0x8(%ebp),%eax
f01087a6:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f01087ac:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01087af:	0f 87 7a fe ff ff    	ja     f010862f <env_page_ws_print+0x136>
				cprintf(" <--");
			}
			cprintf("\n");
		}
	}
}
f01087b5:	90                   	nop
f01087b6:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01087b9:	c9                   	leave  
f01087ba:	c3                   	ret    

f01087bb <env_table_ws_print>:
#endif
// Table Working Set =========================================================

void env_table_ws_print(struct Env *e)
{
f01087bb:	55                   	push   %ebp
f01087bc:	89 e5                	mov    %esp,%ebp
f01087be:	53                   	push   %ebx
f01087bf:	83 ec 14             	sub    $0x14,%esp
	uint32 i;
	cprintf("---------------------------------------------------\n");
f01087c2:	83 ec 0c             	sub    $0xc,%esp
f01087c5:	68 24 2c 13 f0       	push   $0xf0132c24
f01087ca:	e8 62 86 ff ff       	call   f0100e31 <cprintf>
f01087cf:	83 c4 10             	add    $0x10,%esp
	cprintf("TABLE WS:\n");
f01087d2:	83 ec 0c             	sub    $0xc,%esp
f01087d5:	68 59 2c 13 f0       	push   $0xf0132c59
f01087da:	e8 52 86 ff ff       	call   f0100e31 <cprintf>
f01087df:	83 c4 10             	add    $0x10,%esp
	for(i=0; i< __TWS_MAX_SIZE; i++ )
f01087e2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01087e9:	e9 19 01 00 00       	jmp    f0108907 <env_table_ws_print+0x14c>
	{
		if (e->__ptr_tws[i].empty)
f01087ee:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01087f1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01087f4:	89 d0                	mov    %edx,%eax
f01087f6:	01 c0                	add    %eax,%eax
f01087f8:	01 d0                	add    %edx,%eax
f01087fa:	c1 e0 03             	shl    $0x3,%eax
f01087fd:	01 c8                	add    %ecx,%eax
f01087ff:	05 84 d5 01 00       	add    $0x1d584,%eax
f0108804:	8a 00                	mov    (%eax),%al
f0108806:	84 c0                	test   %al,%al
f0108808:	74 43                	je     f010884d <env_table_ws_print+0x92>
		{
			cprintf("EMPTY LOCATION");
f010880a:	83 ec 0c             	sub    $0xc,%esp
f010880d:	68 af 2b 13 f0       	push   $0xf0132baf
f0108812:	e8 1a 86 ff ff       	call   f0100e31 <cprintf>
f0108817:	83 c4 10             	add    $0x10,%esp
			if(i==e->table_last_WS_index )
f010881a:	8b 45 08             	mov    0x8(%ebp),%eax
f010881d:	8b 80 30 da 01 00    	mov    0x1da30(%eax),%eax
f0108823:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0108826:	75 10                	jne    f0108838 <env_table_ws_print+0x7d>
			{
				cprintf("		<--");
f0108828:	83 ec 0c             	sub    $0xc,%esp
f010882b:	68 be 2b 13 f0       	push   $0xf0132bbe
f0108830:	e8 fc 85 ff ff       	call   f0100e31 <cprintf>
f0108835:	83 c4 10             	add    $0x10,%esp
			}
			cprintf("\n");
f0108838:	83 ec 0c             	sub    $0xc,%esp
f010883b:	68 c4 2b 13 f0       	push   $0xf0132bc4
f0108840:	e8 ec 85 ff ff       	call   f0100e31 <cprintf>
f0108845:	83 c4 10             	add    $0x10,%esp
			continue;
f0108848:	e9 b7 00 00 00       	jmp    f0108904 <env_table_ws_print+0x149>
		}
		uint32 virtual_address = e->__ptr_tws[i].virtual_address;
f010884d:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108850:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108853:	89 d0                	mov    %edx,%eax
f0108855:	01 c0                	add    %eax,%eax
f0108857:	01 d0                	add    %edx,%eax
f0108859:	c1 e0 03             	shl    $0x3,%eax
f010885c:	01 c8                	add    %ecx,%eax
f010885e:	05 80 d5 01 00       	add    $0x1d580,%eax
f0108863:	8b 00                	mov    (%eax),%eax
f0108865:	89 45 f0             	mov    %eax,-0x10(%ebp)
		cprintf("env address at %d = %x",i, e->__ptr_tws[i].virtual_address);
f0108868:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010886b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010886e:	89 d0                	mov    %edx,%eax
f0108870:	01 c0                	add    %eax,%eax
f0108872:	01 d0                	add    %edx,%eax
f0108874:	c1 e0 03             	shl    $0x3,%eax
f0108877:	01 c8                	add    %ecx,%eax
f0108879:	05 80 d5 01 00       	add    $0x1d580,%eax
f010887e:	8b 00                	mov    (%eax),%eax
f0108880:	83 ec 04             	sub    $0x4,%esp
f0108883:	50                   	push   %eax
f0108884:	ff 75 f4             	pushl  -0xc(%ebp)
f0108887:	68 64 2c 13 f0       	push   $0xf0132c64
f010888c:	e8 a0 85 ff ff       	call   f0100e31 <cprintf>
f0108891:	83 c4 10             	add    $0x10,%esp

		cprintf(", used bit = %d, time stamp = %d", pd_is_table_used(e->env_page_directory, virtual_address), e->__ptr_tws[i].time_stamp);
f0108894:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108897:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010889a:	89 d0                	mov    %edx,%eax
f010889c:	01 c0                	add    %eax,%eax
f010889e:	01 d0                	add    %edx,%eax
f01088a0:	c1 e0 03             	shl    $0x3,%eax
f01088a3:	01 c8                	add    %ecx,%eax
f01088a5:	05 88 d5 01 00       	add    $0x1d588,%eax
f01088aa:	8b 18                	mov    (%eax),%ebx
f01088ac:	8b 45 08             	mov    0x8(%ebp),%eax
f01088af:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f01088b5:	83 ec 08             	sub    $0x8,%esp
f01088b8:	ff 75 f0             	pushl  -0x10(%ebp)
f01088bb:	50                   	push   %eax
f01088bc:	e8 fe f8 ff ff       	call   f01081bf <pd_is_table_used>
f01088c1:	83 c4 10             	add    $0x10,%esp
f01088c4:	83 ec 04             	sub    $0x4,%esp
f01088c7:	53                   	push   %ebx
f01088c8:	50                   	push   %eax
f01088c9:	68 7c 2c 13 f0       	push   $0xf0132c7c
f01088ce:	e8 5e 85 ff ff       	call   f0100e31 <cprintf>
f01088d3:	83 c4 10             	add    $0x10,%esp
		if(i==e->table_last_WS_index )
f01088d6:	8b 45 08             	mov    0x8(%ebp),%eax
f01088d9:	8b 80 30 da 01 00    	mov    0x1da30(%eax),%eax
f01088df:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01088e2:	75 10                	jne    f01088f4 <env_table_ws_print+0x139>
		{
			cprintf(" <--");
f01088e4:	83 ec 0c             	sub    $0xc,%esp
f01088e7:	68 1f 2c 13 f0       	push   $0xf0132c1f
f01088ec:	e8 40 85 ff ff       	call   f0100e31 <cprintf>
f01088f1:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("\n");
f01088f4:	83 ec 0c             	sub    $0xc,%esp
f01088f7:	68 c4 2b 13 f0       	push   $0xf0132bc4
f01088fc:	e8 30 85 ff ff       	call   f0100e31 <cprintf>
f0108901:	83 c4 10             	add    $0x10,%esp
void env_table_ws_print(struct Env *e)
{
	uint32 i;
	cprintf("---------------------------------------------------\n");
	cprintf("TABLE WS:\n");
	for(i=0; i< __TWS_MAX_SIZE; i++ )
f0108904:	ff 45 f4             	incl   -0xc(%ebp)
f0108907:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f010890b:	0f 86 dd fe ff ff    	jbe    f01087ee <env_table_ws_print+0x33>
		{
			cprintf(" <--");
		}
		cprintf("\n");
	}
}
f0108911:	90                   	nop
f0108912:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0108915:	c9                   	leave  
f0108916:	c3                   	ret    

f0108917 <env_table_ws_get_size>:

inline uint32 env_table_ws_get_size(struct Env *e)
{
f0108917:	55                   	push   %ebp
f0108918:	89 e5                	mov    %esp,%ebp
f010891a:	83 ec 10             	sub    $0x10,%esp
	int i=0, counter=0;
f010891d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0108924:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for(;i<__TWS_MAX_SIZE; i++) if(e->__ptr_tws[i].empty == 0) counter++;
f010892b:	eb 22                	jmp    f010894f <env_table_ws_get_size+0x38>
f010892d:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108930:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0108933:	89 d0                	mov    %edx,%eax
f0108935:	01 c0                	add    %eax,%eax
f0108937:	01 d0                	add    %edx,%eax
f0108939:	c1 e0 03             	shl    $0x3,%eax
f010893c:	01 c8                	add    %ecx,%eax
f010893e:	05 84 d5 01 00       	add    $0x1d584,%eax
f0108943:	8a 00                	mov    (%eax),%al
f0108945:	84 c0                	test   %al,%al
f0108947:	75 03                	jne    f010894c <env_table_ws_get_size+0x35>
f0108949:	ff 45 f8             	incl   -0x8(%ebp)
f010894c:	ff 45 fc             	incl   -0x4(%ebp)
f010894f:	83 7d fc 31          	cmpl   $0x31,-0x4(%ebp)
f0108953:	7e d8                	jle    f010892d <env_table_ws_get_size+0x16>
	return counter;
f0108955:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f0108958:	c9                   	leave  
f0108959:	c3                   	ret    

f010895a <env_table_ws_invalidate>:

inline void env_table_ws_invalidate(struct Env* e, uint32 virtual_address)
{
f010895a:	55                   	push   %ebp
f010895b:	89 e5                	mov    %esp,%ebp
f010895d:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f0108960:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;i<__TWS_MAX_SIZE; i++)
f0108967:	eb 4e                	jmp    f01089b7 <env_table_ws_invalidate+0x5d>
	{
		if(ROUNDDOWN(e->__ptr_tws[i].virtual_address,PAGE_SIZE*1024) == ROUNDDOWN(virtual_address,PAGE_SIZE*1024))
f0108969:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010896c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010896f:	89 d0                	mov    %edx,%eax
f0108971:	01 c0                	add    %eax,%eax
f0108973:	01 d0                	add    %edx,%eax
f0108975:	c1 e0 03             	shl    $0x3,%eax
f0108978:	01 c8                	add    %ecx,%eax
f010897a:	05 80 d5 01 00       	add    $0x1d580,%eax
f010897f:	8b 00                	mov    (%eax),%eax
f0108981:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0108984:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108987:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f010898c:	89 c2                	mov    %eax,%edx
f010898e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108991:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0108994:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0108997:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f010899c:	39 c2                	cmp    %eax,%edx
f010899e:	75 14                	jne    f01089b4 <env_table_ws_invalidate+0x5a>
		{
			env_table_ws_clear_entry(e, i);
f01089a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01089a3:	83 ec 08             	sub    $0x8,%esp
f01089a6:	50                   	push   %eax
f01089a7:	ff 75 08             	pushl  0x8(%ebp)
f01089aa:	e8 bc 00 00 00       	call   f0108a6b <env_table_ws_clear_entry>
f01089af:	83 c4 10             	add    $0x10,%esp
			break;
f01089b2:	eb 09                	jmp    f01089bd <env_table_ws_invalidate+0x63>
}

inline void env_table_ws_invalidate(struct Env* e, uint32 virtual_address)
{
	int i=0;
	for(;i<__TWS_MAX_SIZE; i++)
f01089b4:	ff 45 f4             	incl   -0xc(%ebp)
f01089b7:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f01089bb:	7e ac                	jle    f0108969 <env_table_ws_invalidate+0xf>
		{
			env_table_ws_clear_entry(e, i);
			break;
		}
	}
}
f01089bd:	90                   	nop
f01089be:	c9                   	leave  
f01089bf:	c3                   	ret    

f01089c0 <env_table_ws_set_entry>:

inline void env_table_ws_set_entry(struct Env* e, uint32 entry_index, uint32 virtual_address)
{
f01089c0:	55                   	push   %ebp
f01089c1:	89 e5                	mov    %esp,%ebp
f01089c3:	53                   	push   %ebx
f01089c4:	83 ec 14             	sub    $0x14,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f01089c7:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f01089cb:	76 19                	jbe    f01089e6 <env_table_ws_set_entry+0x26>
f01089cd:	68 a0 2c 13 f0       	push   $0xf0132ca0
f01089d2:	68 c6 2a 13 f0       	push   $0xf0132ac6
f01089d7:	68 07 01 00 00       	push   $0x107
f01089dc:	68 dc 2a 13 f0       	push   $0xf0132adc
f01089e1:	e8 ca 77 ff ff       	call   f01001b0 <_panic>
	assert(virtual_address >= 0 && virtual_address < USER_TOP);
f01089e6:	81 7d 10 ff ff bf ee 	cmpl   $0xeebfffff,0x10(%ebp)
f01089ed:	76 19                	jbe    f0108a08 <env_table_ws_set_entry+0x48>
f01089ef:	68 fc 2a 13 f0       	push   $0xf0132afc
f01089f4:	68 c6 2a 13 f0       	push   $0xf0132ac6
f01089f9:	68 08 01 00 00       	push   $0x108
f01089fe:	68 dc 2a 13 f0       	push   $0xf0132adc
f0108a03:	e8 a8 77 ff ff       	call   f01001b0 <_panic>
	e->__ptr_tws[entry_index].virtual_address = ROUNDDOWN(virtual_address,PAGE_SIZE*1024);
f0108a08:	8b 45 10             	mov    0x10(%ebp),%eax
f0108a0b:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0108a0e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108a11:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f0108a16:	89 c1                	mov    %eax,%ecx
f0108a18:	8b 5d 08             	mov    0x8(%ebp),%ebx
f0108a1b:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108a1e:	89 d0                	mov    %edx,%eax
f0108a20:	01 c0                	add    %eax,%eax
f0108a22:	01 d0                	add    %edx,%eax
f0108a24:	c1 e0 03             	shl    $0x3,%eax
f0108a27:	01 d8                	add    %ebx,%eax
f0108a29:	05 80 d5 01 00       	add    $0x1d580,%eax
f0108a2e:	89 08                	mov    %ecx,(%eax)
	e->__ptr_tws[entry_index].empty = 0;
f0108a30:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108a33:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108a36:	89 d0                	mov    %edx,%eax
f0108a38:	01 c0                	add    %eax,%eax
f0108a3a:	01 d0                	add    %edx,%eax
f0108a3c:	c1 e0 03             	shl    $0x3,%eax
f0108a3f:	01 c8                	add    %ecx,%eax
f0108a41:	05 84 d5 01 00       	add    $0x1d584,%eax
f0108a46:	c6 00 00             	movb   $0x0,(%eax)

	//e->__ptr_tws[entry_index].time_stamp = time;
	e->__ptr_tws[entry_index].time_stamp = 0x80000000;
f0108a49:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108a4c:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108a4f:	89 d0                	mov    %edx,%eax
f0108a51:	01 c0                	add    %eax,%eax
f0108a53:	01 d0                	add    %edx,%eax
f0108a55:	c1 e0 03             	shl    $0x3,%eax
f0108a58:	01 c8                	add    %ecx,%eax
f0108a5a:	05 88 d5 01 00       	add    $0x1d588,%eax
f0108a5f:	c7 00 00 00 00 80    	movl   $0x80000000,(%eax)
	return;
f0108a65:	90                   	nop
}
f0108a66:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0108a69:	c9                   	leave  
f0108a6a:	c3                   	ret    

f0108a6b <env_table_ws_clear_entry>:

inline void env_table_ws_clear_entry(struct Env* e, uint32 entry_index)
{
f0108a6b:	55                   	push   %ebp
f0108a6c:	89 e5                	mov    %esp,%ebp
f0108a6e:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f0108a71:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f0108a75:	76 19                	jbe    f0108a90 <env_table_ws_clear_entry+0x25>
f0108a77:	68 a0 2c 13 f0       	push   $0xf0132ca0
f0108a7c:	68 c6 2a 13 f0       	push   $0xf0132ac6
f0108a81:	68 13 01 00 00       	push   $0x113
f0108a86:	68 dc 2a 13 f0       	push   $0xf0132adc
f0108a8b:	e8 20 77 ff ff       	call   f01001b0 <_panic>
	e->__ptr_tws[entry_index].virtual_address = 0;
f0108a90:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108a93:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108a96:	89 d0                	mov    %edx,%eax
f0108a98:	01 c0                	add    %eax,%eax
f0108a9a:	01 d0                	add    %edx,%eax
f0108a9c:	c1 e0 03             	shl    $0x3,%eax
f0108a9f:	01 c8                	add    %ecx,%eax
f0108aa1:	05 80 d5 01 00       	add    $0x1d580,%eax
f0108aa6:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	e->__ptr_tws[entry_index].empty = 1;
f0108aac:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108aaf:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108ab2:	89 d0                	mov    %edx,%eax
f0108ab4:	01 c0                	add    %eax,%eax
f0108ab6:	01 d0                	add    %edx,%eax
f0108ab8:	c1 e0 03             	shl    $0x3,%eax
f0108abb:	01 c8                	add    %ecx,%eax
f0108abd:	05 84 d5 01 00       	add    $0x1d584,%eax
f0108ac2:	c6 00 01             	movb   $0x1,(%eax)
	e->__ptr_tws[entry_index].time_stamp = 0;
f0108ac5:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108ac8:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108acb:	89 d0                	mov    %edx,%eax
f0108acd:	01 c0                	add    %eax,%eax
f0108acf:	01 d0                	add    %edx,%eax
f0108ad1:	c1 e0 03             	shl    $0x3,%eax
f0108ad4:	01 c8                	add    %ecx,%eax
f0108ad6:	05 88 d5 01 00       	add    $0x1d588,%eax
f0108adb:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
f0108ae1:	90                   	nop
f0108ae2:	c9                   	leave  
f0108ae3:	c3                   	ret    

f0108ae4 <env_table_ws_get_virtual_address>:

inline uint32 env_table_ws_get_virtual_address(struct Env* e, uint32 entry_index)
{
f0108ae4:	55                   	push   %ebp
f0108ae5:	89 e5                	mov    %esp,%ebp
f0108ae7:	83 ec 18             	sub    $0x18,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f0108aea:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f0108aee:	76 19                	jbe    f0108b09 <env_table_ws_get_virtual_address+0x25>
f0108af0:	68 a0 2c 13 f0       	push   $0xf0132ca0
f0108af5:	68 c6 2a 13 f0       	push   $0xf0132ac6
f0108afa:	68 1b 01 00 00       	push   $0x11b
f0108aff:	68 dc 2a 13 f0       	push   $0xf0132adc
f0108b04:	e8 a7 76 ff ff       	call   f01001b0 <_panic>
	return ROUNDDOWN(e->__ptr_tws[entry_index].virtual_address,PAGE_SIZE*1024);
f0108b09:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108b0c:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108b0f:	89 d0                	mov    %edx,%eax
f0108b11:	01 c0                	add    %eax,%eax
f0108b13:	01 d0                	add    %edx,%eax
f0108b15:	c1 e0 03             	shl    $0x3,%eax
f0108b18:	01 c8                	add    %ecx,%eax
f0108b1a:	05 80 d5 01 00       	add    $0x1d580,%eax
f0108b1f:	8b 00                	mov    (%eax),%eax
f0108b21:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0108b24:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108b27:	25 00 00 c0 ff       	and    $0xffc00000,%eax
}
f0108b2c:	c9                   	leave  
f0108b2d:	c3                   	ret    

f0108b2e <env_table_ws_get_time_stamp>:


inline uint32 env_table_ws_get_time_stamp(struct Env* e, uint32 entry_index)
{
f0108b2e:	55                   	push   %ebp
f0108b2f:	89 e5                	mov    %esp,%ebp
f0108b31:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f0108b34:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f0108b38:	76 19                	jbe    f0108b53 <env_table_ws_get_time_stamp+0x25>
f0108b3a:	68 a0 2c 13 f0       	push   $0xf0132ca0
f0108b3f:	68 c6 2a 13 f0       	push   $0xf0132ac6
f0108b44:	68 22 01 00 00       	push   $0x122
f0108b49:	68 dc 2a 13 f0       	push   $0xf0132adc
f0108b4e:	e8 5d 76 ff ff       	call   f01001b0 <_panic>
	return e->__ptr_tws[entry_index].time_stamp;
f0108b53:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108b56:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108b59:	89 d0                	mov    %edx,%eax
f0108b5b:	01 c0                	add    %eax,%eax
f0108b5d:	01 d0                	add    %edx,%eax
f0108b5f:	c1 e0 03             	shl    $0x3,%eax
f0108b62:	01 c8                	add    %ecx,%eax
f0108b64:	05 88 d5 01 00       	add    $0x1d588,%eax
f0108b69:	8b 00                	mov    (%eax),%eax
}
f0108b6b:	c9                   	leave  
f0108b6c:	c3                   	ret    

f0108b6d <env_table_ws_is_entry_empty>:

inline uint32 env_table_ws_is_entry_empty(struct Env* e, uint32 entry_index)
{
f0108b6d:	55                   	push   %ebp
f0108b6e:	89 e5                	mov    %esp,%ebp
	return e->__ptr_tws[entry_index].empty;
f0108b70:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108b73:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108b76:	89 d0                	mov    %edx,%eax
f0108b78:	01 c0                	add    %eax,%eax
f0108b7a:	01 d0                	add    %edx,%eax
f0108b7c:	c1 e0 03             	shl    $0x3,%eax
f0108b7f:	01 c8                	add    %ecx,%eax
f0108b81:	05 84 d5 01 00       	add    $0x1d584,%eax
f0108b86:	8a 00                	mov    (%eax),%al
f0108b88:	0f b6 c0             	movzbl %al,%eax
}
f0108b8b:	5d                   	pop    %ebp
f0108b8c:	c3                   	ret    

f0108b8d <cut_paste_pages>:
//	If the page table at any destination page in the range is not exist, it should create it
//	If ANY of the destination pages exists, deny the entire process and return -1. Otherwise, cut-paste the number of pages and return 0
//	ALL 12 permission bits of the destination should be TYPICAL to those of the source
//	The given addresses may be not aligned on 4 KB
int cut_paste_pages(uint32* page_directory, uint32 source_va, uint32 dest_va, uint32 num_of_pages)
{
f0108b8d:	55                   	push   %ebp
f0108b8e:	89 e5                	mov    %esp,%ebp
f0108b90:	83 ec 08             	sub    $0x8,%esp
	panic("cut_paste_pages() is not implemented yet...!!");
f0108b93:	83 ec 04             	sub    $0x4,%esp
f0108b96:	68 d4 2c 13 f0       	push   $0xf0132cd4
f0108b9b:	6a 1f                	push   $0x1f
f0108b9d:	68 02 2d 13 f0       	push   $0xf0132d02
f0108ba2:	e8 09 76 ff ff       	call   f01001b0 <_panic>

f0108ba7 <copy_paste_chunk>:
//	Otherwise, just copy!
//		1. WRITABLE permission
//		2. USER/SUPERVISOR permission must be SAME as the one of the source
//	The given range(s) may be not aligned on 4 KB
int copy_paste_chunk(uint32* page_directory, uint32 source_va, uint32 dest_va, uint32 size)
{
f0108ba7:	55                   	push   %ebp
f0108ba8:	89 e5                	mov    %esp,%ebp
f0108baa:	83 ec 08             	sub    $0x8,%esp
	panic("copy_paste_chunk() is not implemented yet...!!");
f0108bad:	83 ec 04             	sub    $0x4,%esp
f0108bb0:	68 20 2d 13 f0       	push   $0xf0132d20
f0108bb5:	6a 32                	push   $0x32
f0108bb7:	68 02 2d 13 f0       	push   $0xf0132d02
f0108bbc:	e8 ef 75 ff ff       	call   f01001b0 <_panic>

f0108bc1 <share_chunk>:
//	It should set the permissions of the second range by the given perms
//	If ANY of the destination pages exists, deny the entire process and return -1. Otherwise, share the required range and return 0
//	If the page table at any destination page in the range is not exist, it should create it
//	The given range(s) may be not aligned on 4 KB
int share_chunk(uint32* page_directory, uint32 source_va,uint32 dest_va, uint32 size, uint32 perms)
{
f0108bc1:	55                   	push   %ebp
f0108bc2:	89 e5                	mov    %esp,%ebp
f0108bc4:	83 ec 08             	sub    $0x8,%esp
	panic("share_chunk() is not implemented yet...!!");
f0108bc7:	83 ec 04             	sub    $0x4,%esp
f0108bca:	68 50 2d 13 f0       	push   $0xf0132d50
f0108bcf:	6a 41                	push   $0x41
f0108bd1:	68 02 2d 13 f0       	push   $0xf0132d02
f0108bd6:	e8 d5 75 ff ff       	call   f01001b0 <_panic>

f0108bdb <allocate_chunk>:
//This function should allocate the given virtual range [<va>, <va> + <size>) in the given address space  <page_directory> with the given permissions <perms>.
//	If ANY of the destination pages exists, deny the entire process and return -1. Otherwise, allocate the required range and return 0
//	If the page table at any destination page in the range is not exist, it should create it
//	Allocation should be aligned on page boundary. However, the given range may be not aligned.
int allocate_chunk(uint32* page_directory, uint32 va, uint32 size, uint32 perms)
{
f0108bdb:	55                   	push   %ebp
f0108bdc:	89 e5                	mov    %esp,%ebp
f0108bde:	83 ec 08             	sub    $0x8,%esp
	panic("allocate_chunk() is not implemented yet...!!");
f0108be1:	83 ec 04             	sub    $0x4,%esp
f0108be4:	68 7c 2d 13 f0       	push   $0xf0132d7c
f0108be9:	6a 4e                	push   $0x4e
f0108beb:	68 02 2d 13 f0       	push   $0xf0132d02
f0108bf0:	e8 bb 75 ff ff       	call   f01001b0 <_panic>

f0108bf5 <calculate_allocated_space>:

//=====================================
// 5) CALCULATE ALLOCATED SPACE IN RAM:
//=====================================
void calculate_allocated_space(uint32* page_directory, uint32 sva, uint32 eva, uint32 *num_tables, uint32 *num_pages)
{
f0108bf5:	55                   	push   %ebp
f0108bf6:	89 e5                	mov    %esp,%ebp
f0108bf8:	83 ec 08             	sub    $0x8,%esp
	panic("calculate_allocated_space() is not implemented yet...!!");
f0108bfb:	83 ec 04             	sub    $0x4,%esp
f0108bfe:	68 ac 2d 13 f0       	push   $0xf0132dac
f0108c03:	6a 57                	push   $0x57
f0108c05:	68 02 2d 13 f0       	push   $0xf0132d02
f0108c0a:	e8 a1 75 ff ff       	call   f01001b0 <_panic>

f0108c0f <calculate_required_frames>:
//=====================================
//This function should calculate the required number of pages for allocating and mapping the given range [start va, start va + size) (either for the pages themselves or for the page tables required for mapping)
//	Pages and/or page tables that are already exist in the range SHOULD NOT be counted.
//	The given range(s) may be not aligned on 4 KB
uint32 calculate_required_frames(uint32* page_directory, uint32 sva, uint32 size)
{
f0108c0f:	55                   	push   %ebp
f0108c10:	89 e5                	mov    %esp,%ebp
f0108c12:	83 ec 08             	sub    $0x8,%esp
	panic("calculate_required_frames() is not implemented yet...!!");
f0108c15:	83 ec 04             	sub    $0x4,%esp
f0108c18:	68 e4 2d 13 f0       	push   $0xf0132de4
f0108c1d:	6a 63                	push   $0x63
f0108c1f:	68 02 2d 13 f0       	push   $0xf0132d02
f0108c24:	e8 87 75 ff ff       	call   f01001b0 <_panic>

f0108c29 <allocate_user_mem>:

//=====================================
// 1) ALLOCATE USER MEMORY:
//=====================================
void allocate_user_mem(struct Env* e, uint32 virtual_address, uint32 size)
{
f0108c29:	55                   	push   %ebp
f0108c2a:	89 e5                	mov    %esp,%ebp
f0108c2c:	83 ec 08             	sub    $0x8,%esp
	/*====================================*/
	/*Remove this line before start coding*/
	inctst();
f0108c2f:	e8 5d 4e 02 00       	call   f012da91 <inctst>
	return;
f0108c34:	90                   	nop
	/*====================================*/

	//TODO: [PROJECT'23.MS2 - #10] [2] USER HEAP - allocate_user_mem() [Kernel Side]
	// Write your code here, remove the panic and write your code
	panic("allocate_user_mem() is not implemented yet...!!");
}
f0108c35:	c9                   	leave  
f0108c36:	c3                   	ret    

f0108c37 <free_user_mem>:

//=====================================
// 2) FREE USER MEMORY:
//=====================================
void free_user_mem(struct Env* e, uint32 virtual_address, uint32 size)
{
f0108c37:	55                   	push   %ebp
f0108c38:	89 e5                	mov    %esp,%ebp
f0108c3a:	83 ec 08             	sub    $0x8,%esp
	/*====================================*/
	/*Remove this line before start coding*/
	inctst();
f0108c3d:	e8 4f 4e 02 00       	call   f012da91 <inctst>
	return;
f0108c42:	90                   	nop
	/*====================================*/

	//TODO: [PROJECT'23.MS2 - #12] [2] USER HEAP - free_user_mem() [Kernel Side]
	// Write your code here, remove the panic and write your code
	panic("free_user_mem() is not implemented yet...!!");
}
f0108c43:	c9                   	leave  
f0108c44:	c3                   	ret    

f0108c45 <__free_user_mem_with_buffering>:

//=====================================
// 2) FREE USER MEMORY (BUFFERING):
//=====================================
void __free_user_mem_with_buffering(struct Env* e, uint32 virtual_address, uint32 size)
{
f0108c45:	55                   	push   %ebp
f0108c46:	89 e5                	mov    %esp,%ebp
f0108c48:	83 ec 08             	sub    $0x8,%esp
	// your code is here, remove the panic and write your code
	panic("__free_user_mem_with_buffering() is not implemented yet...!!");
f0108c4b:	83 ec 04             	sub    $0x4,%esp
f0108c4e:	68 1c 2e 13 f0       	push   $0xf0132e1c
f0108c53:	68 99 00 00 00       	push   $0x99
f0108c58:	68 02 2d 13 f0       	push   $0xf0132d02
f0108c5d:	e8 4e 75 ff ff       	call   f01001b0 <_panic>

f0108c62 <move_user_mem>:

//=====================================
// 3) MOVE USER MEMORY:
//=====================================
void move_user_mem(struct Env* e, uint32 src_virtual_address, uint32 dst_virtual_address, uint32 size)
{
f0108c62:	55                   	push   %ebp
f0108c63:	89 e5                	mov    %esp,%ebp
f0108c65:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'23.MS2 - BONUS] [2] USER HEAP - move_user_mem() [Kernel Side]
	//your code is here, remove the panic and write your code
	panic("move_user_mem() is not implemented yet...!!");
f0108c68:	83 ec 04             	sub    $0x4,%esp
f0108c6b:	68 5c 2e 13 f0       	push   $0xf0132e5c
f0108c70:	68 a3 00 00 00       	push   $0xa3
f0108c75:	68 02 2d 13 f0       	push   $0xf0132d02
f0108c7a:	e8 31 75 ff ff       	call   f01001b0 <_panic>

f0108c7f <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f0108c7f:	55                   	push   %ebp
f0108c80:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f0108c82:	8b 45 08             	mov    0x8(%ebp),%eax
f0108c85:	8b 15 10 be 2b f0    	mov    0xf02bbe10,%edx
f0108c8b:	29 d0                	sub    %edx,%eax
f0108c8d:	c1 f8 02             	sar    $0x2,%eax
f0108c90:	89 c2                	mov    %eax,%edx
f0108c92:	89 d0                	mov    %edx,%eax
f0108c94:	c1 e0 03             	shl    $0x3,%eax
f0108c97:	01 d0                	add    %edx,%eax
f0108c99:	c1 e0 03             	shl    $0x3,%eax
f0108c9c:	01 d0                	add    %edx,%eax
f0108c9e:	c1 e0 03             	shl    $0x3,%eax
f0108ca1:	01 d0                	add    %edx,%eax
f0108ca3:	c1 e0 03             	shl    $0x3,%eax
f0108ca6:	01 d0                	add    %edx,%eax
f0108ca8:	89 c1                	mov    %eax,%ecx
f0108caa:	c1 e1 0f             	shl    $0xf,%ecx
f0108cad:	01 c8                	add    %ecx,%eax
f0108caf:	c1 e0 03             	shl    $0x3,%eax
f0108cb2:	01 d0                	add    %edx,%eax
f0108cb4:	f7 d8                	neg    %eax
}
f0108cb6:	5d                   	pop    %ebp
f0108cb7:	c3                   	ret    

f0108cb8 <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f0108cb8:	55                   	push   %ebp
f0108cb9:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f0108cbb:	ff 75 08             	pushl  0x8(%ebp)
f0108cbe:	e8 bc ff ff ff       	call   f0108c7f <to_frame_number>
f0108cc3:	83 c4 04             	add    $0x4,%esp
f0108cc6:	c1 e0 0c             	shl    $0xc,%eax
}
f0108cc9:	c9                   	leave  
f0108cca:	c3                   	ret    

f0108ccb <env_create>:
//===============================
// 1) CREATE NEW ENV & LOAD IT:
//===============================
// Allocates a new env and loads the named user program into it.
struct Env* env_create(char* user_program_name, unsigned int page_WS_size, unsigned int LRU_second_list_size, unsigned int percent_WS_pages_to_remove)
{
f0108ccb:	55                   	push   %ebp
f0108ccc:	89 e5                	mov    %esp,%ebp
f0108cce:	57                   	push   %edi
f0108ccf:	56                   	push   %esi
f0108cd0:	53                   	push   %ebx
f0108cd1:	81 ec fc 00 00 00    	sub    $0xfc,%esp
	//[1] get pointer to the start of the "user_program_name" program in memory
	// Hint: use "get_user_program_info" function,
	// you should set the following "ptr_program_start" by the start address of the user program
	uint8* ptr_program_start = 0;
f0108cd7:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)

	struct UserProgramInfo* ptr_user_program_info = get_user_program_info(user_program_name);
f0108cde:	83 ec 0c             	sub    $0xc,%esp
f0108ce1:	ff 75 08             	pushl  0x8(%ebp)
f0108ce4:	e8 df 21 00 00       	call   f010aec8 <get_user_program_info>
f0108ce9:	83 c4 10             	add    $0x10,%esp
f0108cec:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if(ptr_user_program_info == 0) return NULL;
f0108cef:	83 7d b4 00          	cmpl   $0x0,-0x4c(%ebp)
f0108cf3:	75 0a                	jne    f0108cff <env_create+0x34>
f0108cf5:	b8 00 00 00 00       	mov    $0x0,%eax
f0108cfa:	e9 45 0c 00 00       	jmp    f0109944 <env_create+0xc79>
	ptr_program_start = ptr_user_program_info->ptr_start ;
f0108cff:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0108d02:	8b 40 08             	mov    0x8(%eax),%eax
f0108d05:	89 45 b8             	mov    %eax,-0x48(%ebp)


	//[2] allocate new environment, (from the free environment list)
	//if there's no one, return NULL
	// Hint: use "allocate_environment" function
	struct Env* e = NULL;
f0108d08:	c7 85 40 ff ff ff 00 	movl   $0x0,-0xc0(%ebp)
f0108d0f:	00 00 00 
	if(allocate_environment(&e) < 0)
f0108d12:	83 ec 0c             	sub    $0xc,%esp
f0108d15:	8d 85 40 ff ff ff    	lea    -0xc0(%ebp),%eax
f0108d1b:	50                   	push   %eax
f0108d1c:	e8 aa 0f 00 00       	call   f0109ccb <allocate_environment>
f0108d21:	83 c4 10             	add    $0x10,%esp
f0108d24:	85 c0                	test   %eax,%eax
f0108d26:	79 0a                	jns    f0108d32 <env_create+0x67>
	{
		return 0;
f0108d28:	b8 00 00 00 00       	mov    $0x0,%eax
f0108d2d:	e9 12 0c 00 00       	jmp    f0109944 <env_create+0xc79>
	}

	//[2.5 - 2012] Set program name inside the environment
	//e->prog_name = ptr_user_program_info->name ;
	//2017: changed to fixed size array to be abale to access it from user side
	if (strlen(ptr_user_program_info->name) < PROGNAMELEN)
f0108d32:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0108d35:	8b 00                	mov    (%eax),%eax
f0108d37:	83 ec 0c             	sub    $0xc,%esp
f0108d3a:	50                   	push   %eax
f0108d3b:	e8 fd 60 02 00       	call   f012ee3d <strlen>
f0108d40:	83 c4 10             	add    $0x10,%esp
f0108d43:	83 f8 3f             	cmp    $0x3f,%eax
f0108d46:	7f 1d                	jg     f0108d65 <env_create+0x9a>
		strcpy(e->prog_name, ptr_user_program_info->name);
f0108d48:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0108d4b:	8b 00                	mov    (%eax),%eax
f0108d4d:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f0108d53:	83 c2 5c             	add    $0x5c,%edx
f0108d56:	83 ec 08             	sub    $0x8,%esp
f0108d59:	50                   	push   %eax
f0108d5a:	52                   	push   %edx
f0108d5b:	e8 2c 61 02 00       	call   f012ee8c <strcpy>
f0108d60:	83 c4 10             	add    $0x10,%esp
f0108d63:	eb 1d                	jmp    f0108d82 <env_create+0xb7>
	else
		strncpy(e->prog_name, ptr_user_program_info->name, PROGNAMELEN-1);
f0108d65:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0108d68:	8b 00                	mov    (%eax),%eax
f0108d6a:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f0108d70:	83 c2 5c             	add    $0x5c,%edx
f0108d73:	83 ec 04             	sub    $0x4,%esp
f0108d76:	6a 3f                	push   $0x3f
f0108d78:	50                   	push   %eax
f0108d79:	52                   	push   %edx
f0108d7a:	e8 3b 61 02 00       	call   f012eeba <strncpy>
f0108d7f:	83 c4 10             	add    $0x10,%esp
		phys_user_page_directory = kheap_physical_address((uint32)ptr_user_page_directory);
	}
#else
	{
		int r;
		struct FrameInfo *p = NULL;
f0108d82:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0108d89:	00 00 00 

		allocate_frame(&p) ;
f0108d8c:	83 ec 0c             	sub    $0xc,%esp
f0108d8f:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0108d95:	50                   	push   %eax
f0108d96:	e8 8a e5 ff ff       	call   f0107325 <allocate_frame>
f0108d9b:	83 c4 10             	add    $0x10,%esp
		p->references = 1;
f0108d9e:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0108da4:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)

		ptr_user_page_directory = STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(p));
f0108daa:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0108db0:	83 ec 0c             	sub    $0xc,%esp
f0108db3:	50                   	push   %eax
f0108db4:	e8 ff fe ff ff       	call   f0108cb8 <to_physical_address>
f0108db9:	83 c4 10             	add    $0x10,%esp
f0108dbc:	89 45 b0             	mov    %eax,-0x50(%ebp)
f0108dbf:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0108dc2:	c1 e8 0c             	shr    $0xc,%eax
f0108dc5:	89 45 ac             	mov    %eax,-0x54(%ebp)
f0108dc8:	a1 d0 bd 2b f0       	mov    0xf02bbdd0,%eax
f0108dcd:	39 45 ac             	cmp    %eax,-0x54(%ebp)
f0108dd0:	72 17                	jb     f0108de9 <env_create+0x11e>
f0108dd2:	ff 75 b0             	pushl  -0x50(%ebp)
f0108dd5:	68 88 2e 13 f0       	push   $0xf0132e88
f0108dda:	68 8a 00 00 00       	push   $0x8a
f0108ddf:	68 b7 2e 13 f0       	push   $0xf0132eb7
f0108de4:	e8 c7 73 ff ff       	call   f01001b0 <_panic>
f0108de9:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0108dec:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0108df1:	89 45 a8             	mov    %eax,-0x58(%ebp)
		phys_user_page_directory = to_physical_address(p);
f0108df4:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0108dfa:	83 ec 0c             	sub    $0xc,%esp
f0108dfd:	50                   	push   %eax
f0108dfe:	e8 b5 fe ff ff       	call   f0108cb8 <to_physical_address>
f0108e03:	83 c4 10             	add    $0x10,%esp
f0108e06:	89 45 a4             	mov    %eax,-0x5c(%ebp)
#endif
	//[4] initialize the new environment by the virtual address of the page directory
	// Hint: use "initialize_environment" function

	//2016
	e->page_WS_max_size = page_WS_size;
f0108e09:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0108e0f:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108e12:	89 90 7c d5 01 00    	mov    %edx,0x1d57c(%eax)

	//2020
	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0108e18:	83 ec 0c             	sub    $0xc,%esp
f0108e1b:	6a 02                	push   $0x2
f0108e1d:	e8 5d 49 00 00       	call   f010d77f <isPageReplacmentAlgorithmLRU>
f0108e22:	83 c4 10             	add    $0x10,%esp
f0108e25:	85 c0                	test   %eax,%eax
f0108e27:	74 21                	je     f0108e4a <env_create+0x17f>
	{
		e->SecondListSize = LRU_second_list_size;
f0108e29:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0108e2f:	8b 55 10             	mov    0x10(%ebp),%edx
f0108e32:	89 90 68 da 01 00    	mov    %edx,0x1da68(%eax)
		e->ActiveListSize = page_WS_size - LRU_second_list_size;
f0108e38:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0108e3e:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108e41:	2b 55 10             	sub    0x10(%ebp),%edx
f0108e44:	89 90 64 da 01 00    	mov    %edx,0x1da64(%eax)
	}

	//2018
	if (percent_WS_pages_to_remove == 0)	// If not entered as input, 0 as default value
f0108e4a:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
f0108e4e:	75 12                	jne    f0108e62 <env_create+0x197>
		e->percentage_of_WS_pages_to_be_removed = DEFAULT_PERCENT_OF_PAGE_WS_TO_REMOVE;
f0108e50:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0108e56:	c7 80 70 da 01 00 0a 	movl   $0xa,0x1da70(%eax)
f0108e5d:	00 00 00 
f0108e60:	eb 0f                	jmp    f0108e71 <env_create+0x1a6>
	else
		e->percentage_of_WS_pages_to_be_removed = percent_WS_pages_to_remove;
f0108e62:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0108e68:	8b 55 14             	mov    0x14(%ebp),%edx
f0108e6b:	89 90 70 da 01 00    	mov    %edx,0x1da70(%eax)

	initialize_environment(e, ptr_user_page_directory, phys_user_page_directory);
f0108e71:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0108e77:	83 ec 04             	sub    $0x4,%esp
f0108e7a:	ff 75 a4             	pushl  -0x5c(%ebp)
f0108e7d:	ff 75 a8             	pushl  -0x58(%ebp)
f0108e80:	50                   	push   %eax
f0108e81:	e8 95 16 00 00       	call   f010a51b <initialize_environment>
f0108e86:	83 c4 10             	add    $0x10,%esp

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f0108e89:	0f 20 d8             	mov    %cr3,%eax
f0108e8c:	89 45 98             	mov    %eax,-0x68(%ebp)
	return val;
f0108e8f:	8b 45 98             	mov    -0x68(%ebp),%eax
	// 	usually size_in_file < or = size_in_memory
	//	4- uint8 *virtual_address: start virtual address that this segment should be copied to it

	//[6] switch to user page directory
	// Hint: use rcr3() and lcr3()
	uint32 kern_phys_pgdir = rcr3() ;
f0108e92:	89 45 9c             	mov    %eax,-0x64(%ebp)
	lcr3(e->env_cr3) ;
f0108e95:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0108e9b:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f0108ea1:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0108ea7:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108ead:	0f 22 d8             	mov    %eax,%cr3

	//[7] load each program segment into user virtual space
	struct ProgramSegment* seg = NULL;  //use inside PROGRAM_SEGMENT_FOREACH as current segment information
f0108eb0:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	int segment_counter=0;
f0108eb7:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	uint32 remaining_ws_pages = (e->page_WS_max_size)-1; // we are reserving 1 page of WS for the stack that will be allocated just before the end of this function
f0108ebe:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0108ec4:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0108eca:	48                   	dec    %eax
f0108ecb:	89 45 dc             	mov    %eax,-0x24(%ebp)
	uint32 lastTableNumber=0xffffffff;
f0108ece:	c7 85 3c ff ff ff ff 	movl   $0xffffffff,-0xc4(%ebp)
f0108ed5:	ff ff ff 

	PROGRAM_SEGMENT_FOREACH(seg, ptr_program_start)
f0108ed8:	8d 85 f8 fe ff ff    	lea    -0x108(%ebp),%eax
f0108ede:	83 ec 08             	sub    $0x8,%esp
f0108ee1:	ff 75 b8             	pushl  -0x48(%ebp)
f0108ee4:	50                   	push   %eax
f0108ee5:	e8 9a 1d 00 00       	call   f010ac84 <PROGRAM_SEGMENT_FIRST>
f0108eea:	83 c4 0c             	add    $0xc,%esp
f0108eed:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f0108ef3:	8d 95 f8 fe ff ff    	lea    -0x108(%ebp),%edx
f0108ef9:	b9 05 00 00 00       	mov    $0x5,%ecx
f0108efe:	89 c7                	mov    %eax,%edi
f0108f00:	89 d6                	mov    %edx,%esi
f0108f02:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f0108f04:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f0108f0a:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0108f0d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0108f10:	8b 40 10             	mov    0x10(%eax),%eax
f0108f13:	83 f8 ff             	cmp    $0xffffffff,%eax
f0108f16:	75 07                	jne    f0108f1f <env_create+0x254>
f0108f18:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f0108f1f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0108f22:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0108f25:	e9 24 03 00 00       	jmp    f010924e <env_create+0x583>
	{
		segment_counter++;
f0108f2a:	ff 45 e0             	incl   -0x20(%ebp)
		LOG_STRING("===============================================================================");
		LOG_STATMENT(cprintf("SEGMENT #%d, size_in_file = %d, size_in_memory= %d, dest va = %x",segment_counter,seg->size_in_file,
				seg->size_in_memory, seg->virtual_address));
		LOG_STRING("===============================================================================");

		uint32 allocated_pages=0;
f0108f2d:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0108f34:	00 00 00 
		program_segment_alloc_map_copy_workingset(e, seg, &allocated_pages, remaining_ws_pages, &lastTableNumber);
f0108f37:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0108f3d:	83 ec 0c             	sub    $0xc,%esp
f0108f40:	8d 95 3c ff ff ff    	lea    -0xc4(%ebp),%edx
f0108f46:	52                   	push   %edx
f0108f47:	ff 75 dc             	pushl  -0x24(%ebp)
f0108f4a:	8d 95 20 ff ff ff    	lea    -0xe0(%ebp),%edx
f0108f50:	52                   	push   %edx
f0108f51:	ff 75 e4             	pushl  -0x1c(%ebp)
f0108f54:	50                   	push   %eax
f0108f55:	e8 2f 0e 00 00       	call   f0109d89 <program_segment_alloc_map_copy_workingset>
f0108f5a:	83 c4 20             	add    $0x20,%esp

		remaining_ws_pages -= allocated_pages;
f0108f5d:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0108f63:	29 45 dc             	sub    %eax,-0x24(%ebp)
		LOG_STATMENT(cprintf("SEGMENT: allocated pages in WS = %d",allocated_pages));
		LOG_STATMENT(cprintf("SEGMENT: remaining WS pages after allocation = %d",remaining_ws_pages));


		///[1] temporary initialize 1st page in memory then writing it on page file
		uint32 dataSrc_va = (uint32) seg->ptr_start;
f0108f66:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108f69:	8b 00                	mov    (%eax),%eax
f0108f6b:	89 45 94             	mov    %eax,-0x6c(%ebp)
		uint32 seg_va = (uint32) seg->virtual_address ;
f0108f6e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108f71:	8b 40 0c             	mov    0xc(%eax),%eax
f0108f74:	89 45 90             	mov    %eax,-0x70(%ebp)

		uint32 start_first_page = ROUNDDOWN(seg_va , PAGE_SIZE);
f0108f77:	8b 45 90             	mov    -0x70(%ebp),%eax
f0108f7a:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0108f7d:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0108f80:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108f85:	89 45 88             	mov    %eax,-0x78(%ebp)
		uint32 end_first_page = ROUNDUP(seg_va , PAGE_SIZE);
f0108f88:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f0108f8f:	8b 55 90             	mov    -0x70(%ebp),%edx
f0108f92:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0108f95:	01 d0                	add    %edx,%eax
f0108f97:	48                   	dec    %eax
f0108f98:	89 45 80             	mov    %eax,-0x80(%ebp)
f0108f9b:	8b 45 80             	mov    -0x80(%ebp),%eax
f0108f9e:	ba 00 00 00 00       	mov    $0x0,%edx
f0108fa3:	f7 75 84             	divl   -0x7c(%ebp)
f0108fa6:	8b 45 80             	mov    -0x80(%ebp),%eax
f0108fa9:	29 d0                	sub    %edx,%eax
f0108fab:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
		uint32 offset_first_page = seg_va  - start_first_page ;
f0108fb1:	8b 45 90             	mov    -0x70(%ebp),%eax
f0108fb4:	2b 45 88             	sub    -0x78(%ebp),%eax
f0108fb7:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)

		memset(ptr_temp_page , 0, PAGE_SIZE);
f0108fbd:	a1 48 be 2b f0       	mov    0xf02bbe48,%eax
f0108fc2:	83 ec 04             	sub    $0x4,%esp
f0108fc5:	68 00 10 00 00       	push   $0x1000
f0108fca:	6a 00                	push   $0x0
f0108fcc:	50                   	push   %eax
f0108fcd:	e8 59 60 02 00       	call   f012f02b <memset>
f0108fd2:	83 c4 10             	add    $0x10,%esp
		uint8 *src_ptr =  (uint8*) dataSrc_va;
f0108fd5:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0108fd8:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		uint8 *dst_ptr =  (uint8*) (ptr_temp_page + offset_first_page);
f0108fdb:	8b 15 48 be 2b f0    	mov    0xf02bbe48,%edx
f0108fe1:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0108fe7:	01 d0                	add    %edx,%eax
f0108fe9:	89 45 d0             	mov    %eax,-0x30(%ebp)
		int i;
		for (i = seg_va ; i < end_first_page ; i++, src_ptr++,dst_ptr++ )
f0108fec:	8b 45 90             	mov    -0x70(%ebp),%eax
f0108fef:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0108ff2:	eb 13                	jmp    f0109007 <env_create+0x33c>
		{
			*dst_ptr = *src_ptr ;
f0108ff4:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0108ff7:	8a 10                	mov    (%eax),%dl
f0108ff9:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0108ffc:	88 10                	mov    %dl,(%eax)

		memset(ptr_temp_page , 0, PAGE_SIZE);
		uint8 *src_ptr =  (uint8*) dataSrc_va;
		uint8 *dst_ptr =  (uint8*) (ptr_temp_page + offset_first_page);
		int i;
		for (i = seg_va ; i < end_first_page ; i++, src_ptr++,dst_ptr++ )
f0108ffe:	ff 45 cc             	incl   -0x34(%ebp)
f0109001:	ff 45 d4             	incl   -0x2c(%ebp)
f0109004:	ff 45 d0             	incl   -0x30(%ebp)
f0109007:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010900a:	3b 85 7c ff ff ff    	cmp    -0x84(%ebp),%eax
f0109010:	72 e2                	jb     f0108ff4 <env_create+0x329>
		{
			*dst_ptr = *src_ptr ;
		}

		if (pf_add_env_page(e, start_first_page, ptr_temp_page) == E_NO_PAGE_FILE_SPACE)
f0109012:	8b 15 48 be 2b f0    	mov    0xf02bbe48,%edx
f0109018:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010901e:	83 ec 04             	sub    $0x4,%esp
f0109021:	52                   	push   %edx
f0109022:	ff 75 88             	pushl  -0x78(%ebp)
f0109025:	50                   	push   %eax
f0109026:	e8 a0 ae ff ff       	call   f0103ecb <pf_add_env_page>
f010902b:	83 c4 10             	add    $0x10,%esp
f010902e:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0109031:	75 17                	jne    f010904a <env_create+0x37f>
			panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f0109033:	83 ec 04             	sub    $0x4,%esp
f0109036:	68 d4 2e 13 f0       	push   $0xf0132ed4
f010903b:	68 de 00 00 00       	push   $0xde
f0109040:	68 b7 2e 13 f0       	push   $0xf0132eb7
f0109045:	e8 66 71 ff ff       	call   f01001b0 <_panic>
		//LOG_STRING(" -------------------- PAGE FILE: 1st page is written");


		///[2] Start writing the segment ,from 2nd page until before last page, to page file ...

		uint32 start_last_page = ROUNDDOWN(seg_va  + seg->size_in_file, PAGE_SIZE) ;
f010904a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010904d:	8b 50 04             	mov    0x4(%eax),%edx
f0109050:	8b 45 90             	mov    -0x70(%ebp),%eax
f0109053:	01 d0                	add    %edx,%eax
f0109055:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f010905b:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0109061:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0109066:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
		uint32 end_last_page = seg_va  + seg->size_in_file;
f010906c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010906f:	8b 50 04             	mov    0x4(%eax),%edx
f0109072:	8b 45 90             	mov    -0x70(%ebp),%eax
f0109075:	01 d0                	add    %edx,%eax
f0109077:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)

		for (i = end_first_page ; i < start_last_page ; i+= PAGE_SIZE, src_ptr+= PAGE_SIZE)
f010907d:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0109083:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0109086:	eb 43                	jmp    f01090cb <env_create+0x400>
		{
			if (pf_add_env_page(e, i, src_ptr) == E_NO_PAGE_FILE_SPACE)
f0109088:	8b 55 cc             	mov    -0x34(%ebp),%edx
f010908b:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109091:	83 ec 04             	sub    $0x4,%esp
f0109094:	ff 75 d4             	pushl  -0x2c(%ebp)
f0109097:	52                   	push   %edx
f0109098:	50                   	push   %eax
f0109099:	e8 2d ae ff ff       	call   f0103ecb <pf_add_env_page>
f010909e:	83 c4 10             	add    $0x10,%esp
f01090a1:	83 f8 f8             	cmp    $0xfffffff8,%eax
f01090a4:	75 17                	jne    f01090bd <env_create+0x3f2>
				panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f01090a6:	83 ec 04             	sub    $0x4,%esp
f01090a9:	68 d4 2e 13 f0       	push   $0xf0132ed4
f01090ae:	68 eb 00 00 00       	push   $0xeb
f01090b3:	68 b7 2e 13 f0       	push   $0xf0132eb7
f01090b8:	e8 f3 70 ff ff       	call   f01001b0 <_panic>
		///[2] Start writing the segment ,from 2nd page until before last page, to page file ...

		uint32 start_last_page = ROUNDDOWN(seg_va  + seg->size_in_file, PAGE_SIZE) ;
		uint32 end_last_page = seg_va  + seg->size_in_file;

		for (i = end_first_page ; i < start_last_page ; i+= PAGE_SIZE, src_ptr+= PAGE_SIZE)
f01090bd:	81 45 cc 00 10 00 00 	addl   $0x1000,-0x34(%ebp)
f01090c4:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
f01090cb:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01090ce:	3b 85 70 ff ff ff    	cmp    -0x90(%ebp),%eax
f01090d4:	72 b2                	jb     f0109088 <env_create+0x3bd>
		}
		//LOG_STRING(" -------------------- PAGE FILE: 2nd page --> before last page are written");

		///[3] temporary initialize last page in memory then writing it on page file

		dst_ptr =  (uint8*) ptr_temp_page;
f01090d6:	a1 48 be 2b f0       	mov    0xf02bbe48,%eax
f01090db:	89 45 d0             	mov    %eax,-0x30(%ebp)
		memset(dst_ptr, 0, PAGE_SIZE);
f01090de:	83 ec 04             	sub    $0x4,%esp
f01090e1:	68 00 10 00 00       	push   $0x1000
f01090e6:	6a 00                	push   $0x0
f01090e8:	ff 75 d0             	pushl  -0x30(%ebp)
f01090eb:	e8 3b 5f 02 00       	call   f012f02b <memset>
f01090f0:	83 c4 10             	add    $0x10,%esp

		for (i = start_last_page ; i < end_last_page ; i++, src_ptr++,dst_ptr++ )
f01090f3:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01090f9:	89 45 cc             	mov    %eax,-0x34(%ebp)
f01090fc:	eb 13                	jmp    f0109111 <env_create+0x446>
		{
			*dst_ptr = *src_ptr;
f01090fe:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0109101:	8a 10                	mov    (%eax),%dl
f0109103:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0109106:	88 10                	mov    %dl,(%eax)
		///[3] temporary initialize last page in memory then writing it on page file

		dst_ptr =  (uint8*) ptr_temp_page;
		memset(dst_ptr, 0, PAGE_SIZE);

		for (i = start_last_page ; i < end_last_page ; i++, src_ptr++,dst_ptr++ )
f0109108:	ff 45 cc             	incl   -0x34(%ebp)
f010910b:	ff 45 d4             	incl   -0x2c(%ebp)
f010910e:	ff 45 d0             	incl   -0x30(%ebp)
f0109111:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0109114:	3b 85 6c ff ff ff    	cmp    -0x94(%ebp),%eax
f010911a:	72 e2                	jb     f01090fe <env_create+0x433>
		{
			*dst_ptr = *src_ptr;
		}
		if (pf_add_env_page(e, start_last_page, ptr_temp_page) == E_NO_PAGE_FILE_SPACE)
f010911c:	8b 15 48 be 2b f0    	mov    0xf02bbe48,%edx
f0109122:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109128:	83 ec 04             	sub    $0x4,%esp
f010912b:	52                   	push   %edx
f010912c:	ff b5 70 ff ff ff    	pushl  -0x90(%ebp)
f0109132:	50                   	push   %eax
f0109133:	e8 93 ad ff ff       	call   f0103ecb <pf_add_env_page>
f0109138:	83 c4 10             	add    $0x10,%esp
f010913b:	83 f8 f8             	cmp    $0xfffffff8,%eax
f010913e:	75 17                	jne    f0109157 <env_create+0x48c>
			panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f0109140:	83 ec 04             	sub    $0x4,%esp
f0109143:	68 d4 2e 13 f0       	push   $0xf0132ed4
f0109148:	68 fa 00 00 00       	push   $0xfa
f010914d:	68 b7 2e 13 f0       	push   $0xf0132eb7
f0109152:	e8 59 70 ff ff       	call   f01001b0 <_panic>

		//LOG_STRING(" -------------------- PAGE FILE: last page is written");

		///[4] writing the remaining seg->size_in_memory pages to disk

		uint32 start_remaining_area = ROUNDUP(seg_va + seg->size_in_file,PAGE_SIZE) ;
f0109157:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f010915e:	10 00 00 
f0109161:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109164:	8b 50 04             	mov    0x4(%eax),%edx
f0109167:	8b 45 90             	mov    -0x70(%ebp),%eax
f010916a:	01 c2                	add    %eax,%edx
f010916c:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0109172:	01 d0                	add    %edx,%eax
f0109174:	48                   	dec    %eax
f0109175:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f010917b:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0109181:	ba 00 00 00 00       	mov    $0x0,%edx
f0109186:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f010918c:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0109192:	29 d0                	sub    %edx,%eax
f0109194:	89 45 c8             	mov    %eax,-0x38(%ebp)
		uint32 remainingLength = (seg_va + seg->size_in_memory) - start_remaining_area ;
f0109197:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010919a:	8b 50 08             	mov    0x8(%eax),%edx
f010919d:	8b 45 90             	mov    -0x70(%ebp),%eax
f01091a0:	01 d0                	add    %edx,%eax
f01091a2:	2b 45 c8             	sub    -0x38(%ebp),%eax
f01091a5:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)

		for (i=0 ; i < ROUNDUP(remainingLength,PAGE_SIZE) ;i+= PAGE_SIZE, start_remaining_area += PAGE_SIZE)
f01091ab:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f01091b2:	eb 41                	jmp    f01091f5 <env_create+0x52a>
		{
			if (pf_add_empty_env_page(e, start_remaining_area, 1) == E_NO_PAGE_FILE_SPACE)
f01091b4:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01091ba:	83 ec 04             	sub    $0x4,%esp
f01091bd:	6a 01                	push   $0x1
f01091bf:	ff 75 c8             	pushl  -0x38(%ebp)
f01091c2:	50                   	push   %eax
f01091c3:	e8 cd ab ff ff       	call   f0103d95 <pf_add_empty_env_page>
f01091c8:	83 c4 10             	add    $0x10,%esp
f01091cb:	83 f8 f8             	cmp    $0xfffffff8,%eax
f01091ce:	75 17                	jne    f01091e7 <env_create+0x51c>
				panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f01091d0:	83 ec 04             	sub    $0x4,%esp
f01091d3:	68 d4 2e 13 f0       	push   $0xf0132ed4
f01091d8:	68 07 01 00 00       	push   $0x107
f01091dd:	68 b7 2e 13 f0       	push   $0xf0132eb7
f01091e2:	e8 c9 6f ff ff       	call   f01001b0 <_panic>
		///[4] writing the remaining seg->size_in_memory pages to disk

		uint32 start_remaining_area = ROUNDUP(seg_va + seg->size_in_file,PAGE_SIZE) ;
		uint32 remainingLength = (seg_va + seg->size_in_memory) - start_remaining_area ;

		for (i=0 ; i < ROUNDUP(remainingLength,PAGE_SIZE) ;i+= PAGE_SIZE, start_remaining_area += PAGE_SIZE)
f01091e7:	81 45 cc 00 10 00 00 	addl   $0x1000,-0x34(%ebp)
f01091ee:	81 45 c8 00 10 00 00 	addl   $0x1000,-0x38(%ebp)
f01091f5:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f01091fc:	10 00 00 
f01091ff:	8b 95 60 ff ff ff    	mov    -0xa0(%ebp),%edx
f0109205:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f010920b:	01 d0                	add    %edx,%eax
f010920d:	48                   	dec    %eax
f010920e:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f0109214:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f010921a:	ba 00 00 00 00       	mov    $0x0,%edx
f010921f:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f0109225:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f010922b:	29 d0                	sub    %edx,%eax
f010922d:	89 c2                	mov    %eax,%edx
f010922f:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0109232:	39 c2                	cmp    %eax,%edx
f0109234:	0f 87 7a ff ff ff    	ja     f01091b4 <env_create+0x4e9>
	struct ProgramSegment* seg = NULL;  //use inside PROGRAM_SEGMENT_FOREACH as current segment information
	int segment_counter=0;
	uint32 remaining_ws_pages = (e->page_WS_max_size)-1; // we are reserving 1 page of WS for the stack that will be allocated just before the end of this function
	uint32 lastTableNumber=0xffffffff;

	PROGRAM_SEGMENT_FOREACH(seg, ptr_program_start)
f010923a:	83 ec 08             	sub    $0x8,%esp
f010923d:	ff 75 b8             	pushl  -0x48(%ebp)
f0109240:	ff 75 e4             	pushl  -0x1c(%ebp)
f0109243:	e8 31 19 00 00       	call   f010ab79 <PROGRAM_SEGMENT_NEXT>
f0109248:	83 c4 10             	add    $0x10,%esp
f010924b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010924e:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0109252:	0f 85 d2 fc ff ff    	jne    f0108f2a <env_create+0x25f>
		//So, get_page_table should return the existing table
		get_page_table(e->env_page_directory, virtual_address, &ptr_page_table);
		ptr_page_table[PTX(virtual_address)] &= (~PERM_MODIFIED);
	}
#else
	int i=0;
f0109258:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
	for(;i<(e->page_WS_max_size); i++)
f010925f:	e9 a7 00 00 00       	jmp    f010930b <env_create+0x640>
	{
		if(e->ptr_pageWorkingSet[i].empty == 0)
f0109264:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f010926a:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f010926d:	89 d0                	mov    %edx,%eax
f010926f:	01 c0                	add    %eax,%eax
f0109271:	01 d0                	add    %edx,%eax
f0109273:	c1 e0 03             	shl    $0x3,%eax
f0109276:	01 c8                	add    %ecx,%eax
f0109278:	05 bc 00 00 00       	add    $0xbc,%eax
f010927d:	8a 00                	mov    (%eax),%al
f010927f:	84 c0                	test   %al,%al
f0109281:	0f 85 81 00 00 00    	jne    f0109308 <env_create+0x63d>
		{
			uint32 virtual_address = e->ptr_pageWorkingSet[i].virtual_address;
f0109287:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f010928d:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0109290:	89 d0                	mov    %edx,%eax
f0109292:	01 c0                	add    %eax,%eax
f0109294:	01 d0                	add    %edx,%eax
f0109296:	c1 e0 03             	shl    $0x3,%eax
f0109299:	01 c8                	add    %ecx,%eax
f010929b:	05 b8 00 00 00       	add    $0xb8,%eax
f01092a0:	8b 00                	mov    (%eax),%eax
f01092a2:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
			uint32* ptr_page_table;

			//Here, page tables of all working set pages should be exist in memory
			//So, get_page_table should return the existing table
			get_page_table(e->env_page_directory, virtual_address, &ptr_page_table);
f01092a8:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01092ae:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f01092b4:	83 ec 04             	sub    $0x4,%esp
f01092b7:	8d 95 1c ff ff ff    	lea    -0xe4(%ebp),%edx
f01092bd:	52                   	push   %edx
f01092be:	ff b5 54 ff ff ff    	pushl  -0xac(%ebp)
f01092c4:	50                   	push   %eax
f01092c5:	e8 1d e2 ff ff       	call   f01074e7 <get_page_table>
f01092ca:	83 c4 10             	add    $0x10,%esp
			ptr_page_table[PTX(virtual_address)] &= (~PERM_MODIFIED);
f01092cd:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f01092d3:	8b 95 54 ff ff ff    	mov    -0xac(%ebp),%edx
f01092d9:	c1 ea 0c             	shr    $0xc,%edx
f01092dc:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01092e2:	c1 e2 02             	shl    $0x2,%edx
f01092e5:	01 d0                	add    %edx,%eax
f01092e7:	8b 95 1c ff ff ff    	mov    -0xe4(%ebp),%edx
f01092ed:	8b 8d 54 ff ff ff    	mov    -0xac(%ebp),%ecx
f01092f3:	c1 e9 0c             	shr    $0xc,%ecx
f01092f6:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
f01092fc:	c1 e1 02             	shl    $0x2,%ecx
f01092ff:	01 ca                	add    %ecx,%edx
f0109301:	8b 12                	mov    (%edx),%edx
f0109303:	83 e2 bf             	and    $0xffffffbf,%edx
f0109306:	89 10                	mov    %edx,(%eax)
		get_page_table(e->env_page_directory, virtual_address, &ptr_page_table);
		ptr_page_table[PTX(virtual_address)] &= (~PERM_MODIFIED);
	}
#else
	int i=0;
	for(;i<(e->page_WS_max_size); i++)
f0109308:	ff 45 c4             	incl   -0x3c(%ebp)
f010930b:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109311:	8b 90 7c d5 01 00    	mov    0x1d57c(%eax),%edx
f0109317:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010931a:	39 c2                	cmp    %eax,%edx
f010931c:	0f 87 42 ff ff ff    	ja     f0109264 <env_create+0x599>
	//unsigned int * ptr = (unsigned int * )0x801084;
	//LOG_STATMENT(cprintf("contents at address %x=%x",0x801084, *ptr));

	//[8] now set the entry point of the environment
	//Hint: use set_environment_entry_point()
	set_environment_entry_point(e, ptr_user_program_info->ptr_start);
f0109322:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0109325:	8b 50 08             	mov    0x8(%eax),%edx
f0109328:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010932e:	83 ec 08             	sub    $0x8,%esp
f0109331:	52                   	push   %edx
f0109332:	50                   	push   %eax
f0109333:	e8 01 18 00 00       	call   f010ab39 <set_environment_entry_point>
f0109338:	83 c4 10             	add    $0x10,%esp

	//[9] Allocate and map one page for the program's initial stack
	// at virtual address USTACKTOP - PAGE_SIZE.
	// we assume that the stack is counted in the environment working set

	e->initNumStackPages = 1;
f010933b:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109341:	c7 80 a4 00 00 00 01 	movl   $0x1,0xa4(%eax)
f0109348:	00 00 00 

	// map the allocated page
	uint32 ptr_user_stack_bottom = (USTACKTOP - 1*PAGE_SIZE);
f010934b:	c7 85 50 ff ff ff 00 	movl   $0xeebfd000,-0xb0(%ebp)
f0109352:	d0 bf ee 

	uint32 stackVa = USTACKTOP - PAGE_SIZE;
f0109355:	c7 45 c0 00 d0 bf ee 	movl   $0xeebfd000,-0x40(%ebp)
	for(;stackVa >= ptr_user_stack_bottom; stackVa -= PAGE_SIZE)
f010935c:	e9 3c 05 00 00       	jmp    f010989d <env_create+0xbd2>
	{
		struct FrameInfo *pp = NULL;
f0109361:	c7 85 18 ff ff ff 00 	movl   $0x0,-0xe8(%ebp)
f0109368:	00 00 00 
		allocate_frame(&pp);
f010936b:	83 ec 0c             	sub    $0xc,%esp
f010936e:	8d 85 18 ff ff ff    	lea    -0xe8(%ebp),%eax
f0109374:	50                   	push   %eax
f0109375:	e8 ab df ff ff       	call   f0107325 <allocate_frame>
f010937a:	83 c4 10             	add    $0x10,%esp

		loadtime_map_frame(e->env_page_directory, pp, stackVa, PERM_USER | PERM_WRITEABLE);
f010937d:	8b 95 18 ff ff ff    	mov    -0xe8(%ebp),%edx
f0109383:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109389:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010938f:	6a 06                	push   $0x6
f0109391:	ff 75 c0             	pushl  -0x40(%ebp)
f0109394:	52                   	push   %edx
f0109395:	50                   	push   %eax
f0109396:	e8 db e4 ff ff       	call   f0107876 <loadtime_map_frame>
f010939b:	83 c4 10             	add    $0x10,%esp

		//initialize new page by 0's
		memset((void*)stackVa, 0, PAGE_SIZE);
f010939e:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01093a1:	83 ec 04             	sub    $0x4,%esp
f01093a4:	68 00 10 00 00       	push   $0x1000
f01093a9:	6a 00                	push   $0x0
f01093ab:	50                   	push   %eax
f01093ac:	e8 7a 5c 02 00       	call   f012f02b <memset>
f01093b1:	83 c4 10             	add    $0x10,%esp
			else
			{
				e->page_last_WS_element = NULL;
			}
#else
			env_page_ws_set_entry(e, e->page_last_WS_index, (uint32) stackVa) ;
f01093b4:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01093ba:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f01093c0:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01093c6:	83 ec 04             	sub    $0x4,%esp
f01093c9:	ff 75 c0             	pushl  -0x40(%ebp)
f01093cc:	52                   	push   %edx
f01093cd:	50                   	push   %eax
f01093ce:	e8 3f ef ff ff       	call   f0108312 <env_page_ws_set_entry>
f01093d3:	83 c4 10             	add    $0x10,%esp
			uint32 lastWSIndex = e->page_last_WS_index ++;
f01093d6:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f01093dc:	8b 82 78 d5 01 00    	mov    0x1d578(%edx),%eax
f01093e2:	8d 48 01             	lea    0x1(%eax),%ecx
f01093e5:	89 8a 78 d5 01 00    	mov    %ecx,0x1d578(%edx)
f01093eb:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
			e->page_last_WS_index %= (e->page_WS_max_size);
f01093f1:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f01093f7:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01093fd:	8b 80 78 d5 01 00    	mov    0x1d578(%eax),%eax
f0109403:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f0109409:	8b 9a 7c d5 01 00    	mov    0x1d57c(%edx),%ebx
f010940f:	ba 00 00 00 00       	mov    $0x0,%edx
f0109414:	f7 f3                	div    %ebx
f0109416:	89 d0                	mov    %edx,%eax
f0109418:	89 81 78 d5 01 00    	mov    %eax,0x1d578(%ecx)
#endif
			//2020
			if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f010941e:	83 ec 0c             	sub    $0xc,%esp
f0109421:	6a 02                	push   $0x2
f0109423:	e8 57 43 00 00       	call   f010d77f <isPageReplacmentAlgorithmLRU>
f0109428:	83 c4 10             	add    $0x10,%esp
f010942b:	85 c0                	test   %eax,%eax
f010942d:	0f 84 46 04 00 00    	je     f0109879 <env_create+0xbae>
				else
				{
					LIST_INSERT_HEAD(&(e->SecondList), wse);
				}
#else
				LIST_REMOVE(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[lastWSIndex]));
f0109433:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f0109439:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f010943f:	89 d0                	mov    %edx,%eax
f0109441:	01 c0                	add    %eax,%eax
f0109443:	01 d0                	add    %edx,%eax
f0109445:	c1 e0 03             	shl    $0x3,%eax
f0109448:	05 b0 00 00 00       	add    $0xb0,%eax
f010944d:	01 c8                	add    %ecx,%eax
f010944f:	83 c0 08             	add    $0x8,%eax
f0109452:	85 c0                	test   %eax,%eax
f0109454:	75 17                	jne    f010946d <env_create+0x7a2>
f0109456:	83 ec 04             	sub    $0x4,%esp
f0109459:	68 19 2f 13 f0       	push   $0xf0132f19
f010945e:	68 67 01 00 00       	push   $0x167
f0109463:	68 b7 2e 13 f0       	push   $0xf0132eb7
f0109468:	e8 43 6d ff ff       	call   f01001b0 <_panic>
f010946d:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f0109473:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109479:	89 d0                	mov    %edx,%eax
f010947b:	01 c0                	add    %eax,%eax
f010947d:	01 d0                	add    %edx,%eax
f010947f:	c1 e0 03             	shl    $0x3,%eax
f0109482:	01 c8                	add    %ecx,%eax
f0109484:	05 c8 00 00 00       	add    $0xc8,%eax
f0109489:	8b 00                	mov    (%eax),%eax
f010948b:	85 c0                	test   %eax,%eax
f010948d:	74 41                	je     f01094d0 <env_create+0x805>
f010948f:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f0109495:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f010949b:	89 d0                	mov    %edx,%eax
f010949d:	01 c0                	add    %eax,%eax
f010949f:	01 d0                	add    %edx,%eax
f01094a1:	c1 e0 03             	shl    $0x3,%eax
f01094a4:	01 c8                	add    %ecx,%eax
f01094a6:	05 c8 00 00 00       	add    $0xc8,%eax
f01094ab:	8b 10                	mov    (%eax),%edx
f01094ad:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f01094b3:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f01094b9:	89 c8                	mov    %ecx,%eax
f01094bb:	01 c0                	add    %eax,%eax
f01094bd:	01 c8                	add    %ecx,%eax
f01094bf:	c1 e0 03             	shl    $0x3,%eax
f01094c2:	01 d8                	add    %ebx,%eax
f01094c4:	05 cc 00 00 00       	add    $0xcc,%eax
f01094c9:	8b 00                	mov    (%eax),%eax
f01094cb:	89 42 14             	mov    %eax,0x14(%edx)
f01094ce:	eb 2a                	jmp    f01094fa <env_create+0x82f>
f01094d0:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f01094d6:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f01094dc:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f01094e2:	89 c8                	mov    %ecx,%eax
f01094e4:	01 c0                	add    %eax,%eax
f01094e6:	01 c8                	add    %ecx,%eax
f01094e8:	c1 e0 03             	shl    $0x3,%eax
f01094eb:	01 d8                	add    %ebx,%eax
f01094ed:	05 cc 00 00 00       	add    $0xcc,%eax
f01094f2:	8b 00                	mov    (%eax),%eax
f01094f4:	89 82 38 da 01 00    	mov    %eax,0x1da38(%edx)
f01094fa:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f0109500:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109506:	89 d0                	mov    %edx,%eax
f0109508:	01 c0                	add    %eax,%eax
f010950a:	01 d0                	add    %edx,%eax
f010950c:	c1 e0 03             	shl    $0x3,%eax
f010950f:	01 c8                	add    %ecx,%eax
f0109511:	05 cc 00 00 00       	add    $0xcc,%eax
f0109516:	8b 00                	mov    (%eax),%eax
f0109518:	85 c0                	test   %eax,%eax
f010951a:	74 41                	je     f010955d <env_create+0x892>
f010951c:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f0109522:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109528:	89 d0                	mov    %edx,%eax
f010952a:	01 c0                	add    %eax,%eax
f010952c:	01 d0                	add    %edx,%eax
f010952e:	c1 e0 03             	shl    $0x3,%eax
f0109531:	01 c8                	add    %ecx,%eax
f0109533:	05 cc 00 00 00       	add    $0xcc,%eax
f0109538:	8b 10                	mov    (%eax),%edx
f010953a:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f0109540:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f0109546:	89 c8                	mov    %ecx,%eax
f0109548:	01 c0                	add    %eax,%eax
f010954a:	01 c8                	add    %ecx,%eax
f010954c:	c1 e0 03             	shl    $0x3,%eax
f010954f:	01 d8                	add    %ebx,%eax
f0109551:	05 c8 00 00 00       	add    $0xc8,%eax
f0109556:	8b 00                	mov    (%eax),%eax
f0109558:	89 42 10             	mov    %eax,0x10(%edx)
f010955b:	eb 2a                	jmp    f0109587 <env_create+0x8bc>
f010955d:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f0109563:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f0109569:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f010956f:	89 c8                	mov    %ecx,%eax
f0109571:	01 c0                	add    %eax,%eax
f0109573:	01 c8                	add    %ecx,%eax
f0109575:	c1 e0 03             	shl    $0x3,%eax
f0109578:	01 d8                	add    %ebx,%eax
f010957a:	05 c8 00 00 00       	add    $0xc8,%eax
f010957f:	8b 00                	mov    (%eax),%eax
f0109581:	89 82 34 da 01 00    	mov    %eax,0x1da34(%edx)
f0109587:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f010958d:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109593:	89 d0                	mov    %edx,%eax
f0109595:	01 c0                	add    %eax,%eax
f0109597:	01 d0                	add    %edx,%eax
f0109599:	c1 e0 03             	shl    $0x3,%eax
f010959c:	01 c8                	add    %ecx,%eax
f010959e:	05 c8 00 00 00       	add    $0xc8,%eax
f01095a3:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01095a9:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f01095af:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f01095b5:	89 d0                	mov    %edx,%eax
f01095b7:	01 c0                	add    %eax,%eax
f01095b9:	01 d0                	add    %edx,%eax
f01095bb:	c1 e0 03             	shl    $0x3,%eax
f01095be:	01 c8                	add    %ecx,%eax
f01095c0:	05 cc 00 00 00       	add    $0xcc,%eax
f01095c5:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01095cb:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01095d1:	8b 90 40 da 01 00    	mov    0x1da40(%eax),%edx
f01095d7:	4a                   	dec    %edx
f01095d8:	89 90 40 da 01 00    	mov    %edx,0x1da40(%eax)
				//Now: we are sure that at least the top page in the stack will be added to Active list
				//Since we left 1 empty location in the Active list when we loaded the program segments
				if (LIST_SIZE(&(e->ActiveList)) < e->ActiveListSize)
f01095de:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01095e4:	8b 90 50 da 01 00    	mov    0x1da50(%eax),%edx
f01095ea:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01095f0:	8b 80 64 da 01 00    	mov    0x1da64(%eax),%eax
f01095f6:	39 c2                	cmp    %eax,%edx
f01095f8:	0f 83 40 01 00 00    	jae    f010973e <env_create+0xa73>
				{
					LIST_INSERT_HEAD(&(e->ActiveList), &(e->ptr_pageWorkingSet[lastWSIndex]));
f01095fe:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f0109604:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f010960a:	89 d0                	mov    %edx,%eax
f010960c:	01 c0                	add    %eax,%eax
f010960e:	01 d0                	add    %edx,%eax
f0109610:	c1 e0 03             	shl    $0x3,%eax
f0109613:	05 b0 00 00 00       	add    $0xb0,%eax
f0109618:	01 c8                	add    %ecx,%eax
f010961a:	83 c0 08             	add    $0x8,%eax
f010961d:	85 c0                	test   %eax,%eax
f010961f:	75 17                	jne    f0109638 <env_create+0x96d>
f0109621:	83 ec 04             	sub    $0x4,%esp
f0109624:	68 38 2f 13 f0       	push   $0xf0132f38
f0109629:	68 6c 01 00 00       	push   $0x16c
f010962e:	68 b7 2e 13 f0       	push   $0xf0132eb7
f0109633:	e8 78 6b ff ff       	call   f01001b0 <_panic>
f0109638:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f010963e:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109644:	8b 88 44 da 01 00    	mov    0x1da44(%eax),%ecx
f010964a:	8b 9d 4c ff ff ff    	mov    -0xb4(%ebp),%ebx
f0109650:	89 d8                	mov    %ebx,%eax
f0109652:	01 c0                	add    %eax,%eax
f0109654:	01 d8                	add    %ebx,%eax
f0109656:	c1 e0 03             	shl    $0x3,%eax
f0109659:	01 d0                	add    %edx,%eax
f010965b:	05 c8 00 00 00       	add    $0xc8,%eax
f0109660:	89 08                	mov    %ecx,(%eax)
f0109662:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f0109668:	89 c8                	mov    %ecx,%eax
f010966a:	01 c0                	add    %eax,%eax
f010966c:	01 c8                	add    %ecx,%eax
f010966e:	c1 e0 03             	shl    $0x3,%eax
f0109671:	01 d0                	add    %edx,%eax
f0109673:	05 c8 00 00 00       	add    $0xc8,%eax
f0109678:	8b 00                	mov    (%eax),%eax
f010967a:	85 c0                	test   %eax,%eax
f010967c:	74 30                	je     f01096ae <env_create+0x9e3>
f010967e:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109684:	8b 90 44 da 01 00    	mov    0x1da44(%eax),%edx
f010968a:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f0109690:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f0109696:	89 c8                	mov    %ecx,%eax
f0109698:	01 c0                	add    %eax,%eax
f010969a:	01 c8                	add    %ecx,%eax
f010969c:	c1 e0 03             	shl    $0x3,%eax
f010969f:	05 b0 00 00 00       	add    $0xb0,%eax
f01096a4:	01 d8                	add    %ebx,%eax
f01096a6:	83 c0 08             	add    $0x8,%eax
f01096a9:	89 42 14             	mov    %eax,0x14(%edx)
f01096ac:	eb 2b                	jmp    f01096d9 <env_create+0xa0e>
f01096ae:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f01096b4:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f01096ba:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f01096c0:	89 c8                	mov    %ecx,%eax
f01096c2:	01 c0                	add    %eax,%eax
f01096c4:	01 c8                	add    %ecx,%eax
f01096c6:	c1 e0 03             	shl    $0x3,%eax
f01096c9:	05 b0 00 00 00       	add    $0xb0,%eax
f01096ce:	01 d8                	add    %ebx,%eax
f01096d0:	83 c0 08             	add    $0x8,%eax
f01096d3:	89 82 48 da 01 00    	mov    %eax,0x1da48(%edx)
f01096d9:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f01096df:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f01096e5:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f01096eb:	89 c8                	mov    %ecx,%eax
f01096ed:	01 c0                	add    %eax,%eax
f01096ef:	01 c8                	add    %ecx,%eax
f01096f1:	c1 e0 03             	shl    $0x3,%eax
f01096f4:	05 b0 00 00 00       	add    $0xb0,%eax
f01096f9:	01 d8                	add    %ebx,%eax
f01096fb:	83 c0 08             	add    $0x8,%eax
f01096fe:	89 82 44 da 01 00    	mov    %eax,0x1da44(%edx)
f0109704:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f010970a:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109710:	89 d0                	mov    %edx,%eax
f0109712:	01 c0                	add    %eax,%eax
f0109714:	01 d0                	add    %edx,%eax
f0109716:	c1 e0 03             	shl    $0x3,%eax
f0109719:	01 c8                	add    %ecx,%eax
f010971b:	05 cc 00 00 00       	add    $0xcc,%eax
f0109720:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0109726:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010972c:	8b 90 50 da 01 00    	mov    0x1da50(%eax),%edx
f0109732:	42                   	inc    %edx
f0109733:	89 90 50 da 01 00    	mov    %edx,0x1da50(%eax)
f0109739:	e9 3b 01 00 00       	jmp    f0109879 <env_create+0xbae>
				}
				else
				{
					LIST_INSERT_HEAD(&(e->SecondList), &(e->ptr_pageWorkingSet[lastWSIndex]));
f010973e:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f0109744:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f010974a:	89 d0                	mov    %edx,%eax
f010974c:	01 c0                	add    %eax,%eax
f010974e:	01 d0                	add    %edx,%eax
f0109750:	c1 e0 03             	shl    $0x3,%eax
f0109753:	05 b0 00 00 00       	add    $0xb0,%eax
f0109758:	01 c8                	add    %ecx,%eax
f010975a:	83 c0 08             	add    $0x8,%eax
f010975d:	85 c0                	test   %eax,%eax
f010975f:	75 17                	jne    f0109778 <env_create+0xaad>
f0109761:	83 ec 04             	sub    $0x4,%esp
f0109764:	68 38 2f 13 f0       	push   $0xf0132f38
f0109769:	68 70 01 00 00       	push   $0x170
f010976e:	68 b7 2e 13 f0       	push   $0xf0132eb7
f0109773:	e8 38 6a ff ff       	call   f01001b0 <_panic>
f0109778:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f010977e:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109784:	8b 88 54 da 01 00    	mov    0x1da54(%eax),%ecx
f010978a:	8b 9d 4c ff ff ff    	mov    -0xb4(%ebp),%ebx
f0109790:	89 d8                	mov    %ebx,%eax
f0109792:	01 c0                	add    %eax,%eax
f0109794:	01 d8                	add    %ebx,%eax
f0109796:	c1 e0 03             	shl    $0x3,%eax
f0109799:	01 d0                	add    %edx,%eax
f010979b:	05 c8 00 00 00       	add    $0xc8,%eax
f01097a0:	89 08                	mov    %ecx,(%eax)
f01097a2:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f01097a8:	89 c8                	mov    %ecx,%eax
f01097aa:	01 c0                	add    %eax,%eax
f01097ac:	01 c8                	add    %ecx,%eax
f01097ae:	c1 e0 03             	shl    $0x3,%eax
f01097b1:	01 d0                	add    %edx,%eax
f01097b3:	05 c8 00 00 00       	add    $0xc8,%eax
f01097b8:	8b 00                	mov    (%eax),%eax
f01097ba:	85 c0                	test   %eax,%eax
f01097bc:	74 30                	je     f01097ee <env_create+0xb23>
f01097be:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01097c4:	8b 90 54 da 01 00    	mov    0x1da54(%eax),%edx
f01097ca:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f01097d0:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f01097d6:	89 c8                	mov    %ecx,%eax
f01097d8:	01 c0                	add    %eax,%eax
f01097da:	01 c8                	add    %ecx,%eax
f01097dc:	c1 e0 03             	shl    $0x3,%eax
f01097df:	05 b0 00 00 00       	add    $0xb0,%eax
f01097e4:	01 d8                	add    %ebx,%eax
f01097e6:	83 c0 08             	add    $0x8,%eax
f01097e9:	89 42 14             	mov    %eax,0x14(%edx)
f01097ec:	eb 2b                	jmp    f0109819 <env_create+0xb4e>
f01097ee:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f01097f4:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f01097fa:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f0109800:	89 c8                	mov    %ecx,%eax
f0109802:	01 c0                	add    %eax,%eax
f0109804:	01 c8                	add    %ecx,%eax
f0109806:	c1 e0 03             	shl    $0x3,%eax
f0109809:	05 b0 00 00 00       	add    $0xb0,%eax
f010980e:	01 d8                	add    %ebx,%eax
f0109810:	83 c0 08             	add    $0x8,%eax
f0109813:	89 82 58 da 01 00    	mov    %eax,0x1da58(%edx)
f0109819:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f010981f:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f0109825:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f010982b:	89 c8                	mov    %ecx,%eax
f010982d:	01 c0                	add    %eax,%eax
f010982f:	01 c8                	add    %ecx,%eax
f0109831:	c1 e0 03             	shl    $0x3,%eax
f0109834:	05 b0 00 00 00       	add    $0xb0,%eax
f0109839:	01 d8                	add    %ebx,%eax
f010983b:	83 c0 08             	add    $0x8,%eax
f010983e:	89 82 54 da 01 00    	mov    %eax,0x1da54(%edx)
f0109844:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f010984a:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109850:	89 d0                	mov    %edx,%eax
f0109852:	01 c0                	add    %eax,%eax
f0109854:	01 d0                	add    %edx,%eax
f0109856:	c1 e0 03             	shl    $0x3,%eax
f0109859:	01 c8                	add    %ecx,%eax
f010985b:	05 cc 00 00 00       	add    $0xcc,%eax
f0109860:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0109866:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010986c:	8b 90 60 da 01 00    	mov    0x1da60(%eax),%edx
f0109872:	42                   	inc    %edx
f0109873:	89 90 60 da 01 00    	mov    %edx,0x1da60(%eax)


			//addTableToTableWorkingSet(e, ROUNDDOWN((uint32)stackVa, PAGE_SIZE*1024));

			//ADD this page to the page file
			int success = pf_add_empty_env_page(e, (uint32)stackVa, 1);
f0109879:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010987f:	83 ec 04             	sub    $0x4,%esp
f0109882:	6a 01                	push   $0x1
f0109884:	ff 75 c0             	pushl  -0x40(%ebp)
f0109887:	50                   	push   %eax
f0109888:	e8 08 a5 ff ff       	call   f0103d95 <pf_add_empty_env_page>
f010988d:	83 c4 10             	add    $0x10,%esp
f0109890:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)

	// map the allocated page
	uint32 ptr_user_stack_bottom = (USTACKTOP - 1*PAGE_SIZE);

	uint32 stackVa = USTACKTOP - PAGE_SIZE;
	for(;stackVa >= ptr_user_stack_bottom; stackVa -= PAGE_SIZE)
f0109896:	81 6d c0 00 10 00 00 	subl   $0x1000,-0x40(%ebp)
f010989d:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01098a0:	3b 85 50 ff ff ff    	cmp    -0xb0(%ebp),%eax
f01098a6:	0f 83 b5 fa ff ff    	jae    f0109361 <env_create+0x696>

	}

	//2020
	//LRU Lists: Reset PRESENT bit of all pages in Second List
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f01098ac:	83 ec 0c             	sub    $0xc,%esp
f01098af:	6a 02                	push   $0x2
f01098b1:	e8 c9 3e 00 00       	call   f010d77f <isPageReplacmentAlgorithmLRU>
f01098b6:	83 c4 10             	add    $0x10,%esp
f01098b9:	85 c0                	test   %eax,%eax
f01098bb:	74 75                	je     f0109932 <env_create+0xc67>
	{
		struct WorkingSetElement * elm = NULL;
f01098bd:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
		LIST_FOREACH(elm, &(e->SecondList))
f01098c4:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01098ca:	8b 80 54 da 01 00    	mov    0x1da54(%eax),%eax
f01098d0:	89 45 bc             	mov    %eax,-0x44(%ebp)
f01098d3:	eb 2e                	jmp    f0109903 <env_create+0xc38>
		{
			//set it's PRESENT bit to 0
			pt_set_page_permissions(e->env_page_directory, elm->virtual_address, 0, PERM_PRESENT);
f01098d5:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01098d8:	8b 10                	mov    (%eax),%edx
f01098da:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01098e0:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f01098e6:	6a 01                	push   $0x1
f01098e8:	6a 00                	push   $0x0
f01098ea:	52                   	push   %edx
f01098eb:	50                   	push   %eax
f01098ec:	e8 2e e7 ff ff       	call   f010801f <pt_set_page_permissions>
f01098f1:	83 c4 10             	add    $0x10,%esp
	//2020
	//LRU Lists: Reset PRESENT bit of all pages in Second List
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
	{
		struct WorkingSetElement * elm = NULL;
		LIST_FOREACH(elm, &(e->SecondList))
f01098f4:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01098fa:	8b 80 5c da 01 00    	mov    0x1da5c(%eax),%eax
f0109900:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0109903:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109909:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f010990d:	74 08                	je     f0109917 <env_create+0xc4c>
f010990f:	8b 55 bc             	mov    -0x44(%ebp),%edx
f0109912:	8b 52 10             	mov    0x10(%edx),%edx
f0109915:	eb 05                	jmp    f010991c <env_create+0xc51>
f0109917:	ba 00 00 00 00       	mov    $0x0,%edx
f010991c:	89 90 5c da 01 00    	mov    %edx,0x1da5c(%eax)
f0109922:	8b 80 5c da 01 00    	mov    0x1da5c(%eax),%eax
f0109928:	85 c0                	test   %eax,%eax
f010992a:	75 a9                	jne    f01098d5 <env_create+0xc0a>
f010992c:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f0109930:	75 a3                	jne    f01098d5 <env_create+0xc0a>
f0109932:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0109935:	89 45 a0             	mov    %eax,-0x60(%ebp)
f0109938:	8b 45 a0             	mov    -0x60(%ebp),%eax
f010993b:	0f 22 d8             	mov    %eax,%cr3
	lcr3(kern_phys_pgdir) ;

	//[11] 2012, add the new env we have just created to the scheduler NEW queue
	//	   2015: moved to the scheduler! since env_create() is responsible for creating the env only

	return e;
f010993e:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
}
f0109944:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0109947:	5b                   	pop    %ebx
f0109948:	5e                   	pop    %esi
f0109949:	5f                   	pop    %edi
f010994a:	5d                   	pop    %ebp
f010994b:	c3                   	ret    

f010994c <env_run>:
// Used to run the given environment "e", simply by
// context switch from curenv to env e.
//  (This function does not return.)
//
void env_run(struct Env *e)
{
f010994c:	55                   	push   %ebp
f010994d:	89 e5                	mov    %esp,%ebp
f010994f:	83 ec 18             	sub    $0x18,%esp
	if(curenv != e)
f0109952:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f0109957:	3b 45 08             	cmp    0x8(%ebp),%eax
f010995a:	74 2e                	je     f010998a <env_run+0x3e>
	{
		curenv = e ;
f010995c:	8b 45 08             	mov    0x8(%ebp),%eax
f010995f:	a3 74 31 25 f0       	mov    %eax,0xf0253174
		curenv->env_runs++ ;
f0109964:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f0109969:	8b 90 8c da 01 00    	mov    0x1da8c(%eax),%edx
f010996f:	42                   	inc    %edx
f0109970:	89 90 8c da 01 00    	mov    %edx,0x1da8c(%eax)
		lcr3(curenv->env_cr3) ;
f0109976:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f010997b:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f0109981:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0109984:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109987:	0f 22 d8             	mov    %eax,%cr3
	}
	curenv->env_status = ENV_RUNNABLE;
f010998a:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f010998f:	c7 40 54 02 00 00 00 	movl   $0x2,0x54(%eax)
	//uint16 cnt0 = kclock_read_cnt0();
	//cprintf("env_run %s [%d]: Cnt BEFORE RESUME = %d\n", curenv->prog_name,curenv->env_id, cnt0);
	//kclock_start();

	kclock_resume();
f0109996:	e8 5c b1 ff ff       	call   f0104af7 <kclock_resume>

	//cprintf("env_run %s [%d]: Cnt AFTER RESUME = %d\n", curenv->prog_name,curenv->env_id, cnt0);
	env_pop_tf(&(curenv->env_tf));
f010999b:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f01099a0:	83 ec 0c             	sub    $0xc,%esp
f01099a3:	50                   	push   %eax
f01099a4:	e8 f5 00 00 00       	call   f0109a9e <env_pop_tf>

f01099a9 <env_free>:
// 3) FREE ENV FROM THE SYSTEM:
//===============================
// Frees environment "e" and all memory it uses.
//
void env_free(struct Env *e)
{
f01099a9:	55                   	push   %ebp
f01099aa:	89 e5                	mov    %esp,%ebp
	/*REMOVE THIS LINE BEFORE START CODING*/
	return;
f01099ac:	90                   	nop
	// [10] free the environment (return it back to the free environment list)
	/*(ALREADY DONE for you)*/
	free_environment(e); /*(ALREADY DONE for you)*/ // (frees the environment (returns it back to the free environment list))
	/*========================*/

}
f01099ad:	5d                   	pop    %ebp
f01099ae:	c3                   	ret    

f01099af <env_exit>:
//============================
// 4) PLACE ENV IN EXIT QUEUE:
//============================
/*2015*///Just add the "curenv" to the EXIT list, then reinvoke the scheduler
void env_exit()
{
f01099af:	55                   	push   %ebp
f01099b0:	89 e5                	mov    %esp,%ebp
f01099b2:	83 ec 08             	sub    $0x8,%esp
	sched_exit_env(curenv->env_id);
f01099b5:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f01099ba:	8b 40 4c             	mov    0x4c(%eax),%eax
f01099bd:	83 ec 0c             	sub    $0xc,%esp
f01099c0:	50                   	push   %eax
f01099c1:	e8 0b ba ff ff       	call   f01053d1 <sched_exit_env>
f01099c6:	83 c4 10             	add    $0x10,%esp
	fos_scheduler();
f01099c9:	e8 4b c8 ff ff       	call   f0106219 <fos_scheduler>

f01099ce <envid2env>:
//   0 on success, -E_BAD_ENV on error.
//   On success, sets *penv to the environment.
//   On error, sets *penv to NULL.
//
int envid2env(int32  envid, struct Env **env_store, bool checkperm)
{
f01099ce:	55                   	push   %ebp
f01099cf:	89 e5                	mov    %esp,%ebp
f01099d1:	53                   	push   %ebx
f01099d2:	83 ec 14             	sub    $0x14,%esp
	struct Env *e;

	// If envid is zero, return the current environment.
	if (envid == 0) {
f01099d5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01099d9:	75 15                	jne    f01099f0 <envid2env+0x22>
		*env_store = curenv;
f01099db:	8b 15 74 31 25 f0    	mov    0xf0253174,%edx
f01099e1:	8b 45 0c             	mov    0xc(%ebp),%eax
f01099e4:	89 10                	mov    %edx,(%eax)
		return 0;
f01099e6:	b8 00 00 00 00       	mov    $0x0,%eax
f01099eb:	e9 a9 00 00 00       	jmp    f0109a99 <envid2env+0xcb>
	// Look up the Env structure via the index part of the envid,
	// then check the env_id field in that struct Env
	// to ensure that the envid is not stale
	// (i.e., does not refer to a _previous_ environment
	// that used the same slot in the envs[] array).
	e = &envs[ENVX(envid)];
f01099f0:	8b 1d 70 31 25 f0    	mov    0xf0253170,%ebx
f01099f6:	83 ec 0c             	sub    $0xc,%esp
f01099f9:	6a 08                	push   $0x8
f01099fb:	e8 c8 41 02 00       	call   f012dbc8 <nearest_pow2_ceil>
f0109a00:	83 c4 10             	add    $0x10,%esp
f0109a03:	8d 50 ff             	lea    -0x1(%eax),%edx
f0109a06:	8b 45 08             	mov    0x8(%ebp),%eax
f0109a09:	21 c2                	and    %eax,%edx
f0109a0b:	89 d0                	mov    %edx,%eax
f0109a0d:	01 c0                	add    %eax,%eax
f0109a0f:	01 d0                	add    %edx,%eax
f0109a11:	01 c0                	add    %eax,%eax
f0109a13:	01 d0                	add    %edx,%eax
f0109a15:	c1 e0 02             	shl    $0x2,%eax
f0109a18:	01 d0                	add    %edx,%eax
f0109a1a:	01 c0                	add    %eax,%eax
f0109a1c:	01 d0                	add    %edx,%eax
f0109a1e:	c1 e0 02             	shl    $0x2,%eax
f0109a21:	01 d0                	add    %edx,%eax
f0109a23:	c1 e0 02             	shl    $0x2,%eax
f0109a26:	01 d0                	add    %edx,%eax
f0109a28:	c1 e0 02             	shl    $0x2,%eax
f0109a2b:	01 d0                	add    %edx,%eax
f0109a2d:	c1 e0 05             	shl    $0x5,%eax
f0109a30:	01 d8                	add    %ebx,%eax
f0109a32:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (e->env_status == ENV_FREE || e->env_id != envid) {
f0109a35:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109a38:	8b 40 54             	mov    0x54(%eax),%eax
f0109a3b:	85 c0                	test   %eax,%eax
f0109a3d:	74 0b                	je     f0109a4a <envid2env+0x7c>
f0109a3f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109a42:	8b 40 4c             	mov    0x4c(%eax),%eax
f0109a45:	3b 45 08             	cmp    0x8(%ebp),%eax
f0109a48:	74 10                	je     f0109a5a <envid2env+0x8c>
		*env_store = 0;
f0109a4a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109a4d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return E_BAD_ENV;
f0109a53:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
f0109a58:	eb 3f                	jmp    f0109a99 <envid2env+0xcb>
	// Check that the calling environment has legitimate permission
	// to manipulate the specified environment.
	// If checkperm is set, the specified environment
	// must be either the current environment
	// or an immediate child of the current environment.
	if (checkperm && e != curenv && e->env_parent_id != curenv->env_id) {
f0109a5a:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0109a5e:	74 2c                	je     f0109a8c <envid2env+0xbe>
f0109a60:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f0109a65:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f0109a68:	74 22                	je     f0109a8c <envid2env+0xbe>
f0109a6a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109a6d:	8b 50 50             	mov    0x50(%eax),%edx
f0109a70:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f0109a75:	8b 40 4c             	mov    0x4c(%eax),%eax
f0109a78:	39 c2                	cmp    %eax,%edx
f0109a7a:	74 10                	je     f0109a8c <envid2env+0xbe>
		*env_store = 0;
f0109a7c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109a7f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return E_BAD_ENV;
f0109a85:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
f0109a8a:	eb 0d                	jmp    f0109a99 <envid2env+0xcb>
	}

	*env_store = e;
f0109a8c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109a8f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109a92:	89 10                	mov    %edx,(%eax)
	return 0;
f0109a94:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0109a99:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0109a9c:	c9                   	leave  
f0109a9d:	c3                   	ret    

f0109a9e <env_pop_tf>:
// This exits the kernel and starts executing some environment's code.
// This function does not return.
//
void
env_pop_tf(struct Trapframe *tf)
{
f0109a9e:	55                   	push   %ebp
f0109a9f:	89 e5                	mov    %esp,%ebp
f0109aa1:	83 ec 08             	sub    $0x8,%esp
	__asm __volatile("movl %0,%%esp\n"
f0109aa4:	8b 65 08             	mov    0x8(%ebp),%esp
f0109aa7:	61                   	popa   
f0109aa8:	07                   	pop    %es
f0109aa9:	1f                   	pop    %ds
f0109aaa:	83 c4 08             	add    $0x8,%esp
f0109aad:	cf                   	iret   
			"\tpopl %%es\n"
			"\tpopl %%ds\n"
			"\taddl $0x8,%%esp\n" /* skip tf_trapno and tf_errcode */
			"\tiret"
			: : "g" (tf) : "memory");
	panic("iret failed");  /* mostly to placate the compiler */
f0109aae:	83 ec 04             	sub    $0x4,%esp
f0109ab1:	68 5b 2f 13 f0       	push   $0xf0132f5b
f0109ab6:	68 23 02 00 00       	push   $0x223
f0109abb:	68 b7 2e 13 f0       	push   $0xf0132eb7
f0109ac0:	e8 eb 66 ff ff       	call   f01001b0 <_panic>

f0109ac5 <env_init>:
// Insert in reverse order, so that the first call to allocate_environment()
// returns envs[0].
//

void env_init(void)
{
f0109ac5:	55                   	push   %ebp
f0109ac6:	89 e5                	mov    %esp,%ebp
f0109ac8:	53                   	push   %ebx
f0109ac9:	83 ec 14             	sub    $0x14,%esp
	int iEnv = NENV-1;
f0109acc:	c7 45 f4 07 00 00 00 	movl   $0x7,-0xc(%ebp)
	for(; iEnv >= 0; iEnv--)
f0109ad3:	e9 e3 01 00 00       	jmp    f0109cbb <env_init+0x1f6>
	{
		envs[iEnv].env_status = ENV_FREE;
f0109ad8:	8b 0d 70 31 25 f0    	mov    0xf0253170,%ecx
f0109ade:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109ae1:	89 d0                	mov    %edx,%eax
f0109ae3:	01 c0                	add    %eax,%eax
f0109ae5:	01 d0                	add    %edx,%eax
f0109ae7:	01 c0                	add    %eax,%eax
f0109ae9:	01 d0                	add    %edx,%eax
f0109aeb:	c1 e0 02             	shl    $0x2,%eax
f0109aee:	01 d0                	add    %edx,%eax
f0109af0:	01 c0                	add    %eax,%eax
f0109af2:	01 d0                	add    %edx,%eax
f0109af4:	c1 e0 02             	shl    $0x2,%eax
f0109af7:	01 d0                	add    %edx,%eax
f0109af9:	c1 e0 02             	shl    $0x2,%eax
f0109afc:	01 d0                	add    %edx,%eax
f0109afe:	c1 e0 02             	shl    $0x2,%eax
f0109b01:	01 d0                	add    %edx,%eax
f0109b03:	c1 e0 05             	shl    $0x5,%eax
f0109b06:	01 c8                	add    %ecx,%eax
f0109b08:	c7 40 54 00 00 00 00 	movl   $0x0,0x54(%eax)
		envs[iEnv].env_id = 0;
f0109b0f:	8b 0d 70 31 25 f0    	mov    0xf0253170,%ecx
f0109b15:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109b18:	89 d0                	mov    %edx,%eax
f0109b1a:	01 c0                	add    %eax,%eax
f0109b1c:	01 d0                	add    %edx,%eax
f0109b1e:	01 c0                	add    %eax,%eax
f0109b20:	01 d0                	add    %edx,%eax
f0109b22:	c1 e0 02             	shl    $0x2,%eax
f0109b25:	01 d0                	add    %edx,%eax
f0109b27:	01 c0                	add    %eax,%eax
f0109b29:	01 d0                	add    %edx,%eax
f0109b2b:	c1 e0 02             	shl    $0x2,%eax
f0109b2e:	01 d0                	add    %edx,%eax
f0109b30:	c1 e0 02             	shl    $0x2,%eax
f0109b33:	01 d0                	add    %edx,%eax
f0109b35:	c1 e0 02             	shl    $0x2,%eax
f0109b38:	01 d0                	add    %edx,%eax
f0109b3a:	c1 e0 05             	shl    $0x5,%eax
f0109b3d:	01 c8                	add    %ecx,%eax
f0109b3f:	c7 40 4c 00 00 00 00 	movl   $0x0,0x4c(%eax)
		LIST_INSERT_HEAD(&env_free_list, &envs[iEnv]);
f0109b46:	8b 0d 70 31 25 f0    	mov    0xf0253170,%ecx
f0109b4c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109b4f:	89 d0                	mov    %edx,%eax
f0109b51:	01 c0                	add    %eax,%eax
f0109b53:	01 d0                	add    %edx,%eax
f0109b55:	01 c0                	add    %eax,%eax
f0109b57:	01 d0                	add    %edx,%eax
f0109b59:	c1 e0 02             	shl    $0x2,%eax
f0109b5c:	01 d0                	add    %edx,%eax
f0109b5e:	01 c0                	add    %eax,%eax
f0109b60:	01 d0                	add    %edx,%eax
f0109b62:	c1 e0 02             	shl    $0x2,%eax
f0109b65:	01 d0                	add    %edx,%eax
f0109b67:	c1 e0 02             	shl    $0x2,%eax
f0109b6a:	01 d0                	add    %edx,%eax
f0109b6c:	c1 e0 02             	shl    $0x2,%eax
f0109b6f:	01 d0                	add    %edx,%eax
f0109b71:	c1 e0 05             	shl    $0x5,%eax
f0109b74:	01 c8                	add    %ecx,%eax
f0109b76:	85 c0                	test   %eax,%eax
f0109b78:	75 17                	jne    f0109b91 <env_init+0xcc>
f0109b7a:	83 ec 04             	sub    $0x4,%esp
f0109b7d:	68 38 2f 13 f0       	push   $0xf0132f38
f0109b82:	68 3f 02 00 00       	push   $0x23f
f0109b87:	68 b7 2e 13 f0       	push   $0xf0132eb7
f0109b8c:	e8 1f 66 ff ff       	call   f01001b0 <_panic>
f0109b91:	8b 0d 70 31 25 f0    	mov    0xf0253170,%ecx
f0109b97:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109b9a:	89 d0                	mov    %edx,%eax
f0109b9c:	01 c0                	add    %eax,%eax
f0109b9e:	01 d0                	add    %edx,%eax
f0109ba0:	01 c0                	add    %eax,%eax
f0109ba2:	01 d0                	add    %edx,%eax
f0109ba4:	c1 e0 02             	shl    $0x2,%eax
f0109ba7:	01 d0                	add    %edx,%eax
f0109ba9:	01 c0                	add    %eax,%eax
f0109bab:	01 d0                	add    %edx,%eax
f0109bad:	c1 e0 02             	shl    $0x2,%eax
f0109bb0:	01 d0                	add    %edx,%eax
f0109bb2:	c1 e0 02             	shl    $0x2,%eax
f0109bb5:	01 d0                	add    %edx,%eax
f0109bb7:	c1 e0 02             	shl    $0x2,%eax
f0109bba:	01 d0                	add    %edx,%eax
f0109bbc:	c1 e0 05             	shl    $0x5,%eax
f0109bbf:	01 c8                	add    %ecx,%eax
f0109bc1:	8b 15 78 31 25 f0    	mov    0xf0253178,%edx
f0109bc7:	89 50 44             	mov    %edx,0x44(%eax)
f0109bca:	8b 40 44             	mov    0x44(%eax),%eax
f0109bcd:	85 c0                	test   %eax,%eax
f0109bcf:	74 3b                	je     f0109c0c <env_init+0x147>
f0109bd1:	8b 0d 78 31 25 f0    	mov    0xf0253178,%ecx
f0109bd7:	8b 1d 70 31 25 f0    	mov    0xf0253170,%ebx
f0109bdd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109be0:	89 d0                	mov    %edx,%eax
f0109be2:	01 c0                	add    %eax,%eax
f0109be4:	01 d0                	add    %edx,%eax
f0109be6:	01 c0                	add    %eax,%eax
f0109be8:	01 d0                	add    %edx,%eax
f0109bea:	c1 e0 02             	shl    $0x2,%eax
f0109bed:	01 d0                	add    %edx,%eax
f0109bef:	01 c0                	add    %eax,%eax
f0109bf1:	01 d0                	add    %edx,%eax
f0109bf3:	c1 e0 02             	shl    $0x2,%eax
f0109bf6:	01 d0                	add    %edx,%eax
f0109bf8:	c1 e0 02             	shl    $0x2,%eax
f0109bfb:	01 d0                	add    %edx,%eax
f0109bfd:	c1 e0 02             	shl    $0x2,%eax
f0109c00:	01 d0                	add    %edx,%eax
f0109c02:	c1 e0 05             	shl    $0x5,%eax
f0109c05:	01 d8                	add    %ebx,%eax
f0109c07:	89 41 48             	mov    %eax,0x48(%ecx)
f0109c0a:	eb 35                	jmp    f0109c41 <env_init+0x17c>
f0109c0c:	8b 0d 70 31 25 f0    	mov    0xf0253170,%ecx
f0109c12:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109c15:	89 d0                	mov    %edx,%eax
f0109c17:	01 c0                	add    %eax,%eax
f0109c19:	01 d0                	add    %edx,%eax
f0109c1b:	01 c0                	add    %eax,%eax
f0109c1d:	01 d0                	add    %edx,%eax
f0109c1f:	c1 e0 02             	shl    $0x2,%eax
f0109c22:	01 d0                	add    %edx,%eax
f0109c24:	01 c0                	add    %eax,%eax
f0109c26:	01 d0                	add    %edx,%eax
f0109c28:	c1 e0 02             	shl    $0x2,%eax
f0109c2b:	01 d0                	add    %edx,%eax
f0109c2d:	c1 e0 02             	shl    $0x2,%eax
f0109c30:	01 d0                	add    %edx,%eax
f0109c32:	c1 e0 02             	shl    $0x2,%eax
f0109c35:	01 d0                	add    %edx,%eax
f0109c37:	c1 e0 05             	shl    $0x5,%eax
f0109c3a:	01 c8                	add    %ecx,%eax
f0109c3c:	a3 7c 31 25 f0       	mov    %eax,0xf025317c
f0109c41:	8b 0d 70 31 25 f0    	mov    0xf0253170,%ecx
f0109c47:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109c4a:	89 d0                	mov    %edx,%eax
f0109c4c:	01 c0                	add    %eax,%eax
f0109c4e:	01 d0                	add    %edx,%eax
f0109c50:	01 c0                	add    %eax,%eax
f0109c52:	01 d0                	add    %edx,%eax
f0109c54:	c1 e0 02             	shl    $0x2,%eax
f0109c57:	01 d0                	add    %edx,%eax
f0109c59:	01 c0                	add    %eax,%eax
f0109c5b:	01 d0                	add    %edx,%eax
f0109c5d:	c1 e0 02             	shl    $0x2,%eax
f0109c60:	01 d0                	add    %edx,%eax
f0109c62:	c1 e0 02             	shl    $0x2,%eax
f0109c65:	01 d0                	add    %edx,%eax
f0109c67:	c1 e0 02             	shl    $0x2,%eax
f0109c6a:	01 d0                	add    %edx,%eax
f0109c6c:	c1 e0 05             	shl    $0x5,%eax
f0109c6f:	01 c8                	add    %ecx,%eax
f0109c71:	a3 78 31 25 f0       	mov    %eax,0xf0253178
f0109c76:	8b 0d 70 31 25 f0    	mov    0xf0253170,%ecx
f0109c7c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109c7f:	89 d0                	mov    %edx,%eax
f0109c81:	01 c0                	add    %eax,%eax
f0109c83:	01 d0                	add    %edx,%eax
f0109c85:	01 c0                	add    %eax,%eax
f0109c87:	01 d0                	add    %edx,%eax
f0109c89:	c1 e0 02             	shl    $0x2,%eax
f0109c8c:	01 d0                	add    %edx,%eax
f0109c8e:	01 c0                	add    %eax,%eax
f0109c90:	01 d0                	add    %edx,%eax
f0109c92:	c1 e0 02             	shl    $0x2,%eax
f0109c95:	01 d0                	add    %edx,%eax
f0109c97:	c1 e0 02             	shl    $0x2,%eax
f0109c9a:	01 d0                	add    %edx,%eax
f0109c9c:	c1 e0 02             	shl    $0x2,%eax
f0109c9f:	01 d0                	add    %edx,%eax
f0109ca1:	c1 e0 05             	shl    $0x5,%eax
f0109ca4:	01 c8                	add    %ecx,%eax
f0109ca6:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0109cad:	a1 84 31 25 f0       	mov    0xf0253184,%eax
f0109cb2:	40                   	inc    %eax
f0109cb3:	a3 84 31 25 f0       	mov    %eax,0xf0253184
//

void env_init(void)
{
	int iEnv = NENV-1;
	for(; iEnv >= 0; iEnv--)
f0109cb8:	ff 4d f4             	decl   -0xc(%ebp)
f0109cbb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0109cbf:	0f 89 13 fe ff ff    	jns    f0109ad8 <env_init+0x13>
	{
		envs[iEnv].env_status = ENV_FREE;
		envs[iEnv].env_id = 0;
		LIST_INSERT_HEAD(&env_free_list, &envs[iEnv]);
	}
}
f0109cc5:	90                   	nop
f0109cc6:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0109cc9:	c9                   	leave  
f0109cca:	c3                   	ret    

f0109ccb <allocate_environment>:
//
// Returns 0 on success, < 0 on failure.  Errors include:
//	E_NO_FREE_ENV if all NENVS environments are allocated
//
int allocate_environment(struct Env** e)
{
f0109ccb:	55                   	push   %ebp
f0109ccc:	89 e5                	mov    %esp,%ebp
	if (!(*e = LIST_FIRST(&env_free_list)))
f0109cce:	8b 15 78 31 25 f0    	mov    0xf0253178,%edx
f0109cd4:	8b 45 08             	mov    0x8(%ebp),%eax
f0109cd7:	89 10                	mov    %edx,(%eax)
f0109cd9:	8b 45 08             	mov    0x8(%ebp),%eax
f0109cdc:	8b 00                	mov    (%eax),%eax
f0109cde:	85 c0                	test   %eax,%eax
f0109ce0:	75 07                	jne    f0109ce9 <allocate_environment+0x1e>
		return E_NO_FREE_ENV;
f0109ce2:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
f0109ce7:	eb 11                	jmp    f0109cfa <allocate_environment+0x2f>
	(*e)->env_status = ENV_UNKNOWN;
f0109ce9:	8b 45 08             	mov    0x8(%ebp),%eax
f0109cec:	8b 00                	mov    (%eax),%eax
f0109cee:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
	return 0;
f0109cf5:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0109cfa:	5d                   	pop    %ebp
f0109cfb:	c3                   	ret    

f0109cfc <free_environment>:
//===============================
// 3) FREE ENV STRUCT:
//===============================
// Free the given environment "e", simply by adding it to the free environment list.
void free_environment(struct Env* e)
{
f0109cfc:	55                   	push   %ebp
f0109cfd:	89 e5                	mov    %esp,%ebp
f0109cff:	83 ec 08             	sub    $0x8,%esp
	memset(e, 0, sizeof(*e));
f0109d02:	83 ec 04             	sub    $0x4,%esp
f0109d05:	68 a0 da 01 00       	push   $0x1daa0
f0109d0a:	6a 00                	push   $0x0
f0109d0c:	ff 75 08             	pushl  0x8(%ebp)
f0109d0f:	e8 17 53 02 00       	call   f012f02b <memset>
f0109d14:	83 c4 10             	add    $0x10,%esp
	e->env_status = ENV_FREE;
f0109d17:	8b 45 08             	mov    0x8(%ebp),%eax
f0109d1a:	c7 40 54 00 00 00 00 	movl   $0x0,0x54(%eax)
	LIST_INSERT_HEAD(&env_free_list, e);
f0109d21:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0109d25:	75 17                	jne    f0109d3e <free_environment+0x42>
f0109d27:	83 ec 04             	sub    $0x4,%esp
f0109d2a:	68 38 2f 13 f0       	push   $0xf0132f38
f0109d2f:	68 5c 02 00 00       	push   $0x25c
f0109d34:	68 b7 2e 13 f0       	push   $0xf0132eb7
f0109d39:	e8 72 64 ff ff       	call   f01001b0 <_panic>
f0109d3e:	8b 15 78 31 25 f0    	mov    0xf0253178,%edx
f0109d44:	8b 45 08             	mov    0x8(%ebp),%eax
f0109d47:	89 50 44             	mov    %edx,0x44(%eax)
f0109d4a:	8b 45 08             	mov    0x8(%ebp),%eax
f0109d4d:	8b 40 44             	mov    0x44(%eax),%eax
f0109d50:	85 c0                	test   %eax,%eax
f0109d52:	74 0d                	je     f0109d61 <free_environment+0x65>
f0109d54:	a1 78 31 25 f0       	mov    0xf0253178,%eax
f0109d59:	8b 55 08             	mov    0x8(%ebp),%edx
f0109d5c:	89 50 48             	mov    %edx,0x48(%eax)
f0109d5f:	eb 08                	jmp    f0109d69 <free_environment+0x6d>
f0109d61:	8b 45 08             	mov    0x8(%ebp),%eax
f0109d64:	a3 7c 31 25 f0       	mov    %eax,0xf025317c
f0109d69:	8b 45 08             	mov    0x8(%ebp),%eax
f0109d6c:	a3 78 31 25 f0       	mov    %eax,0xf0253178
f0109d71:	8b 45 08             	mov    0x8(%ebp),%eax
f0109d74:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0109d7b:	a1 84 31 25 f0       	mov    0xf0253184,%eax
f0109d80:	40                   	inc    %eax
f0109d81:	a3 84 31 25 f0       	mov    %eax,0xf0253184
}
f0109d86:	90                   	nop
f0109d87:	c9                   	leave  
f0109d88:	c3                   	ret    

f0109d89 <program_segment_alloc_map_copy_workingset>:
//
// The allocation shouldn't failed
// return 0
//
static int program_segment_alloc_map_copy_workingset(struct Env *e, struct ProgramSegment* seg, uint32* allocated_pages, uint32 remaining_ws_pages, uint32* lastTableNumber)
{
f0109d89:	55                   	push   %ebp
f0109d8a:	89 e5                	mov    %esp,%ebp
f0109d8c:	53                   	push   %ebx
f0109d8d:	83 ec 44             	sub    $0x44,%esp
	void *vaddr = seg->virtual_address;
f0109d90:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109d93:	8b 40 0c             	mov    0xc(%eax),%eax
f0109d96:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	uint32 length = seg->size_in_memory;
f0109d99:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109d9c:	8b 40 08             	mov    0x8(%eax),%eax
f0109d9f:	89 45 e0             	mov    %eax,-0x20(%ebp)

	uint32 end_vaddr = ROUNDUP((uint32)vaddr + length,PAGE_SIZE) ;
f0109da2:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f0109da9:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0109dac:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0109daf:	01 c2                	add    %eax,%edx
f0109db1:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0109db4:	01 d0                	add    %edx,%eax
f0109db6:	48                   	dec    %eax
f0109db7:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0109dba:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0109dbd:	ba 00 00 00 00       	mov    $0x0,%edx
f0109dc2:	f7 75 dc             	divl   -0x24(%ebp)
f0109dc5:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0109dc8:	29 d0                	sub    %edx,%eax
f0109dca:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	uint32 iVA = ROUNDDOWN((uint32)vaddr,PAGE_SIZE) ;
f0109dcd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109dd0:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0109dd3:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0109dd6:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0109ddb:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int r ;
	uint32 i = 0 ;
f0109dde:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	struct FrameInfo *p = NULL;
f0109de5:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)

	*allocated_pages = 0;
f0109dec:	8b 45 10             	mov    0x10(%ebp),%eax
f0109def:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	/*2015*/// Load max of 6 pages only for the segment that start with va = 200000 [EXCEPT tpp]
	if (iVA == 0x200000 && strcmp(e->prog_name, "tpp")!=0)
f0109df5:	81 7d f4 00 00 20 00 	cmpl   $0x200000,-0xc(%ebp)
f0109dfc:	0f 85 38 06 00 00    	jne    f010a43a <program_segment_alloc_map_copy_workingset+0x6b1>
f0109e02:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e05:	83 c0 5c             	add    $0x5c,%eax
f0109e08:	83 ec 08             	sub    $0x8,%esp
f0109e0b:	68 67 2f 13 f0       	push   $0xf0132f67
f0109e10:	50                   	push   %eax
f0109e11:	e8 33 51 02 00       	call   f012ef49 <strcmp>
f0109e16:	83 c4 10             	add    $0x10,%esp
f0109e19:	85 c0                	test   %eax,%eax
f0109e1b:	0f 84 19 06 00 00    	je     f010a43a <program_segment_alloc_map_copy_workingset+0x6b1>
		remaining_ws_pages = remaining_ws_pages < 6 ? remaining_ws_pages:6 ;
f0109e21:	8b 45 14             	mov    0x14(%ebp),%eax
f0109e24:	83 f8 06             	cmp    $0x6,%eax
f0109e27:	76 05                	jbe    f0109e2e <program_segment_alloc_map_copy_workingset+0xa5>
f0109e29:	b8 06 00 00 00       	mov    $0x6,%eax
f0109e2e:	89 45 14             	mov    %eax,0x14(%ebp)
	/*==========================================================================================*/
	for (; iVA < end_vaddr && i<remaining_ws_pages; i++, iVA += PAGE_SIZE)
f0109e31:	e9 04 06 00 00       	jmp    f010a43a <program_segment_alloc_map_copy_workingset+0x6b1>
	{
		// Allocate a page
		allocate_frame(&p) ;
f0109e36:	83 ec 0c             	sub    $0xc,%esp
f0109e39:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0109e3c:	50                   	push   %eax
f0109e3d:	e8 e3 d4 ff ff       	call   f0107325 <allocate_frame>
f0109e42:	83 c4 10             	add    $0x10,%esp

		LOG_STRING("segment page allocated");
		loadtime_map_frame(e->env_page_directory, p, iVA, PERM_USER | PERM_WRITEABLE);
f0109e45:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0109e48:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e4b:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0109e51:	6a 06                	push   $0x6
f0109e53:	ff 75 f4             	pushl  -0xc(%ebp)
f0109e56:	52                   	push   %edx
f0109e57:	50                   	push   %eax
f0109e58:	e8 19 da ff ff       	call   f0107876 <loadtime_map_frame>
f0109e5d:	83 c4 10             	add    $0x10,%esp
		struct WorkingSetElement* wse = env_page_ws_list_create_element(e, iVA);
		wse->time_stamp = 0;
		LIST_INSERT_TAIL(&(e->page_WS_list), wse);
#else
		LOG_STATMENT(cprintf("Updating working set entry # %d",e->page_last_WS_index));
		e->ptr_pageWorkingSet[e->page_last_WS_index].virtual_address = iVA;
f0109e60:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e63:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f0109e69:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109e6c:	89 d0                	mov    %edx,%eax
f0109e6e:	01 c0                	add    %eax,%eax
f0109e70:	01 d0                	add    %edx,%eax
f0109e72:	c1 e0 03             	shl    $0x3,%eax
f0109e75:	01 c8                	add    %ecx,%eax
f0109e77:	8d 90 b8 00 00 00    	lea    0xb8(%eax),%edx
f0109e7d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109e80:	89 02                	mov    %eax,(%edx)
		e->ptr_pageWorkingSet[e->page_last_WS_index].empty = 0;
f0109e82:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e85:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f0109e8b:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109e8e:	89 d0                	mov    %edx,%eax
f0109e90:	01 c0                	add    %eax,%eax
f0109e92:	01 d0                	add    %edx,%eax
f0109e94:	c1 e0 03             	shl    $0x3,%eax
f0109e97:	01 c8                	add    %ecx,%eax
f0109e99:	05 bc 00 00 00       	add    $0xbc,%eax
f0109e9e:	c6 00 00             	movb   $0x0,(%eax)
		e->ptr_pageWorkingSet[e->page_last_WS_index].time_stamp = 0;
f0109ea1:	8b 45 08             	mov    0x8(%ebp),%eax
f0109ea4:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f0109eaa:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109ead:	89 d0                	mov    %edx,%eax
f0109eaf:	01 c0                	add    %eax,%eax
f0109eb1:	01 d0                	add    %edx,%eax
f0109eb3:	c1 e0 03             	shl    $0x3,%eax
f0109eb6:	01 c8                	add    %ecx,%eax
f0109eb8:	05 c0 00 00 00       	add    $0xc0,%eax
f0109ebd:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
#endif
		//2020
		if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0109ec3:	83 ec 0c             	sub    $0xc,%esp
f0109ec6:	6a 02                	push   $0x2
f0109ec8:	e8 b2 38 00 00       	call   f010d77f <isPageReplacmentAlgorithmLRU>
f0109ecd:	83 c4 10             	add    $0x10,%esp
f0109ed0:	85 c0                	test   %eax,%eax
f0109ed2:	0f 84 2c 04 00 00    	je     f010a304 <program_segment_alloc_map_copy_workingset+0x57b>
				//Add to LRU Second list
				LIST_INSERT_HEAD(&(e->SecondList), wse);
			}
#else

			LIST_REMOVE(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f0109ed8:	8b 45 08             	mov    0x8(%ebp),%eax
f0109edb:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f0109ee1:	89 d0                	mov    %edx,%eax
f0109ee3:	01 c0                	add    %eax,%eax
f0109ee5:	01 d0                	add    %edx,%eax
f0109ee7:	c1 e0 03             	shl    $0x3,%eax
f0109eea:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
f0109ef0:	8b 45 08             	mov    0x8(%ebp),%eax
f0109ef3:	01 d0                	add    %edx,%eax
f0109ef5:	83 c0 08             	add    $0x8,%eax
f0109ef8:	85 c0                	test   %eax,%eax
f0109efa:	75 17                	jne    f0109f13 <program_segment_alloc_map_copy_workingset+0x18a>
f0109efc:	83 ec 04             	sub    $0x4,%esp
f0109eff:	68 19 2f 13 f0       	push   $0xf0132f19
f0109f04:	68 9f 02 00 00       	push   $0x29f
f0109f09:	68 b7 2e 13 f0       	push   $0xf0132eb7
f0109f0e:	e8 9d 62 ff ff       	call   f01001b0 <_panic>
f0109f13:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f16:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f0109f1c:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109f1f:	89 d0                	mov    %edx,%eax
f0109f21:	01 c0                	add    %eax,%eax
f0109f23:	01 d0                	add    %edx,%eax
f0109f25:	c1 e0 03             	shl    $0x3,%eax
f0109f28:	01 c8                	add    %ecx,%eax
f0109f2a:	05 c8 00 00 00       	add    $0xc8,%eax
f0109f2f:	8b 00                	mov    (%eax),%eax
f0109f31:	85 c0                	test   %eax,%eax
f0109f33:	74 41                	je     f0109f76 <program_segment_alloc_map_copy_workingset+0x1ed>
f0109f35:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f38:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f0109f3e:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109f41:	89 d0                	mov    %edx,%eax
f0109f43:	01 c0                	add    %eax,%eax
f0109f45:	01 d0                	add    %edx,%eax
f0109f47:	c1 e0 03             	shl    $0x3,%eax
f0109f4a:	01 c8                	add    %ecx,%eax
f0109f4c:	05 c8 00 00 00       	add    $0xc8,%eax
f0109f51:	8b 10                	mov    (%eax),%edx
f0109f53:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f56:	8b 88 78 d5 01 00    	mov    0x1d578(%eax),%ecx
f0109f5c:	8b 5d 08             	mov    0x8(%ebp),%ebx
f0109f5f:	89 c8                	mov    %ecx,%eax
f0109f61:	01 c0                	add    %eax,%eax
f0109f63:	01 c8                	add    %ecx,%eax
f0109f65:	c1 e0 03             	shl    $0x3,%eax
f0109f68:	01 d8                	add    %ebx,%eax
f0109f6a:	05 cc 00 00 00       	add    $0xcc,%eax
f0109f6f:	8b 00                	mov    (%eax),%eax
f0109f71:	89 42 14             	mov    %eax,0x14(%edx)
f0109f74:	eb 27                	jmp    f0109f9d <program_segment_alloc_map_copy_workingset+0x214>
f0109f76:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f79:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f0109f7f:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109f82:	89 d0                	mov    %edx,%eax
f0109f84:	01 c0                	add    %eax,%eax
f0109f86:	01 d0                	add    %edx,%eax
f0109f88:	c1 e0 03             	shl    $0x3,%eax
f0109f8b:	01 c8                	add    %ecx,%eax
f0109f8d:	05 cc 00 00 00       	add    $0xcc,%eax
f0109f92:	8b 10                	mov    (%eax),%edx
f0109f94:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f97:	89 90 38 da 01 00    	mov    %edx,0x1da38(%eax)
f0109f9d:	8b 45 08             	mov    0x8(%ebp),%eax
f0109fa0:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f0109fa6:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109fa9:	89 d0                	mov    %edx,%eax
f0109fab:	01 c0                	add    %eax,%eax
f0109fad:	01 d0                	add    %edx,%eax
f0109faf:	c1 e0 03             	shl    $0x3,%eax
f0109fb2:	01 c8                	add    %ecx,%eax
f0109fb4:	05 cc 00 00 00       	add    $0xcc,%eax
f0109fb9:	8b 00                	mov    (%eax),%eax
f0109fbb:	85 c0                	test   %eax,%eax
f0109fbd:	74 41                	je     f010a000 <program_segment_alloc_map_copy_workingset+0x277>
f0109fbf:	8b 45 08             	mov    0x8(%ebp),%eax
f0109fc2:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f0109fc8:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109fcb:	89 d0                	mov    %edx,%eax
f0109fcd:	01 c0                	add    %eax,%eax
f0109fcf:	01 d0                	add    %edx,%eax
f0109fd1:	c1 e0 03             	shl    $0x3,%eax
f0109fd4:	01 c8                	add    %ecx,%eax
f0109fd6:	05 cc 00 00 00       	add    $0xcc,%eax
f0109fdb:	8b 10                	mov    (%eax),%edx
f0109fdd:	8b 45 08             	mov    0x8(%ebp),%eax
f0109fe0:	8b 88 78 d5 01 00    	mov    0x1d578(%eax),%ecx
f0109fe6:	8b 5d 08             	mov    0x8(%ebp),%ebx
f0109fe9:	89 c8                	mov    %ecx,%eax
f0109feb:	01 c0                	add    %eax,%eax
f0109fed:	01 c8                	add    %ecx,%eax
f0109fef:	c1 e0 03             	shl    $0x3,%eax
f0109ff2:	01 d8                	add    %ebx,%eax
f0109ff4:	05 c8 00 00 00       	add    $0xc8,%eax
f0109ff9:	8b 00                	mov    (%eax),%eax
f0109ffb:	89 42 10             	mov    %eax,0x10(%edx)
f0109ffe:	eb 27                	jmp    f010a027 <program_segment_alloc_map_copy_workingset+0x29e>
f010a000:	8b 45 08             	mov    0x8(%ebp),%eax
f010a003:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f010a009:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a00c:	89 d0                	mov    %edx,%eax
f010a00e:	01 c0                	add    %eax,%eax
f010a010:	01 d0                	add    %edx,%eax
f010a012:	c1 e0 03             	shl    $0x3,%eax
f010a015:	01 c8                	add    %ecx,%eax
f010a017:	05 c8 00 00 00       	add    $0xc8,%eax
f010a01c:	8b 10                	mov    (%eax),%edx
f010a01e:	8b 45 08             	mov    0x8(%ebp),%eax
f010a021:	89 90 34 da 01 00    	mov    %edx,0x1da34(%eax)
f010a027:	8b 45 08             	mov    0x8(%ebp),%eax
f010a02a:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f010a030:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a033:	89 d0                	mov    %edx,%eax
f010a035:	01 c0                	add    %eax,%eax
f010a037:	01 d0                	add    %edx,%eax
f010a039:	c1 e0 03             	shl    $0x3,%eax
f010a03c:	01 c8                	add    %ecx,%eax
f010a03e:	05 c8 00 00 00       	add    $0xc8,%eax
f010a043:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010a049:	8b 45 08             	mov    0x8(%ebp),%eax
f010a04c:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f010a052:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a055:	89 d0                	mov    %edx,%eax
f010a057:	01 c0                	add    %eax,%eax
f010a059:	01 d0                	add    %edx,%eax
f010a05b:	c1 e0 03             	shl    $0x3,%eax
f010a05e:	01 c8                	add    %ecx,%eax
f010a060:	05 cc 00 00 00       	add    $0xcc,%eax
f010a065:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010a06b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a06e:	8b 80 40 da 01 00    	mov    0x1da40(%eax),%eax
f010a074:	8d 50 ff             	lea    -0x1(%eax),%edx
f010a077:	8b 45 08             	mov    0x8(%ebp),%eax
f010a07a:	89 90 40 da 01 00    	mov    %edx,0x1da40(%eax)
			//Always leave 1 page in Active list for the stack
			if (LIST_SIZE(&(e->ActiveList)) < e->ActiveListSize - 1)
f010a080:	8b 45 08             	mov    0x8(%ebp),%eax
f010a083:	8b 90 50 da 01 00    	mov    0x1da50(%eax),%edx
f010a089:	8b 45 08             	mov    0x8(%ebp),%eax
f010a08c:	8b 80 64 da 01 00    	mov    0x1da64(%eax),%eax
f010a092:	48                   	dec    %eax
f010a093:	39 c2                	cmp    %eax,%edx
f010a095:	0f 83 37 01 00 00    	jae    f010a1d2 <program_segment_alloc_map_copy_workingset+0x449>
			{
				LIST_INSERT_HEAD(&(e->ActiveList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f010a09b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a09e:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f010a0a4:	89 d0                	mov    %edx,%eax
f010a0a6:	01 c0                	add    %eax,%eax
f010a0a8:	01 d0                	add    %edx,%eax
f010a0aa:	c1 e0 03             	shl    $0x3,%eax
f010a0ad:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
f010a0b3:	8b 45 08             	mov    0x8(%ebp),%eax
f010a0b6:	01 d0                	add    %edx,%eax
f010a0b8:	83 c0 08             	add    $0x8,%eax
f010a0bb:	85 c0                	test   %eax,%eax
f010a0bd:	75 17                	jne    f010a0d6 <program_segment_alloc_map_copy_workingset+0x34d>
f010a0bf:	83 ec 04             	sub    $0x4,%esp
f010a0c2:	68 38 2f 13 f0       	push   $0xf0132f38
f010a0c7:	68 a3 02 00 00       	push   $0x2a3
f010a0cc:	68 b7 2e 13 f0       	push   $0xf0132eb7
f010a0d1:	e8 da 60 ff ff       	call   f01001b0 <_panic>
f010a0d6:	8b 45 08             	mov    0x8(%ebp),%eax
f010a0d9:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f010a0df:	8b 45 08             	mov    0x8(%ebp),%eax
f010a0e2:	8b 88 44 da 01 00    	mov    0x1da44(%eax),%ecx
f010a0e8:	8b 5d 08             	mov    0x8(%ebp),%ebx
f010a0eb:	89 d0                	mov    %edx,%eax
f010a0ed:	01 c0                	add    %eax,%eax
f010a0ef:	01 d0                	add    %edx,%eax
f010a0f1:	c1 e0 03             	shl    $0x3,%eax
f010a0f4:	01 d8                	add    %ebx,%eax
f010a0f6:	05 c8 00 00 00       	add    $0xc8,%eax
f010a0fb:	89 08                	mov    %ecx,(%eax)
f010a0fd:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a100:	89 d0                	mov    %edx,%eax
f010a102:	01 c0                	add    %eax,%eax
f010a104:	01 d0                	add    %edx,%eax
f010a106:	c1 e0 03             	shl    $0x3,%eax
f010a109:	01 c8                	add    %ecx,%eax
f010a10b:	05 c8 00 00 00       	add    $0xc8,%eax
f010a110:	8b 00                	mov    (%eax),%eax
f010a112:	85 c0                	test   %eax,%eax
f010a114:	74 2e                	je     f010a144 <program_segment_alloc_map_copy_workingset+0x3bb>
f010a116:	8b 45 08             	mov    0x8(%ebp),%eax
f010a119:	8b 90 44 da 01 00    	mov    0x1da44(%eax),%edx
f010a11f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a122:	8b 88 78 d5 01 00    	mov    0x1d578(%eax),%ecx
f010a128:	89 c8                	mov    %ecx,%eax
f010a12a:	01 c0                	add    %eax,%eax
f010a12c:	01 c8                	add    %ecx,%eax
f010a12e:	c1 e0 03             	shl    $0x3,%eax
f010a131:	8d 88 b0 00 00 00    	lea    0xb0(%eax),%ecx
f010a137:	8b 45 08             	mov    0x8(%ebp),%eax
f010a13a:	01 c8                	add    %ecx,%eax
f010a13c:	83 c0 08             	add    $0x8,%eax
f010a13f:	89 42 14             	mov    %eax,0x14(%edx)
f010a142:	eb 29                	jmp    f010a16d <program_segment_alloc_map_copy_workingset+0x3e4>
f010a144:	8b 45 08             	mov    0x8(%ebp),%eax
f010a147:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f010a14d:	89 d0                	mov    %edx,%eax
f010a14f:	01 c0                	add    %eax,%eax
f010a151:	01 d0                	add    %edx,%eax
f010a153:	c1 e0 03             	shl    $0x3,%eax
f010a156:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
f010a15c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a15f:	01 d0                	add    %edx,%eax
f010a161:	8d 50 08             	lea    0x8(%eax),%edx
f010a164:	8b 45 08             	mov    0x8(%ebp),%eax
f010a167:	89 90 48 da 01 00    	mov    %edx,0x1da48(%eax)
f010a16d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a170:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f010a176:	89 d0                	mov    %edx,%eax
f010a178:	01 c0                	add    %eax,%eax
f010a17a:	01 d0                	add    %edx,%eax
f010a17c:	c1 e0 03             	shl    $0x3,%eax
f010a17f:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
f010a185:	8b 45 08             	mov    0x8(%ebp),%eax
f010a188:	01 d0                	add    %edx,%eax
f010a18a:	8d 50 08             	lea    0x8(%eax),%edx
f010a18d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a190:	89 90 44 da 01 00    	mov    %edx,0x1da44(%eax)
f010a196:	8b 45 08             	mov    0x8(%ebp),%eax
f010a199:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f010a19f:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a1a2:	89 d0                	mov    %edx,%eax
f010a1a4:	01 c0                	add    %eax,%eax
f010a1a6:	01 d0                	add    %edx,%eax
f010a1a8:	c1 e0 03             	shl    $0x3,%eax
f010a1ab:	01 c8                	add    %ecx,%eax
f010a1ad:	05 cc 00 00 00       	add    $0xcc,%eax
f010a1b2:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010a1b8:	8b 45 08             	mov    0x8(%ebp),%eax
f010a1bb:	8b 80 50 da 01 00    	mov    0x1da50(%eax),%eax
f010a1c1:	8d 50 01             	lea    0x1(%eax),%edx
f010a1c4:	8b 45 08             	mov    0x8(%ebp),%eax
f010a1c7:	89 90 50 da 01 00    	mov    %edx,0x1da50(%eax)
f010a1cd:	e9 32 01 00 00       	jmp    f010a304 <program_segment_alloc_map_copy_workingset+0x57b>
			}
			else
			{
				//Add to LRU Second list
				LIST_INSERT_HEAD(&(e->SecondList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f010a1d2:	8b 45 08             	mov    0x8(%ebp),%eax
f010a1d5:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f010a1db:	89 d0                	mov    %edx,%eax
f010a1dd:	01 c0                	add    %eax,%eax
f010a1df:	01 d0                	add    %edx,%eax
f010a1e1:	c1 e0 03             	shl    $0x3,%eax
f010a1e4:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
f010a1ea:	8b 45 08             	mov    0x8(%ebp),%eax
f010a1ed:	01 d0                	add    %edx,%eax
f010a1ef:	83 c0 08             	add    $0x8,%eax
f010a1f2:	85 c0                	test   %eax,%eax
f010a1f4:	75 17                	jne    f010a20d <program_segment_alloc_map_copy_workingset+0x484>
f010a1f6:	83 ec 04             	sub    $0x4,%esp
f010a1f9:	68 38 2f 13 f0       	push   $0xf0132f38
f010a1fe:	68 a8 02 00 00       	push   $0x2a8
f010a203:	68 b7 2e 13 f0       	push   $0xf0132eb7
f010a208:	e8 a3 5f ff ff       	call   f01001b0 <_panic>
f010a20d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a210:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f010a216:	8b 45 08             	mov    0x8(%ebp),%eax
f010a219:	8b 88 54 da 01 00    	mov    0x1da54(%eax),%ecx
f010a21f:	8b 5d 08             	mov    0x8(%ebp),%ebx
f010a222:	89 d0                	mov    %edx,%eax
f010a224:	01 c0                	add    %eax,%eax
f010a226:	01 d0                	add    %edx,%eax
f010a228:	c1 e0 03             	shl    $0x3,%eax
f010a22b:	01 d8                	add    %ebx,%eax
f010a22d:	05 c8 00 00 00       	add    $0xc8,%eax
f010a232:	89 08                	mov    %ecx,(%eax)
f010a234:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a237:	89 d0                	mov    %edx,%eax
f010a239:	01 c0                	add    %eax,%eax
f010a23b:	01 d0                	add    %edx,%eax
f010a23d:	c1 e0 03             	shl    $0x3,%eax
f010a240:	01 c8                	add    %ecx,%eax
f010a242:	05 c8 00 00 00       	add    $0xc8,%eax
f010a247:	8b 00                	mov    (%eax),%eax
f010a249:	85 c0                	test   %eax,%eax
f010a24b:	74 2e                	je     f010a27b <program_segment_alloc_map_copy_workingset+0x4f2>
f010a24d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a250:	8b 90 54 da 01 00    	mov    0x1da54(%eax),%edx
f010a256:	8b 45 08             	mov    0x8(%ebp),%eax
f010a259:	8b 88 78 d5 01 00    	mov    0x1d578(%eax),%ecx
f010a25f:	89 c8                	mov    %ecx,%eax
f010a261:	01 c0                	add    %eax,%eax
f010a263:	01 c8                	add    %ecx,%eax
f010a265:	c1 e0 03             	shl    $0x3,%eax
f010a268:	8d 88 b0 00 00 00    	lea    0xb0(%eax),%ecx
f010a26e:	8b 45 08             	mov    0x8(%ebp),%eax
f010a271:	01 c8                	add    %ecx,%eax
f010a273:	83 c0 08             	add    $0x8,%eax
f010a276:	89 42 14             	mov    %eax,0x14(%edx)
f010a279:	eb 29                	jmp    f010a2a4 <program_segment_alloc_map_copy_workingset+0x51b>
f010a27b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a27e:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f010a284:	89 d0                	mov    %edx,%eax
f010a286:	01 c0                	add    %eax,%eax
f010a288:	01 d0                	add    %edx,%eax
f010a28a:	c1 e0 03             	shl    $0x3,%eax
f010a28d:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
f010a293:	8b 45 08             	mov    0x8(%ebp),%eax
f010a296:	01 d0                	add    %edx,%eax
f010a298:	8d 50 08             	lea    0x8(%eax),%edx
f010a29b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a29e:	89 90 58 da 01 00    	mov    %edx,0x1da58(%eax)
f010a2a4:	8b 45 08             	mov    0x8(%ebp),%eax
f010a2a7:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f010a2ad:	89 d0                	mov    %edx,%eax
f010a2af:	01 c0                	add    %eax,%eax
f010a2b1:	01 d0                	add    %edx,%eax
f010a2b3:	c1 e0 03             	shl    $0x3,%eax
f010a2b6:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
f010a2bc:	8b 45 08             	mov    0x8(%ebp),%eax
f010a2bf:	01 d0                	add    %edx,%eax
f010a2c1:	8d 50 08             	lea    0x8(%eax),%edx
f010a2c4:	8b 45 08             	mov    0x8(%ebp),%eax
f010a2c7:	89 90 54 da 01 00    	mov    %edx,0x1da54(%eax)
f010a2cd:	8b 45 08             	mov    0x8(%ebp),%eax
f010a2d0:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f010a2d6:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a2d9:	89 d0                	mov    %edx,%eax
f010a2db:	01 c0                	add    %eax,%eax
f010a2dd:	01 d0                	add    %edx,%eax
f010a2df:	c1 e0 03             	shl    $0x3,%eax
f010a2e2:	01 c8                	add    %ecx,%eax
f010a2e4:	05 cc 00 00 00       	add    $0xcc,%eax
f010a2e9:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010a2ef:	8b 45 08             	mov    0x8(%ebp),%eax
f010a2f2:	8b 80 60 da 01 00    	mov    0x1da60(%eax),%eax
f010a2f8:	8d 50 01             	lea    0x1(%eax),%edx
f010a2fb:	8b 45 08             	mov    0x8(%ebp),%eax
f010a2fe:	89 90 60 da 01 00    	mov    %edx,0x1da60(%eax)
		else
		{
			e->page_last_WS_element = NULL;
		}
#else
		e->page_last_WS_index ++;
f010a304:	8b 45 08             	mov    0x8(%ebp),%eax
f010a307:	8b 80 78 d5 01 00    	mov    0x1d578(%eax),%eax
f010a30d:	8d 50 01             	lea    0x1(%eax),%edx
f010a310:	8b 45 08             	mov    0x8(%ebp),%eax
f010a313:	89 90 78 d5 01 00    	mov    %edx,0x1d578(%eax)
		e->page_last_WS_index %= (e->page_WS_max_size);
f010a319:	8b 45 08             	mov    0x8(%ebp),%eax
f010a31c:	8b 80 78 d5 01 00    	mov    0x1d578(%eax),%eax
f010a322:	8b 55 08             	mov    0x8(%ebp),%edx
f010a325:	8b 8a 7c d5 01 00    	mov    0x1d57c(%edx),%ecx
f010a32b:	ba 00 00 00 00       	mov    $0x0,%edx
f010a330:	f7 f1                	div    %ecx
f010a332:	8b 45 08             	mov    0x8(%ebp),%eax
f010a335:	89 90 78 d5 01 00    	mov    %edx,0x1d578(%eax)
#endif
		//if a new table is created during the mapping, add it to the table working set
		if(PDX(iVA) != (*lastTableNumber))
f010a33b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a33e:	c1 e8 16             	shr    $0x16,%eax
f010a341:	89 c2                	mov    %eax,%edx
f010a343:	8b 45 18             	mov    0x18(%ebp),%eax
f010a346:	8b 00                	mov    (%eax),%eax
f010a348:	39 c2                	cmp    %eax,%edx
f010a34a:	0f 84 d3 00 00 00    	je     f010a423 <program_segment_alloc_map_copy_workingset+0x69a>
		{
			e->__ptr_tws[e->table_last_WS_index].virtual_address = ROUNDDOWN(iVA, PAGE_SIZE*1024);;
f010a350:	8b 45 08             	mov    0x8(%ebp),%eax
f010a353:	8b 90 30 da 01 00    	mov    0x1da30(%eax),%edx
f010a359:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a35c:	89 45 cc             	mov    %eax,-0x34(%ebp)
f010a35f:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010a362:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f010a367:	89 c1                	mov    %eax,%ecx
f010a369:	8b 5d 08             	mov    0x8(%ebp),%ebx
f010a36c:	89 d0                	mov    %edx,%eax
f010a36e:	01 c0                	add    %eax,%eax
f010a370:	01 d0                	add    %edx,%eax
f010a372:	c1 e0 03             	shl    $0x3,%eax
f010a375:	01 d8                	add    %ebx,%eax
f010a377:	05 80 d5 01 00       	add    $0x1d580,%eax
f010a37c:	89 08                	mov    %ecx,(%eax)
			e->__ptr_tws[e->table_last_WS_index].empty = 0;
f010a37e:	8b 45 08             	mov    0x8(%ebp),%eax
f010a381:	8b 90 30 da 01 00    	mov    0x1da30(%eax),%edx
f010a387:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a38a:	89 d0                	mov    %edx,%eax
f010a38c:	01 c0                	add    %eax,%eax
f010a38e:	01 d0                	add    %edx,%eax
f010a390:	c1 e0 03             	shl    $0x3,%eax
f010a393:	01 c8                	add    %ecx,%eax
f010a395:	05 84 d5 01 00       	add    $0x1d584,%eax
f010a39a:	c6 00 00             	movb   $0x0,(%eax)
			e->__ptr_tws[e->table_last_WS_index].time_stamp = 0x00000000;
f010a39d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3a0:	8b 90 30 da 01 00    	mov    0x1da30(%eax),%edx
f010a3a6:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a3a9:	89 d0                	mov    %edx,%eax
f010a3ab:	01 c0                	add    %eax,%eax
f010a3ad:	01 d0                	add    %edx,%eax
f010a3af:	c1 e0 03             	shl    $0x3,%eax
f010a3b2:	01 c8                	add    %ecx,%eax
f010a3b4:	05 88 d5 01 00       	add    $0x1d588,%eax
f010a3b9:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			e->table_last_WS_index ++;
f010a3bf:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3c2:	8b 80 30 da 01 00    	mov    0x1da30(%eax),%eax
f010a3c8:	8d 50 01             	lea    0x1(%eax),%edx
f010a3cb:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3ce:	89 90 30 da 01 00    	mov    %edx,0x1da30(%eax)
			e->table_last_WS_index %= __TWS_MAX_SIZE;
f010a3d4:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3d7:	8b 80 30 da 01 00    	mov    0x1da30(%eax),%eax
f010a3dd:	b9 32 00 00 00       	mov    $0x32,%ecx
f010a3e2:	ba 00 00 00 00       	mov    $0x0,%edx
f010a3e7:	f7 f1                	div    %ecx
f010a3e9:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3ec:	89 90 30 da 01 00    	mov    %edx,0x1da30(%eax)
			if (e->table_last_WS_index == 0)
f010a3f2:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3f5:	8b 80 30 da 01 00    	mov    0x1da30(%eax),%eax
f010a3fb:	85 c0                	test   %eax,%eax
f010a3fd:	75 17                	jne    f010a416 <program_segment_alloc_map_copy_workingset+0x68d>
				panic("\nenv_create: Table working set become FULL during the application loading. Please increase the table working set size to be able to load the program successfully\n");
f010a3ff:	83 ec 04             	sub    $0x4,%esp
f010a402:	68 6c 2f 13 f0       	push   $0xf0132f6c
f010a407:	68 c3 02 00 00       	push   $0x2c3
f010a40c:	68 b7 2e 13 f0       	push   $0xf0132eb7
f010a411:	e8 9a 5d ff ff       	call   f01001b0 <_panic>
			(*lastTableNumber) = PDX(iVA);
f010a416:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a419:	c1 e8 16             	shr    $0x16,%eax
f010a41c:	89 c2                	mov    %eax,%edx
f010a41e:	8b 45 18             	mov    0x18(%ebp),%eax
f010a421:	89 10                	mov    %edx,(%eax)
		}

		/// TAKE CARE !!!! this was an destructive error
		/// DON'T MAKE IT " *allocated_pages ++ " EVER !
		(*allocated_pages) ++;
f010a423:	8b 45 10             	mov    0x10(%ebp),%eax
f010a426:	8b 00                	mov    (%eax),%eax
f010a428:	8d 50 01             	lea    0x1(%eax),%edx
f010a42b:	8b 45 10             	mov    0x10(%ebp),%eax
f010a42e:	89 10                	mov    %edx,(%eax)
	*allocated_pages = 0;
	/*2015*/// Load max of 6 pages only for the segment that start with va = 200000 [EXCEPT tpp]
	if (iVA == 0x200000 && strcmp(e->prog_name, "tpp")!=0)
		remaining_ws_pages = remaining_ws_pages < 6 ? remaining_ws_pages:6 ;
	/*==========================================================================================*/
	for (; iVA < end_vaddr && i<remaining_ws_pages; i++, iVA += PAGE_SIZE)
f010a430:	ff 45 f0             	incl   -0x10(%ebp)
f010a433:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f010a43a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a43d:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f010a440:	73 0c                	jae    f010a44e <program_segment_alloc_map_copy_workingset+0x6c5>
f010a442:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010a445:	3b 45 14             	cmp    0x14(%ebp),%eax
f010a448:	0f 82 e8 f9 ff ff    	jb     f0109e36 <program_segment_alloc_map_copy_workingset+0xad>
		/// TAKE CARE !!!! this was an destructive error
		/// DON'T MAKE IT " *allocated_pages ++ " EVER !
		(*allocated_pages) ++;
	}

	uint8 *src_ptr = (uint8 *)(seg->ptr_start) ;
f010a44e:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a451:	8b 00                	mov    (%eax),%eax
f010a453:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;
f010a456:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a459:	8b 40 0c             	mov    0xc(%eax),%eax
f010a45c:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f010a45f:	eb 10                	jmp    f010a471 <program_segment_alloc_map_copy_workingset+0x6e8>
			((uint32)dst_ptr< ((uint32)vaddr+ seg->size_in_file)) )
	{
		*dst_ptr = *src_ptr ;
f010a461:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010a464:	8a 10                	mov    (%eax),%dl
f010a466:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010a469:	88 10                	mov    %dl,(%eax)
		dst_ptr++ ;
f010a46b:	ff 45 e8             	incl   -0x18(%ebp)
		src_ptr++ ;
f010a46e:	ff 45 ec             	incl   -0x14(%ebp)
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f010a471:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010a474:	89 45 c8             	mov    %eax,-0x38(%ebp)
f010a477:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010a47a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010a47f:	89 c2                	mov    %eax,%edx
f010a481:	8b 45 10             	mov    0x10(%ebp),%eax
f010a484:	8b 00                	mov    (%eax),%eax
f010a486:	c1 e0 0c             	shl    $0xc,%eax
f010a489:	01 c2                	add    %eax,%edx
f010a48b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010a48e:	39 c2                	cmp    %eax,%edx
f010a490:	76 1d                	jbe    f010a4af <program_segment_alloc_map_copy_workingset+0x726>
			((uint32)dst_ptr< ((uint32)vaddr+ seg->size_in_file)) )
f010a492:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a495:	8b 50 04             	mov    0x4(%eax),%edx
f010a498:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010a49b:	01 c2                	add    %eax,%edx
f010a49d:	8b 45 e8             	mov    -0x18(%ebp),%eax
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f010a4a0:	39 c2                	cmp    %eax,%edx
f010a4a2:	77 bd                	ja     f010a461 <program_segment_alloc_map_copy_workingset+0x6d8>
		*dst_ptr = *src_ptr ;
		dst_ptr++ ;
		src_ptr++ ;
	}
	LOG_STRING("zeroing remaining page space");
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) )
f010a4a4:	eb 09                	jmp    f010a4af <program_segment_alloc_map_copy_workingset+0x726>
	{
		*dst_ptr = 0;
f010a4a6:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010a4a9:	c6 00 00             	movb   $0x0,(%eax)
		dst_ptr++ ;
f010a4ac:	ff 45 e8             	incl   -0x18(%ebp)
		*dst_ptr = *src_ptr ;
		dst_ptr++ ;
		src_ptr++ ;
	}
	LOG_STRING("zeroing remaining page space");
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) )
f010a4af:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010a4b2:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f010a4b5:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010a4b8:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010a4bd:	89 c2                	mov    %eax,%edx
f010a4bf:	8b 45 10             	mov    0x10(%ebp),%eax
f010a4c2:	8b 00                	mov    (%eax),%eax
f010a4c4:	c1 e0 0c             	shl    $0xc,%eax
f010a4c7:	01 c2                	add    %eax,%edx
f010a4c9:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010a4cc:	39 c2                	cmp    %eax,%edx
f010a4ce:	77 d6                	ja     f010a4a6 <program_segment_alloc_map_copy_workingset+0x71d>
	//	{
	//		uint32 *ptr_page_table;
	//		get_page_table(e->env_pgdir, iVA, 1, &ptr_page_table);
	//	}
	//	LOG_STRING("page tables created successfully");
	return 0;
f010a4d0:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010a4d5:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010a4d8:	c9                   	leave  
f010a4d9:	c3                   	ret    

f010a4da <create_user_directory>:

//==================================================
// 6) DYNAMICALLY ALLOCATE SPACE FOR USER DIRECTORY:
//==================================================
void * create_user_directory()
{
f010a4da:	55                   	push   %ebp
f010a4db:	89 e5                	mov    %esp,%ebp
f010a4dd:	83 ec 18             	sub    $0x18,%esp
	//panic("create_user_directory() is not implemented yet...!!");

	//Use kmalloc() to allocate a new directory

	//change this "return" according to your answer
	uint32* ptr_user_page_directory = kmalloc(PAGE_SIZE);
f010a4e0:	83 ec 0c             	sub    $0xc,%esp
f010a4e3:	68 00 10 00 00       	push   $0x1000
f010a4e8:	e8 72 da ff ff       	call   f0107f5f <kmalloc>
f010a4ed:	83 c4 10             	add    $0x10,%esp
f010a4f0:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(ptr_user_page_directory == NULL)
f010a4f3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010a4f7:	75 17                	jne    f010a510 <create_user_directory+0x36>
	{
		panic("NOT ENOUGH KERNEL HEAP SPACE");
f010a4f9:	83 ec 04             	sub    $0x4,%esp
f010a4fc:	68 0f 30 13 f0       	push   $0xf013300f
f010a501:	68 ff 02 00 00       	push   $0x2ff
f010a506:	68 b7 2e 13 f0       	push   $0xf0132eb7
f010a50b:	e8 a0 5c ff ff       	call   f01001b0 <_panic>
	}
	return ptr_user_page_directory;
f010a510:	8b 45 f4             	mov    -0xc(%ebp),%eax
	//return 0;
}
f010a513:	c9                   	leave  
f010a514:	c3                   	ret    

f010a515 <initialize_uheap_dynamic_allocator>:

//===============================================
// 7) INITIALIZE DYNAMIC ALLOCATOR OF UHEAP:
//===============================================
void initialize_uheap_dynamic_allocator(struct Env* e, uint32 daStart, uint32 daLimit)
{
f010a515:	55                   	push   %ebp
f010a516:	89 e5                	mov    %esp,%ebp
	//TODO: [PROJECT'23.MS2 - #07] [2] USER HEAP - initialize_uheap_dynamic_allocator()
	//Remember:
	//	1) there's no initial allocations for the dynamic allocator of the user heap (=0)
	//	2) call the initialize_dynamic_allocator(..) to complete the initialization
	//panic("not implemented yet");
}
f010a518:	90                   	nop
f010a519:	5d                   	pop    %ebp
f010a51a:	c3                   	ret    

f010a51b <initialize_environment>:
// and initialize the kernel portion of the new environment's address space.
// Do NOT (yet) map anything into the user portion
// of the environment's virtual address space.
//
void initialize_environment(struct Env* e, uint32* ptr_user_page_directory, unsigned int phys_user_page_directory)
{
f010a51b:	55                   	push   %ebp
f010a51c:	89 e5                	mov    %esp,%ebp
f010a51e:	53                   	push   %ebx
f010a51f:	83 ec 14             	sub    $0x14,%esp
	//panic("initialize_environment function is not completed yet") ;
	// [1] initialize the kernel portion of the new environment's address space.
	// [2] set e->env_pgdir and e->env_cr3 accordingly,
	int i;
	e->env_page_directory = ptr_user_page_directory;
f010a522:	8b 45 08             	mov    0x8(%ebp),%eax
f010a525:	8b 55 0c             	mov    0xc(%ebp),%edx
f010a528:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
	e->env_cr3 = phys_user_page_directory;
f010a52e:	8b 45 08             	mov    0x8(%ebp),%eax
f010a531:	8b 55 10             	mov    0x10(%ebp),%edx
f010a534:	89 90 a0 00 00 00    	mov    %edx,0xa0(%eax)

	//[TODODONE]: copy the kernel area only (to avoid copying the currently shared objects)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
f010a53a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010a541:	eb 1a                	jmp    f010a55d <initialize_environment+0x42>
	{
		e->env_page_directory[i] = 0 ;
f010a543:	8b 45 08             	mov    0x8(%ebp),%eax
f010a546:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010a54c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a54f:	c1 e2 02             	shl    $0x2,%edx
f010a552:	01 d0                	add    %edx,%eax
f010a554:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	int i;
	e->env_page_directory = ptr_user_page_directory;
	e->env_cr3 = phys_user_page_directory;

	//[TODODONE]: copy the kernel area only (to avoid copying the currently shared objects)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
f010a55a:	ff 45 f4             	incl   -0xc(%ebp)
f010a55d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a560:	3d ba 03 00 00       	cmp    $0x3ba,%eax
f010a565:	76 dc                	jbe    f010a543 <initialize_environment+0x28>
	{
		e->env_page_directory[i] = 0 ;
	}

	for (i = PDX(USER_TOP) ; i < 1024 ; i++)
f010a567:	c7 45 f4 bb 03 00 00 	movl   $0x3bb,-0xc(%ebp)
f010a56e:	eb 25                	jmp    f010a595 <initialize_environment+0x7a>
	{
		e->env_page_directory[i] = ptr_page_directory[i] ;
f010a570:	8b 45 08             	mov    0x8(%ebp),%eax
f010a573:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010a579:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a57c:	c1 e2 02             	shl    $0x2,%edx
f010a57f:	01 c2                	add    %eax,%edx
f010a581:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f010a586:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f010a589:	c1 e1 02             	shl    $0x2,%ecx
f010a58c:	01 c8                	add    %ecx,%eax
f010a58e:	8b 00                	mov    (%eax),%eax
f010a590:	89 02                	mov    %eax,(%edx)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
	{
		e->env_page_directory[i] = 0 ;
	}

	for (i = PDX(USER_TOP) ; i < 1024 ; i++)
f010a592:	ff 45 f4             	incl   -0xc(%ebp)
f010a595:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f010a59c:	7e d2                	jle    f010a570 <initialize_environment+0x55>
		LIST_INIT(&(e->page_WS_list));
		//share_pws_at_user_space(e);
	}
#else
	{
		uint32 env_index = (uint32)(e-envs);
f010a59e:	8b 45 08             	mov    0x8(%ebp),%eax
f010a5a1:	8b 15 70 31 25 f0    	mov    0xf0253170,%edx
f010a5a7:	29 d0                	sub    %edx,%eax
f010a5a9:	c1 f8 05             	sar    $0x5,%eax
f010a5ac:	89 c2                	mov    %eax,%edx
f010a5ae:	89 d0                	mov    %edx,%eax
f010a5b0:	c1 e0 03             	shl    $0x3,%eax
f010a5b3:	01 d0                	add    %edx,%eax
f010a5b5:	01 c0                	add    %eax,%eax
f010a5b7:	01 d0                	add    %edx,%eax
f010a5b9:	c1 e0 06             	shl    $0x6,%eax
f010a5bc:	01 d0                	add    %edx,%eax
f010a5be:	89 c1                	mov    %eax,%ecx
f010a5c0:	c1 e1 04             	shl    $0x4,%ecx
f010a5c3:	01 c8                	add    %ecx,%eax
f010a5c5:	c1 e0 03             	shl    $0x3,%eax
f010a5c8:	01 d0                	add    %edx,%eax
f010a5ca:	01 c0                	add    %eax,%eax
f010a5cc:	01 d0                	add    %edx,%eax
f010a5ce:	89 c1                	mov    %eax,%ecx
f010a5d0:	c1 e1 04             	shl    $0x4,%ecx
f010a5d3:	01 c8                	add    %ecx,%eax
f010a5d5:	c1 e0 03             	shl    $0x3,%eax
f010a5d8:	01 d0                	add    %edx,%eax
f010a5da:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010a5e1:	01 d0                	add    %edx,%eax
f010a5e3:	89 45 ec             	mov    %eax,-0x14(%ebp)
		e->__uptr_pws = (struct WorkingSetElement*) ( ((struct Env*)(UENVS+sizeof(struct Env)*env_index))->ptr_pageWorkingSet );
f010a5e6:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010a5e9:	89 d0                	mov    %edx,%eax
f010a5eb:	01 c0                	add    %eax,%eax
f010a5ed:	01 d0                	add    %edx,%eax
f010a5ef:	01 c0                	add    %eax,%eax
f010a5f1:	01 d0                	add    %edx,%eax
f010a5f3:	c1 e0 02             	shl    $0x2,%eax
f010a5f6:	01 d0                	add    %edx,%eax
f010a5f8:	01 c0                	add    %eax,%eax
f010a5fa:	01 d0                	add    %edx,%eax
f010a5fc:	c1 e0 02             	shl    $0x2,%eax
f010a5ff:	01 d0                	add    %edx,%eax
f010a601:	c1 e0 02             	shl    $0x2,%eax
f010a604:	01 d0                	add    %edx,%eax
f010a606:	c1 e0 02             	shl    $0x2,%eax
f010a609:	01 d0                	add    %edx,%eax
f010a60b:	c1 e0 05             	shl    $0x5,%eax
f010a60e:	2d 00 00 40 11       	sub    $0x11400000,%eax
f010a613:	8d 90 b8 00 00 00    	lea    0xb8(%eax),%edx
f010a619:	8b 45 08             	mov    0x8(%ebp),%eax
f010a61c:	89 90 6c da 01 00    	mov    %edx,0x1da6c(%eax)
#endif


	//2020
	// Add its elements to the "e->PageWorkingSetList"
	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f010a622:	83 ec 0c             	sub    $0xc,%esp
f010a625:	6a 02                	push   $0x2
f010a627:	e8 53 31 00 00       	call   f010d77f <isPageReplacmentAlgorithmLRU>
f010a62c:	83 c4 10             	add    $0x10,%esp
f010a62f:	85 c0                	test   %eax,%eax
f010a631:	0f 84 34 01 00 00    	je     f010a76b <initialize_environment+0x250>
	{
#if USE_KHEAP == 1
		//panic("not handled yet");
#else
		for (int i = 0; i < e->page_WS_max_size; ++i)
f010a637:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010a63e:	e9 14 01 00 00       	jmp    f010a757 <initialize_environment+0x23c>
		{
			LIST_INSERT_HEAD(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[i]));
f010a643:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a646:	89 d0                	mov    %edx,%eax
f010a648:	01 c0                	add    %eax,%eax
f010a64a:	01 d0                	add    %edx,%eax
f010a64c:	c1 e0 03             	shl    $0x3,%eax
f010a64f:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
f010a655:	8b 45 08             	mov    0x8(%ebp),%eax
f010a658:	01 d0                	add    %edx,%eax
f010a65a:	83 c0 08             	add    $0x8,%eax
f010a65d:	85 c0                	test   %eax,%eax
f010a65f:	75 17                	jne    f010a678 <initialize_environment+0x15d>
f010a661:	83 ec 04             	sub    $0x4,%esp
f010a664:	68 38 2f 13 f0       	push   $0xf0132f38
f010a669:	68 45 03 00 00       	push   $0x345
f010a66e:	68 b7 2e 13 f0       	push   $0xf0132eb7
f010a673:	e8 38 5b ff ff       	call   f01001b0 <_panic>
f010a678:	8b 45 08             	mov    0x8(%ebp),%eax
f010a67b:	8b 90 34 da 01 00    	mov    0x1da34(%eax),%edx
f010a681:	8b 5d 08             	mov    0x8(%ebp),%ebx
f010a684:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f010a687:	89 c8                	mov    %ecx,%eax
f010a689:	01 c0                	add    %eax,%eax
f010a68b:	01 c8                	add    %ecx,%eax
f010a68d:	c1 e0 03             	shl    $0x3,%eax
f010a690:	01 d8                	add    %ebx,%eax
f010a692:	05 c8 00 00 00       	add    $0xc8,%eax
f010a697:	89 10                	mov    %edx,(%eax)
f010a699:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a69c:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a69f:	89 d0                	mov    %edx,%eax
f010a6a1:	01 c0                	add    %eax,%eax
f010a6a3:	01 d0                	add    %edx,%eax
f010a6a5:	c1 e0 03             	shl    $0x3,%eax
f010a6a8:	01 c8                	add    %ecx,%eax
f010a6aa:	05 c8 00 00 00       	add    $0xc8,%eax
f010a6af:	8b 00                	mov    (%eax),%eax
f010a6b1:	85 c0                	test   %eax,%eax
f010a6b3:	74 28                	je     f010a6dd <initialize_environment+0x1c2>
f010a6b5:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6b8:	8b 90 34 da 01 00    	mov    0x1da34(%eax),%edx
f010a6be:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f010a6c1:	89 c8                	mov    %ecx,%eax
f010a6c3:	01 c0                	add    %eax,%eax
f010a6c5:	01 c8                	add    %ecx,%eax
f010a6c7:	c1 e0 03             	shl    $0x3,%eax
f010a6ca:	8d 88 b0 00 00 00    	lea    0xb0(%eax),%ecx
f010a6d0:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6d3:	01 c8                	add    %ecx,%eax
f010a6d5:	83 c0 08             	add    $0x8,%eax
f010a6d8:	89 42 14             	mov    %eax,0x14(%edx)
f010a6db:	eb 23                	jmp    f010a700 <initialize_environment+0x1e5>
f010a6dd:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a6e0:	89 d0                	mov    %edx,%eax
f010a6e2:	01 c0                	add    %eax,%eax
f010a6e4:	01 d0                	add    %edx,%eax
f010a6e6:	c1 e0 03             	shl    $0x3,%eax
f010a6e9:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
f010a6ef:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6f2:	01 d0                	add    %edx,%eax
f010a6f4:	8d 50 08             	lea    0x8(%eax),%edx
f010a6f7:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6fa:	89 90 38 da 01 00    	mov    %edx,0x1da38(%eax)
f010a700:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a703:	89 d0                	mov    %edx,%eax
f010a705:	01 c0                	add    %eax,%eax
f010a707:	01 d0                	add    %edx,%eax
f010a709:	c1 e0 03             	shl    $0x3,%eax
f010a70c:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
f010a712:	8b 45 08             	mov    0x8(%ebp),%eax
f010a715:	01 d0                	add    %edx,%eax
f010a717:	8d 50 08             	lea    0x8(%eax),%edx
f010a71a:	8b 45 08             	mov    0x8(%ebp),%eax
f010a71d:	89 90 34 da 01 00    	mov    %edx,0x1da34(%eax)
f010a723:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a726:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a729:	89 d0                	mov    %edx,%eax
f010a72b:	01 c0                	add    %eax,%eax
f010a72d:	01 d0                	add    %edx,%eax
f010a72f:	c1 e0 03             	shl    $0x3,%eax
f010a732:	01 c8                	add    %ecx,%eax
f010a734:	05 cc 00 00 00       	add    $0xcc,%eax
f010a739:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010a73f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a742:	8b 80 40 da 01 00    	mov    0x1da40(%eax),%eax
f010a748:	8d 50 01             	lea    0x1(%eax),%edx
f010a74b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a74e:	89 90 40 da 01 00    	mov    %edx,0x1da40(%eax)
	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
	{
#if USE_KHEAP == 1
		//panic("not handled yet");
#else
		for (int i = 0; i < e->page_WS_max_size; ++i)
f010a754:	ff 45 f0             	incl   -0x10(%ebp)
f010a757:	8b 45 08             	mov    0x8(%ebp),%eax
f010a75a:	8b 90 7c d5 01 00    	mov    0x1d57c(%eax),%edx
f010a760:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010a763:	39 c2                	cmp    %eax,%edx
f010a765:	0f 87 d8 fe ff ff    	ja     f010a643 <initialize_environment+0x128>
	}

	//initialize environment working set
#if USE_KHEAP
#else
	for(i=0; i< (e->page_WS_max_size); i++)
f010a76b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010a772:	eb 54                	jmp    f010a7c8 <initialize_environment+0x2ad>
	{
		e->ptr_pageWorkingSet[i].virtual_address = 0;
f010a774:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a777:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a77a:	89 d0                	mov    %edx,%eax
f010a77c:	01 c0                	add    %eax,%eax
f010a77e:	01 d0                	add    %edx,%eax
f010a780:	c1 e0 03             	shl    $0x3,%eax
f010a783:	01 c8                	add    %ecx,%eax
f010a785:	05 b8 00 00 00       	add    $0xb8,%eax
f010a78a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->ptr_pageWorkingSet[i].empty = 1;
f010a790:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a793:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a796:	89 d0                	mov    %edx,%eax
f010a798:	01 c0                	add    %eax,%eax
f010a79a:	01 d0                	add    %edx,%eax
f010a79c:	c1 e0 03             	shl    $0x3,%eax
f010a79f:	01 c8                	add    %ecx,%eax
f010a7a1:	05 bc 00 00 00       	add    $0xbc,%eax
f010a7a6:	c6 00 01             	movb   $0x1,(%eax)
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
f010a7a9:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a7ac:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a7af:	89 d0                	mov    %edx,%eax
f010a7b1:	01 c0                	add    %eax,%eax
f010a7b3:	01 d0                	add    %edx,%eax
f010a7b5:	c1 e0 03             	shl    $0x3,%eax
f010a7b8:	01 c8                	add    %ecx,%eax
f010a7ba:	05 c0 00 00 00       	add    $0xc0,%eax
f010a7bf:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	}

	//initialize environment working set
#if USE_KHEAP
#else
	for(i=0; i< (e->page_WS_max_size); i++)
f010a7c5:	ff 45 f4             	incl   -0xc(%ebp)
f010a7c8:	8b 45 08             	mov    0x8(%ebp),%eax
f010a7cb:	8b 90 7c d5 01 00    	mov    0x1d57c(%eax),%edx
f010a7d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a7d4:	39 c2                	cmp    %eax,%edx
f010a7d6:	77 9c                	ja     f010a774 <initialize_environment+0x259>
	{
		e->ptr_pageWorkingSet[i].virtual_address = 0;
		e->ptr_pageWorkingSet[i].empty = 1;
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
	}
	e->page_last_WS_index = 0;
f010a7d8:	8b 45 08             	mov    0x8(%ebp),%eax
f010a7db:	c7 80 78 d5 01 00 00 	movl   $0x0,0x1d578(%eax)
f010a7e2:	00 00 00 
#endif

	for(i=0; i< __TWS_MAX_SIZE; i++)
f010a7e5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010a7ec:	eb 54                	jmp    f010a842 <initialize_environment+0x327>
	{
		e->__ptr_tws[i].virtual_address = 0;
f010a7ee:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a7f1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a7f4:	89 d0                	mov    %edx,%eax
f010a7f6:	01 c0                	add    %eax,%eax
f010a7f8:	01 d0                	add    %edx,%eax
f010a7fa:	c1 e0 03             	shl    $0x3,%eax
f010a7fd:	01 c8                	add    %ecx,%eax
f010a7ff:	05 80 d5 01 00       	add    $0x1d580,%eax
f010a804:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->__ptr_tws[i].empty = 1;
f010a80a:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a80d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a810:	89 d0                	mov    %edx,%eax
f010a812:	01 c0                	add    %eax,%eax
f010a814:	01 d0                	add    %edx,%eax
f010a816:	c1 e0 03             	shl    $0x3,%eax
f010a819:	01 c8                	add    %ecx,%eax
f010a81b:	05 84 d5 01 00       	add    $0x1d584,%eax
f010a820:	c6 00 01             	movb   $0x1,(%eax)
		e->__ptr_tws[i].time_stamp = 0 ;
f010a823:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a826:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a829:	89 d0                	mov    %edx,%eax
f010a82b:	01 c0                	add    %eax,%eax
f010a82d:	01 d0                	add    %edx,%eax
f010a82f:	c1 e0 03             	shl    $0x3,%eax
f010a832:	01 c8                	add    %ecx,%eax
f010a834:	05 88 d5 01 00       	add    $0x1d588,%eax
f010a839:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
	}
	e->page_last_WS_index = 0;
#endif

	for(i=0; i< __TWS_MAX_SIZE; i++)
f010a83f:	ff 45 f4             	incl   -0xc(%ebp)
f010a842:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f010a846:	7e a6                	jle    f010a7ee <initialize_environment+0x2d3>
		e->__ptr_tws[i].virtual_address = 0;
		e->__ptr_tws[i].empty = 1;
		e->__ptr_tws[i].time_stamp = 0 ;
	}

	e->table_last_WS_index = 0;
f010a848:	8b 45 08             	mov    0x8(%ebp),%eax
f010a84b:	c7 80 30 da 01 00 00 	movl   $0x0,0x1da30(%eax)
f010a852:	00 00 00 

	e->pageFaultsCounter=0;
f010a855:	8b 45 08             	mov    0x8(%ebp),%eax
f010a858:	c7 80 74 da 01 00 00 	movl   $0x0,0x1da74(%eax)
f010a85f:	00 00 00 
	e->tableFaultsCounter=0;
f010a862:	8b 45 08             	mov    0x8(%ebp),%eax
f010a865:	c7 80 78 da 01 00 00 	movl   $0x0,0x1da78(%eax)
f010a86c:	00 00 00 

	e->freeingFullWSCounter = 0;
f010a86f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a872:	c7 80 7c da 01 00 00 	movl   $0x0,0x1da7c(%eax)
f010a879:	00 00 00 
	e->freeingScarceMemCounter = 0;
f010a87c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a87f:	c7 80 80 da 01 00 00 	movl   $0x0,0x1da80(%eax)
f010a886:	00 00 00 

	e->nModifiedPages=0;
f010a889:	8b 45 08             	mov    0x8(%ebp),%eax
f010a88c:	c7 80 84 da 01 00 00 	movl   $0x0,0x1da84(%eax)
f010a893:	00 00 00 
	e->nNotModifiedPages=0;
f010a896:	8b 45 08             	mov    0x8(%ebp),%eax
f010a899:	c7 80 88 da 01 00 00 	movl   $0x0,0x1da88(%eax)
f010a8a0:	00 00 00 
	e->nClocks = 0;
f010a8a3:	8b 45 08             	mov    0x8(%ebp),%eax
f010a8a6:	c7 80 9c da 01 00 00 	movl   $0x0,0x1da9c(%eax)
f010a8ad:	00 00 00 

	//2020
	e->nPageIn = 0;
f010a8b0:	8b 45 08             	mov    0x8(%ebp),%eax
f010a8b3:	c7 80 90 da 01 00 00 	movl   $0x0,0x1da90(%eax)
f010a8ba:	00 00 00 
	e->nPageOut = 0;
f010a8bd:	8b 45 08             	mov    0x8(%ebp),%eax
f010a8c0:	c7 80 94 da 01 00 00 	movl   $0x0,0x1da94(%eax)
f010a8c7:	00 00 00 
	e->nNewPageAdded = 0;
f010a8ca:	8b 45 08             	mov    0x8(%ebp),%eax
f010a8cd:	c7 80 98 da 01 00 00 	movl   $0x0,0x1da98(%eax)
f010a8d4:	00 00 00 

	//e->shared_free_address = USER_SHARED_MEM_START;

	/*2024*/
	//[PROJECT'23.DONE] call initialize_uheap_dynamic_allocator(...)
	initialize_uheap_dynamic_allocator(e, USER_HEAP_START, USER_HEAP_START + DYN_ALLOC_MAX_SIZE);
f010a8d7:	83 ec 04             	sub    $0x4,%esp
f010a8da:	68 00 00 00 82       	push   $0x82000000
f010a8df:	68 00 00 00 80       	push   $0x80000000
f010a8e4:	ff 75 08             	pushl  0x8(%ebp)
f010a8e7:	e8 29 fc ff ff       	call   f010a515 <initialize_uheap_dynamic_allocator>
f010a8ec:	83 c4 10             	add    $0x10,%esp

	//Completes other environment initializations, (envID, status and most of registers)
	complete_environment_initialization(e);
f010a8ef:	83 ec 0c             	sub    $0xc,%esp
f010a8f2:	ff 75 08             	pushl  0x8(%ebp)
f010a8f5:	e8 09 00 00 00       	call   f010a903 <complete_environment_initialization>
f010a8fa:	83 c4 10             	add    $0x10,%esp
}
f010a8fd:	90                   	nop
f010a8fe:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010a901:	c9                   	leave  
f010a902:	c3                   	ret    

f010a903 <complete_environment_initialization>:

//========================================================
// 9) COMPLETE INITIALIZATION [OTHERS: ID, REGS, STATUS...):
//========================================================
void complete_environment_initialization(struct Env* e)
{
f010a903:	55                   	push   %ebp
f010a904:	89 e5                	mov    %esp,%ebp
f010a906:	53                   	push   %ebx
f010a907:	83 ec 14             	sub    $0x14,%esp
	//VPT and UVPT map the env's own page table, with
	//different permissions.
	e->env_page_directory[PDX(VPT)]  = e->env_cr3 | PERM_PRESENT | PERM_WRITEABLE;
f010a90a:	8b 45 08             	mov    0x8(%ebp),%eax
f010a90d:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010a913:	8d 90 fc 0e 00 00    	lea    0xefc(%eax),%edx
f010a919:	8b 45 08             	mov    0x8(%ebp),%eax
f010a91c:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f010a922:	83 c8 03             	or     $0x3,%eax
f010a925:	89 02                	mov    %eax,(%edx)
	e->env_page_directory[PDX(UVPT)] = e->env_cr3 | PERM_PRESENT | PERM_USER;
f010a927:	8b 45 08             	mov    0x8(%ebp),%eax
f010a92a:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010a930:	8d 90 f4 0e 00 00    	lea    0xef4(%eax),%edx
f010a936:	8b 45 08             	mov    0x8(%ebp),%eax
f010a939:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f010a93f:	83 c8 05             	or     $0x5,%eax
f010a942:	89 02                	mov    %eax,(%edx)

	// page file directory initialization
	e->disk_env_pgdir= 0;
f010a944:	8b 45 08             	mov    0x8(%ebp),%eax
f010a947:	c7 80 a8 00 00 00 00 	movl   $0x0,0xa8(%eax)
f010a94e:	00 00 00 
	e->disk_env_pgdir_PA= 0;
f010a951:	8b 45 08             	mov    0x8(%ebp),%eax
f010a954:	c7 80 ac 00 00 00 00 	movl   $0x0,0xac(%eax)
f010a95b:	00 00 00 
	e->disk_env_tabledir = 0;
f010a95e:	8b 45 08             	mov    0x8(%ebp),%eax
f010a961:	c7 80 b0 00 00 00 00 	movl   $0x0,0xb0(%eax)
f010a968:	00 00 00 
	e->disk_env_tabledir_PA = 0;
f010a96b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a96e:	c7 80 b4 00 00 00 00 	movl   $0x0,0xb4(%eax)
f010a975:	00 00 00 

	int32 generation;
	// Generate an env_id for this environment.
	/*2022: UPDATED*/generation = (e->env_id + (1 << ENVGENSHIFT)) & ~(NEARPOW2NENV - 1);
f010a978:	8b 45 08             	mov    0x8(%ebp),%eax
f010a97b:	8b 58 4c             	mov    0x4c(%eax),%ebx
f010a97e:	83 ec 0c             	sub    $0xc,%esp
f010a981:	6a 08                	push   $0x8
f010a983:	e8 75 32 02 00       	call   f012dbfd <log2_ceil>
f010a988:	83 c4 10             	add    $0x10,%esp
f010a98b:	ba 01 00 00 00       	mov    $0x1,%edx
f010a990:	88 c1                	mov    %al,%cl
f010a992:	d3 e2                	shl    %cl,%edx
f010a994:	89 d0                	mov    %edx,%eax
f010a996:	01 d8                	add    %ebx,%eax
f010a998:	89 c3                	mov    %eax,%ebx
f010a99a:	83 ec 0c             	sub    $0xc,%esp
f010a99d:	6a 08                	push   $0x8
f010a99f:	e8 24 32 02 00       	call   f012dbc8 <nearest_pow2_ceil>
f010a9a4:	83 c4 10             	add    $0x10,%esp
f010a9a7:	f7 d8                	neg    %eax
f010a9a9:	21 d8                	and    %ebx,%eax
f010a9ab:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (generation <= 0)	// Don't create a negative env_id.
f010a9ae:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010a9b2:	7f 1b                	jg     f010a9cf <complete_environment_initialization+0xcc>
		generation = 1 << ENVGENSHIFT;
f010a9b4:	83 ec 0c             	sub    $0xc,%esp
f010a9b7:	6a 08                	push   $0x8
f010a9b9:	e8 3f 32 02 00       	call   f012dbfd <log2_ceil>
f010a9be:	83 c4 10             	add    $0x10,%esp
f010a9c1:	ba 01 00 00 00       	mov    $0x1,%edx
f010a9c6:	88 c1                	mov    %al,%cl
f010a9c8:	d3 e2                	shl    %cl,%edx
f010a9ca:	89 d0                	mov    %edx,%eax
f010a9cc:	89 45 f4             	mov    %eax,-0xc(%ebp)
	e->env_id = generation | (e - envs);
f010a9cf:	8b 45 08             	mov    0x8(%ebp),%eax
f010a9d2:	8b 15 70 31 25 f0    	mov    0xf0253170,%edx
f010a9d8:	29 d0                	sub    %edx,%eax
f010a9da:	c1 f8 05             	sar    $0x5,%eax
f010a9dd:	89 c2                	mov    %eax,%edx
f010a9df:	89 d0                	mov    %edx,%eax
f010a9e1:	c1 e0 03             	shl    $0x3,%eax
f010a9e4:	01 d0                	add    %edx,%eax
f010a9e6:	01 c0                	add    %eax,%eax
f010a9e8:	01 d0                	add    %edx,%eax
f010a9ea:	c1 e0 06             	shl    $0x6,%eax
f010a9ed:	01 d0                	add    %edx,%eax
f010a9ef:	89 c1                	mov    %eax,%ecx
f010a9f1:	c1 e1 04             	shl    $0x4,%ecx
f010a9f4:	01 c8                	add    %ecx,%eax
f010a9f6:	c1 e0 03             	shl    $0x3,%eax
f010a9f9:	01 d0                	add    %edx,%eax
f010a9fb:	01 c0                	add    %eax,%eax
f010a9fd:	01 d0                	add    %edx,%eax
f010a9ff:	89 c1                	mov    %eax,%ecx
f010aa01:	c1 e1 04             	shl    $0x4,%ecx
f010aa04:	01 c8                	add    %ecx,%eax
f010aa06:	c1 e0 03             	shl    $0x3,%eax
f010aa09:	01 d0                	add    %edx,%eax
f010aa0b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010aa12:	01 d0                	add    %edx,%eax
f010aa14:	0b 45 f4             	or     -0xc(%ebp),%eax
f010aa17:	89 c2                	mov    %eax,%edx
f010aa19:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa1c:	89 50 4c             	mov    %edx,0x4c(%eax)

	//cprintf("ENV_CREATE: envID = %d, orig index in envs = %d, calc index using ENVX = %d\n", e->env_id, (e - envs), ENVX(e->env_id));

	// Set the basic status variables.
	//2017====================================================
	if (curenv == NULL)
f010aa1f:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f010aa24:	85 c0                	test   %eax,%eax
f010aa26:	75 0c                	jne    f010aa34 <complete_environment_initialization+0x131>
		e->env_parent_id = 0;//no parent;
f010aa28:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa2b:	c7 40 50 00 00 00 00 	movl   $0x0,0x50(%eax)
f010aa32:	eb 0e                	jmp    f010aa42 <complete_environment_initialization+0x13f>
	else
		e->env_parent_id = curenv->env_id;//curenv is the parent;
f010aa34:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f010aa39:	8b 50 4c             	mov    0x4c(%eax),%edx
f010aa3c:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa3f:	89 50 50             	mov    %edx,0x50(%eax)
	//========================================================
	e->env_status = ENV_NEW;
f010aa42:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa45:	c7 40 54 04 00 00 00 	movl   $0x4,0x54(%eax)
	e->env_runs = 0;
f010aa4c:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa4f:	c7 80 8c da 01 00 00 	movl   $0x0,0x1da8c(%eax)
f010aa56:	00 00 00 

	// Clear out all the saved register state,
	// to prevent the register values
	// of a prior environment inhabiting this Env structure
	// from "leaking" into our new environment.
	memset(&e->env_tf, 0, sizeof(e->env_tf));
f010aa59:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa5c:	83 ec 04             	sub    $0x4,%esp
f010aa5f:	6a 44                	push   $0x44
f010aa61:	6a 00                	push   $0x0
f010aa63:	50                   	push   %eax
f010aa64:	e8 c2 45 02 00       	call   f012f02b <memset>
f010aa69:	83 c4 10             	add    $0x10,%esp
	// GD_UD is the user data segment selector in the GDT, and
	// GD_UT is the user text segment selector (see inc/memlayout.h).
	// The low 2 bits of each segment register contains the
	// Requester Privilege Level (RPL); 3 means user mode.

	e->env_tf.tf_ds = GD_UD | 3;
f010aa6c:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa6f:	66 c7 40 24 23 00    	movw   $0x23,0x24(%eax)
	e->env_tf.tf_es = GD_UD | 3;
f010aa75:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa78:	66 c7 40 20 23 00    	movw   $0x23,0x20(%eax)
	e->env_tf.tf_ss = GD_UD | 3;
f010aa7e:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa81:	66 c7 40 40 23 00    	movw   $0x23,0x40(%eax)
	e->env_tf.tf_esp = (uint32*)USTACKTOP;
f010aa87:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa8a:	c7 40 3c 00 e0 bf ee 	movl   $0xeebfe000,0x3c(%eax)
	e->env_tf.tf_cs = GD_UT | 3;
f010aa91:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa94:	66 c7 40 34 1b 00    	movw   $0x1b,0x34(%eax)
	e->env_tf.tf_eflags |= FL_IF;
f010aa9a:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa9d:	8b 40 38             	mov    0x38(%eax),%eax
f010aaa0:	80 cc 02             	or     $0x2,%ah
f010aaa3:	89 c2                	mov    %eax,%edx
f010aaa5:	8b 45 08             	mov    0x8(%ebp),%eax
f010aaa8:	89 50 38             	mov    %edx,0x38(%eax)

	// You will set e->env_tf.tf_eip later.

	// commit the allocation
	LIST_REMOVE(&env_free_list ,e);
f010aaab:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010aaaf:	75 17                	jne    f010aac8 <complete_environment_initialization+0x1c5>
f010aab1:	83 ec 04             	sub    $0x4,%esp
f010aab4:	68 19 2f 13 f0       	push   $0xf0132f19
f010aab9:	68 b1 03 00 00       	push   $0x3b1
f010aabe:	68 b7 2e 13 f0       	push   $0xf0132eb7
f010aac3:	e8 e8 56 ff ff       	call   f01001b0 <_panic>
f010aac8:	8b 45 08             	mov    0x8(%ebp),%eax
f010aacb:	8b 40 44             	mov    0x44(%eax),%eax
f010aace:	85 c0                	test   %eax,%eax
f010aad0:	74 11                	je     f010aae3 <complete_environment_initialization+0x1e0>
f010aad2:	8b 45 08             	mov    0x8(%ebp),%eax
f010aad5:	8b 40 44             	mov    0x44(%eax),%eax
f010aad8:	8b 55 08             	mov    0x8(%ebp),%edx
f010aadb:	8b 52 48             	mov    0x48(%edx),%edx
f010aade:	89 50 48             	mov    %edx,0x48(%eax)
f010aae1:	eb 0b                	jmp    f010aaee <complete_environment_initialization+0x1eb>
f010aae3:	8b 45 08             	mov    0x8(%ebp),%eax
f010aae6:	8b 40 48             	mov    0x48(%eax),%eax
f010aae9:	a3 7c 31 25 f0       	mov    %eax,0xf025317c
f010aaee:	8b 45 08             	mov    0x8(%ebp),%eax
f010aaf1:	8b 40 48             	mov    0x48(%eax),%eax
f010aaf4:	85 c0                	test   %eax,%eax
f010aaf6:	74 11                	je     f010ab09 <complete_environment_initialization+0x206>
f010aaf8:	8b 45 08             	mov    0x8(%ebp),%eax
f010aafb:	8b 40 48             	mov    0x48(%eax),%eax
f010aafe:	8b 55 08             	mov    0x8(%ebp),%edx
f010ab01:	8b 52 44             	mov    0x44(%edx),%edx
f010ab04:	89 50 44             	mov    %edx,0x44(%eax)
f010ab07:	eb 0b                	jmp    f010ab14 <complete_environment_initialization+0x211>
f010ab09:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab0c:	8b 40 44             	mov    0x44(%eax),%eax
f010ab0f:	a3 78 31 25 f0       	mov    %eax,0xf0253178
f010ab14:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab17:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f010ab1e:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab21:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010ab28:	a1 84 31 25 f0       	mov    0xf0253184,%eax
f010ab2d:	48                   	dec    %eax
f010ab2e:	a3 84 31 25 f0       	mov    %eax,0xf0253184
	return ;
f010ab33:	90                   	nop
}
f010ab34:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010ab37:	c9                   	leave  
f010ab38:	c3                   	ret    

f010ab39 <set_environment_entry_point>:

//===============================================
// 10) SET EIP REG VALUE BY ENV ENTRY POINT:
//===============================================
void set_environment_entry_point(struct Env* e, uint8* ptr_program_start)
{
f010ab39:	55                   	push   %ebp
f010ab3a:	89 e5                	mov    %esp,%ebp
f010ab3c:	83 ec 18             	sub    $0x18,%esp
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f010ab3f:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ab42:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f010ab45:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ab48:	8b 00                	mov    (%eax),%eax
f010ab4a:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f010ab4f:	74 17                	je     f010ab68 <set_environment_entry_point+0x2f>
		panic("Matafa2nash 3ala Keda");
f010ab51:	83 ec 04             	sub    $0x4,%esp
f010ab54:	68 2c 30 13 f0       	push   $0xf013302c
f010ab59:	68 bd 03 00 00       	push   $0x3bd
f010ab5e:	68 b7 2e 13 f0       	push   $0xf0132eb7
f010ab63:	e8 48 56 ff ff       	call   f01001b0 <_panic>
	e->env_tf.tf_eip = (uint32*)pELFHDR->e_entry ;
f010ab68:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ab6b:	8b 40 18             	mov    0x18(%eax),%eax
f010ab6e:	89 c2                	mov    %eax,%edx
f010ab70:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab73:	89 50 30             	mov    %edx,0x30(%eax)
}
f010ab76:	90                   	nop
f010ab77:	c9                   	leave  
f010ab78:	c3                   	ret    

f010ab79 <PROGRAM_SEGMENT_NEXT>:

//===============================================
// 13) SEG NEXT [TO BE USED IN PROG_SEG_FOREACH]:
//===============================================
struct ProgramSegment* PROGRAM_SEGMENT_NEXT(struct ProgramSegment* seg, uint8* ptr_program_start)
{
f010ab79:	55                   	push   %ebp
f010ab7a:	89 e5                	mov    %esp,%ebp
f010ab7c:	83 ec 18             	sub    $0x18,%esp
	int index = (*seg).segment_id++;
f010ab7f:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab82:	8b 40 10             	mov    0x10(%eax),%eax
f010ab85:	8d 48 01             	lea    0x1(%eax),%ecx
f010ab88:	8b 55 08             	mov    0x8(%ebp),%edx
f010ab8b:	89 4a 10             	mov    %ecx,0x10(%edx)
f010ab8e:	89 45 f4             	mov    %eax,-0xc(%ebp)

	struct Proghdr *ph, *eph;
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f010ab91:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ab94:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f010ab97:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ab9a:	8b 00                	mov    (%eax),%eax
f010ab9c:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f010aba1:	74 17                	je     f010abba <PROGRAM_SEGMENT_NEXT+0x41>
		panic("Matafa2nash 3ala Keda");
f010aba3:	83 ec 04             	sub    $0x4,%esp
f010aba6:	68 2c 30 13 f0       	push   $0xf013302c
f010abab:	68 cc 03 00 00       	push   $0x3cc
f010abb0:	68 b7 2e 13 f0       	push   $0xf0132eb7
f010abb5:	e8 f6 55 ff ff       	call   f01001b0 <_panic>
	ph = (struct Proghdr *) ( ((uint8 *) ptr_program_start) + pELFHDR->e_phoff);
f010abba:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010abbd:	8b 50 1c             	mov    0x1c(%eax),%edx
f010abc0:	8b 45 0c             	mov    0xc(%ebp),%eax
f010abc3:	01 d0                	add    %edx,%eax
f010abc5:	89 45 ec             	mov    %eax,-0x14(%ebp)

	while (ph[(*seg).segment_id].p_type != ELF_PROG_LOAD && ((*seg).segment_id < pELFHDR->e_phnum)) (*seg).segment_id++;
f010abc8:	eb 0f                	jmp    f010abd9 <PROGRAM_SEGMENT_NEXT+0x60>
f010abca:	8b 45 08             	mov    0x8(%ebp),%eax
f010abcd:	8b 40 10             	mov    0x10(%eax),%eax
f010abd0:	8d 50 01             	lea    0x1(%eax),%edx
f010abd3:	8b 45 08             	mov    0x8(%ebp),%eax
f010abd6:	89 50 10             	mov    %edx,0x10(%eax)
f010abd9:	8b 45 08             	mov    0x8(%ebp),%eax
f010abdc:	8b 40 10             	mov    0x10(%eax),%eax
f010abdf:	c1 e0 05             	shl    $0x5,%eax
f010abe2:	89 c2                	mov    %eax,%edx
f010abe4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010abe7:	01 d0                	add    %edx,%eax
f010abe9:	8b 00                	mov    (%eax),%eax
f010abeb:	83 f8 01             	cmp    $0x1,%eax
f010abee:	74 13                	je     f010ac03 <PROGRAM_SEGMENT_NEXT+0x8a>
f010abf0:	8b 45 08             	mov    0x8(%ebp),%eax
f010abf3:	8b 50 10             	mov    0x10(%eax),%edx
f010abf6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010abf9:	8b 40 2c             	mov    0x2c(%eax),%eax
f010abfc:	0f b7 c0             	movzwl %ax,%eax
f010abff:	39 c2                	cmp    %eax,%edx
f010ac01:	72 c7                	jb     f010abca <PROGRAM_SEGMENT_NEXT+0x51>
	index = (*seg).segment_id;
f010ac03:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac06:	8b 40 10             	mov    0x10(%eax),%eax
f010ac09:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if(index < pELFHDR->e_phnum)
f010ac0c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ac0f:	8b 40 2c             	mov    0x2c(%eax),%eax
f010ac12:	0f b7 c0             	movzwl %ax,%eax
f010ac15:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010ac18:	7e 63                	jle    f010ac7d <PROGRAM_SEGMENT_NEXT+0x104>
	{
		(*seg).ptr_start = (uint8 *) ptr_program_start + ph[index].p_offset;
f010ac1a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ac1d:	c1 e0 05             	shl    $0x5,%eax
f010ac20:	89 c2                	mov    %eax,%edx
f010ac22:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ac25:	01 d0                	add    %edx,%eax
f010ac27:	8b 50 04             	mov    0x4(%eax),%edx
f010ac2a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ac2d:	01 c2                	add    %eax,%edx
f010ac2f:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac32:	89 10                	mov    %edx,(%eax)
		(*seg).size_in_memory =  ph[index].p_memsz;
f010ac34:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ac37:	c1 e0 05             	shl    $0x5,%eax
f010ac3a:	89 c2                	mov    %eax,%edx
f010ac3c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ac3f:	01 d0                	add    %edx,%eax
f010ac41:	8b 50 14             	mov    0x14(%eax),%edx
f010ac44:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac47:	89 50 08             	mov    %edx,0x8(%eax)
		(*seg).size_in_file = ph[index].p_filesz;
f010ac4a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ac4d:	c1 e0 05             	shl    $0x5,%eax
f010ac50:	89 c2                	mov    %eax,%edx
f010ac52:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ac55:	01 d0                	add    %edx,%eax
f010ac57:	8b 50 10             	mov    0x10(%eax),%edx
f010ac5a:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac5d:	89 50 04             	mov    %edx,0x4(%eax)
		(*seg).virtual_address = (uint8*)ph[index].p_va;
f010ac60:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ac63:	c1 e0 05             	shl    $0x5,%eax
f010ac66:	89 c2                	mov    %eax,%edx
f010ac68:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ac6b:	01 d0                	add    %edx,%eax
f010ac6d:	8b 40 08             	mov    0x8(%eax),%eax
f010ac70:	89 c2                	mov    %eax,%edx
f010ac72:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac75:	89 50 0c             	mov    %edx,0xc(%eax)
		return seg;
f010ac78:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac7b:	eb 05                	jmp    f010ac82 <PROGRAM_SEGMENT_NEXT+0x109>
	}
	return 0;
f010ac7d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010ac82:	c9                   	leave  
f010ac83:	c3                   	ret    

f010ac84 <PROGRAM_SEGMENT_FIRST>:

//===============================================
// 14) SEG FIRST [TO BE USED IN PROG_SEG_FOREACH]:
//===============================================
struct ProgramSegment PROGRAM_SEGMENT_FIRST( uint8* ptr_program_start)
{
f010ac84:	55                   	push   %ebp
f010ac85:	89 e5                	mov    %esp,%ebp
f010ac87:	57                   	push   %edi
f010ac88:	56                   	push   %esi
f010ac89:	53                   	push   %ebx
f010ac8a:	83 ec 2c             	sub    $0x2c,%esp
	struct ProgramSegment seg;
	seg.segment_id = 0;
f010ac8d:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)

	struct Proghdr *ph, *eph;
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f010ac94:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ac97:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f010ac9a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ac9d:	8b 00                	mov    (%eax),%eax
f010ac9f:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f010aca4:	74 17                	je     f010acbd <PROGRAM_SEGMENT_FIRST+0x39>
		panic("Matafa2nash 3ala Keda");
f010aca6:	83 ec 04             	sub    $0x4,%esp
f010aca9:	68 2c 30 13 f0       	push   $0xf013302c
f010acae:	68 e8 03 00 00       	push   $0x3e8
f010acb3:	68 b7 2e 13 f0       	push   $0xf0132eb7
f010acb8:	e8 f3 54 ff ff       	call   f01001b0 <_panic>
	ph = (struct Proghdr *) ( ((uint8 *) ptr_program_start) + pELFHDR->e_phoff);
f010acbd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010acc0:	8b 50 1c             	mov    0x1c(%eax),%edx
f010acc3:	8b 45 0c             	mov    0xc(%ebp),%eax
f010acc6:	01 d0                	add    %edx,%eax
f010acc8:	89 45 e0             	mov    %eax,-0x20(%ebp)
	while (ph[(seg).segment_id].p_type != ELF_PROG_LOAD && ((seg).segment_id < pELFHDR->e_phnum)) (seg).segment_id++;
f010accb:	eb 07                	jmp    f010acd4 <PROGRAM_SEGMENT_FIRST+0x50>
f010accd:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010acd0:	40                   	inc    %eax
f010acd1:	89 45 d8             	mov    %eax,-0x28(%ebp)
f010acd4:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010acd7:	c1 e0 05             	shl    $0x5,%eax
f010acda:	89 c2                	mov    %eax,%edx
f010acdc:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010acdf:	01 d0                	add    %edx,%eax
f010ace1:	8b 00                	mov    (%eax),%eax
f010ace3:	83 f8 01             	cmp    $0x1,%eax
f010ace6:	74 10                	je     f010acf8 <PROGRAM_SEGMENT_FIRST+0x74>
f010ace8:	8b 55 d8             	mov    -0x28(%ebp),%edx
f010aceb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010acee:	8b 40 2c             	mov    0x2c(%eax),%eax
f010acf1:	0f b7 c0             	movzwl %ax,%eax
f010acf4:	39 c2                	cmp    %eax,%edx
f010acf6:	72 d5                	jb     f010accd <PROGRAM_SEGMENT_FIRST+0x49>
	int index = (seg).segment_id;
f010acf8:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010acfb:	89 45 dc             	mov    %eax,-0x24(%ebp)

	if(index < pELFHDR->e_phnum)
f010acfe:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ad01:	8b 40 2c             	mov    0x2c(%eax),%eax
f010ad04:	0f b7 c0             	movzwl %ax,%eax
f010ad07:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f010ad0a:	7e 68                	jle    f010ad74 <PROGRAM_SEGMENT_FIRST+0xf0>
	{
		(seg).ptr_start = (uint8 *) ptr_program_start + ph[index].p_offset;
f010ad0c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ad0f:	c1 e0 05             	shl    $0x5,%eax
f010ad12:	89 c2                	mov    %eax,%edx
f010ad14:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010ad17:	01 d0                	add    %edx,%eax
f010ad19:	8b 50 04             	mov    0x4(%eax),%edx
f010ad1c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ad1f:	01 d0                	add    %edx,%eax
f010ad21:	89 45 c8             	mov    %eax,-0x38(%ebp)
		(seg).size_in_memory =  ph[index].p_memsz;
f010ad24:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ad27:	c1 e0 05             	shl    $0x5,%eax
f010ad2a:	89 c2                	mov    %eax,%edx
f010ad2c:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010ad2f:	01 d0                	add    %edx,%eax
f010ad31:	8b 40 14             	mov    0x14(%eax),%eax
f010ad34:	89 45 d0             	mov    %eax,-0x30(%ebp)
		(seg).size_in_file = ph[index].p_filesz;
f010ad37:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ad3a:	c1 e0 05             	shl    $0x5,%eax
f010ad3d:	89 c2                	mov    %eax,%edx
f010ad3f:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010ad42:	01 d0                	add    %edx,%eax
f010ad44:	8b 40 10             	mov    0x10(%eax),%eax
f010ad47:	89 45 cc             	mov    %eax,-0x34(%ebp)
		(seg).virtual_address = (uint8*)ph[index].p_va;
f010ad4a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ad4d:	c1 e0 05             	shl    $0x5,%eax
f010ad50:	89 c2                	mov    %eax,%edx
f010ad52:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010ad55:	01 d0                	add    %edx,%eax
f010ad57:	8b 40 08             	mov    0x8(%eax),%eax
f010ad5a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		return seg;
f010ad5d:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad60:	89 c3                	mov    %eax,%ebx
f010ad62:	8d 45 c8             	lea    -0x38(%ebp),%eax
f010ad65:	ba 05 00 00 00       	mov    $0x5,%edx
f010ad6a:	89 df                	mov    %ebx,%edi
f010ad6c:	89 c6                	mov    %eax,%esi
f010ad6e:	89 d1                	mov    %edx,%ecx
f010ad70:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f010ad72:	eb 1c                	jmp    f010ad90 <PROGRAM_SEGMENT_FIRST+0x10c>
	}
	seg.segment_id = -1;
f010ad74:	c7 45 d8 ff ff ff ff 	movl   $0xffffffff,-0x28(%ebp)
	return seg;
f010ad7b:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad7e:	89 c3                	mov    %eax,%ebx
f010ad80:	8d 45 c8             	lea    -0x38(%ebp),%eax
f010ad83:	ba 05 00 00 00       	mov    $0x5,%edx
f010ad88:	89 df                	mov    %ebx,%edi
f010ad8a:	89 c6                	mov    %eax,%esi
f010ad8c:	89 d1                	mov    %edx,%ecx
f010ad8e:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
}
f010ad90:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad93:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010ad96:	5b                   	pop    %ebx
f010ad97:	5e                   	pop    %esi
f010ad98:	5f                   	pop    %edi
f010ad99:	5d                   	pop    %ebp
f010ad9a:	c2 04 00             	ret    $0x4

f010ad9d <cleanup_buffers>:

//===============================================================================
// 15) CLEANUP MODIFIED BUFFER [TO BE USED AS LAST STEP WHEN ADD ENV TO EXIT Q]:
//===============================================================================
void cleanup_buffers(struct Env* e)
{
f010ad9d:	55                   	push   %ebp
f010ad9e:	89 e5                	mov    %esp,%ebp
f010ada0:	83 ec 18             	sub    $0x18,%esp
	//NEW !! 2016, remove remaining pages in the modified list
	struct FrameInfo *ptr_fi=NULL ;
f010ada3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	//	cprintf("[%s] deleting modified at end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc = calculate_available_frames();
	//	cprintf("[%s] bef, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc.modified, ffc.freeBuffered, ffc.freeNotBuffered);

	LIST_FOREACH(ptr_fi, &modified_frame_list)
f010adaa:	a1 40 3a 25 f0       	mov    0xf0253a40,%eax
f010adaf:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010adb2:	e9 c6 00 00 00       	jmp    f010ae7d <cleanup_buffers+0xe0>
	{
		if(ptr_fi->environment == e)
f010adb7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010adba:	8b 40 10             	mov    0x10(%eax),%eax
f010adbd:	3b 45 08             	cmp    0x8(%ebp),%eax
f010adc0:	0f 85 af 00 00 00    	jne    f010ae75 <cleanup_buffers+0xd8>
		{
			pt_clear_page_table_entry(ptr_fi->environment->env_page_directory,ptr_fi->va);
f010adc6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010adc9:	8b 50 0c             	mov    0xc(%eax),%edx
f010adcc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010adcf:	8b 40 10             	mov    0x10(%eax),%eax
f010add2:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010add8:	83 ec 08             	sub    $0x8,%esp
f010addb:	52                   	push   %edx
f010addc:	50                   	push   %eax
f010addd:	e8 4a d3 ff ff       	call   f010812c <pt_clear_page_table_entry>
f010ade2:	83 c4 10             	add    $0x10,%esp

			//cprintf("==================\n");
			//cprintf("[%s] ptr_fi = %x, ptr_fi next = %x \n",curenv->prog_name, ptr_fi, LIST_NEXT(ptr_fi));
			LIST_REMOVE(&modified_frame_list, ptr_fi);
f010ade5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010ade9:	75 17                	jne    f010ae02 <cleanup_buffers+0x65>
f010adeb:	83 ec 04             	sub    $0x4,%esp
f010adee:	68 19 2f 13 f0       	push   $0xf0132f19
f010adf3:	68 0f 04 00 00       	push   $0x40f
f010adf8:	68 b7 2e 13 f0       	push   $0xf0132eb7
f010adfd:	e8 ae 53 ff ff       	call   f01001b0 <_panic>
f010ae02:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ae05:	8b 00                	mov    (%eax),%eax
f010ae07:	85 c0                	test   %eax,%eax
f010ae09:	74 10                	je     f010ae1b <cleanup_buffers+0x7e>
f010ae0b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ae0e:	8b 00                	mov    (%eax),%eax
f010ae10:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ae13:	8b 52 04             	mov    0x4(%edx),%edx
f010ae16:	89 50 04             	mov    %edx,0x4(%eax)
f010ae19:	eb 0b                	jmp    f010ae26 <cleanup_buffers+0x89>
f010ae1b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ae1e:	8b 40 04             	mov    0x4(%eax),%eax
f010ae21:	a3 44 3a 25 f0       	mov    %eax,0xf0253a44
f010ae26:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ae29:	8b 40 04             	mov    0x4(%eax),%eax
f010ae2c:	85 c0                	test   %eax,%eax
f010ae2e:	74 0f                	je     f010ae3f <cleanup_buffers+0xa2>
f010ae30:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ae33:	8b 40 04             	mov    0x4(%eax),%eax
f010ae36:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ae39:	8b 12                	mov    (%edx),%edx
f010ae3b:	89 10                	mov    %edx,(%eax)
f010ae3d:	eb 0a                	jmp    f010ae49 <cleanup_buffers+0xac>
f010ae3f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ae42:	8b 00                	mov    (%eax),%eax
f010ae44:	a3 40 3a 25 f0       	mov    %eax,0xf0253a40
f010ae49:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ae4c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010ae52:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ae55:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f010ae5c:	a1 4c 3a 25 f0       	mov    0xf0253a4c,%eax
f010ae61:	48                   	dec    %eax
f010ae62:	a3 4c 3a 25 f0       	mov    %eax,0xf0253a4c

			free_frame(ptr_fi);
f010ae67:	83 ec 0c             	sub    $0xc,%esp
f010ae6a:	ff 75 f4             	pushl  -0xc(%ebp)
f010ae6d:	e8 cb c5 ff ff       	call   f010743d <free_frame>
f010ae72:	83 c4 10             	add    $0x10,%esp

	//	cprintf("[%s] deleting modified at end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc = calculate_available_frames();
	//	cprintf("[%s] bef, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc.modified, ffc.freeBuffered, ffc.freeNotBuffered);

	LIST_FOREACH(ptr_fi, &modified_frame_list)
f010ae75:	a1 48 3a 25 f0       	mov    0xf0253a48,%eax
f010ae7a:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010ae7d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010ae81:	74 07                	je     f010ae8a <cleanup_buffers+0xed>
f010ae83:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ae86:	8b 00                	mov    (%eax),%eax
f010ae88:	eb 05                	jmp    f010ae8f <cleanup_buffers+0xf2>
f010ae8a:	b8 00 00 00 00       	mov    $0x0,%eax
f010ae8f:	a3 48 3a 25 f0       	mov    %eax,0xf0253a48
f010ae94:	a1 48 3a 25 f0       	mov    0xf0253a48,%eax
f010ae99:	85 c0                	test   %eax,%eax
f010ae9b:	0f 85 16 ff ff ff    	jne    f010adb7 <cleanup_buffers+0x1a>
f010aea1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010aea5:	0f 85 0c ff ff ff    	jne    f010adb7 <cleanup_buffers+0x1a>
	}

	//	cprintf("[%s] finished deleting modified frames at the end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc2 = calculate_available_frames();
	//	cprintf("[%s] aft, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc2.modified, ffc2.freeBuffered, ffc2.freeNotBuffered);
}
f010aeab:	90                   	nop
f010aeac:	c9                   	leave  
f010aead:	c3                   	ret    

f010aeae <set_program_priority>:
#include "../disk/pagefile_manager.h"
#include "../mem/kheap.h"
#include "../mem/memory_manager.h"

void set_program_priority(struct Env* env, int priority)
{
f010aeae:	55                   	push   %ebp
f010aeaf:	89 e5                	mov    %esp,%ebp
f010aeb1:	83 ec 08             	sub    $0x8,%esp
	panic("Not implemented");
f010aeb4:	83 ec 04             	sub    $0x4,%esp
f010aeb7:	68 42 30 13 f0       	push   $0xf0133042
f010aebc:	6a 0b                	push   $0xb
f010aebe:	68 52 30 13 f0       	push   $0xf0133052
f010aec3:	e8 e8 52 ff ff       	call   f01001b0 <_panic>

f010aec8 <get_user_program_info>:

// Number of user programs in the program table
int NUM_USER_PROGS = (sizeof(userPrograms)/sizeof(userPrograms[0]));

struct UserProgramInfo* get_user_program_info(char* user_program_name)
{
f010aec8:	55                   	push   %ebp
f010aec9:	89 e5                	mov    %esp,%ebp
f010aecb:	83 ec 18             	sub    $0x18,%esp
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010aece:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010aed5:	eb 29                	jmp    f010af00 <get_user_program_info+0x38>
		if (strcmp(user_program_name, userPrograms[i].name) == 0)
f010aed7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010aeda:	89 d0                	mov    %edx,%eax
f010aedc:	01 c0                	add    %eax,%eax
f010aede:	01 d0                	add    %edx,%eax
f010aee0:	c1 e0 02             	shl    $0x2,%eax
f010aee3:	05 c0 e9 18 f0       	add    $0xf018e9c0,%eax
f010aee8:	8b 00                	mov    (%eax),%eax
f010aeea:	83 ec 08             	sub    $0x8,%esp
f010aeed:	50                   	push   %eax
f010aeee:	ff 75 08             	pushl  0x8(%ebp)
f010aef1:	e8 53 40 02 00       	call   f012ef49 <strcmp>
f010aef6:	83 c4 10             	add    $0x10,%esp
f010aef9:	85 c0                	test   %eax,%eax
f010aefb:	74 0f                	je     f010af0c <get_user_program_info+0x44>
int NUM_USER_PROGS = (sizeof(userPrograms)/sizeof(userPrograms[0]));

struct UserProgramInfo* get_user_program_info(char* user_program_name)
{
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010aefd:	ff 45 f4             	incl   -0xc(%ebp)
f010af00:	a1 6c ea 18 f0       	mov    0xf018ea6c,%eax
f010af05:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010af08:	7c cd                	jl     f010aed7 <get_user_program_info+0xf>
f010af0a:	eb 01                	jmp    f010af0d <get_user_program_info+0x45>
		if (strcmp(user_program_name, userPrograms[i].name) == 0)
			break;
f010af0c:	90                   	nop
	}
	if(i==NUM_USER_PROGS)
f010af0d:	a1 6c ea 18 f0       	mov    0xf018ea6c,%eax
f010af12:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010af15:	75 1a                	jne    f010af31 <get_user_program_info+0x69>
	{
		cprintf("Unknown user program '%s'\n", user_program_name);
f010af17:	83 ec 08             	sub    $0x8,%esp
f010af1a:	ff 75 08             	pushl  0x8(%ebp)
f010af1d:	68 de 31 13 f0       	push   $0xf01331de
f010af22:	e8 0a 5f ff ff       	call   f0100e31 <cprintf>
f010af27:	83 c4 10             	add    $0x10,%esp
		return 0;
f010af2a:	b8 00 00 00 00       	mov    $0x0,%eax
f010af2f:	eb 11                	jmp    f010af42 <get_user_program_info+0x7a>
	}

	return &userPrograms[i];
f010af31:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010af34:	89 d0                	mov    %edx,%eax
f010af36:	01 c0                	add    %eax,%eax
f010af38:	01 d0                	add    %edx,%eax
f010af3a:	c1 e0 02             	shl    $0x2,%eax
f010af3d:	05 c0 e9 18 f0       	add    $0xf018e9c0,%eax
}
f010af42:	c9                   	leave  
f010af43:	c3                   	ret    

f010af44 <get_user_program_info_by_env>:

struct UserProgramInfo* get_user_program_info_by_env(struct Env* e)
{
f010af44:	55                   	push   %ebp
f010af45:	89 e5                	mov    %esp,%ebp
f010af47:	83 ec 18             	sub    $0x18,%esp
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010af4a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010af51:	eb 2d                	jmp    f010af80 <get_user_program_info_by_env+0x3c>
		if ( strcmp( e->prog_name , userPrograms[i].name) ==0)
f010af53:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010af56:	89 d0                	mov    %edx,%eax
f010af58:	01 c0                	add    %eax,%eax
f010af5a:	01 d0                	add    %edx,%eax
f010af5c:	c1 e0 02             	shl    $0x2,%eax
f010af5f:	05 c0 e9 18 f0       	add    $0xf018e9c0,%eax
f010af64:	8b 00                	mov    (%eax),%eax
f010af66:	8b 55 08             	mov    0x8(%ebp),%edx
f010af69:	83 c2 5c             	add    $0x5c,%edx
f010af6c:	83 ec 08             	sub    $0x8,%esp
f010af6f:	50                   	push   %eax
f010af70:	52                   	push   %edx
f010af71:	e8 d3 3f 02 00       	call   f012ef49 <strcmp>
f010af76:	83 c4 10             	add    $0x10,%esp
f010af79:	85 c0                	test   %eax,%eax
f010af7b:	74 0f                	je     f010af8c <get_user_program_info_by_env+0x48>
}

struct UserProgramInfo* get_user_program_info_by_env(struct Env* e)
{
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010af7d:	ff 45 f4             	incl   -0xc(%ebp)
f010af80:	a1 6c ea 18 f0       	mov    0xf018ea6c,%eax
f010af85:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010af88:	7c c9                	jl     f010af53 <get_user_program_info_by_env+0xf>
f010af8a:	eb 01                	jmp    f010af8d <get_user_program_info_by_env+0x49>
		if ( strcmp( e->prog_name , userPrograms[i].name) ==0)
			break;
f010af8c:	90                   	nop
	}
	if(i==NUM_USER_PROGS)
f010af8d:	a1 6c ea 18 f0       	mov    0xf018ea6c,%eax
f010af92:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010af95:	75 17                	jne    f010afae <get_user_program_info_by_env+0x6a>
	{
		cprintf("Unknown user program \n");
f010af97:	83 ec 0c             	sub    $0xc,%esp
f010af9a:	68 f9 31 13 f0       	push   $0xf01331f9
f010af9f:	e8 8d 5e ff ff       	call   f0100e31 <cprintf>
f010afa4:	83 c4 10             	add    $0x10,%esp
		return 0;
f010afa7:	b8 00 00 00 00       	mov    $0x0,%eax
f010afac:	eb 11                	jmp    f010afbf <get_user_program_info_by_env+0x7b>
	}

	return &userPrograms[i];
f010afae:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010afb1:	89 d0                	mov    %edx,%eax
f010afb3:	01 c0                	add    %eax,%eax
f010afb5:	01 d0                	add    %edx,%eax
f010afb7:	c1 e0 02             	shl    $0x2,%eax
f010afba:	05 c0 e9 18 f0       	add    $0xf018e9c0,%eax
}
f010afbf:	c9                   	leave  
f010afc0:	c3                   	ret    

f010afc1 <trapname>:
extern  void (*ALL_FAULTS47)();



static const char *trapname(int trapno)
{
f010afc1:	55                   	push   %ebp
f010afc2:	89 e5                	mov    %esp,%ebp
			"Alignment Check",
			"Machine-Check",
			"SIMD Floating-Point Exception"
	};

	if (trapno < sizeof(excnames)/sizeof(excnames[0]))
f010afc4:	8b 45 08             	mov    0x8(%ebp),%eax
f010afc7:	83 f8 13             	cmp    $0x13,%eax
f010afca:	77 0c                	ja     f010afd8 <trapname+0x17>
		return excnames[trapno];
f010afcc:	8b 45 08             	mov    0x8(%ebp),%eax
f010afcf:	8b 04 85 40 36 13 f0 	mov    -0xfecc9c0(,%eax,4),%eax
f010afd6:	eb 12                	jmp    f010afea <trapname+0x29>
	if (trapno == T_SYSCALL)
f010afd8:	83 7d 08 30          	cmpl   $0x30,0x8(%ebp)
f010afdc:	75 07                	jne    f010afe5 <trapname+0x24>
		return "System call";
f010afde:	b8 20 32 13 f0       	mov    $0xf0133220,%eax
f010afe3:	eb 05                	jmp    f010afea <trapname+0x29>
	return "(unknown trap)";
f010afe5:	b8 2c 32 13 f0       	mov    $0xf013322c,%eax
}
f010afea:	5d                   	pop    %ebp
f010afeb:	c3                   	ret    

f010afec <idt_init>:


void
idt_init(void)
{
f010afec:	55                   	push   %ebp
f010afed:	89 e5                	mov    %esp,%ebp
f010afef:	83 ec 10             	sub    $0x10,%esp
	extern struct Segdesc gdt[];

	// LAB 3: Your code here.
	//initialize idt
	SETGATE(idt[T_PGFLT], 0, GD_KT , &PAGE_FAULT, 0) ;
f010aff2:	b8 86 c6 10 f0       	mov    $0xf010c686,%eax
f010aff7:	66 a3 10 32 25 f0    	mov    %ax,0xf0253210
f010affd:	66 c7 05 12 32 25 f0 	movw   $0x8,0xf0253212
f010b004:	08 00 
f010b006:	a0 14 32 25 f0       	mov    0xf0253214,%al
f010b00b:	83 e0 e0             	and    $0xffffffe0,%eax
f010b00e:	a2 14 32 25 f0       	mov    %al,0xf0253214
f010b013:	a0 14 32 25 f0       	mov    0xf0253214,%al
f010b018:	83 e0 1f             	and    $0x1f,%eax
f010b01b:	a2 14 32 25 f0       	mov    %al,0xf0253214
f010b020:	a0 15 32 25 f0       	mov    0xf0253215,%al
f010b025:	83 e0 f0             	and    $0xfffffff0,%eax
f010b028:	83 c8 0e             	or     $0xe,%eax
f010b02b:	a2 15 32 25 f0       	mov    %al,0xf0253215
f010b030:	a0 15 32 25 f0       	mov    0xf0253215,%al
f010b035:	83 e0 ef             	and    $0xffffffef,%eax
f010b038:	a2 15 32 25 f0       	mov    %al,0xf0253215
f010b03d:	a0 15 32 25 f0       	mov    0xf0253215,%al
f010b042:	83 e0 9f             	and    $0xffffff9f,%eax
f010b045:	a2 15 32 25 f0       	mov    %al,0xf0253215
f010b04a:	a0 15 32 25 f0       	mov    0xf0253215,%al
f010b04f:	83 c8 80             	or     $0xffffff80,%eax
f010b052:	a2 15 32 25 f0       	mov    %al,0xf0253215
f010b057:	b8 86 c6 10 f0       	mov    $0xf010c686,%eax
f010b05c:	c1 e8 10             	shr    $0x10,%eax
f010b05f:	66 a3 16 32 25 f0    	mov    %ax,0xf0253216
	SETGATE(idt[T_SYSCALL], 0, GD_KT , &SYSCALL_HANDLER, 3) ;
f010b065:	b8 8e c6 10 f0       	mov    $0xf010c68e,%eax
f010b06a:	66 a3 20 33 25 f0    	mov    %ax,0xf0253320
f010b070:	66 c7 05 22 33 25 f0 	movw   $0x8,0xf0253322
f010b077:	08 00 
f010b079:	a0 24 33 25 f0       	mov    0xf0253324,%al
f010b07e:	83 e0 e0             	and    $0xffffffe0,%eax
f010b081:	a2 24 33 25 f0       	mov    %al,0xf0253324
f010b086:	a0 24 33 25 f0       	mov    0xf0253324,%al
f010b08b:	83 e0 1f             	and    $0x1f,%eax
f010b08e:	a2 24 33 25 f0       	mov    %al,0xf0253324
f010b093:	a0 25 33 25 f0       	mov    0xf0253325,%al
f010b098:	83 e0 f0             	and    $0xfffffff0,%eax
f010b09b:	83 c8 0e             	or     $0xe,%eax
f010b09e:	a2 25 33 25 f0       	mov    %al,0xf0253325
f010b0a3:	a0 25 33 25 f0       	mov    0xf0253325,%al
f010b0a8:	83 e0 ef             	and    $0xffffffef,%eax
f010b0ab:	a2 25 33 25 f0       	mov    %al,0xf0253325
f010b0b0:	a0 25 33 25 f0       	mov    0xf0253325,%al
f010b0b5:	83 c8 60             	or     $0x60,%eax
f010b0b8:	a2 25 33 25 f0       	mov    %al,0xf0253325
f010b0bd:	a0 25 33 25 f0       	mov    0xf0253325,%al
f010b0c2:	83 c8 80             	or     $0xffffff80,%eax
f010b0c5:	a2 25 33 25 f0       	mov    %al,0xf0253325
f010b0ca:	b8 8e c6 10 f0       	mov    $0xf010c68e,%eax
f010b0cf:	c1 e8 10             	shr    $0x10,%eax
f010b0d2:	66 a3 26 33 25 f0    	mov    %ax,0xf0253326
	SETGATE(idt[T_DBLFLT], 0, GD_KT , &DBL_FAULT, 0) ;
f010b0d8:	b8 98 c6 10 f0       	mov    $0xf010c698,%eax
f010b0dd:	66 a3 e0 31 25 f0    	mov    %ax,0xf02531e0
f010b0e3:	66 c7 05 e2 31 25 f0 	movw   $0x8,0xf02531e2
f010b0ea:	08 00 
f010b0ec:	a0 e4 31 25 f0       	mov    0xf02531e4,%al
f010b0f1:	83 e0 e0             	and    $0xffffffe0,%eax
f010b0f4:	a2 e4 31 25 f0       	mov    %al,0xf02531e4
f010b0f9:	a0 e4 31 25 f0       	mov    0xf02531e4,%al
f010b0fe:	83 e0 1f             	and    $0x1f,%eax
f010b101:	a2 e4 31 25 f0       	mov    %al,0xf02531e4
f010b106:	a0 e5 31 25 f0       	mov    0xf02531e5,%al
f010b10b:	83 e0 f0             	and    $0xfffffff0,%eax
f010b10e:	83 c8 0e             	or     $0xe,%eax
f010b111:	a2 e5 31 25 f0       	mov    %al,0xf02531e5
f010b116:	a0 e5 31 25 f0       	mov    0xf02531e5,%al
f010b11b:	83 e0 ef             	and    $0xffffffef,%eax
f010b11e:	a2 e5 31 25 f0       	mov    %al,0xf02531e5
f010b123:	a0 e5 31 25 f0       	mov    0xf02531e5,%al
f010b128:	83 e0 9f             	and    $0xffffff9f,%eax
f010b12b:	a2 e5 31 25 f0       	mov    %al,0xf02531e5
f010b130:	a0 e5 31 25 f0       	mov    0xf02531e5,%al
f010b135:	83 c8 80             	or     $0xffffff80,%eax
f010b138:	a2 e5 31 25 f0       	mov    %al,0xf02531e5
f010b13d:	b8 98 c6 10 f0       	mov    $0xf010c698,%eax
f010b142:	c1 e8 10             	shr    $0x10,%eax
f010b145:	66 a3 e6 31 25 f0    	mov    %ax,0xf02531e6


	SETGATE(idt[T_DIVIDE   ], 0, GD_KT , &ALL_FAULTS0, 3) ;
f010b14b:	b8 a0 c6 10 f0       	mov    $0xf010c6a0,%eax
f010b150:	66 a3 a0 31 25 f0    	mov    %ax,0xf02531a0
f010b156:	66 c7 05 a2 31 25 f0 	movw   $0x8,0xf02531a2
f010b15d:	08 00 
f010b15f:	a0 a4 31 25 f0       	mov    0xf02531a4,%al
f010b164:	83 e0 e0             	and    $0xffffffe0,%eax
f010b167:	a2 a4 31 25 f0       	mov    %al,0xf02531a4
f010b16c:	a0 a4 31 25 f0       	mov    0xf02531a4,%al
f010b171:	83 e0 1f             	and    $0x1f,%eax
f010b174:	a2 a4 31 25 f0       	mov    %al,0xf02531a4
f010b179:	a0 a5 31 25 f0       	mov    0xf02531a5,%al
f010b17e:	83 e0 f0             	and    $0xfffffff0,%eax
f010b181:	83 c8 0e             	or     $0xe,%eax
f010b184:	a2 a5 31 25 f0       	mov    %al,0xf02531a5
f010b189:	a0 a5 31 25 f0       	mov    0xf02531a5,%al
f010b18e:	83 e0 ef             	and    $0xffffffef,%eax
f010b191:	a2 a5 31 25 f0       	mov    %al,0xf02531a5
f010b196:	a0 a5 31 25 f0       	mov    0xf02531a5,%al
f010b19b:	83 c8 60             	or     $0x60,%eax
f010b19e:	a2 a5 31 25 f0       	mov    %al,0xf02531a5
f010b1a3:	a0 a5 31 25 f0       	mov    0xf02531a5,%al
f010b1a8:	83 c8 80             	or     $0xffffff80,%eax
f010b1ab:	a2 a5 31 25 f0       	mov    %al,0xf02531a5
f010b1b0:	b8 a0 c6 10 f0       	mov    $0xf010c6a0,%eax
f010b1b5:	c1 e8 10             	shr    $0x10,%eax
f010b1b8:	66 a3 a6 31 25 f0    	mov    %ax,0xf02531a6
	SETGATE(idt[T_DEBUG    ], 1, GD_KT , &ALL_FAULTS1, 3) ;
f010b1be:	b8 aa c6 10 f0       	mov    $0xf010c6aa,%eax
f010b1c3:	66 a3 a8 31 25 f0    	mov    %ax,0xf02531a8
f010b1c9:	66 c7 05 aa 31 25 f0 	movw   $0x8,0xf02531aa
f010b1d0:	08 00 
f010b1d2:	a0 ac 31 25 f0       	mov    0xf02531ac,%al
f010b1d7:	83 e0 e0             	and    $0xffffffe0,%eax
f010b1da:	a2 ac 31 25 f0       	mov    %al,0xf02531ac
f010b1df:	a0 ac 31 25 f0       	mov    0xf02531ac,%al
f010b1e4:	83 e0 1f             	and    $0x1f,%eax
f010b1e7:	a2 ac 31 25 f0       	mov    %al,0xf02531ac
f010b1ec:	a0 ad 31 25 f0       	mov    0xf02531ad,%al
f010b1f1:	83 c8 0f             	or     $0xf,%eax
f010b1f4:	a2 ad 31 25 f0       	mov    %al,0xf02531ad
f010b1f9:	a0 ad 31 25 f0       	mov    0xf02531ad,%al
f010b1fe:	83 e0 ef             	and    $0xffffffef,%eax
f010b201:	a2 ad 31 25 f0       	mov    %al,0xf02531ad
f010b206:	a0 ad 31 25 f0       	mov    0xf02531ad,%al
f010b20b:	83 c8 60             	or     $0x60,%eax
f010b20e:	a2 ad 31 25 f0       	mov    %al,0xf02531ad
f010b213:	a0 ad 31 25 f0       	mov    0xf02531ad,%al
f010b218:	83 c8 80             	or     $0xffffff80,%eax
f010b21b:	a2 ad 31 25 f0       	mov    %al,0xf02531ad
f010b220:	b8 aa c6 10 f0       	mov    $0xf010c6aa,%eax
f010b225:	c1 e8 10             	shr    $0x10,%eax
f010b228:	66 a3 ae 31 25 f0    	mov    %ax,0xf02531ae
	SETGATE(idt[T_NMI      ], 0, GD_KT , &ALL_FAULTS2, 3) ;
f010b22e:	b8 b4 c6 10 f0       	mov    $0xf010c6b4,%eax
f010b233:	66 a3 b0 31 25 f0    	mov    %ax,0xf02531b0
f010b239:	66 c7 05 b2 31 25 f0 	movw   $0x8,0xf02531b2
f010b240:	08 00 
f010b242:	a0 b4 31 25 f0       	mov    0xf02531b4,%al
f010b247:	83 e0 e0             	and    $0xffffffe0,%eax
f010b24a:	a2 b4 31 25 f0       	mov    %al,0xf02531b4
f010b24f:	a0 b4 31 25 f0       	mov    0xf02531b4,%al
f010b254:	83 e0 1f             	and    $0x1f,%eax
f010b257:	a2 b4 31 25 f0       	mov    %al,0xf02531b4
f010b25c:	a0 b5 31 25 f0       	mov    0xf02531b5,%al
f010b261:	83 e0 f0             	and    $0xfffffff0,%eax
f010b264:	83 c8 0e             	or     $0xe,%eax
f010b267:	a2 b5 31 25 f0       	mov    %al,0xf02531b5
f010b26c:	a0 b5 31 25 f0       	mov    0xf02531b5,%al
f010b271:	83 e0 ef             	and    $0xffffffef,%eax
f010b274:	a2 b5 31 25 f0       	mov    %al,0xf02531b5
f010b279:	a0 b5 31 25 f0       	mov    0xf02531b5,%al
f010b27e:	83 c8 60             	or     $0x60,%eax
f010b281:	a2 b5 31 25 f0       	mov    %al,0xf02531b5
f010b286:	a0 b5 31 25 f0       	mov    0xf02531b5,%al
f010b28b:	83 c8 80             	or     $0xffffff80,%eax
f010b28e:	a2 b5 31 25 f0       	mov    %al,0xf02531b5
f010b293:	b8 b4 c6 10 f0       	mov    $0xf010c6b4,%eax
f010b298:	c1 e8 10             	shr    $0x10,%eax
f010b29b:	66 a3 b6 31 25 f0    	mov    %ax,0xf02531b6
	SETGATE(idt[T_BRKPT    ], 1, GD_KT , &ALL_FAULTS3, 3) ;
f010b2a1:	b8 be c6 10 f0       	mov    $0xf010c6be,%eax
f010b2a6:	66 a3 b8 31 25 f0    	mov    %ax,0xf02531b8
f010b2ac:	66 c7 05 ba 31 25 f0 	movw   $0x8,0xf02531ba
f010b2b3:	08 00 
f010b2b5:	a0 bc 31 25 f0       	mov    0xf02531bc,%al
f010b2ba:	83 e0 e0             	and    $0xffffffe0,%eax
f010b2bd:	a2 bc 31 25 f0       	mov    %al,0xf02531bc
f010b2c2:	a0 bc 31 25 f0       	mov    0xf02531bc,%al
f010b2c7:	83 e0 1f             	and    $0x1f,%eax
f010b2ca:	a2 bc 31 25 f0       	mov    %al,0xf02531bc
f010b2cf:	a0 bd 31 25 f0       	mov    0xf02531bd,%al
f010b2d4:	83 c8 0f             	or     $0xf,%eax
f010b2d7:	a2 bd 31 25 f0       	mov    %al,0xf02531bd
f010b2dc:	a0 bd 31 25 f0       	mov    0xf02531bd,%al
f010b2e1:	83 e0 ef             	and    $0xffffffef,%eax
f010b2e4:	a2 bd 31 25 f0       	mov    %al,0xf02531bd
f010b2e9:	a0 bd 31 25 f0       	mov    0xf02531bd,%al
f010b2ee:	83 c8 60             	or     $0x60,%eax
f010b2f1:	a2 bd 31 25 f0       	mov    %al,0xf02531bd
f010b2f6:	a0 bd 31 25 f0       	mov    0xf02531bd,%al
f010b2fb:	83 c8 80             	or     $0xffffff80,%eax
f010b2fe:	a2 bd 31 25 f0       	mov    %al,0xf02531bd
f010b303:	b8 be c6 10 f0       	mov    $0xf010c6be,%eax
f010b308:	c1 e8 10             	shr    $0x10,%eax
f010b30b:	66 a3 be 31 25 f0    	mov    %ax,0xf02531be
	SETGATE(idt[T_OFLOW    ], 1, GD_KT , &ALL_FAULTS4, 3) ;
f010b311:	b8 c8 c6 10 f0       	mov    $0xf010c6c8,%eax
f010b316:	66 a3 c0 31 25 f0    	mov    %ax,0xf02531c0
f010b31c:	66 c7 05 c2 31 25 f0 	movw   $0x8,0xf02531c2
f010b323:	08 00 
f010b325:	a0 c4 31 25 f0       	mov    0xf02531c4,%al
f010b32a:	83 e0 e0             	and    $0xffffffe0,%eax
f010b32d:	a2 c4 31 25 f0       	mov    %al,0xf02531c4
f010b332:	a0 c4 31 25 f0       	mov    0xf02531c4,%al
f010b337:	83 e0 1f             	and    $0x1f,%eax
f010b33a:	a2 c4 31 25 f0       	mov    %al,0xf02531c4
f010b33f:	a0 c5 31 25 f0       	mov    0xf02531c5,%al
f010b344:	83 c8 0f             	or     $0xf,%eax
f010b347:	a2 c5 31 25 f0       	mov    %al,0xf02531c5
f010b34c:	a0 c5 31 25 f0       	mov    0xf02531c5,%al
f010b351:	83 e0 ef             	and    $0xffffffef,%eax
f010b354:	a2 c5 31 25 f0       	mov    %al,0xf02531c5
f010b359:	a0 c5 31 25 f0       	mov    0xf02531c5,%al
f010b35e:	83 c8 60             	or     $0x60,%eax
f010b361:	a2 c5 31 25 f0       	mov    %al,0xf02531c5
f010b366:	a0 c5 31 25 f0       	mov    0xf02531c5,%al
f010b36b:	83 c8 80             	or     $0xffffff80,%eax
f010b36e:	a2 c5 31 25 f0       	mov    %al,0xf02531c5
f010b373:	b8 c8 c6 10 f0       	mov    $0xf010c6c8,%eax
f010b378:	c1 e8 10             	shr    $0x10,%eax
f010b37b:	66 a3 c6 31 25 f0    	mov    %ax,0xf02531c6
	SETGATE(idt[T_BOUND    ], 0, GD_KT , &ALL_FAULTS5, 3) ;
f010b381:	b8 d2 c6 10 f0       	mov    $0xf010c6d2,%eax
f010b386:	66 a3 c8 31 25 f0    	mov    %ax,0xf02531c8
f010b38c:	66 c7 05 ca 31 25 f0 	movw   $0x8,0xf02531ca
f010b393:	08 00 
f010b395:	a0 cc 31 25 f0       	mov    0xf02531cc,%al
f010b39a:	83 e0 e0             	and    $0xffffffe0,%eax
f010b39d:	a2 cc 31 25 f0       	mov    %al,0xf02531cc
f010b3a2:	a0 cc 31 25 f0       	mov    0xf02531cc,%al
f010b3a7:	83 e0 1f             	and    $0x1f,%eax
f010b3aa:	a2 cc 31 25 f0       	mov    %al,0xf02531cc
f010b3af:	a0 cd 31 25 f0       	mov    0xf02531cd,%al
f010b3b4:	83 e0 f0             	and    $0xfffffff0,%eax
f010b3b7:	83 c8 0e             	or     $0xe,%eax
f010b3ba:	a2 cd 31 25 f0       	mov    %al,0xf02531cd
f010b3bf:	a0 cd 31 25 f0       	mov    0xf02531cd,%al
f010b3c4:	83 e0 ef             	and    $0xffffffef,%eax
f010b3c7:	a2 cd 31 25 f0       	mov    %al,0xf02531cd
f010b3cc:	a0 cd 31 25 f0       	mov    0xf02531cd,%al
f010b3d1:	83 c8 60             	or     $0x60,%eax
f010b3d4:	a2 cd 31 25 f0       	mov    %al,0xf02531cd
f010b3d9:	a0 cd 31 25 f0       	mov    0xf02531cd,%al
f010b3de:	83 c8 80             	or     $0xffffff80,%eax
f010b3e1:	a2 cd 31 25 f0       	mov    %al,0xf02531cd
f010b3e6:	b8 d2 c6 10 f0       	mov    $0xf010c6d2,%eax
f010b3eb:	c1 e8 10             	shr    $0x10,%eax
f010b3ee:	66 a3 ce 31 25 f0    	mov    %ax,0xf02531ce
	SETGATE(idt[T_ILLOP    ], 0, GD_KT , &ALL_FAULTS6, 3) ;
f010b3f4:	b8 dc c6 10 f0       	mov    $0xf010c6dc,%eax
f010b3f9:	66 a3 d0 31 25 f0    	mov    %ax,0xf02531d0
f010b3ff:	66 c7 05 d2 31 25 f0 	movw   $0x8,0xf02531d2
f010b406:	08 00 
f010b408:	a0 d4 31 25 f0       	mov    0xf02531d4,%al
f010b40d:	83 e0 e0             	and    $0xffffffe0,%eax
f010b410:	a2 d4 31 25 f0       	mov    %al,0xf02531d4
f010b415:	a0 d4 31 25 f0       	mov    0xf02531d4,%al
f010b41a:	83 e0 1f             	and    $0x1f,%eax
f010b41d:	a2 d4 31 25 f0       	mov    %al,0xf02531d4
f010b422:	a0 d5 31 25 f0       	mov    0xf02531d5,%al
f010b427:	83 e0 f0             	and    $0xfffffff0,%eax
f010b42a:	83 c8 0e             	or     $0xe,%eax
f010b42d:	a2 d5 31 25 f0       	mov    %al,0xf02531d5
f010b432:	a0 d5 31 25 f0       	mov    0xf02531d5,%al
f010b437:	83 e0 ef             	and    $0xffffffef,%eax
f010b43a:	a2 d5 31 25 f0       	mov    %al,0xf02531d5
f010b43f:	a0 d5 31 25 f0       	mov    0xf02531d5,%al
f010b444:	83 c8 60             	or     $0x60,%eax
f010b447:	a2 d5 31 25 f0       	mov    %al,0xf02531d5
f010b44c:	a0 d5 31 25 f0       	mov    0xf02531d5,%al
f010b451:	83 c8 80             	or     $0xffffff80,%eax
f010b454:	a2 d5 31 25 f0       	mov    %al,0xf02531d5
f010b459:	b8 dc c6 10 f0       	mov    $0xf010c6dc,%eax
f010b45e:	c1 e8 10             	shr    $0x10,%eax
f010b461:	66 a3 d6 31 25 f0    	mov    %ax,0xf02531d6
	SETGATE(idt[T_DEVICE   ], 0, GD_KT , &ALL_FAULTS7, 3) ;
f010b467:	b8 e6 c6 10 f0       	mov    $0xf010c6e6,%eax
f010b46c:	66 a3 d8 31 25 f0    	mov    %ax,0xf02531d8
f010b472:	66 c7 05 da 31 25 f0 	movw   $0x8,0xf02531da
f010b479:	08 00 
f010b47b:	a0 dc 31 25 f0       	mov    0xf02531dc,%al
f010b480:	83 e0 e0             	and    $0xffffffe0,%eax
f010b483:	a2 dc 31 25 f0       	mov    %al,0xf02531dc
f010b488:	a0 dc 31 25 f0       	mov    0xf02531dc,%al
f010b48d:	83 e0 1f             	and    $0x1f,%eax
f010b490:	a2 dc 31 25 f0       	mov    %al,0xf02531dc
f010b495:	a0 dd 31 25 f0       	mov    0xf02531dd,%al
f010b49a:	83 e0 f0             	and    $0xfffffff0,%eax
f010b49d:	83 c8 0e             	or     $0xe,%eax
f010b4a0:	a2 dd 31 25 f0       	mov    %al,0xf02531dd
f010b4a5:	a0 dd 31 25 f0       	mov    0xf02531dd,%al
f010b4aa:	83 e0 ef             	and    $0xffffffef,%eax
f010b4ad:	a2 dd 31 25 f0       	mov    %al,0xf02531dd
f010b4b2:	a0 dd 31 25 f0       	mov    0xf02531dd,%al
f010b4b7:	83 c8 60             	or     $0x60,%eax
f010b4ba:	a2 dd 31 25 f0       	mov    %al,0xf02531dd
f010b4bf:	a0 dd 31 25 f0       	mov    0xf02531dd,%al
f010b4c4:	83 c8 80             	or     $0xffffff80,%eax
f010b4c7:	a2 dd 31 25 f0       	mov    %al,0xf02531dd
f010b4cc:	b8 e6 c6 10 f0       	mov    $0xf010c6e6,%eax
f010b4d1:	c1 e8 10             	shr    $0x10,%eax
f010b4d4:	66 a3 de 31 25 f0    	mov    %ax,0xf02531de
	//SETGATE(idt[T_DBLFLT   ], 0, GD_KT , &ALL_FAULTS, 3) ;
	//SETGATE(idt[], 0, GD_KT , &ALL_FAULTS, 3) ;
	SETGATE(idt[T_TSS      ], 0, GD_KT , &ALL_FAULTS10, 3) ;
f010b4da:	b8 f0 c6 10 f0       	mov    $0xf010c6f0,%eax
f010b4df:	66 a3 f0 31 25 f0    	mov    %ax,0xf02531f0
f010b4e5:	66 c7 05 f2 31 25 f0 	movw   $0x8,0xf02531f2
f010b4ec:	08 00 
f010b4ee:	a0 f4 31 25 f0       	mov    0xf02531f4,%al
f010b4f3:	83 e0 e0             	and    $0xffffffe0,%eax
f010b4f6:	a2 f4 31 25 f0       	mov    %al,0xf02531f4
f010b4fb:	a0 f4 31 25 f0       	mov    0xf02531f4,%al
f010b500:	83 e0 1f             	and    $0x1f,%eax
f010b503:	a2 f4 31 25 f0       	mov    %al,0xf02531f4
f010b508:	a0 f5 31 25 f0       	mov    0xf02531f5,%al
f010b50d:	83 e0 f0             	and    $0xfffffff0,%eax
f010b510:	83 c8 0e             	or     $0xe,%eax
f010b513:	a2 f5 31 25 f0       	mov    %al,0xf02531f5
f010b518:	a0 f5 31 25 f0       	mov    0xf02531f5,%al
f010b51d:	83 e0 ef             	and    $0xffffffef,%eax
f010b520:	a2 f5 31 25 f0       	mov    %al,0xf02531f5
f010b525:	a0 f5 31 25 f0       	mov    0xf02531f5,%al
f010b52a:	83 c8 60             	or     $0x60,%eax
f010b52d:	a2 f5 31 25 f0       	mov    %al,0xf02531f5
f010b532:	a0 f5 31 25 f0       	mov    0xf02531f5,%al
f010b537:	83 c8 80             	or     $0xffffff80,%eax
f010b53a:	a2 f5 31 25 f0       	mov    %al,0xf02531f5
f010b53f:	b8 f0 c6 10 f0       	mov    $0xf010c6f0,%eax
f010b544:	c1 e8 10             	shr    $0x10,%eax
f010b547:	66 a3 f6 31 25 f0    	mov    %ax,0xf02531f6
	SETGATE(idt[T_SEGNP    ], 0, GD_KT , &ALL_FAULTS11, 3) ;
f010b54d:	b8 f8 c6 10 f0       	mov    $0xf010c6f8,%eax
f010b552:	66 a3 f8 31 25 f0    	mov    %ax,0xf02531f8
f010b558:	66 c7 05 fa 31 25 f0 	movw   $0x8,0xf02531fa
f010b55f:	08 00 
f010b561:	a0 fc 31 25 f0       	mov    0xf02531fc,%al
f010b566:	83 e0 e0             	and    $0xffffffe0,%eax
f010b569:	a2 fc 31 25 f0       	mov    %al,0xf02531fc
f010b56e:	a0 fc 31 25 f0       	mov    0xf02531fc,%al
f010b573:	83 e0 1f             	and    $0x1f,%eax
f010b576:	a2 fc 31 25 f0       	mov    %al,0xf02531fc
f010b57b:	a0 fd 31 25 f0       	mov    0xf02531fd,%al
f010b580:	83 e0 f0             	and    $0xfffffff0,%eax
f010b583:	83 c8 0e             	or     $0xe,%eax
f010b586:	a2 fd 31 25 f0       	mov    %al,0xf02531fd
f010b58b:	a0 fd 31 25 f0       	mov    0xf02531fd,%al
f010b590:	83 e0 ef             	and    $0xffffffef,%eax
f010b593:	a2 fd 31 25 f0       	mov    %al,0xf02531fd
f010b598:	a0 fd 31 25 f0       	mov    0xf02531fd,%al
f010b59d:	83 c8 60             	or     $0x60,%eax
f010b5a0:	a2 fd 31 25 f0       	mov    %al,0xf02531fd
f010b5a5:	a0 fd 31 25 f0       	mov    0xf02531fd,%al
f010b5aa:	83 c8 80             	or     $0xffffff80,%eax
f010b5ad:	a2 fd 31 25 f0       	mov    %al,0xf02531fd
f010b5b2:	b8 f8 c6 10 f0       	mov    $0xf010c6f8,%eax
f010b5b7:	c1 e8 10             	shr    $0x10,%eax
f010b5ba:	66 a3 fe 31 25 f0    	mov    %ax,0xf02531fe
	SETGATE(idt[T_STACK    ], 0, GD_KT , &ALL_FAULTS12, 3) ;
f010b5c0:	b8 fc c6 10 f0       	mov    $0xf010c6fc,%eax
f010b5c5:	66 a3 00 32 25 f0    	mov    %ax,0xf0253200
f010b5cb:	66 c7 05 02 32 25 f0 	movw   $0x8,0xf0253202
f010b5d2:	08 00 
f010b5d4:	a0 04 32 25 f0       	mov    0xf0253204,%al
f010b5d9:	83 e0 e0             	and    $0xffffffe0,%eax
f010b5dc:	a2 04 32 25 f0       	mov    %al,0xf0253204
f010b5e1:	a0 04 32 25 f0       	mov    0xf0253204,%al
f010b5e6:	83 e0 1f             	and    $0x1f,%eax
f010b5e9:	a2 04 32 25 f0       	mov    %al,0xf0253204
f010b5ee:	a0 05 32 25 f0       	mov    0xf0253205,%al
f010b5f3:	83 e0 f0             	and    $0xfffffff0,%eax
f010b5f6:	83 c8 0e             	or     $0xe,%eax
f010b5f9:	a2 05 32 25 f0       	mov    %al,0xf0253205
f010b5fe:	a0 05 32 25 f0       	mov    0xf0253205,%al
f010b603:	83 e0 ef             	and    $0xffffffef,%eax
f010b606:	a2 05 32 25 f0       	mov    %al,0xf0253205
f010b60b:	a0 05 32 25 f0       	mov    0xf0253205,%al
f010b610:	83 c8 60             	or     $0x60,%eax
f010b613:	a2 05 32 25 f0       	mov    %al,0xf0253205
f010b618:	a0 05 32 25 f0       	mov    0xf0253205,%al
f010b61d:	83 c8 80             	or     $0xffffff80,%eax
f010b620:	a2 05 32 25 f0       	mov    %al,0xf0253205
f010b625:	b8 fc c6 10 f0       	mov    $0xf010c6fc,%eax
f010b62a:	c1 e8 10             	shr    $0x10,%eax
f010b62d:	66 a3 06 32 25 f0    	mov    %ax,0xf0253206
	SETGATE(idt[T_GPFLT    ], 0, GD_KT , &ALL_FAULTS13, 3) ;
f010b633:	b8 00 c7 10 f0       	mov    $0xf010c700,%eax
f010b638:	66 a3 08 32 25 f0    	mov    %ax,0xf0253208
f010b63e:	66 c7 05 0a 32 25 f0 	movw   $0x8,0xf025320a
f010b645:	08 00 
f010b647:	a0 0c 32 25 f0       	mov    0xf025320c,%al
f010b64c:	83 e0 e0             	and    $0xffffffe0,%eax
f010b64f:	a2 0c 32 25 f0       	mov    %al,0xf025320c
f010b654:	a0 0c 32 25 f0       	mov    0xf025320c,%al
f010b659:	83 e0 1f             	and    $0x1f,%eax
f010b65c:	a2 0c 32 25 f0       	mov    %al,0xf025320c
f010b661:	a0 0d 32 25 f0       	mov    0xf025320d,%al
f010b666:	83 e0 f0             	and    $0xfffffff0,%eax
f010b669:	83 c8 0e             	or     $0xe,%eax
f010b66c:	a2 0d 32 25 f0       	mov    %al,0xf025320d
f010b671:	a0 0d 32 25 f0       	mov    0xf025320d,%al
f010b676:	83 e0 ef             	and    $0xffffffef,%eax
f010b679:	a2 0d 32 25 f0       	mov    %al,0xf025320d
f010b67e:	a0 0d 32 25 f0       	mov    0xf025320d,%al
f010b683:	83 c8 60             	or     $0x60,%eax
f010b686:	a2 0d 32 25 f0       	mov    %al,0xf025320d
f010b68b:	a0 0d 32 25 f0       	mov    0xf025320d,%al
f010b690:	83 c8 80             	or     $0xffffff80,%eax
f010b693:	a2 0d 32 25 f0       	mov    %al,0xf025320d
f010b698:	b8 00 c7 10 f0       	mov    $0xf010c700,%eax
f010b69d:	c1 e8 10             	shr    $0x10,%eax
f010b6a0:	66 a3 0e 32 25 f0    	mov    %ax,0xf025320e
	//SETGATE(idt[T_PGFLT    ], 0, GD_KT , &ALL_FAULTS, 3) ;
	//SETGATE(idt[ne T_RES   ], 0, GD_KT , &ALL_FAULTS, 3) ;
	SETGATE(idt[T_FPERR    ], 0, GD_KT , &ALL_FAULTS16, 3) ;
f010b6a6:	b8 04 c7 10 f0       	mov    $0xf010c704,%eax
f010b6ab:	66 a3 20 32 25 f0    	mov    %ax,0xf0253220
f010b6b1:	66 c7 05 22 32 25 f0 	movw   $0x8,0xf0253222
f010b6b8:	08 00 
f010b6ba:	a0 24 32 25 f0       	mov    0xf0253224,%al
f010b6bf:	83 e0 e0             	and    $0xffffffe0,%eax
f010b6c2:	a2 24 32 25 f0       	mov    %al,0xf0253224
f010b6c7:	a0 24 32 25 f0       	mov    0xf0253224,%al
f010b6cc:	83 e0 1f             	and    $0x1f,%eax
f010b6cf:	a2 24 32 25 f0       	mov    %al,0xf0253224
f010b6d4:	a0 25 32 25 f0       	mov    0xf0253225,%al
f010b6d9:	83 e0 f0             	and    $0xfffffff0,%eax
f010b6dc:	83 c8 0e             	or     $0xe,%eax
f010b6df:	a2 25 32 25 f0       	mov    %al,0xf0253225
f010b6e4:	a0 25 32 25 f0       	mov    0xf0253225,%al
f010b6e9:	83 e0 ef             	and    $0xffffffef,%eax
f010b6ec:	a2 25 32 25 f0       	mov    %al,0xf0253225
f010b6f1:	a0 25 32 25 f0       	mov    0xf0253225,%al
f010b6f6:	83 c8 60             	or     $0x60,%eax
f010b6f9:	a2 25 32 25 f0       	mov    %al,0xf0253225
f010b6fe:	a0 25 32 25 f0       	mov    0xf0253225,%al
f010b703:	83 c8 80             	or     $0xffffff80,%eax
f010b706:	a2 25 32 25 f0       	mov    %al,0xf0253225
f010b70b:	b8 04 c7 10 f0       	mov    $0xf010c704,%eax
f010b710:	c1 e8 10             	shr    $0x10,%eax
f010b713:	66 a3 26 32 25 f0    	mov    %ax,0xf0253226
	SETGATE(idt[T_ALIGN    ], 0, GD_KT , &ALL_FAULTS17, 3) ;
f010b719:	b8 0a c7 10 f0       	mov    $0xf010c70a,%eax
f010b71e:	66 a3 28 32 25 f0    	mov    %ax,0xf0253228
f010b724:	66 c7 05 2a 32 25 f0 	movw   $0x8,0xf025322a
f010b72b:	08 00 
f010b72d:	a0 2c 32 25 f0       	mov    0xf025322c,%al
f010b732:	83 e0 e0             	and    $0xffffffe0,%eax
f010b735:	a2 2c 32 25 f0       	mov    %al,0xf025322c
f010b73a:	a0 2c 32 25 f0       	mov    0xf025322c,%al
f010b73f:	83 e0 1f             	and    $0x1f,%eax
f010b742:	a2 2c 32 25 f0       	mov    %al,0xf025322c
f010b747:	a0 2d 32 25 f0       	mov    0xf025322d,%al
f010b74c:	83 e0 f0             	and    $0xfffffff0,%eax
f010b74f:	83 c8 0e             	or     $0xe,%eax
f010b752:	a2 2d 32 25 f0       	mov    %al,0xf025322d
f010b757:	a0 2d 32 25 f0       	mov    0xf025322d,%al
f010b75c:	83 e0 ef             	and    $0xffffffef,%eax
f010b75f:	a2 2d 32 25 f0       	mov    %al,0xf025322d
f010b764:	a0 2d 32 25 f0       	mov    0xf025322d,%al
f010b769:	83 c8 60             	or     $0x60,%eax
f010b76c:	a2 2d 32 25 f0       	mov    %al,0xf025322d
f010b771:	a0 2d 32 25 f0       	mov    0xf025322d,%al
f010b776:	83 c8 80             	or     $0xffffff80,%eax
f010b779:	a2 2d 32 25 f0       	mov    %al,0xf025322d
f010b77e:	b8 0a c7 10 f0       	mov    $0xf010c70a,%eax
f010b783:	c1 e8 10             	shr    $0x10,%eax
f010b786:	66 a3 2e 32 25 f0    	mov    %ax,0xf025322e
	SETGATE(idt[T_MCHK     ], 0, GD_KT , &ALL_FAULTS18, 3) ;
f010b78c:	b8 0e c7 10 f0       	mov    $0xf010c70e,%eax
f010b791:	66 a3 30 32 25 f0    	mov    %ax,0xf0253230
f010b797:	66 c7 05 32 32 25 f0 	movw   $0x8,0xf0253232
f010b79e:	08 00 
f010b7a0:	a0 34 32 25 f0       	mov    0xf0253234,%al
f010b7a5:	83 e0 e0             	and    $0xffffffe0,%eax
f010b7a8:	a2 34 32 25 f0       	mov    %al,0xf0253234
f010b7ad:	a0 34 32 25 f0       	mov    0xf0253234,%al
f010b7b2:	83 e0 1f             	and    $0x1f,%eax
f010b7b5:	a2 34 32 25 f0       	mov    %al,0xf0253234
f010b7ba:	a0 35 32 25 f0       	mov    0xf0253235,%al
f010b7bf:	83 e0 f0             	and    $0xfffffff0,%eax
f010b7c2:	83 c8 0e             	or     $0xe,%eax
f010b7c5:	a2 35 32 25 f0       	mov    %al,0xf0253235
f010b7ca:	a0 35 32 25 f0       	mov    0xf0253235,%al
f010b7cf:	83 e0 ef             	and    $0xffffffef,%eax
f010b7d2:	a2 35 32 25 f0       	mov    %al,0xf0253235
f010b7d7:	a0 35 32 25 f0       	mov    0xf0253235,%al
f010b7dc:	83 c8 60             	or     $0x60,%eax
f010b7df:	a2 35 32 25 f0       	mov    %al,0xf0253235
f010b7e4:	a0 35 32 25 f0       	mov    0xf0253235,%al
f010b7e9:	83 c8 80             	or     $0xffffff80,%eax
f010b7ec:	a2 35 32 25 f0       	mov    %al,0xf0253235
f010b7f1:	b8 0e c7 10 f0       	mov    $0xf010c70e,%eax
f010b7f6:	c1 e8 10             	shr    $0x10,%eax
f010b7f9:	66 a3 36 32 25 f0    	mov    %ax,0xf0253236
	SETGATE(idt[T_SIMDERR  ], 0, GD_KT , &ALL_FAULTS19, 3) ;
f010b7ff:	b8 14 c7 10 f0       	mov    $0xf010c714,%eax
f010b804:	66 a3 38 32 25 f0    	mov    %ax,0xf0253238
f010b80a:	66 c7 05 3a 32 25 f0 	movw   $0x8,0xf025323a
f010b811:	08 00 
f010b813:	a0 3c 32 25 f0       	mov    0xf025323c,%al
f010b818:	83 e0 e0             	and    $0xffffffe0,%eax
f010b81b:	a2 3c 32 25 f0       	mov    %al,0xf025323c
f010b820:	a0 3c 32 25 f0       	mov    0xf025323c,%al
f010b825:	83 e0 1f             	and    $0x1f,%eax
f010b828:	a2 3c 32 25 f0       	mov    %al,0xf025323c
f010b82d:	a0 3d 32 25 f0       	mov    0xf025323d,%al
f010b832:	83 e0 f0             	and    $0xfffffff0,%eax
f010b835:	83 c8 0e             	or     $0xe,%eax
f010b838:	a2 3d 32 25 f0       	mov    %al,0xf025323d
f010b83d:	a0 3d 32 25 f0       	mov    0xf025323d,%al
f010b842:	83 e0 ef             	and    $0xffffffef,%eax
f010b845:	a2 3d 32 25 f0       	mov    %al,0xf025323d
f010b84a:	a0 3d 32 25 f0       	mov    0xf025323d,%al
f010b84f:	83 c8 60             	or     $0x60,%eax
f010b852:	a2 3d 32 25 f0       	mov    %al,0xf025323d
f010b857:	a0 3d 32 25 f0       	mov    0xf025323d,%al
f010b85c:	83 c8 80             	or     $0xffffff80,%eax
f010b85f:	a2 3d 32 25 f0       	mov    %al,0xf025323d
f010b864:	b8 14 c7 10 f0       	mov    $0xf010c714,%eax
f010b869:	c1 e8 10             	shr    $0x10,%eax
f010b86c:	66 a3 3e 32 25 f0    	mov    %ax,0xf025323e


	SETGATE(idt[IRQ0_Clock], 0, GD_KT , &ALL_FAULTS32, 3) ;
f010b872:	b8 1a c7 10 f0       	mov    $0xf010c71a,%eax
f010b877:	66 a3 a0 32 25 f0    	mov    %ax,0xf02532a0
f010b87d:	66 c7 05 a2 32 25 f0 	movw   $0x8,0xf02532a2
f010b884:	08 00 
f010b886:	a0 a4 32 25 f0       	mov    0xf02532a4,%al
f010b88b:	83 e0 e0             	and    $0xffffffe0,%eax
f010b88e:	a2 a4 32 25 f0       	mov    %al,0xf02532a4
f010b893:	a0 a4 32 25 f0       	mov    0xf02532a4,%al
f010b898:	83 e0 1f             	and    $0x1f,%eax
f010b89b:	a2 a4 32 25 f0       	mov    %al,0xf02532a4
f010b8a0:	a0 a5 32 25 f0       	mov    0xf02532a5,%al
f010b8a5:	83 e0 f0             	and    $0xfffffff0,%eax
f010b8a8:	83 c8 0e             	or     $0xe,%eax
f010b8ab:	a2 a5 32 25 f0       	mov    %al,0xf02532a5
f010b8b0:	a0 a5 32 25 f0       	mov    0xf02532a5,%al
f010b8b5:	83 e0 ef             	and    $0xffffffef,%eax
f010b8b8:	a2 a5 32 25 f0       	mov    %al,0xf02532a5
f010b8bd:	a0 a5 32 25 f0       	mov    0xf02532a5,%al
f010b8c2:	83 c8 60             	or     $0x60,%eax
f010b8c5:	a2 a5 32 25 f0       	mov    %al,0xf02532a5
f010b8ca:	a0 a5 32 25 f0       	mov    0xf02532a5,%al
f010b8cf:	83 c8 80             	or     $0xffffff80,%eax
f010b8d2:	a2 a5 32 25 f0       	mov    %al,0xf02532a5
f010b8d7:	b8 1a c7 10 f0       	mov    $0xf010c71a,%eax
f010b8dc:	c1 e8 10             	shr    $0x10,%eax
f010b8df:	66 a3 a6 32 25 f0    	mov    %ax,0xf02532a6
	SETGATE(idt[33], 0, GD_KT , &ALL_FAULTS33, 3) ;
f010b8e5:	b8 20 c7 10 f0       	mov    $0xf010c720,%eax
f010b8ea:	66 a3 a8 32 25 f0    	mov    %ax,0xf02532a8
f010b8f0:	66 c7 05 aa 32 25 f0 	movw   $0x8,0xf02532aa
f010b8f7:	08 00 
f010b8f9:	a0 ac 32 25 f0       	mov    0xf02532ac,%al
f010b8fe:	83 e0 e0             	and    $0xffffffe0,%eax
f010b901:	a2 ac 32 25 f0       	mov    %al,0xf02532ac
f010b906:	a0 ac 32 25 f0       	mov    0xf02532ac,%al
f010b90b:	83 e0 1f             	and    $0x1f,%eax
f010b90e:	a2 ac 32 25 f0       	mov    %al,0xf02532ac
f010b913:	a0 ad 32 25 f0       	mov    0xf02532ad,%al
f010b918:	83 e0 f0             	and    $0xfffffff0,%eax
f010b91b:	83 c8 0e             	or     $0xe,%eax
f010b91e:	a2 ad 32 25 f0       	mov    %al,0xf02532ad
f010b923:	a0 ad 32 25 f0       	mov    0xf02532ad,%al
f010b928:	83 e0 ef             	and    $0xffffffef,%eax
f010b92b:	a2 ad 32 25 f0       	mov    %al,0xf02532ad
f010b930:	a0 ad 32 25 f0       	mov    0xf02532ad,%al
f010b935:	83 c8 60             	or     $0x60,%eax
f010b938:	a2 ad 32 25 f0       	mov    %al,0xf02532ad
f010b93d:	a0 ad 32 25 f0       	mov    0xf02532ad,%al
f010b942:	83 c8 80             	or     $0xffffff80,%eax
f010b945:	a2 ad 32 25 f0       	mov    %al,0xf02532ad
f010b94a:	b8 20 c7 10 f0       	mov    $0xf010c720,%eax
f010b94f:	c1 e8 10             	shr    $0x10,%eax
f010b952:	66 a3 ae 32 25 f0    	mov    %ax,0xf02532ae
	SETGATE(idt[34], 0, GD_KT , &ALL_FAULTS34, 3) ;
f010b958:	b8 26 c7 10 f0       	mov    $0xf010c726,%eax
f010b95d:	66 a3 b0 32 25 f0    	mov    %ax,0xf02532b0
f010b963:	66 c7 05 b2 32 25 f0 	movw   $0x8,0xf02532b2
f010b96a:	08 00 
f010b96c:	a0 b4 32 25 f0       	mov    0xf02532b4,%al
f010b971:	83 e0 e0             	and    $0xffffffe0,%eax
f010b974:	a2 b4 32 25 f0       	mov    %al,0xf02532b4
f010b979:	a0 b4 32 25 f0       	mov    0xf02532b4,%al
f010b97e:	83 e0 1f             	and    $0x1f,%eax
f010b981:	a2 b4 32 25 f0       	mov    %al,0xf02532b4
f010b986:	a0 b5 32 25 f0       	mov    0xf02532b5,%al
f010b98b:	83 e0 f0             	and    $0xfffffff0,%eax
f010b98e:	83 c8 0e             	or     $0xe,%eax
f010b991:	a2 b5 32 25 f0       	mov    %al,0xf02532b5
f010b996:	a0 b5 32 25 f0       	mov    0xf02532b5,%al
f010b99b:	83 e0 ef             	and    $0xffffffef,%eax
f010b99e:	a2 b5 32 25 f0       	mov    %al,0xf02532b5
f010b9a3:	a0 b5 32 25 f0       	mov    0xf02532b5,%al
f010b9a8:	83 c8 60             	or     $0x60,%eax
f010b9ab:	a2 b5 32 25 f0       	mov    %al,0xf02532b5
f010b9b0:	a0 b5 32 25 f0       	mov    0xf02532b5,%al
f010b9b5:	83 c8 80             	or     $0xffffff80,%eax
f010b9b8:	a2 b5 32 25 f0       	mov    %al,0xf02532b5
f010b9bd:	b8 26 c7 10 f0       	mov    $0xf010c726,%eax
f010b9c2:	c1 e8 10             	shr    $0x10,%eax
f010b9c5:	66 a3 b6 32 25 f0    	mov    %ax,0xf02532b6
	SETGATE(idt[35], 0, GD_KT , &ALL_FAULTS35, 3) ;
f010b9cb:	b8 2c c7 10 f0       	mov    $0xf010c72c,%eax
f010b9d0:	66 a3 b8 32 25 f0    	mov    %ax,0xf02532b8
f010b9d6:	66 c7 05 ba 32 25 f0 	movw   $0x8,0xf02532ba
f010b9dd:	08 00 
f010b9df:	a0 bc 32 25 f0       	mov    0xf02532bc,%al
f010b9e4:	83 e0 e0             	and    $0xffffffe0,%eax
f010b9e7:	a2 bc 32 25 f0       	mov    %al,0xf02532bc
f010b9ec:	a0 bc 32 25 f0       	mov    0xf02532bc,%al
f010b9f1:	83 e0 1f             	and    $0x1f,%eax
f010b9f4:	a2 bc 32 25 f0       	mov    %al,0xf02532bc
f010b9f9:	a0 bd 32 25 f0       	mov    0xf02532bd,%al
f010b9fe:	83 e0 f0             	and    $0xfffffff0,%eax
f010ba01:	83 c8 0e             	or     $0xe,%eax
f010ba04:	a2 bd 32 25 f0       	mov    %al,0xf02532bd
f010ba09:	a0 bd 32 25 f0       	mov    0xf02532bd,%al
f010ba0e:	83 e0 ef             	and    $0xffffffef,%eax
f010ba11:	a2 bd 32 25 f0       	mov    %al,0xf02532bd
f010ba16:	a0 bd 32 25 f0       	mov    0xf02532bd,%al
f010ba1b:	83 c8 60             	or     $0x60,%eax
f010ba1e:	a2 bd 32 25 f0       	mov    %al,0xf02532bd
f010ba23:	a0 bd 32 25 f0       	mov    0xf02532bd,%al
f010ba28:	83 c8 80             	or     $0xffffff80,%eax
f010ba2b:	a2 bd 32 25 f0       	mov    %al,0xf02532bd
f010ba30:	b8 2c c7 10 f0       	mov    $0xf010c72c,%eax
f010ba35:	c1 e8 10             	shr    $0x10,%eax
f010ba38:	66 a3 be 32 25 f0    	mov    %ax,0xf02532be
	SETGATE(idt[36], 0, GD_KT , &ALL_FAULTS36, 3) ;
f010ba3e:	b8 32 c7 10 f0       	mov    $0xf010c732,%eax
f010ba43:	66 a3 c0 32 25 f0    	mov    %ax,0xf02532c0
f010ba49:	66 c7 05 c2 32 25 f0 	movw   $0x8,0xf02532c2
f010ba50:	08 00 
f010ba52:	a0 c4 32 25 f0       	mov    0xf02532c4,%al
f010ba57:	83 e0 e0             	and    $0xffffffe0,%eax
f010ba5a:	a2 c4 32 25 f0       	mov    %al,0xf02532c4
f010ba5f:	a0 c4 32 25 f0       	mov    0xf02532c4,%al
f010ba64:	83 e0 1f             	and    $0x1f,%eax
f010ba67:	a2 c4 32 25 f0       	mov    %al,0xf02532c4
f010ba6c:	a0 c5 32 25 f0       	mov    0xf02532c5,%al
f010ba71:	83 e0 f0             	and    $0xfffffff0,%eax
f010ba74:	83 c8 0e             	or     $0xe,%eax
f010ba77:	a2 c5 32 25 f0       	mov    %al,0xf02532c5
f010ba7c:	a0 c5 32 25 f0       	mov    0xf02532c5,%al
f010ba81:	83 e0 ef             	and    $0xffffffef,%eax
f010ba84:	a2 c5 32 25 f0       	mov    %al,0xf02532c5
f010ba89:	a0 c5 32 25 f0       	mov    0xf02532c5,%al
f010ba8e:	83 c8 60             	or     $0x60,%eax
f010ba91:	a2 c5 32 25 f0       	mov    %al,0xf02532c5
f010ba96:	a0 c5 32 25 f0       	mov    0xf02532c5,%al
f010ba9b:	83 c8 80             	or     $0xffffff80,%eax
f010ba9e:	a2 c5 32 25 f0       	mov    %al,0xf02532c5
f010baa3:	b8 32 c7 10 f0       	mov    $0xf010c732,%eax
f010baa8:	c1 e8 10             	shr    $0x10,%eax
f010baab:	66 a3 c6 32 25 f0    	mov    %ax,0xf02532c6
	SETGATE(idt[37], 0, GD_KT , &ALL_FAULTS37, 3) ;
f010bab1:	b8 38 c7 10 f0       	mov    $0xf010c738,%eax
f010bab6:	66 a3 c8 32 25 f0    	mov    %ax,0xf02532c8
f010babc:	66 c7 05 ca 32 25 f0 	movw   $0x8,0xf02532ca
f010bac3:	08 00 
f010bac5:	a0 cc 32 25 f0       	mov    0xf02532cc,%al
f010baca:	83 e0 e0             	and    $0xffffffe0,%eax
f010bacd:	a2 cc 32 25 f0       	mov    %al,0xf02532cc
f010bad2:	a0 cc 32 25 f0       	mov    0xf02532cc,%al
f010bad7:	83 e0 1f             	and    $0x1f,%eax
f010bada:	a2 cc 32 25 f0       	mov    %al,0xf02532cc
f010badf:	a0 cd 32 25 f0       	mov    0xf02532cd,%al
f010bae4:	83 e0 f0             	and    $0xfffffff0,%eax
f010bae7:	83 c8 0e             	or     $0xe,%eax
f010baea:	a2 cd 32 25 f0       	mov    %al,0xf02532cd
f010baef:	a0 cd 32 25 f0       	mov    0xf02532cd,%al
f010baf4:	83 e0 ef             	and    $0xffffffef,%eax
f010baf7:	a2 cd 32 25 f0       	mov    %al,0xf02532cd
f010bafc:	a0 cd 32 25 f0       	mov    0xf02532cd,%al
f010bb01:	83 c8 60             	or     $0x60,%eax
f010bb04:	a2 cd 32 25 f0       	mov    %al,0xf02532cd
f010bb09:	a0 cd 32 25 f0       	mov    0xf02532cd,%al
f010bb0e:	83 c8 80             	or     $0xffffff80,%eax
f010bb11:	a2 cd 32 25 f0       	mov    %al,0xf02532cd
f010bb16:	b8 38 c7 10 f0       	mov    $0xf010c738,%eax
f010bb1b:	c1 e8 10             	shr    $0x10,%eax
f010bb1e:	66 a3 ce 32 25 f0    	mov    %ax,0xf02532ce
	SETGATE(idt[38], 0, GD_KT , &ALL_FAULTS38, 3) ;
f010bb24:	b8 3e c7 10 f0       	mov    $0xf010c73e,%eax
f010bb29:	66 a3 d0 32 25 f0    	mov    %ax,0xf02532d0
f010bb2f:	66 c7 05 d2 32 25 f0 	movw   $0x8,0xf02532d2
f010bb36:	08 00 
f010bb38:	a0 d4 32 25 f0       	mov    0xf02532d4,%al
f010bb3d:	83 e0 e0             	and    $0xffffffe0,%eax
f010bb40:	a2 d4 32 25 f0       	mov    %al,0xf02532d4
f010bb45:	a0 d4 32 25 f0       	mov    0xf02532d4,%al
f010bb4a:	83 e0 1f             	and    $0x1f,%eax
f010bb4d:	a2 d4 32 25 f0       	mov    %al,0xf02532d4
f010bb52:	a0 d5 32 25 f0       	mov    0xf02532d5,%al
f010bb57:	83 e0 f0             	and    $0xfffffff0,%eax
f010bb5a:	83 c8 0e             	or     $0xe,%eax
f010bb5d:	a2 d5 32 25 f0       	mov    %al,0xf02532d5
f010bb62:	a0 d5 32 25 f0       	mov    0xf02532d5,%al
f010bb67:	83 e0 ef             	and    $0xffffffef,%eax
f010bb6a:	a2 d5 32 25 f0       	mov    %al,0xf02532d5
f010bb6f:	a0 d5 32 25 f0       	mov    0xf02532d5,%al
f010bb74:	83 c8 60             	or     $0x60,%eax
f010bb77:	a2 d5 32 25 f0       	mov    %al,0xf02532d5
f010bb7c:	a0 d5 32 25 f0       	mov    0xf02532d5,%al
f010bb81:	83 c8 80             	or     $0xffffff80,%eax
f010bb84:	a2 d5 32 25 f0       	mov    %al,0xf02532d5
f010bb89:	b8 3e c7 10 f0       	mov    $0xf010c73e,%eax
f010bb8e:	c1 e8 10             	shr    $0x10,%eax
f010bb91:	66 a3 d6 32 25 f0    	mov    %ax,0xf02532d6
	SETGATE(idt[39], 0, GD_KT , &ALL_FAULTS39, 3) ;
f010bb97:	b8 44 c7 10 f0       	mov    $0xf010c744,%eax
f010bb9c:	66 a3 d8 32 25 f0    	mov    %ax,0xf02532d8
f010bba2:	66 c7 05 da 32 25 f0 	movw   $0x8,0xf02532da
f010bba9:	08 00 
f010bbab:	a0 dc 32 25 f0       	mov    0xf02532dc,%al
f010bbb0:	83 e0 e0             	and    $0xffffffe0,%eax
f010bbb3:	a2 dc 32 25 f0       	mov    %al,0xf02532dc
f010bbb8:	a0 dc 32 25 f0       	mov    0xf02532dc,%al
f010bbbd:	83 e0 1f             	and    $0x1f,%eax
f010bbc0:	a2 dc 32 25 f0       	mov    %al,0xf02532dc
f010bbc5:	a0 dd 32 25 f0       	mov    0xf02532dd,%al
f010bbca:	83 e0 f0             	and    $0xfffffff0,%eax
f010bbcd:	83 c8 0e             	or     $0xe,%eax
f010bbd0:	a2 dd 32 25 f0       	mov    %al,0xf02532dd
f010bbd5:	a0 dd 32 25 f0       	mov    0xf02532dd,%al
f010bbda:	83 e0 ef             	and    $0xffffffef,%eax
f010bbdd:	a2 dd 32 25 f0       	mov    %al,0xf02532dd
f010bbe2:	a0 dd 32 25 f0       	mov    0xf02532dd,%al
f010bbe7:	83 c8 60             	or     $0x60,%eax
f010bbea:	a2 dd 32 25 f0       	mov    %al,0xf02532dd
f010bbef:	a0 dd 32 25 f0       	mov    0xf02532dd,%al
f010bbf4:	83 c8 80             	or     $0xffffff80,%eax
f010bbf7:	a2 dd 32 25 f0       	mov    %al,0xf02532dd
f010bbfc:	b8 44 c7 10 f0       	mov    $0xf010c744,%eax
f010bc01:	c1 e8 10             	shr    $0x10,%eax
f010bc04:	66 a3 de 32 25 f0    	mov    %ax,0xf02532de
	SETGATE(idt[40], 0, GD_KT , &ALL_FAULTS40, 3) ;
f010bc0a:	b8 4a c7 10 f0       	mov    $0xf010c74a,%eax
f010bc0f:	66 a3 e0 32 25 f0    	mov    %ax,0xf02532e0
f010bc15:	66 c7 05 e2 32 25 f0 	movw   $0x8,0xf02532e2
f010bc1c:	08 00 
f010bc1e:	a0 e4 32 25 f0       	mov    0xf02532e4,%al
f010bc23:	83 e0 e0             	and    $0xffffffe0,%eax
f010bc26:	a2 e4 32 25 f0       	mov    %al,0xf02532e4
f010bc2b:	a0 e4 32 25 f0       	mov    0xf02532e4,%al
f010bc30:	83 e0 1f             	and    $0x1f,%eax
f010bc33:	a2 e4 32 25 f0       	mov    %al,0xf02532e4
f010bc38:	a0 e5 32 25 f0       	mov    0xf02532e5,%al
f010bc3d:	83 e0 f0             	and    $0xfffffff0,%eax
f010bc40:	83 c8 0e             	or     $0xe,%eax
f010bc43:	a2 e5 32 25 f0       	mov    %al,0xf02532e5
f010bc48:	a0 e5 32 25 f0       	mov    0xf02532e5,%al
f010bc4d:	83 e0 ef             	and    $0xffffffef,%eax
f010bc50:	a2 e5 32 25 f0       	mov    %al,0xf02532e5
f010bc55:	a0 e5 32 25 f0       	mov    0xf02532e5,%al
f010bc5a:	83 c8 60             	or     $0x60,%eax
f010bc5d:	a2 e5 32 25 f0       	mov    %al,0xf02532e5
f010bc62:	a0 e5 32 25 f0       	mov    0xf02532e5,%al
f010bc67:	83 c8 80             	or     $0xffffff80,%eax
f010bc6a:	a2 e5 32 25 f0       	mov    %al,0xf02532e5
f010bc6f:	b8 4a c7 10 f0       	mov    $0xf010c74a,%eax
f010bc74:	c1 e8 10             	shr    $0x10,%eax
f010bc77:	66 a3 e6 32 25 f0    	mov    %ax,0xf02532e6
	SETGATE(idt[41], 0, GD_KT , &ALL_FAULTS41, 3) ;
f010bc7d:	b8 50 c7 10 f0       	mov    $0xf010c750,%eax
f010bc82:	66 a3 e8 32 25 f0    	mov    %ax,0xf02532e8
f010bc88:	66 c7 05 ea 32 25 f0 	movw   $0x8,0xf02532ea
f010bc8f:	08 00 
f010bc91:	a0 ec 32 25 f0       	mov    0xf02532ec,%al
f010bc96:	83 e0 e0             	and    $0xffffffe0,%eax
f010bc99:	a2 ec 32 25 f0       	mov    %al,0xf02532ec
f010bc9e:	a0 ec 32 25 f0       	mov    0xf02532ec,%al
f010bca3:	83 e0 1f             	and    $0x1f,%eax
f010bca6:	a2 ec 32 25 f0       	mov    %al,0xf02532ec
f010bcab:	a0 ed 32 25 f0       	mov    0xf02532ed,%al
f010bcb0:	83 e0 f0             	and    $0xfffffff0,%eax
f010bcb3:	83 c8 0e             	or     $0xe,%eax
f010bcb6:	a2 ed 32 25 f0       	mov    %al,0xf02532ed
f010bcbb:	a0 ed 32 25 f0       	mov    0xf02532ed,%al
f010bcc0:	83 e0 ef             	and    $0xffffffef,%eax
f010bcc3:	a2 ed 32 25 f0       	mov    %al,0xf02532ed
f010bcc8:	a0 ed 32 25 f0       	mov    0xf02532ed,%al
f010bccd:	83 c8 60             	or     $0x60,%eax
f010bcd0:	a2 ed 32 25 f0       	mov    %al,0xf02532ed
f010bcd5:	a0 ed 32 25 f0       	mov    0xf02532ed,%al
f010bcda:	83 c8 80             	or     $0xffffff80,%eax
f010bcdd:	a2 ed 32 25 f0       	mov    %al,0xf02532ed
f010bce2:	b8 50 c7 10 f0       	mov    $0xf010c750,%eax
f010bce7:	c1 e8 10             	shr    $0x10,%eax
f010bcea:	66 a3 ee 32 25 f0    	mov    %ax,0xf02532ee
	SETGATE(idt[42], 0, GD_KT , &ALL_FAULTS42, 3) ;
f010bcf0:	b8 56 c7 10 f0       	mov    $0xf010c756,%eax
f010bcf5:	66 a3 f0 32 25 f0    	mov    %ax,0xf02532f0
f010bcfb:	66 c7 05 f2 32 25 f0 	movw   $0x8,0xf02532f2
f010bd02:	08 00 
f010bd04:	a0 f4 32 25 f0       	mov    0xf02532f4,%al
f010bd09:	83 e0 e0             	and    $0xffffffe0,%eax
f010bd0c:	a2 f4 32 25 f0       	mov    %al,0xf02532f4
f010bd11:	a0 f4 32 25 f0       	mov    0xf02532f4,%al
f010bd16:	83 e0 1f             	and    $0x1f,%eax
f010bd19:	a2 f4 32 25 f0       	mov    %al,0xf02532f4
f010bd1e:	a0 f5 32 25 f0       	mov    0xf02532f5,%al
f010bd23:	83 e0 f0             	and    $0xfffffff0,%eax
f010bd26:	83 c8 0e             	or     $0xe,%eax
f010bd29:	a2 f5 32 25 f0       	mov    %al,0xf02532f5
f010bd2e:	a0 f5 32 25 f0       	mov    0xf02532f5,%al
f010bd33:	83 e0 ef             	and    $0xffffffef,%eax
f010bd36:	a2 f5 32 25 f0       	mov    %al,0xf02532f5
f010bd3b:	a0 f5 32 25 f0       	mov    0xf02532f5,%al
f010bd40:	83 c8 60             	or     $0x60,%eax
f010bd43:	a2 f5 32 25 f0       	mov    %al,0xf02532f5
f010bd48:	a0 f5 32 25 f0       	mov    0xf02532f5,%al
f010bd4d:	83 c8 80             	or     $0xffffff80,%eax
f010bd50:	a2 f5 32 25 f0       	mov    %al,0xf02532f5
f010bd55:	b8 56 c7 10 f0       	mov    $0xf010c756,%eax
f010bd5a:	c1 e8 10             	shr    $0x10,%eax
f010bd5d:	66 a3 f6 32 25 f0    	mov    %ax,0xf02532f6
	SETGATE(idt[43], 0, GD_KT , &ALL_FAULTS43, 3) ;
f010bd63:	b8 5c c7 10 f0       	mov    $0xf010c75c,%eax
f010bd68:	66 a3 f8 32 25 f0    	mov    %ax,0xf02532f8
f010bd6e:	66 c7 05 fa 32 25 f0 	movw   $0x8,0xf02532fa
f010bd75:	08 00 
f010bd77:	a0 fc 32 25 f0       	mov    0xf02532fc,%al
f010bd7c:	83 e0 e0             	and    $0xffffffe0,%eax
f010bd7f:	a2 fc 32 25 f0       	mov    %al,0xf02532fc
f010bd84:	a0 fc 32 25 f0       	mov    0xf02532fc,%al
f010bd89:	83 e0 1f             	and    $0x1f,%eax
f010bd8c:	a2 fc 32 25 f0       	mov    %al,0xf02532fc
f010bd91:	a0 fd 32 25 f0       	mov    0xf02532fd,%al
f010bd96:	83 e0 f0             	and    $0xfffffff0,%eax
f010bd99:	83 c8 0e             	or     $0xe,%eax
f010bd9c:	a2 fd 32 25 f0       	mov    %al,0xf02532fd
f010bda1:	a0 fd 32 25 f0       	mov    0xf02532fd,%al
f010bda6:	83 e0 ef             	and    $0xffffffef,%eax
f010bda9:	a2 fd 32 25 f0       	mov    %al,0xf02532fd
f010bdae:	a0 fd 32 25 f0       	mov    0xf02532fd,%al
f010bdb3:	83 c8 60             	or     $0x60,%eax
f010bdb6:	a2 fd 32 25 f0       	mov    %al,0xf02532fd
f010bdbb:	a0 fd 32 25 f0       	mov    0xf02532fd,%al
f010bdc0:	83 c8 80             	or     $0xffffff80,%eax
f010bdc3:	a2 fd 32 25 f0       	mov    %al,0xf02532fd
f010bdc8:	b8 5c c7 10 f0       	mov    $0xf010c75c,%eax
f010bdcd:	c1 e8 10             	shr    $0x10,%eax
f010bdd0:	66 a3 fe 32 25 f0    	mov    %ax,0xf02532fe
	SETGATE(idt[44], 0, GD_KT , &ALL_FAULTS44, 3) ;
f010bdd6:	b8 62 c7 10 f0       	mov    $0xf010c762,%eax
f010bddb:	66 a3 00 33 25 f0    	mov    %ax,0xf0253300
f010bde1:	66 c7 05 02 33 25 f0 	movw   $0x8,0xf0253302
f010bde8:	08 00 
f010bdea:	a0 04 33 25 f0       	mov    0xf0253304,%al
f010bdef:	83 e0 e0             	and    $0xffffffe0,%eax
f010bdf2:	a2 04 33 25 f0       	mov    %al,0xf0253304
f010bdf7:	a0 04 33 25 f0       	mov    0xf0253304,%al
f010bdfc:	83 e0 1f             	and    $0x1f,%eax
f010bdff:	a2 04 33 25 f0       	mov    %al,0xf0253304
f010be04:	a0 05 33 25 f0       	mov    0xf0253305,%al
f010be09:	83 e0 f0             	and    $0xfffffff0,%eax
f010be0c:	83 c8 0e             	or     $0xe,%eax
f010be0f:	a2 05 33 25 f0       	mov    %al,0xf0253305
f010be14:	a0 05 33 25 f0       	mov    0xf0253305,%al
f010be19:	83 e0 ef             	and    $0xffffffef,%eax
f010be1c:	a2 05 33 25 f0       	mov    %al,0xf0253305
f010be21:	a0 05 33 25 f0       	mov    0xf0253305,%al
f010be26:	83 c8 60             	or     $0x60,%eax
f010be29:	a2 05 33 25 f0       	mov    %al,0xf0253305
f010be2e:	a0 05 33 25 f0       	mov    0xf0253305,%al
f010be33:	83 c8 80             	or     $0xffffff80,%eax
f010be36:	a2 05 33 25 f0       	mov    %al,0xf0253305
f010be3b:	b8 62 c7 10 f0       	mov    $0xf010c762,%eax
f010be40:	c1 e8 10             	shr    $0x10,%eax
f010be43:	66 a3 06 33 25 f0    	mov    %ax,0xf0253306
	SETGATE(idt[45], 0, GD_KT , &ALL_FAULTS45, 3) ;
f010be49:	b8 68 c7 10 f0       	mov    $0xf010c768,%eax
f010be4e:	66 a3 08 33 25 f0    	mov    %ax,0xf0253308
f010be54:	66 c7 05 0a 33 25 f0 	movw   $0x8,0xf025330a
f010be5b:	08 00 
f010be5d:	a0 0c 33 25 f0       	mov    0xf025330c,%al
f010be62:	83 e0 e0             	and    $0xffffffe0,%eax
f010be65:	a2 0c 33 25 f0       	mov    %al,0xf025330c
f010be6a:	a0 0c 33 25 f0       	mov    0xf025330c,%al
f010be6f:	83 e0 1f             	and    $0x1f,%eax
f010be72:	a2 0c 33 25 f0       	mov    %al,0xf025330c
f010be77:	a0 0d 33 25 f0       	mov    0xf025330d,%al
f010be7c:	83 e0 f0             	and    $0xfffffff0,%eax
f010be7f:	83 c8 0e             	or     $0xe,%eax
f010be82:	a2 0d 33 25 f0       	mov    %al,0xf025330d
f010be87:	a0 0d 33 25 f0       	mov    0xf025330d,%al
f010be8c:	83 e0 ef             	and    $0xffffffef,%eax
f010be8f:	a2 0d 33 25 f0       	mov    %al,0xf025330d
f010be94:	a0 0d 33 25 f0       	mov    0xf025330d,%al
f010be99:	83 c8 60             	or     $0x60,%eax
f010be9c:	a2 0d 33 25 f0       	mov    %al,0xf025330d
f010bea1:	a0 0d 33 25 f0       	mov    0xf025330d,%al
f010bea6:	83 c8 80             	or     $0xffffff80,%eax
f010bea9:	a2 0d 33 25 f0       	mov    %al,0xf025330d
f010beae:	b8 68 c7 10 f0       	mov    $0xf010c768,%eax
f010beb3:	c1 e8 10             	shr    $0x10,%eax
f010beb6:	66 a3 0e 33 25 f0    	mov    %ax,0xf025330e
	SETGATE(idt[46], 0, GD_KT , &ALL_FAULTS46, 3) ;
f010bebc:	b8 6e c7 10 f0       	mov    $0xf010c76e,%eax
f010bec1:	66 a3 10 33 25 f0    	mov    %ax,0xf0253310
f010bec7:	66 c7 05 12 33 25 f0 	movw   $0x8,0xf0253312
f010bece:	08 00 
f010bed0:	a0 14 33 25 f0       	mov    0xf0253314,%al
f010bed5:	83 e0 e0             	and    $0xffffffe0,%eax
f010bed8:	a2 14 33 25 f0       	mov    %al,0xf0253314
f010bedd:	a0 14 33 25 f0       	mov    0xf0253314,%al
f010bee2:	83 e0 1f             	and    $0x1f,%eax
f010bee5:	a2 14 33 25 f0       	mov    %al,0xf0253314
f010beea:	a0 15 33 25 f0       	mov    0xf0253315,%al
f010beef:	83 e0 f0             	and    $0xfffffff0,%eax
f010bef2:	83 c8 0e             	or     $0xe,%eax
f010bef5:	a2 15 33 25 f0       	mov    %al,0xf0253315
f010befa:	a0 15 33 25 f0       	mov    0xf0253315,%al
f010beff:	83 e0 ef             	and    $0xffffffef,%eax
f010bf02:	a2 15 33 25 f0       	mov    %al,0xf0253315
f010bf07:	a0 15 33 25 f0       	mov    0xf0253315,%al
f010bf0c:	83 c8 60             	or     $0x60,%eax
f010bf0f:	a2 15 33 25 f0       	mov    %al,0xf0253315
f010bf14:	a0 15 33 25 f0       	mov    0xf0253315,%al
f010bf19:	83 c8 80             	or     $0xffffff80,%eax
f010bf1c:	a2 15 33 25 f0       	mov    %al,0xf0253315
f010bf21:	b8 6e c7 10 f0       	mov    $0xf010c76e,%eax
f010bf26:	c1 e8 10             	shr    $0x10,%eax
f010bf29:	66 a3 16 33 25 f0    	mov    %ax,0xf0253316
	SETGATE(idt[47], 0, GD_KT , &ALL_FAULTS47, 3) ;
f010bf2f:	b8 74 c7 10 f0       	mov    $0xf010c774,%eax
f010bf34:	66 a3 18 33 25 f0    	mov    %ax,0xf0253318
f010bf3a:	66 c7 05 1a 33 25 f0 	movw   $0x8,0xf025331a
f010bf41:	08 00 
f010bf43:	a0 1c 33 25 f0       	mov    0xf025331c,%al
f010bf48:	83 e0 e0             	and    $0xffffffe0,%eax
f010bf4b:	a2 1c 33 25 f0       	mov    %al,0xf025331c
f010bf50:	a0 1c 33 25 f0       	mov    0xf025331c,%al
f010bf55:	83 e0 1f             	and    $0x1f,%eax
f010bf58:	a2 1c 33 25 f0       	mov    %al,0xf025331c
f010bf5d:	a0 1d 33 25 f0       	mov    0xf025331d,%al
f010bf62:	83 e0 f0             	and    $0xfffffff0,%eax
f010bf65:	83 c8 0e             	or     $0xe,%eax
f010bf68:	a2 1d 33 25 f0       	mov    %al,0xf025331d
f010bf6d:	a0 1d 33 25 f0       	mov    0xf025331d,%al
f010bf72:	83 e0 ef             	and    $0xffffffef,%eax
f010bf75:	a2 1d 33 25 f0       	mov    %al,0xf025331d
f010bf7a:	a0 1d 33 25 f0       	mov    0xf025331d,%al
f010bf7f:	83 c8 60             	or     $0x60,%eax
f010bf82:	a2 1d 33 25 f0       	mov    %al,0xf025331d
f010bf87:	a0 1d 33 25 f0       	mov    0xf025331d,%al
f010bf8c:	83 c8 80             	or     $0xffffff80,%eax
f010bf8f:	a2 1d 33 25 f0       	mov    %al,0xf025331d
f010bf94:	b8 74 c7 10 f0       	mov    $0xf010c774,%eax
f010bf99:	c1 e8 10             	shr    $0x10,%eax
f010bf9c:	66 a3 1e 33 25 f0    	mov    %ax,0xf025331e



	// Setup a TSS so that we get the right stack
	// when we trap to the kernel.
	ts.ts_esp0 = KERNEL_STACK_TOP;
f010bfa2:	c7 05 c4 39 25 f0 00 	movl   $0xefc00000,0xf02539c4
f010bfa9:	00 c0 ef 
	ts.ts_ss0 = GD_KD;
f010bfac:	66 c7 05 c8 39 25 f0 	movw   $0x10,0xf02539c8
f010bfb3:	10 00 

	// Initialize the TSS field of the gdt.
	gdt[GD_TSS >> 3] = SEG16(STS_T32A, (uint32) (&ts),
f010bfb5:	66 c7 05 a8 e9 18 f0 	movw   $0x68,0xf018e9a8
f010bfbc:	68 00 
f010bfbe:	b8 c0 39 25 f0       	mov    $0xf02539c0,%eax
f010bfc3:	66 a3 aa e9 18 f0    	mov    %ax,0xf018e9aa
f010bfc9:	b8 c0 39 25 f0       	mov    $0xf02539c0,%eax
f010bfce:	c1 e8 10             	shr    $0x10,%eax
f010bfd1:	a2 ac e9 18 f0       	mov    %al,0xf018e9ac
f010bfd6:	a0 ad e9 18 f0       	mov    0xf018e9ad,%al
f010bfdb:	83 e0 f0             	and    $0xfffffff0,%eax
f010bfde:	83 c8 09             	or     $0x9,%eax
f010bfe1:	a2 ad e9 18 f0       	mov    %al,0xf018e9ad
f010bfe6:	a0 ad e9 18 f0       	mov    0xf018e9ad,%al
f010bfeb:	83 c8 10             	or     $0x10,%eax
f010bfee:	a2 ad e9 18 f0       	mov    %al,0xf018e9ad
f010bff3:	a0 ad e9 18 f0       	mov    0xf018e9ad,%al
f010bff8:	83 e0 9f             	and    $0xffffff9f,%eax
f010bffb:	a2 ad e9 18 f0       	mov    %al,0xf018e9ad
f010c000:	a0 ad e9 18 f0       	mov    0xf018e9ad,%al
f010c005:	83 c8 80             	or     $0xffffff80,%eax
f010c008:	a2 ad e9 18 f0       	mov    %al,0xf018e9ad
f010c00d:	a0 ae e9 18 f0       	mov    0xf018e9ae,%al
f010c012:	83 e0 f0             	and    $0xfffffff0,%eax
f010c015:	a2 ae e9 18 f0       	mov    %al,0xf018e9ae
f010c01a:	a0 ae e9 18 f0       	mov    0xf018e9ae,%al
f010c01f:	83 e0 ef             	and    $0xffffffef,%eax
f010c022:	a2 ae e9 18 f0       	mov    %al,0xf018e9ae
f010c027:	a0 ae e9 18 f0       	mov    0xf018e9ae,%al
f010c02c:	83 e0 df             	and    $0xffffffdf,%eax
f010c02f:	a2 ae e9 18 f0       	mov    %al,0xf018e9ae
f010c034:	a0 ae e9 18 f0       	mov    0xf018e9ae,%al
f010c039:	83 c8 40             	or     $0x40,%eax
f010c03c:	a2 ae e9 18 f0       	mov    %al,0xf018e9ae
f010c041:	a0 ae e9 18 f0       	mov    0xf018e9ae,%al
f010c046:	83 e0 7f             	and    $0x7f,%eax
f010c049:	a2 ae e9 18 f0       	mov    %al,0xf018e9ae
f010c04e:	b8 c0 39 25 f0       	mov    $0xf02539c0,%eax
f010c053:	c1 e8 18             	shr    $0x18,%eax
f010c056:	a2 af e9 18 f0       	mov    %al,0xf018e9af
			sizeof(struct Taskstate), 0);
	gdt[GD_TSS >> 3].sd_s = 0;
f010c05b:	a0 ad e9 18 f0       	mov    0xf018e9ad,%al
f010c060:	83 e0 ef             	and    $0xffffffef,%eax
f010c063:	a2 ad e9 18 f0       	mov    %al,0xf018e9ad
f010c068:	66 c7 45 fe 28 00    	movw   $0x28,-0x2(%ebp)
}

static __inline void
ltr(uint16 sel)
{
	__asm __volatile("ltr %0" : : "r" (sel));
f010c06e:	66 8b 45 fe          	mov    -0x2(%ebp),%ax
f010c072:	0f 00 d8             	ltr    %ax

	// Load the TSS
	ltr(GD_TSS);

	// Load the IDT
	asm volatile("lidt idt_pd");
f010c075:	0f 01 1d 70 ea 18 f0 	lidtl  0xf018ea70
}
f010c07c:	90                   	nop
f010c07d:	c9                   	leave  
f010c07e:	c3                   	ret    

f010c07f <print_trapframe>:

void print_trapframe(struct Trapframe *tf)
{
f010c07f:	55                   	push   %ebp
f010c080:	89 e5                	mov    %esp,%ebp
f010c082:	53                   	push   %ebx
f010c083:	83 ec 04             	sub    $0x4,%esp
	cprintf("TRAP frame at %p\n", tf);
f010c086:	83 ec 08             	sub    $0x8,%esp
f010c089:	ff 75 08             	pushl  0x8(%ebp)
f010c08c:	68 3b 32 13 f0       	push   $0xf013323b
f010c091:	e8 9b 4d ff ff       	call   f0100e31 <cprintf>
f010c096:	83 c4 10             	add    $0x10,%esp
	print_regs(&tf->tf_regs);
f010c099:	8b 45 08             	mov    0x8(%ebp),%eax
f010c09c:	83 ec 0c             	sub    $0xc,%esp
f010c09f:	50                   	push   %eax
f010c0a0:	e8 fd 00 00 00       	call   f010c1a2 <print_regs>
f010c0a5:	83 c4 10             	add    $0x10,%esp
	cprintf("  es   0x----%04x\n", tf->tf_es);
f010c0a8:	8b 45 08             	mov    0x8(%ebp),%eax
f010c0ab:	8b 40 20             	mov    0x20(%eax),%eax
f010c0ae:	0f b7 c0             	movzwl %ax,%eax
f010c0b1:	83 ec 08             	sub    $0x8,%esp
f010c0b4:	50                   	push   %eax
f010c0b5:	68 4d 32 13 f0       	push   $0xf013324d
f010c0ba:	e8 72 4d ff ff       	call   f0100e31 <cprintf>
f010c0bf:	83 c4 10             	add    $0x10,%esp
	cprintf("  ds   0x----%04x\n", tf->tf_ds);
f010c0c2:	8b 45 08             	mov    0x8(%ebp),%eax
f010c0c5:	8b 40 24             	mov    0x24(%eax),%eax
f010c0c8:	0f b7 c0             	movzwl %ax,%eax
f010c0cb:	83 ec 08             	sub    $0x8,%esp
f010c0ce:	50                   	push   %eax
f010c0cf:	68 60 32 13 f0       	push   $0xf0133260
f010c0d4:	e8 58 4d ff ff       	call   f0100e31 <cprintf>
f010c0d9:	83 c4 10             	add    $0x10,%esp
	cprintf("  trap 0x%08x %s - %d\n", tf->tf_trapno, trapname(tf->tf_trapno), tf->tf_trapno);
f010c0dc:	8b 45 08             	mov    0x8(%ebp),%eax
f010c0df:	8b 58 28             	mov    0x28(%eax),%ebx
f010c0e2:	8b 45 08             	mov    0x8(%ebp),%eax
f010c0e5:	8b 40 28             	mov    0x28(%eax),%eax
f010c0e8:	83 ec 0c             	sub    $0xc,%esp
f010c0eb:	50                   	push   %eax
f010c0ec:	e8 d0 ee ff ff       	call   f010afc1 <trapname>
f010c0f1:	83 c4 10             	add    $0x10,%esp
f010c0f4:	89 c2                	mov    %eax,%edx
f010c0f6:	8b 45 08             	mov    0x8(%ebp),%eax
f010c0f9:	8b 40 28             	mov    0x28(%eax),%eax
f010c0fc:	53                   	push   %ebx
f010c0fd:	52                   	push   %edx
f010c0fe:	50                   	push   %eax
f010c0ff:	68 73 32 13 f0       	push   $0xf0133273
f010c104:	e8 28 4d ff ff       	call   f0100e31 <cprintf>
f010c109:	83 c4 10             	add    $0x10,%esp
	cprintf("  err  0x%08x\n", tf->tf_err);
f010c10c:	8b 45 08             	mov    0x8(%ebp),%eax
f010c10f:	8b 40 2c             	mov    0x2c(%eax),%eax
f010c112:	83 ec 08             	sub    $0x8,%esp
f010c115:	50                   	push   %eax
f010c116:	68 8a 32 13 f0       	push   $0xf013328a
f010c11b:	e8 11 4d ff ff       	call   f0100e31 <cprintf>
f010c120:	83 c4 10             	add    $0x10,%esp
	cprintf("  eip  0x%08x\n", tf->tf_eip);
f010c123:	8b 45 08             	mov    0x8(%ebp),%eax
f010c126:	8b 40 30             	mov    0x30(%eax),%eax
f010c129:	83 ec 08             	sub    $0x8,%esp
f010c12c:	50                   	push   %eax
f010c12d:	68 99 32 13 f0       	push   $0xf0133299
f010c132:	e8 fa 4c ff ff       	call   f0100e31 <cprintf>
f010c137:	83 c4 10             	add    $0x10,%esp
	cprintf("  cs   0x----%04x\n", tf->tf_cs);
f010c13a:	8b 45 08             	mov    0x8(%ebp),%eax
f010c13d:	8b 40 34             	mov    0x34(%eax),%eax
f010c140:	0f b7 c0             	movzwl %ax,%eax
f010c143:	83 ec 08             	sub    $0x8,%esp
f010c146:	50                   	push   %eax
f010c147:	68 a8 32 13 f0       	push   $0xf01332a8
f010c14c:	e8 e0 4c ff ff       	call   f0100e31 <cprintf>
f010c151:	83 c4 10             	add    $0x10,%esp
	cprintf("  flag 0x%08x\n", tf->tf_eflags);
f010c154:	8b 45 08             	mov    0x8(%ebp),%eax
f010c157:	8b 40 38             	mov    0x38(%eax),%eax
f010c15a:	83 ec 08             	sub    $0x8,%esp
f010c15d:	50                   	push   %eax
f010c15e:	68 bb 32 13 f0       	push   $0xf01332bb
f010c163:	e8 c9 4c ff ff       	call   f0100e31 <cprintf>
f010c168:	83 c4 10             	add    $0x10,%esp
	cprintf("  esp  0x%08x\n", tf->tf_esp);
f010c16b:	8b 45 08             	mov    0x8(%ebp),%eax
f010c16e:	8b 40 3c             	mov    0x3c(%eax),%eax
f010c171:	83 ec 08             	sub    $0x8,%esp
f010c174:	50                   	push   %eax
f010c175:	68 ca 32 13 f0       	push   $0xf01332ca
f010c17a:	e8 b2 4c ff ff       	call   f0100e31 <cprintf>
f010c17f:	83 c4 10             	add    $0x10,%esp
	cprintf("  ss   0x----%04x\n", tf->tf_ss);
f010c182:	8b 45 08             	mov    0x8(%ebp),%eax
f010c185:	8b 40 40             	mov    0x40(%eax),%eax
f010c188:	0f b7 c0             	movzwl %ax,%eax
f010c18b:	83 ec 08             	sub    $0x8,%esp
f010c18e:	50                   	push   %eax
f010c18f:	68 d9 32 13 f0       	push   $0xf01332d9
f010c194:	e8 98 4c ff ff       	call   f0100e31 <cprintf>
f010c199:	83 c4 10             	add    $0x10,%esp
}
f010c19c:	90                   	nop
f010c19d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010c1a0:	c9                   	leave  
f010c1a1:	c3                   	ret    

f010c1a2 <print_regs>:

void print_regs(struct PushRegs *regs)
{
f010c1a2:	55                   	push   %ebp
f010c1a3:	89 e5                	mov    %esp,%ebp
f010c1a5:	83 ec 08             	sub    $0x8,%esp
	cprintf("  edi  0x%08x\n", regs->reg_edi);
f010c1a8:	8b 45 08             	mov    0x8(%ebp),%eax
f010c1ab:	8b 00                	mov    (%eax),%eax
f010c1ad:	83 ec 08             	sub    $0x8,%esp
f010c1b0:	50                   	push   %eax
f010c1b1:	68 ec 32 13 f0       	push   $0xf01332ec
f010c1b6:	e8 76 4c ff ff       	call   f0100e31 <cprintf>
f010c1bb:	83 c4 10             	add    $0x10,%esp
	cprintf("  esi  0x%08x\n", regs->reg_esi);
f010c1be:	8b 45 08             	mov    0x8(%ebp),%eax
f010c1c1:	8b 40 04             	mov    0x4(%eax),%eax
f010c1c4:	83 ec 08             	sub    $0x8,%esp
f010c1c7:	50                   	push   %eax
f010c1c8:	68 fb 32 13 f0       	push   $0xf01332fb
f010c1cd:	e8 5f 4c ff ff       	call   f0100e31 <cprintf>
f010c1d2:	83 c4 10             	add    $0x10,%esp
	cprintf("  ebp  0x%08x\n", regs->reg_ebp);
f010c1d5:	8b 45 08             	mov    0x8(%ebp),%eax
f010c1d8:	8b 40 08             	mov    0x8(%eax),%eax
f010c1db:	83 ec 08             	sub    $0x8,%esp
f010c1de:	50                   	push   %eax
f010c1df:	68 0a 33 13 f0       	push   $0xf013330a
f010c1e4:	e8 48 4c ff ff       	call   f0100e31 <cprintf>
f010c1e9:	83 c4 10             	add    $0x10,%esp
	cprintf("  oesp 0x%08x\n", regs->reg_oesp);
f010c1ec:	8b 45 08             	mov    0x8(%ebp),%eax
f010c1ef:	8b 40 0c             	mov    0xc(%eax),%eax
f010c1f2:	83 ec 08             	sub    $0x8,%esp
f010c1f5:	50                   	push   %eax
f010c1f6:	68 19 33 13 f0       	push   $0xf0133319
f010c1fb:	e8 31 4c ff ff       	call   f0100e31 <cprintf>
f010c200:	83 c4 10             	add    $0x10,%esp
	cprintf("  ebx  0x%08x\n", regs->reg_ebx);
f010c203:	8b 45 08             	mov    0x8(%ebp),%eax
f010c206:	8b 40 10             	mov    0x10(%eax),%eax
f010c209:	83 ec 08             	sub    $0x8,%esp
f010c20c:	50                   	push   %eax
f010c20d:	68 28 33 13 f0       	push   $0xf0133328
f010c212:	e8 1a 4c ff ff       	call   f0100e31 <cprintf>
f010c217:	83 c4 10             	add    $0x10,%esp
	cprintf("  edx  0x%08x\n", regs->reg_edx);
f010c21a:	8b 45 08             	mov    0x8(%ebp),%eax
f010c21d:	8b 40 14             	mov    0x14(%eax),%eax
f010c220:	83 ec 08             	sub    $0x8,%esp
f010c223:	50                   	push   %eax
f010c224:	68 37 33 13 f0       	push   $0xf0133337
f010c229:	e8 03 4c ff ff       	call   f0100e31 <cprintf>
f010c22e:	83 c4 10             	add    $0x10,%esp
	cprintf("  ecx  0x%08x\n", regs->reg_ecx);
f010c231:	8b 45 08             	mov    0x8(%ebp),%eax
f010c234:	8b 40 18             	mov    0x18(%eax),%eax
f010c237:	83 ec 08             	sub    $0x8,%esp
f010c23a:	50                   	push   %eax
f010c23b:	68 46 33 13 f0       	push   $0xf0133346
f010c240:	e8 ec 4b ff ff       	call   f0100e31 <cprintf>
f010c245:	83 c4 10             	add    $0x10,%esp
	cprintf("  eax  0x%08x\n", regs->reg_eax);
f010c248:	8b 45 08             	mov    0x8(%ebp),%eax
f010c24b:	8b 40 1c             	mov    0x1c(%eax),%eax
f010c24e:	83 ec 08             	sub    $0x8,%esp
f010c251:	50                   	push   %eax
f010c252:	68 55 33 13 f0       	push   $0xf0133355
f010c257:	e8 d5 4b ff ff       	call   f0100e31 <cprintf>
f010c25c:	83 c4 10             	add    $0x10,%esp
}
f010c25f:	90                   	nop
f010c260:	c9                   	leave  
f010c261:	c3                   	ret    

f010c262 <trap_dispatch>:

static void trap_dispatch(struct Trapframe *tf)
{
f010c262:	55                   	push   %ebp
f010c263:	89 e5                	mov    %esp,%ebp
f010c265:	57                   	push   %edi
f010c266:	56                   	push   %esi
f010c267:	53                   	push   %ebx
f010c268:	83 ec 1c             	sub    $0x1c,%esp
	// Handle processor exceptions.
	// LAB 3: Your code here.

	if(tf->tf_trapno == T_PGFLT)
f010c26b:	8b 45 08             	mov    0x8(%ebp),%eax
f010c26e:	8b 40 28             	mov    0x28(%eax),%eax
f010c271:	83 f8 0e             	cmp    $0xe,%eax
f010c274:	75 29                	jne    f010c29f <trap_dispatch+0x3d>
	{
		//print_trapframe(tf);
		if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX))
f010c276:	83 ec 0c             	sub    $0xc,%esp
f010c279:	6a 01                	push   $0x1
f010c27b:	e8 ff 14 00 00       	call   f010d77f <isPageReplacmentAlgorithmLRU>
f010c280:	83 c4 10             	add    $0x10,%esp
f010c283:	85 c0                	test   %eax,%eax
f010c285:	74 05                	je     f010c28c <trap_dispatch+0x2a>
		{
			//cprintf("===========Table WS before updating time stamp========\n");
			//env_table_ws_print(curenv) ;
			update_WS_time_stamps();
f010c287:	e8 79 a1 ff ff       	call   f0106405 <update_WS_time_stamps>
		}
		fault_handler(tf);
f010c28c:	83 ec 0c             	sub    $0xc,%esp
f010c28f:	ff 75 08             	pushl  0x8(%ebp)
f010c292:	e8 51 02 00 00       	call   f010c4e8 <fault_handler>
f010c297:	83 c4 10             	add    $0x10,%esp
			panic("unhandled trap in user program");

			return;
		}
	}
	return;
f010c29a:	e9 bb 00 00 00       	jmp    f010c35a <trap_dispatch+0xf8>
			//env_table_ws_print(curenv) ;
			update_WS_time_stamps();
		}
		fault_handler(tf);
	}
	else if (tf->tf_trapno == T_SYSCALL)
f010c29f:	8b 45 08             	mov    0x8(%ebp),%eax
f010c2a2:	8b 40 28             	mov    0x28(%eax),%eax
f010c2a5:	83 f8 30             	cmp    $0x30,%eax
f010c2a8:	75 42                	jne    f010c2ec <trap_dispatch+0x8a>
	{
		uint32 ret = syscall(tf->tf_regs.reg_eax
f010c2aa:	8b 45 08             	mov    0x8(%ebp),%eax
f010c2ad:	8b 78 04             	mov    0x4(%eax),%edi
f010c2b0:	8b 45 08             	mov    0x8(%ebp),%eax
f010c2b3:	8b 30                	mov    (%eax),%esi
f010c2b5:	8b 45 08             	mov    0x8(%ebp),%eax
f010c2b8:	8b 58 10             	mov    0x10(%eax),%ebx
f010c2bb:	8b 45 08             	mov    0x8(%ebp),%eax
f010c2be:	8b 48 18             	mov    0x18(%eax),%ecx
f010c2c1:	8b 45 08             	mov    0x8(%ebp),%eax
f010c2c4:	8b 50 14             	mov    0x14(%eax),%edx
f010c2c7:	8b 45 08             	mov    0x8(%ebp),%eax
f010c2ca:	8b 40 1c             	mov    0x1c(%eax),%eax
f010c2cd:	83 ec 08             	sub    $0x8,%esp
f010c2d0:	57                   	push   %edi
f010c2d1:	56                   	push   %esi
f010c2d2:	53                   	push   %ebx
f010c2d3:	51                   	push   %ecx
f010c2d4:	52                   	push   %edx
f010c2d5:	50                   	push   %eax
f010c2d6:	e8 a7 0b 00 00       	call   f010ce82 <syscall>
f010c2db:	83 c4 20             	add    $0x20,%esp
f010c2de:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				,tf->tf_regs.reg_edx
				,tf->tf_regs.reg_ecx
				,tf->tf_regs.reg_ebx
				,tf->tf_regs.reg_edi
				,tf->tf_regs.reg_esi);
		tf->tf_regs.reg_eax = ret;
f010c2e1:	8b 45 08             	mov    0x8(%ebp),%eax
f010c2e4:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010c2e7:	89 50 1c             	mov    %edx,0x1c(%eax)
			panic("unhandled trap in user program");

			return;
		}
	}
	return;
f010c2ea:	eb 6e                	jmp    f010c35a <trap_dispatch+0xf8>
				,tf->tf_regs.reg_ebx
				,tf->tf_regs.reg_edi
				,tf->tf_regs.reg_esi);
		tf->tf_regs.reg_eax = ret;
	}
	else if(tf->tf_trapno == T_DBLFLT)
f010c2ec:	8b 45 08             	mov    0x8(%ebp),%eax
f010c2ef:	8b 40 28             	mov    0x28(%eax),%eax
f010c2f2:	83 f8 08             	cmp    $0x8,%eax
f010c2f5:	75 17                	jne    f010c30e <trap_dispatch+0xac>
	{
		panic("double fault!!");
f010c2f7:	83 ec 04             	sub    $0x4,%esp
f010c2fa:	68 64 33 13 f0       	push   $0xf0133364
f010c2ff:	68 e7 00 00 00       	push   $0xe7
f010c304:	68 73 33 13 f0       	push   $0xf0133373
f010c309:	e8 a2 3e ff ff       	call   f01001b0 <_panic>
	}
	else if (tf->tf_trapno == IRQ0_Clock)
f010c30e:	8b 45 08             	mov    0x8(%ebp),%eax
f010c311:	8b 40 28             	mov    0x28(%eax),%eax
f010c314:	83 f8 20             	cmp    $0x20,%eax
f010c317:	75 07                	jne    f010c320 <trap_dispatch+0xbe>
	{
		clock_interrupt_handler() ;
f010c319:	e8 aa a0 ff ff       	call   f01063c8 <clock_interrupt_handler>
			panic("unhandled trap in user program");

			return;
		}
	}
	return;
f010c31e:	eb 3a                	jmp    f010c35a <trap_dispatch+0xf8>

	else
	{
		// Unexpected trap: The user process or the kernel has a bug.
		//print_trapframe(tf);
		if (tf->tf_cs == GD_KT)
f010c320:	8b 45 08             	mov    0x8(%ebp),%eax
f010c323:	8b 40 34             	mov    0x34(%eax),%eax
f010c326:	66 83 f8 08          	cmp    $0x8,%ax
f010c32a:	75 17                	jne    f010c343 <trap_dispatch+0xe1>
		{
			panic("unhandled trap in kernel");
f010c32c:	83 ec 04             	sub    $0x4,%esp
f010c32f:	68 84 33 13 f0       	push   $0xf0133384
f010c334:	68 f4 00 00 00       	push   $0xf4
f010c339:	68 73 33 13 f0       	push   $0xf0133373
f010c33e:	e8 6d 3e ff ff       	call   f01001b0 <_panic>
		}
		else {
			//env_destroy(curenv);
			panic("unhandled trap in user program");
f010c343:	83 ec 04             	sub    $0x4,%esp
f010c346:	68 a0 33 13 f0       	push   $0xf01333a0
f010c34b:	68 f8 00 00 00       	push   $0xf8
f010c350:	68 73 33 13 f0       	push   $0xf0133373
f010c355:	e8 56 3e ff ff       	call   f01001b0 <_panic>

			return;
		}
	}
	return;
}
f010c35a:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010c35d:	5b                   	pop    %ebx
f010c35e:	5e                   	pop    %esi
f010c35f:	5f                   	pop    %edi
f010c360:	5d                   	pop    %ebp
f010c361:	c3                   	ret    

f010c362 <trap>:

void trap(struct Trapframe *tf)
{
f010c362:	55                   	push   %ebp
f010c363:	89 e5                	mov    %esp,%ebp
f010c365:	57                   	push   %edi
f010c366:	56                   	push   %esi
f010c367:	53                   	push   %ebx
f010c368:	83 ec 1c             	sub    $0x1c,%esp
	kclock_stop();
f010c36b:	e8 5c 87 ff ff       	call   f0104acc <kclock_stop>

	int userTrap = 0;
f010c370:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	if ((tf->tf_cs & 3) == 3) {
f010c377:	8b 45 08             	mov    0x8(%ebp),%eax
f010c37a:	8b 40 34             	mov    0x34(%eax),%eax
f010c37d:	0f b7 c0             	movzwl %ax,%eax
f010c380:	83 e0 03             	and    $0x3,%eax
f010c383:	83 f8 03             	cmp    $0x3,%eax
f010c386:	75 49                	jne    f010c3d1 <trap+0x6f>
		assert(curenv);
f010c388:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f010c38d:	85 c0                	test   %eax,%eax
f010c38f:	75 19                	jne    f010c3aa <trap+0x48>
f010c391:	68 bf 33 13 f0       	push   $0xf01333bf
f010c396:	68 c6 33 13 f0       	push   $0xf01333c6
f010c39b:	68 06 01 00 00       	push   $0x106
f010c3a0:	68 73 33 13 f0       	push   $0xf0133373
f010c3a5:	e8 06 3e ff ff       	call   f01001b0 <_panic>
		curenv->env_tf = *tf;
f010c3aa:	8b 15 74 31 25 f0    	mov    0xf0253174,%edx
f010c3b0:	8b 45 08             	mov    0x8(%ebp),%eax
f010c3b3:	89 c3                	mov    %eax,%ebx
f010c3b5:	b8 11 00 00 00       	mov    $0x11,%eax
f010c3ba:	89 d7                	mov    %edx,%edi
f010c3bc:	89 de                	mov    %ebx,%esi
f010c3be:	89 c1                	mov    %eax,%ecx
f010c3c0:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
		tf = &(curenv->env_tf);
f010c3c2:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f010c3c7:	89 45 08             	mov    %eax,0x8(%ebp)
		userTrap = 1;
f010c3ca:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
	}
	if(tf->tf_trapno == IRQ0_Clock)
f010c3d1:	8b 45 08             	mov    0x8(%ebp),%eax
f010c3d4:	8b 40 28             	mov    0x28(%eax),%eax
f010c3d7:	83 f8 20             	cmp    $0x20,%eax
f010c3da:	75 40                	jne    f010c41c <trap+0xba>
	{
		//		uint16 cnt0 = kclock_read_cnt0() ;
		//		cprintf("CLOCK INTERRUPT: Counter0 Value = %d\n", cnt0 );

		if (userTrap)
f010c3dc:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010c3e0:	0f 84 a6 00 00 00    	je     f010c48c <trap+0x12a>
		{
			assert(curenv);
f010c3e6:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f010c3eb:	85 c0                	test   %eax,%eax
f010c3ed:	75 19                	jne    f010c408 <trap+0xa6>
f010c3ef:	68 bf 33 13 f0       	push   $0xf01333bf
f010c3f4:	68 c6 33 13 f0       	push   $0xf01333c6
f010c3f9:	68 12 01 00 00       	push   $0x112
f010c3fe:	68 73 33 13 f0       	push   $0xf0133373
f010c403:	e8 a8 3d ff ff       	call   f01001b0 <_panic>
			curenv->nClocks++ ;
f010c408:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f010c40d:	8b 90 9c da 01 00    	mov    0x1da9c(%eax),%edx
f010c413:	42                   	inc    %edx
f010c414:	89 90 9c da 01 00    	mov    %edx,0x1da9c(%eax)
f010c41a:	eb 70                	jmp    f010c48c <trap+0x12a>
		}
	}
	else if (tf->tf_trapno == T_PGFLT){
f010c41c:	8b 45 08             	mov    0x8(%ebp),%eax
f010c41f:	8b 40 28             	mov    0x28(%eax),%eax
f010c422:	83 f8 0e             	cmp    $0xe,%eax
f010c425:	75 65                	jne    f010c48c <trap+0x12a>
		//2016: Bypass the faulted instruction
		if (bypassInstrLength != 0){
f010c427:	a0 28 3a 25 f0       	mov    0xf0253a28,%al
f010c42c:	84 c0                	test   %al,%al
f010c42e:	74 5c                	je     f010c48c <trap+0x12a>
			if (userTrap){
f010c430:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010c434:	74 2c                	je     f010c462 <trap+0x100>
				curenv->env_tf.tf_eip = (uint32*)((uint32)(curenv->env_tf.tf_eip) + bypassInstrLength);
f010c436:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f010c43b:	8b 15 74 31 25 f0    	mov    0xf0253174,%edx
f010c441:	8b 52 30             	mov    0x30(%edx),%edx
f010c444:	89 d1                	mov    %edx,%ecx
f010c446:	8a 15 28 3a 25 f0    	mov    0xf0253a28,%dl
f010c44c:	0f b6 d2             	movzbl %dl,%edx
f010c44f:	01 ca                	add    %ecx,%edx
f010c451:	89 50 30             	mov    %edx,0x30(%eax)
				env_run(curenv);
f010c454:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f010c459:	83 ec 0c             	sub    $0xc,%esp
f010c45c:	50                   	push   %eax
f010c45d:	e8 ea d4 ff ff       	call   f010994c <env_run>
			}
			else{
				tf->tf_eip = (uint32*)((uint32)(tf->tf_eip) + bypassInstrLength);
f010c462:	8b 45 08             	mov    0x8(%ebp),%eax
f010c465:	8b 40 30             	mov    0x30(%eax),%eax
f010c468:	89 c2                	mov    %eax,%edx
f010c46a:	a0 28 3a 25 f0       	mov    0xf0253a28,%al
f010c46f:	0f b6 c0             	movzbl %al,%eax
f010c472:	01 d0                	add    %edx,%eax
f010c474:	89 c2                	mov    %eax,%edx
f010c476:	8b 45 08             	mov    0x8(%ebp),%eax
f010c479:	89 50 30             	mov    %edx,0x30(%eax)
				kclock_resume();
f010c47c:	e8 76 86 ff ff       	call   f0104af7 <kclock_resume>
				env_pop_tf(tf);
f010c481:	83 ec 0c             	sub    $0xc,%esp
f010c484:	ff 75 08             	pushl  0x8(%ebp)
f010c487:	e8 12 d6 ff ff       	call   f0109a9e <env_pop_tf>
			}
		}
	}
	trap_dispatch(tf);
f010c48c:	83 ec 0c             	sub    $0xc,%esp
f010c48f:	ff 75 08             	pushl  0x8(%ebp)
f010c492:	e8 cb fd ff ff       	call   f010c262 <trap_dispatch>
f010c497:	83 c4 10             	add    $0x10,%esp
	if (userTrap)
f010c49a:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010c49e:	74 3d                	je     f010c4dd <trap+0x17b>
	{
		assert(curenv && curenv->env_status == ENV_RUNNABLE);
f010c4a0:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f010c4a5:	85 c0                	test   %eax,%eax
f010c4a7:	74 0d                	je     f010c4b6 <trap+0x154>
f010c4a9:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f010c4ae:	8b 40 54             	mov    0x54(%eax),%eax
f010c4b1:	83 f8 02             	cmp    $0x2,%eax
f010c4b4:	74 19                	je     f010c4cf <trap+0x16d>
f010c4b6:	68 dc 33 13 f0       	push   $0xf01333dc
f010c4bb:	68 c6 33 13 f0       	push   $0xf01333c6
f010c4c0:	68 27 01 00 00       	push   $0x127
f010c4c5:	68 73 33 13 f0       	push   $0xf0133373
f010c4ca:	e8 e1 3c ff ff       	call   f01001b0 <_panic>
		env_run(curenv);
f010c4cf:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f010c4d4:	83 ec 0c             	sub    $0xc,%esp
f010c4d7:	50                   	push   %eax
f010c4d8:	e8 6f d4 ff ff       	call   f010994c <env_run>
	/* 2019
	 * If trap from kernel, then return to the called kernel function using the passed param "tf" not the user one that's stored in curenv
	 */
	else
	{
		env_pop_tf((tf));
f010c4dd:	83 ec 0c             	sub    $0xc,%esp
f010c4e0:	ff 75 08             	pushl  0x8(%ebp)
f010c4e3:	e8 b6 d5 ff ff       	call   f0109a9e <env_pop_tf>

f010c4e8 <fault_handler>:

/*2022*/
uint32 last_fault_va = 0;
int8 num_repeated_fault  = 0;
void fault_handler(struct Trapframe *tf)
{
f010c4e8:	55                   	push   %ebp
f010c4e9:	89 e5                	mov    %esp,%ebp
f010c4eb:	83 ec 28             	sub    $0x28,%esp
	int userTrap = 0;
f010c4ee:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	if ((tf->tf_cs & 3) == 3) {
f010c4f5:	8b 45 08             	mov    0x8(%ebp),%eax
f010c4f8:	8b 40 34             	mov    0x34(%eax),%eax
f010c4fb:	0f b7 c0             	movzwl %ax,%eax
f010c4fe:	83 e0 03             	and    $0x3,%eax
f010c501:	83 f8 03             	cmp    $0x3,%eax
f010c504:	75 07                	jne    f010c50d <fault_handler+0x25>
		userTrap = 1;
f010c506:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)

static __inline uint32
rcr2(void)
{
	uint32 val;
	__asm __volatile("movl %%cr2,%0" : "=r" (val));
f010c50d:	0f 20 d0             	mov    %cr2,%eax
f010c510:	89 45 e0             	mov    %eax,-0x20(%ebp)
	return val;
f010c513:	8b 45 e0             	mov    -0x20(%ebp),%eax
	}
	uint32 fault_va;

	// Read processor's CR2 register to find the faulting address
	fault_va = rcr2();
f010c516:	89 45 ec             	mov    %eax,-0x14(%ebp)
	//	cprintf("Faulted VA = %x\n", fault_va);
	//	print_trapframe(tf);

	/******************************************************/
	/*2022*///If same fault va for 3 times, then panic
	if (last_fault_va == fault_va)
f010c519:	a1 a0 39 25 f0       	mov    0xf02539a0,%eax
f010c51e:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010c521:	75 2b                	jne    f010c54e <fault_handler+0x66>
	{
		num_repeated_fault++ ;
f010c523:	a0 a4 39 25 f0       	mov    0xf02539a4,%al
f010c528:	40                   	inc    %eax
f010c529:	a2 a4 39 25 f0       	mov    %al,0xf02539a4
		if (num_repeated_fault == 3)
f010c52e:	a0 a4 39 25 f0       	mov    0xf02539a4,%al
f010c533:	3c 03                	cmp    $0x3,%al
f010c535:	75 1e                	jne    f010c555 <fault_handler+0x6d>
			panic("Failed to handle fault at va=%x: same va is faulted for 3 successive times\n", fault_va);
f010c537:	ff 75 ec             	pushl  -0x14(%ebp)
f010c53a:	68 0c 34 13 f0       	push   $0xf013340c
f010c53f:	68 4a 01 00 00       	push   $0x14a
f010c544:	68 73 33 13 f0       	push   $0xf0133373
f010c549:	e8 62 3c ff ff       	call   f01001b0 <_panic>
	}
	else
	{
		num_repeated_fault = 0;
f010c54e:	c6 05 a4 39 25 f0 00 	movb   $0x0,0xf02539a4
	}
	last_fault_va = fault_va ;
f010c555:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010c558:	a3 a0 39 25 f0       	mov    %eax,0xf02539a0
	/******************************************************/
	//2017: Check stack overflow for Kernel
	if (!userTrap)
f010c55d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010c561:	75 29                	jne    f010c58c <fault_handler+0xa4>
	{
		if (fault_va < KERNEL_STACK_TOP - KERNEL_STACK_SIZE && fault_va >= USER_LIMIT)
f010c563:	81 7d ec ff 7f bf ef 	cmpl   $0xefbf7fff,-0x14(%ebp)
f010c56a:	77 40                	ja     f010c5ac <fault_handler+0xc4>
f010c56c:	81 7d ec ff ff 7f ef 	cmpl   $0xef7fffff,-0x14(%ebp)
f010c573:	76 37                	jbe    f010c5ac <fault_handler+0xc4>
			panic("Kernel: stack overflow exception!");
f010c575:	83 ec 04             	sub    $0x4,%esp
f010c578:	68 58 34 13 f0       	push   $0xf0133458
f010c57d:	68 56 01 00 00       	push   $0x156
f010c582:	68 73 33 13 f0       	push   $0xf0133373
f010c587:	e8 24 3c ff ff       	call   f01001b0 <_panic>
	}
	//2017: Check stack underflow for User
	else
	{
		if (fault_va >= USTACKTOP)
f010c58c:	81 7d ec ff df bf ee 	cmpl   $0xeebfdfff,-0x14(%ebp)
f010c593:	76 17                	jbe    f010c5ac <fault_handler+0xc4>
			panic("User: stack underflow exception!");
f010c595:	83 ec 04             	sub    $0x4,%esp
f010c598:	68 7c 34 13 f0       	push   $0xf013347c
f010c59d:	68 5c 01 00 00       	push   $0x15c
f010c5a2:	68 73 33 13 f0       	push   $0xf0133373
f010c5a7:	e8 04 3c ff ff       	call   f01001b0 <_panic>
	}

	//get a pointer to the environment that caused the fault at runtime
	struct Env* faulted_env = curenv;
f010c5ac:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f010c5b1:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//check the faulted address, is it a table or not ?
	//If the directory entry of the faulted address is NOT PRESENT then
	if ( (faulted_env->env_page_directory[PDX(fault_va)] & PERM_PRESENT) != PERM_PRESENT)
f010c5b4:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c5b7:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010c5bd:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010c5c0:	c1 ea 16             	shr    $0x16,%edx
f010c5c3:	c1 e2 02             	shl    $0x2,%edx
f010c5c6:	01 d0                	add    %edx,%eax
f010c5c8:	8b 00                	mov    (%eax),%eax
f010c5ca:	83 e0 01             	and    $0x1,%eax
f010c5cd:	85 c0                	test   %eax,%eax
f010c5cf:	75 28                	jne    f010c5f9 <fault_handler+0x111>
	{
		// we have a table fault =============================================================
		//cprintf("[%s] user TABLE fault va %08x\n", curenv->prog_name, fault_va);
		faulted_env->tableFaultsCounter ++ ;
f010c5d1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c5d4:	8b 80 78 da 01 00    	mov    0x1da78(%eax),%eax
f010c5da:	8d 50 01             	lea    0x1(%eax),%edx
f010c5dd:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c5e0:	89 90 78 da 01 00    	mov    %edx,0x1da78(%eax)

		table_fault_handler(faulted_env, fault_va);
f010c5e6:	83 ec 08             	sub    $0x8,%esp
f010c5e9:	ff 75 ec             	pushl  -0x14(%ebp)
f010c5ec:	ff 75 e8             	pushl  -0x18(%ebp)
f010c5ef:	e8 70 12 00 00       	call   f010d864 <table_fault_handler>
f010c5f4:	83 c4 10             	add    $0x10,%esp
f010c5f7:	eb 7e                	jmp    f010c677 <fault_handler+0x18f>

			/*============================================================================================*/
		}

		/*2022: Check if fault due to Access Rights */
		int perms = pt_get_page_permissions(faulted_env->env_page_directory, fault_va);
f010c5f9:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c5fc:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010c602:	83 ec 08             	sub    $0x8,%esp
f010c605:	ff 75 ec             	pushl  -0x14(%ebp)
f010c608:	50                   	push   %eax
f010c609:	e8 d5 ba ff ff       	call   f01080e3 <pt_get_page_permissions>
f010c60e:	83 c4 10             	add    $0x10,%esp
f010c611:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		if (perms & PERM_PRESENT)
f010c614:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010c617:	83 e0 01             	and    $0x1,%eax
f010c61a:	85 c0                	test   %eax,%eax
f010c61c:	74 17                	je     f010c635 <fault_handler+0x14d>
			panic("Page @va=%x is exist! page fault due to violation of ACCESS RIGHTS\n", fault_va) ;
f010c61e:	ff 75 ec             	pushl  -0x14(%ebp)
f010c621:	68 a0 34 13 f0       	push   $0xf01334a0
f010c626:	68 7b 01 00 00       	push   $0x17b
f010c62b:	68 73 33 13 f0       	push   $0xf0133373
f010c630:	e8 7b 3b ff ff       	call   f01001b0 <_panic>


		// we have normal page fault =============================================================
		faulted_env->pageFaultsCounter ++ ;
f010c635:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c638:	8b 80 74 da 01 00    	mov    0x1da74(%eax),%eax
f010c63e:	8d 50 01             	lea    0x1(%eax),%edx
f010c641:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c644:	89 90 74 da 01 00    	mov    %edx,0x1da74(%eax)

		//		cprintf("[%08s] user PAGE fault va %08x\n", curenv->prog_name, fault_va);
		//		cprintf("\nPage working set BEFORE fault handler...\n");
		//		env_page_ws_print(curenv);

		if(isBufferingEnabled())
f010c64a:	e8 f3 11 00 00       	call   f010d842 <isBufferingEnabled>
f010c64f:	84 c0                	test   %al,%al
f010c651:	74 13                	je     f010c666 <fault_handler+0x17e>
		{
			__page_fault_handler_with_buffering(faulted_env, fault_va);
f010c653:	83 ec 08             	sub    $0x8,%esp
f010c656:	ff 75 ec             	pushl  -0x14(%ebp)
f010c659:	ff 75 e8             	pushl  -0x18(%ebp)
f010c65c:	e8 a6 12 00 00       	call   f010d907 <__page_fault_handler_with_buffering>
f010c661:	83 c4 10             	add    $0x10,%esp
f010c664:	eb 11                	jmp    f010c677 <fault_handler+0x18f>
		}
		else
		{
			//page_fault_handler(faulted_env, fault_va);
			page_fault_handler(faulted_env, fault_va);
f010c666:	83 ec 08             	sub    $0x8,%esp
f010c669:	ff 75 ec             	pushl  -0x14(%ebp)
f010c66c:	ff 75 e8             	pushl  -0x18(%ebp)
f010c66f:	e8 15 12 00 00       	call   f010d889 <page_fault_handler>
f010c674:	83 c4 10             	add    $0x10,%esp

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f010c677:	0f 20 d8             	mov    %cr3,%eax
f010c67a:	89 45 f0             	mov    %eax,-0x10(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f010c67d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c680:	0f 22 d8             	mov    %eax,%cr3
	/*************************************************************/
	//Refresh the TLB cache
	tlbflush();
	/*************************************************************/

}
f010c683:	90                   	nop
f010c684:	c9                   	leave  
f010c685:	c3                   	ret    

f010c686 <PAGE_FAULT>:

/*
 * Lab 3: Your code here for generating entry points for the different traps.
 */

TRAPHANDLER(PAGE_FAULT, T_PGFLT)
f010c686:	6a 0e                	push   $0xe
f010c688:	e9 ed 00 00 00       	jmp    f010c77a <_alltraps>
f010c68d:	90                   	nop

f010c68e <SYSCALL_HANDLER>:

TRAPHANDLER_NOEC(SYSCALL_HANDLER, T_SYSCALL)
f010c68e:	6a 00                	push   $0x0
f010c690:	6a 30                	push   $0x30
f010c692:	e9 e3 00 00 00       	jmp    f010c77a <_alltraps>
f010c697:	90                   	nop

f010c698 <DBL_FAULT>:

// FOS 2010
//TRAPHANDLER(GP_FAULT, T_GPFLT)
TRAPHANDLER(DBL_FAULT, T_DBLFLT)
f010c698:	6a 08                	push   $0x8
f010c69a:	e9 db 00 00 00       	jmp    f010c77a <_alltraps>
f010c69f:	90                   	nop

f010c6a0 <ALL_FAULTS0>:

TRAPHANDLER_NOEC(ALL_FAULTS0, T_DIVIDE)//     0		// divide error
f010c6a0:	6a 00                	push   $0x0
f010c6a2:	6a 00                	push   $0x0
f010c6a4:	e9 d1 00 00 00       	jmp    f010c77a <_alltraps>
f010c6a9:	90                   	nop

f010c6aa <ALL_FAULTS1>:
TRAPHANDLER_NOEC(ALL_FAULTS1, T_DEBUG   )//   1		// debug exception
f010c6aa:	6a 00                	push   $0x0
f010c6ac:	6a 01                	push   $0x1
f010c6ae:	e9 c7 00 00 00       	jmp    f010c77a <_alltraps>
f010c6b3:	90                   	nop

f010c6b4 <ALL_FAULTS2>:
TRAPHANDLER_NOEC(ALL_FAULTS2,  T_NMI       )// 2		// non-maskable interrupt
f010c6b4:	6a 00                	push   $0x0
f010c6b6:	6a 02                	push   $0x2
f010c6b8:	e9 bd 00 00 00       	jmp    f010c77a <_alltraps>
f010c6bd:	90                   	nop

f010c6be <ALL_FAULTS3>:
TRAPHANDLER_NOEC(ALL_FAULTS3,  T_BRKPT      )//3		// breakpoint
f010c6be:	6a 00                	push   $0x0
f010c6c0:	6a 03                	push   $0x3
f010c6c2:	e9 b3 00 00 00       	jmp    f010c77a <_alltraps>
f010c6c7:	90                   	nop

f010c6c8 <ALL_FAULTS4>:
TRAPHANDLER_NOEC(ALL_FAULTS4,  T_OFLOW      )//4		// overflow
f010c6c8:	6a 00                	push   $0x0
f010c6ca:	6a 04                	push   $0x4
f010c6cc:	e9 a9 00 00 00       	jmp    f010c77a <_alltraps>
f010c6d1:	90                   	nop

f010c6d2 <ALL_FAULTS5>:
TRAPHANDLER_NOEC(ALL_FAULTS5,  T_BOUND      )//5		// bounds check
f010c6d2:	6a 00                	push   $0x0
f010c6d4:	6a 05                	push   $0x5
f010c6d6:	e9 9f 00 00 00       	jmp    f010c77a <_alltraps>
f010c6db:	90                   	nop

f010c6dc <ALL_FAULTS6>:
TRAPHANDLER_NOEC(ALL_FAULTS6,  T_ILLOP      )//6		// illegal opcode
f010c6dc:	6a 00                	push   $0x0
f010c6de:	6a 06                	push   $0x6
f010c6e0:	e9 95 00 00 00       	jmp    f010c77a <_alltraps>
f010c6e5:	90                   	nop

f010c6e6 <ALL_FAULTS7>:
TRAPHANDLER_NOEC(ALL_FAULTS7,  T_DEVICE     )//7		// device not available
f010c6e6:	6a 00                	push   $0x0
f010c6e8:	6a 07                	push   $0x7
f010c6ea:	e9 8b 00 00 00       	jmp    f010c77a <_alltraps>
f010c6ef:	90                   	nop

f010c6f0 <ALL_FAULTS10>:
//TRAPHANDLER(ALL_FAULTS,  T_DBLFLT     8		// double fault
//TRAPHANDLER_NOEC(ALL_FAULTS,  9   )//9	// reserved (not generated by recent processors)
TRAPHANDLER(ALL_FAULTS10,  T_TSS       )//10		// invalid task switch segment
f010c6f0:	6a 0a                	push   $0xa
f010c6f2:	e9 83 00 00 00       	jmp    f010c77a <_alltraps>
f010c6f7:	90                   	nop

f010c6f8 <ALL_FAULTS11>:
TRAPHANDLER(ALL_FAULTS11,  T_SEGNP     )//11		// segment not present
f010c6f8:	6a 0b                	push   $0xb
f010c6fa:	eb 7e                	jmp    f010c77a <_alltraps>

f010c6fc <ALL_FAULTS12>:
TRAPHANDLER(ALL_FAULTS12,  T_STACK     )//12		// stack exception
f010c6fc:	6a 0c                	push   $0xc
f010c6fe:	eb 7a                	jmp    f010c77a <_alltraps>

f010c700 <ALL_FAULTS13>:
TRAPHANDLER(ALL_FAULTS13,  T_GPFLT     )//13		// General protection fault
f010c700:	6a 0d                	push   $0xd
f010c702:	eb 76                	jmp    f010c77a <_alltraps>

f010c704 <ALL_FAULTS16>:
//TRAPHANDLER(ALL_FAULTS,  T_PGFLT     14		// page fault
//TRAPHANDLER(ALL_FAULTS,  15    )	//15 	// reserved
TRAPHANDLER_NOEC(ALL_FAULTS16,  T_FPERR     )//16		// floating point error
f010c704:	6a 00                	push   $0x0
f010c706:	6a 10                	push   $0x10
f010c708:	eb 70                	jmp    f010c77a <_alltraps>

f010c70a <ALL_FAULTS17>:
TRAPHANDLER(ALL_FAULTS17,  T_ALIGN     )//17		// Alignment check
f010c70a:	6a 11                	push   $0x11
f010c70c:	eb 6c                	jmp    f010c77a <_alltraps>

f010c70e <ALL_FAULTS18>:
TRAPHANDLER_NOEC(ALL_FAULTS18,  T_MCHK      )//18		// machine check
f010c70e:	6a 00                	push   $0x0
f010c710:	6a 12                	push   $0x12
f010c712:	eb 66                	jmp    f010c77a <_alltraps>

f010c714 <ALL_FAULTS19>:
TRAPHANDLER_NOEC(ALL_FAULTS19,  19      )//19		// the last one
f010c714:	6a 00                	push   $0x0
f010c716:	6a 13                	push   $0x13
f010c718:	eb 60                	jmp    f010c77a <_alltraps>

f010c71a <ALL_FAULTS32>:

TRAPHANDLER_NOEC(ALL_FAULTS32,		IRQ0_Clock      )//32 the first IRQ
f010c71a:	6a 00                	push   $0x0
f010c71c:	6a 20                	push   $0x20
f010c71e:	eb 5a                	jmp    f010c77a <_alltraps>

f010c720 <ALL_FAULTS33>:
TRAPHANDLER_NOEC(ALL_FAULTS33,		33		)//33
f010c720:	6a 00                	push   $0x0
f010c722:	6a 21                	push   $0x21
f010c724:	eb 54                	jmp    f010c77a <_alltraps>

f010c726 <ALL_FAULTS34>:
TRAPHANDLER_NOEC(ALL_FAULTS34,      34		)//34
f010c726:	6a 00                	push   $0x0
f010c728:	6a 22                	push   $0x22
f010c72a:	eb 4e                	jmp    f010c77a <_alltraps>

f010c72c <ALL_FAULTS35>:
TRAPHANDLER_NOEC(ALL_FAULTS35,		35		)//35
f010c72c:	6a 00                	push   $0x0
f010c72e:	6a 23                	push   $0x23
f010c730:	eb 48                	jmp    f010c77a <_alltraps>

f010c732 <ALL_FAULTS36>:
TRAPHANDLER_NOEC(ALL_FAULTS36,      36      )//36
f010c732:	6a 00                	push   $0x0
f010c734:	6a 24                	push   $0x24
f010c736:	eb 42                	jmp    f010c77a <_alltraps>

f010c738 <ALL_FAULTS37>:
TRAPHANDLER_NOEC(ALL_FAULTS37,      37      )//37
f010c738:	6a 00                	push   $0x0
f010c73a:	6a 25                	push   $0x25
f010c73c:	eb 3c                	jmp    f010c77a <_alltraps>

f010c73e <ALL_FAULTS38>:
TRAPHANDLER_NOEC(ALL_FAULTS38,      38		)//38
f010c73e:	6a 00                	push   $0x0
f010c740:	6a 26                	push   $0x26
f010c742:	eb 36                	jmp    f010c77a <_alltraps>

f010c744 <ALL_FAULTS39>:
TRAPHANDLER_NOEC(ALL_FAULTS39,      39		)//39
f010c744:	6a 00                	push   $0x0
f010c746:	6a 27                	push   $0x27
f010c748:	eb 30                	jmp    f010c77a <_alltraps>

f010c74a <ALL_FAULTS40>:
TRAPHANDLER_NOEC(ALL_FAULTS40,      40		)//40
f010c74a:	6a 00                	push   $0x0
f010c74c:	6a 28                	push   $0x28
f010c74e:	eb 2a                	jmp    f010c77a <_alltraps>

f010c750 <ALL_FAULTS41>:
TRAPHANDLER_NOEC(ALL_FAULTS41,      41		)//41
f010c750:	6a 00                	push   $0x0
f010c752:	6a 29                	push   $0x29
f010c754:	eb 24                	jmp    f010c77a <_alltraps>

f010c756 <ALL_FAULTS42>:
TRAPHANDLER_NOEC(ALL_FAULTS42,      42		)//42
f010c756:	6a 00                	push   $0x0
f010c758:	6a 2a                	push   $0x2a
f010c75a:	eb 1e                	jmp    f010c77a <_alltraps>

f010c75c <ALL_FAULTS43>:
TRAPHANDLER_NOEC(ALL_FAULTS43,      43		)//43
f010c75c:	6a 00                	push   $0x0
f010c75e:	6a 2b                	push   $0x2b
f010c760:	eb 18                	jmp    f010c77a <_alltraps>

f010c762 <ALL_FAULTS44>:
TRAPHANDLER_NOEC(ALL_FAULTS44,      44		)//44
f010c762:	6a 00                	push   $0x0
f010c764:	6a 2c                	push   $0x2c
f010c766:	eb 12                	jmp    f010c77a <_alltraps>

f010c768 <ALL_FAULTS45>:
TRAPHANDLER_NOEC(ALL_FAULTS45,      45		)//45
f010c768:	6a 00                	push   $0x0
f010c76a:	6a 2d                	push   $0x2d
f010c76c:	eb 0c                	jmp    f010c77a <_alltraps>

f010c76e <ALL_FAULTS46>:
TRAPHANDLER_NOEC(ALL_FAULTS46,      46		)//46
f010c76e:	6a 00                	push   $0x0
f010c770:	6a 2e                	push   $0x2e
f010c772:	eb 06                	jmp    f010c77a <_alltraps>

f010c774 <ALL_FAULTS47>:
TRAPHANDLER_NOEC(ALL_FAULTS47,      47		)//47 the last IRQ
f010c774:	6a 00                	push   $0x0
f010c776:	6a 2f                	push   $0x2f
f010c778:	eb 00                	jmp    f010c77a <_alltraps>

f010c77a <_alltraps>:
/*
 * Lab 3: Your code here for _alltraps
 */
_alltraps:

push %ds
f010c77a:	1e                   	push   %ds
push %es
f010c77b:	06                   	push   %es
pushal
f010c77c:	60                   	pusha  

mov $(GD_KD), %ax
f010c77d:	66 b8 10 00          	mov    $0x10,%ax
mov %ax,%ds
f010c781:	8e d8                	mov    %eax,%ds
mov %ax,%es
f010c783:	8e c0                	mov    %eax,%es

push %esp
f010c785:	54                   	push   %esp

call trap
f010c786:	e8 d7 fb ff ff       	call   f010c362 <trap>

pop %ecx /* poping the pointer to the tf from the stack so that the stack top is at
f010c78b:	59                   	pop    %ecx
			# the beginning values of the registers pushed by pusha*/
popal
f010c78c:	61                   	popa   
pop %es
f010c78d:	07                   	pop    %es
pop %ds
f010c78e:	1f                   	pop    %ds

/*skipping the trap_no and the error code so that the stack top is at the old eip value*/
add $(8),%esp
f010c78f:	83 c4 08             	add    $0x8,%esp

iret
f010c792:	cf                   	iret   

f010c793 <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f010c793:	55                   	push   %ebp
f010c794:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f010c796:	8b 45 08             	mov    0x8(%ebp),%eax
f010c799:	8b 15 10 be 2b f0    	mov    0xf02bbe10,%edx
f010c79f:	29 d0                	sub    %edx,%eax
f010c7a1:	c1 f8 02             	sar    $0x2,%eax
f010c7a4:	89 c2                	mov    %eax,%edx
f010c7a6:	89 d0                	mov    %edx,%eax
f010c7a8:	c1 e0 03             	shl    $0x3,%eax
f010c7ab:	01 d0                	add    %edx,%eax
f010c7ad:	c1 e0 03             	shl    $0x3,%eax
f010c7b0:	01 d0                	add    %edx,%eax
f010c7b2:	c1 e0 03             	shl    $0x3,%eax
f010c7b5:	01 d0                	add    %edx,%eax
f010c7b7:	c1 e0 03             	shl    $0x3,%eax
f010c7ba:	01 d0                	add    %edx,%eax
f010c7bc:	89 c1                	mov    %eax,%ecx
f010c7be:	c1 e1 0f             	shl    $0xf,%ecx
f010c7c1:	01 c8                	add    %ecx,%eax
f010c7c3:	c1 e0 03             	shl    $0x3,%eax
f010c7c6:	01 d0                	add    %edx,%eax
f010c7c8:	f7 d8                	neg    %eax
}
f010c7ca:	5d                   	pop    %ebp
f010c7cb:	c3                   	ret    

f010c7cc <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f010c7cc:	55                   	push   %ebp
f010c7cd:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f010c7cf:	ff 75 08             	pushl  0x8(%ebp)
f010c7d2:	e8 bc ff ff ff       	call   f010c793 <to_frame_number>
f010c7d7:	83 c4 04             	add    $0x4,%esp
f010c7da:	c1 e0 0c             	shl    $0xc,%eax
}
f010c7dd:	c9                   	leave  
f010c7de:	c3                   	ret    

f010c7df <sys_cputs>:

// Print a string to the system console.
// The string is exactly 'len' characters long.
// Destroys the environment on memory errors.
static void sys_cputs(const char *s, uint32 len, uint8 printProgName)
{
f010c7df:	55                   	push   %ebp
f010c7e0:	89 e5                	mov    %esp,%ebp
f010c7e2:	83 ec 18             	sub    $0x18,%esp
f010c7e5:	8b 45 10             	mov    0x10(%ebp),%eax
f010c7e8:	88 45 f4             	mov    %al,-0xc(%ebp)
	// Destroy the environment if not.

	// LAB 3: Your code here.

	// Print the string supplied by the user.
	if (printProgName)
f010c7eb:	80 7d f4 00          	cmpb   $0x0,-0xc(%ebp)
f010c7ef:	74 23                	je     f010c814 <sys_cputs+0x35>
		cprintf("[%s %d] ",curenv->prog_name, curenv->env_id);
f010c7f1:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f010c7f6:	8b 40 4c             	mov    0x4c(%eax),%eax
f010c7f9:	8b 15 74 31 25 f0    	mov    0xf0253174,%edx
f010c7ff:	83 c2 5c             	add    $0x5c,%edx
f010c802:	83 ec 04             	sub    $0x4,%esp
f010c805:	50                   	push   %eax
f010c806:	52                   	push   %edx
f010c807:	68 90 36 13 f0       	push   $0xf0133690
f010c80c:	e8 20 46 ff ff       	call   f0100e31 <cprintf>
f010c811:	83 c4 10             	add    $0x10,%esp
	cprintf("%.*s",len, s);
f010c814:	83 ec 04             	sub    $0x4,%esp
f010c817:	ff 75 08             	pushl  0x8(%ebp)
f010c81a:	ff 75 0c             	pushl  0xc(%ebp)
f010c81d:	68 99 36 13 f0       	push   $0xf0133699
f010c822:	e8 0a 46 ff ff       	call   f0100e31 <cprintf>
f010c827:	83 c4 10             	add    $0x10,%esp
	//cprintf("%.*s", len, s);
}
f010c82a:	90                   	nop
f010c82b:	c9                   	leave  
f010c82c:	c3                   	ret    

f010c82d <sys_cputc>:


// Print a char to the system console.
static void sys_cputc(const char c)
{
f010c82d:	55                   	push   %ebp
f010c82e:	89 e5                	mov    %esp,%ebp
f010c830:	83 ec 18             	sub    $0x18,%esp
f010c833:	8b 45 08             	mov    0x8(%ebp),%eax
f010c836:	88 45 f4             	mov    %al,-0xc(%ebp)
	// Print the char supplied by the user.
	cprintf("%c",c);
f010c839:	0f be 45 f4          	movsbl -0xc(%ebp),%eax
f010c83d:	83 ec 08             	sub    $0x8,%esp
f010c840:	50                   	push   %eax
f010c841:	68 9e 36 13 f0       	push   $0xf013369e
f010c846:	e8 e6 45 ff ff       	call   f0100e31 <cprintf>
f010c84b:	83 c4 10             	add    $0x10,%esp
}
f010c84e:	90                   	nop
f010c84f:	c9                   	leave  
f010c850:	c3                   	ret    

f010c851 <sys_cgetc>:

// Read a character from the system console.
// Returns the character.
static int
sys_cgetc(void)
{
f010c851:	55                   	push   %ebp
f010c852:	89 e5                	mov    %esp,%ebp
f010c854:	83 ec 18             	sub    $0x18,%esp
	//while ((c = cons_getc()) == 0)
	//2013: instead of busywaiting inside kernel code , we moved the waiting to user code,
	// this allows any other running user programs to run beacause the clock interrupt works in user mode
	// (the kernel system call by default disables the interrupts, so any loops inside the kernel while
	// handling an interrupt will cause the clock interrupt to be disabled)
	c = cons_getc2();
f010c857:	e8 0b 44 ff ff       	call   f0100c67 <cons_getc2>
f010c85c:	89 45 f4             	mov    %eax,-0xc(%ebp)
	/* do nothing */;

	return c;
f010c85f:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010c862:	c9                   	leave  
f010c863:	c3                   	ret    

f010c864 <__sys_allocate_page>:
//	E_INVAL if va >= UTOP, or va is not page-aligned.
//	E_INVAL if perm is inappropriate (see above).
//	E_NO_MEM if there's no memory to allocate the new page,
//		or to allocate any necessary page tables.
static int __sys_allocate_page(void *va, int perm)
{
f010c864:	55                   	push   %ebp
f010c865:	89 e5                	mov    %esp,%ebp
f010c867:	83 ec 28             	sub    $0x28,%esp
	//   parameters for correctness.
	//   If page_insert() fails, remember to free the page you
	//   allocated!

	int r;
	struct Env *e = curenv;
f010c86a:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f010c86f:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//if ((r = envid2env(envid, &e, 1)) < 0)
	//return r;

	struct FrameInfo *ptr_frame_info ;
	r = allocate_frame(&ptr_frame_info) ;
f010c872:	83 ec 0c             	sub    $0xc,%esp
f010c875:	8d 45 e0             	lea    -0x20(%ebp),%eax
f010c878:	50                   	push   %eax
f010c879:	e8 a7 aa ff ff       	call   f0107325 <allocate_frame>
f010c87e:	83 c4 10             	add    $0x10,%esp
f010c881:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (r == E_NO_MEM)
f010c884:	83 7d f0 fc          	cmpl   $0xfffffffc,-0x10(%ebp)
f010c888:	75 08                	jne    f010c892 <__sys_allocate_page+0x2e>
		return r ;
f010c88a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c88d:	e9 d3 00 00 00       	jmp    f010c965 <__sys_allocate_page+0x101>

	//check virtual address to be paged_aligned and < USER_TOP
	if ((uint32)va >= USER_TOP || (uint32)va % PAGE_SIZE != 0)
f010c892:	8b 45 08             	mov    0x8(%ebp),%eax
f010c895:	3d ff ff bf ee       	cmp    $0xeebfffff,%eax
f010c89a:	77 0c                	ja     f010c8a8 <__sys_allocate_page+0x44>
f010c89c:	8b 45 08             	mov    0x8(%ebp),%eax
f010c89f:	25 ff 0f 00 00       	and    $0xfff,%eax
f010c8a4:	85 c0                	test   %eax,%eax
f010c8a6:	74 0a                	je     f010c8b2 <__sys_allocate_page+0x4e>
		return E_INVAL;
f010c8a8:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
f010c8ad:	e9 b3 00 00 00       	jmp    f010c965 <__sys_allocate_page+0x101>

	//check permissions to be appropriate
	if ((perm & (~PERM_AVAILABLE & ~PERM_WRITEABLE)) != (PERM_USER))
f010c8b2:	8b 45 0c             	mov    0xc(%ebp),%eax
f010c8b5:	25 fd f1 ff ff       	and    $0xfffff1fd,%eax
f010c8ba:	83 f8 04             	cmp    $0x4,%eax
f010c8bd:	74 0a                	je     f010c8c9 <__sys_allocate_page+0x65>
		return E_INVAL;
f010c8bf:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
f010c8c4:	e9 9c 00 00 00       	jmp    f010c965 <__sys_allocate_page+0x101>


	uint32 physical_address = to_physical_address(ptr_frame_info) ;
f010c8c9:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010c8cc:	83 ec 0c             	sub    $0xc,%esp
f010c8cf:	50                   	push   %eax
f010c8d0:	e8 f7 fe ff ff       	call   f010c7cc <to_physical_address>
f010c8d5:	83 c4 10             	add    $0x10,%esp
f010c8d8:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//return it to the original status
		ptr_frame_info->references -= 1;
	}
#else
	{
		memset(STATIC_KERNEL_VIRTUAL_ADDRESS(physical_address), 0, PAGE_SIZE);
f010c8db:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010c8de:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010c8e1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c8e4:	c1 e8 0c             	shr    $0xc,%eax
f010c8e7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010c8ea:	a1 d0 bd 2b f0       	mov    0xf02bbdd0,%eax
f010c8ef:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f010c8f2:	72 17                	jb     f010c90b <__sys_allocate_page+0xa7>
f010c8f4:	ff 75 e8             	pushl  -0x18(%ebp)
f010c8f7:	68 a4 36 13 f0       	push   $0xf01336a4
f010c8fc:	68 8d 00 00 00       	push   $0x8d
f010c901:	68 d3 36 13 f0       	push   $0xf01336d3
f010c906:	e8 a5 38 ff ff       	call   f01001b0 <_panic>
f010c90b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c90e:	2d 00 00 00 10       	sub    $0x10000000,%eax
f010c913:	83 ec 04             	sub    $0x4,%esp
f010c916:	68 00 10 00 00       	push   $0x1000
f010c91b:	6a 00                	push   $0x0
f010c91d:	50                   	push   %eax
f010c91e:	e8 08 27 02 00       	call   f012f02b <memset>
f010c923:	83 c4 10             	add    $0x10,%esp
	}
#endif
	r = map_frame(e->env_page_directory, ptr_frame_info, (uint32)va, perm) ;
f010c926:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010c929:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010c92c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c92f:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010c935:	ff 75 0c             	pushl  0xc(%ebp)
f010c938:	51                   	push   %ecx
f010c939:	52                   	push   %edx
f010c93a:	50                   	push   %eax
f010c93b:	e8 80 ad ff ff       	call   f01076c0 <map_frame>
f010c940:	83 c4 10             	add    $0x10,%esp
f010c943:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (r == E_NO_MEM)
f010c946:	83 7d f0 fc          	cmpl   $0xfffffffc,-0x10(%ebp)
f010c94a:	75 14                	jne    f010c960 <__sys_allocate_page+0xfc>
	{
		decrement_references(ptr_frame_info);
f010c94c:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010c94f:	83 ec 0c             	sub    $0xc,%esp
f010c952:	50                   	push   %eax
f010c953:	e8 5f ab ff ff       	call   f01074b7 <decrement_references>
f010c958:	83 c4 10             	add    $0x10,%esp
		return r;
f010c95b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c95e:	eb 05                	jmp    f010c965 <__sys_allocate_page+0x101>
	}
	return 0 ;
f010c960:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010c965:	c9                   	leave  
f010c966:	c3                   	ret    

f010c967 <__sys_map_frame>:
//	-E_INVAL if (perm & PTE_W), but srcva is read-only in srcenvid's
//		address space.
//	-E_NO_MEM if there's no memory to allocate the new page,
//		or to allocate any necessary page tables.
static int __sys_map_frame(int32 srcenvid, void *srcva, int32 dstenvid, void *dstva, int perm)
{
f010c967:	55                   	push   %ebp
f010c968:	89 e5                	mov    %esp,%ebp
f010c96a:	83 ec 08             	sub    $0x8,%esp
	//   parameters for correctness.
	//   Use the third argument to page_lookup() to
	//   check the current permissions on the page.

	// LAB 4: Your code here.
	panic("sys_map_frame not implemented");
f010c96d:	83 ec 04             	sub    $0x4,%esp
f010c970:	68 e7 36 13 f0       	push   $0xf01336e7
f010c975:	68 b4 00 00 00       	push   $0xb4
f010c97a:	68 d3 36 13 f0       	push   $0xf01336d3
f010c97f:	e8 2c 38 ff ff       	call   f01001b0 <_panic>

f010c984 <__sys_unmap_frame>:
// Return 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
//	-E_INVAL if va >= UTOP, or va is not page-aligned.
static int __sys_unmap_frame(int32 envid, void *va)
{
f010c984:	55                   	push   %ebp
f010c985:	89 e5                	mov    %esp,%ebp
f010c987:	83 ec 08             	sub    $0x8,%esp
	// Hint: This function is a wrapper around page_remove().

	// LAB 4: Your code here.
	panic("sys_page_unmap not implemented");
f010c98a:	83 ec 04             	sub    $0x4,%esp
f010c98d:	68 08 37 13 f0       	push   $0xf0133708
f010c992:	68 c5 00 00 00       	push   $0xc5
f010c997:	68 d3 36 13 f0       	push   $0xf01336d3
f010c99c:	e8 0f 38 ff ff       	call   f01001b0 <_panic>

f010c9a1 <sys_calculate_required_frames>:
	return 0;
}

uint32 sys_calculate_required_frames(uint32 start_virtual_address, uint32 size)
{
f010c9a1:	55                   	push   %ebp
f010c9a2:	89 e5                	mov    %esp,%ebp
f010c9a4:	83 ec 08             	sub    $0x8,%esp
	return calculate_required_frames(curenv->env_page_directory, start_virtual_address, size);
f010c9a7:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f010c9ac:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010c9b2:	83 ec 04             	sub    $0x4,%esp
f010c9b5:	ff 75 0c             	pushl  0xc(%ebp)
f010c9b8:	ff 75 08             	pushl  0x8(%ebp)
f010c9bb:	50                   	push   %eax
f010c9bc:	e8 4e c2 ff ff       	call   f0108c0f <calculate_required_frames>
f010c9c1:	83 c4 10             	add    $0x10,%esp
}
f010c9c4:	c9                   	leave  
f010c9c5:	c3                   	ret    

f010c9c6 <sys_calculate_free_frames>:

uint32 sys_calculate_free_frames()
{
f010c9c6:	55                   	push   %ebp
f010c9c7:	89 e5                	mov    %esp,%ebp
f010c9c9:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010c9cc:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010c9cf:	83 ec 0c             	sub    $0xc,%esp
f010c9d2:	50                   	push   %eax
f010c9d3:	e8 58 af ff ff       	call   f0107930 <calculate_available_frames>
f010c9d8:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("Free Frames = %d : Buffered = %d, Not Buffered = %d\n", counters.freeBuffered + counters.freeNotBuffered, counters.freeBuffered ,counters.freeNotBuffered);
	return counters.freeBuffered + counters.freeNotBuffered;
f010c9db:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010c9de:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c9e1:	01 d0                	add    %edx,%eax
}
f010c9e3:	c9                   	leave  
f010c9e4:	c3                   	ret    

f010c9e5 <sys_calculate_modified_frames>:
uint32 sys_calculate_modified_frames()
{
f010c9e5:	55                   	push   %ebp
f010c9e6:	89 e5                	mov    %esp,%ebp
f010c9e8:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010c9eb:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010c9ee:	83 ec 0c             	sub    $0xc,%esp
f010c9f1:	50                   	push   %eax
f010c9f2:	e8 39 af ff ff       	call   f0107930 <calculate_available_frames>
f010c9f7:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("================ Modified Frames = %d\n", counters.modified) ;
	return counters.modified;
f010c9fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010c9fd:	c9                   	leave  
f010c9fe:	c3                   	ret    

f010c9ff <sys_calculate_notmod_frames>:

uint32 sys_calculate_notmod_frames()
{
f010c9ff:	55                   	push   %ebp
f010ca00:	89 e5                	mov    %esp,%ebp
f010ca02:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010ca05:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010ca08:	83 ec 0c             	sub    $0xc,%esp
f010ca0b:	50                   	push   %eax
f010ca0c:	e8 1f af ff ff       	call   f0107930 <calculate_available_frames>
f010ca11:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("================ Not Modified Frames = %d\n", counters.freeBuffered) ;
	return counters.freeBuffered;
f010ca14:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
f010ca17:	c9                   	leave  
f010ca18:	c3                   	ret    

f010ca19 <sys_calculate_pages_tobe_removed_ready_exit>:

int sys_calculate_pages_tobe_removed_ready_exit(uint32 WS_or_MEMORY_flag)
{
f010ca19:	55                   	push   %ebp
f010ca1a:	89 e5                	mov    %esp,%ebp
f010ca1c:	83 ec 08             	sub    $0x8,%esp
	return calc_no_pages_tobe_removed_from_ready_exit_queues(WS_or_MEMORY_flag);
f010ca1f:	83 ec 0c             	sub    $0xc,%esp
f010ca22:	ff 75 08             	pushl  0x8(%ebp)
f010ca25:	e8 37 13 02 00       	call   f012dd61 <calc_no_pages_tobe_removed_from_ready_exit_queues>
f010ca2a:	83 c4 10             	add    $0x10,%esp
}
f010ca2d:	c9                   	leave  
f010ca2e:	c3                   	ret    

f010ca2f <sys_scarce_memory>:

void sys_scarce_memory(void)
{
f010ca2f:	55                   	push   %ebp
f010ca30:	89 e5                	mov    %esp,%ebp
f010ca32:	83 ec 08             	sub    $0x8,%esp
	scarce_memory();
f010ca35:	e8 7f 12 02 00       	call   f012dcb9 <scarce_memory>
}
f010ca3a:	90                   	nop
f010ca3b:	c9                   	leave  
f010ca3c:	c3                   	ret    

f010ca3d <sys_clearFFL>:

void sys_clearFFL()
{
f010ca3d:	55                   	push   %ebp
f010ca3e:	89 e5                	mov    %esp,%ebp
f010ca40:	83 ec 18             	sub    $0x18,%esp
	int size = LIST_SIZE(&free_frame_list) ;
f010ca43:	a1 e4 bd 2b f0       	mov    0xf02bbde4,%eax
f010ca48:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int i = 0 ;
f010ca4b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	struct FrameInfo* ptr_tmp_FI ;
	for (; i < size ; i++)
f010ca52:	eb 12                	jmp    f010ca66 <sys_clearFFL+0x29>
	{
		allocate_frame(&ptr_tmp_FI) ;
f010ca54:	83 ec 0c             	sub    $0xc,%esp
f010ca57:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010ca5a:	50                   	push   %eax
f010ca5b:	e8 c5 a8 ff ff       	call   f0107325 <allocate_frame>
f010ca60:	83 c4 10             	add    $0x10,%esp
void sys_clearFFL()
{
	int size = LIST_SIZE(&free_frame_list) ;
	int i = 0 ;
	struct FrameInfo* ptr_tmp_FI ;
	for (; i < size ; i++)
f010ca63:	ff 45 f4             	incl   -0xc(%ebp)
f010ca66:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ca69:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010ca6c:	7c e6                	jl     f010ca54 <sys_clearFFL+0x17>
	{
		allocate_frame(&ptr_tmp_FI) ;
	}
}
f010ca6e:	90                   	nop
f010ca6f:	c9                   	leave  
f010ca70:	c3                   	ret    

f010ca71 <sys_pf_calculate_allocated_pages>:

/*******************************/
/* PAGE FILE SYSTEM CALLS */
/*******************************/
int sys_pf_calculate_allocated_pages(void)
{
f010ca71:	55                   	push   %ebp
f010ca72:	89 e5                	mov    %esp,%ebp
f010ca74:	83 ec 08             	sub    $0x8,%esp
	return pf_calculate_allocated_pages(curenv);
f010ca77:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f010ca7c:	83 ec 0c             	sub    $0xc,%esp
f010ca7f:	50                   	push   %eax
f010ca80:	e8 28 7b ff ff       	call   f01045ad <pf_calculate_allocated_pages>
f010ca85:	83 c4 10             	add    $0x10,%esp
}
f010ca88:	c9                   	leave  
f010ca89:	c3                   	ret    

f010ca8a <sys_free_user_mem>:

/*******************************/
/* USER HEAP SYSTEM CALLS */
/*******************************/
void sys_free_user_mem(uint32 virtual_address, uint32 size)
{
f010ca8a:	55                   	push   %ebp
f010ca8b:	89 e5                	mov    %esp,%ebp
f010ca8d:	83 ec 08             	sub    $0x8,%esp
	if(isBufferingEnabled())
f010ca90:	e8 ad 0d 00 00       	call   f010d842 <isBufferingEnabled>
f010ca95:	84 c0                	test   %al,%al
f010ca97:	74 19                	je     f010cab2 <sys_free_user_mem+0x28>
	{
		__free_user_mem_with_buffering(curenv, virtual_address, size);
f010ca99:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f010ca9e:	83 ec 04             	sub    $0x4,%esp
f010caa1:	ff 75 0c             	pushl  0xc(%ebp)
f010caa4:	ff 75 08             	pushl  0x8(%ebp)
f010caa7:	50                   	push   %eax
f010caa8:	e8 98 c1 ff ff       	call   f0108c45 <__free_user_mem_with_buffering>
f010caad:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		free_user_mem(curenv, virtual_address, size);
	}
	return;
f010cab0:	eb 18                	jmp    f010caca <sys_free_user_mem+0x40>
	{
		__free_user_mem_with_buffering(curenv, virtual_address, size);
	}
	else
	{
		free_user_mem(curenv, virtual_address, size);
f010cab2:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f010cab7:	83 ec 04             	sub    $0x4,%esp
f010caba:	ff 75 0c             	pushl  0xc(%ebp)
f010cabd:	ff 75 08             	pushl  0x8(%ebp)
f010cac0:	50                   	push   %eax
f010cac1:	e8 71 c1 ff ff       	call   f0108c37 <free_user_mem>
f010cac6:	83 c4 10             	add    $0x10,%esp
	}
	return;
f010cac9:	90                   	nop
}
f010caca:	c9                   	leave  
f010cacb:	c3                   	ret    

f010cacc <sys_allocate_user_mem>:

void sys_allocate_user_mem(uint32 virtual_address, uint32 size)
{
f010cacc:	55                   	push   %ebp
f010cacd:	89 e5                	mov    %esp,%ebp
f010cacf:	83 ec 08             	sub    $0x8,%esp
	allocate_user_mem(curenv, virtual_address, size);
f010cad2:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f010cad7:	83 ec 04             	sub    $0x4,%esp
f010cada:	ff 75 0c             	pushl  0xc(%ebp)
f010cadd:	ff 75 08             	pushl  0x8(%ebp)
f010cae0:	50                   	push   %eax
f010cae1:	e8 43 c1 ff ff       	call   f0108c29 <allocate_user_mem>
f010cae6:	83 c4 10             	add    $0x10,%esp
	return;
f010cae9:	90                   	nop
}
f010caea:	c9                   	leave  
f010caeb:	c3                   	ret    

f010caec <sys_allocate_chunk>:

void sys_allocate_chunk(uint32 virtual_address, uint32 size, uint32 perms)
{
f010caec:	55                   	push   %ebp
f010caed:	89 e5                	mov    %esp,%ebp
f010caef:	83 ec 08             	sub    $0x8,%esp
	allocate_chunk(curenv->env_page_directory, virtual_address, size, perms);
f010caf2:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f010caf7:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010cafd:	ff 75 10             	pushl  0x10(%ebp)
f010cb00:	ff 75 0c             	pushl  0xc(%ebp)
f010cb03:	ff 75 08             	pushl  0x8(%ebp)
f010cb06:	50                   	push   %eax
f010cb07:	e8 cf c0 ff ff       	call   f0108bdb <allocate_chunk>
f010cb0c:	83 c4 10             	add    $0x10,%esp
	return;
f010cb0f:	90                   	nop
}
f010cb10:	c9                   	leave  
f010cb11:	c3                   	ret    

f010cb12 <sys_move_user_mem>:

//2014
void sys_move_user_mem(uint32 src_virtual_address, uint32 dst_virtual_address, uint32 size)
{
f010cb12:	55                   	push   %ebp
f010cb13:	89 e5                	mov    %esp,%ebp
f010cb15:	83 ec 08             	sub    $0x8,%esp
	move_user_mem(curenv, src_virtual_address, dst_virtual_address, size);
f010cb18:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f010cb1d:	ff 75 10             	pushl  0x10(%ebp)
f010cb20:	ff 75 0c             	pushl  0xc(%ebp)
f010cb23:	ff 75 08             	pushl  0x8(%ebp)
f010cb26:	50                   	push   %eax
f010cb27:	e8 36 c1 ff ff       	call   f0108c62 <move_user_mem>
f010cb2c:	83 c4 10             	add    $0x10,%esp
	return;
f010cb2f:	90                   	nop
}
f010cb30:	c9                   	leave  
f010cb31:	c3                   	ret    

f010cb32 <sys_get_heap_strategy>:

//2015
uint32 sys_get_heap_strategy()
{
f010cb32:	55                   	push   %ebp
f010cb33:	89 e5                	mov    %esp,%ebp
	return _UHeapPlacementStrategy ;
f010cb35:	a1 ec bd 2b f0       	mov    0xf02bbdec,%eax
}
f010cb3a:	5d                   	pop    %ebp
f010cb3b:	c3                   	ret    

f010cb3c <sys_set_uheap_strategy>:
void sys_set_uheap_strategy(uint32 heapStrategy)
{
f010cb3c:	55                   	push   %ebp
f010cb3d:	89 e5                	mov    %esp,%ebp
	_UHeapPlacementStrategy = heapStrategy;
f010cb3f:	8b 45 08             	mov    0x8(%ebp),%eax
f010cb42:	a3 ec bd 2b f0       	mov    %eax,0xf02bbdec
}
f010cb47:	90                   	nop
f010cb48:	5d                   	pop    %ebp
f010cb49:	c3                   	ret    

f010cb4a <sys_disable_interrupt>:
/*******************************/
/* INTERRUPTS SYSTEM CALLS */
/*******************************/
//NEW!! 2012...
void sys_disable_interrupt()
{
f010cb4a:	55                   	push   %ebp
f010cb4b:	89 e5                	mov    %esp,%ebp
	curenv->env_tf.tf_eflags &= ~FL_IF ;
f010cb4d:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f010cb52:	8b 15 74 31 25 f0    	mov    0xf0253174,%edx
f010cb58:	8b 52 38             	mov    0x38(%edx),%edx
f010cb5b:	80 e6 fd             	and    $0xfd,%dh
f010cb5e:	89 50 38             	mov    %edx,0x38(%eax)
}
f010cb61:	90                   	nop
f010cb62:	5d                   	pop    %ebp
f010cb63:	c3                   	ret    

f010cb64 <sys_enable_interrupt>:
void sys_enable_interrupt()
{
f010cb64:	55                   	push   %ebp
f010cb65:	89 e5                	mov    %esp,%ebp
	curenv->env_tf.tf_eflags |= FL_IF ;
f010cb67:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f010cb6c:	8b 15 74 31 25 f0    	mov    0xf0253174,%edx
f010cb72:	8b 52 38             	mov    0x38(%edx),%edx
f010cb75:	80 ce 02             	or     $0x2,%dh
f010cb78:	89 50 38             	mov    %edx,0x38(%eax)
}
f010cb7b:	90                   	nop
f010cb7c:	5d                   	pop    %ebp
f010cb7d:	c3                   	ret    

f010cb7e <sys_createSemaphore>:

/*******************************/
/* SEMAPHORES SYSTEM CALLS */
/*******************************/
int sys_createSemaphore(char* semaphoreName, uint32 initialValue)
{
f010cb7e:	55                   	push   %ebp
f010cb7f:	89 e5                	mov    %esp,%ebp
f010cb81:	83 ec 08             	sub    $0x8,%esp
	return createSemaphore(curenv->env_id, semaphoreName, initialValue);
f010cb84:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f010cb89:	8b 40 4c             	mov    0x4c(%eax),%eax
f010cb8c:	83 ec 04             	sub    $0x4,%esp
f010cb8f:	ff 75 0c             	pushl  0xc(%ebp)
f010cb92:	ff 75 08             	pushl  0x8(%ebp)
f010cb95:	50                   	push   %eax
f010cb96:	e8 3f 10 00 00       	call   f010dbda <createSemaphore>
f010cb9b:	83 c4 10             	add    $0x10,%esp
}
f010cb9e:	c9                   	leave  
f010cb9f:	c3                   	ret    

f010cba0 <sys_waitSemaphore>:

void sys_waitSemaphore(int32 ownerEnvID, char* semaphoreName)
{
f010cba0:	55                   	push   %ebp
f010cba1:	89 e5                	mov    %esp,%ebp
f010cba3:	83 ec 08             	sub    $0x8,%esp
	waitSemaphore(ownerEnvID, semaphoreName);
f010cba6:	83 ec 08             	sub    $0x8,%esp
f010cba9:	ff 75 0c             	pushl  0xc(%ebp)
f010cbac:	ff 75 08             	pushl  0x8(%ebp)
f010cbaf:	e8 43 10 00 00       	call   f010dbf7 <waitSemaphore>
f010cbb4:	83 c4 10             	add    $0x10,%esp
}
f010cbb7:	90                   	nop
f010cbb8:	c9                   	leave  
f010cbb9:	c3                   	ret    

f010cbba <sys_signalSemaphore>:

void sys_signalSemaphore(int32 ownerEnvID, char* semaphoreName)
{
f010cbba:	55                   	push   %ebp
f010cbbb:	89 e5                	mov    %esp,%ebp
f010cbbd:	83 ec 08             	sub    $0x8,%esp
	signalSemaphore(ownerEnvID, semaphoreName);
f010cbc0:	83 ec 08             	sub    $0x8,%esp
f010cbc3:	ff 75 0c             	pushl  0xc(%ebp)
f010cbc6:	ff 75 08             	pushl  0x8(%ebp)
f010cbc9:	e8 46 10 00 00       	call   f010dc14 <signalSemaphore>
f010cbce:	83 c4 10             	add    $0x10,%esp
}
f010cbd1:	90                   	nop
f010cbd2:	c9                   	leave  
f010cbd3:	c3                   	ret    

f010cbd4 <sys_getSemaphoreValue>:

int sys_getSemaphoreValue(int32 ownerEnvID, char* semaphoreName)
{
f010cbd4:	55                   	push   %ebp
f010cbd5:	89 e5                	mov    %esp,%ebp
f010cbd7:	83 ec 18             	sub    $0x18,%esp
	int semID = get_semaphore_object_ID(ownerEnvID, semaphoreName);
f010cbda:	83 ec 08             	sub    $0x8,%esp
f010cbdd:	ff 75 0c             	pushl  0xc(%ebp)
f010cbe0:	ff 75 08             	pushl  0x8(%ebp)
f010cbe3:	e8 98 0e 00 00       	call   f010da80 <get_semaphore_object_ID>
f010cbe8:	83 c4 10             	add    $0x10,%esp
f010cbeb:	89 45 f4             	mov    %eax,-0xc(%ebp)
	assert(semID >= 0 && semID < MAX_SEMAPHORES) ;
f010cbee:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010cbf2:	78 06                	js     f010cbfa <sys_getSemaphoreValue+0x26>
f010cbf4:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
f010cbf8:	7e 19                	jle    f010cc13 <sys_getSemaphoreValue+0x3f>
f010cbfa:	68 28 37 13 f0       	push   $0xf0133728
f010cbff:	68 4d 37 13 f0       	push   $0xf013374d
f010cc04:	68 4d 01 00 00       	push   $0x14d
f010cc09:	68 d3 36 13 f0       	push   $0xf01336d3
f010cc0e:	e8 9d 35 ff ff       	call   f01001b0 <_panic>

	return semaphores[semID].value ;
f010cc13:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010cc16:	89 d0                	mov    %edx,%eax
f010cc18:	c1 e0 02             	shl    $0x2,%eax
f010cc1b:	01 d0                	add    %edx,%eax
f010cc1d:	01 c0                	add    %eax,%eax
f010cc1f:	01 d0                	add    %edx,%eax
f010cc21:	01 c0                	add    %eax,%eax
f010cc23:	01 d0                	add    %edx,%eax
f010cc25:	c1 e0 02             	shl    $0x2,%eax
f010cc28:	05 34 9a 2b f0       	add    $0xf02b9a34,%eax
f010cc2d:	8b 00                	mov    (%eax),%eax
}
f010cc2f:	c9                   	leave  
f010cc30:	c3                   	ret    

f010cc31 <sys_createSharedObject>:

/*******************************/
/* SHARED MEMORY SYSTEM CALLS */
/*******************************/
int sys_createSharedObject(char* shareName, uint32 size, uint8 isWritable, void* virtual_address)
{
f010cc31:	55                   	push   %ebp
f010cc32:	89 e5                	mov    %esp,%ebp
f010cc34:	83 ec 18             	sub    $0x18,%esp
f010cc37:	8b 45 10             	mov    0x10(%ebp),%eax
f010cc3a:	88 45 f4             	mov    %al,-0xc(%ebp)
	return createSharedObject(curenv->env_id, shareName, size, isWritable, virtual_address);
f010cc3d:	0f b6 55 f4          	movzbl -0xc(%ebp),%edx
f010cc41:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f010cc46:	8b 40 4c             	mov    0x4c(%eax),%eax
f010cc49:	83 ec 0c             	sub    $0xc,%esp
f010cc4c:	ff 75 14             	pushl  0x14(%ebp)
f010cc4f:	52                   	push   %edx
f010cc50:	ff 75 0c             	pushl  0xc(%ebp)
f010cc53:	ff 75 08             	pushl  0x8(%ebp)
f010cc56:	50                   	push   %eax
f010cc57:	e8 65 b2 ff ff       	call   f0107ec1 <createSharedObject>
f010cc5c:	83 c4 20             	add    $0x20,%esp
}
f010cc5f:	c9                   	leave  
f010cc60:	c3                   	ret    

f010cc61 <sys_getSizeOfSharedObject>:

int sys_getSizeOfSharedObject(int32 ownerID, char* shareName)
{
f010cc61:	55                   	push   %ebp
f010cc62:	89 e5                	mov    %esp,%ebp
f010cc64:	83 ec 08             	sub    $0x8,%esp
	return getSizeOfSharedObject(ownerID, shareName);
f010cc67:	83 ec 08             	sub    $0x8,%esp
f010cc6a:	ff 75 0c             	pushl  0xc(%ebp)
f010cc6d:	ff 75 08             	pushl  0x8(%ebp)
f010cc70:	e8 6f b2 ff ff       	call   f0107ee4 <getSizeOfSharedObject>
f010cc75:	83 c4 10             	add    $0x10,%esp
}
f010cc78:	c9                   	leave  
f010cc79:	c3                   	ret    

f010cc7a <sys_getSharedObject>:

int sys_getSharedObject(int32 ownerID, char* shareName, void* virtual_address)
{
f010cc7a:	55                   	push   %ebp
f010cc7b:	89 e5                	mov    %esp,%ebp
f010cc7d:	83 ec 08             	sub    $0x8,%esp
	return getSharedObject(ownerID, shareName, virtual_address);
f010cc80:	83 ec 04             	sub    $0x4,%esp
f010cc83:	ff 75 10             	pushl  0x10(%ebp)
f010cc86:	ff 75 0c             	pushl  0xc(%ebp)
f010cc89:	ff 75 08             	pushl  0x8(%ebp)
f010cc8c:	e8 70 b2 ff ff       	call   f0107f01 <getSharedObject>
f010cc91:	83 c4 10             	add    $0x10,%esp
}
f010cc94:	c9                   	leave  
f010cc95:	c3                   	ret    

f010cc96 <sys_freeSharedObject>:

int sys_freeSharedObject(int32 sharedObjectID, void *startVA)
{
f010cc96:	55                   	push   %ebp
f010cc97:	89 e5                	mov    %esp,%ebp
f010cc99:	83 ec 08             	sub    $0x8,%esp
	return freeSharedObject(sharedObjectID, startVA);
f010cc9c:	83 ec 08             	sub    $0x8,%esp
f010cc9f:	ff 75 0c             	pushl  0xc(%ebp)
f010cca2:	ff 75 08             	pushl  0x8(%ebp)
f010cca5:	e8 74 b2 ff ff       	call   f0107f1e <freeSharedObject>
f010ccaa:	83 c4 10             	add    $0x10,%esp
}
f010ccad:	c9                   	leave  
f010ccae:	c3                   	ret    

f010ccaf <sys_getMaxShares>:

uint32 sys_getMaxShares()
{
f010ccaf:	55                   	push   %ebp
f010ccb0:	89 e5                	mov    %esp,%ebp
	return MAX_SHARES;
f010ccb2:	b8 64 00 00 00       	mov    $0x64,%eax
}
f010ccb7:	5d                   	pop    %ebp
f010ccb8:	c3                   	ret    

f010ccb9 <sys_getenvid>:
/* USER ENVIRONMENT SYSTEM CALLS */
/*********************************/
// Returns the current environment's envid.
//2017
static int32 sys_getenvid(void)
{
f010ccb9:	55                   	push   %ebp
f010ccba:	89 e5                	mov    %esp,%ebp
	return curenv->env_id;
f010ccbc:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f010ccc1:	8b 40 4c             	mov    0x4c(%eax),%eax
}
f010ccc4:	5d                   	pop    %ebp
f010ccc5:	c3                   	ret    

f010ccc6 <sys_getenvindex>:

//2017
static int32 sys_getenvindex(void)
{
f010ccc6:	55                   	push   %ebp
f010ccc7:	89 e5                	mov    %esp,%ebp
	//return curenv->env_id;
	return (curenv - envs) ;
f010ccc9:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f010ccce:	89 c2                	mov    %eax,%edx
f010ccd0:	a1 70 31 25 f0       	mov    0xf0253170,%eax
f010ccd5:	29 c2                	sub    %eax,%edx
f010ccd7:	89 d0                	mov    %edx,%eax
f010ccd9:	c1 f8 05             	sar    $0x5,%eax
f010ccdc:	89 c2                	mov    %eax,%edx
f010ccde:	89 d0                	mov    %edx,%eax
f010cce0:	c1 e0 03             	shl    $0x3,%eax
f010cce3:	01 d0                	add    %edx,%eax
f010cce5:	01 c0                	add    %eax,%eax
f010cce7:	01 d0                	add    %edx,%eax
f010cce9:	c1 e0 06             	shl    $0x6,%eax
f010ccec:	01 d0                	add    %edx,%eax
f010ccee:	89 c1                	mov    %eax,%ecx
f010ccf0:	c1 e1 04             	shl    $0x4,%ecx
f010ccf3:	01 c8                	add    %ecx,%eax
f010ccf5:	c1 e0 03             	shl    $0x3,%eax
f010ccf8:	01 d0                	add    %edx,%eax
f010ccfa:	01 c0                	add    %eax,%eax
f010ccfc:	01 d0                	add    %edx,%eax
f010ccfe:	89 c1                	mov    %eax,%ecx
f010cd00:	c1 e1 04             	shl    $0x4,%ecx
f010cd03:	01 c8                	add    %ecx,%eax
f010cd05:	c1 e0 03             	shl    $0x3,%eax
f010cd08:	01 d0                	add    %edx,%eax
f010cd0a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010cd11:	01 d0                	add    %edx,%eax
}
f010cd13:	5d                   	pop    %ebp
f010cd14:	c3                   	ret    

f010cd15 <sys_getparentenvid>:

//2017
static int32 sys_getparentenvid(void)
{
f010cd15:	55                   	push   %ebp
f010cd16:	89 e5                	mov    %esp,%ebp
	return curenv->env_parent_id;
f010cd18:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f010cd1d:	8b 40 50             	mov    0x50(%eax),%eax
}
f010cd20:	5d                   	pop    %ebp
f010cd21:	c3                   	ret    

f010cd22 <sys_destroy_env>:
//
// Returns 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
static int sys_destroy_env(int32 envid)
{
f010cd22:	55                   	push   %ebp
f010cd23:	89 e5                	mov    %esp,%ebp
f010cd25:	83 ec 18             	sub    $0x18,%esp
	int r;
	struct Env *e;
	if (envid == 0)
f010cd28:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010cd2c:	75 0a                	jne    f010cd38 <sys_destroy_env+0x16>
	{
		e = curenv ;
f010cd2e:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f010cd33:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010cd36:	eb 22                	jmp    f010cd5a <sys_destroy_env+0x38>
	}
	else if ((r = envid2env(envid, &e, 0)) < 0)
f010cd38:	83 ec 04             	sub    $0x4,%esp
f010cd3b:	6a 00                	push   $0x0
f010cd3d:	8d 45 f0             	lea    -0x10(%ebp),%eax
f010cd40:	50                   	push   %eax
f010cd41:	ff 75 08             	pushl  0x8(%ebp)
f010cd44:	e8 85 cc ff ff       	call   f01099ce <envid2env>
f010cd49:	83 c4 10             	add    $0x10,%esp
f010cd4c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010cd4f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010cd53:	79 05                	jns    f010cd5a <sys_destroy_env+0x38>
	{
		return r;
f010cd55:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010cd58:	eb 5e                	jmp    f010cdb8 <sys_destroy_env+0x96>
	}

	if (e == curenv)
f010cd5a:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010cd5d:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f010cd62:	39 c2                	cmp    %eax,%edx
f010cd64:	75 1b                	jne    f010cd81 <sys_destroy_env+0x5f>
	{
		cprintf("[%08x] exiting gracefully\n", curenv->env_id);
f010cd66:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f010cd6b:	8b 40 4c             	mov    0x4c(%eax),%eax
f010cd6e:	83 ec 08             	sub    $0x8,%esp
f010cd71:	50                   	push   %eax
f010cd72:	68 62 37 13 f0       	push   $0xf0133762
f010cd77:	e8 b5 40 ff ff       	call   f0100e31 <cprintf>
f010cd7c:	83 c4 10             	add    $0x10,%esp
f010cd7f:	eb 20                	jmp    f010cda1 <sys_destroy_env+0x7f>
	}
	else
	{
		cprintf("[%08x] destroying %08x\n", curenv->env_id, e->env_id);
f010cd81:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010cd84:	8b 50 4c             	mov    0x4c(%eax),%edx
f010cd87:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f010cd8c:	8b 40 4c             	mov    0x4c(%eax),%eax
f010cd8f:	83 ec 04             	sub    $0x4,%esp
f010cd92:	52                   	push   %edx
f010cd93:	50                   	push   %eax
f010cd94:	68 7d 37 13 f0       	push   $0xf013377d
f010cd99:	e8 93 40 ff ff       	call   f0100e31 <cprintf>
f010cd9e:	83 c4 10             	add    $0x10,%esp
	}
	//2015
	sched_kill_env(e->env_id);
f010cda1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010cda4:	8b 40 4c             	mov    0x4c(%eax),%eax
f010cda7:	83 ec 0c             	sub    $0xc,%esp
f010cdaa:	50                   	push   %eax
f010cdab:	e8 61 88 ff ff       	call   f0105611 <sched_kill_env>
f010cdb0:	83 c4 10             	add    $0x10,%esp

	return 0;
f010cdb3:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010cdb8:	c9                   	leave  
f010cdb9:	c3                   	ret    

f010cdba <sys_exit_env>:

//Just place the current env into the EXIT queue & schedule the next one
static void sys_exit_env()
{
f010cdba:	55                   	push   %ebp
f010cdbb:	89 e5                	mov    %esp,%ebp
f010cdbd:	83 ec 08             	sub    $0x8,%esp
	//2015
	env_exit();
f010cdc0:	e8 ea cb ff ff       	call   f01099af <env_exit>
	//env_run_cmd_prmpt();
}
f010cdc5:	90                   	nop
f010cdc6:	c9                   	leave  
f010cdc7:	c3                   	ret    

f010cdc8 <sys_create_env>:

//New update in 2020
//Create a new env & add it to the NEW queue
int sys_create_env(char* programName, unsigned int page_WS_size,unsigned int LRU_second_list_size, unsigned int percent_WS_pages_to_remove)
{
f010cdc8:	55                   	push   %ebp
f010cdc9:	89 e5                	mov    %esp,%ebp
f010cdcb:	83 ec 18             	sub    $0x18,%esp
	struct Env* env =  env_create(programName, page_WS_size, LRU_second_list_size, percent_WS_pages_to_remove);
f010cdce:	ff 75 14             	pushl  0x14(%ebp)
f010cdd1:	ff 75 10             	pushl  0x10(%ebp)
f010cdd4:	ff 75 0c             	pushl  0xc(%ebp)
f010cdd7:	ff 75 08             	pushl  0x8(%ebp)
f010cdda:	e8 ec be ff ff       	call   f0108ccb <env_create>
f010cddf:	83 c4 10             	add    $0x10,%esp
f010cde2:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(env == NULL)
f010cde5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010cde9:	75 07                	jne    f010cdf2 <sys_create_env+0x2a>
	{
		return E_ENV_CREATION_ERROR;
f010cdeb:	b8 ef ff ff ff       	mov    $0xffffffef,%eax
f010cdf0:	eb 14                	jmp    f010ce06 <sys_create_env+0x3e>
	}

	//2015
	sched_new_env(env);
f010cdf2:	83 ec 0c             	sub    $0xc,%esp
f010cdf5:	ff 75 f4             	pushl  -0xc(%ebp)
f010cdf8:	e8 36 85 ff ff       	call   f0105333 <sched_new_env>
f010cdfd:	83 c4 10             	add    $0x10,%esp

	return env->env_id;
f010ce00:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ce03:	8b 40 4c             	mov    0x4c(%eax),%eax
}
f010ce06:	c9                   	leave  
f010ce07:	c3                   	ret    

f010ce08 <sys_run_env>:

//Place a new env into the READY queue
void sys_run_env(int32 envId)
{
f010ce08:	55                   	push   %ebp
f010ce09:	89 e5                	mov    %esp,%ebp
f010ce0b:	83 ec 08             	sub    $0x8,%esp
	sched_run_env(envId);
f010ce0e:	8b 45 08             	mov    0x8(%ebp),%eax
f010ce11:	83 ec 0c             	sub    $0xc,%esp
f010ce14:	50                   	push   %eax
f010ce15:	e8 36 85 ff ff       	call   f0105350 <sched_run_env>
f010ce1a:	83 c4 10             	add    $0x10,%esp
}
f010ce1d:	90                   	nop
f010ce1e:	c9                   	leave  
f010ce1f:	c3                   	ret    

f010ce20 <sys_get_virtual_time>:
/*******************************/
/* ETC... SYSTEM CALLS */
/*******************************/

struct uint64 sys_get_virtual_time()
{
f010ce20:	55                   	push   %ebp
f010ce21:	89 e5                	mov    %esp,%ebp
f010ce23:	83 ec 10             	sub    $0x10,%esp
	//	lcr4(0);


	struct uint64 result;

	__asm __volatile("rdtsc\n"
f010ce26:	0f 31                	rdtsc  
f010ce28:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010ce2b:	89 55 f4             	mov    %edx,-0xc(%ebp)
	//ptr[3]=0;
	//cprintf("as str = %s\n", ptr);
	cprintf("ax = %x, bx = %x, cx = %x, dx = %x\n", eaxp,ebxp,ecxp,edxp);
	*/

	return result;
f010ce2e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ce31:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ce34:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010ce37:	89 55 fc             	mov    %edx,-0x4(%ebp)
	struct uint64 t = get_virtual_time();
	return t;
f010ce3a:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010ce3d:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010ce40:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010ce43:	89 01                	mov    %eax,(%ecx)
f010ce45:	89 51 04             	mov    %edx,0x4(%ecx)
}
f010ce48:	8b 45 08             	mov    0x8(%ebp),%eax
f010ce4b:	c9                   	leave  
f010ce4c:	c2 04 00             	ret    $0x4

f010ce4f <sys_rcr2>:

uint32 sys_rcr2()
{
f010ce4f:	55                   	push   %ebp
f010ce50:	89 e5                	mov    %esp,%ebp
f010ce52:	83 ec 10             	sub    $0x10,%esp

static __inline uint32
rcr2(void)
{
	uint32 val;
	__asm __volatile("movl %%cr2,%0" : "=r" (val));
f010ce55:	0f 20 d0             	mov    %cr2,%eax
f010ce58:	89 45 fc             	mov    %eax,-0x4(%ebp)
	return val;
f010ce5b:	8b 45 fc             	mov    -0x4(%ebp),%eax
	return rcr2();
f010ce5e:	90                   	nop
}
f010ce5f:	c9                   	leave  
f010ce60:	c3                   	ret    

f010ce61 <sys_bypassPageFault>:
void sys_bypassPageFault(uint8 instrLength)
{
f010ce61:	55                   	push   %ebp
f010ce62:	89 e5                	mov    %esp,%ebp
f010ce64:	83 ec 04             	sub    $0x4,%esp
f010ce67:	8b 45 08             	mov    0x8(%ebp),%eax
f010ce6a:	88 45 fc             	mov    %al,-0x4(%ebp)
	bypassInstrLength = instrLength;
f010ce6d:	8a 45 fc             	mov    -0x4(%ebp),%al
f010ce70:	a2 28 3a 25 f0       	mov    %al,0xf0253a28
}
f010ce75:	90                   	nop
f010ce76:	c9                   	leave  
f010ce77:	c3                   	ret    

f010ce78 <sys_sbrk>:
/**********************************/
/* DYNAMIC ALLOCATOR SYSTEM CALLS */
/**********************************/
/*2024*/
void* sys_sbrk(int increment)
{
f010ce78:	55                   	push   %ebp
f010ce79:	89 e5                	mov    %esp,%ebp
	//TODO: [PROJECT'23.MS2 - #08] [2] USER HEAP - Block Allocator - sys_sbrk() [Kernel Side]
	//MS2: COMMENT THIS LINE BEFORE START CODING====
	return (void*)-1 ;
f010ce7b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
	 * 		You might have to undo any operations you have done so far in this case.
	 */
	struct Env* env = curenv; //the current running Environment to adjust its break limit


}
f010ce80:	5d                   	pop    %ebp
f010ce81:	c3                   	ret    

f010ce82 <syscall>:
/**************************************************************************/
/************************* SYSTEM CALLS HANDLER ***************************/
/**************************************************************************/
// Dispatches to the correct kernel function, passing the arguments.
uint32 syscall(uint32 syscallno, uint32 a1, uint32 a2, uint32 a3, uint32 a4, uint32 a5)
{
f010ce82:	55                   	push   %ebp
f010ce83:	89 e5                	mov    %esp,%ebp
f010ce85:	56                   	push   %esi
f010ce86:	53                   	push   %ebx
f010ce87:	83 ec 10             	sub    $0x10,%esp
	// Call the function corresponding to the 'syscallno' parameter.
	// Return any appropriate return value.
	switch(syscallno)
f010ce8a:	83 7d 08 32          	cmpl   $0x32,0x8(%ebp)
f010ce8e:	0f 87 56 04 00 00    	ja     f010d2ea <syscall+0x468>
f010ce94:	8b 45 08             	mov    0x8(%ebp),%eax
f010ce97:	c1 e0 02             	shl    $0x2,%eax
f010ce9a:	05 98 37 13 f0       	add    $0xf0133798,%eax
f010ce9f:	8b 00                	mov    (%eax),%eax
f010cea1:	ff e0                	jmp    *%eax
	{
	/*2023*/
	//TODO: [PROJECT'23.MS1 - #4] [2] SYSTEM CALLS - Add suitable code here
	case SYS_sbrk:
	        return (uint32)sys_sbrk(a1);
f010cea3:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cea6:	50                   	push   %eax
f010cea7:	e8 cc ff ff ff       	call   f010ce78 <sys_sbrk>
f010ceac:	83 c4 04             	add    $0x4,%esp
f010ceaf:	e9 3b 04 00 00       	jmp    f010d2ef <syscall+0x46d>
	        //return 0;
	        break;
	    case SYS_free_user_mem:
	        sys_free_user_mem(a1,a2);
f010ceb4:	83 ec 08             	sub    $0x8,%esp
f010ceb7:	ff 75 10             	pushl  0x10(%ebp)
f010ceba:	ff 75 0c             	pushl  0xc(%ebp)
f010cebd:	e8 c8 fb ff ff       	call   f010ca8a <sys_free_user_mem>
f010cec2:	83 c4 10             	add    $0x10,%esp
	        return 0;
f010cec5:	b8 00 00 00 00       	mov    $0x0,%eax
f010ceca:	e9 20 04 00 00       	jmp    f010d2ef <syscall+0x46d>
	        break;
	    case SYS_allocate_user_mem:
	        sys_allocate_user_mem(a1,a2);
f010cecf:	83 ec 08             	sub    $0x8,%esp
f010ced2:	ff 75 10             	pushl  0x10(%ebp)
f010ced5:	ff 75 0c             	pushl  0xc(%ebp)
f010ced8:	e8 ef fb ff ff       	call   f010cacc <sys_allocate_user_mem>
f010cedd:	83 c4 10             	add    $0x10,%esp
	        return 0;
f010cee0:	b8 00 00 00 00       	mov    $0x0,%eax
f010cee5:	e9 05 04 00 00       	jmp    f010d2ef <syscall+0x46d>
	        break;
	//=====================================================================
	case SYS_cputs:
		sys_cputs((const char*)a1,a2,(uint8)a3);
f010ceea:	8b 45 14             	mov    0x14(%ebp),%eax
f010ceed:	0f b6 d0             	movzbl %al,%edx
f010cef0:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cef3:	83 ec 04             	sub    $0x4,%esp
f010cef6:	52                   	push   %edx
f010cef7:	ff 75 10             	pushl  0x10(%ebp)
f010cefa:	50                   	push   %eax
f010cefb:	e8 df f8 ff ff       	call   f010c7df <sys_cputs>
f010cf00:	83 c4 10             	add    $0x10,%esp
		return 0;
f010cf03:	b8 00 00 00 00       	mov    $0x0,%eax
f010cf08:	e9 e2 03 00 00       	jmp    f010d2ef <syscall+0x46d>
		break;
	case SYS_cgetc:
		return sys_cgetc();
f010cf0d:	e8 3f f9 ff ff       	call   f010c851 <sys_cgetc>
f010cf12:	e9 d8 03 00 00       	jmp    f010d2ef <syscall+0x46d>
		break;
	case SYS_calc_req_frames:
		return sys_calculate_required_frames(a1, a2);
f010cf17:	83 ec 08             	sub    $0x8,%esp
f010cf1a:	ff 75 10             	pushl  0x10(%ebp)
f010cf1d:	ff 75 0c             	pushl  0xc(%ebp)
f010cf20:	e8 7c fa ff ff       	call   f010c9a1 <sys_calculate_required_frames>
f010cf25:	83 c4 10             	add    $0x10,%esp
f010cf28:	e9 c2 03 00 00       	jmp    f010d2ef <syscall+0x46d>
		break;
	case SYS_calc_free_frames:
		return sys_calculate_free_frames();
f010cf2d:	e8 94 fa ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f010cf32:	e9 b8 03 00 00       	jmp    f010d2ef <syscall+0x46d>
		break;
	case SYS_calc_modified_frames:
		return sys_calculate_modified_frames();
f010cf37:	e8 a9 fa ff ff       	call   f010c9e5 <sys_calculate_modified_frames>
f010cf3c:	e9 ae 03 00 00       	jmp    f010d2ef <syscall+0x46d>
		break;
	case SYS_calc_notmod_frames:
		return sys_calculate_notmod_frames();
f010cf41:	e8 b9 fa ff ff       	call   f010c9ff <sys_calculate_notmod_frames>
f010cf46:	e9 a4 03 00 00       	jmp    f010d2ef <syscall+0x46d>
		break;

	case SYS_pf_calc_allocated_pages:
		return sys_pf_calculate_allocated_pages();
f010cf4b:	e8 21 fb ff ff       	call   f010ca71 <sys_pf_calculate_allocated_pages>
f010cf50:	e9 9a 03 00 00       	jmp    f010d2ef <syscall+0x46d>
		break;
	case SYS_calculate_pages_tobe_removed_ready_exit:
		return sys_calculate_pages_tobe_removed_ready_exit(a1);
f010cf55:	83 ec 0c             	sub    $0xc,%esp
f010cf58:	ff 75 0c             	pushl  0xc(%ebp)
f010cf5b:	e8 b9 fa ff ff       	call   f010ca19 <sys_calculate_pages_tobe_removed_ready_exit>
f010cf60:	83 c4 10             	add    $0x10,%esp
f010cf63:	e9 87 03 00 00       	jmp    f010d2ef <syscall+0x46d>
		break;
	case SYS_scarce_memory:
		sys_scarce_memory();
f010cf68:	e8 c2 fa ff ff       	call   f010ca2f <sys_scarce_memory>
		return 0;
f010cf6d:	b8 00 00 00 00       	mov    $0x0,%eax
f010cf72:	e9 78 03 00 00       	jmp    f010d2ef <syscall+0x46d>
		break;
	case SYS_allocate_chunk_in_mem:
		sys_allocate_chunk(a1, (uint32)a2, a3);
f010cf77:	83 ec 04             	sub    $0x4,%esp
f010cf7a:	ff 75 14             	pushl  0x14(%ebp)
f010cf7d:	ff 75 10             	pushl  0x10(%ebp)
f010cf80:	ff 75 0c             	pushl  0xc(%ebp)
f010cf83:	e8 64 fb ff ff       	call   f010caec <sys_allocate_chunk>
f010cf88:	83 c4 10             	add    $0x10,%esp
		return 0;
f010cf8b:	b8 00 00 00 00       	mov    $0x0,%eax
f010cf90:	e9 5a 03 00 00       	jmp    f010d2ef <syscall+0x46d>
		break;

		//======================
	case SYS_allocate_page:
		__sys_allocate_page((void*)a1, a2);
f010cf95:	8b 55 10             	mov    0x10(%ebp),%edx
f010cf98:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cf9b:	83 ec 08             	sub    $0x8,%esp
f010cf9e:	52                   	push   %edx
f010cf9f:	50                   	push   %eax
f010cfa0:	e8 bf f8 ff ff       	call   f010c864 <__sys_allocate_page>
f010cfa5:	83 c4 10             	add    $0x10,%esp
		return 0;
f010cfa8:	b8 00 00 00 00       	mov    $0x0,%eax
f010cfad:	e9 3d 03 00 00       	jmp    f010d2ef <syscall+0x46d>
		break;
	case SYS_map_frame:
		__sys_map_frame(a1, (void*)a2, a3, (void*)a4, a5);
f010cfb2:	8b 75 1c             	mov    0x1c(%ebp),%esi
f010cfb5:	8b 5d 18             	mov    0x18(%ebp),%ebx
f010cfb8:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010cfbb:	8b 55 10             	mov    0x10(%ebp),%edx
f010cfbe:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cfc1:	83 ec 0c             	sub    $0xc,%esp
f010cfc4:	56                   	push   %esi
f010cfc5:	53                   	push   %ebx
f010cfc6:	51                   	push   %ecx
f010cfc7:	52                   	push   %edx
f010cfc8:	50                   	push   %eax
f010cfc9:	e8 99 f9 ff ff       	call   f010c967 <__sys_map_frame>
f010cfce:	83 c4 20             	add    $0x20,%esp
		return 0;
f010cfd1:	b8 00 00 00 00       	mov    $0x0,%eax
f010cfd6:	e9 14 03 00 00       	jmp    f010d2ef <syscall+0x46d>
		break;
	case SYS_unmap_frame:
		__sys_unmap_frame(a1, (void*)a2);
f010cfdb:	8b 55 10             	mov    0x10(%ebp),%edx
f010cfde:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cfe1:	83 ec 08             	sub    $0x8,%esp
f010cfe4:	52                   	push   %edx
f010cfe5:	50                   	push   %eax
f010cfe6:	e8 99 f9 ff ff       	call   f010c984 <__sys_unmap_frame>
f010cfeb:	83 c4 10             	add    $0x10,%esp
		return 0;
f010cfee:	b8 00 00 00 00       	mov    $0x0,%eax
f010cff3:	e9 f7 02 00 00       	jmp    f010d2ef <syscall+0x46d>
		//		return 0;
		//		break;
		//2022

	case SYS_disableINTR:
		sys_disable_interrupt();
f010cff8:	e8 4d fb ff ff       	call   f010cb4a <sys_disable_interrupt>
		return 0;
f010cffd:	b8 00 00 00 00       	mov    $0x0,%eax
f010d002:	e9 e8 02 00 00       	jmp    f010d2ef <syscall+0x46d>
		break;

	case SYS_enableINTR:
		sys_enable_interrupt();
f010d007:	e8 58 fb ff ff       	call   f010cb64 <sys_enable_interrupt>
		return 0;
f010d00c:	b8 00 00 00 00       	mov    $0x0,%eax
f010d011:	e9 d9 02 00 00       	jmp    f010d2ef <syscall+0x46d>
		break;

	case SYS_cputc:
		sys_cputc((const char)a1);
f010d016:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d019:	0f be c0             	movsbl %al,%eax
f010d01c:	83 ec 0c             	sub    $0xc,%esp
f010d01f:	50                   	push   %eax
f010d020:	e8 08 f8 ff ff       	call   f010c82d <sys_cputc>
f010d025:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d028:	b8 00 00 00 00       	mov    $0x0,%eax
f010d02d:	e9 bd 02 00 00       	jmp    f010d2ef <syscall+0x46d>
		break;

	case SYS_clearFFL:
		sys_clearFFL((const char)a1);
f010d032:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d035:	0f be c0             	movsbl %al,%eax
f010d038:	83 ec 0c             	sub    $0xc,%esp
f010d03b:	50                   	push   %eax
f010d03c:	e8 fc f9 ff ff       	call   f010ca3d <sys_clearFFL>
f010d041:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d044:	b8 00 00 00 00       	mov    $0x0,%eax
f010d049:	e9 a1 02 00 00       	jmp    f010d2ef <syscall+0x46d>
		break;

	case SYS_create_semaphore:
		return sys_createSemaphore((char*)a1, a2);
f010d04e:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d051:	83 ec 08             	sub    $0x8,%esp
f010d054:	ff 75 10             	pushl  0x10(%ebp)
f010d057:	50                   	push   %eax
f010d058:	e8 21 fb ff ff       	call   f010cb7e <sys_createSemaphore>
f010d05d:	83 c4 10             	add    $0x10,%esp
f010d060:	e9 8a 02 00 00       	jmp    f010d2ef <syscall+0x46d>
		break;

	case SYS_wait_semaphore:
		sys_waitSemaphore((int32)a1, (char*)a2);
f010d065:	8b 55 10             	mov    0x10(%ebp),%edx
f010d068:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d06b:	83 ec 08             	sub    $0x8,%esp
f010d06e:	52                   	push   %edx
f010d06f:	50                   	push   %eax
f010d070:	e8 2b fb ff ff       	call   f010cba0 <sys_waitSemaphore>
f010d075:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d078:	b8 00 00 00 00       	mov    $0x0,%eax
f010d07d:	e9 6d 02 00 00       	jmp    f010d2ef <syscall+0x46d>
		break;

	case SYS_signal_semaphore:
		sys_signalSemaphore((int32)a1, (char*)a2);
f010d082:	8b 55 10             	mov    0x10(%ebp),%edx
f010d085:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d088:	83 ec 08             	sub    $0x8,%esp
f010d08b:	52                   	push   %edx
f010d08c:	50                   	push   %eax
f010d08d:	e8 28 fb ff ff       	call   f010cbba <sys_signalSemaphore>
f010d092:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d095:	b8 00 00 00 00       	mov    $0x0,%eax
f010d09a:	e9 50 02 00 00       	jmp    f010d2ef <syscall+0x46d>
		break;

	case SYS_get_semaphore_value:
		return sys_getSemaphoreValue((int32)a1, (char*)a2);
f010d09f:	8b 55 10             	mov    0x10(%ebp),%edx
f010d0a2:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d0a5:	83 ec 08             	sub    $0x8,%esp
f010d0a8:	52                   	push   %edx
f010d0a9:	50                   	push   %eax
f010d0aa:	e8 25 fb ff ff       	call   f010cbd4 <sys_getSemaphoreValue>
f010d0af:	83 c4 10             	add    $0x10,%esp
f010d0b2:	e9 38 02 00 00       	jmp    f010d2ef <syscall+0x46d>
		break;

	case SYS_create_shared_object:
		return sys_createSharedObject((char*)a1, a2, a3, (void*)a4);
f010d0b7:	8b 4d 18             	mov    0x18(%ebp),%ecx
f010d0ba:	8b 45 14             	mov    0x14(%ebp),%eax
f010d0bd:	0f b6 d0             	movzbl %al,%edx
f010d0c0:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d0c3:	51                   	push   %ecx
f010d0c4:	52                   	push   %edx
f010d0c5:	ff 75 10             	pushl  0x10(%ebp)
f010d0c8:	50                   	push   %eax
f010d0c9:	e8 63 fb ff ff       	call   f010cc31 <sys_createSharedObject>
f010d0ce:	83 c4 10             	add    $0x10,%esp
f010d0d1:	e9 19 02 00 00       	jmp    f010d2ef <syscall+0x46d>
		break;

	case SYS_get_shared_object:
		return sys_getSharedObject((int32)a1, (char*)a2, (void*)a3);
f010d0d6:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010d0d9:	8b 55 10             	mov    0x10(%ebp),%edx
f010d0dc:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d0df:	83 ec 04             	sub    $0x4,%esp
f010d0e2:	51                   	push   %ecx
f010d0e3:	52                   	push   %edx
f010d0e4:	50                   	push   %eax
f010d0e5:	e8 90 fb ff ff       	call   f010cc7a <sys_getSharedObject>
f010d0ea:	83 c4 10             	add    $0x10,%esp
f010d0ed:	e9 fd 01 00 00       	jmp    f010d2ef <syscall+0x46d>
		break;

	case SYS_free_shared_object:
		return sys_freeSharedObject((int32)a1, (void *)a2);
f010d0f2:	8b 55 10             	mov    0x10(%ebp),%edx
f010d0f5:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d0f8:	83 ec 08             	sub    $0x8,%esp
f010d0fb:	52                   	push   %edx
f010d0fc:	50                   	push   %eax
f010d0fd:	e8 94 fb ff ff       	call   f010cc96 <sys_freeSharedObject>
f010d102:	83 c4 10             	add    $0x10,%esp
f010d105:	e9 e5 01 00 00       	jmp    f010d2ef <syscall+0x46d>
		break;

	case SYS_get_size_of_shared_object:
		return sys_getSizeOfSharedObject((int32)a1, (char*)a2);
f010d10a:	8b 55 10             	mov    0x10(%ebp),%edx
f010d10d:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d110:	83 ec 08             	sub    $0x8,%esp
f010d113:	52                   	push   %edx
f010d114:	50                   	push   %eax
f010d115:	e8 47 fb ff ff       	call   f010cc61 <sys_getSizeOfSharedObject>
f010d11a:	83 c4 10             	add    $0x10,%esp
f010d11d:	e9 cd 01 00 00       	jmp    f010d2ef <syscall+0x46d>
		break;

	case SYS_get_max_shares:
		return sys_getMaxShares();
f010d122:	e8 88 fb ff ff       	call   f010ccaf <sys_getMaxShares>
f010d127:	e9 c3 01 00 00       	jmp    f010d2ef <syscall+0x46d>
		break;

	case SYS_create_env:
		return sys_create_env((char*)a1, (uint32)a2, (uint32)a3, (uint32)a4);
f010d12c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d12f:	ff 75 18             	pushl  0x18(%ebp)
f010d132:	ff 75 14             	pushl  0x14(%ebp)
f010d135:	ff 75 10             	pushl  0x10(%ebp)
f010d138:	50                   	push   %eax
f010d139:	e8 8a fc ff ff       	call   f010cdc8 <sys_create_env>
f010d13e:	83 c4 10             	add    $0x10,%esp
f010d141:	e9 a9 01 00 00       	jmp    f010d2ef <syscall+0x46d>
		break;

	case SYS_run_env:
		sys_run_env((int32)a1);
f010d146:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d149:	83 ec 0c             	sub    $0xc,%esp
f010d14c:	50                   	push   %eax
f010d14d:	e8 b6 fc ff ff       	call   f010ce08 <sys_run_env>
f010d152:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d155:	b8 00 00 00 00       	mov    $0x0,%eax
f010d15a:	e9 90 01 00 00       	jmp    f010d2ef <syscall+0x46d>
		break;
	case SYS_getenvindex:
		return sys_getenvindex();
f010d15f:	e8 62 fb ff ff       	call   f010ccc6 <sys_getenvindex>
f010d164:	e9 86 01 00 00       	jmp    f010d2ef <syscall+0x46d>
		break;
	case SYS_getenvid:
		return sys_getenvid();
f010d169:	e8 4b fb ff ff       	call   f010ccb9 <sys_getenvid>
f010d16e:	e9 7c 01 00 00       	jmp    f010d2ef <syscall+0x46d>
		break;
	case SYS_getparentenvid:
		return sys_getparentenvid();
f010d173:	e8 9d fb ff ff       	call   f010cd15 <sys_getparentenvid>
f010d178:	e9 72 01 00 00       	jmp    f010d2ef <syscall+0x46d>
		break;
	case SYS_destroy_env:
		return sys_destroy_env(a1);
f010d17d:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d180:	83 ec 0c             	sub    $0xc,%esp
f010d183:	50                   	push   %eax
f010d184:	e8 99 fb ff ff       	call   f010cd22 <sys_destroy_env>
f010d189:	83 c4 10             	add    $0x10,%esp
f010d18c:	e9 5e 01 00 00       	jmp    f010d2ef <syscall+0x46d>
		break;
	case SYS_exit_env:
		sys_exit_env();
f010d191:	e8 24 fc ff ff       	call   f010cdba <sys_exit_env>
		return 0;
f010d196:	b8 00 00 00 00       	mov    $0x0,%eax
f010d19b:	e9 4f 01 00 00       	jmp    f010d2ef <syscall+0x46d>
		break;
	case SYS_get_virtual_time:
	{
		struct uint64 res = sys_get_virtual_time();
f010d1a0:	8d 45 e8             	lea    -0x18(%ebp),%eax
f010d1a3:	83 ec 0c             	sub    $0xc,%esp
f010d1a6:	50                   	push   %eax
f010d1a7:	e8 74 fc ff ff       	call   f010ce20 <sys_get_virtual_time>
f010d1ac:	83 c4 0c             	add    $0xc,%esp
		uint32* ptrlow = ((uint32*)a1);
f010d1af:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d1b2:	89 45 f4             	mov    %eax,-0xc(%ebp)
		uint32* ptrhi = ((uint32*)a2);
f010d1b5:	8b 45 10             	mov    0x10(%ebp),%eax
f010d1b8:	89 45 f0             	mov    %eax,-0x10(%ebp)
		*ptrlow = res.low;
f010d1bb:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010d1be:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d1c1:	89 10                	mov    %edx,(%eax)
		*ptrhi = res.hi;
f010d1c3:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010d1c6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d1c9:	89 10                	mov    %edx,(%eax)
		return 0;
f010d1cb:	b8 00 00 00 00       	mov    $0x0,%eax
f010d1d0:	e9 1a 01 00 00       	jmp    f010d2ef <syscall+0x46d>
		break;
	}
	case SYS_move_user_mem:
		sys_move_user_mem(a1, a2, a3);
f010d1d5:	83 ec 04             	sub    $0x4,%esp
f010d1d8:	ff 75 14             	pushl  0x14(%ebp)
f010d1db:	ff 75 10             	pushl  0x10(%ebp)
f010d1de:	ff 75 0c             	pushl  0xc(%ebp)
f010d1e1:	e8 2c f9 ff ff       	call   f010cb12 <sys_move_user_mem>
f010d1e6:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d1e9:	b8 00 00 00 00       	mov    $0x0,%eax
f010d1ee:	e9 fc 00 00 00       	jmp    f010d2ef <syscall+0x46d>
		break;
	case SYS_rcr2:
		return sys_rcr2();
f010d1f3:	e8 57 fc ff ff       	call   f010ce4f <sys_rcr2>
f010d1f8:	e9 f2 00 00 00       	jmp    f010d2ef <syscall+0x46d>
		break;
	case SYS_bypassPageFault:
		sys_bypassPageFault(a1);
f010d1fd:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d200:	0f b6 c0             	movzbl %al,%eax
f010d203:	83 ec 0c             	sub    $0xc,%esp
f010d206:	50                   	push   %eax
f010d207:	e8 55 fc ff ff       	call   f010ce61 <sys_bypassPageFault>
f010d20c:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d20f:	b8 00 00 00 00       	mov    $0x0,%eax
f010d214:	e9 d6 00 00 00       	jmp    f010d2ef <syscall+0x46d>

	case SYS_rsttst:
		rsttst();
f010d219:	e8 63 08 02 00       	call   f012da81 <rsttst>
		return 0;
f010d21e:	b8 00 00 00 00       	mov    $0x0,%eax
f010d223:	e9 c7 00 00 00       	jmp    f010d2ef <syscall+0x46d>
	case SYS_inctst:
		inctst();
f010d228:	e8 64 08 02 00       	call   f012da91 <inctst>
		return 0;
f010d22d:	b8 00 00 00 00       	mov    $0x0,%eax
f010d232:	e9 b8 00 00 00       	jmp    f010d2ef <syscall+0x46d>
	case SYS_chktst:
		chktst(a1);
f010d237:	83 ec 0c             	sub    $0xc,%esp
f010d23a:	ff 75 0c             	pushl  0xc(%ebp)
f010d23d:	e8 4e 09 02 00       	call   f012db90 <chktst>
f010d242:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d245:	b8 00 00 00 00       	mov    $0x0,%eax
f010d24a:	e9 a0 00 00 00       	jmp    f010d2ef <syscall+0x46d>
	case SYS_gettst:
		return gettst();
f010d24f:	e8 4e 08 02 00       	call   f012daa2 <gettst>
f010d254:	e9 96 00 00 00       	jmp    f010d2ef <syscall+0x46d>
	case SYS_testNum:
		tst(a1, a2, a3, (char)a4, a5);
f010d259:	8b 55 1c             	mov    0x1c(%ebp),%edx
f010d25c:	8b 45 18             	mov    0x18(%ebp),%eax
f010d25f:	0f be c0             	movsbl %al,%eax
f010d262:	83 ec 0c             	sub    $0xc,%esp
f010d265:	52                   	push   %edx
f010d266:	50                   	push   %eax
f010d267:	ff 75 14             	pushl  0x14(%ebp)
f010d26a:	ff 75 10             	pushl  0x10(%ebp)
f010d26d:	ff 75 0c             	pushl  0xc(%ebp)
f010d270:	e8 37 08 02 00       	call   f012daac <tst>
f010d275:	83 c4 20             	add    $0x20,%esp
		return 0;
f010d278:	b8 00 00 00 00       	mov    $0x0,%eax
f010d27d:	eb 70                	jmp    f010d2ef <syscall+0x46d>

	case SYS_get_heap_strategy:
		return sys_get_heap_strategy();
f010d27f:	e8 ae f8 ff ff       	call   f010cb32 <sys_get_heap_strategy>
f010d284:	eb 69                	jmp    f010d2ef <syscall+0x46d>

	case SYS_set_heap_strategy:
		sys_set_uheap_strategy(a1);
f010d286:	83 ec 0c             	sub    $0xc,%esp
f010d289:	ff 75 0c             	pushl  0xc(%ebp)
f010d28c:	e8 ab f8 ff ff       	call   f010cb3c <sys_set_uheap_strategy>
f010d291:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d294:	b8 00 00 00 00       	mov    $0x0,%eax
f010d299:	eb 54                	jmp    f010d2ef <syscall+0x46d>

	case SYS_check_LRU_lists:
		return sys_check_LRU_lists((uint32*)a1, (uint32*)a2, (int)a3, (int)a4);
f010d29b:	8b 5d 18             	mov    0x18(%ebp),%ebx
f010d29e:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010d2a1:	8b 55 10             	mov    0x10(%ebp),%edx
f010d2a4:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d2a7:	53                   	push   %ebx
f010d2a8:	51                   	push   %ecx
f010d2a9:	52                   	push   %edx
f010d2aa:	50                   	push   %eax
f010d2ab:	e8 a3 46 00 00       	call   f0111953 <sys_check_LRU_lists>
f010d2b0:	83 c4 10             	add    $0x10,%esp
f010d2b3:	eb 3a                	jmp    f010d2ef <syscall+0x46d>

	case SYS_check_LRU_lists_free:
		return sys_check_LRU_lists_free((uint32*)a1, (int)a2);
f010d2b5:	8b 55 10             	mov    0x10(%ebp),%edx
f010d2b8:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d2bb:	83 ec 08             	sub    $0x8,%esp
f010d2be:	52                   	push   %edx
f010d2bf:	50                   	push   %eax
f010d2c0:	e8 10 48 00 00       	call   f0111ad5 <sys_check_LRU_lists_free>
f010d2c5:	83 c4 10             	add    $0x10,%esp
f010d2c8:	eb 25                	jmp    f010d2ef <syscall+0x46d>

	case SYS_check_WS_list:
		return sys_check_WS_list((uint32*)a1, (int)a2, (uint32)a3, (bool)a4);
f010d2ca:	8b 4d 18             	mov    0x18(%ebp),%ecx
f010d2cd:	8b 55 10             	mov    0x10(%ebp),%edx
f010d2d0:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d2d3:	51                   	push   %ecx
f010d2d4:	ff 75 14             	pushl  0x14(%ebp)
f010d2d7:	52                   	push   %edx
f010d2d8:	50                   	push   %eax
f010d2d9:	e8 62 49 00 00       	call   f0111c40 <sys_check_WS_list>
f010d2de:	83 c4 10             	add    $0x10,%esp
f010d2e1:	eb 0c                	jmp    f010d2ef <syscall+0x46d>

	case NSYSCALLS:
		return 	-E_INVAL;
f010d2e3:	b8 03 00 00 00       	mov    $0x3,%eax
f010d2e8:	eb 05                	jmp    f010d2ef <syscall+0x46d>
		break;
	}
	//panic("syscall not implemented");
	return -E_INVAL;
f010d2ea:	b8 03 00 00 00       	mov    $0x3,%eax
}
f010d2ef:	8d 65 f8             	lea    -0x8(%ebp),%esp
f010d2f2:	5b                   	pop    %ebx
f010d2f3:	5e                   	pop    %esi
f010d2f4:	5d                   	pop    %ebp
f010d2f5:	c3                   	ret    

f010d2f6 <stab_binsearch>:
//	will exit setting left = 118, right = 554.
//
static void
stab_binsearch(const struct Stab *stabs, int *region_left, int *region_right,
	       int type, uint32*  addr)
{
f010d2f6:	55                   	push   %ebp
f010d2f7:	89 e5                	mov    %esp,%ebp
f010d2f9:	83 ec 20             	sub    $0x20,%esp
	int l = *region_left, r = *region_right, any_matches = 0;
f010d2fc:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d2ff:	8b 00                	mov    (%eax),%eax
f010d301:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010d304:	8b 45 10             	mov    0x10(%ebp),%eax
f010d307:	8b 00                	mov    (%eax),%eax
f010d309:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010d30c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	while (l <= r) {
f010d313:	e9 ca 00 00 00       	jmp    f010d3e2 <stab_binsearch+0xec>
		int true_m = (l + r) / 2, m = true_m;
f010d318:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010d31b:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010d31e:	01 d0                	add    %edx,%eax
f010d320:	89 c2                	mov    %eax,%edx
f010d322:	c1 ea 1f             	shr    $0x1f,%edx
f010d325:	01 d0                	add    %edx,%eax
f010d327:	d1 f8                	sar    %eax
f010d329:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010d32c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d32f:	89 45 f0             	mov    %eax,-0x10(%ebp)

		// search for earliest stab with right type
		while (m >= l && stabs[m].n_type != type)
f010d332:	eb 03                	jmp    f010d337 <stab_binsearch+0x41>
			m--;
f010d334:	ff 4d f0             	decl   -0x10(%ebp)

	while (l <= r) {
		int true_m = (l + r) / 2, m = true_m;

		// search for earliest stab with right type
		while (m >= l && stabs[m].n_type != type)
f010d337:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d33a:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010d33d:	7c 1e                	jl     f010d35d <stab_binsearch+0x67>
f010d33f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010d342:	89 d0                	mov    %edx,%eax
f010d344:	01 c0                	add    %eax,%eax
f010d346:	01 d0                	add    %edx,%eax
f010d348:	c1 e0 02             	shl    $0x2,%eax
f010d34b:	89 c2                	mov    %eax,%edx
f010d34d:	8b 45 08             	mov    0x8(%ebp),%eax
f010d350:	01 d0                	add    %edx,%eax
f010d352:	8a 40 04             	mov    0x4(%eax),%al
f010d355:	0f b6 c0             	movzbl %al,%eax
f010d358:	3b 45 14             	cmp    0x14(%ebp),%eax
f010d35b:	75 d7                	jne    f010d334 <stab_binsearch+0x3e>
			m--;
		if (m < l) {	// no match in [l, m]
f010d35d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d360:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010d363:	7d 09                	jge    f010d36e <stab_binsearch+0x78>
			l = true_m + 1;
f010d365:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d368:	40                   	inc    %eax
f010d369:	89 45 fc             	mov    %eax,-0x4(%ebp)
			continue;
f010d36c:	eb 74                	jmp    f010d3e2 <stab_binsearch+0xec>
		}

		// actual binary search
		any_matches = 1;
f010d36e:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		if (stabs[m].n_value < addr) {
f010d375:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010d378:	89 d0                	mov    %edx,%eax
f010d37a:	01 c0                	add    %eax,%eax
f010d37c:	01 d0                	add    %edx,%eax
f010d37e:	c1 e0 02             	shl    $0x2,%eax
f010d381:	89 c2                	mov    %eax,%edx
f010d383:	8b 45 08             	mov    0x8(%ebp),%eax
f010d386:	01 d0                	add    %edx,%eax
f010d388:	8b 40 08             	mov    0x8(%eax),%eax
f010d38b:	3b 45 18             	cmp    0x18(%ebp),%eax
f010d38e:	73 11                	jae    f010d3a1 <stab_binsearch+0xab>
			*region_left = m;
f010d390:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d393:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010d396:	89 10                	mov    %edx,(%eax)
			l = true_m + 1;
f010d398:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d39b:	40                   	inc    %eax
f010d39c:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010d39f:	eb 41                	jmp    f010d3e2 <stab_binsearch+0xec>
		} else if (stabs[m].n_value > addr) {
f010d3a1:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010d3a4:	89 d0                	mov    %edx,%eax
f010d3a6:	01 c0                	add    %eax,%eax
f010d3a8:	01 d0                	add    %edx,%eax
f010d3aa:	c1 e0 02             	shl    $0x2,%eax
f010d3ad:	89 c2                	mov    %eax,%edx
f010d3af:	8b 45 08             	mov    0x8(%ebp),%eax
f010d3b2:	01 d0                	add    %edx,%eax
f010d3b4:	8b 40 08             	mov    0x8(%eax),%eax
f010d3b7:	3b 45 18             	cmp    0x18(%ebp),%eax
f010d3ba:	76 14                	jbe    f010d3d0 <stab_binsearch+0xda>
			*region_right = m - 1;
f010d3bc:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d3bf:	8d 50 ff             	lea    -0x1(%eax),%edx
f010d3c2:	8b 45 10             	mov    0x10(%ebp),%eax
f010d3c5:	89 10                	mov    %edx,(%eax)
			r = m - 1;
f010d3c7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d3ca:	48                   	dec    %eax
f010d3cb:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010d3ce:	eb 12                	jmp    f010d3e2 <stab_binsearch+0xec>
		} else {
			// exact match for 'addr', but continue loop to find
			// *region_right
			*region_left = m;
f010d3d0:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d3d3:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010d3d6:	89 10                	mov    %edx,(%eax)
			l = m;
f010d3d8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d3db:	89 45 fc             	mov    %eax,-0x4(%ebp)
			addr++;
f010d3de:	83 45 18 04          	addl   $0x4,0x18(%ebp)
stab_binsearch(const struct Stab *stabs, int *region_left, int *region_right,
	       int type, uint32*  addr)
{
	int l = *region_left, r = *region_right, any_matches = 0;

	while (l <= r) {
f010d3e2:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010d3e5:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f010d3e8:	0f 8e 2a ff ff ff    	jle    f010d318 <stab_binsearch+0x22>
			l = m;
			addr++;
		}
	}

	if (!any_matches)
f010d3ee:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d3f2:	75 0f                	jne    f010d403 <stab_binsearch+0x10d>
		*region_right = *region_left - 1;
f010d3f4:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d3f7:	8b 00                	mov    (%eax),%eax
f010d3f9:	8d 50 ff             	lea    -0x1(%eax),%edx
f010d3fc:	8b 45 10             	mov    0x10(%ebp),%eax
f010d3ff:	89 10                	mov    %edx,(%eax)
		     l > *region_left && stabs[l].n_type != type;
		     l--)
			/* do nothing */;
		*region_left = l;
	}
}
f010d401:	eb 3d                	jmp    f010d440 <stab_binsearch+0x14a>

	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
f010d403:	8b 45 10             	mov    0x10(%ebp),%eax
f010d406:	8b 00                	mov    (%eax),%eax
f010d408:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010d40b:	eb 03                	jmp    f010d410 <stab_binsearch+0x11a>
		     l > *region_left && stabs[l].n_type != type;
		     l--)
f010d40d:	ff 4d fc             	decl   -0x4(%ebp)
	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
		     l > *region_left && stabs[l].n_type != type;
f010d410:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d413:	8b 00                	mov    (%eax),%eax

	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
f010d415:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010d418:	7d 1e                	jge    f010d438 <stab_binsearch+0x142>
		     l > *region_left && stabs[l].n_type != type;
f010d41a:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010d41d:	89 d0                	mov    %edx,%eax
f010d41f:	01 c0                	add    %eax,%eax
f010d421:	01 d0                	add    %edx,%eax
f010d423:	c1 e0 02             	shl    $0x2,%eax
f010d426:	89 c2                	mov    %eax,%edx
f010d428:	8b 45 08             	mov    0x8(%ebp),%eax
f010d42b:	01 d0                	add    %edx,%eax
f010d42d:	8a 40 04             	mov    0x4(%eax),%al
f010d430:	0f b6 c0             	movzbl %al,%eax
f010d433:	3b 45 14             	cmp    0x14(%ebp),%eax
f010d436:	75 d5                	jne    f010d40d <stab_binsearch+0x117>
		     l--)
			/* do nothing */;
		*region_left = l;
f010d438:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d43b:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010d43e:	89 10                	mov    %edx,(%eax)
	}
}
f010d440:	90                   	nop
f010d441:	c9                   	leave  
f010d442:	c3                   	ret    

f010d443 <debuginfo_eip>:
//	negative if not.  But even if it returns negative it has stored some
//	information into '*info'.
//
int
debuginfo_eip(uint32*  addr, struct Eipdebuginfo *info)
{
f010d443:	55                   	push   %ebp
f010d444:	89 e5                	mov    %esp,%ebp
f010d446:	83 ec 38             	sub    $0x38,%esp
	const struct Stab *stabs, *stab_end;
	const char *stabstr, *stabstr_end;
	int lfile, rfile, lfun, rfun, lline, rline;

	// Initialize *info
	info->eip_file = "<unknown>";
f010d449:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d44c:	c7 00 64 38 13 f0    	movl   $0xf0133864,(%eax)
	info->eip_line = 0;
f010d452:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d455:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
	info->eip_fn_name = "<unknown>";
f010d45c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d45f:	c7 40 08 64 38 13 f0 	movl   $0xf0133864,0x8(%eax)
	info->eip_fn_namelen = 9;
f010d466:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d469:	c7 40 0c 09 00 00 00 	movl   $0x9,0xc(%eax)
	info->eip_fn_addr = addr;
f010d470:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d473:	8b 55 08             	mov    0x8(%ebp),%edx
f010d476:	89 50 10             	mov    %edx,0x10(%eax)
	info->eip_fn_narg = 0;
f010d479:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d47c:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)

	// Find the relevant set of stabs
	if ((uint32)addr >= USER_LIMIT) {
f010d483:	8b 45 08             	mov    0x8(%ebp),%eax
f010d486:	3d ff ff 7f ef       	cmp    $0xef7fffff,%eax
f010d48b:	76 1e                	jbe    f010d4ab <debuginfo_eip+0x68>
		stabs = __STAB_BEGIN__;
f010d48d:	c7 45 f4 cc b8 13 f0 	movl   $0xf013b8cc,-0xc(%ebp)
		stab_end = __STAB_END__;
f010d494:	c7 45 f0 88 7d 17 f0 	movl   $0xf0177d88,-0x10(%ebp)
		stabstr = __STABSTR_BEGIN__;
f010d49b:	c7 45 ec 89 7d 17 f0 	movl   $0xf0177d89,-0x14(%ebp)
		stabstr_end = __STABSTR_END__;
f010d4a2:	c7 45 e8 60 50 18 f0 	movl   $0xf0185060,-0x18(%ebp)
f010d4a9:	eb 2a                	jmp    f010d4d5 <debuginfo_eip+0x92>
		// The user-application linker script, user/user.ld,
		// puts information about the application's stabs (equivalent
		// to __STAB_BEGIN__, __STAB_END__, __STABSTR_BEGIN__, and
		// __STABSTR_END__) in a structure located at virtual address
		// USTABDATA.
		const struct UserStabData *usd = (const struct UserStabData *) USTABDATA;
f010d4ab:	c7 45 e0 00 00 20 00 	movl   $0x200000,-0x20(%ebp)

		// Make sure this memory is valid.
		// Return -1 if it is not.  Hint: Call user_mem_check.
		// LAB 3: Your code here.

		stabs = usd->stabs;
f010d4b2:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010d4b5:	8b 00                	mov    (%eax),%eax
f010d4b7:	89 45 f4             	mov    %eax,-0xc(%ebp)
		stab_end = usd->stab_end;
f010d4ba:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010d4bd:	8b 40 04             	mov    0x4(%eax),%eax
f010d4c0:	89 45 f0             	mov    %eax,-0x10(%ebp)
		stabstr = usd->stabstr;
f010d4c3:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010d4c6:	8b 40 08             	mov    0x8(%eax),%eax
f010d4c9:	89 45 ec             	mov    %eax,-0x14(%ebp)
		stabstr_end = usd->stabstr_end;
f010d4cc:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010d4cf:	8b 40 0c             	mov    0xc(%eax),%eax
f010d4d2:	89 45 e8             	mov    %eax,-0x18(%ebp)
		// Make sure the STABS and string table memory is valid.
		// LAB 3: Your code here.
	}

	// String table validity checks
	if (stabstr_end <= stabstr || stabstr_end[-1] != 0)
f010d4d5:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d4d8:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010d4db:	76 0a                	jbe    f010d4e7 <debuginfo_eip+0xa4>
f010d4dd:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d4e0:	48                   	dec    %eax
f010d4e1:	8a 00                	mov    (%eax),%al
f010d4e3:	84 c0                	test   %al,%al
f010d4e5:	74 0a                	je     f010d4f1 <debuginfo_eip+0xae>
		return -1;
f010d4e7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f010d4ec:	e9 01 02 00 00       	jmp    f010d6f2 <debuginfo_eip+0x2af>
	// 'eip'.  First, we find the basic source file containing 'eip'.
	// Then, we look in that source file for the function.  Then we look
	// for the line number.

	// Search the entire set of stabs for the source file (type N_SO).
	lfile = 0;
f010d4f1:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	rfile = (stab_end - stabs) - 1;
f010d4f8:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010d4fb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d4fe:	29 c2                	sub    %eax,%edx
f010d500:	89 d0                	mov    %edx,%eax
f010d502:	c1 f8 02             	sar    $0x2,%eax
f010d505:	89 c2                	mov    %eax,%edx
f010d507:	89 d0                	mov    %edx,%eax
f010d509:	c1 e0 02             	shl    $0x2,%eax
f010d50c:	01 d0                	add    %edx,%eax
f010d50e:	c1 e0 02             	shl    $0x2,%eax
f010d511:	01 d0                	add    %edx,%eax
f010d513:	c1 e0 02             	shl    $0x2,%eax
f010d516:	01 d0                	add    %edx,%eax
f010d518:	89 c1                	mov    %eax,%ecx
f010d51a:	c1 e1 08             	shl    $0x8,%ecx
f010d51d:	01 c8                	add    %ecx,%eax
f010d51f:	89 c1                	mov    %eax,%ecx
f010d521:	c1 e1 10             	shl    $0x10,%ecx
f010d524:	01 c8                	add    %ecx,%eax
f010d526:	01 c0                	add    %eax,%eax
f010d528:	01 d0                	add    %edx,%eax
f010d52a:	48                   	dec    %eax
f010d52b:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	stab_binsearch(stabs, &lfile, &rfile, N_SO, addr);
f010d52e:	ff 75 08             	pushl  0x8(%ebp)
f010d531:	6a 64                	push   $0x64
f010d533:	8d 45 d4             	lea    -0x2c(%ebp),%eax
f010d536:	50                   	push   %eax
f010d537:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010d53a:	50                   	push   %eax
f010d53b:	ff 75 f4             	pushl  -0xc(%ebp)
f010d53e:	e8 b3 fd ff ff       	call   f010d2f6 <stab_binsearch>
f010d543:	83 c4 14             	add    $0x14,%esp
	if (lfile == 0)
f010d546:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010d549:	85 c0                	test   %eax,%eax
f010d54b:	75 0a                	jne    f010d557 <debuginfo_eip+0x114>
		return -1;
f010d54d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f010d552:	e9 9b 01 00 00       	jmp    f010d6f2 <debuginfo_eip+0x2af>

	// Search within that file's stabs for the function definition
	// (N_FUN).
	lfun = lfile;
f010d557:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010d55a:	89 45 d0             	mov    %eax,-0x30(%ebp)
	rfun = rfile;
f010d55d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010d560:	89 45 cc             	mov    %eax,-0x34(%ebp)
	stab_binsearch(stabs, &lfun, &rfun, N_FUN, addr);
f010d563:	ff 75 08             	pushl  0x8(%ebp)
f010d566:	6a 24                	push   $0x24
f010d568:	8d 45 cc             	lea    -0x34(%ebp),%eax
f010d56b:	50                   	push   %eax
f010d56c:	8d 45 d0             	lea    -0x30(%ebp),%eax
f010d56f:	50                   	push   %eax
f010d570:	ff 75 f4             	pushl  -0xc(%ebp)
f010d573:	e8 7e fd ff ff       	call   f010d2f6 <stab_binsearch>
f010d578:	83 c4 14             	add    $0x14,%esp

	if (lfun <= rfun) {
f010d57b:	8b 55 d0             	mov    -0x30(%ebp),%edx
f010d57e:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010d581:	39 c2                	cmp    %eax,%edx
f010d583:	0f 8f 86 00 00 00    	jg     f010d60f <debuginfo_eip+0x1cc>
		// stabs[lfun] points to the function name
		// in the string table, but check bounds just in case.
		if (stabs[lfun].n_strx < stabstr_end - stabstr)
f010d589:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010d58c:	89 c2                	mov    %eax,%edx
f010d58e:	89 d0                	mov    %edx,%eax
f010d590:	01 c0                	add    %eax,%eax
f010d592:	01 d0                	add    %edx,%eax
f010d594:	c1 e0 02             	shl    $0x2,%eax
f010d597:	89 c2                	mov    %eax,%edx
f010d599:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d59c:	01 d0                	add    %edx,%eax
f010d59e:	8b 00                	mov    (%eax),%eax
f010d5a0:	8b 4d e8             	mov    -0x18(%ebp),%ecx
f010d5a3:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010d5a6:	29 d1                	sub    %edx,%ecx
f010d5a8:	89 ca                	mov    %ecx,%edx
f010d5aa:	39 d0                	cmp    %edx,%eax
f010d5ac:	73 22                	jae    f010d5d0 <debuginfo_eip+0x18d>
			info->eip_fn_name = stabstr + stabs[lfun].n_strx;
f010d5ae:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010d5b1:	89 c2                	mov    %eax,%edx
f010d5b3:	89 d0                	mov    %edx,%eax
f010d5b5:	01 c0                	add    %eax,%eax
f010d5b7:	01 d0                	add    %edx,%eax
f010d5b9:	c1 e0 02             	shl    $0x2,%eax
f010d5bc:	89 c2                	mov    %eax,%edx
f010d5be:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d5c1:	01 d0                	add    %edx,%eax
f010d5c3:	8b 10                	mov    (%eax),%edx
f010d5c5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d5c8:	01 c2                	add    %eax,%edx
f010d5ca:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d5cd:	89 50 08             	mov    %edx,0x8(%eax)
		info->eip_fn_addr = (uint32*) stabs[lfun].n_value;
f010d5d0:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010d5d3:	89 c2                	mov    %eax,%edx
f010d5d5:	89 d0                	mov    %edx,%eax
f010d5d7:	01 c0                	add    %eax,%eax
f010d5d9:	01 d0                	add    %edx,%eax
f010d5db:	c1 e0 02             	shl    $0x2,%eax
f010d5de:	89 c2                	mov    %eax,%edx
f010d5e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d5e3:	01 d0                	add    %edx,%eax
f010d5e5:	8b 50 08             	mov    0x8(%eax),%edx
f010d5e8:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d5eb:	89 50 10             	mov    %edx,0x10(%eax)
		addr = (uint32*)(addr - (info->eip_fn_addr));
f010d5ee:	8b 55 08             	mov    0x8(%ebp),%edx
f010d5f1:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d5f4:	8b 40 10             	mov    0x10(%eax),%eax
f010d5f7:	29 c2                	sub    %eax,%edx
f010d5f9:	89 d0                	mov    %edx,%eax
f010d5fb:	c1 f8 02             	sar    $0x2,%eax
f010d5fe:	89 45 08             	mov    %eax,0x8(%ebp)
		// Search within the function definition for the line number.
		lline = lfun;
f010d601:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010d604:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		rline = rfun;
f010d607:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010d60a:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010d60d:	eb 15                	jmp    f010d624 <debuginfo_eip+0x1e1>
	} else {
		// Couldn't find function stab!  Maybe we're in an assembly
		// file.  Search the whole file for the line number.
		info->eip_fn_addr = addr;
f010d60f:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d612:	8b 55 08             	mov    0x8(%ebp),%edx
f010d615:	89 50 10             	mov    %edx,0x10(%eax)
		lline = lfile;
f010d618:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010d61b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		rline = rfile;
f010d61e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010d621:	89 45 dc             	mov    %eax,-0x24(%ebp)
	}
	// Ignore stuff after the colon.
	info->eip_fn_namelen = strfind(info->eip_fn_name, ':') - info->eip_fn_name;
f010d624:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d627:	8b 40 08             	mov    0x8(%eax),%eax
f010d62a:	83 ec 08             	sub    $0x8,%esp
f010d62d:	6a 3a                	push   $0x3a
f010d62f:	50                   	push   %eax
f010d630:	e8 ca 19 02 00       	call   f012efff <strfind>
f010d635:	83 c4 10             	add    $0x10,%esp
f010d638:	89 c2                	mov    %eax,%edx
f010d63a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d63d:	8b 40 08             	mov    0x8(%eax),%eax
f010d640:	29 c2                	sub    %eax,%edx
f010d642:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d645:	89 50 0c             	mov    %edx,0xc(%eax)
	// Search backwards from the line number for the relevant filename
	// stab.
	// We can't just use the "lfile" stab because inlined functions
	// can interpolate code from a different file!
	// Such included source files use the N_SOL stab type.
	while (lline >= lfile
f010d648:	eb 03                	jmp    f010d64d <debuginfo_eip+0x20a>
	       && stabs[lline].n_type != N_SOL
	       && (stabs[lline].n_type != N_SO || !stabs[lline].n_value))
		lline--;
f010d64a:	ff 4d e4             	decl   -0x1c(%ebp)
	// Search backwards from the line number for the relevant filename
	// stab.
	// We can't just use the "lfile" stab because inlined functions
	// can interpolate code from a different file!
	// Such included source files use the N_SOL stab type.
	while (lline >= lfile
f010d64d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010d650:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f010d653:	7c 4e                	jl     f010d6a3 <debuginfo_eip+0x260>
	       && stabs[lline].n_type != N_SOL
f010d655:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010d658:	89 d0                	mov    %edx,%eax
f010d65a:	01 c0                	add    %eax,%eax
f010d65c:	01 d0                	add    %edx,%eax
f010d65e:	c1 e0 02             	shl    $0x2,%eax
f010d661:	89 c2                	mov    %eax,%edx
f010d663:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d666:	01 d0                	add    %edx,%eax
f010d668:	8a 40 04             	mov    0x4(%eax),%al
f010d66b:	3c 84                	cmp    $0x84,%al
f010d66d:	74 34                	je     f010d6a3 <debuginfo_eip+0x260>
	       && (stabs[lline].n_type != N_SO || !stabs[lline].n_value))
f010d66f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010d672:	89 d0                	mov    %edx,%eax
f010d674:	01 c0                	add    %eax,%eax
f010d676:	01 d0                	add    %edx,%eax
f010d678:	c1 e0 02             	shl    $0x2,%eax
f010d67b:	89 c2                	mov    %eax,%edx
f010d67d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d680:	01 d0                	add    %edx,%eax
f010d682:	8a 40 04             	mov    0x4(%eax),%al
f010d685:	3c 64                	cmp    $0x64,%al
f010d687:	75 c1                	jne    f010d64a <debuginfo_eip+0x207>
f010d689:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010d68c:	89 d0                	mov    %edx,%eax
f010d68e:	01 c0                	add    %eax,%eax
f010d690:	01 d0                	add    %edx,%eax
f010d692:	c1 e0 02             	shl    $0x2,%eax
f010d695:	89 c2                	mov    %eax,%edx
f010d697:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d69a:	01 d0                	add    %edx,%eax
f010d69c:	8b 40 08             	mov    0x8(%eax),%eax
f010d69f:	85 c0                	test   %eax,%eax
f010d6a1:	74 a7                	je     f010d64a <debuginfo_eip+0x207>
		lline--;
	if (lline >= lfile && stabs[lline].n_strx < stabstr_end - stabstr)
f010d6a3:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010d6a6:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f010d6a9:	7c 42                	jl     f010d6ed <debuginfo_eip+0x2aa>
f010d6ab:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010d6ae:	89 d0                	mov    %edx,%eax
f010d6b0:	01 c0                	add    %eax,%eax
f010d6b2:	01 d0                	add    %edx,%eax
f010d6b4:	c1 e0 02             	shl    $0x2,%eax
f010d6b7:	89 c2                	mov    %eax,%edx
f010d6b9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d6bc:	01 d0                	add    %edx,%eax
f010d6be:	8b 00                	mov    (%eax),%eax
f010d6c0:	8b 4d e8             	mov    -0x18(%ebp),%ecx
f010d6c3:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010d6c6:	29 d1                	sub    %edx,%ecx
f010d6c8:	89 ca                	mov    %ecx,%edx
f010d6ca:	39 d0                	cmp    %edx,%eax
f010d6cc:	73 1f                	jae    f010d6ed <debuginfo_eip+0x2aa>
		info->eip_file = stabstr + stabs[lline].n_strx;
f010d6ce:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010d6d1:	89 d0                	mov    %edx,%eax
f010d6d3:	01 c0                	add    %eax,%eax
f010d6d5:	01 d0                	add    %edx,%eax
f010d6d7:	c1 e0 02             	shl    $0x2,%eax
f010d6da:	89 c2                	mov    %eax,%edx
f010d6dc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d6df:	01 d0                	add    %edx,%eax
f010d6e1:	8b 10                	mov    (%eax),%edx
f010d6e3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d6e6:	01 c2                	add    %eax,%edx
f010d6e8:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d6eb:	89 10                	mov    %edx,(%eax)
	// Set eip_fn_narg to the number of arguments taken by the function,
	// or 0 if there was no containing function.
	// Your code here.


	return 0;
f010d6ed:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010d6f2:	c9                   	leave  
f010d6f3:	c3                   	ret    

f010d6f4 <setPageReplacmentAlgorithmLRU>:
//===============================
// REPLACEMENT STRATEGIES
//===============================
//2020
void setPageReplacmentAlgorithmLRU(int LRU_TYPE)
{
f010d6f4:	55                   	push   %ebp
f010d6f5:	89 e5                	mov    %esp,%ebp
f010d6f7:	83 ec 08             	sub    $0x8,%esp
	assert(LRU_TYPE == PG_REP_LRU_TIME_APPROX || LRU_TYPE == PG_REP_LRU_LISTS_APPROX);
f010d6fa:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f010d6fe:	74 1c                	je     f010d71c <setPageReplacmentAlgorithmLRU+0x28>
f010d700:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010d704:	74 16                	je     f010d71c <setPageReplacmentAlgorithmLRU+0x28>
f010d706:	68 70 38 13 f0       	push   $0xf0133870
f010d70b:	68 ba 38 13 f0       	push   $0xf01338ba
f010d710:	6a 18                	push   $0x18
f010d712:	68 cf 38 13 f0       	push   $0xf01338cf
f010d717:	e8 94 2a ff ff       	call   f01001b0 <_panic>
	_PageRepAlgoType = LRU_TYPE ;
f010d71c:	8b 45 08             	mov    0x8(%ebp),%eax
f010d71f:	a3 4c be 2b f0       	mov    %eax,0xf02bbe4c
}
f010d724:	90                   	nop
f010d725:	c9                   	leave  
f010d726:	c3                   	ret    

f010d727 <setPageReplacmentAlgorithmCLOCK>:
void setPageReplacmentAlgorithmCLOCK(){_PageRepAlgoType = PG_REP_CLOCK;}
f010d727:	55                   	push   %ebp
f010d728:	89 e5                	mov    %esp,%ebp
f010d72a:	c7 05 4c be 2b f0 03 	movl   $0x3,0xf02bbe4c
f010d731:	00 00 00 
f010d734:	90                   	nop
f010d735:	5d                   	pop    %ebp
f010d736:	c3                   	ret    

f010d737 <setPageReplacmentAlgorithmFIFO>:
void setPageReplacmentAlgorithmFIFO(){_PageRepAlgoType = PG_REP_FIFO;}
f010d737:	55                   	push   %ebp
f010d738:	89 e5                	mov    %esp,%ebp
f010d73a:	c7 05 4c be 2b f0 04 	movl   $0x4,0xf02bbe4c
f010d741:	00 00 00 
f010d744:	90                   	nop
f010d745:	5d                   	pop    %ebp
f010d746:	c3                   	ret    

f010d747 <setPageReplacmentAlgorithmModifiedCLOCK>:
void setPageReplacmentAlgorithmModifiedCLOCK(){_PageRepAlgoType = PG_REP_MODIFIEDCLOCK;}
f010d747:	55                   	push   %ebp
f010d748:	89 e5                	mov    %esp,%ebp
f010d74a:	c7 05 4c be 2b f0 05 	movl   $0x5,0xf02bbe4c
f010d751:	00 00 00 
f010d754:	90                   	nop
f010d755:	5d                   	pop    %ebp
f010d756:	c3                   	ret    

f010d757 <setPageReplacmentAlgorithmDynamicLocal>:
/*2018*/ void setPageReplacmentAlgorithmDynamicLocal(){_PageRepAlgoType = PG_REP_DYNAMIC_LOCAL;}
f010d757:	55                   	push   %ebp
f010d758:	89 e5                	mov    %esp,%ebp
f010d75a:	c7 05 4c be 2b f0 07 	movl   $0x7,0xf02bbe4c
f010d761:	00 00 00 
f010d764:	90                   	nop
f010d765:	5d                   	pop    %ebp
f010d766:	c3                   	ret    

f010d767 <setPageReplacmentAlgorithmNchanceCLOCK>:
/*2021*/ void setPageReplacmentAlgorithmNchanceCLOCK(int PageWSMaxSweeps){_PageRepAlgoType = PG_REP_NchanceCLOCK;  page_WS_max_sweeps = PageWSMaxSweeps;}
f010d767:	55                   	push   %ebp
f010d768:	89 e5                	mov    %esp,%ebp
f010d76a:	c7 05 4c be 2b f0 06 	movl   $0x6,0xf02bbe4c
f010d771:	00 00 00 
f010d774:	8b 45 08             	mov    0x8(%ebp),%eax
f010d777:	a3 5c 3a 25 f0       	mov    %eax,0xf0253a5c
f010d77c:	90                   	nop
f010d77d:	5d                   	pop    %ebp
f010d77e:	c3                   	ret    

f010d77f <isPageReplacmentAlgorithmLRU>:

//2020
uint32 isPageReplacmentAlgorithmLRU(int LRU_TYPE){return _PageRepAlgoType == LRU_TYPE ? 1 : 0;}
f010d77f:	55                   	push   %ebp
f010d780:	89 e5                	mov    %esp,%ebp
f010d782:	8b 15 4c be 2b f0    	mov    0xf02bbe4c,%edx
f010d788:	8b 45 08             	mov    0x8(%ebp),%eax
f010d78b:	39 c2                	cmp    %eax,%edx
f010d78d:	0f 94 c0             	sete   %al
f010d790:	0f b6 c0             	movzbl %al,%eax
f010d793:	5d                   	pop    %ebp
f010d794:	c3                   	ret    

f010d795 <isPageReplacmentAlgorithmCLOCK>:
uint32 isPageReplacmentAlgorithmCLOCK(){if(_PageRepAlgoType == PG_REP_CLOCK) return 1; return 0;}
f010d795:	55                   	push   %ebp
f010d796:	89 e5                	mov    %esp,%ebp
f010d798:	a1 4c be 2b f0       	mov    0xf02bbe4c,%eax
f010d79d:	83 f8 03             	cmp    $0x3,%eax
f010d7a0:	75 07                	jne    f010d7a9 <isPageReplacmentAlgorithmCLOCK+0x14>
f010d7a2:	b8 01 00 00 00       	mov    $0x1,%eax
f010d7a7:	eb 05                	jmp    f010d7ae <isPageReplacmentAlgorithmCLOCK+0x19>
f010d7a9:	b8 00 00 00 00       	mov    $0x0,%eax
f010d7ae:	5d                   	pop    %ebp
f010d7af:	c3                   	ret    

f010d7b0 <isPageReplacmentAlgorithmFIFO>:
uint32 isPageReplacmentAlgorithmFIFO(){if(_PageRepAlgoType == PG_REP_FIFO) return 1; return 0;}
f010d7b0:	55                   	push   %ebp
f010d7b1:	89 e5                	mov    %esp,%ebp
f010d7b3:	a1 4c be 2b f0       	mov    0xf02bbe4c,%eax
f010d7b8:	83 f8 04             	cmp    $0x4,%eax
f010d7bb:	75 07                	jne    f010d7c4 <isPageReplacmentAlgorithmFIFO+0x14>
f010d7bd:	b8 01 00 00 00       	mov    $0x1,%eax
f010d7c2:	eb 05                	jmp    f010d7c9 <isPageReplacmentAlgorithmFIFO+0x19>
f010d7c4:	b8 00 00 00 00       	mov    $0x0,%eax
f010d7c9:	5d                   	pop    %ebp
f010d7ca:	c3                   	ret    

f010d7cb <isPageReplacmentAlgorithmModifiedCLOCK>:
uint32 isPageReplacmentAlgorithmModifiedCLOCK(){if(_PageRepAlgoType == PG_REP_MODIFIEDCLOCK) return 1; return 0;}
f010d7cb:	55                   	push   %ebp
f010d7cc:	89 e5                	mov    %esp,%ebp
f010d7ce:	a1 4c be 2b f0       	mov    0xf02bbe4c,%eax
f010d7d3:	83 f8 05             	cmp    $0x5,%eax
f010d7d6:	75 07                	jne    f010d7df <isPageReplacmentAlgorithmModifiedCLOCK+0x14>
f010d7d8:	b8 01 00 00 00       	mov    $0x1,%eax
f010d7dd:	eb 05                	jmp    f010d7e4 <isPageReplacmentAlgorithmModifiedCLOCK+0x19>
f010d7df:	b8 00 00 00 00       	mov    $0x0,%eax
f010d7e4:	5d                   	pop    %ebp
f010d7e5:	c3                   	ret    

f010d7e6 <isPageReplacmentAlgorithmDynamicLocal>:
/*2018*/ uint32 isPageReplacmentAlgorithmDynamicLocal(){if(_PageRepAlgoType == PG_REP_DYNAMIC_LOCAL) return 1; return 0;}
f010d7e6:	55                   	push   %ebp
f010d7e7:	89 e5                	mov    %esp,%ebp
f010d7e9:	a1 4c be 2b f0       	mov    0xf02bbe4c,%eax
f010d7ee:	83 f8 07             	cmp    $0x7,%eax
f010d7f1:	75 07                	jne    f010d7fa <isPageReplacmentAlgorithmDynamicLocal+0x14>
f010d7f3:	b8 01 00 00 00       	mov    $0x1,%eax
f010d7f8:	eb 05                	jmp    f010d7ff <isPageReplacmentAlgorithmDynamicLocal+0x19>
f010d7fa:	b8 00 00 00 00       	mov    $0x0,%eax
f010d7ff:	5d                   	pop    %ebp
f010d800:	c3                   	ret    

f010d801 <isPageReplacmentAlgorithmNchanceCLOCK>:
/*2021*/ uint32 isPageReplacmentAlgorithmNchanceCLOCK(){if(_PageRepAlgoType == PG_REP_NchanceCLOCK) return 1; return 0;}
f010d801:	55                   	push   %ebp
f010d802:	89 e5                	mov    %esp,%ebp
f010d804:	a1 4c be 2b f0       	mov    0xf02bbe4c,%eax
f010d809:	83 f8 06             	cmp    $0x6,%eax
f010d80c:	75 07                	jne    f010d815 <isPageReplacmentAlgorithmNchanceCLOCK+0x14>
f010d80e:	b8 01 00 00 00       	mov    $0x1,%eax
f010d813:	eb 05                	jmp    f010d81a <isPageReplacmentAlgorithmNchanceCLOCK+0x19>
f010d815:	b8 00 00 00 00       	mov    $0x0,%eax
f010d81a:	5d                   	pop    %ebp
f010d81b:	c3                   	ret    

f010d81c <enableModifiedBuffer>:

//===============================
// PAGE BUFFERING
//===============================
void enableModifiedBuffer(uint32 enableIt){_EnableModifiedBuffer = enableIt;}
f010d81c:	55                   	push   %ebp
f010d81d:	89 e5                	mov    %esp,%ebp
f010d81f:	8b 45 08             	mov    0x8(%ebp),%eax
f010d822:	a3 0c be 2b f0       	mov    %eax,0xf02bbe0c
f010d827:	90                   	nop
f010d828:	5d                   	pop    %ebp
f010d829:	c3                   	ret    

f010d82a <isModifiedBufferEnabled>:
uint8 isModifiedBufferEnabled(){  return _EnableModifiedBuffer ; }
f010d82a:	55                   	push   %ebp
f010d82b:	89 e5                	mov    %esp,%ebp
f010d82d:	a1 0c be 2b f0       	mov    0xf02bbe0c,%eax
f010d832:	5d                   	pop    %ebp
f010d833:	c3                   	ret    

f010d834 <enableBuffering>:

void enableBuffering(uint32 enableIt){_EnableBuffering = enableIt;}
f010d834:	55                   	push   %ebp
f010d835:	89 e5                	mov    %esp,%ebp
f010d837:	8b 45 08             	mov    0x8(%ebp),%eax
f010d83a:	a3 64 be 2b f0       	mov    %eax,0xf02bbe64
f010d83f:	90                   	nop
f010d840:	5d                   	pop    %ebp
f010d841:	c3                   	ret    

f010d842 <isBufferingEnabled>:
uint8 isBufferingEnabled(){  return _EnableBuffering ; }
f010d842:	55                   	push   %ebp
f010d843:	89 e5                	mov    %esp,%ebp
f010d845:	a1 64 be 2b f0       	mov    0xf02bbe64,%eax
f010d84a:	5d                   	pop    %ebp
f010d84b:	c3                   	ret    

f010d84c <setModifiedBufferLength>:

void setModifiedBufferLength(uint32 length) { _ModifiedBufferLength = length;}
f010d84c:	55                   	push   %ebp
f010d84d:	89 e5                	mov    %esp,%ebp
f010d84f:	8b 45 08             	mov    0x8(%ebp),%eax
f010d852:	a3 74 be 2b f0       	mov    %eax,0xf02bbe74
f010d857:	90                   	nop
f010d858:	5d                   	pop    %ebp
f010d859:	c3                   	ret    

f010d85a <getModifiedBufferLength>:
uint32 getModifiedBufferLength() { return _ModifiedBufferLength;}
f010d85a:	55                   	push   %ebp
f010d85b:	89 e5                	mov    %esp,%ebp
f010d85d:	a1 74 be 2b f0       	mov    0xf02bbe74,%eax
f010d862:	5d                   	pop    %ebp
f010d863:	c3                   	ret    

f010d864 <table_fault_handler>:
// FAULT HANDLERS
//===============================

//Handle the table fault
void table_fault_handler(struct Env * curenv, uint32 fault_va)
{
f010d864:	55                   	push   %ebp
f010d865:	89 e5                	mov    %esp,%ebp
f010d867:	83 ec 18             	sub    $0x18,%esp
	{
		ptr_table = create_page_table(curenv->env_page_directory, (uint32)fault_va);
	}
#else
	{
		__static_cpt(curenv->env_page_directory, (uint32)fault_va, &ptr_table);
f010d86a:	8b 45 08             	mov    0x8(%ebp),%eax
f010d86d:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010d873:	83 ec 04             	sub    $0x4,%esp
f010d876:	8d 55 f4             	lea    -0xc(%ebp),%edx
f010d879:	52                   	push   %edx
f010d87a:	ff 75 0c             	pushl  0xc(%ebp)
f010d87d:	50                   	push   %eax
f010d87e:	e8 8a 9d ff ff       	call   f010760d <__static_cpt>
f010d883:	83 c4 10             	add    $0x10,%esp
	}
#endif
}
f010d886:	90                   	nop
f010d887:	c9                   	leave  
f010d888:	c3                   	ret    

f010d889 <page_fault_handler>:

//Handle the page fault

void page_fault_handler(struct Env * curenv, uint32 fault_va)
{
f010d889:	55                   	push   %ebp
f010d88a:	89 e5                	mov    %esp,%ebp
f010d88c:	83 ec 18             	sub    $0x18,%esp
	uint32 wsSize = env_page_ws_get_size(curenv);
f010d88f:	83 ec 0c             	sub    $0xc,%esp
f010d892:	ff 75 08             	pushl  0x8(%ebp)
f010d895:	e8 bb a9 ff ff       	call   f0108255 <env_page_ws_get_size>
f010d89a:	83 c4 10             	add    $0x10,%esp
f010d89d:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if(wsSize < (curenv->page_WS_max_size))
f010d8a0:	8b 45 08             	mov    0x8(%ebp),%eax
f010d8a3:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f010d8a9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010d8ac:	76 14                	jbe    f010d8c2 <page_fault_handler+0x39>
	{
		//cprintf("PLACEMENT=========================WS Size = %d\n", wsSize );
		//TODO: [PROJECT'23.MS2 - #15] [3] PAGE FAULT HANDLER - Placement
		// Write your code here, remove the panic and write your code
		panic("page_fault_handler().PLACEMENT is not implemented yet...!!");
f010d8ae:	83 ec 04             	sub    $0x4,%esp
f010d8b1:	68 ec 38 13 f0       	push   $0xf01338ec
f010d8b6:	6a 55                	push   $0x55
f010d8b8:	68 cf 38 13 f0       	push   $0xf01338cf
f010d8bd:	e8 ee 28 ff ff       	call   f01001b0 <_panic>
	}
	else
	{
		//cprintf("REPLACEMENT=========================WS Size = %d\n", wsSize );
		//refer to the project presentation and documentation for details
		if(isPageReplacmentAlgorithmFIFO())
f010d8c2:	e8 e9 fe ff ff       	call   f010d7b0 <isPageReplacmentAlgorithmFIFO>
f010d8c7:	85 c0                	test   %eax,%eax
f010d8c9:	74 14                	je     f010d8df <page_fault_handler+0x56>
		{
			//TODO: [PROJECT'23.MS3 - #1] [1] PAGE FAULT HANDLER - FIFO Replacement
			// Write your code here, remove the panic and write your code
			panic("page_fault_handler() FIFO Replacement is not implemented yet...!!");
f010d8cb:	83 ec 04             	sub    $0x4,%esp
f010d8ce:	68 28 39 13 f0       	push   $0xf0133928
f010d8d3:	6a 61                	push   $0x61
f010d8d5:	68 cf 38 13 f0       	push   $0xf01338cf
f010d8da:	e8 d1 28 ff ff       	call   f01001b0 <_panic>
		}
		if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f010d8df:	83 ec 0c             	sub    $0xc,%esp
f010d8e2:	6a 02                	push   $0x2
f010d8e4:	e8 96 fe ff ff       	call   f010d77f <isPageReplacmentAlgorithmLRU>
f010d8e9:	83 c4 10             	add    $0x10,%esp
f010d8ec:	85 c0                	test   %eax,%eax
f010d8ee:	74 14                	je     f010d904 <page_fault_handler+0x7b>
		{
			//TODO: [PROJECT'23.MS3 - #2] [1] PAGE FAULT HANDLER - LRU Replacement
			// Write your code here, remove the panic and write your code
			panic("page_fault_handler() LRU Replacement is not implemented yet...!!");
f010d8f0:	83 ec 04             	sub    $0x4,%esp
f010d8f3:	68 6c 39 13 f0       	push   $0xf013396c
f010d8f8:	6a 67                	push   $0x67
f010d8fa:	68 cf 38 13 f0       	push   $0xf01338cf
f010d8ff:	e8 ac 28 ff ff       	call   f01001b0 <_panic>

			//TODO: [PROJECT'23.MS3 - BONUS] [1] PAGE FAULT HANDLER - O(1) implementation of LRU replacement
		}
	}
}
f010d904:	90                   	nop
f010d905:	c9                   	leave  
f010d906:	c3                   	ret    

f010d907 <__page_fault_handler_with_buffering>:

void __page_fault_handler_with_buffering(struct Env * curenv, uint32 fault_va)
{
f010d907:	55                   	push   %ebp
f010d908:	89 e5                	mov    %esp,%ebp
f010d90a:	83 ec 08             	sub    $0x8,%esp
	panic("this function is not required...!!");
f010d90d:	83 ec 04             	sub    $0x4,%esp
f010d910:	68 b0 39 13 f0       	push   $0xf01339b0
f010d915:	6a 70                	push   $0x70
f010d917:	68 cf 38 13 f0       	push   $0xf01338cf
f010d91c:	e8 8f 28 ff ff       	call   f01001b0 <_panic>

f010d921 <create_semaphores_array>:
// [1] Create "semaphores" array:
//===============================
//Dynamically allocate the "semaphores" array
//initialize the "semaphores" array by 0's and empty = 1
void create_semaphores_array(uint32 numOfSemaphores)
{
f010d921:	55                   	push   %ebp
f010d922:	89 e5                	mov    %esp,%ebp
f010d924:	83 ec 18             	sub    $0x18,%esp
	if (semaphores == NULL)
	{
		panic("Kernel runs out of memory\nCan't create the array of semaphores.");
	}
#endif
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010d927:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010d92e:	e9 aa 00 00 00       	jmp    f010d9dd <create_semaphores_array+0xbc>
	{
		memset(&(semaphores[i]), 0, sizeof(struct Semaphore));
f010d933:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d936:	89 d0                	mov    %edx,%eax
f010d938:	c1 e0 02             	shl    $0x2,%eax
f010d93b:	01 d0                	add    %edx,%eax
f010d93d:	01 c0                	add    %eax,%eax
f010d93f:	01 d0                	add    %edx,%eax
f010d941:	01 c0                	add    %eax,%eax
f010d943:	01 d0                	add    %edx,%eax
f010d945:	c1 e0 02             	shl    $0x2,%eax
f010d948:	05 e0 99 2b f0       	add    $0xf02b99e0,%eax
f010d94d:	83 ec 04             	sub    $0x4,%esp
f010d950:	6a 5c                	push   $0x5c
f010d952:	6a 00                	push   $0x0
f010d954:	50                   	push   %eax
f010d955:	e8 d1 16 02 00       	call   f012f02b <memset>
f010d95a:	83 c4 10             	add    $0x10,%esp
		semaphores[i].empty = 1;
f010d95d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d960:	89 d0                	mov    %edx,%eax
f010d962:	c1 e0 02             	shl    $0x2,%eax
f010d965:	01 d0                	add    %edx,%eax
f010d967:	01 c0                	add    %eax,%eax
f010d969:	01 d0                	add    %edx,%eax
f010d96b:	01 c0                	add    %eax,%eax
f010d96d:	01 d0                	add    %edx,%eax
f010d96f:	c1 e0 02             	shl    $0x2,%eax
f010d972:	05 38 9a 2b f0       	add    $0xf02b9a38,%eax
f010d977:	c6 00 01             	movb   $0x1,(%eax)
		LIST_INIT(&(semaphores[i].env_queue));
f010d97a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d97d:	89 d0                	mov    %edx,%eax
f010d97f:	c1 e0 02             	shl    $0x2,%eax
f010d982:	01 d0                	add    %edx,%eax
f010d984:	01 c0                	add    %eax,%eax
f010d986:	01 d0                	add    %edx,%eax
f010d988:	01 c0                	add    %eax,%eax
f010d98a:	01 d0                	add    %edx,%eax
f010d98c:	c1 e0 02             	shl    $0x2,%eax
f010d98f:	05 24 9a 2b f0       	add    $0xf02b9a24,%eax
f010d994:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010d99a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d99d:	89 d0                	mov    %edx,%eax
f010d99f:	c1 e0 02             	shl    $0x2,%eax
f010d9a2:	01 d0                	add    %edx,%eax
f010d9a4:	01 c0                	add    %eax,%eax
f010d9a6:	01 d0                	add    %edx,%eax
f010d9a8:	01 c0                	add    %eax,%eax
f010d9aa:	01 d0                	add    %edx,%eax
f010d9ac:	c1 e0 02             	shl    $0x2,%eax
f010d9af:	05 28 9a 2b f0       	add    $0xf02b9a28,%eax
f010d9b4:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010d9ba:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d9bd:	89 d0                	mov    %edx,%eax
f010d9bf:	c1 e0 02             	shl    $0x2,%eax
f010d9c2:	01 d0                	add    %edx,%eax
f010d9c4:	01 c0                	add    %eax,%eax
f010d9c6:	01 d0                	add    %edx,%eax
f010d9c8:	01 c0                	add    %eax,%eax
f010d9ca:	01 d0                	add    %edx,%eax
f010d9cc:	c1 e0 02             	shl    $0x2,%eax
f010d9cf:	05 30 9a 2b f0       	add    $0xf02b9a30,%eax
f010d9d4:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	if (semaphores == NULL)
	{
		panic("Kernel runs out of memory\nCan't create the array of semaphores.");
	}
#endif
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010d9da:	ff 45 f4             	incl   -0xc(%ebp)
f010d9dd:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
f010d9e1:	0f 8e 4c ff ff ff    	jle    f010d933 <create_semaphores_array+0x12>
		memset(&(semaphores[i]), 0, sizeof(struct Semaphore));
		semaphores[i].empty = 1;
		LIST_INIT(&(semaphores[i].env_queue));
	}

}
f010d9e7:	90                   	nop
f010d9e8:	c9                   	leave  
f010d9e9:	c3                   	ret    

f010d9ea <allocate_semaphore_object>:
//	a) if succeed:
//		1. allocatedSemaphore (pointer to struct Semaphore) passed by reference
//		2. SempahoreObjectID (its index in the array) as a return parameter
//	b) E_NO_SEMAPHORE if the the array of semaphores is full (i.e. reaches "MAX_SEMAPHORES")
int allocate_semaphore_object(struct Semaphore **allocatedObject)
{
f010d9ea:	55                   	push   %ebp
f010d9eb:	89 e5                	mov    %esp,%ebp
f010d9ed:	83 ec 10             	sub    $0x10,%esp
	int32 semaphoreObjectID = -1 ;
f010d9f0:	c7 45 fc ff ff ff ff 	movl   $0xffffffff,-0x4(%ebp)
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010d9f7:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
f010d9fe:	eb 2b                	jmp    f010da2b <allocate_semaphore_object+0x41>
	{
		if (semaphores[i].empty)
f010da00:	8b 55 f8             	mov    -0x8(%ebp),%edx
f010da03:	89 d0                	mov    %edx,%eax
f010da05:	c1 e0 02             	shl    $0x2,%eax
f010da08:	01 d0                	add    %edx,%eax
f010da0a:	01 c0                	add    %eax,%eax
f010da0c:	01 d0                	add    %edx,%eax
f010da0e:	01 c0                	add    %eax,%eax
f010da10:	01 d0                	add    %edx,%eax
f010da12:	c1 e0 02             	shl    $0x2,%eax
f010da15:	05 38 9a 2b f0       	add    $0xf02b9a38,%eax
f010da1a:	8a 00                	mov    (%eax),%al
f010da1c:	84 c0                	test   %al,%al
f010da1e:	74 08                	je     f010da28 <allocate_semaphore_object+0x3e>
		{
			semaphoreObjectID = i;
f010da20:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010da23:	89 45 fc             	mov    %eax,-0x4(%ebp)
			break;
f010da26:	eb 09                	jmp    f010da31 <allocate_semaphore_object+0x47>
//		2. SempahoreObjectID (its index in the array) as a return parameter
//	b) E_NO_SEMAPHORE if the the array of semaphores is full (i.e. reaches "MAX_SEMAPHORES")
int allocate_semaphore_object(struct Semaphore **allocatedObject)
{
	int32 semaphoreObjectID = -1 ;
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010da28:	ff 45 f8             	incl   -0x8(%ebp)
f010da2b:	83 7d f8 63          	cmpl   $0x63,-0x8(%ebp)
f010da2f:	7e cf                	jle    f010da00 <allocate_semaphore_object+0x16>
			semaphoreObjectID = i;
			break;
		}
	}

	if (semaphoreObjectID == -1)
f010da31:	83 7d fc ff          	cmpl   $0xffffffff,-0x4(%ebp)
f010da35:	75 07                	jne    f010da3e <allocate_semaphore_object+0x54>
	{
		return E_NO_SEMAPHORE ;
f010da37:	b8 f5 ff ff ff       	mov    $0xfffffff5,%eax
f010da3c:	eb 40                	jmp    f010da7e <allocate_semaphore_object+0x94>
//			return E_NO_SEMAPHORE;
//		}
//#endif
	}

	*allocatedObject = &(semaphores[semaphoreObjectID]);
f010da3e:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010da41:	89 d0                	mov    %edx,%eax
f010da43:	c1 e0 02             	shl    $0x2,%eax
f010da46:	01 d0                	add    %edx,%eax
f010da48:	01 c0                	add    %eax,%eax
f010da4a:	01 d0                	add    %edx,%eax
f010da4c:	01 c0                	add    %eax,%eax
f010da4e:	01 d0                	add    %edx,%eax
f010da50:	c1 e0 02             	shl    $0x2,%eax
f010da53:	8d 90 e0 99 2b f0    	lea    -0xfd46620(%eax),%edx
f010da59:	8b 45 08             	mov    0x8(%ebp),%eax
f010da5c:	89 10                	mov    %edx,(%eax)
	semaphores[semaphoreObjectID].empty = 0;
f010da5e:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010da61:	89 d0                	mov    %edx,%eax
f010da63:	c1 e0 02             	shl    $0x2,%eax
f010da66:	01 d0                	add    %edx,%eax
f010da68:	01 c0                	add    %eax,%eax
f010da6a:	01 d0                	add    %edx,%eax
f010da6c:	01 c0                	add    %eax,%eax
f010da6e:	01 d0                	add    %edx,%eax
f010da70:	c1 e0 02             	shl    $0x2,%eax
f010da73:	05 38 9a 2b f0       	add    $0xf02b9a38,%eax
f010da78:	c6 00 00             	movb   $0x0,(%eax)

	return semaphoreObjectID;
f010da7b:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f010da7e:	c9                   	leave  
f010da7f:	c3                   	ret    

f010da80 <get_semaphore_object_ID>:
//Search for the given semaphore object in the "semaphores" array
//Return:
//	a) if found: SemaphoreObjectID (index of the semaphore object in the array)
//	b) else: E_SEMAPHORE_NOT_EXISTS
int get_semaphore_object_ID(int32 ownerID, char* name)
{
f010da80:	55                   	push   %ebp
f010da81:	89 e5                	mov    %esp,%ebp
f010da83:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f010da86:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(; i < MAX_SEMAPHORES; ++i)
f010da8d:	eb 7a                	jmp    f010db09 <get_semaphore_object_ID+0x89>
	{
		if (semaphores[i].empty)
f010da8f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010da92:	89 d0                	mov    %edx,%eax
f010da94:	c1 e0 02             	shl    $0x2,%eax
f010da97:	01 d0                	add    %edx,%eax
f010da99:	01 c0                	add    %eax,%eax
f010da9b:	01 d0                	add    %edx,%eax
f010da9d:	01 c0                	add    %eax,%eax
f010da9f:	01 d0                	add    %edx,%eax
f010daa1:	c1 e0 02             	shl    $0x2,%eax
f010daa4:	05 38 9a 2b f0       	add    $0xf02b9a38,%eax
f010daa9:	8a 00                	mov    (%eax),%al
f010daab:	84 c0                	test   %al,%al
f010daad:	75 56                	jne    f010db05 <get_semaphore_object_ID+0x85>
			continue;

		if(semaphores[i].ownerID == ownerID && strcmp(name, semaphores[i].name)==0)
f010daaf:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010dab2:	89 d0                	mov    %edx,%eax
f010dab4:	c1 e0 02             	shl    $0x2,%eax
f010dab7:	01 d0                	add    %edx,%eax
f010dab9:	01 c0                	add    %eax,%eax
f010dabb:	01 d0                	add    %edx,%eax
f010dabd:	01 c0                	add    %eax,%eax
f010dabf:	01 d0                	add    %edx,%eax
f010dac1:	c1 e0 02             	shl    $0x2,%eax
f010dac4:	05 e0 99 2b f0       	add    $0xf02b99e0,%eax
f010dac9:	8b 00                	mov    (%eax),%eax
f010dacb:	3b 45 08             	cmp    0x8(%ebp),%eax
f010dace:	75 36                	jne    f010db06 <get_semaphore_object_ID+0x86>
f010dad0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010dad3:	89 d0                	mov    %edx,%eax
f010dad5:	c1 e0 02             	shl    $0x2,%eax
f010dad8:	01 d0                	add    %edx,%eax
f010dada:	01 c0                	add    %eax,%eax
f010dadc:	01 d0                	add    %edx,%eax
f010dade:	01 c0                	add    %eax,%eax
f010dae0:	01 d0                	add    %edx,%eax
f010dae2:	c1 e0 02             	shl    $0x2,%eax
f010dae5:	05 e0 99 2b f0       	add    $0xf02b99e0,%eax
f010daea:	83 c0 04             	add    $0x4,%eax
f010daed:	83 ec 08             	sub    $0x8,%esp
f010daf0:	50                   	push   %eax
f010daf1:	ff 75 0c             	pushl  0xc(%ebp)
f010daf4:	e8 50 14 02 00       	call   f012ef49 <strcmp>
f010daf9:	83 c4 10             	add    $0x10,%esp
f010dafc:	85 c0                	test   %eax,%eax
f010dafe:	75 06                	jne    f010db06 <get_semaphore_object_ID+0x86>
		{
			return i;
f010db00:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010db03:	eb 0f                	jmp    f010db14 <get_semaphore_object_ID+0x94>
{
	int i=0;
	for(; i < MAX_SEMAPHORES; ++i)
	{
		if (semaphores[i].empty)
			continue;
f010db05:	90                   	nop
//	a) if found: SemaphoreObjectID (index of the semaphore object in the array)
//	b) else: E_SEMAPHORE_NOT_EXISTS
int get_semaphore_object_ID(int32 ownerID, char* name)
{
	int i=0;
	for(; i < MAX_SEMAPHORES; ++i)
f010db06:	ff 45 f4             	incl   -0xc(%ebp)
f010db09:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
f010db0d:	7e 80                	jle    f010da8f <get_semaphore_object_ID+0xf>
		if(semaphores[i].ownerID == ownerID && strcmp(name, semaphores[i].name)==0)
		{
			return i;
		}
	}
	return E_SEMAPHORE_NOT_EXISTS;
f010db0f:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
}
f010db14:	c9                   	leave  
f010db15:	c3                   	ret    

f010db16 <free_semaphore_object>:
//delete the semaphore with the given ID from the "semaphores" array
//Return:
//	a) 0 if succeed
//	b) E_SEMAPHORE_NOT_EXISTS if the semaphore is not exists
int free_semaphore_object(uint32 semaphoreObjectID)
{
f010db16:	55                   	push   %ebp
f010db17:	89 e5                	mov    %esp,%ebp
f010db19:	83 ec 08             	sub    $0x8,%esp
	if (semaphoreObjectID >= MAX_SEMAPHORES)
f010db1c:	83 7d 08 63          	cmpl   $0x63,0x8(%ebp)
f010db20:	76 0a                	jbe    f010db2c <free_semaphore_object+0x16>
		return E_SEMAPHORE_NOT_EXISTS;
f010db22:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
f010db27:	e9 ac 00 00 00       	jmp    f010dbd8 <free_semaphore_object+0xc2>

	memset(&(semaphores[semaphoreObjectID]), 0, sizeof(struct Semaphore));
f010db2c:	8b 55 08             	mov    0x8(%ebp),%edx
f010db2f:	89 d0                	mov    %edx,%eax
f010db31:	c1 e0 02             	shl    $0x2,%eax
f010db34:	01 d0                	add    %edx,%eax
f010db36:	01 c0                	add    %eax,%eax
f010db38:	01 d0                	add    %edx,%eax
f010db3a:	01 c0                	add    %eax,%eax
f010db3c:	01 d0                	add    %edx,%eax
f010db3e:	c1 e0 02             	shl    $0x2,%eax
f010db41:	05 e0 99 2b f0       	add    $0xf02b99e0,%eax
f010db46:	83 ec 04             	sub    $0x4,%esp
f010db49:	6a 5c                	push   $0x5c
f010db4b:	6a 00                	push   $0x0
f010db4d:	50                   	push   %eax
f010db4e:	e8 d8 14 02 00       	call   f012f02b <memset>
f010db53:	83 c4 10             	add    $0x10,%esp
	semaphores[semaphoreObjectID].empty = 1;
f010db56:	8b 55 08             	mov    0x8(%ebp),%edx
f010db59:	89 d0                	mov    %edx,%eax
f010db5b:	c1 e0 02             	shl    $0x2,%eax
f010db5e:	01 d0                	add    %edx,%eax
f010db60:	01 c0                	add    %eax,%eax
f010db62:	01 d0                	add    %edx,%eax
f010db64:	01 c0                	add    %eax,%eax
f010db66:	01 d0                	add    %edx,%eax
f010db68:	c1 e0 02             	shl    $0x2,%eax
f010db6b:	05 38 9a 2b f0       	add    $0xf02b9a38,%eax
f010db70:	c6 00 01             	movb   $0x1,(%eax)
	LIST_INIT(&(semaphores[semaphoreObjectID].env_queue));
f010db73:	8b 55 08             	mov    0x8(%ebp),%edx
f010db76:	89 d0                	mov    %edx,%eax
f010db78:	c1 e0 02             	shl    $0x2,%eax
f010db7b:	01 d0                	add    %edx,%eax
f010db7d:	01 c0                	add    %eax,%eax
f010db7f:	01 d0                	add    %edx,%eax
f010db81:	01 c0                	add    %eax,%eax
f010db83:	01 d0                	add    %edx,%eax
f010db85:	c1 e0 02             	shl    $0x2,%eax
f010db88:	05 24 9a 2b f0       	add    $0xf02b9a24,%eax
f010db8d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010db93:	8b 55 08             	mov    0x8(%ebp),%edx
f010db96:	89 d0                	mov    %edx,%eax
f010db98:	c1 e0 02             	shl    $0x2,%eax
f010db9b:	01 d0                	add    %edx,%eax
f010db9d:	01 c0                	add    %eax,%eax
f010db9f:	01 d0                	add    %edx,%eax
f010dba1:	01 c0                	add    %eax,%eax
f010dba3:	01 d0                	add    %edx,%eax
f010dba5:	c1 e0 02             	shl    $0x2,%eax
f010dba8:	05 28 9a 2b f0       	add    $0xf02b9a28,%eax
f010dbad:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010dbb3:	8b 55 08             	mov    0x8(%ebp),%edx
f010dbb6:	89 d0                	mov    %edx,%eax
f010dbb8:	c1 e0 02             	shl    $0x2,%eax
f010dbbb:	01 d0                	add    %edx,%eax
f010dbbd:	01 c0                	add    %eax,%eax
f010dbbf:	01 d0                	add    %edx,%eax
f010dbc1:	01 c0                	add    %eax,%eax
f010dbc3:	01 d0                	add    %edx,%eax
f010dbc5:	c1 e0 02             	shl    $0x2,%eax
f010dbc8:	05 30 9a 2b f0       	add    $0xf02b9a30,%eax
f010dbcd:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

	return 0;
f010dbd3:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010dbd8:	c9                   	leave  
f010dbd9:	c3                   	ret    

f010dbda <createSemaphore>:

//======================
// [1] Create Semaphore:
//======================
int createSemaphore(int32 ownerEnvID, char* semaphoreName, uint32 initialValue)
{
f010dbda:	55                   	push   %ebp
f010dbdb:	89 e5                	mov    %esp,%ebp
f010dbdd:	83 ec 08             	sub    $0x8,%esp
	panic("createSemaphore() is not implemented yet...!!");
f010dbe0:	83 ec 04             	sub    $0x4,%esp
f010dbe3:	68 d4 39 13 f0       	push   $0xf01339d4
f010dbe8:	68 95 00 00 00       	push   $0x95
f010dbed:	68 02 3a 13 f0       	push   $0xf0133a02
f010dbf2:	e8 b9 25 ff ff       	call   f01001b0 <_panic>

f010dbf7 <waitSemaphore>:

//============
// [2] Wait():
//============
void waitSemaphore(int32 ownerEnvID, char* semaphoreName)
{
f010dbf7:	55                   	push   %ebp
f010dbf8:	89 e5                	mov    %esp,%ebp
f010dbfa:	83 ec 08             	sub    $0x8,%esp
	panic("waitSemaphore() is not implemented yet...!!");
f010dbfd:	83 ec 04             	sub    $0x4,%esp
f010dc00:	68 20 3a 13 f0       	push   $0xf0133a20
f010dc05:	68 9e 00 00 00       	push   $0x9e
f010dc0a:	68 02 3a 13 f0       	push   $0xf0133a02
f010dc0f:	e8 9c 25 ff ff       	call   f01001b0 <_panic>

f010dc14 <signalSemaphore>:

//==============
// [3] Signal():
//==============
void signalSemaphore(int ownerEnvID, char* semaphoreName)
{
f010dc14:	55                   	push   %ebp
f010dc15:	89 e5                	mov    %esp,%ebp
f010dc17:	83 ec 08             	sub    $0x8,%esp
	panic("signalSemaphore() is not implemented yet...!!");
f010dc1a:	83 ec 04             	sub    $0x4,%esp
f010dc1d:	68 4c 3a 13 f0       	push   $0xf0133a4c
f010dc22:	68 a6 00 00 00       	push   $0xa6
f010dc27:	68 02 3a 13 f0       	push   $0xf0133a02
f010dc2c:	e8 7f 25 ff ff       	call   f01001b0 <_panic>

f010dc31 <setKHeapPlacementStrategyFIRSTFIT>:
#define KHP_PLACE_BESTFIT 	0x2
#define KHP_PLACE_NEXTFIT 	0x3
#define KHP_PLACE_WORSTFIT 	0x4

static inline void setKHeapPlacementStrategyCONTALLOC(){_KHeapPlacementStrategy = KHP_PLACE_CONTALLOC;}
static inline void setKHeapPlacementStrategyFIRSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_FIRSTFIT;}
f010dc31:	55                   	push   %ebp
f010dc32:	89 e5                	mov    %esp,%ebp
f010dc34:	c7 05 18 be 2b f0 01 	movl   $0x1,0xf02bbe18
f010dc3b:	00 00 00 
f010dc3e:	90                   	nop
f010dc3f:	5d                   	pop    %ebp
f010dc40:	c3                   	ret    

f010dc41 <setKHeapPlacementStrategyBESTFIT>:
static inline void setKHeapPlacementStrategyBESTFIT(){_KHeapPlacementStrategy = KHP_PLACE_BESTFIT;}
f010dc41:	55                   	push   %ebp
f010dc42:	89 e5                	mov    %esp,%ebp
f010dc44:	c7 05 18 be 2b f0 02 	movl   $0x2,0xf02bbe18
f010dc4b:	00 00 00 
f010dc4e:	90                   	nop
f010dc4f:	5d                   	pop    %ebp
f010dc50:	c3                   	ret    

f010dc51 <setKHeapPlacementStrategyNEXTFIT>:
static inline void setKHeapPlacementStrategyNEXTFIT(){_KHeapPlacementStrategy = KHP_PLACE_NEXTFIT;}
f010dc51:	55                   	push   %ebp
f010dc52:	89 e5                	mov    %esp,%ebp
f010dc54:	c7 05 18 be 2b f0 03 	movl   $0x3,0xf02bbe18
f010dc5b:	00 00 00 
f010dc5e:	90                   	nop
f010dc5f:	5d                   	pop    %ebp
f010dc60:	c3                   	ret    

f010dc61 <isKHeapPlacementStrategyFIRSTFIT>:
static inline void setKHeapPlacementStrategyWORSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_WORSTFIT;}

static inline uint8 isKHeapPlacementStrategyCONTALLOC(){if(_KHeapPlacementStrategy == KHP_PLACE_CONTALLOC) return 1; return 0;}
static inline uint8 isKHeapPlacementStrategyFIRSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_FIRSTFIT) return 1; return 0;}
f010dc61:	55                   	push   %ebp
f010dc62:	89 e5                	mov    %esp,%ebp
f010dc64:	a1 18 be 2b f0       	mov    0xf02bbe18,%eax
f010dc69:	83 f8 01             	cmp    $0x1,%eax
f010dc6c:	75 04                	jne    f010dc72 <isKHeapPlacementStrategyFIRSTFIT+0x11>
f010dc6e:	b0 01                	mov    $0x1,%al
f010dc70:	eb 02                	jmp    f010dc74 <isKHeapPlacementStrategyFIRSTFIT+0x13>
f010dc72:	b0 00                	mov    $0x0,%al
f010dc74:	5d                   	pop    %ebp
f010dc75:	c3                   	ret    

f010dc76 <isKHeapPlacementStrategyBESTFIT>:
static inline uint8 isKHeapPlacementStrategyBESTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_BESTFIT) return 1; return 0;}
f010dc76:	55                   	push   %ebp
f010dc77:	89 e5                	mov    %esp,%ebp
f010dc79:	a1 18 be 2b f0       	mov    0xf02bbe18,%eax
f010dc7e:	83 f8 02             	cmp    $0x2,%eax
f010dc81:	75 04                	jne    f010dc87 <isKHeapPlacementStrategyBESTFIT+0x11>
f010dc83:	b0 01                	mov    $0x1,%al
f010dc85:	eb 02                	jmp    f010dc89 <isKHeapPlacementStrategyBESTFIT+0x13>
f010dc87:	b0 00                	mov    $0x0,%al
f010dc89:	5d                   	pop    %ebp
f010dc8a:	c3                   	ret    

f010dc8b <isKHeapPlacementStrategyNEXTFIT>:
static inline uint8 isKHeapPlacementStrategyNEXTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_NEXTFIT) return 1; return 0;}
f010dc8b:	55                   	push   %ebp
f010dc8c:	89 e5                	mov    %esp,%ebp
f010dc8e:	a1 18 be 2b f0       	mov    0xf02bbe18,%eax
f010dc93:	83 f8 03             	cmp    $0x3,%eax
f010dc96:	75 04                	jne    f010dc9c <isKHeapPlacementStrategyNEXTFIT+0x11>
f010dc98:	b0 01                	mov    $0x1,%al
f010dc9a:	eb 02                	jmp    f010dc9e <isKHeapPlacementStrategyNEXTFIT+0x13>
f010dc9c:	b0 00                	mov    $0x0,%al
f010dc9e:	5d                   	pop    %ebp
f010dc9f:	c3                   	ret    

f010dca0 <tst_handler>:

//=================//
/*Test MAIN Handler*/
//=================//
int tst_handler(int number_of_arguments, char **arguments)
{
f010dca0:	55                   	push   %ebp
f010dca1:	89 e5                	mov    %esp,%ebp
f010dca3:	83 ec 18             	sub    $0x18,%esp
	//Remove "tst" from arguments
	for (int a = 0; a < number_of_arguments - 1; ++a)
f010dca6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010dcad:	eb 26                	jmp    f010dcd5 <tst_handler+0x35>
	{
		arguments[a] = arguments[a+1] ;
f010dcaf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010dcb2:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010dcb9:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dcbc:	01 c2                	add    %eax,%edx
f010dcbe:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010dcc1:	40                   	inc    %eax
f010dcc2:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010dcc9:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dccc:	01 c8                	add    %ecx,%eax
f010dcce:	8b 00                	mov    (%eax),%eax
f010dcd0:	89 02                	mov    %eax,(%edx)
/*Test MAIN Handler*/
//=================//
int tst_handler(int number_of_arguments, char **arguments)
{
	//Remove "tst" from arguments
	for (int a = 0; a < number_of_arguments - 1; ++a)
f010dcd2:	ff 45 f4             	incl   -0xc(%ebp)
f010dcd5:	8b 45 08             	mov    0x8(%ebp),%eax
f010dcd8:	48                   	dec    %eax
f010dcd9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010dcdc:	7f d1                	jg     f010dcaf <tst_handler+0xf>
	{
		arguments[a] = arguments[a+1] ;
	}
	number_of_arguments--;
f010dcde:	ff 4d 08             	decl   0x8(%ebp)

	//Check name of the given test and execute its corresponding function
	int test_found = 0;
f010dce1:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	int i ;
	for (i = 0; i < NUM_OF_TESTS; i++)
f010dce8:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f010dcef:	eb 35                	jmp    f010dd26 <tst_handler+0x86>
	{
		if (strcmp(arguments[0], tests[i].name) == 0)
f010dcf1:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010dcf4:	89 d0                	mov    %edx,%eax
f010dcf6:	01 c0                	add    %eax,%eax
f010dcf8:	01 d0                	add    %edx,%eax
f010dcfa:	c1 e0 02             	shl    $0x2,%eax
f010dcfd:	05 80 ea 18 f0       	add    $0xf018ea80,%eax
f010dd02:	8b 10                	mov    (%eax),%edx
f010dd04:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dd07:	8b 00                	mov    (%eax),%eax
f010dd09:	83 ec 08             	sub    $0x8,%esp
f010dd0c:	52                   	push   %edx
f010dd0d:	50                   	push   %eax
f010dd0e:	e8 36 12 02 00       	call   f012ef49 <strcmp>
f010dd13:	83 c4 10             	add    $0x10,%esp
f010dd16:	85 c0                	test   %eax,%eax
f010dd18:	75 09                	jne    f010dd23 <tst_handler+0x83>
		{
			test_found = 1;
f010dd1a:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
			break;
f010dd21:	eb 0f                	jmp    f010dd32 <tst_handler+0x92>
	number_of_arguments--;

	//Check name of the given test and execute its corresponding function
	int test_found = 0;
	int i ;
	for (i = 0; i < NUM_OF_TESTS; i++)
f010dd23:	ff 45 ec             	incl   -0x14(%ebp)
f010dd26:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010dd29:	a1 1c eb 18 f0       	mov    0xf018eb1c,%eax
f010dd2e:	39 c2                	cmp    %eax,%edx
f010dd30:	72 bf                	jb     f010dcf1 <tst_handler+0x51>
			test_found = 1;
			break;
		}
	}

	if(test_found)
f010dd32:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010dd36:	74 29                	je     f010dd61 <tst_handler+0xc1>
	{
		int return_value;
		return_value = tests[i].function_to_execute(number_of_arguments, arguments);
f010dd38:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010dd3b:	89 d0                	mov    %edx,%eax
f010dd3d:	01 c0                	add    %eax,%eax
f010dd3f:	01 d0                	add    %edx,%eax
f010dd41:	c1 e0 02             	shl    $0x2,%eax
f010dd44:	05 88 ea 18 f0       	add    $0xf018ea88,%eax
f010dd49:	8b 00                	mov    (%eax),%eax
f010dd4b:	83 ec 08             	sub    $0x8,%esp
f010dd4e:	ff 75 0c             	pushl  0xc(%ebp)
f010dd51:	ff 75 08             	pushl  0x8(%ebp)
f010dd54:	ff d0                	call   *%eax
f010dd56:	83 c4 10             	add    $0x10,%esp
f010dd59:	89 45 e8             	mov    %eax,-0x18(%ebp)
		return return_value;
f010dd5c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010dd5f:	eb 1b                	jmp    f010dd7c <tst_handler+0xdc>
	}
	else
	{
		cprintf("Unknown test '%s'\n", arguments[0]);
f010dd61:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dd64:	8b 00                	mov    (%eax),%eax
f010dd66:	83 ec 08             	sub    $0x8,%esp
f010dd69:	50                   	push   %eax
f010dd6a:	68 00 3d 13 f0       	push   $0xf0133d00
f010dd6f:	e8 bd 30 ff ff       	call   f0100e31 <cprintf>
f010dd74:	83 c4 10             	add    $0x10,%esp
		return 0;
f010dd77:	b8 00 00 00 00       	mov    $0x0,%eax
	}
}
f010dd7c:	c9                   	leave  
f010dd7d:	c3                   	ret    

f010dd7e <tst_three_creation_functions>:

//=================//
/*TESTING Functions*/
//=================//
int tst_three_creation_functions(int number_of_arguments, char **arguments)
{
f010dd7e:	55                   	push   %ebp
f010dd7f:	89 e5                	mov    %esp,%ebp
f010dd81:	83 ec 08             	sub    $0x8,%esp
	test_three_creation_functions();
f010dd84:	e8 3d 70 01 00       	call   f0124dc6 <test_three_creation_functions>
	return 0;
f010dd89:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010dd8e:	c9                   	leave  
f010dd8f:	c3                   	ret    

f010dd90 <tst_priority1>:

int tst_priority1(int number_of_arguments, char **arguments)
{
f010dd90:	55                   	push   %ebp
f010dd91:	89 e5                	mov    %esp,%ebp
f010dd93:	83 ec 08             	sub    $0x8,%esp
	test_priority_normal_and_higher();
f010dd96:	e8 ff 91 00 00       	call   f0116f9a <test_priority_normal_and_higher>
	return 0;
f010dd9b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010dda0:	c9                   	leave  
f010dda1:	c3                   	ret    

f010dda2 <tst_priority2>:

int tst_priority2(int number_of_arguments, char **arguments)
{
f010dda2:	55                   	push   %ebp
f010dda3:	89 e5                	mov    %esp,%ebp
f010dda5:	83 ec 08             	sub    $0x8,%esp
	test_priority_normal_and_lower();
f010dda8:	e8 57 9c 00 00       	call   f0117a04 <test_priority_normal_and_lower>
	return 0;
f010ddad:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010ddb2:	c9                   	leave  
f010ddb3:	c3                   	ret    

f010ddb4 <tst_kfreeall>:

int tst_kfreeall(int number_of_arguments, char **arguments)
{
f010ddb4:	55                   	push   %ebp
f010ddb5:	89 e5                	mov    %esp,%ebp
f010ddb7:	83 ec 08             	sub    $0x8,%esp
	test_kfreeall();
f010ddba:	e8 1b 72 01 00       	call   f0124fda <test_kfreeall>
	return 0;
f010ddbf:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010ddc4:	c9                   	leave  
f010ddc5:	c3                   	ret    

f010ddc6 <tst_kexpand>:

int tst_kexpand(int number_of_arguments, char **arguments)
{
f010ddc6:	55                   	push   %ebp
f010ddc7:	89 e5                	mov    %esp,%ebp
f010ddc9:	83 ec 08             	sub    $0x8,%esp
	test_kexpand();
f010ddcc:	e8 a3 86 01 00       	call   f0126474 <test_kexpand>
	return 0;
f010ddd1:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010ddd6:	c9                   	leave  
f010ddd7:	c3                   	ret    

f010ddd8 <tst_kshrink>:

int tst_kshrink(int number_of_arguments, char **arguments)
{
f010ddd8:	55                   	push   %ebp
f010ddd9:	89 e5                	mov    %esp,%ebp
f010dddb:	83 ec 08             	sub    $0x8,%esp
	test_kshrink();
f010ddde:	e8 62 92 01 00       	call   f0127045 <test_kshrink>
	return 0;
f010dde3:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010dde8:	c9                   	leave  
f010dde9:	c3                   	ret    

f010ddea <tst_kfreelast>:

int tst_kfreelast(int number_of_arguments, char **arguments)
{
f010ddea:	55                   	push   %ebp
f010ddeb:	89 e5                	mov    %esp,%ebp
f010dded:	83 ec 08             	sub    $0x8,%esp
	test_kfreelast();
f010ddf0:	e8 57 9f 01 00       	call   f0127d4c <test_kfreelast>
	return 0;
f010ddf5:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010ddfa:	c9                   	leave  
f010ddfb:	c3                   	ret    

f010ddfc <tst_sc_MLFQ>:

int tst_sc_MLFQ(int number_of_arguments, char **arguments)
{
f010ddfc:	55                   	push   %ebp
f010ddfd:	89 e5                	mov    %esp,%ebp
f010ddff:	83 ec 18             	sub    $0x18,%esp
	int numOfSlave2 = strtol(arguments[1], NULL, 10);
f010de02:	8b 45 0c             	mov    0xc(%ebp),%eax
f010de05:	83 c0 04             	add    $0x4,%eax
f010de08:	8b 00                	mov    (%eax),%eax
f010de0a:	83 ec 04             	sub    $0x4,%esp
f010de0d:	6a 0a                	push   $0xa
f010de0f:	6a 00                	push   $0x0
f010de11:	50                   	push   %eax
f010de12:	e8 86 13 02 00       	call   f012f19d <strtol>
f010de17:	83 c4 10             	add    $0x10,%esp
f010de1a:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int cnt = 0 ;
f010de1d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int firstTime = 1;
f010de24:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	struct Env *e ;
	LIST_FOREACH(e, &env_exit_queue)
f010de2b:	a1 c4 99 2b f0       	mov    0xf02b99c4,%eax
f010de30:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010de33:	eb 3b                	jmp    f010de70 <tst_sc_MLFQ+0x74>
	{
		if (strcmp(e->prog_name, "tmlfq_2") == 0)
f010de35:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010de38:	83 c0 5c             	add    $0x5c,%eax
f010de3b:	83 ec 08             	sub    $0x8,%esp
f010de3e:	68 13 3d 13 f0       	push   $0xf0133d13
f010de43:	50                   	push   %eax
f010de44:	e8 00 11 02 00       	call   f012ef49 <strcmp>
f010de49:	83 c4 10             	add    $0x10,%esp
f010de4c:	85 c0                	test   %eax,%eax
f010de4e:	75 12                	jne    f010de62 <tst_sc_MLFQ+0x66>
		{
			if (firstTime)
f010de50:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010de54:	74 07                	je     f010de5d <tst_sc_MLFQ+0x61>
				firstTime = 0;
f010de56:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cnt++ ;
f010de5d:	ff 45 f4             	incl   -0xc(%ebp)
f010de60:	eb 06                	jmp    f010de68 <tst_sc_MLFQ+0x6c>
		}
		else if (!firstTime)
f010de62:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010de66:	74 31                	je     f010de99 <tst_sc_MLFQ+0x9d>
{
	int numOfSlave2 = strtol(arguments[1], NULL, 10);
	int cnt = 0 ;
	int firstTime = 1;
	struct Env *e ;
	LIST_FOREACH(e, &env_exit_queue)
f010de68:	a1 cc 99 2b f0       	mov    0xf02b99cc,%eax
f010de6d:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010de70:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f010de74:	74 08                	je     f010de7e <tst_sc_MLFQ+0x82>
f010de76:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010de79:	8b 40 44             	mov    0x44(%eax),%eax
f010de7c:	eb 05                	jmp    f010de83 <tst_sc_MLFQ+0x87>
f010de7e:	b8 00 00 00 00       	mov    $0x0,%eax
f010de83:	a3 cc 99 2b f0       	mov    %eax,0xf02b99cc
f010de88:	a1 cc 99 2b f0       	mov    0xf02b99cc,%eax
f010de8d:	85 c0                	test   %eax,%eax
f010de8f:	75 a4                	jne    f010de35 <tst_sc_MLFQ+0x39>
f010de91:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f010de95:	75 9e                	jne    f010de35 <tst_sc_MLFQ+0x39>
f010de97:	eb 01                	jmp    f010de9a <tst_sc_MLFQ+0x9e>
			if (firstTime)
				firstTime = 0;
			cnt++ ;
		}
		else if (!firstTime)
			break;
f010de99:	90                   	nop
	}
	if(cnt == numOfSlave2)
f010de9a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010de9d:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f010dea0:	75 12                	jne    f010deb4 <tst_sc_MLFQ+0xb8>
	{
		cprintf("Congratulations... MLFQScenario# completed successfully\n");
f010dea2:	83 ec 0c             	sub    $0xc,%esp
f010dea5:	68 1c 3d 13 f0       	push   $0xf0133d1c
f010deaa:	e8 82 2f ff ff       	call   f0100e31 <cprintf>
f010deaf:	83 c4 10             	add    $0x10,%esp
f010deb2:	eb 17                	jmp    f010decb <tst_sc_MLFQ+0xcf>
	}
	else
	{
		panic("MLFQScenario# failed\n");
f010deb4:	83 ec 04             	sub    $0x4,%esp
f010deb7:	68 55 3d 13 f0       	push   $0xf0133d55
f010debc:	68 94 00 00 00       	push   $0x94
f010dec1:	68 6b 3d 13 f0       	push   $0xf0133d6b
f010dec6:	e8 e5 22 ff ff       	call   f01001b0 <_panic>
	}
	return 0;
f010decb:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010ded0:	c9                   	leave  
f010ded1:	c3                   	ret    

f010ded2 <tst_autocomplete>:


/*2022*/
int tst_autocomplete(int number_of_arguments, char **arguments)
{
f010ded2:	55                   	push   %ebp
f010ded3:	89 e5                	mov    %esp,%ebp
f010ded5:	83 ec 18             	sub    $0x18,%esp
	int x = TestAutoCompleteCommand();
f010ded8:	e8 80 3d 00 00       	call   f0111c5d <TestAutoCompleteCommand>
f010dedd:	89 45 f4             	mov    %eax,-0xc(%ebp)
	return 0;
f010dee0:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010dee5:	c9                   	leave  
f010dee6:	c3                   	ret    

f010dee7 <tst_dyn_alloc>:
int tst_dyn_alloc(int number_of_arguments, char **arguments)
{
f010dee7:	55                   	push   %ebp
f010dee8:	89 e5                	mov    %esp,%ebp
f010deea:	83 ec 08             	sub    $0x8,%esp
	if (number_of_arguments != 2)
f010deed:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010def1:	74 1a                	je     f010df0d <tst_dyn_alloc+0x26>
	{
		cprintf("Invalid number of arguments! USAGE: tst dynalloc <testname>\n") ;
f010def3:	83 ec 0c             	sub    $0xc,%esp
f010def6:	68 84 3d 13 f0       	push   $0xf0133d84
f010defb:	e8 31 2f ff ff       	call   f0100e31 <cprintf>
f010df00:	83 c4 10             	add    $0x10,%esp
		return 0;
f010df03:	b8 00 00 00 00       	mov    $0x0,%eax
f010df08:	e9 2f 01 00 00       	jmp    f010e03c <tst_dyn_alloc+0x155>
	}
	//str2lower(arguments[1]);
	// Test 1 Example for initialize_MemBlocksList: tstdynalloc init
	if(strcmp(arguments[1], "init") == 0)
f010df0d:	8b 45 0c             	mov    0xc(%ebp),%eax
f010df10:	83 c0 04             	add    $0x4,%eax
f010df13:	8b 00                	mov    (%eax),%eax
f010df15:	83 ec 08             	sub    $0x8,%esp
f010df18:	68 c1 3d 13 f0       	push   $0xf0133dc1
f010df1d:	50                   	push   %eax
f010df1e:	e8 26 10 02 00       	call   f012ef49 <strcmp>
f010df23:	83 c4 10             	add    $0x10,%esp
f010df26:	85 c0                	test   %eax,%eax
f010df28:	75 0a                	jne    f010df34 <tst_dyn_alloc+0x4d>
	{
		test_initialize_dynamic_allocator();
f010df2a:	e8 80 06 00 00       	call   f010e5af <test_initialize_dynamic_allocator>
f010df2f:	e9 03 01 00 00       	jmp    f010e037 <tst_dyn_alloc+0x150>
	}
	// Test 2 Example for alloc_block_FF: tstdynalloc allocFF
	else if(strcmp(arguments[1], "allocff") == 0)
f010df34:	8b 45 0c             	mov    0xc(%ebp),%eax
f010df37:	83 c0 04             	add    $0x4,%eax
f010df3a:	8b 00                	mov    (%eax),%eax
f010df3c:	83 ec 08             	sub    $0x8,%esp
f010df3f:	68 c6 3d 13 f0       	push   $0xf0133dc6
f010df44:	50                   	push   %eax
f010df45:	e8 ff 0f 02 00       	call   f012ef49 <strcmp>
f010df4a:	83 c4 10             	add    $0x10,%esp
f010df4d:	85 c0                	test   %eax,%eax
f010df4f:	75 0a                	jne    f010df5b <tst_dyn_alloc+0x74>
	{
		test_alloc_block_FF();
f010df51:	e8 a1 0a 00 00       	call   f010e9f7 <test_alloc_block_FF>
f010df56:	e9 dc 00 00 00       	jmp    f010e037 <tst_dyn_alloc+0x150>
	}
	// Test 3 Example for alloc_block_BF: tstdynalloc allocBF
	else if(strcmp(arguments[1], "allocbf") == 0)
f010df5b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010df5e:	83 c0 04             	add    $0x4,%eax
f010df61:	8b 00                	mov    (%eax),%eax
f010df63:	83 ec 08             	sub    $0x8,%esp
f010df66:	68 ce 3d 13 f0       	push   $0xf0133dce
f010df6b:	50                   	push   %eax
f010df6c:	e8 d8 0f 02 00       	call   f012ef49 <strcmp>
f010df71:	83 c4 10             	add    $0x10,%esp
f010df74:	85 c0                	test   %eax,%eax
f010df76:	75 0a                	jne    f010df82 <tst_dyn_alloc+0x9b>
	{
		test_alloc_block_BF();
f010df78:	e8 84 0e 00 00       	call   f010ee01 <test_alloc_block_BF>
f010df7d:	e9 b5 00 00 00       	jmp    f010e037 <tst_dyn_alloc+0x150>
	}
	// Test 4 Example for alloc_block_NF: tstdynalloc allocNF
	else if(strcmp(arguments[1], "allocnf") == 0)
f010df82:	8b 45 0c             	mov    0xc(%ebp),%eax
f010df85:	83 c0 04             	add    $0x4,%eax
f010df88:	8b 00                	mov    (%eax),%eax
f010df8a:	83 ec 08             	sub    $0x8,%esp
f010df8d:	68 d6 3d 13 f0       	push   $0xf0133dd6
f010df92:	50                   	push   %eax
f010df93:	e8 b1 0f 02 00       	call   f012ef49 <strcmp>
f010df98:	83 c4 10             	add    $0x10,%esp
f010df9b:	85 c0                	test   %eax,%eax
f010df9d:	75 0a                	jne    f010dfa9 <tst_dyn_alloc+0xc2>
	{
		test_alloc_block_NF();
f010df9f:	e8 b3 12 00 00       	call   f010f257 <test_alloc_block_NF>
f010dfa4:	e9 8e 00 00 00       	jmp    f010e037 <tst_dyn_alloc+0x150>
	}
	// Test 5 Example for free_block: tstdynalloc freeFF
	else if(strcmp(arguments[1], "freeff") == 0)
f010dfa9:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dfac:	83 c0 04             	add    $0x4,%eax
f010dfaf:	8b 00                	mov    (%eax),%eax
f010dfb1:	83 ec 08             	sub    $0x8,%esp
f010dfb4:	68 de 3d 13 f0       	push   $0xf0133dde
f010dfb9:	50                   	push   %eax
f010dfba:	e8 8a 0f 02 00       	call   f012ef49 <strcmp>
f010dfbf:	83 c4 10             	add    $0x10,%esp
f010dfc2:	85 c0                	test   %eax,%eax
f010dfc4:	75 07                	jne    f010dfcd <tst_dyn_alloc+0xe6>
	{
		test_free_block_FF();
f010dfc6:	e8 92 12 00 00       	call   f010f25d <test_free_block_FF>
f010dfcb:	eb 6a                	jmp    f010e037 <tst_dyn_alloc+0x150>
	}
	// Test 6 Example for free_block: tstdynalloc freeBF
	else if(strcmp(arguments[1], "freebf") == 0)
f010dfcd:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dfd0:	83 c0 04             	add    $0x4,%eax
f010dfd3:	8b 00                	mov    (%eax),%eax
f010dfd5:	83 ec 08             	sub    $0x8,%esp
f010dfd8:	68 e5 3d 13 f0       	push   $0xf0133de5
f010dfdd:	50                   	push   %eax
f010dfde:	e8 66 0f 02 00       	call   f012ef49 <strcmp>
f010dfe3:	83 c4 10             	add    $0x10,%esp
f010dfe6:	85 c0                	test   %eax,%eax
f010dfe8:	75 07                	jne    f010dff1 <tst_dyn_alloc+0x10a>
	{
		test_free_block_BF();
f010dfea:	e8 d3 20 00 00       	call   f01100c2 <test_free_block_BF>
f010dfef:	eb 46                	jmp    f010e037 <tst_dyn_alloc+0x150>
	}
	// Test 7 Example for free_block: tstdynalloc freeNF
	else if(strcmp(arguments[1], "freenf") == 0)
f010dff1:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dff4:	83 c0 04             	add    $0x4,%eax
f010dff7:	8b 00                	mov    (%eax),%eax
f010dff9:	83 ec 08             	sub    $0x8,%esp
f010dffc:	68 ec 3d 13 f0       	push   $0xf0133dec
f010e001:	50                   	push   %eax
f010e002:	e8 42 0f 02 00       	call   f012ef49 <strcmp>
f010e007:	83 c4 10             	add    $0x10,%esp
f010e00a:	85 c0                	test   %eax,%eax
f010e00c:	75 07                	jne    f010e015 <tst_dyn_alloc+0x12e>
	{
		test_free_block_NF();
f010e00e:	e8 c1 2e 00 00       	call   f0110ed4 <test_free_block_NF>
f010e013:	eb 22                	jmp    f010e037 <tst_dyn_alloc+0x150>
	}
	// Test 8 Example for realloc_block_ff: tstdynalloc reallocFF
	else if(strcmp(arguments[1], "reallocff") == 0)
f010e015:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e018:	83 c0 04             	add    $0x4,%eax
f010e01b:	8b 00                	mov    (%eax),%eax
f010e01d:	83 ec 08             	sub    $0x8,%esp
f010e020:	68 f3 3d 13 f0       	push   $0xf0133df3
f010e025:	50                   	push   %eax
f010e026:	e8 1e 0f 02 00       	call   f012ef49 <strcmp>
f010e02b:	83 c4 10             	add    $0x10,%esp
f010e02e:	85 c0                	test   %eax,%eax
f010e030:	75 05                	jne    f010e037 <tst_dyn_alloc+0x150>
	{
		test_realloc_block_FF();
f010e032:	e8 ba 2e 00 00       	call   f0110ef1 <test_realloc_block_FF>
		//test_realloc_block_FF();
	}
	return 0;
f010e037:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010e03c:	c9                   	leave  
f010e03d:	c3                   	ret    

f010e03e <tst_chunks>:

int tst_chunks(int number_of_arguments, char **arguments)
{
f010e03e:	55                   	push   %ebp
f010e03f:	89 e5                	mov    %esp,%ebp
f010e041:	83 ec 08             	sub    $0x8,%esp
	if (number_of_arguments != 2)
f010e044:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010e048:	74 1a                	je     f010e064 <tst_chunks+0x26>
	{
		cprintf("Invalid number of arguments! USAGE: tstchunk <testname>\n") ;
f010e04a:	83 ec 0c             	sub    $0xc,%esp
f010e04d:	68 00 3e 13 f0       	push   $0xf0133e00
f010e052:	e8 da 2d ff ff       	call   f0100e31 <cprintf>
f010e057:	83 c4 10             	add    $0x10,%esp
		return 0;
f010e05a:	b8 00 00 00 00       	mov    $0x0,%eax
f010e05f:	e9 e1 00 00 00       	jmp    f010e145 <tst_chunks+0x107>
	}
	// CUT-PASTE Test
	if(strcmp(arguments[1], "cutpaste") == 0)
f010e064:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e067:	83 c0 04             	add    $0x4,%eax
f010e06a:	8b 00                	mov    (%eax),%eax
f010e06c:	83 ec 08             	sub    $0x8,%esp
f010e06f:	68 39 3e 13 f0       	push   $0xf0133e39
f010e074:	50                   	push   %eax
f010e075:	e8 cf 0e 02 00       	call   f012ef49 <strcmp>
f010e07a:	83 c4 10             	add    $0x10,%esp
f010e07d:	85 c0                	test   %eax,%eax
f010e07f:	75 0a                	jne    f010e08b <tst_chunks+0x4d>
	{
		test_cut_paste_pages();
f010e081:	e8 dd 42 00 00       	call   f0112363 <test_cut_paste_pages>
f010e086:	e9 b5 00 00 00       	jmp    f010e140 <tst_chunks+0x102>
	}
	// COPY-PASTE Test
	else if(strcmp(arguments[1], "copypaste") == 0)
f010e08b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e08e:	83 c0 04             	add    $0x4,%eax
f010e091:	8b 00                	mov    (%eax),%eax
f010e093:	83 ec 08             	sub    $0x8,%esp
f010e096:	68 42 3e 13 f0       	push   $0xf0133e42
f010e09b:	50                   	push   %eax
f010e09c:	e8 a8 0e 02 00       	call   f012ef49 <strcmp>
f010e0a1:	83 c4 10             	add    $0x10,%esp
f010e0a4:	85 c0                	test   %eax,%eax
f010e0a6:	75 0a                	jne    f010e0b2 <tst_chunks+0x74>
	{
		test_copy_paste_chunk();
f010e0a8:	e8 07 4d 00 00       	call   f0112db4 <test_copy_paste_chunk>
f010e0ad:	e9 8e 00 00 00       	jmp    f010e140 <tst_chunks+0x102>
	}
	// SHARE Test
	else if(strcmp(arguments[1], "share") == 0)
f010e0b2:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e0b5:	83 c0 04             	add    $0x4,%eax
f010e0b8:	8b 00                	mov    (%eax),%eax
f010e0ba:	83 ec 08             	sub    $0x8,%esp
f010e0bd:	68 4c 3e 13 f0       	push   $0xf0133e4c
f010e0c2:	50                   	push   %eax
f010e0c3:	e8 81 0e 02 00       	call   f012ef49 <strcmp>
f010e0c8:	83 c4 10             	add    $0x10,%esp
f010e0cb:	85 c0                	test   %eax,%eax
f010e0cd:	75 07                	jne    f010e0d6 <tst_chunks+0x98>
	{
		test_share_chunk();
f010e0cf:	e8 e4 5d 00 00       	call   f0113eb8 <test_share_chunk>
f010e0d4:	eb 6a                	jmp    f010e140 <tst_chunks+0x102>
	}
	// ALLOCATE Test
	else if(strcmp(arguments[1], "allocate") == 0)
f010e0d6:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e0d9:	83 c0 04             	add    $0x4,%eax
f010e0dc:	8b 00                	mov    (%eax),%eax
f010e0de:	83 ec 08             	sub    $0x8,%esp
f010e0e1:	68 52 3e 13 f0       	push   $0xf0133e52
f010e0e6:	50                   	push   %eax
f010e0e7:	e8 5d 0e 02 00       	call   f012ef49 <strcmp>
f010e0ec:	83 c4 10             	add    $0x10,%esp
f010e0ef:	85 c0                	test   %eax,%eax
f010e0f1:	75 07                	jne    f010e0fa <tst_chunks+0xbc>
	{
		test_allocate_chunk();
f010e0f3:	e8 ee 67 00 00       	call   f01148e6 <test_allocate_chunk>
f010e0f8:	eb 46                	jmp    f010e140 <tst_chunks+0x102>
	}
	// REQUIRED SPACE Test
	else if(strcmp(arguments[1], "required_space") == 0)
f010e0fa:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e0fd:	83 c0 04             	add    $0x4,%eax
f010e100:	8b 00                	mov    (%eax),%eax
f010e102:	83 ec 08             	sub    $0x8,%esp
f010e105:	68 5b 3e 13 f0       	push   $0xf0133e5b
f010e10a:	50                   	push   %eax
f010e10b:	e8 39 0e 02 00       	call   f012ef49 <strcmp>
f010e110:	83 c4 10             	add    $0x10,%esp
f010e113:	85 c0                	test   %eax,%eax
f010e115:	75 07                	jne    f010e11e <tst_chunks+0xe0>
	{
		test_calculate_required_frames();
f010e117:	e8 d7 70 00 00       	call   f01151f3 <test_calculate_required_frames>
f010e11c:	eb 22                	jmp    f010e140 <tst_chunks+0x102>
	}
	// ALLOCATED SPACE Test
	else if(strcmp(arguments[1], "allocated_space") == 0)
f010e11e:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e121:	83 c0 04             	add    $0x4,%eax
f010e124:	8b 00                	mov    (%eax),%eax
f010e126:	83 ec 08             	sub    $0x8,%esp
f010e129:	68 6a 3e 13 f0       	push   $0xf0133e6a
f010e12e:	50                   	push   %eax
f010e12f:	e8 15 0e 02 00       	call   f012ef49 <strcmp>
f010e134:	83 c4 10             	add    $0x10,%esp
f010e137:	85 c0                	test   %eax,%eax
f010e139:	75 05                	jne    f010e140 <tst_chunks+0x102>
	{
		test_calculate_allocated_space();
f010e13b:	e8 2d 79 00 00       	call   f0115a6d <test_calculate_allocated_space>
	}
	return 0;
f010e140:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010e145:	c9                   	leave  
f010e146:	c3                   	ret    

f010e147 <tst_paging_manipulation>:

int tst_paging_manipulation(int number_of_arguments, char **arguments)
{
f010e147:	55                   	push   %ebp
f010e148:	89 e5                	mov    %esp,%ebp
f010e14a:	83 ec 08             	sub    $0x8,%esp
	if (number_of_arguments != 2)
f010e14d:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010e151:	74 1a                	je     f010e16d <tst_paging_manipulation+0x26>
	{
		cprintf("Invalid number of arguments! USAGE: tstpg <testname>\n") ;
f010e153:	83 ec 0c             	sub    $0xc,%esp
f010e156:	68 7c 3e 13 f0       	push   $0xf0133e7c
f010e15b:	e8 d1 2c ff ff       	call   f0100e31 <cprintf>
f010e160:	83 c4 10             	add    $0x10,%esp
		return 0;
f010e163:	b8 00 00 00 00       	mov    $0x0,%eax
f010e168:	e9 ba 00 00 00       	jmp    f010e227 <tst_paging_manipulation+0xe0>
	}
	// Test 1.1-Set/Clear permissions: tstpg scperm1
	if(strcmp(arguments[1], "scperm1") == 0)
f010e16d:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e170:	83 c0 04             	add    $0x4,%eax
f010e173:	8b 00                	mov    (%eax),%eax
f010e175:	83 ec 08             	sub    $0x8,%esp
f010e178:	68 b2 3e 13 f0       	push   $0xf0133eb2
f010e17d:	50                   	push   %eax
f010e17e:	e8 c6 0d 02 00       	call   f012ef49 <strcmp>
f010e183:	83 c4 10             	add    $0x10,%esp
f010e186:	85 c0                	test   %eax,%eax
f010e188:	75 0a                	jne    f010e194 <tst_paging_manipulation+0x4d>
	{
		test_pt_set_page_permissions();
f010e18a:	e8 53 3c 00 00       	call   f0111de2 <test_pt_set_page_permissions>
f010e18f:	e9 8e 00 00 00       	jmp    f010e222 <tst_paging_manipulation+0xdb>
	}
	// Test 1.2-Set/Clear permissions: tstpg scperm2
	else if(strcmp(arguments[1], "scperm2") == 0)
f010e194:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e197:	83 c0 04             	add    $0x4,%eax
f010e19a:	8b 00                	mov    (%eax),%eax
f010e19c:	83 ec 08             	sub    $0x8,%esp
f010e19f:	68 ba 3e 13 f0       	push   $0xf0133eba
f010e1a4:	50                   	push   %eax
f010e1a5:	e8 9f 0d 02 00       	call   f012ef49 <strcmp>
f010e1aa:	83 c4 10             	add    $0x10,%esp
f010e1ad:	85 c0                	test   %eax,%eax
f010e1af:	75 07                	jne    f010e1b8 <tst_paging_manipulation+0x71>
	{
		test_pt_set_page_permissions_invalid_va();
f010e1b1:	e8 8f 3e 00 00       	call   f0112045 <test_pt_set_page_permissions_invalid_va>
f010e1b6:	eb 6a                	jmp    f010e222 <tst_paging_manipulation+0xdb>
	}
	// Test 2-Get permissions: tstpg getperm
	else if(strcmp(arguments[1], "getperm") == 0)
f010e1b8:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e1bb:	83 c0 04             	add    $0x4,%eax
f010e1be:	8b 00                	mov    (%eax),%eax
f010e1c0:	83 ec 08             	sub    $0x8,%esp
f010e1c3:	68 c2 3e 13 f0       	push   $0xf0133ec2
f010e1c8:	50                   	push   %eax
f010e1c9:	e8 7b 0d 02 00       	call   f012ef49 <strcmp>
f010e1ce:	83 c4 10             	add    $0x10,%esp
f010e1d1:	85 c0                	test   %eax,%eax
f010e1d3:	75 07                	jne    f010e1dc <tst_paging_manipulation+0x95>
	{
		test_pt_get_page_permissions();
f010e1d5:	e8 b4 3e 00 00       	call   f011208e <test_pt_get_page_permissions>
f010e1da:	eb 46                	jmp    f010e222 <tst_paging_manipulation+0xdb>
	}
	// Test 3.1-Clear entry: tstpg clear1
	else if(strcmp(arguments[1], "clear1") == 0)
f010e1dc:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e1df:	83 c0 04             	add    $0x4,%eax
f010e1e2:	8b 00                	mov    (%eax),%eax
f010e1e4:	83 ec 08             	sub    $0x8,%esp
f010e1e7:	68 ca 3e 13 f0       	push   $0xf0133eca
f010e1ec:	50                   	push   %eax
f010e1ed:	e8 57 0d 02 00       	call   f012ef49 <strcmp>
f010e1f2:	83 c4 10             	add    $0x10,%esp
f010e1f5:	85 c0                	test   %eax,%eax
f010e1f7:	75 07                	jne    f010e200 <tst_paging_manipulation+0xb9>
	{
		test_pt_clear_page_table_entry();
f010e1f9:	e8 d4 3f 00 00       	call   f01121d2 <test_pt_clear_page_table_entry>
f010e1fe:	eb 22                	jmp    f010e222 <tst_paging_manipulation+0xdb>
	}
	// Test 3.2-Clear entry: tstpg clear2
	else if(strcmp(arguments[1], "clear2") == 0)
f010e200:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e203:	83 c0 04             	add    $0x4,%eax
f010e206:	8b 00                	mov    (%eax),%eax
f010e208:	83 ec 08             	sub    $0x8,%esp
f010e20b:	68 d1 3e 13 f0       	push   $0xf0133ed1
f010e210:	50                   	push   %eax
f010e211:	e8 33 0d 02 00       	call   f012ef49 <strcmp>
f010e216:	83 c4 10             	add    $0x10,%esp
f010e219:	85 c0                	test   %eax,%eax
f010e21b:	75 05                	jne    f010e222 <tst_paging_manipulation+0xdb>
	{
		test_pt_clear_page_table_entry_invalid_va();
f010e21d:	e8 09 41 00 00       	call   f011232b <test_pt_clear_page_table_entry_invalid_va>
	}

	return 0;
f010e222:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010e227:	c9                   	leave  
f010e228:	c3                   	ret    

f010e229 <tst_kheap>:

int tst_kheap(int number_of_arguments, char **arguments)
{
f010e229:	55                   	push   %ebp
f010e22a:	89 e5                	mov    %esp,%ebp
f010e22c:	83 ec 18             	sub    $0x18,%esp
	// Parameters Validation Checking
	if (strcmp(arguments[2], "kmalloc") == 0 && number_of_arguments != 4)
f010e22f:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e232:	83 c0 08             	add    $0x8,%eax
f010e235:	8b 00                	mov    (%eax),%eax
f010e237:	83 ec 08             	sub    $0x8,%esp
f010e23a:	68 d8 3e 13 f0       	push   $0xf0133ed8
f010e23f:	50                   	push   %eax
f010e240:	e8 04 0d 02 00       	call   f012ef49 <strcmp>
f010e245:	83 c4 10             	add    $0x10,%esp
f010e248:	85 c0                	test   %eax,%eax
f010e24a:	75 20                	jne    f010e26c <tst_kheap+0x43>
f010e24c:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f010e250:	74 1a                	je     f010e26c <tst_kheap+0x43>
	{
		cprintf("Invalid number of arguments! USAGE: tst kheap <Strategy> kmalloc <1 or 2 or 3>\n") ;
f010e252:	83 ec 0c             	sub    $0xc,%esp
f010e255:	68 e0 3e 13 f0       	push   $0xf0133ee0
f010e25a:	e8 d2 2b ff ff       	call   f0100e31 <cprintf>
f010e25f:	83 c4 10             	add    $0x10,%esp
		return 0;
f010e262:	b8 00 00 00 00       	mov    $0x0,%eax
f010e267:	e9 41 03 00 00       	jmp    f010e5ad <tst_kheap+0x384>
	}
	if (strcmp(arguments[2], "kmalloc") != 0 && number_of_arguments != 3)
f010e26c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e26f:	83 c0 08             	add    $0x8,%eax
f010e272:	8b 00                	mov    (%eax),%eax
f010e274:	83 ec 08             	sub    $0x8,%esp
f010e277:	68 d8 3e 13 f0       	push   $0xf0133ed8
f010e27c:	50                   	push   %eax
f010e27d:	e8 c7 0c 02 00       	call   f012ef49 <strcmp>
f010e282:	83 c4 10             	add    $0x10,%esp
f010e285:	85 c0                	test   %eax,%eax
f010e287:	74 20                	je     f010e2a9 <tst_kheap+0x80>
f010e289:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f010e28d:	74 1a                	je     f010e2a9 <tst_kheap+0x80>
	{
		cprintf("Invalid number of arguments! USAGE: tst kheap <Strategy> <testname>\n") ;
f010e28f:	83 ec 0c             	sub    $0xc,%esp
f010e292:	68 30 3f 13 f0       	push   $0xf0133f30
f010e297:	e8 95 2b ff ff       	call   f0100e31 <cprintf>
f010e29c:	83 c4 10             	add    $0x10,%esp
		return 0;
f010e29f:	b8 00 00 00 00       	mov    $0x0,%eax
f010e2a4:	e9 04 03 00 00       	jmp    f010e5ad <tst_kheap+0x384>
	}

	// Setting Strategy
	if(strcmp(arguments[1], "FF") == 0 || strcmp(arguments[1], "ff") == 0)
f010e2a9:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e2ac:	83 c0 04             	add    $0x4,%eax
f010e2af:	8b 00                	mov    (%eax),%eax
f010e2b1:	83 ec 08             	sub    $0x8,%esp
f010e2b4:	68 75 3f 13 f0       	push   $0xf0133f75
f010e2b9:	50                   	push   %eax
f010e2ba:	e8 8a 0c 02 00       	call   f012ef49 <strcmp>
f010e2bf:	83 c4 10             	add    $0x10,%esp
f010e2c2:	85 c0                	test   %eax,%eax
f010e2c4:	74 1d                	je     f010e2e3 <tst_kheap+0xba>
f010e2c6:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e2c9:	83 c0 04             	add    $0x4,%eax
f010e2cc:	8b 00                	mov    (%eax),%eax
f010e2ce:	83 ec 08             	sub    $0x8,%esp
f010e2d1:	68 78 3f 13 f0       	push   $0xf0133f78
f010e2d6:	50                   	push   %eax
f010e2d7:	e8 6d 0c 02 00       	call   f012ef49 <strcmp>
f010e2dc:	83 c4 10             	add    $0x10,%esp
f010e2df:	85 c0                	test   %eax,%eax
f010e2e1:	75 1a                	jne    f010e2fd <tst_kheap+0xd4>
	{
		setKHeapPlacementStrategyFIRSTFIT();
f010e2e3:	e8 49 f9 ff ff       	call   f010dc31 <setKHeapPlacementStrategyFIRSTFIT>
		cprintf("Kernel Heap placement strategy is FIRST FIT\n");
f010e2e8:	83 ec 0c             	sub    $0xc,%esp
f010e2eb:	68 7c 3f 13 f0       	push   $0xf0133f7c
f010e2f0:	e8 3c 2b ff ff       	call   f0100e31 <cprintf>
f010e2f5:	83 c4 10             	add    $0x10,%esp
f010e2f8:	e9 a0 00 00 00       	jmp    f010e39d <tst_kheap+0x174>
	}
	else if(strcmp(arguments[1], "BF") == 0 || strcmp(arguments[1], "bf") == 0)
f010e2fd:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e300:	83 c0 04             	add    $0x4,%eax
f010e303:	8b 00                	mov    (%eax),%eax
f010e305:	83 ec 08             	sub    $0x8,%esp
f010e308:	68 a9 3f 13 f0       	push   $0xf0133fa9
f010e30d:	50                   	push   %eax
f010e30e:	e8 36 0c 02 00       	call   f012ef49 <strcmp>
f010e313:	83 c4 10             	add    $0x10,%esp
f010e316:	85 c0                	test   %eax,%eax
f010e318:	74 1d                	je     f010e337 <tst_kheap+0x10e>
f010e31a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e31d:	83 c0 04             	add    $0x4,%eax
f010e320:	8b 00                	mov    (%eax),%eax
f010e322:	83 ec 08             	sub    $0x8,%esp
f010e325:	68 ac 3f 13 f0       	push   $0xf0133fac
f010e32a:	50                   	push   %eax
f010e32b:	e8 19 0c 02 00       	call   f012ef49 <strcmp>
f010e330:	83 c4 10             	add    $0x10,%esp
f010e333:	85 c0                	test   %eax,%eax
f010e335:	75 17                	jne    f010e34e <tst_kheap+0x125>
	{
		setKHeapPlacementStrategyBESTFIT();
f010e337:	e8 05 f9 ff ff       	call   f010dc41 <setKHeapPlacementStrategyBESTFIT>
		cprintf("Kernel Heap placement strategy is BEST FIT\n");
f010e33c:	83 ec 0c             	sub    $0xc,%esp
f010e33f:	68 b0 3f 13 f0       	push   $0xf0133fb0
f010e344:	e8 e8 2a ff ff       	call   f0100e31 <cprintf>
f010e349:	83 c4 10             	add    $0x10,%esp
f010e34c:	eb 4f                	jmp    f010e39d <tst_kheap+0x174>
	}
	else if(strcmp(arguments[1], "NF") == 0 || strcmp(arguments[1], "nf") == 0)
f010e34e:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e351:	83 c0 04             	add    $0x4,%eax
f010e354:	8b 00                	mov    (%eax),%eax
f010e356:	83 ec 08             	sub    $0x8,%esp
f010e359:	68 dc 3f 13 f0       	push   $0xf0133fdc
f010e35e:	50                   	push   %eax
f010e35f:	e8 e5 0b 02 00       	call   f012ef49 <strcmp>
f010e364:	83 c4 10             	add    $0x10,%esp
f010e367:	85 c0                	test   %eax,%eax
f010e369:	74 1d                	je     f010e388 <tst_kheap+0x15f>
f010e36b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e36e:	83 c0 04             	add    $0x4,%eax
f010e371:	8b 00                	mov    (%eax),%eax
f010e373:	83 ec 08             	sub    $0x8,%esp
f010e376:	68 df 3f 13 f0       	push   $0xf0133fdf
f010e37b:	50                   	push   %eax
f010e37c:	e8 c8 0b 02 00       	call   f012ef49 <strcmp>
f010e381:	83 c4 10             	add    $0x10,%esp
f010e384:	85 c0                	test   %eax,%eax
f010e386:	75 15                	jne    f010e39d <tst_kheap+0x174>
	{
		setKHeapPlacementStrategyNEXTFIT();
f010e388:	e8 c4 f8 ff ff       	call   f010dc51 <setKHeapPlacementStrategyNEXTFIT>
		cprintf("Kernel Heap placement strategy is NEXT FIT\n");
f010e38d:	83 ec 0c             	sub    $0xc,%esp
f010e390:	68 e4 3f 13 f0       	push   $0xf0133fe4
f010e395:	e8 97 2a ff ff       	call   f0100e31 <cprintf>
f010e39a:	83 c4 10             	add    $0x10,%esp
	}

	// Test 1-kmalloc: tstkheap FF kmalloc 1
	if(strcmp(arguments[2], "kmalloc") == 0)
f010e39d:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e3a0:	83 c0 08             	add    $0x8,%eax
f010e3a3:	8b 00                	mov    (%eax),%eax
f010e3a5:	83 ec 08             	sub    $0x8,%esp
f010e3a8:	68 d8 3e 13 f0       	push   $0xf0133ed8
f010e3ad:	50                   	push   %eax
f010e3ae:	e8 96 0b 02 00       	call   f012ef49 <strcmp>
f010e3b3:	83 c4 10             	add    $0x10,%esp
f010e3b6:	85 c0                	test   %eax,%eax
f010e3b8:	0f 85 13 01 00 00    	jne    f010e4d1 <tst_kheap+0x2a8>
	{
		uint32 testNum = strtol(arguments[3], NULL, 10);
f010e3be:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e3c1:	83 c0 0c             	add    $0xc,%eax
f010e3c4:	8b 00                	mov    (%eax),%eax
f010e3c6:	83 ec 04             	sub    $0x4,%esp
f010e3c9:	6a 0a                	push   $0xa
f010e3cb:	6a 00                	push   $0x0
f010e3cd:	50                   	push   %eax
f010e3ce:	e8 ca 0d 02 00       	call   f012f19d <strtol>
f010e3d3:	83 c4 10             	add    $0x10,%esp
f010e3d6:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if(isKHeapPlacementStrategyFIRSTFIT())
f010e3d9:	e8 83 f8 ff ff       	call   f010dc61 <isKHeapPlacementStrategyFIRSTFIT>
f010e3de:	84 c0                	test   %al,%al
f010e3e0:	74 54                	je     f010e436 <tst_kheap+0x20d>
		{
			if (testNum == 0)
f010e3e2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010e3e6:	75 1a                	jne    f010e402 <tst_kheap+0x1d9>
			{
				cprintf("Error: [Kernel.FirstFit] must specify the test number (1 or 2) as an argument\n");
f010e3e8:	83 ec 0c             	sub    $0xc,%esp
f010e3eb:	68 10 40 13 f0       	push   $0xf0134010
f010e3f0:	e8 3c 2a ff ff       	call   f0100e31 <cprintf>
f010e3f5:	83 c4 10             	add    $0x10,%esp
				return 0;
f010e3f8:	b8 00 00 00 00       	mov    $0x0,%eax
f010e3fd:	e9 ab 01 00 00       	jmp    f010e5ad <tst_kheap+0x384>
			}
			//Test FIRST FIT allocation
			if (testNum == 1)
f010e402:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f010e406:	75 0a                	jne    f010e412 <tst_kheap+0x1e9>
				test_kmalloc();
f010e408:	e8 59 a0 00 00       	call   f0118466 <test_kmalloc>
f010e40d:	e9 b5 00 00 00       	jmp    f010e4c7 <tst_kheap+0x29e>
			else if (testNum == 2)
f010e412:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f010e416:	75 0a                	jne    f010e422 <tst_kheap+0x1f9>
				test_kmalloc_firstfit1();
f010e418:	e8 96 e2 00 00       	call   f011c6b3 <test_kmalloc_firstfit1>
f010e41d:	e9 a5 00 00 00       	jmp    f010e4c7 <tst_kheap+0x29e>
			else if (testNum == 3)
f010e422:	83 7d f4 03          	cmpl   $0x3,-0xc(%ebp)
f010e426:	0f 85 9b 00 00 00    	jne    f010e4c7 <tst_kheap+0x29e>
				test_kmalloc_firstfit2();
f010e42c:	e8 30 f3 00 00       	call   f011d761 <test_kmalloc_firstfit2>
f010e431:	e9 91 00 00 00       	jmp    f010e4c7 <tst_kheap+0x29e>
		}
		else if(isKHeapPlacementStrategyBESTFIT())
f010e436:	e8 3b f8 ff ff       	call   f010dc76 <isKHeapPlacementStrategyBESTFIT>
f010e43b:	84 c0                	test   %al,%al
f010e43d:	74 47                	je     f010e486 <tst_kheap+0x25d>
		{
			if (testNum == 0)
f010e43f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010e443:	75 1a                	jne    f010e45f <tst_kheap+0x236>
			{
				cprintf("Error: [Kernel.BestFit] must specify the test number (1, 2, 3) as an argument\n");
f010e445:	83 ec 0c             	sub    $0xc,%esp
f010e448:	68 60 40 13 f0       	push   $0xf0134060
f010e44d:	e8 df 29 ff ff       	call   f0100e31 <cprintf>
f010e452:	83 c4 10             	add    $0x10,%esp
				return 0;
f010e455:	b8 00 00 00 00       	mov    $0x0,%eax
f010e45a:	e9 4e 01 00 00       	jmp    f010e5ad <tst_kheap+0x384>
			}
			if (testNum == 1)
f010e45f:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f010e463:	75 07                	jne    f010e46c <tst_kheap+0x243>
				test_kmalloc();
f010e465:	e8 fc 9f 00 00       	call   f0118466 <test_kmalloc>
f010e46a:	eb 5b                	jmp    f010e4c7 <tst_kheap+0x29e>
			else if (testNum == 2)
f010e46c:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f010e470:	75 07                	jne    f010e479 <tst_kheap+0x250>
				test_kmalloc_bestfit1();
f010e472:	e8 b8 c2 00 00       	call   f011a72f <test_kmalloc_bestfit1>
f010e477:	eb 4e                	jmp    f010e4c7 <tst_kheap+0x29e>
			else if (testNum == 3)
f010e479:	83 7d f4 03          	cmpl   $0x3,-0xc(%ebp)
f010e47d:	75 48                	jne    f010e4c7 <tst_kheap+0x29e>
				test_kmalloc_bestfit2();
f010e47f:	e8 43 d2 00 00       	call   f011b6c7 <test_kmalloc_bestfit2>
f010e484:	eb 41                	jmp    f010e4c7 <tst_kheap+0x29e>
		}
		else if(isKHeapPlacementStrategyNEXTFIT())
f010e486:	e8 00 f8 ff ff       	call   f010dc8b <isKHeapPlacementStrategyNEXTFIT>
f010e48b:	84 c0                	test   %al,%al
f010e48d:	74 38                	je     f010e4c7 <tst_kheap+0x29e>
		{
			if (testNum == 0)
f010e48f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010e493:	75 1a                	jne    f010e4af <tst_kheap+0x286>
			{
				cprintf("Error: [Kernel.NextFit] must specify the test number (1 or 2) as an argument\n");
f010e495:	83 ec 0c             	sub    $0xc,%esp
f010e498:	68 b0 40 13 f0       	push   $0xf01340b0
f010e49d:	e8 8f 29 ff ff       	call   f0100e31 <cprintf>
f010e4a2:	83 c4 10             	add    $0x10,%esp
				return 0;
f010e4a5:	b8 00 00 00 00       	mov    $0x0,%eax
f010e4aa:	e9 fe 00 00 00       	jmp    f010e5ad <tst_kheap+0x384>
			}
			//Test cont. allocation
			if (testNum == 1)
f010e4af:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f010e4b3:	75 07                	jne    f010e4bc <tst_kheap+0x293>
				test_kmalloc();
f010e4b5:	e8 ac 9f 00 00       	call   f0118466 <test_kmalloc>
f010e4ba:	eb 0b                	jmp    f010e4c7 <tst_kheap+0x29e>
			//Test nextfit strategy
			else if (testNum == 2)
f010e4bc:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f010e4c0:	75 05                	jne    f010e4c7 <tst_kheap+0x29e>
				test_kmalloc_nextfit();
f010e4c2:	e8 ab af 00 00       	call   f0119472 <test_kmalloc_nextfit>
		}
		return 0;
f010e4c7:	b8 00 00 00 00       	mov    $0x0,%eax
f010e4cc:	e9 dc 00 00 00       	jmp    f010e5ad <tst_kheap+0x384>
	}
	// Test 2-kfree: tstkheap FF kfree
	else if(strcmp(arguments[2], "kfree") == 0)
f010e4d1:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e4d4:	83 c0 08             	add    $0x8,%eax
f010e4d7:	8b 00                	mov    (%eax),%eax
f010e4d9:	83 ec 08             	sub    $0x8,%esp
f010e4dc:	68 fe 40 13 f0       	push   $0xf01340fe
f010e4e1:	50                   	push   %eax
f010e4e2:	e8 62 0a 02 00       	call   f012ef49 <strcmp>
f010e4e7:	83 c4 10             	add    $0x10,%esp
f010e4ea:	85 c0                	test   %eax,%eax
f010e4ec:	75 28                	jne    f010e516 <tst_kheap+0x2ed>
	{
		if (isKHeapPlacementStrategyBESTFIT() || isKHeapPlacementStrategyFIRSTFIT())
f010e4ee:	e8 83 f7 ff ff       	call   f010dc76 <isKHeapPlacementStrategyBESTFIT>
f010e4f3:	84 c0                	test   %al,%al
f010e4f5:	75 09                	jne    f010e500 <tst_kheap+0x2d7>
f010e4f7:	e8 65 f7 ff ff       	call   f010dc61 <isKHeapPlacementStrategyFIRSTFIT>
f010e4fc:	84 c0                	test   %al,%al
f010e4fe:	74 07                	je     f010e507 <tst_kheap+0x2de>
		{
			test_kfree_bestfirstfit();
f010e500:	e8 15 2f 01 00       	call   f012141a <test_kfree_bestfirstfit>
f010e505:	eb 05                	jmp    f010e50c <tst_kheap+0x2e3>
		}
		else //NEXT & CONT
		{
			test_kfree();
f010e507:	e8 1c 11 01 00       	call   f011f628 <test_kfree>
		}
		return 0;
f010e50c:	b8 00 00 00 00       	mov    $0x0,%eax
f010e511:	e9 97 00 00 00       	jmp    f010e5ad <tst_kheap+0x384>
	}
	// Test 3-kphysaddr: tstkheap FF kphysaddr
	else if(strcmp(arguments[2], "kphysaddr") == 0)
f010e516:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e519:	83 c0 08             	add    $0x8,%eax
f010e51c:	8b 00                	mov    (%eax),%eax
f010e51e:	83 ec 08             	sub    $0x8,%esp
f010e521:	68 04 41 13 f0       	push   $0xf0134104
f010e526:	50                   	push   %eax
f010e527:	e8 1d 0a 02 00       	call   f012ef49 <strcmp>
f010e52c:	83 c4 10             	add    $0x10,%esp
f010e52f:	85 c0                	test   %eax,%eax
f010e531:	75 0c                	jne    f010e53f <tst_kheap+0x316>
	{
		test_kheap_phys_addr();
f010e533:	e8 8c 46 01 00       	call   f0122bc4 <test_kheap_phys_addr>
		return 0;
f010e538:	b8 00 00 00 00       	mov    $0x0,%eax
f010e53d:	eb 6e                	jmp    f010e5ad <tst_kheap+0x384>
	}
	// Test 4-kvirtaddr: tstkheap FF kvirtaddr
	else if(strcmp(arguments[2], "kvirtaddr") == 0)
f010e53f:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e542:	83 c0 08             	add    $0x8,%eax
f010e545:	8b 00                	mov    (%eax),%eax
f010e547:	83 ec 08             	sub    $0x8,%esp
f010e54a:	68 0e 41 13 f0       	push   $0xf013410e
f010e54f:	50                   	push   %eax
f010e550:	e8 f4 09 02 00       	call   f012ef49 <strcmp>
f010e555:	83 c4 10             	add    $0x10,%esp
f010e558:	85 c0                	test   %eax,%eax
f010e55a:	75 0c                	jne    f010e568 <tst_kheap+0x33f>
	{
		test_kheap_virt_addr();
f010e55c:	e8 a1 57 01 00       	call   f0123d02 <test_kheap_virt_addr>
		return 0;
f010e561:	b8 00 00 00 00       	mov    $0x0,%eax
f010e566:	eb 45                	jmp    f010e5ad <tst_kheap+0x384>
	}
	// Test 5-krealloc: tstkheap BF krealloc
	else if(strcmp(arguments[2], "krealloc") == 0)
f010e568:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e56b:	83 c0 08             	add    $0x8,%eax
f010e56e:	8b 00                	mov    (%eax),%eax
f010e570:	83 ec 08             	sub    $0x8,%esp
f010e573:	68 18 41 13 f0       	push   $0xf0134118
f010e578:	50                   	push   %eax
f010e579:	e8 cb 09 02 00       	call   f012ef49 <strcmp>
f010e57e:	83 c4 10             	add    $0x10,%esp
f010e581:	85 c0                	test   %eax,%eax
f010e583:	75 23                	jne    f010e5a8 <tst_kheap+0x37f>
	{
		if (isKHeapPlacementStrategyNEXTFIT())
f010e585:	e8 01 f7 ff ff       	call   f010dc8b <isKHeapPlacementStrategyNEXTFIT>
f010e58a:	84 c0                	test   %al,%al
f010e58c:	74 05                	je     f010e593 <tst_kheap+0x36a>
		{
			test_krealloc();
f010e58e:	e8 12 b9 01 00       	call   f0129ea5 <test_krealloc>
		}
		if (isKHeapPlacementStrategyBESTFIT())
f010e593:	e8 de f6 ff ff       	call   f010dc76 <isKHeapPlacementStrategyBESTFIT>
f010e598:	84 c0                	test   %al,%al
f010e59a:	74 05                	je     f010e5a1 <tst_kheap+0x378>
		{
			test_krealloc_BF();
f010e59c:	e8 98 d6 01 00       	call   f012bc39 <test_krealloc_BF>
		}
		return 0;
f010e5a1:	b8 00 00 00 00       	mov    $0x0,%eax
f010e5a6:	eb 05                	jmp    f010e5ad <tst_kheap+0x384>
	}
	return 0;
f010e5a8:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010e5ad:	c9                   	leave  
f010e5ae:	c3                   	ret    

f010e5af <test_initialize_dynamic_allocator>:

#define Mega  (1024*1024)
#define kilo (1024)

void test_initialize_dynamic_allocator()
{
f010e5af:	55                   	push   %ebp
f010e5b0:	89 e5                	mov    %esp,%ebp
f010e5b2:	83 ec 18             	sub    $0x18,%esp
	return;
#endif


	//write initial data at the start (for checking)
	int* tmp_ptr = (int*)KERNEL_HEAP_START;
f010e5b5:	c7 45 f4 00 00 00 f6 	movl   $0xf6000000,-0xc(%ebp)
	*tmp_ptr = -1 ;
f010e5bc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e5bf:	c7 00 ff ff ff ff    	movl   $0xffffffff,(%eax)
	*(tmp_ptr+1) = 1 ;
f010e5c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e5c8:	83 c0 04             	add    $0x4,%eax
f010e5cb:	c7 00 01 00 00 00    	movl   $0x1,(%eax)

	uint32 initAllocatedSpace = 2*Mega;
f010e5d1:	c7 45 f0 00 00 20 00 	movl   $0x200000,-0x10(%ebp)
	initialize_dynamic_allocator(KERNEL_HEAP_START, initAllocatedSpace);
f010e5d8:	83 ec 08             	sub    $0x8,%esp
f010e5db:	ff 75 f0             	pushl  -0x10(%ebp)
f010e5de:	68 00 00 00 f6       	push   $0xf6000000
f010e5e3:	e8 d6 13 02 00       	call   f012f9be <initialize_dynamic_allocator>
f010e5e8:	83 c4 10             	add    $0x10,%esp


	//Check#1: Metadata
	struct BlockMetaData *metaDataBegin = (struct BlockMetaData *) KERNEL_HEAP_START ;
f010e5eb:	c7 45 ec 00 00 00 f6 	movl   $0xf6000000,-0x14(%ebp)
	if (metaDataBegin->is_free != 1 || metaDataBegin->size != initAllocatedSpace)
f010e5f2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010e5f5:	8a 40 04             	mov    0x4(%eax),%al
f010e5f8:	3c 01                	cmp    $0x1,%al
f010e5fa:	75 0a                	jne    f010e606 <test_initialize_dynamic_allocator+0x57>
f010e5fc:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010e5ff:	8b 00                	mov    (%eax),%eax
f010e601:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010e604:	74 14                	je     f010e61a <test_initialize_dynamic_allocator+0x6b>
	{
		panic("Content of Meta data are not set correctly");
f010e606:	83 ec 04             	sub    $0x4,%esp
f010e609:	68 24 41 13 f0       	push   $0xf0134124
f010e60e:	6a 29                	push   $0x29
f010e610:	68 50 41 13 f0       	push   $0xf0134150
f010e615:	e8 96 1b ff ff       	call   f01001b0 <_panic>
	}

	cprintf("Congratulations!! test initialize_dynamic_allocator completed successfully.\n");
f010e61a:	83 ec 0c             	sub    $0xc,%esp
f010e61d:	68 74 41 13 f0       	push   $0xf0134174
f010e622:	e8 0a 28 ff ff       	call   f0100e31 <cprintf>
f010e627:	83 c4 10             	add    $0x10,%esp
}
f010e62a:	90                   	nop
f010e62b:	c9                   	leave  
f010e62c:	c3                   	ret    

f010e62d <test_initial_alloc>:
short* startVAs[numOfAllocs*allocCntPerSize+1] ;
short* midVAs[numOfAllocs*allocCntPerSize+1] ;
short* endVAs[numOfAllocs*allocCntPerSize+1] ;

int test_initial_alloc(int ALLOC_STRATEGY)
{
f010e62d:	55                   	push   %ebp
f010e62e:	89 e5                	mov    %esp,%ebp
f010e630:	83 ec 48             	sub    $0x48,%esp
#if USE_KHEAP
	panic("test_initial_alloc: the kernel heap should be disabled. make sure USE_KHEAP = 0");
	return 0;
#endif

	int eval = 0;
f010e633:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	bool is_correct = 1;
f010e63a:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	int initAllocatedSpace = 3*Mega;
f010e641:	c7 45 d0 00 00 30 00 	movl   $0x300000,-0x30(%ebp)
	initialize_dynamic_allocator(KERNEL_HEAP_START, initAllocatedSpace);
f010e648:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010e64b:	83 ec 08             	sub    $0x8,%esp
f010e64e:	50                   	push   %eax
f010e64f:	68 00 00 00 f6       	push   $0xf6000000
f010e654:	e8 65 13 02 00       	call   f012f9be <initialize_dynamic_allocator>
f010e659:	83 c4 10             	add    $0x10,%esp

	void * va ;
	//====================================================================//
	/*INITIAL ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	cprintf("	1: Try to allocate large block [not fit in any space]\n\n") ;
f010e65c:	83 ec 0c             	sub    $0xc,%esp
f010e65f:	68 c4 41 13 f0       	push   $0xf01341c4
f010e664:	e8 c8 27 ff ff       	call   f0100e31 <cprintf>
f010e669:	83 c4 10             	add    $0x10,%esp

	is_correct = 1;
f010e66c:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	va = alloc_block(3*initAllocatedSpace, ALLOC_STRATEGY);
f010e673:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010e676:	89 c2                	mov    %eax,%edx
f010e678:	01 d2                	add    %edx,%edx
f010e67a:	01 d0                	add    %edx,%eax
f010e67c:	83 ec 08             	sub    $0x8,%esp
f010e67f:	ff 75 08             	pushl  0x8(%ebp)
f010e682:	50                   	push   %eax
f010e683:	e8 1d 12 02 00       	call   f012f8a5 <alloc_block>
f010e688:	83 c4 10             	add    $0x10,%esp
f010e68b:	89 45 cc             	mov    %eax,-0x34(%ebp)

	//Check returned va
	if(va != NULL)
f010e68e:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
f010e692:	74 17                	je     f010e6ab <test_initial_alloc+0x7e>
	{
		is_correct = 0;
f010e694:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("alloc_block_xx #1: WRONG ALLOC - alloc_block_xx didn't call sbrk while it shall do.\n");
f010e69b:	83 ec 0c             	sub    $0xc,%esp
f010e69e:	68 00 42 13 f0       	push   $0xf0134200
f010e6a3:	e8 89 27 ff ff       	call   f0100e31 <cprintf>
f010e6a8:	83 c4 10             	add    $0x10,%esp
	}
	va = alloc_block(initAllocatedSpace, ALLOC_STRATEGY);
f010e6ab:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010e6ae:	83 ec 08             	sub    $0x8,%esp
f010e6b1:	ff 75 08             	pushl  0x8(%ebp)
f010e6b4:	50                   	push   %eax
f010e6b5:	e8 eb 11 02 00       	call   f012f8a5 <alloc_block>
f010e6ba:	83 c4 10             	add    $0x10,%esp
f010e6bd:	89 45 cc             	mov    %eax,-0x34(%ebp)

	//Check returned va
	if(va != NULL)
f010e6c0:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
f010e6c4:	74 17                	je     f010e6dd <test_initial_alloc+0xb0>
	{
		is_correct = 0;
f010e6c6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("alloc_block_xx #2: WRONG ALLOC - alloc_block_xx didn't call sbrk while it shall do.\n");
f010e6cd:	83 ec 0c             	sub    $0xc,%esp
f010e6d0:	68 58 42 13 f0       	push   $0xf0134258
f010e6d5:	e8 57 27 ff ff       	call   f0100e31 <cprintf>
f010e6da:	83 c4 10             	add    $0x10,%esp
	}

	if (is_correct)
f010e6dd:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010e6e1:	74 04                	je     f010e6e7 <test_initial_alloc+0xba>
	{
		eval += 5;
f010e6e3:	83 45 f4 05          	addl   $0x5,-0xc(%ebp)
	}
	//====================================================================//
	/*INITIAL ALLOC Scenario 2: Try to allocate set of blocks with different sizes*/
	cprintf("	2: Try to allocate set of blocks with different sizes [all should fit]\n\n") ;
f010e6e7:	83 ec 0c             	sub    $0xc,%esp
f010e6ea:	68 b0 42 13 f0       	push   $0xf01342b0
f010e6ef:	e8 3d 27 ff ff       	call   f0100e31 <cprintf>
f010e6f4:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010e6f7:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)

	int totalSizes = 0;
f010e6fe:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	for (int i = 0; i < numOfAllocs; ++i)
f010e705:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f010e70c:	eb 2a                	jmp    f010e738 <test_initial_alloc+0x10b>
	{
		totalSizes += allocSizes[i] * allocCntPerSize ;
f010e70e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010e711:	8b 14 85 20 eb 18 f0 	mov    -0xfe714e0(,%eax,4),%edx
f010e718:	89 d0                	mov    %edx,%eax
f010e71a:	c1 e0 02             	shl    $0x2,%eax
f010e71d:	01 d0                	add    %edx,%eax
f010e71f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010e726:	01 d0                	add    %edx,%eax
f010e728:	c1 e0 03             	shl    $0x3,%eax
f010e72b:	89 c2                	mov    %eax,%edx
f010e72d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010e730:	01 d0                	add    %edx,%eax
f010e732:	89 45 ec             	mov    %eax,-0x14(%ebp)
	/*INITIAL ALLOC Scenario 2: Try to allocate set of blocks with different sizes*/
	cprintf("	2: Try to allocate set of blocks with different sizes [all should fit]\n\n") ;
	is_correct = 1;

	int totalSizes = 0;
	for (int i = 0; i < numOfAllocs; ++i)
f010e735:	ff 45 e8             	incl   -0x18(%ebp)
f010e738:	83 7d e8 06          	cmpl   $0x6,-0x18(%ebp)
f010e73c:	7e d0                	jle    f010e70e <test_initial_alloc+0xe1>
	{
		totalSizes += allocSizes[i] * allocCntPerSize ;
	}
	int remainSize = initAllocatedSpace - totalSizes ;
f010e73e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010e741:	2b 45 ec             	sub    -0x14(%ebp),%eax
f010e744:	89 45 c8             	mov    %eax,-0x38(%ebp)
	//cprintf("\n********* Remaining size = %d\n", remainSize);
	if (remainSize <= 0)
f010e747:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f010e74b:	7f 17                	jg     f010e764 <test_initial_alloc+0x137>
	{
		is_correct = 0;
f010e74d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("alloc_block_xx test is not configured correctly. Consider updating the initial allocated space OR the required allocations\n");
f010e754:	83 ec 0c             	sub    $0xc,%esp
f010e757:	68 fc 42 13 f0       	push   $0xf01342fc
f010e75c:	e8 d0 26 ff ff       	call   f0100e31 <cprintf>
f010e761:	83 c4 10             	add    $0x10,%esp
	}
	int idx = 0;
f010e764:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	void* curVA = (void*) KERNEL_HEAP_START ;
f010e76b:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
f010e772:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f010e779:	e9 fc 00 00 00       	jmp    f010e87a <test_initial_alloc+0x24d>
	{
		for (int j = 0; j < allocCntPerSize; ++j)
f010e77e:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f010e785:	e9 e0 00 00 00       	jmp    f010e86a <test_initial_alloc+0x23d>
		{
			actualSize = allocSizes[i] - sizeOfMetaData();
f010e78a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e78d:	8b 04 85 20 eb 18 f0 	mov    -0xfe714e0(,%eax,4),%eax
f010e794:	83 e8 10             	sub    $0x10,%eax
f010e797:	89 45 c4             	mov    %eax,-0x3c(%ebp)
			va = startVAs[idx] = alloc_block(actualSize, ALLOC_STRATEGY);
f010e79a:	83 ec 08             	sub    $0x8,%esp
f010e79d:	ff 75 08             	pushl  0x8(%ebp)
f010e7a0:	ff 75 c4             	pushl  -0x3c(%ebp)
f010e7a3:	e8 fd 10 02 00       	call   f012f8a5 <alloc_block>
f010e7a8:	83 c4 10             	add    $0x10,%esp
f010e7ab:	89 c2                	mov    %eax,%edx
f010e7ad:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e7b0:	89 14 85 80 a3 2d f0 	mov    %edx,-0xfd25c80(,%eax,4)
f010e7b7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e7ba:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f010e7c1:	89 45 cc             	mov    %eax,-0x34(%ebp)
			midVAs[idx] = va + actualSize/2 ;
f010e7c4:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010e7c7:	d1 e8                	shr    %eax
f010e7c9:	89 c2                	mov    %eax,%edx
f010e7cb:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010e7ce:	01 c2                	add    %eax,%edx
f010e7d0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e7d3:	89 14 85 80 cf 2d f0 	mov    %edx,-0xfd23080(,%eax,4)
			endVAs[idx] = va + actualSize - sizeof(short);
f010e7da:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010e7dd:	8d 50 fe             	lea    -0x2(%eax),%edx
f010e7e0:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010e7e3:	01 c2                	add    %eax,%edx
f010e7e5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e7e8:	89 14 85 80 b9 2d f0 	mov    %edx,-0xfd24680(,%eax,4)
			//Check returned va
			if(va == NULL || (va != (curVA + sizeOfMetaData())))
f010e7ef:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
f010e7f3:	74 0b                	je     f010e800 <test_initial_alloc+0x1d3>
f010e7f5:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010e7f8:	83 c0 10             	add    $0x10,%eax
f010e7fb:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f010e7fe:	74 27                	je     f010e827 <test_initial_alloc+0x1fa>
			{
				if (is_correct)
f010e800:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010e804:	74 21                	je     f010e827 <test_initial_alloc+0x1fa>
				{
					is_correct = 0;
f010e806:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
					cprintf("alloc_block_xx #3.%d: WRONG ALLOC - alloc_block_xx return wrong address. Expected %x, Actual %x\n", idx, curVA + sizeOfMetaData() ,va);
f010e80d:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010e810:	83 c0 10             	add    $0x10,%eax
f010e813:	ff 75 cc             	pushl  -0x34(%ebp)
f010e816:	50                   	push   %eax
f010e817:	ff 75 e4             	pushl  -0x1c(%ebp)
f010e81a:	68 78 43 13 f0       	push   $0xf0134378
f010e81f:	e8 0d 26 ff ff       	call   f0100e31 <cprintf>
f010e824:	83 c4 10             	add    $0x10,%esp
				}
			}
			curVA += allocSizes[i] ;
f010e827:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e82a:	8b 04 85 20 eb 18 f0 	mov    -0xfe714e0(,%eax,4),%eax
f010e831:	01 45 e0             	add    %eax,-0x20(%ebp)
			*(startVAs[idx]) = idx ;
f010e834:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e837:	8b 14 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%edx
f010e83e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e841:	66 89 02             	mov    %ax,(%edx)
			*(midVAs[idx]) = idx ;
f010e844:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e847:	8b 14 85 80 cf 2d f0 	mov    -0xfd23080(,%eax,4),%edx
f010e84e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e851:	66 89 02             	mov    %ax,(%edx)
			*(endVAs[idx]) = idx ;
f010e854:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e857:	8b 14 85 80 b9 2d f0 	mov    -0xfd24680(,%eax,4),%edx
f010e85e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e861:	66 89 02             	mov    %ax,(%edx)
			idx++;
f010e864:	ff 45 e4             	incl   -0x1c(%ebp)
	int idx = 0;
	void* curVA = (void*) KERNEL_HEAP_START ;
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
	{
		for (int j = 0; j < allocCntPerSize; ++j)
f010e867:	ff 45 d8             	incl   -0x28(%ebp)
f010e86a:	81 7d d8 c7 00 00 00 	cmpl   $0xc7,-0x28(%ebp)
f010e871:	0f 8e 13 ff ff ff    	jle    f010e78a <test_initial_alloc+0x15d>
		cprintf("alloc_block_xx test is not configured correctly. Consider updating the initial allocated space OR the required allocations\n");
	}
	int idx = 0;
	void* curVA = (void*) KERNEL_HEAP_START ;
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
f010e877:	ff 45 dc             	incl   -0x24(%ebp)
f010e87a:	83 7d dc 06          	cmpl   $0x6,-0x24(%ebp)
f010e87e:	0f 8e fa fe ff ff    	jle    f010e77e <test_initial_alloc+0x151>
			idx++;
		}
		//if (is_correct == 0)
		//break;
	}
	if (is_correct)
f010e884:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010e888:	74 04                	je     f010e88e <test_initial_alloc+0x261>
	{
		eval += 20;
f010e88a:	83 45 f4 14          	addl   $0x14,-0xc(%ebp)
	}
	//====================================================================//
	/*INITIAL ALLOC Scenario 3: Try to allocate a block with a size equal to the size of the first existing free block*/
	cprintf("	3: Try to allocate a block with equal to the first existing free block\n\n") ;
f010e88e:	83 ec 0c             	sub    $0xc,%esp
f010e891:	68 dc 43 13 f0       	push   $0xf01343dc
f010e896:	e8 96 25 ff ff       	call   f0100e31 <cprintf>
f010e89b:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010e89e:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)

	actualSize = remainSize - sizeOfMetaData();
f010e8a5:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010e8a8:	83 e8 10             	sub    $0x10,%eax
f010e8ab:	89 45 c4             	mov    %eax,-0x3c(%ebp)
	va = startVAs[idx] = alloc_block(actualSize, ALLOC_STRATEGY);
f010e8ae:	83 ec 08             	sub    $0x8,%esp
f010e8b1:	ff 75 08             	pushl  0x8(%ebp)
f010e8b4:	ff 75 c4             	pushl  -0x3c(%ebp)
f010e8b7:	e8 e9 0f 02 00       	call   f012f8a5 <alloc_block>
f010e8bc:	83 c4 10             	add    $0x10,%esp
f010e8bf:	89 c2                	mov    %eax,%edx
f010e8c1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e8c4:	89 14 85 80 a3 2d f0 	mov    %edx,-0xfd25c80(,%eax,4)
f010e8cb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e8ce:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f010e8d5:	89 45 cc             	mov    %eax,-0x34(%ebp)
	midVAs[idx] = va + actualSize/2 ;
f010e8d8:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010e8db:	d1 e8                	shr    %eax
f010e8dd:	89 c2                	mov    %eax,%edx
f010e8df:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010e8e2:	01 c2                	add    %eax,%edx
f010e8e4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e8e7:	89 14 85 80 cf 2d f0 	mov    %edx,-0xfd23080(,%eax,4)
	endVAs[idx] = va + actualSize - sizeof(short);
f010e8ee:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010e8f1:	8d 50 fe             	lea    -0x2(%eax),%edx
f010e8f4:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010e8f7:	01 c2                	add    %eax,%edx
f010e8f9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e8fc:	89 14 85 80 b9 2d f0 	mov    %edx,-0xfd24680(,%eax,4)
	//Check returned va
	if(va == NULL || (va != (curVA + sizeOfMetaData())))
f010e903:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
f010e907:	74 0b                	je     f010e914 <test_initial_alloc+0x2e7>
f010e909:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010e90c:	83 c0 10             	add    $0x10,%eax
f010e90f:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f010e912:	74 17                	je     f010e92b <test_initial_alloc+0x2fe>
	{
		is_correct = 0;
f010e914:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("alloc_block_xx #4: WRONG ALLOC - alloc_block_xx return wrong address.\n");
f010e91b:	83 ec 0c             	sub    $0xc,%esp
f010e91e:	68 28 44 13 f0       	push   $0xf0134428
f010e923:	e8 09 25 ff ff       	call   f0100e31 <cprintf>
f010e928:	83 c4 10             	add    $0x10,%esp
	}
	*(startVAs[idx]) = idx ;
f010e92b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e92e:	8b 14 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%edx
f010e935:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e938:	66 89 02             	mov    %ax,(%edx)
	*(midVAs[idx]) = idx ;
f010e93b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e93e:	8b 14 85 80 cf 2d f0 	mov    -0xfd23080(,%eax,4),%edx
f010e945:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e948:	66 89 02             	mov    %ax,(%edx)
	*(endVAs[idx]) = idx ;
f010e94b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e94e:	8b 14 85 80 b9 2d f0 	mov    -0xfd24680(,%eax,4),%edx
f010e955:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e958:	66 89 02             	mov    %ax,(%edx)
	if (is_correct)
f010e95b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010e95f:	74 04                	je     f010e965 <test_initial_alloc+0x338>
	{
		eval += 5;
f010e961:	83 45 f4 05          	addl   $0x5,-0xc(%ebp)
	}
	//====================================================================//
	/*INITIAL ALLOC Scenario 4: Check stored data inside each allocated block*/
	cprintf("	4: Check stored data inside each allocated block\n\n") ;
f010e965:	83 ec 0c             	sub    $0xc,%esp
f010e968:	68 70 44 13 f0       	push   $0xf0134470
f010e96d:	e8 bf 24 ff ff       	call   f0100e31 <cprintf>
f010e972:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010e975:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)

	for (int i = 0; i < idx; ++i)
f010e97c:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f010e983:	eb 5b                	jmp    f010e9e0 <test_initial_alloc+0x3b3>
	{
		if (*(startVAs[i]) != i || *(midVAs[i]) != i ||	*(endVAs[i]) != i)
f010e985:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010e988:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f010e98f:	66 8b 00             	mov    (%eax),%ax
f010e992:	98                   	cwtl   
f010e993:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f010e996:	75 26                	jne    f010e9be <test_initial_alloc+0x391>
f010e998:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010e99b:	8b 04 85 80 cf 2d f0 	mov    -0xfd23080(,%eax,4),%eax
f010e9a2:	66 8b 00             	mov    (%eax),%ax
f010e9a5:	98                   	cwtl   
f010e9a6:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f010e9a9:	75 13                	jne    f010e9be <test_initial_alloc+0x391>
f010e9ab:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010e9ae:	8b 04 85 80 b9 2d f0 	mov    -0xfd24680(,%eax,4),%eax
f010e9b5:	66 8b 00             	mov    (%eax),%ax
f010e9b8:	98                   	cwtl   
f010e9b9:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f010e9bc:	74 1f                	je     f010e9dd <test_initial_alloc+0x3b0>
		{
			is_correct = 0;
f010e9be:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("alloc_block_xx #4.%d: WRONG! content of the block is not correct. Expected %d\n",i, i);
f010e9c5:	83 ec 04             	sub    $0x4,%esp
f010e9c8:	ff 75 d4             	pushl  -0x2c(%ebp)
f010e9cb:	ff 75 d4             	pushl  -0x2c(%ebp)
f010e9ce:	68 a4 44 13 f0       	push   $0xf01344a4
f010e9d3:	e8 59 24 ff ff       	call   f0100e31 <cprintf>
f010e9d8:	83 c4 10             	add    $0x10,%esp
			break;
f010e9db:	eb 0b                	jmp    f010e9e8 <test_initial_alloc+0x3bb>
	//====================================================================//
	/*INITIAL ALLOC Scenario 4: Check stored data inside each allocated block*/
	cprintf("	4: Check stored data inside each allocated block\n\n") ;
	is_correct = 1;

	for (int i = 0; i < idx; ++i)
f010e9dd:	ff 45 d4             	incl   -0x2c(%ebp)
f010e9e0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010e9e3:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f010e9e6:	7c 9d                	jl     f010e985 <test_initial_alloc+0x358>
			is_correct = 0;
			cprintf("alloc_block_xx #4.%d: WRONG! content of the block is not correct. Expected %d\n",i, i);
			break;
		}
	}
	if (is_correct)
f010e9e8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010e9ec:	74 04                	je     f010e9f2 <test_initial_alloc+0x3c5>
	{
		eval += 10;
f010e9ee:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)
	}
	return eval;
f010e9f2:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010e9f5:	c9                   	leave  
f010e9f6:	c3                   	ret    

f010e9f7 <test_alloc_block_FF>:

void test_alloc_block_FF()
{
f010e9f7:	55                   	push   %ebp
f010e9f8:	89 e5                	mov    %esp,%ebp
f010e9fa:	57                   	push   %edi
f010e9fb:	56                   	push   %esi
f010e9fc:	53                   	push   %ebx
f010e9fd:	81 ec 8c 00 00 00    	sub    $0x8c,%esp
#if USE_KHEAP
	panic("test_alloc_block_FF: the kernel heap should be disabled. make sure USE_KHEAP = 0");
	return;
#endif

	int eval = 0;
f010ea03:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	bool is_correct;
	void* va = NULL;
f010ea0a:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	uint32 actualSize = 0;
f010ea11:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)

	cprintf("=======================================================\n") ;
f010ea18:	83 ec 0c             	sub    $0xc,%esp
f010ea1b:	68 f4 44 13 f0       	push   $0xf01344f4
f010ea20:	e8 0c 24 ff ff       	call   f0100e31 <cprintf>
f010ea25:	83 c4 10             	add    $0x10,%esp
	cprintf("FIRST: Tests depend on the Allocate Function ONLY [40%]\n") ;
f010ea28:	83 ec 0c             	sub    $0xc,%esp
f010ea2b:	68 30 45 13 f0       	push   $0xf0134530
f010ea30:	e8 fc 23 ff ff       	call   f0100e31 <cprintf>
f010ea35:	83 c4 10             	add    $0x10,%esp
	cprintf("=======================================================\n") ;
f010ea38:	83 ec 0c             	sub    $0xc,%esp
f010ea3b:	68 f4 44 13 f0       	push   $0xf01344f4
f010ea40:	e8 ec 23 ff ff       	call   f0100e31 <cprintf>
f010ea45:	83 c4 10             	add    $0x10,%esp
	eval = test_initial_alloc(DA_FF);
f010ea48:	83 ec 0c             	sub    $0xc,%esp
f010ea4b:	6a 01                	push   $0x1
f010ea4d:	e8 db fb ff ff       	call   f010e62d <test_initial_alloc>
f010ea52:	83 c4 10             	add    $0x10,%esp
f010ea55:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	cprintf("====================================================\n") ;
f010ea58:	83 ec 0c             	sub    $0xc,%esp
f010ea5b:	68 6c 45 13 f0       	push   $0xf013456c
f010ea60:	e8 cc 23 ff ff       	call   f0100e31 <cprintf>
f010ea65:	83 c4 10             	add    $0x10,%esp
	cprintf("SECOND: Tests depend on BOTH Allocate and Free [60%] \n") ;
f010ea68:	83 ec 0c             	sub    $0xc,%esp
f010ea6b:	68 a4 45 13 f0       	push   $0xf01345a4
f010ea70:	e8 bc 23 ff ff       	call   f0100e31 <cprintf>
f010ea75:	83 c4 10             	add    $0x10,%esp
	cprintf("====================================================\n") ;
f010ea78:	83 ec 0c             	sub    $0xc,%esp
f010ea7b:	68 6c 45 13 f0       	push   $0xf013456c
f010ea80:	e8 ac 23 ff ff       	call   f0100e31 <cprintf>
f010ea85:	83 c4 10             	add    $0x10,%esp

	//Free set of blocks with different sizes (first block of each size)
	for (int i = 0; i < numOfAllocs; ++i)
f010ea88:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f010ea8f:	eb 2c                	jmp    f010eabd <test_alloc_block_FF+0xc6>
	{
		free_block(startVAs[i*allocCntPerSize]);
f010ea91:	8b 55 dc             	mov    -0x24(%ebp),%edx
f010ea94:	89 d0                	mov    %edx,%eax
f010ea96:	c1 e0 02             	shl    $0x2,%eax
f010ea99:	01 d0                	add    %edx,%eax
f010ea9b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010eaa2:	01 d0                	add    %edx,%eax
f010eaa4:	c1 e0 03             	shl    $0x3,%eax
f010eaa7:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f010eaae:	83 ec 0c             	sub    $0xc,%esp
f010eab1:	50                   	push   %eax
f010eab2:	e8 3d 13 02 00       	call   f012fdf4 <free_block>
f010eab7:	83 c4 10             	add    $0x10,%esp
	cprintf("====================================================\n") ;
	cprintf("SECOND: Tests depend on BOTH Allocate and Free [60%] \n") ;
	cprintf("====================================================\n") ;

	//Free set of blocks with different sizes (first block of each size)
	for (int i = 0; i < numOfAllocs; ++i)
f010eaba:	ff 45 dc             	incl   -0x24(%ebp)
f010eabd:	83 7d dc 06          	cmpl   $0x6,-0x24(%ebp)
f010eac1:	7e ce                	jle    f010ea91 <test_alloc_block_FF+0x9a>
		free_block(startVAs[i*allocCntPerSize]);
	}

	//====================================================================//
	/*FF ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	cprintf("	1: Try to allocate large block [not fit in any space]\n\n") ;
f010eac3:	83 ec 0c             	sub    $0xc,%esp
f010eac6:	68 c4 41 13 f0       	push   $0xf01341c4
f010eacb:	e8 61 23 ff ff       	call   f0100e31 <cprintf>
f010ead0:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010ead3:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	uint32 maxSize = 0 ;
f010eada:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	for (int i = 0; i < numOfAllocs; ++i)
f010eae1:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f010eae8:	eb 1f                	jmp    f010eb09 <test_alloc_block_FF+0x112>
	{
		if (allocSizes[i] > maxSize)
f010eaea:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010eaed:	8b 04 85 20 eb 18 f0 	mov    -0xfe714e0(,%eax,4),%eax
f010eaf4:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010eaf7:	76 0d                	jbe    f010eb06 <test_alloc_block_FF+0x10f>
			maxSize = allocSizes[i] ;
f010eaf9:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010eafc:	8b 04 85 20 eb 18 f0 	mov    -0xfe714e0(,%eax,4),%eax
f010eb03:	89 45 d8             	mov    %eax,-0x28(%ebp)
	/*FF ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	cprintf("	1: Try to allocate large block [not fit in any space]\n\n") ;
	is_correct = 1;

	uint32 maxSize = 0 ;
	for (int i = 0; i < numOfAllocs; ++i)
f010eb06:	ff 45 d4             	incl   -0x2c(%ebp)
f010eb09:	83 7d d4 06          	cmpl   $0x6,-0x2c(%ebp)
f010eb0d:	7e db                	jle    f010eaea <test_alloc_block_FF+0xf3>
	{
		if (allocSizes[i] > maxSize)
			maxSize = allocSizes[i] ;
	}
	va = alloc_block(maxSize, DA_FF);
f010eb0f:	83 ec 08             	sub    $0x8,%esp
f010eb12:	6a 01                	push   $0x1
f010eb14:	ff 75 d8             	pushl  -0x28(%ebp)
f010eb17:	e8 89 0d 02 00       	call   f012f8a5 <alloc_block>
f010eb1c:	83 c4 10             	add    $0x10,%esp
f010eb1f:	89 45 c8             	mov    %eax,-0x38(%ebp)

	//Check returned va
	if(va != NULL)
f010eb22:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f010eb26:	74 17                	je     f010eb3f <test_alloc_block_FF+0x148>
	{
		is_correct = 0;
f010eb28:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		cprintf("alloc_block_FF #5: WRONG FF ALLOC - alloc_block_FF find a block instead no existing free blocks with the given size.\n");
f010eb2f:	83 ec 0c             	sub    $0xc,%esp
f010eb32:	68 dc 45 13 f0       	push   $0xf01345dc
f010eb37:	e8 f5 22 ff ff       	call   f0100e31 <cprintf>
f010eb3c:	83 c4 10             	add    $0x10,%esp
	}

	if (is_correct)
f010eb3f:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f010eb43:	74 04                	je     f010eb49 <test_alloc_block_FF+0x152>
	{
		eval += 10;
f010eb45:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	}
	//====================================================================//
	/*FF ALLOC Scenario 2: Try to allocate blocks with sizes smaller than existing free blocks*/
	cprintf("	2: Try to allocate set of blocks with different sizes smaller than existing free blocks\n\n") ;
f010eb49:	83 ec 0c             	sub    $0xc,%esp
f010eb4c:	68 54 46 13 f0       	push   $0xf0134654
f010eb51:	e8 db 22 ff ff       	call   f0100e31 <cprintf>
f010eb56:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010eb59:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

#define numOfFFTests 3
	uint32 testSizes[numOfFFTests] = {1*kilo + kilo/2, 3*kilo, kilo/2} ;
f010eb60:	8d 45 b0             	lea    -0x50(%ebp),%eax
f010eb63:	bb 14 48 13 f0       	mov    $0xf0134814,%ebx
f010eb68:	ba 03 00 00 00       	mov    $0x3,%edx
f010eb6d:	89 c7                	mov    %eax,%edi
f010eb6f:	89 de                	mov    %ebx,%esi
f010eb71:	89 d1                	mov    %edx,%ecx
f010eb73:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	uint32 startOf1st7KB = (uint32)startVAs[6*allocCntPerSize];
f010eb75:	a1 40 b6 2d f0       	mov    0xf02db640,%eax
f010eb7a:	89 45 c0             	mov    %eax,-0x40(%ebp)
	uint32 expectedVAs[numOfFFTests] = { KERNEL_HEAP_START + sizeOfMetaData(), startOf1st7KB, KERNEL_HEAP_START + testSizes[0] + sizeOfMetaData()};
f010eb7d:	c7 45 a4 10 00 00 f6 	movl   $0xf6000010,-0x5c(%ebp)
f010eb84:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010eb87:	89 45 a8             	mov    %eax,-0x58(%ebp)
f010eb8a:	8b 45 b0             	mov    -0x50(%ebp),%eax
f010eb8d:	2d f0 ff ff 09       	sub    $0x9fffff0,%eax
f010eb92:	89 45 ac             	mov    %eax,-0x54(%ebp)
	short* tstStartVAs[numOfFFTests+1] ;
	short* tstMidVAs[numOfFFTests+1] ;
	short* tstEndVAs[numOfFFTests+1] ;
	for (int i = 0; i < numOfFFTests; ++i)
f010eb95:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
f010eb9c:	e9 c6 00 00 00       	jmp    f010ec67 <test_alloc_block_FF+0x270>
	{
		actualSize = testSizes[i] - sizeOfMetaData();
f010eba1:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010eba4:	8b 44 85 b0          	mov    -0x50(%ebp,%eax,4),%eax
f010eba8:	83 e8 10             	sub    $0x10,%eax
f010ebab:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		va = tstStartVAs[i] = alloc_block(actualSize, DA_FF);
f010ebae:	83 ec 08             	sub    $0x8,%esp
f010ebb1:	6a 01                	push   $0x1
f010ebb3:	ff 75 c4             	pushl  -0x3c(%ebp)
f010ebb6:	e8 ea 0c 02 00       	call   f012f8a5 <alloc_block>
f010ebbb:	83 c4 10             	add    $0x10,%esp
f010ebbe:	89 c2                	mov    %eax,%edx
f010ebc0:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010ebc3:	89 54 85 94          	mov    %edx,-0x6c(%ebp,%eax,4)
f010ebc7:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010ebca:	8b 44 85 94          	mov    -0x6c(%ebp,%eax,4),%eax
f010ebce:	89 45 c8             	mov    %eax,-0x38(%ebp)
		tstMidVAs[i] = va + actualSize/2 ;
f010ebd1:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010ebd4:	d1 e8                	shr    %eax
f010ebd6:	89 c2                	mov    %eax,%edx
f010ebd8:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010ebdb:	01 c2                	add    %eax,%edx
f010ebdd:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010ebe0:	89 54 85 84          	mov    %edx,-0x7c(%ebp,%eax,4)
		tstEndVAs[i] = va + actualSize - sizeof(short);
f010ebe4:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010ebe7:	8d 50 fe             	lea    -0x2(%eax),%edx
f010ebea:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010ebed:	01 c2                	add    %eax,%edx
f010ebef:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010ebf2:	89 94 85 74 ff ff ff 	mov    %edx,-0x8c(%ebp,%eax,4)
		//Check returned va
		if(tstStartVAs[i] == NULL || (tstStartVAs[i] != (short*)expectedVAs[i]))
f010ebf9:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010ebfc:	8b 44 85 94          	mov    -0x6c(%ebp,%eax,4),%eax
f010ec00:	85 c0                	test   %eax,%eax
f010ec02:	74 12                	je     f010ec16 <test_alloc_block_FF+0x21f>
f010ec04:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010ec07:	8b 54 85 94          	mov    -0x6c(%ebp,%eax,4),%edx
f010ec0b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010ec0e:	8b 44 85 a4          	mov    -0x5c(%ebp,%eax,4),%eax
f010ec12:	39 c2                	cmp    %eax,%edx
f010ec14:	74 27                	je     f010ec3d <test_alloc_block_FF+0x246>
		{
			is_correct = 0;
f010ec16:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("alloc_block_FF #6.%d: WRONG FF ALLOC - alloc_block_FF return wrong address. Expected %x, Actual %x\n", i, expectedVAs[i] ,tstStartVAs[i]);
f010ec1d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010ec20:	8b 54 85 94          	mov    -0x6c(%ebp,%eax,4),%edx
f010ec24:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010ec27:	8b 44 85 a4          	mov    -0x5c(%ebp,%eax,4),%eax
f010ec2b:	52                   	push   %edx
f010ec2c:	50                   	push   %eax
f010ec2d:	ff 75 d0             	pushl  -0x30(%ebp)
f010ec30:	68 b0 46 13 f0       	push   $0xf01346b0
f010ec35:	e8 f7 21 ff ff       	call   f0100e31 <cprintf>
f010ec3a:	83 c4 10             	add    $0x10,%esp
			//break;
		}
		*(tstStartVAs[i]) = 353;
f010ec3d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010ec40:	8b 44 85 94          	mov    -0x6c(%ebp,%eax,4),%eax
f010ec44:	66 c7 00 61 01       	movw   $0x161,(%eax)
		*(tstMidVAs[i]) = 353;
f010ec49:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010ec4c:	8b 44 85 84          	mov    -0x7c(%ebp,%eax,4),%eax
f010ec50:	66 c7 00 61 01       	movw   $0x161,(%eax)
		*(tstEndVAs[i]) = 353;
f010ec55:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010ec58:	8b 84 85 74 ff ff ff 	mov    -0x8c(%ebp,%eax,4),%eax
f010ec5f:	66 c7 00 61 01       	movw   $0x161,(%eax)
	uint32 startOf1st7KB = (uint32)startVAs[6*allocCntPerSize];
	uint32 expectedVAs[numOfFFTests] = { KERNEL_HEAP_START + sizeOfMetaData(), startOf1st7KB, KERNEL_HEAP_START + testSizes[0] + sizeOfMetaData()};
	short* tstStartVAs[numOfFFTests+1] ;
	short* tstMidVAs[numOfFFTests+1] ;
	short* tstEndVAs[numOfFFTests+1] ;
	for (int i = 0; i < numOfFFTests; ++i)
f010ec64:	ff 45 d0             	incl   -0x30(%ebp)
f010ec67:	83 7d d0 02          	cmpl   $0x2,-0x30(%ebp)
f010ec6b:	0f 8e 30 ff ff ff    	jle    f010eba1 <test_alloc_block_FF+0x1aa>
		}
		*(tstStartVAs[i]) = 353;
		*(tstMidVAs[i]) = 353;
		*(tstEndVAs[i]) = 353;
	}
	if (is_correct)
f010ec71:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f010ec75:	74 04                	je     f010ec7b <test_alloc_block_FF+0x284>
	{
		eval += 15;
f010ec77:	83 45 e4 0f          	addl   $0xf,-0x1c(%ebp)
	}
	//====================================================================//
	/*FF ALLOC Scenario 3: Try to allocate a block with a size equal to the size of the first existing free block*/
	cprintf("	3: Try to allocate a block with equal to the first existing free block\n\n") ;
f010ec7b:	83 ec 0c             	sub    $0xc,%esp
f010ec7e:	68 dc 43 13 f0       	push   $0xf01343dc
f010ec83:	e8 a9 21 ff ff       	call   f0100e31 <cprintf>
f010ec88:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010ec8b:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	actualSize = 2*kilo - sizeOfMetaData();
f010ec92:	c7 45 c4 f0 07 00 00 	movl   $0x7f0,-0x3c(%ebp)
	va = tstStartVAs[numOfFFTests] = alloc_block(actualSize, DA_FF);
f010ec99:	83 ec 08             	sub    $0x8,%esp
f010ec9c:	6a 01                	push   $0x1
f010ec9e:	ff 75 c4             	pushl  -0x3c(%ebp)
f010eca1:	e8 ff 0b 02 00       	call   f012f8a5 <alloc_block>
f010eca6:	83 c4 10             	add    $0x10,%esp
f010eca9:	89 45 a0             	mov    %eax,-0x60(%ebp)
f010ecac:	8b 45 a0             	mov    -0x60(%ebp),%eax
f010ecaf:	89 45 c8             	mov    %eax,-0x38(%ebp)
	tstMidVAs[numOfFFTests] = va + actualSize/2 ;
f010ecb2:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010ecb5:	d1 e8                	shr    %eax
f010ecb7:	89 c2                	mov    %eax,%edx
f010ecb9:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010ecbc:	01 d0                	add    %edx,%eax
f010ecbe:	89 45 90             	mov    %eax,-0x70(%ebp)
	tstEndVAs[numOfFFTests] = va + actualSize - sizeof(short);
f010ecc1:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010ecc4:	8d 50 fe             	lea    -0x2(%eax),%edx
f010ecc7:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010ecca:	01 d0                	add    %edx,%eax
f010eccc:	89 45 80             	mov    %eax,-0x80(%ebp)
	//Check returned va
	void* expected = (void*)(KERNEL_HEAP_START + testSizes[0] + testSizes[2] + sizeOfMetaData()) ;
f010eccf:	8b 55 b0             	mov    -0x50(%ebp),%edx
f010ecd2:	8b 45 b8             	mov    -0x48(%ebp),%eax
f010ecd5:	01 d0                	add    %edx,%eax
f010ecd7:	2d f0 ff ff 09       	sub    $0x9fffff0,%eax
f010ecdc:	89 45 bc             	mov    %eax,-0x44(%ebp)
	if(va == NULL || (va != expected))
f010ecdf:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f010ece3:	74 08                	je     f010eced <test_alloc_block_FF+0x2f6>
f010ece5:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010ece8:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f010eceb:	74 1d                	je     f010ed0a <test_alloc_block_FF+0x313>
	{
		is_correct = 0;
f010eced:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		cprintf("alloc_block_FF #7: WRONG FF ALLOC - alloc_block_FF return wrong address.expected %x, actual %x\n", expected, va);
f010ecf4:	83 ec 04             	sub    $0x4,%esp
f010ecf7:	ff 75 c8             	pushl  -0x38(%ebp)
f010ecfa:	ff 75 bc             	pushl  -0x44(%ebp)
f010ecfd:	68 14 47 13 f0       	push   $0xf0134714
f010ed02:	e8 2a 21 ff ff       	call   f0100e31 <cprintf>
f010ed07:	83 c4 10             	add    $0x10,%esp
	}
	*(tstStartVAs[numOfFFTests]) = 353 ;
f010ed0a:	8b 45 a0             	mov    -0x60(%ebp),%eax
f010ed0d:	66 c7 00 61 01       	movw   $0x161,(%eax)
	*(tstMidVAs[numOfFFTests]) = 353 ;
f010ed12:	8b 45 90             	mov    -0x70(%ebp),%eax
f010ed15:	66 c7 00 61 01       	movw   $0x161,(%eax)
	*(tstEndVAs[numOfFFTests]) = 353 ;
f010ed1a:	8b 45 80             	mov    -0x80(%ebp),%eax
f010ed1d:	66 c7 00 61 01       	movw   $0x161,(%eax)

	if (is_correct)
f010ed22:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f010ed26:	74 04                	je     f010ed2c <test_alloc_block_FF+0x335>
	{
		eval += 15;
f010ed28:	83 45 e4 0f          	addl   $0xf,-0x1c(%ebp)
	}
	//====================================================================//
	/*FF ALLOC Scenario 4: Check stored data inside each allocated block*/
	cprintf("	4: Check stored data inside each allocated block\n\n") ;
f010ed2c:	83 ec 0c             	sub    $0xc,%esp
f010ed2f:	68 70 44 13 f0       	push   $0xf0134470
f010ed34:	e8 f8 20 ff ff       	call   f0100e31 <cprintf>
f010ed39:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010ed3c:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	for (int i = 0; i <= numOfFFTests; ++i)
f010ed43:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f010ed4a:	e9 82 00 00 00       	jmp    f010edd1 <test_alloc_block_FF+0x3da>
	{
		//cprintf("startVA = %x, mid = %x, last = %x\n", tstStartVAs[i], tstMidVAs[i], tstEndVAs[i]);
		if (*(tstStartVAs[i]) != 353 || *(tstMidVAs[i]) != 353 || *(tstEndVAs[i]) != 353)
f010ed4f:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010ed52:	8b 44 85 94          	mov    -0x6c(%ebp,%eax,4),%eax
f010ed56:	66 8b 00             	mov    (%eax),%ax
f010ed59:	66 3d 61 01          	cmp    $0x161,%ax
f010ed5d:	75 23                	jne    f010ed82 <test_alloc_block_FF+0x38b>
f010ed5f:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010ed62:	8b 44 85 84          	mov    -0x7c(%ebp,%eax,4),%eax
f010ed66:	66 8b 00             	mov    (%eax),%ax
f010ed69:	66 3d 61 01          	cmp    $0x161,%ax
f010ed6d:	75 13                	jne    f010ed82 <test_alloc_block_FF+0x38b>
f010ed6f:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010ed72:	8b 84 85 74 ff ff ff 	mov    -0x8c(%ebp,%eax,4),%eax
f010ed79:	66 8b 00             	mov    (%eax),%ax
f010ed7c:	66 3d 61 01          	cmp    $0x161,%ax
f010ed80:	74 4c                	je     f010edce <test_alloc_block_FF+0x3d7>
		{
			is_correct = 0;
f010ed82:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("alloc_block_FF #8.%d: WRONG! content of the block is not correct. Expected=%d, val1=%d, val2=%d, val3=%d\n",i, 353, *(tstStartVAs[i]), *(tstMidVAs[i]), *(tstEndVAs[i]));
f010ed89:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010ed8c:	8b 84 85 74 ff ff ff 	mov    -0x8c(%ebp,%eax,4),%eax
f010ed93:	66 8b 00             	mov    (%eax),%ax
f010ed96:	0f bf c8             	movswl %ax,%ecx
f010ed99:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010ed9c:	8b 44 85 84          	mov    -0x7c(%ebp,%eax,4),%eax
f010eda0:	66 8b 00             	mov    (%eax),%ax
f010eda3:	0f bf d0             	movswl %ax,%edx
f010eda6:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010eda9:	8b 44 85 94          	mov    -0x6c(%ebp,%eax,4),%eax
f010edad:	66 8b 00             	mov    (%eax),%ax
f010edb0:	98                   	cwtl   
f010edb1:	83 ec 08             	sub    $0x8,%esp
f010edb4:	51                   	push   %ecx
f010edb5:	52                   	push   %edx
f010edb6:	50                   	push   %eax
f010edb7:	68 61 01 00 00       	push   $0x161
f010edbc:	ff 75 cc             	pushl  -0x34(%ebp)
f010edbf:	68 74 47 13 f0       	push   $0xf0134774
f010edc4:	e8 68 20 ff ff       	call   f0100e31 <cprintf>
f010edc9:	83 c4 20             	add    $0x20,%esp
			break;
f010edcc:	eb 0d                	jmp    f010eddb <test_alloc_block_FF+0x3e4>
	//====================================================================//
	/*FF ALLOC Scenario 4: Check stored data inside each allocated block*/
	cprintf("	4: Check stored data inside each allocated block\n\n") ;
	is_correct = 1;

	for (int i = 0; i <= numOfFFTests; ++i)
f010edce:	ff 45 cc             	incl   -0x34(%ebp)
f010edd1:	83 7d cc 03          	cmpl   $0x3,-0x34(%ebp)
f010edd5:	0f 8e 74 ff ff ff    	jle    f010ed4f <test_alloc_block_FF+0x358>
			cprintf("alloc_block_FF #8.%d: WRONG! content of the block is not correct. Expected=%d, val1=%d, val2=%d, val3=%d\n",i, 353, *(tstStartVAs[i]), *(tstMidVAs[i]), *(tstEndVAs[i]));
			break;
		}
	}

	if (is_correct)
f010eddb:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f010eddf:	74 04                	je     f010ede5 <test_alloc_block_FF+0x3ee>
	{
		eval += 20;
f010ede1:	83 45 e4 14          	addl   $0x14,-0x1c(%ebp)
	}
	cprintf("test alloc_block_FF completed. Evaluation = %d%\n", eval);
f010ede5:	83 ec 08             	sub    $0x8,%esp
f010ede8:	ff 75 e4             	pushl  -0x1c(%ebp)
f010edeb:	68 e0 47 13 f0       	push   $0xf01347e0
f010edf0:	e8 3c 20 ff ff       	call   f0100e31 <cprintf>
f010edf5:	83 c4 10             	add    $0x10,%esp
}
f010edf8:	90                   	nop
f010edf9:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010edfc:	5b                   	pop    %ebx
f010edfd:	5e                   	pop    %esi
f010edfe:	5f                   	pop    %edi
f010edff:	5d                   	pop    %ebp
f010ee00:	c3                   	ret    

f010ee01 <test_alloc_block_BF>:

void test_alloc_block_BF()
{
f010ee01:	55                   	push   %ebp
f010ee02:	89 e5                	mov    %esp,%ebp
f010ee04:	57                   	push   %edi
f010ee05:	56                   	push   %esi
f010ee06:	53                   	push   %ebx
f010ee07:	81 ec bc 00 00 00    	sub    $0xbc,%esp
#if USE_KHEAP
	panic("test_alloc_block_BF: the kernel heap should be disabled. make sure USE_KHEAP = 0");
	return;
#endif

	int eval = 0;
f010ee0d:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	bool is_correct;
	void* va = NULL;
f010ee14:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	uint32 actualSize = 0;
f010ee1b:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)

	cprintf("=================================================\n") ;
f010ee22:	83 ec 0c             	sub    $0xc,%esp
f010ee25:	68 20 48 13 f0       	push   $0xf0134820
f010ee2a:	e8 02 20 ff ff       	call   f0100e31 <cprintf>
f010ee2f:	83 c4 10             	add    $0x10,%esp
	cprintf("FIRST: Tests depend on the Allocate Function ONLY\n") ;
f010ee32:	83 ec 0c             	sub    $0xc,%esp
f010ee35:	68 54 48 13 f0       	push   $0xf0134854
f010ee3a:	e8 f2 1f ff ff       	call   f0100e31 <cprintf>
f010ee3f:	83 c4 10             	add    $0x10,%esp
	cprintf("=================================================\n") ;
f010ee42:	83 ec 0c             	sub    $0xc,%esp
f010ee45:	68 20 48 13 f0       	push   $0xf0134820
f010ee4a:	e8 e2 1f ff ff       	call   f0100e31 <cprintf>
f010ee4f:	83 c4 10             	add    $0x10,%esp
	eval = test_initial_alloc(DA_BF);
f010ee52:	83 ec 0c             	sub    $0xc,%esp
f010ee55:	6a 03                	push   $0x3
f010ee57:	e8 d1 f7 ff ff       	call   f010e62d <test_initial_alloc>
f010ee5c:	83 c4 10             	add    $0x10,%esp
f010ee5f:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	cprintf("=================================================\n") ;
f010ee62:	83 ec 0c             	sub    $0xc,%esp
f010ee65:	68 20 48 13 f0       	push   $0xf0134820
f010ee6a:	e8 c2 1f ff ff       	call   f0100e31 <cprintf>
f010ee6f:	83 c4 10             	add    $0x10,%esp
	cprintf("SECOND: Tests depend on BOTH Allocate and Free \n") ;
f010ee72:	83 ec 0c             	sub    $0xc,%esp
f010ee75:	68 88 48 13 f0       	push   $0xf0134888
f010ee7a:	e8 b2 1f ff ff       	call   f0100e31 <cprintf>
f010ee7f:	83 c4 10             	add    $0x10,%esp
	cprintf("=================================================\n") ;
f010ee82:	83 ec 0c             	sub    $0xc,%esp
f010ee85:	68 20 48 13 f0       	push   $0xf0134820
f010ee8a:	e8 a2 1f ff ff       	call   f0100e31 <cprintf>
f010ee8f:	83 c4 10             	add    $0x10,%esp

	//Free set of blocks with different sizes (first block of each size)
	for (int i = 0; i < numOfAllocs; ++i)
f010ee92:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f010ee99:	eb 2c                	jmp    f010eec7 <test_alloc_block_BF+0xc6>
	{
		free_block(startVAs[i*allocCntPerSize]);
f010ee9b:	8b 55 dc             	mov    -0x24(%ebp),%edx
f010ee9e:	89 d0                	mov    %edx,%eax
f010eea0:	c1 e0 02             	shl    $0x2,%eax
f010eea3:	01 d0                	add    %edx,%eax
f010eea5:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010eeac:	01 d0                	add    %edx,%eax
f010eeae:	c1 e0 03             	shl    $0x3,%eax
f010eeb1:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f010eeb8:	83 ec 0c             	sub    $0xc,%esp
f010eebb:	50                   	push   %eax
f010eebc:	e8 33 0f 02 00       	call   f012fdf4 <free_block>
f010eec1:	83 c4 10             	add    $0x10,%esp
	cprintf("=================================================\n") ;
	cprintf("SECOND: Tests depend on BOTH Allocate and Free \n") ;
	cprintf("=================================================\n") ;

	//Free set of blocks with different sizes (first block of each size)
	for (int i = 0; i < numOfAllocs; ++i)
f010eec4:	ff 45 dc             	incl   -0x24(%ebp)
f010eec7:	83 7d dc 06          	cmpl   $0x6,-0x24(%ebp)
f010eecb:	7e ce                	jle    f010ee9b <test_alloc_block_BF+0x9a>
		free_block(startVAs[i*allocCntPerSize]);
	}

	//====================================================================//
	/*BF ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	cprintf("	1: Try to allocate large block [not fit in any space]\n\n") ;
f010eecd:	83 ec 0c             	sub    $0xc,%esp
f010eed0:	68 c4 41 13 f0       	push   $0xf01341c4
f010eed5:	e8 57 1f ff ff       	call   f0100e31 <cprintf>
f010eeda:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010eedd:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	uint32 maxSize = 0 ;
f010eee4:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	for (int i = 0; i < numOfAllocs; ++i)
f010eeeb:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f010eef2:	eb 1f                	jmp    f010ef13 <test_alloc_block_BF+0x112>
	{
		if (allocSizes[i] > maxSize)
f010eef4:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010eef7:	8b 04 85 20 eb 18 f0 	mov    -0xfe714e0(,%eax,4),%eax
f010eefe:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010ef01:	76 0d                	jbe    f010ef10 <test_alloc_block_BF+0x10f>
			maxSize = allocSizes[i] ;
f010ef03:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010ef06:	8b 04 85 20 eb 18 f0 	mov    -0xfe714e0(,%eax,4),%eax
f010ef0d:	89 45 d8             	mov    %eax,-0x28(%ebp)
	/*BF ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	cprintf("	1: Try to allocate large block [not fit in any space]\n\n") ;
	is_correct = 1;

	uint32 maxSize = 0 ;
	for (int i = 0; i < numOfAllocs; ++i)
f010ef10:	ff 45 d4             	incl   -0x2c(%ebp)
f010ef13:	83 7d d4 06          	cmpl   $0x6,-0x2c(%ebp)
f010ef17:	7e db                	jle    f010eef4 <test_alloc_block_BF+0xf3>
	{
		if (allocSizes[i] > maxSize)
			maxSize = allocSizes[i] ;
	}
	va = alloc_block(maxSize, DA_BF);
f010ef19:	83 ec 08             	sub    $0x8,%esp
f010ef1c:	6a 03                	push   $0x3
f010ef1e:	ff 75 d8             	pushl  -0x28(%ebp)
f010ef21:	e8 7f 09 02 00       	call   f012f8a5 <alloc_block>
f010ef26:	83 c4 10             	add    $0x10,%esp
f010ef29:	89 45 c8             	mov    %eax,-0x38(%ebp)

	//Check returned va
	if(va != NULL)
f010ef2c:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f010ef30:	74 17                	je     f010ef49 <test_alloc_block_BF+0x148>
	{
		is_correct = 0;
f010ef32:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		cprintf("alloc_block_BF #5: WRONG BF ALLOC - alloc_block_BF find a block instead no existing free blocks with the given size.\n");
f010ef39:	83 ec 0c             	sub    $0xc,%esp
f010ef3c:	68 bc 48 13 f0       	push   $0xf01348bc
f010ef41:	e8 eb 1e ff ff       	call   f0100e31 <cprintf>
f010ef46:	83 c4 10             	add    $0x10,%esp
	}
	if (is_correct)
f010ef49:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f010ef4d:	74 04                	je     f010ef53 <test_alloc_block_BF+0x152>
	{
		eval += 10;
f010ef4f:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	}
	//====================================================================//
	/*BF ALLOC Scenario 2: Try to allocate blocks with sizes smaller than existing free blocks*/
	cprintf("	2: Try to allocate set of blocks with different sizes smaller than existing free blocks\n\n") ;
f010ef53:	83 ec 0c             	sub    $0xc,%esp
f010ef56:	68 54 46 13 f0       	push   $0xf0134654
f010ef5b:	e8 d1 1e ff ff       	call   f0100e31 <cprintf>
f010ef60:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010ef63:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

#define numOfBFTests 5
	uint32 testSizes[numOfBFTests] = {/*only 1 can fit*/4*kilo + kilo/2, /*many can fit*/ 1*kilo + kilo/4, 4*sizeof(short) + sizeOfMetaData(), kilo/2, /*only 1 can fit (@head)*/3*kilo } ;
f010ef6a:	8d 45 a0             	lea    -0x60(%ebp),%eax
f010ef6d:	bb e0 4a 13 f0       	mov    $0xf0134ae0,%ebx
f010ef72:	ba 05 00 00 00       	mov    $0x5,%edx
f010ef77:	89 c7                	mov    %eax,%edi
f010ef79:	89 de                	mov    %ebx,%esi
f010ef7b:	89 d1                	mov    %edx,%ecx
f010ef7d:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	uint32 startOf1st12B = (uint32)startVAs[3*allocCntPerSize];
f010ef7f:	a1 e0 ac 2d f0       	mov    0xf02dace0,%eax
f010ef84:	89 45 c0             	mov    %eax,-0x40(%ebp)
	uint32 startOf1st2KB = (uint32)startVAs[4*allocCntPerSize];
f010ef87:	a1 00 b0 2d f0       	mov    0xf02db000,%eax
f010ef8c:	89 45 bc             	mov    %eax,-0x44(%ebp)
	uint32 startOf1st7KB = (uint32)startVAs[6*allocCntPerSize];
f010ef8f:	a1 40 b6 2d f0       	mov    0xf02db640,%eax
f010ef94:	89 45 b8             	mov    %eax,-0x48(%ebp)

	uint32 expectedVAs[numOfBFTests] = {startOf1st7KB, startOf1st2KB, startOf1st12B, startOf1st2KB + testSizes[1], KERNEL_HEAP_START + sizeOfMetaData()};
f010ef97:	8b 45 b8             	mov    -0x48(%ebp),%eax
f010ef9a:	89 45 8c             	mov    %eax,-0x74(%ebp)
f010ef9d:	8b 45 bc             	mov    -0x44(%ebp),%eax
f010efa0:	89 45 90             	mov    %eax,-0x70(%ebp)
f010efa3:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010efa6:	89 45 94             	mov    %eax,-0x6c(%ebp)
f010efa9:	8b 55 a4             	mov    -0x5c(%ebp),%edx
f010efac:	8b 45 bc             	mov    -0x44(%ebp),%eax
f010efaf:	01 d0                	add    %edx,%eax
f010efb1:	89 45 98             	mov    %eax,-0x68(%ebp)
f010efb4:	c7 45 9c 10 00 00 f6 	movl   $0xf6000010,-0x64(%ebp)
	short* tstStartVAs[numOfBFTests+1] ;
	short* tstMidVAs[numOfBFTests+1] ;
	short* tstEndVAs[numOfBFTests+1] ;
	for (int i = 0; i < numOfBFTests; ++i)
f010efbb:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
f010efc2:	e9 de 00 00 00       	jmp    f010f0a5 <test_alloc_block_BF+0x2a4>
	{
		actualSize = testSizes[i] - sizeOfMetaData();
f010efc7:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010efca:	8b 44 85 a0          	mov    -0x60(%ebp,%eax,4),%eax
f010efce:	83 e8 10             	sub    $0x10,%eax
f010efd1:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		va = tstStartVAs[i] = alloc_block(actualSize, DA_BF);
f010efd4:	83 ec 08             	sub    $0x8,%esp
f010efd7:	6a 03                	push   $0x3
f010efd9:	ff 75 c4             	pushl  -0x3c(%ebp)
f010efdc:	e8 c4 08 02 00       	call   f012f8a5 <alloc_block>
f010efe1:	83 c4 10             	add    $0x10,%esp
f010efe4:	89 c2                	mov    %eax,%edx
f010efe6:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010efe9:	89 94 85 74 ff ff ff 	mov    %edx,-0x8c(%ebp,%eax,4)
f010eff0:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010eff3:	8b 84 85 74 ff ff ff 	mov    -0x8c(%ebp,%eax,4),%eax
f010effa:	89 45 c8             	mov    %eax,-0x38(%ebp)
		tstMidVAs[i] = va + actualSize/2 ;
f010effd:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010f000:	d1 e8                	shr    %eax
f010f002:	89 c2                	mov    %eax,%edx
f010f004:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010f007:	01 c2                	add    %eax,%edx
f010f009:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010f00c:	89 94 85 5c ff ff ff 	mov    %edx,-0xa4(%ebp,%eax,4)
		tstEndVAs[i] = va + actualSize - sizeof(short);
f010f013:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010f016:	8d 50 fe             	lea    -0x2(%eax),%edx
f010f019:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010f01c:	01 c2                	add    %eax,%edx
f010f01e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010f021:	89 94 85 44 ff ff ff 	mov    %edx,-0xbc(%ebp,%eax,4)
		//Check returned va
		if(tstStartVAs[i] == NULL || (tstStartVAs[i] != (short*)expectedVAs[i]))
f010f028:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010f02b:	8b 84 85 74 ff ff ff 	mov    -0x8c(%ebp,%eax,4),%eax
f010f032:	85 c0                	test   %eax,%eax
f010f034:	74 15                	je     f010f04b <test_alloc_block_BF+0x24a>
f010f036:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010f039:	8b 94 85 74 ff ff ff 	mov    -0x8c(%ebp,%eax,4),%edx
f010f040:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010f043:	8b 44 85 8c          	mov    -0x74(%ebp,%eax,4),%eax
f010f047:	39 c2                	cmp    %eax,%edx
f010f049:	74 2a                	je     f010f075 <test_alloc_block_BF+0x274>
		{
			is_correct = 0;
f010f04b:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("alloc_block_BF #6.%d: WRONG BF ALLOC - alloc_block_BF return wrong address. Expected %x, Actual %x\n", i, expectedVAs[i] ,tstStartVAs[i]);
f010f052:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010f055:	8b 94 85 74 ff ff ff 	mov    -0x8c(%ebp,%eax,4),%edx
f010f05c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010f05f:	8b 44 85 8c          	mov    -0x74(%ebp,%eax,4),%eax
f010f063:	52                   	push   %edx
f010f064:	50                   	push   %eax
f010f065:	ff 75 d0             	pushl  -0x30(%ebp)
f010f068:	68 34 49 13 f0       	push   $0xf0134934
f010f06d:	e8 bf 1d ff ff       	call   f0100e31 <cprintf>
f010f072:	83 c4 10             	add    $0x10,%esp
			//break;
		}
		*(tstStartVAs[i]) = 353;
f010f075:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010f078:	8b 84 85 74 ff ff ff 	mov    -0x8c(%ebp,%eax,4),%eax
f010f07f:	66 c7 00 61 01       	movw   $0x161,(%eax)
		*(tstMidVAs[i]) = 353;
f010f084:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010f087:	8b 84 85 5c ff ff ff 	mov    -0xa4(%ebp,%eax,4),%eax
f010f08e:	66 c7 00 61 01       	movw   $0x161,(%eax)
		*(tstEndVAs[i]) = 353;
f010f093:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010f096:	8b 84 85 44 ff ff ff 	mov    -0xbc(%ebp,%eax,4),%eax
f010f09d:	66 c7 00 61 01       	movw   $0x161,(%eax)

	uint32 expectedVAs[numOfBFTests] = {startOf1st7KB, startOf1st2KB, startOf1st12B, startOf1st2KB + testSizes[1], KERNEL_HEAP_START + sizeOfMetaData()};
	short* tstStartVAs[numOfBFTests+1] ;
	short* tstMidVAs[numOfBFTests+1] ;
	short* tstEndVAs[numOfBFTests+1] ;
	for (int i = 0; i < numOfBFTests; ++i)
f010f0a2:	ff 45 d0             	incl   -0x30(%ebp)
f010f0a5:	83 7d d0 04          	cmpl   $0x4,-0x30(%ebp)
f010f0a9:	0f 8e 18 ff ff ff    	jle    f010efc7 <test_alloc_block_BF+0x1c6>
		*(tstStartVAs[i]) = 353;
		*(tstMidVAs[i]) = 353;
		*(tstEndVAs[i]) = 353;
	}

	if (is_correct)
f010f0af:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f010f0b3:	74 04                	je     f010f0b9 <test_alloc_block_BF+0x2b8>
	{
		eval += 15;
f010f0b5:	83 45 e4 0f          	addl   $0xf,-0x1c(%ebp)
	}
	//====================================================================//
	/*BF ALLOC Scenario 3: Try to allocate a block with a size equal to the size of an existing free block*/
	cprintf("	3: Try to allocate a block with equal to an existing free block\n\n") ;
f010f0b9:	83 ec 0c             	sub    $0xc,%esp
f010f0bc:	68 98 49 13 f0       	push   $0xf0134998
f010f0c1:	e8 6b 1d ff ff       	call   f0100e31 <cprintf>
f010f0c6:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010f0c9:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	actualSize = kilo/4 - sizeOfMetaData();
f010f0d0:	c7 45 c4 f0 00 00 00 	movl   $0xf0,-0x3c(%ebp)
	va = tstStartVAs[numOfBFTests] = alloc_block(actualSize, DA_BF);
f010f0d7:	83 ec 08             	sub    $0x8,%esp
f010f0da:	6a 03                	push   $0x3
f010f0dc:	ff 75 c4             	pushl  -0x3c(%ebp)
f010f0df:	e8 c1 07 02 00       	call   f012f8a5 <alloc_block>
f010f0e4:	83 c4 10             	add    $0x10,%esp
f010f0e7:	89 45 88             	mov    %eax,-0x78(%ebp)
f010f0ea:	8b 45 88             	mov    -0x78(%ebp),%eax
f010f0ed:	89 45 c8             	mov    %eax,-0x38(%ebp)
	tstMidVAs[numOfBFTests] = va + actualSize/2 ;
f010f0f0:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010f0f3:	d1 e8                	shr    %eax
f010f0f5:	89 c2                	mov    %eax,%edx
f010f0f7:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010f0fa:	01 d0                	add    %edx,%eax
f010f0fc:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
	tstEndVAs[numOfBFTests] = va + actualSize - sizeof(short);
f010f102:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010f105:	8d 50 fe             	lea    -0x2(%eax),%edx
f010f108:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010f10b:	01 d0                	add    %edx,%eax
f010f10d:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
	//Check returned va
	void* expected = (void*)(startOf1st2KB + testSizes[1] + testSizes[3]) ;
f010f113:	8b 55 a4             	mov    -0x5c(%ebp),%edx
f010f116:	8b 45 bc             	mov    -0x44(%ebp),%eax
f010f119:	01 c2                	add    %eax,%edx
f010f11b:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010f11e:	01 d0                	add    %edx,%eax
f010f120:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if(va == NULL || (va != expected))
f010f123:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f010f127:	74 08                	je     f010f131 <test_alloc_block_BF+0x330>
f010f129:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010f12c:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f010f12f:	74 1d                	je     f010f14e <test_alloc_block_BF+0x34d>
	{
		is_correct = 0;
f010f131:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		cprintf("alloc_block_BF #7: WRONG BF ALLOC - alloc_block_BF return wrong address. expected %x, actual %x\n", expected, va);
f010f138:	83 ec 04             	sub    $0x4,%esp
f010f13b:	ff 75 c8             	pushl  -0x38(%ebp)
f010f13e:	ff 75 b4             	pushl  -0x4c(%ebp)
f010f141:	68 dc 49 13 f0       	push   $0xf01349dc
f010f146:	e8 e6 1c ff ff       	call   f0100e31 <cprintf>
f010f14b:	83 c4 10             	add    $0x10,%esp
	}
	*(tstStartVAs[numOfBFTests]) = 353 ;
f010f14e:	8b 45 88             	mov    -0x78(%ebp),%eax
f010f151:	66 c7 00 61 01       	movw   $0x161,(%eax)
	*(tstMidVAs[numOfBFTests]) = 353 ;
f010f156:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f010f15c:	66 c7 00 61 01       	movw   $0x161,(%eax)
	*(tstEndVAs[numOfBFTests]) = 353 ;
f010f161:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f010f167:	66 c7 00 61 01       	movw   $0x161,(%eax)

	if (is_correct)
f010f16c:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f010f170:	74 04                	je     f010f176 <test_alloc_block_BF+0x375>
	{
		eval += 15;
f010f172:	83 45 e4 0f          	addl   $0xf,-0x1c(%ebp)
	}
	//====================================================================//
	/*BF ALLOC Scenario 4: Check stored data inside each allocated block*/
	cprintf("	4: Check stored data inside each allocated block\n\n") ;
f010f176:	83 ec 0c             	sub    $0xc,%esp
f010f179:	68 70 44 13 f0       	push   $0xf0134470
f010f17e:	e8 ae 1c ff ff       	call   f0100e31 <cprintf>
f010f183:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010f186:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	for (int i = 0; i <= numOfBFTests; ++i)
f010f18d:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f010f194:	e9 8e 00 00 00       	jmp    f010f227 <test_alloc_block_BF+0x426>
	{
		//cprintf("startVA = %x, mid = %x, last = %x\n", tstStartVAs[i], tstMidVAs[i], tstEndVAs[i]);
		if (*(tstStartVAs[i]) != 353 || *(tstMidVAs[i]) != 353 || *(tstEndVAs[i]) != 353)
f010f199:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010f19c:	8b 84 85 74 ff ff ff 	mov    -0x8c(%ebp,%eax,4),%eax
f010f1a3:	66 8b 00             	mov    (%eax),%ax
f010f1a6:	66 3d 61 01          	cmp    $0x161,%ax
f010f1aa:	75 26                	jne    f010f1d2 <test_alloc_block_BF+0x3d1>
f010f1ac:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010f1af:	8b 84 85 5c ff ff ff 	mov    -0xa4(%ebp,%eax,4),%eax
f010f1b6:	66 8b 00             	mov    (%eax),%ax
f010f1b9:	66 3d 61 01          	cmp    $0x161,%ax
f010f1bd:	75 13                	jne    f010f1d2 <test_alloc_block_BF+0x3d1>
f010f1bf:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010f1c2:	8b 84 85 44 ff ff ff 	mov    -0xbc(%ebp,%eax,4),%eax
f010f1c9:	66 8b 00             	mov    (%eax),%ax
f010f1cc:	66 3d 61 01          	cmp    $0x161,%ax
f010f1d0:	74 52                	je     f010f224 <test_alloc_block_BF+0x423>
		{
			//cprintf("start VA = %x, mid VA = %x, end VA = %x\n", tstStartVAs[i], tstMidVAs[i], tstEndVAs[i]);
			is_correct = 0;
f010f1d2:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("alloc_block_BF #8.%d: WRONG! content of the block is not correct. Expected=%d, val1=%d, val2=%d, val3=%d\n",i, 353, *(tstStartVAs[i]), *(tstMidVAs[i]), *(tstEndVAs[i]));
f010f1d9:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010f1dc:	8b 84 85 44 ff ff ff 	mov    -0xbc(%ebp,%eax,4),%eax
f010f1e3:	66 8b 00             	mov    (%eax),%ax
f010f1e6:	0f bf c8             	movswl %ax,%ecx
f010f1e9:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010f1ec:	8b 84 85 5c ff ff ff 	mov    -0xa4(%ebp,%eax,4),%eax
f010f1f3:	66 8b 00             	mov    (%eax),%ax
f010f1f6:	0f bf d0             	movswl %ax,%edx
f010f1f9:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010f1fc:	8b 84 85 74 ff ff ff 	mov    -0x8c(%ebp,%eax,4),%eax
f010f203:	66 8b 00             	mov    (%eax),%ax
f010f206:	98                   	cwtl   
f010f207:	83 ec 08             	sub    $0x8,%esp
f010f20a:	51                   	push   %ecx
f010f20b:	52                   	push   %edx
f010f20c:	50                   	push   %eax
f010f20d:	68 61 01 00 00       	push   $0x161
f010f212:	ff 75 cc             	pushl  -0x34(%ebp)
f010f215:	68 40 4a 13 f0       	push   $0xf0134a40
f010f21a:	e8 12 1c ff ff       	call   f0100e31 <cprintf>
f010f21f:	83 c4 20             	add    $0x20,%esp
			break;
f010f222:	eb 0d                	jmp    f010f231 <test_alloc_block_BF+0x430>
	//====================================================================//
	/*BF ALLOC Scenario 4: Check stored data inside each allocated block*/
	cprintf("	4: Check stored data inside each allocated block\n\n") ;
	is_correct = 1;

	for (int i = 0; i <= numOfBFTests; ++i)
f010f224:	ff 45 cc             	incl   -0x34(%ebp)
f010f227:	83 7d cc 05          	cmpl   $0x5,-0x34(%ebp)
f010f22b:	0f 8e 68 ff ff ff    	jle    f010f199 <test_alloc_block_BF+0x398>
			cprintf("alloc_block_BF #8.%d: WRONG! content of the block is not correct. Expected=%d, val1=%d, val2=%d, val3=%d\n",i, 353, *(tstStartVAs[i]), *(tstMidVAs[i]), *(tstEndVAs[i]));
			break;
		}
	}

	if (is_correct)
f010f231:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f010f235:	74 04                	je     f010f23b <test_alloc_block_BF+0x43a>
	{
		eval += 20;
f010f237:	83 45 e4 14          	addl   $0x14,-0x1c(%ebp)
	}
	cprintf("test alloc_block_BF completed. Evaluation = %d%\n", eval);
f010f23b:	83 ec 08             	sub    $0x8,%esp
f010f23e:	ff 75 e4             	pushl  -0x1c(%ebp)
f010f241:	68 ac 4a 13 f0       	push   $0xf0134aac
f010f246:	e8 e6 1b ff ff       	call   f0100e31 <cprintf>
f010f24b:	83 c4 10             	add    $0x10,%esp
}
f010f24e:	90                   	nop
f010f24f:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010f252:	5b                   	pop    %ebx
f010f253:	5e                   	pop    %esi
f010f254:	5f                   	pop    %edi
f010f255:	5d                   	pop    %ebp
f010f256:	c3                   	ret    

f010f257 <test_alloc_block_NF>:

void test_alloc_block_NF()
{
f010f257:	55                   	push   %ebp
f010f258:	89 e5                	mov    %esp,%ebp
	//====================================================================//
	/*NF ALLOC Scenario 7: Try to allocate a block with a size smaller than the existing blocks .. To try to update head not to remove it*/

	//cprintf("Congratulations!! test alloc_block_NF completed successfully.\n");

}
f010f25a:	90                   	nop
f010f25b:	5d                   	pop    %ebp
f010f25c:	c3                   	ret    

f010f25d <test_free_block_FF>:

void test_free_block_FF()
{
f010f25d:	55                   	push   %ebp
f010f25e:	89 e5                	mov    %esp,%ebp
f010f260:	83 ec 58             	sub    $0x58,%esp
#if USE_KHEAP
	panic("test_free_block: the kernel heap should be disabled. make sure USE_KHEAP = 0");
	return;
#endif

	cprintf("===========================================================\n") ;
f010f263:	83 ec 0c             	sub    $0xc,%esp
f010f266:	68 f4 4a 13 f0       	push   $0xf0134af4
f010f26b:	e8 c1 1b ff ff       	call   f0100e31 <cprintf>
f010f270:	83 c4 10             	add    $0x10,%esp
	cprintf("NOTE: THIS TEST IS DEPEND ON BOTH ALLOCATE & FREE FUNCTIONS\n") ;
f010f273:	83 ec 0c             	sub    $0xc,%esp
f010f276:	68 34 4b 13 f0       	push   $0xf0134b34
f010f27b:	e8 b1 1b ff ff       	call   f0100e31 <cprintf>
f010f280:	83 c4 10             	add    $0x10,%esp
	cprintf("===========================================================\n") ;
f010f283:	83 ec 0c             	sub    $0xc,%esp
f010f286:	68 f4 4a 13 f0       	push   $0xf0134af4
f010f28b:	e8 a1 1b ff ff       	call   f0100e31 <cprintf>
f010f290:	83 c4 10             	add    $0x10,%esp

	int eval = 0;
f010f293:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	bool is_correct;
	int initAllocatedSpace = 3*Mega;
f010f29a:	c7 45 cc 00 00 30 00 	movl   $0x300000,-0x34(%ebp)
	initialize_dynamic_allocator(KERNEL_HEAP_START, initAllocatedSpace);
f010f2a1:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010f2a4:	83 ec 08             	sub    $0x8,%esp
f010f2a7:	50                   	push   %eax
f010f2a8:	68 00 00 00 f6       	push   $0xf6000000
f010f2ad:	e8 0c 07 02 00       	call   f012f9be <initialize_dynamic_allocator>
f010f2b2:	83 c4 10             	add    $0x10,%esp

	void * va ;
	//====================================================================//
	/* Try to allocate set of blocks with different sizes*/
	cprintf("	1: Try to allocate set of blocks with different sizes to fill-up the allocated space\n\n") ;
f010f2b5:	83 ec 0c             	sub    $0xc,%esp
f010f2b8:	68 74 4b 13 f0       	push   $0xf0134b74
f010f2bd:	e8 6f 1b ff ff       	call   f0100e31 <cprintf>
f010f2c2:	83 c4 10             	add    $0x10,%esp

	int totalSizes = 0;
f010f2c5:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	for (int i = 0; i < numOfAllocs; ++i)
f010f2cc:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f010f2d3:	eb 2a                	jmp    f010f2ff <test_free_block_FF+0xa2>
	{
		totalSizes += allocSizes[i] * allocCntPerSize ;
f010f2d5:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010f2d8:	8b 14 85 20 eb 18 f0 	mov    -0xfe714e0(,%eax,4),%edx
f010f2df:	89 d0                	mov    %edx,%eax
f010f2e1:	c1 e0 02             	shl    $0x2,%eax
f010f2e4:	01 d0                	add    %edx,%eax
f010f2e6:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010f2ed:	01 d0                	add    %edx,%eax
f010f2ef:	c1 e0 03             	shl    $0x3,%eax
f010f2f2:	89 c2                	mov    %eax,%edx
f010f2f4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f2f7:	01 d0                	add    %edx,%eax
f010f2f9:	89 45 ec             	mov    %eax,-0x14(%ebp)
	//====================================================================//
	/* Try to allocate set of blocks with different sizes*/
	cprintf("	1: Try to allocate set of blocks with different sizes to fill-up the allocated space\n\n") ;

	int totalSizes = 0;
	for (int i = 0; i < numOfAllocs; ++i)
f010f2fc:	ff 45 e8             	incl   -0x18(%ebp)
f010f2ff:	83 7d e8 06          	cmpl   $0x6,-0x18(%ebp)
f010f303:	7e d0                	jle    f010f2d5 <test_free_block_FF+0x78>
	{
		totalSizes += allocSizes[i] * allocCntPerSize ;
	}
	int remainSize = initAllocatedSpace - totalSizes ;
f010f305:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010f308:	2b 45 ec             	sub    -0x14(%ebp),%eax
f010f30b:	89 45 c8             	mov    %eax,-0x38(%ebp)
	if (remainSize <= 0)
f010f30e:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f010f312:	7f 17                	jg     f010f32b <test_free_block_FF+0xce>
		panic("test_free_block is not configured correctly. Consider updating the initial allocated space OR the required allocations");
f010f314:	83 ec 04             	sub    $0x4,%esp
f010f317:	68 cc 4b 13 f0       	push   $0xf0134bcc
f010f31c:	68 fe 01 00 00       	push   $0x1fe
f010f321:	68 50 41 13 f0       	push   $0xf0134150
f010f326:	e8 85 0e ff ff       	call   f01001b0 <_panic>

	int idx = 0;
f010f32b:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	void* curVA = (void*) KERNEL_HEAP_START ;
f010f332:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
f010f339:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f010f340:	e9 f8 00 00 00       	jmp    f010f43d <test_free_block_FF+0x1e0>
	{
		for (int j = 0; j < allocCntPerSize; ++j)
f010f345:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f010f34c:	e9 dc 00 00 00       	jmp    f010f42d <test_free_block_FF+0x1d0>
		{
			actualSize = allocSizes[i] - sizeOfMetaData();
f010f351:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f354:	8b 04 85 20 eb 18 f0 	mov    -0xfe714e0(,%eax,4),%eax
f010f35b:	83 e8 10             	sub    $0x10,%eax
f010f35e:	89 45 c4             	mov    %eax,-0x3c(%ebp)
			va = startVAs[idx] = alloc_block(actualSize, DA_FF);
f010f361:	83 ec 08             	sub    $0x8,%esp
f010f364:	6a 01                	push   $0x1
f010f366:	ff 75 c4             	pushl  -0x3c(%ebp)
f010f369:	e8 37 05 02 00       	call   f012f8a5 <alloc_block>
f010f36e:	83 c4 10             	add    $0x10,%esp
f010f371:	89 c2                	mov    %eax,%edx
f010f373:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f376:	89 14 85 80 a3 2d f0 	mov    %edx,-0xfd25c80(,%eax,4)
f010f37d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f380:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f010f387:	89 45 c0             	mov    %eax,-0x40(%ebp)
			midVAs[idx] = va + actualSize/2 ;
f010f38a:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010f38d:	d1 e8                	shr    %eax
f010f38f:	89 c2                	mov    %eax,%edx
f010f391:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010f394:	01 c2                	add    %eax,%edx
f010f396:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f399:	89 14 85 80 cf 2d f0 	mov    %edx,-0xfd23080(,%eax,4)
			endVAs[idx] = va + actualSize - sizeof(short);
f010f3a0:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010f3a3:	8d 50 fe             	lea    -0x2(%eax),%edx
f010f3a6:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010f3a9:	01 c2                	add    %eax,%edx
f010f3ab:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f3ae:	89 14 85 80 b9 2d f0 	mov    %edx,-0xfd24680(,%eax,4)
			//Check returned va
			if(va == NULL || (va != (curVA + sizeOfMetaData())))
f010f3b5:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
f010f3b9:	74 0b                	je     f010f3c6 <test_free_block_FF+0x169>
f010f3bb:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010f3be:	83 c0 10             	add    $0x10,%eax
f010f3c1:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f010f3c4:	74 24                	je     f010f3ea <test_free_block_FF+0x18d>
				panic("test_free_block #1.%d: WRONG ALLOC - alloc_block_FF return wrong address. Expected %x, Actual %x", idx, curVA + sizeOfMetaData() ,va);
f010f3c6:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010f3c9:	83 c0 10             	add    $0x10,%eax
f010f3cc:	83 ec 08             	sub    $0x8,%esp
f010f3cf:	ff 75 c0             	pushl  -0x40(%ebp)
f010f3d2:	50                   	push   %eax
f010f3d3:	ff 75 e4             	pushl  -0x1c(%ebp)
f010f3d6:	68 44 4c 13 f0       	push   $0xf0134c44
f010f3db:	68 0d 02 00 00       	push   $0x20d
f010f3e0:	68 50 41 13 f0       	push   $0xf0134150
f010f3e5:	e8 c6 0d ff ff       	call   f01001b0 <_panic>
			curVA += allocSizes[i] ;
f010f3ea:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f3ed:	8b 04 85 20 eb 18 f0 	mov    -0xfe714e0(,%eax,4),%eax
f010f3f4:	01 45 e0             	add    %eax,-0x20(%ebp)
			*(startVAs[idx]) = idx ;
f010f3f7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f3fa:	8b 14 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%edx
f010f401:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f404:	66 89 02             	mov    %ax,(%edx)
			*(midVAs[idx]) = idx ;
f010f407:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f40a:	8b 14 85 80 cf 2d f0 	mov    -0xfd23080(,%eax,4),%edx
f010f411:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f414:	66 89 02             	mov    %ax,(%edx)
			*(endVAs[idx]) = idx ;
f010f417:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f41a:	8b 14 85 80 b9 2d f0 	mov    -0xfd24680(,%eax,4),%edx
f010f421:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f424:	66 89 02             	mov    %ax,(%edx)
			idx++;
f010f427:	ff 45 e4             	incl   -0x1c(%ebp)
	int idx = 0;
	void* curVA = (void*) KERNEL_HEAP_START ;
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
	{
		for (int j = 0; j < allocCntPerSize; ++j)
f010f42a:	ff 45 d8             	incl   -0x28(%ebp)
f010f42d:	81 7d d8 c7 00 00 00 	cmpl   $0xc7,-0x28(%ebp)
f010f434:	0f 8e 17 ff ff ff    	jle    f010f351 <test_free_block_FF+0xf4>
		panic("test_free_block is not configured correctly. Consider updating the initial allocated space OR the required allocations");

	int idx = 0;
	void* curVA = (void*) KERNEL_HEAP_START ;
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
f010f43a:	ff 45 dc             	incl   -0x24(%ebp)
f010f43d:	83 7d dc 06          	cmpl   $0x6,-0x24(%ebp)
f010f441:	0f 8e fe fe ff ff    	jle    f010f345 <test_free_block_FF+0xe8>
		}
	}

	//====================================================================//
	/* Try to allocate a block with a size equal to the size of the first existing free block*/
	actualSize = remainSize - sizeOfMetaData();
f010f447:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010f44a:	83 e8 10             	sub    $0x10,%eax
f010f44d:	89 45 c4             	mov    %eax,-0x3c(%ebp)
	va = startVAs[idx] = alloc_block(actualSize, DA_FF);
f010f450:	83 ec 08             	sub    $0x8,%esp
f010f453:	6a 01                	push   $0x1
f010f455:	ff 75 c4             	pushl  -0x3c(%ebp)
f010f458:	e8 48 04 02 00       	call   f012f8a5 <alloc_block>
f010f45d:	83 c4 10             	add    $0x10,%esp
f010f460:	89 c2                	mov    %eax,%edx
f010f462:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f465:	89 14 85 80 a3 2d f0 	mov    %edx,-0xfd25c80(,%eax,4)
f010f46c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f46f:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f010f476:	89 45 c0             	mov    %eax,-0x40(%ebp)
	midVAs[idx] = va + actualSize/2 ;
f010f479:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010f47c:	d1 e8                	shr    %eax
f010f47e:	89 c2                	mov    %eax,%edx
f010f480:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010f483:	01 c2                	add    %eax,%edx
f010f485:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f488:	89 14 85 80 cf 2d f0 	mov    %edx,-0xfd23080(,%eax,4)
	endVAs[idx] = va + actualSize - sizeof(short);
f010f48f:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010f492:	8d 50 fe             	lea    -0x2(%eax),%edx
f010f495:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010f498:	01 c2                	add    %eax,%edx
f010f49a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f49d:	89 14 85 80 b9 2d f0 	mov    %edx,-0xfd24680(,%eax,4)
	//Check returned va
	if(va == NULL || (va != (curVA + sizeOfMetaData())))
f010f4a4:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
f010f4a8:	74 0b                	je     f010f4b5 <test_free_block_FF+0x258>
f010f4aa:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010f4ad:	83 c0 10             	add    $0x10,%eax
f010f4b0:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f010f4b3:	74 17                	je     f010f4cc <test_free_block_FF+0x26f>
		panic("test_free_block #2: WRONG ALLOC - alloc_block_FF return wrong address.");
f010f4b5:	83 ec 04             	sub    $0x4,%esp
f010f4b8:	68 a8 4c 13 f0       	push   $0xf0134ca8
f010f4bd:	68 1e 02 00 00       	push   $0x21e
f010f4c2:	68 50 41 13 f0       	push   $0xf0134150
f010f4c7:	e8 e4 0c ff ff       	call   f01001b0 <_panic>
	*(startVAs[idx]) = idx ;
f010f4cc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f4cf:	8b 14 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%edx
f010f4d6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f4d9:	66 89 02             	mov    %ax,(%edx)
	*(midVAs[idx]) = idx ;
f010f4dc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f4df:	8b 14 85 80 cf 2d f0 	mov    -0xfd23080(,%eax,4),%edx
f010f4e6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f4e9:	66 89 02             	mov    %ax,(%edx)
	*(endVAs[idx]) = idx ;
f010f4ec:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f4ef:	8b 14 85 80 b9 2d f0 	mov    -0xfd24680(,%eax,4),%edx
f010f4f6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f4f9:	66 89 02             	mov    %ax,(%edx)

	//====================================================================//
	/* Check stored data inside each allocated block*/
	cprintf("	2: Check stored data inside each allocated block\n\n") ;
f010f4fc:	83 ec 0c             	sub    $0xc,%esp
f010f4ff:	68 f0 4c 13 f0       	push   $0xf0134cf0
f010f504:	e8 28 19 ff ff       	call   f0100e31 <cprintf>
f010f509:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010f50c:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)

	for (int i = 0; i < idx; ++i)
f010f513:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f010f51a:	eb 5b                	jmp    f010f577 <test_free_block_FF+0x31a>
	{
		if (*(startVAs[i]) != i || *(midVAs[i]) != i ||	*(endVAs[i]) != i)
f010f51c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010f51f:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f010f526:	66 8b 00             	mov    (%eax),%ax
f010f529:	98                   	cwtl   
f010f52a:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f010f52d:	75 26                	jne    f010f555 <test_free_block_FF+0x2f8>
f010f52f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010f532:	8b 04 85 80 cf 2d f0 	mov    -0xfd23080(,%eax,4),%eax
f010f539:	66 8b 00             	mov    (%eax),%ax
f010f53c:	98                   	cwtl   
f010f53d:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f010f540:	75 13                	jne    f010f555 <test_free_block_FF+0x2f8>
f010f542:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010f545:	8b 04 85 80 b9 2d f0 	mov    -0xfd24680(,%eax,4),%eax
f010f54c:	66 8b 00             	mov    (%eax),%ax
f010f54f:	98                   	cwtl   
f010f550:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f010f553:	74 1f                	je     f010f574 <test_free_block_FF+0x317>
		{
			is_correct = 0;
f010f555:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_free_block #3.%d: WRONG! content of the block is not correct. Expected %d\n",i, i);
f010f55c:	83 ec 04             	sub    $0x4,%esp
f010f55f:	ff 75 d4             	pushl  -0x2c(%ebp)
f010f562:	ff 75 d4             	pushl  -0x2c(%ebp)
f010f565:	68 24 4d 13 f0       	push   $0xf0134d24
f010f56a:	e8 c2 18 ff ff       	call   f0100e31 <cprintf>
f010f56f:	83 c4 10             	add    $0x10,%esp
			break;
f010f572:	eb 0b                	jmp    f010f57f <test_free_block_FF+0x322>
	//====================================================================//
	/* Check stored data inside each allocated block*/
	cprintf("	2: Check stored data inside each allocated block\n\n") ;
	is_correct = 1;

	for (int i = 0; i < idx; ++i)
f010f574:	ff 45 d4             	incl   -0x2c(%ebp)
f010f577:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010f57a:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f010f57d:	7c 9d                	jl     f010f51c <test_free_block_FF+0x2bf>
		}
	}

	//====================================================================//
	/* free_block Scenario 1: Free some allocated blocks [no coalesce]*/
	cprintf("	3: Free some allocated block [no coalesce]\n\n") ;
f010f57f:	83 ec 0c             	sub    $0xc,%esp
f010f582:	68 74 4d 13 f0       	push   $0xf0134d74
f010f587:	e8 a5 18 ff ff       	call   f0100e31 <cprintf>
f010f58c:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010f58f:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)

	//Free set of blocks with different sizes (first block of each size)
	for (int i = 0; i < numOfAllocs; ++i)
f010f596:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
f010f59d:	e9 e4 00 00 00       	jmp    f010f686 <test_free_block_FF+0x429>
	{
		free_block(startVAs[i*allocCntPerSize]);
f010f5a2:	8b 55 d0             	mov    -0x30(%ebp),%edx
f010f5a5:	89 d0                	mov    %edx,%eax
f010f5a7:	c1 e0 02             	shl    $0x2,%eax
f010f5aa:	01 d0                	add    %edx,%eax
f010f5ac:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010f5b3:	01 d0                	add    %edx,%eax
f010f5b5:	c1 e0 03             	shl    $0x3,%eax
f010f5b8:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f010f5bf:	83 ec 0c             	sub    $0xc,%esp
f010f5c2:	50                   	push   %eax
f010f5c3:	e8 2c 08 02 00       	call   f012fdf4 <free_block>
f010f5c8:	83 c4 10             	add    $0x10,%esp
		uint32 block_size = get_block_size(startVAs[i*allocCntPerSize]) ;
f010f5cb:	8b 55 d0             	mov    -0x30(%ebp),%edx
f010f5ce:	89 d0                	mov    %edx,%eax
f010f5d0:	c1 e0 02             	shl    $0x2,%eax
f010f5d3:	01 d0                	add    %edx,%eax
f010f5d5:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010f5dc:	01 d0                	add    %edx,%eax
f010f5de:	c1 e0 03             	shl    $0x3,%eax
f010f5e1:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f010f5e8:	83 ec 0c             	sub    $0xc,%esp
f010f5eb:	50                   	push   %eax
f010f5ec:	e8 87 02 02 00       	call   f012f878 <get_block_size>
f010f5f1:	83 c4 10             	add    $0x10,%esp
f010f5f4:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if (block_size != allocSizes[i])
f010f5f7:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010f5fa:	8b 04 85 20 eb 18 f0 	mov    -0xfe714e0(,%eax,4),%eax
f010f601:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f010f604:	74 2b                	je     f010f631 <test_free_block_FF+0x3d4>
		{
			if (is_correct)
f010f606:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010f60a:	74 25                	je     f010f631 <test_free_block_FF+0x3d4>
			{
				is_correct = 0;
f010f60c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
				cprintf("test_free_block #4.%d: WRONG FREE! block size after free is not correct. Expected %d, Actual %d\n",i, allocSizes[i],block_size);
f010f613:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010f616:	8b 04 85 20 eb 18 f0 	mov    -0xfe714e0(,%eax,4),%eax
f010f61d:	ff 75 bc             	pushl  -0x44(%ebp)
f010f620:	50                   	push   %eax
f010f621:	ff 75 d0             	pushl  -0x30(%ebp)
f010f624:	68 a4 4d 13 f0       	push   $0xf0134da4
f010f629:	e8 03 18 ff ff       	call   f0100e31 <cprintf>
f010f62e:	83 c4 10             	add    $0x10,%esp
			}
		}
		int8 block_status = is_free_block(startVAs[i*allocCntPerSize]) ;
f010f631:	8b 55 d0             	mov    -0x30(%ebp),%edx
f010f634:	89 d0                	mov    %edx,%eax
f010f636:	c1 e0 02             	shl    $0x2,%eax
f010f639:	01 d0                	add    %edx,%eax
f010f63b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010f642:	01 d0                	add    %edx,%eax
f010f644:	c1 e0 03             	shl    $0x3,%eax
f010f647:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f010f64e:	83 ec 0c             	sub    $0xc,%esp
f010f651:	50                   	push   %eax
f010f652:	e8 37 02 02 00       	call   f012f88e <is_free_block>
f010f657:	83 c4 10             	add    $0x10,%esp
f010f65a:	88 45 bb             	mov    %al,-0x45(%ebp)
		if (block_status != 1)
f010f65d:	80 7d bb 01          	cmpb   $0x1,-0x45(%ebp)
f010f661:	74 20                	je     f010f683 <test_free_block_FF+0x426>
		{
			if (is_correct)
f010f663:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010f667:	74 1a                	je     f010f683 <test_free_block_FF+0x426>
			{
				is_correct = 0;
f010f669:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
				cprintf("test_free_block #5.%d: WRONG FREE! block status (is_free) not equal 1 after freeing.\n", i);
f010f670:	83 ec 08             	sub    $0x8,%esp
f010f673:	ff 75 d0             	pushl  -0x30(%ebp)
f010f676:	68 08 4e 13 f0       	push   $0xf0134e08
f010f67b:	e8 b1 17 ff ff       	call   f0100e31 <cprintf>
f010f680:	83 c4 10             	add    $0x10,%esp
	/* free_block Scenario 1: Free some allocated blocks [no coalesce]*/
	cprintf("	3: Free some allocated block [no coalesce]\n\n") ;
	is_correct = 1;

	//Free set of blocks with different sizes (first block of each size)
	for (int i = 0; i < numOfAllocs; ++i)
f010f683:	ff 45 d0             	incl   -0x30(%ebp)
f010f686:	83 7d d0 06          	cmpl   $0x6,-0x30(%ebp)
f010f68a:	0f 8e 12 ff ff ff    	jle    f010f5a2 <test_free_block_FF+0x345>
				is_correct = 0;
				cprintf("test_free_block #5.%d: WRONG FREE! block status (is_free) not equal 1 after freeing.\n", i);
			}
		}
	}
	if (is_correct)
f010f690:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010f694:	74 04                	je     f010f69a <test_free_block_FF+0x43d>
	{
		eval += 10;
f010f696:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)
	}

	is_correct = 1;
f010f69a:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	//Free last block
	free_block(startVAs[numOfAllocs*allocCntPerSize]);
f010f6a1:	a1 60 b9 2d f0       	mov    0xf02db960,%eax
f010f6a6:	83 ec 0c             	sub    $0xc,%esp
f010f6a9:	50                   	push   %eax
f010f6aa:	e8 45 07 02 00       	call   f012fdf4 <free_block>
f010f6af:	83 c4 10             	add    $0x10,%esp
	uint32 block_size = get_block_size(startVAs[numOfAllocs*allocCntPerSize]) ;
f010f6b2:	a1 60 b9 2d f0       	mov    0xf02db960,%eax
f010f6b7:	83 ec 0c             	sub    $0xc,%esp
f010f6ba:	50                   	push   %eax
f010f6bb:	e8 b8 01 02 00       	call   f012f878 <get_block_size>
f010f6c0:	83 c4 10             	add    $0x10,%esp
f010f6c3:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if (block_size != remainSize)
f010f6c6:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010f6c9:	39 45 b4             	cmp    %eax,-0x4c(%ebp)
f010f6cc:	74 1d                	je     f010f6eb <test_free_block_FF+0x48e>
	{
		is_correct = 0;
f010f6ce:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #6.1: WRONG FREE! block size after free is not correct. Expected %d, Actual %d\n",remainSize,block_size);
f010f6d5:	83 ec 04             	sub    $0x4,%esp
f010f6d8:	ff 75 b4             	pushl  -0x4c(%ebp)
f010f6db:	ff 75 c8             	pushl  -0x38(%ebp)
f010f6de:	68 60 4e 13 f0       	push   $0xf0134e60
f010f6e3:	e8 49 17 ff ff       	call   f0100e31 <cprintf>
f010f6e8:	83 c4 10             	add    $0x10,%esp
	}
	int8 block_status = is_free_block(startVAs[numOfAllocs*allocCntPerSize]) ;
f010f6eb:	a1 60 b9 2d f0       	mov    0xf02db960,%eax
f010f6f0:	83 ec 0c             	sub    $0xc,%esp
f010f6f3:	50                   	push   %eax
f010f6f4:	e8 95 01 02 00       	call   f012f88e <is_free_block>
f010f6f9:	83 c4 10             	add    $0x10,%esp
f010f6fc:	88 45 b3             	mov    %al,-0x4d(%ebp)
	if (block_status != 1)
f010f6ff:	80 7d b3 01          	cmpb   $0x1,-0x4d(%ebp)
f010f703:	74 17                	je     f010f71c <test_free_block_FF+0x4bf>
	{
		is_correct = 0;
f010f705:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #6.2: WRONG FREE! block status (is_free) not equal 1 after freeing.\n");
f010f70c:	83 ec 0c             	sub    $0xc,%esp
f010f70f:	68 c0 4e 13 f0       	push   $0xf0134ec0
f010f714:	e8 18 17 ff ff       	call   f0100e31 <cprintf>
f010f719:	83 c4 10             	add    $0x10,%esp
	}

	//Reallocate last block
	actualSize = remainSize - sizeOfMetaData();
f010f71c:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010f71f:	83 e8 10             	sub    $0x10,%eax
f010f722:	89 45 c4             	mov    %eax,-0x3c(%ebp)
	va = alloc_block(actualSize, DA_FF);
f010f725:	83 ec 08             	sub    $0x8,%esp
f010f728:	6a 01                	push   $0x1
f010f72a:	ff 75 c4             	pushl  -0x3c(%ebp)
f010f72d:	e8 73 01 02 00       	call   f012f8a5 <alloc_block>
f010f732:	83 c4 10             	add    $0x10,%esp
f010f735:	89 45 c0             	mov    %eax,-0x40(%ebp)
	//Check returned va
	if(va == NULL || (va != (curVA + sizeOfMetaData())))
f010f738:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
f010f73c:	74 0b                	je     f010f749 <test_free_block_FF+0x4ec>
f010f73e:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010f741:	83 c0 10             	add    $0x10,%eax
f010f744:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f010f747:	74 17                	je     f010f760 <test_free_block_FF+0x503>
	{
		is_correct = 0;
f010f749:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #6.3: WRONG ALLOC - alloc_block_FF return wrong address.\n");
f010f750:	83 ec 0c             	sub    $0xc,%esp
f010f753:	68 18 4f 13 f0       	push   $0xf0134f18
f010f758:	e8 d4 16 ff ff       	call   f0100e31 <cprintf>
f010f75d:	83 c4 10             	add    $0x10,%esp
	}
	//Free block before last
	free_block(startVAs[numOfAllocs*allocCntPerSize - 1]);
f010f760:	a1 5c b9 2d f0       	mov    0xf02db95c,%eax
f010f765:	83 ec 0c             	sub    $0xc,%esp
f010f768:	50                   	push   %eax
f010f769:	e8 86 06 02 00       	call   f012fdf4 <free_block>
f010f76e:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[numOfAllocs*allocCntPerSize - 1]) ;
f010f771:	a1 5c b9 2d f0       	mov    0xf02db95c,%eax
f010f776:	83 ec 0c             	sub    $0xc,%esp
f010f779:	50                   	push   %eax
f010f77a:	e8 f9 00 02 00       	call   f012f878 <get_block_size>
f010f77f:	83 c4 10             	add    $0x10,%esp
f010f782:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if (block_size != allocSizes[numOfAllocs-1])
f010f785:	a1 38 eb 18 f0       	mov    0xf018eb38,%eax
f010f78a:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f010f78d:	74 20                	je     f010f7af <test_free_block_FF+0x552>
	{
		is_correct = 0;
f010f78f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #6.4: WRONG FREE! block size after free is not correct. Expected %d, Actual %d\n",allocSizes[numOfAllocs-1],block_size);
f010f796:	a1 38 eb 18 f0       	mov    0xf018eb38,%eax
f010f79b:	83 ec 04             	sub    $0x4,%esp
f010f79e:	ff 75 b4             	pushl  -0x4c(%ebp)
f010f7a1:	50                   	push   %eax
f010f7a2:	68 64 4f 13 f0       	push   $0xf0134f64
f010f7a7:	e8 85 16 ff ff       	call   f0100e31 <cprintf>
f010f7ac:	83 c4 10             	add    $0x10,%esp
	}
	block_status = is_free_block(startVAs[numOfAllocs*allocCntPerSize-1]) ;
f010f7af:	a1 5c b9 2d f0       	mov    0xf02db95c,%eax
f010f7b4:	83 ec 0c             	sub    $0xc,%esp
f010f7b7:	50                   	push   %eax
f010f7b8:	e8 d1 00 02 00       	call   f012f88e <is_free_block>
f010f7bd:	83 c4 10             	add    $0x10,%esp
f010f7c0:	88 45 b3             	mov    %al,-0x4d(%ebp)
	if (block_status != 1)
f010f7c3:	80 7d b3 01          	cmpb   $0x1,-0x4d(%ebp)
f010f7c7:	74 17                	je     f010f7e0 <test_free_block_FF+0x583>
	{
		is_correct = 0;
f010f7c9:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #6.5: WRONG FREE! block status (is_free) not equal 1 after freeing.\n");
f010f7d0:	83 ec 0c             	sub    $0xc,%esp
f010f7d3:	68 c4 4f 13 f0       	push   $0xf0134fc4
f010f7d8:	e8 54 16 ff ff       	call   f0100e31 <cprintf>
f010f7dd:	83 c4 10             	add    $0x10,%esp
	}
	//Reallocate first block
	actualSize = allocSizes[0] - sizeOfMetaData();
f010f7e0:	a1 20 eb 18 f0       	mov    0xf018eb20,%eax
f010f7e5:	83 e8 10             	sub    $0x10,%eax
f010f7e8:	89 45 c4             	mov    %eax,-0x3c(%ebp)
	va = alloc_block(actualSize, DA_FF);
f010f7eb:	83 ec 08             	sub    $0x8,%esp
f010f7ee:	6a 01                	push   $0x1
f010f7f0:	ff 75 c4             	pushl  -0x3c(%ebp)
f010f7f3:	e8 ad 00 02 00       	call   f012f8a5 <alloc_block>
f010f7f8:	83 c4 10             	add    $0x10,%esp
f010f7fb:	89 45 c0             	mov    %eax,-0x40(%ebp)
	//Check returned va
	if(va == NULL || (va != (void*)(KERNEL_HEAP_START + sizeOfMetaData())))
f010f7fe:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
f010f802:	74 09                	je     f010f80d <test_free_block_FF+0x5b0>
f010f804:	81 7d c0 10 00 00 f6 	cmpl   $0xf6000010,-0x40(%ebp)
f010f80b:	74 17                	je     f010f824 <test_free_block_FF+0x5c7>
	{
		is_correct = 0;
f010f80d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #7.1: WRONG ALLOC - alloc_block_FF return wrong address.\n");
f010f814:	83 ec 0c             	sub    $0xc,%esp
f010f817:	68 1c 50 13 f0       	push   $0xf013501c
f010f81c:	e8 10 16 ff ff       	call   f0100e31 <cprintf>
f010f821:	83 c4 10             	add    $0x10,%esp
	}
	//Free 2nd block
	free_block(startVAs[1]);
f010f824:	a1 84 a3 2d f0       	mov    0xf02da384,%eax
f010f829:	83 ec 0c             	sub    $0xc,%esp
f010f82c:	50                   	push   %eax
f010f82d:	e8 c2 05 02 00       	call   f012fdf4 <free_block>
f010f832:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[1]) ;
f010f835:	a1 84 a3 2d f0       	mov    0xf02da384,%eax
f010f83a:	83 ec 0c             	sub    $0xc,%esp
f010f83d:	50                   	push   %eax
f010f83e:	e8 35 00 02 00       	call   f012f878 <get_block_size>
f010f843:	83 c4 10             	add    $0x10,%esp
f010f846:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if (block_size != allocSizes[0])
f010f849:	a1 20 eb 18 f0       	mov    0xf018eb20,%eax
f010f84e:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f010f851:	74 20                	je     f010f873 <test_free_block_FF+0x616>
	{
		is_correct = 0;
f010f853:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #7.2: WRONG FREE! block size after free is not correct. Expected %d, Actual %d\n",allocSizes[0],block_size);
f010f85a:	a1 20 eb 18 f0       	mov    0xf018eb20,%eax
f010f85f:	83 ec 04             	sub    $0x4,%esp
f010f862:	ff 75 b4             	pushl  -0x4c(%ebp)
f010f865:	50                   	push   %eax
f010f866:	68 68 50 13 f0       	push   $0xf0135068
f010f86b:	e8 c1 15 ff ff       	call   f0100e31 <cprintf>
f010f870:	83 c4 10             	add    $0x10,%esp
	}
	block_status = is_free_block(startVAs[1]) ;
f010f873:	a1 84 a3 2d f0       	mov    0xf02da384,%eax
f010f878:	83 ec 0c             	sub    $0xc,%esp
f010f87b:	50                   	push   %eax
f010f87c:	e8 0d 00 02 00       	call   f012f88e <is_free_block>
f010f881:	83 c4 10             	add    $0x10,%esp
f010f884:	88 45 b3             	mov    %al,-0x4d(%ebp)
	if (block_status != 1)
f010f887:	80 7d b3 01          	cmpb   $0x1,-0x4d(%ebp)
f010f88b:	74 17                	je     f010f8a4 <test_free_block_FF+0x647>
	{
		is_correct = 0;
f010f88d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #7.3: WRONG FREE! block status (is_free) not equal 1 after freeing.\n");
f010f894:	83 ec 0c             	sub    $0xc,%esp
f010f897:	68 c8 50 13 f0       	push   $0xf01350c8
f010f89c:	e8 90 15 ff ff       	call   f0100e31 <cprintf>
f010f8a1:	83 c4 10             	add    $0x10,%esp
	}

	if (is_correct)
f010f8a4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010f8a8:	74 04                	je     f010f8ae <test_free_block_FF+0x651>
	{
		eval += 10;
f010f8aa:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)
	}

	//====================================================================//
	/*free_block Scenario 2: Merge with previous ONLY (AT the tail)*/
	cprintf("	4: Free some allocated blocks [Merge with previous ONLY]\n\n") ;
f010f8ae:	83 ec 0c             	sub    $0xc,%esp
f010f8b1:	68 20 51 13 f0       	push   $0xf0135120
f010f8b6:	e8 76 15 ff ff       	call   f0100e31 <cprintf>
f010f8bb:	83 c4 10             	add    $0x10,%esp
	cprintf("		4.1: at the tail\n\n") ;
f010f8be:	83 ec 0c             	sub    $0xc,%esp
f010f8c1:	68 5c 51 13 f0       	push   $0xf013515c
f010f8c6:	e8 66 15 ff ff       	call   f0100e31 <cprintf>
f010f8cb:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010f8ce:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	//Free last block (coalesce with previous)
	uint32 blockIndex = numOfAllocs*allocCntPerSize;
f010f8d5:	c7 45 ac 78 05 00 00 	movl   $0x578,-0x54(%ebp)
	free_block(startVAs[blockIndex]);
f010f8dc:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010f8df:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f010f8e6:	83 ec 0c             	sub    $0xc,%esp
f010f8e9:	50                   	push   %eax
f010f8ea:	e8 05 05 02 00       	call   f012fdf4 <free_block>
f010f8ef:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[blockIndex-1]) ;
f010f8f2:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010f8f5:	48                   	dec    %eax
f010f8f6:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f010f8fd:	83 ec 0c             	sub    $0xc,%esp
f010f900:	50                   	push   %eax
f010f901:	e8 72 ff 01 00       	call   f012f878 <get_block_size>
f010f906:	83 c4 10             	add    $0x10,%esp
f010f909:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if (block_size != remainSize + allocSizes[numOfAllocs-1])
f010f90c:	8b 15 38 eb 18 f0    	mov    0xf018eb38,%edx
f010f912:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010f915:	01 d0                	add    %edx,%eax
f010f917:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f010f91a:	74 26                	je     f010f942 <test_free_block_FF+0x6e5>
	{
		is_correct = 0;
f010f91c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #8.1: WRONG FREE! block size after free is not correct. Expected %d, Actual %d\n",remainSize + allocSizes[numOfAllocs-1],block_size);
f010f923:	8b 15 38 eb 18 f0    	mov    0xf018eb38,%edx
f010f929:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010f92c:	01 d0                	add    %edx,%eax
f010f92e:	83 ec 04             	sub    $0x4,%esp
f010f931:	ff 75 b4             	pushl  -0x4c(%ebp)
f010f934:	50                   	push   %eax
f010f935:	68 74 51 13 f0       	push   $0xf0135174
f010f93a:	e8 f2 14 ff ff       	call   f0100e31 <cprintf>
f010f93f:	83 c4 10             	add    $0x10,%esp
	}
	block_status = is_free_block(startVAs[blockIndex-1]) ;
f010f942:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010f945:	48                   	dec    %eax
f010f946:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f010f94d:	83 ec 0c             	sub    $0xc,%esp
f010f950:	50                   	push   %eax
f010f951:	e8 38 ff 01 00       	call   f012f88e <is_free_block>
f010f956:	83 c4 10             	add    $0x10,%esp
f010f959:	88 45 b3             	mov    %al,-0x4d(%ebp)
	if (block_status != 1)
f010f95c:	80 7d b3 01          	cmpb   $0x1,-0x4d(%ebp)
f010f960:	74 17                	je     f010f979 <test_free_block_FF+0x71c>
	{
		is_correct = 0;
f010f962:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #8.2: WRONG FREE! block status (is_free) not equal 1 after freeing.\n");
f010f969:	83 ec 0c             	sub    $0xc,%esp
f010f96c:	68 d4 51 13 f0       	push   $0xf01351d4
f010f971:	e8 bb 14 ff ff       	call   f0100e31 <cprintf>
f010f976:	83 c4 10             	add    $0x10,%esp
	}

	if (get_block_size(startVAs[blockIndex]) != 0 || is_free_block(startVAs[blockIndex]) != 0)
f010f979:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010f97c:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f010f983:	83 ec 0c             	sub    $0xc,%esp
f010f986:	50                   	push   %eax
f010f987:	e8 ec fe 01 00       	call   f012f878 <get_block_size>
f010f98c:	83 c4 10             	add    $0x10,%esp
f010f98f:	85 c0                	test   %eax,%eax
f010f991:	75 1a                	jne    f010f9ad <test_free_block_FF+0x750>
f010f993:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010f996:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f010f99d:	83 ec 0c             	sub    $0xc,%esp
f010f9a0:	50                   	push   %eax
f010f9a1:	e8 e8 fe 01 00       	call   f012f88e <is_free_block>
f010f9a6:	83 c4 10             	add    $0x10,%esp
f010f9a9:	84 c0                	test   %al,%al
f010f9ab:	74 17                	je     f010f9c4 <test_free_block_FF+0x767>
	{
		is_correct = 0;
f010f9ad:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #8.3: WRONG FREE! make sure to ZEROing the size & is_free values of the vanishing block.\n");
f010f9b4:	83 ec 0c             	sub    $0xc,%esp
f010f9b7:	68 2c 52 13 f0       	push   $0xf013522c
f010f9bc:	e8 70 14 ff ff       	call   f0100e31 <cprintf>
f010f9c1:	83 c4 10             	add    $0x10,%esp
	}

	//====================================================================//
	/*free_block Scenario 3: Merge with previous ONLY (between 2 blocks)*/
	cprintf("		4.2: between 2 blocks\n\n") ;
f010f9c4:	83 ec 0c             	sub    $0xc,%esp
f010f9c7:	68 96 52 13 f0       	push   $0xf0135296
f010f9cc:	e8 60 14 ff ff       	call   f0100e31 <cprintf>
f010f9d1:	83 c4 10             	add    $0x10,%esp
	blockIndex = 2*allocCntPerSize+1 ;
f010f9d4:	c7 45 ac 91 01 00 00 	movl   $0x191,-0x54(%ebp)
	free_block(startVAs[blockIndex]);
f010f9db:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010f9de:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f010f9e5:	83 ec 0c             	sub    $0xc,%esp
f010f9e8:	50                   	push   %eax
f010f9e9:	e8 06 04 02 00       	call   f012fdf4 <free_block>
f010f9ee:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[blockIndex-1]) ;
f010f9f1:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010f9f4:	48                   	dec    %eax
f010f9f5:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f010f9fc:	83 ec 0c             	sub    $0xc,%esp
f010f9ff:	50                   	push   %eax
f010fa00:	e8 73 fe 01 00       	call   f012f878 <get_block_size>
f010fa05:	83 c4 10             	add    $0x10,%esp
f010fa08:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if (block_size != allocSizes[2]+allocSizes[2])
f010fa0b:	8b 15 28 eb 18 f0    	mov    0xf018eb28,%edx
f010fa11:	a1 28 eb 18 f0       	mov    0xf018eb28,%eax
f010fa16:	01 d0                	add    %edx,%eax
f010fa18:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f010fa1b:	74 28                	je     f010fa45 <test_free_block_FF+0x7e8>
	{
		is_correct = 0;
f010fa1d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf	("test_free_block #9.1: WRONG FREE! block size after free is not correct. Expected %d, Actual %d\n",allocSizes[2] + allocSizes[2],block_size);
f010fa24:	8b 15 28 eb 18 f0    	mov    0xf018eb28,%edx
f010fa2a:	a1 28 eb 18 f0       	mov    0xf018eb28,%eax
f010fa2f:	01 d0                	add    %edx,%eax
f010fa31:	83 ec 04             	sub    $0x4,%esp
f010fa34:	ff 75 b4             	pushl  -0x4c(%ebp)
f010fa37:	50                   	push   %eax
f010fa38:	68 b0 52 13 f0       	push   $0xf01352b0
f010fa3d:	e8 ef 13 ff ff       	call   f0100e31 <cprintf>
f010fa42:	83 c4 10             	add    $0x10,%esp
	}
	block_status = is_free_block(startVAs[blockIndex-1]) ;
f010fa45:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fa48:	48                   	dec    %eax
f010fa49:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f010fa50:	83 ec 0c             	sub    $0xc,%esp
f010fa53:	50                   	push   %eax
f010fa54:	e8 35 fe 01 00       	call   f012f88e <is_free_block>
f010fa59:	83 c4 10             	add    $0x10,%esp
f010fa5c:	88 45 b3             	mov    %al,-0x4d(%ebp)
	if (block_status != 1)
f010fa5f:	80 7d b3 01          	cmpb   $0x1,-0x4d(%ebp)
f010fa63:	74 17                	je     f010fa7c <test_free_block_FF+0x81f>
	{
		is_correct = 0;
f010fa65:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #9.2: WRONG FREE! block status (is_free) not equal 1 after freeing.\n");
f010fa6c:	83 ec 0c             	sub    $0xc,%esp
f010fa6f:	68 10 53 13 f0       	push   $0xf0135310
f010fa74:	e8 b8 13 ff ff       	call   f0100e31 <cprintf>
f010fa79:	83 c4 10             	add    $0x10,%esp
	}

	if (get_block_size(startVAs[blockIndex]) != 0 || is_free_block(startVAs[blockIndex]) != 0)
f010fa7c:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fa7f:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f010fa86:	83 ec 0c             	sub    $0xc,%esp
f010fa89:	50                   	push   %eax
f010fa8a:	e8 e9 fd 01 00       	call   f012f878 <get_block_size>
f010fa8f:	83 c4 10             	add    $0x10,%esp
f010fa92:	85 c0                	test   %eax,%eax
f010fa94:	75 1a                	jne    f010fab0 <test_free_block_FF+0x853>
f010fa96:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fa99:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f010faa0:	83 ec 0c             	sub    $0xc,%esp
f010faa3:	50                   	push   %eax
f010faa4:	e8 e5 fd 01 00       	call   f012f88e <is_free_block>
f010faa9:	83 c4 10             	add    $0x10,%esp
f010faac:	84 c0                	test   %al,%al
f010faae:	74 17                	je     f010fac7 <test_free_block_FF+0x86a>
	{
		is_correct = 0;
f010fab0:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #9.3: WRONG FREE! make sure to ZEROing the size & is_free values of the vanishing block.\n");
f010fab7:	83 ec 0c             	sub    $0xc,%esp
f010faba:	68 68 53 13 f0       	push   $0xf0135368
f010fabf:	e8 6d 13 ff ff       	call   f0100e31 <cprintf>
f010fac4:	83 c4 10             	add    $0x10,%esp
	}

	if (is_correct)
f010fac7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010facb:	74 04                	je     f010fad1 <test_free_block_FF+0x874>
	{
		eval += 15;
f010facd:	83 45 f4 0f          	addl   $0xf,-0xc(%ebp)
	}

	//====================================================================//
	/*free_block Scenario 4: Merge with next ONLY (AT the head)*/
	cprintf("	5: Free some allocated blocks [Merge with next ONLY]\n\n") ;
f010fad1:	83 ec 0c             	sub    $0xc,%esp
f010fad4:	68 d4 53 13 f0       	push   $0xf01353d4
f010fad9:	e8 53 13 ff ff       	call   f0100e31 <cprintf>
f010fade:	83 c4 10             	add    $0x10,%esp
	cprintf("		5.1: at the head\n\n") ;
f010fae1:	83 ec 0c             	sub    $0xc,%esp
f010fae4:	68 0c 54 13 f0       	push   $0xf013540c
f010fae9:	e8 43 13 ff ff       	call   f0100e31 <cprintf>
f010faee:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010faf1:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	blockIndex = 0 ;
f010faf8:	c7 45 ac 00 00 00 00 	movl   $0x0,-0x54(%ebp)
	free_block(startVAs[blockIndex]);
f010faff:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fb02:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f010fb09:	83 ec 0c             	sub    $0xc,%esp
f010fb0c:	50                   	push   %eax
f010fb0d:	e8 e2 02 02 00       	call   f012fdf4 <free_block>
f010fb12:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[blockIndex]) ;
f010fb15:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fb18:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f010fb1f:	83 ec 0c             	sub    $0xc,%esp
f010fb22:	50                   	push   %eax
f010fb23:	e8 50 fd 01 00       	call   f012f878 <get_block_size>
f010fb28:	83 c4 10             	add    $0x10,%esp
f010fb2b:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if (block_size != allocSizes[0]+allocSizes[0])
f010fb2e:	8b 15 20 eb 18 f0    	mov    0xf018eb20,%edx
f010fb34:	a1 20 eb 18 f0       	mov    0xf018eb20,%eax
f010fb39:	01 d0                	add    %edx,%eax
f010fb3b:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f010fb3e:	74 28                	je     f010fb68 <test_free_block_FF+0x90b>
	{
		is_correct = 0;
f010fb40:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #9.1: WRONG FREE! block size after free is not correct. Expected %d, Actual %d\n",allocSizes[0] + allocSizes[0],block_size);
f010fb47:	8b 15 20 eb 18 f0    	mov    0xf018eb20,%edx
f010fb4d:	a1 20 eb 18 f0       	mov    0xf018eb20,%eax
f010fb52:	01 d0                	add    %edx,%eax
f010fb54:	83 ec 04             	sub    $0x4,%esp
f010fb57:	ff 75 b4             	pushl  -0x4c(%ebp)
f010fb5a:	50                   	push   %eax
f010fb5b:	68 b0 52 13 f0       	push   $0xf01352b0
f010fb60:	e8 cc 12 ff ff       	call   f0100e31 <cprintf>
f010fb65:	83 c4 10             	add    $0x10,%esp
	}
	block_status = is_free_block(startVAs[blockIndex]) ;
f010fb68:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fb6b:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f010fb72:	83 ec 0c             	sub    $0xc,%esp
f010fb75:	50                   	push   %eax
f010fb76:	e8 13 fd 01 00       	call   f012f88e <is_free_block>
f010fb7b:	83 c4 10             	add    $0x10,%esp
f010fb7e:	88 45 b3             	mov    %al,-0x4d(%ebp)
	if (block_status != 1)
f010fb81:	80 7d b3 01          	cmpb   $0x1,-0x4d(%ebp)
f010fb85:	74 17                	je     f010fb9e <test_free_block_FF+0x941>
	{
		is_correct = 0;
f010fb87:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #9.2: WRONG FREE! block status (is_free) not equal 1 after freeing.\n");
f010fb8e:	83 ec 0c             	sub    $0xc,%esp
f010fb91:	68 10 53 13 f0       	push   $0xf0135310
f010fb96:	e8 96 12 ff ff       	call   f0100e31 <cprintf>
f010fb9b:	83 c4 10             	add    $0x10,%esp
	}
	if (get_block_size(startVAs[blockIndex+1]) != 0 || is_free_block(startVAs[blockIndex+1]) != 0)
f010fb9e:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fba1:	40                   	inc    %eax
f010fba2:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f010fba9:	83 ec 0c             	sub    $0xc,%esp
f010fbac:	50                   	push   %eax
f010fbad:	e8 c6 fc 01 00       	call   f012f878 <get_block_size>
f010fbb2:	83 c4 10             	add    $0x10,%esp
f010fbb5:	85 c0                	test   %eax,%eax
f010fbb7:	75 1b                	jne    f010fbd4 <test_free_block_FF+0x977>
f010fbb9:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fbbc:	40                   	inc    %eax
f010fbbd:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f010fbc4:	83 ec 0c             	sub    $0xc,%esp
f010fbc7:	50                   	push   %eax
f010fbc8:	e8 c1 fc 01 00       	call   f012f88e <is_free_block>
f010fbcd:	83 c4 10             	add    $0x10,%esp
f010fbd0:	84 c0                	test   %al,%al
f010fbd2:	74 17                	je     f010fbeb <test_free_block_FF+0x98e>
	{
		is_correct = 0;
f010fbd4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #9.3: WRONG FREE! make sure to ZEROing the size & is_free values of the vanishing block.\n");
f010fbdb:	83 ec 0c             	sub    $0xc,%esp
f010fbde:	68 68 53 13 f0       	push   $0xf0135368
f010fbe3:	e8 49 12 ff ff       	call   f0100e31 <cprintf>
f010fbe8:	83 c4 10             	add    $0x10,%esp
	}

	//====================================================================//
	/*free_block Scenario 5: Merge with next ONLY (between 2 blocks)*/
	cprintf("		5.2: between 2 blocks\n\n") ;
f010fbeb:	83 ec 0c             	sub    $0xc,%esp
f010fbee:	68 21 54 13 f0       	push   $0xf0135421
f010fbf3:	e8 39 12 ff ff       	call   f0100e31 <cprintf>
f010fbf8:	83 c4 10             	add    $0x10,%esp
	blockIndex = 1*allocCntPerSize - 1 ;
f010fbfb:	c7 45 ac c7 00 00 00 	movl   $0xc7,-0x54(%ebp)
	free_block(startVAs[blockIndex]);
f010fc02:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fc05:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f010fc0c:	83 ec 0c             	sub    $0xc,%esp
f010fc0f:	50                   	push   %eax
f010fc10:	e8 df 01 02 00       	call   f012fdf4 <free_block>
f010fc15:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[blockIndex]) ;
f010fc18:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fc1b:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f010fc22:	83 ec 0c             	sub    $0xc,%esp
f010fc25:	50                   	push   %eax
f010fc26:	e8 4d fc 01 00       	call   f012f878 <get_block_size>
f010fc2b:	83 c4 10             	add    $0x10,%esp
f010fc2e:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if (block_size != allocSizes[0]+allocSizes[1])
f010fc31:	8b 15 20 eb 18 f0    	mov    0xf018eb20,%edx
f010fc37:	a1 24 eb 18 f0       	mov    0xf018eb24,%eax
f010fc3c:	01 d0                	add    %edx,%eax
f010fc3e:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f010fc41:	74 28                	je     f010fc6b <test_free_block_FF+0xa0e>
	{
		is_correct = 0;
f010fc43:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #10.1: WRONG FREE! block size after free is not correct. Expected %d, Actual %d\n",allocSizes[0] + allocSizes[1],block_size);
f010fc4a:	8b 15 20 eb 18 f0    	mov    0xf018eb20,%edx
f010fc50:	a1 24 eb 18 f0       	mov    0xf018eb24,%eax
f010fc55:	01 d0                	add    %edx,%eax
f010fc57:	83 ec 04             	sub    $0x4,%esp
f010fc5a:	ff 75 b4             	pushl  -0x4c(%ebp)
f010fc5d:	50                   	push   %eax
f010fc5e:	68 3c 54 13 f0       	push   $0xf013543c
f010fc63:	e8 c9 11 ff ff       	call   f0100e31 <cprintf>
f010fc68:	83 c4 10             	add    $0x10,%esp
	}
	block_status = is_free_block(startVAs[blockIndex]) ;
f010fc6b:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fc6e:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f010fc75:	83 ec 0c             	sub    $0xc,%esp
f010fc78:	50                   	push   %eax
f010fc79:	e8 10 fc 01 00       	call   f012f88e <is_free_block>
f010fc7e:	83 c4 10             	add    $0x10,%esp
f010fc81:	88 45 b3             	mov    %al,-0x4d(%ebp)
	if (block_status != 1)
f010fc84:	80 7d b3 01          	cmpb   $0x1,-0x4d(%ebp)
f010fc88:	74 17                	je     f010fca1 <test_free_block_FF+0xa44>
	{
		is_correct = 0;
f010fc8a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #10.2: WRONG FREE! block status (is_free) not equal 1 after freeing.\n");
f010fc91:	83 ec 0c             	sub    $0xc,%esp
f010fc94:	68 a0 54 13 f0       	push   $0xf01354a0
f010fc99:	e8 93 11 ff ff       	call   f0100e31 <cprintf>
f010fc9e:	83 c4 10             	add    $0x10,%esp
	}
	if (get_block_size(startVAs[blockIndex+1]) != 0 || is_free_block(startVAs[blockIndex+1]) != 0)
f010fca1:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fca4:	40                   	inc    %eax
f010fca5:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f010fcac:	83 ec 0c             	sub    $0xc,%esp
f010fcaf:	50                   	push   %eax
f010fcb0:	e8 c3 fb 01 00       	call   f012f878 <get_block_size>
f010fcb5:	83 c4 10             	add    $0x10,%esp
f010fcb8:	85 c0                	test   %eax,%eax
f010fcba:	75 1b                	jne    f010fcd7 <test_free_block_FF+0xa7a>
f010fcbc:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fcbf:	40                   	inc    %eax
f010fcc0:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f010fcc7:	83 ec 0c             	sub    $0xc,%esp
f010fcca:	50                   	push   %eax
f010fccb:	e8 be fb 01 00       	call   f012f88e <is_free_block>
f010fcd0:	83 c4 10             	add    $0x10,%esp
f010fcd3:	84 c0                	test   %al,%al
f010fcd5:	74 17                	je     f010fcee <test_free_block_FF+0xa91>
	{
		is_correct = 0;
f010fcd7:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #10.3: WRONG FREE! make sure to ZEROing the size & is_free values of the vanishing block.\n");
f010fcde:	83 ec 0c             	sub    $0xc,%esp
f010fce1:	68 f8 54 13 f0       	push   $0xf01354f8
f010fce6:	e8 46 11 ff ff       	call   f0100e31 <cprintf>
f010fceb:	83 c4 10             	add    $0x10,%esp
	}
	if (is_correct)
f010fcee:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010fcf2:	74 04                	je     f010fcf8 <test_free_block_FF+0xa9b>
	{
		eval += 15;
f010fcf4:	83 45 f4 0f          	addl   $0xf,-0xc(%ebp)
	}

	//====================================================================//
	/*free_block Scenario 6: Merge with prev & next */
	cprintf("	6: Free some allocated blocks [Merge with previous & next]\n\n") ;
f010fcf8:	83 ec 0c             	sub    $0xc,%esp
f010fcfb:	68 64 55 13 f0       	push   $0xf0135564
f010fd00:	e8 2c 11 ff ff       	call   f0100e31 <cprintf>
f010fd05:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010fd08:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	blockIndex = 4*allocCntPerSize - 2 ;
f010fd0f:	c7 45 ac 1e 03 00 00 	movl   $0x31e,-0x54(%ebp)
	free_block(startVAs[blockIndex]);
f010fd16:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fd19:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f010fd20:	83 ec 0c             	sub    $0xc,%esp
f010fd23:	50                   	push   %eax
f010fd24:	e8 cb 00 02 00       	call   f012fdf4 <free_block>
f010fd29:	83 c4 10             	add    $0x10,%esp

	blockIndex = 4*allocCntPerSize - 1 ;
f010fd2c:	c7 45 ac 1f 03 00 00 	movl   $0x31f,-0x54(%ebp)
	free_block(startVAs[blockIndex]);
f010fd33:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fd36:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f010fd3d:	83 ec 0c             	sub    $0xc,%esp
f010fd40:	50                   	push   %eax
f010fd41:	e8 ae 00 02 00       	call   f012fdf4 <free_block>
f010fd46:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[blockIndex-1]) ;
f010fd49:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fd4c:	48                   	dec    %eax
f010fd4d:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f010fd54:	83 ec 0c             	sub    $0xc,%esp
f010fd57:	50                   	push   %eax
f010fd58:	e8 1b fb 01 00       	call   f012f878 <get_block_size>
f010fd5d:	83 c4 10             	add    $0x10,%esp
f010fd60:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if (block_size != allocSizes[3]+allocSizes[3]+allocSizes[4])
f010fd63:	8b 15 2c eb 18 f0    	mov    0xf018eb2c,%edx
f010fd69:	a1 2c eb 18 f0       	mov    0xf018eb2c,%eax
f010fd6e:	01 c2                	add    %eax,%edx
f010fd70:	a1 30 eb 18 f0       	mov    0xf018eb30,%eax
f010fd75:	01 d0                	add    %edx,%eax
f010fd77:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f010fd7a:	74 2f                	je     f010fdab <test_free_block_FF+0xb4e>
	{
		is_correct = 0;
f010fd7c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #11.1: WRONG FREE! block size after free is not correct. Expected %d, Actual %d\n",allocSizes[3]+allocSizes[3]+allocSizes[4],block_size);
f010fd83:	8b 15 2c eb 18 f0    	mov    0xf018eb2c,%edx
f010fd89:	a1 2c eb 18 f0       	mov    0xf018eb2c,%eax
f010fd8e:	01 c2                	add    %eax,%edx
f010fd90:	a1 30 eb 18 f0       	mov    0xf018eb30,%eax
f010fd95:	01 d0                	add    %edx,%eax
f010fd97:	83 ec 04             	sub    $0x4,%esp
f010fd9a:	ff 75 b4             	pushl  -0x4c(%ebp)
f010fd9d:	50                   	push   %eax
f010fd9e:	68 a4 55 13 f0       	push   $0xf01355a4
f010fda3:	e8 89 10 ff ff       	call   f0100e31 <cprintf>
f010fda8:	83 c4 10             	add    $0x10,%esp
	}
	block_status = is_free_block(startVAs[blockIndex-1]) ;
f010fdab:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fdae:	48                   	dec    %eax
f010fdaf:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f010fdb6:	83 ec 0c             	sub    $0xc,%esp
f010fdb9:	50                   	push   %eax
f010fdba:	e8 cf fa 01 00       	call   f012f88e <is_free_block>
f010fdbf:	83 c4 10             	add    $0x10,%esp
f010fdc2:	88 45 b3             	mov    %al,-0x4d(%ebp)
	if (block_status != 1)
f010fdc5:	80 7d b3 01          	cmpb   $0x1,-0x4d(%ebp)
f010fdc9:	74 17                	je     f010fde2 <test_free_block_FF+0xb85>
	{
		is_correct = 0;
f010fdcb:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #11.2: WRONG FREE! block status (is_free) not equal 1 after freeing.\n");
f010fdd2:	83 ec 0c             	sub    $0xc,%esp
f010fdd5:	68 08 56 13 f0       	push   $0xf0135608
f010fdda:	e8 52 10 ff ff       	call   f0100e31 <cprintf>
f010fddf:	83 c4 10             	add    $0x10,%esp
	}
	if (get_block_size(startVAs[blockIndex]) != 0 || is_free_block(startVAs[blockIndex]) != 0 ||
f010fde2:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fde5:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f010fdec:	83 ec 0c             	sub    $0xc,%esp
f010fdef:	50                   	push   %eax
f010fdf0:	e8 83 fa 01 00       	call   f012f878 <get_block_size>
f010fdf5:	83 c4 10             	add    $0x10,%esp
f010fdf8:	85 c0                	test   %eax,%eax
f010fdfa:	75 50                	jne    f010fe4c <test_free_block_FF+0xbef>
f010fdfc:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fdff:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f010fe06:	83 ec 0c             	sub    $0xc,%esp
f010fe09:	50                   	push   %eax
f010fe0a:	e8 7f fa 01 00       	call   f012f88e <is_free_block>
f010fe0f:	83 c4 10             	add    $0x10,%esp
f010fe12:	84 c0                	test   %al,%al
f010fe14:	75 36                	jne    f010fe4c <test_free_block_FF+0xbef>
			get_block_size(startVAs[blockIndex+1]) != 0 || is_free_block(startVAs[blockIndex+1]) != 0)
f010fe16:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fe19:	40                   	inc    %eax
f010fe1a:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f010fe21:	83 ec 0c             	sub    $0xc,%esp
f010fe24:	50                   	push   %eax
f010fe25:	e8 4e fa 01 00       	call   f012f878 <get_block_size>
f010fe2a:	83 c4 10             	add    $0x10,%esp
	if (block_status != 1)
	{
		is_correct = 0;
		cprintf("test_free_block #11.2: WRONG FREE! block status (is_free) not equal 1 after freeing.\n");
	}
	if (get_block_size(startVAs[blockIndex]) != 0 || is_free_block(startVAs[blockIndex]) != 0 ||
f010fe2d:	85 c0                	test   %eax,%eax
f010fe2f:	75 1b                	jne    f010fe4c <test_free_block_FF+0xbef>
			get_block_size(startVAs[blockIndex+1]) != 0 || is_free_block(startVAs[blockIndex+1]) != 0)
f010fe31:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fe34:	40                   	inc    %eax
f010fe35:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f010fe3c:	83 ec 0c             	sub    $0xc,%esp
f010fe3f:	50                   	push   %eax
f010fe40:	e8 49 fa 01 00       	call   f012f88e <is_free_block>
f010fe45:	83 c4 10             	add    $0x10,%esp
f010fe48:	84 c0                	test   %al,%al
f010fe4a:	74 17                	je     f010fe63 <test_free_block_FF+0xc06>
	{
		is_correct = 0;
f010fe4c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #11.3: WRONG FREE! make sure to ZEROing the size & is_free values of the vanishing block.\n");
f010fe53:	83 ec 0c             	sub    $0xc,%esp
f010fe56:	68 60 56 13 f0       	push   $0xf0135660
f010fe5b:	e8 d1 0f ff ff       	call   f0100e31 <cprintf>
f010fe60:	83 c4 10             	add    $0x10,%esp
	}
	if (is_correct)
f010fe63:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010fe67:	74 04                	je     f010fe6d <test_free_block_FF+0xc10>
	{
		eval += 20;
f010fe69:	83 45 f4 14          	addl   $0x14,-0xc(%ebp)
	}

	//====================================================================//
	/*Allocate After Free Scenarios */
	cprintf("	7: Allocate After Free [should be placed in coalesced blocks]\n\n") ;
f010fe6d:	83 ec 0c             	sub    $0xc,%esp
f010fe70:	68 cc 56 13 f0       	push   $0xf01356cc
f010fe75:	e8 b7 0f ff ff       	call   f0100e31 <cprintf>
f010fe7a:	83 c4 10             	add    $0x10,%esp

	cprintf("		7.1: in block coalesces with NEXT\n\n") ;
f010fe7d:	83 ec 0c             	sub    $0xc,%esp
f010fe80:	68 10 57 13 f0       	push   $0xf0135710
f010fe85:	e8 a7 0f ff ff       	call   f0100e31 <cprintf>
f010fe8a:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010fe8d:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	actualSize = 5*kilo - sizeOfMetaData();
f010fe94:	c7 45 c4 f0 13 00 00 	movl   $0x13f0,-0x3c(%ebp)
	va = alloc_block(actualSize, DA_FF);
f010fe9b:	83 ec 08             	sub    $0x8,%esp
f010fe9e:	6a 01                	push   $0x1
f010fea0:	ff 75 c4             	pushl  -0x3c(%ebp)
f010fea3:	e8 fd f9 01 00       	call   f012f8a5 <alloc_block>
f010fea8:	83 c4 10             	add    $0x10,%esp
f010feab:	89 45 c0             	mov    %eax,-0x40(%ebp)
	//Check returned va
	void* expected = (void*)(KERNEL_HEAP_START + sizeOfMetaData());
f010feae:	c7 45 a8 10 00 00 f6 	movl   $0xf6000010,-0x58(%ebp)
	if(va == NULL || (va != expected))
f010feb5:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
f010feb9:	74 08                	je     f010fec3 <test_free_block_FF+0xc66>
f010febb:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010febe:	3b 45 a8             	cmp    -0x58(%ebp),%eax
f010fec1:	74 1d                	je     f010fee0 <test_free_block_FF+0xc83>
	{
		is_correct = 0;
f010fec3:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #12.1: WRONG ALLOC - alloc_block_FF return wrong address. Expected %x, Actual %x\n", expected, va);
f010feca:	83 ec 04             	sub    $0x4,%esp
f010fecd:	ff 75 c0             	pushl  -0x40(%ebp)
f010fed0:	ff 75 a8             	pushl  -0x58(%ebp)
f010fed3:	68 38 57 13 f0       	push   $0xf0135738
f010fed8:	e8 54 0f ff ff       	call   f0100e31 <cprintf>
f010fedd:	83 c4 10             	add    $0x10,%esp
	}
	actualSize = 3*kilo - sizeOfMetaData();
f010fee0:	c7 45 c4 f0 0b 00 00 	movl   $0xbf0,-0x3c(%ebp)
	va = alloc_block(actualSize, DA_FF);
f010fee7:	83 ec 08             	sub    $0x8,%esp
f010feea:	6a 01                	push   $0x1
f010feec:	ff 75 c4             	pushl  -0x3c(%ebp)
f010feef:	e8 b1 f9 01 00       	call   f012f8a5 <alloc_block>
f010fef4:	83 c4 10             	add    $0x10,%esp
f010fef7:	89 45 c0             	mov    %eax,-0x40(%ebp)
	//Check returned va
	expected = (void*)(KERNEL_HEAP_START + 5*kilo + sizeOfMetaData());
f010fefa:	c7 45 a8 10 14 00 f6 	movl   $0xf6001410,-0x58(%ebp)
	if(va == NULL || (va != expected))
f010ff01:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
f010ff05:	74 08                	je     f010ff0f <test_free_block_FF+0xcb2>
f010ff07:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010ff0a:	3b 45 a8             	cmp    -0x58(%ebp),%eax
f010ff0d:	74 1d                	je     f010ff2c <test_free_block_FF+0xccf>
	{
		is_correct = 0;
f010ff0f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #12.2: WRONG ALLOC - alloc_block_FF return wrong address. Expected %x, Actual %x\n", expected, va);
f010ff16:	83 ec 04             	sub    $0x4,%esp
f010ff19:	ff 75 c0             	pushl  -0x40(%ebp)
f010ff1c:	ff 75 a8             	pushl  -0x58(%ebp)
f010ff1f:	68 9c 57 13 f0       	push   $0xf013579c
f010ff24:	e8 08 0f ff ff       	call   f0100e31 <cprintf>
f010ff29:	83 c4 10             	add    $0x10,%esp
	}
	actualSize = 4*kilo + 10;
f010ff2c:	c7 45 c4 0a 10 00 00 	movl   $0x100a,-0x3c(%ebp)
	va = alloc_block(actualSize, DA_FF);
f010ff33:	83 ec 08             	sub    $0x8,%esp
f010ff36:	6a 01                	push   $0x1
f010ff38:	ff 75 c4             	pushl  -0x3c(%ebp)
f010ff3b:	e8 65 f9 01 00       	call   f012f8a5 <alloc_block>
f010ff40:	83 c4 10             	add    $0x10,%esp
f010ff43:	89 45 c0             	mov    %eax,-0x40(%ebp)
	//Check returned va
	expected = startVAs[1*allocCntPerSize - 1];
f010ff46:	a1 9c a6 2d f0       	mov    0xf02da69c,%eax
f010ff4b:	89 45 a8             	mov    %eax,-0x58(%ebp)
	if(va == NULL || (va != expected))
f010ff4e:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
f010ff52:	74 08                	je     f010ff5c <test_free_block_FF+0xcff>
f010ff54:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010ff57:	3b 45 a8             	cmp    -0x58(%ebp),%eax
f010ff5a:	74 1d                	je     f010ff79 <test_free_block_FF+0xd1c>
	{
		is_correct = 0;
f010ff5c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #12.3: WRONG ALLOC - alloc_block_FF return wrong address. Expected %x, Actual %x\n", expected, va);
f010ff63:	83 ec 04             	sub    $0x4,%esp
f010ff66:	ff 75 c0             	pushl  -0x40(%ebp)
f010ff69:	ff 75 a8             	pushl  -0x58(%ebp)
f010ff6c:	68 00 58 13 f0       	push   $0xf0135800
f010ff71:	e8 bb 0e ff ff       	call   f0100e31 <cprintf>
f010ff76:	83 c4 10             	add    $0x10,%esp
	}
	if (is_correct)
f010ff79:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010ff7d:	74 04                	je     f010ff83 <test_free_block_FF+0xd26>
	{
		eval += 10;
f010ff7f:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)
	}

	cprintf("		7.2: in block coalesces with PREV & NEXT\n\n") ;
f010ff83:	83 ec 0c             	sub    $0xc,%esp
f010ff86:	68 64 58 13 f0       	push   $0xf0135864
f010ff8b:	e8 a1 0e ff ff       	call   f0100e31 <cprintf>
f010ff90:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010ff93:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	actualSize = 2*kilo + 1;
f010ff9a:	c7 45 c4 01 08 00 00 	movl   $0x801,-0x3c(%ebp)
	va = alloc_block(actualSize, DA_FF);
f010ffa1:	83 ec 08             	sub    $0x8,%esp
f010ffa4:	6a 01                	push   $0x1
f010ffa6:	ff 75 c4             	pushl  -0x3c(%ebp)
f010ffa9:	e8 f7 f8 01 00       	call   f012f8a5 <alloc_block>
f010ffae:	83 c4 10             	add    $0x10,%esp
f010ffb1:	89 45 c0             	mov    %eax,-0x40(%ebp)
	//Check returned va
	expected = startVAs[4*allocCntPerSize - 2];
f010ffb4:	a1 f8 af 2d f0       	mov    0xf02daff8,%eax
f010ffb9:	89 45 a8             	mov    %eax,-0x58(%ebp)
	if(va == NULL || (va != expected))
f010ffbc:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
f010ffc0:	74 08                	je     f010ffca <test_free_block_FF+0xd6d>
f010ffc2:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010ffc5:	3b 45 a8             	cmp    -0x58(%ebp),%eax
f010ffc8:	74 1d                	je     f010ffe7 <test_free_block_FF+0xd8a>
	{
		is_correct = 0;
f010ffca:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #12.4: WRONG ALLOC - alloc_block_FF return wrong address. Expected %x, Actual %x\n", expected, va);
f010ffd1:	83 ec 04             	sub    $0x4,%esp
f010ffd4:	ff 75 c0             	pushl  -0x40(%ebp)
f010ffd7:	ff 75 a8             	pushl  -0x58(%ebp)
f010ffda:	68 94 58 13 f0       	push   $0xf0135894
f010ffdf:	e8 4d 0e ff ff       	call   f0100e31 <cprintf>
f010ffe4:	83 c4 10             	add    $0x10,%esp
	}
	if (is_correct)
f010ffe7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010ffeb:	74 04                	je     f010fff1 <test_free_block_FF+0xd94>
	{
		eval += 10;
f010ffed:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)
	}

	cprintf("		7.3: in block coalesces with PREV\n\n") ;
f010fff1:	83 ec 0c             	sub    $0xc,%esp
f010fff4:	68 f8 58 13 f0       	push   $0xf01358f8
f010fff9:	e8 33 0e ff ff       	call   f0100e31 <cprintf>
f010fffe:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f0110001:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	actualSize = 2*kilo - sizeOfMetaData();
f0110008:	c7 45 c4 f0 07 00 00 	movl   $0x7f0,-0x3c(%ebp)
	va = alloc_block(actualSize, DA_FF);
f011000f:	83 ec 08             	sub    $0x8,%esp
f0110012:	6a 01                	push   $0x1
f0110014:	ff 75 c4             	pushl  -0x3c(%ebp)
f0110017:	e8 89 f8 01 00       	call   f012f8a5 <alloc_block>
f011001c:	83 c4 10             	add    $0x10,%esp
f011001f:	89 45 c0             	mov    %eax,-0x40(%ebp)
	//Check returned va
	expected = startVAs[2*allocCntPerSize];
f0110022:	a1 c0 a9 2d f0       	mov    0xf02da9c0,%eax
f0110027:	89 45 a8             	mov    %eax,-0x58(%ebp)
	if(va == NULL || (va != expected))
f011002a:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
f011002e:	74 08                	je     f0110038 <test_free_block_FF+0xddb>
f0110030:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0110033:	3b 45 a8             	cmp    -0x58(%ebp),%eax
f0110036:	74 1d                	je     f0110055 <test_free_block_FF+0xdf8>
	{
		is_correct = 0;
f0110038:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #12.4: WRONG ALLOC - alloc_block_FF return wrong address. Expected %x, Actual %x\n", expected, va);
f011003f:	83 ec 04             	sub    $0x4,%esp
f0110042:	ff 75 c0             	pushl  -0x40(%ebp)
f0110045:	ff 75 a8             	pushl  -0x58(%ebp)
f0110048:	68 94 58 13 f0       	push   $0xf0135894
f011004d:	e8 df 0d ff ff       	call   f0100e31 <cprintf>
f0110052:	83 c4 10             	add    $0x10,%esp
	}
	actualSize = 8*kilo - sizeOfMetaData();
f0110055:	c7 45 c4 f0 1f 00 00 	movl   $0x1ff0,-0x3c(%ebp)
	va = alloc_block(actualSize, DA_FF);
f011005c:	83 ec 08             	sub    $0x8,%esp
f011005f:	6a 01                	push   $0x1
f0110061:	ff 75 c4             	pushl  -0x3c(%ebp)
f0110064:	e8 3c f8 01 00       	call   f012f8a5 <alloc_block>
f0110069:	83 c4 10             	add    $0x10,%esp
f011006c:	89 45 c0             	mov    %eax,-0x40(%ebp)
	//Check returned va
	expected = startVAs[numOfAllocs*allocCntPerSize-1];
f011006f:	a1 5c b9 2d f0       	mov    0xf02db95c,%eax
f0110074:	89 45 a8             	mov    %eax,-0x58(%ebp)
	if(va == NULL || (va != expected))
f0110077:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
f011007b:	74 08                	je     f0110085 <test_free_block_FF+0xe28>
f011007d:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0110080:	3b 45 a8             	cmp    -0x58(%ebp),%eax
f0110083:	74 1d                	je     f01100a2 <test_free_block_FF+0xe45>
	{
		is_correct = 0;
f0110085:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #12.5: WRONG ALLOC - alloc_block_FF return wrong address. Expected %x, Actual %x\n", expected, va);
f011008c:	83 ec 04             	sub    $0x4,%esp
f011008f:	ff 75 c0             	pushl  -0x40(%ebp)
f0110092:	ff 75 a8             	pushl  -0x58(%ebp)
f0110095:	68 20 59 13 f0       	push   $0xf0135920
f011009a:	e8 92 0d ff ff       	call   f0100e31 <cprintf>
f011009f:	83 c4 10             	add    $0x10,%esp
	}
	if (is_correct)
f01100a2:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01100a6:	74 04                	je     f01100ac <test_free_block_FF+0xe4f>
	{
		eval += 10;
f01100a8:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)
	}

	cprintf("test free_block with FIRST FIT completed. Evaluation = %d%\n", eval);
f01100ac:	83 ec 08             	sub    $0x8,%esp
f01100af:	ff 75 f4             	pushl  -0xc(%ebp)
f01100b2:	68 84 59 13 f0       	push   $0xf0135984
f01100b7:	e8 75 0d ff ff       	call   f0100e31 <cprintf>
f01100bc:	83 c4 10             	add    $0x10,%esp

}
f01100bf:	90                   	nop
f01100c0:	c9                   	leave  
f01100c1:	c3                   	ret    

f01100c2 <test_free_block_BF>:

void test_free_block_BF()
{
f01100c2:	55                   	push   %ebp
f01100c3:	89 e5                	mov    %esp,%ebp
f01100c5:	83 ec 58             	sub    $0x58,%esp
#if USE_KHEAP
	panic("test_free_block: the kernel heap should be disabled. make sure USE_KHEAP = 0");
	return;
#endif

	cprintf("===========================================================\n") ;
f01100c8:	83 ec 0c             	sub    $0xc,%esp
f01100cb:	68 f4 4a 13 f0       	push   $0xf0134af4
f01100d0:	e8 5c 0d ff ff       	call   f0100e31 <cprintf>
f01100d5:	83 c4 10             	add    $0x10,%esp
	cprintf("NOTE: THIS TEST IS DEPEND ON BOTH ALLOCATE & FREE FUNCTIONS\n") ;
f01100d8:	83 ec 0c             	sub    $0xc,%esp
f01100db:	68 34 4b 13 f0       	push   $0xf0134b34
f01100e0:	e8 4c 0d ff ff       	call   f0100e31 <cprintf>
f01100e5:	83 c4 10             	add    $0x10,%esp
	cprintf("===========================================================\n") ;
f01100e8:	83 ec 0c             	sub    $0xc,%esp
f01100eb:	68 f4 4a 13 f0       	push   $0xf0134af4
f01100f0:	e8 3c 0d ff ff       	call   f0100e31 <cprintf>
f01100f5:	83 c4 10             	add    $0x10,%esp

	int initAllocatedSpace = 3*Mega;
f01100f8:	c7 45 d4 00 00 30 00 	movl   $0x300000,-0x2c(%ebp)
	initialize_dynamic_allocator(KERNEL_HEAP_START, initAllocatedSpace);
f01100ff:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0110102:	83 ec 08             	sub    $0x8,%esp
f0110105:	50                   	push   %eax
f0110106:	68 00 00 00 f6       	push   $0xf6000000
f011010b:	e8 ae f8 01 00       	call   f012f9be <initialize_dynamic_allocator>
f0110110:	83 c4 10             	add    $0x10,%esp

	void * va ;
	//====================================================================//
	/* Try to allocate set of blocks with different sizes*/
	cprintf("	1: Try to allocate set of blocks with different sizes to fill-up the allocated space\n\n") ;
f0110113:	83 ec 0c             	sub    $0xc,%esp
f0110116:	68 74 4b 13 f0       	push   $0xf0134b74
f011011b:	e8 11 0d ff ff       	call   f0100e31 <cprintf>
f0110120:	83 c4 10             	add    $0x10,%esp

	int totalSizes = 0;
f0110123:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for (int i = 0; i < numOfAllocs; ++i)
f011012a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0110131:	eb 2a                	jmp    f011015d <test_free_block_BF+0x9b>
	{
		totalSizes += allocSizes[i] * allocCntPerSize ;
f0110133:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0110136:	8b 14 85 20 eb 18 f0 	mov    -0xfe714e0(,%eax,4),%edx
f011013d:	89 d0                	mov    %edx,%eax
f011013f:	c1 e0 02             	shl    $0x2,%eax
f0110142:	01 d0                	add    %edx,%eax
f0110144:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011014b:	01 d0                	add    %edx,%eax
f011014d:	c1 e0 03             	shl    $0x3,%eax
f0110150:	89 c2                	mov    %eax,%edx
f0110152:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0110155:	01 d0                	add    %edx,%eax
f0110157:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//====================================================================//
	/* Try to allocate set of blocks with different sizes*/
	cprintf("	1: Try to allocate set of blocks with different sizes to fill-up the allocated space\n\n") ;

	int totalSizes = 0;
	for (int i = 0; i < numOfAllocs; ++i)
f011015a:	ff 45 f0             	incl   -0x10(%ebp)
f011015d:	83 7d f0 06          	cmpl   $0x6,-0x10(%ebp)
f0110161:	7e d0                	jle    f0110133 <test_free_block_BF+0x71>
	{
		totalSizes += allocSizes[i] * allocCntPerSize ;
	}
	int remainSize = initAllocatedSpace - totalSizes ;
f0110163:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0110166:	2b 45 f4             	sub    -0xc(%ebp),%eax
f0110169:	89 45 d0             	mov    %eax,-0x30(%ebp)
	if (remainSize <= 0)
f011016c:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
f0110170:	7f 17                	jg     f0110189 <test_free_block_BF+0xc7>
		panic("test_free_block is not configured correctly. Consider updating the initial allocated space OR the required allocations");
f0110172:	83 ec 04             	sub    $0x4,%esp
f0110175:	68 cc 4b 13 f0       	push   $0xf0134bcc
f011017a:	68 90 03 00 00       	push   $0x390
f011017f:	68 50 41 13 f0       	push   $0xf0134150
f0110184:	e8 27 00 ff ff       	call   f01001b0 <_panic>

	int idx = 0;
f0110189:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	void* curVA = (void*) KERNEL_HEAP_START ;
f0110190:	c7 45 e8 00 00 00 f6 	movl   $0xf6000000,-0x18(%ebp)
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
f0110197:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f011019e:	e9 f8 00 00 00       	jmp    f011029b <test_free_block_BF+0x1d9>
	{
		for (int j = 0; j < allocCntPerSize; ++j)
f01101a3:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f01101aa:	e9 dc 00 00 00       	jmp    f011028b <test_free_block_BF+0x1c9>
		{
			actualSize = allocSizes[i] - sizeOfMetaData();
f01101af:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01101b2:	8b 04 85 20 eb 18 f0 	mov    -0xfe714e0(,%eax,4),%eax
f01101b9:	83 e8 10             	sub    $0x10,%eax
f01101bc:	89 45 cc             	mov    %eax,-0x34(%ebp)
			va = startVAs[idx] = alloc_block(actualSize, DA_BF);
f01101bf:	83 ec 08             	sub    $0x8,%esp
f01101c2:	6a 03                	push   $0x3
f01101c4:	ff 75 cc             	pushl  -0x34(%ebp)
f01101c7:	e8 d9 f6 01 00       	call   f012f8a5 <alloc_block>
f01101cc:	83 c4 10             	add    $0x10,%esp
f01101cf:	89 c2                	mov    %eax,%edx
f01101d1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01101d4:	89 14 85 80 a3 2d f0 	mov    %edx,-0xfd25c80(,%eax,4)
f01101db:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01101de:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f01101e5:	89 45 c8             	mov    %eax,-0x38(%ebp)
			midVAs[idx] = va + actualSize/2 ;
f01101e8:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01101eb:	d1 e8                	shr    %eax
f01101ed:	89 c2                	mov    %eax,%edx
f01101ef:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01101f2:	01 c2                	add    %eax,%edx
f01101f4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01101f7:	89 14 85 80 cf 2d f0 	mov    %edx,-0xfd23080(,%eax,4)
			endVAs[idx] = va + actualSize - sizeof(short);
f01101fe:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0110201:	8d 50 fe             	lea    -0x2(%eax),%edx
f0110204:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0110207:	01 c2                	add    %eax,%edx
f0110209:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011020c:	89 14 85 80 b9 2d f0 	mov    %edx,-0xfd24680(,%eax,4)
			//Check returned va
			if(va == NULL || (va != (curVA + sizeOfMetaData())))
f0110213:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f0110217:	74 0b                	je     f0110224 <test_free_block_BF+0x162>
f0110219:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011021c:	83 c0 10             	add    $0x10,%eax
f011021f:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0110222:	74 24                	je     f0110248 <test_free_block_BF+0x186>
				panic("test_free_block #1.%d: WRONG ALLOC - alloc_block_BF return wrong address. Expected %x, Actual %x", idx, curVA + sizeOfMetaData() ,va);
f0110224:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0110227:	83 c0 10             	add    $0x10,%eax
f011022a:	83 ec 08             	sub    $0x8,%esp
f011022d:	ff 75 c8             	pushl  -0x38(%ebp)
f0110230:	50                   	push   %eax
f0110231:	ff 75 ec             	pushl  -0x14(%ebp)
f0110234:	68 c0 59 13 f0       	push   $0xf01359c0
f0110239:	68 9f 03 00 00       	push   $0x39f
f011023e:	68 50 41 13 f0       	push   $0xf0134150
f0110243:	e8 68 ff fe ff       	call   f01001b0 <_panic>
			curVA += allocSizes[i] ;
f0110248:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011024b:	8b 04 85 20 eb 18 f0 	mov    -0xfe714e0(,%eax,4),%eax
f0110252:	01 45 e8             	add    %eax,-0x18(%ebp)
			*(startVAs[idx]) = idx ;
f0110255:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110258:	8b 14 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%edx
f011025f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110262:	66 89 02             	mov    %ax,(%edx)
			*(midVAs[idx]) = idx ;
f0110265:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110268:	8b 14 85 80 cf 2d f0 	mov    -0xfd23080(,%eax,4),%edx
f011026f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110272:	66 89 02             	mov    %ax,(%edx)
			*(endVAs[idx]) = idx ;
f0110275:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110278:	8b 14 85 80 b9 2d f0 	mov    -0xfd24680(,%eax,4),%edx
f011027f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110282:	66 89 02             	mov    %ax,(%edx)
			idx++;
f0110285:	ff 45 ec             	incl   -0x14(%ebp)
	int idx = 0;
	void* curVA = (void*) KERNEL_HEAP_START ;
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
	{
		for (int j = 0; j < allocCntPerSize; ++j)
f0110288:	ff 45 e0             	incl   -0x20(%ebp)
f011028b:	81 7d e0 c7 00 00 00 	cmpl   $0xc7,-0x20(%ebp)
f0110292:	0f 8e 17 ff ff ff    	jle    f01101af <test_free_block_BF+0xed>
		panic("test_free_block is not configured correctly. Consider updating the initial allocated space OR the required allocations");

	int idx = 0;
	void* curVA = (void*) KERNEL_HEAP_START ;
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
f0110298:	ff 45 e4             	incl   -0x1c(%ebp)
f011029b:	83 7d e4 06          	cmpl   $0x6,-0x1c(%ebp)
f011029f:	0f 8e fe fe ff ff    	jle    f01101a3 <test_free_block_BF+0xe1>
		}
	}

	//====================================================================//
	/* Try to allocate a block with a size equal to the size of the first existing free block*/
	actualSize = remainSize - sizeOfMetaData();
f01102a5:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01102a8:	83 e8 10             	sub    $0x10,%eax
f01102ab:	89 45 cc             	mov    %eax,-0x34(%ebp)
	va = startVAs[idx] = alloc_block(actualSize, DA_BF);
f01102ae:	83 ec 08             	sub    $0x8,%esp
f01102b1:	6a 03                	push   $0x3
f01102b3:	ff 75 cc             	pushl  -0x34(%ebp)
f01102b6:	e8 ea f5 01 00       	call   f012f8a5 <alloc_block>
f01102bb:	83 c4 10             	add    $0x10,%esp
f01102be:	89 c2                	mov    %eax,%edx
f01102c0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01102c3:	89 14 85 80 a3 2d f0 	mov    %edx,-0xfd25c80(,%eax,4)
f01102ca:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01102cd:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f01102d4:	89 45 c8             	mov    %eax,-0x38(%ebp)
	midVAs[idx] = va + actualSize/2 ;
f01102d7:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01102da:	d1 e8                	shr    %eax
f01102dc:	89 c2                	mov    %eax,%edx
f01102de:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01102e1:	01 c2                	add    %eax,%edx
f01102e3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01102e6:	89 14 85 80 cf 2d f0 	mov    %edx,-0xfd23080(,%eax,4)
	endVAs[idx] = va + actualSize - sizeof(short);
f01102ed:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01102f0:	8d 50 fe             	lea    -0x2(%eax),%edx
f01102f3:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01102f6:	01 c2                	add    %eax,%edx
f01102f8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01102fb:	89 14 85 80 b9 2d f0 	mov    %edx,-0xfd24680(,%eax,4)
	//Check returned va
	if(va == NULL || (va != (curVA + sizeOfMetaData())))
f0110302:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f0110306:	74 0b                	je     f0110313 <test_free_block_BF+0x251>
f0110308:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011030b:	83 c0 10             	add    $0x10,%eax
f011030e:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0110311:	74 17                	je     f011032a <test_free_block_BF+0x268>
		panic("test_free_block #2: WRONG ALLOC - alloc_block_BF return wrong address.");
f0110313:	83 ec 04             	sub    $0x4,%esp
f0110316:	68 24 5a 13 f0       	push   $0xf0135a24
f011031b:	68 b0 03 00 00       	push   $0x3b0
f0110320:	68 50 41 13 f0       	push   $0xf0134150
f0110325:	e8 86 fe fe ff       	call   f01001b0 <_panic>
	*(startVAs[idx]) = idx ;
f011032a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011032d:	8b 14 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%edx
f0110334:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110337:	66 89 02             	mov    %ax,(%edx)
	*(midVAs[idx]) = idx ;
f011033a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011033d:	8b 14 85 80 cf 2d f0 	mov    -0xfd23080(,%eax,4),%edx
f0110344:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110347:	66 89 02             	mov    %ax,(%edx)
	*(endVAs[idx]) = idx ;
f011034a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011034d:	8b 14 85 80 b9 2d f0 	mov    -0xfd24680(,%eax,4),%edx
f0110354:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110357:	66 89 02             	mov    %ax,(%edx)

	//====================================================================//
	/* Check stored data inside each allocated block*/
	cprintf("	2: Check stored data inside each allocated block\n\n") ;
f011035a:	83 ec 0c             	sub    $0xc,%esp
f011035d:	68 f0 4c 13 f0       	push   $0xf0134cf0
f0110362:	e8 ca 0a ff ff       	call   f0100e31 <cprintf>
f0110367:	83 c4 10             	add    $0x10,%esp

	for (int i = 0; i < idx; ++i)
f011036a:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f0110371:	eb 59                	jmp    f01103cc <test_free_block_BF+0x30a>
	{
		if (*(startVAs[i]) != i || *(midVAs[i]) != i ||	*(endVAs[i]) != i)
f0110373:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0110376:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f011037d:	66 8b 00             	mov    (%eax),%ax
f0110380:	98                   	cwtl   
f0110381:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f0110384:	75 26                	jne    f01103ac <test_free_block_BF+0x2ea>
f0110386:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0110389:	8b 04 85 80 cf 2d f0 	mov    -0xfd23080(,%eax,4),%eax
f0110390:	66 8b 00             	mov    (%eax),%ax
f0110393:	98                   	cwtl   
f0110394:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f0110397:	75 13                	jne    f01103ac <test_free_block_BF+0x2ea>
f0110399:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011039c:	8b 04 85 80 b9 2d f0 	mov    -0xfd24680(,%eax,4),%eax
f01103a3:	66 8b 00             	mov    (%eax),%ax
f01103a6:	98                   	cwtl   
f01103a7:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f01103aa:	74 1d                	je     f01103c9 <test_free_block_BF+0x307>
			panic("test_free_block #3.%d: WRONG! content of the block is not correct. Expected %d",i, i);
f01103ac:	83 ec 0c             	sub    $0xc,%esp
f01103af:	ff 75 dc             	pushl  -0x24(%ebp)
f01103b2:	ff 75 dc             	pushl  -0x24(%ebp)
f01103b5:	68 6c 5a 13 f0       	push   $0xf0135a6c
f01103ba:	68 bc 03 00 00       	push   $0x3bc
f01103bf:	68 50 41 13 f0       	push   $0xf0134150
f01103c4:	e8 e7 fd fe ff       	call   f01001b0 <_panic>

	//====================================================================//
	/* Check stored data inside each allocated block*/
	cprintf("	2: Check stored data inside each allocated block\n\n") ;

	for (int i = 0; i < idx; ++i)
f01103c9:	ff 45 dc             	incl   -0x24(%ebp)
f01103cc:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01103cf:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01103d2:	7c 9f                	jl     f0110373 <test_free_block_BF+0x2b1>
			panic("test_free_block #3.%d: WRONG! content of the block is not correct. Expected %d",i, i);
	}

	//====================================================================//
	/* free_block Scenario 1: Free some allocated blocks [no coalesce]*/
	cprintf("	3: Free some allocated block [no coalesce]\n\n") ;
f01103d4:	83 ec 0c             	sub    $0xc,%esp
f01103d7:	68 74 4d 13 f0       	push   $0xf0134d74
f01103dc:	e8 50 0a ff ff       	call   f0100e31 <cprintf>
f01103e1:	83 c4 10             	add    $0x10,%esp

	//Free set of blocks with different sizes (first block of each size)
	for (int i = 0; i < numOfAllocs; ++i)
f01103e4:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f01103eb:	e9 d8 00 00 00       	jmp    f01104c8 <test_free_block_BF+0x406>
	{
		free_block(startVAs[i*allocCntPerSize]);
f01103f0:	8b 55 d8             	mov    -0x28(%ebp),%edx
f01103f3:	89 d0                	mov    %edx,%eax
f01103f5:	c1 e0 02             	shl    $0x2,%eax
f01103f8:	01 d0                	add    %edx,%eax
f01103fa:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0110401:	01 d0                	add    %edx,%eax
f0110403:	c1 e0 03             	shl    $0x3,%eax
f0110406:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f011040d:	83 ec 0c             	sub    $0xc,%esp
f0110410:	50                   	push   %eax
f0110411:	e8 de f9 01 00       	call   f012fdf4 <free_block>
f0110416:	83 c4 10             	add    $0x10,%esp
		uint32 block_size = get_block_size(startVAs[i*allocCntPerSize]) ;
f0110419:	8b 55 d8             	mov    -0x28(%ebp),%edx
f011041c:	89 d0                	mov    %edx,%eax
f011041e:	c1 e0 02             	shl    $0x2,%eax
f0110421:	01 d0                	add    %edx,%eax
f0110423:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011042a:	01 d0                	add    %edx,%eax
f011042c:	c1 e0 03             	shl    $0x3,%eax
f011042f:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f0110436:	83 ec 0c             	sub    $0xc,%esp
f0110439:	50                   	push   %eax
f011043a:	e8 39 f4 01 00       	call   f012f878 <get_block_size>
f011043f:	83 c4 10             	add    $0x10,%esp
f0110442:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		if (block_size != allocSizes[i])
f0110445:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0110448:	8b 04 85 20 eb 18 f0 	mov    -0xfe714e0(,%eax,4),%eax
f011044f:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0110452:	74 28                	je     f011047c <test_free_block_BF+0x3ba>
			panic("test_free_block #4.%d: WRONG FREE! block size after free is not correct. Expected %d, Actual %d",i, allocSizes[i],block_size);
f0110454:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0110457:	8b 04 85 20 eb 18 f0 	mov    -0xfe714e0(,%eax,4),%eax
f011045e:	83 ec 08             	sub    $0x8,%esp
f0110461:	ff 75 c4             	pushl  -0x3c(%ebp)
f0110464:	50                   	push   %eax
f0110465:	ff 75 d8             	pushl  -0x28(%ebp)
f0110468:	68 bc 5a 13 f0       	push   $0xf0135abc
f011046d:	68 c9 03 00 00       	push   $0x3c9
f0110472:	68 50 41 13 f0       	push   $0xf0134150
f0110477:	e8 34 fd fe ff       	call   f01001b0 <_panic>
		int8 block_status = is_free_block(startVAs[i*allocCntPerSize]) ;
f011047c:	8b 55 d8             	mov    -0x28(%ebp),%edx
f011047f:	89 d0                	mov    %edx,%eax
f0110481:	c1 e0 02             	shl    $0x2,%eax
f0110484:	01 d0                	add    %edx,%eax
f0110486:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011048d:	01 d0                	add    %edx,%eax
f011048f:	c1 e0 03             	shl    $0x3,%eax
f0110492:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f0110499:	83 ec 0c             	sub    $0xc,%esp
f011049c:	50                   	push   %eax
f011049d:	e8 ec f3 01 00       	call   f012f88e <is_free_block>
f01104a2:	83 c4 10             	add    $0x10,%esp
f01104a5:	88 45 c3             	mov    %al,-0x3d(%ebp)
		if (block_status != 1)
f01104a8:	80 7d c3 01          	cmpb   $0x1,-0x3d(%ebp)
f01104ac:	74 17                	je     f01104c5 <test_free_block_BF+0x403>
			panic("test_free_block #5.%d: WRONG FREE! block status (is_free) not equal 1 after freeing.", i);
f01104ae:	ff 75 d8             	pushl  -0x28(%ebp)
f01104b1:	68 1c 5b 13 f0       	push   $0xf0135b1c
f01104b6:	68 cc 03 00 00       	push   $0x3cc
f01104bb:	68 50 41 13 f0       	push   $0xf0134150
f01104c0:	e8 eb fc fe ff       	call   f01001b0 <_panic>
	//====================================================================//
	/* free_block Scenario 1: Free some allocated blocks [no coalesce]*/
	cprintf("	3: Free some allocated block [no coalesce]\n\n") ;

	//Free set of blocks with different sizes (first block of each size)
	for (int i = 0; i < numOfAllocs; ++i)
f01104c5:	ff 45 d8             	incl   -0x28(%ebp)
f01104c8:	83 7d d8 06          	cmpl   $0x6,-0x28(%ebp)
f01104cc:	0f 8e 1e ff ff ff    	jle    f01103f0 <test_free_block_BF+0x32e>
		if (block_status != 1)
			panic("test_free_block #5.%d: WRONG FREE! block status (is_free) not equal 1 after freeing.", i);
	}

	//Free last block
	free_block(startVAs[numOfAllocs*allocCntPerSize]);
f01104d2:	a1 60 b9 2d f0       	mov    0xf02db960,%eax
f01104d7:	83 ec 0c             	sub    $0xc,%esp
f01104da:	50                   	push   %eax
f01104db:	e8 14 f9 01 00       	call   f012fdf4 <free_block>
f01104e0:	83 c4 10             	add    $0x10,%esp
	uint32 block_size = get_block_size(startVAs[numOfAllocs*allocCntPerSize]) ;
f01104e3:	a1 60 b9 2d f0       	mov    0xf02db960,%eax
f01104e8:	83 ec 0c             	sub    $0xc,%esp
f01104eb:	50                   	push   %eax
f01104ec:	e8 87 f3 01 00       	call   f012f878 <get_block_size>
f01104f1:	83 c4 10             	add    $0x10,%esp
f01104f4:	89 45 bc             	mov    %eax,-0x44(%ebp)
	if (block_size != remainSize)
f01104f7:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01104fa:	39 45 bc             	cmp    %eax,-0x44(%ebp)
f01104fd:	74 1d                	je     f011051c <test_free_block_BF+0x45a>
		panic("test_free_block #6.1: WRONG FREE! block size after free is not correct. Expected %d, Actual %d",remainSize,block_size);
f01104ff:	83 ec 0c             	sub    $0xc,%esp
f0110502:	ff 75 bc             	pushl  -0x44(%ebp)
f0110505:	ff 75 d0             	pushl  -0x30(%ebp)
f0110508:	68 74 5b 13 f0       	push   $0xf0135b74
f011050d:	68 d3 03 00 00       	push   $0x3d3
f0110512:	68 50 41 13 f0       	push   $0xf0134150
f0110517:	e8 94 fc fe ff       	call   f01001b0 <_panic>
	int8 block_status = is_free_block(startVAs[numOfAllocs*allocCntPerSize]) ;
f011051c:	a1 60 b9 2d f0       	mov    0xf02db960,%eax
f0110521:	83 ec 0c             	sub    $0xc,%esp
f0110524:	50                   	push   %eax
f0110525:	e8 64 f3 01 00       	call   f012f88e <is_free_block>
f011052a:	83 c4 10             	add    $0x10,%esp
f011052d:	88 45 bb             	mov    %al,-0x45(%ebp)
	if (block_status != 1)
f0110530:	80 7d bb 01          	cmpb   $0x1,-0x45(%ebp)
f0110534:	74 17                	je     f011054d <test_free_block_BF+0x48b>
		panic("test_free_block #6.2: WRONG FREE! block status (is_free) not equal 1 after freeing.");
f0110536:	83 ec 04             	sub    $0x4,%esp
f0110539:	68 d4 5b 13 f0       	push   $0xf0135bd4
f011053e:	68 d6 03 00 00       	push   $0x3d6
f0110543:	68 50 41 13 f0       	push   $0xf0134150
f0110548:	e8 63 fc fe ff       	call   f01001b0 <_panic>

	//Reallocate last block
	actualSize = remainSize - sizeOfMetaData();
f011054d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0110550:	83 e8 10             	sub    $0x10,%eax
f0110553:	89 45 cc             	mov    %eax,-0x34(%ebp)
	va = alloc_block(actualSize, DA_BF);
f0110556:	83 ec 08             	sub    $0x8,%esp
f0110559:	6a 03                	push   $0x3
f011055b:	ff 75 cc             	pushl  -0x34(%ebp)
f011055e:	e8 42 f3 01 00       	call   f012f8a5 <alloc_block>
f0110563:	83 c4 10             	add    $0x10,%esp
f0110566:	89 45 c8             	mov    %eax,-0x38(%ebp)
	//Check returned va
	if(va == NULL || (va != (curVA + sizeOfMetaData())))
f0110569:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f011056d:	74 0b                	je     f011057a <test_free_block_BF+0x4b8>
f011056f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0110572:	83 c0 10             	add    $0x10,%eax
f0110575:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0110578:	74 17                	je     f0110591 <test_free_block_BF+0x4cf>
		panic("test_free_block #6.3: WRONG ALLOC - alloc_block_BF return wrong address.");
f011057a:	83 ec 04             	sub    $0x4,%esp
f011057d:	68 28 5c 13 f0       	push   $0xf0135c28
f0110582:	68 dd 03 00 00       	push   $0x3dd
f0110587:	68 50 41 13 f0       	push   $0xf0134150
f011058c:	e8 1f fc fe ff       	call   f01001b0 <_panic>

	//Free block before last
	free_block(startVAs[numOfAllocs*allocCntPerSize - 1]);
f0110591:	a1 5c b9 2d f0       	mov    0xf02db95c,%eax
f0110596:	83 ec 0c             	sub    $0xc,%esp
f0110599:	50                   	push   %eax
f011059a:	e8 55 f8 01 00       	call   f012fdf4 <free_block>
f011059f:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[numOfAllocs*allocCntPerSize - 1]) ;
f01105a2:	a1 5c b9 2d f0       	mov    0xf02db95c,%eax
f01105a7:	83 ec 0c             	sub    $0xc,%esp
f01105aa:	50                   	push   %eax
f01105ab:	e8 c8 f2 01 00       	call   f012f878 <get_block_size>
f01105b0:	83 c4 10             	add    $0x10,%esp
f01105b3:	89 45 bc             	mov    %eax,-0x44(%ebp)
	if (block_size != allocSizes[numOfAllocs-1])
f01105b6:	a1 38 eb 18 f0       	mov    0xf018eb38,%eax
f01105bb:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f01105be:	74 20                	je     f01105e0 <test_free_block_BF+0x51e>
		panic("test_free_block #6.4: WRONG FREE! block size after free is not correct. Expected %d, Actual %d",allocSizes[numOfAllocs-1],block_size);
f01105c0:	a1 38 eb 18 f0       	mov    0xf018eb38,%eax
f01105c5:	83 ec 0c             	sub    $0xc,%esp
f01105c8:	ff 75 bc             	pushl  -0x44(%ebp)
f01105cb:	50                   	push   %eax
f01105cc:	68 74 5c 13 f0       	push   $0xf0135c74
f01105d1:	68 e3 03 00 00       	push   $0x3e3
f01105d6:	68 50 41 13 f0       	push   $0xf0134150
f01105db:	e8 d0 fb fe ff       	call   f01001b0 <_panic>
	block_status = is_free_block(startVAs[numOfAllocs*allocCntPerSize-1]) ;
f01105e0:	a1 5c b9 2d f0       	mov    0xf02db95c,%eax
f01105e5:	83 ec 0c             	sub    $0xc,%esp
f01105e8:	50                   	push   %eax
f01105e9:	e8 a0 f2 01 00       	call   f012f88e <is_free_block>
f01105ee:	83 c4 10             	add    $0x10,%esp
f01105f1:	88 45 bb             	mov    %al,-0x45(%ebp)
	if (block_status != 1)
f01105f4:	80 7d bb 01          	cmpb   $0x1,-0x45(%ebp)
f01105f8:	74 17                	je     f0110611 <test_free_block_BF+0x54f>
		panic("test_free_block #6.5: WRONG FREE! block status (is_free) not equal 1 after freeing.");
f01105fa:	83 ec 04             	sub    $0x4,%esp
f01105fd:	68 d4 5c 13 f0       	push   $0xf0135cd4
f0110602:	68 e6 03 00 00       	push   $0x3e6
f0110607:	68 50 41 13 f0       	push   $0xf0134150
f011060c:	e8 9f fb fe ff       	call   f01001b0 <_panic>

	//Reallocate first block
	actualSize = allocSizes[0] - sizeOfMetaData();
f0110611:	a1 20 eb 18 f0       	mov    0xf018eb20,%eax
f0110616:	83 e8 10             	sub    $0x10,%eax
f0110619:	89 45 cc             	mov    %eax,-0x34(%ebp)
	va = alloc_block(actualSize, DA_BF);
f011061c:	83 ec 08             	sub    $0x8,%esp
f011061f:	6a 03                	push   $0x3
f0110621:	ff 75 cc             	pushl  -0x34(%ebp)
f0110624:	e8 7c f2 01 00       	call   f012f8a5 <alloc_block>
f0110629:	83 c4 10             	add    $0x10,%esp
f011062c:	89 45 c8             	mov    %eax,-0x38(%ebp)
	//Check returned va
	if(va == NULL || (va != (void*)(KERNEL_HEAP_START + sizeOfMetaData())))
f011062f:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f0110633:	74 09                	je     f011063e <test_free_block_BF+0x57c>
f0110635:	81 7d c8 10 00 00 f6 	cmpl   $0xf6000010,-0x38(%ebp)
f011063c:	74 17                	je     f0110655 <test_free_block_BF+0x593>
		panic("test_free_block #7.1: WRONG ALLOC - alloc_block_BF return wrong address.");
f011063e:	83 ec 04             	sub    $0x4,%esp
f0110641:	68 28 5d 13 f0       	push   $0xf0135d28
f0110646:	68 ed 03 00 00       	push   $0x3ed
f011064b:	68 50 41 13 f0       	push   $0xf0134150
f0110650:	e8 5b fb fe ff       	call   f01001b0 <_panic>

	//Free 2nd block
	free_block(startVAs[1]);
f0110655:	a1 84 a3 2d f0       	mov    0xf02da384,%eax
f011065a:	83 ec 0c             	sub    $0xc,%esp
f011065d:	50                   	push   %eax
f011065e:	e8 91 f7 01 00       	call   f012fdf4 <free_block>
f0110663:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[1]) ;
f0110666:	a1 84 a3 2d f0       	mov    0xf02da384,%eax
f011066b:	83 ec 0c             	sub    $0xc,%esp
f011066e:	50                   	push   %eax
f011066f:	e8 04 f2 01 00       	call   f012f878 <get_block_size>
f0110674:	83 c4 10             	add    $0x10,%esp
f0110677:	89 45 bc             	mov    %eax,-0x44(%ebp)
	if (block_size != allocSizes[0])
f011067a:	a1 20 eb 18 f0       	mov    0xf018eb20,%eax
f011067f:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0110682:	74 20                	je     f01106a4 <test_free_block_BF+0x5e2>
		panic("test_free_block #7.2: WRONG FREE! block size after free is not correct. Expected %d, Actual %d",allocSizes[0],block_size);
f0110684:	a1 20 eb 18 f0       	mov    0xf018eb20,%eax
f0110689:	83 ec 0c             	sub    $0xc,%esp
f011068c:	ff 75 bc             	pushl  -0x44(%ebp)
f011068f:	50                   	push   %eax
f0110690:	68 74 5d 13 f0       	push   $0xf0135d74
f0110695:	68 f3 03 00 00       	push   $0x3f3
f011069a:	68 50 41 13 f0       	push   $0xf0134150
f011069f:	e8 0c fb fe ff       	call   f01001b0 <_panic>
	block_status = is_free_block(startVAs[1]) ;
f01106a4:	a1 84 a3 2d f0       	mov    0xf02da384,%eax
f01106a9:	83 ec 0c             	sub    $0xc,%esp
f01106ac:	50                   	push   %eax
f01106ad:	e8 dc f1 01 00       	call   f012f88e <is_free_block>
f01106b2:	83 c4 10             	add    $0x10,%esp
f01106b5:	88 45 bb             	mov    %al,-0x45(%ebp)
	if (block_status != 1)
f01106b8:	80 7d bb 01          	cmpb   $0x1,-0x45(%ebp)
f01106bc:	74 17                	je     f01106d5 <test_free_block_BF+0x613>
		panic("test_free_block #7.3: WRONG FREE! block status (is_free) not equal 1 after freeing.");
f01106be:	83 ec 04             	sub    $0x4,%esp
f01106c1:	68 d4 5d 13 f0       	push   $0xf0135dd4
f01106c6:	68 f6 03 00 00       	push   $0x3f6
f01106cb:	68 50 41 13 f0       	push   $0xf0134150
f01106d0:	e8 db fa fe ff       	call   f01001b0 <_panic>

	//====================================================================//
	/*free_block Scenario 2: Merge with previous ONLY (AT the tail)*/
	cprintf("	4: Free some allocated blocks [Merge with previous ONLY]\n\n") ;
f01106d5:	83 ec 0c             	sub    $0xc,%esp
f01106d8:	68 20 51 13 f0       	push   $0xf0135120
f01106dd:	e8 4f 07 ff ff       	call   f0100e31 <cprintf>
f01106e2:	83 c4 10             	add    $0x10,%esp
	cprintf("		4.1: at the tail\n\n") ;
f01106e5:	83 ec 0c             	sub    $0xc,%esp
f01106e8:	68 5c 51 13 f0       	push   $0xf013515c
f01106ed:	e8 3f 07 ff ff       	call   f0100e31 <cprintf>
f01106f2:	83 c4 10             	add    $0x10,%esp
	//Free last block (coalesce with previous)
	uint32 blockIndex = numOfAllocs*allocCntPerSize;
f01106f5:	c7 45 b4 78 05 00 00 	movl   $0x578,-0x4c(%ebp)
	free_block(startVAs[blockIndex]);
f01106fc:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01106ff:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f0110706:	83 ec 0c             	sub    $0xc,%esp
f0110709:	50                   	push   %eax
f011070a:	e8 e5 f6 01 00       	call   f012fdf4 <free_block>
f011070f:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[blockIndex-1]) ;
f0110712:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110715:	48                   	dec    %eax
f0110716:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f011071d:	83 ec 0c             	sub    $0xc,%esp
f0110720:	50                   	push   %eax
f0110721:	e8 52 f1 01 00       	call   f012f878 <get_block_size>
f0110726:	83 c4 10             	add    $0x10,%esp
f0110729:	89 45 bc             	mov    %eax,-0x44(%ebp)
	if (block_size != remainSize + allocSizes[numOfAllocs-1])
f011072c:	8b 15 38 eb 18 f0    	mov    0xf018eb38,%edx
f0110732:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0110735:	01 d0                	add    %edx,%eax
f0110737:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f011073a:	74 26                	je     f0110762 <test_free_block_BF+0x6a0>
		panic("test_free_block #8.1: WRONG FREE! block size after free is not correct. Expected %d, Actual %d",remainSize + allocSizes[numOfAllocs-1],block_size);
f011073c:	8b 15 38 eb 18 f0    	mov    0xf018eb38,%edx
f0110742:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0110745:	01 d0                	add    %edx,%eax
f0110747:	83 ec 0c             	sub    $0xc,%esp
f011074a:	ff 75 bc             	pushl  -0x44(%ebp)
f011074d:	50                   	push   %eax
f011074e:	68 28 5e 13 f0       	push   $0xf0135e28
f0110753:	68 01 04 00 00       	push   $0x401
f0110758:	68 50 41 13 f0       	push   $0xf0134150
f011075d:	e8 4e fa fe ff       	call   f01001b0 <_panic>
	block_status = is_free_block(startVAs[blockIndex-1]) ;
f0110762:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110765:	48                   	dec    %eax
f0110766:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f011076d:	83 ec 0c             	sub    $0xc,%esp
f0110770:	50                   	push   %eax
f0110771:	e8 18 f1 01 00       	call   f012f88e <is_free_block>
f0110776:	83 c4 10             	add    $0x10,%esp
f0110779:	88 45 bb             	mov    %al,-0x45(%ebp)
	if (block_status != 1)
f011077c:	80 7d bb 01          	cmpb   $0x1,-0x45(%ebp)
f0110780:	74 17                	je     f0110799 <test_free_block_BF+0x6d7>
		panic("test_free_block #8.2: WRONG FREE! block status (is_free) not equal 1 after freeing.");
f0110782:	83 ec 04             	sub    $0x4,%esp
f0110785:	68 88 5e 13 f0       	push   $0xf0135e88
f011078a:	68 04 04 00 00       	push   $0x404
f011078f:	68 50 41 13 f0       	push   $0xf0134150
f0110794:	e8 17 fa fe ff       	call   f01001b0 <_panic>

	if (get_block_size(startVAs[blockIndex]) != 0 || is_free_block(startVAs[blockIndex]) != 0)
f0110799:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011079c:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f01107a3:	83 ec 0c             	sub    $0xc,%esp
f01107a6:	50                   	push   %eax
f01107a7:	e8 cc f0 01 00       	call   f012f878 <get_block_size>
f01107ac:	83 c4 10             	add    $0x10,%esp
f01107af:	85 c0                	test   %eax,%eax
f01107b1:	75 1a                	jne    f01107cd <test_free_block_BF+0x70b>
f01107b3:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01107b6:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f01107bd:	83 ec 0c             	sub    $0xc,%esp
f01107c0:	50                   	push   %eax
f01107c1:	e8 c8 f0 01 00       	call   f012f88e <is_free_block>
f01107c6:	83 c4 10             	add    $0x10,%esp
f01107c9:	84 c0                	test   %al,%al
f01107cb:	74 17                	je     f01107e4 <test_free_block_BF+0x722>
		panic("test_free_block #8.3: WRONG FREE! make sure to ZEROing the size & is_free values of the vanishing block.");
f01107cd:	83 ec 04             	sub    $0x4,%esp
f01107d0:	68 dc 5e 13 f0       	push   $0xf0135edc
f01107d5:	68 07 04 00 00       	push   $0x407
f01107da:	68 50 41 13 f0       	push   $0xf0134150
f01107df:	e8 cc f9 fe ff       	call   f01001b0 <_panic>

	//====================================================================//
	/*free_block Scenario 3: Merge with previous ONLY (between 2 blocks)*/
	cprintf("		4.2: between 2 blocks\n\n") ;
f01107e4:	83 ec 0c             	sub    $0xc,%esp
f01107e7:	68 96 52 13 f0       	push   $0xf0135296
f01107ec:	e8 40 06 ff ff       	call   f0100e31 <cprintf>
f01107f1:	83 c4 10             	add    $0x10,%esp
	blockIndex = 2*allocCntPerSize+1 ;
f01107f4:	c7 45 b4 91 01 00 00 	movl   $0x191,-0x4c(%ebp)
	free_block(startVAs[blockIndex]);
f01107fb:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01107fe:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f0110805:	83 ec 0c             	sub    $0xc,%esp
f0110808:	50                   	push   %eax
f0110809:	e8 e6 f5 01 00       	call   f012fdf4 <free_block>
f011080e:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[blockIndex-1]) ;
f0110811:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110814:	48                   	dec    %eax
f0110815:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f011081c:	83 ec 0c             	sub    $0xc,%esp
f011081f:	50                   	push   %eax
f0110820:	e8 53 f0 01 00       	call   f012f878 <get_block_size>
f0110825:	83 c4 10             	add    $0x10,%esp
f0110828:	89 45 bc             	mov    %eax,-0x44(%ebp)
	if (block_size != allocSizes[2]+allocSizes[2])
f011082b:	8b 15 28 eb 18 f0    	mov    0xf018eb28,%edx
f0110831:	a1 28 eb 18 f0       	mov    0xf018eb28,%eax
f0110836:	01 d0                	add    %edx,%eax
f0110838:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f011083b:	74 28                	je     f0110865 <test_free_block_BF+0x7a3>
		panic("test_free_block #9.1: WRONG FREE! block size after free is not correct. Expected %d, Actual %d",allocSizes[2] + allocSizes[2],block_size);
f011083d:	8b 15 28 eb 18 f0    	mov    0xf018eb28,%edx
f0110843:	a1 28 eb 18 f0       	mov    0xf018eb28,%eax
f0110848:	01 d0                	add    %edx,%eax
f011084a:	83 ec 0c             	sub    $0xc,%esp
f011084d:	ff 75 bc             	pushl  -0x44(%ebp)
f0110850:	50                   	push   %eax
f0110851:	68 48 5f 13 f0       	push   $0xf0135f48
f0110856:	68 10 04 00 00       	push   $0x410
f011085b:	68 50 41 13 f0       	push   $0xf0134150
f0110860:	e8 4b f9 fe ff       	call   f01001b0 <_panic>
	block_status = is_free_block(startVAs[blockIndex-1]) ;
f0110865:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110868:	48                   	dec    %eax
f0110869:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f0110870:	83 ec 0c             	sub    $0xc,%esp
f0110873:	50                   	push   %eax
f0110874:	e8 15 f0 01 00       	call   f012f88e <is_free_block>
f0110879:	83 c4 10             	add    $0x10,%esp
f011087c:	88 45 bb             	mov    %al,-0x45(%ebp)
	if (block_status != 1)
f011087f:	80 7d bb 01          	cmpb   $0x1,-0x45(%ebp)
f0110883:	74 17                	je     f011089c <test_free_block_BF+0x7da>
		panic("test_free_block #9.2: WRONG FREE! block status (is_free) not equal 1 after freeing.");
f0110885:	83 ec 04             	sub    $0x4,%esp
f0110888:	68 a8 5f 13 f0       	push   $0xf0135fa8
f011088d:	68 13 04 00 00       	push   $0x413
f0110892:	68 50 41 13 f0       	push   $0xf0134150
f0110897:	e8 14 f9 fe ff       	call   f01001b0 <_panic>

	if (get_block_size(startVAs[blockIndex]) != 0 || is_free_block(startVAs[blockIndex]) != 0)
f011089c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011089f:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f01108a6:	83 ec 0c             	sub    $0xc,%esp
f01108a9:	50                   	push   %eax
f01108aa:	e8 c9 ef 01 00       	call   f012f878 <get_block_size>
f01108af:	83 c4 10             	add    $0x10,%esp
f01108b2:	85 c0                	test   %eax,%eax
f01108b4:	75 1a                	jne    f01108d0 <test_free_block_BF+0x80e>
f01108b6:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01108b9:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f01108c0:	83 ec 0c             	sub    $0xc,%esp
f01108c3:	50                   	push   %eax
f01108c4:	e8 c5 ef 01 00       	call   f012f88e <is_free_block>
f01108c9:	83 c4 10             	add    $0x10,%esp
f01108cc:	84 c0                	test   %al,%al
f01108ce:	74 17                	je     f01108e7 <test_free_block_BF+0x825>
		panic("test_free_block #9.3: WRONG FREE! make sure to ZEROing the size & is_free values of the vanishing block.");
f01108d0:	83 ec 04             	sub    $0x4,%esp
f01108d3:	68 fc 5f 13 f0       	push   $0xf0135ffc
f01108d8:	68 16 04 00 00       	push   $0x416
f01108dd:	68 50 41 13 f0       	push   $0xf0134150
f01108e2:	e8 c9 f8 fe ff       	call   f01001b0 <_panic>

	//====================================================================//
	/*free_block Scenario 4: Merge with next ONLY (AT the head)*/
	cprintf("	5: Free some allocated blocks [Merge with next ONLY]\n\n") ;
f01108e7:	83 ec 0c             	sub    $0xc,%esp
f01108ea:	68 d4 53 13 f0       	push   $0xf01353d4
f01108ef:	e8 3d 05 ff ff       	call   f0100e31 <cprintf>
f01108f4:	83 c4 10             	add    $0x10,%esp
	cprintf("		5.1: at the head\n\n") ;
f01108f7:	83 ec 0c             	sub    $0xc,%esp
f01108fa:	68 0c 54 13 f0       	push   $0xf013540c
f01108ff:	e8 2d 05 ff ff       	call   f0100e31 <cprintf>
f0110904:	83 c4 10             	add    $0x10,%esp
	blockIndex = 0 ;
f0110907:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%ebp)
	free_block(startVAs[blockIndex]);
f011090e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110911:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f0110918:	83 ec 0c             	sub    $0xc,%esp
f011091b:	50                   	push   %eax
f011091c:	e8 d3 f4 01 00       	call   f012fdf4 <free_block>
f0110921:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[blockIndex]) ;
f0110924:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110927:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f011092e:	83 ec 0c             	sub    $0xc,%esp
f0110931:	50                   	push   %eax
f0110932:	e8 41 ef 01 00       	call   f012f878 <get_block_size>
f0110937:	83 c4 10             	add    $0x10,%esp
f011093a:	89 45 bc             	mov    %eax,-0x44(%ebp)
	if (block_size != allocSizes[0]+allocSizes[0])
f011093d:	8b 15 20 eb 18 f0    	mov    0xf018eb20,%edx
f0110943:	a1 20 eb 18 f0       	mov    0xf018eb20,%eax
f0110948:	01 d0                	add    %edx,%eax
f011094a:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f011094d:	74 28                	je     f0110977 <test_free_block_BF+0x8b5>
		panic("test_free_block #9.1: WRONG FREE! block size after free is not correct. Expected %d, Actual %d",allocSizes[0] + allocSizes[0],block_size);
f011094f:	8b 15 20 eb 18 f0    	mov    0xf018eb20,%edx
f0110955:	a1 20 eb 18 f0       	mov    0xf018eb20,%eax
f011095a:	01 d0                	add    %edx,%eax
f011095c:	83 ec 0c             	sub    $0xc,%esp
f011095f:	ff 75 bc             	pushl  -0x44(%ebp)
f0110962:	50                   	push   %eax
f0110963:	68 48 5f 13 f0       	push   $0xf0135f48
f0110968:	68 20 04 00 00       	push   $0x420
f011096d:	68 50 41 13 f0       	push   $0xf0134150
f0110972:	e8 39 f8 fe ff       	call   f01001b0 <_panic>
	block_status = is_free_block(startVAs[blockIndex]) ;
f0110977:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011097a:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f0110981:	83 ec 0c             	sub    $0xc,%esp
f0110984:	50                   	push   %eax
f0110985:	e8 04 ef 01 00       	call   f012f88e <is_free_block>
f011098a:	83 c4 10             	add    $0x10,%esp
f011098d:	88 45 bb             	mov    %al,-0x45(%ebp)
	if (block_status != 1)
f0110990:	80 7d bb 01          	cmpb   $0x1,-0x45(%ebp)
f0110994:	74 17                	je     f01109ad <test_free_block_BF+0x8eb>
		panic("test_free_block #9.2: WRONG FREE! block status (is_free) not equal 1 after freeing.");
f0110996:	83 ec 04             	sub    $0x4,%esp
f0110999:	68 a8 5f 13 f0       	push   $0xf0135fa8
f011099e:	68 23 04 00 00       	push   $0x423
f01109a3:	68 50 41 13 f0       	push   $0xf0134150
f01109a8:	e8 03 f8 fe ff       	call   f01001b0 <_panic>

	if (get_block_size(startVAs[blockIndex+1]) != 0 || is_free_block(startVAs[blockIndex+1]) != 0)
f01109ad:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01109b0:	40                   	inc    %eax
f01109b1:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f01109b8:	83 ec 0c             	sub    $0xc,%esp
f01109bb:	50                   	push   %eax
f01109bc:	e8 b7 ee 01 00       	call   f012f878 <get_block_size>
f01109c1:	83 c4 10             	add    $0x10,%esp
f01109c4:	85 c0                	test   %eax,%eax
f01109c6:	75 1b                	jne    f01109e3 <test_free_block_BF+0x921>
f01109c8:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01109cb:	40                   	inc    %eax
f01109cc:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f01109d3:	83 ec 0c             	sub    $0xc,%esp
f01109d6:	50                   	push   %eax
f01109d7:	e8 b2 ee 01 00       	call   f012f88e <is_free_block>
f01109dc:	83 c4 10             	add    $0x10,%esp
f01109df:	84 c0                	test   %al,%al
f01109e1:	74 17                	je     f01109fa <test_free_block_BF+0x938>
		panic("test_free_block #9.3: WRONG FREE! make sure to ZEROing the size & is_free values of the vanishing block.");
f01109e3:	83 ec 04             	sub    $0x4,%esp
f01109e6:	68 fc 5f 13 f0       	push   $0xf0135ffc
f01109eb:	68 26 04 00 00       	push   $0x426
f01109f0:	68 50 41 13 f0       	push   $0xf0134150
f01109f5:	e8 b6 f7 fe ff       	call   f01001b0 <_panic>

	//====================================================================//
	/*free_block Scenario 5: Merge with next ONLY (between 2 blocks)*/
	cprintf("		5.2: between 2 blocks\n\n") ;
f01109fa:	83 ec 0c             	sub    $0xc,%esp
f01109fd:	68 21 54 13 f0       	push   $0xf0135421
f0110a02:	e8 2a 04 ff ff       	call   f0100e31 <cprintf>
f0110a07:	83 c4 10             	add    $0x10,%esp
	blockIndex = 1*allocCntPerSize - 1 ;
f0110a0a:	c7 45 b4 c7 00 00 00 	movl   $0xc7,-0x4c(%ebp)
	free_block(startVAs[blockIndex]);
f0110a11:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110a14:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f0110a1b:	83 ec 0c             	sub    $0xc,%esp
f0110a1e:	50                   	push   %eax
f0110a1f:	e8 d0 f3 01 00       	call   f012fdf4 <free_block>
f0110a24:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[blockIndex]) ;
f0110a27:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110a2a:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f0110a31:	83 ec 0c             	sub    $0xc,%esp
f0110a34:	50                   	push   %eax
f0110a35:	e8 3e ee 01 00       	call   f012f878 <get_block_size>
f0110a3a:	83 c4 10             	add    $0x10,%esp
f0110a3d:	89 45 bc             	mov    %eax,-0x44(%ebp)
	if (block_size != allocSizes[0]+allocSizes[1])
f0110a40:	8b 15 20 eb 18 f0    	mov    0xf018eb20,%edx
f0110a46:	a1 24 eb 18 f0       	mov    0xf018eb24,%eax
f0110a4b:	01 d0                	add    %edx,%eax
f0110a4d:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0110a50:	74 28                	je     f0110a7a <test_free_block_BF+0x9b8>
		panic("test_free_block #10.1: WRONG FREE! block size after free is not correct. Expected %d, Actual %d",allocSizes[0] + allocSizes[1],block_size);
f0110a52:	8b 15 20 eb 18 f0    	mov    0xf018eb20,%edx
f0110a58:	a1 24 eb 18 f0       	mov    0xf018eb24,%eax
f0110a5d:	01 d0                	add    %edx,%eax
f0110a5f:	83 ec 0c             	sub    $0xc,%esp
f0110a62:	ff 75 bc             	pushl  -0x44(%ebp)
f0110a65:	50                   	push   %eax
f0110a66:	68 68 60 13 f0       	push   $0xf0136068
f0110a6b:	68 2f 04 00 00       	push   $0x42f
f0110a70:	68 50 41 13 f0       	push   $0xf0134150
f0110a75:	e8 36 f7 fe ff       	call   f01001b0 <_panic>
	block_status = is_free_block(startVAs[blockIndex]) ;
f0110a7a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110a7d:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f0110a84:	83 ec 0c             	sub    $0xc,%esp
f0110a87:	50                   	push   %eax
f0110a88:	e8 01 ee 01 00       	call   f012f88e <is_free_block>
f0110a8d:	83 c4 10             	add    $0x10,%esp
f0110a90:	88 45 bb             	mov    %al,-0x45(%ebp)
	if (block_status != 1)
f0110a93:	80 7d bb 01          	cmpb   $0x1,-0x45(%ebp)
f0110a97:	74 17                	je     f0110ab0 <test_free_block_BF+0x9ee>
		panic("test_free_block #10.2: WRONG FREE! block status (is_free) not equal 1 after freeing.");
f0110a99:	83 ec 04             	sub    $0x4,%esp
f0110a9c:	68 c8 60 13 f0       	push   $0xf01360c8
f0110aa1:	68 32 04 00 00       	push   $0x432
f0110aa6:	68 50 41 13 f0       	push   $0xf0134150
f0110aab:	e8 00 f7 fe ff       	call   f01001b0 <_panic>

	if (get_block_size(startVAs[blockIndex+1]) != 0 || is_free_block(startVAs[blockIndex+1]) != 0)
f0110ab0:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110ab3:	40                   	inc    %eax
f0110ab4:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f0110abb:	83 ec 0c             	sub    $0xc,%esp
f0110abe:	50                   	push   %eax
f0110abf:	e8 b4 ed 01 00       	call   f012f878 <get_block_size>
f0110ac4:	83 c4 10             	add    $0x10,%esp
f0110ac7:	85 c0                	test   %eax,%eax
f0110ac9:	75 1b                	jne    f0110ae6 <test_free_block_BF+0xa24>
f0110acb:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110ace:	40                   	inc    %eax
f0110acf:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f0110ad6:	83 ec 0c             	sub    $0xc,%esp
f0110ad9:	50                   	push   %eax
f0110ada:	e8 af ed 01 00       	call   f012f88e <is_free_block>
f0110adf:	83 c4 10             	add    $0x10,%esp
f0110ae2:	84 c0                	test   %al,%al
f0110ae4:	74 17                	je     f0110afd <test_free_block_BF+0xa3b>
		panic("test_free_block #10.3: WRONG FREE! make sure to ZEROing the size & is_free values of the vanishing block.");
f0110ae6:	83 ec 04             	sub    $0x4,%esp
f0110ae9:	68 20 61 13 f0       	push   $0xf0136120
f0110aee:	68 35 04 00 00       	push   $0x435
f0110af3:	68 50 41 13 f0       	push   $0xf0134150
f0110af8:	e8 b3 f6 fe ff       	call   f01001b0 <_panic>

	//====================================================================//
	/*free_block Scenario 6: Merge with prev & next */
	cprintf("	6: Free some allocated blocks [Merge with previous & next]\n\n") ;
f0110afd:	83 ec 0c             	sub    $0xc,%esp
f0110b00:	68 64 55 13 f0       	push   $0xf0135564
f0110b05:	e8 27 03 ff ff       	call   f0100e31 <cprintf>
f0110b0a:	83 c4 10             	add    $0x10,%esp
	blockIndex = 4*allocCntPerSize - 2 ;
f0110b0d:	c7 45 b4 1e 03 00 00 	movl   $0x31e,-0x4c(%ebp)
	free_block(startVAs[blockIndex]);
f0110b14:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110b17:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f0110b1e:	83 ec 0c             	sub    $0xc,%esp
f0110b21:	50                   	push   %eax
f0110b22:	e8 cd f2 01 00       	call   f012fdf4 <free_block>
f0110b27:	83 c4 10             	add    $0x10,%esp

	blockIndex = 4*allocCntPerSize - 1 ;
f0110b2a:	c7 45 b4 1f 03 00 00 	movl   $0x31f,-0x4c(%ebp)
	free_block(startVAs[blockIndex]);
f0110b31:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110b34:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f0110b3b:	83 ec 0c             	sub    $0xc,%esp
f0110b3e:	50                   	push   %eax
f0110b3f:	e8 b0 f2 01 00       	call   f012fdf4 <free_block>
f0110b44:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[blockIndex-1]) ;
f0110b47:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110b4a:	48                   	dec    %eax
f0110b4b:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f0110b52:	83 ec 0c             	sub    $0xc,%esp
f0110b55:	50                   	push   %eax
f0110b56:	e8 1d ed 01 00       	call   f012f878 <get_block_size>
f0110b5b:	83 c4 10             	add    $0x10,%esp
f0110b5e:	89 45 bc             	mov    %eax,-0x44(%ebp)
	if (block_size != allocSizes[3]+allocSizes[3]+allocSizes[4])
f0110b61:	8b 15 2c eb 18 f0    	mov    0xf018eb2c,%edx
f0110b67:	a1 2c eb 18 f0       	mov    0xf018eb2c,%eax
f0110b6c:	01 c2                	add    %eax,%edx
f0110b6e:	a1 30 eb 18 f0       	mov    0xf018eb30,%eax
f0110b73:	01 d0                	add    %edx,%eax
f0110b75:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0110b78:	74 2f                	je     f0110ba9 <test_free_block_BF+0xae7>
		panic("test_free_block #11.1: WRONG FREE! block size after free is not correct. Expected %d, Actual %d",allocSizes[3]+allocSizes[3]+allocSizes[4],block_size);
f0110b7a:	8b 15 2c eb 18 f0    	mov    0xf018eb2c,%edx
f0110b80:	a1 2c eb 18 f0       	mov    0xf018eb2c,%eax
f0110b85:	01 c2                	add    %eax,%edx
f0110b87:	a1 30 eb 18 f0       	mov    0xf018eb30,%eax
f0110b8c:	01 d0                	add    %edx,%eax
f0110b8e:	83 ec 0c             	sub    $0xc,%esp
f0110b91:	ff 75 bc             	pushl  -0x44(%ebp)
f0110b94:	50                   	push   %eax
f0110b95:	68 8c 61 13 f0       	push   $0xf013618c
f0110b9a:	68 41 04 00 00       	push   $0x441
f0110b9f:	68 50 41 13 f0       	push   $0xf0134150
f0110ba4:	e8 07 f6 fe ff       	call   f01001b0 <_panic>
	block_status = is_free_block(startVAs[blockIndex-1]) ;
f0110ba9:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110bac:	48                   	dec    %eax
f0110bad:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f0110bb4:	83 ec 0c             	sub    $0xc,%esp
f0110bb7:	50                   	push   %eax
f0110bb8:	e8 d1 ec 01 00       	call   f012f88e <is_free_block>
f0110bbd:	83 c4 10             	add    $0x10,%esp
f0110bc0:	88 45 bb             	mov    %al,-0x45(%ebp)
	if (block_status != 1)
f0110bc3:	80 7d bb 01          	cmpb   $0x1,-0x45(%ebp)
f0110bc7:	74 17                	je     f0110be0 <test_free_block_BF+0xb1e>
		panic("test_free_block #11.2: WRONG FREE! block status (is_free) not equal 1 after freeing.");
f0110bc9:	83 ec 04             	sub    $0x4,%esp
f0110bcc:	68 ec 61 13 f0       	push   $0xf01361ec
f0110bd1:	68 44 04 00 00       	push   $0x444
f0110bd6:	68 50 41 13 f0       	push   $0xf0134150
f0110bdb:	e8 d0 f5 fe ff       	call   f01001b0 <_panic>

	if (get_block_size(startVAs[blockIndex]) != 0 || is_free_block(startVAs[blockIndex]) != 0 ||
f0110be0:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110be3:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f0110bea:	83 ec 0c             	sub    $0xc,%esp
f0110bed:	50                   	push   %eax
f0110bee:	e8 85 ec 01 00       	call   f012f878 <get_block_size>
f0110bf3:	83 c4 10             	add    $0x10,%esp
f0110bf6:	85 c0                	test   %eax,%eax
f0110bf8:	75 50                	jne    f0110c4a <test_free_block_BF+0xb88>
f0110bfa:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110bfd:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f0110c04:	83 ec 0c             	sub    $0xc,%esp
f0110c07:	50                   	push   %eax
f0110c08:	e8 81 ec 01 00       	call   f012f88e <is_free_block>
f0110c0d:	83 c4 10             	add    $0x10,%esp
f0110c10:	84 c0                	test   %al,%al
f0110c12:	75 36                	jne    f0110c4a <test_free_block_BF+0xb88>
			get_block_size(startVAs[blockIndex+1]) != 0 || is_free_block(startVAs[blockIndex+1]) != 0)
f0110c14:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110c17:	40                   	inc    %eax
f0110c18:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f0110c1f:	83 ec 0c             	sub    $0xc,%esp
f0110c22:	50                   	push   %eax
f0110c23:	e8 50 ec 01 00       	call   f012f878 <get_block_size>
f0110c28:	83 c4 10             	add    $0x10,%esp
		panic("test_free_block #11.1: WRONG FREE! block size after free is not correct. Expected %d, Actual %d",allocSizes[3]+allocSizes[3]+allocSizes[4],block_size);
	block_status = is_free_block(startVAs[blockIndex-1]) ;
	if (block_status != 1)
		panic("test_free_block #11.2: WRONG FREE! block status (is_free) not equal 1 after freeing.");

	if (get_block_size(startVAs[blockIndex]) != 0 || is_free_block(startVAs[blockIndex]) != 0 ||
f0110c2b:	85 c0                	test   %eax,%eax
f0110c2d:	75 1b                	jne    f0110c4a <test_free_block_BF+0xb88>
			get_block_size(startVAs[blockIndex+1]) != 0 || is_free_block(startVAs[blockIndex+1]) != 0)
f0110c2f:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110c32:	40                   	inc    %eax
f0110c33:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f0110c3a:	83 ec 0c             	sub    $0xc,%esp
f0110c3d:	50                   	push   %eax
f0110c3e:	e8 4b ec 01 00       	call   f012f88e <is_free_block>
f0110c43:	83 c4 10             	add    $0x10,%esp
f0110c46:	84 c0                	test   %al,%al
f0110c48:	74 17                	je     f0110c61 <test_free_block_BF+0xb9f>
		panic("test_free_block #11.3: WRONG FREE! make sure to ZEROing the size & is_free values of the vanishing block.");
f0110c4a:	83 ec 04             	sub    $0x4,%esp
f0110c4d:	68 44 62 13 f0       	push   $0xf0136244
f0110c52:	68 48 04 00 00       	push   $0x448
f0110c57:	68 50 41 13 f0       	push   $0xf0134150
f0110c5c:	e8 4f f5 fe ff       	call   f01001b0 <_panic>

	//====================================================================//
	/*Allocate After Free Scenarios */
	void* expected = NULL;
f0110c61:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%ebp)

	{
		//Consume 1st 7KB Block
		actualSize = 7*kilo - sizeOfMetaData() ;
f0110c68:	c7 45 cc f0 1b 00 00 	movl   $0x1bf0,-0x34(%ebp)
		va = alloc_block(actualSize, DA_BF);
f0110c6f:	83 ec 08             	sub    $0x8,%esp
f0110c72:	6a 03                	push   $0x3
f0110c74:	ff 75 cc             	pushl  -0x34(%ebp)
f0110c77:	e8 29 ec 01 00       	call   f012f8a5 <alloc_block>
f0110c7c:	83 c4 10             	add    $0x10,%esp
f0110c7f:	89 45 c8             	mov    %eax,-0x38(%ebp)
		//Check returned va
		expected = (void*)(startVAs[6*allocCntPerSize]);
f0110c82:	a1 40 b6 2d f0       	mov    0xf02db640,%eax
f0110c87:	89 45 b0             	mov    %eax,-0x50(%ebp)
		if(va == NULL || (va != expected))
f0110c8a:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f0110c8e:	74 08                	je     f0110c98 <test_free_block_BF+0xbd6>
f0110c90:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0110c93:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0110c96:	74 1d                	je     f0110cb5 <test_free_block_BF+0xbf3>
			panic("test_free_block #12.0: WRONG ALLOC - alloc_block_BF return wrong address. Expected %x, Actual %x", expected, va);
f0110c98:	83 ec 0c             	sub    $0xc,%esp
f0110c9b:	ff 75 c8             	pushl  -0x38(%ebp)
f0110c9e:	ff 75 b0             	pushl  -0x50(%ebp)
f0110ca1:	68 b0 62 13 f0       	push   $0xf01362b0
f0110ca6:	68 55 04 00 00       	push   $0x455
f0110cab:	68 50 41 13 f0       	push   $0xf0134150
f0110cb0:	e8 fb f4 fe ff       	call   f01001b0 <_panic>
	}

	cprintf("	7: Allocate After Free [should be placed in coalesced blocks]\n\n") ;
f0110cb5:	83 ec 0c             	sub    $0xc,%esp
f0110cb8:	68 cc 56 13 f0       	push   $0xf01356cc
f0110cbd:	e8 6f 01 ff ff       	call   f0100e31 <cprintf>
f0110cc2:	83 c4 10             	add    $0x10,%esp

	cprintf("		7.1: in block coalesces with PREV\n\n") ;
f0110cc5:	83 ec 0c             	sub    $0xc,%esp
f0110cc8:	68 14 63 13 f0       	push   $0xf0136314
f0110ccd:	e8 5f 01 ff ff       	call   f0100e31 <cprintf>
f0110cd2:	83 c4 10             	add    $0x10,%esp
	actualSize = 2*kilo - sizeOfMetaData();
f0110cd5:	c7 45 cc f0 07 00 00 	movl   $0x7f0,-0x34(%ebp)
	va = alloc_block(actualSize, DA_BF);
f0110cdc:	83 ec 08             	sub    $0x8,%esp
f0110cdf:	6a 03                	push   $0x3
f0110ce1:	ff 75 cc             	pushl  -0x34(%ebp)
f0110ce4:	e8 bc eb 01 00       	call   f012f8a5 <alloc_block>
f0110ce9:	83 c4 10             	add    $0x10,%esp
f0110cec:	89 45 c8             	mov    %eax,-0x38(%ebp)
	//Check returned va
	expected = startVAs[2*allocCntPerSize];
f0110cef:	a1 c0 a9 2d f0       	mov    0xf02da9c0,%eax
f0110cf4:	89 45 b0             	mov    %eax,-0x50(%ebp)
	if(va == NULL || (va != expected))
f0110cf7:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f0110cfb:	74 08                	je     f0110d05 <test_free_block_BF+0xc43>
f0110cfd:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0110d00:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0110d03:	74 1d                	je     f0110d22 <test_free_block_BF+0xc60>
		panic("test_free_block #12.1: WRONG ALLOC - alloc_block_BF return wrong address. Expected %x, Actual %x", expected, va);
f0110d05:	83 ec 0c             	sub    $0xc,%esp
f0110d08:	ff 75 c8             	pushl  -0x38(%ebp)
f0110d0b:	ff 75 b0             	pushl  -0x50(%ebp)
f0110d0e:	68 3c 63 13 f0       	push   $0xf013633c
f0110d13:	68 60 04 00 00       	push   $0x460
f0110d18:	68 50 41 13 f0       	push   $0xf0134150
f0110d1d:	e8 8e f4 fe ff       	call   f01001b0 <_panic>

	actualSize = 8*kilo;
f0110d22:	c7 45 cc 00 20 00 00 	movl   $0x2000,-0x34(%ebp)
	va = alloc_block(actualSize, DA_BF);
f0110d29:	83 ec 08             	sub    $0x8,%esp
f0110d2c:	6a 03                	push   $0x3
f0110d2e:	ff 75 cc             	pushl  -0x34(%ebp)
f0110d31:	e8 6f eb 01 00       	call   f012f8a5 <alloc_block>
f0110d36:	83 c4 10             	add    $0x10,%esp
f0110d39:	89 45 c8             	mov    %eax,-0x38(%ebp)
	//Check returned va
	expected = startVAs[numOfAllocs*allocCntPerSize-1];
f0110d3c:	a1 5c b9 2d f0       	mov    0xf02db95c,%eax
f0110d41:	89 45 b0             	mov    %eax,-0x50(%ebp)
	if(va == NULL || (va != expected))
f0110d44:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f0110d48:	74 08                	je     f0110d52 <test_free_block_BF+0xc90>
f0110d4a:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0110d4d:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0110d50:	74 1d                	je     f0110d6f <test_free_block_BF+0xcad>
		panic("test_free_block #12.2: WRONG ALLOC - alloc_block_BF return wrong address. Expected %x, Actual %x", expected, va);
f0110d52:	83 ec 0c             	sub    $0xc,%esp
f0110d55:	ff 75 c8             	pushl  -0x38(%ebp)
f0110d58:	ff 75 b0             	pushl  -0x50(%ebp)
f0110d5b:	68 a0 63 13 f0       	push   $0xf01363a0
f0110d60:	68 67 04 00 00       	push   $0x467
f0110d65:	68 50 41 13 f0       	push   $0xf0134150
f0110d6a:	e8 41 f4 fe ff       	call   f01001b0 <_panic>

	cprintf("		7.2: in block coalesces with PREV & NEXT\n\n") ;
f0110d6f:	83 ec 0c             	sub    $0xc,%esp
f0110d72:	68 64 58 13 f0       	push   $0xf0135864
f0110d77:	e8 b5 00 ff ff       	call   f0100e31 <cprintf>
f0110d7c:	83 c4 10             	add    $0x10,%esp
	actualSize = 2*kilo + 1;
f0110d7f:	c7 45 cc 01 08 00 00 	movl   $0x801,-0x34(%ebp)
	va = alloc_block(actualSize, DA_BF);
f0110d86:	83 ec 08             	sub    $0x8,%esp
f0110d89:	6a 03                	push   $0x3
f0110d8b:	ff 75 cc             	pushl  -0x34(%ebp)
f0110d8e:	e8 12 eb 01 00       	call   f012f8a5 <alloc_block>
f0110d93:	83 c4 10             	add    $0x10,%esp
f0110d96:	89 45 c8             	mov    %eax,-0x38(%ebp)
	//Check returned va
	expected = startVAs[4*allocCntPerSize - 2];
f0110d99:	a1 f8 af 2d f0       	mov    0xf02daff8,%eax
f0110d9e:	89 45 b0             	mov    %eax,-0x50(%ebp)
	if(va == NULL || (va != expected))
f0110da1:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f0110da5:	74 08                	je     f0110daf <test_free_block_BF+0xced>
f0110da7:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0110daa:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0110dad:	74 1d                	je     f0110dcc <test_free_block_BF+0xd0a>
		panic("test_free_block #12.3: WRONG ALLOC - alloc_block_BF return wrong address. Expected %x, Actual %x", expected, va);
f0110daf:	83 ec 0c             	sub    $0xc,%esp
f0110db2:	ff 75 c8             	pushl  -0x38(%ebp)
f0110db5:	ff 75 b0             	pushl  -0x50(%ebp)
f0110db8:	68 04 64 13 f0       	push   $0xf0136404
f0110dbd:	68 6f 04 00 00       	push   $0x46f
f0110dc2:	68 50 41 13 f0       	push   $0xf0134150
f0110dc7:	e8 e4 f3 fe ff       	call   f01001b0 <_panic>

	cprintf("		7.3: in block coalesces with NEXT\n\n") ;
f0110dcc:	83 ec 0c             	sub    $0xc,%esp
f0110dcf:	68 68 64 13 f0       	push   $0xf0136468
f0110dd4:	e8 58 00 ff ff       	call   f0100e31 <cprintf>
f0110dd9:	83 c4 10             	add    $0x10,%esp
	actualSize = 4*kilo + 10;
f0110ddc:	c7 45 cc 0a 10 00 00 	movl   $0x100a,-0x34(%ebp)
	va = alloc_block(actualSize, DA_BF);
f0110de3:	83 ec 08             	sub    $0x8,%esp
f0110de6:	6a 03                	push   $0x3
f0110de8:	ff 75 cc             	pushl  -0x34(%ebp)
f0110deb:	e8 b5 ea 01 00       	call   f012f8a5 <alloc_block>
f0110df0:	83 c4 10             	add    $0x10,%esp
f0110df3:	89 45 c8             	mov    %eax,-0x38(%ebp)
	//Check returned va
	expected = startVAs[1*allocCntPerSize - 1];
f0110df6:	a1 9c a6 2d f0       	mov    0xf02da69c,%eax
f0110dfb:	89 45 b0             	mov    %eax,-0x50(%ebp)
	if(va == NULL || (va != expected))
f0110dfe:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f0110e02:	74 08                	je     f0110e0c <test_free_block_BF+0xd4a>
f0110e04:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0110e07:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0110e0a:	74 1d                	je     f0110e29 <test_free_block_BF+0xd67>
		panic("test_free_block #12.4: WRONG ALLOC - alloc_block_BF return wrong address. Expected %x, Actual %x", expected, va);
f0110e0c:	83 ec 0c             	sub    $0xc,%esp
f0110e0f:	ff 75 c8             	pushl  -0x38(%ebp)
f0110e12:	ff 75 b0             	pushl  -0x50(%ebp)
f0110e15:	68 90 64 13 f0       	push   $0xf0136490
f0110e1a:	68 77 04 00 00       	push   $0x477
f0110e1f:	68 50 41 13 f0       	push   $0xf0134150
f0110e24:	e8 87 f3 fe ff       	call   f01001b0 <_panic>

	actualSize = 5*kilo - sizeOfMetaData();
f0110e29:	c7 45 cc f0 13 00 00 	movl   $0x13f0,-0x34(%ebp)
	va = alloc_block(actualSize, DA_BF);
f0110e30:	83 ec 08             	sub    $0x8,%esp
f0110e33:	6a 03                	push   $0x3
f0110e35:	ff 75 cc             	pushl  -0x34(%ebp)
f0110e38:	e8 68 ea 01 00       	call   f012f8a5 <alloc_block>
f0110e3d:	83 c4 10             	add    $0x10,%esp
f0110e40:	89 45 c8             	mov    %eax,-0x38(%ebp)
	//Check returned va
	expected = (void*)(KERNEL_HEAP_START + sizeOfMetaData());
f0110e43:	c7 45 b0 10 00 00 f6 	movl   $0xf6000010,-0x50(%ebp)
	if(va == NULL || (va != expected))
f0110e4a:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f0110e4e:	74 08                	je     f0110e58 <test_free_block_BF+0xd96>
f0110e50:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0110e53:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0110e56:	74 1d                	je     f0110e75 <test_free_block_BF+0xdb3>
		panic("test_free_block #12.5: WRONG ALLOC - alloc_block_BF return wrong address. Expected %x, Actual %x", expected, va);
f0110e58:	83 ec 0c             	sub    $0xc,%esp
f0110e5b:	ff 75 c8             	pushl  -0x38(%ebp)
f0110e5e:	ff 75 b0             	pushl  -0x50(%ebp)
f0110e61:	68 f4 64 13 f0       	push   $0xf01364f4
f0110e66:	68 7e 04 00 00       	push   $0x47e
f0110e6b:	68 50 41 13 f0       	push   $0xf0134150
f0110e70:	e8 3b f3 fe ff       	call   f01001b0 <_panic>

	actualSize = 3*kilo - sizeOfMetaData();
f0110e75:	c7 45 cc f0 0b 00 00 	movl   $0xbf0,-0x34(%ebp)
	va = alloc_block(actualSize, DA_BF);
f0110e7c:	83 ec 08             	sub    $0x8,%esp
f0110e7f:	6a 03                	push   $0x3
f0110e81:	ff 75 cc             	pushl  -0x34(%ebp)
f0110e84:	e8 1c ea 01 00       	call   f012f8a5 <alloc_block>
f0110e89:	83 c4 10             	add    $0x10,%esp
f0110e8c:	89 45 c8             	mov    %eax,-0x38(%ebp)
	//Check returned va
	expected = (void*)(KERNEL_HEAP_START + 5*kilo + sizeOfMetaData());
f0110e8f:	c7 45 b0 10 14 00 f6 	movl   $0xf6001410,-0x50(%ebp)
	if(va == NULL || (va != expected))
f0110e96:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f0110e9a:	74 08                	je     f0110ea4 <test_free_block_BF+0xde2>
f0110e9c:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0110e9f:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0110ea2:	74 1d                	je     f0110ec1 <test_free_block_BF+0xdff>
		panic("test_free_block #12.6: WRONG ALLOC - alloc_block_BF return wrong address. Expected %x, Actual %x", expected, va);
f0110ea4:	83 ec 0c             	sub    $0xc,%esp
f0110ea7:	ff 75 c8             	pushl  -0x38(%ebp)
f0110eaa:	ff 75 b0             	pushl  -0x50(%ebp)
f0110ead:	68 58 65 13 f0       	push   $0xf0136558
f0110eb2:	68 85 04 00 00       	push   $0x485
f0110eb7:	68 50 41 13 f0       	push   $0xf0134150
f0110ebc:	e8 ef f2 fe ff       	call   f01001b0 <_panic>


	cprintf("Congratulations!! test free_block with BEST FIT completed successfully.\n");
f0110ec1:	83 ec 0c             	sub    $0xc,%esp
f0110ec4:	68 bc 65 13 f0       	push   $0xf01365bc
f0110ec9:	e8 63 ff fe ff       	call   f0100e31 <cprintf>
f0110ece:	83 c4 10             	add    $0x10,%esp

}
f0110ed1:	90                   	nop
f0110ed2:	c9                   	leave  
f0110ed3:	c3                   	ret    

f0110ed4 <test_free_block_NF>:

void test_free_block_NF()
{
f0110ed4:	55                   	push   %ebp
f0110ed5:	89 e5                	mov    %esp,%ebp
f0110ed7:	83 ec 08             	sub    $0x8,%esp
	panic("not implemented");
f0110eda:	83 ec 04             	sub    $0x4,%esp
f0110edd:	68 05 66 13 f0       	push   $0xf0136605
f0110ee2:	68 8e 04 00 00       	push   $0x48e
f0110ee7:	68 50 41 13 f0       	push   $0xf0134150
f0110eec:	e8 bf f2 fe ff       	call   f01001b0 <_panic>

f0110ef1 <test_realloc_block_FF>:
}

void test_realloc_block_FF()
{
f0110ef1:	55                   	push   %ebp
f0110ef2:	89 e5                	mov    %esp,%ebp
f0110ef4:	83 ec 78             	sub    $0x78,%esp
#if USE_KHEAP
	panic("test_free_block: the kernel heap should be disabled. make sure USE_KHEAP = 0");
	return;
#endif

	cprintf("===================================================\n");
f0110ef7:	83 ec 0c             	sub    $0xc,%esp
f0110efa:	68 18 66 13 f0       	push   $0xf0136618
f0110eff:	e8 2d ff fe ff       	call   f0100e31 <cprintf>
f0110f04:	83 c4 10             	add    $0x10,%esp
	cprintf("*****NOTE: THIS IS A PARTIAL TEST FOR REALLOC******\n") ;
f0110f07:	83 ec 0c             	sub    $0xc,%esp
f0110f0a:	68 50 66 13 f0       	push   $0xf0136650
f0110f0f:	e8 1d ff fe ff       	call   f0100e31 <cprintf>
f0110f14:	83 c4 10             	add    $0x10,%esp
	cprintf("You need to pick-up the missing tests and test them\n") ;
f0110f17:	83 ec 0c             	sub    $0xc,%esp
f0110f1a:	68 88 66 13 f0       	push   $0xf0136688
f0110f1f:	e8 0d ff fe ff       	call   f0100e31 <cprintf>
f0110f24:	83 c4 10             	add    $0x10,%esp
	cprintf("===================================================\n");
f0110f27:	83 ec 0c             	sub    $0xc,%esp
f0110f2a:	68 18 66 13 f0       	push   $0xf0136618
f0110f2f:	e8 fd fe fe ff       	call   f0100e31 <cprintf>
f0110f34:	83 c4 10             	add    $0x10,%esp

	//TODO: [PROJECT'23.MS1 - #9] [3] DYNAMIC ALLOCATOR - test_realloc_block_FF()
	//CHECK MISSING CASES AND TRY TO TEST THEM !

	int eval = 0;
f0110f37:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	bool is_correct;

	int initAllocatedSpace = 3*Mega;
f0110f3e:	c7 45 c8 00 00 30 00 	movl   $0x300000,-0x38(%ebp)
	initialize_dynamic_allocator(KERNEL_HEAP_START, initAllocatedSpace);
f0110f45:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0110f48:	83 ec 08             	sub    $0x8,%esp
f0110f4b:	50                   	push   %eax
f0110f4c:	68 00 00 00 f6       	push   $0xf6000000
f0110f51:	e8 68 ea 01 00       	call   f012f9be <initialize_dynamic_allocator>
f0110f56:	83 c4 10             	add    $0x10,%esp
	void * va ;
	//====================================================================//
	//[1] Test calling realloc with VA = NULL. It should call malloc
	//====================================================================//
	/* Try to allocate set of blocks with different sizes*/
	cprintf("1: Test calling realloc with VA = NULL.[10%]\n\n") ;
f0110f59:	83 ec 0c             	sub    $0xc,%esp
f0110f5c:	68 c0 66 13 f0       	push   $0xf01366c0
f0110f61:	e8 cb fe fe ff       	call   f0100e31 <cprintf>
f0110f66:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f0110f69:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)

	int totalSizes = 0;
f0110f70:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	for (int i = 0; i < numOfAllocs; ++i)
f0110f77:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f0110f7e:	eb 2a                	jmp    f0110faa <test_realloc_block_FF+0xb9>
	{
		totalSizes += allocSizes[i] * allocCntPerSize ;
f0110f80:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0110f83:	8b 14 85 20 eb 18 f0 	mov    -0xfe714e0(,%eax,4),%edx
f0110f8a:	89 d0                	mov    %edx,%eax
f0110f8c:	c1 e0 02             	shl    $0x2,%eax
f0110f8f:	01 d0                	add    %edx,%eax
f0110f91:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0110f98:	01 d0                	add    %edx,%eax
f0110f9a:	c1 e0 03             	shl    $0x3,%eax
f0110f9d:	89 c2                	mov    %eax,%edx
f0110f9f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110fa2:	01 d0                	add    %edx,%eax
f0110fa4:	89 45 ec             	mov    %eax,-0x14(%ebp)
	/* Try to allocate set of blocks with different sizes*/
	cprintf("1: Test calling realloc with VA = NULL.[10%]\n\n") ;
	is_correct = 1;

	int totalSizes = 0;
	for (int i = 0; i < numOfAllocs; ++i)
f0110fa7:	ff 45 e8             	incl   -0x18(%ebp)
f0110faa:	83 7d e8 06          	cmpl   $0x6,-0x18(%ebp)
f0110fae:	7e d0                	jle    f0110f80 <test_realloc_block_FF+0x8f>
	{
		totalSizes += allocSizes[i] * allocCntPerSize ;
	}
	int remainSize = initAllocatedSpace - totalSizes ;
f0110fb0:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0110fb3:	2b 45 ec             	sub    -0x14(%ebp),%eax
f0110fb6:	89 45 c4             	mov    %eax,-0x3c(%ebp)
	if (remainSize <= 0)
f0110fb9:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
f0110fbd:	7f 17                	jg     f0110fd6 <test_realloc_block_FF+0xe5>
		panic("test_realloc_block_FF is not configured correctly. Consider updating the initial allocated space OR the required allocations");
f0110fbf:	83 ec 04             	sub    $0x4,%esp
f0110fc2:	68 f0 66 13 f0       	push   $0xf01366f0
f0110fc7:	68 b5 04 00 00       	push   $0x4b5
f0110fcc:	68 50 41 13 f0       	push   $0xf0134150
f0110fd1:	e8 da f1 fe ff       	call   f01001b0 <_panic>

	int idx = 0;
f0110fd6:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	void* curVA = (void*) KERNEL_HEAP_START ;
f0110fdd:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
f0110fe4:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f0110feb:	e9 f8 00 00 00       	jmp    f01110e8 <test_realloc_block_FF+0x1f7>
	{
		for (int j = 0; j < allocCntPerSize; ++j)
f0110ff0:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f0110ff7:	e9 dc 00 00 00       	jmp    f01110d8 <test_realloc_block_FF+0x1e7>
		{
			actualSize = allocSizes[i] - sizeOfMetaData();
f0110ffc:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0110fff:	8b 04 85 20 eb 18 f0 	mov    -0xfe714e0(,%eax,4),%eax
f0111006:	83 e8 10             	sub    $0x10,%eax
f0111009:	89 45 c0             	mov    %eax,-0x40(%ebp)
			va = startVAs[idx] = realloc_block_FF(NULL, actualSize);
f011100c:	83 ec 08             	sub    $0x8,%esp
f011100f:	ff 75 c0             	pushl  -0x40(%ebp)
f0111012:	6a 00                	push   $0x0
f0111014:	e8 87 ee 01 00       	call   f012fea0 <realloc_block_FF>
f0111019:	83 c4 10             	add    $0x10,%esp
f011101c:	89 c2                	mov    %eax,%edx
f011101e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0111021:	89 14 85 80 a3 2d f0 	mov    %edx,-0xfd25c80(,%eax,4)
f0111028:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011102b:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f0111032:	89 45 bc             	mov    %eax,-0x44(%ebp)
			midVAs[idx] = va + actualSize/2 ;
f0111035:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0111038:	d1 e8                	shr    %eax
f011103a:	89 c2                	mov    %eax,%edx
f011103c:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011103f:	01 c2                	add    %eax,%edx
f0111041:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0111044:	89 14 85 80 cf 2d f0 	mov    %edx,-0xfd23080(,%eax,4)
			endVAs[idx] = va + actualSize - sizeof(short);
f011104b:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011104e:	8d 50 fe             	lea    -0x2(%eax),%edx
f0111051:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0111054:	01 c2                	add    %eax,%edx
f0111056:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0111059:	89 14 85 80 b9 2d f0 	mov    %edx,-0xfd24680(,%eax,4)
			//Check returned va
			if(va == NULL || (va != (curVA + sizeOfMetaData())))
f0111060:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f0111064:	74 0b                	je     f0111071 <test_realloc_block_FF+0x180>
f0111066:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0111069:	83 c0 10             	add    $0x10,%eax
f011106c:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f011106f:	74 24                	je     f0111095 <test_realloc_block_FF+0x1a4>
				panic("test_realloc_block_FF #1.%d: WRONG ALLOC - it return wrong address. Expected %x, Actual %x", idx, curVA + sizeOfMetaData() ,va);
f0111071:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0111074:	83 c0 10             	add    $0x10,%eax
f0111077:	83 ec 08             	sub    $0x8,%esp
f011107a:	ff 75 bc             	pushl  -0x44(%ebp)
f011107d:	50                   	push   %eax
f011107e:	ff 75 e4             	pushl  -0x1c(%ebp)
f0111081:	68 70 67 13 f0       	push   $0xf0136770
f0111086:	68 c4 04 00 00       	push   $0x4c4
f011108b:	68 50 41 13 f0       	push   $0xf0134150
f0111090:	e8 1b f1 fe ff       	call   f01001b0 <_panic>
			curVA += allocSizes[i] ;
f0111095:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0111098:	8b 04 85 20 eb 18 f0 	mov    -0xfe714e0(,%eax,4),%eax
f011109f:	01 45 e0             	add    %eax,-0x20(%ebp)
			*(startVAs[idx]) = idx ;
f01110a2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01110a5:	8b 14 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%edx
f01110ac:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01110af:	66 89 02             	mov    %ax,(%edx)
			*(midVAs[idx]) = idx ;
f01110b2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01110b5:	8b 14 85 80 cf 2d f0 	mov    -0xfd23080(,%eax,4),%edx
f01110bc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01110bf:	66 89 02             	mov    %ax,(%edx)
			*(endVAs[idx]) = idx ;
f01110c2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01110c5:	8b 14 85 80 b9 2d f0 	mov    -0xfd24680(,%eax,4),%edx
f01110cc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01110cf:	66 89 02             	mov    %ax,(%edx)
			idx++;
f01110d2:	ff 45 e4             	incl   -0x1c(%ebp)
	int idx = 0;
	void* curVA = (void*) KERNEL_HEAP_START ;
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
	{
		for (int j = 0; j < allocCntPerSize; ++j)
f01110d5:	ff 45 d8             	incl   -0x28(%ebp)
f01110d8:	81 7d d8 c7 00 00 00 	cmpl   $0xc7,-0x28(%ebp)
f01110df:	0f 8e 17 ff ff ff    	jle    f0110ffc <test_realloc_block_FF+0x10b>
		panic("test_realloc_block_FF is not configured correctly. Consider updating the initial allocated space OR the required allocations");

	int idx = 0;
	void* curVA = (void*) KERNEL_HEAP_START ;
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
f01110e5:	ff 45 dc             	incl   -0x24(%ebp)
f01110e8:	83 7d dc 06          	cmpl   $0x6,-0x24(%ebp)
f01110ec:	0f 8e fe fe ff ff    	jle    f0110ff0 <test_realloc_block_FF+0xff>
		}
	}

	//====================================================================//
	/* Try to allocate a block with a size equal to the size of the first existing free block*/
	actualSize = remainSize - sizeOfMetaData();
f01110f2:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01110f5:	83 e8 10             	sub    $0x10,%eax
f01110f8:	89 45 c0             	mov    %eax,-0x40(%ebp)
	va = startVAs[idx] = realloc_block_FF(NULL, actualSize);
f01110fb:	83 ec 08             	sub    $0x8,%esp
f01110fe:	ff 75 c0             	pushl  -0x40(%ebp)
f0111101:	6a 00                	push   $0x0
f0111103:	e8 98 ed 01 00       	call   f012fea0 <realloc_block_FF>
f0111108:	83 c4 10             	add    $0x10,%esp
f011110b:	89 c2                	mov    %eax,%edx
f011110d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0111110:	89 14 85 80 a3 2d f0 	mov    %edx,-0xfd25c80(,%eax,4)
f0111117:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011111a:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f0111121:	89 45 bc             	mov    %eax,-0x44(%ebp)
	midVAs[idx] = va + actualSize/2 ;
f0111124:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0111127:	d1 e8                	shr    %eax
f0111129:	89 c2                	mov    %eax,%edx
f011112b:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011112e:	01 c2                	add    %eax,%edx
f0111130:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0111133:	89 14 85 80 cf 2d f0 	mov    %edx,-0xfd23080(,%eax,4)
	endVAs[idx] = va + actualSize - sizeof(short);
f011113a:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011113d:	8d 50 fe             	lea    -0x2(%eax),%edx
f0111140:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0111143:	01 c2                	add    %eax,%edx
f0111145:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0111148:	89 14 85 80 b9 2d f0 	mov    %edx,-0xfd24680(,%eax,4)
	//Check returned va
	if(va == NULL || (va != (curVA + sizeOfMetaData())))
f011114f:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f0111153:	74 0b                	je     f0111160 <test_realloc_block_FF+0x26f>
f0111155:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0111158:	83 c0 10             	add    $0x10,%eax
f011115b:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f011115e:	74 17                	je     f0111177 <test_realloc_block_FF+0x286>
		panic("test_realloc_block_FF #2: WRONG ALLOC - it return wrong address.");
f0111160:	83 ec 04             	sub    $0x4,%esp
f0111163:	68 cc 67 13 f0       	push   $0xf01367cc
f0111168:	68 d5 04 00 00       	push   $0x4d5
f011116d:	68 50 41 13 f0       	push   $0xf0134150
f0111172:	e8 39 f0 fe ff       	call   f01001b0 <_panic>
	*(startVAs[idx]) = idx ;
f0111177:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011117a:	8b 14 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%edx
f0111181:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0111184:	66 89 02             	mov    %ax,(%edx)
	*(midVAs[idx]) = idx ;
f0111187:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011118a:	8b 14 85 80 cf 2d f0 	mov    -0xfd23080(,%eax,4),%edx
f0111191:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0111194:	66 89 02             	mov    %ax,(%edx)
	*(endVAs[idx]) = idx ;
f0111197:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011119a:	8b 14 85 80 b9 2d f0 	mov    -0xfd24680(,%eax,4),%edx
f01111a1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01111a4:	66 89 02             	mov    %ax,(%edx)

	//====================================================================//
	/* Check stored data inside each allocated block*/
	for (int i = 0; i < idx; ++i)
f01111a7:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f01111ae:	eb 59                	jmp    f0111209 <test_realloc_block_FF+0x318>
	{
		if (*(startVAs[i]) != i || *(midVAs[i]) != i ||	*(endVAs[i]) != i)
f01111b0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01111b3:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f01111ba:	66 8b 00             	mov    (%eax),%ax
f01111bd:	98                   	cwtl   
f01111be:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f01111c1:	75 26                	jne    f01111e9 <test_realloc_block_FF+0x2f8>
f01111c3:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01111c6:	8b 04 85 80 cf 2d f0 	mov    -0xfd23080(,%eax,4),%eax
f01111cd:	66 8b 00             	mov    (%eax),%ax
f01111d0:	98                   	cwtl   
f01111d1:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f01111d4:	75 13                	jne    f01111e9 <test_realloc_block_FF+0x2f8>
f01111d6:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01111d9:	8b 04 85 80 b9 2d f0 	mov    -0xfd24680(,%eax,4),%eax
f01111e0:	66 8b 00             	mov    (%eax),%ax
f01111e3:	98                   	cwtl   
f01111e4:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f01111e7:	74 1d                	je     f0111206 <test_realloc_block_FF+0x315>
			panic("test_realloc_block_FF #3.%d: WRONG! content of the block is not correct. Expected %d",i, i);
f01111e9:	83 ec 0c             	sub    $0xc,%esp
f01111ec:	ff 75 d4             	pushl  -0x2c(%ebp)
f01111ef:	ff 75 d4             	pushl  -0x2c(%ebp)
f01111f2:	68 10 68 13 f0       	push   $0xf0136810
f01111f7:	68 df 04 00 00       	push   $0x4df
f01111fc:	68 50 41 13 f0       	push   $0xf0134150
f0111201:	e8 aa ef fe ff       	call   f01001b0 <_panic>
	*(midVAs[idx]) = idx ;
	*(endVAs[idx]) = idx ;

	//====================================================================//
	/* Check stored data inside each allocated block*/
	for (int i = 0; i < idx; ++i)
f0111206:	ff 45 d4             	incl   -0x2c(%ebp)
f0111209:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011120c:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f011120f:	7c 9f                	jl     f01111b0 <test_realloc_block_FF+0x2bf>
	{
		if (*(startVAs[i]) != i || *(midVAs[i]) != i ||	*(endVAs[i]) != i)
			panic("test_realloc_block_FF #3.%d: WRONG! content of the block is not correct. Expected %d",i, i);
	}

	if (is_correct)
f0111211:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0111215:	74 04                	je     f011121b <test_realloc_block_FF+0x32a>
	{
		eval += 10;
f0111217:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)
	}

	//====================================================================//
	//[2] Test krealloc by passing size = 0. It should call free
	//====================================================================//
	cprintf("2: Test calling realloc with SIZE = 0.[10%]\n\n") ;
f011121b:	83 ec 0c             	sub    $0xc,%esp
f011121e:	68 68 68 13 f0       	push   $0xf0136868
f0111223:	e8 09 fc fe ff       	call   f0100e31 <cprintf>
f0111228:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f011122b:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)

	//Free set of blocks with different sizes (first block of each size)
	for (int i = 0; i < numOfAllocs; ++i)
f0111232:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
f0111239:	e9 fa 00 00 00       	jmp    f0111338 <test_realloc_block_FF+0x447>
	{
		va = realloc_block_FF(startVAs[i*allocCntPerSize], 0);
f011123e:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0111241:	89 d0                	mov    %edx,%eax
f0111243:	c1 e0 02             	shl    $0x2,%eax
f0111246:	01 d0                	add    %edx,%eax
f0111248:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011124f:	01 d0                	add    %edx,%eax
f0111251:	c1 e0 03             	shl    $0x3,%eax
f0111254:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f011125b:	83 ec 08             	sub    $0x8,%esp
f011125e:	6a 00                	push   $0x0
f0111260:	50                   	push   %eax
f0111261:	e8 3a ec 01 00       	call   f012fea0 <realloc_block_FF>
f0111266:	83 c4 10             	add    $0x10,%esp
f0111269:	89 45 bc             	mov    %eax,-0x44(%ebp)
		uint32 block_size = get_block_size(startVAs[i*allocCntPerSize]) ;
f011126c:	8b 55 d0             	mov    -0x30(%ebp),%edx
f011126f:	89 d0                	mov    %edx,%eax
f0111271:	c1 e0 02             	shl    $0x2,%eax
f0111274:	01 d0                	add    %edx,%eax
f0111276:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011127d:	01 d0                	add    %edx,%eax
f011127f:	c1 e0 03             	shl    $0x3,%eax
f0111282:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f0111289:	83 ec 0c             	sub    $0xc,%esp
f011128c:	50                   	push   %eax
f011128d:	e8 e6 e5 01 00       	call   f012f878 <get_block_size>
f0111292:	83 c4 10             	add    $0x10,%esp
f0111295:	89 45 b8             	mov    %eax,-0x48(%ebp)
		if (block_size != allocSizes[i])
f0111298:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011129b:	8b 04 85 20 eb 18 f0 	mov    -0xfe714e0(,%eax,4),%eax
f01112a2:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f01112a5:	74 28                	je     f01112cf <test_realloc_block_FF+0x3de>
			panic("test_realloc_block_FF #4.%d: WRONG FREE! block size after free is not correct. Expected %d, Actual %d",i, allocSizes[i],block_size);
f01112a7:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01112aa:	8b 04 85 20 eb 18 f0 	mov    -0xfe714e0(,%eax,4),%eax
f01112b1:	83 ec 08             	sub    $0x8,%esp
f01112b4:	ff 75 b8             	pushl  -0x48(%ebp)
f01112b7:	50                   	push   %eax
f01112b8:	ff 75 d0             	pushl  -0x30(%ebp)
f01112bb:	68 98 68 13 f0       	push   $0xf0136898
f01112c0:	68 f3 04 00 00       	push   $0x4f3
f01112c5:	68 50 41 13 f0       	push   $0xf0134150
f01112ca:	e8 e1 ee fe ff       	call   f01001b0 <_panic>
		int8 block_status = is_free_block(startVAs[i*allocCntPerSize]) ;
f01112cf:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01112d2:	89 d0                	mov    %edx,%eax
f01112d4:	c1 e0 02             	shl    $0x2,%eax
f01112d7:	01 d0                	add    %edx,%eax
f01112d9:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01112e0:	01 d0                	add    %edx,%eax
f01112e2:	c1 e0 03             	shl    $0x3,%eax
f01112e5:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f01112ec:	83 ec 0c             	sub    $0xc,%esp
f01112ef:	50                   	push   %eax
f01112f0:	e8 99 e5 01 00       	call   f012f88e <is_free_block>
f01112f5:	83 c4 10             	add    $0x10,%esp
f01112f8:	88 45 b7             	mov    %al,-0x49(%ebp)
		if (block_status != 1)
f01112fb:	80 7d b7 01          	cmpb   $0x1,-0x49(%ebp)
f01112ff:	74 17                	je     f0111318 <test_realloc_block_FF+0x427>
			panic("test_realloc_block_FF #5.%d: WRONG FREE! block status (is_free) not equal 1 after freeing.", i);
f0111301:	ff 75 d0             	pushl  -0x30(%ebp)
f0111304:	68 00 69 13 f0       	push   $0xf0136900
f0111309:	68 f6 04 00 00       	push   $0x4f6
f011130e:	68 50 41 13 f0       	push   $0xf0134150
f0111313:	e8 98 ee fe ff       	call   f01001b0 <_panic>
		if(va != NULL)
f0111318:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f011131c:	74 17                	je     f0111335 <test_realloc_block_FF+0x444>
			panic("test_realloc_block_FF #6.%d: it should return NULL.", i);
f011131e:	ff 75 d0             	pushl  -0x30(%ebp)
f0111321:	68 5c 69 13 f0       	push   $0xf013695c
f0111326:	68 f8 04 00 00       	push   $0x4f8
f011132b:	68 50 41 13 f0       	push   $0xf0134150
f0111330:	e8 7b ee fe ff       	call   f01001b0 <_panic>
	//====================================================================//
	cprintf("2: Test calling realloc with SIZE = 0.[10%]\n\n") ;
	is_correct = 1;

	//Free set of blocks with different sizes (first block of each size)
	for (int i = 0; i < numOfAllocs; ++i)
f0111335:	ff 45 d0             	incl   -0x30(%ebp)
f0111338:	83 7d d0 06          	cmpl   $0x6,-0x30(%ebp)
f011133c:	0f 8e fc fe ff ff    	jle    f011123e <test_realloc_block_FF+0x34d>
		if(va != NULL)
			panic("test_realloc_block_FF #6.%d: it should return NULL.", i);
	}

	//test calling it with NULL & ZERO
	va = realloc_block_FF(NULL, 0);
f0111342:	83 ec 08             	sub    $0x8,%esp
f0111345:	6a 00                	push   $0x0
f0111347:	6a 00                	push   $0x0
f0111349:	e8 52 eb 01 00       	call   f012fea0 <realloc_block_FF>
f011134e:	83 c4 10             	add    $0x10,%esp
f0111351:	89 45 bc             	mov    %eax,-0x44(%ebp)
	if(va != NULL)
f0111354:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f0111358:	74 17                	je     f0111371 <test_realloc_block_FF+0x480>
		panic("test_realloc_block_FF #7: it should return NULL.");
f011135a:	83 ec 04             	sub    $0x4,%esp
f011135d:	68 90 69 13 f0       	push   $0xf0136990
f0111362:	68 fe 04 00 00       	push   $0x4fe
f0111367:	68 50 41 13 f0       	push   $0xf0134150
f011136c:	e8 3f ee fe ff       	call   f01001b0 <_panic>
	//====================================================================//
	/* Check stored data inside each allocated block*/
	for (int i = 0; i < idx; ++i)
f0111371:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f0111378:	eb 6b                	jmp    f01113e5 <test_realloc_block_FF+0x4f4>
	{
		if (i % allocCntPerSize == 0)
f011137a:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011137d:	b9 c8 00 00 00       	mov    $0xc8,%ecx
f0111382:	99                   	cltd   
f0111383:	f7 f9                	idiv   %ecx
f0111385:	89 d0                	mov    %edx,%eax
f0111387:	85 c0                	test   %eax,%eax
f0111389:	74 56                	je     f01113e1 <test_realloc_block_FF+0x4f0>
			continue;
		if (*(startVAs[i]) != i || *(midVAs[i]) != i ||	*(endVAs[i]) != i)
f011138b:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011138e:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f0111395:	66 8b 00             	mov    (%eax),%ax
f0111398:	98                   	cwtl   
f0111399:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011139c:	75 26                	jne    f01113c4 <test_realloc_block_FF+0x4d3>
f011139e:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01113a1:	8b 04 85 80 cf 2d f0 	mov    -0xfd23080(,%eax,4),%eax
f01113a8:	66 8b 00             	mov    (%eax),%ax
f01113ab:	98                   	cwtl   
f01113ac:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01113af:	75 13                	jne    f01113c4 <test_realloc_block_FF+0x4d3>
f01113b1:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01113b4:	8b 04 85 80 b9 2d f0 	mov    -0xfd24680(,%eax,4),%eax
f01113bb:	66 8b 00             	mov    (%eax),%ax
f01113be:	98                   	cwtl   
f01113bf:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01113c2:	74 1e                	je     f01113e2 <test_realloc_block_FF+0x4f1>
			panic("test_realloc_block_FF #8.%d: WRONG! content of the block is not correct. Expected %d",i, i);
f01113c4:	83 ec 0c             	sub    $0xc,%esp
f01113c7:	ff 75 cc             	pushl  -0x34(%ebp)
f01113ca:	ff 75 cc             	pushl  -0x34(%ebp)
f01113cd:	68 c4 69 13 f0       	push   $0xf01369c4
f01113d2:	68 06 05 00 00       	push   $0x506
f01113d7:	68 50 41 13 f0       	push   $0xf0134150
f01113dc:	e8 cf ed fe ff       	call   f01001b0 <_panic>
	//====================================================================//
	/* Check stored data inside each allocated block*/
	for (int i = 0; i < idx; ++i)
	{
		if (i % allocCntPerSize == 0)
			continue;
f01113e1:	90                   	nop
	va = realloc_block_FF(NULL, 0);
	if(va != NULL)
		panic("test_realloc_block_FF #7: it should return NULL.");
	//====================================================================//
	/* Check stored data inside each allocated block*/
	for (int i = 0; i < idx; ++i)
f01113e2:	ff 45 cc             	incl   -0x34(%ebp)
f01113e5:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01113e8:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f01113eb:	7c 8d                	jl     f011137a <test_realloc_block_FF+0x489>
			continue;
		if (*(startVAs[i]) != i || *(midVAs[i]) != i ||	*(endVAs[i]) != i)
			panic("test_realloc_block_FF #8.%d: WRONG! content of the block is not correct. Expected %d",i, i);
	}

	if (is_correct)
f01113ed:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01113f1:	74 04                	je     f01113f7 <test_realloc_block_FF+0x506>
	{
		eval += 10;
f01113f3:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)
	}

	//====================================================================//
	//[3] Test realloc with increased sizes
	//====================================================================//
	cprintf("3: Test calling realloc with increased sizes [50%].\n\n") ;
f01113f7:	83 ec 0c             	sub    $0xc,%esp
f01113fa:	68 1c 6a 13 f0       	push   $0xf0136a1c
f01113ff:	e8 2d fa fe ff       	call   f0100e31 <cprintf>
f0111404:	83 c4 10             	add    $0x10,%esp
	int blockIndex, block_size, block_status, old_size, new_size, expected_size, newBlockIndex;
	void* expected_va = NULL;
f0111407:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%ebp)
	//[3.1] reallocate in same place (NO relocate - split)
	cprintf("	3.1: reallocate in same place (NO relocate - split)\n\n") ;
f011140e:	83 ec 0c             	sub    $0xc,%esp
f0111411:	68 54 6a 13 f0       	push   $0xf0136a54
f0111416:	e8 16 fa fe ff       	call   f0100e31 <cprintf>
f011141b:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f011141e:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	{
		blockIndex = 4*allocCntPerSize - 1 ;
f0111425:	c7 45 ac 1f 03 00 00 	movl   $0x31f,-0x54(%ebp)
		new_size = allocSizes[3] /*12+16 B*/ + allocSizes[4]/2 /*2KB/2*/ - sizeOfMetaData();
f011142c:	a1 2c eb 18 f0       	mov    0xf018eb2c,%eax
f0111431:	8b 15 30 eb 18 f0    	mov    0xf018eb30,%edx
f0111437:	d1 ea                	shr    %edx
f0111439:	01 d0                	add    %edx,%eax
f011143b:	83 e8 10             	sub    $0x10,%eax
f011143e:	89 45 a8             	mov    %eax,-0x58(%ebp)
		va = realloc_block_FF(startVAs[blockIndex], new_size);
f0111441:	8b 55 a8             	mov    -0x58(%ebp),%edx
f0111444:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111447:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f011144e:	83 ec 08             	sub    $0x8,%esp
f0111451:	52                   	push   %edx
f0111452:	50                   	push   %eax
f0111453:	e8 48 ea 01 00       	call   f012fea0 <realloc_block_FF>
f0111458:	83 c4 10             	add    $0x10,%esp
f011145b:	89 45 bc             	mov    %eax,-0x44(%ebp)

		//check return address
		if(va == NULL || (va != startVAs[blockIndex]))
f011145e:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f0111462:	74 0f                	je     f0111473 <test_realloc_block_FF+0x582>
f0111464:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111467:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f011146e:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0111471:	74 25                	je     f0111498 <test_realloc_block_FF+0x5a7>
		{
			is_correct = 0;
f0111473:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #9.1: WRONG REALLOC - it return wrong address. Expected %x, Actual %x\n", startVAs[blockIndex] ,va);
f011147a:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011147d:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f0111484:	83 ec 04             	sub    $0x4,%esp
f0111487:	ff 75 bc             	pushl  -0x44(%ebp)
f011148a:	50                   	push   %eax
f011148b:	68 8c 6a 13 f0       	push   $0xf0136a8c
f0111490:	e8 9c f9 fe ff       	call   f0100e31 <cprintf>
f0111495:	83 c4 10             	add    $0x10,%esp
		}
		//check reallocated block size & status
		block_size = get_block_size(startVAs[blockIndex]) ;
f0111498:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011149b:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f01114a2:	83 ec 0c             	sub    $0xc,%esp
f01114a5:	50                   	push   %eax
f01114a6:	e8 cd e3 01 00       	call   f012f878 <get_block_size>
f01114ab:	83 c4 10             	add    $0x10,%esp
f01114ae:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		if (block_size != new_size + sizeOfMetaData())
f01114b1:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01114b4:	8d 50 10             	lea    0x10(%eax),%edx
f01114b7:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01114ba:	39 c2                	cmp    %eax,%edx
f01114bc:	74 21                	je     f01114df <test_realloc_block_FF+0x5ee>
		{
			is_correct = 0;
f01114be:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #9.2: WRONG REALLOC! block size after realloc is not correct. Expected %d, Actual %d\n",new_size + sizeOfMetaData(), block_size);
f01114c5:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01114c8:	83 c0 10             	add    $0x10,%eax
f01114cb:	83 ec 04             	sub    $0x4,%esp
f01114ce:	ff 75 a4             	pushl  -0x5c(%ebp)
f01114d1:	50                   	push   %eax
f01114d2:	68 ec 6a 13 f0       	push   $0xf0136aec
f01114d7:	e8 55 f9 fe ff       	call   f0100e31 <cprintf>
f01114dc:	83 c4 10             	add    $0x10,%esp
		}
		block_status = is_free_block(startVAs[blockIndex]) ;
f01114df:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01114e2:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f01114e9:	83 ec 0c             	sub    $0xc,%esp
f01114ec:	50                   	push   %eax
f01114ed:	e8 9c e3 01 00       	call   f012f88e <is_free_block>
f01114f2:	83 c4 10             	add    $0x10,%esp
f01114f5:	0f be c0             	movsbl %al,%eax
f01114f8:	89 45 a0             	mov    %eax,-0x60(%ebp)
		if (block_status != 0)
f01114fb:	83 7d a0 00          	cmpl   $0x0,-0x60(%ebp)
f01114ff:	74 17                	je     f0111518 <test_realloc_block_FF+0x627>
		{
			is_correct = 0;
f0111501:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #9.3: WRONG REALLOC! block status (is_free) not equal 0 after realloc.\n");
f0111508:	83 ec 0c             	sub    $0xc,%esp
f011150b:	68 58 6b 13 f0       	push   $0xf0136b58
f0111510:	e8 1c f9 fe ff       	call   f0100e31 <cprintf>
f0111515:	83 c4 10             	add    $0x10,%esp
		}
		//check vanishing block (if any)
		if (get_block_size(startVAs[blockIndex+1]) != 0 || is_free_block(startVAs[blockIndex+1]) != 0)
f0111518:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011151b:	40                   	inc    %eax
f011151c:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f0111523:	83 ec 0c             	sub    $0xc,%esp
f0111526:	50                   	push   %eax
f0111527:	e8 4c e3 01 00       	call   f012f878 <get_block_size>
f011152c:	83 c4 10             	add    $0x10,%esp
f011152f:	85 c0                	test   %eax,%eax
f0111531:	75 1b                	jne    f011154e <test_realloc_block_FF+0x65d>
f0111533:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111536:	40                   	inc    %eax
f0111537:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f011153e:	83 ec 0c             	sub    $0xc,%esp
f0111541:	50                   	push   %eax
f0111542:	e8 47 e3 01 00       	call   f012f88e <is_free_block>
f0111547:	83 c4 10             	add    $0x10,%esp
f011154a:	84 c0                	test   %al,%al
f011154c:	74 17                	je     f0111565 <test_realloc_block_FF+0x674>
		{
			is_correct = 0;
f011154e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #9.4: WRONG REALLOC! make sure to ZEROing the size & is_free values of the vanishing block.\n");
f0111555:	83 ec 0c             	sub    $0xc,%esp
f0111558:	68 b8 6b 13 f0       	push   $0xf0136bb8
f011155d:	e8 cf f8 fe ff       	call   f0100e31 <cprintf>
f0111562:	83 c4 10             	add    $0x10,%esp
		}
		//check content of reallocated block
		if (*(startVAs[blockIndex]) != blockIndex || *(midVAs[blockIndex]) != blockIndex ||	*(endVAs[blockIndex]) != blockIndex)
f0111565:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111568:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f011156f:	66 8b 00             	mov    (%eax),%ax
f0111572:	98                   	cwtl   
f0111573:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f0111576:	75 26                	jne    f011159e <test_realloc_block_FF+0x6ad>
f0111578:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011157b:	8b 04 85 80 cf 2d f0 	mov    -0xfd23080(,%eax,4),%eax
f0111582:	66 8b 00             	mov    (%eax),%ax
f0111585:	98                   	cwtl   
f0111586:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f0111589:	75 13                	jne    f011159e <test_realloc_block_FF+0x6ad>
f011158b:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011158e:	8b 04 85 80 b9 2d f0 	mov    -0xfd24680(,%eax,4),%eax
f0111595:	66 8b 00             	mov    (%eax),%ax
f0111598:	98                   	cwtl   
f0111599:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f011159c:	74 1a                	je     f01115b8 <test_realloc_block_FF+0x6c7>
		{
			is_correct = 0;
f011159e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #9.5: WRONG REALLOC! content of the block is not correct. Expected %d\n", blockIndex);
f01115a5:	83 ec 08             	sub    $0x8,%esp
f01115a8:	ff 75 ac             	pushl  -0x54(%ebp)
f01115ab:	68 2c 6c 13 f0       	push   $0xf0136c2c
f01115b0:	e8 7c f8 fe ff       	call   f0100e31 <cprintf>
f01115b5:	83 c4 10             	add    $0x10,%esp
		}
	}
	if (is_correct)
f01115b8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01115bc:	74 04                	je     f01115c2 <test_realloc_block_FF+0x6d1>
	{
		eval += 25;
f01115be:	83 45 f4 19          	addl   $0x19,-0xc(%ebp)
	}

	//[3.2] reallocate in same place (NO relocate - NO split)
	cprintf("	3.2: reallocate in same place (NO relocate - NO split)\n\n") ;
f01115c2:	83 ec 0c             	sub    $0xc,%esp
f01115c5:	68 8c 6c 13 f0       	push   $0xf0136c8c
f01115ca:	e8 62 f8 fe ff       	call   f0100e31 <cprintf>
f01115cf:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f01115d2:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	{
		blockIndex = 4*allocCntPerSize - 1 ;
f01115d9:	c7 45 ac 1f 03 00 00 	movl   $0x31f,-0x54(%ebp)
		new_size = allocSizes[3] /*12+16B + 2KB/2*/ + allocSizes[4]/2 /*2KB/2*/ - sizeOfMetaData();
f01115e0:	a1 2c eb 18 f0       	mov    0xf018eb2c,%eax
f01115e5:	8b 15 30 eb 18 f0    	mov    0xf018eb30,%edx
f01115eb:	d1 ea                	shr    %edx
f01115ed:	01 d0                	add    %edx,%eax
f01115ef:	83 e8 10             	sub    $0x10,%eax
f01115f2:	89 45 a8             	mov    %eax,-0x58(%ebp)
		va = realloc_block_FF(startVAs[blockIndex], new_size);
f01115f5:	8b 55 a8             	mov    -0x58(%ebp),%edx
f01115f8:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01115fb:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f0111602:	83 ec 08             	sub    $0x8,%esp
f0111605:	52                   	push   %edx
f0111606:	50                   	push   %eax
f0111607:	e8 94 e8 01 00       	call   f012fea0 <realloc_block_FF>
f011160c:	83 c4 10             	add    $0x10,%esp
f011160f:	89 45 bc             	mov    %eax,-0x44(%ebp)

		//check return address
		if(va == NULL || (va != startVAs[blockIndex]))
f0111612:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f0111616:	74 0f                	je     f0111627 <test_realloc_block_FF+0x736>
f0111618:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011161b:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f0111622:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0111625:	74 25                	je     f011164c <test_realloc_block_FF+0x75b>
		{
			is_correct = 0;
f0111627:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #10.1: WRONG REALLOC - it return wrong address. Expected %x, Actual %x\n", startVAs[blockIndex] ,va);
f011162e:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111631:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f0111638:	83 ec 04             	sub    $0x4,%esp
f011163b:	ff 75 bc             	pushl  -0x44(%ebp)
f011163e:	50                   	push   %eax
f011163f:	68 c8 6c 13 f0       	push   $0xf0136cc8
f0111644:	e8 e8 f7 fe ff       	call   f0100e31 <cprintf>
f0111649:	83 c4 10             	add    $0x10,%esp
		}
		//check reallocated block size & status
		block_size = get_block_size(startVAs[blockIndex]) ;
f011164c:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011164f:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f0111656:	83 ec 0c             	sub    $0xc,%esp
f0111659:	50                   	push   %eax
f011165a:	e8 19 e2 01 00       	call   f012f878 <get_block_size>
f011165f:	83 c4 10             	add    $0x10,%esp
f0111662:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		if (block_size != new_size + sizeOfMetaData())
f0111665:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0111668:	8d 50 10             	lea    0x10(%eax),%edx
f011166b:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011166e:	39 c2                	cmp    %eax,%edx
f0111670:	74 21                	je     f0111693 <test_realloc_block_FF+0x7a2>
		{
			is_correct = 0;
f0111672:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #10.2: WRONG REALLOC! block size after realloc is not correct. Expected %d, Actual %d\n",new_size + sizeOfMetaData(), block_size);
f0111679:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011167c:	83 c0 10             	add    $0x10,%eax
f011167f:	83 ec 04             	sub    $0x4,%esp
f0111682:	ff 75 a4             	pushl  -0x5c(%ebp)
f0111685:	50                   	push   %eax
f0111686:	68 28 6d 13 f0       	push   $0xf0136d28
f011168b:	e8 a1 f7 fe ff       	call   f0100e31 <cprintf>
f0111690:	83 c4 10             	add    $0x10,%esp
		}
		block_status = is_free_block(startVAs[blockIndex]) ;
f0111693:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111696:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f011169d:	83 ec 0c             	sub    $0xc,%esp
f01116a0:	50                   	push   %eax
f01116a1:	e8 e8 e1 01 00       	call   f012f88e <is_free_block>
f01116a6:	83 c4 10             	add    $0x10,%esp
f01116a9:	0f be c0             	movsbl %al,%eax
f01116ac:	89 45 a0             	mov    %eax,-0x60(%ebp)
		if (block_status != 0)
f01116af:	83 7d a0 00          	cmpl   $0x0,-0x60(%ebp)
f01116b3:	74 17                	je     f01116cc <test_realloc_block_FF+0x7db>
		{
			is_correct = 0;
f01116b5:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #10.3: WRONG REALLOC! block status (is_free) not equal 0 after realloc.\n");
f01116bc:	83 ec 0c             	sub    $0xc,%esp
f01116bf:	68 98 6d 13 f0       	push   $0xf0136d98
f01116c4:	e8 68 f7 fe ff       	call   f0100e31 <cprintf>
f01116c9:	83 c4 10             	add    $0x10,%esp
		}
		//check vanishing block (if any)
		if (get_block_size(startVAs[blockIndex+1]) != 0 || is_free_block(startVAs[blockIndex+1]) != 0)
f01116cc:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01116cf:	40                   	inc    %eax
f01116d0:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f01116d7:	83 ec 0c             	sub    $0xc,%esp
f01116da:	50                   	push   %eax
f01116db:	e8 98 e1 01 00       	call   f012f878 <get_block_size>
f01116e0:	83 c4 10             	add    $0x10,%esp
f01116e3:	85 c0                	test   %eax,%eax
f01116e5:	75 1b                	jne    f0111702 <test_realloc_block_FF+0x811>
f01116e7:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01116ea:	40                   	inc    %eax
f01116eb:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f01116f2:	83 ec 0c             	sub    $0xc,%esp
f01116f5:	50                   	push   %eax
f01116f6:	e8 93 e1 01 00       	call   f012f88e <is_free_block>
f01116fb:	83 c4 10             	add    $0x10,%esp
f01116fe:	84 c0                	test   %al,%al
f0111700:	74 17                	je     f0111719 <test_realloc_block_FF+0x828>
		{
			is_correct = 0;
f0111702:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #10.4: WRONG REALLOC! make sure to ZEROing the size & is_free values of the vanishing block.\n");
f0111709:	83 ec 0c             	sub    $0xc,%esp
f011170c:	68 f8 6d 13 f0       	push   $0xf0136df8
f0111711:	e8 1b f7 fe ff       	call   f0100e31 <cprintf>
f0111716:	83 c4 10             	add    $0x10,%esp
		}
		//check content of reallocated block
		if (*(startVAs[blockIndex]) != blockIndex || *(midVAs[blockIndex]) != blockIndex ||	*(endVAs[blockIndex]) != blockIndex)
f0111719:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011171c:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f0111723:	66 8b 00             	mov    (%eax),%ax
f0111726:	98                   	cwtl   
f0111727:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f011172a:	75 26                	jne    f0111752 <test_realloc_block_FF+0x861>
f011172c:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011172f:	8b 04 85 80 cf 2d f0 	mov    -0xfd23080(,%eax,4),%eax
f0111736:	66 8b 00             	mov    (%eax),%ax
f0111739:	98                   	cwtl   
f011173a:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f011173d:	75 13                	jne    f0111752 <test_realloc_block_FF+0x861>
f011173f:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111742:	8b 04 85 80 b9 2d f0 	mov    -0xfd24680(,%eax,4),%eax
f0111749:	66 8b 00             	mov    (%eax),%ax
f011174c:	98                   	cwtl   
f011174d:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f0111750:	74 1a                	je     f011176c <test_realloc_block_FF+0x87b>
		{
			is_correct = 0;
f0111752:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #10.5: WRONG REALLOC! content of the block is not correct. Expected %d\n", blockIndex);
f0111759:	83 ec 08             	sub    $0x8,%esp
f011175c:	ff 75 ac             	pushl  -0x54(%ebp)
f011175f:	68 6c 6e 13 f0       	push   $0xf0136e6c
f0111764:	e8 c8 f6 fe ff       	call   f0100e31 <cprintf>
f0111769:	83 c4 10             	add    $0x10,%esp
		}
	}
	if (is_correct)
f011176c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0111770:	74 04                	je     f0111776 <test_realloc_block_FF+0x885>
	{
		eval += 25;
f0111772:	83 45 f4 19          	addl   $0x19,-0xc(%ebp)
	}

	//[4] Test realloc with decreased sizes
	cprintf("4: Test calling realloc with decreased sizes.[30%]\n\n") ;
f0111776:	83 ec 0c             	sub    $0xc,%esp
f0111779:	68 cc 6e 13 f0       	push   $0xf0136ecc
f011177e:	e8 ae f6 fe ff       	call   f0100e31 <cprintf>
f0111783:	83 c4 10             	add    $0x10,%esp
	//[4.1] next block is full (NO coalesce)
	cprintf("	4.1: next block is full (NO coalesce)\n\n") ;
f0111786:	83 ec 0c             	sub    $0xc,%esp
f0111789:	68 04 6f 13 f0       	push   $0xf0136f04
f011178e:	e8 9e f6 fe ff       	call   f0100e31 <cprintf>
f0111793:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f0111796:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	{
		blockIndex = 0*allocCntPerSize + 1; /*4KB*/
f011179d:	c7 45 ac 01 00 00 00 	movl   $0x1,-0x54(%ebp)
		old_size = allocSizes[0] /*4KB*/;
f01117a4:	a1 20 eb 18 f0       	mov    0xf018eb20,%eax
f01117a9:	89 45 9c             	mov    %eax,-0x64(%ebp)
		new_size = old_size - 1*kilo - sizeOfMetaData();
f01117ac:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01117af:	2d 10 04 00 00       	sub    $0x410,%eax
f01117b4:	89 45 a8             	mov    %eax,-0x58(%ebp)
		//cprintf("REALLOCATE to size %d\n",new_size ) ;
		va = realloc_block_FF(startVAs[blockIndex], new_size);
f01117b7:	8b 55 a8             	mov    -0x58(%ebp),%edx
f01117ba:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01117bd:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f01117c4:	83 ec 08             	sub    $0x8,%esp
f01117c7:	52                   	push   %edx
f01117c8:	50                   	push   %eax
f01117c9:	e8 d2 e6 01 00       	call   f012fea0 <realloc_block_FF>
f01117ce:	83 c4 10             	add    $0x10,%esp
f01117d1:	89 45 bc             	mov    %eax,-0x44(%ebp)

		//check return address
		if(va == NULL || (va != startVAs[blockIndex]))
f01117d4:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f01117d8:	74 0f                	je     f01117e9 <test_realloc_block_FF+0x8f8>
f01117da:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01117dd:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f01117e4:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f01117e7:	74 25                	je     f011180e <test_realloc_block_FF+0x91d>
		{
			is_correct = 0;
f01117e9:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #14.1: WRONG REALLOC - it return wrong address. Expected %x, Actual %x\n", startVAs[blockIndex] ,va);
f01117f0:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01117f3:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f01117fa:	83 ec 04             	sub    $0x4,%esp
f01117fd:	ff 75 bc             	pushl  -0x44(%ebp)
f0111800:	50                   	push   %eax
f0111801:	68 30 6f 13 f0       	push   $0xf0136f30
f0111806:	e8 26 f6 fe ff       	call   f0100e31 <cprintf>
f011180b:	83 c4 10             	add    $0x10,%esp
		}
		//check reallocated block size & status
		block_size = get_block_size(startVAs[blockIndex]) ;
f011180e:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111811:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f0111818:	83 ec 0c             	sub    $0xc,%esp
f011181b:	50                   	push   %eax
f011181c:	e8 57 e0 01 00       	call   f012f878 <get_block_size>
f0111821:	83 c4 10             	add    $0x10,%esp
f0111824:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		if (block_size != new_size + sizeOfMetaData())
f0111827:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011182a:	8d 50 10             	lea    0x10(%eax),%edx
f011182d:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0111830:	39 c2                	cmp    %eax,%edx
f0111832:	74 21                	je     f0111855 <test_realloc_block_FF+0x964>
		{
			is_correct = 0;
f0111834:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #14.2: WRONG REALLOC! block size after realloc is not correct. Expected %d, Actual %d\n",new_size + sizeOfMetaData(), block_size);
f011183b:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011183e:	83 c0 10             	add    $0x10,%eax
f0111841:	83 ec 04             	sub    $0x4,%esp
f0111844:	ff 75 a4             	pushl  -0x5c(%ebp)
f0111847:	50                   	push   %eax
f0111848:	68 90 6f 13 f0       	push   $0xf0136f90
f011184d:	e8 df f5 fe ff       	call   f0100e31 <cprintf>
f0111852:	83 c4 10             	add    $0x10,%esp
		}
		block_status = is_free_block(startVAs[blockIndex]) ;
f0111855:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111858:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f011185f:	83 ec 0c             	sub    $0xc,%esp
f0111862:	50                   	push   %eax
f0111863:	e8 26 e0 01 00       	call   f012f88e <is_free_block>
f0111868:	83 c4 10             	add    $0x10,%esp
f011186b:	0f be c0             	movsbl %al,%eax
f011186e:	89 45 a0             	mov    %eax,-0x60(%ebp)
		if (block_status != 0)
f0111871:	83 7d a0 00          	cmpl   $0x0,-0x60(%ebp)
f0111875:	74 17                	je     f011188e <test_realloc_block_FF+0x99d>
		{
			is_correct = 0;
f0111877:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #14.3: WRONG REALLOC! block status (is_free) not equal 0 after realloc.\n");
f011187e:	83 ec 0c             	sub    $0xc,%esp
f0111881:	68 00 70 13 f0       	push   $0xf0137000
f0111886:	e8 a6 f5 fe ff       	call   f0100e31 <cprintf>
f011188b:	83 c4 10             	add    $0x10,%esp
		}
		//check new free block
		struct BlockMetaData *newBlkMetaData = (struct BlockMetaData *)(va + new_size);
f011188e:	8b 55 a8             	mov    -0x58(%ebp),%edx
f0111891:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0111894:	01 d0                	add    %edx,%eax
f0111896:	89 45 98             	mov    %eax,-0x68(%ebp)
		expected_size = 1*kilo ;
f0111899:	c7 45 94 00 04 00 00 	movl   $0x400,-0x6c(%ebp)
		if (newBlkMetaData->size != expected_size || newBlkMetaData->is_free != 1)
f01118a0:	8b 45 98             	mov    -0x68(%ebp),%eax
f01118a3:	8b 10                	mov    (%eax),%edx
f01118a5:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01118a8:	39 c2                	cmp    %eax,%edx
f01118aa:	75 0a                	jne    f01118b6 <test_realloc_block_FF+0x9c5>
f01118ac:	8b 45 98             	mov    -0x68(%ebp),%eax
f01118af:	8a 40 04             	mov    0x4(%eax),%al
f01118b2:	3c 01                	cmp    $0x1,%al
f01118b4:	74 20                	je     f01118d6 <test_realloc_block_FF+0x9e5>
		{
			is_correct = 0;
f01118b6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #14.4: WRONG REALLOC! newly created block is not correct... check it!. Expected %d, Actual %d\n", expected_size, newBlkMetaData->size);
f01118bd:	8b 45 98             	mov    -0x68(%ebp),%eax
f01118c0:	8b 00                	mov    (%eax),%eax
f01118c2:	83 ec 04             	sub    $0x4,%esp
f01118c5:	50                   	push   %eax
f01118c6:	ff 75 94             	pushl  -0x6c(%ebp)
f01118c9:	68 60 70 13 f0       	push   $0xf0137060
f01118ce:	e8 5e f5 fe ff       	call   f0100e31 <cprintf>
f01118d3:	83 c4 10             	add    $0x10,%esp
		}
		//check content of reallocated block
		if (*(startVAs[blockIndex]) != blockIndex || *(midVAs[blockIndex]) != blockIndex)
f01118d6:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01118d9:	8b 04 85 80 a3 2d f0 	mov    -0xfd25c80(,%eax,4),%eax
f01118e0:	66 8b 00             	mov    (%eax),%ax
f01118e3:	98                   	cwtl   
f01118e4:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f01118e7:	75 13                	jne    f01118fc <test_realloc_block_FF+0xa0b>
f01118e9:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01118ec:	8b 04 85 80 cf 2d f0 	mov    -0xfd23080(,%eax,4),%eax
f01118f3:	66 8b 00             	mov    (%eax),%ax
f01118f6:	98                   	cwtl   
f01118f7:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f01118fa:	74 1a                	je     f0111916 <test_realloc_block_FF+0xa25>
		{
			is_correct = 0;
f01118fc:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #14.5: WRONG REALLOC! content of the block is not correct. Expected %d\n", blockIndex);
f0111903:	83 ec 08             	sub    $0x8,%esp
f0111906:	ff 75 ac             	pushl  -0x54(%ebp)
f0111909:	68 d8 70 13 f0       	push   $0xf01370d8
f011190e:	e8 1e f5 fe ff       	call   f0100e31 <cprintf>
f0111913:	83 c4 10             	add    $0x10,%esp
		}
	}
	if (is_correct)
f0111916:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f011191a:	74 04                	je     f0111920 <test_realloc_block_FF+0xa2f>
	{
		eval += 30;
f011191c:	83 45 f4 1e          	addl   $0x1e,-0xc(%ebp)
	}


	cprintf("test realloc_block with FIRST FIT completed. Evaluation = %d%\n", eval);
f0111920:	83 ec 08             	sub    $0x8,%esp
f0111923:	ff 75 f4             	pushl  -0xc(%ebp)
f0111926:	68 38 71 13 f0       	push   $0xf0137138
f011192b:	e8 01 f5 fe ff       	call   f0100e31 <cprintf>
f0111930:	83 c4 10             	add    $0x10,%esp

}
f0111933:	90                   	nop
f0111934:	c9                   	leave  
f0111935:	c3                   	ret    

f0111936 <test_realloc_block_FF_COMPLETE>:


void test_realloc_block_FF_COMPLETE()
{
f0111936:	55                   	push   %ebp
f0111937:	89 e5                	mov    %esp,%ebp
f0111939:	83 ec 08             	sub    $0x8,%esp
#if USE_KHEAP
	panic("test_free_block: the kernel heap should be disabled. make sure USE_KHEAP = 0");
	return;
#endif

	panic("this is unseen test");
f011193c:	83 ec 04             	sub    $0x4,%esp
f011193f:	68 77 71 13 f0       	push   $0xf0137177
f0111944:	68 ae 05 00 00       	push   $0x5ae
f0111949:	68 50 41 13 f0       	push   $0xf0134150
f011194e:	e8 5d e8 fe ff       	call   f01001b0 <_panic>

f0111953 <sys_check_LRU_lists>:
#include <kern/tests/test_working_set.h>
#include <kern/proc/user_environment.h>

//2020
int sys_check_LRU_lists(uint32* active_list_content, uint32* second_list_content, int actual_active_list_size, int actual_second_list_size)
{
f0111953:	55                   	push   %ebp
f0111954:	89 e5                	mov    %esp,%ebp
f0111956:	83 ec 30             	sub    $0x30,%esp
	struct Env* env = curenv;
f0111959:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f011195e:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int active_list_validation = 1;
f0111961:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
	int second_list_validation = 1;
f0111968:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
	struct WorkingSetElement* ptr_WS_element;

	//1- Check active list content if not null
	if(active_list_content != NULL)
f011196f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0111973:	0f 84 a5 00 00 00    	je     f0111a1e <sys_check_LRU_lists+0xcb>
	{
		int idx_active_list = 0;
f0111979:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f0111980:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0111983:	8b 80 44 da 01 00    	mov    0x1da44(%eax),%eax
f0111989:	89 45 f4             	mov    %eax,-0xc(%ebp)
f011198c:	eb 4a                	jmp    f01119d8 <sys_check_LRU_lists+0x85>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) != ROUNDDOWN(active_list_content[idx_active_list], PAGE_SIZE))
f011198e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0111991:	8b 00                	mov    (%eax),%eax
f0111993:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0111996:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0111999:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f011199e:	89 c2                	mov    %eax,%edx
f01119a0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01119a3:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f01119aa:	8b 45 08             	mov    0x8(%ebp),%eax
f01119ad:	01 c8                	add    %ecx,%eax
f01119af:	8b 00                	mov    (%eax),%eax
f01119b1:	89 45 e0             	mov    %eax,-0x20(%ebp)
f01119b4:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01119b7:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01119bc:	39 c2                	cmp    %eax,%edx
f01119be:	74 09                	je     f01119c9 <sys_check_LRU_lists+0x76>
			{
				active_list_validation = 0;
f01119c0:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
				break;
f01119c7:	eb 3e                	jmp    f0111a07 <sys_check_LRU_lists+0xb4>
			}
			idx_active_list++;
f01119c9:	ff 45 f0             	incl   -0x10(%ebp)

	//1- Check active list content if not null
	if(active_list_content != NULL)
	{
		int idx_active_list = 0;
		LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f01119cc:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01119cf:	8b 80 4c da 01 00    	mov    0x1da4c(%eax),%eax
f01119d5:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01119d8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01119dc:	74 08                	je     f01119e6 <sys_check_LRU_lists+0x93>
f01119de:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01119e1:	8b 40 10             	mov    0x10(%eax),%eax
f01119e4:	eb 05                	jmp    f01119eb <sys_check_LRU_lists+0x98>
f01119e6:	b8 00 00 00 00       	mov    $0x0,%eax
f01119eb:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01119ee:	89 82 4c da 01 00    	mov    %eax,0x1da4c(%edx)
f01119f4:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01119f7:	8b 80 4c da 01 00    	mov    0x1da4c(%eax),%eax
f01119fd:	85 c0                	test   %eax,%eax
f01119ff:	75 8d                	jne    f011198e <sys_check_LRU_lists+0x3b>
f0111a01:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0111a05:	75 87                	jne    f011198e <sys_check_LRU_lists+0x3b>
				active_list_validation = 0;
				break;
			}
			idx_active_list++;
		}
		if(LIST_SIZE(&env->ActiveList) != actual_active_list_size)
f0111a07:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0111a0a:	8b 90 50 da 01 00    	mov    0x1da50(%eax),%edx
f0111a10:	8b 45 10             	mov    0x10(%ebp),%eax
f0111a13:	39 c2                	cmp    %eax,%edx
f0111a15:	74 07                	je     f0111a1e <sys_check_LRU_lists+0xcb>
		{
			active_list_validation = 0;
f0111a17:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

		}
	}

	//2- Check second chance list content if not null
	if(second_list_content != NULL)
f0111a1e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0111a22:	0f 84 a5 00 00 00    	je     f0111acd <sys_check_LRU_lists+0x17a>
	{
		int idx_second_list = 0;
f0111a28:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
		LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f0111a2f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0111a32:	8b 80 54 da 01 00    	mov    0x1da54(%eax),%eax
f0111a38:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0111a3b:	eb 4a                	jmp    f0111a87 <sys_check_LRU_lists+0x134>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) != ROUNDDOWN(second_list_content[idx_second_list], PAGE_SIZE))
f0111a3d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0111a40:	8b 00                	mov    (%eax),%eax
f0111a42:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0111a45:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0111a48:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0111a4d:	89 c2                	mov    %eax,%edx
f0111a4f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111a52:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f0111a59:	8b 45 0c             	mov    0xc(%ebp),%eax
f0111a5c:	01 c8                	add    %ecx,%eax
f0111a5e:	8b 00                	mov    (%eax),%eax
f0111a60:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0111a63:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0111a66:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0111a6b:	39 c2                	cmp    %eax,%edx
f0111a6d:	74 09                	je     f0111a78 <sys_check_LRU_lists+0x125>
			{
				second_list_validation = 0;
f0111a6f:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
				break;
f0111a76:	eb 3e                	jmp    f0111ab6 <sys_check_LRU_lists+0x163>
			}
			idx_second_list++;
f0111a78:	ff 45 ec             	incl   -0x14(%ebp)

	//2- Check second chance list content if not null
	if(second_list_content != NULL)
	{
		int idx_second_list = 0;
		LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f0111a7b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0111a7e:	8b 80 5c da 01 00    	mov    0x1da5c(%eax),%eax
f0111a84:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0111a87:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0111a8b:	74 08                	je     f0111a95 <sys_check_LRU_lists+0x142>
f0111a8d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0111a90:	8b 40 10             	mov    0x10(%eax),%eax
f0111a93:	eb 05                	jmp    f0111a9a <sys_check_LRU_lists+0x147>
f0111a95:	b8 00 00 00 00       	mov    $0x0,%eax
f0111a9a:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0111a9d:	89 82 5c da 01 00    	mov    %eax,0x1da5c(%edx)
f0111aa3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0111aa6:	8b 80 5c da 01 00    	mov    0x1da5c(%eax),%eax
f0111aac:	85 c0                	test   %eax,%eax
f0111aae:	75 8d                	jne    f0111a3d <sys_check_LRU_lists+0xea>
f0111ab0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0111ab4:	75 87                	jne    f0111a3d <sys_check_LRU_lists+0xea>
				second_list_validation = 0;
				break;
			}
			idx_second_list++;
		}
		if(LIST_SIZE(&env->SecondList) != actual_second_list_size)
f0111ab6:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0111ab9:	8b 90 60 da 01 00    	mov    0x1da60(%eax),%edx
f0111abf:	8b 45 14             	mov    0x14(%ebp),%eax
f0111ac2:	39 c2                	cmp    %eax,%edx
f0111ac4:	74 07                	je     f0111acd <sys_check_LRU_lists+0x17a>
			second_list_validation = 0;
f0111ac6:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	}
	return active_list_validation&second_list_validation;
f0111acd:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0111ad0:	23 45 f8             	and    -0x8(%ebp),%eax
}
f0111ad3:	c9                   	leave  
f0111ad4:	c3                   	ret    

f0111ad5 <sys_check_LRU_lists_free>:


//2020
int sys_check_LRU_lists_free(uint32* list_content, int list_size)
{
f0111ad5:	55                   	push   %ebp
f0111ad6:	89 e5                	mov    %esp,%ebp
f0111ad8:	83 ec 30             	sub    $0x30,%esp
	struct Env* env = curenv;
f0111adb:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f0111ae0:	89 45 ec             	mov    %eax,-0x14(%ebp)
	int list_validation_count = 0;
f0111ae3:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	struct WorkingSetElement* ptr_WS_element;

	LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f0111aea:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111aed:	8b 80 44 da 01 00    	mov    0x1da44(%eax),%eax
f0111af3:	89 45 f8             	mov    %eax,-0x8(%ebp)
f0111af6:	eb 65                	jmp    f0111b5d <sys_check_LRU_lists_free+0x88>
	{
		for(int var = 0; var < list_size; var++)
f0111af8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0111aff:	eb 3a                	jmp    f0111b3b <sys_check_LRU_lists_free+0x66>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) == ROUNDDOWN(list_content[var], PAGE_SIZE))
f0111b01:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0111b04:	8b 00                	mov    (%eax),%eax
f0111b06:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0111b09:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0111b0c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0111b11:	89 c2                	mov    %eax,%edx
f0111b13:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0111b16:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f0111b1d:	8b 45 08             	mov    0x8(%ebp),%eax
f0111b20:	01 c8                	add    %ecx,%eax
f0111b22:	8b 00                	mov    (%eax),%eax
f0111b24:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0111b27:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0111b2a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0111b2f:	39 c2                	cmp    %eax,%edx
f0111b31:	75 05                	jne    f0111b38 <sys_check_LRU_lists_free+0x63>
			{
				list_validation_count++;
f0111b33:	ff 45 fc             	incl   -0x4(%ebp)
				break;
f0111b36:	eb 0b                	jmp    f0111b43 <sys_check_LRU_lists_free+0x6e>
	int list_validation_count = 0;
	struct WorkingSetElement* ptr_WS_element;

	LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
	{
		for(int var = 0; var < list_size; var++)
f0111b38:	ff 45 f4             	incl   -0xc(%ebp)
f0111b3b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0111b3e:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0111b41:	7c be                	jl     f0111b01 <sys_check_LRU_lists_free+0x2c>
			{
				list_validation_count++;
				break;
			}
		}
		if(list_validation_count > 0)
f0111b43:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0111b47:	7e 08                	jle    f0111b51 <sys_check_LRU_lists_free+0x7c>
			return list_validation_count;
f0111b49:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0111b4c:	e9 ed 00 00 00       	jmp    f0111c3e <sys_check_LRU_lists_free+0x169>
{
	struct Env* env = curenv;
	int list_validation_count = 0;
	struct WorkingSetElement* ptr_WS_element;

	LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f0111b51:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111b54:	8b 80 4c da 01 00    	mov    0x1da4c(%eax),%eax
f0111b5a:	89 45 f8             	mov    %eax,-0x8(%ebp)
f0111b5d:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f0111b61:	74 08                	je     f0111b6b <sys_check_LRU_lists_free+0x96>
f0111b63:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0111b66:	8b 40 10             	mov    0x10(%eax),%eax
f0111b69:	eb 05                	jmp    f0111b70 <sys_check_LRU_lists_free+0x9b>
f0111b6b:	b8 00 00 00 00       	mov    $0x0,%eax
f0111b70:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0111b73:	89 82 4c da 01 00    	mov    %eax,0x1da4c(%edx)
f0111b79:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111b7c:	8b 80 4c da 01 00    	mov    0x1da4c(%eax),%eax
f0111b82:	85 c0                	test   %eax,%eax
f0111b84:	0f 85 6e ff ff ff    	jne    f0111af8 <sys_check_LRU_lists_free+0x23>
f0111b8a:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f0111b8e:	0f 85 64 ff ff ff    	jne    f0111af8 <sys_check_LRU_lists_free+0x23>
		if(list_validation_count > 0)
			return list_validation_count;
	}


	LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f0111b94:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111b97:	8b 80 54 da 01 00    	mov    0x1da54(%eax),%eax
f0111b9d:	89 45 f8             	mov    %eax,-0x8(%ebp)
f0111ba0:	eb 62                	jmp    f0111c04 <sys_check_LRU_lists_free+0x12f>
	{
		for(int var = 0; var < list_size; var++)
f0111ba2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0111ba9:	eb 3a                	jmp    f0111be5 <sys_check_LRU_lists_free+0x110>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) == ROUNDDOWN(list_content[var], PAGE_SIZE))
f0111bab:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0111bae:	8b 00                	mov    (%eax),%eax
f0111bb0:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0111bb3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0111bb6:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0111bbb:	89 c2                	mov    %eax,%edx
f0111bbd:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0111bc0:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f0111bc7:	8b 45 08             	mov    0x8(%ebp),%eax
f0111bca:	01 c8                	add    %ecx,%eax
f0111bcc:	8b 00                	mov    (%eax),%eax
f0111bce:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0111bd1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0111bd4:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0111bd9:	39 c2                	cmp    %eax,%edx
f0111bdb:	75 05                	jne    f0111be2 <sys_check_LRU_lists_free+0x10d>
			{
				list_validation_count++;
f0111bdd:	ff 45 fc             	incl   -0x4(%ebp)
				break;
f0111be0:	eb 0b                	jmp    f0111bed <sys_check_LRU_lists_free+0x118>
	}


	LIST_FOREACH(ptr_WS_element, &(env->SecondList))
	{
		for(int var = 0; var < list_size; var++)
f0111be2:	ff 45 f0             	incl   -0x10(%ebp)
f0111be5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0111be8:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0111beb:	7c be                	jl     f0111bab <sys_check_LRU_lists_free+0xd6>
			{
				list_validation_count++;
				break;
			}
		}
		if(list_validation_count > 0)
f0111bed:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0111bf1:	7e 05                	jle    f0111bf8 <sys_check_LRU_lists_free+0x123>
			return list_validation_count;
f0111bf3:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0111bf6:	eb 46                	jmp    f0111c3e <sys_check_LRU_lists_free+0x169>
		if(list_validation_count > 0)
			return list_validation_count;
	}


	LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f0111bf8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111bfb:	8b 80 5c da 01 00    	mov    0x1da5c(%eax),%eax
f0111c01:	89 45 f8             	mov    %eax,-0x8(%ebp)
f0111c04:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f0111c08:	74 08                	je     f0111c12 <sys_check_LRU_lists_free+0x13d>
f0111c0a:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0111c0d:	8b 40 10             	mov    0x10(%eax),%eax
f0111c10:	eb 05                	jmp    f0111c17 <sys_check_LRU_lists_free+0x142>
f0111c12:	b8 00 00 00 00       	mov    $0x0,%eax
f0111c17:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0111c1a:	89 82 5c da 01 00    	mov    %eax,0x1da5c(%edx)
f0111c20:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111c23:	8b 80 5c da 01 00    	mov    0x1da5c(%eax),%eax
f0111c29:	85 c0                	test   %eax,%eax
f0111c2b:	0f 85 71 ff ff ff    	jne    f0111ba2 <sys_check_LRU_lists_free+0xcd>
f0111c31:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f0111c35:	0f 85 67 ff ff ff    	jne    f0111ba2 <sys_check_LRU_lists_free+0xcd>
			return list_validation_count;

	}


	return list_validation_count;
f0111c3b:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f0111c3e:	c9                   	leave  
f0111c3f:	c3                   	ret    

f0111c40 <sys_check_WS_list>:

//2023
int sys_check_WS_list(uint32* WS_list_content, int actual_WS_list_size, uint32 last_WS_element_content, bool chk_in_order)
{
f0111c40:	55                   	push   %ebp
f0111c41:	89 e5                	mov    %esp,%ebp
f0111c43:	83 ec 08             	sub    $0x8,%esp
			}
		}
	}
	return WS_list_validation;
#else
	panic("sys_check_WS_list: this function is intended to be used when USE_KHEAP = 1");
f0111c46:	83 ec 04             	sub    $0x4,%esp
f0111c49:	68 8c 71 13 f0       	push   $0xf013718c
f0111c4e:	68 9c 00 00 00       	push   $0x9c
f0111c53:	68 d7 71 13 f0       	push   $0xf01371d7
f0111c58:	e8 53 e5 fe ff       	call   f01001b0 <_panic>

f0111c5d <TestAutoCompleteCommand>:
int CP(uint32* pd, uint32 va, uint32 ps, uint32 pc);
int CA(uint32 *ptr_dir, uint32 va);
int CPs(uint32 *ptr_dir, uint32 va, uint32 perms, uint32 which);
int CCP(uint32 *ptr_dir, uint32 ptr1, uint32 ptr2, uint32 size, int ref, uint32 dst_perms, uint32 dst_to_chk, uint32 src_perms, uint32 src_to_chk, uint8 chk_type);
int TestAutoCompleteCommand()
{
f0111c5d:	55                   	push   %ebp
f0111c5e:	89 e5                	mov    %esp,%ebp
f0111c60:	57                   	push   %edi
f0111c61:	56                   	push   %esi
f0111c62:	53                   	push   %ebx
f0111c63:	81 ec ac 01 00 00    	sub    $0x1ac,%esp
	cprintf("Automatic Testing of Autocomplete:\n");
f0111c69:	83 ec 0c             	sub    $0xc,%esp
f0111c6c:	68 f8 71 13 f0       	push   $0xf01371f8
f0111c71:	e8 bb f1 fe ff       	call   f0100e31 <cprintf>
f0111c76:	83 c4 10             	add    $0x10,%esp
	cprintf("\n========================\n");
f0111c79:	83 ec 0c             	sub    $0xc,%esp
f0111c7c:	68 1c 72 13 f0       	push   $0xf013721c
f0111c81:	e8 ab f1 fe ff       	call   f0100e31 <cprintf>
f0111c86:	83 c4 10             	add    $0x10,%esp
	//	cprintf("========================\n");
	//	cprintf("Q2 Test: manually try the test cases in the doc. \n..."
	//			"OR, you can do it automatically by un-commenting the code in this function, it should output the same results in the Examples exist in the MS1 ppt\n");
	//
	//	int retValue = 0;
	int i = 0;
f0111c89:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	//CASE1:
	//should execute the kernel_info command
	cprintf("==>Testing now AUTOCOMPLETE for: kernel_info\n");
f0111c90:	83 ec 0c             	sub    $0xc,%esp
f0111c93:	68 38 72 13 f0       	push   $0xf0137238
f0111c98:	e8 94 f1 fe ff       	call   f0100e31 <cprintf>
f0111c9d:	83 c4 10             	add    $0x10,%esp
	char cr0[100] = "kernel_info";
f0111ca0:	8d 45 80             	lea    -0x80(%ebp),%eax
f0111ca3:	bb f2 72 13 f0       	mov    $0xf01372f2,%ebx
f0111ca8:	ba 03 00 00 00       	mov    $0x3,%edx
f0111cad:	89 c7                	mov    %eax,%edi
f0111caf:	89 de                	mov    %ebx,%esi
f0111cb1:	89 d1                	mov    %edx,%ecx
f0111cb3:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f0111cb5:	8d 55 8c             	lea    -0x74(%ebp),%edx
f0111cb8:	b9 16 00 00 00       	mov    $0x16,%ecx
f0111cbd:	b8 00 00 00 00       	mov    $0x0,%eax
f0111cc2:	89 d7                	mov    %edx,%edi
f0111cc4:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr0) ;
f0111cc6:	83 ec 0c             	sub    $0xc,%esp
f0111cc9:	8d 45 80             	lea    -0x80(%ebp),%eax
f0111ccc:	50                   	push   %eax
f0111ccd:	e8 f1 fe fe ff       	call   f0101bc3 <execute_command>
f0111cd2:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f0111cd5:	83 ec 0c             	sub    $0xc,%esp
f0111cd8:	68 66 72 13 f0       	push   $0xf0137266
f0111cdd:	e8 4f f1 fe ff       	call   f0100e31 <cprintf>
f0111ce2:	83 c4 10             	add    $0x10,%esp

	//CASE2: should print the commands that start with he ---> Shall print (help)
	cprintf("==>Testing now AUTOCOMPLETE for: he\n");
f0111ce5:	83 ec 0c             	sub    $0xc,%esp
f0111ce8:	68 7c 72 13 f0       	push   $0xf013727c
f0111ced:	e8 3f f1 fe ff       	call   f0100e31 <cprintf>
f0111cf2:	83 c4 10             	add    $0x10,%esp
	char cr2[100] = "he";
f0111cf5:	c7 85 1c ff ff ff 68 	movl   $0x6568,-0xe4(%ebp)
f0111cfc:	65 00 00 
f0111cff:	8d 95 20 ff ff ff    	lea    -0xe0(%ebp),%edx
f0111d05:	b9 18 00 00 00       	mov    $0x18,%ecx
f0111d0a:	b8 00 00 00 00       	mov    $0x0,%eax
f0111d0f:	89 d7                	mov    %edx,%edi
f0111d11:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr2) ;
f0111d13:	83 ec 0c             	sub    $0xc,%esp
f0111d16:	8d 85 1c ff ff ff    	lea    -0xe4(%ebp),%eax
f0111d1c:	50                   	push   %eax
f0111d1d:	e8 a1 fe fe ff       	call   f0101bc3 <execute_command>
f0111d22:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f0111d25:	83 ec 0c             	sub    $0xc,%esp
f0111d28:	68 66 72 13 f0       	push   $0xf0137266
f0111d2d:	e8 ff f0 fe ff       	call   f0100e31 <cprintf>
f0111d32:	83 c4 10             	add    $0x10,%esp


	//CASE3: should print the commands that start with ru ---> Shall print (rum, rub, rut, run, runall) .. Each in a separate line
	cprintf("==>Testing now AUTOCOMPLETE for: ru\n");
f0111d35:	83 ec 0c             	sub    $0xc,%esp
f0111d38:	68 a4 72 13 f0       	push   $0xf01372a4
f0111d3d:	e8 ef f0 fe ff       	call   f0100e31 <cprintf>
f0111d42:	83 c4 10             	add    $0x10,%esp
	char cr3[100] = "ru";
f0111d45:	c7 85 b8 fe ff ff 72 	movl   $0x7572,-0x148(%ebp)
f0111d4c:	75 00 00 
f0111d4f:	8d 95 bc fe ff ff    	lea    -0x144(%ebp),%edx
f0111d55:	b9 18 00 00 00       	mov    $0x18,%ecx
f0111d5a:	b8 00 00 00 00       	mov    $0x0,%eax
f0111d5f:	89 d7                	mov    %edx,%edi
f0111d61:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr3) ;
f0111d63:	83 ec 0c             	sub    $0xc,%esp
f0111d66:	8d 85 b8 fe ff ff    	lea    -0x148(%ebp),%eax
f0111d6c:	50                   	push   %eax
f0111d6d:	e8 51 fe fe ff       	call   f0101bc3 <execute_command>
f0111d72:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f0111d75:	83 ec 0c             	sub    $0xc,%esp
f0111d78:	68 66 72 13 f0       	push   $0xf0137266
f0111d7d:	e8 af f0 fe ff       	call   f0100e31 <cprintf>
f0111d82:	83 c4 10             	add    $0x10,%esp

	//CASE4: should print unknown command
	cprintf("==>Testing now AUTOCOMPLETE for: smm\n");
f0111d85:	83 ec 0c             	sub    $0xc,%esp
f0111d88:	68 cc 72 13 f0       	push   $0xf01372cc
f0111d8d:	e8 9f f0 fe ff       	call   f0100e31 <cprintf>
f0111d92:	83 c4 10             	add    $0x10,%esp
	char cr4[100] = "smm";
f0111d95:	c7 85 54 fe ff ff 73 	movl   $0x6d6d73,-0x1ac(%ebp)
f0111d9c:	6d 6d 00 
f0111d9f:	8d 95 58 fe ff ff    	lea    -0x1a8(%ebp),%edx
f0111da5:	b9 18 00 00 00       	mov    $0x18,%ecx
f0111daa:	b8 00 00 00 00       	mov    $0x0,%eax
f0111daf:	89 d7                	mov    %edx,%edi
f0111db1:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr4) ;
f0111db3:	83 ec 0c             	sub    $0xc,%esp
f0111db6:	8d 85 54 fe ff ff    	lea    -0x1ac(%ebp),%eax
f0111dbc:	50                   	push   %eax
f0111dbd:	e8 01 fe fe ff       	call   f0101bc3 <execute_command>
f0111dc2:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f0111dc5:	83 ec 0c             	sub    $0xc,%esp
f0111dc8:	68 66 72 13 f0       	push   $0xf0137266
f0111dcd:	e8 5f f0 fe ff       	call   f0100e31 <cprintf>
f0111dd2:	83 c4 10             	add    $0x10,%esp
	return 0;
f0111dd5:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0111dda:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0111ddd:	5b                   	pop    %ebx
f0111dde:	5e                   	pop    %esi
f0111ddf:	5f                   	pop    %edi
f0111de0:	5d                   	pop    %ebp
f0111de1:	c3                   	ret    

f0111de2 <test_pt_set_page_permissions>:

//=====================================
// 1) TEST SET/CLEAR PAGE PERMISSIONS:
//=====================================
int test_pt_set_page_permissions()
{
f0111de2:	55                   	push   %ebp
f0111de3:	89 e5                	mov    %esp,%ebp
f0111de5:	83 ec 18             	sub    $0x18,%esp
	//Case 1: Check setting a permission
	uint32 va = 0xEF800000;
f0111de8:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	uint32 permissions_to_set = PERM_PRESENT;
f0111def:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	uint32 permissions_to_clear = 0;
f0111df6:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111dfd:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f0111e02:	ff 75 ec             	pushl  -0x14(%ebp)
f0111e05:	ff 75 f0             	pushl  -0x10(%ebp)
f0111e08:	ff 75 f4             	pushl  -0xc(%ebp)
f0111e0b:	50                   	push   %eax
f0111e0c:	e8 0e 62 ff ff       	call   f010801f <pt_set_page_permissions>
f0111e11:	83 c4 10             	add    $0x10,%esp
	int ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111e14:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f0111e19:	ff 75 ec             	pushl  -0x14(%ebp)
f0111e1c:	ff 75 f0             	pushl  -0x10(%ebp)
f0111e1f:	ff 75 f4             	pushl  -0xc(%ebp)
f0111e22:	50                   	push   %eax
f0111e23:	e8 b8 4d 00 00       	call   f0116be0 <CP>
f0111e28:	83 c4 10             	add    $0x10,%esp
f0111e2b:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0111e2e:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0111e32:	74 14                	je     f0111e48 <test_pt_set_page_permissions+0x66>
	{
		panic("[EVAL] #1 Set Permission Failed.\n");
f0111e34:	83 ec 04             	sub    $0x4,%esp
f0111e37:	68 58 73 13 f0       	push   $0xf0137358
f0111e3c:	6a 5a                	push   $0x5a
f0111e3e:	68 7a 73 13 f0       	push   $0xf013737a
f0111e43:	e8 68 e3 fe ff       	call   f01001b0 <_panic>
	}

	//Case 2: Check setting MORE THAN ONE permission
	va = 0xEF801000;
f0111e48:	c7 45 f4 00 10 80 ef 	movl   $0xef801000,-0xc(%ebp)
	permissions_to_set = PERM_MODIFIED|PERM_USER;
f0111e4f:	c7 45 f0 44 00 00 00 	movl   $0x44,-0x10(%ebp)
	permissions_to_clear = 0;
f0111e56:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111e5d:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f0111e62:	ff 75 ec             	pushl  -0x14(%ebp)
f0111e65:	ff 75 f0             	pushl  -0x10(%ebp)
f0111e68:	ff 75 f4             	pushl  -0xc(%ebp)
f0111e6b:	50                   	push   %eax
f0111e6c:	e8 ae 61 ff ff       	call   f010801f <pt_set_page_permissions>
f0111e71:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111e74:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f0111e79:	ff 75 ec             	pushl  -0x14(%ebp)
f0111e7c:	ff 75 f0             	pushl  -0x10(%ebp)
f0111e7f:	ff 75 f4             	pushl  -0xc(%ebp)
f0111e82:	50                   	push   %eax
f0111e83:	e8 58 4d 00 00       	call   f0116be0 <CP>
f0111e88:	83 c4 10             	add    $0x10,%esp
f0111e8b:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0111e8e:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0111e92:	74 14                	je     f0111ea8 <test_pt_set_page_permissions+0xc6>
	{
		panic("[EVAL] #2 Set Permission Failed.\n");
f0111e94:	83 ec 04             	sub    $0x4,%esp
f0111e97:	68 98 73 13 f0       	push   $0xf0137398
f0111e9c:	6a 66                	push   $0x66
f0111e9e:	68 7a 73 13 f0       	push   $0xf013737a
f0111ea3:	e8 08 e3 fe ff       	call   f01001b0 <_panic>
	}

	va = 0xEF800000;
f0111ea8:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	permissions_to_set = PERM_MODIFIED|PERM_USER|PERM_USED|PERM_PRESENT;
f0111eaf:	c7 45 f0 65 00 00 00 	movl   $0x65,-0x10(%ebp)
	permissions_to_clear = 0;
f0111eb6:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111ebd:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f0111ec2:	ff 75 ec             	pushl  -0x14(%ebp)
f0111ec5:	ff 75 f0             	pushl  -0x10(%ebp)
f0111ec8:	ff 75 f4             	pushl  -0xc(%ebp)
f0111ecb:	50                   	push   %eax
f0111ecc:	e8 4e 61 ff ff       	call   f010801f <pt_set_page_permissions>
f0111ed1:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111ed4:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f0111ed9:	ff 75 ec             	pushl  -0x14(%ebp)
f0111edc:	ff 75 f0             	pushl  -0x10(%ebp)
f0111edf:	ff 75 f4             	pushl  -0xc(%ebp)
f0111ee2:	50                   	push   %eax
f0111ee3:	e8 f8 4c 00 00       	call   f0116be0 <CP>
f0111ee8:	83 c4 10             	add    $0x10,%esp
f0111eeb:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0111eee:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0111ef2:	74 14                	je     f0111f08 <test_pt_set_page_permissions+0x126>
	{
		panic("[EVAL] #3 Set Permission Failed.\n");
f0111ef4:	83 ec 04             	sub    $0x4,%esp
f0111ef7:	68 bc 73 13 f0       	push   $0xf01373bc
f0111efc:	6a 71                	push   $0x71
f0111efe:	68 7a 73 13 f0       	push   $0xf013737a
f0111f03:	e8 a8 e2 fe ff       	call   f01001b0 <_panic>
	}

	//Case 3: Check clearing a permission
	va = 0xF0000000;
f0111f08:	c7 45 f4 00 00 00 f0 	movl   $0xf0000000,-0xc(%ebp)
	permissions_to_set = 0;
f0111f0f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	permissions_to_clear = PERM_PRESENT;
f0111f16:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111f1d:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f0111f22:	ff 75 ec             	pushl  -0x14(%ebp)
f0111f25:	ff 75 f0             	pushl  -0x10(%ebp)
f0111f28:	ff 75 f4             	pushl  -0xc(%ebp)
f0111f2b:	50                   	push   %eax
f0111f2c:	e8 ee 60 ff ff       	call   f010801f <pt_set_page_permissions>
f0111f31:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111f34:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f0111f39:	ff 75 ec             	pushl  -0x14(%ebp)
f0111f3c:	ff 75 f0             	pushl  -0x10(%ebp)
f0111f3f:	ff 75 f4             	pushl  -0xc(%ebp)
f0111f42:	50                   	push   %eax
f0111f43:	e8 98 4c 00 00       	call   f0116be0 <CP>
f0111f48:	83 c4 10             	add    $0x10,%esp
f0111f4b:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0111f4e:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0111f52:	74 14                	je     f0111f68 <test_pt_set_page_permissions+0x186>
	{
		panic("[EVAL] #4 Clear Permission Failed.\n");
f0111f54:	83 ec 04             	sub    $0x4,%esp
f0111f57:	68 e0 73 13 f0       	push   $0xf01373e0
f0111f5c:	6a 7d                	push   $0x7d
f0111f5e:	68 7a 73 13 f0       	push   $0xf013737a
f0111f63:	e8 48 e2 fe ff       	call   f01001b0 <_panic>
	}

	//Case 4: Check clearing MORE THAN ONE permission
	va = 0xEF800000;
f0111f68:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	permissions_to_set = 0;
f0111f6f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	permissions_to_clear = PERM_MODIFIED|PERM_USER;
f0111f76:	c7 45 ec 44 00 00 00 	movl   $0x44,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111f7d:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f0111f82:	ff 75 ec             	pushl  -0x14(%ebp)
f0111f85:	ff 75 f0             	pushl  -0x10(%ebp)
f0111f88:	ff 75 f4             	pushl  -0xc(%ebp)
f0111f8b:	50                   	push   %eax
f0111f8c:	e8 8e 60 ff ff       	call   f010801f <pt_set_page_permissions>
f0111f91:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111f94:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f0111f99:	ff 75 ec             	pushl  -0x14(%ebp)
f0111f9c:	ff 75 f0             	pushl  -0x10(%ebp)
f0111f9f:	ff 75 f4             	pushl  -0xc(%ebp)
f0111fa2:	50                   	push   %eax
f0111fa3:	e8 38 4c 00 00       	call   f0116be0 <CP>
f0111fa8:	83 c4 10             	add    $0x10,%esp
f0111fab:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0111fae:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0111fb2:	74 17                	je     f0111fcb <test_pt_set_page_permissions+0x1e9>
	{
		panic("[EVAL] #5 Clear Permission Failed.\n");
f0111fb4:	83 ec 04             	sub    $0x4,%esp
f0111fb7:	68 04 74 13 f0       	push   $0xf0137404
f0111fbc:	68 89 00 00 00       	push   $0x89
f0111fc1:	68 7a 73 13 f0       	push   $0xf013737a
f0111fc6:	e8 e5 e1 fe ff       	call   f01001b0 <_panic>
	}

	//Case 5: Check settiing & clearing MORE THAN ONE permission together
	va = 0xF0001000;
f0111fcb:	c7 45 f4 00 10 00 f0 	movl   $0xf0001000,-0xc(%ebp)
	permissions_to_set = PERM_USER|PERM_BUFFERED;
f0111fd2:	c7 45 f0 04 02 00 00 	movl   $0x204,-0x10(%ebp)
	permissions_to_clear = PERM_WRITEABLE|PERM_USED|PERM_MODIFIED;
f0111fd9:	c7 45 ec 62 00 00 00 	movl   $0x62,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111fe0:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f0111fe5:	ff 75 ec             	pushl  -0x14(%ebp)
f0111fe8:	ff 75 f0             	pushl  -0x10(%ebp)
f0111feb:	ff 75 f4             	pushl  -0xc(%ebp)
f0111fee:	50                   	push   %eax
f0111fef:	e8 2b 60 ff ff       	call   f010801f <pt_set_page_permissions>
f0111ff4:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111ff7:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f0111ffc:	ff 75 ec             	pushl  -0x14(%ebp)
f0111fff:	ff 75 f0             	pushl  -0x10(%ebp)
f0112002:	ff 75 f4             	pushl  -0xc(%ebp)
f0112005:	50                   	push   %eax
f0112006:	e8 d5 4b 00 00       	call   f0116be0 <CP>
f011200b:	83 c4 10             	add    $0x10,%esp
f011200e:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0112011:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0112015:	74 17                	je     f011202e <test_pt_set_page_permissions+0x24c>
	{
		panic("[EVAL] #6 Set & Clear Permission Failed.\n");
f0112017:	83 ec 04             	sub    $0x4,%esp
f011201a:	68 28 74 13 f0       	push   $0xf0137428
f011201f:	68 95 00 00 00       	push   $0x95
f0112024:	68 7a 73 13 f0       	push   $0xf013737a
f0112029:	e8 82 e1 fe ff       	call   f01001b0 <_panic>
	}

	cprintf("Congratulations!! test pt_set&clear_page_permissions completed successfully.\n");
f011202e:	83 ec 0c             	sub    $0xc,%esp
f0112031:	68 54 74 13 f0       	push   $0xf0137454
f0112036:	e8 f6 ed fe ff       	call   f0100e31 <cprintf>
f011203b:	83 c4 10             	add    $0x10,%esp
	return 0;
f011203e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0112043:	c9                   	leave  
f0112044:	c3                   	ret    

f0112045 <test_pt_set_page_permissions_invalid_va>:

int test_pt_set_page_permissions_invalid_va()
{
f0112045:	55                   	push   %ebp
f0112046:	89 e5                	mov    %esp,%ebp
f0112048:	83 ec 18             	sub    $0x18,%esp
	uint32 va = 0x0;
f011204b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 permissions_to_set = PERM_PRESENT;
f0112052:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	uint32 permissions_to_clear = 0;
f0112059:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0112060:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f0112065:	ff 75 ec             	pushl  -0x14(%ebp)
f0112068:	ff 75 f0             	pushl  -0x10(%ebp)
f011206b:	ff 75 f4             	pushl  -0xc(%ebp)
f011206e:	50                   	push   %eax
f011206f:	e8 ab 5f ff ff       	call   f010801f <pt_set_page_permissions>
f0112074:	83 c4 10             	add    $0x10,%esp
	panic("WRONG PANIC - This test shall panic with your error message. Check handling setting permissions of an invalid virtual address with non existing page table.");
f0112077:	83 ec 04             	sub    $0x4,%esp
f011207a:	68 a4 74 13 f0       	push   $0xf01374a4
f011207f:	68 a2 00 00 00       	push   $0xa2
f0112084:	68 7a 73 13 f0       	push   $0xf013737a
f0112089:	e8 22 e1 fe ff       	call   f01001b0 <_panic>

f011208e <test_pt_get_page_permissions>:

//=====================================
// 2) TEST GET PAGE PERMISSIONS:
//=====================================
int test_pt_get_page_permissions()
{
f011208e:	55                   	push   %ebp
f011208f:	89 e5                	mov    %esp,%ebp
f0112091:	83 ec 18             	sub    $0x18,%esp
	//Case 1: Check getting a permission of a non existing VA with NO table
	uint32 va = 0xeebfe000;
f0112094:	c7 45 f4 00 e0 bf ee 	movl   $0xeebfe000,-0xc(%ebp)
	int ret = pt_get_page_permissions(ptr_page_directory, va);
f011209b:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f01120a0:	83 ec 08             	sub    $0x8,%esp
f01120a3:	ff 75 f4             	pushl  -0xc(%ebp)
f01120a6:	50                   	push   %eax
f01120a7:	e8 37 60 ff ff       	call   f01080e3 <pt_get_page_permissions>
f01120ac:	83 c4 10             	add    $0x10,%esp
f01120af:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != -1)
f01120b2:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
f01120b6:	74 17                	je     f01120cf <test_pt_get_page_permissions+0x41>
	{
		panic("[EVAL] #1 Get Permission Failed.\n");
f01120b8:	83 ec 04             	sub    $0x4,%esp
f01120bb:	68 40 75 13 f0       	push   $0xf0137540
f01120c0:	68 b0 00 00 00       	push   $0xb0
f01120c5:	68 7a 73 13 f0       	push   $0xf013737a
f01120ca:	e8 e1 e0 fe ff       	call   f01001b0 <_panic>
	}

	//Case 2: Check getting a permission of a non existing VA with an existing table
	va = 0xEF800000;
f01120cf:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f01120d6:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f01120db:	83 ec 08             	sub    $0x8,%esp
f01120de:	ff 75 f4             	pushl  -0xc(%ebp)
f01120e1:	50                   	push   %eax
f01120e2:	e8 fc 5f ff ff       	call   f01080e3 <pt_get_page_permissions>
f01120e7:	83 c4 10             	add    $0x10,%esp
f01120ea:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 0)
f01120ed:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01120f1:	74 17                	je     f011210a <test_pt_get_page_permissions+0x7c>
	{
		panic("[EVAL] #2 Get Permission Failed.\n");
f01120f3:	83 ec 04             	sub    $0x4,%esp
f01120f6:	68 64 75 13 f0       	push   $0xf0137564
f01120fb:	68 b8 00 00 00       	push   $0xb8
f0112100:	68 7a 73 13 f0       	push   $0xf013737a
f0112105:	e8 a6 e0 fe ff       	call   f01001b0 <_panic>
	}

	//Case 3: Check getting a permission of an existing VA with an existing table
	va = 0xf0000000;
f011210a:	c7 45 f4 00 00 00 f0 	movl   $0xf0000000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f0112111:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f0112116:	83 ec 08             	sub    $0x8,%esp
f0112119:	ff 75 f4             	pushl  -0xc(%ebp)
f011211c:	50                   	push   %eax
f011211d:	e8 c1 5f ff ff       	call   f01080e3 <pt_get_page_permissions>
f0112122:	83 c4 10             	add    $0x10,%esp
f0112125:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 3)
f0112128:	83 7d f0 03          	cmpl   $0x3,-0x10(%ebp)
f011212c:	74 17                	je     f0112145 <test_pt_get_page_permissions+0xb7>
	{
		panic("[EVAL] #3 Get Permission Failed.\n");
f011212e:	83 ec 04             	sub    $0x4,%esp
f0112131:	68 88 75 13 f0       	push   $0xf0137588
f0112136:	68 c0 00 00 00       	push   $0xc0
f011213b:	68 7a 73 13 f0       	push   $0xf013737a
f0112140:	e8 6b e0 fe ff       	call   f01001b0 <_panic>
	}

	va = 0xF1000000;
f0112145:	c7 45 f4 00 00 00 f1 	movl   $0xf1000000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f011214c:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f0112151:	83 ec 08             	sub    $0x8,%esp
f0112154:	ff 75 f4             	pushl  -0xc(%ebp)
f0112157:	50                   	push   %eax
f0112158:	e8 86 5f ff ff       	call   f01080e3 <pt_get_page_permissions>
f011215d:	83 c4 10             	add    $0x10,%esp
f0112160:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 3)
f0112163:	83 7d f0 03          	cmpl   $0x3,-0x10(%ebp)
f0112167:	74 17                	je     f0112180 <test_pt_get_page_permissions+0xf2>
	{
		panic("[EVAL] #4 Get Permission Failed.\n");
f0112169:	83 ec 04             	sub    $0x4,%esp
f011216c:	68 ac 75 13 f0       	push   $0xf01375ac
f0112171:	68 c7 00 00 00       	push   $0xc7
f0112176:	68 7a 73 13 f0       	push   $0xf013737a
f011217b:	e8 30 e0 fe ff       	call   f01001b0 <_panic>
	}

	va = 0xF0001000;
f0112180:	c7 45 f4 00 10 00 f0 	movl   $0xf0001000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f0112187:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f011218c:	83 ec 08             	sub    $0x8,%esp
f011218f:	ff 75 f4             	pushl  -0xc(%ebp)
f0112192:	50                   	push   %eax
f0112193:	e8 4b 5f ff ff       	call   f01080e3 <pt_get_page_permissions>
f0112198:	83 c4 10             	add    $0x10,%esp
f011219b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 99)
f011219e:	83 7d f0 63          	cmpl   $0x63,-0x10(%ebp)
f01121a2:	74 17                	je     f01121bb <test_pt_get_page_permissions+0x12d>
	{
		panic("[EVAL] #5 Get Permission Failed.\n");
f01121a4:	83 ec 04             	sub    $0x4,%esp
f01121a7:	68 d0 75 13 f0       	push   $0xf01375d0
f01121ac:	68 ce 00 00 00       	push   $0xce
f01121b1:	68 7a 73 13 f0       	push   $0xf013737a
f01121b6:	e8 f5 df fe ff       	call   f01001b0 <_panic>
	}
	cprintf("Congratulations!! test pt_get_page_permissions completed successfully.\n");
f01121bb:	83 ec 0c             	sub    $0xc,%esp
f01121be:	68 f4 75 13 f0       	push   $0xf01375f4
f01121c3:	e8 69 ec fe ff       	call   f0100e31 <cprintf>
f01121c8:	83 c4 10             	add    $0x10,%esp
	return 0;
f01121cb:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01121d0:	c9                   	leave  
f01121d1:	c3                   	ret    

f01121d2 <test_pt_clear_page_table_entry>:

//=====================================
// 3) TEST CLEAR PAGE TABLE ENTRY:
//=====================================
int test_pt_clear_page_table_entry()
{
f01121d2:	55                   	push   %ebp
f01121d3:	89 e5                	mov    %esp,%ebp
f01121d5:	83 ec 18             	sub    $0x18,%esp
	uint32 va = 0xF1000000;
f01121d8:	c7 45 f4 00 00 00 f1 	movl   $0xf1000000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f01121df:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f01121e4:	83 ec 08             	sub    $0x8,%esp
f01121e7:	ff 75 f4             	pushl  -0xc(%ebp)
f01121ea:	50                   	push   %eax
f01121eb:	e8 3c 5f ff ff       	call   f010812c <pt_clear_page_table_entry>
f01121f0:	83 c4 10             	add    $0x10,%esp
	int ret = CE(ptr_page_directory, va);
f01121f3:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f01121f8:	83 ec 08             	sub    $0x8,%esp
f01121fb:	ff 75 f4             	pushl  -0xc(%ebp)
f01121fe:	50                   	push   %eax
f01121ff:	e8 38 49 00 00       	call   f0116b3c <CE>
f0112204:	83 c4 10             	add    $0x10,%esp
f0112207:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f011220a:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f011220e:	74 17                	je     f0112227 <test_pt_clear_page_table_entry+0x55>
	{
		panic("[EVAL] #1 Clear Page Table Entry Failed.\n");
f0112210:	83 ec 04             	sub    $0x4,%esp
f0112213:	68 3c 76 13 f0       	push   $0xf013763c
f0112218:	68 de 00 00 00       	push   $0xde
f011221d:	68 7a 73 13 f0       	push   $0xf013737a
f0112222:	e8 89 df fe ff       	call   f01001b0 <_panic>
	}

	va = 0xF0001000;
f0112227:	c7 45 f4 00 10 00 f0 	movl   $0xf0001000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f011222e:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f0112233:	83 ec 08             	sub    $0x8,%esp
f0112236:	ff 75 f4             	pushl  -0xc(%ebp)
f0112239:	50                   	push   %eax
f011223a:	e8 ed 5e ff ff       	call   f010812c <pt_clear_page_table_entry>
f011223f:	83 c4 10             	add    $0x10,%esp
	ret = CE(ptr_page_directory, va);
f0112242:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f0112247:	83 ec 08             	sub    $0x8,%esp
f011224a:	ff 75 f4             	pushl  -0xc(%ebp)
f011224d:	50                   	push   %eax
f011224e:	e8 e9 48 00 00       	call   f0116b3c <CE>
f0112253:	83 c4 10             	add    $0x10,%esp
f0112256:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f0112259:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f011225d:	74 17                	je     f0112276 <test_pt_clear_page_table_entry+0xa4>
	{
		panic("[EVAL] #2 Clear Page Table Entry Failed.\n");
f011225f:	83 ec 04             	sub    $0x4,%esp
f0112262:	68 68 76 13 f0       	push   $0xf0137668
f0112267:	68 e6 00 00 00       	push   $0xe6
f011226c:	68 7a 73 13 f0       	push   $0xf013737a
f0112271:	e8 3a df fe ff       	call   f01001b0 <_panic>
	}

	va = 0xEF800000;
f0112276:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f011227d:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f0112282:	83 ec 08             	sub    $0x8,%esp
f0112285:	ff 75 f4             	pushl  -0xc(%ebp)
f0112288:	50                   	push   %eax
f0112289:	e8 9e 5e ff ff       	call   f010812c <pt_clear_page_table_entry>
f011228e:	83 c4 10             	add    $0x10,%esp
	ret = CE(ptr_page_directory, va);
f0112291:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f0112296:	83 ec 08             	sub    $0x8,%esp
f0112299:	ff 75 f4             	pushl  -0xc(%ebp)
f011229c:	50                   	push   %eax
f011229d:	e8 9a 48 00 00       	call   f0116b3c <CE>
f01122a2:	83 c4 10             	add    $0x10,%esp
f01122a5:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f01122a8:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f01122ac:	74 17                	je     f01122c5 <test_pt_clear_page_table_entry+0xf3>
	{
		panic("[EVAL] #3 Clear Page Table Entry Failed.\n");
f01122ae:	83 ec 04             	sub    $0x4,%esp
f01122b1:	68 94 76 13 f0       	push   $0xf0137694
f01122b6:	68 ee 00 00 00       	push   $0xee
f01122bb:	68 7a 73 13 f0       	push   $0xf013737a
f01122c0:	e8 eb de fe ff       	call   f01001b0 <_panic>
	}

	va = 0xF0000000;
f01122c5:	c7 45 f4 00 00 00 f0 	movl   $0xf0000000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f01122cc:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f01122d1:	83 ec 08             	sub    $0x8,%esp
f01122d4:	ff 75 f4             	pushl  -0xc(%ebp)
f01122d7:	50                   	push   %eax
f01122d8:	e8 4f 5e ff ff       	call   f010812c <pt_clear_page_table_entry>
f01122dd:	83 c4 10             	add    $0x10,%esp
	ret = CE(ptr_page_directory, va);
f01122e0:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f01122e5:	83 ec 08             	sub    $0x8,%esp
f01122e8:	ff 75 f4             	pushl  -0xc(%ebp)
f01122eb:	50                   	push   %eax
f01122ec:	e8 4b 48 00 00       	call   f0116b3c <CE>
f01122f1:	83 c4 10             	add    $0x10,%esp
f01122f4:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f01122f7:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f01122fb:	74 17                	je     f0112314 <test_pt_clear_page_table_entry+0x142>
	{
		panic("[EVAL] #4 Clear Page Table Entry Failed.\n");
f01122fd:	83 ec 04             	sub    $0x4,%esp
f0112300:	68 c0 76 13 f0       	push   $0xf01376c0
f0112305:	68 f6 00 00 00       	push   $0xf6
f011230a:	68 7a 73 13 f0       	push   $0xf013737a
f011230f:	e8 9c de fe ff       	call   f01001b0 <_panic>
	}

	cprintf("Congratulations!! test pt_clear_page_table_entry completed successfully.\n");
f0112314:	83 ec 0c             	sub    $0xc,%esp
f0112317:	68 ec 76 13 f0       	push   $0xf01376ec
f011231c:	e8 10 eb fe ff       	call   f0100e31 <cprintf>
f0112321:	83 c4 10             	add    $0x10,%esp
	return 0;
f0112324:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0112329:	c9                   	leave  
f011232a:	c3                   	ret    

f011232b <test_pt_clear_page_table_entry_invalid_va>:

int test_pt_clear_page_table_entry_invalid_va()
{
f011232b:	55                   	push   %ebp
f011232c:	89 e5                	mov    %esp,%ebp
f011232e:	83 ec 18             	sub    $0x18,%esp
	uint32 va = 0x1000;
f0112331:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f0112338:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f011233d:	83 ec 08             	sub    $0x8,%esp
f0112340:	ff 75 f4             	pushl  -0xc(%ebp)
f0112343:	50                   	push   %eax
f0112344:	e8 e3 5d ff ff       	call   f010812c <pt_clear_page_table_entry>
f0112349:	83 c4 10             	add    $0x10,%esp
	panic("WRONG PANIC - This test shall panic with your error message. Check handling clearing the entry of an invalid virtual address non existing page table.");
f011234c:	83 ec 04             	sub    $0x4,%esp
f011234f:	68 38 77 13 f0       	push   $0xf0137738
f0112354:	68 01 01 00 00       	push   $0x101
f0112359:	68 7a 73 13 f0       	push   $0xf013737a
f011235e:	e8 4d de fe ff       	call   f01001b0 <_panic>

f0112363 <test_cut_paste_pages>:

//===============================
// 1) TEST CUT-PASTE PAGES:
//===============================
int test_cut_paste_pages()
{
f0112363:	55                   	push   %ebp
f0112364:	89 e5                	mov    %esp,%ebp
f0112366:	57                   	push   %edi
f0112367:	56                   	push   %esi
f0112368:	53                   	push   %ebx
f0112369:	81 ec ec 03 00 00    	sub    $0x3ec,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f011236f:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f0112375:	bb 7c 7a 13 f0       	mov    $0xf0137a7c,%ebx
f011237a:	ba 0f 00 00 00       	mov    $0xf,%edx
f011237f:	89 c7                	mov    %eax,%edi
f0112381:	89 de                	mov    %ebx,%esi
f0112383:	89 d1                	mov    %edx,%ecx
f0112385:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112387:	8d 95 6d ff ff ff    	lea    -0x93(%ebp),%edx
f011238d:	b9 23 00 00 00       	mov    $0x23,%ecx
f0112392:	b0 00                	mov    $0x0,%al
f0112394:	89 d7                	mov    %edx,%edi
f0112396:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0112398:	6a 00                	push   $0x0
f011239a:	6a 0a                	push   $0xa
f011239c:	6a 14                	push   $0x14
f011239e:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f01123a4:	50                   	push   %eax
f01123a5:	e8 21 69 ff ff       	call   f0108ccb <env_create>
f01123aa:	83 c4 10             	add    $0x10,%esp
f01123ad:	89 45 d8             	mov    %eax,-0x28(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f01123b0:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01123b3:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f01123b9:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	lcr3(env->env_cr3) ;
f01123bc:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01123bf:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f01123c5:	89 45 90             	mov    %eax,-0x70(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f01123c8:	8b 45 90             	mov    -0x70(%ebp),%eax
f01123cb:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f01123ce:	c7 85 4a ff ff ff 61 	movl   $0x20707561,-0xb6(%ebp)
f01123d5:	75 70 20 
f01123d8:	c7 85 4e ff ff ff 00 	movl   $0x0,-0xb2(%ebp)
f01123df:	00 00 00 
f01123e2:	8d 95 52 ff ff ff    	lea    -0xae(%ebp),%edx
f01123e8:	b9 03 00 00 00       	mov    $0x3,%ecx
f01123ed:	b8 00 00 00 00       	mov    $0x0,%eax
f01123f2:	89 d7                	mov    %edx,%edi
f01123f4:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f01123f6:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01123f9:	8b 40 4c             	mov    0x4c(%eax),%eax
f01123fc:	83 ec 08             	sub    $0x8,%esp
f01123ff:	8d 95 36 ff ff ff    	lea    -0xca(%ebp),%edx
f0112405:	52                   	push   %edx
f0112406:	50                   	push   %eax
f0112407:	e8 d7 ce 01 00       	call   f012f2e3 <ltostr>
f011240c:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f011240f:	83 ec 04             	sub    $0x4,%esp
f0112412:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0112418:	50                   	push   %eax
f0112419:	8d 85 36 ff ff ff    	lea    -0xca(%ebp),%eax
f011241f:	50                   	push   %eax
f0112420:	8d 85 4a ff ff ff    	lea    -0xb6(%ebp),%eax
f0112426:	50                   	push   %eax
f0112427:	e8 af cf 01 00       	call   f012f3db <strcconcat>
f011242c:	83 c4 10             	add    $0x10,%esp
	//===================================================
	int numOfArgs = 0;
f011242f:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
	char *args[MAX_ARGUMENTS] ;

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6;
	int kilo = 1024 ;
f0112436:	c7 45 c8 00 04 00 00 	movl   $0x400,-0x38(%ebp)
	int mega = 1024*1024 ;
f011243d:	c7 45 c4 00 00 10 00 	movl   $0x100000,-0x3c(%ebp)

	ClearUserSpace(proc_directory);
f0112444:	83 ec 0c             	sub    $0xc,%esp
f0112447:	ff 75 d4             	pushl  -0x2c(%ebp)
f011244a:	e8 ee 48 00 00       	call   f0116d3d <ClearUserSpace>
f011244f:	83 c4 10             	add    $0x10,%esp

	char ap1[100] ;strcconcat(aup_cmd, " 0x2800000", ap1); execute_command(ap1);
f0112452:	83 ec 04             	sub    $0x4,%esp
f0112455:	8d 85 60 fe ff ff    	lea    -0x1a0(%ebp),%eax
f011245b:	50                   	push   %eax
f011245c:	68 ce 77 13 f0       	push   $0xf01377ce
f0112461:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0112467:	50                   	push   %eax
f0112468:	e8 6e cf 01 00       	call   f012f3db <strcconcat>
f011246d:	83 c4 10             	add    $0x10,%esp
f0112470:	83 ec 0c             	sub    $0xc,%esp
f0112473:	8d 85 60 fe ff ff    	lea    -0x1a0(%ebp),%eax
f0112479:	50                   	push   %eax
f011247a:	e8 44 f7 fe ff       	call   f0101bc3 <execute_command>
f011247f:	83 c4 10             	add    $0x10,%esp
	char ap2[100] ;strcconcat(aup_cmd, " 0x2801000", ap2); execute_command(ap2);
f0112482:	83 ec 04             	sub    $0x4,%esp
f0112485:	8d 85 fc fd ff ff    	lea    -0x204(%ebp),%eax
f011248b:	50                   	push   %eax
f011248c:	68 d9 77 13 f0       	push   $0xf01377d9
f0112491:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0112497:	50                   	push   %eax
f0112498:	e8 3e cf 01 00       	call   f012f3db <strcconcat>
f011249d:	83 c4 10             	add    $0x10,%esp
f01124a0:	83 ec 0c             	sub    $0xc,%esp
f01124a3:	8d 85 fc fd ff ff    	lea    -0x204(%ebp),%eax
f01124a9:	50                   	push   %eax
f01124aa:	e8 14 f7 fe ff       	call   f0101bc3 <execute_command>
f01124af:	83 c4 10             	add    $0x10,%esp
	char ap3[100] ;strcconcat(aup_cmd, " 0x2802000", ap3); execute_command(ap3);
f01124b2:	83 ec 04             	sub    $0x4,%esp
f01124b5:	8d 85 98 fd ff ff    	lea    -0x268(%ebp),%eax
f01124bb:	50                   	push   %eax
f01124bc:	68 e4 77 13 f0       	push   $0xf01377e4
f01124c1:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f01124c7:	50                   	push   %eax
f01124c8:	e8 0e cf 01 00       	call   f012f3db <strcconcat>
f01124cd:	83 c4 10             	add    $0x10,%esp
f01124d0:	83 ec 0c             	sub    $0xc,%esp
f01124d3:	8d 85 98 fd ff ff    	lea    -0x268(%ebp),%eax
f01124d9:	50                   	push   %eax
f01124da:	e8 e4 f6 fe ff       	call   f0101bc3 <execute_command>
f01124df:	83 c4 10             	add    $0x10,%esp

	ptr1 = (char*)0x2800000; *ptr1 = 'a';
f01124e2:	c7 45 c0 00 00 80 02 	movl   $0x2800000,-0x40(%ebp)
f01124e9:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01124ec:	c6 00 61             	movb   $0x61,(%eax)
	ptr1 = (char*)0x28017FF; *ptr1 = 'b';
f01124ef:	c7 45 c0 ff 17 80 02 	movl   $0x28017ff,-0x40(%ebp)
f01124f6:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01124f9:	c6 00 62             	movb   $0x62,(%eax)
	ptr1 = (char*)0x2802FFF; *ptr1 = 'c';
f01124fc:	c7 45 c0 ff 2f 80 02 	movl   $0x2802fff,-0x40(%ebp)
f0112503:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112506:	c6 00 63             	movb   $0x63,(%eax)

	uint32 perms = GP(proc_directory, (uint32)ptr1);
f0112509:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011250c:	83 ec 08             	sub    $0x8,%esp
f011250f:	50                   	push   %eax
f0112510:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112513:	e8 8c 47 00 00       	call   f0116ca4 <GP>
f0112518:	83 c4 10             	add    $0x10,%esp
f011251b:	89 45 bc             	mov    %eax,-0x44(%ebp)

	int eval = 0;
f011251e:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	int correct = 1;
f0112525:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	int ff1 = sys_calculate_free_frames();
f011252c:	e8 95 a4 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0112531:	89 45 b8             	mov    %eax,-0x48(%ebp)

	/*=============================================*/
	/*PART I: Destination Pages Does NOT Exist 60% */
	/*=============================================*/
	cprintf("CASE I: Destination Pages Does NOT Exist [60%]\n") ;
f0112534:	83 ec 0c             	sub    $0xc,%esp
f0112537:	68 f0 77 13 f0       	push   $0xf01377f0
f011253c:	e8 f0 e8 fe ff       	call   f0100e31 <cprintf>
f0112541:	83 c4 10             	add    $0x10,%esp
	int ret = cut_paste_pages(proc_directory, 0x2800000, 0x2900000, 3) ;
f0112544:	6a 03                	push   $0x3
f0112546:	68 00 00 90 02       	push   $0x2900000
f011254b:	68 00 00 80 02       	push   $0x2800000
f0112550:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112553:	e8 35 66 ff ff       	call   f0108b8d <cut_paste_pages>
f0112558:	83 c4 10             	add    $0x10,%esp
f011255b:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	int ff2 = sys_calculate_free_frames();
f011255e:	e8 63 a4 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0112563:	89 45 b0             	mov    %eax,-0x50(%ebp)

	correct = 1 ;
f0112566:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	if (ret != 0 || ff1 != ff2)
f011256d:	83 7d b4 00          	cmpl   $0x0,-0x4c(%ebp)
f0112571:	75 08                	jne    f011257b <test_cut_paste_pages+0x218>
f0112573:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112576:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0112579:	74 2b                	je     f01125a6 <test_cut_paste_pages+0x243>
	{
		warn("[EVAL] cut_paste_pages: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, ff1 - ff2);
f011257b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011257e:	2b 45 b0             	sub    -0x50(%ebp),%eax
f0112581:	83 ec 0c             	sub    $0xc,%esp
f0112584:	50                   	push   %eax
f0112585:	ff 75 b4             	pushl  -0x4c(%ebp)
f0112588:	68 20 78 13 f0       	push   $0xf0137820
f011258d:	68 3a 01 00 00       	push   $0x13a
f0112592:	68 7a 73 13 f0       	push   $0xf013737a
f0112597:	e8 22 de fe ff       	call   f01003be <_warn>
f011259c:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f011259f:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 5 ;
f01125a6:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01125aa:	74 04                	je     f01125b0 <test_cut_paste_pages+0x24d>
f01125ac:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	correct = 1 ;
f01125b0:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CCP(proc_directory, 0x2800000, 0x2900000, 3*PAGE_SIZE, 1, perms, 0xFFF, 0, 0x001, CHK_CUT_PASTE) != 1)
f01125b7:	83 ec 08             	sub    $0x8,%esp
f01125ba:	6a 00                	push   $0x0
f01125bc:	6a 01                	push   $0x1
f01125be:	6a 00                	push   $0x0
f01125c0:	68 ff 0f 00 00       	push   $0xfff
f01125c5:	ff 75 bc             	pushl  -0x44(%ebp)
f01125c8:	6a 01                	push   $0x1
f01125ca:	68 00 30 00 00       	push   $0x3000
f01125cf:	68 00 00 90 02       	push   $0x2900000
f01125d4:	68 00 00 80 02       	push   $0x2800000
f01125d9:	ff 75 d4             	pushl  -0x2c(%ebp)
f01125dc:	e8 90 47 00 00       	call   f0116d71 <CCP>
f01125e1:	83 c4 30             	add    $0x30,%esp
f01125e4:	83 f8 01             	cmp    $0x1,%eax
f01125e7:	74 21                	je     f011260a <test_cut_paste_pages+0x2a7>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions and/or references\n");
f01125e9:	83 ec 04             	sub    $0x4,%esp
f01125ec:	68 74 78 13 f0       	push   $0xf0137874
f01125f1:	68 42 01 00 00       	push   $0x142
f01125f6:	68 7a 73 13 f0       	push   $0xf013737a
f01125fb:	e8 be dd fe ff       	call   f01003be <_warn>
f0112600:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f0112603:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 15 ;
f011260a:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011260e:	74 04                	je     f0112614 <test_cut_paste_pages+0x2b1>
f0112610:	83 45 e4 0f          	addl   $0xf,-0x1c(%ebp)
	correct = 1 ;
f0112614:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CB(proc_directory, 0x2900000, 0) && CB(proc_directory, 0x2901000, 0) && CB(proc_directory, 0x2902000, 0))
f011261b:	83 ec 04             	sub    $0x4,%esp
f011261e:	6a 00                	push   $0x0
f0112620:	68 00 00 90 02       	push   $0x2900000
f0112625:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112628:	e8 d5 41 00 00       	call   f0116802 <CB>
f011262d:	83 c4 10             	add    $0x10,%esp
f0112630:	85 c0                	test   %eax,%eax
f0112632:	0f 84 f6 00 00 00    	je     f011272e <test_cut_paste_pages+0x3cb>
f0112638:	83 ec 04             	sub    $0x4,%esp
f011263b:	6a 00                	push   $0x0
f011263d:	68 00 10 90 02       	push   $0x2901000
f0112642:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112645:	e8 b8 41 00 00       	call   f0116802 <CB>
f011264a:	83 c4 10             	add    $0x10,%esp
f011264d:	85 c0                	test   %eax,%eax
f011264f:	0f 84 d9 00 00 00    	je     f011272e <test_cut_paste_pages+0x3cb>
f0112655:	83 ec 04             	sub    $0x4,%esp
f0112658:	6a 00                	push   $0x0
f011265a:	68 00 20 90 02       	push   $0x2902000
f011265f:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112662:	e8 9b 41 00 00       	call   f0116802 <CB>
f0112667:	83 c4 10             	add    $0x10,%esp
f011266a:	85 c0                	test   %eax,%eax
f011266c:	0f 84 bc 00 00 00    	je     f011272e <test_cut_paste_pages+0x3cb>
	{
		ptr1 = (char*)0x2900000;
f0112672:	c7 45 c0 00 00 90 02 	movl   $0x2900000,-0x40(%ebp)
		ptr2 = (char*)0x29017FF;
f0112679:	c7 45 ac ff 17 90 02 	movl   $0x29017ff,-0x54(%ebp)
		ptr3 = (char*)0x2902FFF;
f0112680:	c7 45 a8 ff 2f 90 02 	movl   $0x2902fff,-0x58(%ebp)
		if ((*ptr1) != 'a' || (*ptr2) != 'b' || (*ptr3) != 'c')
f0112687:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011268a:	8a 00                	mov    (%eax),%al
f011268c:	3c 61                	cmp    $0x61,%al
f011268e:	75 12                	jne    f01126a2 <test_cut_paste_pages+0x33f>
f0112690:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0112693:	8a 00                	mov    (%eax),%al
f0112695:	3c 62                	cmp    $0x62,%al
f0112697:	75 09                	jne    f01126a2 <test_cut_paste_pages+0x33f>
f0112699:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011269c:	8a 00                	mov    (%eax),%al
f011269e:	3c 63                	cmp    $0x63,%al
f01126a0:	74 21                	je     f01126c3 <test_cut_paste_pages+0x360>
		{
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f01126a2:	83 ec 04             	sub    $0x4,%esp
f01126a5:	68 c0 78 13 f0       	push   $0xf01378c0
f01126aa:	68 4f 01 00 00       	push   $0x14f
f01126af:	68 7a 73 13 f0       	push   $0xf013737a
f01126b4:	e8 05 dd fe ff       	call   f01003be <_warn>
f01126b9:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01126bc:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f01126c3:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01126c7:	74 04                	je     f01126cd <test_cut_paste_pages+0x36a>
f01126c9:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01126cd:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (CB(proc_directory, 0x2901000, 1))
f01126d4:	83 ec 04             	sub    $0x4,%esp
f01126d7:	6a 01                	push   $0x1
f01126d9:	68 00 10 90 02       	push   $0x2901000
f01126de:	ff 75 d4             	pushl  -0x2c(%ebp)
f01126e1:	e8 1c 41 00 00       	call   f0116802 <CB>
f01126e6:	83 c4 10             	add    $0x10,%esp
f01126e9:	85 c0                	test   %eax,%eax
f01126eb:	74 41                	je     f011272e <test_cut_paste_pages+0x3cb>
		{
			*ptr2 = 'y';
f01126ed:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01126f0:	c6 00 79             	movb   $0x79,(%eax)
			if ((*ptr2) != 'y')
f01126f3:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01126f6:	8a 00                	mov    (%eax),%al
f01126f8:	3c 79                	cmp    $0x79,%al
f01126fa:	74 21                	je     f011271d <test_cut_paste_pages+0x3ba>
			{
				warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f01126fc:	83 ec 04             	sub    $0x4,%esp
f01126ff:	68 c0 78 13 f0       	push   $0xf01378c0
f0112704:	68 5a 01 00 00       	push   $0x15a
f0112709:	68 7a 73 13 f0       	push   $0xf013737a
f011270e:	e8 ab dc fe ff       	call   f01003be <_warn>
f0112713:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0112716:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			}
			if (correct) eval += 5 ;
f011271d:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112721:	74 04                	je     f0112727 <test_cut_paste_pages+0x3c4>
f0112723:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0112727:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		}
	}


	ff1 = ff2 ;
f011272e:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0112731:	89 45 b8             	mov    %eax,-0x48(%ebp)

	ret = cut_paste_pages(proc_directory, 0x2901000, 0x2BFF000, 2) ;
f0112734:	6a 02                	push   $0x2
f0112736:	68 00 f0 bf 02       	push   $0x2bff000
f011273b:	68 00 10 90 02       	push   $0x2901000
f0112740:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112743:	e8 45 64 ff ff       	call   f0108b8d <cut_paste_pages>
f0112748:	83 c4 10             	add    $0x10,%esp
f011274b:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	ff2 = sys_calculate_free_frames();
f011274e:	e8 73 a2 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0112753:	89 45 b0             	mov    %eax,-0x50(%ebp)

	if (ret != 0 || ff1 - ff2 != 1)
f0112756:	83 7d b4 00          	cmpl   $0x0,-0x4c(%ebp)
f011275a:	75 0b                	jne    f0112767 <test_cut_paste_pages+0x404>
f011275c:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011275f:	2b 45 b0             	sub    -0x50(%ebp),%eax
f0112762:	83 f8 01             	cmp    $0x1,%eax
f0112765:	74 2b                	je     f0112792 <test_cut_paste_pages+0x42f>
	{
		warn("[EVAL] cut_paste_pages: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, ff1 - ff2);
f0112767:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011276a:	2b 45 b0             	sub    -0x50(%ebp),%eax
f011276d:	83 ec 0c             	sub    $0xc,%esp
f0112770:	50                   	push   %eax
f0112771:	ff 75 b4             	pushl  -0x4c(%ebp)
f0112774:	68 20 78 13 f0       	push   $0xf0137820
f0112779:	68 6b 01 00 00       	push   $0x16b
f011277e:	68 7a 73 13 f0       	push   $0xf013737a
f0112783:	e8 36 dc fe ff       	call   f01003be <_warn>
f0112788:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f011278b:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f0112792:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112796:	74 04                	je     f011279c <test_cut_paste_pages+0x439>
f0112798:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f011279c:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CCP(proc_directory, 0x2901000, 0x2BFF000, 2*PAGE_SIZE, 1, perms , 0xFFF, 0, 0x001, CHK_CUT_PASTE) != 1)
f01127a3:	83 ec 08             	sub    $0x8,%esp
f01127a6:	6a 00                	push   $0x0
f01127a8:	6a 01                	push   $0x1
f01127aa:	6a 00                	push   $0x0
f01127ac:	68 ff 0f 00 00       	push   $0xfff
f01127b1:	ff 75 bc             	pushl  -0x44(%ebp)
f01127b4:	6a 01                	push   $0x1
f01127b6:	68 00 20 00 00       	push   $0x2000
f01127bb:	68 00 f0 bf 02       	push   $0x2bff000
f01127c0:	68 00 10 90 02       	push   $0x2901000
f01127c5:	ff 75 d4             	pushl  -0x2c(%ebp)
f01127c8:	e8 a4 45 00 00       	call   f0116d71 <CCP>
f01127cd:	83 c4 30             	add    $0x30,%esp
f01127d0:	83 f8 01             	cmp    $0x1,%eax
f01127d3:	74 21                	je     f01127f6 <test_cut_paste_pages+0x493>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions and/or references\n");
f01127d5:	83 ec 04             	sub    $0x4,%esp
f01127d8:	68 74 78 13 f0       	push   $0xf0137874
f01127dd:	68 73 01 00 00       	push   $0x173
f01127e2:	68 7a 73 13 f0       	push   $0xf013737a
f01127e7:	e8 d2 db fe ff       	call   f01003be <_warn>
f01127ec:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f01127ef:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f01127f6:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01127fa:	74 04                	je     f0112800 <test_cut_paste_pages+0x49d>
f01127fc:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f0112800:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CB(proc_directory, 0x2BFF7FF, 0) && CB(proc_directory, 0x2C00FFF, 0))
f0112807:	83 ec 04             	sub    $0x4,%esp
f011280a:	6a 00                	push   $0x0
f011280c:	68 ff f7 bf 02       	push   $0x2bff7ff
f0112811:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112814:	e8 e9 3f 00 00       	call   f0116802 <CB>
f0112819:	83 c4 10             	add    $0x10,%esp
f011281c:	85 c0                	test   %eax,%eax
f011281e:	74 6b                	je     f011288b <test_cut_paste_pages+0x528>
f0112820:	83 ec 04             	sub    $0x4,%esp
f0112823:	6a 00                	push   $0x0
f0112825:	68 ff 0f c0 02       	push   $0x2c00fff
f011282a:	ff 75 d4             	pushl  -0x2c(%ebp)
f011282d:	e8 d0 3f 00 00       	call   f0116802 <CB>
f0112832:	83 c4 10             	add    $0x10,%esp
f0112835:	85 c0                	test   %eax,%eax
f0112837:	74 52                	je     f011288b <test_cut_paste_pages+0x528>
	{
		ptr1 = (char*)0x2BFF7FF;
f0112839:	c7 45 c0 ff f7 bf 02 	movl   $0x2bff7ff,-0x40(%ebp)
		ptr2 = (char*)0x2C00FFF;
f0112840:	c7 45 ac ff 0f c0 02 	movl   $0x2c00fff,-0x54(%ebp)
		if ((*ptr1) != 'y' || (*ptr2) != 'c')
f0112847:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011284a:	8a 00                	mov    (%eax),%al
f011284c:	3c 79                	cmp    $0x79,%al
f011284e:	75 09                	jne    f0112859 <test_cut_paste_pages+0x4f6>
f0112850:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0112853:	8a 00                	mov    (%eax),%al
f0112855:	3c 63                	cmp    $0x63,%al
f0112857:	74 21                	je     f011287a <test_cut_paste_pages+0x517>
		{
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f0112859:	83 ec 04             	sub    $0x4,%esp
f011285c:	68 c0 78 13 f0       	push   $0xf01378c0
f0112861:	68 7f 01 00 00       	push   $0x17f
f0112866:	68 7a 73 13 f0       	push   $0xf013737a
f011286b:	e8 4e db fe ff       	call   f01003be <_warn>
f0112870:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112873:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f011287a:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011287e:	74 04                	je     f0112884 <test_cut_paste_pages+0x521>
f0112880:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0112884:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	}
	cprintf("CASE I: END\n") ;
f011288b:	83 ec 0c             	sub    $0xc,%esp
f011288e:	68 f9 78 13 f0       	push   $0xf01378f9
f0112893:	e8 99 e5 fe ff       	call   f0100e31 <cprintf>
f0112898:	83 c4 10             	add    $0x10,%esp

	/*========================================*/
	/*PART II: Destination Pages Exist 40%	  */
	/*========================================*/
	cprintf("\nCASE II: Destination Pages Exist [40%]\n") ;
f011289b:	83 ec 0c             	sub    $0xc,%esp
f011289e:	68 08 79 13 f0       	push   $0xf0137908
f01128a3:	e8 89 e5 fe ff       	call   f0100e31 <cprintf>
f01128a8:	83 c4 10             	add    $0x10,%esp

	char ap4[100] ;strcconcat(aup_cmd, " 0x1400000", ap4); execute_command(ap4);
f01128ab:	83 ec 04             	sub    $0x4,%esp
f01128ae:	8d 85 34 fd ff ff    	lea    -0x2cc(%ebp),%eax
f01128b4:	50                   	push   %eax
f01128b5:	68 31 79 13 f0       	push   $0xf0137931
f01128ba:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f01128c0:	50                   	push   %eax
f01128c1:	e8 15 cb 01 00       	call   f012f3db <strcconcat>
f01128c6:	83 c4 10             	add    $0x10,%esp
f01128c9:	83 ec 0c             	sub    $0xc,%esp
f01128cc:	8d 85 34 fd ff ff    	lea    -0x2cc(%ebp),%eax
f01128d2:	50                   	push   %eax
f01128d3:	e8 eb f2 fe ff       	call   f0101bc3 <execute_command>
f01128d8:	83 c4 10             	add    $0x10,%esp
	char ap5[100] ;strcconcat(aup_cmd, " 0x1401000", ap5); execute_command(ap5);
f01128db:	83 ec 04             	sub    $0x4,%esp
f01128de:	8d 85 d0 fc ff ff    	lea    -0x330(%ebp),%eax
f01128e4:	50                   	push   %eax
f01128e5:	68 3c 79 13 f0       	push   $0xf013793c
f01128ea:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f01128f0:	50                   	push   %eax
f01128f1:	e8 e5 ca 01 00       	call   f012f3db <strcconcat>
f01128f6:	83 c4 10             	add    $0x10,%esp
f01128f9:	83 ec 0c             	sub    $0xc,%esp
f01128fc:	8d 85 d0 fc ff ff    	lea    -0x330(%ebp),%eax
f0112902:	50                   	push   %eax
f0112903:	e8 bb f2 fe ff       	call   f0101bc3 <execute_command>
f0112908:	83 c4 10             	add    $0x10,%esp
	char ap6[100] ;strcconcat(aup_cmd, " 0x1402000", ap6); execute_command(ap6);
f011290b:	83 ec 04             	sub    $0x4,%esp
f011290e:	8d 85 6c fc ff ff    	lea    -0x394(%ebp),%eax
f0112914:	50                   	push   %eax
f0112915:	68 47 79 13 f0       	push   $0xf0137947
f011291a:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0112920:	50                   	push   %eax
f0112921:	e8 b5 ca 01 00       	call   f012f3db <strcconcat>
f0112926:	83 c4 10             	add    $0x10,%esp
f0112929:	83 ec 0c             	sub    $0xc,%esp
f011292c:	8d 85 6c fc ff ff    	lea    -0x394(%ebp),%eax
f0112932:	50                   	push   %eax
f0112933:	e8 8b f2 fe ff       	call   f0101bc3 <execute_command>
f0112938:	83 c4 10             	add    $0x10,%esp
	char ap7[100] ;strcconcat(aup_cmd, " 0x1C00000", ap7); execute_command(ap7);
f011293b:	83 ec 04             	sub    $0x4,%esp
f011293e:	8d 85 08 fc ff ff    	lea    -0x3f8(%ebp),%eax
f0112944:	50                   	push   %eax
f0112945:	68 52 79 13 f0       	push   $0xf0137952
f011294a:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0112950:	50                   	push   %eax
f0112951:	e8 85 ca 01 00       	call   f012f3db <strcconcat>
f0112956:	83 c4 10             	add    $0x10,%esp
f0112959:	83 ec 0c             	sub    $0xc,%esp
f011295c:	8d 85 08 fc ff ff    	lea    -0x3f8(%ebp),%eax
f0112962:	50                   	push   %eax
f0112963:	e8 5b f2 fe ff       	call   f0101bc3 <execute_command>
f0112968:	83 c4 10             	add    $0x10,%esp

	ptr1 = (char*)0x1400000; *ptr1 = 'a';
f011296b:	c7 45 c0 00 00 40 01 	movl   $0x1400000,-0x40(%ebp)
f0112972:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112975:	c6 00 61             	movb   $0x61,(%eax)
	ptr1 = (char*)0x14007FF; *ptr1 = 'b';
f0112978:	c7 45 c0 ff 07 40 01 	movl   $0x14007ff,-0x40(%ebp)
f011297f:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112982:	c6 00 62             	movb   $0x62,(%eax)
	ptr1 = (char*)0x1400FFF; *ptr1 = 'c';
f0112985:	c7 45 c0 ff 0f 40 01 	movl   $0x1400fff,-0x40(%ebp)
f011298c:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011298f:	c6 00 63             	movb   $0x63,(%eax)
	ptr1 = (char*)0x1C00000; *ptr1 = 'x';
f0112992:	c7 45 c0 00 00 c0 01 	movl   $0x1c00000,-0x40(%ebp)
f0112999:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011299c:	c6 00 78             	movb   $0x78,(%eax)
	ptr1 = (char*)0x1C007FF; *ptr1 = 'y';
f011299f:	c7 45 c0 ff 07 c0 01 	movl   $0x1c007ff,-0x40(%ebp)
f01129a6:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01129a9:	c6 00 79             	movb   $0x79,(%eax)
	ptr1 = (char*)0x1C00FFF; *ptr1 = 'z';
f01129ac:	c7 45 c0 ff 0f c0 01 	movl   $0x1c00fff,-0x40(%ebp)
f01129b3:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01129b6:	c6 00 7a             	movb   $0x7a,(%eax)
	uint32 srcp = GP(proc_directory, 0x1C00000) ;
f01129b9:	83 ec 08             	sub    $0x8,%esp
f01129bc:	68 00 00 c0 01       	push   $0x1c00000
f01129c1:	ff 75 d4             	pushl  -0x2c(%ebp)
f01129c4:	e8 db 42 00 00       	call   f0116ca4 <GP>
f01129c9:	83 c4 10             	add    $0x10,%esp
f01129cc:	89 45 a4             	mov    %eax,-0x5c(%ebp)
	uint32 dstp = GP(proc_directory, 0x1400000) ;
f01129cf:	83 ec 08             	sub    $0x8,%esp
f01129d2:	68 00 00 40 01       	push   $0x1400000
f01129d7:	ff 75 d4             	pushl  -0x2c(%ebp)
f01129da:	e8 c5 42 00 00       	call   f0116ca4 <GP>
f01129df:	83 c4 10             	add    $0x10,%esp
f01129e2:	89 45 a0             	mov    %eax,-0x60(%ebp)

	ff1 = sys_calculate_free_frames();
f01129e5:	e8 dc 9f ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f01129ea:	89 45 b8             	mov    %eax,-0x48(%ebp)

	ret = cut_paste_pages(proc_directory, 0x1C00000, 0x1400000, 1) ;
f01129ed:	6a 01                	push   $0x1
f01129ef:	68 00 00 40 01       	push   $0x1400000
f01129f4:	68 00 00 c0 01       	push   $0x1c00000
f01129f9:	ff 75 d4             	pushl  -0x2c(%ebp)
f01129fc:	e8 8c 61 ff ff       	call   f0108b8d <cut_paste_pages>
f0112a01:	83 c4 10             	add    $0x10,%esp
f0112a04:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	ff2 = sys_calculate_free_frames();
f0112a07:	e8 ba 9f ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0112a0c:	89 45 b0             	mov    %eax,-0x50(%ebp)

	if (ret != -1 || ff1 - ff2 != 0)
f0112a0f:	83 7d b4 ff          	cmpl   $0xffffffff,-0x4c(%ebp)
f0112a13:	75 08                	jne    f0112a1d <test_cut_paste_pages+0x6ba>
f0112a15:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112a18:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0112a1b:	74 2b                	je     f0112a48 <test_cut_paste_pages+0x6e5>
	{
		warn("[EVAL] cut_paste_pages: Failed (dest is exist... operation should be denied) ret=%d diff=%d\n", ret, ff1 - ff2);
f0112a1d:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112a20:	2b 45 b0             	sub    -0x50(%ebp),%eax
f0112a23:	83 ec 0c             	sub    $0xc,%esp
f0112a26:	50                   	push   %eax
f0112a27:	ff 75 b4             	pushl  -0x4c(%ebp)
f0112a2a:	68 60 79 13 f0       	push   $0xf0137960
f0112a2f:	68 a2 01 00 00       	push   $0x1a2
f0112a34:	68 7a 73 13 f0       	push   $0xf013737a
f0112a39:	e8 80 d9 fe ff       	call   f01003be <_warn>
f0112a3e:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f0112a41:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f0112a48:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112a4c:	74 04                	je     f0112a52 <test_cut_paste_pages+0x6ef>
f0112a4e:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f0112a52:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	int chk_cntnt = 1 ;
f0112a59:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
	if (CCP(proc_directory, 0x1C00000, 0x1400000, 1*PAGE_SIZE, 1, dstp , 0xFFF, srcp, 0xFFF, CHK_CUT_PASTE) != 1)
f0112a60:	83 ec 08             	sub    $0x8,%esp
f0112a63:	6a 00                	push   $0x0
f0112a65:	68 ff 0f 00 00       	push   $0xfff
f0112a6a:	ff 75 a4             	pushl  -0x5c(%ebp)
f0112a6d:	68 ff 0f 00 00       	push   $0xfff
f0112a72:	ff 75 a0             	pushl  -0x60(%ebp)
f0112a75:	6a 01                	push   $0x1
f0112a77:	68 00 10 00 00       	push   $0x1000
f0112a7c:	68 00 00 40 01       	push   $0x1400000
f0112a81:	68 00 00 c0 01       	push   $0x1c00000
f0112a86:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112a89:	e8 e3 42 00 00       	call   f0116d71 <CCP>
f0112a8e:	83 c4 30             	add    $0x30,%esp
f0112a91:	83 f8 01             	cmp    $0x1,%eax
f0112a94:	74 28                	je     f0112abe <test_cut_paste_pages+0x75b>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions and/or references\n");
f0112a96:	83 ec 04             	sub    $0x4,%esp
f0112a99:	68 74 78 13 f0       	push   $0xf0137874
f0112a9e:	68 ab 01 00 00       	push   $0x1ab
f0112aa3:	68 7a 73 13 f0       	push   $0xf013737a
f0112aa8:	e8 11 d9 fe ff       	call   f01003be <_warn>
f0112aad:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f0112ab0:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		chk_cntnt = 0;
f0112ab7:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	}
	if (correct) eval += 5 ;
f0112abe:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112ac2:	74 04                	je     f0112ac8 <test_cut_paste_pages+0x765>
f0112ac4:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	correct = 1 ;
f0112ac8:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (chk_cntnt)
f0112acf:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0112ad3:	0f 84 92 00 00 00    	je     f0112b6b <test_cut_paste_pages+0x808>
	{
		ptr1 = (char*)0x1400000;
f0112ad9:	c7 45 c0 00 00 40 01 	movl   $0x1400000,-0x40(%ebp)
		ptr2 = (char*)0x1C00000;
f0112ae0:	c7 45 ac 00 00 c0 01 	movl   $0x1c00000,-0x54(%ebp)
		ptr3 = (char*)0x14007FF;
f0112ae7:	c7 45 a8 ff 07 40 01 	movl   $0x14007ff,-0x58(%ebp)
		ptr4 = (char*)0x1C007FF;
f0112aee:	c7 45 9c ff 07 c0 01 	movl   $0x1c007ff,-0x64(%ebp)
		ptr5 = (char*)0x1400FFF;
f0112af5:	c7 45 98 ff 0f 40 01 	movl   $0x1400fff,-0x68(%ebp)
		ptr6 = (char*)0x1C00FFF;
f0112afc:	c7 45 94 ff 0f c0 01 	movl   $0x1c00fff,-0x6c(%ebp)
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f0112b03:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112b06:	8a 00                	mov    (%eax),%al
f0112b08:	3c 61                	cmp    $0x61,%al
f0112b0a:	75 2d                	jne    f0112b39 <test_cut_paste_pages+0x7d6>
f0112b0c:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0112b0f:	8a 00                	mov    (%eax),%al
f0112b11:	3c 78                	cmp    $0x78,%al
f0112b13:	75 24                	jne    f0112b39 <test_cut_paste_pages+0x7d6>
f0112b15:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0112b18:	8a 00                	mov    (%eax),%al
f0112b1a:	3c 62                	cmp    $0x62,%al
f0112b1c:	75 1b                	jne    f0112b39 <test_cut_paste_pages+0x7d6>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f0112b1e:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0112b21:	8a 00                	mov    (%eax),%al
		ptr2 = (char*)0x1C00000;
		ptr3 = (char*)0x14007FF;
		ptr4 = (char*)0x1C007FF;
		ptr5 = (char*)0x1400FFF;
		ptr6 = (char*)0x1C00FFF;
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f0112b23:	3c 79                	cmp    $0x79,%al
f0112b25:	75 12                	jne    f0112b39 <test_cut_paste_pages+0x7d6>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f0112b27:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112b2a:	8a 00                	mov    (%eax),%al
f0112b2c:	3c 63                	cmp    $0x63,%al
f0112b2e:	75 09                	jne    f0112b39 <test_cut_paste_pages+0x7d6>
f0112b30:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0112b33:	8a 00                	mov    (%eax),%al
f0112b35:	3c 7a                	cmp    $0x7a,%al
f0112b37:	74 21                	je     f0112b5a <test_cut_paste_pages+0x7f7>
		{
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f0112b39:	83 ec 04             	sub    $0x4,%esp
f0112b3c:	68 c0 78 13 f0       	push   $0xf01378c0
f0112b41:	68 bd 01 00 00       	push   $0x1bd
f0112b46:	68 7a 73 13 f0       	push   $0xf013737a
f0112b4b:	e8 6e d8 fe ff       	call   f01003be <_warn>
f0112b50:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112b53:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0112b5a:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112b5e:	74 04                	je     f0112b64 <test_cut_paste_pages+0x801>
f0112b60:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112b64:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	}

	ff1 = sys_calculate_free_frames();
f0112b6b:	e8 56 9e ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0112b70:	89 45 b8             	mov    %eax,-0x48(%ebp)

	ret = cut_paste_pages(proc_directory, 0x1400000, 0x1BFF000, 3) ;
f0112b73:	6a 03                	push   $0x3
f0112b75:	68 00 f0 bf 01       	push   $0x1bff000
f0112b7a:	68 00 00 40 01       	push   $0x1400000
f0112b7f:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112b82:	e8 06 60 ff ff       	call   f0108b8d <cut_paste_pages>
f0112b87:	83 c4 10             	add    $0x10,%esp
f0112b8a:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	ff2 = sys_calculate_free_frames();
f0112b8d:	e8 34 9e ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0112b92:	89 45 b0             	mov    %eax,-0x50(%ebp)

	if (ret != -1 || ff1 - ff2 != 0)
f0112b95:	83 7d b4 ff          	cmpl   $0xffffffff,-0x4c(%ebp)
f0112b99:	75 08                	jne    f0112ba3 <test_cut_paste_pages+0x840>
f0112b9b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112b9e:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0112ba1:	74 2b                	je     f0112bce <test_cut_paste_pages+0x86b>
	{
		warn("[EVAL] cut_paste_pages: Failed (dest is exist... operation should be denied) ret=%d diff=%d\n", ret, ff1 - ff2);
f0112ba3:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112ba6:	2b 45 b0             	sub    -0x50(%ebp),%eax
f0112ba9:	83 ec 0c             	sub    $0xc,%esp
f0112bac:	50                   	push   %eax
f0112bad:	ff 75 b4             	pushl  -0x4c(%ebp)
f0112bb0:	68 60 79 13 f0       	push   $0xf0137960
f0112bb5:	68 cc 01 00 00       	push   $0x1cc
f0112bba:	68 7a 73 13 f0       	push   $0xf013737a
f0112bbf:	e8 fa d7 fe ff       	call   f01003be <_warn>
f0112bc4:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f0112bc7:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f0112bce:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112bd2:	74 04                	je     f0112bd8 <test_cut_paste_pages+0x875>
f0112bd4:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f0112bd8:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	chk_cntnt = 1;
f0112bdf:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
	if (CB(proc_directory, 0x1400000, 0) != 1 || CB(proc_directory, 0x1401000, 0) != 1 || CB(proc_directory, 0x1402000, 0) != 1 ||
f0112be6:	83 ec 04             	sub    $0x4,%esp
f0112be9:	6a 00                	push   $0x0
f0112beb:	68 00 00 40 01       	push   $0x1400000
f0112bf0:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112bf3:	e8 0a 3c 00 00       	call   f0116802 <CB>
f0112bf8:	83 c4 10             	add    $0x10,%esp
f0112bfb:	83 f8 01             	cmp    $0x1,%eax
f0112bfe:	0f 85 80 00 00 00    	jne    f0112c84 <test_cut_paste_pages+0x921>
f0112c04:	83 ec 04             	sub    $0x4,%esp
f0112c07:	6a 00                	push   $0x0
f0112c09:	68 00 10 40 01       	push   $0x1401000
f0112c0e:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112c11:	e8 ec 3b 00 00       	call   f0116802 <CB>
f0112c16:	83 c4 10             	add    $0x10,%esp
f0112c19:	83 f8 01             	cmp    $0x1,%eax
f0112c1c:	75 66                	jne    f0112c84 <test_cut_paste_pages+0x921>
f0112c1e:	83 ec 04             	sub    $0x4,%esp
f0112c21:	6a 00                	push   $0x0
f0112c23:	68 00 20 40 01       	push   $0x1402000
f0112c28:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112c2b:	e8 d2 3b 00 00       	call   f0116802 <CB>
f0112c30:	83 c4 10             	add    $0x10,%esp
f0112c33:	83 f8 01             	cmp    $0x1,%eax
f0112c36:	75 4c                	jne    f0112c84 <test_cut_paste_pages+0x921>
			CB(proc_directory, 0x1BFF000, 0) != 0 || CB(proc_directory, 0x1C00000, 0) != 1 || CB(proc_directory, 0x1C01000, 0) != 0)
f0112c38:	83 ec 04             	sub    $0x4,%esp
f0112c3b:	6a 00                	push   $0x0
f0112c3d:	68 00 f0 bf 01       	push   $0x1bff000
f0112c42:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112c45:	e8 b8 3b 00 00       	call   f0116802 <CB>
f0112c4a:	83 c4 10             	add    $0x10,%esp
		correct = 0;
	}
	if (correct) eval += 10 ;
	correct = 1 ;
	chk_cntnt = 1;
	if (CB(proc_directory, 0x1400000, 0) != 1 || CB(proc_directory, 0x1401000, 0) != 1 || CB(proc_directory, 0x1402000, 0) != 1 ||
f0112c4d:	85 c0                	test   %eax,%eax
f0112c4f:	75 33                	jne    f0112c84 <test_cut_paste_pages+0x921>
			CB(proc_directory, 0x1BFF000, 0) != 0 || CB(proc_directory, 0x1C00000, 0) != 1 || CB(proc_directory, 0x1C01000, 0) != 0)
f0112c51:	83 ec 04             	sub    $0x4,%esp
f0112c54:	6a 00                	push   $0x0
f0112c56:	68 00 00 c0 01       	push   $0x1c00000
f0112c5b:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112c5e:	e8 9f 3b 00 00       	call   f0116802 <CB>
f0112c63:	83 c4 10             	add    $0x10,%esp
f0112c66:	83 f8 01             	cmp    $0x1,%eax
f0112c69:	75 19                	jne    f0112c84 <test_cut_paste_pages+0x921>
f0112c6b:	83 ec 04             	sub    $0x4,%esp
f0112c6e:	6a 00                	push   $0x0
f0112c70:	68 00 10 c0 01       	push   $0x1c01000
f0112c75:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112c78:	e8 85 3b 00 00       	call   f0116802 <CB>
f0112c7d:	83 c4 10             	add    $0x10,%esp
f0112c80:	85 c0                	test   %eax,%eax
f0112c82:	74 28                	je     f0112cac <test_cut_paste_pages+0x949>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions)\n");
f0112c84:	83 ec 04             	sub    $0x4,%esp
f0112c87:	68 c0 79 13 f0       	push   $0xf01379c0
f0112c8c:	68 d5 01 00 00       	push   $0x1d5
f0112c91:	68 7a 73 13 f0       	push   $0xf013737a
f0112c96:	e8 23 d7 fe ff       	call   f01003be <_warn>
f0112c9b:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f0112c9e:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		chk_cntnt = 0;
f0112ca5:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	}
	if (correct) eval += 5 ;
f0112cac:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112cb0:	74 04                	je     f0112cb6 <test_cut_paste_pages+0x953>
f0112cb2:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	correct = 1 ;
f0112cb6:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (chk_cntnt)
f0112cbd:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0112cc1:	0f 84 99 00 00 00    	je     f0112d60 <test_cut_paste_pages+0x9fd>
	{
		ptr1 = (char*)0x1400000;
f0112cc7:	c7 45 c0 00 00 40 01 	movl   $0x1400000,-0x40(%ebp)
		ptr2 = (char*)0x1C00000;
f0112cce:	c7 45 ac 00 00 c0 01 	movl   $0x1c00000,-0x54(%ebp)
		ptr3 = (char*)0x14007FF;
f0112cd5:	c7 45 a8 ff 07 40 01 	movl   $0x14007ff,-0x58(%ebp)
		ptr4 = (char*)0x1C007FF;
f0112cdc:	c7 45 9c ff 07 c0 01 	movl   $0x1c007ff,-0x64(%ebp)
		ptr5 = (char*)0x1400FFF;
f0112ce3:	c7 45 98 ff 0f 40 01 	movl   $0x1400fff,-0x68(%ebp)
		ptr6 = (char*)0x1C00FFF;
f0112cea:	c7 45 94 ff 0f c0 01 	movl   $0x1c00fff,-0x6c(%ebp)
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f0112cf1:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112cf4:	8a 00                	mov    (%eax),%al
f0112cf6:	3c 61                	cmp    $0x61,%al
f0112cf8:	75 2d                	jne    f0112d27 <test_cut_paste_pages+0x9c4>
f0112cfa:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0112cfd:	8a 00                	mov    (%eax),%al
f0112cff:	3c 78                	cmp    $0x78,%al
f0112d01:	75 24                	jne    f0112d27 <test_cut_paste_pages+0x9c4>
f0112d03:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0112d06:	8a 00                	mov    (%eax),%al
f0112d08:	3c 62                	cmp    $0x62,%al
f0112d0a:	75 1b                	jne    f0112d27 <test_cut_paste_pages+0x9c4>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f0112d0c:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0112d0f:	8a 00                	mov    (%eax),%al
		ptr2 = (char*)0x1C00000;
		ptr3 = (char*)0x14007FF;
		ptr4 = (char*)0x1C007FF;
		ptr5 = (char*)0x1400FFF;
		ptr6 = (char*)0x1C00FFF;
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f0112d11:	3c 79                	cmp    $0x79,%al
f0112d13:	75 12                	jne    f0112d27 <test_cut_paste_pages+0x9c4>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f0112d15:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112d18:	8a 00                	mov    (%eax),%al
f0112d1a:	3c 63                	cmp    $0x63,%al
f0112d1c:	75 09                	jne    f0112d27 <test_cut_paste_pages+0x9c4>
f0112d1e:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0112d21:	8a 00                	mov    (%eax),%al
f0112d23:	3c 7a                	cmp    $0x7a,%al
f0112d25:	74 28                	je     f0112d4f <test_cut_paste_pages+0x9ec>
		{
			correct = 0;
f0112d27:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chk_cntnt = 0;
f0112d2e:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f0112d35:	83 ec 04             	sub    $0x4,%esp
f0112d38:	68 c0 78 13 f0       	push   $0xf01378c0
f0112d3d:	68 e9 01 00 00       	push   $0x1e9
f0112d42:	68 7a 73 13 f0       	push   $0xf013737a
f0112d47:	e8 72 d6 fe ff       	call   f01003be <_warn>
f0112d4c:	83 c4 10             	add    $0x10,%esp
		}
		if (correct) eval += 5 ;
f0112d4f:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112d53:	74 04                	je     f0112d59 <test_cut_paste_pages+0x9f6>
f0112d55:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112d59:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	}

	cprintf("CASE II: END\n") ;
f0112d60:	83 ec 0c             	sub    $0xc,%esp
f0112d63:	68 f9 79 13 f0       	push   $0xf01379f9
f0112d68:	e8 c4 e0 fe ff       	call   f0100e31 <cprintf>
f0112d6d:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] cut_paste_pages: FINISHED. Evaluation = %d\n", eval);
f0112d70:	83 ec 08             	sub    $0x8,%esp
f0112d73:	ff 75 e4             	pushl  -0x1c(%ebp)
f0112d76:	68 08 7a 13 f0       	push   $0xf0137a08
f0112d7b:	e8 b1 e0 fe ff       	call   f0100e31 <cprintf>
f0112d80:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0112d83:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f0112d87:	75 10                	jne    f0112d99 <test_cut_paste_pages+0xa36>
		cprintf("Congratulations!! test cut_paste_pages completed successfully.\n");
f0112d89:	83 ec 0c             	sub    $0xc,%esp
f0112d8c:	68 3c 7a 13 f0       	push   $0xf0137a3c
f0112d91:	e8 9b e0 fe ff       	call   f0100e31 <cprintf>
f0112d96:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0112d99:	a1 70 be 2b f0       	mov    0xf02bbe70,%eax
f0112d9e:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0112da1:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0112da4:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0112da7:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0112dac:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0112daf:	5b                   	pop    %ebx
f0112db0:	5e                   	pop    %esi
f0112db1:	5f                   	pop    %edi
f0112db2:	5d                   	pop    %ebp
f0112db3:	c3                   	ret    

f0112db4 <test_copy_paste_chunk>:

//===============================
// 2) TEST COPY-PASTE CHUNK:
//===============================
int test_copy_paste_chunk()
{
f0112db4:	55                   	push   %ebp
f0112db5:	89 e5                	mov    %esp,%ebp
f0112db7:	57                   	push   %edi
f0112db8:	56                   	push   %esi
f0112db9:	53                   	push   %ebx
f0112dba:	81 ec ac 05 00 00    	sub    $0x5ac,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0112dc0:	8d 85 42 ff ff ff    	lea    -0xbe(%ebp),%eax
f0112dc6:	bb 7c 7a 13 f0       	mov    $0xf0137a7c,%ebx
f0112dcb:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112dd0:	89 c7                	mov    %eax,%edi
f0112dd2:	89 de                	mov    %ebx,%esi
f0112dd4:	89 d1                	mov    %edx,%ecx
f0112dd6:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112dd8:	8d 95 51 ff ff ff    	lea    -0xaf(%ebp),%edx
f0112dde:	b9 23 00 00 00       	mov    $0x23,%ecx
f0112de3:	b0 00                	mov    $0x0,%al
f0112de5:	89 d7                	mov    %edx,%edi
f0112de7:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0112de9:	6a 00                	push   $0x0
f0112deb:	6a 0a                	push   $0xa
f0112ded:	6a 14                	push   $0x14
f0112def:	8d 85 42 ff ff ff    	lea    -0xbe(%ebp),%eax
f0112df5:	50                   	push   %eax
f0112df6:	e8 d0 5e ff ff       	call   f0108ccb <env_create>
f0112dfb:	83 c4 10             	add    $0x10,%esp
f0112dfe:	89 45 d8             	mov    %eax,-0x28(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0112e01:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0112e04:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0112e0a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	lcr3(env->env_cr3) ;
f0112e0d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0112e10:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f0112e16:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0112e1c:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0112e22:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f0112e25:	c7 85 2e ff ff ff 61 	movl   $0x20707561,-0xd2(%ebp)
f0112e2c:	75 70 20 
f0112e2f:	c7 85 32 ff ff ff 00 	movl   $0x0,-0xce(%ebp)
f0112e36:	00 00 00 
f0112e39:	8d 95 36 ff ff ff    	lea    -0xca(%ebp),%edx
f0112e3f:	b9 03 00 00 00       	mov    $0x3,%ecx
f0112e44:	b8 00 00 00 00       	mov    $0x0,%eax
f0112e49:	89 d7                	mov    %edx,%edi
f0112e4b:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f0112e4d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0112e50:	8b 40 4c             	mov    0x4c(%eax),%eax
f0112e53:	83 ec 08             	sub    $0x8,%esp
f0112e56:	8d 95 1a ff ff ff    	lea    -0xe6(%ebp),%edx
f0112e5c:	52                   	push   %edx
f0112e5d:	50                   	push   %eax
f0112e5e:	e8 80 c4 01 00       	call   f012f2e3 <ltostr>
f0112e63:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f0112e66:	83 ec 04             	sub    $0x4,%esp
f0112e69:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112e6f:	50                   	push   %eax
f0112e70:	8d 85 1a ff ff ff    	lea    -0xe6(%ebp),%eax
f0112e76:	50                   	push   %eax
f0112e77:	8d 85 2e ff ff ff    	lea    -0xd2(%ebp),%eax
f0112e7d:	50                   	push   %eax
f0112e7e:	e8 58 c5 01 00       	call   f012f3db <strcconcat>
f0112e83:	83 c4 10             	add    $0x10,%esp
	//===================================================

	ClearUserSpace(proc_directory);
f0112e86:	83 ec 0c             	sub    $0xc,%esp
f0112e89:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112e8c:	e8 ac 3e 00 00       	call   f0116d3d <ClearUserSpace>
f0112e91:	83 c4 10             	add    $0x10,%esp
	int numOfArgs = 0;
f0112e94:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
	char *args[MAX_ARGUMENTS] ;
	uint32 res =0;
f0112e9b:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	uint32 eval = 0; int correct = 1 ;
f0112ea2:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f0112ea9:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	uint32 numOfFreeFramesBefore, numOfFreeFramesAfter ;
	char *ch1, *ch2, *ch3, *ch4, *ch5, *ch6, *ch7,*ch8, *ch9, *ch10, *ch11, *ch12 ;
	char tch[13];
	int kilo = 1024 ;
f0112eb0:	c7 45 c4 00 04 00 00 	movl   $0x400,-0x3c(%ebp)
	int mega = 1024*1024 ;
f0112eb7:	c7 45 c0 00 00 10 00 	movl   $0x100000,-0x40(%ebp)
	/*==================================================*/
	/*PART I: Destination page(s) exist & read only 20% */
	/*==================================================*/
	cprintf("\nCASE I: Destination page(s) exist & read only [20%]\n") ;
f0112ebe:	83 ec 0c             	sub    $0xc,%esp
f0112ec1:	68 b0 7a 13 f0       	push   $0xf0137ab0
f0112ec6:	e8 66 df fe ff       	call   f0100e31 <cprintf>
f0112ecb:	83 c4 10             	add    $0x10,%esp
	{
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x0", c1); execute_command(c1);
f0112ece:	83 ec 04             	sub    $0x4,%esp
f0112ed1:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0112ed7:	50                   	push   %eax
f0112ed8:	68 e6 7a 13 f0       	push   $0xf0137ae6
f0112edd:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112ee3:	50                   	push   %eax
f0112ee4:	e8 f2 c4 01 00       	call   f012f3db <strcconcat>
f0112ee9:	83 c4 10             	add    $0x10,%esp
f0112eec:	83 ec 0c             	sub    $0xc,%esp
f0112eef:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0112ef5:	50                   	push   %eax
f0112ef6:	e8 c8 ec fe ff       	call   f0101bc3 <execute_command>
f0112efb:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x1000", c1); execute_command(c1);
f0112efe:	83 ec 04             	sub    $0x4,%esp
f0112f01:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0112f07:	50                   	push   %eax
f0112f08:	68 eb 7a 13 f0       	push   $0xf0137aeb
f0112f0d:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112f13:	50                   	push   %eax
f0112f14:	e8 c2 c4 01 00       	call   f012f3db <strcconcat>
f0112f19:	83 c4 10             	add    $0x10,%esp
f0112f1c:	83 ec 0c             	sub    $0xc,%esp
f0112f1f:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0112f25:	50                   	push   %eax
f0112f26:	e8 98 ec fe ff       	call   f0101bc3 <execute_command>
f0112f2b:	83 c4 10             	add    $0x10,%esp
		/*write on 1st page*/
		char c2[100] = "wum 0x000000 a";execute_command(c2);
f0112f2e:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f0112f34:	bb f1 7d 13 f0       	mov    $0xf0137df1,%ebx
f0112f39:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112f3e:	89 c7                	mov    %eax,%edi
f0112f40:	89 de                	mov    %ebx,%esi
f0112f42:	89 d1                	mov    %edx,%ecx
f0112f44:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112f46:	8d 95 c2 fa ff ff    	lea    -0x53e(%ebp),%edx
f0112f4c:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112f51:	b0 00                	mov    $0x0,%al
f0112f53:	89 d7                	mov    %edx,%edi
f0112f55:	f3 aa                	rep stos %al,%es:(%edi)
f0112f57:	83 ec 0c             	sub    $0xc,%esp
f0112f5a:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f0112f60:	50                   	push   %eax
f0112f61:	e8 5d ec fe ff       	call   f0101bc3 <execute_command>
f0112f66:	83 c4 10             	add    $0x10,%esp
		char c3[100] = "wum 0x0007FF b";execute_command(c3);
f0112f69:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f0112f6f:	bb 55 7e 13 f0       	mov    $0xf0137e55,%ebx
f0112f74:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112f79:	89 c7                	mov    %eax,%edi
f0112f7b:	89 de                	mov    %ebx,%esi
f0112f7d:	89 d1                	mov    %edx,%ecx
f0112f7f:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112f81:	8d 95 26 fb ff ff    	lea    -0x4da(%ebp),%edx
f0112f87:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112f8c:	b0 00                	mov    $0x0,%al
f0112f8e:	89 d7                	mov    %edx,%edi
f0112f90:	f3 aa                	rep stos %al,%es:(%edi)
f0112f92:	83 ec 0c             	sub    $0xc,%esp
f0112f95:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f0112f9b:	50                   	push   %eax
f0112f9c:	e8 22 ec fe ff       	call   f0101bc3 <execute_command>
f0112fa1:	83 c4 10             	add    $0x10,%esp
		char c4[100] = "wum 0x000FFF c";execute_command(c4);
f0112fa4:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f0112faa:	bb b9 7e 13 f0       	mov    $0xf0137eb9,%ebx
f0112faf:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112fb4:	89 c7                	mov    %eax,%edi
f0112fb6:	89 de                	mov    %ebx,%esi
f0112fb8:	89 d1                	mov    %edx,%ecx
f0112fba:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112fbc:	8d 95 8a fb ff ff    	lea    -0x476(%ebp),%edx
f0112fc2:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112fc7:	b0 00                	mov    $0x0,%al
f0112fc9:	89 d7                	mov    %edx,%edi
f0112fcb:	f3 aa                	rep stos %al,%es:(%edi)
f0112fcd:	83 ec 0c             	sub    $0xc,%esp
f0112fd0:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f0112fd6:	50                   	push   %eax
f0112fd7:	e8 e7 eb fe ff       	call   f0101bc3 <execute_command>
f0112fdc:	83 c4 10             	add    $0x10,%esp
		/*write on 2nd page*/
		char c22[100] = "wum 0x001000 d";execute_command(c22);
f0112fdf:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f0112fe5:	bb 1d 7f 13 f0       	mov    $0xf0137f1d,%ebx
f0112fea:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112fef:	89 c7                	mov    %eax,%edi
f0112ff1:	89 de                	mov    %ebx,%esi
f0112ff3:	89 d1                	mov    %edx,%ecx
f0112ff5:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112ff7:	8d 95 ee fb ff ff    	lea    -0x412(%ebp),%edx
f0112ffd:	b9 55 00 00 00       	mov    $0x55,%ecx
f0113002:	b0 00                	mov    $0x0,%al
f0113004:	89 d7                	mov    %edx,%edi
f0113006:	f3 aa                	rep stos %al,%es:(%edi)
f0113008:	83 ec 0c             	sub    $0xc,%esp
f011300b:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f0113011:	50                   	push   %eax
f0113012:	e8 ac eb fe ff       	call   f0101bc3 <execute_command>
f0113017:	83 c4 10             	add    $0x10,%esp
		char c23[100] = "wum 0x0017FF e";execute_command(c23);
f011301a:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f0113020:	bb 81 7f 13 f0       	mov    $0xf0137f81,%ebx
f0113025:	ba 0f 00 00 00       	mov    $0xf,%edx
f011302a:	89 c7                	mov    %eax,%edi
f011302c:	89 de                	mov    %ebx,%esi
f011302e:	89 d1                	mov    %edx,%ecx
f0113030:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113032:	8d 95 52 fc ff ff    	lea    -0x3ae(%ebp),%edx
f0113038:	b9 55 00 00 00       	mov    $0x55,%ecx
f011303d:	b0 00                	mov    $0x0,%al
f011303f:	89 d7                	mov    %edx,%edi
f0113041:	f3 aa                	rep stos %al,%es:(%edi)
f0113043:	83 ec 0c             	sub    $0xc,%esp
f0113046:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f011304c:	50                   	push   %eax
f011304d:	e8 71 eb fe ff       	call   f0101bc3 <execute_command>
f0113052:	83 c4 10             	add    $0x10,%esp
		char c24[100] = "wum 0x001FFF f";execute_command(c24);
f0113055:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f011305b:	bb e5 7f 13 f0       	mov    $0xf0137fe5,%ebx
f0113060:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113065:	89 c7                	mov    %eax,%edi
f0113067:	89 de                	mov    %ebx,%esi
f0113069:	89 d1                	mov    %edx,%ecx
f011306b:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011306d:	8d 95 b6 fc ff ff    	lea    -0x34a(%ebp),%edx
f0113073:	b9 55 00 00 00       	mov    $0x55,%ecx
f0113078:	b0 00                	mov    $0x0,%al
f011307a:	89 d7                	mov    %edx,%edi
f011307c:	f3 aa                	rep stos %al,%es:(%edi)
f011307e:	83 ec 0c             	sub    $0xc,%esp
f0113081:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f0113087:	50                   	push   %eax
f0113088:	e8 36 eb fe ff       	call   f0101bc3 <execute_command>
f011308d:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c5[100] ;strcconcat(aup_cmd, " 0x100000", c5); execute_command(c5);
f0113090:	83 ec 04             	sub    $0x4,%esp
f0113093:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0113099:	50                   	push   %eax
f011309a:	68 f3 7a 13 f0       	push   $0xf0137af3
f011309f:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f01130a5:	50                   	push   %eax
f01130a6:	e8 30 c3 01 00       	call   f012f3db <strcconcat>
f01130ab:	83 c4 10             	add    $0x10,%esp
f01130ae:	83 ec 0c             	sub    $0xc,%esp
f01130b1:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01130b7:	50                   	push   %eax
f01130b8:	e8 06 eb fe ff       	call   f0101bc3 <execute_command>
f01130bd:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x101000 r", c5); execute_command(c5);
f01130c0:	83 ec 04             	sub    $0x4,%esp
f01130c3:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01130c9:	50                   	push   %eax
f01130ca:	68 fd 7a 13 f0       	push   $0xf0137afd
f01130cf:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f01130d5:	50                   	push   %eax
f01130d6:	e8 00 c3 01 00       	call   f012f3db <strcconcat>
f01130db:	83 c4 10             	add    $0x10,%esp
f01130de:	83 ec 0c             	sub    $0xc,%esp
f01130e1:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01130e7:	50                   	push   %eax
f01130e8:	e8 d6 ea fe ff       	call   f0101bc3 <execute_command>
f01130ed:	83 c4 10             	add    $0x10,%esp
		char c6[100] = "wum 0x100000 x";execute_command(c6);
f01130f0:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f01130f6:	bb 49 80 13 f0       	mov    $0xf0138049,%ebx
f01130fb:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113100:	89 c7                	mov    %eax,%edi
f0113102:	89 de                	mov    %ebx,%esi
f0113104:	89 d1                	mov    %edx,%ecx
f0113106:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113108:	8d 95 7e fd ff ff    	lea    -0x282(%ebp),%edx
f011310e:	b9 55 00 00 00       	mov    $0x55,%ecx
f0113113:	b0 00                	mov    $0x0,%al
f0113115:	89 d7                	mov    %edx,%edi
f0113117:	f3 aa                	rep stos %al,%es:(%edi)
f0113119:	83 ec 0c             	sub    $0xc,%esp
f011311c:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0113122:	50                   	push   %eax
f0113123:	e8 9b ea fe ff       	call   f0101bc3 <execute_command>
f0113128:	83 c4 10             	add    $0x10,%esp
		char c7[100] = "wum 0x1007FF y";execute_command(c7);
f011312b:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0113131:	bb ad 80 13 f0       	mov    $0xf01380ad,%ebx
f0113136:	ba 0f 00 00 00       	mov    $0xf,%edx
f011313b:	89 c7                	mov    %eax,%edi
f011313d:	89 de                	mov    %ebx,%esi
f011313f:	89 d1                	mov    %edx,%ecx
f0113141:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113143:	8d 95 e2 fd ff ff    	lea    -0x21e(%ebp),%edx
f0113149:	b9 55 00 00 00       	mov    $0x55,%ecx
f011314e:	b0 00                	mov    $0x0,%al
f0113150:	89 d7                	mov    %edx,%edi
f0113152:	f3 aa                	rep stos %al,%es:(%edi)
f0113154:	83 ec 0c             	sub    $0xc,%esp
f0113157:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f011315d:	50                   	push   %eax
f011315e:	e8 60 ea fe ff       	call   f0101bc3 <execute_command>
f0113163:	83 c4 10             	add    $0x10,%esp
		char c8[100] = "wum 0x100FFF z";execute_command(c8);
f0113166:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f011316c:	bb 11 81 13 f0       	mov    $0xf0138111,%ebx
f0113171:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113176:	89 c7                	mov    %eax,%edi
f0113178:	89 de                	mov    %ebx,%esi
f011317a:	89 d1                	mov    %edx,%ecx
f011317c:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011317e:	8d 95 46 fe ff ff    	lea    -0x1ba(%ebp),%edx
f0113184:	b9 55 00 00 00       	mov    $0x55,%ecx
f0113189:	b0 00                	mov    $0x0,%al
f011318b:	89 d7                	mov    %edx,%edi
f011318d:	f3 aa                	rep stos %al,%es:(%edi)
f011318f:	83 ec 0c             	sub    $0xc,%esp
f0113192:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0113198:	50                   	push   %eax
f0113199:	e8 25 ea fe ff       	call   f0101bc3 <execute_command>
f011319e:	83 c4 10             	add    $0x10,%esp

		ch1 = (char*)0x000000; ch2 = (char*)0x100000;
f01131a1:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
f01131a8:	c7 45 b8 00 00 10 00 	movl   $0x100000,-0x48(%ebp)
		ch3 = (char*)0x0007FF; ch4 = (char*)0x1007FF;
f01131af:	c7 45 b4 ff 07 00 00 	movl   $0x7ff,-0x4c(%ebp)
f01131b6:	c7 45 b0 ff 07 10 00 	movl   $0x1007ff,-0x50(%ebp)
		ch5 = (char*)0x000FFF; ch6 = (char*)0x100FFF;
f01131bd:	c7 45 ac ff 0f 00 00 	movl   $0xfff,-0x54(%ebp)
f01131c4:	c7 45 a8 ff 0f 10 00 	movl   $0x100fff,-0x58(%ebp)
		ch7 = (char*)0x001000; ch8 = (char*)0x101000;
f01131cb:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f01131d2:	c7 45 a0 00 10 10 00 	movl   $0x101000,-0x60(%ebp)
		ch9 = (char*)0x0017FF; ch10= (char*)0x1017FF;
f01131d9:	c7 45 9c ff 17 00 00 	movl   $0x17ff,-0x64(%ebp)
f01131e0:	c7 45 98 ff 17 10 00 	movl   $0x1017ff,-0x68(%ebp)
		ch11= (char*)0x001FFF; ch12= (char*)0x101FFF;
f01131e7:	c7 45 94 ff 1f 00 00 	movl   $0x1fff,-0x6c(%ebp)
f01131ee:	c7 45 90 ff 1f 10 00 	movl   $0x101fff,-0x70(%ebp)

		tch[8] = *ch8 ;tch[10] = *ch10 ;tch[12] = *ch12 ;
f01131f5:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01131f8:	8a 00                	mov    (%eax),%al
f01131fa:	88 85 a3 fe ff ff    	mov    %al,-0x15d(%ebp)
f0113200:	8b 45 98             	mov    -0x68(%ebp),%eax
f0113203:	8a 00                	mov    (%eax),%al
f0113205:	88 85 a5 fe ff ff    	mov    %al,-0x15b(%ebp)
f011320b:	8b 45 90             	mov    -0x70(%ebp),%eax
f011320e:	8a 00                	mov    (%eax),%al
f0113210:	88 85 a7 fe ff ff    	mov    %al,-0x159(%ebp)

		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113216:	e8 ab 97 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011321b:	89 45 8c             	mov    %eax,-0x74(%ebp)

		int ret = copy_paste_chunk(proc_directory, 0x0, 0x100000, 6*kilo);
f011321e:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113221:	89 d0                	mov    %edx,%eax
f0113223:	01 c0                	add    %eax,%eax
f0113225:	01 d0                	add    %edx,%eax
f0113227:	01 c0                	add    %eax,%eax
f0113229:	50                   	push   %eax
f011322a:	68 00 00 10 00       	push   $0x100000
f011322f:	6a 00                	push   $0x0
f0113231:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113234:	e8 6e 59 ff ff       	call   f0108ba7 <copy_paste_chunk>
f0113239:	83 c4 10             	add    $0x10,%esp
f011323c:	89 45 88             	mov    %eax,-0x78(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f011323f:	e8 82 97 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0113244:	89 45 84             	mov    %eax,-0x7c(%ebp)

		correct = 1 ;
f0113247:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		if (ret != -1 || numOfFreeFramesBefore != numOfFreeFramesAfter)
f011324e:	83 7d 88 ff          	cmpl   $0xffffffff,-0x78(%ebp)
f0113252:	75 08                	jne    f011325c <test_copy_paste_chunk+0x4a8>
f0113254:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0113257:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f011325a:	74 2b                	je     f0113287 <test_copy_paste_chunk+0x4d3>
		{
			warn("[EVAL] copy_paste_chunk: Failed (dest is read-only... operation should be denied) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f011325c:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011325f:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0113262:	83 ec 0c             	sub    $0xc,%esp
f0113265:	50                   	push   %eax
f0113266:	ff 75 88             	pushl  -0x78(%ebp)
f0113269:	68 0c 7b 13 f0       	push   $0xf0137b0c
f011326e:	68 3c 02 00 00       	push   $0x23c
f0113273:	68 7a 73 13 f0       	push   $0xf013737a
f0113278:	e8 41 d1 fe ff       	call   f01003be <_warn>
f011327d:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113280:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f0113287:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011328b:	74 04                	je     f0113291 <test_copy_paste_chunk+0x4dd>
f011328d:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0113291:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (*ch1 != 'a' || *ch2 != 'x' || *ch3 != 'b' || *ch4 != 'y' || *ch5 != 'c' || *ch6 != 'z'
f0113298:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011329b:	8a 00                	mov    (%eax),%al
f011329d:	3c 61                	cmp    $0x61,%al
f011329f:	75 75                	jne    f0113316 <test_copy_paste_chunk+0x562>
f01132a1:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01132a4:	8a 00                	mov    (%eax),%al
f01132a6:	3c 78                	cmp    $0x78,%al
f01132a8:	75 6c                	jne    f0113316 <test_copy_paste_chunk+0x562>
f01132aa:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01132ad:	8a 00                	mov    (%eax),%al
f01132af:	3c 62                	cmp    $0x62,%al
f01132b1:	75 63                	jne    f0113316 <test_copy_paste_chunk+0x562>
f01132b3:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01132b6:	8a 00                	mov    (%eax),%al
f01132b8:	3c 79                	cmp    $0x79,%al
f01132ba:	75 5a                	jne    f0113316 <test_copy_paste_chunk+0x562>
f01132bc:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01132bf:	8a 00                	mov    (%eax),%al
f01132c1:	3c 63                	cmp    $0x63,%al
f01132c3:	75 51                	jne    f0113316 <test_copy_paste_chunk+0x562>
f01132c5:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01132c8:	8a 00                	mov    (%eax),%al
f01132ca:	3c 7a                	cmp    $0x7a,%al
f01132cc:	75 48                	jne    f0113316 <test_copy_paste_chunk+0x562>
				||  *ch7 != 'd' || *ch8 != tch[8] || *ch9 != 'e' || *ch10 != tch[10] || *ch11!= 'f' || *ch12 != tch[12])
f01132ce:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01132d1:	8a 00                	mov    (%eax),%al
f01132d3:	3c 64                	cmp    $0x64,%al
f01132d5:	75 3f                	jne    f0113316 <test_copy_paste_chunk+0x562>
f01132d7:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01132da:	8a 10                	mov    (%eax),%dl
f01132dc:	8a 85 a3 fe ff ff    	mov    -0x15d(%ebp),%al
f01132e2:	38 c2                	cmp    %al,%dl
f01132e4:	75 30                	jne    f0113316 <test_copy_paste_chunk+0x562>
f01132e6:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01132e9:	8a 00                	mov    (%eax),%al
f01132eb:	3c 65                	cmp    $0x65,%al
f01132ed:	75 27                	jne    f0113316 <test_copy_paste_chunk+0x562>
f01132ef:	8b 45 98             	mov    -0x68(%ebp),%eax
f01132f2:	8a 10                	mov    (%eax),%dl
f01132f4:	8a 85 a5 fe ff ff    	mov    -0x15b(%ebp),%al
f01132fa:	38 c2                	cmp    %al,%dl
f01132fc:	75 18                	jne    f0113316 <test_copy_paste_chunk+0x562>
f01132fe:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0113301:	8a 00                	mov    (%eax),%al
f0113303:	3c 66                	cmp    $0x66,%al
f0113305:	75 0f                	jne    f0113316 <test_copy_paste_chunk+0x562>
f0113307:	8b 45 90             	mov    -0x70(%ebp),%eax
f011330a:	8a 10                	mov    (%eax),%dl
f011330c:	8a 85 a7 fe ff ff    	mov    -0x159(%ebp),%al
f0113312:	38 c2                	cmp    %al,%dl
f0113314:	74 21                	je     f0113337 <test_copy_paste_chunk+0x583>
		{
			warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f0113316:	83 ec 04             	sub    $0x4,%esp
f0113319:	68 70 7b 13 f0       	push   $0xf0137b70
f011331e:	68 45 02 00 00       	push   $0x245
f0113323:	68 7a 73 13 f0       	push   $0xf013737a
f0113328:	e8 91 d0 fe ff       	call   f01003be <_warn>
f011332d:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113330:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f0113337:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011333b:	74 04                	je     f0113341 <test_copy_paste_chunk+0x58d>
f011333d:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0113341:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	}
	cprintf("\nCASE I: END \n") ;
f0113348:	83 ec 0c             	sub    $0xc,%esp
f011334b:	68 aa 7b 13 f0       	push   $0xf0137baa
f0113350:	e8 dc da fe ff       	call   f0100e31 <cprintf>
f0113355:	83 c4 10             	add    $0x10,%esp

	/*==================================================*/
	/*PART II: Destination page(s) exist & writable 40% */
	/*==================================================*/
	cprintf("\nCASE II: Destination page(s) exist & writable [40%]\n") ;
f0113358:	83 ec 0c             	sub    $0xc,%esp
f011335b:	68 bc 7b 13 f0       	push   $0xf0137bbc
f0113360:	e8 cc da fe ff       	call   f0100e31 <cprintf>
f0113365:	83 c4 10             	add    $0x10,%esp
	{
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x200000", c1); execute_command(c1);
f0113368:	83 ec 04             	sub    $0x4,%esp
f011336b:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0113371:	50                   	push   %eax
f0113372:	68 f2 7b 13 f0       	push   $0xf0137bf2
f0113377:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f011337d:	50                   	push   %eax
f011337e:	e8 58 c0 01 00       	call   f012f3db <strcconcat>
f0113383:	83 c4 10             	add    $0x10,%esp
f0113386:	83 ec 0c             	sub    $0xc,%esp
f0113389:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f011338f:	50                   	push   %eax
f0113390:	e8 2e e8 fe ff       	call   f0101bc3 <execute_command>
f0113395:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x201000", c1); execute_command(c1);
f0113398:	83 ec 04             	sub    $0x4,%esp
f011339b:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f01133a1:	50                   	push   %eax
f01133a2:	68 fc 7b 13 f0       	push   $0xf0137bfc
f01133a7:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f01133ad:	50                   	push   %eax
f01133ae:	e8 28 c0 01 00       	call   f012f3db <strcconcat>
f01133b3:	83 c4 10             	add    $0x10,%esp
f01133b6:	83 ec 0c             	sub    $0xc,%esp
f01133b9:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f01133bf:	50                   	push   %eax
f01133c0:	e8 fe e7 fe ff       	call   f0101bc3 <execute_command>
f01133c5:	83 c4 10             	add    $0x10,%esp
		/*write on 1st page*/
		char c2[100] = "wum 0x200000 a";execute_command(c2);
f01133c8:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f01133ce:	bb 75 81 13 f0       	mov    $0xf0138175,%ebx
f01133d3:	ba 0f 00 00 00       	mov    $0xf,%edx
f01133d8:	89 c7                	mov    %eax,%edi
f01133da:	89 de                	mov    %ebx,%esi
f01133dc:	89 d1                	mov    %edx,%ecx
f01133de:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01133e0:	8d 95 c2 fa ff ff    	lea    -0x53e(%ebp),%edx
f01133e6:	b9 55 00 00 00       	mov    $0x55,%ecx
f01133eb:	b0 00                	mov    $0x0,%al
f01133ed:	89 d7                	mov    %edx,%edi
f01133ef:	f3 aa                	rep stos %al,%es:(%edi)
f01133f1:	83 ec 0c             	sub    $0xc,%esp
f01133f4:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f01133fa:	50                   	push   %eax
f01133fb:	e8 c3 e7 fe ff       	call   f0101bc3 <execute_command>
f0113400:	83 c4 10             	add    $0x10,%esp
		char c3[100] = "wum 0x2007FF b";execute_command(c3);
f0113403:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f0113409:	bb d9 81 13 f0       	mov    $0xf01381d9,%ebx
f011340e:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113413:	89 c7                	mov    %eax,%edi
f0113415:	89 de                	mov    %ebx,%esi
f0113417:	89 d1                	mov    %edx,%ecx
f0113419:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011341b:	8d 95 26 fb ff ff    	lea    -0x4da(%ebp),%edx
f0113421:	b9 55 00 00 00       	mov    $0x55,%ecx
f0113426:	b0 00                	mov    $0x0,%al
f0113428:	89 d7                	mov    %edx,%edi
f011342a:	f3 aa                	rep stos %al,%es:(%edi)
f011342c:	83 ec 0c             	sub    $0xc,%esp
f011342f:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f0113435:	50                   	push   %eax
f0113436:	e8 88 e7 fe ff       	call   f0101bc3 <execute_command>
f011343b:	83 c4 10             	add    $0x10,%esp
		char c4[100] = "wum 0x200FFF c";execute_command(c4);
f011343e:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f0113444:	bb 3d 82 13 f0       	mov    $0xf013823d,%ebx
f0113449:	ba 0f 00 00 00       	mov    $0xf,%edx
f011344e:	89 c7                	mov    %eax,%edi
f0113450:	89 de                	mov    %ebx,%esi
f0113452:	89 d1                	mov    %edx,%ecx
f0113454:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113456:	8d 95 8a fb ff ff    	lea    -0x476(%ebp),%edx
f011345c:	b9 55 00 00 00       	mov    $0x55,%ecx
f0113461:	b0 00                	mov    $0x0,%al
f0113463:	89 d7                	mov    %edx,%edi
f0113465:	f3 aa                	rep stos %al,%es:(%edi)
f0113467:	83 ec 0c             	sub    $0xc,%esp
f011346a:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f0113470:	50                   	push   %eax
f0113471:	e8 4d e7 fe ff       	call   f0101bc3 <execute_command>
f0113476:	83 c4 10             	add    $0x10,%esp
		/*write on 2nd page*/
		char c22[100] = "wum 0x201000 d";execute_command(c22);
f0113479:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f011347f:	bb a1 82 13 f0       	mov    $0xf01382a1,%ebx
f0113484:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113489:	89 c7                	mov    %eax,%edi
f011348b:	89 de                	mov    %ebx,%esi
f011348d:	89 d1                	mov    %edx,%ecx
f011348f:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113491:	8d 95 ee fb ff ff    	lea    -0x412(%ebp),%edx
f0113497:	b9 55 00 00 00       	mov    $0x55,%ecx
f011349c:	b0 00                	mov    $0x0,%al
f011349e:	89 d7                	mov    %edx,%edi
f01134a0:	f3 aa                	rep stos %al,%es:(%edi)
f01134a2:	83 ec 0c             	sub    $0xc,%esp
f01134a5:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f01134ab:	50                   	push   %eax
f01134ac:	e8 12 e7 fe ff       	call   f0101bc3 <execute_command>
f01134b1:	83 c4 10             	add    $0x10,%esp
		char c23[100] = "wum 0x2017FF e";execute_command(c23);
f01134b4:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f01134ba:	bb 05 83 13 f0       	mov    $0xf0138305,%ebx
f01134bf:	ba 0f 00 00 00       	mov    $0xf,%edx
f01134c4:	89 c7                	mov    %eax,%edi
f01134c6:	89 de                	mov    %ebx,%esi
f01134c8:	89 d1                	mov    %edx,%ecx
f01134ca:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01134cc:	8d 95 52 fc ff ff    	lea    -0x3ae(%ebp),%edx
f01134d2:	b9 55 00 00 00       	mov    $0x55,%ecx
f01134d7:	b0 00                	mov    $0x0,%al
f01134d9:	89 d7                	mov    %edx,%edi
f01134db:	f3 aa                	rep stos %al,%es:(%edi)
f01134dd:	83 ec 0c             	sub    $0xc,%esp
f01134e0:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f01134e6:	50                   	push   %eax
f01134e7:	e8 d7 e6 fe ff       	call   f0101bc3 <execute_command>
f01134ec:	83 c4 10             	add    $0x10,%esp
		char c24[100] = "wum 0x201FFF f";execute_command(c24);
f01134ef:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f01134f5:	bb 69 83 13 f0       	mov    $0xf0138369,%ebx
f01134fa:	ba 0f 00 00 00       	mov    $0xf,%edx
f01134ff:	89 c7                	mov    %eax,%edi
f0113501:	89 de                	mov    %ebx,%esi
f0113503:	89 d1                	mov    %edx,%ecx
f0113505:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113507:	8d 95 b6 fc ff ff    	lea    -0x34a(%ebp),%edx
f011350d:	b9 55 00 00 00       	mov    $0x55,%ecx
f0113512:	b0 00                	mov    $0x0,%al
f0113514:	89 d7                	mov    %edx,%edi
f0113516:	f3 aa                	rep stos %al,%es:(%edi)
f0113518:	83 ec 0c             	sub    $0xc,%esp
f011351b:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f0113521:	50                   	push   %eax
f0113522:	e8 9c e6 fe ff       	call   f0101bc3 <execute_command>
f0113527:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c5[100] ;strcconcat(aup_cmd, " 0x400000", c5); execute_command(c5);
f011352a:	83 ec 04             	sub    $0x4,%esp
f011352d:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0113533:	50                   	push   %eax
f0113534:	68 06 7c 13 f0       	push   $0xf0137c06
f0113539:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f011353f:	50                   	push   %eax
f0113540:	e8 96 be 01 00       	call   f012f3db <strcconcat>
f0113545:	83 c4 10             	add    $0x10,%esp
f0113548:	83 ec 0c             	sub    $0xc,%esp
f011354b:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0113551:	50                   	push   %eax
f0113552:	e8 6c e6 fe ff       	call   f0101bc3 <execute_command>
f0113557:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x401000", c5); execute_command(c5);
f011355a:	83 ec 04             	sub    $0x4,%esp
f011355d:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0113563:	50                   	push   %eax
f0113564:	68 10 7c 13 f0       	push   $0xf0137c10
f0113569:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f011356f:	50                   	push   %eax
f0113570:	e8 66 be 01 00       	call   f012f3db <strcconcat>
f0113575:	83 c4 10             	add    $0x10,%esp
f0113578:	83 ec 0c             	sub    $0xc,%esp
f011357b:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0113581:	50                   	push   %eax
f0113582:	e8 3c e6 fe ff       	call   f0101bc3 <execute_command>
f0113587:	83 c4 10             	add    $0x10,%esp
		char c6[100] = "wum 0x400000 x";execute_command(c6);
f011358a:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0113590:	bb cd 83 13 f0       	mov    $0xf01383cd,%ebx
f0113595:	ba 0f 00 00 00       	mov    $0xf,%edx
f011359a:	89 c7                	mov    %eax,%edi
f011359c:	89 de                	mov    %ebx,%esi
f011359e:	89 d1                	mov    %edx,%ecx
f01135a0:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01135a2:	8d 95 7e fd ff ff    	lea    -0x282(%ebp),%edx
f01135a8:	b9 55 00 00 00       	mov    $0x55,%ecx
f01135ad:	b0 00                	mov    $0x0,%al
f01135af:	89 d7                	mov    %edx,%edi
f01135b1:	f3 aa                	rep stos %al,%es:(%edi)
f01135b3:	83 ec 0c             	sub    $0xc,%esp
f01135b6:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f01135bc:	50                   	push   %eax
f01135bd:	e8 01 e6 fe ff       	call   f0101bc3 <execute_command>
f01135c2:	83 c4 10             	add    $0x10,%esp
		char c7[100] = "wum 0x4007FF y";execute_command(c7);
f01135c5:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f01135cb:	bb 31 84 13 f0       	mov    $0xf0138431,%ebx
f01135d0:	ba 0f 00 00 00       	mov    $0xf,%edx
f01135d5:	89 c7                	mov    %eax,%edi
f01135d7:	89 de                	mov    %ebx,%esi
f01135d9:	89 d1                	mov    %edx,%ecx
f01135db:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01135dd:	8d 95 e2 fd ff ff    	lea    -0x21e(%ebp),%edx
f01135e3:	b9 55 00 00 00       	mov    $0x55,%ecx
f01135e8:	b0 00                	mov    $0x0,%al
f01135ea:	89 d7                	mov    %edx,%edi
f01135ec:	f3 aa                	rep stos %al,%es:(%edi)
f01135ee:	83 ec 0c             	sub    $0xc,%esp
f01135f1:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f01135f7:	50                   	push   %eax
f01135f8:	e8 c6 e5 fe ff       	call   f0101bc3 <execute_command>
f01135fd:	83 c4 10             	add    $0x10,%esp
		char c8[100] = "wum 0x400FFF z";execute_command(c8);
f0113600:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0113606:	bb 95 84 13 f0       	mov    $0xf0138495,%ebx
f011360b:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113610:	89 c7                	mov    %eax,%edi
f0113612:	89 de                	mov    %ebx,%esi
f0113614:	89 d1                	mov    %edx,%ecx
f0113616:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113618:	8d 95 46 fe ff ff    	lea    -0x1ba(%ebp),%edx
f011361e:	b9 55 00 00 00       	mov    $0x55,%ecx
f0113623:	b0 00                	mov    $0x0,%al
f0113625:	89 d7                	mov    %edx,%edi
f0113627:	f3 aa                	rep stos %al,%es:(%edi)
f0113629:	83 ec 0c             	sub    $0xc,%esp
f011362c:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0113632:	50                   	push   %eax
f0113633:	e8 8b e5 fe ff       	call   f0101bc3 <execute_command>
f0113638:	83 c4 10             	add    $0x10,%esp

		//Test1
		ch1 = (char*)0x200000; ch2 = (char*)0x400000;
f011363b:	c7 45 bc 00 00 20 00 	movl   $0x200000,-0x44(%ebp)
f0113642:	c7 45 b8 00 00 40 00 	movl   $0x400000,-0x48(%ebp)
		ch3 = (char*)0x2007FF; ch4 = (char*)0x4007FF;
f0113649:	c7 45 b4 ff 07 20 00 	movl   $0x2007ff,-0x4c(%ebp)
f0113650:	c7 45 b0 ff 07 40 00 	movl   $0x4007ff,-0x50(%ebp)
		ch5 = (char*)0x200FFF; ch6 = (char*)0x400FFF;
f0113657:	c7 45 ac ff 0f 20 00 	movl   $0x200fff,-0x54(%ebp)
f011365e:	c7 45 a8 ff 0f 40 00 	movl   $0x400fff,-0x58(%ebp)
		ch7 = (char*)0x201000; ch8 = (char*)0x401000;
f0113665:	c7 45 a4 00 10 20 00 	movl   $0x201000,-0x5c(%ebp)
f011366c:	c7 45 a0 00 10 40 00 	movl   $0x401000,-0x60(%ebp)
		ch9 = (char*)0x2017FF; ch10= (char*)0x4017FF;
f0113673:	c7 45 9c ff 17 20 00 	movl   $0x2017ff,-0x64(%ebp)
f011367a:	c7 45 98 ff 17 40 00 	movl   $0x4017ff,-0x68(%ebp)
		ch11= (char*)0x201FFF; ch12= (char*)0x401FFF;
f0113681:	c7 45 94 ff 1f 20 00 	movl   $0x201fff,-0x6c(%ebp)
f0113688:	c7 45 90 ff 1f 40 00 	movl   $0x401fff,-0x70(%ebp)

		tch[12] = *ch12 ;
f011368f:	8b 45 90             	mov    -0x70(%ebp),%eax
f0113692:	8a 00                	mov    (%eax),%al
f0113694:	88 85 a7 fe ff ff    	mov    %al,-0x159(%ebp)
		numOfFreeFramesBefore = sys_calculate_free_frames();
f011369a:	e8 27 93 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011369f:	89 45 8c             	mov    %eax,-0x74(%ebp)

		int ret = copy_paste_chunk(proc_directory, 0x200000, 0x400000, 6*kilo);
f01136a2:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01136a5:	89 d0                	mov    %edx,%eax
f01136a7:	01 c0                	add    %eax,%eax
f01136a9:	01 d0                	add    %edx,%eax
f01136ab:	01 c0                	add    %eax,%eax
f01136ad:	50                   	push   %eax
f01136ae:	68 00 00 40 00       	push   $0x400000
f01136b3:	68 00 00 20 00       	push   $0x200000
f01136b8:	ff 75 d4             	pushl  -0x2c(%ebp)
f01136bb:	e8 e7 54 ff ff       	call   f0108ba7 <copy_paste_chunk>
f01136c0:	83 c4 10             	add    $0x10,%esp
f01136c3:	89 45 80             	mov    %eax,-0x80(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01136c6:	e8 fb 92 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f01136cb:	89 45 84             	mov    %eax,-0x7c(%ebp)

		correct = 1 ;
f01136ce:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		if (ret != 0 || numOfFreeFramesBefore != numOfFreeFramesAfter)
f01136d5:	83 7d 80 00          	cmpl   $0x0,-0x80(%ebp)
f01136d9:	75 08                	jne    f01136e3 <test_copy_paste_chunk+0x92f>
f01136db:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01136de:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f01136e1:	74 2b                	je     f011370e <test_copy_paste_chunk+0x95a>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f01136e3:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01136e6:	2b 45 84             	sub    -0x7c(%ebp),%eax
f01136e9:	83 ec 0c             	sub    $0xc,%esp
f01136ec:	50                   	push   %eax
f01136ed:	ff 75 80             	pushl  -0x80(%ebp)
f01136f0:	68 1c 7c 13 f0       	push   $0xf0137c1c
f01136f5:	68 75 02 00 00       	push   $0x275
f01136fa:	68 7a 73 13 f0       	push   $0xf013737a
f01136ff:	e8 ba cc fe ff       	call   f01003be <_warn>
f0113704:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113707:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f011370e:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113712:	74 04                	je     f0113718 <test_copy_paste_chunk+0x964>
f0113714:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113718:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		int chkcnt = 1;
f011371f:	c7 85 7c ff ff ff 01 	movl   $0x1,-0x84(%ebp)
f0113726:	00 00 00 
		if (CCP(proc_directory, 0x200000, 0x400000, 2*PAGE_SIZE, 1, 0x007, 0x007, 0x007, 0x007, CHK_COPY_PASTE) != 1)
f0113729:	83 ec 08             	sub    $0x8,%esp
f011372c:	6a 01                	push   $0x1
f011372e:	6a 07                	push   $0x7
f0113730:	6a 07                	push   $0x7
f0113732:	6a 07                	push   $0x7
f0113734:	6a 07                	push   $0x7
f0113736:	6a 01                	push   $0x1
f0113738:	68 00 20 00 00       	push   $0x2000
f011373d:	68 00 00 40 00       	push   $0x400000
f0113742:	68 00 00 20 00       	push   $0x200000
f0113747:	ff 75 d4             	pushl  -0x2c(%ebp)
f011374a:	e8 22 36 00 00       	call   f0116d71 <CCP>
f011374f:	83 c4 30             	add    $0x30,%esp
f0113752:	83 f8 01             	cmp    $0x1,%eax
f0113755:	74 2b                	je     f0113782 <test_copy_paste_chunk+0x9ce>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references)\n");
f0113757:	83 ec 04             	sub    $0x4,%esp
f011375a:	68 70 7c 13 f0       	push   $0xf0137c70
f011375f:	68 7e 02 00 00       	push   $0x27e
f0113764:	68 7a 73 13 f0       	push   $0xf013737a
f0113769:	e8 50 cc fe ff       	call   f01003be <_warn>
f011376e:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113771:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chkcnt = 0;
f0113778:	c7 85 7c ff ff ff 00 	movl   $0x0,-0x84(%ebp)
f011377f:	00 00 00 
		}
		if (correct) eval += 5 ;
f0113782:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113786:	74 04                	je     f011378c <test_copy_paste_chunk+0x9d8>
f0113788:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011378c:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		*ch3 = 'y' ;	// wum 0x2007FF y
f0113793:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113796:	c6 00 79             	movb   $0x79,(%eax)
		*ch6 = 'z' ;	// wum 0x400FFF z
f0113799:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011379c:	c6 00 7a             	movb   $0x7a,(%eax)
		*ch7 = 'w' ;	// wum 0x201000 w
f011379f:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01137a2:	c6 00 77             	movb   $0x77,(%eax)

		if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'c' || *ch6 != 'z'
f01137a5:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01137a8:	8a 00                	mov    (%eax),%al
f01137aa:	3c 61                	cmp    $0x61,%al
f01137ac:	75 69                	jne    f0113817 <test_copy_paste_chunk+0xa63>
f01137ae:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01137b1:	8a 00                	mov    (%eax),%al
f01137b3:	3c 61                	cmp    $0x61,%al
f01137b5:	75 60                	jne    f0113817 <test_copy_paste_chunk+0xa63>
f01137b7:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01137ba:	8a 00                	mov    (%eax),%al
f01137bc:	3c 79                	cmp    $0x79,%al
f01137be:	75 57                	jne    f0113817 <test_copy_paste_chunk+0xa63>
f01137c0:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01137c3:	8a 00                	mov    (%eax),%al
f01137c5:	3c 62                	cmp    $0x62,%al
f01137c7:	75 4e                	jne    f0113817 <test_copy_paste_chunk+0xa63>
f01137c9:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01137cc:	8a 00                	mov    (%eax),%al
f01137ce:	3c 63                	cmp    $0x63,%al
f01137d0:	75 45                	jne    f0113817 <test_copy_paste_chunk+0xa63>
f01137d2:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01137d5:	8a 00                	mov    (%eax),%al
f01137d7:	3c 7a                	cmp    $0x7a,%al
f01137d9:	75 3c                	jne    f0113817 <test_copy_paste_chunk+0xa63>
				||  *ch7 != 'w' || *ch8 != 'd' || *ch9 != 'e' || *ch10!= 'e' || *ch11!= 'f' || *ch12 != tch[12])
f01137db:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01137de:	8a 00                	mov    (%eax),%al
f01137e0:	3c 77                	cmp    $0x77,%al
f01137e2:	75 33                	jne    f0113817 <test_copy_paste_chunk+0xa63>
f01137e4:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01137e7:	8a 00                	mov    (%eax),%al
f01137e9:	3c 64                	cmp    $0x64,%al
f01137eb:	75 2a                	jne    f0113817 <test_copy_paste_chunk+0xa63>
f01137ed:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01137f0:	8a 00                	mov    (%eax),%al
f01137f2:	3c 65                	cmp    $0x65,%al
f01137f4:	75 21                	jne    f0113817 <test_copy_paste_chunk+0xa63>
f01137f6:	8b 45 98             	mov    -0x68(%ebp),%eax
f01137f9:	8a 00                	mov    (%eax),%al
f01137fb:	3c 65                	cmp    $0x65,%al
f01137fd:	75 18                	jne    f0113817 <test_copy_paste_chunk+0xa63>
f01137ff:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0113802:	8a 00                	mov    (%eax),%al
f0113804:	3c 66                	cmp    $0x66,%al
f0113806:	75 0f                	jne    f0113817 <test_copy_paste_chunk+0xa63>
f0113808:	8b 45 90             	mov    -0x70(%ebp),%eax
f011380b:	8a 10                	mov    (%eax),%dl
f011380d:	8a 85 a7 fe ff ff    	mov    -0x159(%ebp),%al
f0113813:	38 c2                	cmp    %al,%dl
f0113815:	74 21                	je     f0113838 <test_copy_paste_chunk+0xa84>
		{
			warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f0113817:	83 ec 04             	sub    $0x4,%esp
f011381a:	68 70 7b 13 f0       	push   $0xf0137b70
f011381f:	68 8c 02 00 00       	push   $0x28c
f0113824:	68 7a 73 13 f0       	push   $0xf013737a
f0113829:	e8 90 cb fe ff       	call   f01003be <_warn>
f011382e:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113831:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f0113838:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011383c:	74 04                	je     f0113842 <test_copy_paste_chunk+0xa8e>
f011383e:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0113842:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		//Test2
		*ch10 = 'x';	// wum 0x4017FF y
f0113849:	8b 45 98             	mov    -0x68(%ebp),%eax
f011384c:	c6 00 78             	movb   $0x78,(%eax)
		numOfFreeFramesBefore = sys_calculate_free_frames();
f011384f:	e8 72 91 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0113854:	89 45 8c             	mov    %eax,-0x74(%ebp)

		ret = copy_paste_chunk(proc_directory, 0x400800, 0x200800, 3*kilo);
f0113857:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011385a:	89 c2                	mov    %eax,%edx
f011385c:	01 d2                	add    %edx,%edx
f011385e:	01 d0                	add    %edx,%eax
f0113860:	50                   	push   %eax
f0113861:	68 00 08 20 00       	push   $0x200800
f0113866:	68 00 08 40 00       	push   $0x400800
f011386b:	ff 75 d4             	pushl  -0x2c(%ebp)
f011386e:	e8 34 53 ff ff       	call   f0108ba7 <copy_paste_chunk>
f0113873:	83 c4 10             	add    $0x10,%esp
f0113876:	89 45 80             	mov    %eax,-0x80(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113879:	e8 48 91 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011387e:	89 45 84             	mov    %eax,-0x7c(%ebp)

		if (ret != 0 || numOfFreeFramesBefore != numOfFreeFramesAfter)
f0113881:	83 7d 80 00          	cmpl   $0x0,-0x80(%ebp)
f0113885:	75 08                	jne    f011388f <test_copy_paste_chunk+0xadb>
f0113887:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011388a:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f011388d:	74 2b                	je     f01138ba <test_copy_paste_chunk+0xb06>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f011388f:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0113892:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0113895:	83 ec 0c             	sub    $0xc,%esp
f0113898:	50                   	push   %eax
f0113899:	ff 75 80             	pushl  -0x80(%ebp)
f011389c:	68 1c 7c 13 f0       	push   $0xf0137c1c
f01138a1:	68 9c 02 00 00       	push   $0x29c
f01138a6:	68 7a 73 13 f0       	push   $0xf013737a
f01138ab:	e8 0e cb fe ff       	call   f01003be <_warn>
f01138b0:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01138b3:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f01138ba:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01138be:	74 04                	je     f01138c4 <test_copy_paste_chunk+0xb10>
f01138c0:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01138c4:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (CCP(proc_directory, 0x400000, 0x200000, 2*PAGE_SIZE, 1, 0x007, 0x007, 0x007, 0x007, CHK_COPY_PASTE) != 1)
f01138cb:	83 ec 08             	sub    $0x8,%esp
f01138ce:	6a 01                	push   $0x1
f01138d0:	6a 07                	push   $0x7
f01138d2:	6a 07                	push   $0x7
f01138d4:	6a 07                	push   $0x7
f01138d6:	6a 07                	push   $0x7
f01138d8:	6a 01                	push   $0x1
f01138da:	68 00 20 00 00       	push   $0x2000
f01138df:	68 00 00 20 00       	push   $0x200000
f01138e4:	68 00 00 40 00       	push   $0x400000
f01138e9:	ff 75 d4             	pushl  -0x2c(%ebp)
f01138ec:	e8 80 34 00 00       	call   f0116d71 <CCP>
f01138f1:	83 c4 30             	add    $0x30,%esp
f01138f4:	83 f8 01             	cmp    $0x1,%eax
f01138f7:	74 21                	je     f011391a <test_copy_paste_chunk+0xb66>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references\n");
f01138f9:	83 ec 04             	sub    $0x4,%esp
f01138fc:	68 bc 7c 13 f0       	push   $0xf0137cbc
f0113901:	68 a4 02 00 00       	push   $0x2a4
f0113906:	68 7a 73 13 f0       	push   $0xf013737a
f011390b:	e8 ae ca fe ff       	call   f01003be <_warn>
f0113910:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113913:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f011391a:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011391e:	74 04                	je     f0113924 <test_copy_paste_chunk+0xb70>
f0113920:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113924:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'z' || *ch6 != 'z' ||
f011392b:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011392e:	8a 00                	mov    (%eax),%al
f0113930:	3c 61                	cmp    $0x61,%al
f0113932:	75 69                	jne    f011399d <test_copy_paste_chunk+0xbe9>
f0113934:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113937:	8a 00                	mov    (%eax),%al
f0113939:	3c 61                	cmp    $0x61,%al
f011393b:	75 60                	jne    f011399d <test_copy_paste_chunk+0xbe9>
f011393d:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113940:	8a 00                	mov    (%eax),%al
f0113942:	3c 79                	cmp    $0x79,%al
f0113944:	75 57                	jne    f011399d <test_copy_paste_chunk+0xbe9>
f0113946:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0113949:	8a 00                	mov    (%eax),%al
f011394b:	3c 62                	cmp    $0x62,%al
f011394d:	75 4e                	jne    f011399d <test_copy_paste_chunk+0xbe9>
f011394f:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0113952:	8a 00                	mov    (%eax),%al
f0113954:	3c 7a                	cmp    $0x7a,%al
f0113956:	75 45                	jne    f011399d <test_copy_paste_chunk+0xbe9>
f0113958:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011395b:	8a 00                	mov    (%eax),%al
f011395d:	3c 7a                	cmp    $0x7a,%al
f011395f:	75 3c                	jne    f011399d <test_copy_paste_chunk+0xbe9>
				*ch7 != 'd' || *ch8 != 'd' || *ch9 != 'e' || *ch10!= 'x' || *ch11!= 'f'  || *ch12 != tch[12])
f0113961:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0113964:	8a 00                	mov    (%eax),%al
			correct = 0;
		}
		if (correct) eval += 5 ;
		correct = 1 ;

		if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'z' || *ch6 != 'z' ||
f0113966:	3c 64                	cmp    $0x64,%al
f0113968:	75 33                	jne    f011399d <test_copy_paste_chunk+0xbe9>
				*ch7 != 'd' || *ch8 != 'd' || *ch9 != 'e' || *ch10!= 'x' || *ch11!= 'f'  || *ch12 != tch[12])
f011396a:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011396d:	8a 00                	mov    (%eax),%al
f011396f:	3c 64                	cmp    $0x64,%al
f0113971:	75 2a                	jne    f011399d <test_copy_paste_chunk+0xbe9>
f0113973:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0113976:	8a 00                	mov    (%eax),%al
f0113978:	3c 65                	cmp    $0x65,%al
f011397a:	75 21                	jne    f011399d <test_copy_paste_chunk+0xbe9>
f011397c:	8b 45 98             	mov    -0x68(%ebp),%eax
f011397f:	8a 00                	mov    (%eax),%al
f0113981:	3c 78                	cmp    $0x78,%al
f0113983:	75 18                	jne    f011399d <test_copy_paste_chunk+0xbe9>
f0113985:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0113988:	8a 00                	mov    (%eax),%al
f011398a:	3c 66                	cmp    $0x66,%al
f011398c:	75 0f                	jne    f011399d <test_copy_paste_chunk+0xbe9>
f011398e:	8b 45 90             	mov    -0x70(%ebp),%eax
f0113991:	8a 10                	mov    (%eax),%dl
f0113993:	8a 85 a7 fe ff ff    	mov    -0x159(%ebp),%al
f0113999:	38 c2                	cmp    %al,%dl
f011399b:	74 21                	je     f01139be <test_copy_paste_chunk+0xc0a>
		{
			warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f011399d:	83 ec 04             	sub    $0x4,%esp
f01139a0:	68 70 7b 13 f0       	push   $0xf0137b70
f01139a5:	68 ad 02 00 00       	push   $0x2ad
f01139aa:	68 7a 73 13 f0       	push   $0xf013737a
f01139af:	e8 0a ca fe ff       	call   f01003be <_warn>
f01139b4:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01139b7:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f01139be:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01139c2:	74 04                	je     f01139c8 <test_copy_paste_chunk+0xc14>
f01139c4:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01139c8:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	}
	cprintf("\nCASE II: END\n") ;
f01139cf:	83 ec 0c             	sub    $0xc,%esp
f01139d2:	68 07 7d 13 f0       	push   $0xf0137d07
f01139d7:	e8 55 d4 fe ff       	call   f0100e31 <cprintf>
f01139dc:	83 c4 10             	add    $0x10,%esp

	/*================================================*/
	/*PART III: Destination page(s) doesn't exist 40% */
	/*================================================*/
	cprintf("\nCASE III: Destination page(s) doesn't exist [40%]\n") ;
f01139df:	83 ec 0c             	sub    $0xc,%esp
f01139e2:	68 18 7d 13 f0       	push   $0xf0137d18
f01139e7:	e8 45 d4 fe ff       	call   f0100e31 <cprintf>
f01139ec:	83 c4 10             	add    $0x10,%esp
	{
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x800000", c1); execute_command(c1);
f01139ef:	83 ec 04             	sub    $0x4,%esp
f01139f2:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01139f8:	50                   	push   %eax
f01139f9:	68 4c 7d 13 f0       	push   $0xf0137d4c
f01139fe:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0113a04:	50                   	push   %eax
f0113a05:	e8 d1 b9 01 00       	call   f012f3db <strcconcat>
f0113a0a:	83 c4 10             	add    $0x10,%esp
f0113a0d:	83 ec 0c             	sub    $0xc,%esp
f0113a10:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0113a16:	50                   	push   %eax
f0113a17:	e8 a7 e1 fe ff       	call   f0101bc3 <execute_command>
f0113a1c:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x801000", c1); execute_command(c1);
f0113a1f:	83 ec 04             	sub    $0x4,%esp
f0113a22:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0113a28:	50                   	push   %eax
f0113a29:	68 56 7d 13 f0       	push   $0xf0137d56
f0113a2e:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0113a34:	50                   	push   %eax
f0113a35:	e8 a1 b9 01 00       	call   f012f3db <strcconcat>
f0113a3a:	83 c4 10             	add    $0x10,%esp
f0113a3d:	83 ec 0c             	sub    $0xc,%esp
f0113a40:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0113a46:	50                   	push   %eax
f0113a47:	e8 77 e1 fe ff       	call   f0101bc3 <execute_command>
f0113a4c:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x802000", c1); execute_command(c1);
f0113a4f:	83 ec 04             	sub    $0x4,%esp
f0113a52:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0113a58:	50                   	push   %eax
f0113a59:	68 60 7d 13 f0       	push   $0xf0137d60
f0113a5e:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0113a64:	50                   	push   %eax
f0113a65:	e8 71 b9 01 00       	call   f012f3db <strcconcat>
f0113a6a:	83 c4 10             	add    $0x10,%esp
f0113a6d:	83 ec 0c             	sub    $0xc,%esp
f0113a70:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0113a76:	50                   	push   %eax
f0113a77:	e8 47 e1 fe ff       	call   f0101bc3 <execute_command>
f0113a7c:	83 c4 10             	add    $0x10,%esp
		char c14[100] = "wum 0x800000 a"; execute_command(c14);
f0113a7f:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0113a85:	bb f9 84 13 f0       	mov    $0xf01384f9,%ebx
f0113a8a:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113a8f:	89 c7                	mov    %eax,%edi
f0113a91:	89 de                	mov    %ebx,%esi
f0113a93:	89 d1                	mov    %edx,%ecx
f0113a95:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113a97:	8d 95 7e fd ff ff    	lea    -0x282(%ebp),%edx
f0113a9d:	b9 55 00 00 00       	mov    $0x55,%ecx
f0113aa2:	b0 00                	mov    $0x0,%al
f0113aa4:	89 d7                	mov    %edx,%edi
f0113aa6:	f3 aa                	rep stos %al,%es:(%edi)
f0113aa8:	83 ec 0c             	sub    $0xc,%esp
f0113aab:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0113ab1:	50                   	push   %eax
f0113ab2:	e8 0c e1 fe ff       	call   f0101bc3 <execute_command>
f0113ab7:	83 c4 10             	add    $0x10,%esp
		char c15[100] = "wum 0x8017FF b"; execute_command(c15);
f0113aba:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0113ac0:	bb 5d 85 13 f0       	mov    $0xf013855d,%ebx
f0113ac5:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113aca:	89 c7                	mov    %eax,%edi
f0113acc:	89 de                	mov    %ebx,%esi
f0113ace:	89 d1                	mov    %edx,%ecx
f0113ad0:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113ad2:	8d 95 e2 fd ff ff    	lea    -0x21e(%ebp),%edx
f0113ad8:	b9 55 00 00 00       	mov    $0x55,%ecx
f0113add:	b0 00                	mov    $0x0,%al
f0113adf:	89 d7                	mov    %edx,%edi
f0113ae1:	f3 aa                	rep stos %al,%es:(%edi)
f0113ae3:	83 ec 0c             	sub    $0xc,%esp
f0113ae6:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0113aec:	50                   	push   %eax
f0113aed:	e8 d1 e0 fe ff       	call   f0101bc3 <execute_command>
f0113af2:	83 c4 10             	add    $0x10,%esp
		char c16[100] = "wum 0x802FFF c"; execute_command(c16);
f0113af5:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0113afb:	bb c1 85 13 f0       	mov    $0xf01385c1,%ebx
f0113b00:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113b05:	89 c7                	mov    %eax,%edi
f0113b07:	89 de                	mov    %ebx,%esi
f0113b09:	89 d1                	mov    %edx,%ecx
f0113b0b:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113b0d:	8d 95 46 fe ff ff    	lea    -0x1ba(%ebp),%edx
f0113b13:	b9 55 00 00 00       	mov    $0x55,%ecx
f0113b18:	b0 00                	mov    $0x0,%al
f0113b1a:	89 d7                	mov    %edx,%edi
f0113b1c:	f3 aa                	rep stos %al,%es:(%edi)
f0113b1e:	83 ec 0c             	sub    $0xc,%esp
f0113b21:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0113b27:	50                   	push   %eax
f0113b28:	e8 96 e0 fe ff       	call   f0101bc3 <execute_command>
f0113b2d:	83 c4 10             	add    $0x10,%esp

		//Test3
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113b30:	e8 91 8e ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0113b35:	89 45 8c             	mov    %eax,-0x74(%ebp)

		int ret = copy_paste_chunk(proc_directory, 0x800000, 0x900000, 12*kilo);
f0113b38:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113b3b:	89 d0                	mov    %edx,%eax
f0113b3d:	01 c0                	add    %eax,%eax
f0113b3f:	01 d0                	add    %edx,%eax
f0113b41:	c1 e0 02             	shl    $0x2,%eax
f0113b44:	50                   	push   %eax
f0113b45:	68 00 00 90 00       	push   $0x900000
f0113b4a:	68 00 00 80 00       	push   $0x800000
f0113b4f:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113b52:	e8 50 50 ff ff       	call   f0108ba7 <copy_paste_chunk>
f0113b57:	83 c4 10             	add    $0x10,%esp
f0113b5a:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113b60:	e8 61 8e ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0113b65:	89 45 84             	mov    %eax,-0x7c(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 3)
f0113b68:	83 bd 78 ff ff ff 00 	cmpl   $0x0,-0x88(%ebp)
f0113b6f:	75 0b                	jne    f0113b7c <test_copy_paste_chunk+0xdc8>
f0113b71:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0113b74:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0113b77:	83 f8 03             	cmp    $0x3,%eax
f0113b7a:	74 2e                	je     f0113baa <test_copy_paste_chunk+0xdf6>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0113b7c:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0113b7f:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0113b82:	83 ec 0c             	sub    $0xc,%esp
f0113b85:	50                   	push   %eax
f0113b86:	ff b5 78 ff ff ff    	pushl  -0x88(%ebp)
f0113b8c:	68 1c 7c 13 f0       	push   $0xf0137c1c
f0113b91:	68 cb 02 00 00       	push   $0x2cb
f0113b96:	68 7a 73 13 f0       	push   $0xf013737a
f0113b9b:	e8 1e c8 fe ff       	call   f01003be <_warn>
f0113ba0:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113ba3:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0113baa:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113bae:	74 04                	je     f0113bb4 <test_copy_paste_chunk+0xe00>
f0113bb0:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113bb4:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		int chkcnt = 1 ;
f0113bbb:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0x800000, 0x900000, 3*PAGE_SIZE, 1, 0x007, 0x007, 0x007, 0x007, CHK_COPY_PASTE) != 1)
f0113bc2:	83 ec 08             	sub    $0x8,%esp
f0113bc5:	6a 01                	push   $0x1
f0113bc7:	6a 07                	push   $0x7
f0113bc9:	6a 07                	push   $0x7
f0113bcb:	6a 07                	push   $0x7
f0113bcd:	6a 07                	push   $0x7
f0113bcf:	6a 01                	push   $0x1
f0113bd1:	68 00 30 00 00       	push   $0x3000
f0113bd6:	68 00 00 90 00       	push   $0x900000
f0113bdb:	68 00 00 80 00       	push   $0x800000
f0113be0:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113be3:	e8 89 31 00 00       	call   f0116d71 <CCP>
f0113be8:	83 c4 30             	add    $0x30,%esp
f0113beb:	83 f8 01             	cmp    $0x1,%eax
f0113bee:	74 28                	je     f0113c18 <test_copy_paste_chunk+0xe64>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references\n");
f0113bf0:	83 ec 04             	sub    $0x4,%esp
f0113bf3:	68 bc 7c 13 f0       	push   $0xf0137cbc
f0113bf8:	68 d4 02 00 00       	push   $0x2d4
f0113bfd:	68 7a 73 13 f0       	push   $0xf013737a
f0113c02:	e8 b7 c7 fe ff       	call   f01003be <_warn>
f0113c07:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113c0a:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chkcnt = 0 ;
f0113c11:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}
		if (correct) eval += 5 ;
f0113c18:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113c1c:	74 04                	je     f0113c22 <test_copy_paste_chunk+0xe6e>
f0113c1e:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113c22:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (chkcnt)
f0113c29:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0113c2d:	0f 84 9e 00 00 00    	je     f0113cd1 <test_copy_paste_chunk+0xf1d>
		{
			ch1 = (char*)0x800000; ch2 = (char*)0x900000;
f0113c33:	c7 45 bc 00 00 80 00 	movl   $0x800000,-0x44(%ebp)
f0113c3a:	c7 45 b8 00 00 90 00 	movl   $0x900000,-0x48(%ebp)
			ch3 = (char*)0x8017FF; ch4 = (char*)0x9017FF;
f0113c41:	c7 45 b4 ff 17 80 00 	movl   $0x8017ff,-0x4c(%ebp)
f0113c48:	c7 45 b0 ff 17 90 00 	movl   $0x9017ff,-0x50(%ebp)
			ch5 = (char*)0x802FFF; ch6 = (char*)0x902FFF;
f0113c4f:	c7 45 ac ff 2f 80 00 	movl   $0x802fff,-0x54(%ebp)
f0113c56:	c7 45 a8 ff 2f 90 00 	movl   $0x902fff,-0x58(%ebp)

			*ch3 = 'y';	//wum 0x8017FF y
f0113c5d:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113c60:	c6 00 79             	movb   $0x79,(%eax)
			*ch6 = 'z';	//wum 0x902FFF z
f0113c63:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0113c66:	c6 00 7a             	movb   $0x7a,(%eax)

			if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'c' || *ch6 != 'z')
f0113c69:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113c6c:	8a 00                	mov    (%eax),%al
f0113c6e:	3c 61                	cmp    $0x61,%al
f0113c70:	75 2d                	jne    f0113c9f <test_copy_paste_chunk+0xeeb>
f0113c72:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113c75:	8a 00                	mov    (%eax),%al
f0113c77:	3c 61                	cmp    $0x61,%al
f0113c79:	75 24                	jne    f0113c9f <test_copy_paste_chunk+0xeeb>
f0113c7b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113c7e:	8a 00                	mov    (%eax),%al
f0113c80:	3c 79                	cmp    $0x79,%al
f0113c82:	75 1b                	jne    f0113c9f <test_copy_paste_chunk+0xeeb>
f0113c84:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0113c87:	8a 00                	mov    (%eax),%al
f0113c89:	3c 62                	cmp    $0x62,%al
f0113c8b:	75 12                	jne    f0113c9f <test_copy_paste_chunk+0xeeb>
f0113c8d:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0113c90:	8a 00                	mov    (%eax),%al
f0113c92:	3c 63                	cmp    $0x63,%al
f0113c94:	75 09                	jne    f0113c9f <test_copy_paste_chunk+0xeeb>
f0113c96:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0113c99:	8a 00                	mov    (%eax),%al
f0113c9b:	3c 7a                	cmp    $0x7a,%al
f0113c9d:	74 21                	je     f0113cc0 <test_copy_paste_chunk+0xf0c>
			{
				warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f0113c9f:	83 ec 04             	sub    $0x4,%esp
f0113ca2:	68 70 7b 13 f0       	push   $0xf0137b70
f0113ca7:	68 e6 02 00 00       	push   $0x2e6
f0113cac:	68 7a 73 13 f0       	push   $0xf013737a
f0113cb1:	e8 08 c7 fe ff       	call   f01003be <_warn>
f0113cb6:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0113cb9:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			}
			if (correct) eval += 10 ;
f0113cc0:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113cc4:	74 04                	je     f0113cca <test_copy_paste_chunk+0xf16>
f0113cc6:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
			correct = 1 ;
f0113cca:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		}
		//Test4
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113cd1:	e8 f0 8c ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0113cd6:	89 45 8c             	mov    %eax,-0x74(%ebp)
		SB(proc_directory, 0x901000, 2 , 0) ;
f0113cd9:	6a 00                	push   $0x0
f0113cdb:	6a 02                	push   $0x2
f0113cdd:	68 00 10 90 00       	push   $0x901000
f0113ce2:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113ce5:	e8 c9 2b 00 00       	call   f01168b3 <SB>
f0113cea:	83 c4 10             	add    $0x10,%esp
		SB(proc_directory, 0x902000, 2 , 0) ;
f0113ced:	6a 00                	push   $0x0
f0113cef:	6a 02                	push   $0x2
f0113cf1:	68 00 20 90 00       	push   $0x902000
f0113cf6:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113cf9:	e8 b5 2b 00 00       	call   f01168b3 <SB>
f0113cfe:	83 c4 10             	add    $0x10,%esp

		ret = copy_paste_chunk(proc_directory, 0x901000, 0xBFF000, 8*kilo);
f0113d01:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113d04:	c1 e0 03             	shl    $0x3,%eax
f0113d07:	50                   	push   %eax
f0113d08:	68 00 f0 bf 00       	push   $0xbff000
f0113d0d:	68 00 10 90 00       	push   $0x901000
f0113d12:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113d15:	e8 8d 4e ff ff       	call   f0108ba7 <copy_paste_chunk>
f0113d1a:	83 c4 10             	add    $0x10,%esp
f0113d1d:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113d23:	e8 9e 8c ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0113d28:	89 45 84             	mov    %eax,-0x7c(%ebp)
		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 3)
f0113d2b:	83 bd 78 ff ff ff 00 	cmpl   $0x0,-0x88(%ebp)
f0113d32:	75 0b                	jne    f0113d3f <test_copy_paste_chunk+0xf8b>
f0113d34:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0113d37:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0113d3a:	83 f8 03             	cmp    $0x3,%eax
f0113d3d:	74 2e                	je     f0113d6d <test_copy_paste_chunk+0xfb9>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0113d3f:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0113d42:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0113d45:	83 ec 0c             	sub    $0xc,%esp
f0113d48:	50                   	push   %eax
f0113d49:	ff b5 78 ff ff ff    	pushl  -0x88(%ebp)
f0113d4f:	68 1c 7c 13 f0       	push   $0xf0137c1c
f0113d54:	68 f6 02 00 00       	push   $0x2f6
f0113d59:	68 7a 73 13 f0       	push   $0xf013737a
f0113d5e:	e8 5b c6 fe ff       	call   f01003be <_warn>
f0113d63:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113d66:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0113d6d:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113d71:	74 04                	je     f0113d77 <test_copy_paste_chunk+0xfc3>
f0113d73:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113d77:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		chkcnt = 1 ;
f0113d7e:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0x901000, 0xBFF000, 2*PAGE_SIZE, 1, 0x003, 0x007, 0x003, 0x007, CHK_COPY_PASTE) != 1)
f0113d85:	83 ec 08             	sub    $0x8,%esp
f0113d88:	6a 01                	push   $0x1
f0113d8a:	6a 07                	push   $0x7
f0113d8c:	6a 03                	push   $0x3
f0113d8e:	6a 07                	push   $0x7
f0113d90:	6a 03                	push   $0x3
f0113d92:	6a 01                	push   $0x1
f0113d94:	68 00 20 00 00       	push   $0x2000
f0113d99:	68 00 f0 bf 00       	push   $0xbff000
f0113d9e:	68 00 10 90 00       	push   $0x901000
f0113da3:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113da6:	e8 c6 2f 00 00       	call   f0116d71 <CCP>
f0113dab:	83 c4 30             	add    $0x30,%esp
f0113dae:	83 f8 01             	cmp    $0x1,%eax
f0113db1:	74 28                	je     f0113ddb <test_copy_paste_chunk+0x1027>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references\n");
f0113db3:	83 ec 04             	sub    $0x4,%esp
f0113db6:	68 bc 7c 13 f0       	push   $0xf0137cbc
f0113dbb:	68 ff 02 00 00       	push   $0x2ff
f0113dc0:	68 7a 73 13 f0       	push   $0xf013737a
f0113dc5:	e8 f4 c5 fe ff       	call   f01003be <_warn>
f0113dca:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113dcd:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chkcnt = 0 ;
f0113dd4:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}
		if (correct) eval += 10 ;
f0113ddb:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113ddf:	74 04                	je     f0113de5 <test_copy_paste_chunk+0x1031>
f0113de1:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0113de5:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (chkcnt)
f0113dec:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0113df0:	74 72                	je     f0113e64 <test_copy_paste_chunk+0x10b0>
		{
			ch1 = (char*)0x9017FF; ch2 = (char*)0xBFF7FF; ch3 = (char*)0x902FFF;ch4 = (char*)0xC00FFF;
f0113df2:	c7 45 bc ff 17 90 00 	movl   $0x9017ff,-0x44(%ebp)
f0113df9:	c7 45 b8 ff f7 bf 00 	movl   $0xbff7ff,-0x48(%ebp)
f0113e00:	c7 45 b4 ff 2f 90 00 	movl   $0x902fff,-0x4c(%ebp)
f0113e07:	c7 45 b0 ff 0f c0 00 	movl   $0xc00fff,-0x50(%ebp)
			if (*ch1 != 'b' || *ch2 != 'b' || *ch3 != 'z' || *ch4 != 'z')
f0113e0e:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113e11:	8a 00                	mov    (%eax),%al
f0113e13:	3c 62                	cmp    $0x62,%al
f0113e15:	75 1b                	jne    f0113e32 <test_copy_paste_chunk+0x107e>
f0113e17:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113e1a:	8a 00                	mov    (%eax),%al
f0113e1c:	3c 62                	cmp    $0x62,%al
f0113e1e:	75 12                	jne    f0113e32 <test_copy_paste_chunk+0x107e>
f0113e20:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113e23:	8a 00                	mov    (%eax),%al
f0113e25:	3c 7a                	cmp    $0x7a,%al
f0113e27:	75 09                	jne    f0113e32 <test_copy_paste_chunk+0x107e>
f0113e29:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0113e2c:	8a 00                	mov    (%eax),%al
f0113e2e:	3c 7a                	cmp    $0x7a,%al
f0113e30:	74 21                	je     f0113e53 <test_copy_paste_chunk+0x109f>
			{
				warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f0113e32:	83 ec 04             	sub    $0x4,%esp
f0113e35:	68 70 7b 13 f0       	push   $0xf0137b70
f0113e3a:	68 0b 03 00 00       	push   $0x30b
f0113e3f:	68 7a 73 13 f0       	push   $0xf013737a
f0113e44:	e8 75 c5 fe ff       	call   f01003be <_warn>
f0113e49:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0113e4c:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			}
			if (correct) eval += 5 ;
f0113e53:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113e57:	74 04                	je     f0113e5d <test_copy_paste_chunk+0x10a9>
f0113e59:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0113e5d:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		}
	}
	cprintf("\nCASE III: END\n") ;
f0113e64:	83 ec 0c             	sub    $0xc,%esp
f0113e67:	68 6a 7d 13 f0       	push   $0xf0137d6a
f0113e6c:	e8 c0 cf fe ff       	call   f0100e31 <cprintf>
f0113e71:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] copy_paste_chunk: FINISHED. Evaluation = %d\n", eval);
f0113e74:	83 ec 08             	sub    $0x8,%esp
f0113e77:	ff 75 e4             	pushl  -0x1c(%ebp)
f0113e7a:	68 7c 7d 13 f0       	push   $0xf0137d7c
f0113e7f:	e8 ad cf fe ff       	call   f0100e31 <cprintf>
f0113e84:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0113e87:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f0113e8b:	75 10                	jne    f0113e9d <test_copy_paste_chunk+0x10e9>
		cprintf("Congratulations!! test copy_paste_chunk completed successfully.\n");
f0113e8d:	83 ec 0c             	sub    $0xc,%esp
f0113e90:	68 b0 7d 13 f0       	push   $0xf0137db0
f0113e95:	e8 97 cf fe ff       	call   f0100e31 <cprintf>
f0113e9a:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0113e9d:	a1 70 be 2b f0       	mov    0xf02bbe70,%eax
f0113ea2:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0113ea5:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0113ea8:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0113eab:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0113eb0:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0113eb3:	5b                   	pop    %ebx
f0113eb4:	5e                   	pop    %esi
f0113eb5:	5f                   	pop    %edi
f0113eb6:	5d                   	pop    %ebp
f0113eb7:	c3                   	ret    

f0113eb8 <test_share_chunk>:

//===============================
// 3) TEST SHARE CHUNK:
//===============================
int test_share_chunk()
{
f0113eb8:	55                   	push   %ebp
f0113eb9:	89 e5                	mov    %esp,%ebp
f0113ebb:	57                   	push   %edi
f0113ebc:	56                   	push   %esi
f0113ebd:	53                   	push   %ebx
f0113ebe:	81 ec bc 00 00 00    	sub    $0xbc,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0113ec4:	8d 85 4e ff ff ff    	lea    -0xb2(%ebp),%eax
f0113eca:	bb 7c 7a 13 f0       	mov    $0xf0137a7c,%ebx
f0113ecf:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113ed4:	89 c7                	mov    %eax,%edi
f0113ed6:	89 de                	mov    %ebx,%esi
f0113ed8:	89 d1                	mov    %edx,%ecx
f0113eda:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113edc:	8d 95 5d ff ff ff    	lea    -0xa3(%ebp),%edx
f0113ee2:	b9 23 00 00 00       	mov    $0x23,%ecx
f0113ee7:	b0 00                	mov    $0x0,%al
f0113ee9:	89 d7                	mov    %edx,%edi
f0113eeb:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0113eed:	6a 00                	push   $0x0
f0113eef:	6a 0a                	push   $0xa
f0113ef1:	6a 14                	push   $0x14
f0113ef3:	8d 85 4e ff ff ff    	lea    -0xb2(%ebp),%eax
f0113ef9:	50                   	push   %eax
f0113efa:	e8 cc 4d ff ff       	call   f0108ccb <env_create>
f0113eff:	83 c4 10             	add    $0x10,%esp
f0113f02:	89 45 d0             	mov    %eax,-0x30(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0113f05:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0113f08:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0113f0e:	89 45 cc             	mov    %eax,-0x34(%ebp)
	lcr3(env->env_cr3) ;
f0113f11:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0113f14:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f0113f1a:	89 45 80             	mov    %eax,-0x80(%ebp)
f0113f1d:	8b 45 80             	mov    -0x80(%ebp),%eax
f0113f20:	0f 22 d8             	mov    %eax,%cr3
	//===================================================

	ClearUserSpace(proc_directory);
f0113f23:	83 ec 0c             	sub    $0xc,%esp
f0113f26:	ff 75 cc             	pushl  -0x34(%ebp)
f0113f29:	e8 0f 2e 00 00       	call   f0116d3d <ClearUserSpace>
f0113f2e:	83 c4 10             	add    $0x10,%esp

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f0113f31:	c7 45 c4 00 04 00 00 	movl   $0x400,-0x3c(%ebp)
	int mega = 1024*1024 ;
f0113f38:	c7 45 c0 00 00 10 00 	movl   $0x100000,-0x40(%ebp)
	uint32 eval = 0;
f0113f3f:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint8 correct =1 ;
f0113f46:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	extern char end_of_kernel[];

	/*======================================*/
	/*PART I: Destination page(s) exist 20% */
	/*======================================*/
	cprintf("\nCASE I: Destination page(s) exist [20%]\n") ;
f0113f4a:	83 ec 0c             	sub    $0xc,%esp
f0113f4d:	68 28 86 13 f0       	push   $0xf0138628
f0113f52:	e8 da ce fe ff       	call   f0100e31 <cprintf>
f0113f57:	83 c4 10             	add    $0x10,%esp
	{
		ptr1 = (char*)0xF0100000;
f0113f5a:	c7 45 bc 00 00 10 f0 	movl   $0xf0100000,-0x44(%ebp)
		ptr2 = (char*)0xF0104000;
f0113f61:	c7 45 b8 00 40 10 f0 	movl   $0xf0104000,-0x48(%ebp)
		tptr[1] = *ptr1 ;
f0113f68:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113f6b:	8a 00                	mov    (%eax),%al
f0113f6d:	88 85 45 ff ff ff    	mov    %al,-0xbb(%ebp)
		tptr[2] = *ptr2 ;
f0113f73:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113f76:	8a 00                	mov    (%eax),%al
f0113f78:	88 85 46 ff ff ff    	mov    %al,-0xba(%ebp)

		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113f7e:	e8 43 8a ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0113f83:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0xF0100000,0xF0104000, 6*kilo, PERM_WRITEABLE) ;
f0113f86:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113f89:	89 d0                	mov    %edx,%eax
f0113f8b:	01 c0                	add    %eax,%eax
f0113f8d:	01 d0                	add    %edx,%eax
f0113f8f:	01 c0                	add    %eax,%eax
f0113f91:	83 ec 0c             	sub    $0xc,%esp
f0113f94:	6a 02                	push   $0x2
f0113f96:	50                   	push   %eax
f0113f97:	68 00 40 10 f0       	push   $0xf0104000
f0113f9c:	68 00 00 10 f0       	push   $0xf0100000
f0113fa1:	ff 75 cc             	pushl  -0x34(%ebp)
f0113fa4:	e8 18 4c ff ff       	call   f0108bc1 <share_chunk>
f0113fa9:	83 c4 20             	add    $0x20,%esp
f0113fac:	89 45 b0             	mov    %eax,-0x50(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113faf:	e8 12 8a ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0113fb4:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != -1 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 0)
f0113fb7:	83 7d b0 ff          	cmpl   $0xffffffff,-0x50(%ebp)
f0113fbb:	75 08                	jne    f0113fc5 <test_share_chunk+0x10d>
f0113fbd:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113fc0:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f0113fc3:	74 28                	je     f0113fed <test_share_chunk+0x135>
		{
			warn("[EVAL] share_chunk: Failed (dest is exist... operation should be denied) ret=%d diff=%d\n", ret, (numOfFreeFramesBefore - numOfFreeFramesAfter));
f0113fc5:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113fc8:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0113fcb:	83 ec 0c             	sub    $0xc,%esp
f0113fce:	50                   	push   %eax
f0113fcf:	ff 75 b0             	pushl  -0x50(%ebp)
f0113fd2:	68 54 86 13 f0       	push   $0xf0138654
f0113fd7:	68 47 03 00 00       	push   $0x347
f0113fdc:	68 7a 73 13 f0       	push   $0xf013737a
f0113fe1:	e8 d8 c3 fe ff       	call   f01003be <_warn>
f0113fe6:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113fe9:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113fed:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113ff1:	74 04                	je     f0113ff7 <test_share_chunk+0x13f>
f0113ff3:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113ff7:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0xF0100000, 0xF0104000, 8*kilo, 1, 0x003, 0x007, 0x003, 0x007, ~CHK_SHARE) == 0)
f0113ffb:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113ffe:	c1 e0 03             	shl    $0x3,%eax
f0114001:	83 ec 08             	sub    $0x8,%esp
f0114004:	68 fd 00 00 00       	push   $0xfd
f0114009:	6a 07                	push   $0x7
f011400b:	6a 03                	push   $0x3
f011400d:	6a 07                	push   $0x7
f011400f:	6a 03                	push   $0x3
f0114011:	6a 01                	push   $0x1
f0114013:	50                   	push   %eax
f0114014:	68 00 40 10 f0       	push   $0xf0104000
f0114019:	68 00 00 10 f0       	push   $0xf0100000
f011401e:	ff 75 cc             	pushl  -0x34(%ebp)
f0114021:	e8 4b 2d 00 00       	call   f0116d71 <CCP>
f0114026:	83 c4 30             	add    $0x30,%esp
f0114029:	85 c0                	test   %eax,%eax
f011402b:	75 1e                	jne    f011404b <test_share_chunk+0x193>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f011402d:	83 ec 04             	sub    $0x4,%esp
f0114030:	68 b0 86 13 f0       	push   $0xf01386b0
f0114035:	68 4f 03 00 00       	push   $0x34f
f011403a:	68 7a 73 13 f0       	push   $0xf013737a
f011403f:	e8 7a c3 fe ff       	call   f01003be <_warn>
f0114044:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114047:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011404b:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011404f:	74 04                	je     f0114055 <test_share_chunk+0x19d>
f0114051:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)

		*ptr1 = 'A' ;
f0114055:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114058:	c6 00 41             	movb   $0x41,(%eax)
		*ptr2 = 'B' ;
f011405b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011405e:	c6 00 42             	movb   $0x42,(%eax)

		if ((*ptr1) != 'A' || (*ptr2) != 'B')
f0114061:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114064:	8a 00                	mov    (%eax),%al
f0114066:	3c 41                	cmp    $0x41,%al
f0114068:	75 09                	jne    f0114073 <test_share_chunk+0x1bb>
f011406a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011406d:	8a 00                	mov    (%eax),%al
f011406f:	3c 42                	cmp    $0x42,%al
f0114071:	74 1e                	je     f0114091 <test_share_chunk+0x1d9>
		{
			warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f0114073:	83 ec 04             	sub    $0x4,%esp
f0114076:	68 f8 86 13 f0       	push   $0xf01386f8
f011407b:	68 59 03 00 00       	push   $0x359
f0114080:	68 7a 73 13 f0       	push   $0xf013737a
f0114085:	e8 34 c3 fe ff       	call   f01003be <_warn>
f011408a:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011408d:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0114091:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114095:	74 04                	je     f011409b <test_share_chunk+0x1e3>
f0114097:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011409b:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		*ptr1 = tptr[1] ;
f011409f:	8a 95 45 ff ff ff    	mov    -0xbb(%ebp),%dl
f01140a5:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01140a8:	88 10                	mov    %dl,(%eax)
		*ptr2 = tptr[2] ;
f01140aa:	8a 95 46 ff ff ff    	mov    -0xba(%ebp),%dl
f01140b0:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01140b3:	88 10                	mov    %dl,(%eax)
	}
	cprintf("\nCASE I: END\n") ;
f01140b5:	83 ec 0c             	sub    $0xc,%esp
f01140b8:	68 2d 87 13 f0       	push   $0xf013872d
f01140bd:	e8 6f cd fe ff       	call   f0100e31 <cprintf>
f01140c2:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART II: Destination page(s) not exist [Supervisor] 25% */
	/*========================================================*/
	cprintf("\nCASE II: Destination page(s) not exist [Supervisor] [25%]\n") ;
f01140c5:	83 ec 0c             	sub    $0xc,%esp
f01140c8:	68 3c 87 13 f0       	push   $0xf013873c
f01140cd:	e8 5f cd fe ff       	call   f0100e31 <cprintf>
f01140d2:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f01140d5:	e8 ec 88 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f01140da:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0xF0000000,0x40000000, 32*mega, PERM_WRITEABLE | PERM_AVAILABLE) ;
f01140dd:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01140e0:	c1 e0 05             	shl    $0x5,%eax
f01140e3:	83 ec 0c             	sub    $0xc,%esp
f01140e6:	68 02 0e 00 00       	push   $0xe02
f01140eb:	50                   	push   %eax
f01140ec:	68 00 00 00 40       	push   $0x40000000
f01140f1:	68 00 00 00 f0       	push   $0xf0000000
f01140f6:	ff 75 cc             	pushl  -0x34(%ebp)
f01140f9:	e8 c3 4a ff ff       	call   f0108bc1 <share_chunk>
f01140fe:	83 c4 20             	add    $0x20,%esp
f0114101:	89 45 a8             	mov    %eax,-0x58(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0114104:	e8 bd 88 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0114109:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != (32*mega) / (4*mega))
f011410c:	83 7d a8 00          	cmpl   $0x0,-0x58(%ebp)
f0114110:	75 1f                	jne    f0114131 <test_share_chunk+0x279>
f0114112:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114115:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114118:	89 c1                	mov    %eax,%ecx
f011411a:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011411d:	c1 e0 05             	shl    $0x5,%eax
f0114120:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0114123:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f011412a:	99                   	cltd   
f011412b:	f7 fb                	idiv   %ebx
f011412d:	39 c1                	cmp    %eax,%ecx
f011412f:	74 28                	je     f0114159 <test_share_chunk+0x2a1>
		{
			warn("[EVAL] share_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0114131:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114134:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114137:	83 ec 0c             	sub    $0xc,%esp
f011413a:	50                   	push   %eax
f011413b:	ff 75 a8             	pushl  -0x58(%ebp)
f011413e:	68 78 87 13 f0       	push   $0xf0138778
f0114143:	68 71 03 00 00       	push   $0x371
f0114148:	68 7a 73 13 f0       	push   $0xf013737a
f011414d:	e8 6c c2 fe ff       	call   f01003be <_warn>
f0114152:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114155:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114159:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011415d:	74 04                	je     f0114163 <test_share_chunk+0x2ab>
f011415f:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114163:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0114167:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0xF0000000, 0x40000000, 32*mega, -1, 0xE03, 0xE07, 0x003, 0x007, CHK_SHARE) == 0)
f011416e:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114171:	c1 e0 05             	shl    $0x5,%eax
f0114174:	83 ec 08             	sub    $0x8,%esp
f0114177:	6a 02                	push   $0x2
f0114179:	6a 07                	push   $0x7
f011417b:	6a 03                	push   $0x3
f011417d:	68 07 0e 00 00       	push   $0xe07
f0114182:	68 03 0e 00 00       	push   $0xe03
f0114187:	6a ff                	push   $0xffffffff
f0114189:	50                   	push   %eax
f011418a:	68 00 00 00 40       	push   $0x40000000
f011418f:	68 00 00 00 f0       	push   $0xf0000000
f0114194:	ff 75 cc             	pushl  -0x34(%ebp)
f0114197:	e8 d5 2b 00 00       	call   f0116d71 <CCP>
f011419c:	83 c4 30             	add    $0x30,%esp
f011419f:	85 c0                	test   %eax,%eax
f01141a1:	75 25                	jne    f01141c8 <test_share_chunk+0x310>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f01141a3:	83 ec 04             	sub    $0x4,%esp
f01141a6:	68 b0 86 13 f0       	push   $0xf01386b0
f01141ab:	68 7a 03 00 00       	push   $0x37a
f01141b0:	68 7a 73 13 f0       	push   $0xf013737a
f01141b5:	e8 04 c2 fe ff       	call   f01003be <_warn>
f01141ba:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01141bd:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f01141c1:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}

		if (CCP(proc_directory, 0xF0000000, 0x40000000, 12*kilo, 2, 0xE03, 0xE07, 0x003, 0x007, CHK_SHARE) == 0)
f01141c8:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01141cb:	89 d0                	mov    %edx,%eax
f01141cd:	01 c0                	add    %eax,%eax
f01141cf:	01 d0                	add    %edx,%eax
f01141d1:	c1 e0 02             	shl    $0x2,%eax
f01141d4:	83 ec 08             	sub    $0x8,%esp
f01141d7:	6a 02                	push   $0x2
f01141d9:	6a 07                	push   $0x7
f01141db:	6a 03                	push   $0x3
f01141dd:	68 07 0e 00 00       	push   $0xe07
f01141e2:	68 03 0e 00 00       	push   $0xe03
f01141e7:	6a 02                	push   $0x2
f01141e9:	50                   	push   %eax
f01141ea:	68 00 00 00 40       	push   $0x40000000
f01141ef:	68 00 00 00 f0       	push   $0xf0000000
f01141f4:	ff 75 cc             	pushl  -0x34(%ebp)
f01141f7:	e8 75 2b 00 00       	call   f0116d71 <CCP>
f01141fc:	83 c4 30             	add    $0x30,%esp
f01141ff:	85 c0                	test   %eax,%eax
f0114201:	75 1e                	jne    f0114221 <test_share_chunk+0x369>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0114203:	83 ec 04             	sub    $0x4,%esp
f0114206:	68 b0 86 13 f0       	push   $0xf01386b0
f011420b:	68 81 03 00 00       	push   $0x381
f0114210:	68 7a 73 13 f0       	push   $0xf013737a
f0114215:	e8 a4 c1 fe ff       	call   f01003be <_warn>
f011421a:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011421d:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114221:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114225:	74 04                	je     f011422b <test_share_chunk+0x373>
f0114227:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011422b:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		extern char end_of_kernel[];
		uint32 endRange = ((uint32)end_of_kernel - KERNEL_BASE);
f011422f:	b8 6c e5 2d f0       	mov    $0xf02de56c,%eax
f0114234:	05 00 00 00 10       	add    $0x10000000,%eax
f0114239:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		if (CCP(proc_directory, 0xF0000000+PHYS_IO_MEM, 0x40000000+PHYS_IO_MEM, endRange - PHYS_IO_MEM, 2, 0xE03, 0xE07, 0x003, 0x007, CHK_SHARE) == 0)
f011423c:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011423f:	2d 00 00 0a 00       	sub    $0xa0000,%eax
f0114244:	83 ec 08             	sub    $0x8,%esp
f0114247:	6a 02                	push   $0x2
f0114249:	6a 07                	push   $0x7
f011424b:	6a 03                	push   $0x3
f011424d:	68 07 0e 00 00       	push   $0xe07
f0114252:	68 03 0e 00 00       	push   $0xe03
f0114257:	6a 02                	push   $0x2
f0114259:	50                   	push   %eax
f011425a:	68 00 00 0a 40       	push   $0x400a0000
f011425f:	68 00 00 0a f0       	push   $0xf00a0000
f0114264:	ff 75 cc             	pushl  -0x34(%ebp)
f0114267:	e8 05 2b 00 00       	call   f0116d71 <CCP>
f011426c:	83 c4 30             	add    $0x30,%esp
f011426f:	85 c0                	test   %eax,%eax
f0114271:	75 1e                	jne    f0114291 <test_share_chunk+0x3d9>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0114273:	83 ec 04             	sub    $0x4,%esp
f0114276:	68 b0 86 13 f0       	push   $0xf01386b0
f011427b:	68 8b 03 00 00       	push   $0x38b
f0114280:	68 7a 73 13 f0       	push   $0xf013737a
f0114285:	e8 34 c1 fe ff       	call   f01003be <_warn>
f011428a:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011428d:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114291:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114295:	74 04                	je     f011429b <test_share_chunk+0x3e3>
f0114297:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011429b:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f011429f:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f01142a3:	0f 84 a4 00 00 00    	je     f011434d <test_share_chunk+0x495>
		{
			ptr1 = (char*)0xF00007FF; *ptr1 = 'A' ;
f01142a9:	c7 45 bc ff 07 00 f0 	movl   $0xf00007ff,-0x44(%ebp)
f01142b0:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01142b3:	c6 00 41             	movb   $0x41,(%eax)
			ptr2 = (char*)0x400007FF;
f01142b6:	c7 45 b8 ff 07 00 40 	movl   $0x400007ff,-0x48(%ebp)

			if ((*ptr1) != 'A' || (*ptr2) != 'A')
f01142bd:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01142c0:	8a 00                	mov    (%eax),%al
f01142c2:	3c 41                	cmp    $0x41,%al
f01142c4:	75 09                	jne    f01142cf <test_share_chunk+0x417>
f01142c6:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01142c9:	8a 00                	mov    (%eax),%al
f01142cb:	3c 41                	cmp    $0x41,%al
f01142cd:	74 1e                	je     f01142ed <test_share_chunk+0x435>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f01142cf:	83 ec 04             	sub    $0x4,%esp
f01142d2:	68 f8 86 13 f0       	push   $0xf01386f8
f01142d7:	68 98 03 00 00       	push   $0x398
f01142dc:	68 7a 73 13 f0       	push   $0xf013737a
f01142e1:	e8 d8 c0 fe ff       	call   f01003be <_warn>
f01142e6:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f01142e9:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f01142ed:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01142f1:	74 04                	je     f01142f7 <test_share_chunk+0x43f>
f01142f3:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f01142f7:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

			ptr1 = (char*)0x41000FFF; *ptr1 = 'C' ;
f01142fb:	c7 45 bc ff 0f 00 41 	movl   $0x41000fff,-0x44(%ebp)
f0114302:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114305:	c6 00 43             	movb   $0x43,(%eax)
			ptr2 = (char*)0xF1000FFF;
f0114308:	c7 45 b8 ff 0f 00 f1 	movl   $0xf1000fff,-0x48(%ebp)

			if ((*ptr1) != 'C' || (*ptr2) != 'C')
f011430f:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114312:	8a 00                	mov    (%eax),%al
f0114314:	3c 43                	cmp    $0x43,%al
f0114316:	75 09                	jne    f0114321 <test_share_chunk+0x469>
f0114318:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011431b:	8a 00                	mov    (%eax),%al
f011431d:	3c 43                	cmp    $0x43,%al
f011431f:	74 1e                	je     f011433f <test_share_chunk+0x487>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f0114321:	83 ec 04             	sub    $0x4,%esp
f0114324:	68 f8 86 13 f0       	push   $0xf01386f8
f0114329:	68 a3 03 00 00       	push   $0x3a3
f011432e:	68 7a 73 13 f0       	push   $0xf013737a
f0114333:	e8 86 c0 fe ff       	call   f01003be <_warn>
f0114338:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f011433b:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f011433f:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114343:	74 04                	je     f0114349 <test_share_chunk+0x491>
f0114345:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0114349:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE II: END\n") ;
f011434d:	83 ec 0c             	sub    $0xc,%esp
f0114350:	68 07 7d 13 f0       	push   $0xf0137d07
f0114355:	e8 d7 ca fe ff       	call   f0100e31 <cprintf>
f011435a:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART III: Destination page(s) not exist [User r/w] 25%  */
	/*========================================================*/
	cprintf("\nCASE III: Destination page(s) not exist [User r/w] [25%]\n") ;
f011435d:	83 ec 0c             	sub    $0xc,%esp
f0114360:	68 c8 87 13 f0       	push   $0xf01387c8
f0114365:	e8 c7 ca fe ff       	call   f0100e31 <cprintf>
f011436a:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f011436d:	e8 54 86 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0114372:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0x40000000,0x0, 648*kilo, PERM_WRITEABLE|PERM_USER) ;
f0114375:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114378:	89 d0                	mov    %edx,%eax
f011437a:	c1 e0 03             	shl    $0x3,%eax
f011437d:	01 d0                	add    %edx,%eax
f011437f:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0114386:	01 d0                	add    %edx,%eax
f0114388:	c1 e0 03             	shl    $0x3,%eax
f011438b:	83 ec 0c             	sub    $0xc,%esp
f011438e:	6a 06                	push   $0x6
f0114390:	50                   	push   %eax
f0114391:	6a 00                	push   $0x0
f0114393:	68 00 00 00 40       	push   $0x40000000
f0114398:	ff 75 cc             	pushl  -0x34(%ebp)
f011439b:	e8 21 48 ff ff       	call   f0108bc1 <share_chunk>
f01143a0:	83 c4 20             	add    $0x20,%esp
f01143a3:	89 45 a0             	mov    %eax,-0x60(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01143a6:	e8 1b 86 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f01143ab:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 1)
f01143ae:	83 7d a0 00          	cmpl   $0x0,-0x60(%ebp)
f01143b2:	75 0b                	jne    f01143bf <test_share_chunk+0x507>
f01143b4:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01143b7:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01143ba:	83 f8 01             	cmp    $0x1,%eax
f01143bd:	74 28                	je     f01143e7 <test_share_chunk+0x52f>
		{
			warn("[EVAL] share_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f01143bf:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01143c2:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01143c5:	83 ec 0c             	sub    $0xc,%esp
f01143c8:	50                   	push   %eax
f01143c9:	ff 75 a0             	pushl  -0x60(%ebp)
f01143cc:	68 78 87 13 f0       	push   $0xf0138778
f01143d1:	68 b9 03 00 00       	push   $0x3b9
f01143d6:	68 7a 73 13 f0       	push   $0xf013737a
f01143db:	e8 de bf fe ff       	call   f01003be <_warn>
f01143e0:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01143e3:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01143e7:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01143eb:	74 04                	je     f01143f1 <test_share_chunk+0x539>
f01143ed:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01143f1:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f01143f5:	c7 45 d8 01 00 00 00 	movl   $0x1,-0x28(%ebp)
		if (CCP(proc_directory, 0x40000000, 0x0, PHYS_IO_MEM + 4*kilo, -1, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f01143fc:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01143ff:	05 00 80 02 00       	add    $0x28000,%eax
f0114404:	c1 e0 02             	shl    $0x2,%eax
f0114407:	83 ec 08             	sub    $0x8,%esp
f011440a:	6a 02                	push   $0x2
f011440c:	6a 07                	push   $0x7
f011440e:	6a 03                	push   $0x3
f0114410:	6a 07                	push   $0x7
f0114412:	6a 07                	push   $0x7
f0114414:	6a ff                	push   $0xffffffff
f0114416:	50                   	push   %eax
f0114417:	6a 00                	push   $0x0
f0114419:	68 00 00 00 40       	push   $0x40000000
f011441e:	ff 75 cc             	pushl  -0x34(%ebp)
f0114421:	e8 4b 29 00 00       	call   f0116d71 <CCP>
f0114426:	83 c4 30             	add    $0x30,%esp
f0114429:	85 c0                	test   %eax,%eax
f011442b:	75 25                	jne    f0114452 <test_share_chunk+0x59a>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f011442d:	83 ec 04             	sub    $0x4,%esp
f0114430:	68 b0 86 13 f0       	push   $0xf01386b0
f0114435:	68 c2 03 00 00       	push   $0x3c2
f011443a:	68 7a 73 13 f0       	push   $0xf013737a
f011443f:	e8 7a bf fe ff       	call   f01003be <_warn>
f0114444:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114447:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f011444b:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
		}

		if (CCP(proc_directory, 0x40000000, 0x0, 12*kilo, 3, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f0114452:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114455:	89 d0                	mov    %edx,%eax
f0114457:	01 c0                	add    %eax,%eax
f0114459:	01 d0                	add    %edx,%eax
f011445b:	c1 e0 02             	shl    $0x2,%eax
f011445e:	83 ec 08             	sub    $0x8,%esp
f0114461:	6a 02                	push   $0x2
f0114463:	6a 07                	push   $0x7
f0114465:	6a 03                	push   $0x3
f0114467:	6a 07                	push   $0x7
f0114469:	6a 07                	push   $0x7
f011446b:	6a 03                	push   $0x3
f011446d:	50                   	push   %eax
f011446e:	6a 00                	push   $0x0
f0114470:	68 00 00 00 40       	push   $0x40000000
f0114475:	ff 75 cc             	pushl  -0x34(%ebp)
f0114478:	e8 f4 28 00 00       	call   f0116d71 <CCP>
f011447d:	83 c4 30             	add    $0x30,%esp
f0114480:	85 c0                	test   %eax,%eax
f0114482:	75 1e                	jne    f01144a2 <test_share_chunk+0x5ea>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0114484:	83 ec 04             	sub    $0x4,%esp
f0114487:	68 b0 86 13 f0       	push   $0xf01386b0
f011448c:	68 c9 03 00 00       	push   $0x3c9
f0114491:	68 7a 73 13 f0       	push   $0xf013737a
f0114496:	e8 23 bf fe ff       	call   f01003be <_warn>
f011449b:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011449e:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01144a2:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01144a6:	74 04                	je     f01144ac <test_share_chunk+0x5f4>
f01144a8:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01144ac:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0x40003000, 0x3000, PHYS_IO_MEM - 12*kilo, 2, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f01144b0:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01144b3:	89 d0                	mov    %edx,%eax
f01144b5:	01 c0                	add    %eax,%eax
f01144b7:	01 d0                	add    %edx,%eax
f01144b9:	c1 e0 02             	shl    $0x2,%eax
f01144bc:	f7 d8                	neg    %eax
f01144be:	05 00 00 0a 00       	add    $0xa0000,%eax
f01144c3:	83 ec 08             	sub    $0x8,%esp
f01144c6:	6a 02                	push   $0x2
f01144c8:	6a 07                	push   $0x7
f01144ca:	6a 03                	push   $0x3
f01144cc:	6a 07                	push   $0x7
f01144ce:	6a 07                	push   $0x7
f01144d0:	6a 02                	push   $0x2
f01144d2:	50                   	push   %eax
f01144d3:	68 00 30 00 00       	push   $0x3000
f01144d8:	68 00 30 00 40       	push   $0x40003000
f01144dd:	ff 75 cc             	pushl  -0x34(%ebp)
f01144e0:	e8 8c 28 00 00       	call   f0116d71 <CCP>
f01144e5:	83 c4 30             	add    $0x30,%esp
f01144e8:	85 c0                	test   %eax,%eax
f01144ea:	75 1e                	jne    f011450a <test_share_chunk+0x652>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f01144ec:	83 ec 04             	sub    $0x4,%esp
f01144ef:	68 b0 86 13 f0       	push   $0xf01386b0
f01144f4:	68 d1 03 00 00       	push   $0x3d1
f01144f9:	68 7a 73 13 f0       	push   $0xf013737a
f01144fe:	e8 bb be fe ff       	call   f01003be <_warn>
f0114503:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114506:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011450a:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011450e:	74 04                	je     f0114514 <test_share_chunk+0x65c>
f0114510:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114514:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0x40000000+PHYS_IO_MEM, PHYS_IO_MEM, 4*kilo, 3, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f0114518:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011451b:	c1 e0 02             	shl    $0x2,%eax
f011451e:	83 ec 08             	sub    $0x8,%esp
f0114521:	6a 02                	push   $0x2
f0114523:	6a 07                	push   $0x7
f0114525:	6a 03                	push   $0x3
f0114527:	6a 07                	push   $0x7
f0114529:	6a 07                	push   $0x7
f011452b:	6a 03                	push   $0x3
f011452d:	50                   	push   %eax
f011452e:	68 00 00 0a 00       	push   $0xa0000
f0114533:	68 00 00 0a 40       	push   $0x400a0000
f0114538:	ff 75 cc             	pushl  -0x34(%ebp)
f011453b:	e8 31 28 00 00       	call   f0116d71 <CCP>
f0114540:	83 c4 30             	add    $0x30,%esp
f0114543:	85 c0                	test   %eax,%eax
f0114545:	75 1e                	jne    f0114565 <test_share_chunk+0x6ad>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0114547:	83 ec 04             	sub    $0x4,%esp
f011454a:	68 b0 86 13 f0       	push   $0xf01386b0
f011454f:	68 d9 03 00 00       	push   $0x3d9
f0114554:	68 7a 73 13 f0       	push   $0xf013737a
f0114559:	e8 60 be fe ff       	call   f01003be <_warn>
f011455e:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114561:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114565:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114569:	74 04                	je     f011456f <test_share_chunk+0x6b7>
f011456b:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011456f:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f0114573:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
f0114577:	0f 84 92 00 00 00    	je     f011460f <test_share_chunk+0x757>
		{
			ptr1 = (char*)0x7FF;
f011457d:	c7 45 bc ff 07 00 00 	movl   $0x7ff,-0x44(%ebp)
			ptr2 = (char*)0xF00007FF;
f0114584:	c7 45 b8 ff 07 00 f0 	movl   $0xf00007ff,-0x48(%ebp)
			ptr3 = (char*)0x400007FF;
f011458b:	c7 45 9c ff 07 00 40 	movl   $0x400007ff,-0x64(%ebp)
			ptr4 = (char*)0x9FFFF; *ptr4 = 'D';
f0114592:	c7 45 98 ff ff 09 00 	movl   $0x9ffff,-0x68(%ebp)
f0114599:	8b 45 98             	mov    -0x68(%ebp),%eax
f011459c:	c6 00 44             	movb   $0x44,(%eax)
			ptr5 = (char*)0xF009FFFF;
f011459f:	c7 45 94 ff ff 09 f0 	movl   $0xf009ffff,-0x6c(%ebp)
			ptr6 = (char*)0x4009FFFF;
f01145a6:	c7 45 90 ff ff 09 40 	movl   $0x4009ffff,-0x70(%ebp)

			if ((*ptr1) != 'A' || (*ptr2) != 'A' || (*ptr3) != 'A' ||
f01145ad:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01145b0:	8a 00                	mov    (%eax),%al
f01145b2:	3c 41                	cmp    $0x41,%al
f01145b4:	75 2d                	jne    f01145e3 <test_share_chunk+0x72b>
f01145b6:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01145b9:	8a 00                	mov    (%eax),%al
f01145bb:	3c 41                	cmp    $0x41,%al
f01145bd:	75 24                	jne    f01145e3 <test_share_chunk+0x72b>
f01145bf:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01145c2:	8a 00                	mov    (%eax),%al
f01145c4:	3c 41                	cmp    $0x41,%al
f01145c6:	75 1b                	jne    f01145e3 <test_share_chunk+0x72b>
					(*ptr4) != 'D' || (*ptr5) != 'D'|| (*ptr6) != 'D')
f01145c8:	8b 45 98             	mov    -0x68(%ebp),%eax
f01145cb:	8a 00                	mov    (%eax),%al
			ptr3 = (char*)0x400007FF;
			ptr4 = (char*)0x9FFFF; *ptr4 = 'D';
			ptr5 = (char*)0xF009FFFF;
			ptr6 = (char*)0x4009FFFF;

			if ((*ptr1) != 'A' || (*ptr2) != 'A' || (*ptr3) != 'A' ||
f01145cd:	3c 44                	cmp    $0x44,%al
f01145cf:	75 12                	jne    f01145e3 <test_share_chunk+0x72b>
					(*ptr4) != 'D' || (*ptr5) != 'D'|| (*ptr6) != 'D')
f01145d1:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01145d4:	8a 00                	mov    (%eax),%al
f01145d6:	3c 44                	cmp    $0x44,%al
f01145d8:	75 09                	jne    f01145e3 <test_share_chunk+0x72b>
f01145da:	8b 45 90             	mov    -0x70(%ebp),%eax
f01145dd:	8a 00                	mov    (%eax),%al
f01145df:	3c 44                	cmp    $0x44,%al
f01145e1:	74 1e                	je     f0114601 <test_share_chunk+0x749>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f01145e3:	83 ec 04             	sub    $0x4,%esp
f01145e6:	68 f8 86 13 f0       	push   $0xf01386f8
f01145eb:	68 eb 03 00 00       	push   $0x3eb
f01145f0:	68 7a 73 13 f0       	push   $0xf013737a
f01145f5:	e8 c4 bd fe ff       	call   f01003be <_warn>
f01145fa:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f01145fd:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0114601:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114605:	74 04                	je     f011460b <test_share_chunk+0x753>
f0114607:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f011460b:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE III: END\n") ;
f011460f:	83 ec 0c             	sub    $0xc,%esp
f0114612:	68 6a 7d 13 f0       	push   $0xf0137d6a
f0114617:	e8 15 c8 fe ff       	call   f0100e31 <cprintf>
f011461c:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART IV: Destination page(s) not exist [User r] 30%     */
	/*========================================================*/
	cprintf("\nCASE IV: Destination page(s) not exist [User r] [30%]\n") ;
f011461f:	83 ec 0c             	sub    $0xc,%esp
f0114622:	68 04 88 13 f0       	push   $0xf0138804
f0114627:	e8 05 c8 fe ff       	call   f0100e31 <cprintf>
f011462c:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f011462f:	e8 92 83 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0114634:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0x9FC00,0x3FFC00, 7*kilo, PERM_USER) ;
f0114637:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f011463a:	89 d0                	mov    %edx,%eax
f011463c:	01 c0                	add    %eax,%eax
f011463e:	01 d0                	add    %edx,%eax
f0114640:	01 c0                	add    %eax,%eax
f0114642:	01 d0                	add    %edx,%eax
f0114644:	83 ec 0c             	sub    $0xc,%esp
f0114647:	6a 04                	push   $0x4
f0114649:	50                   	push   %eax
f011464a:	68 00 fc 3f 00       	push   $0x3ffc00
f011464f:	68 00 fc 09 00       	push   $0x9fc00
f0114654:	ff 75 cc             	pushl  -0x34(%ebp)
f0114657:	e8 65 45 ff ff       	call   f0108bc1 <share_chunk>
f011465c:	83 c4 20             	add    $0x20,%esp
f011465f:	89 45 8c             	mov    %eax,-0x74(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0114662:	e8 5f 83 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0114667:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 1)
f011466a:	83 7d 8c 00          	cmpl   $0x0,-0x74(%ebp)
f011466e:	75 0b                	jne    f011467b <test_share_chunk+0x7c3>
f0114670:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114673:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114676:	83 f8 01             	cmp    $0x1,%eax
f0114679:	74 28                	je     f01146a3 <test_share_chunk+0x7eb>
		{
			warn("[EVAL] share_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f011467b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011467e:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114681:	83 ec 0c             	sub    $0xc,%esp
f0114684:	50                   	push   %eax
f0114685:	ff 75 8c             	pushl  -0x74(%ebp)
f0114688:	68 78 87 13 f0       	push   $0xf0138778
f011468d:	68 01 04 00 00       	push   $0x401
f0114692:	68 7a 73 13 f0       	push   $0xf013737a
f0114697:	e8 22 bd fe ff       	call   f01003be <_warn>
f011469c:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011469f:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f01146a3:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01146a7:	74 04                	je     f01146ad <test_share_chunk+0x7f5>
f01146a9:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01146ad:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f01146b1:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%ebp)
		if (CCP(proc_directory, 0x9F000, 0x3FF000, 12*kilo, -1, 0x005, 0x007, 0x007, 0x007, CHK_SHARE) == 0)
f01146b8:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01146bb:	89 d0                	mov    %edx,%eax
f01146bd:	01 c0                	add    %eax,%eax
f01146bf:	01 d0                	add    %edx,%eax
f01146c1:	c1 e0 02             	shl    $0x2,%eax
f01146c4:	83 ec 08             	sub    $0x8,%esp
f01146c7:	6a 02                	push   $0x2
f01146c9:	6a 07                	push   $0x7
f01146cb:	6a 07                	push   $0x7
f01146cd:	6a 07                	push   $0x7
f01146cf:	6a 05                	push   $0x5
f01146d1:	6a ff                	push   $0xffffffff
f01146d3:	50                   	push   %eax
f01146d4:	68 00 f0 3f 00       	push   $0x3ff000
f01146d9:	68 00 f0 09 00       	push   $0x9f000
f01146de:	ff 75 cc             	pushl  -0x34(%ebp)
f01146e1:	e8 8b 26 00 00       	call   f0116d71 <CCP>
f01146e6:	83 c4 30             	add    $0x30,%esp
f01146e9:	85 c0                	test   %eax,%eax
f01146eb:	75 25                	jne    f0114712 <test_share_chunk+0x85a>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f01146ed:	83 ec 04             	sub    $0x4,%esp
f01146f0:	68 b0 86 13 f0       	push   $0xf01386b0
f01146f5:	68 0a 04 00 00       	push   $0x40a
f01146fa:	68 7a 73 13 f0       	push   $0xf013737a
f01146ff:	e8 ba bc fe ff       	call   f01003be <_warn>
f0114704:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114707:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f011470b:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
		}
		if (correct) eval += 5 ;
f0114712:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114716:	74 04                	je     f011471c <test_share_chunk+0x864>
f0114718:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011471c:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0x9F000, 0x3FF000, 4*kilo, 3, 0x005, 0x007, 0x007, 0x007, CHK_SHARE) == 0)
f0114720:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114723:	c1 e0 02             	shl    $0x2,%eax
f0114726:	83 ec 08             	sub    $0x8,%esp
f0114729:	6a 02                	push   $0x2
f011472b:	6a 07                	push   $0x7
f011472d:	6a 07                	push   $0x7
f011472f:	6a 07                	push   $0x7
f0114731:	6a 05                	push   $0x5
f0114733:	6a 03                	push   $0x3
f0114735:	50                   	push   %eax
f0114736:	68 00 f0 3f 00       	push   $0x3ff000
f011473b:	68 00 f0 09 00       	push   $0x9f000
f0114740:	ff 75 cc             	pushl  -0x34(%ebp)
f0114743:	e8 29 26 00 00       	call   f0116d71 <CCP>
f0114748:	83 c4 30             	add    $0x30,%esp
f011474b:	85 c0                	test   %eax,%eax
f011474d:	75 1e                	jne    f011476d <test_share_chunk+0x8b5>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f011474f:	83 ec 04             	sub    $0x4,%esp
f0114752:	68 b0 86 13 f0       	push   $0xf01386b0
f0114757:	68 13 04 00 00       	push   $0x413
f011475c:	68 7a 73 13 f0       	push   $0xf013737a
f0114761:	e8 58 bc fe ff       	call   f01003be <_warn>
f0114766:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114769:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011476d:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114771:	74 04                	je     f0114777 <test_share_chunk+0x8bf>
f0114773:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114777:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0xA0000, 0x400000, 8*kilo, 4, 0x005, 0x007, 0x007, 0x007, CHK_SHARE) == 0)
f011477b:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011477e:	c1 e0 03             	shl    $0x3,%eax
f0114781:	83 ec 08             	sub    $0x8,%esp
f0114784:	6a 02                	push   $0x2
f0114786:	6a 07                	push   $0x7
f0114788:	6a 07                	push   $0x7
f011478a:	6a 07                	push   $0x7
f011478c:	6a 05                	push   $0x5
f011478e:	6a 04                	push   $0x4
f0114790:	50                   	push   %eax
f0114791:	68 00 00 40 00       	push   $0x400000
f0114796:	68 00 00 0a 00       	push   $0xa0000
f011479b:	ff 75 cc             	pushl  -0x34(%ebp)
f011479e:	e8 ce 25 00 00       	call   f0116d71 <CCP>
f01147a3:	83 c4 30             	add    $0x30,%esp
f01147a6:	85 c0                	test   %eax,%eax
f01147a8:	75 1e                	jne    f01147c8 <test_share_chunk+0x910>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f01147aa:	83 ec 04             	sub    $0x4,%esp
f01147ad:	68 b0 86 13 f0       	push   $0xf01386b0
f01147b2:	68 1b 04 00 00       	push   $0x41b
f01147b7:	68 7a 73 13 f0       	push   $0xf013737a
f01147bc:	e8 fd bb fe ff       	call   f01003be <_warn>
f01147c1:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01147c4:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01147c8:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01147cc:	74 04                	je     f01147d2 <test_share_chunk+0x91a>
f01147ce:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01147d2:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f01147d6:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f01147da:	0f 84 b2 00 00 00    	je     f0114892 <test_share_chunk+0x9da>
		{
			ptr1 = (char*)0x0009FFFF;
f01147e0:	c7 45 bc ff ff 09 00 	movl   $0x9ffff,-0x44(%ebp)
			ptr2 = (char*)0x003FFFFF;
f01147e7:	c7 45 b8 ff ff 3f 00 	movl   $0x3fffff,-0x48(%ebp)
			ptr3 = (char*)0x4009FFFF;
f01147ee:	c7 45 9c ff ff 09 40 	movl   $0x4009ffff,-0x64(%ebp)
			ptr4 = (char*)0xF009FFFF;
f01147f5:	c7 45 98 ff ff 09 f0 	movl   $0xf009ffff,-0x68(%ebp)

			ptr5 = (char*)0x000A1001;
f01147fc:	c7 45 94 01 10 0a 00 	movl   $0xa1001,-0x6c(%ebp)
			ptr6 = (char*)0x00401001;
f0114803:	c7 45 90 01 10 40 00 	movl   $0x401001,-0x70(%ebp)
			ptr7 = (char*)0x400A1001;
f011480a:	c7 45 88 01 10 0a 40 	movl   $0x400a1001,-0x78(%ebp)
			ptr8 = (char*)0xF00A1001;
f0114811:	c7 45 84 01 10 0a f0 	movl   $0xf00a1001,-0x7c(%ebp)

			if ((*ptr1) != 'D' || (*ptr2) != 'D' || (*ptr3) != 'D' || (*ptr4) != 'D' ||
f0114818:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011481b:	8a 00                	mov    (%eax),%al
f011481d:	3c 44                	cmp    $0x44,%al
f011481f:	75 45                	jne    f0114866 <test_share_chunk+0x9ae>
f0114821:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0114824:	8a 00                	mov    (%eax),%al
f0114826:	3c 44                	cmp    $0x44,%al
f0114828:	75 3c                	jne    f0114866 <test_share_chunk+0x9ae>
f011482a:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011482d:	8a 00                	mov    (%eax),%al
f011482f:	3c 44                	cmp    $0x44,%al
f0114831:	75 33                	jne    f0114866 <test_share_chunk+0x9ae>
f0114833:	8b 45 98             	mov    -0x68(%ebp),%eax
f0114836:	8a 00                	mov    (%eax),%al
f0114838:	3c 44                	cmp    $0x44,%al
f011483a:	75 2a                	jne    f0114866 <test_share_chunk+0x9ae>
					(*ptr5) != (*ptr6) || (*ptr5) != (*ptr7) ||(*ptr5) != (*ptr8))
f011483c:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011483f:	8a 10                	mov    (%eax),%dl
f0114841:	8b 45 90             	mov    -0x70(%ebp),%eax
f0114844:	8a 00                	mov    (%eax),%al
			ptr5 = (char*)0x000A1001;
			ptr6 = (char*)0x00401001;
			ptr7 = (char*)0x400A1001;
			ptr8 = (char*)0xF00A1001;

			if ((*ptr1) != 'D' || (*ptr2) != 'D' || (*ptr3) != 'D' || (*ptr4) != 'D' ||
f0114846:	38 c2                	cmp    %al,%dl
f0114848:	75 1c                	jne    f0114866 <test_share_chunk+0x9ae>
					(*ptr5) != (*ptr6) || (*ptr5) != (*ptr7) ||(*ptr5) != (*ptr8))
f011484a:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011484d:	8a 10                	mov    (%eax),%dl
f011484f:	8b 45 88             	mov    -0x78(%ebp),%eax
f0114852:	8a 00                	mov    (%eax),%al
f0114854:	38 c2                	cmp    %al,%dl
f0114856:	75 0e                	jne    f0114866 <test_share_chunk+0x9ae>
f0114858:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011485b:	8a 10                	mov    (%eax),%dl
f011485d:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0114860:	8a 00                	mov    (%eax),%al
f0114862:	38 c2                	cmp    %al,%dl
f0114864:	74 1e                	je     f0114884 <test_share_chunk+0x9cc>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f0114866:	83 ec 04             	sub    $0x4,%esp
f0114869:	68 f8 86 13 f0       	push   $0xf01386f8
f011486e:	68 30 04 00 00       	push   $0x430
f0114873:	68 7a 73 13 f0       	push   $0xf013737a
f0114878:	e8 41 bb fe ff       	call   f01003be <_warn>
f011487d:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0114880:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0114884:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114888:	74 04                	je     f011488e <test_share_chunk+0x9d6>
f011488a:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f011488e:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE IV: END\n") ;
f0114892:	83 ec 0c             	sub    $0xc,%esp
f0114895:	68 3c 88 13 f0       	push   $0xf013883c
f011489a:	e8 92 c5 fe ff       	call   f0100e31 <cprintf>
f011489f:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] share_chunk: FINISHED. Evaluation = %d\n", eval);
f01148a2:	83 ec 08             	sub    $0x8,%esp
f01148a5:	ff 75 e4             	pushl  -0x1c(%ebp)
f01148a8:	68 4c 88 13 f0       	push   $0xf013884c
f01148ad:	e8 7f c5 fe ff       	call   f0100e31 <cprintf>
f01148b2:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f01148b5:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f01148b9:	75 10                	jne    f01148cb <test_share_chunk+0xa13>
		cprintf("Congratulations!! test share_chunk completed successfully.\n");
f01148bb:	83 ec 0c             	sub    $0xc,%esp
f01148be:	68 7c 88 13 f0       	push   $0xf013887c
f01148c3:	e8 69 c5 fe ff       	call   f0100e31 <cprintf>
f01148c8:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f01148cb:	a1 70 be 2b f0       	mov    0xf02bbe70,%eax
f01148d0:	89 45 c8             	mov    %eax,-0x38(%ebp)
f01148d3:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01148d6:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f01148d9:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01148de:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01148e1:	5b                   	pop    %ebx
f01148e2:	5e                   	pop    %esi
f01148e3:	5f                   	pop    %edi
f01148e4:	5d                   	pop    %ebp
f01148e5:	c3                   	ret    

f01148e6 <test_allocate_chunk>:

//===============================
// 4) TEST ALLOCATE CHUNK:
//===============================
int test_allocate_chunk()
{
f01148e6:	55                   	push   %ebp
f01148e7:	89 e5                	mov    %esp,%ebp
f01148e9:	57                   	push   %edi
f01148ea:	56                   	push   %esi
f01148eb:	53                   	push   %ebx
f01148ec:	81 ec ac 00 00 00    	sub    $0xac,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f01148f2:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f01148f8:	bb 7c 7a 13 f0       	mov    $0xf0137a7c,%ebx
f01148fd:	ba 0f 00 00 00       	mov    $0xf,%edx
f0114902:	89 c7                	mov    %eax,%edi
f0114904:	89 de                	mov    %ebx,%esi
f0114906:	89 d1                	mov    %edx,%ecx
f0114908:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011490a:	8d 95 6d ff ff ff    	lea    -0x93(%ebp),%edx
f0114910:	b9 23 00 00 00       	mov    $0x23,%ecx
f0114915:	b0 00                	mov    $0x0,%al
f0114917:	89 d7                	mov    %edx,%edi
f0114919:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f011491b:	6a 00                	push   $0x0
f011491d:	6a 0a                	push   $0xa
f011491f:	6a 14                	push   $0x14
f0114921:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f0114927:	50                   	push   %eax
f0114928:	e8 9e 43 ff ff       	call   f0108ccb <env_create>
f011492d:	83 c4 10             	add    $0x10,%esp
f0114930:	89 45 d0             	mov    %eax,-0x30(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0114933:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0114936:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f011493c:	89 45 cc             	mov    %eax,-0x34(%ebp)
	lcr3(env->env_cr3) ;
f011493f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0114942:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f0114948:	89 45 90             	mov    %eax,-0x70(%ebp)
f011494b:	8b 45 90             	mov    -0x70(%ebp),%eax
f011494e:	0f 22 d8             	mov    %eax,%cr3
	//===================================================

	ClearUserSpace(proc_directory);
f0114951:	83 ec 0c             	sub    $0xc,%esp
f0114954:	ff 75 cc             	pushl  -0x34(%ebp)
f0114957:	e8 e1 23 00 00       	call   f0116d3d <ClearUserSpace>
f011495c:	83 c4 10             	add    $0x10,%esp

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f011495f:	c7 45 c4 00 04 00 00 	movl   $0x400,-0x3c(%ebp)
	int mega = 1024*1024 ;
f0114966:	c7 45 c0 00 00 10 00 	movl   $0x100000,-0x40(%ebp)
	uint32 eval = 0;
f011496d:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	uint8 correct =1 ;
f0114974:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)
	extern char end_of_kernel[];

	/*======================================*/
	/*PART I: Destination page(s) exist 30% */
	/*======================================*/
	cprintf("\nCASE I: Destination page(s) exist [30%]\n") ;
f0114978:	83 ec 0c             	sub    $0xc,%esp
f011497b:	68 b8 88 13 f0       	push   $0xf01388b8
f0114980:	e8 ac c4 fe ff       	call   f0100e31 <cprintf>
f0114985:	83 c4 10             	add    $0x10,%esp
	{
		ptr1 = (char*)KERNEL_STACK_TOP - 1;
f0114988:	c7 45 e4 ff ff bf ef 	movl   $0xefbfffff,-0x1c(%ebp)
		ptr2 = (char*)KERNEL_STACK_TOP - 2;
f011498f:	c7 45 bc fe ff bf ef 	movl   $0xefbffffe,-0x44(%ebp)
		while ((ptr1 > (char*)(KERNEL_STACK_TOP - PAGE_SIZE)) && *ptr1 == 0)	ptr1-- ;
f0114996:	eb 03                	jmp    f011499b <test_allocate_chunk+0xb5>
f0114998:	ff 4d e4             	decl   -0x1c(%ebp)
f011499b:	81 7d e4 00 f0 bf ef 	cmpl   $0xefbff000,-0x1c(%ebp)
f01149a2:	76 09                	jbe    f01149ad <test_allocate_chunk+0xc7>
f01149a4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01149a7:	8a 00                	mov    (%eax),%al
f01149a9:	84 c0                	test   %al,%al
f01149ab:	74 eb                	je     f0114998 <test_allocate_chunk+0xb2>
		if (ptr1 == (char*)(KERNEL_STACK_TOP - PAGE_SIZE))	*ptr1 = 'A' ;
f01149ad:	81 7d e4 00 f0 bf ef 	cmpl   $0xefbff000,-0x1c(%ebp)
f01149b4:	75 06                	jne    f01149bc <test_allocate_chunk+0xd6>
f01149b6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01149b9:	c6 00 41             	movb   $0x41,(%eax)
		tptr[1] = *ptr1 ;
f01149bc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01149bf:	8a 00                	mov    (%eax),%al
f01149c1:	88 85 55 ff ff ff    	mov    %al,-0xab(%ebp)
		tptr[2] = *ptr2 ;
f01149c7:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01149ca:	8a 00                	mov    (%eax),%al
f01149cc:	88 85 56 ff ff ff    	mov    %al,-0xaa(%ebp)
		cprintf("*ptr1 = %c\n", *ptr1) ;
f01149d2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01149d5:	8a 00                	mov    (%eax),%al
f01149d7:	0f be c0             	movsbl %al,%eax
f01149da:	83 ec 08             	sub    $0x8,%esp
f01149dd:	50                   	push   %eax
f01149de:	68 e2 88 13 f0       	push   $0xf01388e2
f01149e3:	e8 49 c4 fe ff       	call   f0100e31 <cprintf>
f01149e8:	83 c4 10             	add    $0x10,%esp
		cprintf("*ptr2 = %c\n", *ptr2) ;
f01149eb:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01149ee:	8a 00                	mov    (%eax),%al
f01149f0:	0f be c0             	movsbl %al,%eax
f01149f3:	83 ec 08             	sub    $0x8,%esp
f01149f6:	50                   	push   %eax
f01149f7:	68 ee 88 13 f0       	push   $0xf01388ee
f01149fc:	e8 30 c4 fe ff       	call   f0100e31 <cprintf>
f0114a01:	83 c4 10             	add    $0x10,%esp
		uint32 old_perms = GP(proc_directory, KERNEL_STACK_TOP - 1*PAGE_SIZE) ;
f0114a04:	83 ec 08             	sub    $0x8,%esp
f0114a07:	68 00 f0 bf ef       	push   $0xefbff000
f0114a0c:	ff 75 cc             	pushl  -0x34(%ebp)
f0114a0f:	e8 90 22 00 00       	call   f0116ca4 <GP>
f0114a14:	83 c4 10             	add    $0x10,%esp
f0114a17:	89 45 b8             	mov    %eax,-0x48(%ebp)
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0114a1a:	e8 a7 7f ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0114a1f:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, KERNEL_STACK_TOP - 1*PAGE_SIZE, 4*kilo, PERM_WRITEABLE) ;
f0114a22:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114a25:	c1 e0 02             	shl    $0x2,%eax
f0114a28:	6a 02                	push   $0x2
f0114a2a:	50                   	push   %eax
f0114a2b:	68 00 f0 bf ef       	push   $0xefbff000
f0114a30:	ff 75 cc             	pushl  -0x34(%ebp)
f0114a33:	e8 a3 41 ff ff       	call   f0108bdb <allocate_chunk>
f0114a38:	83 c4 10             	add    $0x10,%esp
f0114a3b:	89 45 b0             	mov    %eax,-0x50(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0114a3e:	e8 83 7f ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0114a43:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != -1 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 0)
f0114a46:	83 7d b0 ff          	cmpl   $0xffffffff,-0x50(%ebp)
f0114a4a:	75 08                	jne    f0114a54 <test_allocate_chunk+0x16e>
f0114a4c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114a4f:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f0114a52:	74 2a                	je     f0114a7e <test_allocate_chunk+0x198>
		{
			warn("[EVAL] allocate_chunk: Failed (dest is exist... operation should be denied) ret=%d diff=%d expected=%d\n", ret, (numOfFreeFramesBefore - numOfFreeFramesAfter), 0);
f0114a54:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114a57:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114a5a:	83 ec 08             	sub    $0x8,%esp
f0114a5d:	6a 00                	push   $0x0
f0114a5f:	50                   	push   %eax
f0114a60:	ff 75 b0             	pushl  -0x50(%ebp)
f0114a63:	68 fc 88 13 f0       	push   $0xf01388fc
f0114a68:	68 70 04 00 00       	push   $0x470
f0114a6d:	68 7a 73 13 f0       	push   $0xf013737a
f0114a72:	e8 47 b9 fe ff       	call   f01003be <_warn>
f0114a77:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114a7a:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
		}
		if (correct) eval += 5 ;
f0114a7e:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0114a82:	74 04                	je     f0114a88 <test_allocate_chunk+0x1a2>
f0114a84:	83 45 e0 05          	addl   $0x5,-0x20(%ebp)
		correct = 1 ;
f0114a88:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		numOfFreeFramesBefore = sys_calculate_free_frames();
f0114a8c:	e8 35 7f ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0114a91:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		ret = allocate_chunk(proc_directory, KERNEL_STACK_TOP - 5*kilo, 2*kilo, PERM_WRITEABLE) ;
f0114a94:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114a97:	01 c0                	add    %eax,%eax
f0114a99:	89 c1                	mov    %eax,%ecx
f0114a9b:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114a9e:	89 d0                	mov    %edx,%eax
f0114aa0:	c1 e0 02             	shl    $0x2,%eax
f0114aa3:	01 d0                	add    %edx,%eax
f0114aa5:	f7 d8                	neg    %eax
f0114aa7:	2d 00 00 40 10       	sub    $0x10400000,%eax
f0114aac:	6a 02                	push   $0x2
f0114aae:	51                   	push   %ecx
f0114aaf:	50                   	push   %eax
f0114ab0:	ff 75 cc             	pushl  -0x34(%ebp)
f0114ab3:	e8 23 41 ff ff       	call   f0108bdb <allocate_chunk>
f0114ab8:	83 c4 10             	add    $0x10,%esp
f0114abb:	89 45 b0             	mov    %eax,-0x50(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0114abe:	e8 03 7f ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0114ac3:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != -1 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 0)
f0114ac6:	83 7d b0 ff          	cmpl   $0xffffffff,-0x50(%ebp)
f0114aca:	75 08                	jne    f0114ad4 <test_allocate_chunk+0x1ee>
f0114acc:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114acf:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f0114ad2:	74 2a                	je     f0114afe <test_allocate_chunk+0x218>
		{
			warn("[EVAL] allocate_chunk: Failed (dest is exist... operation should be denied) ret=%d diff=%d expected=%d\n", ret, (numOfFreeFramesBefore - numOfFreeFramesAfter), 0);
f0114ad4:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114ad7:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114ada:	83 ec 08             	sub    $0x8,%esp
f0114add:	6a 00                	push   $0x0
f0114adf:	50                   	push   %eax
f0114ae0:	ff 75 b0             	pushl  -0x50(%ebp)
f0114ae3:	68 fc 88 13 f0       	push   $0xf01388fc
f0114ae8:	68 7e 04 00 00       	push   $0x47e
f0114aed:	68 7a 73 13 f0       	push   $0xf013737a
f0114af2:	e8 c7 b8 fe ff       	call   f01003be <_warn>
f0114af7:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114afa:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
		}
		if (correct) eval += 10 ;
f0114afe:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0114b02:	74 04                	je     f0114b08 <test_allocate_chunk+0x222>
f0114b04:	83 45 e0 0a          	addl   $0xa,-0x20(%ebp)
		correct = 1 ;
f0114b08:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		if (CCP(proc_directory, 0, KERNEL_STACK_TOP-1*PAGE_SIZE, 4*kilo, 1, old_perms, 0xFFF, 0, 0, CHK_ALLOC) == 0)
f0114b0c:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114b0f:	c1 e0 02             	shl    $0x2,%eax
f0114b12:	83 ec 08             	sub    $0x8,%esp
f0114b15:	6a 03                	push   $0x3
f0114b17:	6a 00                	push   $0x0
f0114b19:	6a 00                	push   $0x0
f0114b1b:	68 ff 0f 00 00       	push   $0xfff
f0114b20:	ff 75 b8             	pushl  -0x48(%ebp)
f0114b23:	6a 01                	push   $0x1
f0114b25:	50                   	push   %eax
f0114b26:	68 00 f0 bf ef       	push   $0xefbff000
f0114b2b:	6a 00                	push   $0x0
f0114b2d:	ff 75 cc             	pushl  -0x34(%ebp)
f0114b30:	e8 3c 22 00 00       	call   f0116d71 <CCP>
f0114b35:	83 c4 30             	add    $0x30,%esp
f0114b38:	85 c0                	test   %eax,%eax
f0114b3a:	75 1e                	jne    f0114b5a <test_allocate_chunk+0x274>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0114b3c:	83 ec 04             	sub    $0x4,%esp
f0114b3f:	68 64 89 13 f0       	push   $0xf0138964
f0114b44:	68 86 04 00 00       	push   $0x486
f0114b49:	68 7a 73 13 f0       	push   $0xf013737a
f0114b4e:	e8 6b b8 fe ff       	call   f01003be <_warn>
f0114b53:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114b56:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
		}
		if (correct) eval += 5 ;
f0114b5a:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0114b5e:	74 04                	je     f0114b64 <test_allocate_chunk+0x27e>
f0114b60:	83 45 e0 05          	addl   $0x5,-0x20(%ebp)
		correct = 1 ;
f0114b64:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		if ((*ptr1) != tptr[1] || (*ptr2) != tptr[2])
f0114b68:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0114b6b:	8a 10                	mov    (%eax),%dl
f0114b6d:	8a 85 55 ff ff ff    	mov    -0xab(%ebp),%al
f0114b73:	38 c2                	cmp    %al,%dl
f0114b75:	75 0f                	jne    f0114b86 <test_allocate_chunk+0x2a0>
f0114b77:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114b7a:	8a 10                	mov    (%eax),%dl
f0114b7c:	8a 85 56 ff ff ff    	mov    -0xaa(%ebp),%al
f0114b82:	38 c2                	cmp    %al,%dl
f0114b84:	74 1e                	je     f0114ba4 <test_allocate_chunk+0x2be>
		{
			warn("[EVAL] allocate_chunk: Failed (content is not correct)\n");
f0114b86:	83 ec 04             	sub    $0x4,%esp
f0114b89:	68 b0 89 13 f0       	push   $0xf01389b0
f0114b8e:	68 8e 04 00 00       	push   $0x48e
f0114b93:	68 7a 73 13 f0       	push   $0xf013737a
f0114b98:	e8 21 b8 fe ff       	call   f01003be <_warn>
f0114b9d:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114ba0:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
		}
		if (correct) eval += 10 ;
f0114ba4:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0114ba8:	74 04                	je     f0114bae <test_allocate_chunk+0x2c8>
f0114baa:	83 45 e0 0a          	addl   $0xa,-0x20(%ebp)
		correct = 1 ;
f0114bae:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)
	}
	cprintf("\nCASE I: END\n") ;
f0114bb2:	83 ec 0c             	sub    $0xc,%esp
f0114bb5:	68 2d 87 13 f0       	push   $0xf013872d
f0114bba:	e8 72 c2 fe ff       	call   f0100e31 <cprintf>
f0114bbf:	83 c4 10             	add    $0x10,%esp

	/*============================================================*/
	/*PART II: Destination page(s) not exist [Supervisor r/w] 20% */
	/*============================================================*/
	cprintf("\nCASE II: Destination page(s) not exist [Supervisor r/w] [20%]\n") ;
f0114bc2:	83 ec 0c             	sub    $0xc,%esp
f0114bc5:	68 e8 89 13 f0       	push   $0xf01389e8
f0114bca:	e8 62 c2 fe ff       	call   f0100e31 <cprintf>
f0114bcf:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0114bd2:	e8 ef 7d ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0114bd7:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, 0x0, 32*mega, PERM_WRITEABLE | PERM_AVAILABLE) ;
f0114bda:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114bdd:	c1 e0 05             	shl    $0x5,%eax
f0114be0:	68 02 0e 00 00       	push   $0xe02
f0114be5:	50                   	push   %eax
f0114be6:	6a 00                	push   $0x0
f0114be8:	ff 75 cc             	pushl  -0x34(%ebp)
f0114beb:	e8 eb 3f ff ff       	call   f0108bdb <allocate_chunk>
f0114bf0:	83 c4 10             	add    $0x10,%esp
f0114bf3:	89 45 a8             	mov    %eax,-0x58(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0114bf6:	e8 cb 7d ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0114bfb:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != ((32*mega)/(4*mega) + (32*mega)/(4*kilo)))
f0114bfe:	83 7d a8 00          	cmpl   $0x0,-0x58(%ebp)
f0114c02:	75 36                	jne    f0114c3a <test_allocate_chunk+0x354>
f0114c04:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114c07:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114c0a:	89 c1                	mov    %eax,%ecx
f0114c0c:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114c0f:	c1 e0 05             	shl    $0x5,%eax
f0114c12:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0114c15:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0114c1c:	99                   	cltd   
f0114c1d:	f7 fe                	idiv   %esi
f0114c1f:	89 c3                	mov    %eax,%ebx
f0114c21:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114c24:	c1 e0 05             	shl    $0x5,%eax
f0114c27:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114c2a:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0114c31:	99                   	cltd   
f0114c32:	f7 fe                	idiv   %esi
f0114c34:	01 d8                	add    %ebx,%eax
f0114c36:	39 c1                	cmp    %eax,%ecx
f0114c38:	74 54                	je     f0114c8e <test_allocate_chunk+0x3a8>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, ((32*mega)/(4*mega) + (32*mega)/(4*kilo)));
f0114c3a:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114c3d:	c1 e0 05             	shl    $0x5,%eax
f0114c40:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0114c43:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f0114c4a:	99                   	cltd   
f0114c4b:	f7 ff                	idiv   %edi
f0114c4d:	89 c1                	mov    %eax,%ecx
f0114c4f:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114c52:	c1 e0 05             	shl    $0x5,%eax
f0114c55:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114c58:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0114c5f:	99                   	cltd   
f0114c60:	f7 fe                	idiv   %esi
f0114c62:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0114c65:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114c68:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114c6b:	83 ec 08             	sub    $0x8,%esp
f0114c6e:	52                   	push   %edx
f0114c6f:	50                   	push   %eax
f0114c70:	ff 75 a8             	pushl  -0x58(%ebp)
f0114c73:	68 28 8a 13 f0       	push   $0xf0138a28
f0114c78:	68 a3 04 00 00       	push   $0x4a3
f0114c7d:	68 7a 73 13 f0       	push   $0xf013737a
f0114c82:	e8 37 b7 fe ff       	call   f01003be <_warn>
f0114c87:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114c8a:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
		}
		if (correct) eval += 5 ;
f0114c8e:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0114c92:	74 04                	je     f0114c98 <test_allocate_chunk+0x3b2>
f0114c94:	83 45 e0 05          	addl   $0x5,-0x20(%ebp)
		correct = 1 ;
f0114c98:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		int chk_cnt = 1 ;
f0114c9c:	c7 45 d8 01 00 00 00 	movl   $0x1,-0x28(%ebp)
		if (CCP(proc_directory, 0, 0x0, 32*mega, 1, 0xE03, 0xE07, 0, 0, CHK_ALLOC) == 0)
f0114ca3:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114ca6:	c1 e0 05             	shl    $0x5,%eax
f0114ca9:	83 ec 08             	sub    $0x8,%esp
f0114cac:	6a 03                	push   $0x3
f0114cae:	6a 00                	push   $0x0
f0114cb0:	6a 00                	push   $0x0
f0114cb2:	68 07 0e 00 00       	push   $0xe07
f0114cb7:	68 03 0e 00 00       	push   $0xe03
f0114cbc:	6a 01                	push   $0x1
f0114cbe:	50                   	push   %eax
f0114cbf:	6a 00                	push   $0x0
f0114cc1:	6a 00                	push   $0x0
f0114cc3:	ff 75 cc             	pushl  -0x34(%ebp)
f0114cc6:	e8 a6 20 00 00       	call   f0116d71 <CCP>
f0114ccb:	83 c4 30             	add    $0x30,%esp
f0114cce:	85 c0                	test   %eax,%eax
f0114cd0:	75 25                	jne    f0114cf7 <test_allocate_chunk+0x411>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0114cd2:	83 ec 04             	sub    $0x4,%esp
f0114cd5:	68 64 89 13 f0       	push   $0xf0138964
f0114cda:	68 ac 04 00 00       	push   $0x4ac
f0114cdf:	68 7a 73 13 f0       	push   $0xf013737a
f0114ce4:	e8 d5 b6 fe ff       	call   f01003be <_warn>
f0114ce9:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114cec:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
			chk_cnt = 0 ;
f0114cf0:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
		}
		if (correct) eval += 10 ;
f0114cf7:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0114cfb:	74 04                	je     f0114d01 <test_allocate_chunk+0x41b>
f0114cfd:	83 45 e0 0a          	addl   $0xa,-0x20(%ebp)
		correct = 1 ;
f0114d01:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		if (chk_cnt)
f0114d05:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
f0114d09:	74 5a                	je     f0114d65 <test_allocate_chunk+0x47f>
		{
			ptr1 = (char*)(0x0+2*kilo); *ptr1 = 'K' ;
f0114d0b:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114d0e:	01 c0                	add    %eax,%eax
f0114d10:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0114d13:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0114d16:	c6 00 4b             	movb   $0x4b,(%eax)
			ptr2 = (char*)(0x0+2*mega); *ptr2 = 'M' ;
f0114d19:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114d1c:	01 c0                	add    %eax,%eax
f0114d1e:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0114d21:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114d24:	c6 00 4d             	movb   $0x4d,(%eax)

			if ((*ptr1) != 'K' || (*ptr2) != 'M')
f0114d27:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0114d2a:	8a 00                	mov    (%eax),%al
f0114d2c:	3c 4b                	cmp    $0x4b,%al
f0114d2e:	75 09                	jne    f0114d39 <test_allocate_chunk+0x453>
f0114d30:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114d33:	8a 00                	mov    (%eax),%al
f0114d35:	3c 4d                	cmp    $0x4d,%al
f0114d37:	74 1e                	je     f0114d57 <test_allocate_chunk+0x471>
			{
				warn("[EVAL] allocate_chunk: Failed (content is not correct)\n");
f0114d39:	83 ec 04             	sub    $0x4,%esp
f0114d3c:	68 b0 89 13 f0       	push   $0xf01389b0
f0114d41:	68 ba 04 00 00       	push   $0x4ba
f0114d46:	68 7a 73 13 f0       	push   $0xf013737a
f0114d4b:	e8 6e b6 fe ff       	call   f01003be <_warn>
f0114d50:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0114d53:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
			}
			if (correct) eval += 5 ;
f0114d57:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0114d5b:	74 04                	je     f0114d61 <test_allocate_chunk+0x47b>
f0114d5d:	83 45 e0 05          	addl   $0x5,-0x20(%ebp)
			correct = 1 ;
f0114d61:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)
		}
	}
	cprintf("\nCASE II: END\n") ;
f0114d65:	83 ec 0c             	sub    $0xc,%esp
f0114d68:	68 07 7d 13 f0       	push   $0xf0137d07
f0114d6d:	e8 bf c0 fe ff       	call   f0100e31 <cprintf>
f0114d72:	83 c4 10             	add    $0x10,%esp

	/*============================================================*/
	/*PART III: Destination page(s) not exist [Supervisor r] 15%  */
	/*============================================================*/
	cprintf("\nCASE III: Destination page(s) not exist [Supervisor r] [15%]\n") ;
f0114d75:	83 ec 0c             	sub    $0xc,%esp
f0114d78:	68 88 8a 13 f0       	push   $0xf0138a88
f0114d7d:	e8 af c0 fe ff       	call   f0100e31 <cprintf>
f0114d82:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0114d85:	e8 3c 7c ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0114d8a:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, 0x0+32*mega, 64*mega, 0) ;
f0114d8d:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114d90:	c1 e0 06             	shl    $0x6,%eax
f0114d93:	89 c2                	mov    %eax,%edx
f0114d95:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114d98:	c1 e0 05             	shl    $0x5,%eax
f0114d9b:	6a 00                	push   $0x0
f0114d9d:	52                   	push   %edx
f0114d9e:	50                   	push   %eax
f0114d9f:	ff 75 cc             	pushl  -0x34(%ebp)
f0114da2:	e8 34 3e ff ff       	call   f0108bdb <allocate_chunk>
f0114da7:	83 c4 10             	add    $0x10,%esp
f0114daa:	89 45 a4             	mov    %eax,-0x5c(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0114dad:	e8 14 7c ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0114db2:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != ((64*mega)/(4*mega) + (64*mega)/(4*kilo)))
f0114db5:	83 7d a4 00          	cmpl   $0x0,-0x5c(%ebp)
f0114db9:	75 36                	jne    f0114df1 <test_allocate_chunk+0x50b>
f0114dbb:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114dbe:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114dc1:	89 c1                	mov    %eax,%ecx
f0114dc3:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114dc6:	c1 e0 06             	shl    $0x6,%eax
f0114dc9:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0114dcc:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f0114dd3:	99                   	cltd   
f0114dd4:	f7 ff                	idiv   %edi
f0114dd6:	89 c3                	mov    %eax,%ebx
f0114dd8:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114ddb:	c1 e0 06             	shl    $0x6,%eax
f0114dde:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114de1:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0114de8:	99                   	cltd   
f0114de9:	f7 fe                	idiv   %esi
f0114deb:	01 d8                	add    %ebx,%eax
f0114ded:	39 c1                	cmp    %eax,%ecx
f0114def:	74 54                	je     f0114e45 <test_allocate_chunk+0x55f>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, ((64*mega)/(4*mega) + (64*mega)/(4*kilo)));
f0114df1:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114df4:	c1 e0 06             	shl    $0x6,%eax
f0114df7:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0114dfa:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0114e01:	99                   	cltd   
f0114e02:	f7 fb                	idiv   %ebx
f0114e04:	89 c1                	mov    %eax,%ecx
f0114e06:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114e09:	c1 e0 06             	shl    $0x6,%eax
f0114e0c:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114e0f:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f0114e16:	99                   	cltd   
f0114e17:	f7 ff                	idiv   %edi
f0114e19:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0114e1c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114e1f:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114e22:	83 ec 08             	sub    $0x8,%esp
f0114e25:	52                   	push   %edx
f0114e26:	50                   	push   %eax
f0114e27:	ff 75 a4             	pushl  -0x5c(%ebp)
f0114e2a:	68 28 8a 13 f0       	push   $0xf0138a28
f0114e2f:	68 d0 04 00 00       	push   $0x4d0
f0114e34:	68 7a 73 13 f0       	push   $0xf013737a
f0114e39:	e8 80 b5 fe ff       	call   f01003be <_warn>
f0114e3e:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114e41:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
		}
		if (correct) eval += 5 ;
f0114e45:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0114e49:	74 04                	je     f0114e4f <test_allocate_chunk+0x569>
f0114e4b:	83 45 e0 05          	addl   $0x5,-0x20(%ebp)
		correct = 1 ;
f0114e4f:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		int chk_cnt = 1 ;
f0114e53:	c7 45 a0 01 00 00 00 	movl   $0x1,-0x60(%ebp)
		if (CCP(proc_directory, 0, 0x0+32*mega, 64*mega, 1, 0x001, 0xE07, 0, 0, CHK_ALLOC) == 0)
f0114e5a:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114e5d:	c1 e0 06             	shl    $0x6,%eax
f0114e60:	89 c2                	mov    %eax,%edx
f0114e62:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114e65:	c1 e0 05             	shl    $0x5,%eax
f0114e68:	83 ec 08             	sub    $0x8,%esp
f0114e6b:	6a 03                	push   $0x3
f0114e6d:	6a 00                	push   $0x0
f0114e6f:	6a 00                	push   $0x0
f0114e71:	68 07 0e 00 00       	push   $0xe07
f0114e76:	6a 01                	push   $0x1
f0114e78:	6a 01                	push   $0x1
f0114e7a:	52                   	push   %edx
f0114e7b:	50                   	push   %eax
f0114e7c:	6a 00                	push   $0x0
f0114e7e:	ff 75 cc             	pushl  -0x34(%ebp)
f0114e81:	e8 eb 1e 00 00       	call   f0116d71 <CCP>
f0114e86:	83 c4 30             	add    $0x30,%esp
f0114e89:	85 c0                	test   %eax,%eax
f0114e8b:	75 25                	jne    f0114eb2 <test_allocate_chunk+0x5cc>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0114e8d:	83 ec 04             	sub    $0x4,%esp
f0114e90:	68 64 89 13 f0       	push   $0xf0138964
f0114e95:	68 d9 04 00 00       	push   $0x4d9
f0114e9a:	68 7a 73 13 f0       	push   $0xf013737a
f0114e9f:	e8 1a b5 fe ff       	call   f01003be <_warn>
f0114ea4:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114ea7:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
			chk_cnt = 0 ;
f0114eab:	c7 45 a0 00 00 00 00 	movl   $0x0,-0x60(%ebp)
		}
		if (correct) eval += 10 ;
f0114eb2:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0114eb6:	74 04                	je     f0114ebc <test_allocate_chunk+0x5d6>
f0114eb8:	83 45 e0 0a          	addl   $0xa,-0x20(%ebp)
		correct = 1 ;
f0114ebc:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)
	}
	cprintf("\nCASE III: END\n") ;
f0114ec0:	83 ec 0c             	sub    $0xc,%esp
f0114ec3:	68 6a 7d 13 f0       	push   $0xf0137d6a
f0114ec8:	e8 64 bf fe ff       	call   f0100e31 <cprintf>
f0114ecd:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART IV: Destination page(s) not exist [User r/w] 20%  */
	/*========================================================*/
	cprintf("\nCASE IV: Destination page(s) not exist [User r/w] [20%]\n") ;
f0114ed0:	83 ec 0c             	sub    $0xc,%esp
f0114ed3:	68 c8 8a 13 f0       	push   $0xf0138ac8
f0114ed8:	e8 54 bf fe ff       	call   f0100e31 <cprintf>
f0114edd:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0114ee0:	e8 e1 7a ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0114ee5:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, USER_HEAP_START, 64*mega, PERM_WRITEABLE|PERM_USER|PERM_AVAILABLE) ;
f0114ee8:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114eeb:	c1 e0 06             	shl    $0x6,%eax
f0114eee:	68 06 0e 00 00       	push   $0xe06
f0114ef3:	50                   	push   %eax
f0114ef4:	68 00 00 00 80       	push   $0x80000000
f0114ef9:	ff 75 cc             	pushl  -0x34(%ebp)
f0114efc:	e8 da 3c ff ff       	call   f0108bdb <allocate_chunk>
f0114f01:	83 c4 10             	add    $0x10,%esp
f0114f04:	89 45 9c             	mov    %eax,-0x64(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0114f07:	e8 ba 7a ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0114f0c:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != ((64*mega)/(4*kilo)+(64*mega)/(4*mega)))
f0114f0f:	83 7d 9c 00          	cmpl   $0x0,-0x64(%ebp)
f0114f13:	75 36                	jne    f0114f4b <test_allocate_chunk+0x665>
f0114f15:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114f18:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114f1b:	89 c1                	mov    %eax,%ecx
f0114f1d:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114f20:	c1 e0 06             	shl    $0x6,%eax
f0114f23:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114f26:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0114f2d:	99                   	cltd   
f0114f2e:	f7 fb                	idiv   %ebx
f0114f30:	89 c3                	mov    %eax,%ebx
f0114f32:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114f35:	c1 e0 06             	shl    $0x6,%eax
f0114f38:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0114f3b:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0114f42:	99                   	cltd   
f0114f43:	f7 fe                	idiv   %esi
f0114f45:	01 d8                	add    %ebx,%eax
f0114f47:	39 c1                	cmp    %eax,%ecx
f0114f49:	74 54                	je     f0114f9f <test_allocate_chunk+0x6b9>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, ((64*mega)/(4*kilo)+(64*mega)/(4*mega)));
f0114f4b:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114f4e:	c1 e0 06             	shl    $0x6,%eax
f0114f51:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114f54:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f0114f5b:	99                   	cltd   
f0114f5c:	f7 ff                	idiv   %edi
f0114f5e:	89 c1                	mov    %eax,%ecx
f0114f60:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114f63:	c1 e0 06             	shl    $0x6,%eax
f0114f66:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0114f69:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0114f70:	99                   	cltd   
f0114f71:	f7 fb                	idiv   %ebx
f0114f73:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0114f76:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114f79:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114f7c:	83 ec 08             	sub    $0x8,%esp
f0114f7f:	52                   	push   %edx
f0114f80:	50                   	push   %eax
f0114f81:	ff 75 9c             	pushl  -0x64(%ebp)
f0114f84:	68 28 8a 13 f0       	push   $0xf0138a28
f0114f89:	68 ef 04 00 00       	push   $0x4ef
f0114f8e:	68 7a 73 13 f0       	push   $0xf013737a
f0114f93:	e8 26 b4 fe ff       	call   f01003be <_warn>
f0114f98:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114f9b:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
		}
		if (correct) eval += 5 ;
f0114f9f:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0114fa3:	74 04                	je     f0114fa9 <test_allocate_chunk+0x6c3>
f0114fa5:	83 45 e0 05          	addl   $0x5,-0x20(%ebp)
		correct = 1 ;
f0114fa9:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		int chk_cnt = 1 ;
f0114fad:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%ebp)
		if (CCP(proc_directory, 0, USER_HEAP_START, 64*mega, 1, 0xE07, 0xE07, 0, 0, CHK_ALLOC) == 0)
f0114fb4:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114fb7:	c1 e0 06             	shl    $0x6,%eax
f0114fba:	83 ec 08             	sub    $0x8,%esp
f0114fbd:	6a 03                	push   $0x3
f0114fbf:	6a 00                	push   $0x0
f0114fc1:	6a 00                	push   $0x0
f0114fc3:	68 07 0e 00 00       	push   $0xe07
f0114fc8:	68 07 0e 00 00       	push   $0xe07
f0114fcd:	6a 01                	push   $0x1
f0114fcf:	50                   	push   %eax
f0114fd0:	68 00 00 00 80       	push   $0x80000000
f0114fd5:	6a 00                	push   $0x0
f0114fd7:	ff 75 cc             	pushl  -0x34(%ebp)
f0114fda:	e8 92 1d 00 00       	call   f0116d71 <CCP>
f0114fdf:	83 c4 30             	add    $0x30,%esp
f0114fe2:	85 c0                	test   %eax,%eax
f0114fe4:	75 25                	jne    f011500b <test_allocate_chunk+0x725>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0114fe6:	83 ec 04             	sub    $0x4,%esp
f0114fe9:	68 64 89 13 f0       	push   $0xf0138964
f0114fee:	68 f8 04 00 00       	push   $0x4f8
f0114ff3:	68 7a 73 13 f0       	push   $0xf013737a
f0114ff8:	e8 c1 b3 fe ff       	call   f01003be <_warn>
f0114ffd:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0115000:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
			chk_cnt = 0 ;
f0115004:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
		}
		if (correct) eval += 10 ;
f011500b:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f011500f:	74 04                	je     f0115015 <test_allocate_chunk+0x72f>
f0115011:	83 45 e0 0a          	addl   $0xa,-0x20(%ebp)
		correct = 1 ;
f0115015:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		if (chk_cnt)
f0115019:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f011501d:	74 6f                	je     f011508e <test_allocate_chunk+0x7a8>
		{
			ptr1 = (char*)(USER_HEAP_START+2*kilo); *ptr1 = 'K' ;
f011501f:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0115022:	01 c0                	add    %eax,%eax
f0115024:	05 00 00 00 80       	add    $0x80000000,%eax
f0115029:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f011502c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011502f:	c6 00 4b             	movb   $0x4b,(%eax)
			ptr2 = (char*)(USER_HEAP_START+22*mega);*ptr2 = 'M' ;
f0115032:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0115035:	89 d0                	mov    %edx,%eax
f0115037:	c1 e0 02             	shl    $0x2,%eax
f011503a:	01 d0                	add    %edx,%eax
f011503c:	01 c0                	add    %eax,%eax
f011503e:	01 d0                	add    %edx,%eax
f0115040:	01 c0                	add    %eax,%eax
f0115042:	05 00 00 00 80       	add    $0x80000000,%eax
f0115047:	89 45 bc             	mov    %eax,-0x44(%ebp)
f011504a:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011504d:	c6 00 4d             	movb   $0x4d,(%eax)

			if ((*ptr1) != 'K' || (*ptr2) != 'M')
f0115050:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0115053:	8a 00                	mov    (%eax),%al
f0115055:	3c 4b                	cmp    $0x4b,%al
f0115057:	75 09                	jne    f0115062 <test_allocate_chunk+0x77c>
f0115059:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011505c:	8a 00                	mov    (%eax),%al
f011505e:	3c 4d                	cmp    $0x4d,%al
f0115060:	74 1e                	je     f0115080 <test_allocate_chunk+0x79a>
			{
				warn("[EVAL] allocate_chunk: Failed (content is not correct)\n");
f0115062:	83 ec 04             	sub    $0x4,%esp
f0115065:	68 b0 89 13 f0       	push   $0xf01389b0
f011506a:	68 06 05 00 00       	push   $0x506
f011506f:	68 7a 73 13 f0       	push   $0xf013737a
f0115074:	e8 45 b3 fe ff       	call   f01003be <_warn>
f0115079:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f011507c:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
			}
			if (correct) eval += 5 ;
f0115080:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0115084:	74 04                	je     f011508a <test_allocate_chunk+0x7a4>
f0115086:	83 45 e0 05          	addl   $0x5,-0x20(%ebp)
			correct = 1 ;
f011508a:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		}
	}
	cprintf("\nCASE IV: END\n") ;
f011508e:	83 ec 0c             	sub    $0xc,%esp
f0115091:	68 3c 88 13 f0       	push   $0xf013883c
f0115096:	e8 96 bd fe ff       	call   f0100e31 <cprintf>
f011509b:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART V: Destination page(s) not exist [User r] 15%     */
	/*========================================================*/
	cprintf("\nCASE V: Destination page(s) not exist [User r] [15%]\n") ;
f011509e:	83 ec 0c             	sub    $0xc,%esp
f01150a1:	68 04 8b 13 f0       	push   $0xf0138b04
f01150a6:	e8 86 bd fe ff       	call   f0100e31 <cprintf>
f01150ab:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f01150ae:	e8 13 79 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f01150b3:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory,0x403FFC00, 7*kilo, PERM_USER|PERM_AVAILABLE) ;
f01150b6:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01150b9:	89 d0                	mov    %edx,%eax
f01150bb:	01 c0                	add    %eax,%eax
f01150bd:	01 d0                	add    %edx,%eax
f01150bf:	01 c0                	add    %eax,%eax
f01150c1:	01 d0                	add    %edx,%eax
f01150c3:	68 04 0e 00 00       	push   $0xe04
f01150c8:	50                   	push   %eax
f01150c9:	68 00 fc 3f 40       	push   $0x403ffc00
f01150ce:	ff 75 cc             	pushl  -0x34(%ebp)
f01150d1:	e8 05 3b ff ff       	call   f0108bdb <allocate_chunk>
f01150d6:	83 c4 10             	add    $0x10,%esp
f01150d9:	89 45 98             	mov    %eax,-0x68(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01150dc:	e8 e5 78 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f01150e1:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != (3+2))
f01150e4:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
f01150e8:	75 0b                	jne    f01150f5 <test_allocate_chunk+0x80f>
f01150ea:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01150ed:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01150f0:	83 f8 05             	cmp    $0x5,%eax
f01150f3:	74 2a                	je     f011511f <test_allocate_chunk+0x839>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, (3+2));
f01150f5:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01150f8:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01150fb:	83 ec 08             	sub    $0x8,%esp
f01150fe:	6a 05                	push   $0x5
f0115100:	50                   	push   %eax
f0115101:	ff 75 98             	pushl  -0x68(%ebp)
f0115104:	68 28 8a 13 f0       	push   $0xf0138a28
f0115109:	68 1d 05 00 00       	push   $0x51d
f011510e:	68 7a 73 13 f0       	push   $0xf013737a
f0115113:	e8 a6 b2 fe ff       	call   f01003be <_warn>
f0115118:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011511b:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
		}
		if (correct) eval += 10 ;
f011511f:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0115123:	74 04                	je     f0115129 <test_allocate_chunk+0x843>
f0115125:	83 45 e0 0a          	addl   $0xa,-0x20(%ebp)
		correct = 1 ;
f0115129:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		int chk_cnt = 1 ;
f011512d:	c7 45 94 01 00 00 00 	movl   $0x1,-0x6c(%ebp)
		if (CCP(proc_directory, 0, 0x403FF000, 12*kilo, 1, 0xE05, 0xE07, 0, 0, CHK_ALLOC) == 0)
f0115134:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0115137:	89 d0                	mov    %edx,%eax
f0115139:	01 c0                	add    %eax,%eax
f011513b:	01 d0                	add    %edx,%eax
f011513d:	c1 e0 02             	shl    $0x2,%eax
f0115140:	83 ec 08             	sub    $0x8,%esp
f0115143:	6a 03                	push   $0x3
f0115145:	6a 00                	push   $0x0
f0115147:	6a 00                	push   $0x0
f0115149:	68 07 0e 00 00       	push   $0xe07
f011514e:	68 05 0e 00 00       	push   $0xe05
f0115153:	6a 01                	push   $0x1
f0115155:	50                   	push   %eax
f0115156:	68 00 f0 3f 40       	push   $0x403ff000
f011515b:	6a 00                	push   $0x0
f011515d:	ff 75 cc             	pushl  -0x34(%ebp)
f0115160:	e8 0c 1c 00 00       	call   f0116d71 <CCP>
f0115165:	83 c4 30             	add    $0x30,%esp
f0115168:	85 c0                	test   %eax,%eax
f011516a:	75 25                	jne    f0115191 <test_allocate_chunk+0x8ab>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f011516c:	83 ec 04             	sub    $0x4,%esp
f011516f:	68 64 89 13 f0       	push   $0xf0138964
f0115174:	68 26 05 00 00       	push   $0x526
f0115179:	68 7a 73 13 f0       	push   $0xf013737a
f011517e:	e8 3b b2 fe ff       	call   f01003be <_warn>
f0115183:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0115186:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
			chk_cnt = 0 ;
f011518a:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
		}
		if (correct) eval += 5 ;
f0115191:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0115195:	74 04                	je     f011519b <test_allocate_chunk+0x8b5>
f0115197:	83 45 e0 05          	addl   $0x5,-0x20(%ebp)
		correct = 1 ;
f011519b:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

	}
	cprintf("\nCASE V: END\n") ;
f011519f:	83 ec 0c             	sub    $0xc,%esp
f01151a2:	68 3b 8b 13 f0       	push   $0xf0138b3b
f01151a7:	e8 85 bc fe ff       	call   f0100e31 <cprintf>
f01151ac:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] allocate_chunk: FINISHED. Evaluation = %d\n", eval);
f01151af:	83 ec 08             	sub    $0x8,%esp
f01151b2:	ff 75 e0             	pushl  -0x20(%ebp)
f01151b5:	68 4c 8b 13 f0       	push   $0xf0138b4c
f01151ba:	e8 72 bc fe ff       	call   f0100e31 <cprintf>
f01151bf:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f01151c2:	83 7d e0 64          	cmpl   $0x64,-0x20(%ebp)
f01151c6:	75 10                	jne    f01151d8 <test_allocate_chunk+0x8f2>
		cprintf("Congratulations!! test allocate_chunk completed successfully.\n");
f01151c8:	83 ec 0c             	sub    $0xc,%esp
f01151cb:	68 80 8b 13 f0       	push   $0xf0138b80
f01151d0:	e8 5c bc fe ff       	call   f0100e31 <cprintf>
f01151d5:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f01151d8:	a1 70 be 2b f0       	mov    0xf02bbe70,%eax
f01151dd:	89 45 c8             	mov    %eax,-0x38(%ebp)
f01151e0:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01151e3:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f01151e6:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01151eb:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01151ee:	5b                   	pop    %ebx
f01151ef:	5e                   	pop    %esi
f01151f0:	5f                   	pop    %edi
f01151f1:	5d                   	pop    %ebp
f01151f2:	c3                   	ret    

f01151f3 <test_calculate_required_frames>:

//======================================
// 5) [+]TEST CALCULATE REQUIRED FRAMES:
//======================================
int test_calculate_required_frames()
{
f01151f3:	55                   	push   %ebp
f01151f4:	89 e5                	mov    %esp,%ebp
f01151f6:	57                   	push   %edi
f01151f7:	56                   	push   %esi
f01151f8:	53                   	push   %ebx
f01151f9:	81 ec fc 01 00 00    	sub    $0x1fc,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f01151ff:	8d 45 8e             	lea    -0x72(%ebp),%eax
f0115202:	bb 7c 7a 13 f0       	mov    $0xf0137a7c,%ebx
f0115207:	ba 0f 00 00 00       	mov    $0xf,%edx
f011520c:	89 c7                	mov    %eax,%edi
f011520e:	89 de                	mov    %ebx,%esi
f0115210:	89 d1                	mov    %edx,%ecx
f0115212:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0115214:	8d 55 9d             	lea    -0x63(%ebp),%edx
f0115217:	b9 23 00 00 00       	mov    $0x23,%ecx
f011521c:	b0 00                	mov    $0x0,%al
f011521e:	89 d7                	mov    %edx,%edi
f0115220:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0115222:	6a 00                	push   $0x0
f0115224:	6a 0a                	push   $0xa
f0115226:	6a 14                	push   $0x14
f0115228:	8d 45 8e             	lea    -0x72(%ebp),%eax
f011522b:	50                   	push   %eax
f011522c:	e8 9a 3a ff ff       	call   f0108ccb <env_create>
f0115231:	83 c4 10             	add    $0x10,%esp
f0115234:	89 45 dc             	mov    %eax,-0x24(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0115237:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011523a:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0115240:	89 45 d8             	mov    %eax,-0x28(%ebp)
	lcr3(env->env_cr3) ;
f0115243:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0115246:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f011524c:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011524f:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0115252:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f0115255:	c7 85 7a ff ff ff 61 	movl   $0x20707561,-0x86(%ebp)
f011525c:	75 70 20 
f011525f:	c7 85 7e ff ff ff 00 	movl   $0x0,-0x82(%ebp)
f0115266:	00 00 00 
f0115269:	8d 55 82             	lea    -0x7e(%ebp),%edx
f011526c:	b9 03 00 00 00       	mov    $0x3,%ecx
f0115271:	b8 00 00 00 00       	mov    $0x0,%eax
f0115276:	89 d7                	mov    %edx,%edi
f0115278:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f011527a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011527d:	8b 40 4c             	mov    0x4c(%eax),%eax
f0115280:	83 ec 08             	sub    $0x8,%esp
f0115283:	8d 95 66 ff ff ff    	lea    -0x9a(%ebp),%edx
f0115289:	52                   	push   %edx
f011528a:	50                   	push   %eax
f011528b:	e8 53 a0 01 00       	call   f012f2e3 <ltostr>
f0115290:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f0115293:	83 ec 04             	sub    $0x4,%esp
f0115296:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f011529c:	50                   	push   %eax
f011529d:	8d 85 66 ff ff ff    	lea    -0x9a(%ebp),%eax
f01152a3:	50                   	push   %eax
f01152a4:	8d 85 7a ff ff ff    	lea    -0x86(%ebp),%eax
f01152aa:	50                   	push   %eax
f01152ab:	e8 2b a1 01 00       	call   f012f3db <strcconcat>
f01152b0:	83 c4 10             	add    $0x10,%esp
	//===================================================

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f01152b3:	c7 45 d0 00 04 00 00 	movl   $0x400,-0x30(%ebp)
	int mega = 1024*1024 ;
f01152ba:	c7 45 cc 00 00 10 00 	movl   $0x100000,-0x34(%ebp)
	uint32 eval = 0;
f01152c1:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint32 res =0;
f01152c8:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	uint8 correct = 1;
f01152cf:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	uint32 expected;
	uint32 numOfFreeFramesBefore, numOfFreeFramesAfter;

	ClearUserSpace(proc_directory);
f01152d3:	83 ec 0c             	sub    $0xc,%esp
f01152d6:	ff 75 d8             	pushl  -0x28(%ebp)
f01152d9:	e8 5f 1a 00 00       	call   f0116d3d <ClearUserSpace>
f01152de:	83 c4 10             	add    $0x10,%esp

	/*================================================*/
	/*PART I: ALL pages and tables are not exist 50%  */
	/*================================================*/
	cprintf("\nCASE I: ALL pages and tables are not exist [50%]\n") ;
f01152e1:	83 ec 0c             	sub    $0xc,%esp
f01152e4:	68 c0 8b 13 f0       	push   $0xf0138bc0
f01152e9:	e8 43 bb fe ff       	call   f0100e31 <cprintf>
f01152ee:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		res = calculate_required_frames(proc_directory, 0x0, 8*kilo);
f01152f1:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01152f4:	c1 e0 03             	shl    $0x3,%eax
f01152f7:	83 ec 04             	sub    $0x4,%esp
f01152fa:	50                   	push   %eax
f01152fb:	6a 00                	push   $0x0
f01152fd:	ff 75 d8             	pushl  -0x28(%ebp)
f0115300:	e8 0a 39 ff ff       	call   f0108c0f <calculate_required_frames>
f0115305:	83 c4 10             	add    $0x10,%esp
f0115308:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 3)
f011530b:	83 7d c8 03          	cmpl   $0x3,-0x38(%ebp)
f011530f:	74 23                	je     f0115334 <test_calculate_required_frames+0x141>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 3);
f0115311:	83 ec 0c             	sub    $0xc,%esp
f0115314:	6a 03                	push   $0x3
f0115316:	ff 75 c8             	pushl  -0x38(%ebp)
f0115319:	68 f4 8b 13 f0       	push   $0xf0138bf4
f011531e:	68 5f 05 00 00       	push   $0x55f
f0115323:	68 7a 73 13 f0       	push   $0xf013737a
f0115328:	e8 91 b0 fe ff       	call   f01003be <_warn>
f011532d:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115330:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115334:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115338:	74 04                	je     f011533e <test_calculate_required_frames+0x14b>
f011533a:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011533e:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test2
		res = calculate_required_frames(proc_directory, 0x0, 4*mega);
f0115342:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115345:	c1 e0 02             	shl    $0x2,%eax
f0115348:	83 ec 04             	sub    $0x4,%esp
f011534b:	50                   	push   %eax
f011534c:	6a 00                	push   $0x0
f011534e:	ff 75 d8             	pushl  -0x28(%ebp)
f0115351:	e8 b9 38 ff ff       	call   f0108c0f <calculate_required_frames>
f0115356:	83 c4 10             	add    $0x10,%esp
f0115359:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 1025)
f011535c:	81 7d c8 01 04 00 00 	cmpl   $0x401,-0x38(%ebp)
f0115363:	74 26                	je     f011538b <test_calculate_required_frames+0x198>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 1025);
f0115365:	83 ec 0c             	sub    $0xc,%esp
f0115368:	68 01 04 00 00       	push   $0x401
f011536d:	ff 75 c8             	pushl  -0x38(%ebp)
f0115370:	68 f4 8b 13 f0       	push   $0xf0138bf4
f0115375:	68 69 05 00 00       	push   $0x569
f011537a:	68 7a 73 13 f0       	push   $0xf013737a
f011537f:	e8 3a b0 fe ff       	call   f01003be <_warn>
f0115384:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115387:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011538b:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011538f:	74 04                	je     f0115395 <test_calculate_required_frames+0x1a2>
f0115391:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115395:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		res = calculate_required_frames(proc_directory, 0x0, 1024*mega);
f0115399:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011539c:	c1 e0 0a             	shl    $0xa,%eax
f011539f:	83 ec 04             	sub    $0x4,%esp
f01153a2:	50                   	push   %eax
f01153a3:	6a 00                	push   $0x0
f01153a5:	ff 75 d8             	pushl  -0x28(%ebp)
f01153a8:	e8 62 38 ff ff       	call   f0108c0f <calculate_required_frames>
f01153ad:	83 c4 10             	add    $0x10,%esp
f01153b0:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != ((1024*mega)/(4*mega) + (1024*mega)/(4*kilo)))
f01153b3:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01153b6:	c1 e0 0a             	shl    $0xa,%eax
f01153b9:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01153bc:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f01153c3:	99                   	cltd   
f01153c4:	f7 fb                	idiv   %ebx
f01153c6:	89 c1                	mov    %eax,%ecx
f01153c8:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01153cb:	c1 e0 0a             	shl    $0xa,%eax
f01153ce:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01153d1:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f01153d8:	99                   	cltd   
f01153d9:	f7 fe                	idiv   %esi
f01153db:	01 c8                	add    %ecx,%eax
f01153dd:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f01153e0:	74 4c                	je     f011542e <test_calculate_required_frames+0x23b>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, ((1024*mega)/(4*mega) + (1024*mega)/(4*kilo)));
f01153e2:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01153e5:	c1 e0 0a             	shl    $0xa,%eax
f01153e8:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01153eb:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f01153f2:	99                   	cltd   
f01153f3:	f7 fb                	idiv   %ebx
f01153f5:	89 c1                	mov    %eax,%ecx
f01153f7:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01153fa:	c1 e0 0a             	shl    $0xa,%eax
f01153fd:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0115400:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0115407:	99                   	cltd   
f0115408:	f7 fe                	idiv   %esi
f011540a:	01 c8                	add    %ecx,%eax
f011540c:	83 ec 0c             	sub    $0xc,%esp
f011540f:	50                   	push   %eax
f0115410:	ff 75 c8             	pushl  -0x38(%ebp)
f0115413:	68 f4 8b 13 f0       	push   $0xf0138bf4
f0115418:	68 73 05 00 00       	push   $0x573
f011541d:	68 7a 73 13 f0       	push   $0xf013737a
f0115422:	e8 97 af fe ff       	call   f01003be <_warn>
f0115427:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011542a:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011542e:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115432:	74 04                	je     f0115438 <test_calculate_required_frames+0x245>
f0115434:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115438:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		//Test4
		res = calculate_required_frames(proc_directory, 0x1000, 6*kilo);
f011543c:	8b 55 d0             	mov    -0x30(%ebp),%edx
f011543f:	89 d0                	mov    %edx,%eax
f0115441:	01 c0                	add    %eax,%eax
f0115443:	01 d0                	add    %edx,%eax
f0115445:	01 c0                	add    %eax,%eax
f0115447:	83 ec 04             	sub    $0x4,%esp
f011544a:	50                   	push   %eax
f011544b:	68 00 10 00 00       	push   $0x1000
f0115450:	ff 75 d8             	pushl  -0x28(%ebp)
f0115453:	e8 b7 37 ff ff       	call   f0108c0f <calculate_required_frames>
f0115458:	83 c4 10             	add    $0x10,%esp
f011545b:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 3)
f011545e:	83 7d c8 03          	cmpl   $0x3,-0x38(%ebp)
f0115462:	74 23                	je     f0115487 <test_calculate_required_frames+0x294>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 3);
f0115464:	83 ec 0c             	sub    $0xc,%esp
f0115467:	6a 03                	push   $0x3
f0115469:	ff 75 c8             	pushl  -0x38(%ebp)
f011546c:	68 f4 8b 13 f0       	push   $0xf0138bf4
f0115471:	68 7f 05 00 00       	push   $0x57f
f0115476:	68 7a 73 13 f0       	push   $0xf013737a
f011547b:	e8 3e af fe ff       	call   f01003be <_warn>
f0115480:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115483:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115487:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011548b:	74 04                	je     f0115491 <test_calculate_required_frames+0x29e>
f011548d:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115491:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test5
		res = calculate_required_frames(proc_directory, 0x1800, 3*kilo);
f0115495:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115498:	89 c2                	mov    %eax,%edx
f011549a:	01 d2                	add    %edx,%edx
f011549c:	01 d0                	add    %edx,%eax
f011549e:	83 ec 04             	sub    $0x4,%esp
f01154a1:	50                   	push   %eax
f01154a2:	68 00 18 00 00       	push   $0x1800
f01154a7:	ff 75 d8             	pushl  -0x28(%ebp)
f01154aa:	e8 60 37 ff ff       	call   f0108c0f <calculate_required_frames>
f01154af:	83 c4 10             	add    $0x10,%esp
f01154b2:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 3)
f01154b5:	83 7d c8 03          	cmpl   $0x3,-0x38(%ebp)
f01154b9:	74 23                	je     f01154de <test_calculate_required_frames+0x2eb>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 3);
f01154bb:	83 ec 0c             	sub    $0xc,%esp
f01154be:	6a 03                	push   $0x3
f01154c0:	ff 75 c8             	pushl  -0x38(%ebp)
f01154c3:	68 f4 8b 13 f0       	push   $0xf0138bf4
f01154c8:	68 89 05 00 00       	push   $0x589
f01154cd:	68 7a 73 13 f0       	push   $0xf013737a
f01154d2:	e8 e7 ae fe ff       	call   f01003be <_warn>
f01154d7:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01154da:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01154de:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01154e2:	74 04                	je     f01154e8 <test_calculate_required_frames+0x2f5>
f01154e4:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01154e8:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test6
		res = calculate_required_frames(proc_directory, 0x400000, 10*mega);
f01154ec:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01154ef:	89 d0                	mov    %edx,%eax
f01154f1:	c1 e0 02             	shl    $0x2,%eax
f01154f4:	01 d0                	add    %edx,%eax
f01154f6:	01 c0                	add    %eax,%eax
f01154f8:	83 ec 04             	sub    $0x4,%esp
f01154fb:	50                   	push   %eax
f01154fc:	68 00 00 40 00       	push   $0x400000
f0115501:	ff 75 d8             	pushl  -0x28(%ebp)
f0115504:	e8 06 37 ff ff       	call   f0108c0f <calculate_required_frames>
f0115509:	83 c4 10             	add    $0x10,%esp
f011550c:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 2563)
f011550f:	81 7d c8 03 0a 00 00 	cmpl   $0xa03,-0x38(%ebp)
f0115516:	74 26                	je     f011553e <test_calculate_required_frames+0x34b>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 2563);
f0115518:	83 ec 0c             	sub    $0xc,%esp
f011551b:	68 03 0a 00 00       	push   $0xa03
f0115520:	ff 75 c8             	pushl  -0x38(%ebp)
f0115523:	68 f4 8b 13 f0       	push   $0xf0138bf4
f0115528:	68 93 05 00 00       	push   $0x593
f011552d:	68 7a 73 13 f0       	push   $0xf013737a
f0115532:	e8 87 ae fe ff       	call   f01003be <_warn>
f0115537:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011553a:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011553e:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115542:	74 04                	je     f0115548 <test_calculate_required_frames+0x355>
f0115544:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115548:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		//Test7
		res = calculate_required_frames(proc_directory, 0x700000, 2*mega);
f011554c:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011554f:	01 c0                	add    %eax,%eax
f0115551:	83 ec 04             	sub    $0x4,%esp
f0115554:	50                   	push   %eax
f0115555:	68 00 00 70 00       	push   $0x700000
f011555a:	ff 75 d8             	pushl  -0x28(%ebp)
f011555d:	e8 ad 36 ff ff       	call   f0108c0f <calculate_required_frames>
f0115562:	83 c4 10             	add    $0x10,%esp
f0115565:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 514)
f0115568:	81 7d c8 02 02 00 00 	cmpl   $0x202,-0x38(%ebp)
f011556f:	74 26                	je     f0115597 <test_calculate_required_frames+0x3a4>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 514);
f0115571:	83 ec 0c             	sub    $0xc,%esp
f0115574:	68 02 02 00 00       	push   $0x202
f0115579:	ff 75 c8             	pushl  -0x38(%ebp)
f011557c:	68 f4 8b 13 f0       	push   $0xf0138bf4
f0115581:	68 9f 05 00 00       	push   $0x59f
f0115586:	68 7a 73 13 f0       	push   $0xf013737a
f011558b:	e8 2e ae fe ff       	call   f01003be <_warn>
f0115590:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115593:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0115597:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011559b:	74 04                	je     f01155a1 <test_calculate_required_frames+0x3ae>
f011559d:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01155a1:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test8
		res = calculate_required_frames(proc_directory, 0x3FFFFF, 1*kilo);
f01155a5:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01155a8:	83 ec 04             	sub    $0x4,%esp
f01155ab:	50                   	push   %eax
f01155ac:	68 ff ff 3f 00       	push   $0x3fffff
f01155b1:	ff 75 d8             	pushl  -0x28(%ebp)
f01155b4:	e8 56 36 ff ff       	call   f0108c0f <calculate_required_frames>
f01155b9:	83 c4 10             	add    $0x10,%esp
f01155bc:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 4)
f01155bf:	83 7d c8 04          	cmpl   $0x4,-0x38(%ebp)
f01155c3:	74 23                	je     f01155e8 <test_calculate_required_frames+0x3f5>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 4);
f01155c5:	83 ec 0c             	sub    $0xc,%esp
f01155c8:	6a 04                	push   $0x4
f01155ca:	ff 75 c8             	pushl  -0x38(%ebp)
f01155cd:	68 f4 8b 13 f0       	push   $0xf0138bf4
f01155d2:	68 a9 05 00 00       	push   $0x5a9
f01155d7:	68 7a 73 13 f0       	push   $0xf013737a
f01155dc:	e8 dd ad fe ff       	call   f01003be <_warn>
f01155e1:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01155e4:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f01155e8:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01155ec:	74 04                	je     f01155f2 <test_calculate_required_frames+0x3ff>
f01155ee:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01155f2:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE I: END\n") ;
f01155f6:	83 ec 0c             	sub    $0xc,%esp
f01155f9:	68 2d 87 13 f0       	push   $0xf013872d
f01155fe:	e8 2e b8 fe ff       	call   f0100e31 <cprintf>
f0115603:	83 c4 10             	add    $0x10,%esp

	/*==================================================*/
	/*PART II: SOME pages and/or tables are exist [50%] */
	/*==================================================*/
	cprintf("\nCASE II: SOME pages and/or tables are exist [50%]\n") ;
f0115606:	83 ec 0c             	sub    $0xc,%esp
f0115609:	68 4c 8c 13 f0       	push   $0xf0138c4c
f011560e:	e8 1e b8 fe ff       	call   f0100e31 <cprintf>
f0115613:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x0", c1); execute_command(c1);
f0115616:	83 ec 04             	sub    $0x4,%esp
f0115619:	8d 85 fe fd ff ff    	lea    -0x202(%ebp),%eax
f011561f:	50                   	push   %eax
f0115620:	68 e6 7a 13 f0       	push   $0xf0137ae6
f0115625:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f011562b:	50                   	push   %eax
f011562c:	e8 aa 9d 01 00       	call   f012f3db <strcconcat>
f0115631:	83 c4 10             	add    $0x10,%esp
f0115634:	83 ec 0c             	sub    $0xc,%esp
f0115637:	8d 85 fe fd ff ff    	lea    -0x202(%ebp),%eax
f011563d:	50                   	push   %eax
f011563e:	e8 80 c5 fe ff       	call   f0101bc3 <execute_command>
f0115643:	83 c4 10             	add    $0x10,%esp

		res = calculate_required_frames(proc_directory, 0x0, 8*kilo);
f0115646:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115649:	c1 e0 03             	shl    $0x3,%eax
f011564c:	83 ec 04             	sub    $0x4,%esp
f011564f:	50                   	push   %eax
f0115650:	6a 00                	push   $0x0
f0115652:	ff 75 d8             	pushl  -0x28(%ebp)
f0115655:	e8 b5 35 ff ff       	call   f0108c0f <calculate_required_frames>
f011565a:	83 c4 10             	add    $0x10,%esp
f011565d:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 1 ;
f0115660:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (res != expected)
f0115667:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011566a:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011566d:	74 24                	je     f0115693 <test_calculate_required_frames+0x4a0>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f011566f:	83 ec 0c             	sub    $0xc,%esp
f0115672:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115675:	ff 75 c8             	pushl  -0x38(%ebp)
f0115678:	68 f4 8b 13 f0       	push   $0xf0138bf4
f011567d:	68 bd 05 00 00       	push   $0x5bd
f0115682:	68 7a 73 13 f0       	push   $0xf013737a
f0115687:	e8 32 ad fe ff       	call   f01003be <_warn>
f011568c:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011568f:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115693:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115697:	74 04                	je     f011569d <test_calculate_required_frames+0x4aa>
f0115699:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011569d:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c2[100] ;strcconcat(aup_cmd, " 0x100000", c2); execute_command(c2);
f01156a1:	83 ec 04             	sub    $0x4,%esp
f01156a4:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f01156aa:	50                   	push   %eax
f01156ab:	68 f3 7a 13 f0       	push   $0xf0137af3
f01156b0:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01156b6:	50                   	push   %eax
f01156b7:	e8 1f 9d 01 00       	call   f012f3db <strcconcat>
f01156bc:	83 c4 10             	add    $0x10,%esp
f01156bf:	83 ec 0c             	sub    $0xc,%esp
f01156c2:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f01156c8:	50                   	push   %eax
f01156c9:	e8 f5 c4 fe ff       	call   f0101bc3 <execute_command>
f01156ce:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x10000000", c3); execute_command(c3);
f01156d1:	83 ec 04             	sub    $0x4,%esp
f01156d4:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f01156da:	50                   	push   %eax
f01156db:	68 80 8c 13 f0       	push   $0xf0138c80
f01156e0:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01156e6:	50                   	push   %eax
f01156e7:	e8 ef 9c 01 00       	call   f012f3db <strcconcat>
f01156ec:	83 c4 10             	add    $0x10,%esp
f01156ef:	83 ec 0c             	sub    $0xc,%esp
f01156f2:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f01156f8:	50                   	push   %eax
f01156f9:	e8 c5 c4 fe ff       	call   f0101bc3 <execute_command>
f01156fe:	83 c4 10             	add    $0x10,%esp

		//Test2
		res = calculate_required_frames(proc_directory, 0x0, 8*mega);
f0115701:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115704:	c1 e0 03             	shl    $0x3,%eax
f0115707:	83 ec 04             	sub    $0x4,%esp
f011570a:	50                   	push   %eax
f011570b:	6a 00                	push   $0x0
f011570d:	ff 75 d8             	pushl  -0x28(%ebp)
f0115710:	e8 fa 34 ff ff       	call   f0108c0f <calculate_required_frames>
f0115715:	83 c4 10             	add    $0x10,%esp
f0115718:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 2047;
f011571b:	c7 45 c4 ff 07 00 00 	movl   $0x7ff,-0x3c(%ebp)
		if (res != expected)
f0115722:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0115725:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0115728:	74 24                	je     f011574e <test_calculate_required_frames+0x55b>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f011572a:	83 ec 0c             	sub    $0xc,%esp
f011572d:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115730:	ff 75 c8             	pushl  -0x38(%ebp)
f0115733:	68 f4 8b 13 f0       	push   $0xf0138bf4
f0115738:	68 cb 05 00 00       	push   $0x5cb
f011573d:	68 7a 73 13 f0       	push   $0xf013737a
f0115742:	e8 77 ac fe ff       	call   f01003be <_warn>
f0115747:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011574a:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011574e:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115752:	74 04                	je     f0115758 <test_calculate_required_frames+0x565>
f0115754:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115758:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		res = calculate_required_frames(proc_directory, 0x0, 1024*mega);
f011575c:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011575f:	c1 e0 0a             	shl    $0xa,%eax
f0115762:	83 ec 04             	sub    $0x4,%esp
f0115765:	50                   	push   %eax
f0115766:	6a 00                	push   $0x0
f0115768:	ff 75 d8             	pushl  -0x28(%ebp)
f011576b:	e8 9f 34 ff ff       	call   f0108c0f <calculate_required_frames>
f0115770:	83 c4 10             	add    $0x10,%esp
f0115773:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = ((1024*mega)/(4*mega) + (1024*mega)/(4*kilo)) - 2 - 1 - 2;
f0115776:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115779:	c1 e0 0a             	shl    $0xa,%eax
f011577c:	8b 55 cc             	mov    -0x34(%ebp),%edx
f011577f:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0115786:	99                   	cltd   
f0115787:	f7 fb                	idiv   %ebx
f0115789:	89 c1                	mov    %eax,%ecx
f011578b:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011578e:	c1 e0 0a             	shl    $0xa,%eax
f0115791:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0115794:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f011579b:	99                   	cltd   
f011579c:	f7 fe                	idiv   %esi
f011579e:	01 c8                	add    %ecx,%eax
f01157a0:	83 e8 05             	sub    $0x5,%eax
f01157a3:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		if (res != expected)
f01157a6:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01157a9:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01157ac:	74 24                	je     f01157d2 <test_calculate_required_frames+0x5df>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f01157ae:	83 ec 0c             	sub    $0xc,%esp
f01157b1:	ff 75 c4             	pushl  -0x3c(%ebp)
f01157b4:	ff 75 c8             	pushl  -0x38(%ebp)
f01157b7:	68 f4 8b 13 f0       	push   $0xf0138bf4
f01157bc:	68 d6 05 00 00       	push   $0x5d6
f01157c1:	68 7a 73 13 f0       	push   $0xf013737a
f01157c6:	e8 f3 ab fe ff       	call   f01003be <_warn>
f01157cb:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01157ce:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f01157d2:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01157d6:	74 04                	je     f01157dc <test_calculate_required_frames+0x5e9>
f01157d8:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01157dc:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x2000", c3); execute_command(c3);
f01157e0:	83 ec 04             	sub    $0x4,%esp
f01157e3:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f01157e9:	50                   	push   %eax
f01157ea:	68 8c 8c 13 f0       	push   $0xf0138c8c
f01157ef:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01157f5:	50                   	push   %eax
f01157f6:	e8 e0 9b 01 00       	call   f012f3db <strcconcat>
f01157fb:	83 c4 10             	add    $0x10,%esp
f01157fe:	83 ec 0c             	sub    $0xc,%esp
f0115801:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0115807:	50                   	push   %eax
f0115808:	e8 b6 c3 fe ff       	call   f0101bc3 <execute_command>
f011580d:	83 c4 10             	add    $0x10,%esp

		//Test4
		res = calculate_required_frames(proc_directory, 0x1800, 3*kilo);
f0115810:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115813:	89 c2                	mov    %eax,%edx
f0115815:	01 d2                	add    %edx,%edx
f0115817:	01 d0                	add    %edx,%eax
f0115819:	83 ec 04             	sub    $0x4,%esp
f011581c:	50                   	push   %eax
f011581d:	68 00 18 00 00       	push   $0x1800
f0115822:	ff 75 d8             	pushl  -0x28(%ebp)
f0115825:	e8 e5 33 ff ff       	call   f0108c0f <calculate_required_frames>
f011582a:	83 c4 10             	add    $0x10,%esp
f011582d:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 1 ;
f0115830:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (res != expected)
f0115837:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011583a:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011583d:	74 24                	je     f0115863 <test_calculate_required_frames+0x670>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f011583f:	83 ec 0c             	sub    $0xc,%esp
f0115842:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115845:	ff 75 c8             	pushl  -0x38(%ebp)
f0115848:	68 f4 8b 13 f0       	push   $0xf0138bf4
f011584d:	68 e5 05 00 00       	push   $0x5e5
f0115852:	68 7a 73 13 f0       	push   $0xf013737a
f0115857:	e8 62 ab fe ff       	call   f01003be <_warn>
f011585c:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011585f:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115863:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115867:	74 04                	je     f011586d <test_calculate_required_frames+0x67a>
f0115869:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011586d:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x800000", c4); execute_command(c4);
f0115871:	83 ec 04             	sub    $0x4,%esp
f0115874:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f011587a:	50                   	push   %eax
f011587b:	68 4c 7d 13 f0       	push   $0xf0137d4c
f0115880:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115886:	50                   	push   %eax
f0115887:	e8 4f 9b 01 00       	call   f012f3db <strcconcat>
f011588c:	83 c4 10             	add    $0x10,%esp
f011588f:	83 ec 0c             	sub    $0xc,%esp
f0115892:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f0115898:	50                   	push   %eax
f0115899:	e8 25 c3 fe ff       	call   f0101bc3 <execute_command>
f011589e:	83 c4 10             	add    $0x10,%esp

		//Test5
		res = calculate_required_frames(proc_directory, 0x400000, 10*mega);
f01158a1:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01158a4:	89 d0                	mov    %edx,%eax
f01158a6:	c1 e0 02             	shl    $0x2,%eax
f01158a9:	01 d0                	add    %edx,%eax
f01158ab:	01 c0                	add    %eax,%eax
f01158ad:	83 ec 04             	sub    $0x4,%esp
f01158b0:	50                   	push   %eax
f01158b1:	68 00 00 40 00       	push   $0x400000
f01158b6:	ff 75 d8             	pushl  -0x28(%ebp)
f01158b9:	e8 51 33 ff ff       	call   f0108c0f <calculate_required_frames>
f01158be:	83 c4 10             	add    $0x10,%esp
f01158c1:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 2561)
f01158c4:	81 7d c8 01 0a 00 00 	cmpl   $0xa01,-0x38(%ebp)
f01158cb:	74 26                	je     f01158f3 <test_calculate_required_frames+0x700>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 2563);
f01158cd:	83 ec 0c             	sub    $0xc,%esp
f01158d0:	68 03 0a 00 00       	push   $0xa03
f01158d5:	ff 75 c8             	pushl  -0x38(%ebp)
f01158d8:	68 f4 8b 13 f0       	push   $0xf0138bf4
f01158dd:	68 f1 05 00 00       	push   $0x5f1
f01158e2:	68 7a 73 13 f0       	push   $0xf013737a
f01158e7:	e8 d2 aa fe ff       	call   f01003be <_warn>
f01158ec:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01158ef:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01158f3:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01158f7:	74 04                	je     f01158fd <test_calculate_required_frames+0x70a>
f01158f9:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01158fd:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x801000", c3); execute_command(c3);
f0115901:	83 ec 04             	sub    $0x4,%esp
f0115904:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f011590a:	50                   	push   %eax
f011590b:	68 56 7d 13 f0       	push   $0xf0137d56
f0115910:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115916:	50                   	push   %eax
f0115917:	e8 bf 9a 01 00       	call   f012f3db <strcconcat>
f011591c:	83 c4 10             	add    $0x10,%esp
f011591f:	83 ec 0c             	sub    $0xc,%esp
f0115922:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0115928:	50                   	push   %eax
f0115929:	e8 95 c2 fe ff       	call   f0101bc3 <execute_command>
f011592e:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x810000", c4); execute_command(c4);
f0115931:	83 ec 04             	sub    $0x4,%esp
f0115934:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f011593a:	50                   	push   %eax
f011593b:	68 94 8c 13 f0       	push   $0xf0138c94
f0115940:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115946:	50                   	push   %eax
f0115947:	e8 8f 9a 01 00       	call   f012f3db <strcconcat>
f011594c:	83 c4 10             	add    $0x10,%esp
f011594f:	83 ec 0c             	sub    $0xc,%esp
f0115952:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f0115958:	50                   	push   %eax
f0115959:	e8 65 c2 fe ff       	call   f0101bc3 <execute_command>
f011595e:	83 c4 10             	add    $0x10,%esp

		//Test7
		res = calculate_required_frames(proc_directory, 0x700000, 2*mega);
f0115961:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115964:	01 c0                	add    %eax,%eax
f0115966:	83 ec 04             	sub    $0x4,%esp
f0115969:	50                   	push   %eax
f011596a:	68 00 00 70 00       	push   $0x700000
f011596f:	ff 75 d8             	pushl  -0x28(%ebp)
f0115972:	e8 98 32 ff ff       	call   f0108c0f <calculate_required_frames>
f0115977:	83 c4 10             	add    $0x10,%esp
f011597a:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 510 ;
f011597d:	c7 45 c4 fe 01 00 00 	movl   $0x1fe,-0x3c(%ebp)
		if (res != expected)
f0115984:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0115987:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011598a:	74 24                	je     f01159b0 <test_calculate_required_frames+0x7bd>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f011598c:	83 ec 0c             	sub    $0xc,%esp
f011598f:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115992:	ff 75 c8             	pushl  -0x38(%ebp)
f0115995:	68 f4 8b 13 f0       	push   $0xf0138bf4
f011599a:	68 01 06 00 00       	push   $0x601
f011599f:	68 7a 73 13 f0       	push   $0xf013737a
f01159a4:	e8 15 aa fe ff       	call   f01003be <_warn>
f01159a9:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01159ac:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f01159b0:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01159b4:	74 04                	je     f01159ba <test_calculate_required_frames+0x7c7>
f01159b6:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01159ba:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test8
		res = calculate_required_frames(proc_directory, 0x3FFFFF, 1*kilo);
f01159be:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01159c1:	83 ec 04             	sub    $0x4,%esp
f01159c4:	50                   	push   %eax
f01159c5:	68 ff ff 3f 00       	push   $0x3fffff
f01159ca:	ff 75 d8             	pushl  -0x28(%ebp)
f01159cd:	e8 3d 32 ff ff       	call   f0108c0f <calculate_required_frames>
f01159d2:	83 c4 10             	add    $0x10,%esp
f01159d5:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 3 ;
f01159d8:	c7 45 c4 03 00 00 00 	movl   $0x3,-0x3c(%ebp)
		if (res != expected)
f01159df:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01159e2:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01159e5:	74 24                	je     f0115a0b <test_calculate_required_frames+0x818>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f01159e7:	83 ec 0c             	sub    $0xc,%esp
f01159ea:	ff 75 c4             	pushl  -0x3c(%ebp)
f01159ed:	ff 75 c8             	pushl  -0x38(%ebp)
f01159f0:	68 f4 8b 13 f0       	push   $0xf0138bf4
f01159f5:	68 0c 06 00 00       	push   $0x60c
f01159fa:	68 7a 73 13 f0       	push   $0xf013737a
f01159ff:	e8 ba a9 fe ff       	call   f01003be <_warn>
f0115a04:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115a07:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0115a0b:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115a0f:	74 04                	je     f0115a15 <test_calculate_required_frames+0x822>
f0115a11:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0115a15:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE II: END\n") ;
f0115a19:	83 ec 0c             	sub    $0xc,%esp
f0115a1c:	68 07 7d 13 f0       	push   $0xf0137d07
f0115a21:	e8 0b b4 fe ff       	call   f0100e31 <cprintf>
f0115a26:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] calculate_required_frames: FINISHED. Evaluation = %d\n", eval);
f0115a29:	83 ec 08             	sub    $0x8,%esp
f0115a2c:	ff 75 e4             	pushl  -0x1c(%ebp)
f0115a2f:	68 a0 8c 13 f0       	push   $0xf0138ca0
f0115a34:	e8 f8 b3 fe ff       	call   f0100e31 <cprintf>
f0115a39:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0115a3c:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f0115a40:	75 10                	jne    f0115a52 <test_calculate_required_frames+0x85f>
		cprintf("Congratulations!! test calculate_required_frames completed successfully.\n");
f0115a42:	83 ec 0c             	sub    $0xc,%esp
f0115a45:	68 e0 8c 13 f0       	push   $0xf0138ce0
f0115a4a:	e8 e2 b3 fe ff       	call   f0100e31 <cprintf>
f0115a4f:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0115a52:	a1 70 be 2b f0       	mov    0xf02bbe70,%eax
f0115a57:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0115a5a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0115a5d:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0115a60:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0115a65:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0115a68:	5b                   	pop    %ebx
f0115a69:	5e                   	pop    %esi
f0115a6a:	5f                   	pop    %edi
f0115a6b:	5d                   	pop    %ebp
f0115a6c:	c3                   	ret    

f0115a6d <test_calculate_allocated_space>:

int test_calculate_allocated_space()
{
f0115a6d:	55                   	push   %ebp
f0115a6e:	89 e5                	mov    %esp,%ebp
f0115a70:	57                   	push   %edi
f0115a71:	56                   	push   %esi
f0115a72:	53                   	push   %ebx
f0115a73:	81 ec 0c 02 00 00    	sub    $0x20c,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0115a79:	8d 45 8e             	lea    -0x72(%ebp),%eax
f0115a7c:	bb 7c 7a 13 f0       	mov    $0xf0137a7c,%ebx
f0115a81:	ba 0f 00 00 00       	mov    $0xf,%edx
f0115a86:	89 c7                	mov    %eax,%edi
f0115a88:	89 de                	mov    %ebx,%esi
f0115a8a:	89 d1                	mov    %edx,%ecx
f0115a8c:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0115a8e:	8d 55 9d             	lea    -0x63(%ebp),%edx
f0115a91:	b9 23 00 00 00       	mov    $0x23,%ecx
f0115a96:	b0 00                	mov    $0x0,%al
f0115a98:	89 d7                	mov    %edx,%edi
f0115a9a:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0115a9c:	6a 00                	push   $0x0
f0115a9e:	6a 0a                	push   $0xa
f0115aa0:	6a 14                	push   $0x14
f0115aa2:	8d 45 8e             	lea    -0x72(%ebp),%eax
f0115aa5:	50                   	push   %eax
f0115aa6:	e8 20 32 ff ff       	call   f0108ccb <env_create>
f0115aab:	83 c4 10             	add    $0x10,%esp
f0115aae:	89 45 dc             	mov    %eax,-0x24(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0115ab1:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0115ab4:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0115aba:	89 45 d8             	mov    %eax,-0x28(%ebp)
	lcr3(env->env_cr3) ;
f0115abd:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0115ac0:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f0115ac6:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0115ac9:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0115acc:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f0115acf:	c7 85 7a ff ff ff 61 	movl   $0x20707561,-0x86(%ebp)
f0115ad6:	75 70 20 
f0115ad9:	c7 85 7e ff ff ff 00 	movl   $0x0,-0x82(%ebp)
f0115ae0:	00 00 00 
f0115ae3:	8d 55 82             	lea    -0x7e(%ebp),%edx
f0115ae6:	b9 03 00 00 00       	mov    $0x3,%ecx
f0115aeb:	b8 00 00 00 00       	mov    $0x0,%eax
f0115af0:	89 d7                	mov    %edx,%edi
f0115af2:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f0115af4:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0115af7:	8b 40 4c             	mov    0x4c(%eax),%eax
f0115afa:	83 ec 08             	sub    $0x8,%esp
f0115afd:	8d 95 66 ff ff ff    	lea    -0x9a(%ebp),%edx
f0115b03:	52                   	push   %edx
f0115b04:	50                   	push   %eax
f0115b05:	e8 d9 97 01 00       	call   f012f2e3 <ltostr>
f0115b0a:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f0115b0d:	83 ec 04             	sub    $0x4,%esp
f0115b10:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115b16:	50                   	push   %eax
f0115b17:	8d 85 66 ff ff ff    	lea    -0x9a(%ebp),%eax
f0115b1d:	50                   	push   %eax
f0115b1e:	8d 85 7a ff ff ff    	lea    -0x86(%ebp),%eax
f0115b24:	50                   	push   %eax
f0115b25:	e8 b1 98 01 00       	call   f012f3db <strcconcat>
f0115b2a:	83 c4 10             	add    $0x10,%esp
	//===================================================

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f0115b2d:	c7 45 d0 00 04 00 00 	movl   $0x400,-0x30(%ebp)
	int mega = 1024*1024 ;
f0115b34:	c7 45 cc 00 00 10 00 	movl   $0x100000,-0x34(%ebp)
	uint32 eval = 0;
f0115b3b:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint8 correct = 1;
f0115b42:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	uint32 expected_num_pages;
	uint32 expected_num_tables;
	uint32 numOfFreeFramesBefore, numOfFreeFramesAfter;
	uint32 num_pages = 0;
f0115b46:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115b4d:	00 00 00 
	uint32 num_tables = 0;
f0115b50:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115b57:	00 00 00 
	ClearUserSpace(proc_directory);
f0115b5a:	83 ec 0c             	sub    $0xc,%esp
f0115b5d:	ff 75 d8             	pushl  -0x28(%ebp)
f0115b60:	e8 d8 11 00 00       	call   f0116d3d <ClearUserSpace>
f0115b65:	83 c4 10             	add    $0x10,%esp

	/*================================================*/
	/*PART I: ALL pages and tables are not exist 50%  */
	/*================================================*/
	cprintf("\nCASE I: ALL pages and tables are not exist [50%]\n") ;
f0115b68:	83 ec 0c             	sub    $0xc,%esp
f0115b6b:	68 c0 8b 13 f0       	push   $0xf0138bc0
f0115b70:	e8 bc b2 fe ff       	call   f0100e31 <cprintf>
f0115b75:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		calculate_allocated_space(proc_directory, 0x0, 0x0+8*kilo, &num_tables, &num_pages);
f0115b78:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115b7b:	c1 e0 03             	shl    $0x3,%eax
f0115b7e:	89 c2                	mov    %eax,%edx
f0115b80:	83 ec 0c             	sub    $0xc,%esp
f0115b83:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115b89:	50                   	push   %eax
f0115b8a:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115b90:	50                   	push   %eax
f0115b91:	52                   	push   %edx
f0115b92:	6a 00                	push   $0x0
f0115b94:	ff 75 d8             	pushl  -0x28(%ebp)
f0115b97:	e8 59 30 ff ff       	call   f0108bf5 <calculate_allocated_space>
f0115b9c:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0115b9f:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115ba5:	85 c0                	test   %eax,%eax
f0115ba7:	74 27                	je     f0115bd0 <test_calculate_allocated_space+0x163>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115ba9:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115baf:	83 ec 0c             	sub    $0xc,%esp
f0115bb2:	6a 00                	push   $0x0
f0115bb4:	50                   	push   %eax
f0115bb5:	68 2c 8d 13 f0       	push   $0xf0138d2c
f0115bba:	68 41 06 00 00       	push   $0x641
f0115bbf:	68 7a 73 13 f0       	push   $0xf013737a
f0115bc4:	e8 f5 a7 fe ff       	call   f01003be <_warn>
f0115bc9:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115bcc:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115bd0:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115bd6:	85 c0                	test   %eax,%eax
f0115bd8:	74 27                	je     f0115c01 <test_calculate_allocated_space+0x194>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0115bda:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115be0:	83 ec 0c             	sub    $0xc,%esp
f0115be3:	6a 00                	push   $0x0
f0115be5:	50                   	push   %eax
f0115be6:	68 8c 8d 13 f0       	push   $0xf0138d8c
f0115beb:	68 46 06 00 00       	push   $0x646
f0115bf0:	68 7a 73 13 f0       	push   $0xf013737a
f0115bf5:	e8 c4 a7 fe ff       	call   f01003be <_warn>
f0115bfa:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115bfd:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115c01:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115c05:	74 04                	je     f0115c0b <test_calculate_allocated_space+0x19e>
f0115c07:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115c0b:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test2
		num_tables = 0;
f0115c0f:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115c16:	00 00 00 
		num_pages = 0;
f0115c19:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115c20:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+4*mega, &num_tables, &num_pages);
f0115c23:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115c26:	c1 e0 02             	shl    $0x2,%eax
f0115c29:	89 c2                	mov    %eax,%edx
f0115c2b:	83 ec 0c             	sub    $0xc,%esp
f0115c2e:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115c34:	50                   	push   %eax
f0115c35:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115c3b:	50                   	push   %eax
f0115c3c:	52                   	push   %edx
f0115c3d:	6a 00                	push   $0x0
f0115c3f:	ff 75 d8             	pushl  -0x28(%ebp)
f0115c42:	e8 ae 2f ff ff       	call   f0108bf5 <calculate_allocated_space>
f0115c47:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0115c4a:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115c50:	85 c0                	test   %eax,%eax
f0115c52:	74 27                	je     f0115c7b <test_calculate_allocated_space+0x20e>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115c54:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115c5a:	83 ec 0c             	sub    $0xc,%esp
f0115c5d:	6a 00                	push   $0x0
f0115c5f:	50                   	push   %eax
f0115c60:	68 2c 8d 13 f0       	push   $0xf0138d2c
f0115c65:	68 52 06 00 00       	push   $0x652
f0115c6a:	68 7a 73 13 f0       	push   $0xf013737a
f0115c6f:	e8 4a a7 fe ff       	call   f01003be <_warn>
f0115c74:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115c77:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115c7b:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115c81:	85 c0                	test   %eax,%eax
f0115c83:	74 27                	je     f0115cac <test_calculate_allocated_space+0x23f>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0115c85:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115c8b:	83 ec 0c             	sub    $0xc,%esp
f0115c8e:	6a 00                	push   $0x0
f0115c90:	50                   	push   %eax
f0115c91:	68 8c 8d 13 f0       	push   $0xf0138d8c
f0115c96:	68 57 06 00 00       	push   $0x657
f0115c9b:	68 7a 73 13 f0       	push   $0xf013737a
f0115ca0:	e8 19 a7 fe ff       	call   f01003be <_warn>
f0115ca5:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115ca8:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115cac:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115cb0:	74 04                	je     f0115cb6 <test_calculate_allocated_space+0x249>
f0115cb2:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115cb6:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		num_tables = 0;
f0115cba:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115cc1:	00 00 00 
		num_pages = 0;
f0115cc4:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115ccb:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+1024*mega, &num_tables, &num_pages);
f0115cce:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115cd1:	c1 e0 0a             	shl    $0xa,%eax
f0115cd4:	89 c2                	mov    %eax,%edx
f0115cd6:	83 ec 0c             	sub    $0xc,%esp
f0115cd9:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115cdf:	50                   	push   %eax
f0115ce0:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115ce6:	50                   	push   %eax
f0115ce7:	52                   	push   %edx
f0115ce8:	6a 00                	push   $0x0
f0115cea:	ff 75 d8             	pushl  -0x28(%ebp)
f0115ced:	e8 03 2f ff ff       	call   f0108bf5 <calculate_allocated_space>
f0115cf2:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0115cf5:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115cfb:	85 c0                	test   %eax,%eax
f0115cfd:	74 27                	je     f0115d26 <test_calculate_allocated_space+0x2b9>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115cff:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115d05:	83 ec 0c             	sub    $0xc,%esp
f0115d08:	6a 00                	push   $0x0
f0115d0a:	50                   	push   %eax
f0115d0b:	68 2c 8d 13 f0       	push   $0xf0138d2c
f0115d10:	68 63 06 00 00       	push   $0x663
f0115d15:	68 7a 73 13 f0       	push   $0xf013737a
f0115d1a:	e8 9f a6 fe ff       	call   f01003be <_warn>
f0115d1f:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115d22:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115d26:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115d2c:	85 c0                	test   %eax,%eax
f0115d2e:	74 27                	je     f0115d57 <test_calculate_allocated_space+0x2ea>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0115d30:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115d36:	83 ec 0c             	sub    $0xc,%esp
f0115d39:	6a 00                	push   $0x0
f0115d3b:	50                   	push   %eax
f0115d3c:	68 8c 8d 13 f0       	push   $0xf0138d8c
f0115d41:	68 68 06 00 00       	push   $0x668
f0115d46:	68 7a 73 13 f0       	push   $0xf013737a
f0115d4b:	e8 6e a6 fe ff       	call   f01003be <_warn>
f0115d50:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115d53:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115d57:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115d5b:	74 04                	je     f0115d61 <test_calculate_allocated_space+0x2f4>
f0115d5d:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115d61:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		//Test4
		num_tables = 0;
f0115d65:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115d6c:	00 00 00 
		num_pages = 0;
f0115d6f:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115d76:	00 00 00 
		calculate_allocated_space(proc_directory, 0x1000, 0x1000+6*kilo, &num_tables, &num_pages);
f0115d79:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0115d7c:	89 d0                	mov    %edx,%eax
f0115d7e:	01 c0                	add    %eax,%eax
f0115d80:	01 d0                	add    %edx,%eax
f0115d82:	01 c0                	add    %eax,%eax
f0115d84:	05 00 10 00 00       	add    $0x1000,%eax
f0115d89:	89 c2                	mov    %eax,%edx
f0115d8b:	83 ec 0c             	sub    $0xc,%esp
f0115d8e:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115d94:	50                   	push   %eax
f0115d95:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115d9b:	50                   	push   %eax
f0115d9c:	52                   	push   %edx
f0115d9d:	68 00 10 00 00       	push   $0x1000
f0115da2:	ff 75 d8             	pushl  -0x28(%ebp)
f0115da5:	e8 4b 2e ff ff       	call   f0108bf5 <calculate_allocated_space>
f0115daa:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0115dad:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115db3:	85 c0                	test   %eax,%eax
f0115db5:	74 27                	je     f0115dde <test_calculate_allocated_space+0x371>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115db7:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115dbd:	83 ec 0c             	sub    $0xc,%esp
f0115dc0:	6a 00                	push   $0x0
f0115dc2:	50                   	push   %eax
f0115dc3:	68 2c 8d 13 f0       	push   $0xf0138d2c
f0115dc8:	68 75 06 00 00       	push   $0x675
f0115dcd:	68 7a 73 13 f0       	push   $0xf013737a
f0115dd2:	e8 e7 a5 fe ff       	call   f01003be <_warn>
f0115dd7:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115dda:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115dde:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115de4:	85 c0                	test   %eax,%eax
f0115de6:	74 27                	je     f0115e0f <test_calculate_allocated_space+0x3a2>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0115de8:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115dee:	83 ec 0c             	sub    $0xc,%esp
f0115df1:	6a 00                	push   $0x0
f0115df3:	50                   	push   %eax
f0115df4:	68 8c 8d 13 f0       	push   $0xf0138d8c
f0115df9:	68 7a 06 00 00       	push   $0x67a
f0115dfe:	68 7a 73 13 f0       	push   $0xf013737a
f0115e03:	e8 b6 a5 fe ff       	call   f01003be <_warn>
f0115e08:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115e0b:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115e0f:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115e13:	74 04                	je     f0115e19 <test_calculate_allocated_space+0x3ac>
f0115e15:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115e19:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test5
		num_tables = 0;
f0115e1d:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115e24:	00 00 00 
		num_pages = 0;
f0115e27:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115e2e:	00 00 00 
		calculate_allocated_space(proc_directory, 0x1800, 0x1800+3*kilo, &num_tables, &num_pages);
f0115e31:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115e34:	89 c2                	mov    %eax,%edx
f0115e36:	01 d2                	add    %edx,%edx
f0115e38:	01 d0                	add    %edx,%eax
f0115e3a:	05 00 18 00 00       	add    $0x1800,%eax
f0115e3f:	89 c2                	mov    %eax,%edx
f0115e41:	83 ec 0c             	sub    $0xc,%esp
f0115e44:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115e4a:	50                   	push   %eax
f0115e4b:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115e51:	50                   	push   %eax
f0115e52:	52                   	push   %edx
f0115e53:	68 00 18 00 00       	push   $0x1800
f0115e58:	ff 75 d8             	pushl  -0x28(%ebp)
f0115e5b:	e8 95 2d ff ff       	call   f0108bf5 <calculate_allocated_space>
f0115e60:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0115e63:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115e69:	85 c0                	test   %eax,%eax
f0115e6b:	74 27                	je     f0115e94 <test_calculate_allocated_space+0x427>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115e6d:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115e73:	83 ec 0c             	sub    $0xc,%esp
f0115e76:	6a 00                	push   $0x0
f0115e78:	50                   	push   %eax
f0115e79:	68 2c 8d 13 f0       	push   $0xf0138d2c
f0115e7e:	68 86 06 00 00       	push   $0x686
f0115e83:	68 7a 73 13 f0       	push   $0xf013737a
f0115e88:	e8 31 a5 fe ff       	call   f01003be <_warn>
f0115e8d:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115e90:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115e94:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115e9a:	85 c0                	test   %eax,%eax
f0115e9c:	74 27                	je     f0115ec5 <test_calculate_allocated_space+0x458>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0115e9e:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115ea4:	83 ec 0c             	sub    $0xc,%esp
f0115ea7:	6a 00                	push   $0x0
f0115ea9:	50                   	push   %eax
f0115eaa:	68 8c 8d 13 f0       	push   $0xf0138d8c
f0115eaf:	68 8b 06 00 00       	push   $0x68b
f0115eb4:	68 7a 73 13 f0       	push   $0xf013737a
f0115eb9:	e8 00 a5 fe ff       	call   f01003be <_warn>
f0115ebe:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115ec1:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115ec5:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115ec9:	74 04                	je     f0115ecf <test_calculate_allocated_space+0x462>
f0115ecb:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115ecf:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test6
		num_tables = 0;
f0115ed3:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115eda:	00 00 00 
		num_pages = 0;
f0115edd:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115ee4:	00 00 00 
		calculate_allocated_space(proc_directory, 0x400000, 0x400000+10*mega, &num_tables, &num_pages);
f0115ee7:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0115eea:	89 d0                	mov    %edx,%eax
f0115eec:	c1 e0 02             	shl    $0x2,%eax
f0115eef:	01 d0                	add    %edx,%eax
f0115ef1:	01 c0                	add    %eax,%eax
f0115ef3:	05 00 00 40 00       	add    $0x400000,%eax
f0115ef8:	89 c2                	mov    %eax,%edx
f0115efa:	83 ec 0c             	sub    $0xc,%esp
f0115efd:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115f03:	50                   	push   %eax
f0115f04:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115f0a:	50                   	push   %eax
f0115f0b:	52                   	push   %edx
f0115f0c:	68 00 00 40 00       	push   $0x400000
f0115f11:	ff 75 d8             	pushl  -0x28(%ebp)
f0115f14:	e8 dc 2c ff ff       	call   f0108bf5 <calculate_allocated_space>
f0115f19:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0115f1c:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115f22:	85 c0                	test   %eax,%eax
f0115f24:	74 27                	je     f0115f4d <test_calculate_allocated_space+0x4e0>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115f26:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115f2c:	83 ec 0c             	sub    $0xc,%esp
f0115f2f:	6a 00                	push   $0x0
f0115f31:	50                   	push   %eax
f0115f32:	68 2c 8d 13 f0       	push   $0xf0138d2c
f0115f37:	68 97 06 00 00       	push   $0x697
f0115f3c:	68 7a 73 13 f0       	push   $0xf013737a
f0115f41:	e8 78 a4 fe ff       	call   f01003be <_warn>
f0115f46:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115f49:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115f4d:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115f53:	85 c0                	test   %eax,%eax
f0115f55:	74 27                	je     f0115f7e <test_calculate_allocated_space+0x511>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0115f57:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115f5d:	83 ec 0c             	sub    $0xc,%esp
f0115f60:	6a 00                	push   $0x0
f0115f62:	50                   	push   %eax
f0115f63:	68 8c 8d 13 f0       	push   $0xf0138d8c
f0115f68:	68 9c 06 00 00       	push   $0x69c
f0115f6d:	68 7a 73 13 f0       	push   $0xf013737a
f0115f72:	e8 47 a4 fe ff       	call   f01003be <_warn>
f0115f77:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115f7a:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115f7e:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115f82:	74 04                	je     f0115f88 <test_calculate_allocated_space+0x51b>
f0115f84:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115f88:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		//Test7
		num_tables = 0;
f0115f8c:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115f93:	00 00 00 
		num_pages = 0;
f0115f96:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115f9d:	00 00 00 
		calculate_allocated_space(proc_directory, 0x700000, 0x700000+2*mega, &num_tables, &num_pages);
f0115fa0:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115fa3:	05 00 00 38 00       	add    $0x380000,%eax
f0115fa8:	01 c0                	add    %eax,%eax
f0115faa:	89 c2                	mov    %eax,%edx
f0115fac:	83 ec 0c             	sub    $0xc,%esp
f0115faf:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115fb5:	50                   	push   %eax
f0115fb6:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115fbc:	50                   	push   %eax
f0115fbd:	52                   	push   %edx
f0115fbe:	68 00 00 70 00       	push   $0x700000
f0115fc3:	ff 75 d8             	pushl  -0x28(%ebp)
f0115fc6:	e8 2a 2c ff ff       	call   f0108bf5 <calculate_allocated_space>
f0115fcb:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0115fce:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115fd4:	85 c0                	test   %eax,%eax
f0115fd6:	74 27                	je     f0115fff <test_calculate_allocated_space+0x592>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115fd8:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115fde:	83 ec 0c             	sub    $0xc,%esp
f0115fe1:	6a 00                	push   $0x0
f0115fe3:	50                   	push   %eax
f0115fe4:	68 2c 8d 13 f0       	push   $0xf0138d2c
f0115fe9:	68 a9 06 00 00       	push   $0x6a9
f0115fee:	68 7a 73 13 f0       	push   $0xf013737a
f0115ff3:	e8 c6 a3 fe ff       	call   f01003be <_warn>
f0115ff8:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115ffb:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115fff:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116005:	85 c0                	test   %eax,%eax
f0116007:	74 27                	je     f0116030 <test_calculate_allocated_space+0x5c3>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0116009:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011600f:	83 ec 0c             	sub    $0xc,%esp
f0116012:	6a 00                	push   $0x0
f0116014:	50                   	push   %eax
f0116015:	68 8c 8d 13 f0       	push   $0xf0138d8c
f011601a:	68 ae 06 00 00       	push   $0x6ae
f011601f:	68 7a 73 13 f0       	push   $0xf013737a
f0116024:	e8 95 a3 fe ff       	call   f01003be <_warn>
f0116029:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011602c:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0116030:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0116034:	74 04                	je     f011603a <test_calculate_allocated_space+0x5cd>
f0116036:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011603a:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test8
		num_tables = 0;
f011603e:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0116045:	00 00 00 
		num_pages = 0;
f0116048:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f011604f:	00 00 00 
		calculate_allocated_space(proc_directory, 0x3FFFFF, 0x3FFFFF+1*kilo, &num_tables, &num_pages);
f0116052:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0116055:	05 ff ff 3f 00       	add    $0x3fffff,%eax
f011605a:	89 c2                	mov    %eax,%edx
f011605c:	83 ec 0c             	sub    $0xc,%esp
f011605f:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0116065:	50                   	push   %eax
f0116066:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f011606c:	50                   	push   %eax
f011606d:	52                   	push   %edx
f011606e:	68 ff ff 3f 00       	push   $0x3fffff
f0116073:	ff 75 d8             	pushl  -0x28(%ebp)
f0116076:	e8 7a 2b ff ff       	call   f0108bf5 <calculate_allocated_space>
f011607b:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f011607e:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0116084:	85 c0                	test   %eax,%eax
f0116086:	74 27                	je     f01160af <test_calculate_allocated_space+0x642>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0116088:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011608e:	83 ec 0c             	sub    $0xc,%esp
f0116091:	6a 00                	push   $0x0
f0116093:	50                   	push   %eax
f0116094:	68 2c 8d 13 f0       	push   $0xf0138d2c
f0116099:	68 ba 06 00 00       	push   $0x6ba
f011609e:	68 7a 73 13 f0       	push   $0xf013737a
f01160a3:	e8 16 a3 fe ff       	call   f01003be <_warn>
f01160a8:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01160ab:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f01160af:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01160b5:	85 c0                	test   %eax,%eax
f01160b7:	74 27                	je     f01160e0 <test_calculate_allocated_space+0x673>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f01160b9:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01160bf:	83 ec 0c             	sub    $0xc,%esp
f01160c2:	6a 00                	push   $0x0
f01160c4:	50                   	push   %eax
f01160c5:	68 8c 8d 13 f0       	push   $0xf0138d8c
f01160ca:	68 bf 06 00 00       	push   $0x6bf
f01160cf:	68 7a 73 13 f0       	push   $0xf013737a
f01160d4:	e8 e5 a2 fe ff       	call   f01003be <_warn>
f01160d9:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01160dc:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f01160e0:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01160e4:	74 04                	je     f01160ea <test_calculate_allocated_space+0x67d>
f01160e6:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01160ea:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE I: END\n") ;
f01160ee:	83 ec 0c             	sub    $0xc,%esp
f01160f1:	68 2d 87 13 f0       	push   $0xf013872d
f01160f6:	e8 36 ad fe ff       	call   f0100e31 <cprintf>
f01160fb:	83 c4 10             	add    $0x10,%esp

	/*==================================================*/
	/*PART II: SOME pages and/or tables are exist [50%] */
	/*==================================================*/
	cprintf("\nCASE II: SOME pages and/or tables are exist [50%]\n") ;
f01160fe:	83 ec 0c             	sub    $0xc,%esp
f0116101:	68 4c 8c 13 f0       	push   $0xf0138c4c
f0116106:	e8 26 ad fe ff       	call   f0100e31 <cprintf>
f011610b:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x0", c1); execute_command(c1);
f011610e:	83 ec 04             	sub    $0x4,%esp
f0116111:	8d 85 f4 fd ff ff    	lea    -0x20c(%ebp),%eax
f0116117:	50                   	push   %eax
f0116118:	68 e6 7a 13 f0       	push   $0xf0137ae6
f011611d:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0116123:	50                   	push   %eax
f0116124:	e8 b2 92 01 00       	call   f012f3db <strcconcat>
f0116129:	83 c4 10             	add    $0x10,%esp
f011612c:	83 ec 0c             	sub    $0xc,%esp
f011612f:	8d 85 f4 fd ff ff    	lea    -0x20c(%ebp),%eax
f0116135:	50                   	push   %eax
f0116136:	e8 88 ba fe ff       	call   f0101bc3 <execute_command>
f011613b:	83 c4 10             	add    $0x10,%esp

		num_tables = 0;
f011613e:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0116145:	00 00 00 
		num_pages = 0;
f0116148:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f011614f:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+8*kilo, &num_tables, &num_pages);
f0116152:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0116155:	c1 e0 03             	shl    $0x3,%eax
f0116158:	89 c2                	mov    %eax,%edx
f011615a:	83 ec 0c             	sub    $0xc,%esp
f011615d:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0116163:	50                   	push   %eax
f0116164:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f011616a:	50                   	push   %eax
f011616b:	52                   	push   %edx
f011616c:	6a 00                	push   $0x0
f011616e:	ff 75 d8             	pushl  -0x28(%ebp)
f0116171:	e8 7f 2a ff ff       	call   f0108bf5 <calculate_allocated_space>
f0116176:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1 ;
f0116179:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 1 ;
f0116180:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0116187:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011618d:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0116190:	74 28                	je     f01161ba <test_calculate_allocated_space+0x74d>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0116192:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0116198:	83 ec 0c             	sub    $0xc,%esp
f011619b:	ff 75 c8             	pushl  -0x38(%ebp)
f011619e:	50                   	push   %eax
f011619f:	68 2c 8d 13 f0       	push   $0xf0138d2c
f01161a4:	68 d6 06 00 00       	push   $0x6d6
f01161a9:	68 7a 73 13 f0       	push   $0xf013737a
f01161ae:	e8 0b a2 fe ff       	call   f01003be <_warn>
f01161b3:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01161b6:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f01161ba:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01161c0:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01161c3:	74 28                	je     f01161ed <test_calculate_allocated_space+0x780>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f01161c5:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01161cb:	83 ec 0c             	sub    $0xc,%esp
f01161ce:	ff 75 c4             	pushl  -0x3c(%ebp)
f01161d1:	50                   	push   %eax
f01161d2:	68 8c 8d 13 f0       	push   $0xf0138d8c
f01161d7:	68 db 06 00 00       	push   $0x6db
f01161dc:	68 7a 73 13 f0       	push   $0xf013737a
f01161e1:	e8 d8 a1 fe ff       	call   f01003be <_warn>
f01161e6:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01161e9:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01161ed:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01161f1:	74 04                	je     f01161f7 <test_calculate_allocated_space+0x78a>
f01161f3:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01161f7:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c2[100] ;strcconcat(aup_cmd, " 0x100000", c2); execute_command(c2);
f01161fb:	83 ec 04             	sub    $0x4,%esp
f01161fe:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0116204:	50                   	push   %eax
f0116205:	68 f3 7a 13 f0       	push   $0xf0137af3
f011620a:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0116210:	50                   	push   %eax
f0116211:	e8 c5 91 01 00       	call   f012f3db <strcconcat>
f0116216:	83 c4 10             	add    $0x10,%esp
f0116219:	83 ec 0c             	sub    $0xc,%esp
f011621c:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0116222:	50                   	push   %eax
f0116223:	e8 9b b9 fe ff       	call   f0101bc3 <execute_command>
f0116228:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x10000000", c3); execute_command(c3);
f011622b:	83 ec 04             	sub    $0x4,%esp
f011622e:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0116234:	50                   	push   %eax
f0116235:	68 80 8c 13 f0       	push   $0xf0138c80
f011623a:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0116240:	50                   	push   %eax
f0116241:	e8 95 91 01 00       	call   f012f3db <strcconcat>
f0116246:	83 c4 10             	add    $0x10,%esp
f0116249:	83 ec 0c             	sub    $0xc,%esp
f011624c:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0116252:	50                   	push   %eax
f0116253:	e8 6b b9 fe ff       	call   f0101bc3 <execute_command>
f0116258:	83 c4 10             	add    $0x10,%esp

		//Test2
		num_tables = 0;
f011625b:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0116262:	00 00 00 
		num_pages = 0;
f0116265:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f011626c:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+8*mega, &num_tables, &num_pages);
f011626f:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0116272:	c1 e0 03             	shl    $0x3,%eax
f0116275:	89 c2                	mov    %eax,%edx
f0116277:	83 ec 0c             	sub    $0xc,%esp
f011627a:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0116280:	50                   	push   %eax
f0116281:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0116287:	50                   	push   %eax
f0116288:	52                   	push   %edx
f0116289:	6a 00                	push   $0x0
f011628b:	ff 75 d8             	pushl  -0x28(%ebp)
f011628e:	e8 62 29 ff ff       	call   f0108bf5 <calculate_allocated_space>
f0116293:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1 ;
f0116296:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 2 ;
f011629d:	c7 45 c4 02 00 00 00 	movl   $0x2,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f01162a4:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01162aa:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f01162ad:	74 28                	je     f01162d7 <test_calculate_allocated_space+0x86a>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f01162af:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01162b5:	83 ec 0c             	sub    $0xc,%esp
f01162b8:	ff 75 c8             	pushl  -0x38(%ebp)
f01162bb:	50                   	push   %eax
f01162bc:	68 2c 8d 13 f0       	push   $0xf0138d2c
f01162c1:	68 ec 06 00 00       	push   $0x6ec
f01162c6:	68 7a 73 13 f0       	push   $0xf013737a
f01162cb:	e8 ee a0 fe ff       	call   f01003be <_warn>
f01162d0:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01162d3:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f01162d7:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01162dd:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01162e0:	74 28                	je     f011630a <test_calculate_allocated_space+0x89d>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f01162e2:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01162e8:	83 ec 0c             	sub    $0xc,%esp
f01162eb:	ff 75 c4             	pushl  -0x3c(%ebp)
f01162ee:	50                   	push   %eax
f01162ef:	68 8c 8d 13 f0       	push   $0xf0138d8c
f01162f4:	68 f1 06 00 00       	push   $0x6f1
f01162f9:	68 7a 73 13 f0       	push   $0xf013737a
f01162fe:	e8 bb a0 fe ff       	call   f01003be <_warn>
f0116303:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116306:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011630a:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011630e:	74 04                	je     f0116314 <test_calculate_allocated_space+0x8a7>
f0116310:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0116314:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		num_tables = 0;
f0116318:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f011631f:	00 00 00 
		num_pages = 0;
f0116322:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0116329:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+1024*mega, &num_tables, &num_pages);
f011632c:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011632f:	c1 e0 0a             	shl    $0xa,%eax
f0116332:	89 c2                	mov    %eax,%edx
f0116334:	83 ec 0c             	sub    $0xc,%esp
f0116337:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f011633d:	50                   	push   %eax
f011633e:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0116344:	50                   	push   %eax
f0116345:	52                   	push   %edx
f0116346:	6a 00                	push   $0x0
f0116348:	ff 75 d8             	pushl  -0x28(%ebp)
f011634b:	e8 a5 28 ff ff       	call   f0108bf5 <calculate_allocated_space>
f0116350:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1 + 1;
f0116353:	c7 45 c8 02 00 00 00 	movl   $0x2,-0x38(%ebp)
		expected_num_pages = 1 + 1 + 1;
f011635a:	c7 45 c4 03 00 00 00 	movl   $0x3,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0116361:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0116367:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f011636a:	74 28                	je     f0116394 <test_calculate_allocated_space+0x927>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f011636c:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0116372:	83 ec 0c             	sub    $0xc,%esp
f0116375:	ff 75 c8             	pushl  -0x38(%ebp)
f0116378:	50                   	push   %eax
f0116379:	68 2c 8d 13 f0       	push   $0xf0138d2c
f011637e:	68 ff 06 00 00       	push   $0x6ff
f0116383:	68 7a 73 13 f0       	push   $0xf013737a
f0116388:	e8 31 a0 fe ff       	call   f01003be <_warn>
f011638d:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116390:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0116394:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011639a:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011639d:	74 28                	je     f01163c7 <test_calculate_allocated_space+0x95a>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f011639f:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01163a5:	83 ec 0c             	sub    $0xc,%esp
f01163a8:	ff 75 c4             	pushl  -0x3c(%ebp)
f01163ab:	50                   	push   %eax
f01163ac:	68 8c 8d 13 f0       	push   $0xf0138d8c
f01163b1:	68 04 07 00 00       	push   $0x704
f01163b6:	68 7a 73 13 f0       	push   $0xf013737a
f01163bb:	e8 fe 9f fe ff       	call   f01003be <_warn>
f01163c0:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01163c3:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f01163c7:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01163cb:	74 04                	je     f01163d1 <test_calculate_allocated_space+0x964>
f01163cd:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01163d1:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x2000", c3); execute_command(c3);
f01163d5:	83 ec 04             	sub    $0x4,%esp
f01163d8:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f01163de:	50                   	push   %eax
f01163df:	68 8c 8c 13 f0       	push   $0xf0138c8c
f01163e4:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01163ea:	50                   	push   %eax
f01163eb:	e8 eb 8f 01 00       	call   f012f3db <strcconcat>
f01163f0:	83 c4 10             	add    $0x10,%esp
f01163f3:	83 ec 0c             	sub    $0xc,%esp
f01163f6:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f01163fc:	50                   	push   %eax
f01163fd:	e8 c1 b7 fe ff       	call   f0101bc3 <execute_command>
f0116402:	83 c4 10             	add    $0x10,%esp

		//Test4
		num_tables = 0;
f0116405:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f011640c:	00 00 00 
		num_pages = 0;
f011640f:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0116416:	00 00 00 
		calculate_allocated_space(proc_directory, 0x1800, 0x1800+3*kilo, &num_tables, &num_pages);
f0116419:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011641c:	89 c2                	mov    %eax,%edx
f011641e:	01 d2                	add    %edx,%edx
f0116420:	01 d0                	add    %edx,%eax
f0116422:	05 00 18 00 00       	add    $0x1800,%eax
f0116427:	89 c2                	mov    %eax,%edx
f0116429:	83 ec 0c             	sub    $0xc,%esp
f011642c:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0116432:	50                   	push   %eax
f0116433:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0116439:	50                   	push   %eax
f011643a:	52                   	push   %edx
f011643b:	68 00 18 00 00       	push   $0x1800
f0116440:	ff 75 d8             	pushl  -0x28(%ebp)
f0116443:	e8 ad 27 ff ff       	call   f0108bf5 <calculate_allocated_space>
f0116448:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f011644b:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 1;
f0116452:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0116459:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011645f:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0116462:	74 28                	je     f011648c <test_calculate_allocated_space+0xa1f>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0116464:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011646a:	83 ec 0c             	sub    $0xc,%esp
f011646d:	ff 75 c8             	pushl  -0x38(%ebp)
f0116470:	50                   	push   %eax
f0116471:	68 2c 8d 13 f0       	push   $0xf0138d2c
f0116476:	68 15 07 00 00       	push   $0x715
f011647b:	68 7a 73 13 f0       	push   $0xf013737a
f0116480:	e8 39 9f fe ff       	call   f01003be <_warn>
f0116485:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116488:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f011648c:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116492:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0116495:	74 28                	je     f01164bf <test_calculate_allocated_space+0xa52>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0116497:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011649d:	83 ec 0c             	sub    $0xc,%esp
f01164a0:	ff 75 c4             	pushl  -0x3c(%ebp)
f01164a3:	50                   	push   %eax
f01164a4:	68 8c 8d 13 f0       	push   $0xf0138d8c
f01164a9:	68 1a 07 00 00       	push   $0x71a
f01164ae:	68 7a 73 13 f0       	push   $0xf013737a
f01164b3:	e8 06 9f fe ff       	call   f01003be <_warn>
f01164b8:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01164bb:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01164bf:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01164c3:	74 04                	je     f01164c9 <test_calculate_allocated_space+0xa5c>
f01164c5:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01164c9:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x800000", c4); execute_command(c4);
f01164cd:	83 ec 04             	sub    $0x4,%esp
f01164d0:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f01164d6:	50                   	push   %eax
f01164d7:	68 4c 7d 13 f0       	push   $0xf0137d4c
f01164dc:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01164e2:	50                   	push   %eax
f01164e3:	e8 f3 8e 01 00       	call   f012f3db <strcconcat>
f01164e8:	83 c4 10             	add    $0x10,%esp
f01164eb:	83 ec 0c             	sub    $0xc,%esp
f01164ee:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f01164f4:	50                   	push   %eax
f01164f5:	e8 c9 b6 fe ff       	call   f0101bc3 <execute_command>
f01164fa:	83 c4 10             	add    $0x10,%esp

		//Test5
		num_tables = 0;
f01164fd:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0116504:	00 00 00 
		num_pages = 0;
f0116507:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f011650e:	00 00 00 
		calculate_allocated_space(proc_directory, 0x400000, 0x400000+10*mega, &num_tables, &num_pages);
f0116511:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0116514:	89 d0                	mov    %edx,%eax
f0116516:	c1 e0 02             	shl    $0x2,%eax
f0116519:	01 d0                	add    %edx,%eax
f011651b:	01 c0                	add    %eax,%eax
f011651d:	05 00 00 40 00       	add    $0x400000,%eax
f0116522:	89 c2                	mov    %eax,%edx
f0116524:	83 ec 0c             	sub    $0xc,%esp
f0116527:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f011652d:	50                   	push   %eax
f011652e:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0116534:	50                   	push   %eax
f0116535:	52                   	push   %edx
f0116536:	68 00 00 40 00       	push   $0x400000
f011653b:	ff 75 d8             	pushl  -0x28(%ebp)
f011653e:	e8 b2 26 ff ff       	call   f0108bf5 <calculate_allocated_space>
f0116543:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f0116546:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 1;
f011654d:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0116554:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011655a:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f011655d:	74 28                	je     f0116587 <test_calculate_allocated_space+0xb1a>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f011655f:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0116565:	83 ec 0c             	sub    $0xc,%esp
f0116568:	ff 75 c8             	pushl  -0x38(%ebp)
f011656b:	50                   	push   %eax
f011656c:	68 2c 8d 13 f0       	push   $0xf0138d2c
f0116571:	68 2a 07 00 00       	push   $0x72a
f0116576:	68 7a 73 13 f0       	push   $0xf013737a
f011657b:	e8 3e 9e fe ff       	call   f01003be <_warn>
f0116580:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116583:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0116587:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011658d:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0116590:	74 28                	je     f01165ba <test_calculate_allocated_space+0xb4d>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0116592:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116598:	83 ec 0c             	sub    $0xc,%esp
f011659b:	ff 75 c4             	pushl  -0x3c(%ebp)
f011659e:	50                   	push   %eax
f011659f:	68 8c 8d 13 f0       	push   $0xf0138d8c
f01165a4:	68 2f 07 00 00       	push   $0x72f
f01165a9:	68 7a 73 13 f0       	push   $0xf013737a
f01165ae:	e8 0b 9e fe ff       	call   f01003be <_warn>
f01165b3:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01165b6:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01165ba:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01165be:	74 04                	je     f01165c4 <test_calculate_allocated_space+0xb57>
f01165c0:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01165c4:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x801000", c3); execute_command(c3);
f01165c8:	83 ec 04             	sub    $0x4,%esp
f01165cb:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f01165d1:	50                   	push   %eax
f01165d2:	68 56 7d 13 f0       	push   $0xf0137d56
f01165d7:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01165dd:	50                   	push   %eax
f01165de:	e8 f8 8d 01 00       	call   f012f3db <strcconcat>
f01165e3:	83 c4 10             	add    $0x10,%esp
f01165e6:	83 ec 0c             	sub    $0xc,%esp
f01165e9:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f01165ef:	50                   	push   %eax
f01165f0:	e8 ce b5 fe ff       	call   f0101bc3 <execute_command>
f01165f5:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x810000", c4); execute_command(c4);
f01165f8:	83 ec 04             	sub    $0x4,%esp
f01165fb:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0116601:	50                   	push   %eax
f0116602:	68 94 8c 13 f0       	push   $0xf0138c94
f0116607:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f011660d:	50                   	push   %eax
f011660e:	e8 c8 8d 01 00       	call   f012f3db <strcconcat>
f0116613:	83 c4 10             	add    $0x10,%esp
f0116616:	83 ec 0c             	sub    $0xc,%esp
f0116619:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f011661f:	50                   	push   %eax
f0116620:	e8 9e b5 fe ff       	call   f0101bc3 <execute_command>
f0116625:	83 c4 10             	add    $0x10,%esp

		//Test6
		num_tables = 0;
f0116628:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f011662f:	00 00 00 
		num_pages = 0;
f0116632:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0116639:	00 00 00 
		calculate_allocated_space(proc_directory, 0x700000, 0x700000+2*mega, &num_tables, &num_pages);
f011663c:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011663f:	05 00 00 38 00       	add    $0x380000,%eax
f0116644:	01 c0                	add    %eax,%eax
f0116646:	89 c2                	mov    %eax,%edx
f0116648:	83 ec 0c             	sub    $0xc,%esp
f011664b:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0116651:	50                   	push   %eax
f0116652:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0116658:	50                   	push   %eax
f0116659:	52                   	push   %edx
f011665a:	68 00 00 70 00       	push   $0x700000
f011665f:	ff 75 d8             	pushl  -0x28(%ebp)
f0116662:	e8 8e 25 ff ff       	call   f0108bf5 <calculate_allocated_space>
f0116667:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f011666a:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 3;
f0116671:	c7 45 c4 03 00 00 00 	movl   $0x3,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0116678:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011667e:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0116681:	74 28                	je     f01166ab <test_calculate_allocated_space+0xc3e>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0116683:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0116689:	83 ec 0c             	sub    $0xc,%esp
f011668c:	ff 75 c8             	pushl  -0x38(%ebp)
f011668f:	50                   	push   %eax
f0116690:	68 2c 8d 13 f0       	push   $0xf0138d2c
f0116695:	68 41 07 00 00       	push   $0x741
f011669a:	68 7a 73 13 f0       	push   $0xf013737a
f011669f:	e8 1a 9d fe ff       	call   f01003be <_warn>
f01166a4:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01166a7:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f01166ab:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01166b1:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01166b4:	74 28                	je     f01166de <test_calculate_allocated_space+0xc71>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f01166b6:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01166bc:	83 ec 0c             	sub    $0xc,%esp
f01166bf:	ff 75 c4             	pushl  -0x3c(%ebp)
f01166c2:	50                   	push   %eax
f01166c3:	68 8c 8d 13 f0       	push   $0xf0138d8c
f01166c8:	68 46 07 00 00       	push   $0x746
f01166cd:	68 7a 73 13 f0       	push   $0xf013737a
f01166d2:	e8 e7 9c fe ff       	call   f01003be <_warn>
f01166d7:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01166da:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f01166de:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01166e2:	74 04                	je     f01166e8 <test_calculate_allocated_space+0xc7b>
f01166e4:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01166e8:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test7
		num_tables = 0;
f01166ec:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01166f3:	00 00 00 
		num_pages = 0;
f01166f6:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01166fd:	00 00 00 
		calculate_allocated_space(proc_directory, 0x3FFFFF, 0x3FFFFF+1*kilo, &num_tables, &num_pages);
f0116700:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0116703:	05 ff ff 3f 00       	add    $0x3fffff,%eax
f0116708:	89 c2                	mov    %eax,%edx
f011670a:	83 ec 0c             	sub    $0xc,%esp
f011670d:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0116713:	50                   	push   %eax
f0116714:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f011671a:	50                   	push   %eax
f011671b:	52                   	push   %edx
f011671c:	68 ff ff 3f 00       	push   $0x3fffff
f0116721:	ff 75 d8             	pushl  -0x28(%ebp)
f0116724:	e8 cc 24 ff ff       	call   f0108bf5 <calculate_allocated_space>
f0116729:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f011672c:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 0;
f0116733:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f011673a:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0116740:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0116743:	74 28                	je     f011676d <test_calculate_allocated_space+0xd00>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0116745:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011674b:	83 ec 0c             	sub    $0xc,%esp
f011674e:	ff 75 c8             	pushl  -0x38(%ebp)
f0116751:	50                   	push   %eax
f0116752:	68 2c 8d 13 f0       	push   $0xf0138d2c
f0116757:	68 54 07 00 00       	push   $0x754
f011675c:	68 7a 73 13 f0       	push   $0xf013737a
f0116761:	e8 58 9c fe ff       	call   f01003be <_warn>
f0116766:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116769:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f011676d:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116773:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0116776:	74 28                	je     f01167a0 <test_calculate_allocated_space+0xd33>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0116778:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011677e:	83 ec 0c             	sub    $0xc,%esp
f0116781:	ff 75 c4             	pushl  -0x3c(%ebp)
f0116784:	50                   	push   %eax
f0116785:	68 8c 8d 13 f0       	push   $0xf0138d8c
f011678a:	68 59 07 00 00       	push   $0x759
f011678f:	68 7a 73 13 f0       	push   $0xf013737a
f0116794:	e8 25 9c fe ff       	call   f01003be <_warn>
f0116799:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011679c:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f01167a0:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01167a4:	74 04                	je     f01167aa <test_calculate_allocated_space+0xd3d>
f01167a6:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01167aa:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE II: END\n") ;
f01167ae:	83 ec 0c             	sub    $0xc,%esp
f01167b1:	68 07 7d 13 f0       	push   $0xf0137d07
f01167b6:	e8 76 a6 fe ff       	call   f0100e31 <cprintf>
f01167bb:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] calculate_allocated_space: FINISHED. Evaluation = %d\n", eval);
f01167be:	83 ec 08             	sub    $0x8,%esp
f01167c1:	ff 75 e4             	pushl  -0x1c(%ebp)
f01167c4:	68 e8 8d 13 f0       	push   $0xf0138de8
f01167c9:	e8 63 a6 fe ff       	call   f0100e31 <cprintf>
f01167ce:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f01167d1:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f01167d5:	75 10                	jne    f01167e7 <test_calculate_allocated_space+0xd7a>
		cprintf("Congratulations!! test calculate_allocated_space completed successfully.\n");
f01167d7:	83 ec 0c             	sub    $0xc,%esp
f01167da:	68 28 8e 13 f0       	push   $0xf0138e28
f01167df:	e8 4d a6 fe ff       	call   f0100e31 <cprintf>
f01167e4:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f01167e7:	a1 70 be 2b f0       	mov    0xf02bbe70,%eax
f01167ec:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f01167ef:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01167f2:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f01167f5:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01167fa:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01167fd:	5b                   	pop    %ebx
f01167fe:	5e                   	pop    %esi
f01167ff:	5f                   	pop    %edi
f0116800:	5d                   	pop    %ebp
f0116801:	c3                   	ret    

f0116802 <CB>:
//===========================================================================
//===========================================================================
//===========================================================================

int CB(uint32 *ptr_dir, uint32 va, int bn)
{
f0116802:	55                   	push   %ebp
f0116803:	89 e5                	mov    %esp,%ebp
f0116805:	83 ec 18             	sub    $0x18,%esp
	//assert(USE_KHEAP == 0) ;
	uint32 mask = 1<<bn;
f0116808:	8b 45 10             	mov    0x10(%ebp),%eax
f011680b:	ba 01 00 00 00       	mov    $0x1,%edx
f0116810:	88 c1                	mov    %al,%cl
f0116812:	d3 e2                	shl    %cl,%edx
f0116814:	89 d0                	mov    %edx,%eax
f0116816:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f0116819:	8b 45 0c             	mov    0xc(%ebp),%eax
f011681c:	c1 e8 16             	shr    $0x16,%eax
f011681f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116826:	8b 45 08             	mov    0x8(%ebp),%eax
f0116829:	01 d0                	add    %edx,%eax
f011682b:	8b 00                	mov    (%eax),%eax
f011682d:	83 e0 01             	and    $0x1,%eax
f0116830:	85 c0                	test   %eax,%eax
f0116832:	75 07                	jne    f011683b <CB+0x39>
f0116834:	b8 00 00 00 00       	mov    $0x0,%eax
f0116839:	eb 76                	jmp    f01168b1 <CB+0xaf>
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f011683b:	8b 45 0c             	mov    0xc(%ebp),%eax
f011683e:	c1 e8 16             	shr    $0x16,%eax
f0116841:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116848:	8b 45 08             	mov    0x8(%ebp),%eax
f011684b:	01 d0                	add    %edx,%eax
f011684d:	8b 00                	mov    (%eax),%eax
f011684f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0116854:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0116857:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011685a:	c1 e8 0c             	shr    $0xc,%eax
f011685d:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0116860:	a1 d0 bd 2b f0       	mov    0xf02bbdd0,%eax
f0116865:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0116868:	72 17                	jb     f0116881 <CB+0x7f>
f011686a:	ff 75 f0             	pushl  -0x10(%ebp)
f011686d:	68 74 8e 13 f0       	push   $0xf0138e74
f0116872:	68 74 07 00 00       	push   $0x774
f0116877:	68 7a 73 13 f0       	push   $0xf013737a
f011687c:	e8 2f 99 fe ff       	call   f01001b0 <_panic>
f0116881:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0116884:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0116889:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return ((table[((((uint32) (va)) >> 12) & 0x3FF)]&mask) == mask)? 1 : 0 ;
f011688c:	8b 45 0c             	mov    0xc(%ebp),%eax
f011688f:	c1 e8 0c             	shr    $0xc,%eax
f0116892:	25 ff 03 00 00       	and    $0x3ff,%eax
f0116897:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011689e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01168a1:	01 d0                	add    %edx,%eax
f01168a3:	8b 00                	mov    (%eax),%eax
f01168a5:	23 45 f4             	and    -0xc(%ebp),%eax
f01168a8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01168ab:	0f 94 c0             	sete   %al
f01168ae:	0f b6 c0             	movzbl %al,%eax
}
f01168b1:	c9                   	leave  
f01168b2:	c3                   	ret    

f01168b3 <SB>:
int SB(uint32 *ptr_dir, uint32 va, int bn , int v)
{
f01168b3:	55                   	push   %ebp
f01168b4:	89 e5                	mov    %esp,%ebp
f01168b6:	83 ec 18             	sub    $0x18,%esp
	assert(USE_KHEAP == 0) ;
	uint32 mask = 1<<bn;
f01168b9:	8b 45 10             	mov    0x10(%ebp),%eax
f01168bc:	ba 01 00 00 00       	mov    $0x1,%edx
f01168c1:	88 c1                	mov    %al,%cl
f01168c3:	d3 e2                	shl    %cl,%edx
f01168c5:	89 d0                	mov    %edx,%eax
f01168c7:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f01168ca:	8b 45 0c             	mov    0xc(%ebp),%eax
f01168cd:	c1 e8 16             	shr    $0x16,%eax
f01168d0:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01168d7:	8b 45 08             	mov    0x8(%ebp),%eax
f01168da:	01 d0                	add    %edx,%eax
f01168dc:	8b 00                	mov    (%eax),%eax
f01168de:	83 e0 01             	and    $0x1,%eax
f01168e1:	85 c0                	test   %eax,%eax
f01168e3:	75 0a                	jne    f01168ef <SB+0x3c>
f01168e5:	b8 00 00 00 00       	mov    $0x0,%eax
f01168ea:	e9 cd 00 00 00       	jmp    f01169bc <SB+0x109>
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f01168ef:	8b 45 0c             	mov    0xc(%ebp),%eax
f01168f2:	c1 e8 16             	shr    $0x16,%eax
f01168f5:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01168fc:	8b 45 08             	mov    0x8(%ebp),%eax
f01168ff:	01 d0                	add    %edx,%eax
f0116901:	8b 00                	mov    (%eax),%eax
f0116903:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0116908:	89 45 f0             	mov    %eax,-0x10(%ebp)
f011690b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011690e:	c1 e8 0c             	shr    $0xc,%eax
f0116911:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0116914:	a1 d0 bd 2b f0       	mov    0xf02bbdd0,%eax
f0116919:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f011691c:	72 17                	jb     f0116935 <SB+0x82>
f011691e:	ff 75 f0             	pushl  -0x10(%ebp)
f0116921:	68 74 8e 13 f0       	push   $0xf0138e74
f0116926:	68 7c 07 00 00       	push   $0x77c
f011692b:	68 7a 73 13 f0       	push   $0xf013737a
f0116930:	e8 7b 98 fe ff       	call   f01001b0 <_panic>
f0116935:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0116938:	2d 00 00 00 10       	sub    $0x10000000,%eax
f011693d:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (~v) table[((((uint32) (va)) >> 12) & 0x3FF)] &= ~mask ;
f0116940:	83 7d 14 ff          	cmpl   $0xffffffff,0x14(%ebp)
f0116944:	74 3c                	je     f0116982 <SB+0xcf>
f0116946:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116949:	c1 e8 0c             	shr    $0xc,%eax
f011694c:	25 ff 03 00 00       	and    $0x3ff,%eax
f0116951:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116958:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011695b:	01 d0                	add    %edx,%eax
f011695d:	8b 55 0c             	mov    0xc(%ebp),%edx
f0116960:	c1 ea 0c             	shr    $0xc,%edx
f0116963:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0116969:	8d 0c 95 00 00 00 00 	lea    0x0(,%edx,4),%ecx
f0116970:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0116973:	01 ca                	add    %ecx,%edx
f0116975:	8b 12                	mov    (%edx),%edx
f0116977:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f011697a:	f7 d1                	not    %ecx
f011697c:	21 ca                	and    %ecx,%edx
f011697e:	89 10                	mov    %edx,(%eax)
f0116980:	eb 35                	jmp    f01169b7 <SB+0x104>
	else 	table[((((uint32) (va)) >> 12) & 0x3FF)] |= mask ;
f0116982:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116985:	c1 e8 0c             	shr    $0xc,%eax
f0116988:	25 ff 03 00 00       	and    $0x3ff,%eax
f011698d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116994:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0116997:	01 c2                	add    %eax,%edx
f0116999:	8b 45 0c             	mov    0xc(%ebp),%eax
f011699c:	c1 e8 0c             	shr    $0xc,%eax
f011699f:	25 ff 03 00 00       	and    $0x3ff,%eax
f01169a4:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f01169ab:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01169ae:	01 c8                	add    %ecx,%eax
f01169b0:	8b 00                	mov    (%eax),%eax
f01169b2:	0b 45 f4             	or     -0xc(%ebp),%eax
f01169b5:	89 02                	mov    %eax,(%edx)
	return 0;
f01169b7:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01169bc:	c9                   	leave  
f01169bd:	c3                   	ret    

f01169be <CPs>:
int CPs(uint32 *ptr_dir, uint32 va, uint32 perms, uint32 which)
{
f01169be:	55                   	push   %ebp
f01169bf:	89 e5                	mov    %esp,%ebp
f01169c1:	83 ec 28             	sub    $0x28,%esp
	assert(USE_KHEAP == 0) ;
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f01169c4:	8b 45 0c             	mov    0xc(%ebp),%eax
f01169c7:	c1 e8 16             	shr    $0x16,%eax
f01169ca:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01169d1:	8b 45 08             	mov    0x8(%ebp),%eax
f01169d4:	01 d0                	add    %edx,%eax
f01169d6:	8b 00                	mov    (%eax),%eax
f01169d8:	83 e0 01             	and    $0x1,%eax
f01169db:	85 c0                	test   %eax,%eax
f01169dd:	75 0a                	jne    f01169e9 <CPs+0x2b>
f01169df:	b8 00 00 00 00       	mov    $0x0,%eax
f01169e4:	e9 b8 00 00 00       	jmp    f0116aa1 <CPs+0xe3>
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f01169e9:	8b 45 0c             	mov    0xc(%ebp),%eax
f01169ec:	c1 e8 16             	shr    $0x16,%eax
f01169ef:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01169f6:	8b 45 08             	mov    0x8(%ebp),%eax
f01169f9:	01 d0                	add    %edx,%eax
f01169fb:	8b 00                	mov    (%eax),%eax
f01169fd:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0116a02:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0116a05:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0116a08:	c1 e8 0c             	shr    $0xc,%eax
f0116a0b:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0116a0e:	a1 d0 bd 2b f0       	mov    0xf02bbdd0,%eax
f0116a13:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0116a16:	72 17                	jb     f0116a2f <CPs+0x71>
f0116a18:	ff 75 f0             	pushl  -0x10(%ebp)
f0116a1b:	68 74 8e 13 f0       	push   $0xf0138e74
f0116a20:	68 85 07 00 00       	push   $0x785
f0116a25:	68 7a 73 13 f0       	push   $0xf013737a
f0116a2a:	e8 81 97 fe ff       	call   f01001b0 <_panic>
f0116a2f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0116a32:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0116a37:	89 45 e8             	mov    %eax,-0x18(%ebp)
	for (int i = 0 ; i < 12 ; i++)
f0116a3a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0116a41:	eb 53                	jmp    f0116a96 <CPs+0xd8>
	{
		uint32 mask = 1<<i;
f0116a43:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0116a46:	ba 01 00 00 00       	mov    $0x1,%edx
f0116a4b:	88 c1                	mov    %al,%cl
f0116a4d:	d3 e2                	shl    %cl,%edx
f0116a4f:	89 d0                	mov    %edx,%eax
f0116a51:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		if (!(which & mask))	continue ;
f0116a54:	8b 45 14             	mov    0x14(%ebp),%eax
f0116a57:	23 45 e4             	and    -0x1c(%ebp),%eax
f0116a5a:	85 c0                	test   %eax,%eax
f0116a5c:	74 34                	je     f0116a92 <CPs+0xd4>
		uint8 c = (table[((((uint32) (va)) >> 12) & 0x3FF)] & mask) == (perms & mask) ? 1 :  0;
f0116a5e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116a61:	c1 e8 0c             	shr    $0xc,%eax
f0116a64:	25 ff 03 00 00       	and    $0x3ff,%eax
f0116a69:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116a70:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0116a73:	01 d0                	add    %edx,%eax
f0116a75:	8b 00                	mov    (%eax),%eax
f0116a77:	33 45 10             	xor    0x10(%ebp),%eax
f0116a7a:	23 45 e4             	and    -0x1c(%ebp),%eax
f0116a7d:	85 c0                	test   %eax,%eax
f0116a7f:	0f 94 c0             	sete   %al
f0116a82:	88 45 e3             	mov    %al,-0x1d(%ebp)
		if (!c) return 0;
f0116a85:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0116a89:	75 08                	jne    f0116a93 <CPs+0xd5>
f0116a8b:	b8 00 00 00 00       	mov    $0x0,%eax
f0116a90:	eb 0f                	jmp    f0116aa1 <CPs+0xe3>
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
	for (int i = 0 ; i < 12 ; i++)
	{
		uint32 mask = 1<<i;
		if (!(which & mask))	continue ;
f0116a92:	90                   	nop
int CPs(uint32 *ptr_dir, uint32 va, uint32 perms, uint32 which)
{
	assert(USE_KHEAP == 0) ;
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
	for (int i = 0 ; i < 12 ; i++)
f0116a93:	ff 45 f4             	incl   -0xc(%ebp)
f0116a96:	83 7d f4 0b          	cmpl   $0xb,-0xc(%ebp)
f0116a9a:	7e a7                	jle    f0116a43 <CPs+0x85>
		uint32 mask = 1<<i;
		if (!(which & mask))	continue ;
		uint8 c = (table[((((uint32) (va)) >> 12) & 0x3FF)] & mask) == (perms & mask) ? 1 :  0;
		if (!c) return 0;
	}
	return 1;
f0116a9c:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0116aa1:	c9                   	leave  
f0116aa2:	c3                   	ret    

f0116aa3 <CA>:

int CA(uint32 *ptr_dir, uint32 va)
{
f0116aa3:	55                   	push   %ebp
f0116aa4:	89 e5                	mov    %esp,%ebp
f0116aa6:	83 ec 18             	sub    $0x18,%esp
	assert(USE_KHEAP == 0) ;
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f0116aa9:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116aac:	c1 e8 16             	shr    $0x16,%eax
f0116aaf:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116ab6:	8b 45 08             	mov    0x8(%ebp),%eax
f0116ab9:	01 d0                	add    %edx,%eax
f0116abb:	8b 00                	mov    (%eax),%eax
f0116abd:	83 e0 01             	and    $0x1,%eax
f0116ac0:	85 c0                	test   %eax,%eax
f0116ac2:	75 07                	jne    f0116acb <CA+0x28>
f0116ac4:	b8 00 00 00 00       	mov    $0x0,%eax
f0116ac9:	eb 6f                	jmp    f0116b3a <CA+0x97>
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f0116acb:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116ace:	c1 e8 16             	shr    $0x16,%eax
f0116ad1:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116ad8:	8b 45 08             	mov    0x8(%ebp),%eax
f0116adb:	01 d0                	add    %edx,%eax
f0116add:	8b 00                	mov    (%eax),%eax
f0116adf:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0116ae4:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0116ae7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0116aea:	c1 e8 0c             	shr    $0xc,%eax
f0116aed:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0116af0:	a1 d0 bd 2b f0       	mov    0xf02bbdd0,%eax
f0116af5:	39 45 f0             	cmp    %eax,-0x10(%ebp)
f0116af8:	72 17                	jb     f0116b11 <CA+0x6e>
f0116afa:	ff 75 f4             	pushl  -0xc(%ebp)
f0116afd:	68 74 8e 13 f0       	push   $0xf0138e74
f0116b02:	68 94 07 00 00       	push   $0x794
f0116b07:	68 7a 73 13 f0       	push   $0xf013737a
f0116b0c:	e8 9f 96 fe ff       	call   f01001b0 <_panic>
f0116b11:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0116b14:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0116b19:	89 45 ec             	mov    %eax,-0x14(%ebp)
	return table[((((uint32) (va)) >> 12) & 0x3FF)]&~0x00000FFF;
f0116b1c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116b1f:	c1 e8 0c             	shr    $0xc,%eax
f0116b22:	25 ff 03 00 00       	and    $0x3ff,%eax
f0116b27:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116b2e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0116b31:	01 d0                	add    %edx,%eax
f0116b33:	8b 00                	mov    (%eax),%eax
f0116b35:	25 00 f0 ff ff       	and    $0xfffff000,%eax
}
f0116b3a:	c9                   	leave  
f0116b3b:	c3                   	ret    

f0116b3c <CE>:

int CE(uint32 *_d, uint32 va)
{
f0116b3c:	55                   	push   %ebp
f0116b3d:	89 e5                	mov    %esp,%ebp
f0116b3f:	83 ec 18             	sub    $0x18,%esp
	if (!(_d[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f0116b42:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116b45:	c1 e8 16             	shr    $0x16,%eax
f0116b48:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116b4f:	8b 45 08             	mov    0x8(%ebp),%eax
f0116b52:	01 d0                	add    %edx,%eax
f0116b54:	8b 00                	mov    (%eax),%eax
f0116b56:	83 e0 01             	and    $0x1,%eax
f0116b59:	85 c0                	test   %eax,%eax
f0116b5b:	75 07                	jne    f0116b64 <CE+0x28>
f0116b5d:	b8 00 00 00 00       	mov    $0x0,%eax
f0116b62:	eb 7a                	jmp    f0116bde <CE+0xa2>
	uint32 *_t = (STATIC_KERNEL_VIRTUAL_ADDRESS(_d[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f0116b64:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116b67:	c1 e8 16             	shr    $0x16,%eax
f0116b6a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116b71:	8b 45 08             	mov    0x8(%ebp),%eax
f0116b74:	01 d0                	add    %edx,%eax
f0116b76:	8b 00                	mov    (%eax),%eax
f0116b78:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0116b7d:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0116b80:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0116b83:	c1 e8 0c             	shr    $0xc,%eax
f0116b86:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0116b89:	a1 d0 bd 2b f0       	mov    0xf02bbdd0,%eax
f0116b8e:	39 45 f0             	cmp    %eax,-0x10(%ebp)
f0116b91:	72 17                	jb     f0116baa <CE+0x6e>
f0116b93:	ff 75 f4             	pushl  -0xc(%ebp)
f0116b96:	68 74 8e 13 f0       	push   $0xf0138e74
f0116b9b:	68 9b 07 00 00       	push   $0x79b
f0116ba0:	68 7a 73 13 f0       	push   $0xf013737a
f0116ba5:	e8 06 96 fe ff       	call   f01001b0 <_panic>
f0116baa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0116bad:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0116bb2:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if ((_t[((((uint32) (va)) >> 12) & 0x3FF)])!=0) return 0;
f0116bb5:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116bb8:	c1 e8 0c             	shr    $0xc,%eax
f0116bbb:	25 ff 03 00 00       	and    $0x3ff,%eax
f0116bc0:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116bc7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0116bca:	01 d0                	add    %edx,%eax
f0116bcc:	8b 00                	mov    (%eax),%eax
f0116bce:	85 c0                	test   %eax,%eax
f0116bd0:	74 07                	je     f0116bd9 <CE+0x9d>
f0116bd2:	b8 00 00 00 00       	mov    $0x0,%eax
f0116bd7:	eb 05                	jmp    f0116bde <CE+0xa2>
	return 1;
f0116bd9:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0116bde:	c9                   	leave  
f0116bdf:	c3                   	ret    

f0116be0 <CP>:

int CP(uint32* pd, uint32 va, uint32 ps, uint32 pc)
{
f0116be0:	55                   	push   %ebp
f0116be1:	89 e5                	mov    %esp,%ebp
f0116be3:	83 ec 18             	sub    $0x18,%esp
	assert(USE_KHEAP == 0) ;
	uint32 pd_entry = pd[((((uint32) (va)) >> 22) & 0x3FF)];
f0116be6:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116be9:	c1 e8 16             	shr    $0x16,%eax
f0116bec:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116bf3:	8b 45 08             	mov    0x8(%ebp),%eax
f0116bf6:	01 d0                	add    %edx,%eax
f0116bf8:	8b 00                	mov    (%eax),%eax
f0116bfa:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if ( (pd_entry & 1) == 1)
f0116bfd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0116c00:	83 e0 01             	and    $0x1,%eax
f0116c03:	85 c0                	test   %eax,%eax
f0116c05:	0f 84 92 00 00 00    	je     f0116c9d <CP+0xbd>
	{
		uint32 *t = NULL;
f0116c0b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		t = (STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(pd_entry)));
f0116c12:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0116c15:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0116c1a:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0116c1d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0116c20:	c1 e8 0c             	shr    $0xc,%eax
f0116c23:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0116c26:	a1 d0 bd 2b f0       	mov    0xf02bbdd0,%eax
f0116c2b:	39 45 e8             	cmp    %eax,-0x18(%ebp)
f0116c2e:	72 17                	jb     f0116c47 <CP+0x67>
f0116c30:	ff 75 ec             	pushl  -0x14(%ebp)
f0116c33:	68 74 8e 13 f0       	push   $0xf0138e74
f0116c38:	68 a7 07 00 00       	push   $0x7a7
f0116c3d:	68 7a 73 13 f0       	push   $0xf013737a
f0116c42:	e8 69 95 fe ff       	call   f01001b0 <_panic>
f0116c47:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0116c4a:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0116c4f:	89 45 f0             	mov    %eax,-0x10(%ebp)
		//cprintf("va =%x, ENTRY after PERM = %x, perm to set = %x, perm to clear = %x\n", va, t[PTX(va)]&0x00000FFF, ps, pc);

		if (((t[((((uint32) (va)) >> 12) & 0x3FF)]&ps) == ps)&&((~(t[((((uint32) (va)) >> 12) & 0x3FF)])&pc) == pc))
f0116c52:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116c55:	c1 e8 0c             	shr    $0xc,%eax
f0116c58:	25 ff 03 00 00       	and    $0x3ff,%eax
f0116c5d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116c64:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0116c67:	01 d0                	add    %edx,%eax
f0116c69:	8b 00                	mov    (%eax),%eax
f0116c6b:	23 45 10             	and    0x10(%ebp),%eax
f0116c6e:	3b 45 10             	cmp    0x10(%ebp),%eax
f0116c71:	75 2a                	jne    f0116c9d <CP+0xbd>
f0116c73:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116c76:	c1 e8 0c             	shr    $0xc,%eax
f0116c79:	25 ff 03 00 00       	and    $0x3ff,%eax
f0116c7e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116c85:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0116c88:	01 d0                	add    %edx,%eax
f0116c8a:	8b 00                	mov    (%eax),%eax
f0116c8c:	f7 d0                	not    %eax
f0116c8e:	23 45 14             	and    0x14(%ebp),%eax
f0116c91:	3b 45 14             	cmp    0x14(%ebp),%eax
f0116c94:	75 07                	jne    f0116c9d <CP+0xbd>
			return 1;
f0116c96:	b8 01 00 00 00       	mov    $0x1,%eax
f0116c9b:	eb 05                	jmp    f0116ca2 <CP+0xc2>
	}
	return 0;
f0116c9d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0116ca2:	c9                   	leave  
f0116ca3:	c3                   	ret    

f0116ca4 <GP>:

uint32 GP(uint32 *ptr_dir, uint32 va)
{
f0116ca4:	55                   	push   %ebp
f0116ca5:	89 e5                	mov    %esp,%ebp
f0116ca7:	83 ec 18             	sub    $0x18,%esp
	assert(USE_KHEAP == 0) ;
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f0116caa:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116cad:	c1 e8 16             	shr    $0x16,%eax
f0116cb0:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116cb7:	8b 45 08             	mov    0x8(%ebp),%eax
f0116cba:	01 d0                	add    %edx,%eax
f0116cbc:	8b 00                	mov    (%eax),%eax
f0116cbe:	83 e0 01             	and    $0x1,%eax
f0116cc1:	85 c0                	test   %eax,%eax
f0116cc3:	75 07                	jne    f0116ccc <GP+0x28>
f0116cc5:	b8 00 00 00 00       	mov    $0x0,%eax
f0116cca:	eb 6f                	jmp    f0116d3b <GP+0x97>
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f0116ccc:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116ccf:	c1 e8 16             	shr    $0x16,%eax
f0116cd2:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116cd9:	8b 45 08             	mov    0x8(%ebp),%eax
f0116cdc:	01 d0                	add    %edx,%eax
f0116cde:	8b 00                	mov    (%eax),%eax
f0116ce0:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0116ce5:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0116ce8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0116ceb:	c1 e8 0c             	shr    $0xc,%eax
f0116cee:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0116cf1:	a1 d0 bd 2b f0       	mov    0xf02bbdd0,%eax
f0116cf6:	39 45 f0             	cmp    %eax,-0x10(%ebp)
f0116cf9:	72 17                	jb     f0116d12 <GP+0x6e>
f0116cfb:	ff 75 f4             	pushl  -0xc(%ebp)
f0116cfe:	68 74 8e 13 f0       	push   $0xf0138e74
f0116d03:	68 b4 07 00 00       	push   $0x7b4
f0116d08:	68 7a 73 13 f0       	push   $0xf013737a
f0116d0d:	e8 9e 94 fe ff       	call   f01001b0 <_panic>
f0116d12:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0116d15:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0116d1a:	89 45 ec             	mov    %eax,-0x14(%ebp)
	return table[((((uint32) (va)) >> 12) & 0x3FF)] & 0xFFF;
f0116d1d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116d20:	c1 e8 0c             	shr    $0xc,%eax
f0116d23:	25 ff 03 00 00       	and    $0x3ff,%eax
f0116d28:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116d2f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0116d32:	01 d0                	add    %edx,%eax
f0116d34:	8b 00                	mov    (%eax),%eax
f0116d36:	25 ff 0f 00 00       	and    $0xfff,%eax
}
f0116d3b:	c9                   	leave  
f0116d3c:	c3                   	ret    

f0116d3d <ClearUserSpace>:

void ClearUserSpace(uint32 *ptr_dir)
{
f0116d3d:	55                   	push   %ebp
f0116d3e:	89 e5                	mov    %esp,%ebp
f0116d40:	83 ec 10             	sub    $0x10,%esp
	for (int i = 0; i < PDX(USER_TOP); ++i) {
f0116d43:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0116d4a:	eb 18                	jmp    f0116d64 <ClearUserSpace+0x27>
		ptr_dir[i] = 0;
f0116d4c:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0116d4f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116d56:	8b 45 08             	mov    0x8(%ebp),%eax
f0116d59:	01 d0                	add    %edx,%eax
f0116d5b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	return table[((((uint32) (va)) >> 12) & 0x3FF)] & 0xFFF;
}

void ClearUserSpace(uint32 *ptr_dir)
{
	for (int i = 0; i < PDX(USER_TOP); ++i) {
f0116d61:	ff 45 fc             	incl   -0x4(%ebp)
f0116d64:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0116d67:	3d ba 03 00 00       	cmp    $0x3ba,%eax
f0116d6c:	76 de                	jbe    f0116d4c <ClearUserSpace+0xf>
		ptr_dir[i] = 0;
	}
}
f0116d6e:	90                   	nop
f0116d6f:	c9                   	leave  
f0116d70:	c3                   	ret    

f0116d71 <CCP>:

int CCP(uint32 *ptr_dir, uint32 ptr1, uint32 ptr2, uint32 size, int ref, uint32 dst_perms, uint32 dst_to_chk, uint32 src_perms, uint32 src_to_chk, uint8 chk_type)
{
f0116d71:	55                   	push   %ebp
f0116d72:	89 e5                	mov    %esp,%ebp
f0116d74:	83 ec 38             	sub    $0x38,%esp
f0116d77:	8b 45 2c             	mov    0x2c(%ebp),%eax
f0116d7a:	88 45 d4             	mov    %al,-0x2c(%ebp)
	void* ptrTemp1 = (void*)(ptr1 - ptr1 % (4096));
f0116d7d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116d80:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0116d85:	89 45 f4             	mov    %eax,-0xc(%ebp)
	void* ptrTemp2 = (void*)(ptr2 - ptr2 % (4096));
f0116d88:	8b 45 10             	mov    0x10(%ebp),%eax
f0116d8b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0116d90:	89 45 f0             	mov    %eax,-0x10(%ebp)

	for( ;ptrTemp2 < (void*)(ptr2+size); ptrTemp2+=PAGE_SIZE)
f0116d93:	e9 ea 01 00 00       	jmp    f0116f82 <CCP+0x211>
	{
		uint32* ptr_table1;
		uint32* ptr_table2;
		struct FrameInfo * pfi1 ;
		struct FrameInfo * pfi2 ;
		if (chk_type != CHK_ALLOC)
f0116d98:	80 7d d4 03          	cmpb   $0x3,-0x2c(%ebp)
f0116d9c:	74 44                	je     f0116de2 <CCP+0x71>
		{
			pfi1 = get_frame_info(ptr_dir, (uint32)ptrTemp1, &ptr_table1);
f0116d9e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0116da1:	83 ec 04             	sub    $0x4,%esp
f0116da4:	8d 55 dc             	lea    -0x24(%ebp),%edx
f0116da7:	52                   	push   %edx
f0116da8:	50                   	push   %eax
f0116da9:	ff 75 08             	pushl  0x8(%ebp)
f0116dac:	e8 ce 09 ff ff       	call   f010777f <get_frame_info>
f0116db1:	83 c4 10             	add    $0x10,%esp
f0116db4:	89 45 e0             	mov    %eax,-0x20(%ebp)
			if (ptr_table1 == NULL)
f0116db7:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0116dba:	85 c0                	test   %eax,%eax
f0116dbc:	75 24                	jne    f0116de2 <CCP+0x71>
			{
				warn("[EVAL] Failed. Table of address 1 = NULL\n");
f0116dbe:	83 ec 04             	sub    $0x4,%esp
f0116dc1:	68 a4 8e 13 f0       	push   $0xf0138ea4
f0116dc6:	68 cf 07 00 00       	push   $0x7cf
f0116dcb:	68 7a 73 13 f0       	push   $0xf013737a
f0116dd0:	e8 e9 95 fe ff       	call   f01003be <_warn>
f0116dd5:	83 c4 10             	add    $0x10,%esp
				return 0;
f0116dd8:	b8 00 00 00 00       	mov    $0x0,%eax
f0116ddd:	e9 b6 01 00 00       	jmp    f0116f98 <CCP+0x227>
			}
		}
		pfi2 = get_frame_info(ptr_dir, (uint32)ptrTemp2, &ptr_table2);
f0116de2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0116de5:	83 ec 04             	sub    $0x4,%esp
f0116de8:	8d 55 d8             	lea    -0x28(%ebp),%edx
f0116deb:	52                   	push   %edx
f0116dec:	50                   	push   %eax
f0116ded:	ff 75 08             	pushl  0x8(%ebp)
f0116df0:	e8 8a 09 ff ff       	call   f010777f <get_frame_info>
f0116df5:	83 c4 10             	add    $0x10,%esp
f0116df8:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if (ptr_table2 == NULL)
f0116dfb:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0116dfe:	85 c0                	test   %eax,%eax
f0116e00:	75 24                	jne    f0116e26 <CCP+0xb5>
		{
			warn("[EVAL] Failed. Table of address 2 = NULL\n");
f0116e02:	83 ec 04             	sub    $0x4,%esp
f0116e05:	68 d0 8e 13 f0       	push   $0xf0138ed0
f0116e0a:	68 d6 07 00 00       	push   $0x7d6
f0116e0f:	68 7a 73 13 f0       	push   $0xf013737a
f0116e14:	e8 a5 95 fe ff       	call   f01003be <_warn>
f0116e19:	83 c4 10             	add    $0x10,%esp
			return 0;
f0116e1c:	b8 00 00 00 00       	mov    $0x0,%eax
f0116e21:	e9 72 01 00 00       	jmp    f0116f98 <CCP+0x227>
		}
		if (chk_type == CHK_SHARE)
f0116e26:	80 7d d4 02          	cmpb   $0x2,-0x2c(%ebp)
f0116e2a:	75 70                	jne    f0116e9c <CCP+0x12b>
		{
			uint32 fn1 = ptr_table1[PTX(ptrTemp1)] >> 12 ;
f0116e2c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0116e2f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0116e32:	c1 ea 0c             	shr    $0xc,%edx
f0116e35:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0116e3b:	c1 e2 02             	shl    $0x2,%edx
f0116e3e:	01 d0                	add    %edx,%eax
f0116e40:	8b 00                	mov    (%eax),%eax
f0116e42:	c1 e8 0c             	shr    $0xc,%eax
f0116e45:	89 45 e8             	mov    %eax,-0x18(%ebp)
			uint32 fn2 = ptr_table2[PTX(ptrTemp2)] >> 12 ;
f0116e48:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0116e4b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0116e4e:	c1 ea 0c             	shr    $0xc,%edx
f0116e51:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0116e57:	c1 e2 02             	shl    $0x2,%edx
f0116e5a:	01 d0                	add    %edx,%eax
f0116e5c:	8b 00                	mov    (%eax),%eax
f0116e5e:	c1 e8 0c             	shr    $0xc,%eax
f0116e61:	89 45 e4             	mov    %eax,-0x1c(%ebp)

			if(fn1 != fn2)
f0116e64:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0116e67:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0116e6a:	74 30                	je     f0116e9c <CCP+0x12b>
			{
				warn("[EVAL] Failed. Frame numbers not equal in the whole range!\nva1=%x, va2=%x, fn1=%x, fn2=%x\n", ptrTemp1, ptrTemp2, fn1, fn2);
f0116e6c:	83 ec 04             	sub    $0x4,%esp
f0116e6f:	ff 75 e4             	pushl  -0x1c(%ebp)
f0116e72:	ff 75 e8             	pushl  -0x18(%ebp)
f0116e75:	ff 75 f0             	pushl  -0x10(%ebp)
f0116e78:	ff 75 f4             	pushl  -0xc(%ebp)
f0116e7b:	68 fc 8e 13 f0       	push   $0xf0138efc
f0116e80:	68 e0 07 00 00       	push   $0x7e0
f0116e85:	68 7a 73 13 f0       	push   $0xf013737a
f0116e8a:	e8 2f 95 fe ff       	call   f01003be <_warn>
f0116e8f:	83 c4 20             	add    $0x20,%esp
				return 0;
f0116e92:	b8 00 00 00 00       	mov    $0x0,%eax
f0116e97:	e9 fc 00 00 00       	jmp    f0116f98 <CCP+0x227>
			}
		}
		if (ref != -1)
f0116e9c:	83 7d 18 ff          	cmpl   $0xffffffff,0x18(%ebp)
f0116ea0:	74 52                	je     f0116ef4 <CCP+0x183>
		{
			if (pfi2 == NULL || (*pfi2).references != ref)
f0116ea2:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0116ea6:	74 0e                	je     f0116eb6 <CCP+0x145>
f0116ea8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0116eab:	8b 40 08             	mov    0x8(%eax),%eax
f0116eae:	0f b7 c0             	movzwl %ax,%eax
f0116eb1:	3b 45 18             	cmp    0x18(%ebp),%eax
f0116eb4:	74 3e                	je     f0116ef4 <CCP+0x183>
			{
				warn("[EVAL] Failed. Num of frame references is not correct. MAKE SURE to use the functions of LAB5! va2=%x, ref2=%d\n", ptrTemp2, pfi2==NULL? 0 : (*pfi2).references);
f0116eb6:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0116eba:	74 0b                	je     f0116ec7 <CCP+0x156>
f0116ebc:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0116ebf:	8b 40 08             	mov    0x8(%eax),%eax
f0116ec2:	0f b7 c0             	movzwl %ax,%eax
f0116ec5:	eb 05                	jmp    f0116ecc <CCP+0x15b>
f0116ec7:	b8 00 00 00 00       	mov    $0x0,%eax
f0116ecc:	83 ec 0c             	sub    $0xc,%esp
f0116ecf:	50                   	push   %eax
f0116ed0:	ff 75 f0             	pushl  -0x10(%ebp)
f0116ed3:	68 58 8f 13 f0       	push   $0xf0138f58
f0116ed8:	68 e8 07 00 00       	push   $0x7e8
f0116edd:	68 7a 73 13 f0       	push   $0xf013737a
f0116ee2:	e8 d7 94 fe ff       	call   f01003be <_warn>
f0116ee7:	83 c4 20             	add    $0x20,%esp
				return 0;
f0116eea:	b8 00 00 00 00       	mov    $0x0,%eax
f0116eef:	e9 a4 00 00 00       	jmp    f0116f98 <CCP+0x227>
			}
		}
		if (CPs(ptr_dir, (uint32)ptrTemp2, dst_perms, dst_to_chk) <= 0)
f0116ef4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0116ef7:	ff 75 20             	pushl  0x20(%ebp)
f0116efa:	ff 75 1c             	pushl  0x1c(%ebp)
f0116efd:	50                   	push   %eax
f0116efe:	ff 75 08             	pushl  0x8(%ebp)
f0116f01:	e8 b8 fa ff ff       	call   f01169be <CPs>
f0116f06:	83 c4 10             	add    $0x10,%esp
f0116f09:	85 c0                	test   %eax,%eax
f0116f0b:	7f 21                	jg     f0116f2e <CCP+0x1bd>
		{
			warn("[EVAL] Failed. one or more permission in destination is not correct\n");
f0116f0d:	83 ec 04             	sub    $0x4,%esp
f0116f10:	68 c8 8f 13 f0       	push   $0xf0138fc8
f0116f15:	68 ee 07 00 00       	push   $0x7ee
f0116f1a:	68 7a 73 13 f0       	push   $0xf013737a
f0116f1f:	e8 9a 94 fe ff       	call   f01003be <_warn>
f0116f24:	83 c4 10             	add    $0x10,%esp
			return 0;
f0116f27:	b8 00 00 00 00       	mov    $0x0,%eax
f0116f2c:	eb 6a                	jmp    f0116f98 <CCP+0x227>
		}
		if (chk_type != CHK_ALLOC)
f0116f2e:	80 7d d4 03          	cmpb   $0x3,-0x2c(%ebp)
f0116f32:	74 3a                	je     f0116f6e <CCP+0x1fd>
		{
			if (CPs(ptr_dir, (uint32)ptrTemp1, src_perms, src_to_chk) <= 0)
f0116f34:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0116f37:	ff 75 28             	pushl  0x28(%ebp)
f0116f3a:	ff 75 24             	pushl  0x24(%ebp)
f0116f3d:	50                   	push   %eax
f0116f3e:	ff 75 08             	pushl  0x8(%ebp)
f0116f41:	e8 78 fa ff ff       	call   f01169be <CPs>
f0116f46:	83 c4 10             	add    $0x10,%esp
f0116f49:	85 c0                	test   %eax,%eax
f0116f4b:	7f 21                	jg     f0116f6e <CCP+0x1fd>
			{
				warn("[EVAL] Failed. one or more permission in source is not correct\n");
f0116f4d:	83 ec 04             	sub    $0x4,%esp
f0116f50:	68 10 90 13 f0       	push   $0xf0139010
f0116f55:	68 f5 07 00 00       	push   $0x7f5
f0116f5a:	68 7a 73 13 f0       	push   $0xf013737a
f0116f5f:	e8 5a 94 fe ff       	call   f01003be <_warn>
f0116f64:	83 c4 10             	add    $0x10,%esp
				return 0;
f0116f67:	b8 00 00 00 00       	mov    $0x0,%eax
f0116f6c:	eb 2a                	jmp    f0116f98 <CCP+0x227>
			}
		}
		if (chk_type != CHK_ALLOC)
f0116f6e:	80 7d d4 03          	cmpb   $0x3,-0x2c(%ebp)
f0116f72:	74 07                	je     f0116f7b <CCP+0x20a>
		{
			ptrTemp1 += PAGE_SIZE;
f0116f74:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
int CCP(uint32 *ptr_dir, uint32 ptr1, uint32 ptr2, uint32 size, int ref, uint32 dst_perms, uint32 dst_to_chk, uint32 src_perms, uint32 src_to_chk, uint8 chk_type)
{
	void* ptrTemp1 = (void*)(ptr1 - ptr1 % (4096));
	void* ptrTemp2 = (void*)(ptr2 - ptr2 % (4096));

	for( ;ptrTemp2 < (void*)(ptr2+size); ptrTemp2+=PAGE_SIZE)
f0116f7b:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
f0116f82:	8b 55 10             	mov    0x10(%ebp),%edx
f0116f85:	8b 45 14             	mov    0x14(%ebp),%eax
f0116f88:	01 d0                	add    %edx,%eax
f0116f8a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0116f8d:	0f 87 05 fe ff ff    	ja     f0116d98 <CCP+0x27>
		{
			ptrTemp1 += PAGE_SIZE;
		}
	}

	return 1;
f0116f93:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0116f98:	c9                   	leave  
f0116f99:	c3                   	ret    

f0116f9a <test_priority_normal_and_higher>:

extern int sys_calculate_free_frames();

uint8 firstTime = 1;
void test_priority_normal_and_higher()
{
f0116f9a:	55                   	push   %ebp
f0116f9b:	89 e5                	mov    %esp,%ebp
f0116f9d:	57                   	push   %edi
f0116f9e:	56                   	push   %esi
f0116f9f:	53                   	push   %ebx
f0116fa0:	81 ec 4c 03 00 00    	sub    $0x34c,%esp
#if USE_KHEAP
	panic("not handled yet");
#else
	if(firstTime)
f0116fa6:	a0 3c eb 18 f0       	mov    0xf018eb3c,%al
f0116fab:	84 c0                	test   %al,%al
f0116fad:	0f 84 38 0a 00 00    	je     f01179eb <test_priority_normal_and_higher+0xa51>
		uint32 fact_WS[15];
		uint32 fact_TimeStamp[15];
		uint32 hello_WS[10];
		uint32 hello_TimeStamp[10];

		firstTime = 0;
f0116fb3:	c6 05 3c eb 18 f0 00 	movb   $0x0,0xf018eb3c
		char command[100] = "load fos_add 20";
f0116fba:	8d 85 14 fe ff ff    	lea    -0x1ec(%ebp),%eax
f0116fc0:	bb cc 92 13 f0       	mov    $0xf01392cc,%ebx
f0116fc5:	ba 04 00 00 00       	mov    $0x4,%edx
f0116fca:	89 c7                	mov    %eax,%edi
f0116fcc:	89 de                	mov    %ebx,%esi
f0116fce:	89 d1                	mov    %edx,%ecx
f0116fd0:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f0116fd2:	8d 95 24 fe ff ff    	lea    -0x1dc(%ebp),%edx
f0116fd8:	b9 15 00 00 00       	mov    $0x15,%ecx
f0116fdd:	b8 00 00 00 00       	mov    $0x0,%eax
f0116fe2:	89 d7                	mov    %edx,%edi
f0116fe4:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command);
f0116fe6:	83 ec 0c             	sub    $0xc,%esp
f0116fe9:	8d 85 14 fe ff ff    	lea    -0x1ec(%ebp),%eax
f0116fef:	50                   	push   %eax
f0116ff0:	e8 ce ab fe ff       	call   f0101bc3 <execute_command>
f0116ff5:	83 c4 10             	add    $0x10,%esp
		char command2[100] = "load fact 15";
f0116ff8:	8d 85 78 fe ff ff    	lea    -0x188(%ebp),%eax
f0116ffe:	bb 30 93 13 f0       	mov    $0xf0139330,%ebx
f0117003:	ba 0d 00 00 00       	mov    $0xd,%edx
f0117008:	89 c7                	mov    %eax,%edi
f011700a:	89 de                	mov    %ebx,%esi
f011700c:	89 d1                	mov    %edx,%ecx
f011700e:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0117010:	8d 95 85 fe ff ff    	lea    -0x17b(%ebp),%edx
f0117016:	b9 57 00 00 00       	mov    $0x57,%ecx
f011701b:	b0 00                	mov    $0x0,%al
f011701d:	89 d7                	mov    %edx,%edi
f011701f:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command2);
f0117021:	83 ec 0c             	sub    $0xc,%esp
f0117024:	8d 85 78 fe ff ff    	lea    -0x188(%ebp),%eax
f011702a:	50                   	push   %eax
f011702b:	e8 93 ab fe ff       	call   f0101bc3 <execute_command>
f0117030:	83 c4 10             	add    $0x10,%esp
		char command3[100] = "load fos_helloWorld 10";
f0117033:	8d 85 dc fe ff ff    	lea    -0x124(%ebp),%eax
f0117039:	bb 94 93 13 f0       	mov    $0xf0139394,%ebx
f011703e:	ba 17 00 00 00       	mov    $0x17,%edx
f0117043:	89 c7                	mov    %eax,%edi
f0117045:	89 de                	mov    %ebx,%esi
f0117047:	89 d1                	mov    %edx,%ecx
f0117049:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011704b:	8d 95 f3 fe ff ff    	lea    -0x10d(%ebp),%edx
f0117051:	b9 4d 00 00 00       	mov    $0x4d,%ecx
f0117056:	b0 00                	mov    $0x0,%al
f0117058:	89 d7                	mov    %edx,%edi
f011705a:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command3);
f011705c:	83 ec 0c             	sub    $0xc,%esp
f011705f:	8d 85 dc fe ff ff    	lea    -0x124(%ebp),%eax
f0117065:	50                   	push   %eax
f0117066:	e8 58 ab fe ff       	call   f0101bc3 <execute_command>
f011706b:	83 c4 10             	add    $0x10,%esp

		struct Env * addEnv;
		struct Env * factEnv;
		struct Env * helloEnv;
		envid2env(16, &addEnv, 0);
f011706e:	83 ec 04             	sub    $0x4,%esp
f0117071:	6a 00                	push   $0x0
f0117073:	8d 45 ac             	lea    -0x54(%ebp),%eax
f0117076:	50                   	push   %eax
f0117077:	6a 10                	push   $0x10
f0117079:	e8 50 29 ff ff       	call   f01099ce <envid2env>
f011707e:	83 c4 10             	add    $0x10,%esp
		envid2env(17, &factEnv, 0);
f0117081:	83 ec 04             	sub    $0x4,%esp
f0117084:	6a 00                	push   $0x0
f0117086:	8d 45 a8             	lea    -0x58(%ebp),%eax
f0117089:	50                   	push   %eax
f011708a:	6a 11                	push   $0x11
f011708c:	e8 3d 29 ff ff       	call   f01099ce <envid2env>
f0117091:	83 c4 10             	add    $0x10,%esp
		envid2env(18, &helloEnv, 0);
f0117094:	83 ec 04             	sub    $0x4,%esp
f0117097:	6a 00                	push   $0x0
f0117099:	8d 45 a4             	lea    -0x5c(%ebp),%eax
f011709c:	50                   	push   %eax
f011709d:	6a 12                	push   $0x12
f011709f:	e8 2a 29 ff ff       	call   f01099ce <envid2env>
f01170a4:	83 c4 10             	add    $0x10,%esp

		if(addEnv == NULL || factEnv == NULL || helloEnv == NULL)
f01170a7:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01170aa:	85 c0                	test   %eax,%eax
f01170ac:	74 0e                	je     f01170bc <test_priority_normal_and_higher+0x122>
f01170ae:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01170b1:	85 c0                	test   %eax,%eax
f01170b3:	74 07                	je     f01170bc <test_priority_normal_and_higher+0x122>
f01170b5:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01170b8:	85 c0                	test   %eax,%eax
f01170ba:	75 14                	jne    f01170d0 <test_priority_normal_and_higher+0x136>
			panic("Loading programs failed\n");
f01170bc:	83 ec 04             	sub    $0x4,%esp
f01170bf:	68 50 90 13 f0       	push   $0xf0139050
f01170c4:	6a 29                	push   $0x29
f01170c6:	68 69 90 13 f0       	push   $0xf0139069
f01170cb:	e8 e0 90 fe ff       	call   f01001b0 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
f01170d0:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01170d3:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f01170d9:	83 f8 14             	cmp    $0x14,%eax
f01170dc:	75 1c                	jne    f01170fa <test_priority_normal_and_higher+0x160>
f01170de:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01170e1:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f01170e7:	83 f8 0f             	cmp    $0xf,%eax
f01170ea:	75 0e                	jne    f01170fa <test_priority_normal_and_higher+0x160>
f01170ec:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01170ef:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f01170f5:	83 f8 0a             	cmp    $0xa,%eax
f01170f8:	74 32                	je     f011712c <test_priority_normal_and_higher+0x192>
			panic("The programs should be initially loaded with the given working set size. add: %d, fact: %d, hello: %d\n", addEnv->page_WS_max_size , factEnv->page_WS_max_size , helloEnv->page_WS_max_size );
f01170fa:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01170fd:	8b 88 7c d5 01 00    	mov    0x1d57c(%eax),%ecx
f0117103:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0117106:	8b 90 7c d5 01 00    	mov    0x1d57c(%eax),%edx
f011710c:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011710f:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117115:	83 ec 08             	sub    $0x8,%esp
f0117118:	51                   	push   %ecx
f0117119:	52                   	push   %edx
f011711a:	50                   	push   %eax
f011711b:	68 84 90 13 f0       	push   $0xf0139084
f0117120:	6a 2c                	push   $0x2c
f0117122:	68 69 90 13 f0       	push   $0xf0139069
f0117127:	e8 84 90 fe ff       	call   f01001b0 <_panic>

		for(int i = 0; i < 20; i++)
f011712c:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f0117133:	eb 47                	jmp    f011717c <test_priority_normal_and_higher+0x1e2>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
f0117135:	8b 4d ac             	mov    -0x54(%ebp),%ecx
f0117138:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011713b:	89 d0                	mov    %edx,%eax
f011713d:	01 c0                	add    %eax,%eax
f011713f:	01 d0                	add    %edx,%eax
f0117141:	c1 e0 03             	shl    $0x3,%eax
f0117144:	01 c8                	add    %ecx,%eax
f0117146:	05 b8 00 00 00       	add    $0xb8,%eax
f011714b:	8b 10                	mov    (%eax),%edx
f011714d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0117150:	89 94 85 74 fd ff ff 	mov    %edx,-0x28c(%ebp,%eax,4)
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
f0117157:	8b 4d ac             	mov    -0x54(%ebp),%ecx
f011715a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011715d:	89 d0                	mov    %edx,%eax
f011715f:	01 c0                	add    %eax,%eax
f0117161:	01 d0                	add    %edx,%eax
f0117163:	c1 e0 03             	shl    $0x3,%eax
f0117166:	01 c8                	add    %ecx,%eax
f0117168:	05 c0 00 00 00       	add    $0xc0,%eax
f011716d:	8b 10                	mov    (%eax),%edx
f011716f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0117172:	89 94 85 c4 fd ff ff 	mov    %edx,-0x23c(%ebp,%eax,4)
			panic("Loading programs failed\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
			panic("The programs should be initially loaded with the given working set size. add: %d, fact: %d, hello: %d\n", addEnv->page_WS_max_size , factEnv->page_WS_max_size , helloEnv->page_WS_max_size );

		for(int i = 0; i < 20; i++)
f0117179:	ff 45 e4             	incl   -0x1c(%ebp)
f011717c:	83 7d e4 13          	cmpl   $0x13,-0x1c(%ebp)
f0117180:	7e b3                	jle    f0117135 <test_priority_normal_and_higher+0x19b>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 15; i++)
f0117182:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f0117189:	eb 47                	jmp    f01171d2 <test_priority_normal_and_higher+0x238>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
f011718b:	8b 4d a8             	mov    -0x58(%ebp),%ecx
f011718e:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0117191:	89 d0                	mov    %edx,%eax
f0117193:	01 c0                	add    %eax,%eax
f0117195:	01 d0                	add    %edx,%eax
f0117197:	c1 e0 03             	shl    $0x3,%eax
f011719a:	01 c8                	add    %ecx,%eax
f011719c:	05 b8 00 00 00       	add    $0xb8,%eax
f01171a1:	8b 10                	mov    (%eax),%edx
f01171a3:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01171a6:	89 94 85 fc fc ff ff 	mov    %edx,-0x304(%ebp,%eax,4)
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
f01171ad:	8b 4d a8             	mov    -0x58(%ebp),%ecx
f01171b0:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01171b3:	89 d0                	mov    %edx,%eax
f01171b5:	01 c0                	add    %eax,%eax
f01171b7:	01 d0                	add    %edx,%eax
f01171b9:	c1 e0 03             	shl    $0x3,%eax
f01171bc:	01 c8                	add    %ecx,%eax
f01171be:	05 c0 00 00 00       	add    $0xc0,%eax
f01171c3:	8b 10                	mov    (%eax),%edx
f01171c5:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01171c8:	89 94 85 38 fd ff ff 	mov    %edx,-0x2c8(%ebp,%eax,4)
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 15; i++)
f01171cf:	ff 45 e0             	incl   -0x20(%ebp)
f01171d2:	83 7d e0 0e          	cmpl   $0xe,-0x20(%ebp)
f01171d6:	7e b3                	jle    f011718b <test_priority_normal_and_higher+0x1f1>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 10; i++)
f01171d8:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f01171df:	eb 47                	jmp    f0117228 <test_priority_normal_and_higher+0x28e>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
f01171e1:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
f01171e4:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01171e7:	89 d0                	mov    %edx,%eax
f01171e9:	01 c0                	add    %eax,%eax
f01171eb:	01 d0                	add    %edx,%eax
f01171ed:	c1 e0 03             	shl    $0x3,%eax
f01171f0:	01 c8                	add    %ecx,%eax
f01171f2:	05 b8 00 00 00       	add    $0xb8,%eax
f01171f7:	8b 10                	mov    (%eax),%edx
f01171f9:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01171fc:	89 94 85 ac fc ff ff 	mov    %edx,-0x354(%ebp,%eax,4)
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
f0117203:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
f0117206:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0117209:	89 d0                	mov    %edx,%eax
f011720b:	01 c0                	add    %eax,%eax
f011720d:	01 d0                	add    %edx,%eax
f011720f:	c1 e0 03             	shl    $0x3,%eax
f0117212:	01 c8                	add    %ecx,%eax
f0117214:	05 c0 00 00 00       	add    $0xc0,%eax
f0117219:	8b 10                	mov    (%eax),%edx
f011721b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011721e:	89 94 85 d4 fc ff ff 	mov    %edx,-0x32c(%ebp,%eax,4)
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 10; i++)
f0117225:	ff 45 dc             	incl   -0x24(%ebp)
f0117228:	83 7d dc 09          	cmpl   $0x9,-0x24(%ebp)
f011722c:	7e b3                	jle    f01171e1 <test_priority_normal_and_higher+0x247>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		int freeFrames = sys_calculate_free_frames();
f011722e:	e8 93 57 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0117233:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		int freeDiskFrames = pf_calculate_free_frames();
f0117236:	e8 49 d4 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011723b:	89 45 b0             	mov    %eax,-0x50(%ebp)

		// Set Priority To Normal // Should change nothing
		set_program_priority(addEnv, 3);
f011723e:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0117241:	83 ec 08             	sub    $0x8,%esp
f0117244:	6a 03                	push   $0x3
f0117246:	50                   	push   %eax
f0117247:	e8 62 3c ff ff       	call   f010aeae <set_program_priority>
f011724c:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 3);
f011724f:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0117252:	83 ec 08             	sub    $0x8,%esp
f0117255:	6a 03                	push   $0x3
f0117257:	50                   	push   %eax
f0117258:	e8 51 3c ff ff       	call   f010aeae <set_program_priority>
f011725d:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 3);
f0117260:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0117263:	83 ec 08             	sub    $0x8,%esp
f0117266:	6a 03                	push   $0x3
f0117268:	50                   	push   %eax
f0117269:	e8 40 3c ff ff       	call   f010aeae <set_program_priority>
f011726e:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0117271:	e8 0e d4 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0117276:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0117279:	74 14                	je     f011728f <test_priority_normal_and_higher+0x2f5>
f011727b:	83 ec 04             	sub    $0x4,%esp
f011727e:	68 ec 90 13 f0       	push   $0xf01390ec
f0117283:	6a 48                	push   $0x48
f0117285:	68 69 90 13 f0       	push   $0xf0139069
f011728a:	e8 21 8f fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f011728f:	e8 32 57 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0117294:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0117297:	74 14                	je     f01172ad <test_priority_normal_and_higher+0x313>
f0117299:	83 ec 04             	sub    $0x4,%esp
f011729c:	68 ec 90 13 f0       	push   $0xf01390ec
f01172a1:	6a 49                	push   $0x49
f01172a3:	68 69 90 13 f0       	push   $0xf0139069
f01172a8:	e8 03 8f fe ff       	call   f01001b0 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
f01172ad:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01172b0:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f01172b6:	83 f8 14             	cmp    $0x14,%eax
f01172b9:	75 1c                	jne    f01172d7 <test_priority_normal_and_higher+0x33d>
f01172bb:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01172be:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f01172c4:	83 f8 0f             	cmp    $0xf,%eax
f01172c7:	75 0e                	jne    f01172d7 <test_priority_normal_and_higher+0x33d>
f01172c9:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01172cc:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f01172d2:	83 f8 0a             	cmp    $0xa,%eax
f01172d5:	74 14                	je     f01172eb <test_priority_normal_and_higher+0x351>
			panic("The programs' working set size should not change after setting priority to normal\n");
f01172d7:	83 ec 04             	sub    $0x4,%esp
f01172da:	68 18 91 13 f0       	push   $0xf0139118
f01172df:	6a 4c                	push   $0x4c
f01172e1:	68 69 90 13 f0       	push   $0xf0139069
f01172e6:	e8 c5 8e fe ff       	call   f01001b0 <_panic>

		freeFrames = sys_calculate_free_frames();
f01172eb:	e8 d6 56 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f01172f0:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01172f3:	e8 8c d3 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01172f8:	89 45 b0             	mov    %eax,-0x50(%ebp)

		// Set Priority To Above Normal // Should change only helloWorld as none of the rest is full
		set_program_priority(addEnv, 4);
f01172fb:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01172fe:	83 ec 08             	sub    $0x8,%esp
f0117301:	6a 04                	push   $0x4
f0117303:	50                   	push   %eax
f0117304:	e8 a5 3b ff ff       	call   f010aeae <set_program_priority>
f0117309:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 4);
f011730c:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011730f:	83 ec 08             	sub    $0x8,%esp
f0117312:	6a 04                	push   $0x4
f0117314:	50                   	push   %eax
f0117315:	e8 94 3b ff ff       	call   f010aeae <set_program_priority>
f011731a:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 4);
f011731d:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0117320:	83 ec 08             	sub    $0x8,%esp
f0117323:	6a 04                	push   $0x4
f0117325:	50                   	push   %eax
f0117326:	e8 83 3b ff ff       	call   f010aeae <set_program_priority>
f011732b:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f011732e:	e8 51 d3 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0117333:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0117336:	74 14                	je     f011734c <test_priority_normal_and_higher+0x3b2>
f0117338:	83 ec 04             	sub    $0x4,%esp
f011733b:	68 ec 90 13 f0       	push   $0xf01390ec
f0117340:	6a 56                	push   $0x56
f0117342:	68 69 90 13 f0       	push   $0xf0139069
f0117347:	e8 64 8e fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly%x\n");
f011734c:	e8 75 56 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0117351:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0117354:	74 14                	je     f011736a <test_priority_normal_and_higher+0x3d0>
f0117356:	83 ec 04             	sub    $0x4,%esp
f0117359:	68 6c 91 13 f0       	push   $0xf013916c
f011735e:	6a 57                	push   $0x57
f0117360:	68 69 90 13 f0       	push   $0xf0139069
f0117365:	e8 46 8e fe ff       	call   f01001b0 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f011736a:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011736d:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117373:	83 f8 14             	cmp    $0x14,%eax
f0117376:	75 1c                	jne    f0117394 <test_priority_normal_and_higher+0x3fa>
f0117378:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011737b:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117381:	83 f8 0f             	cmp    $0xf,%eax
f0117384:	75 0e                	jne    f0117394 <test_priority_normal_and_higher+0x3fa>
f0117386:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0117389:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f011738f:	83 f8 14             	cmp    $0x14,%eax
f0117392:	74 14                	je     f01173a8 <test_priority_normal_and_higher+0x40e>
			panic("The programs' working set size should be doubled only if it is full\n");
f0117394:	83 ec 04             	sub    $0x4,%esp
f0117397:	68 9c 91 13 f0       	push   $0xf013919c
f011739c:	6a 5a                	push   $0x5a
f011739e:	68 69 90 13 f0       	push   $0xf0139069
f01173a3:	e8 08 8e fe ff       	call   f01001b0 <_panic>

		freeFrames = sys_calculate_free_frames();
f01173a8:	e8 19 56 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f01173ad:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01173b0:	e8 cf d2 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01173b5:	89 45 b0             	mov    %eax,-0x50(%ebp)

		// Set priority to above normal --> nothing should change (1 time only)
		set_program_priority(helloEnv, 4);
f01173b8:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01173bb:	83 ec 08             	sub    $0x8,%esp
f01173be:	6a 04                	push   $0x4
f01173c0:	50                   	push   %eax
f01173c1:	e8 e8 3a ff ff       	call   f010aeae <set_program_priority>
f01173c6:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f01173c9:	e8 b6 d2 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01173ce:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f01173d1:	74 14                	je     f01173e7 <test_priority_normal_and_higher+0x44d>
f01173d3:	83 ec 04             	sub    $0x4,%esp
f01173d6:	68 ec 90 13 f0       	push   $0xf01390ec
f01173db:	6a 62                	push   $0x62
f01173dd:	68 69 90 13 f0       	push   $0xf0139069
f01173e2:	e8 c9 8d fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f01173e7:	e8 da 55 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f01173ec:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f01173ef:	74 14                	je     f0117405 <test_priority_normal_and_higher+0x46b>
f01173f1:	83 ec 04             	sub    $0x4,%esp
f01173f4:	68 ec 90 13 f0       	push   $0xf01390ec
f01173f9:	6a 63                	push   $0x63
f01173fb:	68 69 90 13 f0       	push   $0xf0139069
f0117400:	e8 ab 8d fe ff       	call   f01001b0 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f0117405:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0117408:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f011740e:	83 f8 14             	cmp    $0x14,%eax
f0117411:	75 1c                	jne    f011742f <test_priority_normal_and_higher+0x495>
f0117413:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0117416:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f011741c:	83 f8 0f             	cmp    $0xf,%eax
f011741f:	75 0e                	jne    f011742f <test_priority_normal_and_higher+0x495>
f0117421:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0117424:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f011742a:	83 f8 14             	cmp    $0x14,%eax
f011742d:	74 14                	je     f0117443 <test_priority_normal_and_higher+0x4a9>
			panic("The programs' working set size should be doubled only once\n");
f011742f:	83 ec 04             	sub    $0x4,%esp
f0117432:	68 e4 91 13 f0       	push   $0xf01391e4
f0117437:	6a 66                	push   $0x66
f0117439:	68 69 90 13 f0       	push   $0xf0139069
f011743e:	e8 6d 8d fe ff       	call   f01001b0 <_panic>


		// Manipulate WS to seem as full
		for(int i = 10; i < 20; i++)
f0117443:	c7 45 d8 0a 00 00 00 	movl   $0xa,-0x28(%ebp)
f011744a:	eb 1c                	jmp    f0117468 <test_priority_normal_and_higher+0x4ce>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
f011744c:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
f011744f:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0117452:	89 d0                	mov    %edx,%eax
f0117454:	01 c0                	add    %eax,%eax
f0117456:	01 d0                	add    %edx,%eax
f0117458:	c1 e0 03             	shl    $0x3,%eax
f011745b:	01 c8                	add    %ecx,%eax
f011745d:	05 bc 00 00 00       	add    $0xbc,%eax
f0117462:	c6 00 00             	movb   $0x0,(%eax)
		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
			panic("The programs' working set size should be doubled only once\n");


		// Manipulate WS to seem as full
		for(int i = 10; i < 20; i++)
f0117465:	ff 45 d8             	incl   -0x28(%ebp)
f0117468:	83 7d d8 13          	cmpl   $0x13,-0x28(%ebp)
f011746c:	7e de                	jle    f011744c <test_priority_normal_and_higher+0x4b2>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f011746e:	e8 53 55 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0117473:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117476:	e8 09 d2 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011747b:	89 45 b0             	mov    %eax,-0x50(%ebp)

		set_program_priority(helloEnv, 4);
f011747e:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0117481:	83 ec 08             	sub    $0x8,%esp
f0117484:	6a 04                	push   $0x4
f0117486:	50                   	push   %eax
f0117487:	e8 22 3a ff ff       	call   f010aeae <set_program_priority>
f011748c:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f011748f:	e8 f0 d1 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0117494:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0117497:	74 14                	je     f01174ad <test_priority_normal_and_higher+0x513>
f0117499:	83 ec 04             	sub    $0x4,%esp
f011749c:	68 ec 90 13 f0       	push   $0xf01390ec
f01174a1:	6a 73                	push   $0x73
f01174a3:	68 69 90 13 f0       	push   $0xf0139069
f01174a8:	e8 03 8d fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f01174ad:	e8 14 55 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f01174b2:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f01174b5:	74 14                	je     f01174cb <test_priority_normal_and_higher+0x531>
f01174b7:	83 ec 04             	sub    $0x4,%esp
f01174ba:	68 ec 90 13 f0       	push   $0xf01390ec
f01174bf:	6a 74                	push   $0x74
f01174c1:	68 69 90 13 f0       	push   $0xf0139069
f01174c6:	e8 e5 8c fe ff       	call   f01001b0 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f01174cb:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01174ce:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f01174d4:	83 f8 14             	cmp    $0x14,%eax
f01174d7:	75 1c                	jne    f01174f5 <test_priority_normal_and_higher+0x55b>
f01174d9:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01174dc:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f01174e2:	83 f8 0f             	cmp    $0xf,%eax
f01174e5:	75 0e                	jne    f01174f5 <test_priority_normal_and_higher+0x55b>
f01174e7:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01174ea:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f01174f0:	83 f8 14             	cmp    $0x14,%eax
f01174f3:	74 14                	je     f0117509 <test_priority_normal_and_higher+0x56f>
			panic("The programs' working set size should be doubled only once\n");
f01174f5:	83 ec 04             	sub    $0x4,%esp
f01174f8:	68 e4 91 13 f0       	push   $0xf01391e4
f01174fd:	6a 77                	push   $0x77
f01174ff:	68 69 90 13 f0       	push   $0xf0139069
f0117504:	e8 a7 8c fe ff       	call   f01001b0 <_panic>

		for(int i = 10; i < 15; i++)
f0117509:	c7 45 d4 0a 00 00 00 	movl   $0xa,-0x2c(%ebp)
f0117510:	eb 1c                	jmp    f011752e <test_priority_normal_and_higher+0x594>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
f0117512:	8b 4d a8             	mov    -0x58(%ebp),%ecx
f0117515:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0117518:	89 d0                	mov    %edx,%eax
f011751a:	01 c0                	add    %eax,%eax
f011751c:	01 d0                	add    %edx,%eax
f011751e:	c1 e0 03             	shl    $0x3,%eax
f0117521:	01 c8                	add    %ecx,%eax
f0117523:	05 bc 00 00 00       	add    $0xbc,%eax
f0117528:	c6 00 00             	movb   $0x0,(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
			panic("The programs' working set size should be doubled only once\n");

		for(int i = 10; i < 15; i++)
f011752b:	ff 45 d4             	incl   -0x2c(%ebp)
f011752e:	83 7d d4 0e          	cmpl   $0xe,-0x2c(%ebp)
f0117532:	7e de                	jle    f0117512 <test_priority_normal_and_higher+0x578>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f0117534:	e8 8d 54 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0117539:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011753c:	e8 43 d1 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0117541:	89 45 b0             	mov    %eax,-0x50(%ebp)
		set_program_priority(factEnv, 5);
f0117544:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0117547:	83 ec 08             	sub    $0x8,%esp
f011754a:	6a 05                	push   $0x5
f011754c:	50                   	push   %eax
f011754d:	e8 5c 39 ff ff       	call   f010aeae <set_program_priority>
f0117552:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 5);
f0117555:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0117558:	83 ec 08             	sub    $0x8,%esp
f011755b:	6a 05                	push   $0x5
f011755d:	50                   	push   %eax
f011755e:	e8 4b 39 ff ff       	call   f010aeae <set_program_priority>
f0117563:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0117566:	e8 19 d1 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011756b:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f011756e:	74 17                	je     f0117587 <test_priority_normal_and_higher+0x5ed>
f0117570:	83 ec 04             	sub    $0x4,%esp
f0117573:	68 ec 90 13 f0       	push   $0xf01390ec
f0117578:	68 82 00 00 00       	push   $0x82
f011757d:	68 69 90 13 f0       	push   $0xf0139069
f0117582:	e8 29 8c fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0117587:	e8 3a 54 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011758c:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f011758f:	74 17                	je     f01175a8 <test_priority_normal_and_higher+0x60e>
f0117591:	83 ec 04             	sub    $0x4,%esp
f0117594:	68 ec 90 13 f0       	push   $0xf01390ec
f0117599:	68 83 00 00 00       	push   $0x83
f011759e:	68 69 90 13 f0       	push   $0xf0139069
f01175a3:	e8 08 8c fe ff       	call   f01001b0 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f01175a8:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01175ab:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f01175b1:	83 f8 14             	cmp    $0x14,%eax
f01175b4:	75 1c                	jne    f01175d2 <test_priority_normal_and_higher+0x638>
f01175b6:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01175b9:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f01175bf:	83 f8 1e             	cmp    $0x1e,%eax
f01175c2:	75 0e                	jne    f01175d2 <test_priority_normal_and_higher+0x638>
f01175c4:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01175c7:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f01175cd:	83 f8 28             	cmp    $0x28,%eax
f01175d0:	74 17                	je     f01175e9 <test_priority_normal_and_higher+0x64f>
			panic("The programs' working set size should be doubled if full\n");
f01175d2:	83 ec 04             	sub    $0x4,%esp
f01175d5:	68 20 92 13 f0       	push   $0xf0139220
f01175da:	68 86 00 00 00       	push   $0x86
f01175df:	68 69 90 13 f0       	push   $0xf0139069
f01175e4:	e8 c7 8b fe ff       	call   f01001b0 <_panic>

		for(int i = 20; i < 40; i++)
f01175e9:	c7 45 d0 14 00 00 00 	movl   $0x14,-0x30(%ebp)
f01175f0:	eb 1c                	jmp    f011760e <test_priority_normal_and_higher+0x674>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
f01175f2:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
f01175f5:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01175f8:	89 d0                	mov    %edx,%eax
f01175fa:	01 c0                	add    %eax,%eax
f01175fc:	01 d0                	add    %edx,%eax
f01175fe:	c1 e0 03             	shl    $0x3,%eax
f0117601:	01 c8                	add    %ecx,%eax
f0117603:	05 bc 00 00 00       	add    $0xbc,%eax
f0117608:	c6 00 00             	movb   $0x0,(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 20; i < 40; i++)
f011760b:	ff 45 d0             	incl   -0x30(%ebp)
f011760e:	83 7d d0 27          	cmpl   $0x27,-0x30(%ebp)
f0117612:	7e de                	jle    f01175f2 <test_priority_normal_and_higher+0x658>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f0117614:	e8 ad 53 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0117619:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011761c:	e8 63 d0 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0117621:	89 45 b0             	mov    %eax,-0x50(%ebp)
		set_program_priority(factEnv, 5);
f0117624:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0117627:	83 ec 08             	sub    $0x8,%esp
f011762a:	6a 05                	push   $0x5
f011762c:	50                   	push   %eax
f011762d:	e8 7c 38 ff ff       	call   f010aeae <set_program_priority>
f0117632:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 4);
f0117635:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0117638:	83 ec 08             	sub    $0x8,%esp
f011763b:	6a 04                	push   $0x4
f011763d:	50                   	push   %eax
f011763e:	e8 6b 38 ff ff       	call   f010aeae <set_program_priority>
f0117643:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0117646:	e8 39 d0 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011764b:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f011764e:	74 17                	je     f0117667 <test_priority_normal_and_higher+0x6cd>
f0117650:	83 ec 04             	sub    $0x4,%esp
f0117653:	68 ec 90 13 f0       	push   $0xf01390ec
f0117658:	68 91 00 00 00       	push   $0x91
f011765d:	68 69 90 13 f0       	push   $0xf0139069
f0117662:	e8 49 8b fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0117667:	e8 5a 53 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011766c:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f011766f:	74 17                	je     f0117688 <test_priority_normal_and_higher+0x6ee>
f0117671:	83 ec 04             	sub    $0x4,%esp
f0117674:	68 ec 90 13 f0       	push   $0xf01390ec
f0117679:	68 92 00 00 00       	push   $0x92
f011767e:	68 69 90 13 f0       	push   $0xf0139069
f0117683:	e8 28 8b fe ff       	call   f01001b0 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f0117688:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011768b:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117691:	83 f8 14             	cmp    $0x14,%eax
f0117694:	75 1c                	jne    f01176b2 <test_priority_normal_and_higher+0x718>
f0117696:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0117699:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f011769f:	83 f8 1e             	cmp    $0x1e,%eax
f01176a2:	75 0e                	jne    f01176b2 <test_priority_normal_and_higher+0x718>
f01176a4:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01176a7:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f01176ad:	83 f8 28             	cmp    $0x28,%eax
f01176b0:	74 17                	je     f01176c9 <test_priority_normal_and_higher+0x72f>
			panic("The programs' working set size should be doubled if full\n");
f01176b2:	83 ec 04             	sub    $0x4,%esp
f01176b5:	68 20 92 13 f0       	push   $0xf0139220
f01176ba:	68 95 00 00 00       	push   $0x95
f01176bf:	68 69 90 13 f0       	push   $0xf0139069
f01176c4:	e8 e7 8a fe ff       	call   f01001b0 <_panic>

		for(int i = 15; i < 30; i++)
f01176c9:	c7 45 cc 0f 00 00 00 	movl   $0xf,-0x34(%ebp)
f01176d0:	eb 1c                	jmp    f01176ee <test_priority_normal_and_higher+0x754>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
f01176d2:	8b 4d a8             	mov    -0x58(%ebp),%ecx
f01176d5:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01176d8:	89 d0                	mov    %edx,%eax
f01176da:	01 c0                	add    %eax,%eax
f01176dc:	01 d0                	add    %edx,%eax
f01176de:	c1 e0 03             	shl    $0x3,%eax
f01176e1:	01 c8                	add    %ecx,%eax
f01176e3:	05 bc 00 00 00       	add    $0xbc,%eax
f01176e8:	c6 00 00             	movb   $0x0,(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 15; i < 30; i++)
f01176eb:	ff 45 cc             	incl   -0x34(%ebp)
f01176ee:	83 7d cc 1d          	cmpl   $0x1d,-0x34(%ebp)
f01176f2:	7e de                	jle    f01176d2 <test_priority_normal_and_higher+0x738>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f01176f4:	e8 cd 52 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f01176f9:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01176fc:	e8 83 cf fe ff       	call   f0104684 <pf_calculate_free_frames>
f0117701:	89 45 b0             	mov    %eax,-0x50(%ebp)
		set_program_priority(factEnv, 5);
f0117704:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0117707:	83 ec 08             	sub    $0x8,%esp
f011770a:	6a 05                	push   $0x5
f011770c:	50                   	push   %eax
f011770d:	e8 9c 37 ff ff       	call   f010aeae <set_program_priority>
f0117712:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 4);
f0117715:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0117718:	83 ec 08             	sub    $0x8,%esp
f011771b:	6a 04                	push   $0x4
f011771d:	50                   	push   %eax
f011771e:	e8 8b 37 ff ff       	call   f010aeae <set_program_priority>
f0117723:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0117726:	e8 59 cf fe ff       	call   f0104684 <pf_calculate_free_frames>
f011772b:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f011772e:	74 17                	je     f0117747 <test_priority_normal_and_higher+0x7ad>
f0117730:	83 ec 04             	sub    $0x4,%esp
f0117733:	68 ec 90 13 f0       	push   $0xf01390ec
f0117738:	68 a0 00 00 00       	push   $0xa0
f011773d:	68 69 90 13 f0       	push   $0xf0139069
f0117742:	e8 69 8a fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0117747:	e8 7a 52 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011774c:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f011774f:	74 17                	je     f0117768 <test_priority_normal_and_higher+0x7ce>
f0117751:	83 ec 04             	sub    $0x4,%esp
f0117754:	68 ec 90 13 f0       	push   $0xf01390ec
f0117759:	68 a1 00 00 00       	push   $0xa1
f011775e:	68 69 90 13 f0       	push   $0xf0139069
f0117763:	e8 48 8a fe ff       	call   f01001b0 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 60 || helloEnv->page_WS_max_size != 40)
f0117768:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011776b:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117771:	83 f8 14             	cmp    $0x14,%eax
f0117774:	75 1c                	jne    f0117792 <test_priority_normal_and_higher+0x7f8>
f0117776:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0117779:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f011777f:	83 f8 3c             	cmp    $0x3c,%eax
f0117782:	75 0e                	jne    f0117792 <test_priority_normal_and_higher+0x7f8>
f0117784:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0117787:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f011778d:	83 f8 28             	cmp    $0x28,%eax
f0117790:	74 17                	je     f01177a9 <test_priority_normal_and_higher+0x80f>
			panic("The programs' working set size should be doubled if full\n");
f0117792:	83 ec 04             	sub    $0x4,%esp
f0117795:	68 20 92 13 f0       	push   $0xf0139220
f011779a:	68 a4 00 00 00       	push   $0xa4
f011779f:	68 69 90 13 f0       	push   $0xf0139069
f01177a4:	e8 07 8a fe ff       	call   f01001b0 <_panic>

		for(int i = 15; i < 60; i++)
f01177a9:	c7 45 c8 0f 00 00 00 	movl   $0xf,-0x38(%ebp)
f01177b0:	eb 1c                	jmp    f01177ce <test_priority_normal_and_higher+0x834>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 1;
f01177b2:	8b 4d a8             	mov    -0x58(%ebp),%ecx
f01177b5:	8b 55 c8             	mov    -0x38(%ebp),%edx
f01177b8:	89 d0                	mov    %edx,%eax
f01177ba:	01 c0                	add    %eax,%eax
f01177bc:	01 d0                	add    %edx,%eax
f01177be:	c1 e0 03             	shl    $0x3,%eax
f01177c1:	01 c8                	add    %ecx,%eax
f01177c3:	05 bc 00 00 00       	add    $0xbc,%eax
f01177c8:	c6 00 01             	movb   $0x1,(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 60 || helloEnv->page_WS_max_size != 40)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 15; i < 60; i++)
f01177cb:	ff 45 c8             	incl   -0x38(%ebp)
f01177ce:	83 7d c8 3b          	cmpl   $0x3b,-0x38(%ebp)
f01177d2:	7e de                	jle    f01177b2 <test_priority_normal_and_higher+0x818>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 1;
		}
		for(int i = 10; i < 40; i++)
f01177d4:	c7 45 c4 0a 00 00 00 	movl   $0xa,-0x3c(%ebp)
f01177db:	eb 1c                	jmp    f01177f9 <test_priority_normal_and_higher+0x85f>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 1;
f01177dd:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
f01177e0:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01177e3:	89 d0                	mov    %edx,%eax
f01177e5:	01 c0                	add    %eax,%eax
f01177e7:	01 d0                	add    %edx,%eax
f01177e9:	c1 e0 03             	shl    $0x3,%eax
f01177ec:	01 c8                	add    %ecx,%eax
f01177ee:	05 bc 00 00 00       	add    $0xbc,%eax
f01177f3:	c6 00 01             	movb   $0x1,(%eax)

		for(int i = 15; i < 60; i++)
		{
			factEnv->ptr_pageWorkingSet[i].empty = 1;
		}
		for(int i = 10; i < 40; i++)
f01177f6:	ff 45 c4             	incl   -0x3c(%ebp)
f01177f9:	83 7d c4 27          	cmpl   $0x27,-0x3c(%ebp)
f01177fd:	7e de                	jle    f01177dd <test_priority_normal_and_higher+0x843>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 1;
		}

		for(int i = 0; i < 20; i++)
f01177ff:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
f0117806:	eb 7d                	jmp    f0117885 <test_priority_normal_and_higher+0x8eb>
		{
			if(add_WS[i] != addEnv->ptr_pageWorkingSet[i].virtual_address)
f0117808:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011780b:	8b 8c 85 74 fd ff ff 	mov    -0x28c(%ebp,%eax,4),%ecx
f0117812:	8b 5d ac             	mov    -0x54(%ebp),%ebx
f0117815:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0117818:	89 d0                	mov    %edx,%eax
f011781a:	01 c0                	add    %eax,%eax
f011781c:	01 d0                	add    %edx,%eax
f011781e:	c1 e0 03             	shl    $0x3,%eax
f0117821:	01 d8                	add    %ebx,%eax
f0117823:	05 b8 00 00 00       	add    $0xb8,%eax
f0117828:	8b 00                	mov    (%eax),%eax
f011782a:	39 c1                	cmp    %eax,%ecx
f011782c:	74 17                	je     f0117845 <test_priority_normal_and_higher+0x8ab>
				panic("Working set should be moved properly to the new one");
f011782e:	83 ec 04             	sub    $0x4,%esp
f0117831:	68 5c 92 13 f0       	push   $0xf013925c
f0117836:	68 b2 00 00 00       	push   $0xb2
f011783b:	68 69 90 13 f0       	push   $0xf0139069
f0117840:	e8 6b 89 fe ff       	call   f01001b0 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
f0117845:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0117848:	8b 8c 85 c4 fd ff ff 	mov    -0x23c(%ebp,%eax,4),%ecx
f011784f:	8b 5d ac             	mov    -0x54(%ebp),%ebx
f0117852:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0117855:	89 d0                	mov    %edx,%eax
f0117857:	01 c0                	add    %eax,%eax
f0117859:	01 d0                	add    %edx,%eax
f011785b:	c1 e0 03             	shl    $0x3,%eax
f011785e:	01 d8                	add    %ebx,%eax
f0117860:	05 c0 00 00 00       	add    $0xc0,%eax
f0117865:	8b 00                	mov    (%eax),%eax
f0117867:	39 c1                	cmp    %eax,%ecx
f0117869:	74 17                	je     f0117882 <test_priority_normal_and_higher+0x8e8>
				panic("Working set should be moved properly to the new one");
f011786b:	83 ec 04             	sub    $0x4,%esp
f011786e:	68 5c 92 13 f0       	push   $0xf013925c
f0117873:	68 b5 00 00 00       	push   $0xb5
f0117878:	68 69 90 13 f0       	push   $0xf0139069
f011787d:	e8 2e 89 fe ff       	call   f01001b0 <_panic>
		for(int i = 10; i < 40; i++)
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 1;
		}

		for(int i = 0; i < 20; i++)
f0117882:	ff 45 c0             	incl   -0x40(%ebp)
f0117885:	83 7d c0 13          	cmpl   $0x13,-0x40(%ebp)
f0117889:	0f 8e 79 ff ff ff    	jle    f0117808 <test_priority_normal_and_higher+0x86e>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f011788f:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
f0117896:	eb 7d                	jmp    f0117915 <test_priority_normal_and_higher+0x97b>
		{
			if(fact_WS[i] != factEnv->ptr_pageWorkingSet[i].virtual_address)
f0117898:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011789b:	8b 8c 85 fc fc ff ff 	mov    -0x304(%ebp,%eax,4),%ecx
f01178a2:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f01178a5:	8b 55 bc             	mov    -0x44(%ebp),%edx
f01178a8:	89 d0                	mov    %edx,%eax
f01178aa:	01 c0                	add    %eax,%eax
f01178ac:	01 d0                	add    %edx,%eax
f01178ae:	c1 e0 03             	shl    $0x3,%eax
f01178b1:	01 d8                	add    %ebx,%eax
f01178b3:	05 b8 00 00 00       	add    $0xb8,%eax
f01178b8:	8b 00                	mov    (%eax),%eax
f01178ba:	39 c1                	cmp    %eax,%ecx
f01178bc:	74 17                	je     f01178d5 <test_priority_normal_and_higher+0x93b>
				panic("Working set should be moved properly to the new one");
f01178be:	83 ec 04             	sub    $0x4,%esp
f01178c1:	68 5c 92 13 f0       	push   $0xf013925c
f01178c6:	68 bb 00 00 00       	push   $0xbb
f01178cb:	68 69 90 13 f0       	push   $0xf0139069
f01178d0:	e8 db 88 fe ff       	call   f01001b0 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
f01178d5:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01178d8:	8b 8c 85 38 fd ff ff 	mov    -0x2c8(%ebp,%eax,4),%ecx
f01178df:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f01178e2:	8b 55 bc             	mov    -0x44(%ebp),%edx
f01178e5:	89 d0                	mov    %edx,%eax
f01178e7:	01 c0                	add    %eax,%eax
f01178e9:	01 d0                	add    %edx,%eax
f01178eb:	c1 e0 03             	shl    $0x3,%eax
f01178ee:	01 d8                	add    %ebx,%eax
f01178f0:	05 c0 00 00 00       	add    $0xc0,%eax
f01178f5:	8b 00                	mov    (%eax),%eax
f01178f7:	39 c1                	cmp    %eax,%ecx
f01178f9:	74 17                	je     f0117912 <test_priority_normal_and_higher+0x978>
				panic("Working set should be moved properly to the new one");
f01178fb:	83 ec 04             	sub    $0x4,%esp
f01178fe:	68 5c 92 13 f0       	push   $0xf013925c
f0117903:	68 be 00 00 00       	push   $0xbe
f0117908:	68 69 90 13 f0       	push   $0xf0139069
f011790d:	e8 9e 88 fe ff       	call   f01001b0 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f0117912:	ff 45 bc             	incl   -0x44(%ebp)
f0117915:	83 7d bc 0e          	cmpl   $0xe,-0x44(%ebp)
f0117919:	0f 8e 79 ff ff ff    	jle    f0117898 <test_priority_normal_and_higher+0x8fe>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f011791f:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
f0117926:	eb 7d                	jmp    f01179a5 <test_priority_normal_and_higher+0xa0b>
		{
			if(hello_WS[i] != helloEnv->ptr_pageWorkingSet[i].virtual_address)
f0117928:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011792b:	8b 8c 85 ac fc ff ff 	mov    -0x354(%ebp,%eax,4),%ecx
f0117932:	8b 5d a4             	mov    -0x5c(%ebp),%ebx
f0117935:	8b 55 b8             	mov    -0x48(%ebp),%edx
f0117938:	89 d0                	mov    %edx,%eax
f011793a:	01 c0                	add    %eax,%eax
f011793c:	01 d0                	add    %edx,%eax
f011793e:	c1 e0 03             	shl    $0x3,%eax
f0117941:	01 d8                	add    %ebx,%eax
f0117943:	05 b8 00 00 00       	add    $0xb8,%eax
f0117948:	8b 00                	mov    (%eax),%eax
f011794a:	39 c1                	cmp    %eax,%ecx
f011794c:	74 17                	je     f0117965 <test_priority_normal_and_higher+0x9cb>
				panic("Working set should be moved properly to the new one");
f011794e:	83 ec 04             	sub    $0x4,%esp
f0117951:	68 5c 92 13 f0       	push   $0xf013925c
f0117956:	68 c4 00 00 00       	push   $0xc4
f011795b:	68 69 90 13 f0       	push   $0xf0139069
f0117960:	e8 4b 88 fe ff       	call   f01001b0 <_panic>

			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
f0117965:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117968:	8b 8c 85 d4 fc ff ff 	mov    -0x32c(%ebp,%eax,4),%ecx
f011796f:	8b 5d a4             	mov    -0x5c(%ebp),%ebx
f0117972:	8b 55 b8             	mov    -0x48(%ebp),%edx
f0117975:	89 d0                	mov    %edx,%eax
f0117977:	01 c0                	add    %eax,%eax
f0117979:	01 d0                	add    %edx,%eax
f011797b:	c1 e0 03             	shl    $0x3,%eax
f011797e:	01 d8                	add    %ebx,%eax
f0117980:	05 c0 00 00 00       	add    $0xc0,%eax
f0117985:	8b 00                	mov    (%eax),%eax
f0117987:	39 c1                	cmp    %eax,%ecx
f0117989:	74 17                	je     f01179a2 <test_priority_normal_and_higher+0xa08>
				panic("Working set should be moved properly to the new one");
f011798b:	83 ec 04             	sub    $0x4,%esp
f011798e:	68 5c 92 13 f0       	push   $0xf013925c
f0117993:	68 c7 00 00 00       	push   $0xc7
f0117998:	68 69 90 13 f0       	push   $0xf0139069
f011799d:	e8 0e 88 fe ff       	call   f01001b0 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f01179a2:	ff 45 b8             	incl   -0x48(%ebp)
f01179a5:	83 7d b8 09          	cmpl   $0x9,-0x48(%ebp)
f01179a9:	0f 8e 79 ff ff ff    	jle    f0117928 <test_priority_normal_and_higher+0x98e>

			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		char command4[100] = "runall";
f01179af:	c7 85 40 ff ff ff 72 	movl   $0x616e7572,-0xc0(%ebp)
f01179b6:	75 6e 61 
f01179b9:	c7 85 44 ff ff ff 6c 	movl   $0x6c6c,-0xbc(%ebp)
f01179c0:	6c 00 00 
f01179c3:	8d 95 48 ff ff ff    	lea    -0xb8(%ebp),%edx
f01179c9:	b9 17 00 00 00       	mov    $0x17,%ecx
f01179ce:	b8 00 00 00 00       	mov    $0x0,%eax
f01179d3:	89 d7                	mov    %edx,%edi
f01179d5:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command4);
f01179d7:	83 ec 0c             	sub    $0xc,%esp
f01179da:	8d 85 40 ff ff ff    	lea    -0xc0(%ebp),%eax
f01179e0:	50                   	push   %eax
f01179e1:	e8 dd a1 fe ff       	call   f0101bc3 <execute_command>
f01179e6:	83 c4 10             	add    $0x10,%esp
	else
	{
		cprintf("\nCongratulations!! test priority 1 completed successfully.\n");
	}
#endif
}
f01179e9:	eb 10                	jmp    f01179fb <test_priority_normal_and_higher+0xa61>
		char command4[100] = "runall";
		execute_command(command4);
	}
	else
	{
		cprintf("\nCongratulations!! test priority 1 completed successfully.\n");
f01179eb:	83 ec 0c             	sub    $0xc,%esp
f01179ee:	68 90 92 13 f0       	push   $0xf0139290
f01179f3:	e8 39 94 fe ff       	call   f0100e31 <cprintf>
f01179f8:	83 c4 10             	add    $0x10,%esp
	}
#endif
}
f01179fb:	90                   	nop
f01179fc:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01179ff:	5b                   	pop    %ebx
f0117a00:	5e                   	pop    %esi
f0117a01:	5f                   	pop    %edi
f0117a02:	5d                   	pop    %ebp
f0117a03:	c3                   	ret    

f0117a04 <test_priority_normal_and_lower>:

void test_priority_normal_and_lower()
{
f0117a04:	55                   	push   %ebp
f0117a05:	89 e5                	mov    %esp,%ebp
f0117a07:	57                   	push   %edi
f0117a08:	56                   	push   %esi
f0117a09:	53                   	push   %ebx
f0117a0a:	81 ec ac 04 00 00    	sub    $0x4ac,%esp
#if USE_KHEAP
	panic("not handled yet");
#else
	if(firstTime)
f0117a10:	a0 3c eb 18 f0       	mov    0xf018eb3c,%al
f0117a15:	84 c0                	test   %al,%al
f0117a17:	0f 84 1b 0a 00 00    	je     f0118438 <test_priority_normal_and_lower+0xa34>
		uint32 fact_WS[30];
		uint32 fact_TimeStamp[30];
		uint32 hello_WS[40];
		uint32 hello_TimeStamp[40];

		firstTime = 0;
f0117a1d:	c6 05 3c eb 18 f0 00 	movb   $0x0,0xf018eb3c
		char command[100] = "load fos_add 20";
f0117a24:	8d 85 f0 fb ff ff    	lea    -0x410(%ebp),%eax
f0117a2a:	bb cc 92 13 f0       	mov    $0xf01392cc,%ebx
f0117a2f:	ba 04 00 00 00       	mov    $0x4,%edx
f0117a34:	89 c7                	mov    %eax,%edi
f0117a36:	89 de                	mov    %ebx,%esi
f0117a38:	89 d1                	mov    %edx,%ecx
f0117a3a:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f0117a3c:	8d 95 00 fc ff ff    	lea    -0x400(%ebp),%edx
f0117a42:	b9 15 00 00 00       	mov    $0x15,%ecx
f0117a47:	b8 00 00 00 00       	mov    $0x0,%eax
f0117a4c:	89 d7                	mov    %edx,%edi
f0117a4e:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command);
f0117a50:	83 ec 0c             	sub    $0xc,%esp
f0117a53:	8d 85 f0 fb ff ff    	lea    -0x410(%ebp),%eax
f0117a59:	50                   	push   %eax
f0117a5a:	e8 64 a1 fe ff       	call   f0101bc3 <execute_command>
f0117a5f:	83 c4 10             	add    $0x10,%esp
		char command2[100] = "load fact 30";
f0117a62:	8d 85 54 fc ff ff    	lea    -0x3ac(%ebp),%eax
f0117a68:	bb d4 95 13 f0       	mov    $0xf01395d4,%ebx
f0117a6d:	ba 0d 00 00 00       	mov    $0xd,%edx
f0117a72:	89 c7                	mov    %eax,%edi
f0117a74:	89 de                	mov    %ebx,%esi
f0117a76:	89 d1                	mov    %edx,%ecx
f0117a78:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0117a7a:	8d 95 61 fc ff ff    	lea    -0x39f(%ebp),%edx
f0117a80:	b9 57 00 00 00       	mov    $0x57,%ecx
f0117a85:	b0 00                	mov    $0x0,%al
f0117a87:	89 d7                	mov    %edx,%edi
f0117a89:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command2);
f0117a8b:	83 ec 0c             	sub    $0xc,%esp
f0117a8e:	8d 85 54 fc ff ff    	lea    -0x3ac(%ebp),%eax
f0117a94:	50                   	push   %eax
f0117a95:	e8 29 a1 fe ff       	call   f0101bc3 <execute_command>
f0117a9a:	83 c4 10             	add    $0x10,%esp
		char command3[100] = "load fos_helloWorld 40";
f0117a9d:	8d 85 b8 fc ff ff    	lea    -0x348(%ebp),%eax
f0117aa3:	bb 38 96 13 f0       	mov    $0xf0139638,%ebx
f0117aa8:	ba 17 00 00 00       	mov    $0x17,%edx
f0117aad:	89 c7                	mov    %eax,%edi
f0117aaf:	89 de                	mov    %ebx,%esi
f0117ab1:	89 d1                	mov    %edx,%ecx
f0117ab3:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0117ab5:	8d 95 cf fc ff ff    	lea    -0x331(%ebp),%edx
f0117abb:	b9 4d 00 00 00       	mov    $0x4d,%ecx
f0117ac0:	b0 00                	mov    $0x0,%al
f0117ac2:	89 d7                	mov    %edx,%edi
f0117ac4:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command3);
f0117ac6:	83 ec 0c             	sub    $0xc,%esp
f0117ac9:	8d 85 b8 fc ff ff    	lea    -0x348(%ebp),%eax
f0117acf:	50                   	push   %eax
f0117ad0:	e8 ee a0 fe ff       	call   f0101bc3 <execute_command>
f0117ad5:	83 c4 10             	add    $0x10,%esp

		struct Env * addEnv;
		struct Env * factEnv;
		struct Env * helloEnv;
		envid2env(4096, &addEnv, 0);
f0117ad8:	83 ec 04             	sub    $0x4,%esp
f0117adb:	6a 00                	push   $0x0
f0117add:	8d 45 b8             	lea    -0x48(%ebp),%eax
f0117ae0:	50                   	push   %eax
f0117ae1:	68 00 10 00 00       	push   $0x1000
f0117ae6:	e8 e3 1e ff ff       	call   f01099ce <envid2env>
f0117aeb:	83 c4 10             	add    $0x10,%esp
		envid2env(4097, &factEnv, 0);
f0117aee:	83 ec 04             	sub    $0x4,%esp
f0117af1:	6a 00                	push   $0x0
f0117af3:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f0117af6:	50                   	push   %eax
f0117af7:	68 01 10 00 00       	push   $0x1001
f0117afc:	e8 cd 1e ff ff       	call   f01099ce <envid2env>
f0117b01:	83 c4 10             	add    $0x10,%esp
		envid2env(4098, &helloEnv, 0);
f0117b04:	83 ec 04             	sub    $0x4,%esp
f0117b07:	6a 00                	push   $0x0
f0117b09:	8d 45 b0             	lea    -0x50(%ebp),%eax
f0117b0c:	50                   	push   %eax
f0117b0d:	68 02 10 00 00       	push   $0x1002
f0117b12:	e8 b7 1e ff ff       	call   f01099ce <envid2env>
f0117b17:	83 c4 10             	add    $0x10,%esp

		if(addEnv == NULL || factEnv == NULL || helloEnv == NULL)
f0117b1a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117b1d:	85 c0                	test   %eax,%eax
f0117b1f:	74 0e                	je     f0117b2f <test_priority_normal_and_lower+0x12b>
f0117b21:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117b24:	85 c0                	test   %eax,%eax
f0117b26:	74 07                	je     f0117b2f <test_priority_normal_and_lower+0x12b>
f0117b28:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117b2b:	85 c0                	test   %eax,%eax
f0117b2d:	75 17                	jne    f0117b46 <test_priority_normal_and_lower+0x142>
			panic("Loading programs failed\n");
f0117b2f:	83 ec 04             	sub    $0x4,%esp
f0117b32:	68 50 90 13 f0       	push   $0xf0139050
f0117b37:	68 f2 00 00 00       	push   $0xf2
f0117b3c:	68 69 90 13 f0       	push   $0xf0139069
f0117b41:	e8 6a 86 fe ff       	call   f01001b0 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f0117b46:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117b49:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117b4f:	83 f8 14             	cmp    $0x14,%eax
f0117b52:	75 1c                	jne    f0117b70 <test_priority_normal_and_lower+0x16c>
f0117b54:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117b57:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117b5d:	83 f8 1e             	cmp    $0x1e,%eax
f0117b60:	75 0e                	jne    f0117b70 <test_priority_normal_and_lower+0x16c>
f0117b62:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117b65:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117b6b:	83 f8 28             	cmp    $0x28,%eax
f0117b6e:	74 17                	je     f0117b87 <test_priority_normal_and_lower+0x183>
			panic("The programs should be initially loaded with the given working set size\n");
f0117b70:	83 ec 04             	sub    $0x4,%esp
f0117b73:	68 f8 93 13 f0       	push   $0xf01393f8
f0117b78:	68 f5 00 00 00       	push   $0xf5
f0117b7d:	68 69 90 13 f0       	push   $0xf0139069
f0117b82:	e8 29 86 fe ff       	call   f01001b0 <_panic>

		for(int i = 0; i < 20; i++)
f0117b87:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f0117b8e:	eb 47                	jmp    f0117bd7 <test_priority_normal_and_lower+0x1d3>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
f0117b90:	8b 4d b8             	mov    -0x48(%ebp),%ecx
f0117b93:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0117b96:	89 d0                	mov    %edx,%eax
f0117b98:	01 c0                	add    %eax,%eax
f0117b9a:	01 d0                	add    %edx,%eax
f0117b9c:	c1 e0 03             	shl    $0x3,%eax
f0117b9f:	01 c8                	add    %ecx,%eax
f0117ba1:	05 b8 00 00 00       	add    $0xb8,%eax
f0117ba6:	8b 10                	mov    (%eax),%edx
f0117ba8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0117bab:	89 94 85 50 fb ff ff 	mov    %edx,-0x4b0(%ebp,%eax,4)
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
f0117bb2:	8b 4d b8             	mov    -0x48(%ebp),%ecx
f0117bb5:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0117bb8:	89 d0                	mov    %edx,%eax
f0117bba:	01 c0                	add    %eax,%eax
f0117bbc:	01 d0                	add    %edx,%eax
f0117bbe:	c1 e0 03             	shl    $0x3,%eax
f0117bc1:	01 c8                	add    %ecx,%eax
f0117bc3:	05 c0 00 00 00       	add    $0xc0,%eax
f0117bc8:	8b 10                	mov    (%eax),%edx
f0117bca:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0117bcd:	89 94 85 a0 fb ff ff 	mov    %edx,-0x460(%ebp,%eax,4)
			panic("Loading programs failed\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
			panic("The programs should be initially loaded with the given working set size\n");

		for(int i = 0; i < 20; i++)
f0117bd4:	ff 45 e4             	incl   -0x1c(%ebp)
f0117bd7:	83 7d e4 13          	cmpl   $0x13,-0x1c(%ebp)
f0117bdb:	7e b3                	jle    f0117b90 <test_priority_normal_and_lower+0x18c>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 30; i++)
f0117bdd:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f0117be4:	eb 47                	jmp    f0117c2d <test_priority_normal_and_lower+0x229>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
f0117be6:	8b 4d b4             	mov    -0x4c(%ebp),%ecx
f0117be9:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0117bec:	89 d0                	mov    %edx,%eax
f0117bee:	01 c0                	add    %eax,%eax
f0117bf0:	01 d0                	add    %edx,%eax
f0117bf2:	c1 e0 03             	shl    $0x3,%eax
f0117bf5:	01 c8                	add    %ecx,%eax
f0117bf7:	05 b8 00 00 00       	add    $0xb8,%eax
f0117bfc:	8b 10                	mov    (%eax),%edx
f0117bfe:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0117c01:	89 94 85 80 fd ff ff 	mov    %edx,-0x280(%ebp,%eax,4)
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
f0117c08:	8b 4d b4             	mov    -0x4c(%ebp),%ecx
f0117c0b:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0117c0e:	89 d0                	mov    %edx,%eax
f0117c10:	01 c0                	add    %eax,%eax
f0117c12:	01 d0                	add    %edx,%eax
f0117c14:	c1 e0 03             	shl    $0x3,%eax
f0117c17:	01 c8                	add    %ecx,%eax
f0117c19:	05 c0 00 00 00       	add    $0xc0,%eax
f0117c1e:	8b 10                	mov    (%eax),%edx
f0117c20:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0117c23:	89 94 85 f8 fd ff ff 	mov    %edx,-0x208(%ebp,%eax,4)
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 30; i++)
f0117c2a:	ff 45 e0             	incl   -0x20(%ebp)
f0117c2d:	83 7d e0 1d          	cmpl   $0x1d,-0x20(%ebp)
f0117c31:	7e b3                	jle    f0117be6 <test_priority_normal_and_lower+0x1e2>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 40; i++)
f0117c33:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f0117c3a:	eb 47                	jmp    f0117c83 <test_priority_normal_and_lower+0x27f>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
f0117c3c:	8b 4d b0             	mov    -0x50(%ebp),%ecx
f0117c3f:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0117c42:	89 d0                	mov    %edx,%eax
f0117c44:	01 c0                	add    %eax,%eax
f0117c46:	01 d0                	add    %edx,%eax
f0117c48:	c1 e0 03             	shl    $0x3,%eax
f0117c4b:	01 c8                	add    %ecx,%eax
f0117c4d:	05 b8 00 00 00       	add    $0xb8,%eax
f0117c52:	8b 10                	mov    (%eax),%edx
f0117c54:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0117c57:	89 94 85 70 fe ff ff 	mov    %edx,-0x190(%ebp,%eax,4)
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
f0117c5e:	8b 4d b0             	mov    -0x50(%ebp),%ecx
f0117c61:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0117c64:	89 d0                	mov    %edx,%eax
f0117c66:	01 c0                	add    %eax,%eax
f0117c68:	01 d0                	add    %edx,%eax
f0117c6a:	c1 e0 03             	shl    $0x3,%eax
f0117c6d:	01 c8                	add    %ecx,%eax
f0117c6f:	05 c0 00 00 00       	add    $0xc0,%eax
f0117c74:	8b 10                	mov    (%eax),%edx
f0117c76:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0117c79:	89 94 85 10 ff ff ff 	mov    %edx,-0xf0(%ebp,%eax,4)
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 40; i++)
f0117c80:	ff 45 dc             	incl   -0x24(%ebp)
f0117c83:	83 7d dc 27          	cmpl   $0x27,-0x24(%ebp)
f0117c87:	7e b3                	jle    f0117c3c <test_priority_normal_and_lower+0x238>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		int freeFrames = sys_calculate_free_frames();
f0117c89:	e8 38 4d ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0117c8e:	89 45 c0             	mov    %eax,-0x40(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0117c91:	e8 ee c9 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0117c96:	89 45 bc             	mov    %eax,-0x44(%ebp)

		// Set Priority To Normal // Should change nothing
		set_program_priority(addEnv, 3);
f0117c99:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117c9c:	83 ec 08             	sub    $0x8,%esp
f0117c9f:	6a 03                	push   $0x3
f0117ca1:	50                   	push   %eax
f0117ca2:	e8 07 32 ff ff       	call   f010aeae <set_program_priority>
f0117ca7:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 3);
f0117caa:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117cad:	83 ec 08             	sub    $0x8,%esp
f0117cb0:	6a 03                	push   $0x3
f0117cb2:	50                   	push   %eax
f0117cb3:	e8 f6 31 ff ff       	call   f010aeae <set_program_priority>
f0117cb8:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 3);
f0117cbb:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117cbe:	83 ec 08             	sub    $0x8,%esp
f0117cc1:	6a 03                	push   $0x3
f0117cc3:	50                   	push   %eax
f0117cc4:	e8 e5 31 ff ff       	call   f010aeae <set_program_priority>
f0117cc9:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0117ccc:	e8 b3 c9 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0117cd1:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0117cd4:	74 17                	je     f0117ced <test_priority_normal_and_lower+0x2e9>
f0117cd6:	83 ec 04             	sub    $0x4,%esp
f0117cd9:	68 ec 90 13 f0       	push   $0xf01390ec
f0117cde:	68 11 01 00 00       	push   $0x111
f0117ce3:	68 69 90 13 f0       	push   $0xf0139069
f0117ce8:	e8 c3 84 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0117ced:	e8 d4 4c ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0117cf2:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f0117cf5:	74 17                	je     f0117d0e <test_priority_normal_and_lower+0x30a>
f0117cf7:	83 ec 04             	sub    $0x4,%esp
f0117cfa:	68 ec 90 13 f0       	push   $0xf01390ec
f0117cff:	68 12 01 00 00       	push   $0x112
f0117d04:	68 69 90 13 f0       	push   $0xf0139069
f0117d09:	e8 a2 84 fe ff       	call   f01001b0 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f0117d0e:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117d11:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117d17:	83 f8 14             	cmp    $0x14,%eax
f0117d1a:	75 1c                	jne    f0117d38 <test_priority_normal_and_lower+0x334>
f0117d1c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117d1f:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117d25:	83 f8 1e             	cmp    $0x1e,%eax
f0117d28:	75 0e                	jne    f0117d38 <test_priority_normal_and_lower+0x334>
f0117d2a:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117d2d:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117d33:	83 f8 28             	cmp    $0x28,%eax
f0117d36:	74 17                	je     f0117d4f <test_priority_normal_and_lower+0x34b>
			panic("The programs' working set size should not change after setting priority to normal\n");
f0117d38:	83 ec 04             	sub    $0x4,%esp
f0117d3b:	68 18 91 13 f0       	push   $0xf0139118
f0117d40:	68 15 01 00 00       	push   $0x115
f0117d45:	68 69 90 13 f0       	push   $0xf0139069
f0117d4a:	e8 61 84 fe ff       	call   f01001b0 <_panic>

		freeFrames = sys_calculate_free_frames();
f0117d4f:	e8 72 4c ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0117d54:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117d57:	e8 28 c9 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0117d5c:	89 45 bc             	mov    %eax,-0x44(%ebp)

		// Set Priority To Below Normal // Should change only if half is free
		set_program_priority(addEnv, 2);
f0117d5f:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117d62:	83 ec 08             	sub    $0x8,%esp
f0117d65:	6a 02                	push   $0x2
f0117d67:	50                   	push   %eax
f0117d68:	e8 41 31 ff ff       	call   f010aeae <set_program_priority>
f0117d6d:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 2);
f0117d70:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117d73:	83 ec 08             	sub    $0x8,%esp
f0117d76:	6a 02                	push   $0x2
f0117d78:	50                   	push   %eax
f0117d79:	e8 30 31 ff ff       	call   f010aeae <set_program_priority>
f0117d7e:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 2);
f0117d81:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117d84:	83 ec 08             	sub    $0x8,%esp
f0117d87:	6a 02                	push   $0x2
f0117d89:	50                   	push   %eax
f0117d8a:	e8 1f 31 ff ff       	call   f010aeae <set_program_priority>
f0117d8f:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0117d92:	e8 ed c8 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0117d97:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0117d9a:	74 17                	je     f0117db3 <test_priority_normal_and_lower+0x3af>
f0117d9c:	83 ec 04             	sub    $0x4,%esp
f0117d9f:	68 ec 90 13 f0       	push   $0xf01390ec
f0117da4:	68 1f 01 00 00       	push   $0x11f
f0117da9:	68 69 90 13 f0       	push   $0xf0139069
f0117dae:	e8 fd 83 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Old working set should be removed properly%x\n", (freeFrames - sys_calculate_free_frames()));
f0117db3:	e8 0e 4c ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0117db8:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f0117dbb:	74 21                	je     f0117dde <test_priority_normal_and_lower+0x3da>
f0117dbd:	e8 04 4c ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0117dc2:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0117dc5:	29 c2                	sub    %eax,%edx
f0117dc7:	89 d0                	mov    %edx,%eax
f0117dc9:	50                   	push   %eax
f0117dca:	68 6c 91 13 f0       	push   $0xf013916c
f0117dcf:	68 20 01 00 00       	push   $0x120
f0117dd4:	68 69 90 13 f0       	push   $0xf0139069
f0117dd9:	e8 d2 83 fe ff       	call   f01001b0 <_panic>

		if(addEnv->page_WS_max_size != 10 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f0117dde:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117de1:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117de7:	83 f8 0a             	cmp    $0xa,%eax
f0117dea:	75 1c                	jne    f0117e08 <test_priority_normal_and_lower+0x404>
f0117dec:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117def:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117df5:	83 f8 0f             	cmp    $0xf,%eax
f0117df8:	75 0e                	jne    f0117e08 <test_priority_normal_and_lower+0x404>
f0117dfa:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117dfd:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117e03:	83 f8 14             	cmp    $0x14,%eax
f0117e06:	74 17                	je     f0117e1f <test_priority_normal_and_lower+0x41b>
			panic("The programs' working set size should be doubled only if it is full\n");
f0117e08:	83 ec 04             	sub    $0x4,%esp
f0117e0b:	68 9c 91 13 f0       	push   $0xf013919c
f0117e10:	68 23 01 00 00       	push   $0x123
f0117e15:	68 69 90 13 f0       	push   $0xf0139069
f0117e1a:	e8 91 83 fe ff       	call   f01001b0 <_panic>

		freeFrames = sys_calculate_free_frames();
f0117e1f:	e8 a2 4b ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0117e24:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117e27:	e8 58 c8 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0117e2c:	89 45 bc             	mov    %eax,-0x44(%ebp)

		// Set Priority To Below Normal // Should change only if half is free
		set_program_priority(addEnv, 2);
f0117e2f:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117e32:	83 ec 08             	sub    $0x8,%esp
f0117e35:	6a 02                	push   $0x2
f0117e37:	50                   	push   %eax
f0117e38:	e8 71 30 ff ff       	call   f010aeae <set_program_priority>
f0117e3d:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 2);
f0117e40:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117e43:	83 ec 08             	sub    $0x8,%esp
f0117e46:	6a 02                	push   $0x2
f0117e48:	50                   	push   %eax
f0117e49:	e8 60 30 ff ff       	call   f010aeae <set_program_priority>
f0117e4e:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 2);
f0117e51:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117e54:	83 ec 08             	sub    $0x8,%esp
f0117e57:	6a 02                	push   $0x2
f0117e59:	50                   	push   %eax
f0117e5a:	e8 4f 30 ff ff       	call   f010aeae <set_program_priority>
f0117e5f:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0117e62:	e8 1d c8 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0117e67:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0117e6a:	74 17                	je     f0117e83 <test_priority_normal_and_lower+0x47f>
f0117e6c:	83 ec 04             	sub    $0x4,%esp
f0117e6f:	68 ec 90 13 f0       	push   $0xf01390ec
f0117e74:	68 2d 01 00 00       	push   $0x12d
f0117e79:	68 69 90 13 f0       	push   $0xf0139069
f0117e7e:	e8 2d 83 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Old working set should be removed properly%x\n", (freeFrames - sys_calculate_free_frames()));
f0117e83:	e8 3e 4b ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0117e88:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f0117e8b:	74 21                	je     f0117eae <test_priority_normal_and_lower+0x4aa>
f0117e8d:	e8 34 4b ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0117e92:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0117e95:	29 c2                	sub    %eax,%edx
f0117e97:	89 d0                	mov    %edx,%eax
f0117e99:	50                   	push   %eax
f0117e9a:	68 6c 91 13 f0       	push   $0xf013916c
f0117e9f:	68 2e 01 00 00       	push   $0x12e
f0117ea4:	68 69 90 13 f0       	push   $0xf0139069
f0117ea9:	e8 02 83 fe ff       	call   f01001b0 <_panic>

		if(addEnv->page_WS_max_size != 10 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
f0117eae:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117eb1:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117eb7:	83 f8 0a             	cmp    $0xa,%eax
f0117eba:	75 1c                	jne    f0117ed8 <test_priority_normal_and_lower+0x4d4>
f0117ebc:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117ebf:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117ec5:	83 f8 0f             	cmp    $0xf,%eax
f0117ec8:	75 0e                	jne    f0117ed8 <test_priority_normal_and_lower+0x4d4>
f0117eca:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117ecd:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117ed3:	83 f8 0a             	cmp    $0xa,%eax
f0117ed6:	74 17                	je     f0117eef <test_priority_normal_and_lower+0x4eb>
			panic("The programs' working set size should be doubled only if it is full\n");
f0117ed8:	83 ec 04             	sub    $0x4,%esp
f0117edb:	68 9c 91 13 f0       	push   $0xf013919c
f0117ee0:	68 31 01 00 00       	push   $0x131
f0117ee5:	68 69 90 13 f0       	push   $0xf0139069
f0117eea:	e8 c1 82 fe ff       	call   f01001b0 <_panic>

		for(int i = 0; i < 10; i++)
f0117eef:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f0117ef6:	eb 7d                	jmp    f0117f75 <test_priority_normal_and_lower+0x571>
		{
			if(add_WS[i] != addEnv->ptr_pageWorkingSet[i].virtual_address)
f0117ef8:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0117efb:	8b 8c 85 50 fb ff ff 	mov    -0x4b0(%ebp,%eax,4),%ecx
f0117f02:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f0117f05:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0117f08:	89 d0                	mov    %edx,%eax
f0117f0a:	01 c0                	add    %eax,%eax
f0117f0c:	01 d0                	add    %edx,%eax
f0117f0e:	c1 e0 03             	shl    $0x3,%eax
f0117f11:	01 d8                	add    %ebx,%eax
f0117f13:	05 b8 00 00 00       	add    $0xb8,%eax
f0117f18:	8b 00                	mov    (%eax),%eax
f0117f1a:	39 c1                	cmp    %eax,%ecx
f0117f1c:	74 17                	je     f0117f35 <test_priority_normal_and_lower+0x531>
				panic("Working set should be moved properly to the new one");
f0117f1e:	83 ec 04             	sub    $0x4,%esp
f0117f21:	68 5c 92 13 f0       	push   $0xf013925c
f0117f26:	68 36 01 00 00       	push   $0x136
f0117f2b:	68 69 90 13 f0       	push   $0xf0139069
f0117f30:	e8 7b 82 fe ff       	call   f01001b0 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
f0117f35:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0117f38:	8b 8c 85 a0 fb ff ff 	mov    -0x460(%ebp,%eax,4),%ecx
f0117f3f:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f0117f42:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0117f45:	89 d0                	mov    %edx,%eax
f0117f47:	01 c0                	add    %eax,%eax
f0117f49:	01 d0                	add    %edx,%eax
f0117f4b:	c1 e0 03             	shl    $0x3,%eax
f0117f4e:	01 d8                	add    %ebx,%eax
f0117f50:	05 c0 00 00 00       	add    $0xc0,%eax
f0117f55:	8b 00                	mov    (%eax),%eax
f0117f57:	39 c1                	cmp    %eax,%ecx
f0117f59:	74 17                	je     f0117f72 <test_priority_normal_and_lower+0x56e>
				panic("Working set should be moved properly to the new one");
f0117f5b:	83 ec 04             	sub    $0x4,%esp
f0117f5e:	68 5c 92 13 f0       	push   $0xf013925c
f0117f63:	68 39 01 00 00       	push   $0x139
f0117f68:	68 69 90 13 f0       	push   $0xf0139069
f0117f6d:	e8 3e 82 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Old working set should be removed properly%x\n", (freeFrames - sys_calculate_free_frames()));

		if(addEnv->page_WS_max_size != 10 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
			panic("The programs' working set size should be doubled only if it is full\n");

		for(int i = 0; i < 10; i++)
f0117f72:	ff 45 d8             	incl   -0x28(%ebp)
f0117f75:	83 7d d8 09          	cmpl   $0x9,-0x28(%ebp)
f0117f79:	0f 8e 79 ff ff ff    	jle    f0117ef8 <test_priority_normal_and_lower+0x4f4>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f0117f7f:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f0117f86:	eb 7d                	jmp    f0118005 <test_priority_normal_and_lower+0x601>
		{
			if(fact_WS[i] != factEnv->ptr_pageWorkingSet[i].virtual_address)
f0117f88:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0117f8b:	8b 8c 85 80 fd ff ff 	mov    -0x280(%ebp,%eax,4),%ecx
f0117f92:	8b 5d b4             	mov    -0x4c(%ebp),%ebx
f0117f95:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0117f98:	89 d0                	mov    %edx,%eax
f0117f9a:	01 c0                	add    %eax,%eax
f0117f9c:	01 d0                	add    %edx,%eax
f0117f9e:	c1 e0 03             	shl    $0x3,%eax
f0117fa1:	01 d8                	add    %ebx,%eax
f0117fa3:	05 b8 00 00 00       	add    $0xb8,%eax
f0117fa8:	8b 00                	mov    (%eax),%eax
f0117faa:	39 c1                	cmp    %eax,%ecx
f0117fac:	74 17                	je     f0117fc5 <test_priority_normal_and_lower+0x5c1>
				panic("Working set should be moved properly to the new one");
f0117fae:	83 ec 04             	sub    $0x4,%esp
f0117fb1:	68 5c 92 13 f0       	push   $0xf013925c
f0117fb6:	68 3f 01 00 00       	push   $0x13f
f0117fbb:	68 69 90 13 f0       	push   $0xf0139069
f0117fc0:	e8 eb 81 fe ff       	call   f01001b0 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
f0117fc5:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0117fc8:	8b 8c 85 f8 fd ff ff 	mov    -0x208(%ebp,%eax,4),%ecx
f0117fcf:	8b 5d b4             	mov    -0x4c(%ebp),%ebx
f0117fd2:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0117fd5:	89 d0                	mov    %edx,%eax
f0117fd7:	01 c0                	add    %eax,%eax
f0117fd9:	01 d0                	add    %edx,%eax
f0117fdb:	c1 e0 03             	shl    $0x3,%eax
f0117fde:	01 d8                	add    %ebx,%eax
f0117fe0:	05 c0 00 00 00       	add    $0xc0,%eax
f0117fe5:	8b 00                	mov    (%eax),%eax
f0117fe7:	39 c1                	cmp    %eax,%ecx
f0117fe9:	74 17                	je     f0118002 <test_priority_normal_and_lower+0x5fe>
				panic("Working set should be moved properly to the new one");
f0117feb:	83 ec 04             	sub    $0x4,%esp
f0117fee:	68 5c 92 13 f0       	push   $0xf013925c
f0117ff3:	68 42 01 00 00       	push   $0x142
f0117ff8:	68 69 90 13 f0       	push   $0xf0139069
f0117ffd:	e8 ae 81 fe ff       	call   f01001b0 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f0118002:	ff 45 d4             	incl   -0x2c(%ebp)
f0118005:	83 7d d4 0e          	cmpl   $0xe,-0x2c(%ebp)
f0118009:	0f 8e 79 ff ff ff    	jle    f0117f88 <test_priority_normal_and_lower+0x584>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f011800f:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
f0118016:	eb 7d                	jmp    f0118095 <test_priority_normal_and_lower+0x691>
		{
			if(hello_WS[i] != helloEnv->ptr_pageWorkingSet[i].virtual_address)
f0118018:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011801b:	8b 8c 85 70 fe ff ff 	mov    -0x190(%ebp,%eax,4),%ecx
f0118022:	8b 5d b0             	mov    -0x50(%ebp),%ebx
f0118025:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0118028:	89 d0                	mov    %edx,%eax
f011802a:	01 c0                	add    %eax,%eax
f011802c:	01 d0                	add    %edx,%eax
f011802e:	c1 e0 03             	shl    $0x3,%eax
f0118031:	01 d8                	add    %ebx,%eax
f0118033:	05 b8 00 00 00       	add    $0xb8,%eax
f0118038:	8b 00                	mov    (%eax),%eax
f011803a:	39 c1                	cmp    %eax,%ecx
f011803c:	74 17                	je     f0118055 <test_priority_normal_and_lower+0x651>
				panic("Working set should be moved properly to the new one");
f011803e:	83 ec 04             	sub    $0x4,%esp
f0118041:	68 5c 92 13 f0       	push   $0xf013925c
f0118046:	68 48 01 00 00       	push   $0x148
f011804b:	68 69 90 13 f0       	push   $0xf0139069
f0118050:	e8 5b 81 fe ff       	call   f01001b0 <_panic>

			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
f0118055:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0118058:	8b 8c 85 10 ff ff ff 	mov    -0xf0(%ebp,%eax,4),%ecx
f011805f:	8b 5d b0             	mov    -0x50(%ebp),%ebx
f0118062:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0118065:	89 d0                	mov    %edx,%eax
f0118067:	01 c0                	add    %eax,%eax
f0118069:	01 d0                	add    %edx,%eax
f011806b:	c1 e0 03             	shl    $0x3,%eax
f011806e:	01 d8                	add    %ebx,%eax
f0118070:	05 c0 00 00 00       	add    $0xc0,%eax
f0118075:	8b 00                	mov    (%eax),%eax
f0118077:	39 c1                	cmp    %eax,%ecx
f0118079:	74 17                	je     f0118092 <test_priority_normal_and_lower+0x68e>
				panic("Working set should be moved properly to the new one");
f011807b:	83 ec 04             	sub    $0x4,%esp
f011807e:	68 5c 92 13 f0       	push   $0xf013925c
f0118083:	68 4b 01 00 00       	push   $0x14b
f0118088:	68 69 90 13 f0       	push   $0xf0139069
f011808d:	e8 1e 81 fe ff       	call   f01001b0 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f0118092:	ff 45 d0             	incl   -0x30(%ebp)
f0118095:	83 7d d0 09          	cmpl   $0x9,-0x30(%ebp)
f0118099:	0f 8e 79 ff ff ff    	jle    f0118018 <test_priority_normal_and_lower+0x614>
			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		// Set priority to low
		freeFrames = sys_calculate_free_frames();
f011809f:	e8 22 49 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f01180a4:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01180a7:	e8 d8 c5 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01180ac:	89 45 bc             	mov    %eax,-0x44(%ebp)
		set_program_priority(addEnv, 1);
f01180af:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01180b2:	83 ec 08             	sub    $0x8,%esp
f01180b5:	6a 01                	push   $0x1
f01180b7:	50                   	push   %eax
f01180b8:	e8 f1 2d ff ff       	call   f010aeae <set_program_priority>
f01180bd:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 1);
f01180c0:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01180c3:	83 ec 08             	sub    $0x8,%esp
f01180c6:	6a 01                	push   $0x1
f01180c8:	50                   	push   %eax
f01180c9:	e8 e0 2d ff ff       	call   f010aeae <set_program_priority>
f01180ce:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 1);
f01180d1:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01180d4:	83 ec 08             	sub    $0x8,%esp
f01180d7:	6a 01                	push   $0x1
f01180d9:	50                   	push   %eax
f01180da:	e8 cf 2d ff ff       	call   f010aeae <set_program_priority>
f01180df:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f01180e2:	e8 9d c5 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01180e7:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f01180ea:	74 17                	je     f0118103 <test_priority_normal_and_lower+0x6ff>
f01180ec:	83 ec 04             	sub    $0x4,%esp
f01180ef:	68 ec 90 13 f0       	push   $0xf01390ec
f01180f4:	68 54 01 00 00       	push   $0x154
f01180f9:	68 69 90 13 f0       	push   $0xf0139069
f01180fe:	e8 ad 80 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != (5+3+5)) panic("Old working set and extra pages in WS should be removed properly %d\n");
f0118103:	e8 be 48 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0118108:	2b 45 c0             	sub    -0x40(%ebp),%eax
f011810b:	83 f8 0d             	cmp    $0xd,%eax
f011810e:	74 17                	je     f0118127 <test_priority_normal_and_lower+0x723>
f0118110:	83 ec 04             	sub    $0x4,%esp
f0118113:	68 44 94 13 f0       	push   $0xf0139444
f0118118:	68 55 01 00 00       	push   $0x155
f011811d:	68 69 90 13 f0       	push   $0xf0139069
f0118122:	e8 89 80 fe ff       	call   f01001b0 <_panic>

		if(addEnv->page_WS_max_size != 5 || factEnv->page_WS_max_size != 7 || helloEnv->page_WS_max_size != 5)
f0118127:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011812a:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0118130:	83 f8 05             	cmp    $0x5,%eax
f0118133:	75 1c                	jne    f0118151 <test_priority_normal_and_lower+0x74d>
f0118135:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0118138:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f011813e:	83 f8 07             	cmp    $0x7,%eax
f0118141:	75 0e                	jne    f0118151 <test_priority_normal_and_lower+0x74d>
f0118143:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0118146:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f011814c:	83 f8 05             	cmp    $0x5,%eax
f011814f:	74 17                	je     f0118168 <test_priority_normal_and_lower+0x764>
			panic("The programs' working set size should be half\n");
f0118151:	83 ec 04             	sub    $0x4,%esp
f0118154:	68 8c 94 13 f0       	push   $0xf013948c
f0118159:	68 58 01 00 00       	push   $0x158
f011815e:	68 69 90 13 f0       	push   $0xf0139069
f0118163:	e8 48 80 fe ff       	call   f01001b0 <_panic>


		freeFrames = sys_calculate_free_frames();
f0118168:	e8 59 48 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011816d:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118170:	e8 0f c5 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0118175:	89 45 bc             	mov    %eax,-0x44(%ebp)
		set_program_priority(addEnv, 1);
f0118178:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011817b:	83 ec 08             	sub    $0x8,%esp
f011817e:	6a 01                	push   $0x1
f0118180:	50                   	push   %eax
f0118181:	e8 28 2d ff ff       	call   f010aeae <set_program_priority>
f0118186:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0118189:	e8 f6 c4 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011818e:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0118191:	74 17                	je     f01181aa <test_priority_normal_and_lower+0x7a6>
f0118193:	83 ec 04             	sub    $0x4,%esp
f0118196:	68 ec 90 13 f0       	push   $0xf01390ec
f011819b:	68 5e 01 00 00       	push   $0x15e
f01181a0:	68 69 90 13 f0       	push   $0xf0139069
f01181a5:	e8 06 80 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3) panic("Old working set should be removed properly\n");
f01181aa:	e8 17 48 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f01181af:	2b 45 c0             	sub    -0x40(%ebp),%eax
f01181b2:	83 f8 03             	cmp    $0x3,%eax
f01181b5:	74 17                	je     f01181ce <test_priority_normal_and_lower+0x7ca>
f01181b7:	83 ec 04             	sub    $0x4,%esp
f01181ba:	68 ec 90 13 f0       	push   $0xf01390ec
f01181bf:	68 5f 01 00 00       	push   $0x15f
f01181c4:	68 69 90 13 f0       	push   $0xf0139069
f01181c9:	e8 e2 7f fe ff       	call   f01001b0 <_panic>

		if(addEnv->page_WS_max_size != 2 || factEnv->page_WS_max_size != 7 || helloEnv->page_WS_max_size != 5)
f01181ce:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01181d1:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f01181d7:	83 f8 02             	cmp    $0x2,%eax
f01181da:	75 1c                	jne    f01181f8 <test_priority_normal_and_lower+0x7f4>
f01181dc:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01181df:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f01181e5:	83 f8 07             	cmp    $0x7,%eax
f01181e8:	75 0e                	jne    f01181f8 <test_priority_normal_and_lower+0x7f4>
f01181ea:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01181ed:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f01181f3:	83 f8 05             	cmp    $0x5,%eax
f01181f6:	74 17                	je     f011820f <test_priority_normal_and_lower+0x80b>
			panic("The programs' working set size should be doubled if full\n");
f01181f8:	83 ec 04             	sub    $0x4,%esp
f01181fb:	68 20 92 13 f0       	push   $0xf0139220
f0118200:	68 62 01 00 00       	push   $0x162
f0118205:	68 69 90 13 f0       	push   $0xf0139069
f011820a:	e8 a1 7f fe ff       	call   f01001b0 <_panic>

		for(int i = 0; i < 2; i++)
f011820f:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f0118216:	e9 83 00 00 00       	jmp    f011829e <test_priority_normal_and_lower+0x89a>
		{
			if(add_WS[i+8] != addEnv->ptr_pageWorkingSet[i].virtual_address)
f011821b:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011821e:	83 c0 08             	add    $0x8,%eax
f0118221:	8b 8c 85 50 fb ff ff 	mov    -0x4b0(%ebp,%eax,4),%ecx
f0118228:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f011822b:	8b 55 cc             	mov    -0x34(%ebp),%edx
f011822e:	89 d0                	mov    %edx,%eax
f0118230:	01 c0                	add    %eax,%eax
f0118232:	01 d0                	add    %edx,%eax
f0118234:	c1 e0 03             	shl    $0x3,%eax
f0118237:	01 d8                	add    %ebx,%eax
f0118239:	05 b8 00 00 00       	add    $0xb8,%eax
f011823e:	8b 00                	mov    (%eax),%eax
f0118240:	39 c1                	cmp    %eax,%ecx
f0118242:	74 17                	je     f011825b <test_priority_normal_and_lower+0x857>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0118244:	83 ec 04             	sub    $0x4,%esp
f0118247:	68 bc 94 13 f0       	push   $0xf01394bc
f011824c:	68 67 01 00 00       	push   $0x167
f0118251:	68 69 90 13 f0       	push   $0xf0139069
f0118256:	e8 55 7f fe ff       	call   f01001b0 <_panic>

			if(add_TimeStamp[i+8] != addEnv->ptr_pageWorkingSet[i].time_stamp)
f011825b:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011825e:	83 c0 08             	add    $0x8,%eax
f0118261:	8b 8c 85 a0 fb ff ff 	mov    -0x460(%ebp,%eax,4),%ecx
f0118268:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f011826b:	8b 55 cc             	mov    -0x34(%ebp),%edx
f011826e:	89 d0                	mov    %edx,%eax
f0118270:	01 c0                	add    %eax,%eax
f0118272:	01 d0                	add    %edx,%eax
f0118274:	c1 e0 03             	shl    $0x3,%eax
f0118277:	01 d8                	add    %ebx,%eax
f0118279:	05 c0 00 00 00       	add    $0xc0,%eax
f011827e:	8b 00                	mov    (%eax),%eax
f0118280:	39 c1                	cmp    %eax,%ecx
f0118282:	74 17                	je     f011829b <test_priority_normal_and_lower+0x897>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0118284:	83 ec 04             	sub    $0x4,%esp
f0118287:	68 bc 94 13 f0       	push   $0xf01394bc
f011828c:	68 6a 01 00 00       	push   $0x16a
f0118291:	68 69 90 13 f0       	push   $0xf0139069
f0118296:	e8 15 7f fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 2 || factEnv->page_WS_max_size != 7 || helloEnv->page_WS_max_size != 5)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 0; i < 2; i++)
f011829b:	ff 45 cc             	incl   -0x34(%ebp)
f011829e:	83 7d cc 01          	cmpl   $0x1,-0x34(%ebp)
f01182a2:	0f 8e 73 ff ff ff    	jle    f011821b <test_priority_normal_and_lower+0x817>

			if(add_TimeStamp[i+8] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 7; i++)
f01182a8:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
f01182af:	e9 83 00 00 00       	jmp    f0118337 <test_priority_normal_and_lower+0x933>
		{
			if(fact_WS[i+3] != factEnv->ptr_pageWorkingSet[i].virtual_address)
f01182b4:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01182b7:	83 c0 03             	add    $0x3,%eax
f01182ba:	8b 8c 85 80 fd ff ff 	mov    -0x280(%ebp,%eax,4),%ecx
f01182c1:	8b 5d b4             	mov    -0x4c(%ebp),%ebx
f01182c4:	8b 55 c8             	mov    -0x38(%ebp),%edx
f01182c7:	89 d0                	mov    %edx,%eax
f01182c9:	01 c0                	add    %eax,%eax
f01182cb:	01 d0                	add    %edx,%eax
f01182cd:	c1 e0 03             	shl    $0x3,%eax
f01182d0:	01 d8                	add    %ebx,%eax
f01182d2:	05 b8 00 00 00       	add    $0xb8,%eax
f01182d7:	8b 00                	mov    (%eax),%eax
f01182d9:	39 c1                	cmp    %eax,%ecx
f01182db:	74 17                	je     f01182f4 <test_priority_normal_and_lower+0x8f0>
				panic("%d Working set should be moved properly to the new one, removed pages are chosen based on replacement policy", i);
f01182dd:	ff 75 c8             	pushl  -0x38(%ebp)
f01182e0:	68 28 95 13 f0       	push   $0xf0139528
f01182e5:	68 70 01 00 00       	push   $0x170
f01182ea:	68 69 90 13 f0       	push   $0xf0139069
f01182ef:	e8 bc 7e fe ff       	call   f01001b0 <_panic>

			if(fact_TimeStamp[i+3] != factEnv->ptr_pageWorkingSet[i].time_stamp)
f01182f4:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01182f7:	83 c0 03             	add    $0x3,%eax
f01182fa:	8b 8c 85 f8 fd ff ff 	mov    -0x208(%ebp,%eax,4),%ecx
f0118301:	8b 5d b4             	mov    -0x4c(%ebp),%ebx
f0118304:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0118307:	89 d0                	mov    %edx,%eax
f0118309:	01 c0                	add    %eax,%eax
f011830b:	01 d0                	add    %edx,%eax
f011830d:	c1 e0 03             	shl    $0x3,%eax
f0118310:	01 d8                	add    %ebx,%eax
f0118312:	05 c0 00 00 00       	add    $0xc0,%eax
f0118317:	8b 00                	mov    (%eax),%eax
f0118319:	39 c1                	cmp    %eax,%ecx
f011831b:	74 17                	je     f0118334 <test_priority_normal_and_lower+0x930>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f011831d:	83 ec 04             	sub    $0x4,%esp
f0118320:	68 bc 94 13 f0       	push   $0xf01394bc
f0118325:	68 73 01 00 00       	push   $0x173
f011832a:	68 69 90 13 f0       	push   $0xf0139069
f011832f:	e8 7c 7e fe ff       	call   f01001b0 <_panic>

			if(add_TimeStamp[i+8] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 7; i++)
f0118334:	ff 45 c8             	incl   -0x38(%ebp)
f0118337:	83 7d c8 06          	cmpl   $0x6,-0x38(%ebp)
f011833b:	0f 8e 73 ff ff ff    	jle    f01182b4 <test_priority_normal_and_lower+0x8b0>

			if(fact_TimeStamp[i+3] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 5; i++)
f0118341:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
f0118348:	e9 83 00 00 00       	jmp    f01183d0 <test_priority_normal_and_lower+0x9cc>
		{
			if(hello_WS[i+5] != helloEnv->ptr_pageWorkingSet[i].virtual_address)
f011834d:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0118350:	83 c0 05             	add    $0x5,%eax
f0118353:	8b 8c 85 70 fe ff ff 	mov    -0x190(%ebp,%eax,4),%ecx
f011835a:	8b 5d b0             	mov    -0x50(%ebp),%ebx
f011835d:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0118360:	89 d0                	mov    %edx,%eax
f0118362:	01 c0                	add    %eax,%eax
f0118364:	01 d0                	add    %edx,%eax
f0118366:	c1 e0 03             	shl    $0x3,%eax
f0118369:	01 d8                	add    %ebx,%eax
f011836b:	05 b8 00 00 00       	add    $0xb8,%eax
f0118370:	8b 00                	mov    (%eax),%eax
f0118372:	39 c1                	cmp    %eax,%ecx
f0118374:	74 17                	je     f011838d <test_priority_normal_and_lower+0x989>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0118376:	83 ec 04             	sub    $0x4,%esp
f0118379:	68 bc 94 13 f0       	push   $0xf01394bc
f011837e:	68 79 01 00 00       	push   $0x179
f0118383:	68 69 90 13 f0       	push   $0xf0139069
f0118388:	e8 23 7e fe ff       	call   f01001b0 <_panic>

			if(hello_TimeStamp[i+5] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
f011838d:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0118390:	83 c0 05             	add    $0x5,%eax
f0118393:	8b 8c 85 10 ff ff ff 	mov    -0xf0(%ebp,%eax,4),%ecx
f011839a:	8b 5d b0             	mov    -0x50(%ebp),%ebx
f011839d:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01183a0:	89 d0                	mov    %edx,%eax
f01183a2:	01 c0                	add    %eax,%eax
f01183a4:	01 d0                	add    %edx,%eax
f01183a6:	c1 e0 03             	shl    $0x3,%eax
f01183a9:	01 d8                	add    %ebx,%eax
f01183ab:	05 c0 00 00 00       	add    $0xc0,%eax
f01183b0:	8b 00                	mov    (%eax),%eax
f01183b2:	39 c1                	cmp    %eax,%ecx
f01183b4:	74 17                	je     f01183cd <test_priority_normal_and_lower+0x9c9>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f01183b6:	83 ec 04             	sub    $0x4,%esp
f01183b9:	68 bc 94 13 f0       	push   $0xf01394bc
f01183be:	68 7c 01 00 00       	push   $0x17c
f01183c3:	68 69 90 13 f0       	push   $0xf0139069
f01183c8:	e8 e3 7d fe ff       	call   f01001b0 <_panic>

			if(fact_TimeStamp[i+3] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 5; i++)
f01183cd:	ff 45 c4             	incl   -0x3c(%ebp)
f01183d0:	83 7d c4 04          	cmpl   $0x4,-0x3c(%ebp)
f01183d4:	0f 8e 73 ff ff ff    	jle    f011834d <test_priority_normal_and_lower+0x949>

			if(hello_TimeStamp[i+5] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		set_program_priority(addEnv, 5);
f01183da:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01183dd:	83 ec 08             	sub    $0x8,%esp
f01183e0:	6a 05                	push   $0x5
f01183e2:	50                   	push   %eax
f01183e3:	e8 c6 2a ff ff       	call   f010aeae <set_program_priority>
f01183e8:	83 c4 10             	add    $0x10,%esp
		set_program_priority(addEnv, 5);
f01183eb:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01183ee:	83 ec 08             	sub    $0x8,%esp
f01183f1:	6a 05                	push   $0x5
f01183f3:	50                   	push   %eax
f01183f4:	e8 b5 2a ff ff       	call   f010aeae <set_program_priority>
f01183f9:	83 c4 10             	add    $0x10,%esp

		char command4[100] = "runall";
f01183fc:	c7 85 1c fd ff ff 72 	movl   $0x616e7572,-0x2e4(%ebp)
f0118403:	75 6e 61 
f0118406:	c7 85 20 fd ff ff 6c 	movl   $0x6c6c,-0x2e0(%ebp)
f011840d:	6c 00 00 
f0118410:	8d 95 24 fd ff ff    	lea    -0x2dc(%ebp),%edx
f0118416:	b9 17 00 00 00       	mov    $0x17,%ecx
f011841b:	b8 00 00 00 00       	mov    $0x0,%eax
f0118420:	89 d7                	mov    %edx,%edi
f0118422:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command4);
f0118424:	83 ec 0c             	sub    $0xc,%esp
f0118427:	8d 85 1c fd ff ff    	lea    -0x2e4(%ebp),%eax
f011842d:	50                   	push   %eax
f011842e:	e8 90 97 fe ff       	call   f0101bc3 <execute_command>
f0118433:	83 c4 10             	add    $0x10,%esp
	else
	{
		cprintf("\nCongratulations!! test priority 2 completed successfully.\n");
	}
#endif
}
f0118436:	eb 10                	jmp    f0118448 <test_priority_normal_and_lower+0xa44>
		char command4[100] = "runall";
		execute_command(command4);
	}
	else
	{
		cprintf("\nCongratulations!! test priority 2 completed successfully.\n");
f0118438:	83 ec 0c             	sub    $0xc,%esp
f011843b:	68 98 95 13 f0       	push   $0xf0139598
f0118440:	e8 ec 89 fe ff       	call   f0100e31 <cprintf>
f0118445:	83 c4 10             	add    $0x10,%esp
	}
#endif
}
f0118448:	90                   	nop
f0118449:	8d 65 f4             	lea    -0xc(%ebp),%esp
f011844c:	5b                   	pop    %ebx
f011844d:	5e                   	pop    %esi
f011844e:	5f                   	pop    %edi
f011844f:	5d                   	pop    %ebp
f0118450:	c3                   	ret    

f0118451 <isKHeapPlacementStrategyNEXTFIT>:
f0118451:	55                   	push   %ebp
f0118452:	89 e5                	mov    %esp,%ebp
f0118454:	a1 18 be 2b f0       	mov    0xf02bbe18,%eax
f0118459:	83 f8 03             	cmp    $0x3,%eax
f011845c:	75 04                	jne    f0118462 <isKHeapPlacementStrategyNEXTFIT+0x11>
f011845e:	b0 01                	mov    $0x1,%al
f0118460:	eb 02                	jmp    f0118464 <isKHeapPlacementStrategyNEXTFIT+0x13>
f0118462:	b0 00                	mov    $0x0,%al
f0118464:	5d                   	pop    %ebp
f0118465:	c3                   	ret    

f0118466 <test_kmalloc>:
	int c;
};


int test_kmalloc()
{
f0118466:	55                   	push   %ebp
f0118467:	89 e5                	mov    %esp,%ebp
f0118469:	57                   	push   %edi
f011846a:	53                   	push   %ebx
f011846b:	81 ec 70 01 00 00    	sub    $0x170,%esp
	cprintf("==============================================\n");
f0118471:	83 ec 0c             	sub    $0xc,%esp
f0118474:	68 9c 96 13 f0       	push   $0xf013969c
f0118479:	e8 b3 89 fe ff       	call   f0100e31 <cprintf>
f011847e:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0118481:	83 ec 0c             	sub    $0xc,%esp
f0118484:	68 cc 96 13 f0       	push   $0xf01396cc
f0118489:	e8 a3 89 fe ff       	call   f0100e31 <cprintf>
f011848e:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0118491:	83 ec 0c             	sub    $0xc,%esp
f0118494:	68 9c 96 13 f0       	push   $0xf013969c
f0118499:	e8 93 89 fe ff       	call   f0100e31 <cprintf>
f011849e:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f01184a1:	c6 45 f3 80          	movb   $0x80,-0xd(%ebp)
	char maxByte = 0x7F;
f01184a5:	c6 45 f2 7f          	movb   $0x7f,-0xe(%ebp)
	short minShort = 1<<15 ;
f01184a9:	66 c7 45 f0 00 80    	movw   $0x8000,-0x10(%ebp)
	short maxShort = 0x7FFF;
f01184af:	66 c7 45 ee ff 7f    	movw   $0x7fff,-0x12(%ebp)
	int minInt = 1<<31 ;
f01184b5:	c7 45 e8 00 00 00 80 	movl   $0x80000000,-0x18(%ebp)
	int maxInt = 0x7FFFFFFF;
f01184bc:	c7 45 e4 ff ff ff 7f 	movl   $0x7fffffff,-0x1c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f01184c3:	e8 fe 44 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f01184c8:	89 45 e0             	mov    %eax,-0x20(%ebp)

	void* ptr_allocations[20] = {0};
f01184cb:	8d 95 98 fe ff ff    	lea    -0x168(%ebp),%edx
f01184d1:	b9 14 00 00 00       	mov    $0x14,%ecx
f01184d6:	b8 00 00 00 00       	mov    $0x0,%eax
f01184db:	89 d7                	mov    %edx,%edi
f01184dd:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//Insufficient space
		int freeFrames = sys_calculate_free_frames() ;
f01184df:	e8 e2 44 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f01184e4:	89 45 dc             	mov    %eax,-0x24(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f01184e7:	e8 98 c1 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01184ec:	89 45 d8             	mov    %eax,-0x28(%ebp)
		uint32 sizeOfKHeap = (KERNEL_HEAP_MAX - ACTUAL_START + 1) ;
f01184ef:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f01184f6:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01184fb:	0f b6 d0             	movzbl %al,%edx
f01184fe:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0118501:	01 d0                	add    %edx,%eax
f0118503:	48                   	dec    %eax
f0118504:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0118507:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011850a:	ba 00 00 00 00       	mov    $0x0,%edx
f011850f:	f7 75 d4             	divl   -0x2c(%ebp)
f0118512:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0118515:	29 d0                	sub    %edx,%eax
f0118517:	89 c1                	mov    %eax,%ecx
f0118519:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0118520:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0118525:	0f b6 c0             	movzbl %al,%eax
f0118528:	c1 e0 04             	shl    $0x4,%eax
f011852b:	89 c2                	mov    %eax,%edx
f011852d:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0118530:	01 d0                	add    %edx,%eax
f0118532:	48                   	dec    %eax
f0118533:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0118536:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0118539:	ba 00 00 00 00       	mov    $0x0,%edx
f011853e:	f7 75 cc             	divl   -0x34(%ebp)
f0118541:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0118544:	29 d0                	sub    %edx,%eax
f0118546:	01 c8                	add    %ecx,%eax
f0118548:	ba 01 b0 ff 09       	mov    $0x9ffb001,%edx
f011854d:	29 c2                	sub    %eax,%edx
f011854f:	89 d0                	mov    %edx,%eax
f0118551:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		ptr_allocations[0] = kmalloc(sizeOfKHeap);
f0118554:	83 ec 0c             	sub    $0xc,%esp
f0118557:	ff 75 c4             	pushl  -0x3c(%ebp)
f011855a:	e8 00 fa fe ff       	call   f0107f5f <kmalloc>
f011855f:	83 c4 10             	add    $0x10,%esp
f0118562:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
		if (ptr_allocations[0] != NULL) panic("Allocating insufficient space: should return NULL");
f0118568:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011856e:	85 c0                	test   %eax,%eax
f0118570:	74 14                	je     f0118586 <test_kmalloc+0x120>
f0118572:	83 ec 04             	sub    $0x4,%esp
f0118575:	68 28 97 13 f0       	push   $0xf0139728
f011857a:	6a 40                	push   $0x40
f011857c:	68 5a 97 13 f0       	push   $0xf013975a
f0118581:	e8 2a 7c fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118586:	e8 f9 c0 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011858b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011858e:	74 14                	je     f01185a4 <test_kmalloc+0x13e>
f0118590:	83 ec 04             	sub    $0x4,%esp
f0118593:	68 74 97 13 f0       	push   $0xf0139774
f0118598:	6a 41                	push   $0x41
f011859a:	68 5a 97 13 f0       	push   $0xf013975a
f011859f:	e8 0c 7c fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation: pages are not loaded successfully into memory");
f01185a4:	e8 1d 44 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f01185a9:	89 c2                	mov    %eax,%edx
f01185ab:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01185ae:	39 c2                	cmp    %eax,%edx
f01185b0:	74 14                	je     f01185c6 <test_kmalloc+0x160>
f01185b2:	83 ec 04             	sub    $0x4,%esp
f01185b5:	68 dc 97 13 f0       	push   $0xf01397dc
f01185ba:	6a 42                	push   $0x42
f01185bc:	68 5a 97 13 f0       	push   $0xf013975a
f01185c1:	e8 ea 7b fe ff       	call   f01001b0 <_panic>

		cprintf("\nkmalloc: current evaluation = 10%");
f01185c6:	83 ec 0c             	sub    $0xc,%esp
f01185c9:	68 1c 98 13 f0       	push   $0xf013981c
f01185ce:	e8 5e 88 fe ff       	call   f0100e31 <cprintf>
f01185d3:	83 c4 10             	add    $0x10,%esp
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01185d6:	e8 eb 43 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f01185db:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01185de:	e8 a1 c0 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01185e3:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f01185e6:	83 ec 0c             	sub    $0xc,%esp
f01185e9:	68 00 fc 1f 00       	push   $0x1ffc00
f01185ee:	e8 6c f9 fe ff       	call   f0107f5f <kmalloc>
f01185f3:	83 c4 10             	add    $0x10,%esp
f01185f6:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01185fc:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0118602:	89 c1                	mov    %eax,%ecx
f0118604:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f011860b:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0118610:	0f b6 d0             	movzbl %al,%edx
f0118613:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0118616:	01 d0                	add    %edx,%eax
f0118618:	48                   	dec    %eax
f0118619:	89 45 bc             	mov    %eax,-0x44(%ebp)
f011861c:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011861f:	ba 00 00 00 00       	mov    $0x0,%edx
f0118624:	f7 75 c0             	divl   -0x40(%ebp)
f0118627:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011862a:	29 d0                	sub    %edx,%eax
f011862c:	89 c3                	mov    %eax,%ebx
f011862e:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f0118635:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011863a:	0f b6 c0             	movzbl %al,%eax
f011863d:	c1 e0 04             	shl    $0x4,%eax
f0118640:	89 c2                	mov    %eax,%edx
f0118642:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0118645:	01 d0                	add    %edx,%eax
f0118647:	48                   	dec    %eax
f0118648:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f011864b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011864e:	ba 00 00 00 00       	mov    $0x0,%edx
f0118653:	f7 75 b8             	divl   -0x48(%ebp)
f0118656:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0118659:	29 d0                	sub    %edx,%eax
f011865b:	01 d8                	add    %ebx,%eax
f011865d:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0118662:	39 c1                	cmp    %eax,%ecx
f0118664:	74 14                	je     f011867a <test_kmalloc+0x214>
f0118666:	83 ec 04             	sub    $0x4,%esp
f0118669:	68 40 98 13 f0       	push   $0xf0139840
f011866e:	6a 49                	push   $0x49
f0118670:	68 5a 97 13 f0       	push   $0xf013975a
f0118675:	e8 36 7b fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011867a:	e8 05 c0 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011867f:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0118682:	74 14                	je     f0118698 <test_kmalloc+0x232>
f0118684:	83 ec 04             	sub    $0x4,%esp
f0118687:	68 74 97 13 f0       	push   $0xf0139774
f011868c:	6a 4a                	push   $0x4a
f011868e:	68 5a 97 13 f0       	push   $0xf013975a
f0118693:	e8 18 7b fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118698:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f011869b:	e8 26 43 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f01186a0:	29 c3                	sub    %eax,%ebx
f01186a2:	89 d8                	mov    %ebx,%eax
f01186a4:	3d 00 02 00 00       	cmp    $0x200,%eax
f01186a9:	74 14                	je     f01186bf <test_kmalloc+0x259>
f01186ab:	83 ec 04             	sub    $0x4,%esp
f01186ae:	68 dc 97 13 f0       	push   $0xf01397dc
f01186b3:	6a 4b                	push   $0x4b
f01186b5:	68 5a 97 13 f0       	push   $0xf013975a
f01186ba:	e8 f1 7a fe ff       	call   f01001b0 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01186bf:	e8 02 43 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f01186c4:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01186c7:	e8 b8 bf fe ff       	call   f0104684 <pf_calculate_free_frames>
f01186cc:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f01186cf:	83 ec 0c             	sub    $0xc,%esp
f01186d2:	68 00 fc 1f 00       	push   $0x1ffc00
f01186d7:	e8 83 f8 fe ff       	call   f0107f5f <kmalloc>
f01186dc:	83 c4 10             	add    $0x10,%esp
f01186df:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01186e5:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f01186eb:	89 c1                	mov    %eax,%ecx
f01186ed:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f01186f4:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01186f9:	0f b6 d0             	movzbl %al,%edx
f01186fc:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01186ff:	01 d0                	add    %edx,%eax
f0118701:	48                   	dec    %eax
f0118702:	89 45 ac             	mov    %eax,-0x54(%ebp)
f0118705:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0118708:	ba 00 00 00 00       	mov    $0x0,%edx
f011870d:	f7 75 b0             	divl   -0x50(%ebp)
f0118710:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0118713:	29 d0                	sub    %edx,%eax
f0118715:	89 c3                	mov    %eax,%ebx
f0118717:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f011871e:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0118723:	0f b6 c0             	movzbl %al,%eax
f0118726:	c1 e0 04             	shl    $0x4,%eax
f0118729:	89 c2                	mov    %eax,%edx
f011872b:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011872e:	01 d0                	add    %edx,%eax
f0118730:	48                   	dec    %eax
f0118731:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f0118734:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0118737:	ba 00 00 00 00       	mov    $0x0,%edx
f011873c:	f7 75 a8             	divl   -0x58(%ebp)
f011873f:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0118742:	29 d0                	sub    %edx,%eax
f0118744:	01 d8                	add    %ebx,%eax
f0118746:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011874b:	39 c1                	cmp    %eax,%ecx
f011874d:	74 14                	je     f0118763 <test_kmalloc+0x2fd>
f011874f:	83 ec 04             	sub    $0x4,%esp
f0118752:	68 40 98 13 f0       	push   $0xf0139840
f0118757:	6a 51                	push   $0x51
f0118759:	68 5a 97 13 f0       	push   $0xf013975a
f011875e:	e8 4d 7a fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118763:	e8 1c bf fe ff       	call   f0104684 <pf_calculate_free_frames>
f0118768:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011876b:	74 14                	je     f0118781 <test_kmalloc+0x31b>
f011876d:	83 ec 04             	sub    $0x4,%esp
f0118770:	68 74 97 13 f0       	push   $0xf0139774
f0118775:	6a 52                	push   $0x52
f0118777:	68 5a 97 13 f0       	push   $0xf013975a
f011877c:	e8 2f 7a fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118781:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0118784:	e8 3d 42 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0118789:	29 c3                	sub    %eax,%ebx
f011878b:	89 d8                	mov    %ebx,%eax
f011878d:	3d 00 02 00 00       	cmp    $0x200,%eax
f0118792:	74 14                	je     f01187a8 <test_kmalloc+0x342>
f0118794:	83 ec 04             	sub    $0x4,%esp
f0118797:	68 dc 97 13 f0       	push   $0xf01397dc
f011879c:	6a 53                	push   $0x53
f011879e:	68 5a 97 13 f0       	push   $0xf013975a
f01187a3:	e8 08 7a fe ff       	call   f01001b0 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01187a8:	e8 19 42 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f01187ad:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01187b0:	e8 cf be fe ff       	call   f0104684 <pf_calculate_free_frames>
f01187b5:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f01187b8:	83 ec 0c             	sub    $0xc,%esp
f01187bb:	68 00 08 00 00       	push   $0x800
f01187c0:	e8 9a f7 fe ff       	call   f0107f5f <kmalloc>
f01187c5:	83 c4 10             	add    $0x10,%esp
f01187c8:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01187ce:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f01187d4:	89 c1                	mov    %eax,%ecx
f01187d6:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f01187dd:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01187e2:	0f b6 d0             	movzbl %al,%edx
f01187e5:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01187e8:	01 d0                	add    %edx,%eax
f01187ea:	48                   	dec    %eax
f01187eb:	89 45 9c             	mov    %eax,-0x64(%ebp)
f01187ee:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01187f1:	ba 00 00 00 00       	mov    $0x0,%edx
f01187f6:	f7 75 a0             	divl   -0x60(%ebp)
f01187f9:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01187fc:	29 d0                	sub    %edx,%eax
f01187fe:	89 c3                	mov    %eax,%ebx
f0118800:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f0118807:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011880c:	0f b6 c0             	movzbl %al,%eax
f011880f:	c1 e0 04             	shl    $0x4,%eax
f0118812:	89 c2                	mov    %eax,%edx
f0118814:	8b 45 98             	mov    -0x68(%ebp),%eax
f0118817:	01 d0                	add    %edx,%eax
f0118819:	48                   	dec    %eax
f011881a:	89 45 94             	mov    %eax,-0x6c(%ebp)
f011881d:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0118820:	ba 00 00 00 00       	mov    $0x0,%edx
f0118825:	f7 75 98             	divl   -0x68(%ebp)
f0118828:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011882b:	29 d0                	sub    %edx,%eax
f011882d:	01 d8                	add    %ebx,%eax
f011882f:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0118834:	39 c1                	cmp    %eax,%ecx
f0118836:	74 14                	je     f011884c <test_kmalloc+0x3e6>
f0118838:	83 ec 04             	sub    $0x4,%esp
f011883b:	68 40 98 13 f0       	push   $0xf0139840
f0118840:	6a 59                	push   $0x59
f0118842:	68 5a 97 13 f0       	push   $0xf013975a
f0118847:	e8 64 79 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011884c:	e8 33 be fe ff       	call   f0104684 <pf_calculate_free_frames>
f0118851:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0118854:	74 14                	je     f011886a <test_kmalloc+0x404>
f0118856:	83 ec 04             	sub    $0x4,%esp
f0118859:	68 74 97 13 f0       	push   $0xf0139774
f011885e:	6a 5a                	push   $0x5a
f0118860:	68 5a 97 13 f0       	push   $0xf013975a
f0118865:	e8 46 79 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f011886a:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f011886d:	e8 54 41 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0118872:	29 c3                	sub    %eax,%ebx
f0118874:	89 d8                	mov    %ebx,%eax
f0118876:	83 f8 01             	cmp    $0x1,%eax
f0118879:	74 14                	je     f011888f <test_kmalloc+0x429>
f011887b:	83 ec 04             	sub    $0x4,%esp
f011887e:	68 dc 97 13 f0       	push   $0xf01397dc
f0118883:	6a 5b                	push   $0x5b
f0118885:	68 5a 97 13 f0       	push   $0xf013975a
f011888a:	e8 21 79 fe ff       	call   f01001b0 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011888f:	e8 32 41 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0118894:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118897:	e8 e8 bd fe ff       	call   f0104684 <pf_calculate_free_frames>
f011889c:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f011889f:	83 ec 0c             	sub    $0xc,%esp
f01188a2:	68 00 08 00 00       	push   $0x800
f01188a7:	e8 b3 f6 fe ff       	call   f0107f5f <kmalloc>
f01188ac:	83 c4 10             	add    $0x10,%esp
f01188af:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01188b5:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f01188bb:	89 c1                	mov    %eax,%ecx
f01188bd:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f01188c4:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01188c9:	0f b6 d0             	movzbl %al,%edx
f01188cc:	8b 45 90             	mov    -0x70(%ebp),%eax
f01188cf:	01 d0                	add    %edx,%eax
f01188d1:	48                   	dec    %eax
f01188d2:	89 45 8c             	mov    %eax,-0x74(%ebp)
f01188d5:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01188d8:	ba 00 00 00 00       	mov    $0x0,%edx
f01188dd:	f7 75 90             	divl   -0x70(%ebp)
f01188e0:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01188e3:	29 d0                	sub    %edx,%eax
f01188e5:	89 c3                	mov    %eax,%ebx
f01188e7:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f01188ee:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01188f3:	0f b6 c0             	movzbl %al,%eax
f01188f6:	c1 e0 04             	shl    $0x4,%eax
f01188f9:	89 c2                	mov    %eax,%edx
f01188fb:	8b 45 88             	mov    -0x78(%ebp),%eax
f01188fe:	01 d0                	add    %edx,%eax
f0118900:	48                   	dec    %eax
f0118901:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0118904:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0118907:	ba 00 00 00 00       	mov    $0x0,%edx
f011890c:	f7 75 88             	divl   -0x78(%ebp)
f011890f:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0118912:	29 d0                	sub    %edx,%eax
f0118914:	01 d8                	add    %ebx,%eax
f0118916:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f011891b:	39 c1                	cmp    %eax,%ecx
f011891d:	74 14                	je     f0118933 <test_kmalloc+0x4cd>
f011891f:	83 ec 04             	sub    $0x4,%esp
f0118922:	68 40 98 13 f0       	push   $0xf0139840
f0118927:	6a 61                	push   $0x61
f0118929:	68 5a 97 13 f0       	push   $0xf013975a
f011892e:	e8 7d 78 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118933:	e8 4c bd fe ff       	call   f0104684 <pf_calculate_free_frames>
f0118938:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011893b:	74 14                	je     f0118951 <test_kmalloc+0x4eb>
f011893d:	83 ec 04             	sub    $0x4,%esp
f0118940:	68 74 97 13 f0       	push   $0xf0139774
f0118945:	6a 62                	push   $0x62
f0118947:	68 5a 97 13 f0       	push   $0xf013975a
f011894c:	e8 5f 78 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118951:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0118954:	e8 6d 40 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0118959:	29 c3                	sub    %eax,%ebx
f011895b:	89 d8                	mov    %ebx,%eax
f011895d:	83 f8 01             	cmp    $0x1,%eax
f0118960:	74 14                	je     f0118976 <test_kmalloc+0x510>
f0118962:	83 ec 04             	sub    $0x4,%esp
f0118965:	68 dc 97 13 f0       	push   $0xf01397dc
f011896a:	6a 63                	push   $0x63
f011896c:	68 5a 97 13 f0       	push   $0xf013975a
f0118971:	e8 3a 78 fe ff       	call   f01001b0 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0118976:	e8 4b 40 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011897b:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011897e:	e8 01 bd fe ff       	call   f0104684 <pf_calculate_free_frames>
f0118983:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0118986:	83 ec 0c             	sub    $0xc,%esp
f0118989:	68 00 1c 00 00       	push   $0x1c00
f011898e:	e8 cc f5 fe ff       	call   f0107f5f <kmalloc>
f0118993:	83 c4 10             	add    $0x10,%esp
f0118996:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011899c:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f01189a2:	89 c1                	mov    %eax,%ecx
f01189a4:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f01189ab:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01189b0:	0f b6 d0             	movzbl %al,%edx
f01189b3:	8b 45 80             	mov    -0x80(%ebp),%eax
f01189b6:	01 d0                	add    %edx,%eax
f01189b8:	48                   	dec    %eax
f01189b9:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f01189bf:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01189c5:	ba 00 00 00 00       	mov    $0x0,%edx
f01189ca:	f7 75 80             	divl   -0x80(%ebp)
f01189cd:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01189d3:	29 d0                	sub    %edx,%eax
f01189d5:	89 c3                	mov    %eax,%ebx
f01189d7:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f01189de:	10 00 00 
f01189e1:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01189e6:	0f b6 c0             	movzbl %al,%eax
f01189e9:	c1 e0 04             	shl    $0x4,%eax
f01189ec:	89 c2                	mov    %eax,%edx
f01189ee:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01189f4:	01 d0                	add    %edx,%eax
f01189f6:	48                   	dec    %eax
f01189f7:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f01189fd:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0118a03:	ba 00 00 00 00       	mov    $0x0,%edx
f0118a08:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f0118a0e:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0118a14:	29 d0                	sub    %edx,%eax
f0118a16:	01 d8                	add    %ebx,%eax
f0118a18:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0118a1d:	39 c1                	cmp    %eax,%ecx
f0118a1f:	74 14                	je     f0118a35 <test_kmalloc+0x5cf>
f0118a21:	83 ec 04             	sub    $0x4,%esp
f0118a24:	68 40 98 13 f0       	push   $0xf0139840
f0118a29:	6a 69                	push   $0x69
f0118a2b:	68 5a 97 13 f0       	push   $0xf013975a
f0118a30:	e8 7b 77 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118a35:	e8 4a bc fe ff       	call   f0104684 <pf_calculate_free_frames>
f0118a3a:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0118a3d:	74 14                	je     f0118a53 <test_kmalloc+0x5ed>
f0118a3f:	83 ec 04             	sub    $0x4,%esp
f0118a42:	68 74 97 13 f0       	push   $0xf0139774
f0118a47:	6a 6a                	push   $0x6a
f0118a49:	68 5a 97 13 f0       	push   $0xf013975a
f0118a4e:	e8 5d 77 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118a53:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0118a56:	e8 6b 3f ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0118a5b:	29 c3                	sub    %eax,%ebx
f0118a5d:	89 d8                	mov    %ebx,%eax
f0118a5f:	83 f8 02             	cmp    $0x2,%eax
f0118a62:	74 14                	je     f0118a78 <test_kmalloc+0x612>
f0118a64:	83 ec 04             	sub    $0x4,%esp
f0118a67:	68 dc 97 13 f0       	push   $0xf01397dc
f0118a6c:	6a 6b                	push   $0x6b
f0118a6e:	68 5a 97 13 f0       	push   $0xf013975a
f0118a73:	e8 38 77 fe ff       	call   f01001b0 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0118a78:	e8 49 3f ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0118a7d:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118a80:	e8 ff bb fe ff       	call   f0104684 <pf_calculate_free_frames>
f0118a85:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0118a88:	83 ec 0c             	sub    $0xc,%esp
f0118a8b:	68 00 fc 2f 00       	push   $0x2ffc00
f0118a90:	e8 ca f4 fe ff       	call   f0107f5f <kmalloc>
f0118a95:	83 c4 10             	add    $0x10,%esp
f0118a98:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0118a9e:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f0118aa4:	89 c1                	mov    %eax,%ecx
f0118aa6:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0118aad:	10 00 00 
f0118ab0:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0118ab5:	0f b6 d0             	movzbl %al,%edx
f0118ab8:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0118abe:	01 d0                	add    %edx,%eax
f0118ac0:	48                   	dec    %eax
f0118ac1:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f0118ac7:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0118acd:	ba 00 00 00 00       	mov    $0x0,%edx
f0118ad2:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f0118ad8:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0118ade:	29 d0                	sub    %edx,%eax
f0118ae0:	89 c3                	mov    %eax,%ebx
f0118ae2:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0118ae9:	10 00 00 
f0118aec:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0118af1:	0f b6 c0             	movzbl %al,%eax
f0118af4:	c1 e0 04             	shl    $0x4,%eax
f0118af7:	89 c2                	mov    %eax,%edx
f0118af9:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0118aff:	01 d0                	add    %edx,%eax
f0118b01:	48                   	dec    %eax
f0118b02:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0118b08:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0118b0e:	ba 00 00 00 00       	mov    $0x0,%edx
f0118b13:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0118b19:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0118b1f:	29 d0                	sub    %edx,%eax
f0118b21:	01 d8                	add    %ebx,%eax
f0118b23:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0118b28:	39 c1                	cmp    %eax,%ecx
f0118b2a:	74 14                	je     f0118b40 <test_kmalloc+0x6da>
f0118b2c:	83 ec 04             	sub    $0x4,%esp
f0118b2f:	68 40 98 13 f0       	push   $0xf0139840
f0118b34:	6a 71                	push   $0x71
f0118b36:	68 5a 97 13 f0       	push   $0xf013975a
f0118b3b:	e8 70 76 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118b40:	e8 3f bb fe ff       	call   f0104684 <pf_calculate_free_frames>
f0118b45:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0118b48:	74 14                	je     f0118b5e <test_kmalloc+0x6f8>
f0118b4a:	83 ec 04             	sub    $0x4,%esp
f0118b4d:	68 74 97 13 f0       	push   $0xf0139774
f0118b52:	6a 72                	push   $0x72
f0118b54:	68 5a 97 13 f0       	push   $0xf013975a
f0118b59:	e8 52 76 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118b5e:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0118b61:	e8 60 3e ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0118b66:	29 c3                	sub    %eax,%ebx
f0118b68:	89 d8                	mov    %ebx,%eax
f0118b6a:	3d 00 03 00 00       	cmp    $0x300,%eax
f0118b6f:	74 14                	je     f0118b85 <test_kmalloc+0x71f>
f0118b71:	83 ec 04             	sub    $0x4,%esp
f0118b74:	68 dc 97 13 f0       	push   $0xf01397dc
f0118b79:	6a 73                	push   $0x73
f0118b7b:	68 5a 97 13 f0       	push   $0xf013975a
f0118b80:	e8 2b 76 fe ff       	call   f01001b0 <_panic>

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0118b85:	e8 3c 3e ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0118b8a:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118b8d:	e8 f2 ba fe ff       	call   f0104684 <pf_calculate_free_frames>
f0118b92:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0118b95:	83 ec 0c             	sub    $0xc,%esp
f0118b98:	68 00 fc 5f 00       	push   $0x5ffc00
f0118b9d:	e8 bd f3 fe ff       	call   f0107f5f <kmalloc>
f0118ba2:	83 c4 10             	add    $0x10,%esp
f0118ba5:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0118bab:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0118bb1:	89 c1                	mov    %eax,%ecx
f0118bb3:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f0118bba:	10 00 00 
f0118bbd:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0118bc2:	0f b6 d0             	movzbl %al,%edx
f0118bc5:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0118bcb:	01 d0                	add    %edx,%eax
f0118bcd:	48                   	dec    %eax
f0118bce:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f0118bd4:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0118bda:	ba 00 00 00 00       	mov    $0x0,%edx
f0118bdf:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f0118be5:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0118beb:	29 d0                	sub    %edx,%eax
f0118bed:	89 c3                	mov    %eax,%ebx
f0118bef:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f0118bf6:	10 00 00 
f0118bf9:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0118bfe:	0f b6 c0             	movzbl %al,%eax
f0118c01:	c1 e0 04             	shl    $0x4,%eax
f0118c04:	89 c2                	mov    %eax,%edx
f0118c06:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0118c0c:	01 d0                	add    %edx,%eax
f0118c0e:	48                   	dec    %eax
f0118c0f:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f0118c15:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0118c1b:	ba 00 00 00 00       	mov    $0x0,%edx
f0118c20:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f0118c26:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0118c2c:	29 d0                	sub    %edx,%eax
f0118c2e:	01 d8                	add    %ebx,%eax
f0118c30:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0118c35:	39 c1                	cmp    %eax,%ecx
f0118c37:	74 14                	je     f0118c4d <test_kmalloc+0x7e7>
f0118c39:	83 ec 04             	sub    $0x4,%esp
f0118c3c:	68 40 98 13 f0       	push   $0xf0139840
f0118c41:	6a 79                	push   $0x79
f0118c43:	68 5a 97 13 f0       	push   $0xf013975a
f0118c48:	e8 63 75 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118c4d:	e8 32 ba fe ff       	call   f0104684 <pf_calculate_free_frames>
f0118c52:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0118c55:	74 14                	je     f0118c6b <test_kmalloc+0x805>
f0118c57:	83 ec 04             	sub    $0x4,%esp
f0118c5a:	68 74 97 13 f0       	push   $0xf0139774
f0118c5f:	6a 7a                	push   $0x7a
f0118c61:	68 5a 97 13 f0       	push   $0xf013975a
f0118c66:	e8 45 75 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118c6b:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0118c6e:	e8 53 3d ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0118c73:	29 c3                	sub    %eax,%ebx
f0118c75:	89 d8                	mov    %ebx,%eax
f0118c77:	3d 00 06 00 00       	cmp    $0x600,%eax
f0118c7c:	74 14                	je     f0118c92 <test_kmalloc+0x82c>
f0118c7e:	83 ec 04             	sub    $0x4,%esp
f0118c81:	68 dc 97 13 f0       	push   $0xf01397dc
f0118c86:	6a 7b                	push   $0x7b
f0118c88:	68 5a 97 13 f0       	push   $0xf013975a
f0118c8d:	e8 1e 75 fe ff       	call   f01001b0 <_panic>

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0118c92:	e8 2f 3d ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0118c97:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118c9a:	e8 e5 b9 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0118c9f:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0118ca2:	83 ec 0c             	sub    $0xc,%esp
f0118ca5:	68 00 38 00 00       	push   $0x3800
f0118caa:	e8 b0 f2 fe ff       	call   f0107f5f <kmalloc>
f0118caf:	83 c4 10             	add    $0x10,%esp
f0118cb2:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0118cb8:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0118cbe:	89 c1                	mov    %eax,%ecx
f0118cc0:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f0118cc7:	10 00 00 
f0118cca:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0118ccf:	0f b6 d0             	movzbl %al,%edx
f0118cd2:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0118cd8:	01 d0                	add    %edx,%eax
f0118cda:	48                   	dec    %eax
f0118cdb:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f0118ce1:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0118ce7:	ba 00 00 00 00       	mov    $0x0,%edx
f0118cec:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f0118cf2:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0118cf8:	29 d0                	sub    %edx,%eax
f0118cfa:	89 c3                	mov    %eax,%ebx
f0118cfc:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f0118d03:	10 00 00 
f0118d06:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0118d0b:	0f b6 c0             	movzbl %al,%eax
f0118d0e:	c1 e0 04             	shl    $0x4,%eax
f0118d11:	89 c2                	mov    %eax,%edx
f0118d13:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0118d19:	01 d0                	add    %edx,%eax
f0118d1b:	48                   	dec    %eax
f0118d1c:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f0118d22:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0118d28:	ba 00 00 00 00       	mov    $0x0,%edx
f0118d2d:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f0118d33:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0118d39:	29 d0                	sub    %edx,%eax
f0118d3b:	01 d8                	add    %ebx,%eax
f0118d3d:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0118d42:	39 c1                	cmp    %eax,%ecx
f0118d44:	74 17                	je     f0118d5d <test_kmalloc+0x8f7>
f0118d46:	83 ec 04             	sub    $0x4,%esp
f0118d49:	68 40 98 13 f0       	push   $0xf0139840
f0118d4e:	68 81 00 00 00       	push   $0x81
f0118d53:	68 5a 97 13 f0       	push   $0xf013975a
f0118d58:	e8 53 74 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118d5d:	e8 22 b9 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0118d62:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0118d65:	74 17                	je     f0118d7e <test_kmalloc+0x918>
f0118d67:	83 ec 04             	sub    $0x4,%esp
f0118d6a:	68 74 97 13 f0       	push   $0xf0139774
f0118d6f:	68 82 00 00 00       	push   $0x82
f0118d74:	68 5a 97 13 f0       	push   $0xf013975a
f0118d79:	e8 32 74 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118d7e:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0118d81:	e8 40 3c ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0118d86:	29 c3                	sub    %eax,%ebx
f0118d88:	89 d8                	mov    %ebx,%eax
f0118d8a:	83 f8 04             	cmp    $0x4,%eax
f0118d8d:	74 17                	je     f0118da6 <test_kmalloc+0x940>
f0118d8f:	83 ec 04             	sub    $0x4,%esp
f0118d92:	68 dc 97 13 f0       	push   $0xf01397dc
f0118d97:	68 83 00 00 00       	push   $0x83
f0118d9c:	68 5a 97 13 f0       	push   $0xf013975a
f0118da1:	e8 0a 74 fe ff       	call   f01001b0 <_panic>

		cprintf("\b\b\b50%");
f0118da6:	83 ec 0c             	sub    $0xc,%esp
f0118da9:	68 a6 98 13 f0       	push   $0xf01398a6
f0118dae:	e8 7e 80 fe ff       	call   f0100e31 <cprintf>
f0118db3:	83 c4 10             	add    $0x10,%esp
		//Checking read/write on the allocated spaces
		{
			freeFrames = sys_calculate_free_frames() ;
f0118db6:	e8 0b 3c ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0118dbb:	89 45 dc             	mov    %eax,-0x24(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0118dbe:	e8 c1 b8 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0118dc3:	89 45 d8             	mov    %eax,-0x28(%ebp)

			//Write values
			//In 1st 2 MB
			lastIndexOfByte = (2*Mega-kilo)/sizeof(char) - 1;
f0118dc6:	c7 85 40 ff ff ff ff 	movl   $0x1ffbff,-0xc0(%ebp)
f0118dcd:	fb 1f 00 
			byteArr = (char *) ptr_allocations[0];
f0118dd0:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0118dd6:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
			byteArr[0] = minByte ;
f0118ddc:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0118de2:	8a 55 f3             	mov    -0xd(%ebp),%dl
f0118de5:	88 10                	mov    %dl,(%eax)
			byteArr[lastIndexOfByte] = maxByte ;
f0118de7:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f0118ded:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0118df3:	01 c2                	add    %eax,%edx
f0118df5:	8a 45 f2             	mov    -0xe(%ebp),%al
f0118df8:	88 02                	mov    %al,(%edx)

			//In 2nd 2 MB
			shortArr = (short *) ptr_allocations[1];
f0118dfa:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0118e00:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
			lastIndexOfShort = (2*Mega-kilo)/sizeof(short) - 1;
f0118e06:	c7 85 34 ff ff ff ff 	movl   $0xffdff,-0xcc(%ebp)
f0118e0d:	fd 0f 00 
			shortArr[0] = minShort;
f0118e10:	8b 95 38 ff ff ff    	mov    -0xc8(%ebp),%edx
f0118e16:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0118e19:	66 89 02             	mov    %ax,(%edx)
			shortArr[lastIndexOfShort] = maxShort;
f0118e1c:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0118e22:	01 c0                	add    %eax,%eax
f0118e24:	89 c2                	mov    %eax,%edx
f0118e26:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0118e2c:	01 c2                	add    %eax,%edx
f0118e2e:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f0118e32:	66 89 02             	mov    %ax,(%edx)

			//In next 2 KB
			intArr = (int *) ptr_allocations[2];
f0118e35:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0118e3b:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
			lastIndexOfInt = (2*kilo)/sizeof(int) - 1;
f0118e41:	c7 85 2c ff ff ff ff 	movl   $0x1ff,-0xd4(%ebp)
f0118e48:	01 00 00 
			intArr[0] = minInt;
f0118e4b:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0118e51:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0118e54:	89 10                	mov    %edx,(%eax)
			intArr[lastIndexOfInt] = maxInt;
f0118e56:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0118e5c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0118e63:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0118e69:	01 c2                	add    %eax,%edx
f0118e6b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0118e6e:	89 02                	mov    %eax,(%edx)

			//In 7 KB
			structArr = (struct MyStruct *) ptr_allocations[4];
f0118e70:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0118e76:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
			lastIndexOfStruct = (7*kilo)/sizeof(struct MyStruct) - 1;
f0118e7c:	c7 85 24 ff ff ff 7f 	movl   $0x37f,-0xdc(%ebp)
f0118e83:	03 00 00 
			structArr[0].a = minByte; structArr[0].b = minShort; structArr[0].c = minInt;
f0118e86:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0118e8c:	8a 55 f3             	mov    -0xd(%ebp),%dl
f0118e8f:	88 10                	mov    %dl,(%eax)
f0118e91:	8b 95 28 ff ff ff    	mov    -0xd8(%ebp),%edx
f0118e97:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0118e9a:	66 89 42 02          	mov    %ax,0x2(%edx)
f0118e9e:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0118ea4:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0118ea7:	89 50 04             	mov    %edx,0x4(%eax)
			structArr[lastIndexOfStruct].a = maxByte; structArr[lastIndexOfStruct].b = maxShort; structArr[lastIndexOfStruct].c = maxInt;
f0118eaa:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0118eb0:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0118eb7:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0118ebd:	01 c2                	add    %eax,%edx
f0118ebf:	8a 45 f2             	mov    -0xe(%ebp),%al
f0118ec2:	88 02                	mov    %al,(%edx)
f0118ec4:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0118eca:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0118ed1:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0118ed7:	01 c2                	add    %eax,%edx
f0118ed9:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f0118edd:	66 89 42 02          	mov    %ax,0x2(%edx)
f0118ee1:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0118ee7:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0118eee:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0118ef4:	01 c2                	add    %eax,%edx
f0118ef6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0118ef9:	89 42 04             	mov    %eax,0x4(%edx)

			//In 6 MB
			lastIndexOfByte2 = (6*Mega-kilo)/sizeof(char) - 1;
f0118efc:	c7 85 20 ff ff ff ff 	movl   $0x5ffbff,-0xe0(%ebp)
f0118f03:	fb 5f 00 
			byteArr2 = (char *) ptr_allocations[6];
f0118f06:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0118f0c:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
			byteArr2[0] = minByte ;
f0118f12:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0118f18:	8a 55 f3             	mov    -0xd(%ebp),%dl
f0118f1b:	88 10                	mov    %dl,(%eax)
			byteArr2[lastIndexOfByte2 / 2] = maxByte / 2;
f0118f1d:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0118f23:	89 c2                	mov    %eax,%edx
f0118f25:	c1 ea 1f             	shr    $0x1f,%edx
f0118f28:	01 d0                	add    %edx,%eax
f0118f2a:	d1 f8                	sar    %eax
f0118f2c:	89 c2                	mov    %eax,%edx
f0118f2e:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0118f34:	01 c2                	add    %eax,%edx
f0118f36:	8a 45 f2             	mov    -0xe(%ebp),%al
f0118f39:	88 c1                	mov    %al,%cl
f0118f3b:	c0 e9 07             	shr    $0x7,%cl
f0118f3e:	01 c8                	add    %ecx,%eax
f0118f40:	d0 f8                	sar    %al
f0118f42:	88 02                	mov    %al,(%edx)
			byteArr2[lastIndexOfByte2] = maxByte ;
f0118f44:	8b 95 20 ff ff ff    	mov    -0xe0(%ebp),%edx
f0118f4a:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0118f50:	01 c2                	add    %eax,%edx
f0118f52:	8a 45 f2             	mov    -0xe(%ebp),%al
f0118f55:	88 02                	mov    %al,(%edx)

			//In 14 KB
			shortArr2 = (short *) ptr_allocations[7];
f0118f57:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0118f5d:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
			lastIndexOfShort2 = (14*kilo)/sizeof(short) - 1;
f0118f63:	c7 85 14 ff ff ff ff 	movl   $0x1bff,-0xec(%ebp)
f0118f6a:	1b 00 00 
			shortArr2[0] = minShort;
f0118f6d:	8b 95 18 ff ff ff    	mov    -0xe8(%ebp),%edx
f0118f73:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0118f76:	66 89 02             	mov    %ax,(%edx)
			shortArr2[lastIndexOfShort2] = maxShort;
f0118f79:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0118f7f:	01 c0                	add    %eax,%eax
f0118f81:	89 c2                	mov    %eax,%edx
f0118f83:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0118f89:	01 c2                	add    %eax,%edx
f0118f8b:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f0118f8f:	66 89 02             	mov    %ax,(%edx)

			//Read values: check that the values are successfully written
			if (byteArr[0] 	!= minByte 	|| byteArr[lastIndexOfByte] 	!= maxByte) panic("Wrong allocation: stored values are wrongly changed!");
f0118f92:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0118f98:	8a 00                	mov    (%eax),%al
f0118f9a:	3a 45 f3             	cmp    -0xd(%ebp),%al
f0118f9d:	75 15                	jne    f0118fb4 <test_kmalloc+0xb4e>
f0118f9f:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f0118fa5:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0118fab:	01 d0                	add    %edx,%eax
f0118fad:	8a 00                	mov    (%eax),%al
f0118faf:	3a 45 f2             	cmp    -0xe(%ebp),%al
f0118fb2:	74 17                	je     f0118fcb <test_kmalloc+0xb65>
f0118fb4:	83 ec 04             	sub    $0x4,%esp
f0118fb7:	68 b0 98 13 f0       	push   $0xf01398b0
f0118fbc:	68 b2 00 00 00       	push   $0xb2
f0118fc1:	68 5a 97 13 f0       	push   $0xf013975a
f0118fc6:	e8 e5 71 fe ff       	call   f01001b0 <_panic>
			if (shortArr[0] != minShort || shortArr[lastIndexOfShort] 	!= maxShort) panic("Wrong allocation: stored values are wrongly changed!");
f0118fcb:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0118fd1:	66 8b 00             	mov    (%eax),%ax
f0118fd4:	66 3b 45 f0          	cmp    -0x10(%ebp),%ax
f0118fd8:	75 1b                	jne    f0118ff5 <test_kmalloc+0xb8f>
f0118fda:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0118fe0:	01 c0                	add    %eax,%eax
f0118fe2:	89 c2                	mov    %eax,%edx
f0118fe4:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0118fea:	01 d0                	add    %edx,%eax
f0118fec:	66 8b 00             	mov    (%eax),%ax
f0118fef:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f0118ff3:	74 17                	je     f011900c <test_kmalloc+0xba6>
f0118ff5:	83 ec 04             	sub    $0x4,%esp
f0118ff8:	68 b0 98 13 f0       	push   $0xf01398b0
f0118ffd:	68 b3 00 00 00       	push   $0xb3
f0119002:	68 5a 97 13 f0       	push   $0xf013975a
f0119007:	e8 a4 71 fe ff       	call   f01001b0 <_panic>
			if (intArr[0] 	!= minInt 	|| intArr[lastIndexOfInt] 		!= maxInt) panic("Wrong allocation: stored values are wrongly changed!");
f011900c:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0119012:	8b 00                	mov    (%eax),%eax
f0119014:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0119017:	75 1c                	jne    f0119035 <test_kmalloc+0xbcf>
f0119019:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011901f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0119026:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011902c:	01 d0                	add    %edx,%eax
f011902e:	8b 00                	mov    (%eax),%eax
f0119030:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0119033:	74 17                	je     f011904c <test_kmalloc+0xbe6>
f0119035:	83 ec 04             	sub    $0x4,%esp
f0119038:	68 b0 98 13 f0       	push   $0xf01398b0
f011903d:	68 b4 00 00 00       	push   $0xb4
f0119042:	68 5a 97 13 f0       	push   $0xf013975a
f0119047:	e8 64 71 fe ff       	call   f01001b0 <_panic>

			if (structArr[0].a != minByte 	|| structArr[lastIndexOfStruct].a != maxByte) 	panic("Wrong allocation: stored values are wrongly changed!");
f011904c:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0119052:	8a 00                	mov    (%eax),%al
f0119054:	3a 45 f3             	cmp    -0xd(%ebp),%al
f0119057:	75 1c                	jne    f0119075 <test_kmalloc+0xc0f>
f0119059:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011905f:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0119066:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011906c:	01 d0                	add    %edx,%eax
f011906e:	8a 00                	mov    (%eax),%al
f0119070:	3a 45 f2             	cmp    -0xe(%ebp),%al
f0119073:	74 17                	je     f011908c <test_kmalloc+0xc26>
f0119075:	83 ec 04             	sub    $0x4,%esp
f0119078:	68 b0 98 13 f0       	push   $0xf01398b0
f011907d:	68 b6 00 00 00       	push   $0xb6
f0119082:	68 5a 97 13 f0       	push   $0xf013975a
f0119087:	e8 24 71 fe ff       	call   f01001b0 <_panic>
			if (structArr[0].b != minShort 	|| structArr[lastIndexOfStruct].b != maxShort) 	panic("Wrong allocation: stored values are wrongly changed!");
f011908c:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0119092:	66 8b 40 02          	mov    0x2(%eax),%ax
f0119096:	66 3b 45 f0          	cmp    -0x10(%ebp),%ax
f011909a:	75 1f                	jne    f01190bb <test_kmalloc+0xc55>
f011909c:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01190a2:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f01190a9:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01190af:	01 d0                	add    %edx,%eax
f01190b1:	66 8b 40 02          	mov    0x2(%eax),%ax
f01190b5:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f01190b9:	74 17                	je     f01190d2 <test_kmalloc+0xc6c>
f01190bb:	83 ec 04             	sub    $0x4,%esp
f01190be:	68 b0 98 13 f0       	push   $0xf01398b0
f01190c3:	68 b7 00 00 00       	push   $0xb7
f01190c8:	68 5a 97 13 f0       	push   $0xf013975a
f01190cd:	e8 de 70 fe ff       	call   f01001b0 <_panic>
			if (structArr[0].c != minInt 	|| structArr[lastIndexOfStruct].c != maxInt) 	panic("Wrong allocation: stored values are wrongly changed!");
f01190d2:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01190d8:	8b 40 04             	mov    0x4(%eax),%eax
f01190db:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f01190de:	75 1d                	jne    f01190fd <test_kmalloc+0xc97>
f01190e0:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01190e6:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f01190ed:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01190f3:	01 d0                	add    %edx,%eax
f01190f5:	8b 40 04             	mov    0x4(%eax),%eax
f01190f8:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f01190fb:	74 17                	je     f0119114 <test_kmalloc+0xcae>
f01190fd:	83 ec 04             	sub    $0x4,%esp
f0119100:	68 b0 98 13 f0       	push   $0xf01398b0
f0119105:	68 b8 00 00 00       	push   $0xb8
f011910a:	68 5a 97 13 f0       	push   $0xf013975a
f011910f:	e8 9c 70 fe ff       	call   f01001b0 <_panic>

			if (byteArr2[0] != minByte || byteArr2[lastIndexOfByte2/2] != maxByte/2 || byteArr2[lastIndexOfByte2] != maxByte) panic("Wrong allocation: stored values are wrongly changed!");
f0119114:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011911a:	8a 00                	mov    (%eax),%al
f011911c:	3a 45 f3             	cmp    -0xd(%ebp),%al
f011911f:	75 40                	jne    f0119161 <test_kmalloc+0xcfb>
f0119121:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0119127:	89 c2                	mov    %eax,%edx
f0119129:	c1 ea 1f             	shr    $0x1f,%edx
f011912c:	01 d0                	add    %edx,%eax
f011912e:	d1 f8                	sar    %eax
f0119130:	89 c2                	mov    %eax,%edx
f0119132:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0119138:	01 d0                	add    %edx,%eax
f011913a:	8a 10                	mov    (%eax),%dl
f011913c:	8a 45 f2             	mov    -0xe(%ebp),%al
f011913f:	88 c1                	mov    %al,%cl
f0119141:	c0 e9 07             	shr    $0x7,%cl
f0119144:	01 c8                	add    %ecx,%eax
f0119146:	d0 f8                	sar    %al
f0119148:	38 c2                	cmp    %al,%dl
f011914a:	75 15                	jne    f0119161 <test_kmalloc+0xcfb>
f011914c:	8b 95 20 ff ff ff    	mov    -0xe0(%ebp),%edx
f0119152:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0119158:	01 d0                	add    %edx,%eax
f011915a:	8a 00                	mov    (%eax),%al
f011915c:	3a 45 f2             	cmp    -0xe(%ebp),%al
f011915f:	74 17                	je     f0119178 <test_kmalloc+0xd12>
f0119161:	83 ec 04             	sub    $0x4,%esp
f0119164:	68 b0 98 13 f0       	push   $0xf01398b0
f0119169:	68 ba 00 00 00       	push   $0xba
f011916e:	68 5a 97 13 f0       	push   $0xf013975a
f0119173:	e8 38 70 fe ff       	call   f01001b0 <_panic>
			if (shortArr2[0] != minShort || shortArr2[lastIndexOfShort2] != maxShort) panic("Wrong allocation: stored values are wrongly changed!");
f0119178:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011917e:	66 8b 00             	mov    (%eax),%ax
f0119181:	66 3b 45 f0          	cmp    -0x10(%ebp),%ax
f0119185:	75 1b                	jne    f01191a2 <test_kmalloc+0xd3c>
f0119187:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011918d:	01 c0                	add    %eax,%eax
f011918f:	89 c2                	mov    %eax,%edx
f0119191:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0119197:	01 d0                	add    %edx,%eax
f0119199:	66 8b 00             	mov    (%eax),%ax
f011919c:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f01191a0:	74 17                	je     f01191b9 <test_kmalloc+0xd53>
f01191a2:	83 ec 04             	sub    $0x4,%esp
f01191a5:	68 b0 98 13 f0       	push   $0xf01398b0
f01191aa:	68 bb 00 00 00       	push   $0xbb
f01191af:	68 5a 97 13 f0       	push   $0xf013975a
f01191b4:	e8 f7 6f fe ff       	call   f01001b0 <_panic>

			if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation: pages are not loaded successfully into memory");
f01191b9:	e8 08 38 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f01191be:	89 c2                	mov    %eax,%edx
f01191c0:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01191c3:	39 c2                	cmp    %eax,%edx
f01191c5:	74 17                	je     f01191de <test_kmalloc+0xd78>
f01191c7:	83 ec 04             	sub    $0x4,%esp
f01191ca:	68 dc 97 13 f0       	push   $0xf01397dc
f01191cf:	68 bd 00 00 00       	push   $0xbd
f01191d4:	68 5a 97 13 f0       	push   $0xf013975a
f01191d9:	e8 d2 6f fe ff       	call   f01001b0 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01191de:	e8 a1 b4 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01191e3:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01191e6:	74 17                	je     f01191ff <test_kmalloc+0xd99>
f01191e8:	83 ec 04             	sub    $0x4,%esp
f01191eb:	68 74 97 13 f0       	push   $0xf0139774
f01191f0:	68 be 00 00 00       	push   $0xbe
f01191f5:	68 5a 97 13 f0       	push   $0xf013975a
f01191fa:	e8 b1 6f fe ff       	call   f01001b0 <_panic>
		}

		cprintf("\b\b\b80%");
f01191ff:	83 ec 0c             	sub    $0xc,%esp
f0119202:	68 e5 98 13 f0       	push   $0xf01398e5
f0119207:	e8 25 7c fe ff       	call   f0100e31 <cprintf>
f011920c:	83 c4 10             	add    $0x10,%esp

		//Insufficient space again
		freeFrames = sys_calculate_free_frames() ;
f011920f:	e8 b2 37 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0119214:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0119217:	e8 68 b4 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011921c:	89 45 d8             	mov    %eax,-0x28(%ebp)
		uint32 restOfKHeap = (KERNEL_HEAP_MAX - ACTUAL_START + 2*PAGE_SIZE) - (2*Mega+2*Mega+4*kilo+4*kilo+8*kilo+3*Mega+6*Mega+16*kilo) ;
f011921f:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f0119226:	10 00 00 
f0119229:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011922e:	0f b6 d0             	movzbl %al,%edx
f0119231:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0119237:	01 d0                	add    %edx,%eax
f0119239:	48                   	dec    %eax
f011923a:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f0119240:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0119246:	ba 00 00 00 00       	mov    $0x0,%edx
f011924b:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f0119251:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0119257:	29 d0                	sub    %edx,%eax
f0119259:	89 c1                	mov    %eax,%ecx
f011925b:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f0119262:	10 00 00 
f0119265:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011926a:	0f b6 c0             	movzbl %al,%eax
f011926d:	c1 e0 04             	shl    $0x4,%eax
f0119270:	89 c2                	mov    %eax,%edx
f0119272:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0119278:	01 d0                	add    %edx,%eax
f011927a:	48                   	dec    %eax
f011927b:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f0119281:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0119287:	ba 00 00 00 00       	mov    $0x0,%edx
f011928c:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f0119292:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0119298:	29 d0                	sub    %edx,%eax
f011929a:	01 c8                	add    %ecx,%eax
f011929c:	ba 00 50 2f 09       	mov    $0x92f5000,%edx
f01192a1:	29 c2                	sub    %eax,%edx
f01192a3:	89 d0                	mov    %edx,%eax
f01192a5:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		ptr_allocations[8] = kmalloc(restOfKHeap);
f01192ab:	83 ec 0c             	sub    $0xc,%esp
f01192ae:	ff b5 00 ff ff ff    	pushl  -0x100(%ebp)
f01192b4:	e8 a6 ec fe ff       	call   f0107f5f <kmalloc>
f01192b9:	83 c4 10             	add    $0x10,%esp
f01192bc:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
		if (ptr_allocations[8] != NULL) panic("Allocating insufficient space: should return NULL");
f01192c2:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f01192c8:	85 c0                	test   %eax,%eax
f01192ca:	74 17                	je     f01192e3 <test_kmalloc+0xe7d>
f01192cc:	83 ec 04             	sub    $0x4,%esp
f01192cf:	68 28 97 13 f0       	push   $0xf0139728
f01192d4:	68 c8 00 00 00       	push   $0xc8
f01192d9:	68 5a 97 13 f0       	push   $0xf013975a
f01192de:	e8 cd 6e fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01192e3:	e8 9c b3 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01192e8:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01192eb:	74 17                	je     f0119304 <test_kmalloc+0xe9e>
f01192ed:	83 ec 04             	sub    $0x4,%esp
f01192f0:	68 74 97 13 f0       	push   $0xf0139774
f01192f5:	68 c9 00 00 00       	push   $0xc9
f01192fa:	68 5a 97 13 f0       	push   $0xf013975a
f01192ff:	e8 ac 6e fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation: pages are not loaded successfully into memory");
f0119304:	e8 bd 36 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0119309:	89 c2                	mov    %eax,%edx
f011930b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011930e:	39 c2                	cmp    %eax,%edx
f0119310:	74 17                	je     f0119329 <test_kmalloc+0xec3>
f0119312:	83 ec 04             	sub    $0x4,%esp
f0119315:	68 dc 97 13 f0       	push   $0xf01397dc
f011931a:	68 ca 00 00 00       	push   $0xca
f011931f:	68 5a 97 13 f0       	push   $0xf013975a
f0119324:	e8 87 6e fe ff       	call   f01001b0 <_panic>

		cprintf("\b\b\b90%");
f0119329:	83 ec 0c             	sub    $0xc,%esp
f011932c:	68 ec 98 13 f0       	push   $0xf01398ec
f0119331:	e8 fb 7a fe ff       	call   f0100e31 <cprintf>
f0119336:	83 c4 10             	add    $0x10,%esp

		//permissions
		uint32 lastAllocAddress = (uint32)ptr_allocations[7] + 16*kilo ;
f0119339:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011933f:	05 00 40 00 00       	add    $0x4000,%eax
f0119344:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
		uint32 va;
		for (va = ACTUAL_START; va < lastAllocAddress; va+=PAGE_SIZE)
f011934a:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f0119351:	10 00 00 
f0119354:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0119359:	0f b6 d0             	movzbl %al,%edx
f011935c:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0119362:	01 d0                	add    %edx,%eax
f0119364:	48                   	dec    %eax
f0119365:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f011936b:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0119371:	ba 00 00 00 00       	mov    $0x0,%edx
f0119376:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f011937c:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0119382:	29 d0                	sub    %edx,%eax
f0119384:	89 c1                	mov    %eax,%ecx
f0119386:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f011938d:	10 00 00 
f0119390:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0119395:	0f b6 c0             	movzbl %al,%eax
f0119398:	c1 e0 04             	shl    $0x4,%eax
f011939b:	89 c2                	mov    %eax,%edx
f011939d:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f01193a3:	01 d0                	add    %edx,%eax
f01193a5:	48                   	dec    %eax
f01193a6:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f01193ac:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f01193b2:	ba 00 00 00 00       	mov    $0x0,%edx
f01193b7:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f01193bd:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f01193c3:	29 d0                	sub    %edx,%eax
f01193c5:	01 c8                	add    %ecx,%eax
f01193c7:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f01193cc:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01193cf:	eb 6a                	jmp    f011943b <test_kmalloc+0xfd5>
		{
			unsigned int * table;
			get_page_table(ptr_page_directory, va, &table);
f01193d1:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f01193d6:	83 ec 04             	sub    $0x4,%esp
f01193d9:	8d 95 94 fe ff ff    	lea    -0x16c(%ebp),%edx
f01193df:	52                   	push   %edx
f01193e0:	ff 75 f4             	pushl  -0xc(%ebp)
f01193e3:	50                   	push   %eax
f01193e4:	e8 fe e0 fe ff       	call   f01074e7 <get_page_table>
f01193e9:	83 c4 10             	add    $0x10,%esp
			uint32 perm = table[PTX(va)] & 0xFFF;
f01193ec:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f01193f2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01193f5:	c1 ea 0c             	shr    $0xc,%edx
f01193f8:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01193fe:	c1 e2 02             	shl    $0x2,%edx
f0119401:	01 d0                	add    %edx,%eax
f0119403:	8b 00                	mov    (%eax),%eax
f0119405:	25 ff 0f 00 00       	and    $0xfff,%eax
f011940a:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
			if ((perm & PERM_USER) == PERM_USER)
f0119410:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0119416:	83 e0 04             	and    $0x4,%eax
f0119419:	85 c0                	test   %eax,%eax
f011941b:	74 17                	je     f0119434 <test_kmalloc+0xfce>
				panic("Wrong permissions: pages should be mapped with Supervisor permission only");
f011941d:	83 ec 04             	sub    $0x4,%esp
f0119420:	68 f4 98 13 f0       	push   $0xf01398f4
f0119425:	68 d7 00 00 00       	push   $0xd7
f011942a:	68 5a 97 13 f0       	push   $0xf013975a
f011942f:	e8 7c 6d fe ff       	call   f01001b0 <_panic>
		cprintf("\b\b\b90%");

		//permissions
		uint32 lastAllocAddress = (uint32)ptr_allocations[7] + 16*kilo ;
		uint32 va;
		for (va = ACTUAL_START; va < lastAllocAddress; va+=PAGE_SIZE)
f0119434:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f011943b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011943e:	3b 85 fc fe ff ff    	cmp    -0x104(%ebp),%eax
f0119444:	72 8b                	jb     f01193d1 <test_kmalloc+0xf6b>
			uint32 perm = table[PTX(va)] & 0xFFF;
			if ((perm & PERM_USER) == PERM_USER)
				panic("Wrong permissions: pages should be mapped with Supervisor permission only");
		}

		cprintf("\b\b\b100%\n");
f0119446:	83 ec 0c             	sub    $0xc,%esp
f0119449:	68 3e 99 13 f0       	push   $0xf013993e
f011944e:	e8 de 79 fe ff       	call   f0100e31 <cprintf>
f0119453:	83 c4 10             	add    $0x10,%esp

	}

	cprintf("\nCongratulations!! test kmalloc completed successfully.\n");
f0119456:	83 ec 0c             	sub    $0xc,%esp
f0119459:	68 48 99 13 f0       	push   $0xf0139948
f011945e:	e8 ce 79 fe ff       	call   f0100e31 <cprintf>
f0119463:	83 c4 10             	add    $0x10,%esp

	return 1;
f0119466:	b8 01 00 00 00       	mov    $0x1,%eax

}
f011946b:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011946e:	5b                   	pop    %ebx
f011946f:	5f                   	pop    %edi
f0119470:	5d                   	pop    %ebp
f0119471:	c3                   	ret    

f0119472 <test_kmalloc_nextfit>:

int test_kmalloc_nextfit()
{
f0119472:	55                   	push   %ebp
f0119473:	89 e5                	mov    %esp,%ebp
f0119475:	57                   	push   %edi
f0119476:	53                   	push   %ebx
f0119477:	81 ec d0 03 00 00    	sub    $0x3d0,%esp
	cprintf("==============================================\n");
f011947d:	83 ec 0c             	sub    $0xc,%esp
f0119480:	68 9c 96 13 f0       	push   $0xf013969c
f0119485:	e8 a7 79 fe ff       	call   f0100e31 <cprintf>
f011948a:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011948d:	83 ec 0c             	sub    $0xc,%esp
f0119490:	68 cc 96 13 f0       	push   $0xf01396cc
f0119495:	e8 97 79 fe ff       	call   f0100e31 <cprintf>
f011949a:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011949d:	83 ec 0c             	sub    $0xc,%esp
f01194a0:	68 9c 96 13 f0       	push   $0xf013969c
f01194a5:	e8 87 79 fe ff       	call   f0100e31 <cprintf>
f01194aa:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[160] = {0};
f01194ad:	8d 95 28 fc ff ff    	lea    -0x3d8(%ebp),%edx
f01194b3:	b9 a0 00 00 00       	mov    $0xa0,%ecx
f01194b8:	b8 00 00 00 00       	mov    $0x0,%eax
f01194bd:	89 d7                	mov    %edx,%edi
f01194bf:	f3 ab                	rep stos %eax,%es:(%edi)
	cprintf("This test has THREE cases. A pass message will be displayed after each one.\n");
f01194c1:	83 ec 0c             	sub    $0xc,%esp
f01194c4:	68 84 99 13 f0       	push   $0xf0139984
f01194c9:	e8 63 79 fe ff       	call   f0100e31 <cprintf>
f01194ce:	83 c4 10             	add    $0x10,%esp

	// allocate pages
	int freeFrames = sys_calculate_free_frames() ;
f01194d1:	e8 f0 34 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f01194d6:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int freeDiskFrames = pf_calculate_free_frames() ;
f01194d9:	e8 a6 b1 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01194de:	89 45 ec             	mov    %eax,-0x14(%ebp)

	int i;
	//ptr_allocations[0] = kmalloc(2*Mega - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);
	for(i = 0; i< 79 ;i++)
f01194e1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01194e8:	eb 1f                	jmp    f0119509 <test_kmalloc_nextfit+0x97>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
f01194ea:	83 ec 0c             	sub    $0xc,%esp
f01194ed:	68 00 00 20 00       	push   $0x200000
f01194f2:	e8 68 ea fe ff       	call   f0107f5f <kmalloc>
f01194f7:	83 c4 10             	add    $0x10,%esp
f01194fa:	89 c2                	mov    %eax,%edx
f01194fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01194ff:	89 94 85 28 fc ff ff 	mov    %edx,-0x3d8(%ebp,%eax,4)
	int freeFrames = sys_calculate_free_frames() ;
	int freeDiskFrames = pf_calculate_free_frames() ;

	int i;
	//ptr_allocations[0] = kmalloc(2*Mega - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);
	for(i = 0; i< 79 ;i++)
f0119506:	ff 45 f4             	incl   -0xc(%ebp)
f0119509:	83 7d f4 4e          	cmpl   $0x4e,-0xc(%ebp)
f011950d:	7e db                	jle    f01194ea <test_kmalloc_nextfit+0x78>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS);
f011950f:	c7 45 e8 00 10 00 00 	movl   $0x1000,-0x18(%ebp)
f0119516:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011951b:	0f b6 d0             	movzbl %al,%edx
f011951e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0119521:	01 d0                	add    %edx,%eax
f0119523:	48                   	dec    %eax
f0119524:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0119527:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011952a:	ba 00 00 00 00       	mov    $0x0,%edx
f011952f:	f7 75 e8             	divl   -0x18(%ebp)
f0119532:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0119535:	29 d0                	sub    %edx,%eax
f0119537:	89 c1                	mov    %eax,%ecx
f0119539:	c7 45 e0 00 10 00 00 	movl   $0x1000,-0x20(%ebp)
f0119540:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0119545:	0f b6 c0             	movzbl %al,%eax
f0119548:	c1 e0 04             	shl    $0x4,%eax
f011954b:	89 c2                	mov    %eax,%edx
f011954d:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0119550:	01 d0                	add    %edx,%eax
f0119552:	48                   	dec    %eax
f0119553:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0119556:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0119559:	ba 00 00 00 00       	mov    $0x0,%edx
f011955e:	f7 75 e0             	divl   -0x20(%ebp)
f0119561:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0119564:	29 d0                	sub    %edx,%eax
f0119566:	01 c8                	add    %ecx,%eax
f0119568:	ba 00 b0 1f 00       	mov    $0x1fb000,%edx
f011956d:	29 c2                	sub    %eax,%edx
f011956f:	89 d0                	mov    %edx,%eax
f0119571:	83 ec 0c             	sub    $0xc,%esp
f0119574:	50                   	push   %eax
f0119575:	e8 e5 e9 fe ff       	call   f0107f5f <kmalloc>
f011957a:	83 c4 10             	add    $0x10,%esp
f011957d:	89 85 64 fd ff ff    	mov    %eax,-0x29c(%ebp)


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f0119583:	8b 85 28 fc ff ff    	mov    -0x3d8(%ebp),%eax
f0119589:	89 c1                	mov    %eax,%ecx
f011958b:	c7 45 d8 00 10 00 00 	movl   $0x1000,-0x28(%ebp)
f0119592:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0119597:	0f b6 d0             	movzbl %al,%edx
f011959a:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011959d:	01 d0                	add    %edx,%eax
f011959f:	48                   	dec    %eax
f01195a0:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f01195a3:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01195a6:	ba 00 00 00 00       	mov    $0x0,%edx
f01195ab:	f7 75 d8             	divl   -0x28(%ebp)
f01195ae:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01195b1:	29 d0                	sub    %edx,%eax
f01195b3:	89 c3                	mov    %eax,%ebx
f01195b5:	c7 45 d0 00 10 00 00 	movl   $0x1000,-0x30(%ebp)
f01195bc:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01195c1:	0f b6 c0             	movzbl %al,%eax
f01195c4:	c1 e0 04             	shl    $0x4,%eax
f01195c7:	89 c2                	mov    %eax,%edx
f01195c9:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01195cc:	01 d0                	add    %edx,%eax
f01195ce:	48                   	dec    %eax
f01195cf:	89 45 cc             	mov    %eax,-0x34(%ebp)
f01195d2:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01195d5:	ba 00 00 00 00       	mov    $0x0,%edx
f01195da:	f7 75 d0             	divl   -0x30(%ebp)
f01195dd:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01195e0:	29 d0                	sub    %edx,%eax
f01195e2:	01 d8                	add    %ebx,%eax
f01195e4:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f01195e9:	39 c1                	cmp    %eax,%ecx
f01195eb:	0f 85 4f 03 00 00    	jne    f0119940 <test_kmalloc_nextfit+0x4ce>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f01195f1:	8b 85 30 fc ff ff    	mov    -0x3d0(%ebp),%eax
f01195f7:	89 c1                	mov    %eax,%ecx
f01195f9:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f0119600:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0119605:	0f b6 d0             	movzbl %al,%edx
f0119608:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011960b:	01 d0                	add    %edx,%eax
f011960d:	48                   	dec    %eax
f011960e:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f0119611:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0119614:	ba 00 00 00 00       	mov    $0x0,%edx
f0119619:	f7 75 c8             	divl   -0x38(%ebp)
f011961c:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011961f:	29 d0                	sub    %edx,%eax
f0119621:	89 c3                	mov    %eax,%ebx
f0119623:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f011962a:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011962f:	0f b6 c0             	movzbl %al,%eax
f0119632:	c1 e0 04             	shl    $0x4,%eax
f0119635:	89 c2                	mov    %eax,%edx
f0119637:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011963a:	01 d0                	add    %edx,%eax
f011963c:	48                   	dec    %eax
f011963d:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0119640:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0119643:	ba 00 00 00 00       	mov    $0x0,%edx
f0119648:	f7 75 c0             	divl   -0x40(%ebp)
f011964b:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011964e:	29 d0                	sub    %edx,%eax
f0119650:	01 d8                	add    %ebx,%eax
f0119652:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS);


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f0119657:	39 c1                	cmp    %eax,%ecx
f0119659:	0f 85 e1 02 00 00    	jne    f0119940 <test_kmalloc_nextfit+0x4ce>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f011965f:	8b 85 48 fc ff ff    	mov    -0x3b8(%ebp),%eax
f0119665:	89 c1                	mov    %eax,%ecx
f0119667:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f011966e:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0119673:	0f b6 d0             	movzbl %al,%edx
f0119676:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0119679:	01 d0                	add    %edx,%eax
f011967b:	48                   	dec    %eax
f011967c:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f011967f:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0119682:	ba 00 00 00 00       	mov    $0x0,%edx
f0119687:	f7 75 b8             	divl   -0x48(%ebp)
f011968a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011968d:	29 d0                	sub    %edx,%eax
f011968f:	89 c3                	mov    %eax,%ebx
f0119691:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f0119698:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011969d:	0f b6 c0             	movzbl %al,%eax
f01196a0:	c1 e0 04             	shl    $0x4,%eax
f01196a3:	89 c2                	mov    %eax,%edx
f01196a5:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01196a8:	01 d0                	add    %edx,%eax
f01196aa:	48                   	dec    %eax
f01196ab:	89 45 ac             	mov    %eax,-0x54(%ebp)
f01196ae:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01196b1:	ba 00 00 00 00       	mov    $0x0,%edx
f01196b6:	f7 75 b0             	divl   -0x50(%ebp)
f01196b9:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01196bc:	29 d0                	sub    %edx,%eax
f01196be:	01 d8                	add    %ebx,%eax
f01196c0:	2d 00 c0 ff 08       	sub    $0x8ffc000,%eax
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS);


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f01196c5:	39 c1                	cmp    %eax,%ecx
f01196c7:	0f 85 73 02 00 00    	jne    f0119940 <test_kmalloc_nextfit+0x4ce>
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f01196cd:	8b 85 50 fc ff ff    	mov    -0x3b0(%ebp),%eax
f01196d3:	89 c1                	mov    %eax,%ecx
f01196d5:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f01196dc:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01196e1:	0f b6 d0             	movzbl %al,%edx
f01196e4:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01196e7:	01 d0                	add    %edx,%eax
f01196e9:	48                   	dec    %eax
f01196ea:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f01196ed:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01196f0:	ba 00 00 00 00       	mov    $0x0,%edx
f01196f5:	f7 75 a8             	divl   -0x58(%ebp)
f01196f8:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01196fb:	29 d0                	sub    %edx,%eax
f01196fd:	89 c3                	mov    %eax,%ebx
f01196ff:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0119706:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011970b:	0f b6 c0             	movzbl %al,%eax
f011970e:	c1 e0 04             	shl    $0x4,%eax
f0119711:	89 c2                	mov    %eax,%edx
f0119713:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0119716:	01 d0                	add    %edx,%eax
f0119718:	48                   	dec    %eax
f0119719:	89 45 9c             	mov    %eax,-0x64(%ebp)
f011971c:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011971f:	ba 00 00 00 00       	mov    $0x0,%edx
f0119724:	f7 75 a0             	divl   -0x60(%ebp)
f0119727:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011972a:	29 d0                	sub    %edx,%eax
f011972c:	01 d8                	add    %ebx,%eax
f011972e:	2d 00 c0 bf 08       	sub    $0x8bfc000,%eax


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f0119733:	39 c1                	cmp    %eax,%ecx
f0119735:	0f 85 05 02 00 00    	jne    f0119940 <test_kmalloc_nextfit+0x4ce>
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f011973b:	8b 85 64 fc ff ff    	mov    -0x39c(%ebp),%eax
f0119741:	89 c1                	mov    %eax,%ecx
f0119743:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f011974a:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011974f:	0f b6 d0             	movzbl %al,%edx
f0119752:	8b 45 98             	mov    -0x68(%ebp),%eax
f0119755:	01 d0                	add    %edx,%eax
f0119757:	48                   	dec    %eax
f0119758:	89 45 94             	mov    %eax,-0x6c(%ebp)
f011975b:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011975e:	ba 00 00 00 00       	mov    $0x0,%edx
f0119763:	f7 75 98             	divl   -0x68(%ebp)
f0119766:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0119769:	29 d0                	sub    %edx,%eax
f011976b:	89 c3                	mov    %eax,%ebx
f011976d:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f0119774:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0119779:	0f b6 c0             	movzbl %al,%eax
f011977c:	c1 e0 04             	shl    $0x4,%eax
f011977f:	89 c2                	mov    %eax,%edx
f0119781:	8b 45 90             	mov    -0x70(%ebp),%eax
f0119784:	01 d0                	add    %edx,%eax
f0119786:	48                   	dec    %eax
f0119787:	89 45 8c             	mov    %eax,-0x74(%ebp)
f011978a:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011978d:	ba 00 00 00 00       	mov    $0x0,%edx
f0119792:	f7 75 90             	divl   -0x70(%ebp)
f0119795:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0119798:	29 d0                	sub    %edx,%eax
f011979a:	01 d8                	add    %ebx,%eax
f011979c:	2d 00 c0 1f 08       	sub    $0x81fc000,%eax

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f01197a1:	39 c1                	cmp    %eax,%ecx
f01197a3:	0f 85 97 01 00 00    	jne    f0119940 <test_kmalloc_nextfit+0x4ce>
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f01197a9:	8b 85 78 fc ff ff    	mov    -0x388(%ebp),%eax
f01197af:	89 c1                	mov    %eax,%ecx
f01197b1:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f01197b8:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01197bd:	0f b6 d0             	movzbl %al,%edx
f01197c0:	8b 45 88             	mov    -0x78(%ebp),%eax
f01197c3:	01 d0                	add    %edx,%eax
f01197c5:	48                   	dec    %eax
f01197c6:	89 45 84             	mov    %eax,-0x7c(%ebp)
f01197c9:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01197cc:	ba 00 00 00 00       	mov    $0x0,%edx
f01197d1:	f7 75 88             	divl   -0x78(%ebp)
f01197d4:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01197d7:	29 d0                	sub    %edx,%eax
f01197d9:	89 c3                	mov    %eax,%ebx
f01197db:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f01197e2:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01197e7:	0f b6 c0             	movzbl %al,%eax
f01197ea:	c1 e0 04             	shl    $0x4,%eax
f01197ed:	89 c2                	mov    %eax,%edx
f01197ef:	8b 45 80             	mov    -0x80(%ebp),%eax
f01197f2:	01 d0                	add    %edx,%eax
f01197f4:	48                   	dec    %eax
f01197f5:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f01197fb:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0119801:	ba 00 00 00 00       	mov    $0x0,%edx
f0119806:	f7 75 80             	divl   -0x80(%ebp)
f0119809:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011980f:	29 d0                	sub    %edx,%eax
f0119811:	01 d8                	add    %ebx,%eax
f0119813:	2d 00 c0 7f 07       	sub    $0x77fc000,%eax
	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f0119818:	39 c1                	cmp    %eax,%ecx
f011981a:	0f 85 20 01 00 00    	jne    f0119940 <test_kmalloc_nextfit+0x4ce>
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[25] != (ACTUAL_START + 50*Mega) ||
f0119820:	8b 85 8c fc ff ff    	mov    -0x374(%ebp),%eax
f0119826:	89 c1                	mov    %eax,%ecx
f0119828:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f011982f:	10 00 00 
f0119832:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0119837:	0f b6 d0             	movzbl %al,%edx
f011983a:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0119840:	01 d0                	add    %edx,%eax
f0119842:	48                   	dec    %eax
f0119843:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0119849:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011984f:	ba 00 00 00 00       	mov    $0x0,%edx
f0119854:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f011985a:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0119860:	29 d0                	sub    %edx,%eax
f0119862:	89 c3                	mov    %eax,%ebx
f0119864:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f011986b:	10 00 00 
f011986e:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0119873:	0f b6 c0             	movzbl %al,%eax
f0119876:	c1 e0 04             	shl    $0x4,%eax
f0119879:	89 c2                	mov    %eax,%edx
f011987b:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0119881:	01 d0                	add    %edx,%eax
f0119883:	48                   	dec    %eax
f0119884:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f011988a:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0119890:	ba 00 00 00 00       	mov    $0x0,%edx
f0119895:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f011989b:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01198a1:	29 d0                	sub    %edx,%eax
f01198a3:	01 d8                	add    %ebx,%eax
f01198a5:	2d 00 c0 df 06       	sub    $0x6dfc000,%eax
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f01198aa:	39 c1                	cmp    %eax,%ecx
f01198ac:	0f 85 8e 00 00 00    	jne    f0119940 <test_kmalloc_nextfit+0x4ce>
			(uint32)ptr_allocations[25] != (ACTUAL_START + 50*Mega) ||
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega ))
f01198b2:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f01198b8:	89 c1                	mov    %eax,%ecx
f01198ba:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f01198c1:	10 00 00 
f01198c4:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01198c9:	0f b6 d0             	movzbl %al,%edx
f01198cc:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01198d2:	01 d0                	add    %edx,%eax
f01198d4:	48                   	dec    %eax
f01198d5:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f01198db:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01198e1:	ba 00 00 00 00       	mov    $0x0,%edx
f01198e6:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f01198ec:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01198f2:	29 d0                	sub    %edx,%eax
f01198f4:	89 c3                	mov    %eax,%ebx
f01198f6:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f01198fd:	10 00 00 
f0119900:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0119905:	0f b6 c0             	movzbl %al,%eax
f0119908:	c1 e0 04             	shl    $0x4,%eax
f011990b:	89 c2                	mov    %eax,%edx
f011990d:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0119913:	01 d0                	add    %edx,%eax
f0119915:	48                   	dec    %eax
f0119916:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f011991c:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0119922:	ba 00 00 00 00       	mov    $0x0,%edx
f0119927:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f011992d:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0119933:	29 d0                	sub    %edx,%eax
f0119935:	01 d8                	add    %ebx,%eax
f0119937:	2d 00 c0 1f 00       	sub    $0x1fc000,%eax
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[25] != (ACTUAL_START + 50*Mega) ||
f011993c:	39 c1                	cmp    %eax,%ecx
f011993e:	74 17                	je     f0119957 <test_kmalloc_nextfit+0x4e5>
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega ))
		panic("Wrong allocation, Check next fitting strategy is working correctly");
f0119940:	83 ec 04             	sub    $0x4,%esp
f0119943:	68 d4 99 13 f0       	push   $0xf01399d4
f0119948:	68 03 01 00 00       	push   $0x103
f011994d:	68 5a 97 13 f0       	push   $0xf013975a
f0119952:	e8 59 68 fe ff       	call   f01001b0 <_panic>

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119957:	e8 28 ad fe ff       	call   f0104684 <pf_calculate_free_frames>
f011995c:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011995f:	74 17                	je     f0119978 <test_kmalloc_nextfit+0x506>
f0119961:	83 ec 04             	sub    $0x4,%esp
f0119964:	68 74 97 13 f0       	push   $0xf0139774
f0119969:	68 05 01 00 00       	push   $0x105
f011996e:	68 5a 97 13 f0       	push   $0xf013975a
f0119973:	e8 38 68 fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (160*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS)/(PAGE_SIZE) ) panic("Wrong allocation");
f0119978:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011997b:	e8 46 30 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0119980:	29 c3                	sub    %eax,%ebx
f0119982:	89 d9                	mov    %ebx,%ecx
f0119984:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f011998b:	10 00 00 
f011998e:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0119993:	0f b6 d0             	movzbl %al,%edx
f0119996:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011999c:	01 d0                	add    %edx,%eax
f011999e:	48                   	dec    %eax
f011999f:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f01199a5:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01199ab:	ba 00 00 00 00       	mov    $0x0,%edx
f01199b0:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f01199b6:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01199bc:	29 d0                	sub    %edx,%eax
f01199be:	89 c3                	mov    %eax,%ebx
f01199c0:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f01199c7:	10 00 00 
f01199ca:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01199cf:	0f b6 c0             	movzbl %al,%eax
f01199d2:	c1 e0 04             	shl    $0x4,%eax
f01199d5:	89 c2                	mov    %eax,%edx
f01199d7:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f01199dd:	01 d0                	add    %edx,%eax
f01199df:	48                   	dec    %eax
f01199e0:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f01199e6:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01199ec:	ba 00 00 00 00       	mov    $0x0,%edx
f01199f1:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f01199f7:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01199fd:	29 d0                	sub    %edx,%eax
f01199ff:	01 d8                	add    %ebx,%eax
f0119a01:	ba 00 b0 ff 09       	mov    $0x9ffb000,%edx
f0119a06:	29 c2                	sub    %eax,%edx
f0119a08:	89 d0                	mov    %edx,%eax
f0119a0a:	c1 e8 0c             	shr    $0xc,%eax
f0119a0d:	39 c1                	cmp    %eax,%ecx
f0119a0f:	74 17                	je     f0119a28 <test_kmalloc_nextfit+0x5b6>
f0119a11:	83 ec 04             	sub    $0x4,%esp
f0119a14:	68 17 9a 13 f0       	push   $0xf0139a17
f0119a19:	68 06 01 00 00       	push   $0x106
f0119a1e:	68 5a 97 13 f0       	push   $0xf013975a
f0119a23:	e8 88 67 fe ff       	call   f01001b0 <_panic>

	// Make memory holes.
	freeDiskFrames = pf_calculate_free_frames() ;
f0119a28:	e8 57 ac fe ff       	call   f0104684 <pf_calculate_free_frames>
f0119a2d:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119a30:	e8 91 2f ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0119a35:	89 45 f0             	mov    %eax,-0x10(%ebp)

	kfree(ptr_allocations[0]);		// Hole 1 = 2 M
f0119a38:	8b 85 28 fc ff ff    	mov    -0x3d8(%ebp),%eax
f0119a3e:	83 ec 0c             	sub    $0xc,%esp
f0119a41:	50                   	push   %eax
f0119a42:	e8 32 e5 fe ff       	call   f0107f79 <kfree>
f0119a47:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[2]);		// Hole 2 = 4 M
f0119a4a:	8b 85 30 fc ff ff    	mov    -0x3d0(%ebp),%eax
f0119a50:	83 ec 0c             	sub    $0xc,%esp
f0119a53:	50                   	push   %eax
f0119a54:	e8 20 e5 fe ff       	call   f0107f79 <kfree>
f0119a59:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[3]);
f0119a5c:	8b 85 34 fc ff ff    	mov    -0x3cc(%ebp),%eax
f0119a62:	83 ec 0c             	sub    $0xc,%esp
f0119a65:	50                   	push   %eax
f0119a66:	e8 0e e5 fe ff       	call   f0107f79 <kfree>
f0119a6b:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[5]);		// Hole 3 = 2 M
f0119a6e:	8b 85 3c fc ff ff    	mov    -0x3c4(%ebp),%eax
f0119a74:	83 ec 0c             	sub    $0xc,%esp
f0119a77:	50                   	push   %eax
f0119a78:	e8 fc e4 fe ff       	call   f0107f79 <kfree>
f0119a7d:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[10]);		// Hole 4 = 6 M
f0119a80:	8b 85 50 fc ff ff    	mov    -0x3b0(%ebp),%eax
f0119a86:	83 ec 0c             	sub    $0xc,%esp
f0119a89:	50                   	push   %eax
f0119a8a:	e8 ea e4 fe ff       	call   f0107f79 <kfree>
f0119a8f:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[12]);
f0119a92:	8b 85 58 fc ff ff    	mov    -0x3a8(%ebp),%eax
f0119a98:	83 ec 0c             	sub    $0xc,%esp
f0119a9b:	50                   	push   %eax
f0119a9c:	e8 d8 e4 fe ff       	call   f0107f79 <kfree>
f0119aa1:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[11]);
f0119aa4:	8b 85 54 fc ff ff    	mov    -0x3ac(%ebp),%eax
f0119aaa:	83 ec 0c             	sub    $0xc,%esp
f0119aad:	50                   	push   %eax
f0119aae:	e8 c6 e4 fe ff       	call   f0107f79 <kfree>
f0119ab3:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[20]);		// Hole 5 = 2 M
f0119ab6:	8b 85 78 fc ff ff    	mov    -0x388(%ebp),%eax
f0119abc:	83 ec 0c             	sub    $0xc,%esp
f0119abf:	50                   	push   %eax
f0119ac0:	e8 b4 e4 fe ff       	call   f0107f79 <kfree>
f0119ac5:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[25]);		// Hole 6 = 2 M
f0119ac8:	8b 85 8c fc ff ff    	mov    -0x374(%ebp),%eax
f0119ace:	83 ec 0c             	sub    $0xc,%esp
f0119ad1:	50                   	push   %eax
f0119ad2:	e8 a2 e4 fe ff       	call   f0107f79 <kfree>
f0119ad7:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[79]);		// Hole 7 = 2 M - 4 KB
f0119ada:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f0119ae0:	83 ec 0c             	sub    $0xc,%esp
f0119ae3:	50                   	push   %eax
f0119ae4:	e8 90 e4 fe ff       	call   f0107f79 <kfree>
f0119ae9:	83 c4 10             	add    $0x10,%esp

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119aec:	e8 93 ab fe ff       	call   f0104684 <pf_calculate_free_frames>
f0119af1:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119af4:	74 17                	je     f0119b0d <test_kmalloc_nextfit+0x69b>
f0119af6:	83 ec 04             	sub    $0x4,%esp
f0119af9:	68 74 97 13 f0       	push   $0xf0139774
f0119afe:	68 17 01 00 00       	push   $0x117
f0119b03:	68 5a 97 13 f0       	push   $0xf013975a
f0119b08:	e8 a3 66 fe ff       	call   f01001b0 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) != ((10*2*Mega) - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f0119b0d:	e8 b4 2e ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0119b12:	89 c2                	mov    %eax,%edx
f0119b14:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0119b17:	89 d1                	mov    %edx,%ecx
f0119b19:	29 c1                	sub    %eax,%ecx
f0119b1b:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f0119b22:	10 00 00 
f0119b25:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0119b2a:	0f b6 d0             	movzbl %al,%edx
f0119b2d:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0119b33:	01 d0                	add    %edx,%eax
f0119b35:	48                   	dec    %eax
f0119b36:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f0119b3c:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0119b42:	ba 00 00 00 00       	mov    $0x0,%edx
f0119b47:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f0119b4d:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0119b53:	29 d0                	sub    %edx,%eax
f0119b55:	89 c3                	mov    %eax,%ebx
f0119b57:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f0119b5e:	10 00 00 
f0119b61:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0119b66:	0f b6 c0             	movzbl %al,%eax
f0119b69:	c1 e0 04             	shl    $0x4,%eax
f0119b6c:	89 c2                	mov    %eax,%edx
f0119b6e:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0119b74:	01 d0                	add    %edx,%eax
f0119b76:	48                   	dec    %eax
f0119b77:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f0119b7d:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0119b83:	ba 00 00 00 00       	mov    $0x0,%edx
f0119b88:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f0119b8e:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0119b94:	29 d0                	sub    %edx,%eax
f0119b96:	01 d8                	add    %ebx,%eax
f0119b98:	ba 00 b0 3f 01       	mov    $0x13fb000,%edx
f0119b9d:	29 c2                	sub    %eax,%edx
f0119b9f:	89 d0                	mov    %edx,%eax
f0119ba1:	c1 e8 0c             	shr    $0xc,%eax
f0119ba4:	39 c1                	cmp    %eax,%ecx
f0119ba6:	74 17                	je     f0119bbf <test_kmalloc_nextfit+0x74d>
f0119ba8:	83 ec 04             	sub    $0x4,%esp
f0119bab:	68 28 9a 13 f0       	push   $0xf0139a28
f0119bb0:	68 18 01 00 00       	push   $0x118
f0119bb5:	68 5a 97 13 f0       	push   $0xf013975a
f0119bba:	e8 f1 65 fe ff       	call   f01001b0 <_panic>

	// Test next fit
	freeDiskFrames = pf_calculate_free_frames() ;
f0119bbf:	e8 c0 aa fe ff       	call   f0104684 <pf_calculate_free_frames>
f0119bc4:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119bc7:	e8 fa 2d ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0119bcc:	89 45 f0             	mov    %eax,-0x10(%ebp)
	void* tempAddress = kmalloc(Mega-kilo);		// Use Hole 1 -> Hole 1 = 1 M
f0119bcf:	83 ec 0c             	sub    $0xc,%esp
f0119bd2:	68 00 fc 0f 00       	push   $0xffc00
f0119bd7:	e8 83 e3 fe ff       	call   f0107f5f <kmalloc>
f0119bdc:	83 c4 10             	add    $0x10,%esp
f0119bdf:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START)
f0119be5:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f0119bec:	10 00 00 
f0119bef:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0119bf4:	0f b6 d0             	movzbl %al,%edx
f0119bf7:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0119bfd:	01 d0                	add    %edx,%eax
f0119bff:	48                   	dec    %eax
f0119c00:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f0119c06:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0119c0c:	ba 00 00 00 00       	mov    $0x0,%edx
f0119c11:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f0119c17:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0119c1d:	29 d0                	sub    %edx,%eax
f0119c1f:	89 c1                	mov    %eax,%ecx
f0119c21:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f0119c28:	10 00 00 
f0119c2b:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0119c30:	0f b6 c0             	movzbl %al,%eax
f0119c33:	c1 e0 04             	shl    $0x4,%eax
f0119c36:	89 c2                	mov    %eax,%edx
f0119c38:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0119c3e:	01 d0                	add    %edx,%eax
f0119c40:	48                   	dec    %eax
f0119c41:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f0119c47:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0119c4d:	ba 00 00 00 00       	mov    $0x0,%edx
f0119c52:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f0119c58:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0119c5e:	29 d0                	sub    %edx,%eax
f0119c60:	01 c8                	add    %ecx,%eax
f0119c62:	8d 90 00 40 00 f6    	lea    -0x9ffc000(%eax),%edx
f0119c68:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0119c6e:	39 c2                	cmp    %eax,%edx
f0119c70:	74 17                	je     f0119c89 <test_kmalloc_nextfit+0x817>
		panic("Next Fit not working correctly");
f0119c72:	83 ec 04             	sub    $0x4,%esp
f0119c75:	68 68 9a 13 f0       	push   $0xf0139a68
f0119c7a:	68 1f 01 00 00       	push   $0x11f
f0119c7f:	68 5a 97 13 f0       	push   $0xf013975a
f0119c84:	e8 27 65 fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119c89:	e8 f6 a9 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0119c8e:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119c91:	74 17                	je     f0119caa <test_kmalloc_nextfit+0x838>
f0119c93:	83 ec 04             	sub    $0x4,%esp
f0119c96:	68 74 97 13 f0       	push   $0xf0139774
f0119c9b:	68 20 01 00 00       	push   $0x120
f0119ca0:	68 5a 97 13 f0       	push   $0xf013975a
f0119ca5:	e8 06 65 fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (1*Mega)/PAGE_SIZE) panic("Wrong allocation");
f0119caa:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0119cad:	e8 14 2d ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0119cb2:	29 c3                	sub    %eax,%ebx
f0119cb4:	89 d8                	mov    %ebx,%eax
f0119cb6:	3d 00 01 00 00       	cmp    $0x100,%eax
f0119cbb:	74 17                	je     f0119cd4 <test_kmalloc_nextfit+0x862>
f0119cbd:	83 ec 04             	sub    $0x4,%esp
f0119cc0:	68 17 9a 13 f0       	push   $0xf0139a17
f0119cc5:	68 21 01 00 00       	push   $0x121
f0119cca:	68 5a 97 13 f0       	push   $0xf013975a
f0119ccf:	e8 dc 64 fe ff       	call   f01001b0 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0119cd4:	e8 ab a9 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0119cd9:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119cdc:	e8 e5 2c ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0119ce1:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(kilo);					// Use Hole 1 -> Hole 1 = 1 M - Kilo -> requires one page only
f0119ce4:	83 ec 0c             	sub    $0xc,%esp
f0119ce7:	68 00 04 00 00       	push   $0x400
f0119cec:	e8 6e e2 fe ff       	call   f0107f5f <kmalloc>
f0119cf1:	83 c4 10             	add    $0x10,%esp
f0119cf4:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00100000)
f0119cfa:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f0119d01:	10 00 00 
f0119d04:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0119d09:	0f b6 d0             	movzbl %al,%edx
f0119d0c:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0119d12:	01 d0                	add    %edx,%eax
f0119d14:	48                   	dec    %eax
f0119d15:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f0119d1b:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0119d21:	ba 00 00 00 00       	mov    $0x0,%edx
f0119d26:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f0119d2c:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0119d32:	29 d0                	sub    %edx,%eax
f0119d34:	89 c1                	mov    %eax,%ecx
f0119d36:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f0119d3d:	10 00 00 
f0119d40:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0119d45:	0f b6 c0             	movzbl %al,%eax
f0119d48:	c1 e0 04             	shl    $0x4,%eax
f0119d4b:	89 c2                	mov    %eax,%edx
f0119d4d:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0119d53:	01 d0                	add    %edx,%eax
f0119d55:	48                   	dec    %eax
f0119d56:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f0119d5c:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0119d62:	ba 00 00 00 00       	mov    $0x0,%edx
f0119d67:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f0119d6d:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0119d73:	29 d0                	sub    %edx,%eax
f0119d75:	01 c8                	add    %ecx,%eax
f0119d77:	8d 90 00 40 10 f6    	lea    -0x9efc000(%eax),%edx
f0119d7d:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0119d83:	39 c2                	cmp    %eax,%edx
f0119d85:	74 17                	je     f0119d9e <test_kmalloc_nextfit+0x92c>
		panic("Next Fit not working correctly");
f0119d87:	83 ec 04             	sub    $0x4,%esp
f0119d8a:	68 68 9a 13 f0       	push   $0xf0139a68
f0119d8f:	68 27 01 00 00       	push   $0x127
f0119d94:	68 5a 97 13 f0       	push   $0xf013975a
f0119d99:	e8 12 64 fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119d9e:	e8 e1 a8 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0119da3:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119da6:	74 17                	je     f0119dbf <test_kmalloc_nextfit+0x94d>
f0119da8:	83 ec 04             	sub    $0x4,%esp
f0119dab:	68 74 97 13 f0       	push   $0xf0139774
f0119db0:	68 28 01 00 00       	push   $0x128
f0119db5:	68 5a 97 13 f0       	push   $0xf013975a
f0119dba:	e8 f1 63 fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation");
f0119dbf:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0119dc2:	e8 ff 2b ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0119dc7:	29 c3                	sub    %eax,%ebx
f0119dc9:	89 d8                	mov    %ebx,%eax
f0119dcb:	83 f8 01             	cmp    $0x1,%eax
f0119dce:	74 17                	je     f0119de7 <test_kmalloc_nextfit+0x975>
f0119dd0:	83 ec 04             	sub    $0x4,%esp
f0119dd3:	68 17 9a 13 f0       	push   $0xf0139a17
f0119dd8:	68 29 01 00 00       	push   $0x129
f0119ddd:	68 5a 97 13 f0       	push   $0xf013975a
f0119de2:	e8 c9 63 fe ff       	call   f01001b0 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0119de7:	e8 98 a8 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0119dec:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119def:	e8 d2 2b ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0119df4:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(5*Mega); 			   // Use Hole 4 -> Hole 4 = 1 M
f0119df7:	83 ec 0c             	sub    $0xc,%esp
f0119dfa:	68 00 00 50 00       	push   $0x500000
f0119dff:	e8 5b e1 fe ff       	call   f0107f5f <kmalloc>
f0119e04:	83 c4 10             	add    $0x10,%esp
f0119e07:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01400000)
f0119e0d:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f0119e14:	10 00 00 
f0119e17:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0119e1c:	0f b6 d0             	movzbl %al,%edx
f0119e1f:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0119e25:	01 d0                	add    %edx,%eax
f0119e27:	48                   	dec    %eax
f0119e28:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f0119e2e:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0119e34:	ba 00 00 00 00       	mov    $0x0,%edx
f0119e39:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f0119e3f:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0119e45:	29 d0                	sub    %edx,%eax
f0119e47:	89 c1                	mov    %eax,%ecx
f0119e49:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f0119e50:	10 00 00 
f0119e53:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0119e58:	0f b6 c0             	movzbl %al,%eax
f0119e5b:	c1 e0 04             	shl    $0x4,%eax
f0119e5e:	89 c2                	mov    %eax,%edx
f0119e60:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0119e66:	01 d0                	add    %edx,%eax
f0119e68:	48                   	dec    %eax
f0119e69:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f0119e6f:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0119e75:	ba 00 00 00 00       	mov    $0x0,%edx
f0119e7a:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f0119e80:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0119e86:	29 d0                	sub    %edx,%eax
f0119e88:	01 c8                	add    %ecx,%eax
f0119e8a:	8d 90 00 40 40 f7    	lea    -0x8bfc000(%eax),%edx
f0119e90:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0119e96:	39 c2                	cmp    %eax,%edx
f0119e98:	74 17                	je     f0119eb1 <test_kmalloc_nextfit+0xa3f>
		panic("Next Fit not working correctly");
f0119e9a:	83 ec 04             	sub    $0x4,%esp
f0119e9d:	68 68 9a 13 f0       	push   $0xf0139a68
f0119ea2:	68 2f 01 00 00       	push   $0x12f
f0119ea7:	68 5a 97 13 f0       	push   $0xf013975a
f0119eac:	e8 ff 62 fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119eb1:	e8 ce a7 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0119eb6:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119eb9:	74 17                	je     f0119ed2 <test_kmalloc_nextfit+0xa60>
f0119ebb:	83 ec 04             	sub    $0x4,%esp
f0119ebe:	68 74 97 13 f0       	push   $0xf0139774
f0119ec3:	68 30 01 00 00       	push   $0x130
f0119ec8:	68 5a 97 13 f0       	push   $0xf013975a
f0119ecd:	e8 de 62 fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (5*Mega)/PAGE_SIZE) panic("Wrong allocation");
f0119ed2:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0119ed5:	e8 ec 2a ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0119eda:	29 c3                	sub    %eax,%ebx
f0119edc:	89 d8                	mov    %ebx,%eax
f0119ede:	3d 00 05 00 00       	cmp    $0x500,%eax
f0119ee3:	74 17                	je     f0119efc <test_kmalloc_nextfit+0xa8a>
f0119ee5:	83 ec 04             	sub    $0x4,%esp
f0119ee8:	68 17 9a 13 f0       	push   $0xf0139a17
f0119eed:	68 31 01 00 00       	push   $0x131
f0119ef2:	68 5a 97 13 f0       	push   $0xf013975a
f0119ef7:	e8 b4 62 fe ff       	call   f01001b0 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0119efc:	e8 83 a7 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0119f01:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119f04:	e8 bd 2a ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0119f09:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(1*Mega); 			   // Use Hole 4 -> Hole 4 = 0 M
f0119f0c:	83 ec 0c             	sub    $0xc,%esp
f0119f0f:	68 00 00 10 00       	push   $0x100000
f0119f14:	e8 46 e0 fe ff       	call   f0107f5f <kmalloc>
f0119f19:	83 c4 10             	add    $0x10,%esp
f0119f1c:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01900000)
f0119f22:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f0119f29:	10 00 00 
f0119f2c:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0119f31:	0f b6 d0             	movzbl %al,%edx
f0119f34:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0119f3a:	01 d0                	add    %edx,%eax
f0119f3c:	48                   	dec    %eax
f0119f3d:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f0119f43:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0119f49:	ba 00 00 00 00       	mov    $0x0,%edx
f0119f4e:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f0119f54:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0119f5a:	29 d0                	sub    %edx,%eax
f0119f5c:	89 c1                	mov    %eax,%ecx
f0119f5e:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f0119f65:	10 00 00 
f0119f68:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0119f6d:	0f b6 c0             	movzbl %al,%eax
f0119f70:	c1 e0 04             	shl    $0x4,%eax
f0119f73:	89 c2                	mov    %eax,%edx
f0119f75:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0119f7b:	01 d0                	add    %edx,%eax
f0119f7d:	48                   	dec    %eax
f0119f7e:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f0119f84:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0119f8a:	ba 00 00 00 00       	mov    $0x0,%edx
f0119f8f:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f0119f95:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0119f9b:	29 d0                	sub    %edx,%eax
f0119f9d:	01 c8                	add    %ecx,%eax
f0119f9f:	8d 90 00 40 90 f7    	lea    -0x86fc000(%eax),%edx
f0119fa5:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0119fab:	39 c2                	cmp    %eax,%edx
f0119fad:	74 17                	je     f0119fc6 <test_kmalloc_nextfit+0xb54>
		panic("Next Fit not working correctly");
f0119faf:	83 ec 04             	sub    $0x4,%esp
f0119fb2:	68 68 9a 13 f0       	push   $0xf0139a68
f0119fb7:	68 37 01 00 00       	push   $0x137
f0119fbc:	68 5a 97 13 f0       	push   $0xf013975a
f0119fc1:	e8 ea 61 fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119fc6:	e8 b9 a6 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0119fcb:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119fce:	74 17                	je     f0119fe7 <test_kmalloc_nextfit+0xb75>
f0119fd0:	83 ec 04             	sub    $0x4,%esp
f0119fd3:	68 74 97 13 f0       	push   $0xf0139774
f0119fd8:	68 38 01 00 00       	push   $0x138
f0119fdd:	68 5a 97 13 f0       	push   $0xf013975a
f0119fe2:	e8 c9 61 fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (1*Mega)/PAGE_SIZE) panic("Wrong allocation");
f0119fe7:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0119fea:	e8 d7 29 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f0119fef:	29 c3                	sub    %eax,%ebx
f0119ff1:	89 d8                	mov    %ebx,%eax
f0119ff3:	3d 00 01 00 00       	cmp    $0x100,%eax
f0119ff8:	74 17                	je     f011a011 <test_kmalloc_nextfit+0xb9f>
f0119ffa:	83 ec 04             	sub    $0x4,%esp
f0119ffd:	68 17 9a 13 f0       	push   $0xf0139a17
f011a002:	68 39 01 00 00       	push   $0x139
f011a007:	68 5a 97 13 f0       	push   $0xf013975a
f011a00c:	e8 9f 61 fe ff       	call   f01001b0 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f011a011:	e8 6e a6 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011a016:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011a019:	e8 a8 29 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011a01e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	kfree(ptr_allocations[15]);					// Make a new hole => 2 M
f011a021:	8b 85 64 fc ff ff    	mov    -0x39c(%ebp),%eax
f011a027:	83 ec 0c             	sub    $0xc,%esp
f011a02a:	50                   	push   %eax
f011a02b:	e8 49 df fe ff       	call   f0107f79 <kfree>
f011a030:	83 c4 10             	add    $0x10,%esp
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a033:	e8 4c a6 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011a038:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a03b:	74 17                	je     f011a054 <test_kmalloc_nextfit+0xbe2>
f011a03d:	83 ec 04             	sub    $0x4,%esp
f011a040:	68 74 97 13 f0       	push   $0xf0139774
f011a045:	68 3e 01 00 00       	push   $0x13e
f011a04a:	68 5a 97 13 f0       	push   $0xf013975a
f011a04f:	e8 5c 61 fe ff       	call   f01001b0 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) !=  (2*Mega)/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f011a054:	e8 6d 29 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011a059:	89 c2                	mov    %eax,%edx
f011a05b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011a05e:	29 c2                	sub    %eax,%edx
f011a060:	89 d0                	mov    %edx,%eax
f011a062:	3d 00 02 00 00       	cmp    $0x200,%eax
f011a067:	74 17                	je     f011a080 <test_kmalloc_nextfit+0xc0e>
f011a069:	83 ec 04             	sub    $0x4,%esp
f011a06c:	68 28 9a 13 f0       	push   $0xf0139a28
f011a071:	68 3f 01 00 00       	push   $0x13f
f011a076:	68 5a 97 13 f0       	push   $0xf013975a
f011a07b:	e8 30 61 fe ff       	call   f01001b0 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f011a080:	e8 ff a5 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011a085:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011a088:	e8 39 29 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011a08d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(kilo); 			   // Use new Hole = 2 M - 4 kilo
f011a090:	83 ec 0c             	sub    $0xc,%esp
f011a093:	68 00 04 00 00       	push   $0x400
f011a098:	e8 c2 de fe ff       	call   f0107f5f <kmalloc>
f011a09d:	83 c4 10             	add    $0x10,%esp
f011a0a0:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01E00000)
f011a0a6:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f011a0ad:	10 00 00 
f011a0b0:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011a0b5:	0f b6 d0             	movzbl %al,%edx
f011a0b8:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011a0be:	01 d0                	add    %edx,%eax
f011a0c0:	48                   	dec    %eax
f011a0c1:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f011a0c7:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011a0cd:	ba 00 00 00 00       	mov    $0x0,%edx
f011a0d2:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f011a0d8:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011a0de:	29 d0                	sub    %edx,%eax
f011a0e0:	89 c1                	mov    %eax,%ecx
f011a0e2:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f011a0e9:	10 00 00 
f011a0ec:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011a0f1:	0f b6 c0             	movzbl %al,%eax
f011a0f4:	c1 e0 04             	shl    $0x4,%eax
f011a0f7:	89 c2                	mov    %eax,%edx
f011a0f9:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011a0ff:	01 d0                	add    %edx,%eax
f011a101:	48                   	dec    %eax
f011a102:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f011a108:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011a10e:	ba 00 00 00 00       	mov    $0x0,%edx
f011a113:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f011a119:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011a11f:	29 d0                	sub    %edx,%eax
f011a121:	01 c8                	add    %ecx,%eax
f011a123:	8d 90 00 40 e0 f7    	lea    -0x81fc000(%eax),%edx
f011a129:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011a12f:	39 c2                	cmp    %eax,%edx
f011a131:	74 17                	je     f011a14a <test_kmalloc_nextfit+0xcd8>
		panic("Next Fit not working correctly");
f011a133:	83 ec 04             	sub    $0x4,%esp
f011a136:	68 68 9a 13 f0       	push   $0xf0139a68
f011a13b:	68 45 01 00 00       	push   $0x145
f011a140:	68 5a 97 13 f0       	push   $0xf013975a
f011a145:	e8 66 60 fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a14a:	e8 35 a5 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011a14f:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a152:	74 17                	je     f011a16b <test_kmalloc_nextfit+0xcf9>
f011a154:	83 ec 04             	sub    $0x4,%esp
f011a157:	68 74 97 13 f0       	push   $0xf0139774
f011a15c:	68 46 01 00 00       	push   $0x146
f011a161:	68 5a 97 13 f0       	push   $0xf013975a
f011a166:	e8 45 60 fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation");
f011a16b:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011a16e:	e8 53 28 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011a173:	29 c3                	sub    %eax,%ebx
f011a175:	89 d8                	mov    %ebx,%eax
f011a177:	83 f8 01             	cmp    $0x1,%eax
f011a17a:	74 17                	je     f011a193 <test_kmalloc_nextfit+0xd21>
f011a17c:	83 ec 04             	sub    $0x4,%esp
f011a17f:	68 17 9a 13 f0       	push   $0xf0139a17
f011a184:	68 47 01 00 00       	push   $0x147
f011a189:	68 5a 97 13 f0       	push   $0xf013975a
f011a18e:	e8 1d 60 fe ff       	call   f01001b0 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f011a193:	e8 ec a4 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011a198:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011a19b:	e8 26 28 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011a1a0:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(Mega + 1016*kilo); 	// Use new Hole = 4 kilo
f011a1a3:	83 ec 0c             	sub    $0xc,%esp
f011a1a6:	68 00 e0 1f 00       	push   $0x1fe000
f011a1ab:	e8 af dd fe ff       	call   f0107f5f <kmalloc>
f011a1b0:	83 c4 10             	add    $0x10,%esp
f011a1b3:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01E01000)
f011a1b9:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f011a1c0:	10 00 00 
f011a1c3:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011a1c8:	0f b6 d0             	movzbl %al,%edx
f011a1cb:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011a1d1:	01 d0                	add    %edx,%eax
f011a1d3:	48                   	dec    %eax
f011a1d4:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f011a1da:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011a1e0:	ba 00 00 00 00       	mov    $0x0,%edx
f011a1e5:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f011a1eb:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011a1f1:	29 d0                	sub    %edx,%eax
f011a1f3:	89 c1                	mov    %eax,%ecx
f011a1f5:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f011a1fc:	10 00 00 
f011a1ff:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011a204:	0f b6 c0             	movzbl %al,%eax
f011a207:	c1 e0 04             	shl    $0x4,%eax
f011a20a:	89 c2                	mov    %eax,%edx
f011a20c:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011a212:	01 d0                	add    %edx,%eax
f011a214:	48                   	dec    %eax
f011a215:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f011a21b:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011a221:	ba 00 00 00 00       	mov    $0x0,%edx
f011a226:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f011a22c:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011a232:	29 d0                	sub    %edx,%eax
f011a234:	01 c8                	add    %ecx,%eax
f011a236:	8d 90 00 50 e0 f7    	lea    -0x81fb000(%eax),%edx
f011a23c:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011a242:	39 c2                	cmp    %eax,%edx
f011a244:	74 17                	je     f011a25d <test_kmalloc_nextfit+0xdeb>
		panic("Next Fit not working correctly");
f011a246:	83 ec 04             	sub    $0x4,%esp
f011a249:	68 68 9a 13 f0       	push   $0xf0139a68
f011a24e:	68 4d 01 00 00       	push   $0x14d
f011a253:	68 5a 97 13 f0       	push   $0xf013975a
f011a258:	e8 53 5f fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a25d:	e8 22 a4 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011a262:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a265:	74 17                	je     f011a27e <test_kmalloc_nextfit+0xe0c>
f011a267:	83 ec 04             	sub    $0x4,%esp
f011a26a:	68 74 97 13 f0       	push   $0xf0139774
f011a26f:	68 4e 01 00 00       	push   $0x14e
f011a274:	68 5a 97 13 f0       	push   $0xf013975a
f011a279:	e8 32 5f fe ff       	call   f01001b0 <_panic>

	if ((freeFrames - sys_calculate_free_frames()) != (1*Mega+1016*kilo)/PAGE_SIZE) panic("Wrong allocation");
f011a27e:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011a281:	e8 40 27 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011a286:	29 c3                	sub    %eax,%ebx
f011a288:	89 d8                	mov    %ebx,%eax
f011a28a:	3d fe 01 00 00       	cmp    $0x1fe,%eax
f011a28f:	74 17                	je     f011a2a8 <test_kmalloc_nextfit+0xe36>
f011a291:	83 ec 04             	sub    $0x4,%esp
f011a294:	68 17 9a 13 f0       	push   $0xf0139a17
f011a299:	68 50 01 00 00       	push   $0x150
f011a29e:	68 5a 97 13 f0       	push   $0xf013975a
f011a2a3:	e8 08 5f fe ff       	call   f01001b0 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f011a2a8:	e8 d7 a3 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011a2ad:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011a2b0:	e8 11 27 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011a2b5:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(512*kilo); 			   // Use Hole 5 -> Hole 5 = 1.5 M
f011a2b8:	83 ec 0c             	sub    $0xc,%esp
f011a2bb:	68 00 00 08 00       	push   $0x80000
f011a2c0:	e8 9a dc fe ff       	call   f0107f5f <kmalloc>
f011a2c5:	83 c4 10             	add    $0x10,%esp
f011a2c8:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x02800000)
f011a2ce:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f011a2d5:	10 00 00 
f011a2d8:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011a2dd:	0f b6 d0             	movzbl %al,%edx
f011a2e0:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011a2e6:	01 d0                	add    %edx,%eax
f011a2e8:	48                   	dec    %eax
f011a2e9:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f011a2ef:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011a2f5:	ba 00 00 00 00       	mov    $0x0,%edx
f011a2fa:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f011a300:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011a306:	29 d0                	sub    %edx,%eax
f011a308:	89 c1                	mov    %eax,%ecx
f011a30a:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f011a311:	10 00 00 
f011a314:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011a319:	0f b6 c0             	movzbl %al,%eax
f011a31c:	c1 e0 04             	shl    $0x4,%eax
f011a31f:	89 c2                	mov    %eax,%edx
f011a321:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011a327:	01 d0                	add    %edx,%eax
f011a329:	48                   	dec    %eax
f011a32a:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f011a330:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011a336:	ba 00 00 00 00       	mov    $0x0,%edx
f011a33b:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f011a341:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011a347:	29 d0                	sub    %edx,%eax
f011a349:	01 c8                	add    %ecx,%eax
f011a34b:	8d 90 00 40 80 f8    	lea    -0x77fc000(%eax),%edx
f011a351:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011a357:	39 c2                	cmp    %eax,%edx
f011a359:	74 17                	je     f011a372 <test_kmalloc_nextfit+0xf00>
		panic("Next Fit not working correctly");
f011a35b:	83 ec 04             	sub    $0x4,%esp
f011a35e:	68 68 9a 13 f0       	push   $0xf0139a68
f011a363:	68 56 01 00 00       	push   $0x156
f011a368:	68 5a 97 13 f0       	push   $0xf013975a
f011a36d:	e8 3e 5e fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a372:	e8 0d a3 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011a377:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a37a:	74 17                	je     f011a393 <test_kmalloc_nextfit+0xf21>
f011a37c:	83 ec 04             	sub    $0x4,%esp
f011a37f:	68 74 97 13 f0       	push   $0xf0139774
f011a384:	68 57 01 00 00       	push   $0x157
f011a389:	68 5a 97 13 f0       	push   $0xf013975a
f011a38e:	e8 1d 5e fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (512*kilo)/PAGE_SIZE) panic("Wrong allocation");
f011a393:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011a396:	e8 2b 26 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011a39b:	29 c3                	sub    %eax,%ebx
f011a39d:	89 d8                	mov    %ebx,%eax
f011a39f:	3d 80 00 00 00       	cmp    $0x80,%eax
f011a3a4:	74 17                	je     f011a3bd <test_kmalloc_nextfit+0xf4b>
f011a3a6:	83 ec 04             	sub    $0x4,%esp
f011a3a9:	68 17 9a 13 f0       	push   $0xf0139a17
f011a3ae:	68 58 01 00 00       	push   $0x158
f011a3b3:	68 5a 97 13 f0       	push   $0xf013975a
f011a3b8:	e8 f3 5d fe ff       	call   f01001b0 <_panic>

	cprintf("\nCASE1: (next fit without looping back) is succeeded...\n") ;
f011a3bd:	83 ec 0c             	sub    $0xc,%esp
f011a3c0:	68 88 9a 13 f0       	push   $0xf0139a88
f011a3c5:	e8 67 6a fe ff       	call   f0100e31 <cprintf>
f011a3ca:	83 c4 10             	add    $0x10,%esp
	/******************************/

	// Check that next fit is looping back to check for free space
	freeDiskFrames = pf_calculate_free_frames() ;
f011a3cd:	e8 b2 a2 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011a3d2:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011a3d5:	e8 ec 25 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011a3da:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(3*Mega + 512*kilo); 			   // Use Hole 2 -> Hole 2 = 0.5 M
f011a3dd:	83 ec 0c             	sub    $0xc,%esp
f011a3e0:	68 00 00 38 00       	push   $0x380000
f011a3e5:	e8 75 db fe ff       	call   f0107f5f <kmalloc>
f011a3ea:	83 c4 10             	add    $0x10,%esp
f011a3ed:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00400000)
f011a3f3:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f011a3fa:	10 00 00 
f011a3fd:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011a402:	0f b6 d0             	movzbl %al,%edx
f011a405:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011a40b:	01 d0                	add    %edx,%eax
f011a40d:	48                   	dec    %eax
f011a40e:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f011a414:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011a41a:	ba 00 00 00 00       	mov    $0x0,%edx
f011a41f:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f011a425:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011a42b:	29 d0                	sub    %edx,%eax
f011a42d:	89 c1                	mov    %eax,%ecx
f011a42f:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f011a436:	10 00 00 
f011a439:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011a43e:	0f b6 c0             	movzbl %al,%eax
f011a441:	c1 e0 04             	shl    $0x4,%eax
f011a444:	89 c2                	mov    %eax,%edx
f011a446:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011a44c:	01 d0                	add    %edx,%eax
f011a44e:	48                   	dec    %eax
f011a44f:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f011a455:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011a45b:	ba 00 00 00 00       	mov    $0x0,%edx
f011a460:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f011a466:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011a46c:	29 d0                	sub    %edx,%eax
f011a46e:	01 c8                	add    %ecx,%eax
f011a470:	8d 90 00 40 40 f6    	lea    -0x9bfc000(%eax),%edx
f011a476:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011a47c:	39 c2                	cmp    %eax,%edx
f011a47e:	74 17                	je     f011a497 <test_kmalloc_nextfit+0x1025>
		panic("Next Fit not working correctly");
f011a480:	83 ec 04             	sub    $0x4,%esp
f011a483:	68 68 9a 13 f0       	push   $0xf0139a68
f011a488:	68 62 01 00 00       	push   $0x162
f011a48d:	68 5a 97 13 f0       	push   $0xf013975a
f011a492:	e8 19 5d fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a497:	e8 e8 a1 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011a49c:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a49f:	74 17                	je     f011a4b8 <test_kmalloc_nextfit+0x1046>
f011a4a1:	83 ec 04             	sub    $0x4,%esp
f011a4a4:	68 74 97 13 f0       	push   $0xf0139774
f011a4a9:	68 63 01 00 00       	push   $0x163
f011a4ae:	68 5a 97 13 f0       	push   $0xf013975a
f011a4b3:	e8 f8 5c fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (3*Mega+512*kilo)/PAGE_SIZE) panic("Wrong allocation");
f011a4b8:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011a4bb:	e8 06 25 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011a4c0:	29 c3                	sub    %eax,%ebx
f011a4c2:	89 d8                	mov    %ebx,%eax
f011a4c4:	3d 80 03 00 00       	cmp    $0x380,%eax
f011a4c9:	74 17                	je     f011a4e2 <test_kmalloc_nextfit+0x1070>
f011a4cb:	83 ec 04             	sub    $0x4,%esp
f011a4ce:	68 17 9a 13 f0       	push   $0xf0139a17
f011a4d3:	68 64 01 00 00       	push   $0x164
f011a4d8:	68 5a 97 13 f0       	push   $0xf013975a
f011a4dd:	e8 ce 5c fe ff       	call   f01001b0 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f011a4e2:	e8 9d a1 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011a4e7:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011a4ea:	e8 d7 24 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011a4ef:	89 45 f0             	mov    %eax,-0x10(%ebp)
	kfree(ptr_allocations[24]);		// Increase size of Hole 6 to 4 M
f011a4f2:	8b 85 88 fc ff ff    	mov    -0x378(%ebp),%eax
f011a4f8:	83 ec 0c             	sub    $0xc,%esp
f011a4fb:	50                   	push   %eax
f011a4fc:	e8 78 da fe ff       	call   f0107f79 <kfree>
f011a501:	83 c4 10             	add    $0x10,%esp
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a504:	e8 7b a1 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011a509:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a50c:	74 17                	je     f011a525 <test_kmalloc_nextfit+0x10b3>
f011a50e:	83 ec 04             	sub    $0x4,%esp
f011a511:	68 74 97 13 f0       	push   $0xf0139774
f011a516:	68 69 01 00 00       	push   $0x169
f011a51b:	68 5a 97 13 f0       	push   $0xf013975a
f011a520:	e8 8b 5c fe ff       	call   f01001b0 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) != (2*Mega)/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f011a525:	e8 9c 24 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011a52a:	89 c2                	mov    %eax,%edx
f011a52c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011a52f:	29 c2                	sub    %eax,%edx
f011a531:	89 d0                	mov    %edx,%eax
f011a533:	3d 00 02 00 00       	cmp    $0x200,%eax
f011a538:	74 17                	je     f011a551 <test_kmalloc_nextfit+0x10df>
f011a53a:	83 ec 04             	sub    $0x4,%esp
f011a53d:	68 28 9a 13 f0       	push   $0xf0139a28
f011a542:	68 6a 01 00 00       	push   $0x16a
f011a547:	68 5a 97 13 f0       	push   $0xf013975a
f011a54c:	e8 5f 5c fe ff       	call   f01001b0 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f011a551:	e8 2e a1 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011a556:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011a559:	e8 68 24 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011a55e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(4*Mega-kilo);		// Use Hole 6 -> Hole 6 = 0 M
f011a561:	83 ec 0c             	sub    $0xc,%esp
f011a564:	68 00 fc 3f 00       	push   $0x3ffc00
f011a569:	e8 f1 d9 fe ff       	call   f0107f5f <kmalloc>
f011a56e:	83 c4 10             	add    $0x10,%esp
f011a571:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x03000000)
f011a577:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f011a57e:	10 00 00 
f011a581:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011a586:	0f b6 d0             	movzbl %al,%edx
f011a589:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011a58f:	01 d0                	add    %edx,%eax
f011a591:	48                   	dec    %eax
f011a592:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f011a598:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011a59e:	ba 00 00 00 00       	mov    $0x0,%edx
f011a5a3:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f011a5a9:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011a5af:	29 d0                	sub    %edx,%eax
f011a5b1:	89 c1                	mov    %eax,%ecx
f011a5b3:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f011a5ba:	10 00 00 
f011a5bd:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011a5c2:	0f b6 c0             	movzbl %al,%eax
f011a5c5:	c1 e0 04             	shl    $0x4,%eax
f011a5c8:	89 c2                	mov    %eax,%edx
f011a5ca:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011a5d0:	01 d0                	add    %edx,%eax
f011a5d2:	48                   	dec    %eax
f011a5d3:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f011a5d9:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011a5df:	ba 00 00 00 00       	mov    $0x0,%edx
f011a5e4:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f011a5ea:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011a5f0:	29 d0                	sub    %edx,%eax
f011a5f2:	01 c8                	add    %ecx,%eax
f011a5f4:	8d 90 00 40 00 f9    	lea    -0x6ffc000(%eax),%edx
f011a5fa:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011a600:	39 c2                	cmp    %eax,%edx
f011a602:	74 17                	je     f011a61b <test_kmalloc_nextfit+0x11a9>
		panic("Next Fit not working correctly");
f011a604:	83 ec 04             	sub    $0x4,%esp
f011a607:	68 68 9a 13 f0       	push   $0xf0139a68
f011a60c:	68 70 01 00 00       	push   $0x170
f011a611:	68 5a 97 13 f0       	push   $0xf013975a
f011a616:	e8 95 5b fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a61b:	e8 64 a0 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011a620:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a623:	74 17                	je     f011a63c <test_kmalloc_nextfit+0x11ca>
f011a625:	83 ec 04             	sub    $0x4,%esp
f011a628:	68 74 97 13 f0       	push   $0xf0139774
f011a62d:	68 71 01 00 00       	push   $0x171
f011a632:	68 5a 97 13 f0       	push   $0xf013975a
f011a637:	e8 74 5b fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (4*Mega)/PAGE_SIZE) panic("Wrong allocation");
f011a63c:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011a63f:	e8 82 23 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011a644:	29 c3                	sub    %eax,%ebx
f011a646:	89 d8                	mov    %ebx,%eax
f011a648:	3d 00 04 00 00       	cmp    $0x400,%eax
f011a64d:	74 17                	je     f011a666 <test_kmalloc_nextfit+0x11f4>
f011a64f:	83 ec 04             	sub    $0x4,%esp
f011a652:	68 17 9a 13 f0       	push   $0xf0139a17
f011a657:	68 72 01 00 00       	push   $0x172
f011a65c:	68 5a 97 13 f0       	push   $0xf013975a
f011a661:	e8 4a 5b fe ff       	call   f01001b0 <_panic>

	cprintf("\nCASE2: (next fit WITH looping back) is succeeded...\n") ;
f011a666:	83 ec 0c             	sub    $0xc,%esp
f011a669:	68 c4 9a 13 f0       	push   $0xf0139ac4
f011a66e:	e8 be 67 fe ff       	call   f0100e31 <cprintf>
f011a673:	83 c4 10             	add    $0x10,%esp
	/******************************/

	// Check that next fit returns null in case all holes are not free
	freeDiskFrames = pf_calculate_free_frames() ;
f011a676:	e8 09 a0 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011a67b:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011a67e:	e8 43 23 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011a683:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(6*Mega); 			   // No Suitable Hole is available
f011a686:	83 ec 0c             	sub    $0xc,%esp
f011a689:	68 00 00 60 00       	push   $0x600000
f011a68e:	e8 cc d8 fe ff       	call   f0107f5f <kmalloc>
f011a693:	83 c4 10             	add    $0x10,%esp
f011a696:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != 0x0)
f011a69c:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011a6a2:	85 c0                	test   %eax,%eax
f011a6a4:	74 17                	je     f011a6bd <test_kmalloc_nextfit+0x124b>
		panic("Next Fit not working correctly");
f011a6a6:	83 ec 04             	sub    $0x4,%esp
f011a6a9:	68 68 9a 13 f0       	push   $0xf0139a68
f011a6ae:	68 7c 01 00 00       	push   $0x17c
f011a6b3:	68 5a 97 13 f0       	push   $0xf013975a
f011a6b8:	e8 f3 5a fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a6bd:	e8 c2 9f fe ff       	call   f0104684 <pf_calculate_free_frames>
f011a6c2:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a6c5:	74 17                	je     f011a6de <test_kmalloc_nextfit+0x126c>
f011a6c7:	83 ec 04             	sub    $0x4,%esp
f011a6ca:	68 74 97 13 f0       	push   $0xf0139774
f011a6cf:	68 7d 01 00 00       	push   $0x17d
f011a6d4:	68 5a 97 13 f0       	push   $0xf013975a
f011a6d9:	e8 d2 5a fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation");
f011a6de:	e8 e3 22 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011a6e3:	89 c2                	mov    %eax,%edx
f011a6e5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011a6e8:	39 c2                	cmp    %eax,%edx
f011a6ea:	74 17                	je     f011a703 <test_kmalloc_nextfit+0x1291>
f011a6ec:	83 ec 04             	sub    $0x4,%esp
f011a6ef:	68 17 9a 13 f0       	push   $0xf0139a17
f011a6f4:	68 7e 01 00 00       	push   $0x17e
f011a6f9:	68 5a 97 13 f0       	push   $0xf013975a
f011a6fe:	e8 ad 5a fe ff       	call   f01001b0 <_panic>

	cprintf("\nCASE3: (next fit with insufficient space) is succeeded...\n") ;
f011a703:	83 ec 0c             	sub    $0xc,%esp
f011a706:	68 fc 9a 13 f0       	push   $0xf0139afc
f011a70b:	e8 21 67 fe ff       	call   f0100e31 <cprintf>
f011a710:	83 c4 10             	add    $0x10,%esp
	/******************************/

	cprintf("Congratulations!! test Next Fit completed successfully.\n");
f011a713:	83 ec 0c             	sub    $0xc,%esp
f011a716:	68 38 9b 13 f0       	push   $0xf0139b38
f011a71b:	e8 11 67 fe ff       	call   f0100e31 <cprintf>
f011a720:	83 c4 10             	add    $0x10,%esp
	return 1;
f011a723:	b8 01 00 00 00       	mov    $0x1,%eax

}
f011a728:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011a72b:	5b                   	pop    %ebx
f011a72c:	5f                   	pop    %edi
f011a72d:	5d                   	pop    %ebp
f011a72e:	c3                   	ret    

f011a72f <test_kmalloc_bestfit1>:

int test_kmalloc_bestfit1()
{
f011a72f:	55                   	push   %ebp
f011a730:	89 e5                	mov    %esp,%ebp
f011a732:	57                   	push   %edi
f011a733:	53                   	push   %ebx
f011a734:	81 ec 30 01 00 00    	sub    $0x130,%esp
	cprintf("==============================================\n");
f011a73a:	83 ec 0c             	sub    $0xc,%esp
f011a73d:	68 9c 96 13 f0       	push   $0xf013969c
f011a742:	e8 ea 66 fe ff       	call   f0100e31 <cprintf>
f011a747:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011a74a:	83 ec 0c             	sub    $0xc,%esp
f011a74d:	68 cc 96 13 f0       	push   $0xf01396cc
f011a752:	e8 da 66 fe ff       	call   f0100e31 <cprintf>
f011a757:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011a75a:	83 ec 0c             	sub    $0xc,%esp
f011a75d:	68 9c 96 13 f0       	push   $0xf013969c
f011a762:	e8 ca 66 fe ff       	call   f0100e31 <cprintf>
f011a767:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011a76a:	8d 95 d0 fe ff ff    	lea    -0x130(%ebp),%edx
f011a770:	b9 14 00 00 00       	mov    $0x14,%ecx
f011a775:	b8 00 00 00 00       	mov    $0x0,%eax
f011a77a:	89 d7                	mov    %edx,%edi
f011a77c:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeDiskFrames;

	//[1] Allocate all
	{
		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f011a77e:	e8 43 22 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011a783:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a786:	e8 f9 9e fe ff       	call   f0104684 <pf_calculate_free_frames>
f011a78b:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[0] = kmalloc(3*Mega-kilo);
f011a78e:	83 ec 0c             	sub    $0xc,%esp
f011a791:	68 00 fc 2f 00       	push   $0x2ffc00
f011a796:	e8 c4 d7 fe ff       	call   f0107f5f <kmalloc>
f011a79b:	83 c4 10             	add    $0x10,%esp
f011a79e:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011a7a4:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011a7aa:	89 c1                	mov    %eax,%ecx
f011a7ac:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f011a7b3:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011a7b8:	0f b6 d0             	movzbl %al,%edx
f011a7bb:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011a7be:	01 d0                	add    %edx,%eax
f011a7c0:	48                   	dec    %eax
f011a7c1:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011a7c4:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011a7c7:	ba 00 00 00 00       	mov    $0x0,%edx
f011a7cc:	f7 75 ec             	divl   -0x14(%ebp)
f011a7cf:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011a7d2:	29 d0                	sub    %edx,%eax
f011a7d4:	89 c3                	mov    %eax,%ebx
f011a7d6:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011a7dd:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011a7e2:	0f b6 c0             	movzbl %al,%eax
f011a7e5:	c1 e0 04             	shl    $0x4,%eax
f011a7e8:	89 c2                	mov    %eax,%edx
f011a7ea:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011a7ed:	01 d0                	add    %edx,%eax
f011a7ef:	48                   	dec    %eax
f011a7f0:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011a7f3:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011a7f6:	ba 00 00 00 00       	mov    $0x0,%edx
f011a7fb:	f7 75 e4             	divl   -0x1c(%ebp)
f011a7fe:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011a801:	29 d0                	sub    %edx,%eax
f011a803:	01 d8                	add    %ebx,%eax
f011a805:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011a80a:	39 c1                	cmp    %eax,%ecx
f011a80c:	74 17                	je     f011a825 <test_kmalloc_bestfit1+0xf6>
f011a80e:	83 ec 04             	sub    $0x4,%esp
f011a811:	68 74 9b 13 f0       	push   $0xf0139b74
f011a816:	68 98 01 00 00       	push   $0x198
f011a81b:	68 5a 97 13 f0       	push   $0xf013975a
f011a820:	e8 8b 59 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a825:	e8 5a 9e fe ff       	call   f0104684 <pf_calculate_free_frames>
f011a82a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a82d:	74 17                	je     f011a846 <test_kmalloc_bestfit1+0x117>
f011a82f:	83 ec 04             	sub    $0x4,%esp
f011a832:	68 74 97 13 f0       	push   $0xf0139774
f011a837:	68 99 01 00 00       	push   $0x199
f011a83c:	68 5a 97 13 f0       	push   $0xf013975a
f011a841:	e8 6a 59 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((3*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011a846:	e8 7b 21 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011a84b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a84e:	29 c2                	sub    %eax,%edx
f011a850:	89 d0                	mov    %edx,%eax
f011a852:	3d 00 03 00 00       	cmp    $0x300,%eax
f011a857:	74 17                	je     f011a870 <test_kmalloc_bestfit1+0x141>
f011a859:	83 ec 04             	sub    $0x4,%esp
f011a85c:	68 a4 9b 13 f0       	push   $0xf0139ba4
f011a861:	68 9a 01 00 00       	push   $0x19a
f011a866:	68 5a 97 13 f0       	push   $0xf013975a
f011a86b:	e8 40 59 fe ff       	call   f01001b0 <_panic>

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f011a870:	e8 51 21 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011a875:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a878:	e8 07 9e fe ff       	call   f0104684 <pf_calculate_free_frames>
f011a87d:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[1] = kmalloc(3*Mega-kilo);
f011a880:	83 ec 0c             	sub    $0xc,%esp
f011a883:	68 00 fc 2f 00       	push   $0x2ffc00
f011a888:	e8 d2 d6 fe ff       	call   f0107f5f <kmalloc>
f011a88d:	83 c4 10             	add    $0x10,%esp
f011a890:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
		if ((uint32) ptr_allocations[1] !=  (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... ");
f011a896:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011a89c:	89 c1                	mov    %eax,%ecx
f011a89e:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f011a8a5:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011a8aa:	0f b6 d0             	movzbl %al,%edx
f011a8ad:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011a8b0:	01 d0                	add    %edx,%eax
f011a8b2:	48                   	dec    %eax
f011a8b3:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011a8b6:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011a8b9:	ba 00 00 00 00       	mov    $0x0,%edx
f011a8be:	f7 75 dc             	divl   -0x24(%ebp)
f011a8c1:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011a8c4:	29 d0                	sub    %edx,%eax
f011a8c6:	89 c3                	mov    %eax,%ebx
f011a8c8:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011a8cf:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011a8d4:	0f b6 c0             	movzbl %al,%eax
f011a8d7:	c1 e0 04             	shl    $0x4,%eax
f011a8da:	89 c2                	mov    %eax,%edx
f011a8dc:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011a8df:	01 d0                	add    %edx,%eax
f011a8e1:	48                   	dec    %eax
f011a8e2:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011a8e5:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011a8e8:	ba 00 00 00 00       	mov    $0x0,%edx
f011a8ed:	f7 75 d4             	divl   -0x2c(%ebp)
f011a8f0:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011a8f3:	29 d0                	sub    %edx,%eax
f011a8f5:	01 d8                	add    %ebx,%eax
f011a8f7:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f011a8fc:	39 c1                	cmp    %eax,%ecx
f011a8fe:	74 17                	je     f011a917 <test_kmalloc_bestfit1+0x1e8>
f011a900:	83 ec 04             	sub    $0x4,%esp
f011a903:	68 74 9b 13 f0       	push   $0xf0139b74
f011a908:	68 a0 01 00 00       	push   $0x1a0
f011a90d:	68 5a 97 13 f0       	push   $0xf013975a
f011a912:	e8 99 58 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a917:	e8 68 9d fe ff       	call   f0104684 <pf_calculate_free_frames>
f011a91c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a91f:	74 17                	je     f011a938 <test_kmalloc_bestfit1+0x209>
f011a921:	83 ec 04             	sub    $0x4,%esp
f011a924:	68 74 97 13 f0       	push   $0xf0139774
f011a929:	68 a1 01 00 00       	push   $0x1a1
f011a92e:	68 5a 97 13 f0       	push   $0xf013975a
f011a933:	e8 78 58 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((3*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011a938:	e8 89 20 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011a93d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a940:	29 c2                	sub    %eax,%edx
f011a942:	89 d0                	mov    %edx,%eax
f011a944:	3d 00 03 00 00       	cmp    $0x300,%eax
f011a949:	74 17                	je     f011a962 <test_kmalloc_bestfit1+0x233>
f011a94b:	83 ec 04             	sub    $0x4,%esp
f011a94e:	68 a4 9b 13 f0       	push   $0xf0139ba4
f011a953:	68 a2 01 00 00       	push   $0x1a2
f011a958:	68 5a 97 13 f0       	push   $0xf013975a
f011a95d:	e8 4e 58 fe ff       	call   f01001b0 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011a962:	e8 5f 20 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011a967:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a96a:	e8 15 9d fe ff       	call   f0104684 <pf_calculate_free_frames>
f011a96f:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[2] = kmalloc(2*Mega-kilo);
f011a972:	83 ec 0c             	sub    $0xc,%esp
f011a975:	68 00 fc 1f 00       	push   $0x1ffc00
f011a97a:	e8 e0 d5 fe ff       	call   f0107f5f <kmalloc>
f011a97f:	83 c4 10             	add    $0x10,%esp
f011a982:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) ptr_allocations[2] !=  (ACTUAL_START + 6*Mega)) panic("Wrong start address for the allocated space... ");
f011a988:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011a98e:	89 c1                	mov    %eax,%ecx
f011a990:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011a997:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011a99c:	0f b6 d0             	movzbl %al,%edx
f011a99f:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011a9a2:	01 d0                	add    %edx,%eax
f011a9a4:	48                   	dec    %eax
f011a9a5:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011a9a8:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011a9ab:	ba 00 00 00 00       	mov    $0x0,%edx
f011a9b0:	f7 75 cc             	divl   -0x34(%ebp)
f011a9b3:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011a9b6:	29 d0                	sub    %edx,%eax
f011a9b8:	89 c3                	mov    %eax,%ebx
f011a9ba:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011a9c1:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011a9c6:	0f b6 c0             	movzbl %al,%eax
f011a9c9:	c1 e0 04             	shl    $0x4,%eax
f011a9cc:	89 c2                	mov    %eax,%edx
f011a9ce:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011a9d1:	01 d0                	add    %edx,%eax
f011a9d3:	48                   	dec    %eax
f011a9d4:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011a9d7:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011a9da:	ba 00 00 00 00       	mov    $0x0,%edx
f011a9df:	f7 75 c4             	divl   -0x3c(%ebp)
f011a9e2:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011a9e5:	29 d0                	sub    %edx,%eax
f011a9e7:	01 d8                	add    %ebx,%eax
f011a9e9:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f011a9ee:	39 c1                	cmp    %eax,%ecx
f011a9f0:	74 17                	je     f011aa09 <test_kmalloc_bestfit1+0x2da>
f011a9f2:	83 ec 04             	sub    $0x4,%esp
f011a9f5:	68 74 9b 13 f0       	push   $0xf0139b74
f011a9fa:	68 a8 01 00 00       	push   $0x1a8
f011a9ff:	68 5a 97 13 f0       	push   $0xf013975a
f011aa04:	e8 a7 57 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011aa09:	e8 76 9c fe ff       	call   f0104684 <pf_calculate_free_frames>
f011aa0e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011aa11:	74 17                	je     f011aa2a <test_kmalloc_bestfit1+0x2fb>
f011aa13:	83 ec 04             	sub    $0x4,%esp
f011aa16:	68 74 97 13 f0       	push   $0xf0139774
f011aa1b:	68 a9 01 00 00       	push   $0x1a9
f011aa20:	68 5a 97 13 f0       	push   $0xf013975a
f011aa25:	e8 86 57 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((2*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011aa2a:	e8 97 1f ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011aa2f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011aa32:	29 c2                	sub    %eax,%edx
f011aa34:	89 d0                	mov    %edx,%eax
f011aa36:	3d 00 02 00 00       	cmp    $0x200,%eax
f011aa3b:	74 17                	je     f011aa54 <test_kmalloc_bestfit1+0x325>
f011aa3d:	83 ec 04             	sub    $0x4,%esp
f011aa40:	68 a4 9b 13 f0       	push   $0xf0139ba4
f011aa45:	68 aa 01 00 00       	push   $0x1aa
f011aa4a:	68 5a 97 13 f0       	push   $0xf013975a
f011aa4f:	e8 5c 57 fe ff       	call   f01001b0 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011aa54:	e8 6d 1f ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011aa59:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011aa5c:	e8 23 9c fe ff       	call   f0104684 <pf_calculate_free_frames>
f011aa61:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[3] = kmalloc(2*Mega-kilo);
f011aa64:	83 ec 0c             	sub    $0xc,%esp
f011aa67:	68 00 fc 1f 00       	push   $0x1ffc00
f011aa6c:	e8 ee d4 fe ff       	call   f0107f5f <kmalloc>
f011aa71:	83 c4 10             	add    $0x10,%esp
f011aa74:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f011aa7a:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011aa80:	89 c1                	mov    %eax,%ecx
f011aa82:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011aa89:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011aa8e:	0f b6 d0             	movzbl %al,%edx
f011aa91:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011aa94:	01 d0                	add    %edx,%eax
f011aa96:	48                   	dec    %eax
f011aa97:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011aa9a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011aa9d:	ba 00 00 00 00       	mov    $0x0,%edx
f011aaa2:	f7 75 bc             	divl   -0x44(%ebp)
f011aaa5:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011aaa8:	29 d0                	sub    %edx,%eax
f011aaaa:	89 c3                	mov    %eax,%ebx
f011aaac:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011aab3:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011aab8:	0f b6 c0             	movzbl %al,%eax
f011aabb:	c1 e0 04             	shl    $0x4,%eax
f011aabe:	89 c2                	mov    %eax,%edx
f011aac0:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011aac3:	01 d0                	add    %edx,%eax
f011aac5:	48                   	dec    %eax
f011aac6:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011aac9:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011aacc:	ba 00 00 00 00       	mov    $0x0,%edx
f011aad1:	f7 75 b4             	divl   -0x4c(%ebp)
f011aad4:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011aad7:	29 d0                	sub    %edx,%eax
f011aad9:	01 d8                	add    %ebx,%eax
f011aadb:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f011aae0:	39 c1                	cmp    %eax,%ecx
f011aae2:	74 17                	je     f011aafb <test_kmalloc_bestfit1+0x3cc>
f011aae4:	83 ec 04             	sub    $0x4,%esp
f011aae7:	68 74 9b 13 f0       	push   $0xf0139b74
f011aaec:	68 b0 01 00 00       	push   $0x1b0
f011aaf1:	68 5a 97 13 f0       	push   $0xf013975a
f011aaf6:	e8 b5 56 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011aafb:	e8 84 9b fe ff       	call   f0104684 <pf_calculate_free_frames>
f011ab00:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011ab03:	74 17                	je     f011ab1c <test_kmalloc_bestfit1+0x3ed>
f011ab05:	83 ec 04             	sub    $0x4,%esp
f011ab08:	68 74 97 13 f0       	push   $0xf0139774
f011ab0d:	68 b1 01 00 00       	push   $0x1b1
f011ab12:	68 5a 97 13 f0       	push   $0xf013975a
f011ab17:	e8 94 56 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  ((2*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011ab1c:	e8 a5 1e ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011ab21:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011ab24:	29 c2                	sub    %eax,%edx
f011ab26:	89 d0                	mov    %edx,%eax
f011ab28:	3d 00 02 00 00       	cmp    $0x200,%eax
f011ab2d:	74 17                	je     f011ab46 <test_kmalloc_bestfit1+0x417>
f011ab2f:	83 ec 04             	sub    $0x4,%esp
f011ab32:	68 a4 9b 13 f0       	push   $0xf0139ba4
f011ab37:	68 b2 01 00 00       	push   $0x1b2
f011ab3c:	68 5a 97 13 f0       	push   $0xf013975a
f011ab41:	e8 6a 56 fe ff       	call   f01001b0 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011ab46:	e8 7b 1e ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011ab4b:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ab4e:	e8 31 9b fe ff       	call   f0104684 <pf_calculate_free_frames>
f011ab53:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[4] = kmalloc(1*Mega-kilo);
f011ab56:	83 ec 0c             	sub    $0xc,%esp
f011ab59:	68 00 fc 0f 00       	push   $0xffc00
f011ab5e:	e8 fc d3 fe ff       	call   f0107f5f <kmalloc>
f011ab63:	83 c4 10             	add    $0x10,%esp
f011ab66:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if ((uint32) ptr_allocations[4] !=  (ACTUAL_START + 10*Mega)) panic("Wrong start address for the allocated space... ");
f011ab6c:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011ab72:	89 c1                	mov    %eax,%ecx
f011ab74:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011ab7b:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011ab80:	0f b6 d0             	movzbl %al,%edx
f011ab83:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011ab86:	01 d0                	add    %edx,%eax
f011ab88:	48                   	dec    %eax
f011ab89:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011ab8c:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011ab8f:	ba 00 00 00 00       	mov    $0x0,%edx
f011ab94:	f7 75 ac             	divl   -0x54(%ebp)
f011ab97:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011ab9a:	29 d0                	sub    %edx,%eax
f011ab9c:	89 c3                	mov    %eax,%ebx
f011ab9e:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011aba5:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011abaa:	0f b6 c0             	movzbl %al,%eax
f011abad:	c1 e0 04             	shl    $0x4,%eax
f011abb0:	89 c2                	mov    %eax,%edx
f011abb2:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011abb5:	01 d0                	add    %edx,%eax
f011abb7:	48                   	dec    %eax
f011abb8:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011abbb:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011abbe:	ba 00 00 00 00       	mov    $0x0,%edx
f011abc3:	f7 75 a4             	divl   -0x5c(%ebp)
f011abc6:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011abc9:	29 d0                	sub    %edx,%eax
f011abcb:	01 d8                	add    %ebx,%eax
f011abcd:	2d 00 c0 5f 09       	sub    $0x95fc000,%eax
f011abd2:	39 c1                	cmp    %eax,%ecx
f011abd4:	74 17                	je     f011abed <test_kmalloc_bestfit1+0x4be>
f011abd6:	83 ec 04             	sub    $0x4,%esp
f011abd9:	68 74 9b 13 f0       	push   $0xf0139b74
f011abde:	68 b8 01 00 00       	push   $0x1b8
f011abe3:	68 5a 97 13 f0       	push   $0xf013975a
f011abe8:	e8 c3 55 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011abed:	e8 92 9a fe ff       	call   f0104684 <pf_calculate_free_frames>
f011abf2:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011abf5:	74 17                	je     f011ac0e <test_kmalloc_bestfit1+0x4df>
f011abf7:	83 ec 04             	sub    $0x4,%esp
f011abfa:	68 74 97 13 f0       	push   $0xf0139774
f011abff:	68 b9 01 00 00       	push   $0x1b9
f011ac04:	68 5a 97 13 f0       	push   $0xf013975a
f011ac09:	e8 a2 55 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011ac0e:	e8 b3 1d ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011ac13:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011ac16:	29 c2                	sub    %eax,%edx
f011ac18:	89 d0                	mov    %edx,%eax
f011ac1a:	3d 00 01 00 00       	cmp    $0x100,%eax
f011ac1f:	74 17                	je     f011ac38 <test_kmalloc_bestfit1+0x509>
f011ac21:	83 ec 04             	sub    $0x4,%esp
f011ac24:	68 a4 9b 13 f0       	push   $0xf0139ba4
f011ac29:	68 ba 01 00 00       	push   $0x1ba
f011ac2e:	68 5a 97 13 f0       	push   $0xf013975a
f011ac33:	e8 78 55 fe ff       	call   f01001b0 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011ac38:	e8 89 1d ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011ac3d:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ac40:	e8 3f 9a fe ff       	call   f0104684 <pf_calculate_free_frames>
f011ac45:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[5] = kmalloc(1*Mega-kilo);
f011ac48:	83 ec 0c             	sub    $0xc,%esp
f011ac4b:	68 00 fc 0f 00       	push   $0xffc00
f011ac50:	e8 0a d3 fe ff       	call   f0107f5f <kmalloc>
f011ac55:	83 c4 10             	add    $0x10,%esp
f011ac58:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 11*Mega)) panic("Wrong start address for the allocated space... ");
f011ac5e:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011ac64:	89 c1                	mov    %eax,%ecx
f011ac66:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011ac6d:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011ac72:	0f b6 d0             	movzbl %al,%edx
f011ac75:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011ac78:	01 d0                	add    %edx,%eax
f011ac7a:	48                   	dec    %eax
f011ac7b:	89 45 98             	mov    %eax,-0x68(%ebp)
f011ac7e:	8b 45 98             	mov    -0x68(%ebp),%eax
f011ac81:	ba 00 00 00 00       	mov    $0x0,%edx
f011ac86:	f7 75 9c             	divl   -0x64(%ebp)
f011ac89:	8b 45 98             	mov    -0x68(%ebp),%eax
f011ac8c:	29 d0                	sub    %edx,%eax
f011ac8e:	89 c3                	mov    %eax,%ebx
f011ac90:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011ac97:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011ac9c:	0f b6 c0             	movzbl %al,%eax
f011ac9f:	c1 e0 04             	shl    $0x4,%eax
f011aca2:	89 c2                	mov    %eax,%edx
f011aca4:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011aca7:	01 d0                	add    %edx,%eax
f011aca9:	48                   	dec    %eax
f011acaa:	89 45 90             	mov    %eax,-0x70(%ebp)
f011acad:	8b 45 90             	mov    -0x70(%ebp),%eax
f011acb0:	ba 00 00 00 00       	mov    $0x0,%edx
f011acb5:	f7 75 94             	divl   -0x6c(%ebp)
f011acb8:	8b 45 90             	mov    -0x70(%ebp),%eax
f011acbb:	29 d0                	sub    %edx,%eax
f011acbd:	01 d8                	add    %ebx,%eax
f011acbf:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f011acc4:	39 c1                	cmp    %eax,%ecx
f011acc6:	74 17                	je     f011acdf <test_kmalloc_bestfit1+0x5b0>
f011acc8:	83 ec 04             	sub    $0x4,%esp
f011accb:	68 74 9b 13 f0       	push   $0xf0139b74
f011acd0:	68 c0 01 00 00       	push   $0x1c0
f011acd5:	68 5a 97 13 f0       	push   $0xf013975a
f011acda:	e8 d1 54 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011acdf:	e8 a0 99 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011ace4:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011ace7:	74 17                	je     f011ad00 <test_kmalloc_bestfit1+0x5d1>
f011ace9:	83 ec 04             	sub    $0x4,%esp
f011acec:	68 74 97 13 f0       	push   $0xf0139774
f011acf1:	68 c1 01 00 00       	push   $0x1c1
f011acf6:	68 5a 97 13 f0       	push   $0xf013975a
f011acfb:	e8 b0 54 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011ad00:	e8 c1 1c ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011ad05:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011ad08:	29 c2                	sub    %eax,%edx
f011ad0a:	89 d0                	mov    %edx,%eax
f011ad0c:	3d 00 01 00 00       	cmp    $0x100,%eax
f011ad11:	74 17                	je     f011ad2a <test_kmalloc_bestfit1+0x5fb>
f011ad13:	83 ec 04             	sub    $0x4,%esp
f011ad16:	68 a4 9b 13 f0       	push   $0xf0139ba4
f011ad1b:	68 c2 01 00 00       	push   $0x1c2
f011ad20:	68 5a 97 13 f0       	push   $0xf013975a
f011ad25:	e8 86 54 fe ff       	call   f01001b0 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011ad2a:	e8 97 1c ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011ad2f:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ad32:	e8 4d 99 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011ad37:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[6] = kmalloc(1*Mega-kilo);
f011ad3a:	83 ec 0c             	sub    $0xc,%esp
f011ad3d:	68 00 fc 0f 00       	push   $0xffc00
f011ad42:	e8 18 d2 fe ff       	call   f0107f5f <kmalloc>
f011ad47:	83 c4 10             	add    $0x10,%esp
f011ad4a:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 12*Mega)) panic("Wrong start address for the allocated space... ");
f011ad50:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011ad56:	89 c1                	mov    %eax,%ecx
f011ad58:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011ad5f:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011ad64:	0f b6 d0             	movzbl %al,%edx
f011ad67:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011ad6a:	01 d0                	add    %edx,%eax
f011ad6c:	48                   	dec    %eax
f011ad6d:	89 45 88             	mov    %eax,-0x78(%ebp)
f011ad70:	8b 45 88             	mov    -0x78(%ebp),%eax
f011ad73:	ba 00 00 00 00       	mov    $0x0,%edx
f011ad78:	f7 75 8c             	divl   -0x74(%ebp)
f011ad7b:	8b 45 88             	mov    -0x78(%ebp),%eax
f011ad7e:	29 d0                	sub    %edx,%eax
f011ad80:	89 c3                	mov    %eax,%ebx
f011ad82:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011ad89:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011ad8e:	0f b6 c0             	movzbl %al,%eax
f011ad91:	c1 e0 04             	shl    $0x4,%eax
f011ad94:	89 c2                	mov    %eax,%edx
f011ad96:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011ad99:	01 d0                	add    %edx,%eax
f011ad9b:	48                   	dec    %eax
f011ad9c:	89 45 80             	mov    %eax,-0x80(%ebp)
f011ad9f:	8b 45 80             	mov    -0x80(%ebp),%eax
f011ada2:	ba 00 00 00 00       	mov    $0x0,%edx
f011ada7:	f7 75 84             	divl   -0x7c(%ebp)
f011adaa:	8b 45 80             	mov    -0x80(%ebp),%eax
f011adad:	29 d0                	sub    %edx,%eax
f011adaf:	01 d8                	add    %ebx,%eax
f011adb1:	2d 00 c0 3f 09       	sub    $0x93fc000,%eax
f011adb6:	39 c1                	cmp    %eax,%ecx
f011adb8:	74 17                	je     f011add1 <test_kmalloc_bestfit1+0x6a2>
f011adba:	83 ec 04             	sub    $0x4,%esp
f011adbd:	68 74 9b 13 f0       	push   $0xf0139b74
f011adc2:	68 c8 01 00 00       	push   $0x1c8
f011adc7:	68 5a 97 13 f0       	push   $0xf013975a
f011adcc:	e8 df 53 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011add1:	e8 ae 98 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011add6:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011add9:	74 17                	je     f011adf2 <test_kmalloc_bestfit1+0x6c3>
f011addb:	83 ec 04             	sub    $0x4,%esp
f011adde:	68 74 97 13 f0       	push   $0xf0139774
f011ade3:	68 c9 01 00 00       	push   $0x1c9
f011ade8:	68 5a 97 13 f0       	push   $0xf013975a
f011aded:	e8 be 53 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011adf2:	e8 cf 1b ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011adf7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011adfa:	29 c2                	sub    %eax,%edx
f011adfc:	89 d0                	mov    %edx,%eax
f011adfe:	3d 00 01 00 00       	cmp    $0x100,%eax
f011ae03:	74 17                	je     f011ae1c <test_kmalloc_bestfit1+0x6ed>
f011ae05:	83 ec 04             	sub    $0x4,%esp
f011ae08:	68 a4 9b 13 f0       	push   $0xf0139ba4
f011ae0d:	68 ca 01 00 00       	push   $0x1ca
f011ae12:	68 5a 97 13 f0       	push   $0xf013975a
f011ae17:	e8 94 53 fe ff       	call   f01001b0 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011ae1c:	e8 a5 1b ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011ae21:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ae24:	e8 5b 98 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011ae29:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[7] = kmalloc(1*Mega-kilo);
f011ae2c:	83 ec 0c             	sub    $0xc,%esp
f011ae2f:	68 00 fc 0f 00       	push   $0xffc00
f011ae34:	e8 26 d1 fe ff       	call   f0107f5f <kmalloc>
f011ae39:	83 c4 10             	add    $0x10,%esp
f011ae3c:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega)) panic("Wrong start address for the allocated space... ");
f011ae42:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011ae48:	89 c1                	mov    %eax,%ecx
f011ae4a:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011ae51:	10 00 00 
f011ae54:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011ae59:	0f b6 d0             	movzbl %al,%edx
f011ae5c:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011ae62:	01 d0                	add    %edx,%eax
f011ae64:	48                   	dec    %eax
f011ae65:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011ae6b:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011ae71:	ba 00 00 00 00       	mov    $0x0,%edx
f011ae76:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011ae7c:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011ae82:	29 d0                	sub    %edx,%eax
f011ae84:	89 c3                	mov    %eax,%ebx
f011ae86:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011ae8d:	10 00 00 
f011ae90:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011ae95:	0f b6 c0             	movzbl %al,%eax
f011ae98:	c1 e0 04             	shl    $0x4,%eax
f011ae9b:	89 c2                	mov    %eax,%edx
f011ae9d:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011aea3:	01 d0                	add    %edx,%eax
f011aea5:	48                   	dec    %eax
f011aea6:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011aeac:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011aeb2:	ba 00 00 00 00       	mov    $0x0,%edx
f011aeb7:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011aebd:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011aec3:	29 d0                	sub    %edx,%eax
f011aec5:	01 d8                	add    %ebx,%eax
f011aec7:	2d 00 c0 2f 09       	sub    $0x92fc000,%eax
f011aecc:	39 c1                	cmp    %eax,%ecx
f011aece:	74 17                	je     f011aee7 <test_kmalloc_bestfit1+0x7b8>
f011aed0:	83 ec 04             	sub    $0x4,%esp
f011aed3:	68 74 9b 13 f0       	push   $0xf0139b74
f011aed8:	68 d0 01 00 00       	push   $0x1d0
f011aedd:	68 5a 97 13 f0       	push   $0xf013975a
f011aee2:	e8 c9 52 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011aee7:	e8 98 97 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011aeec:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011aeef:	74 17                	je     f011af08 <test_kmalloc_bestfit1+0x7d9>
f011aef1:	83 ec 04             	sub    $0x4,%esp
f011aef4:	68 74 97 13 f0       	push   $0xf0139774
f011aef9:	68 d1 01 00 00       	push   $0x1d1
f011aefe:	68 5a 97 13 f0       	push   $0xf013975a
f011af03:	e8 a8 52 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011af08:	e8 b9 1a ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011af0d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011af10:	29 c2                	sub    %eax,%edx
f011af12:	89 d0                	mov    %edx,%eax
f011af14:	3d 00 01 00 00       	cmp    $0x100,%eax
f011af19:	74 17                	je     f011af32 <test_kmalloc_bestfit1+0x803>
f011af1b:	83 ec 04             	sub    $0x4,%esp
f011af1e:	68 a4 9b 13 f0       	push   $0xf0139ba4
f011af23:	68 d2 01 00 00       	push   $0x1d2
f011af28:	68 5a 97 13 f0       	push   $0xf013975a
f011af2d:	e8 7e 52 fe ff       	call   f01001b0 <_panic>
	}

	//[2] Free some to create holes
	{
		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011af32:	e8 8f 1a ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011af37:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011af3a:	e8 45 97 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011af3f:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[1]);
f011af42:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011af48:	83 ec 0c             	sub    $0xc,%esp
f011af4b:	50                   	push   %eax
f011af4c:	e8 28 d0 fe ff       	call   f0107f79 <kfree>
f011af51:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011af54:	e8 2b 97 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011af59:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011af5c:	74 17                	je     f011af75 <test_kmalloc_bestfit1+0x846>
f011af5e:	83 ec 04             	sub    $0x4,%esp
f011af61:	68 74 97 13 f0       	push   $0xf0139774
f011af66:	68 db 01 00 00       	push   $0x1db
f011af6b:	68 5a 97 13 f0       	push   $0xf013975a
f011af70:	e8 3b 52 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != ((3*Mega)/PAGE_SIZE)) panic("Wrong free: ");
f011af75:	e8 4c 1a ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011af7a:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011af7d:	3d 00 03 00 00       	cmp    $0x300,%eax
f011af82:	74 17                	je     f011af9b <test_kmalloc_bestfit1+0x86c>
f011af84:	83 ec 04             	sub    $0x4,%esp
f011af87:	68 b7 9b 13 f0       	push   $0xf0139bb7
f011af8c:	68 dc 01 00 00       	push   $0x1dc
f011af91:	68 5a 97 13 f0       	push   $0xf013975a
f011af96:	e8 15 52 fe ff       	call   f01001b0 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011af9b:	e8 26 1a ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011afa0:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011afa3:	e8 dc 96 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011afa8:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[3]);
f011afab:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011afb1:	83 ec 0c             	sub    $0xc,%esp
f011afb4:	50                   	push   %eax
f011afb5:	e8 bf cf fe ff       	call   f0107f79 <kfree>
f011afba:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011afbd:	e8 c2 96 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011afc2:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011afc5:	74 17                	je     f011afde <test_kmalloc_bestfit1+0x8af>
f011afc7:	83 ec 04             	sub    $0x4,%esp
f011afca:	68 74 97 13 f0       	push   $0xf0139774
f011afcf:	68 e2 01 00 00       	push   $0x1e2
f011afd4:	68 5a 97 13 f0       	push   $0xf013975a
f011afd9:	e8 d2 51 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != ((2*Mega)/PAGE_SIZE)) panic("Wrong free: ");
f011afde:	e8 e3 19 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011afe3:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011afe6:	3d 00 02 00 00       	cmp    $0x200,%eax
f011afeb:	74 17                	je     f011b004 <test_kmalloc_bestfit1+0x8d5>
f011afed:	83 ec 04             	sub    $0x4,%esp
f011aff0:	68 b7 9b 13 f0       	push   $0xf0139bb7
f011aff5:	68 e3 01 00 00       	push   $0x1e3
f011affa:	68 5a 97 13 f0       	push   $0xf013975a
f011afff:	e8 ac 51 fe ff       	call   f01001b0 <_panic>

		//1 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011b004:	e8 bd 19 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011b009:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b00c:	e8 73 96 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011b011:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[5]);
f011b014:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011b01a:	83 ec 0c             	sub    $0xc,%esp
f011b01d:	50                   	push   %eax
f011b01e:	e8 56 cf fe ff       	call   f0107f79 <kfree>
f011b023:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b026:	e8 59 96 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011b02b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b02e:	74 17                	je     f011b047 <test_kmalloc_bestfit1+0x918>
f011b030:	83 ec 04             	sub    $0x4,%esp
f011b033:	68 74 97 13 f0       	push   $0xf0139774
f011b038:	68 e9 01 00 00       	push   $0x1e9
f011b03d:	68 5a 97 13 f0       	push   $0xf013975a
f011b042:	e8 69 51 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011b047:	e8 7a 19 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011b04c:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011b04f:	3d 00 01 00 00       	cmp    $0x100,%eax
f011b054:	74 17                	je     f011b06d <test_kmalloc_bestfit1+0x93e>
f011b056:	83 ec 04             	sub    $0x4,%esp
f011b059:	68 b7 9b 13 f0       	push   $0xf0139bb7
f011b05e:	68 ea 01 00 00       	push   $0x1ea
f011b063:	68 5a 97 13 f0       	push   $0xf013975a
f011b068:	e8 43 51 fe ff       	call   f01001b0 <_panic>
	}

	//[3] Allocate again [test best fit]
	{
		//Allocate 512 KB - should be placed in 3rd hole
		freeFrames = sys_calculate_free_frames() ;
f011b06d:	e8 54 19 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011b072:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b075:	e8 0a 96 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011b07a:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[8] = kmalloc(512*kilo);
f011b07d:	83 ec 0c             	sub    $0xc,%esp
f011b080:	68 00 00 08 00       	push   $0x80000
f011b085:	e8 d5 ce fe ff       	call   f0107f5f <kmalloc>
f011b08a:	83 c4 10             	add    $0x10,%esp
f011b08d:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		if ((uint32) ptr_allocations[8] !=  (ACTUAL_START + 11*Mega)) panic("Wrong start address for the allocated space... ");
f011b093:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011b099:	89 c1                	mov    %eax,%ecx
f011b09b:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011b0a2:	10 00 00 
f011b0a5:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011b0aa:	0f b6 d0             	movzbl %al,%edx
f011b0ad:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011b0b3:	01 d0                	add    %edx,%eax
f011b0b5:	48                   	dec    %eax
f011b0b6:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011b0bc:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011b0c2:	ba 00 00 00 00       	mov    $0x0,%edx
f011b0c7:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011b0cd:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011b0d3:	29 d0                	sub    %edx,%eax
f011b0d5:	89 c3                	mov    %eax,%ebx
f011b0d7:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011b0de:	10 00 00 
f011b0e1:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011b0e6:	0f b6 c0             	movzbl %al,%eax
f011b0e9:	c1 e0 04             	shl    $0x4,%eax
f011b0ec:	89 c2                	mov    %eax,%edx
f011b0ee:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011b0f4:	01 d0                	add    %edx,%eax
f011b0f6:	48                   	dec    %eax
f011b0f7:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011b0fd:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011b103:	ba 00 00 00 00       	mov    $0x0,%edx
f011b108:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011b10e:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011b114:	29 d0                	sub    %edx,%eax
f011b116:	01 d8                	add    %ebx,%eax
f011b118:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f011b11d:	39 c1                	cmp    %eax,%ecx
f011b11f:	74 17                	je     f011b138 <test_kmalloc_bestfit1+0xa09>
f011b121:	83 ec 04             	sub    $0x4,%esp
f011b124:	68 74 9b 13 f0       	push   $0xf0139b74
f011b129:	68 f3 01 00 00       	push   $0x1f3
f011b12e:	68 5a 97 13 f0       	push   $0xf013975a
f011b133:	e8 78 50 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b138:	e8 47 95 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011b13d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b140:	74 17                	je     f011b159 <test_kmalloc_bestfit1+0xa2a>
f011b142:	83 ec 04             	sub    $0x4,%esp
f011b145:	68 74 97 13 f0       	push   $0xf0139774
f011b14a:	68 f4 01 00 00       	push   $0x1f4
f011b14f:	68 5a 97 13 f0       	push   $0xf013975a
f011b154:	e8 57 50 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 128) panic("Wrong allocation: ");
f011b159:	e8 68 18 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011b15e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b161:	29 c2                	sub    %eax,%edx
f011b163:	89 d0                	mov    %edx,%eax
f011b165:	3d 80 00 00 00       	cmp    $0x80,%eax
f011b16a:	74 17                	je     f011b183 <test_kmalloc_bestfit1+0xa54>
f011b16c:	83 ec 04             	sub    $0x4,%esp
f011b16f:	68 a4 9b 13 f0       	push   $0xf0139ba4
f011b174:	68 f5 01 00 00       	push   $0x1f5
f011b179:	68 5a 97 13 f0       	push   $0xf013975a
f011b17e:	e8 2d 50 fe ff       	call   f01001b0 <_panic>

		//Allocate 1 MB - should be placed in 2nd hole
		freeFrames = sys_calculate_free_frames() ;
f011b183:	e8 3e 18 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011b188:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b18b:	e8 f4 94 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011b190:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega - kilo);
f011b193:	83 ec 0c             	sub    $0xc,%esp
f011b196:	68 00 fc 0f 00       	push   $0xffc00
f011b19b:	e8 bf cd fe ff       	call   f0107f5f <kmalloc>
f011b1a0:	83 c4 10             	add    $0x10,%esp
f011b1a3:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
		if ((uint32) ptr_allocations[9] !=  (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f011b1a9:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011b1af:	89 c1                	mov    %eax,%ecx
f011b1b1:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011b1b8:	10 00 00 
f011b1bb:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011b1c0:	0f b6 d0             	movzbl %al,%edx
f011b1c3:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011b1c9:	01 d0                	add    %edx,%eax
f011b1cb:	48                   	dec    %eax
f011b1cc:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011b1d2:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011b1d8:	ba 00 00 00 00       	mov    $0x0,%edx
f011b1dd:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011b1e3:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011b1e9:	29 d0                	sub    %edx,%eax
f011b1eb:	89 c3                	mov    %eax,%ebx
f011b1ed:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011b1f4:	10 00 00 
f011b1f7:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011b1fc:	0f b6 c0             	movzbl %al,%eax
f011b1ff:	c1 e0 04             	shl    $0x4,%eax
f011b202:	89 c2                	mov    %eax,%edx
f011b204:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011b20a:	01 d0                	add    %edx,%eax
f011b20c:	48                   	dec    %eax
f011b20d:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011b213:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011b219:	ba 00 00 00 00       	mov    $0x0,%edx
f011b21e:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011b224:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011b22a:	29 d0                	sub    %edx,%eax
f011b22c:	01 d8                	add    %ebx,%eax
f011b22e:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f011b233:	39 c1                	cmp    %eax,%ecx
f011b235:	74 17                	je     f011b24e <test_kmalloc_bestfit1+0xb1f>
f011b237:	83 ec 04             	sub    $0x4,%esp
f011b23a:	68 74 9b 13 f0       	push   $0xf0139b74
f011b23f:	68 fb 01 00 00       	push   $0x1fb
f011b244:	68 5a 97 13 f0       	push   $0xf013975a
f011b249:	e8 62 4f fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b24e:	e8 31 94 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011b253:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b256:	74 17                	je     f011b26f <test_kmalloc_bestfit1+0xb40>
f011b258:	83 ec 04             	sub    $0x4,%esp
f011b25b:	68 74 97 13 f0       	push   $0xf0139774
f011b260:	68 fc 01 00 00       	push   $0x1fc
f011b265:	68 5a 97 13 f0       	push   $0xf013975a
f011b26a:	e8 41 4f fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011b26f:	e8 52 17 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011b274:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b277:	29 c2                	sub    %eax,%edx
f011b279:	89 d0                	mov    %edx,%eax
f011b27b:	3d 00 01 00 00       	cmp    $0x100,%eax
f011b280:	74 17                	je     f011b299 <test_kmalloc_bestfit1+0xb6a>
f011b282:	83 ec 04             	sub    $0x4,%esp
f011b285:	68 a4 9b 13 f0       	push   $0xf0139ba4
f011b28a:	68 fd 01 00 00       	push   $0x1fd
f011b28f:	68 5a 97 13 f0       	push   $0xf013975a
f011b294:	e8 17 4f fe ff       	call   f01001b0 <_panic>

		//Allocate 256 KB - should be placed in remaining of 3rd hole
		freeFrames = sys_calculate_free_frames() ;
f011b299:	e8 28 17 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011b29e:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b2a1:	e8 de 93 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011b2a6:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[10] = kmalloc(256*kilo - kilo);
f011b2a9:	83 ec 0c             	sub    $0xc,%esp
f011b2ac:	68 00 fc 03 00       	push   $0x3fc00
f011b2b1:	e8 a9 cc fe ff       	call   f0107f5f <kmalloc>
f011b2b6:	83 c4 10             	add    $0x10,%esp
f011b2b9:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
		if ((uint32) ptr_allocations[10] !=  (ACTUAL_START + 11*Mega + 512*kilo)) panic("Wrong start address for the allocated space... ");
f011b2bf:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011b2c5:	89 c1                	mov    %eax,%ecx
f011b2c7:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011b2ce:	10 00 00 
f011b2d1:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011b2d6:	0f b6 d0             	movzbl %al,%edx
f011b2d9:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011b2df:	01 d0                	add    %edx,%eax
f011b2e1:	48                   	dec    %eax
f011b2e2:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011b2e8:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011b2ee:	ba 00 00 00 00       	mov    $0x0,%edx
f011b2f3:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011b2f9:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011b2ff:	29 d0                	sub    %edx,%eax
f011b301:	89 c3                	mov    %eax,%ebx
f011b303:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011b30a:	10 00 00 
f011b30d:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011b312:	0f b6 c0             	movzbl %al,%eax
f011b315:	c1 e0 04             	shl    $0x4,%eax
f011b318:	89 c2                	mov    %eax,%edx
f011b31a:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011b320:	01 d0                	add    %edx,%eax
f011b322:	48                   	dec    %eax
f011b323:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011b329:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011b32f:	ba 00 00 00 00       	mov    $0x0,%edx
f011b334:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011b33a:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011b340:	29 d0                	sub    %edx,%eax
f011b342:	01 d8                	add    %ebx,%eax
f011b344:	2d 00 c0 47 09       	sub    $0x947c000,%eax
f011b349:	39 c1                	cmp    %eax,%ecx
f011b34b:	74 17                	je     f011b364 <test_kmalloc_bestfit1+0xc35>
f011b34d:	83 ec 04             	sub    $0x4,%esp
f011b350:	68 74 9b 13 f0       	push   $0xf0139b74
f011b355:	68 03 02 00 00       	push   $0x203
f011b35a:	68 5a 97 13 f0       	push   $0xf013975a
f011b35f:	e8 4c 4e fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b364:	e8 1b 93 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011b369:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b36c:	74 17                	je     f011b385 <test_kmalloc_bestfit1+0xc56>
f011b36e:	83 ec 04             	sub    $0x4,%esp
f011b371:	68 74 97 13 f0       	push   $0xf0139774
f011b376:	68 04 02 00 00       	push   $0x204
f011b37b:	68 5a 97 13 f0       	push   $0xf013975a
f011b380:	e8 2b 4e fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 64) panic("Wrong allocation: ");
f011b385:	e8 3c 16 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011b38a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b38d:	29 c2                	sub    %eax,%edx
f011b38f:	89 d0                	mov    %edx,%eax
f011b391:	83 f8 40             	cmp    $0x40,%eax
f011b394:	74 17                	je     f011b3ad <test_kmalloc_bestfit1+0xc7e>
f011b396:	83 ec 04             	sub    $0x4,%esp
f011b399:	68 a4 9b 13 f0       	push   $0xf0139ba4
f011b39e:	68 05 02 00 00       	push   $0x205
f011b3a3:	68 5a 97 13 f0       	push   $0xf013975a
f011b3a8:	e8 03 4e fe ff       	call   f01001b0 <_panic>

		//Allocate 4 MB - should be placed in end of all allocations
		freeFrames = sys_calculate_free_frames() ;
f011b3ad:	e8 14 16 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011b3b2:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b3b5:	e8 ca 92 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011b3ba:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[11] = kmalloc(4*Mega - kilo);
f011b3bd:	83 ec 0c             	sub    $0xc,%esp
f011b3c0:	68 00 fc 3f 00       	push   $0x3ffc00
f011b3c5:	e8 95 cb fe ff       	call   f0107f5f <kmalloc>
f011b3ca:	83 c4 10             	add    $0x10,%esp
f011b3cd:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 14*Mega)) panic("Wrong start address for the allocated space... ");
f011b3d3:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011b3d9:	89 c1                	mov    %eax,%ecx
f011b3db:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011b3e2:	10 00 00 
f011b3e5:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011b3ea:	0f b6 d0             	movzbl %al,%edx
f011b3ed:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011b3f3:	01 d0                	add    %edx,%eax
f011b3f5:	48                   	dec    %eax
f011b3f6:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011b3fc:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011b402:	ba 00 00 00 00       	mov    $0x0,%edx
f011b407:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011b40d:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011b413:	29 d0                	sub    %edx,%eax
f011b415:	89 c3                	mov    %eax,%ebx
f011b417:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011b41e:	10 00 00 
f011b421:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011b426:	0f b6 c0             	movzbl %al,%eax
f011b429:	c1 e0 04             	shl    $0x4,%eax
f011b42c:	89 c2                	mov    %eax,%edx
f011b42e:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011b434:	01 d0                	add    %edx,%eax
f011b436:	48                   	dec    %eax
f011b437:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011b43d:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011b443:	ba 00 00 00 00       	mov    $0x0,%edx
f011b448:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011b44e:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011b454:	29 d0                	sub    %edx,%eax
f011b456:	01 d8                	add    %ebx,%eax
f011b458:	2d 00 c0 1f 09       	sub    $0x91fc000,%eax
f011b45d:	39 c1                	cmp    %eax,%ecx
f011b45f:	74 17                	je     f011b478 <test_kmalloc_bestfit1+0xd49>
f011b461:	83 ec 04             	sub    $0x4,%esp
f011b464:	68 74 9b 13 f0       	push   $0xf0139b74
f011b469:	68 0b 02 00 00       	push   $0x20b
f011b46e:	68 5a 97 13 f0       	push   $0xf013975a
f011b473:	e8 38 4d fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b478:	e8 07 92 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011b47d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b480:	74 17                	je     f011b499 <test_kmalloc_bestfit1+0xd6a>
f011b482:	83 ec 04             	sub    $0x4,%esp
f011b485:	68 74 97 13 f0       	push   $0xf0139774
f011b48a:	68 0c 02 00 00       	push   $0x20c
f011b48f:	68 5a 97 13 f0       	push   $0xf013975a
f011b494:	e8 17 4d fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1024) panic("Wrong allocation: ");
f011b499:	e8 28 15 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011b49e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b4a1:	29 c2                	sub    %eax,%edx
f011b4a3:	89 d0                	mov    %edx,%eax
f011b4a5:	3d 00 04 00 00       	cmp    $0x400,%eax
f011b4aa:	74 17                	je     f011b4c3 <test_kmalloc_bestfit1+0xd94>
f011b4ac:	83 ec 04             	sub    $0x4,%esp
f011b4af:	68 a4 9b 13 f0       	push   $0xf0139ba4
f011b4b4:	68 0d 02 00 00       	push   $0x20d
f011b4b9:	68 5a 97 13 f0       	push   $0xf013975a
f011b4be:	e8 ed 4c fe ff       	call   f01001b0 <_panic>
	}

	//[4] Free contiguous allocations
	{
		//1M Hole appended to already existing 1M hole in the middle
		freeFrames = sys_calculate_free_frames() ;
f011b4c3:	e8 fe 14 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011b4c8:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b4cb:	e8 b4 91 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011b4d0:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[4]);
f011b4d3:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011b4d9:	83 ec 0c             	sub    $0xc,%esp
f011b4dc:	50                   	push   %eax
f011b4dd:	e8 97 ca fe ff       	call   f0107f79 <kfree>
f011b4e2:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b4e5:	e8 9a 91 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011b4ea:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b4ed:	74 17                	je     f011b506 <test_kmalloc_bestfit1+0xdd7>
f011b4ef:	83 ec 04             	sub    $0x4,%esp
f011b4f2:	68 74 97 13 f0       	push   $0xf0139774
f011b4f7:	68 16 02 00 00       	push   $0x216
f011b4fc:	68 5a 97 13 f0       	push   $0xf013975a
f011b501:	e8 aa 4c fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011b506:	e8 bb 14 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011b50b:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011b50e:	3d 00 01 00 00       	cmp    $0x100,%eax
f011b513:	74 17                	je     f011b52c <test_kmalloc_bestfit1+0xdfd>
f011b515:	83 ec 04             	sub    $0x4,%esp
f011b518:	68 b7 9b 13 f0       	push   $0xf0139bb7
f011b51d:	68 17 02 00 00       	push   $0x217
f011b522:	68 5a 97 13 f0       	push   $0xf013975a
f011b527:	e8 84 4c fe ff       	call   f01001b0 <_panic>

		//another 512 KB Hole appended to the hole
		freeFrames = sys_calculate_free_frames() ;
f011b52c:	e8 95 14 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011b531:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b534:	e8 4b 91 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011b539:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[8]);
f011b53c:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011b542:	83 ec 0c             	sub    $0xc,%esp
f011b545:	50                   	push   %eax
f011b546:	e8 2e ca fe ff       	call   f0107f79 <kfree>
f011b54b:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b54e:	e8 31 91 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011b553:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b556:	74 17                	je     f011b56f <test_kmalloc_bestfit1+0xe40>
f011b558:	83 ec 04             	sub    $0x4,%esp
f011b55b:	68 74 97 13 f0       	push   $0xf0139774
f011b560:	68 1d 02 00 00       	push   $0x21d
f011b565:	68 5a 97 13 f0       	push   $0xf013975a
f011b56a:	e8 41 4c fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 128) panic("Wrong free: ");
f011b56f:	e8 52 14 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011b574:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011b577:	3d 80 00 00 00       	cmp    $0x80,%eax
f011b57c:	74 17                	je     f011b595 <test_kmalloc_bestfit1+0xe66>
f011b57e:	83 ec 04             	sub    $0x4,%esp
f011b581:	68 b7 9b 13 f0       	push   $0xf0139bb7
f011b586:	68 1e 02 00 00       	push   $0x21e
f011b58b:	68 5a 97 13 f0       	push   $0xf013975a
f011b590:	e8 1b 4c fe ff       	call   f01001b0 <_panic>
	}

	//[5] Allocate again [test best fit]
	{
		//Allocate 2 MB - should be placed in the contiguous hole (2 MB + 512 KB)
		freeFrames = sys_calculate_free_frames();
f011b595:	e8 2c 14 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011b59a:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b59d:	e8 e2 90 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011b5a2:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[12] = kmalloc(2*Mega - kilo);
f011b5a5:	83 ec 0c             	sub    $0xc,%esp
f011b5a8:	68 00 fc 1f 00       	push   $0x1ffc00
f011b5ad:	e8 ad c9 fe ff       	call   f0107f5f <kmalloc>
f011b5b2:	83 c4 10             	add    $0x10,%esp
f011b5b5:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 9*Mega)) panic("Wrong start address for the allocated space... ");
f011b5bb:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011b5c1:	89 c1                	mov    %eax,%ecx
f011b5c3:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011b5ca:	10 00 00 
f011b5cd:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011b5d2:	0f b6 d0             	movzbl %al,%edx
f011b5d5:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011b5db:	01 d0                	add    %edx,%eax
f011b5dd:	48                   	dec    %eax
f011b5de:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011b5e4:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011b5ea:	ba 00 00 00 00       	mov    $0x0,%edx
f011b5ef:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011b5f5:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011b5fb:	29 d0                	sub    %edx,%eax
f011b5fd:	89 c3                	mov    %eax,%ebx
f011b5ff:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011b606:	10 00 00 
f011b609:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011b60e:	0f b6 c0             	movzbl %al,%eax
f011b611:	c1 e0 04             	shl    $0x4,%eax
f011b614:	89 c2                	mov    %eax,%edx
f011b616:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011b61c:	01 d0                	add    %edx,%eax
f011b61e:	48                   	dec    %eax
f011b61f:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011b625:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011b62b:	ba 00 00 00 00       	mov    $0x0,%edx
f011b630:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011b636:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011b63c:	29 d0                	sub    %edx,%eax
f011b63e:	01 d8                	add    %ebx,%eax
f011b640:	2d 00 c0 6f 09       	sub    $0x96fc000,%eax
f011b645:	39 c1                	cmp    %eax,%ecx
f011b647:	74 17                	je     f011b660 <test_kmalloc_bestfit1+0xf31>
f011b649:	83 ec 04             	sub    $0x4,%esp
f011b64c:	68 74 9b 13 f0       	push   $0xf0139b74
f011b651:	68 27 02 00 00       	push   $0x227
f011b656:	68 5a 97 13 f0       	push   $0xf013975a
f011b65b:	e8 50 4b fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b660:	e8 1f 90 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011b665:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b668:	74 17                	je     f011b681 <test_kmalloc_bestfit1+0xf52>
f011b66a:	83 ec 04             	sub    $0x4,%esp
f011b66d:	68 74 97 13 f0       	push   $0xf0139774
f011b672:	68 28 02 00 00       	push   $0x228
f011b677:	68 5a 97 13 f0       	push   $0xf013975a
f011b67c:	e8 2f 4b fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011b681:	e8 40 13 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011b686:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b689:	29 c2                	sub    %eax,%edx
f011b68b:	89 d0                	mov    %edx,%eax
f011b68d:	3d 00 02 00 00       	cmp    $0x200,%eax
f011b692:	74 17                	je     f011b6ab <test_kmalloc_bestfit1+0xf7c>
f011b694:	83 ec 04             	sub    $0x4,%esp
f011b697:	68 a4 9b 13 f0       	push   $0xf0139ba4
f011b69c:	68 29 02 00 00       	push   $0x229
f011b6a1:	68 5a 97 13 f0       	push   $0xf013975a
f011b6a6:	e8 05 4b fe ff       	call   f01001b0 <_panic>
	}

	cprintf("Congratulations!! test BEST FIT allocation (1) completed successfully.\n");
f011b6ab:	83 ec 0c             	sub    $0xc,%esp
f011b6ae:	68 c4 9b 13 f0       	push   $0xf0139bc4
f011b6b3:	e8 79 57 fe ff       	call   f0100e31 <cprintf>
f011b6b8:	83 c4 10             	add    $0x10,%esp

	return 1;
f011b6bb:	b8 01 00 00 00       	mov    $0x1,%eax

}
f011b6c0:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011b6c3:	5b                   	pop    %ebx
f011b6c4:	5f                   	pop    %edi
f011b6c5:	5d                   	pop    %ebp
f011b6c6:	c3                   	ret    

f011b6c7 <test_kmalloc_bestfit2>:

int test_kmalloc_bestfit2()
{
f011b6c7:	55                   	push   %ebp
f011b6c8:	89 e5                	mov    %esp,%ebp
f011b6ca:	57                   	push   %edi
f011b6cb:	53                   	push   %ebx
f011b6cc:	81 ec 40 01 00 00    	sub    $0x140,%esp
	cprintf("==============================================\n");
f011b6d2:	83 ec 0c             	sub    $0xc,%esp
f011b6d5:	68 9c 96 13 f0       	push   $0xf013969c
f011b6da:	e8 52 57 fe ff       	call   f0100e31 <cprintf>
f011b6df:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011b6e2:	83 ec 0c             	sub    $0xc,%esp
f011b6e5:	68 cc 96 13 f0       	push   $0xf01396cc
f011b6ea:	e8 42 57 fe ff       	call   f0100e31 <cprintf>
f011b6ef:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011b6f2:	83 ec 0c             	sub    $0xc,%esp
f011b6f5:	68 9c 96 13 f0       	push   $0xf013969c
f011b6fa:	e8 32 57 fe ff       	call   f0100e31 <cprintf>
f011b6ff:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011b702:	8d 95 c0 fe ff ff    	lea    -0x140(%ebp),%edx
f011b708:	b9 14 00 00 00       	mov    $0x14,%ecx
f011b70d:	b8 00 00 00 00       	mov    $0x0,%eax
f011b712:	89 d7                	mov    %edx,%edi
f011b714:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeFrames;
	uint32 freeDiskFrames;

	//[1] Attempt to allocate more than heap size
	{
		ptr_allocations[0] = kmalloc(KERNEL_HEAP_MAX - ACTUAL_START + 1);
f011b716:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
f011b71d:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011b722:	0f b6 d0             	movzbl %al,%edx
f011b725:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011b728:	01 d0                	add    %edx,%eax
f011b72a:	48                   	dec    %eax
f011b72b:	89 45 f0             	mov    %eax,-0x10(%ebp)
f011b72e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011b731:	ba 00 00 00 00       	mov    $0x0,%edx
f011b736:	f7 75 f4             	divl   -0xc(%ebp)
f011b739:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011b73c:	29 d0                	sub    %edx,%eax
f011b73e:	89 c1                	mov    %eax,%ecx
f011b740:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f011b747:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011b74c:	0f b6 c0             	movzbl %al,%eax
f011b74f:	c1 e0 04             	shl    $0x4,%eax
f011b752:	89 c2                	mov    %eax,%edx
f011b754:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011b757:	01 d0                	add    %edx,%eax
f011b759:	48                   	dec    %eax
f011b75a:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011b75d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011b760:	ba 00 00 00 00       	mov    $0x0,%edx
f011b765:	f7 75 ec             	divl   -0x14(%ebp)
f011b768:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011b76b:	29 d0                	sub    %edx,%eax
f011b76d:	01 c8                	add    %ecx,%eax
f011b76f:	ba 01 b0 ff 09       	mov    $0x9ffb001,%edx
f011b774:	29 c2                	sub    %eax,%edx
f011b776:	89 d0                	mov    %edx,%eax
f011b778:	83 ec 0c             	sub    $0xc,%esp
f011b77b:	50                   	push   %eax
f011b77c:	e8 de c7 fe ff       	call   f0107f5f <kmalloc>
f011b781:	83 c4 10             	add    $0x10,%esp
f011b784:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
		if (ptr_allocations[0] != NULL) panic("Kmalloc: Attempt to allocate more than heap size, should return NULL");
f011b78a:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011b790:	85 c0                	test   %eax,%eax
f011b792:	74 17                	je     f011b7ab <test_kmalloc_bestfit2+0xe4>
f011b794:	83 ec 04             	sub    $0x4,%esp
f011b797:	68 0c 9c 13 f0       	push   $0xf0139c0c
f011b79c:	68 3f 02 00 00       	push   $0x23f
f011b7a1:	68 5a 97 13 f0       	push   $0xf013975a
f011b7a6:	e8 05 4a fe ff       	call   f01001b0 <_panic>

	//[2] Attempt to allocate space more than any available fragment
	//	a) Create Fragments
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011b7ab:	e8 16 12 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011b7b0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b7b3:	e8 cc 8e fe ff       	call   f0104684 <pf_calculate_free_frames>
f011b7b8:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f011b7bb:	83 ec 0c             	sub    $0xc,%esp
f011b7be:	68 00 fc 1f 00       	push   $0x1ffc00
f011b7c3:	e8 97 c7 fe ff       	call   f0107f5f <kmalloc>
f011b7c8:	83 c4 10             	add    $0x10,%esp
f011b7cb:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011b7d1:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011b7d7:	89 c1                	mov    %eax,%ecx
f011b7d9:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f011b7e0:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011b7e5:	0f b6 d0             	movzbl %al,%edx
f011b7e8:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011b7eb:	01 d0                	add    %edx,%eax
f011b7ed:	48                   	dec    %eax
f011b7ee:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011b7f1:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011b7f4:	ba 00 00 00 00       	mov    $0x0,%edx
f011b7f9:	f7 75 dc             	divl   -0x24(%ebp)
f011b7fc:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011b7ff:	29 d0                	sub    %edx,%eax
f011b801:	89 c3                	mov    %eax,%ebx
f011b803:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011b80a:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011b80f:	0f b6 c0             	movzbl %al,%eax
f011b812:	c1 e0 04             	shl    $0x4,%eax
f011b815:	89 c2                	mov    %eax,%edx
f011b817:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011b81a:	01 d0                	add    %edx,%eax
f011b81c:	48                   	dec    %eax
f011b81d:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011b820:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011b823:	ba 00 00 00 00       	mov    $0x0,%edx
f011b828:	f7 75 d4             	divl   -0x2c(%ebp)
f011b82b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011b82e:	29 d0                	sub    %edx,%eax
f011b830:	01 d8                	add    %ebx,%eax
f011b832:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011b837:	39 c1                	cmp    %eax,%ecx
f011b839:	74 17                	je     f011b852 <test_kmalloc_bestfit2+0x18b>
f011b83b:	83 ec 04             	sub    $0x4,%esp
f011b83e:	68 74 9b 13 f0       	push   $0xf0139b74
f011b843:	68 49 02 00 00       	push   $0x249
f011b848:	68 5a 97 13 f0       	push   $0xf013975a
f011b84d:	e8 5e 49 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b852:	e8 2d 8e fe ff       	call   f0104684 <pf_calculate_free_frames>
f011b857:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011b85a:	74 17                	je     f011b873 <test_kmalloc_bestfit2+0x1ac>
f011b85c:	83 ec 04             	sub    $0x4,%esp
f011b85f:	68 74 97 13 f0       	push   $0xf0139774
f011b864:	68 4a 02 00 00       	push   $0x24a
f011b869:	68 5a 97 13 f0       	push   $0xf013975a
f011b86e:	e8 3d 49 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  512) panic("Wrong allocation: ");
f011b873:	e8 4e 11 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011b878:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011b87b:	29 c2                	sub    %eax,%edx
f011b87d:	89 d0                	mov    %edx,%eax
f011b87f:	3d 00 02 00 00       	cmp    $0x200,%eax
f011b884:	74 17                	je     f011b89d <test_kmalloc_bestfit2+0x1d6>
f011b886:	83 ec 04             	sub    $0x4,%esp
f011b889:	68 a4 9b 13 f0       	push   $0xf0139ba4
f011b88e:	68 4b 02 00 00       	push   $0x24b
f011b893:	68 5a 97 13 f0       	push   $0xf013975a
f011b898:	e8 13 49 fe ff       	call   f01001b0 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011b89d:	e8 24 11 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011b8a2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b8a5:	e8 da 8d fe ff       	call   f0104684 <pf_calculate_free_frames>
f011b8aa:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f011b8ad:	83 ec 0c             	sub    $0xc,%esp
f011b8b0:	68 00 fc 1f 00       	push   $0x1ffc00
f011b8b5:	e8 a5 c6 fe ff       	call   f0107f5f <kmalloc>
f011b8ba:	83 c4 10             	add    $0x10,%esp
f011b8bd:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... ");
f011b8c3:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011b8c9:	89 c1                	mov    %eax,%ecx
f011b8cb:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011b8d2:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011b8d7:	0f b6 d0             	movzbl %al,%edx
f011b8da:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011b8dd:	01 d0                	add    %edx,%eax
f011b8df:	48                   	dec    %eax
f011b8e0:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011b8e3:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011b8e6:	ba 00 00 00 00       	mov    $0x0,%edx
f011b8eb:	f7 75 cc             	divl   -0x34(%ebp)
f011b8ee:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011b8f1:	29 d0                	sub    %edx,%eax
f011b8f3:	89 c3                	mov    %eax,%ebx
f011b8f5:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011b8fc:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011b901:	0f b6 c0             	movzbl %al,%eax
f011b904:	c1 e0 04             	shl    $0x4,%eax
f011b907:	89 c2                	mov    %eax,%edx
f011b909:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011b90c:	01 d0                	add    %edx,%eax
f011b90e:	48                   	dec    %eax
f011b90f:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011b912:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011b915:	ba 00 00 00 00       	mov    $0x0,%edx
f011b91a:	f7 75 c4             	divl   -0x3c(%ebp)
f011b91d:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011b920:	29 d0                	sub    %edx,%eax
f011b922:	01 d8                	add    %ebx,%eax
f011b924:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011b929:	39 c1                	cmp    %eax,%ecx
f011b92b:	74 17                	je     f011b944 <test_kmalloc_bestfit2+0x27d>
f011b92d:	83 ec 04             	sub    $0x4,%esp
f011b930:	68 74 9b 13 f0       	push   $0xf0139b74
f011b935:	68 51 02 00 00       	push   $0x251
f011b93a:	68 5a 97 13 f0       	push   $0xf013975a
f011b93f:	e8 6c 48 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b944:	e8 3b 8d fe ff       	call   f0104684 <pf_calculate_free_frames>
f011b949:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011b94c:	74 17                	je     f011b965 <test_kmalloc_bestfit2+0x29e>
f011b94e:	83 ec 04             	sub    $0x4,%esp
f011b951:	68 74 97 13 f0       	push   $0xf0139774
f011b956:	68 52 02 00 00       	push   $0x252
f011b95b:	68 5a 97 13 f0       	push   $0xf013975a
f011b960:	e8 4b 48 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  512) panic("Wrong allocation: ");
f011b965:	e8 5c 10 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011b96a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011b96d:	29 c2                	sub    %eax,%edx
f011b96f:	89 d0                	mov    %edx,%eax
f011b971:	3d 00 02 00 00       	cmp    $0x200,%eax
f011b976:	74 17                	je     f011b98f <test_kmalloc_bestfit2+0x2c8>
f011b978:	83 ec 04             	sub    $0x4,%esp
f011b97b:	68 a4 9b 13 f0       	push   $0xf0139ba4
f011b980:	68 53 02 00 00       	push   $0x253
f011b985:	68 5a 97 13 f0       	push   $0xf013975a
f011b98a:	e8 21 48 fe ff       	call   f01001b0 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011b98f:	e8 32 10 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011b994:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b997:	e8 e8 8c fe ff       	call   f0104684 <pf_calculate_free_frames>
f011b99c:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f011b99f:	83 ec 0c             	sub    $0xc,%esp
f011b9a2:	68 00 08 00 00       	push   $0x800
f011b9a7:	e8 b3 c5 fe ff       	call   f0107f5f <kmalloc>
f011b9ac:	83 c4 10             	add    $0x10,%esp
f011b9af:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011b9b5:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011b9bb:	89 c1                	mov    %eax,%ecx
f011b9bd:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011b9c4:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011b9c9:	0f b6 d0             	movzbl %al,%edx
f011b9cc:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011b9cf:	01 d0                	add    %edx,%eax
f011b9d1:	48                   	dec    %eax
f011b9d2:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011b9d5:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011b9d8:	ba 00 00 00 00       	mov    $0x0,%edx
f011b9dd:	f7 75 bc             	divl   -0x44(%ebp)
f011b9e0:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011b9e3:	29 d0                	sub    %edx,%eax
f011b9e5:	89 c3                	mov    %eax,%ebx
f011b9e7:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011b9ee:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011b9f3:	0f b6 c0             	movzbl %al,%eax
f011b9f6:	c1 e0 04             	shl    $0x4,%eax
f011b9f9:	89 c2                	mov    %eax,%edx
f011b9fb:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011b9fe:	01 d0                	add    %edx,%eax
f011ba00:	48                   	dec    %eax
f011ba01:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011ba04:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011ba07:	ba 00 00 00 00       	mov    $0x0,%edx
f011ba0c:	f7 75 b4             	divl   -0x4c(%ebp)
f011ba0f:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011ba12:	29 d0                	sub    %edx,%eax
f011ba14:	01 d8                	add    %ebx,%eax
f011ba16:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011ba1b:	39 c1                	cmp    %eax,%ecx
f011ba1d:	74 17                	je     f011ba36 <test_kmalloc_bestfit2+0x36f>
f011ba1f:	83 ec 04             	sub    $0x4,%esp
f011ba22:	68 74 9b 13 f0       	push   $0xf0139b74
f011ba27:	68 59 02 00 00       	push   $0x259
f011ba2c:	68 5a 97 13 f0       	push   $0xf013975a
f011ba31:	e8 7a 47 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ba36:	e8 49 8c fe ff       	call   f0104684 <pf_calculate_free_frames>
f011ba3b:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011ba3e:	74 17                	je     f011ba57 <test_kmalloc_bestfit2+0x390>
f011ba40:	83 ec 04             	sub    $0x4,%esp
f011ba43:	68 74 97 13 f0       	push   $0xf0139774
f011ba48:	68 5a 02 00 00       	push   $0x25a
f011ba4d:	68 5a 97 13 f0       	push   $0xf013975a
f011ba52:	e8 59 47 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  1) panic("Wrong allocation: ");
f011ba57:	e8 6a 0f ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011ba5c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011ba5f:	29 c2                	sub    %eax,%edx
f011ba61:	89 d0                	mov    %edx,%eax
f011ba63:	83 f8 01             	cmp    $0x1,%eax
f011ba66:	74 17                	je     f011ba7f <test_kmalloc_bestfit2+0x3b8>
f011ba68:	83 ec 04             	sub    $0x4,%esp
f011ba6b:	68 a4 9b 13 f0       	push   $0xf0139ba4
f011ba70:	68 5b 02 00 00       	push   $0x25b
f011ba75:	68 5a 97 13 f0       	push   $0xf013975a
f011ba7a:	e8 31 47 fe ff       	call   f01001b0 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011ba7f:	e8 42 0f ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011ba84:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011ba87:	e8 f8 8b fe ff       	call   f0104684 <pf_calculate_free_frames>
f011ba8c:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f011ba8f:	83 ec 0c             	sub    $0xc,%esp
f011ba92:	68 00 08 00 00       	push   $0x800
f011ba97:	e8 c3 c4 fe ff       	call   f0107f5f <kmalloc>
f011ba9c:	83 c4 10             	add    $0x10,%esp
f011ba9f:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... ");
f011baa5:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011baab:	89 c1                	mov    %eax,%ecx
f011baad:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011bab4:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011bab9:	0f b6 d0             	movzbl %al,%edx
f011babc:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011babf:	01 d0                	add    %edx,%eax
f011bac1:	48                   	dec    %eax
f011bac2:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011bac5:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011bac8:	ba 00 00 00 00       	mov    $0x0,%edx
f011bacd:	f7 75 ac             	divl   -0x54(%ebp)
f011bad0:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011bad3:	29 d0                	sub    %edx,%eax
f011bad5:	89 c3                	mov    %eax,%ebx
f011bad7:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011bade:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011bae3:	0f b6 c0             	movzbl %al,%eax
f011bae6:	c1 e0 04             	shl    $0x4,%eax
f011bae9:	89 c2                	mov    %eax,%edx
f011baeb:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011baee:	01 d0                	add    %edx,%eax
f011baf0:	48                   	dec    %eax
f011baf1:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011baf4:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011baf7:	ba 00 00 00 00       	mov    $0x0,%edx
f011bafc:	f7 75 a4             	divl   -0x5c(%ebp)
f011baff:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011bb02:	29 d0                	sub    %edx,%eax
f011bb04:	01 d8                	add    %ebx,%eax
f011bb06:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f011bb0b:	39 c1                	cmp    %eax,%ecx
f011bb0d:	74 17                	je     f011bb26 <test_kmalloc_bestfit2+0x45f>
f011bb0f:	83 ec 04             	sub    $0x4,%esp
f011bb12:	68 74 9b 13 f0       	push   $0xf0139b74
f011bb17:	68 61 02 00 00       	push   $0x261
f011bb1c:	68 5a 97 13 f0       	push   $0xf013975a
f011bb21:	e8 8a 46 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bb26:	e8 59 8b fe ff       	call   f0104684 <pf_calculate_free_frames>
f011bb2b:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011bb2e:	74 17                	je     f011bb47 <test_kmalloc_bestfit2+0x480>
f011bb30:	83 ec 04             	sub    $0x4,%esp
f011bb33:	68 74 97 13 f0       	push   $0xf0139774
f011bb38:	68 62 02 00 00       	push   $0x262
f011bb3d:	68 5a 97 13 f0       	push   $0xf013975a
f011bb42:	e8 69 46 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  1) panic("Wrong allocation: ");
f011bb47:	e8 7a 0e ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011bb4c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011bb4f:	29 c2                	sub    %eax,%edx
f011bb51:	89 d0                	mov    %edx,%eax
f011bb53:	83 f8 01             	cmp    $0x1,%eax
f011bb56:	74 17                	je     f011bb6f <test_kmalloc_bestfit2+0x4a8>
f011bb58:	83 ec 04             	sub    $0x4,%esp
f011bb5b:	68 a4 9b 13 f0       	push   $0xf0139ba4
f011bb60:	68 63 02 00 00       	push   $0x263
f011bb65:	68 5a 97 13 f0       	push   $0xf013975a
f011bb6a:	e8 41 46 fe ff       	call   f01001b0 <_panic>

		//4 KB Hole
		freeFrames = sys_calculate_free_frames() ;
f011bb6f:	e8 52 0e ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011bb74:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011bb77:	e8 08 8b fe ff       	call   f0104684 <pf_calculate_free_frames>
f011bb7c:	89 45 e0             	mov    %eax,-0x20(%ebp)
		kfree(ptr_allocations[2]);
f011bb7f:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011bb85:	83 ec 0c             	sub    $0xc,%esp
f011bb88:	50                   	push   %eax
f011bb89:	e8 eb c3 fe ff       	call   f0107f79 <kfree>
f011bb8e:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bb91:	e8 ee 8a fe ff       	call   f0104684 <pf_calculate_free_frames>
f011bb96:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011bb99:	74 17                	je     f011bbb2 <test_kmalloc_bestfit2+0x4eb>
f011bb9b:	83 ec 04             	sub    $0x4,%esp
f011bb9e:	68 74 97 13 f0       	push   $0xf0139774
f011bba3:	68 69 02 00 00       	push   $0x269
f011bba8:	68 5a 97 13 f0       	push   $0xf013975a
f011bbad:	e8 fe 45 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong allocation: ");
f011bbb2:	e8 0f 0e ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011bbb7:	2b 45 e4             	sub    -0x1c(%ebp),%eax
f011bbba:	83 f8 01             	cmp    $0x1,%eax
f011bbbd:	74 17                	je     f011bbd6 <test_kmalloc_bestfit2+0x50f>
f011bbbf:	83 ec 04             	sub    $0x4,%esp
f011bbc2:	68 a4 9b 13 f0       	push   $0xf0139ba4
f011bbc7:	68 6a 02 00 00       	push   $0x26a
f011bbcc:	68 5a 97 13 f0       	push   $0xf013975a
f011bbd1:	e8 da 45 fe ff       	call   f01001b0 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f011bbd6:	e8 eb 0d ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011bbdb:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011bbde:	e8 a1 8a fe ff       	call   f0104684 <pf_calculate_free_frames>
f011bbe3:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f011bbe6:	83 ec 0c             	sub    $0xc,%esp
f011bbe9:	68 00 1c 00 00       	push   $0x1c00
f011bbee:	e8 6c c3 fe ff       	call   f0107f5f <kmalloc>
f011bbf3:	83 c4 10             	add    $0x10,%esp
f011bbf6:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... ");
f011bbfc:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011bc02:	89 c1                	mov    %eax,%ecx
f011bc04:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011bc0b:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011bc10:	0f b6 d0             	movzbl %al,%edx
f011bc13:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011bc16:	01 d0                	add    %edx,%eax
f011bc18:	48                   	dec    %eax
f011bc19:	89 45 98             	mov    %eax,-0x68(%ebp)
f011bc1c:	8b 45 98             	mov    -0x68(%ebp),%eax
f011bc1f:	ba 00 00 00 00       	mov    $0x0,%edx
f011bc24:	f7 75 9c             	divl   -0x64(%ebp)
f011bc27:	8b 45 98             	mov    -0x68(%ebp),%eax
f011bc2a:	29 d0                	sub    %edx,%eax
f011bc2c:	89 c3                	mov    %eax,%ebx
f011bc2e:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011bc35:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011bc3a:	0f b6 c0             	movzbl %al,%eax
f011bc3d:	c1 e0 04             	shl    $0x4,%eax
f011bc40:	89 c2                	mov    %eax,%edx
f011bc42:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011bc45:	01 d0                	add    %edx,%eax
f011bc47:	48                   	dec    %eax
f011bc48:	89 45 90             	mov    %eax,-0x70(%ebp)
f011bc4b:	8b 45 90             	mov    -0x70(%ebp),%eax
f011bc4e:	ba 00 00 00 00       	mov    $0x0,%edx
f011bc53:	f7 75 94             	divl   -0x6c(%ebp)
f011bc56:	8b 45 90             	mov    -0x70(%ebp),%eax
f011bc59:	29 d0                	sub    %edx,%eax
f011bc5b:	01 d8                	add    %ebx,%eax
f011bc5d:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f011bc62:	39 c1                	cmp    %eax,%ecx
f011bc64:	74 17                	je     f011bc7d <test_kmalloc_bestfit2+0x5b6>
f011bc66:	83 ec 04             	sub    $0x4,%esp
f011bc69:	68 74 9b 13 f0       	push   $0xf0139b74
f011bc6e:	68 70 02 00 00       	push   $0x270
f011bc73:	68 5a 97 13 f0       	push   $0xf013975a
f011bc78:	e8 33 45 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bc7d:	e8 02 8a fe ff       	call   f0104684 <pf_calculate_free_frames>
f011bc82:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011bc85:	74 17                	je     f011bc9e <test_kmalloc_bestfit2+0x5d7>
f011bc87:	83 ec 04             	sub    $0x4,%esp
f011bc8a:	68 74 97 13 f0       	push   $0xf0139774
f011bc8f:	68 71 02 00 00       	push   $0x271
f011bc94:	68 5a 97 13 f0       	push   $0xf013975a
f011bc99:	e8 12 45 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  2) panic("Wrong allocation: ");
f011bc9e:	e8 23 0d ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011bca3:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011bca6:	29 c2                	sub    %eax,%edx
f011bca8:	89 d0                	mov    %edx,%eax
f011bcaa:	83 f8 02             	cmp    $0x2,%eax
f011bcad:	74 17                	je     f011bcc6 <test_kmalloc_bestfit2+0x5ff>
f011bcaf:	83 ec 04             	sub    $0x4,%esp
f011bcb2:	68 a4 9b 13 f0       	push   $0xf0139ba4
f011bcb7:	68 72 02 00 00       	push   $0x272
f011bcbc:	68 5a 97 13 f0       	push   $0xf013975a
f011bcc1:	e8 ea 44 fe ff       	call   f01001b0 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011bcc6:	e8 fb 0c ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011bccb:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011bcce:	e8 b1 89 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011bcd3:	89 45 e0             	mov    %eax,-0x20(%ebp)
		kfree(ptr_allocations[0]);
f011bcd6:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011bcdc:	83 ec 0c             	sub    $0xc,%esp
f011bcdf:	50                   	push   %eax
f011bce0:	e8 94 c2 fe ff       	call   f0107f79 <kfree>
f011bce5:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bce8:	e8 97 89 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011bced:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011bcf0:	74 17                	je     f011bd09 <test_kmalloc_bestfit2+0x642>
f011bcf2:	83 ec 04             	sub    $0x4,%esp
f011bcf5:	68 74 97 13 f0       	push   $0xf0139774
f011bcfa:	68 78 02 00 00       	push   $0x278
f011bcff:	68 5a 97 13 f0       	push   $0xf013975a
f011bd04:	e8 a7 44 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: Extra or less pages are removed from main memory");
f011bd09:	e8 b8 0c ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011bd0e:	2b 45 e4             	sub    -0x1c(%ebp),%eax
f011bd11:	3d 00 02 00 00       	cmp    $0x200,%eax
f011bd16:	74 17                	je     f011bd2f <test_kmalloc_bestfit2+0x668>
f011bd18:	83 ec 04             	sub    $0x4,%esp
f011bd1b:	68 28 9a 13 f0       	push   $0xf0139a28
f011bd20:	68 79 02 00 00       	push   $0x279
f011bd25:	68 5a 97 13 f0       	push   $0xf013975a
f011bd2a:	e8 81 44 fe ff       	call   f01001b0 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011bd2f:	e8 92 0c ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011bd34:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011bd37:	e8 48 89 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011bd3c:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f011bd3f:	83 ec 0c             	sub    $0xc,%esp
f011bd42:	68 00 fc 2f 00       	push   $0x2ffc00
f011bd47:	e8 13 c2 fe ff       	call   f0107f5f <kmalloc>
f011bd4c:	83 c4 10             	add    $0x10,%esp
f011bd4f:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011bd55:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011bd5b:	89 c1                	mov    %eax,%ecx
f011bd5d:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011bd64:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011bd69:	0f b6 d0             	movzbl %al,%edx
f011bd6c:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011bd6f:	01 d0                	add    %edx,%eax
f011bd71:	48                   	dec    %eax
f011bd72:	89 45 88             	mov    %eax,-0x78(%ebp)
f011bd75:	8b 45 88             	mov    -0x78(%ebp),%eax
f011bd78:	ba 00 00 00 00       	mov    $0x0,%edx
f011bd7d:	f7 75 8c             	divl   -0x74(%ebp)
f011bd80:	8b 45 88             	mov    -0x78(%ebp),%eax
f011bd83:	29 d0                	sub    %edx,%eax
f011bd85:	89 c3                	mov    %eax,%ebx
f011bd87:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011bd8e:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011bd93:	0f b6 c0             	movzbl %al,%eax
f011bd96:	c1 e0 04             	shl    $0x4,%eax
f011bd99:	89 c2                	mov    %eax,%edx
f011bd9b:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011bd9e:	01 d0                	add    %edx,%eax
f011bda0:	48                   	dec    %eax
f011bda1:	89 45 80             	mov    %eax,-0x80(%ebp)
f011bda4:	8b 45 80             	mov    -0x80(%ebp),%eax
f011bda7:	ba 00 00 00 00       	mov    $0x0,%edx
f011bdac:	f7 75 84             	divl   -0x7c(%ebp)
f011bdaf:	8b 45 80             	mov    -0x80(%ebp),%eax
f011bdb2:	29 d0                	sub    %edx,%eax
f011bdb4:	01 d8                	add    %ebx,%eax
f011bdb6:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f011bdbb:	39 c1                	cmp    %eax,%ecx
f011bdbd:	74 17                	je     f011bdd6 <test_kmalloc_bestfit2+0x70f>
f011bdbf:	83 ec 04             	sub    $0x4,%esp
f011bdc2:	68 74 9b 13 f0       	push   $0xf0139b74
f011bdc7:	68 7f 02 00 00       	push   $0x27f
f011bdcc:	68 5a 97 13 f0       	push   $0xf013975a
f011bdd1:	e8 da 43 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bdd6:	e8 a9 88 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011bddb:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011bdde:	74 17                	je     f011bdf7 <test_kmalloc_bestfit2+0x730>
f011bde0:	83 ec 04             	sub    $0x4,%esp
f011bde3:	68 74 97 13 f0       	push   $0xf0139774
f011bde8:	68 80 02 00 00       	push   $0x280
f011bded:	68 5a 97 13 f0       	push   $0xf013975a
f011bdf2:	e8 b9 43 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  768) panic("Wrong allocation: ");
f011bdf7:	e8 ca 0b ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011bdfc:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011bdff:	29 c2                	sub    %eax,%edx
f011be01:	89 d0                	mov    %edx,%eax
f011be03:	3d 00 03 00 00       	cmp    $0x300,%eax
f011be08:	74 17                	je     f011be21 <test_kmalloc_bestfit2+0x75a>
f011be0a:	83 ec 04             	sub    $0x4,%esp
f011be0d:	68 a4 9b 13 f0       	push   $0xf0139ba4
f011be12:	68 81 02 00 00       	push   $0x281
f011be17:	68 5a 97 13 f0       	push   $0xf013975a
f011be1c:	e8 8f 43 fe ff       	call   f01001b0 <_panic>

		//2 MB + 6 KB
		freeFrames = sys_calculate_free_frames() ;
f011be21:	e8 a0 0b ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011be26:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011be29:	e8 56 88 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011be2e:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[6] = kmalloc(2*Mega + 6*kilo);
f011be31:	83 ec 0c             	sub    $0xc,%esp
f011be34:	68 00 18 20 00       	push   $0x201800
f011be39:	e8 21 c1 fe ff       	call   f0107f5f <kmalloc>
f011be3e:	83 c4 10             	add    $0x10,%esp
f011be41:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011be47:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011be4d:	89 c1                	mov    %eax,%ecx
f011be4f:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011be56:	10 00 00 
f011be59:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011be5e:	0f b6 d0             	movzbl %al,%edx
f011be61:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011be67:	01 d0                	add    %edx,%eax
f011be69:	48                   	dec    %eax
f011be6a:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011be70:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011be76:	ba 00 00 00 00       	mov    $0x0,%edx
f011be7b:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011be81:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011be87:	29 d0                	sub    %edx,%eax
f011be89:	89 c3                	mov    %eax,%ebx
f011be8b:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011be92:	10 00 00 
f011be95:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011be9a:	0f b6 c0             	movzbl %al,%eax
f011be9d:	c1 e0 04             	shl    $0x4,%eax
f011bea0:	89 c2                	mov    %eax,%edx
f011bea2:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011bea8:	01 d0                	add    %edx,%eax
f011beaa:	48                   	dec    %eax
f011beab:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011beb1:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011beb7:	ba 00 00 00 00       	mov    $0x0,%edx
f011bebc:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011bec2:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011bec8:	29 d0                	sub    %edx,%eax
f011beca:	01 d8                	add    %ebx,%eax
f011becc:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f011bed1:	39 c1                	cmp    %eax,%ecx
f011bed3:	74 17                	je     f011beec <test_kmalloc_bestfit2+0x825>
f011bed5:	83 ec 04             	sub    $0x4,%esp
f011bed8:	68 74 9b 13 f0       	push   $0xf0139b74
f011bedd:	68 87 02 00 00       	push   $0x287
f011bee2:	68 5a 97 13 f0       	push   $0xf013975a
f011bee7:	e8 c4 42 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011beec:	e8 93 87 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011bef1:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011bef4:	74 17                	je     f011bf0d <test_kmalloc_bestfit2+0x846>
f011bef6:	83 ec 04             	sub    $0x4,%esp
f011bef9:	68 74 97 13 f0       	push   $0xf0139774
f011befe:	68 88 02 00 00       	push   $0x288
f011bf03:	68 5a 97 13 f0       	push   $0xf013975a
f011bf08:	e8 a3 42 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  514) panic("Wrong allocation: ");
f011bf0d:	e8 b4 0a ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011bf12:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011bf15:	29 c2                	sub    %eax,%edx
f011bf17:	89 d0                	mov    %edx,%eax
f011bf19:	3d 02 02 00 00       	cmp    $0x202,%eax
f011bf1e:	74 17                	je     f011bf37 <test_kmalloc_bestfit2+0x870>
f011bf20:	83 ec 04             	sub    $0x4,%esp
f011bf23:	68 a4 9b 13 f0       	push   $0xf0139ba4
f011bf28:	68 89 02 00 00       	push   $0x289
f011bf2d:	68 5a 97 13 f0       	push   $0xf013975a
f011bf32:	e8 79 42 fe ff       	call   f01001b0 <_panic>

		//5 MB
		freeFrames = sys_calculate_free_frames() ;
f011bf37:	e8 8a 0a ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011bf3c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011bf3f:	e8 40 87 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011bf44:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[7] = kmalloc(5*Mega-kilo);
f011bf47:	83 ec 0c             	sub    $0xc,%esp
f011bf4a:	68 00 fc 4f 00       	push   $0x4ffc00
f011bf4f:	e8 0b c0 fe ff       	call   f0107f5f <kmalloc>
f011bf54:	83 c4 10             	add    $0x10,%esp
f011bf57:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 9*Mega + 24*kilo)) panic("Wrong start address for the allocated space... ");
f011bf5d:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011bf63:	89 c1                	mov    %eax,%ecx
f011bf65:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011bf6c:	10 00 00 
f011bf6f:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011bf74:	0f b6 d0             	movzbl %al,%edx
f011bf77:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011bf7d:	01 d0                	add    %edx,%eax
f011bf7f:	48                   	dec    %eax
f011bf80:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011bf86:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011bf8c:	ba 00 00 00 00       	mov    $0x0,%edx
f011bf91:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011bf97:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011bf9d:	29 d0                	sub    %edx,%eax
f011bf9f:	89 c3                	mov    %eax,%ebx
f011bfa1:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011bfa8:	10 00 00 
f011bfab:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011bfb0:	0f b6 c0             	movzbl %al,%eax
f011bfb3:	c1 e0 04             	shl    $0x4,%eax
f011bfb6:	89 c2                	mov    %eax,%edx
f011bfb8:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011bfbe:	01 d0                	add    %edx,%eax
f011bfc0:	48                   	dec    %eax
f011bfc1:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011bfc7:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011bfcd:	ba 00 00 00 00       	mov    $0x0,%edx
f011bfd2:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011bfd8:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011bfde:	29 d0                	sub    %edx,%eax
f011bfe0:	01 d8                	add    %ebx,%eax
f011bfe2:	2d 00 60 6f 09       	sub    $0x96f6000,%eax
f011bfe7:	39 c1                	cmp    %eax,%ecx
f011bfe9:	74 17                	je     f011c002 <test_kmalloc_bestfit2+0x93b>
f011bfeb:	83 ec 04             	sub    $0x4,%esp
f011bfee:	68 74 9b 13 f0       	push   $0xf0139b74
f011bff3:	68 8f 02 00 00       	push   $0x28f
f011bff8:	68 5a 97 13 f0       	push   $0xf013975a
f011bffd:	e8 ae 41 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c002:	e8 7d 86 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011c007:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011c00a:	74 17                	je     f011c023 <test_kmalloc_bestfit2+0x95c>
f011c00c:	83 ec 04             	sub    $0x4,%esp
f011c00f:	68 74 97 13 f0       	push   $0xf0139774
f011c014:	68 90 02 00 00       	push   $0x290
f011c019:	68 5a 97 13 f0       	push   $0xf013975a
f011c01e:	e8 8d 41 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  ((5*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011c023:	e8 9e 09 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011c028:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011c02b:	29 c2                	sub    %eax,%edx
f011c02d:	89 d0                	mov    %edx,%eax
f011c02f:	3d 00 05 00 00       	cmp    $0x500,%eax
f011c034:	74 17                	je     f011c04d <test_kmalloc_bestfit2+0x986>
f011c036:	83 ec 04             	sub    $0x4,%esp
f011c039:	68 a4 9b 13 f0       	push   $0xf0139ba4
f011c03e:	68 91 02 00 00       	push   $0x291
f011c043:	68 5a 97 13 f0       	push   $0xf013975a
f011c048:	e8 63 41 fe ff       	call   f01001b0 <_panic>

		//2 MB + 8 KB Hole
		freeFrames = sys_calculate_free_frames() ;
f011c04d:	e8 74 09 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011c052:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c055:	e8 2a 86 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011c05a:	89 45 e0             	mov    %eax,-0x20(%ebp)
		kfree(ptr_allocations[6]);
f011c05d:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011c063:	83 ec 0c             	sub    $0xc,%esp
f011c066:	50                   	push   %eax
f011c067:	e8 0d bf fe ff       	call   f0107f79 <kfree>
f011c06c:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c06f:	e8 10 86 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011c074:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011c077:	74 17                	je     f011c090 <test_kmalloc_bestfit2+0x9c9>
f011c079:	83 ec 04             	sub    $0x4,%esp
f011c07c:	68 74 97 13 f0       	push   $0xf0139774
f011c081:	68 97 02 00 00       	push   $0x297
f011c086:	68 5a 97 13 f0       	push   $0xf013975a
f011c08b:	e8 20 41 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) !=  514) panic("Wrong free: Extra or less pages are removed from main memory");
f011c090:	e8 31 09 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011c095:	2b 45 e4             	sub    -0x1c(%ebp),%eax
f011c098:	3d 02 02 00 00       	cmp    $0x202,%eax
f011c09d:	74 17                	je     f011c0b6 <test_kmalloc_bestfit2+0x9ef>
f011c09f:	83 ec 04             	sub    $0x4,%esp
f011c0a2:	68 28 9a 13 f0       	push   $0xf0139a28
f011c0a7:	68 98 02 00 00       	push   $0x298
f011c0ac:	68 5a 97 13 f0       	push   $0xf013975a
f011c0b1:	e8 fa 40 fe ff       	call   f01001b0 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011c0b6:	e8 0b 09 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011c0bb:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c0be:	e8 c1 85 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011c0c3:	89 45 e0             	mov    %eax,-0x20(%ebp)
		kfree(ptr_allocations[1]);
f011c0c6:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011c0cc:	83 ec 0c             	sub    $0xc,%esp
f011c0cf:	50                   	push   %eax
f011c0d0:	e8 a4 be fe ff       	call   f0107f79 <kfree>
f011c0d5:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c0d8:	e8 a7 85 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011c0dd:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011c0e0:	74 17                	je     f011c0f9 <test_kmalloc_bestfit2+0xa32>
f011c0e2:	83 ec 04             	sub    $0x4,%esp
f011c0e5:	68 74 97 13 f0       	push   $0xf0139774
f011c0ea:	68 9e 02 00 00       	push   $0x29e
f011c0ef:	68 5a 97 13 f0       	push   $0xf013975a
f011c0f4:	e8 b7 40 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) !=  512) panic("Wrong free: Extra or less pages are removed from main memory.");
f011c0f9:	e8 c8 08 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011c0fe:	2b 45 e4             	sub    -0x1c(%ebp),%eax
f011c101:	3d 00 02 00 00       	cmp    $0x200,%eax
f011c106:	74 17                	je     f011c11f <test_kmalloc_bestfit2+0xa58>
f011c108:	83 ec 04             	sub    $0x4,%esp
f011c10b:	68 54 9c 13 f0       	push   $0xf0139c54
f011c110:	68 9f 02 00 00       	push   $0x29f
f011c115:	68 5a 97 13 f0       	push   $0xf013975a
f011c11a:	e8 91 40 fe ff       	call   f01001b0 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011c11f:	e8 a2 08 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011c124:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c127:	e8 58 85 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011c12c:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[8] = kmalloc(2*Mega-kilo);
f011c12f:	83 ec 0c             	sub    $0xc,%esp
f011c132:	68 00 fc 1f 00       	push   $0x1ffc00
f011c137:	e8 23 be fe ff       	call   f0107f5f <kmalloc>
f011c13c:	83 c4 10             	add    $0x10,%esp
f011c13f:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011c145:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011c14b:	89 c1                	mov    %eax,%ecx
f011c14d:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011c154:	10 00 00 
f011c157:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011c15c:	0f b6 d0             	movzbl %al,%edx
f011c15f:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011c165:	01 d0                	add    %edx,%eax
f011c167:	48                   	dec    %eax
f011c168:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011c16e:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011c174:	ba 00 00 00 00       	mov    $0x0,%edx
f011c179:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011c17f:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011c185:	29 d0                	sub    %edx,%eax
f011c187:	89 c3                	mov    %eax,%ebx
f011c189:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011c190:	10 00 00 
f011c193:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011c198:	0f b6 c0             	movzbl %al,%eax
f011c19b:	c1 e0 04             	shl    $0x4,%eax
f011c19e:	89 c2                	mov    %eax,%edx
f011c1a0:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011c1a6:	01 d0                	add    %edx,%eax
f011c1a8:	48                   	dec    %eax
f011c1a9:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011c1af:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011c1b5:	ba 00 00 00 00       	mov    $0x0,%edx
f011c1ba:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011c1c0:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011c1c6:	29 d0                	sub    %edx,%eax
f011c1c8:	01 d8                	add    %ebx,%eax
f011c1ca:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f011c1cf:	39 c1                	cmp    %eax,%ecx
f011c1d1:	74 17                	je     f011c1ea <test_kmalloc_bestfit2+0xb23>
f011c1d3:	83 ec 04             	sub    $0x4,%esp
f011c1d6:	68 74 9b 13 f0       	push   $0xf0139b74
f011c1db:	68 a5 02 00 00       	push   $0x2a5
f011c1e0:	68 5a 97 13 f0       	push   $0xf013975a
f011c1e5:	e8 c6 3f fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c1ea:	e8 95 84 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011c1ef:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011c1f2:	74 17                	je     f011c20b <test_kmalloc_bestfit2+0xb44>
f011c1f4:	83 ec 04             	sub    $0x4,%esp
f011c1f7:	68 74 97 13 f0       	push   $0xf0139774
f011c1fc:	68 a6 02 00 00       	push   $0x2a6
f011c201:	68 5a 97 13 f0       	push   $0xf013975a
f011c206:	e8 a5 3f fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  512) panic("Wrong allocation:");
f011c20b:	e8 b6 07 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011c210:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011c213:	29 c2                	sub    %eax,%edx
f011c215:	89 d0                	mov    %edx,%eax
f011c217:	3d 00 02 00 00       	cmp    $0x200,%eax
f011c21c:	74 17                	je     f011c235 <test_kmalloc_bestfit2+0xb6e>
f011c21e:	83 ec 04             	sub    $0x4,%esp
f011c221:	68 92 9c 13 f0       	push   $0xf0139c92
f011c226:	68 a7 02 00 00       	push   $0x2a7
f011c22b:	68 5a 97 13 f0       	push   $0xf013975a
f011c230:	e8 7b 3f fe ff       	call   f01001b0 <_panic>

		//6 KB
		freeFrames = sys_calculate_free_frames() ;
f011c235:	e8 8c 07 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011c23a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c23d:	e8 42 84 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011c242:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[9] = kmalloc(6*kilo);
f011c245:	83 ec 0c             	sub    $0xc,%esp
f011c248:	68 00 18 00 00       	push   $0x1800
f011c24d:	e8 0d bd fe ff       	call   f0107f5f <kmalloc>
f011c252:	83 c4 10             	add    $0x10,%esp
f011c255:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 9*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011c25b:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011c261:	89 c1                	mov    %eax,%ecx
f011c263:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011c26a:	10 00 00 
f011c26d:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011c272:	0f b6 d0             	movzbl %al,%edx
f011c275:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011c27b:	01 d0                	add    %edx,%eax
f011c27d:	48                   	dec    %eax
f011c27e:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011c284:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011c28a:	ba 00 00 00 00       	mov    $0x0,%edx
f011c28f:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011c295:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011c29b:	29 d0                	sub    %edx,%eax
f011c29d:	89 c3                	mov    %eax,%ebx
f011c29f:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011c2a6:	10 00 00 
f011c2a9:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011c2ae:	0f b6 c0             	movzbl %al,%eax
f011c2b1:	c1 e0 04             	shl    $0x4,%eax
f011c2b4:	89 c2                	mov    %eax,%edx
f011c2b6:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011c2bc:	01 d0                	add    %edx,%eax
f011c2be:	48                   	dec    %eax
f011c2bf:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011c2c5:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011c2cb:	ba 00 00 00 00       	mov    $0x0,%edx
f011c2d0:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011c2d6:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011c2dc:	29 d0                	sub    %edx,%eax
f011c2de:	01 d8                	add    %ebx,%eax
f011c2e0:	2d 00 80 6f 09       	sub    $0x96f8000,%eax
f011c2e5:	39 c1                	cmp    %eax,%ecx
f011c2e7:	74 17                	je     f011c300 <test_kmalloc_bestfit2+0xc39>
f011c2e9:	83 ec 04             	sub    $0x4,%esp
f011c2ec:	68 74 9b 13 f0       	push   $0xf0139b74
f011c2f1:	68 ad 02 00 00       	push   $0x2ad
f011c2f6:	68 5a 97 13 f0       	push   $0xf013975a
f011c2fb:	e8 b0 3e fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c300:	e8 7f 83 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011c305:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011c308:	74 17                	je     f011c321 <test_kmalloc_bestfit2+0xc5a>
f011c30a:	83 ec 04             	sub    $0x4,%esp
f011c30d:	68 74 97 13 f0       	push   $0xf0139774
f011c312:	68 ae 02 00 00       	push   $0x2ae
f011c317:	68 5a 97 13 f0       	push   $0xf013975a
f011c31c:	e8 8f 3e fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  2) panic("Wrong allocation:");
f011c321:	e8 a0 06 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011c326:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011c329:	29 c2                	sub    %eax,%edx
f011c32b:	89 d0                	mov    %edx,%eax
f011c32d:	83 f8 02             	cmp    $0x2,%eax
f011c330:	74 17                	je     f011c349 <test_kmalloc_bestfit2+0xc82>
f011c332:	83 ec 04             	sub    $0x4,%esp
f011c335:	68 92 9c 13 f0       	push   $0xf0139c92
f011c33a:	68 af 02 00 00       	push   $0x2af
f011c33f:	68 5a 97 13 f0       	push   $0xf013975a
f011c344:	e8 67 3e fe ff       	call   f01001b0 <_panic>

		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011c349:	e8 78 06 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011c34e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c351:	e8 2e 83 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011c356:	89 45 e0             	mov    %eax,-0x20(%ebp)
		kfree(ptr_allocations[5]);
f011c359:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011c35f:	83 ec 0c             	sub    $0xc,%esp
f011c362:	50                   	push   %eax
f011c363:	e8 11 bc fe ff       	call   f0107f79 <kfree>
f011c368:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c36b:	e8 14 83 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011c370:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011c373:	74 17                	je     f011c38c <test_kmalloc_bestfit2+0xcc5>
f011c375:	83 ec 04             	sub    $0x4,%esp
f011c378:	68 74 97 13 f0       	push   $0xf0139774
f011c37d:	68 b5 02 00 00       	push   $0x2b5
f011c382:	68 5a 97 13 f0       	push   $0xf013975a
f011c387:	e8 24 3e fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) !=  768) panic("Wrong free: Extra or less pages are removed from main memory.");
f011c38c:	e8 35 06 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011c391:	2b 45 e4             	sub    -0x1c(%ebp),%eax
f011c394:	3d 00 03 00 00       	cmp    $0x300,%eax
f011c399:	74 17                	je     f011c3b2 <test_kmalloc_bestfit2+0xceb>
f011c39b:	83 ec 04             	sub    $0x4,%esp
f011c39e:	68 54 9c 13 f0       	push   $0xf0139c54
f011c3a3:	68 b6 02 00 00       	push   $0x2b6
f011c3a8:	68 5a 97 13 f0       	push   $0xf013975a
f011c3ad:	e8 fe 3d fe ff       	call   f01001b0 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011c3b2:	e8 0f 06 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011c3b7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c3ba:	e8 c5 82 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011c3bf:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[10] = kmalloc(3*Mega-kilo);
f011c3c2:	83 ec 0c             	sub    $0xc,%esp
f011c3c5:	68 00 fc 2f 00       	push   $0x2ffc00
f011c3ca:	e8 90 bb fe ff       	call   f0107f5f <kmalloc>
f011c3cf:	83 c4 10             	add    $0x10,%esp
f011c3d2:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 4*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011c3d8:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011c3de:	89 c1                	mov    %eax,%ecx
f011c3e0:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011c3e7:	10 00 00 
f011c3ea:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011c3ef:	0f b6 d0             	movzbl %al,%edx
f011c3f2:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011c3f8:	01 d0                	add    %edx,%eax
f011c3fa:	48                   	dec    %eax
f011c3fb:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011c401:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011c407:	ba 00 00 00 00       	mov    $0x0,%edx
f011c40c:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011c412:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011c418:	29 d0                	sub    %edx,%eax
f011c41a:	89 c3                	mov    %eax,%ebx
f011c41c:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011c423:	10 00 00 
f011c426:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011c42b:	0f b6 c0             	movzbl %al,%eax
f011c42e:	c1 e0 04             	shl    $0x4,%eax
f011c431:	89 c2                	mov    %eax,%edx
f011c433:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011c439:	01 d0                	add    %edx,%eax
f011c43b:	48                   	dec    %eax
f011c43c:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011c442:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011c448:	ba 00 00 00 00       	mov    $0x0,%edx
f011c44d:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011c453:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011c459:	29 d0                	sub    %edx,%eax
f011c45b:	01 d8                	add    %ebx,%eax
f011c45d:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f011c462:	39 c1                	cmp    %eax,%ecx
f011c464:	74 17                	je     f011c47d <test_kmalloc_bestfit2+0xdb6>
f011c466:	83 ec 04             	sub    $0x4,%esp
f011c469:	68 74 9b 13 f0       	push   $0xf0139b74
f011c46e:	68 bc 02 00 00       	push   $0x2bc
f011c473:	68 5a 97 13 f0       	push   $0xf013975a
f011c478:	e8 33 3d fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c47d:	e8 02 82 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011c482:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011c485:	74 17                	je     f011c49e <test_kmalloc_bestfit2+0xdd7>
f011c487:	83 ec 04             	sub    $0x4,%esp
f011c48a:	68 74 97 13 f0       	push   $0xf0139774
f011c48f:	68 bd 02 00 00       	push   $0x2bd
f011c494:	68 5a 97 13 f0       	push   $0xf013975a
f011c499:	e8 12 3d fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  ((3*Mega)/4096)) panic("Wrong free: Extra or less pages are removed from main memory.");
f011c49e:	e8 23 05 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011c4a3:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011c4a6:	29 c2                	sub    %eax,%edx
f011c4a8:	89 d0                	mov    %edx,%eax
f011c4aa:	3d 00 03 00 00       	cmp    $0x300,%eax
f011c4af:	74 17                	je     f011c4c8 <test_kmalloc_bestfit2+0xe01>
f011c4b1:	83 ec 04             	sub    $0x4,%esp
f011c4b4:	68 54 9c 13 f0       	push   $0xf0139c54
f011c4b9:	68 be 02 00 00       	push   $0x2be
f011c4be:	68 5a 97 13 f0       	push   $0xf013975a
f011c4c3:	e8 e8 3c fe ff       	call   f01001b0 <_panic>

		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f011c4c8:	e8 f9 04 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011c4cd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c4d0:	e8 af 81 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011c4d5:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[11] = kmalloc(4*Mega-kilo);
f011c4d8:	83 ec 0c             	sub    $0xc,%esp
f011c4db:	68 00 fc 3f 00       	push   $0x3ffc00
f011c4e0:	e8 7a ba fe ff       	call   f0107f5f <kmalloc>
f011c4e5:	83 c4 10             	add    $0x10,%esp
f011c4e8:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011c4ee:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011c4f4:	89 c1                	mov    %eax,%ecx
f011c4f6:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011c4fd:	10 00 00 
f011c500:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011c505:	0f b6 d0             	movzbl %al,%edx
f011c508:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011c50e:	01 d0                	add    %edx,%eax
f011c510:	48                   	dec    %eax
f011c511:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011c517:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011c51d:	ba 00 00 00 00       	mov    $0x0,%edx
f011c522:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011c528:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011c52e:	29 d0                	sub    %edx,%eax
f011c530:	89 c3                	mov    %eax,%ebx
f011c532:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011c539:	10 00 00 
f011c53c:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011c541:	0f b6 c0             	movzbl %al,%eax
f011c544:	c1 e0 04             	shl    $0x4,%eax
f011c547:	89 c2                	mov    %eax,%edx
f011c549:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011c54f:	01 d0                	add    %edx,%eax
f011c551:	48                   	dec    %eax
f011c552:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011c558:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011c55e:	ba 00 00 00 00       	mov    $0x0,%edx
f011c563:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011c569:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011c56f:	29 d0                	sub    %edx,%eax
f011c571:	01 d8                	add    %ebx,%eax
f011c573:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011c578:	39 c1                	cmp    %eax,%ecx
f011c57a:	74 17                	je     f011c593 <test_kmalloc_bestfit2+0xecc>
f011c57c:	83 ec 04             	sub    $0x4,%esp
f011c57f:	68 74 9b 13 f0       	push   $0xf0139b74
f011c584:	68 c4 02 00 00       	push   $0x2c4
f011c589:	68 5a 97 13 f0       	push   $0xf013975a
f011c58e:	e8 1d 3c fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c593:	e8 ec 80 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011c598:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011c59b:	74 17                	je     f011c5b4 <test_kmalloc_bestfit2+0xeed>
f011c59d:	83 ec 04             	sub    $0x4,%esp
f011c5a0:	68 74 97 13 f0       	push   $0xf0139774
f011c5a5:	68 c5 02 00 00       	push   $0x2c5
f011c5aa:	68 5a 97 13 f0       	push   $0xf013975a
f011c5af:	e8 fc 3b fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((4*Mega)/4096)) panic("Wrong free: Extra or less pages are removed from main memory.");
f011c5b4:	e8 0d 04 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011c5b9:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011c5bc:	29 c2                	sub    %eax,%edx
f011c5be:	89 d0                	mov    %edx,%eax
f011c5c0:	3d 00 04 00 00       	cmp    $0x400,%eax
f011c5c5:	74 17                	je     f011c5de <test_kmalloc_bestfit2+0xf17>
f011c5c7:	83 ec 04             	sub    $0x4,%esp
f011c5ca:	68 54 9c 13 f0       	push   $0xf0139c54
f011c5cf:	68 c6 02 00 00       	push   $0x2c6
f011c5d4:	68 5a 97 13 f0       	push   $0xf013975a
f011c5d9:	e8 d2 3b fe ff       	call   f01001b0 <_panic>
	}

	//	b) Attempt to allocate large segment with no suitable fragment to fit on
	{
		//Large Allocation
		ptr_allocations[12] = kmalloc((KERNEL_HEAP_MAX - ACTUAL_START - 14*Mega));
f011c5de:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f011c5e5:	10 00 00 
f011c5e8:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011c5ed:	0f b6 d0             	movzbl %al,%edx
f011c5f0:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011c5f6:	01 d0                	add    %edx,%eax
f011c5f8:	48                   	dec    %eax
f011c5f9:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f011c5ff:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011c605:	ba 00 00 00 00       	mov    $0x0,%edx
f011c60a:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f011c610:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011c616:	29 d0                	sub    %edx,%eax
f011c618:	89 c1                	mov    %eax,%ecx
f011c61a:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011c621:	10 00 00 
f011c624:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011c629:	0f b6 c0             	movzbl %al,%eax
f011c62c:	c1 e0 04             	shl    $0x4,%eax
f011c62f:	89 c2                	mov    %eax,%edx
f011c631:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011c637:	01 d0                	add    %edx,%eax
f011c639:	48                   	dec    %eax
f011c63a:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011c640:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011c646:	ba 00 00 00 00       	mov    $0x0,%edx
f011c64b:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011c651:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011c657:	29 d0                	sub    %edx,%eax
f011c659:	01 c8                	add    %ecx,%eax
f011c65b:	ba 00 b0 1f 09       	mov    $0x91fb000,%edx
f011c660:	29 c2                	sub    %eax,%edx
f011c662:	89 d0                	mov    %edx,%eax
f011c664:	83 ec 0c             	sub    $0xc,%esp
f011c667:	50                   	push   %eax
f011c668:	e8 f2 b8 fe ff       	call   f0107f5f <kmalloc>
f011c66d:	83 c4 10             	add    $0x10,%esp
f011c670:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		if (ptr_allocations[12] != NULL) panic("Kmalloc: Attempt to allocate large segment with no suitable fragment to fit on, should return NULL");
f011c676:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011c67c:	85 c0                	test   %eax,%eax
f011c67e:	74 17                	je     f011c697 <test_kmalloc_bestfit2+0xfd0>
f011c680:	83 ec 04             	sub    $0x4,%esp
f011c683:	68 a4 9c 13 f0       	push   $0xf0139ca4
f011c688:	68 ce 02 00 00       	push   $0x2ce
f011c68d:	68 5a 97 13 f0       	push   $0xf013975a
f011c692:	e8 19 3b fe ff       	call   f01001b0 <_panic>

		cprintf("Congratulations!! test BEST FIT allocation (2) completed successfully.\n");
f011c697:	83 ec 0c             	sub    $0xc,%esp
f011c69a:	68 08 9d 13 f0       	push   $0xf0139d08
f011c69f:	e8 8d 47 fe ff       	call   f0100e31 <cprintf>
f011c6a4:	83 c4 10             	add    $0x10,%esp
	}
	return 1;
f011c6a7:	b8 01 00 00 00       	mov    $0x1,%eax

}
f011c6ac:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011c6af:	5b                   	pop    %ebx
f011c6b0:	5f                   	pop    %edi
f011c6b1:	5d                   	pop    %ebp
f011c6b2:	c3                   	ret    

f011c6b3 <test_kmalloc_firstfit1>:

int test_kmalloc_firstfit1()
{
f011c6b3:	55                   	push   %ebp
f011c6b4:	89 e5                	mov    %esp,%ebp
f011c6b6:	57                   	push   %edi
f011c6b7:	53                   	push   %ebx
f011c6b8:	81 ec 40 01 00 00    	sub    $0x140,%esp
	cprintf("==============================================\n");
f011c6be:	83 ec 0c             	sub    $0xc,%esp
f011c6c1:	68 9c 96 13 f0       	push   $0xf013969c
f011c6c6:	e8 66 47 fe ff       	call   f0100e31 <cprintf>
f011c6cb:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011c6ce:	83 ec 0c             	sub    $0xc,%esp
f011c6d1:	68 cc 96 13 f0       	push   $0xf01396cc
f011c6d6:	e8 56 47 fe ff       	call   f0100e31 <cprintf>
f011c6db:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011c6de:	83 ec 0c             	sub    $0xc,%esp
f011c6e1:	68 9c 96 13 f0       	push   $0xf013969c
f011c6e6:	e8 46 47 fe ff       	call   f0100e31 <cprintf>
f011c6eb:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011c6ee:	8d 95 c0 fe ff ff    	lea    -0x140(%ebp),%edx
f011c6f4:	b9 14 00 00 00       	mov    $0x14,%ecx
f011c6f9:	b8 00 00 00 00       	mov    $0x0,%eax
f011c6fe:	89 d7                	mov    %edx,%edi
f011c700:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeDiskFrames;

	//[1] Allocate all
	{
		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011c702:	e8 bf 02 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011c707:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c70a:	e8 75 7f fe ff       	call   f0104684 <pf_calculate_free_frames>
f011c70f:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[0] = kmalloc(1*Mega-kilo);
f011c712:	83 ec 0c             	sub    $0xc,%esp
f011c715:	68 00 fc 0f 00       	push   $0xffc00
f011c71a:	e8 40 b8 fe ff       	call   f0107f5f <kmalloc>
f011c71f:	83 c4 10             	add    $0x10,%esp
f011c722:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011c728:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011c72e:	89 c1                	mov    %eax,%ecx
f011c730:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f011c737:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011c73c:	0f b6 d0             	movzbl %al,%edx
f011c73f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011c742:	01 d0                	add    %edx,%eax
f011c744:	48                   	dec    %eax
f011c745:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011c748:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011c74b:	ba 00 00 00 00       	mov    $0x0,%edx
f011c750:	f7 75 ec             	divl   -0x14(%ebp)
f011c753:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011c756:	29 d0                	sub    %edx,%eax
f011c758:	89 c3                	mov    %eax,%ebx
f011c75a:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011c761:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011c766:	0f b6 c0             	movzbl %al,%eax
f011c769:	c1 e0 04             	shl    $0x4,%eax
f011c76c:	89 c2                	mov    %eax,%edx
f011c76e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011c771:	01 d0                	add    %edx,%eax
f011c773:	48                   	dec    %eax
f011c774:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011c777:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011c77a:	ba 00 00 00 00       	mov    $0x0,%edx
f011c77f:	f7 75 e4             	divl   -0x1c(%ebp)
f011c782:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011c785:	29 d0                	sub    %edx,%eax
f011c787:	01 d8                	add    %ebx,%eax
f011c789:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011c78e:	39 c1                	cmp    %eax,%ecx
f011c790:	74 17                	je     f011c7a9 <test_kmalloc_firstfit1+0xf6>
f011c792:	83 ec 04             	sub    $0x4,%esp
f011c795:	68 74 9b 13 f0       	push   $0xf0139b74
f011c79a:	68 e6 02 00 00       	push   $0x2e6
f011c79f:	68 5a 97 13 f0       	push   $0xf013975a
f011c7a4:	e8 07 3a fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c7a9:	e8 d6 7e fe ff       	call   f0104684 <pf_calculate_free_frames>
f011c7ae:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c7b1:	74 17                	je     f011c7ca <test_kmalloc_firstfit1+0x117>
f011c7b3:	83 ec 04             	sub    $0x4,%esp
f011c7b6:	68 74 97 13 f0       	push   $0xf0139774
f011c7bb:	68 e7 02 00 00       	push   $0x2e7
f011c7c0:	68 5a 97 13 f0       	push   $0xf013975a
f011c7c5:	e8 e6 39 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011c7ca:	e8 f7 01 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011c7cf:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c7d2:	29 c2                	sub    %eax,%edx
f011c7d4:	89 d0                	mov    %edx,%eax
f011c7d6:	3d 00 01 00 00       	cmp    $0x100,%eax
f011c7db:	74 17                	je     f011c7f4 <test_kmalloc_firstfit1+0x141>
f011c7dd:	83 ec 04             	sub    $0x4,%esp
f011c7e0:	68 a4 9b 13 f0       	push   $0xf0139ba4
f011c7e5:	68 e8 02 00 00       	push   $0x2e8
f011c7ea:	68 5a 97 13 f0       	push   $0xf013975a
f011c7ef:	e8 bc 39 fe ff       	call   f01001b0 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011c7f4:	e8 cd 01 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011c7f9:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c7fc:	e8 83 7e fe ff       	call   f0104684 <pf_calculate_free_frames>
f011c801:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[1] = kmalloc(1*Mega-kilo);
f011c804:	83 ec 0c             	sub    $0xc,%esp
f011c807:	68 00 fc 0f 00       	push   $0xffc00
f011c80c:	e8 4e b7 fe ff       	call   f0107f5f <kmalloc>
f011c811:	83 c4 10             	add    $0x10,%esp
f011c814:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 1*Mega)) panic("Wrong start address for the allocated space... ");
f011c81a:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011c820:	89 c1                	mov    %eax,%ecx
f011c822:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f011c829:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011c82e:	0f b6 d0             	movzbl %al,%edx
f011c831:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011c834:	01 d0                	add    %edx,%eax
f011c836:	48                   	dec    %eax
f011c837:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011c83a:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011c83d:	ba 00 00 00 00       	mov    $0x0,%edx
f011c842:	f7 75 dc             	divl   -0x24(%ebp)
f011c845:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011c848:	29 d0                	sub    %edx,%eax
f011c84a:	89 c3                	mov    %eax,%ebx
f011c84c:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011c853:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011c858:	0f b6 c0             	movzbl %al,%eax
f011c85b:	c1 e0 04             	shl    $0x4,%eax
f011c85e:	89 c2                	mov    %eax,%edx
f011c860:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011c863:	01 d0                	add    %edx,%eax
f011c865:	48                   	dec    %eax
f011c866:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011c869:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011c86c:	ba 00 00 00 00       	mov    $0x0,%edx
f011c871:	f7 75 d4             	divl   -0x2c(%ebp)
f011c874:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011c877:	29 d0                	sub    %edx,%eax
f011c879:	01 d8                	add    %ebx,%eax
f011c87b:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f011c880:	39 c1                	cmp    %eax,%ecx
f011c882:	74 17                	je     f011c89b <test_kmalloc_firstfit1+0x1e8>
f011c884:	83 ec 04             	sub    $0x4,%esp
f011c887:	68 74 9b 13 f0       	push   $0xf0139b74
f011c88c:	68 ee 02 00 00       	push   $0x2ee
f011c891:	68 5a 97 13 f0       	push   $0xf013975a
f011c896:	e8 15 39 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c89b:	e8 e4 7d fe ff       	call   f0104684 <pf_calculate_free_frames>
f011c8a0:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c8a3:	74 17                	je     f011c8bc <test_kmalloc_firstfit1+0x209>
f011c8a5:	83 ec 04             	sub    $0x4,%esp
f011c8a8:	68 74 97 13 f0       	push   $0xf0139774
f011c8ad:	68 ef 02 00 00       	push   $0x2ef
f011c8b2:	68 5a 97 13 f0       	push   $0xf013975a
f011c8b7:	e8 f4 38 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011c8bc:	e8 05 01 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011c8c1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c8c4:	29 c2                	sub    %eax,%edx
f011c8c6:	89 d0                	mov    %edx,%eax
f011c8c8:	3d 00 01 00 00       	cmp    $0x100,%eax
f011c8cd:	74 17                	je     f011c8e6 <test_kmalloc_firstfit1+0x233>
f011c8cf:	83 ec 04             	sub    $0x4,%esp
f011c8d2:	68 a4 9b 13 f0       	push   $0xf0139ba4
f011c8d7:	68 f0 02 00 00       	push   $0x2f0
f011c8dc:	68 5a 97 13 f0       	push   $0xf013975a
f011c8e1:	e8 ca 38 fe ff       	call   f01001b0 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011c8e6:	e8 db 00 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011c8eb:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c8ee:	e8 91 7d fe ff       	call   f0104684 <pf_calculate_free_frames>
f011c8f3:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[2] = kmalloc(1*Mega-kilo);
f011c8f6:	83 ec 0c             	sub    $0xc,%esp
f011c8f9:	68 00 fc 0f 00       	push   $0xffc00
f011c8fe:	e8 5c b6 fe ff       	call   f0107f5f <kmalloc>
f011c903:	83 c4 10             	add    $0x10,%esp
f011c906:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... ");
f011c90c:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011c912:	89 c1                	mov    %eax,%ecx
f011c914:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011c91b:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011c920:	0f b6 d0             	movzbl %al,%edx
f011c923:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011c926:	01 d0                	add    %edx,%eax
f011c928:	48                   	dec    %eax
f011c929:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011c92c:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011c92f:	ba 00 00 00 00       	mov    $0x0,%edx
f011c934:	f7 75 cc             	divl   -0x34(%ebp)
f011c937:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011c93a:	29 d0                	sub    %edx,%eax
f011c93c:	89 c3                	mov    %eax,%ebx
f011c93e:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011c945:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011c94a:	0f b6 c0             	movzbl %al,%eax
f011c94d:	c1 e0 04             	shl    $0x4,%eax
f011c950:	89 c2                	mov    %eax,%edx
f011c952:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011c955:	01 d0                	add    %edx,%eax
f011c957:	48                   	dec    %eax
f011c958:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011c95b:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011c95e:	ba 00 00 00 00       	mov    $0x0,%edx
f011c963:	f7 75 c4             	divl   -0x3c(%ebp)
f011c966:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011c969:	29 d0                	sub    %edx,%eax
f011c96b:	01 d8                	add    %ebx,%eax
f011c96d:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011c972:	39 c1                	cmp    %eax,%ecx
f011c974:	74 17                	je     f011c98d <test_kmalloc_firstfit1+0x2da>
f011c976:	83 ec 04             	sub    $0x4,%esp
f011c979:	68 74 9b 13 f0       	push   $0xf0139b74
f011c97e:	68 f6 02 00 00       	push   $0x2f6
f011c983:	68 5a 97 13 f0       	push   $0xf013975a
f011c988:	e8 23 38 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c98d:	e8 f2 7c fe ff       	call   f0104684 <pf_calculate_free_frames>
f011c992:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c995:	74 17                	je     f011c9ae <test_kmalloc_firstfit1+0x2fb>
f011c997:	83 ec 04             	sub    $0x4,%esp
f011c99a:	68 74 97 13 f0       	push   $0xf0139774
f011c99f:	68 f7 02 00 00       	push   $0x2f7
f011c9a4:	68 5a 97 13 f0       	push   $0xf013975a
f011c9a9:	e8 02 38 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011c9ae:	e8 13 00 ff ff       	call   f010c9c6 <sys_calculate_free_frames>
f011c9b3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c9b6:	29 c2                	sub    %eax,%edx
f011c9b8:	89 d0                	mov    %edx,%eax
f011c9ba:	3d 00 01 00 00       	cmp    $0x100,%eax
f011c9bf:	74 17                	je     f011c9d8 <test_kmalloc_firstfit1+0x325>
f011c9c1:	83 ec 04             	sub    $0x4,%esp
f011c9c4:	68 a4 9b 13 f0       	push   $0xf0139ba4
f011c9c9:	68 f8 02 00 00       	push   $0x2f8
f011c9ce:	68 5a 97 13 f0       	push   $0xf013975a
f011c9d3:	e8 d8 37 fe ff       	call   f01001b0 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011c9d8:	e8 e9 ff fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011c9dd:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c9e0:	e8 9f 7c fe ff       	call   f0104684 <pf_calculate_free_frames>
f011c9e5:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[3] = kmalloc(1*Mega-kilo);
f011c9e8:	83 ec 0c             	sub    $0xc,%esp
f011c9eb:	68 00 fc 0f 00       	push   $0xffc00
f011c9f0:	e8 6a b5 fe ff       	call   f0107f5f <kmalloc>
f011c9f5:	83 c4 10             	add    $0x10,%esp
f011c9f8:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... ");
f011c9fe:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011ca04:	89 c1                	mov    %eax,%ecx
f011ca06:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011ca0d:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011ca12:	0f b6 d0             	movzbl %al,%edx
f011ca15:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011ca18:	01 d0                	add    %edx,%eax
f011ca1a:	48                   	dec    %eax
f011ca1b:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011ca1e:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011ca21:	ba 00 00 00 00       	mov    $0x0,%edx
f011ca26:	f7 75 bc             	divl   -0x44(%ebp)
f011ca29:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011ca2c:	29 d0                	sub    %edx,%eax
f011ca2e:	89 c3                	mov    %eax,%ebx
f011ca30:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011ca37:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011ca3c:	0f b6 c0             	movzbl %al,%eax
f011ca3f:	c1 e0 04             	shl    $0x4,%eax
f011ca42:	89 c2                	mov    %eax,%edx
f011ca44:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011ca47:	01 d0                	add    %edx,%eax
f011ca49:	48                   	dec    %eax
f011ca4a:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011ca4d:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011ca50:	ba 00 00 00 00       	mov    $0x0,%edx
f011ca55:	f7 75 b4             	divl   -0x4c(%ebp)
f011ca58:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011ca5b:	29 d0                	sub    %edx,%eax
f011ca5d:	01 d8                	add    %ebx,%eax
f011ca5f:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f011ca64:	39 c1                	cmp    %eax,%ecx
f011ca66:	74 17                	je     f011ca7f <test_kmalloc_firstfit1+0x3cc>
f011ca68:	83 ec 04             	sub    $0x4,%esp
f011ca6b:	68 74 9b 13 f0       	push   $0xf0139b74
f011ca70:	68 fe 02 00 00       	push   $0x2fe
f011ca75:	68 5a 97 13 f0       	push   $0xf013975a
f011ca7a:	e8 31 37 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ca7f:	e8 00 7c fe ff       	call   f0104684 <pf_calculate_free_frames>
f011ca84:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011ca87:	74 17                	je     f011caa0 <test_kmalloc_firstfit1+0x3ed>
f011ca89:	83 ec 04             	sub    $0x4,%esp
f011ca8c:	68 74 97 13 f0       	push   $0xf0139774
f011ca91:	68 ff 02 00 00       	push   $0x2ff
f011ca96:	68 5a 97 13 f0       	push   $0xf013975a
f011ca9b:	e8 10 37 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011caa0:	e8 21 ff fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011caa5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011caa8:	29 c2                	sub    %eax,%edx
f011caaa:	89 d0                	mov    %edx,%eax
f011caac:	3d 00 01 00 00       	cmp    $0x100,%eax
f011cab1:	74 17                	je     f011caca <test_kmalloc_firstfit1+0x417>
f011cab3:	83 ec 04             	sub    $0x4,%esp
f011cab6:	68 a4 9b 13 f0       	push   $0xf0139ba4
f011cabb:	68 00 03 00 00       	push   $0x300
f011cac0:	68 5a 97 13 f0       	push   $0xf013975a
f011cac5:	e8 e6 36 fe ff       	call   f01001b0 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011caca:	e8 f7 fe fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011cacf:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cad2:	e8 ad 7b fe ff       	call   f0104684 <pf_calculate_free_frames>
f011cad7:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[4] = kmalloc(2*Mega-kilo);
f011cada:	83 ec 0c             	sub    $0xc,%esp
f011cadd:	68 00 fc 1f 00       	push   $0x1ffc00
f011cae2:	e8 78 b4 fe ff       	call   f0107f5f <kmalloc>
f011cae7:	83 c4 10             	add    $0x10,%esp
f011caea:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011caf0:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011caf6:	89 c1                	mov    %eax,%ecx
f011caf8:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011caff:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011cb04:	0f b6 d0             	movzbl %al,%edx
f011cb07:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011cb0a:	01 d0                	add    %edx,%eax
f011cb0c:	48                   	dec    %eax
f011cb0d:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011cb10:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011cb13:	ba 00 00 00 00       	mov    $0x0,%edx
f011cb18:	f7 75 ac             	divl   -0x54(%ebp)
f011cb1b:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011cb1e:	29 d0                	sub    %edx,%eax
f011cb20:	89 c3                	mov    %eax,%ebx
f011cb22:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011cb29:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011cb2e:	0f b6 c0             	movzbl %al,%eax
f011cb31:	c1 e0 04             	shl    $0x4,%eax
f011cb34:	89 c2                	mov    %eax,%edx
f011cb36:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011cb39:	01 d0                	add    %edx,%eax
f011cb3b:	48                   	dec    %eax
f011cb3c:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011cb3f:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011cb42:	ba 00 00 00 00       	mov    $0x0,%edx
f011cb47:	f7 75 a4             	divl   -0x5c(%ebp)
f011cb4a:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011cb4d:	29 d0                	sub    %edx,%eax
f011cb4f:	01 d8                	add    %ebx,%eax
f011cb51:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011cb56:	39 c1                	cmp    %eax,%ecx
f011cb58:	74 17                	je     f011cb71 <test_kmalloc_firstfit1+0x4be>
f011cb5a:	83 ec 04             	sub    $0x4,%esp
f011cb5d:	68 74 9b 13 f0       	push   $0xf0139b74
f011cb62:	68 06 03 00 00       	push   $0x306
f011cb67:	68 5a 97 13 f0       	push   $0xf013975a
f011cb6c:	e8 3f 36 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cb71:	e8 0e 7b fe ff       	call   f0104684 <pf_calculate_free_frames>
f011cb76:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011cb79:	74 17                	je     f011cb92 <test_kmalloc_firstfit1+0x4df>
f011cb7b:	83 ec 04             	sub    $0x4,%esp
f011cb7e:	68 74 97 13 f0       	push   $0xf0139774
f011cb83:	68 07 03 00 00       	push   $0x307
f011cb88:	68 5a 97 13 f0       	push   $0xf013975a
f011cb8d:	e8 1e 36 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011cb92:	e8 2f fe fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011cb97:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011cb9a:	29 c2                	sub    %eax,%edx
f011cb9c:	89 d0                	mov    %edx,%eax
f011cb9e:	3d 00 02 00 00       	cmp    $0x200,%eax
f011cba3:	74 17                	je     f011cbbc <test_kmalloc_firstfit1+0x509>
f011cba5:	83 ec 04             	sub    $0x4,%esp
f011cba8:	68 a4 9b 13 f0       	push   $0xf0139ba4
f011cbad:	68 08 03 00 00       	push   $0x308
f011cbb2:	68 5a 97 13 f0       	push   $0xf013975a
f011cbb7:	e8 f4 35 fe ff       	call   f01001b0 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011cbbc:	e8 05 fe fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011cbc1:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cbc4:	e8 bb 7a fe ff       	call   f0104684 <pf_calculate_free_frames>
f011cbc9:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[5] = kmalloc(2*Mega-kilo);
f011cbcc:	83 ec 0c             	sub    $0xc,%esp
f011cbcf:	68 00 fc 1f 00       	push   $0x1ffc00
f011cbd4:	e8 86 b3 fe ff       	call   f0107f5f <kmalloc>
f011cbd9:	83 c4 10             	add    $0x10,%esp
f011cbdc:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 6*Mega)) panic("Wrong start address for the allocated space... ");
f011cbe2:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011cbe8:	89 c1                	mov    %eax,%ecx
f011cbea:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011cbf1:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011cbf6:	0f b6 d0             	movzbl %al,%edx
f011cbf9:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011cbfc:	01 d0                	add    %edx,%eax
f011cbfe:	48                   	dec    %eax
f011cbff:	89 45 98             	mov    %eax,-0x68(%ebp)
f011cc02:	8b 45 98             	mov    -0x68(%ebp),%eax
f011cc05:	ba 00 00 00 00       	mov    $0x0,%edx
f011cc0a:	f7 75 9c             	divl   -0x64(%ebp)
f011cc0d:	8b 45 98             	mov    -0x68(%ebp),%eax
f011cc10:	29 d0                	sub    %edx,%eax
f011cc12:	89 c3                	mov    %eax,%ebx
f011cc14:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011cc1b:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011cc20:	0f b6 c0             	movzbl %al,%eax
f011cc23:	c1 e0 04             	shl    $0x4,%eax
f011cc26:	89 c2                	mov    %eax,%edx
f011cc28:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011cc2b:	01 d0                	add    %edx,%eax
f011cc2d:	48                   	dec    %eax
f011cc2e:	89 45 90             	mov    %eax,-0x70(%ebp)
f011cc31:	8b 45 90             	mov    -0x70(%ebp),%eax
f011cc34:	ba 00 00 00 00       	mov    $0x0,%edx
f011cc39:	f7 75 94             	divl   -0x6c(%ebp)
f011cc3c:	8b 45 90             	mov    -0x70(%ebp),%eax
f011cc3f:	29 d0                	sub    %edx,%eax
f011cc41:	01 d8                	add    %ebx,%eax
f011cc43:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f011cc48:	39 c1                	cmp    %eax,%ecx
f011cc4a:	74 17                	je     f011cc63 <test_kmalloc_firstfit1+0x5b0>
f011cc4c:	83 ec 04             	sub    $0x4,%esp
f011cc4f:	68 74 9b 13 f0       	push   $0xf0139b74
f011cc54:	68 0e 03 00 00       	push   $0x30e
f011cc59:	68 5a 97 13 f0       	push   $0xf013975a
f011cc5e:	e8 4d 35 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cc63:	e8 1c 7a fe ff       	call   f0104684 <pf_calculate_free_frames>
f011cc68:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011cc6b:	74 17                	je     f011cc84 <test_kmalloc_firstfit1+0x5d1>
f011cc6d:	83 ec 04             	sub    $0x4,%esp
f011cc70:	68 74 97 13 f0       	push   $0xf0139774
f011cc75:	68 0f 03 00 00       	push   $0x30f
f011cc7a:	68 5a 97 13 f0       	push   $0xf013975a
f011cc7f:	e8 2c 35 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011cc84:	e8 3d fd fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011cc89:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011cc8c:	29 c2                	sub    %eax,%edx
f011cc8e:	89 d0                	mov    %edx,%eax
f011cc90:	3d 00 02 00 00       	cmp    $0x200,%eax
f011cc95:	74 17                	je     f011ccae <test_kmalloc_firstfit1+0x5fb>
f011cc97:	83 ec 04             	sub    $0x4,%esp
f011cc9a:	68 a4 9b 13 f0       	push   $0xf0139ba4
f011cc9f:	68 10 03 00 00       	push   $0x310
f011cca4:	68 5a 97 13 f0       	push   $0xf013975a
f011cca9:	e8 02 35 fe ff       	call   f01001b0 <_panic>

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f011ccae:	e8 13 fd fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011ccb3:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ccb6:	e8 c9 79 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011ccbb:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[6] = kmalloc(3*Mega-kilo);
f011ccbe:	83 ec 0c             	sub    $0xc,%esp
f011ccc1:	68 00 fc 2f 00       	push   $0x2ffc00
f011ccc6:	e8 94 b2 fe ff       	call   f0107f5f <kmalloc>
f011cccb:	83 c4 10             	add    $0x10,%esp
f011ccce:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) ptr_allocations[6] !=  (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f011ccd4:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011ccda:	89 c1                	mov    %eax,%ecx
f011ccdc:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011cce3:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011cce8:	0f b6 d0             	movzbl %al,%edx
f011cceb:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011ccee:	01 d0                	add    %edx,%eax
f011ccf0:	48                   	dec    %eax
f011ccf1:	89 45 88             	mov    %eax,-0x78(%ebp)
f011ccf4:	8b 45 88             	mov    -0x78(%ebp),%eax
f011ccf7:	ba 00 00 00 00       	mov    $0x0,%edx
f011ccfc:	f7 75 8c             	divl   -0x74(%ebp)
f011ccff:	8b 45 88             	mov    -0x78(%ebp),%eax
f011cd02:	29 d0                	sub    %edx,%eax
f011cd04:	89 c3                	mov    %eax,%ebx
f011cd06:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011cd0d:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011cd12:	0f b6 c0             	movzbl %al,%eax
f011cd15:	c1 e0 04             	shl    $0x4,%eax
f011cd18:	89 c2                	mov    %eax,%edx
f011cd1a:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011cd1d:	01 d0                	add    %edx,%eax
f011cd1f:	48                   	dec    %eax
f011cd20:	89 45 80             	mov    %eax,-0x80(%ebp)
f011cd23:	8b 45 80             	mov    -0x80(%ebp),%eax
f011cd26:	ba 00 00 00 00       	mov    $0x0,%edx
f011cd2b:	f7 75 84             	divl   -0x7c(%ebp)
f011cd2e:	8b 45 80             	mov    -0x80(%ebp),%eax
f011cd31:	29 d0                	sub    %edx,%eax
f011cd33:	01 d8                	add    %ebx,%eax
f011cd35:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f011cd3a:	39 c1                	cmp    %eax,%ecx
f011cd3c:	74 17                	je     f011cd55 <test_kmalloc_firstfit1+0x6a2>
f011cd3e:	83 ec 04             	sub    $0x4,%esp
f011cd41:	68 74 9b 13 f0       	push   $0xf0139b74
f011cd46:	68 16 03 00 00       	push   $0x316
f011cd4b:	68 5a 97 13 f0       	push   $0xf013975a
f011cd50:	e8 5b 34 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cd55:	e8 2a 79 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011cd5a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011cd5d:	74 17                	je     f011cd76 <test_kmalloc_firstfit1+0x6c3>
f011cd5f:	83 ec 04             	sub    $0x4,%esp
f011cd62:	68 74 97 13 f0       	push   $0xf0139774
f011cd67:	68 17 03 00 00       	push   $0x317
f011cd6c:	68 5a 97 13 f0       	push   $0xf013975a
f011cd71:	e8 3a 34 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: ");
f011cd76:	e8 4b fc fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011cd7b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011cd7e:	29 c2                	sub    %eax,%edx
f011cd80:	89 d0                	mov    %edx,%eax
f011cd82:	3d 00 03 00 00       	cmp    $0x300,%eax
f011cd87:	74 17                	je     f011cda0 <test_kmalloc_firstfit1+0x6ed>
f011cd89:	83 ec 04             	sub    $0x4,%esp
f011cd8c:	68 a4 9b 13 f0       	push   $0xf0139ba4
f011cd91:	68 18 03 00 00       	push   $0x318
f011cd96:	68 5a 97 13 f0       	push   $0xf013975a
f011cd9b:	e8 10 34 fe ff       	call   f01001b0 <_panic>

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f011cda0:	e8 21 fc fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011cda5:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cda8:	e8 d7 78 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011cdad:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[7] = kmalloc(3*Mega-kilo);
f011cdb0:	83 ec 0c             	sub    $0xc,%esp
f011cdb3:	68 00 fc 2f 00       	push   $0x2ffc00
f011cdb8:	e8 a2 b1 fe ff       	call   f0107f5f <kmalloc>
f011cdbd:	83 c4 10             	add    $0x10,%esp
f011cdc0:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 11*Mega)) panic("Wrong start address for the allocated space... ");
f011cdc6:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011cdcc:	89 c1                	mov    %eax,%ecx
f011cdce:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011cdd5:	10 00 00 
f011cdd8:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011cddd:	0f b6 d0             	movzbl %al,%edx
f011cde0:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011cde6:	01 d0                	add    %edx,%eax
f011cde8:	48                   	dec    %eax
f011cde9:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011cdef:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011cdf5:	ba 00 00 00 00       	mov    $0x0,%edx
f011cdfa:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011ce00:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011ce06:	29 d0                	sub    %edx,%eax
f011ce08:	89 c3                	mov    %eax,%ebx
f011ce0a:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011ce11:	10 00 00 
f011ce14:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011ce19:	0f b6 c0             	movzbl %al,%eax
f011ce1c:	c1 e0 04             	shl    $0x4,%eax
f011ce1f:	89 c2                	mov    %eax,%edx
f011ce21:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011ce27:	01 d0                	add    %edx,%eax
f011ce29:	48                   	dec    %eax
f011ce2a:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011ce30:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011ce36:	ba 00 00 00 00       	mov    $0x0,%edx
f011ce3b:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011ce41:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011ce47:	29 d0                	sub    %edx,%eax
f011ce49:	01 d8                	add    %ebx,%eax
f011ce4b:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f011ce50:	39 c1                	cmp    %eax,%ecx
f011ce52:	74 17                	je     f011ce6b <test_kmalloc_firstfit1+0x7b8>
f011ce54:	83 ec 04             	sub    $0x4,%esp
f011ce57:	68 74 9b 13 f0       	push   $0xf0139b74
f011ce5c:	68 1e 03 00 00       	push   $0x31e
f011ce61:	68 5a 97 13 f0       	push   $0xf013975a
f011ce66:	e8 45 33 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ce6b:	e8 14 78 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011ce70:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011ce73:	74 17                	je     f011ce8c <test_kmalloc_firstfit1+0x7d9>
f011ce75:	83 ec 04             	sub    $0x4,%esp
f011ce78:	68 74 97 13 f0       	push   $0xf0139774
f011ce7d:	68 1f 03 00 00       	push   $0x31f
f011ce82:	68 5a 97 13 f0       	push   $0xf013975a
f011ce87:	e8 24 33 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: ");
f011ce8c:	e8 35 fb fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011ce91:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011ce94:	29 c2                	sub    %eax,%edx
f011ce96:	89 d0                	mov    %edx,%eax
f011ce98:	3d 00 03 00 00       	cmp    $0x300,%eax
f011ce9d:	74 17                	je     f011ceb6 <test_kmalloc_firstfit1+0x803>
f011ce9f:	83 ec 04             	sub    $0x4,%esp
f011cea2:	68 a4 9b 13 f0       	push   $0xf0139ba4
f011cea7:	68 20 03 00 00       	push   $0x320
f011ceac:	68 5a 97 13 f0       	push   $0xf013975a
f011ceb1:	e8 fa 32 fe ff       	call   f01001b0 <_panic>
	}

	//[2] Free some to create holes
	{
		//1 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011ceb6:	e8 0b fb fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011cebb:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cebe:	e8 c1 77 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011cec3:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[1]);
f011cec6:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011cecc:	83 ec 0c             	sub    $0xc,%esp
f011cecf:	50                   	push   %eax
f011ced0:	e8 a4 b0 fe ff       	call   f0107f79 <kfree>
f011ced5:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ced8:	e8 a7 77 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011cedd:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011cee0:	74 17                	je     f011cef9 <test_kmalloc_firstfit1+0x846>
f011cee2:	83 ec 04             	sub    $0x4,%esp
f011cee5:	68 74 97 13 f0       	push   $0xf0139774
f011ceea:	68 29 03 00 00       	push   $0x329
f011ceef:	68 5a 97 13 f0       	push   $0xf013975a
f011cef4:	e8 b7 32 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011cef9:	e8 c8 fa fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011cefe:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011cf01:	3d 00 01 00 00       	cmp    $0x100,%eax
f011cf06:	74 17                	je     f011cf1f <test_kmalloc_firstfit1+0x86c>
f011cf08:	83 ec 04             	sub    $0x4,%esp
f011cf0b:	68 b7 9b 13 f0       	push   $0xf0139bb7
f011cf10:	68 2a 03 00 00       	push   $0x32a
f011cf15:	68 5a 97 13 f0       	push   $0xf013975a
f011cf1a:	e8 91 32 fe ff       	call   f01001b0 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011cf1f:	e8 a2 fa fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011cf24:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cf27:	e8 58 77 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011cf2c:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[4]);
f011cf2f:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011cf35:	83 ec 0c             	sub    $0xc,%esp
f011cf38:	50                   	push   %eax
f011cf39:	e8 3b b0 fe ff       	call   f0107f79 <kfree>
f011cf3e:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cf41:	e8 3e 77 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011cf46:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011cf49:	74 17                	je     f011cf62 <test_kmalloc_firstfit1+0x8af>
f011cf4b:	83 ec 04             	sub    $0x4,%esp
f011cf4e:	68 74 97 13 f0       	push   $0xf0139774
f011cf53:	68 30 03 00 00       	push   $0x330
f011cf58:	68 5a 97 13 f0       	push   $0xf013975a
f011cf5d:	e8 4e 32 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: ");
f011cf62:	e8 5f fa fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011cf67:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011cf6a:	3d 00 02 00 00       	cmp    $0x200,%eax
f011cf6f:	74 17                	je     f011cf88 <test_kmalloc_firstfit1+0x8d5>
f011cf71:	83 ec 04             	sub    $0x4,%esp
f011cf74:	68 b7 9b 13 f0       	push   $0xf0139bb7
f011cf79:	68 31 03 00 00       	push   $0x331
f011cf7e:	68 5a 97 13 f0       	push   $0xf013975a
f011cf83:	e8 28 32 fe ff       	call   f01001b0 <_panic>

		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011cf88:	e8 39 fa fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011cf8d:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cf90:	e8 ef 76 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011cf95:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[6]);
f011cf98:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011cf9e:	83 ec 0c             	sub    $0xc,%esp
f011cfa1:	50                   	push   %eax
f011cfa2:	e8 d2 af fe ff       	call   f0107f79 <kfree>
f011cfa7:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cfaa:	e8 d5 76 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011cfaf:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011cfb2:	74 17                	je     f011cfcb <test_kmalloc_firstfit1+0x918>
f011cfb4:	83 ec 04             	sub    $0x4,%esp
f011cfb7:	68 74 97 13 f0       	push   $0xf0139774
f011cfbc:	68 37 03 00 00       	push   $0x337
f011cfc1:	68 5a 97 13 f0       	push   $0xf013975a
f011cfc6:	e8 e5 31 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 768) panic("Wrong free: ");
f011cfcb:	e8 f6 f9 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011cfd0:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011cfd3:	3d 00 03 00 00       	cmp    $0x300,%eax
f011cfd8:	74 17                	je     f011cff1 <test_kmalloc_firstfit1+0x93e>
f011cfda:	83 ec 04             	sub    $0x4,%esp
f011cfdd:	68 b7 9b 13 f0       	push   $0xf0139bb7
f011cfe2:	68 38 03 00 00       	push   $0x338
f011cfe7:	68 5a 97 13 f0       	push   $0xf013975a
f011cfec:	e8 bf 31 fe ff       	call   f01001b0 <_panic>
	}

	//[3] Allocate again [test first fit]
	{
		//Allocate 512 KB - should be placed in 1st hole
		freeFrames = sys_calculate_free_frames() ;
f011cff1:	e8 d0 f9 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011cff6:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cff9:	e8 86 76 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011cffe:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[8] = kmalloc(512*kilo - kilo);
f011d001:	83 ec 0c             	sub    $0xc,%esp
f011d004:	68 00 fc 07 00       	push   $0x7fc00
f011d009:	e8 51 af fe ff       	call   f0107f5f <kmalloc>
f011d00e:	83 c4 10             	add    $0x10,%esp
f011d011:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 1*Mega)) panic("Wrong start address for the allocated space... ");
f011d017:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011d01d:	89 c1                	mov    %eax,%ecx
f011d01f:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011d026:	10 00 00 
f011d029:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011d02e:	0f b6 d0             	movzbl %al,%edx
f011d031:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011d037:	01 d0                	add    %edx,%eax
f011d039:	48                   	dec    %eax
f011d03a:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011d040:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011d046:	ba 00 00 00 00       	mov    $0x0,%edx
f011d04b:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011d051:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011d057:	29 d0                	sub    %edx,%eax
f011d059:	89 c3                	mov    %eax,%ebx
f011d05b:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011d062:	10 00 00 
f011d065:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011d06a:	0f b6 c0             	movzbl %al,%eax
f011d06d:	c1 e0 04             	shl    $0x4,%eax
f011d070:	89 c2                	mov    %eax,%edx
f011d072:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011d078:	01 d0                	add    %edx,%eax
f011d07a:	48                   	dec    %eax
f011d07b:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011d081:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011d087:	ba 00 00 00 00       	mov    $0x0,%edx
f011d08c:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011d092:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011d098:	29 d0                	sub    %edx,%eax
f011d09a:	01 d8                	add    %ebx,%eax
f011d09c:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f011d0a1:	39 c1                	cmp    %eax,%ecx
f011d0a3:	74 17                	je     f011d0bc <test_kmalloc_firstfit1+0xa09>
f011d0a5:	83 ec 04             	sub    $0x4,%esp
f011d0a8:	68 74 9b 13 f0       	push   $0xf0139b74
f011d0ad:	68 41 03 00 00       	push   $0x341
f011d0b2:	68 5a 97 13 f0       	push   $0xf013975a
f011d0b7:	e8 f4 30 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d0bc:	e8 c3 75 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011d0c1:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d0c4:	74 17                	je     f011d0dd <test_kmalloc_firstfit1+0xa2a>
f011d0c6:	83 ec 04             	sub    $0x4,%esp
f011d0c9:	68 74 97 13 f0       	push   $0xf0139774
f011d0ce:	68 42 03 00 00       	push   $0x342
f011d0d3:	68 5a 97 13 f0       	push   $0xf013975a
f011d0d8:	e8 d3 30 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 128) panic("Wrong allocation: ");
f011d0dd:	e8 e4 f8 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011d0e2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d0e5:	29 c2                	sub    %eax,%edx
f011d0e7:	89 d0                	mov    %edx,%eax
f011d0e9:	3d 80 00 00 00       	cmp    $0x80,%eax
f011d0ee:	74 17                	je     f011d107 <test_kmalloc_firstfit1+0xa54>
f011d0f0:	83 ec 04             	sub    $0x4,%esp
f011d0f3:	68 a4 9b 13 f0       	push   $0xf0139ba4
f011d0f8:	68 43 03 00 00       	push   $0x343
f011d0fd:	68 5a 97 13 f0       	push   $0xf013975a
f011d102:	e8 a9 30 fe ff       	call   f01001b0 <_panic>

		//Allocate 1 MB - should be placed in 2nd hole
		freeFrames = sys_calculate_free_frames() ;
f011d107:	e8 ba f8 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011d10c:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d10f:	e8 70 75 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011d114:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega - kilo);
f011d117:	83 ec 0c             	sub    $0xc,%esp
f011d11a:	68 00 fc 0f 00       	push   $0xffc00
f011d11f:	e8 3b ae fe ff       	call   f0107f5f <kmalloc>
f011d124:	83 c4 10             	add    $0x10,%esp
f011d127:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011d12d:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011d133:	89 c1                	mov    %eax,%ecx
f011d135:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011d13c:	10 00 00 
f011d13f:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011d144:	0f b6 d0             	movzbl %al,%edx
f011d147:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011d14d:	01 d0                	add    %edx,%eax
f011d14f:	48                   	dec    %eax
f011d150:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011d156:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011d15c:	ba 00 00 00 00       	mov    $0x0,%edx
f011d161:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011d167:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011d16d:	29 d0                	sub    %edx,%eax
f011d16f:	89 c3                	mov    %eax,%ebx
f011d171:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011d178:	10 00 00 
f011d17b:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011d180:	0f b6 c0             	movzbl %al,%eax
f011d183:	c1 e0 04             	shl    $0x4,%eax
f011d186:	89 c2                	mov    %eax,%edx
f011d188:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011d18e:	01 d0                	add    %edx,%eax
f011d190:	48                   	dec    %eax
f011d191:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011d197:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011d19d:	ba 00 00 00 00       	mov    $0x0,%edx
f011d1a2:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011d1a8:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011d1ae:	29 d0                	sub    %edx,%eax
f011d1b0:	01 d8                	add    %ebx,%eax
f011d1b2:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011d1b7:	39 c1                	cmp    %eax,%ecx
f011d1b9:	74 17                	je     f011d1d2 <test_kmalloc_firstfit1+0xb1f>
f011d1bb:	83 ec 04             	sub    $0x4,%esp
f011d1be:	68 74 9b 13 f0       	push   $0xf0139b74
f011d1c3:	68 49 03 00 00       	push   $0x349
f011d1c8:	68 5a 97 13 f0       	push   $0xf013975a
f011d1cd:	e8 de 2f fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d1d2:	e8 ad 74 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011d1d7:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d1da:	74 17                	je     f011d1f3 <test_kmalloc_firstfit1+0xb40>
f011d1dc:	83 ec 04             	sub    $0x4,%esp
f011d1df:	68 74 97 13 f0       	push   $0xf0139774
f011d1e4:	68 4a 03 00 00       	push   $0x34a
f011d1e9:	68 5a 97 13 f0       	push   $0xf013975a
f011d1ee:	e8 bd 2f fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011d1f3:	e8 ce f7 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011d1f8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d1fb:	29 c2                	sub    %eax,%edx
f011d1fd:	89 d0                	mov    %edx,%eax
f011d1ff:	3d 00 01 00 00       	cmp    $0x100,%eax
f011d204:	74 17                	je     f011d21d <test_kmalloc_firstfit1+0xb6a>
f011d206:	83 ec 04             	sub    $0x4,%esp
f011d209:	68 a4 9b 13 f0       	push   $0xf0139ba4
f011d20e:	68 4b 03 00 00       	push   $0x34b
f011d213:	68 5a 97 13 f0       	push   $0xf013975a
f011d218:	e8 93 2f fe ff       	call   f01001b0 <_panic>


		//Allocate 256 KB - should be placed in remaining of 1st hole
		freeFrames = sys_calculate_free_frames() ;
f011d21d:	e8 a4 f7 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011d222:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d225:	e8 5a 74 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011d22a:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[10] = kmalloc(256*kilo - kilo);
f011d22d:	83 ec 0c             	sub    $0xc,%esp
f011d230:	68 00 fc 03 00       	push   $0x3fc00
f011d235:	e8 25 ad fe ff       	call   f0107f5f <kmalloc>
f011d23a:	83 c4 10             	add    $0x10,%esp
f011d23d:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 1*Mega + 512*kilo)) panic("Wrong start address for the allocated space... ");
f011d243:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011d249:	89 c1                	mov    %eax,%ecx
f011d24b:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011d252:	10 00 00 
f011d255:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011d25a:	0f b6 d0             	movzbl %al,%edx
f011d25d:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011d263:	01 d0                	add    %edx,%eax
f011d265:	48                   	dec    %eax
f011d266:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011d26c:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011d272:	ba 00 00 00 00       	mov    $0x0,%edx
f011d277:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011d27d:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011d283:	29 d0                	sub    %edx,%eax
f011d285:	89 c3                	mov    %eax,%ebx
f011d287:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011d28e:	10 00 00 
f011d291:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011d296:	0f b6 c0             	movzbl %al,%eax
f011d299:	c1 e0 04             	shl    $0x4,%eax
f011d29c:	89 c2                	mov    %eax,%edx
f011d29e:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011d2a4:	01 d0                	add    %edx,%eax
f011d2a6:	48                   	dec    %eax
f011d2a7:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011d2ad:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011d2b3:	ba 00 00 00 00       	mov    $0x0,%edx
f011d2b8:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011d2be:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011d2c4:	29 d0                	sub    %edx,%eax
f011d2c6:	01 d8                	add    %ebx,%eax
f011d2c8:	2d 00 c0 e7 09       	sub    $0x9e7c000,%eax
f011d2cd:	39 c1                	cmp    %eax,%ecx
f011d2cf:	74 17                	je     f011d2e8 <test_kmalloc_firstfit1+0xc35>
f011d2d1:	83 ec 04             	sub    $0x4,%esp
f011d2d4:	68 74 9b 13 f0       	push   $0xf0139b74
f011d2d9:	68 52 03 00 00       	push   $0x352
f011d2de:	68 5a 97 13 f0       	push   $0xf013975a
f011d2e3:	e8 c8 2e fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d2e8:	e8 97 73 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011d2ed:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d2f0:	74 17                	je     f011d309 <test_kmalloc_firstfit1+0xc56>
f011d2f2:	83 ec 04             	sub    $0x4,%esp
f011d2f5:	68 74 97 13 f0       	push   $0xf0139774
f011d2fa:	68 53 03 00 00       	push   $0x353
f011d2ff:	68 5a 97 13 f0       	push   $0xf013975a
f011d304:	e8 a7 2e fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 64) panic("Wrong allocation: ");
f011d309:	e8 b8 f6 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011d30e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d311:	29 c2                	sub    %eax,%edx
f011d313:	89 d0                	mov    %edx,%eax
f011d315:	83 f8 40             	cmp    $0x40,%eax
f011d318:	74 17                	je     f011d331 <test_kmalloc_firstfit1+0xc7e>
f011d31a:	83 ec 04             	sub    $0x4,%esp
f011d31d:	68 a4 9b 13 f0       	push   $0xf0139ba4
f011d322:	68 54 03 00 00       	push   $0x354
f011d327:	68 5a 97 13 f0       	push   $0xf013975a
f011d32c:	e8 7f 2e fe ff       	call   f01001b0 <_panic>

		//Allocate 2 MB - should be placed in 3rd hole
		freeFrames = sys_calculate_free_frames() ;
f011d331:	e8 90 f6 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011d336:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d339:	e8 46 73 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011d33e:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[11] = kmalloc(2*Mega);
f011d341:	83 ec 0c             	sub    $0xc,%esp
f011d344:	68 00 00 20 00       	push   $0x200000
f011d349:	e8 11 ac fe ff       	call   f0107f5f <kmalloc>
f011d34e:	83 c4 10             	add    $0x10,%esp
f011d351:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f011d357:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011d35d:	89 c1                	mov    %eax,%ecx
f011d35f:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011d366:	10 00 00 
f011d369:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011d36e:	0f b6 d0             	movzbl %al,%edx
f011d371:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011d377:	01 d0                	add    %edx,%eax
f011d379:	48                   	dec    %eax
f011d37a:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011d380:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011d386:	ba 00 00 00 00       	mov    $0x0,%edx
f011d38b:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011d391:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011d397:	29 d0                	sub    %edx,%eax
f011d399:	89 c3                	mov    %eax,%ebx
f011d39b:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011d3a2:	10 00 00 
f011d3a5:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011d3aa:	0f b6 c0             	movzbl %al,%eax
f011d3ad:	c1 e0 04             	shl    $0x4,%eax
f011d3b0:	89 c2                	mov    %eax,%edx
f011d3b2:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011d3b8:	01 d0                	add    %edx,%eax
f011d3ba:	48                   	dec    %eax
f011d3bb:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011d3c1:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011d3c7:	ba 00 00 00 00       	mov    $0x0,%edx
f011d3cc:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011d3d2:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011d3d8:	29 d0                	sub    %edx,%eax
f011d3da:	01 d8                	add    %ebx,%eax
f011d3dc:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f011d3e1:	39 c1                	cmp    %eax,%ecx
f011d3e3:	74 17                	je     f011d3fc <test_kmalloc_firstfit1+0xd49>
f011d3e5:	83 ec 04             	sub    $0x4,%esp
f011d3e8:	68 74 9b 13 f0       	push   $0xf0139b74
f011d3ed:	68 5a 03 00 00       	push   $0x35a
f011d3f2:	68 5a 97 13 f0       	push   $0xf013975a
f011d3f7:	e8 b4 2d fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011d3fc:	e8 c5 f5 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011d401:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d404:	29 c2                	sub    %eax,%edx
f011d406:	89 d0                	mov    %edx,%eax
f011d408:	3d 00 02 00 00       	cmp    $0x200,%eax
f011d40d:	74 17                	je     f011d426 <test_kmalloc_firstfit1+0xd73>
f011d40f:	83 ec 04             	sub    $0x4,%esp
f011d412:	68 a4 9b 13 f0       	push   $0xf0139ba4
f011d417:	68 5b 03 00 00       	push   $0x35b
f011d41c:	68 5a 97 13 f0       	push   $0xf013975a
f011d421:	e8 8a 2d fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d426:	e8 59 72 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011d42b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d42e:	74 17                	je     f011d447 <test_kmalloc_firstfit1+0xd94>
f011d430:	83 ec 04             	sub    $0x4,%esp
f011d433:	68 74 97 13 f0       	push   $0xf0139774
f011d438:	68 5c 03 00 00       	push   $0x35c
f011d43d:	68 5a 97 13 f0       	push   $0xf013975a
f011d442:	e8 69 2d fe ff       	call   f01001b0 <_panic>


		//Allocate 4 MB - should be placed in end of all allocations
		freeFrames = sys_calculate_free_frames() ;
f011d447:	e8 7a f5 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011d44c:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d44f:	e8 30 72 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011d454:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[12] = kmalloc(4*Mega - kilo);
f011d457:	83 ec 0c             	sub    $0xc,%esp
f011d45a:	68 00 fc 3f 00       	push   $0x3ffc00
f011d45f:	e8 fb aa fe ff       	call   f0107f5f <kmalloc>
f011d464:	83 c4 10             	add    $0x10,%esp
f011d467:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 14*Mega)) panic("Wrong start address for the allocated space... ");
f011d46d:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011d473:	89 c1                	mov    %eax,%ecx
f011d475:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011d47c:	10 00 00 
f011d47f:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011d484:	0f b6 d0             	movzbl %al,%edx
f011d487:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011d48d:	01 d0                	add    %edx,%eax
f011d48f:	48                   	dec    %eax
f011d490:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011d496:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011d49c:	ba 00 00 00 00       	mov    $0x0,%edx
f011d4a1:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011d4a7:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011d4ad:	29 d0                	sub    %edx,%eax
f011d4af:	89 c3                	mov    %eax,%ebx
f011d4b1:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011d4b8:	10 00 00 
f011d4bb:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011d4c0:	0f b6 c0             	movzbl %al,%eax
f011d4c3:	c1 e0 04             	shl    $0x4,%eax
f011d4c6:	89 c2                	mov    %eax,%edx
f011d4c8:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011d4ce:	01 d0                	add    %edx,%eax
f011d4d0:	48                   	dec    %eax
f011d4d1:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011d4d7:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011d4dd:	ba 00 00 00 00       	mov    $0x0,%edx
f011d4e2:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011d4e8:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011d4ee:	29 d0                	sub    %edx,%eax
f011d4f0:	01 d8                	add    %ebx,%eax
f011d4f2:	2d 00 c0 1f 09       	sub    $0x91fc000,%eax
f011d4f7:	39 c1                	cmp    %eax,%ecx
f011d4f9:	74 17                	je     f011d512 <test_kmalloc_firstfit1+0xe5f>
f011d4fb:	83 ec 04             	sub    $0x4,%esp
f011d4fe:	68 74 9b 13 f0       	push   $0xf0139b74
f011d503:	68 63 03 00 00       	push   $0x363
f011d508:	68 5a 97 13 f0       	push   $0xf013975a
f011d50d:	e8 9e 2c fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d512:	e8 6d 71 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011d517:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d51a:	74 17                	je     f011d533 <test_kmalloc_firstfit1+0xe80>
f011d51c:	83 ec 04             	sub    $0x4,%esp
f011d51f:	68 74 97 13 f0       	push   $0xf0139774
f011d524:	68 64 03 00 00       	push   $0x364
f011d529:	68 5a 97 13 f0       	push   $0xf013975a
f011d52e:	e8 7d 2c fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1024) panic("Wrong allocation: ");
f011d533:	e8 8e f4 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011d538:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d53b:	29 c2                	sub    %eax,%edx
f011d53d:	89 d0                	mov    %edx,%eax
f011d53f:	3d 00 04 00 00       	cmp    $0x400,%eax
f011d544:	74 17                	je     f011d55d <test_kmalloc_firstfit1+0xeaa>
f011d546:	83 ec 04             	sub    $0x4,%esp
f011d549:	68 a4 9b 13 f0       	push   $0xf0139ba4
f011d54e:	68 65 03 00 00       	push   $0x365
f011d553:	68 5a 97 13 f0       	push   $0xf013975a
f011d558:	e8 53 2c fe ff       	call   f01001b0 <_panic>
	}

	//[4] Free contiguous allocations
	{
		//1 MB Hole appended to previous 256 KB hole
		freeFrames = sys_calculate_free_frames() ;
f011d55d:	e8 64 f4 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011d562:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d565:	e8 1a 71 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011d56a:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[2]);
f011d56d:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011d573:	83 ec 0c             	sub    $0xc,%esp
f011d576:	50                   	push   %eax
f011d577:	e8 fd a9 fe ff       	call   f0107f79 <kfree>
f011d57c:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d57f:	e8 00 71 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011d584:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d587:	74 17                	je     f011d5a0 <test_kmalloc_firstfit1+0xeed>
f011d589:	83 ec 04             	sub    $0x4,%esp
f011d58c:	68 74 97 13 f0       	push   $0xf0139774
f011d591:	68 6e 03 00 00       	push   $0x36e
f011d596:	68 5a 97 13 f0       	push   $0xf013975a
f011d59b:	e8 10 2c fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011d5a0:	e8 21 f4 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011d5a5:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011d5a8:	3d 00 01 00 00       	cmp    $0x100,%eax
f011d5ad:	74 17                	je     f011d5c6 <test_kmalloc_firstfit1+0xf13>
f011d5af:	83 ec 04             	sub    $0x4,%esp
f011d5b2:	68 b7 9b 13 f0       	push   $0xf0139bb7
f011d5b7:	68 6f 03 00 00       	push   $0x36f
f011d5bc:	68 5a 97 13 f0       	push   $0xf013975a
f011d5c1:	e8 ea 2b fe ff       	call   f01001b0 <_panic>

		//Next 1 MB Hole appended also
		freeFrames = sys_calculate_free_frames() ;
f011d5c6:	e8 fb f3 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011d5cb:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d5ce:	e8 b1 70 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011d5d3:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[3]);
f011d5d6:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011d5dc:	83 ec 0c             	sub    $0xc,%esp
f011d5df:	50                   	push   %eax
f011d5e0:	e8 94 a9 fe ff       	call   f0107f79 <kfree>
f011d5e5:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d5e8:	e8 97 70 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011d5ed:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d5f0:	74 17                	je     f011d609 <test_kmalloc_firstfit1+0xf56>
f011d5f2:	83 ec 04             	sub    $0x4,%esp
f011d5f5:	68 74 97 13 f0       	push   $0xf0139774
f011d5fa:	68 75 03 00 00       	push   $0x375
f011d5ff:	68 5a 97 13 f0       	push   $0xf013975a
f011d604:	e8 a7 2b fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011d609:	e8 b8 f3 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011d60e:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011d611:	3d 00 01 00 00       	cmp    $0x100,%eax
f011d616:	74 17                	je     f011d62f <test_kmalloc_firstfit1+0xf7c>
f011d618:	83 ec 04             	sub    $0x4,%esp
f011d61b:	68 b7 9b 13 f0       	push   $0xf0139bb7
f011d620:	68 76 03 00 00       	push   $0x376
f011d625:	68 5a 97 13 f0       	push   $0xf013975a
f011d62a:	e8 81 2b fe ff       	call   f01001b0 <_panic>

	//[5] Allocate again [test first fit]
	{
		//[FIRST FIT Case]
		//Allocate 1 MB - should be placed in the contiguous hole (256 KB + 2 MB)
		freeFrames = sys_calculate_free_frames() ;
f011d62f:	e8 92 f3 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011d634:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d637:	e8 48 70 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011d63c:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[13] = kmalloc(1*Mega);
f011d63f:	83 ec 0c             	sub    $0xc,%esp
f011d642:	68 00 00 10 00       	push   $0x100000
f011d647:	e8 13 a9 fe ff       	call   f0107f5f <kmalloc>
f011d64c:	83 c4 10             	add    $0x10,%esp
f011d64f:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
		if ((uint32) ptr_allocations[13] != (ACTUAL_START + 1*Mega + 768*kilo)) panic("Wrong start address for the allocated space... ");
f011d655:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011d65b:	89 c1                	mov    %eax,%ecx
f011d65d:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f011d664:	10 00 00 
f011d667:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011d66c:	0f b6 d0             	movzbl %al,%edx
f011d66f:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011d675:	01 d0                	add    %edx,%eax
f011d677:	48                   	dec    %eax
f011d678:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f011d67e:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011d684:	ba 00 00 00 00       	mov    $0x0,%edx
f011d689:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f011d68f:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011d695:	29 d0                	sub    %edx,%eax
f011d697:	89 c3                	mov    %eax,%ebx
f011d699:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011d6a0:	10 00 00 
f011d6a3:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011d6a8:	0f b6 c0             	movzbl %al,%eax
f011d6ab:	c1 e0 04             	shl    $0x4,%eax
f011d6ae:	89 c2                	mov    %eax,%edx
f011d6b0:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011d6b6:	01 d0                	add    %edx,%eax
f011d6b8:	48                   	dec    %eax
f011d6b9:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011d6bf:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011d6c5:	ba 00 00 00 00       	mov    $0x0,%edx
f011d6ca:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011d6d0:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011d6d6:	29 d0                	sub    %edx,%eax
f011d6d8:	01 d8                	add    %ebx,%eax
f011d6da:	2d 00 c0 e3 09       	sub    $0x9e3c000,%eax
f011d6df:	39 c1                	cmp    %eax,%ecx
f011d6e1:	74 17                	je     f011d6fa <test_kmalloc_firstfit1+0x1047>
f011d6e3:	83 ec 04             	sub    $0x4,%esp
f011d6e6:	68 74 9b 13 f0       	push   $0xf0139b74
f011d6eb:	68 80 03 00 00       	push   $0x380
f011d6f0:	68 5a 97 13 f0       	push   $0xf013975a
f011d6f5:	e8 b6 2a fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d6fa:	e8 85 6f fe ff       	call   f0104684 <pf_calculate_free_frames>
f011d6ff:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d702:	74 17                	je     f011d71b <test_kmalloc_firstfit1+0x1068>
f011d704:	83 ec 04             	sub    $0x4,%esp
f011d707:	68 74 97 13 f0       	push   $0xf0139774
f011d70c:	68 81 03 00 00       	push   $0x381
f011d711:	68 5a 97 13 f0       	push   $0xf013975a
f011d716:	e8 95 2a fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011d71b:	e8 a6 f2 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011d720:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d723:	29 c2                	sub    %eax,%edx
f011d725:	89 d0                	mov    %edx,%eax
f011d727:	3d 00 01 00 00       	cmp    $0x100,%eax
f011d72c:	74 17                	je     f011d745 <test_kmalloc_firstfit1+0x1092>
f011d72e:	83 ec 04             	sub    $0x4,%esp
f011d731:	68 a4 9b 13 f0       	push   $0xf0139ba4
f011d736:	68 82 03 00 00       	push   $0x382
f011d73b:	68 5a 97 13 f0       	push   $0xf013975a
f011d740:	e8 6b 2a fe ff       	call   f01001b0 <_panic>
	}

	cprintf("Congratulations!! test FIRST FIT allocation (1) completed successfully.\n");
f011d745:	83 ec 0c             	sub    $0xc,%esp
f011d748:	68 50 9d 13 f0       	push   $0xf0139d50
f011d74d:	e8 df 36 fe ff       	call   f0100e31 <cprintf>
f011d752:	83 c4 10             	add    $0x10,%esp

	return 1;
f011d755:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011d75a:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011d75d:	5b                   	pop    %ebx
f011d75e:	5f                   	pop    %edi
f011d75f:	5d                   	pop    %ebp
f011d760:	c3                   	ret    

f011d761 <test_kmalloc_firstfit2>:

int test_kmalloc_firstfit2()
{
f011d761:	55                   	push   %ebp
f011d762:	89 e5                	mov    %esp,%ebp
f011d764:	57                   	push   %edi
f011d765:	53                   	push   %ebx
f011d766:	81 ec 10 01 00 00    	sub    $0x110,%esp
	cprintf("==============================================\n");
f011d76c:	83 ec 0c             	sub    $0xc,%esp
f011d76f:	68 9c 96 13 f0       	push   $0xf013969c
f011d774:	e8 b8 36 fe ff       	call   f0100e31 <cprintf>
f011d779:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011d77c:	83 ec 0c             	sub    $0xc,%esp
f011d77f:	68 cc 96 13 f0       	push   $0xf01396cc
f011d784:	e8 a8 36 fe ff       	call   f0100e31 <cprintf>
f011d789:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011d78c:	83 ec 0c             	sub    $0xc,%esp
f011d78f:	68 9c 96 13 f0       	push   $0xf013969c
f011d794:	e8 98 36 fe ff       	call   f0100e31 <cprintf>
f011d799:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011d79c:	8d 95 f0 fe ff ff    	lea    -0x110(%ebp),%edx
f011d7a2:	b9 14 00 00 00       	mov    $0x14,%ecx
f011d7a7:	b8 00 00 00 00       	mov    $0x0,%eax
f011d7ac:	89 d7                	mov    %edx,%edi
f011d7ae:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeFrames;
	uint32 freeDiskFrames;

	//[1] Attempt to allocate more than heap size
	{
		ptr_allocations[0] = kmalloc(KERNEL_HEAP_MAX - ACTUAL_START + 1);
f011d7b0:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
f011d7b7:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011d7bc:	0f b6 d0             	movzbl %al,%edx
f011d7bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011d7c2:	01 d0                	add    %edx,%eax
f011d7c4:	48                   	dec    %eax
f011d7c5:	89 45 f0             	mov    %eax,-0x10(%ebp)
f011d7c8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011d7cb:	ba 00 00 00 00       	mov    $0x0,%edx
f011d7d0:	f7 75 f4             	divl   -0xc(%ebp)
f011d7d3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011d7d6:	29 d0                	sub    %edx,%eax
f011d7d8:	89 c1                	mov    %eax,%ecx
f011d7da:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f011d7e1:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011d7e6:	0f b6 c0             	movzbl %al,%eax
f011d7e9:	c1 e0 04             	shl    $0x4,%eax
f011d7ec:	89 c2                	mov    %eax,%edx
f011d7ee:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011d7f1:	01 d0                	add    %edx,%eax
f011d7f3:	48                   	dec    %eax
f011d7f4:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011d7f7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011d7fa:	ba 00 00 00 00       	mov    $0x0,%edx
f011d7ff:	f7 75 ec             	divl   -0x14(%ebp)
f011d802:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011d805:	29 d0                	sub    %edx,%eax
f011d807:	01 c8                	add    %ecx,%eax
f011d809:	ba 01 b0 ff 09       	mov    $0x9ffb001,%edx
f011d80e:	29 c2                	sub    %eax,%edx
f011d810:	89 d0                	mov    %edx,%eax
f011d812:	83 ec 0c             	sub    $0xc,%esp
f011d815:	50                   	push   %eax
f011d816:	e8 44 a7 fe ff       	call   f0107f5f <kmalloc>
f011d81b:	83 c4 10             	add    $0x10,%esp
f011d81e:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		if (ptr_allocations[0] != NULL) panic("kmalloc: Attempt to allocate more than heap size, should return NULL");
f011d824:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011d82a:	85 c0                	test   %eax,%eax
f011d82c:	74 17                	je     f011d845 <test_kmalloc_firstfit2+0xe4>
f011d82e:	83 ec 04             	sub    $0x4,%esp
f011d831:	68 9c 9d 13 f0       	push   $0xf0139d9c
f011d836:	68 97 03 00 00       	push   $0x397
f011d83b:	68 5a 97 13 f0       	push   $0xf013975a
f011d840:	e8 6b 29 fe ff       	call   f01001b0 <_panic>

	//[2] Attempt to allocate space more than any available fragment
	//	a) Create Fragments
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011d845:	e8 7c f1 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011d84a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d84d:	e8 32 6e fe ff       	call   f0104684 <pf_calculate_free_frames>
f011d852:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f011d855:	83 ec 0c             	sub    $0xc,%esp
f011d858:	68 00 fc 1f 00       	push   $0x1ffc00
f011d85d:	e8 fd a6 fe ff       	call   f0107f5f <kmalloc>
f011d862:	83 c4 10             	add    $0x10,%esp
f011d865:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011d86b:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011d871:	89 c1                	mov    %eax,%ecx
f011d873:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f011d87a:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011d87f:	0f b6 d0             	movzbl %al,%edx
f011d882:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011d885:	01 d0                	add    %edx,%eax
f011d887:	48                   	dec    %eax
f011d888:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011d88b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011d88e:	ba 00 00 00 00       	mov    $0x0,%edx
f011d893:	f7 75 dc             	divl   -0x24(%ebp)
f011d896:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011d899:	29 d0                	sub    %edx,%eax
f011d89b:	89 c3                	mov    %eax,%ebx
f011d89d:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011d8a4:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011d8a9:	0f b6 c0             	movzbl %al,%eax
f011d8ac:	c1 e0 04             	shl    $0x4,%eax
f011d8af:	89 c2                	mov    %eax,%edx
f011d8b1:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011d8b4:	01 d0                	add    %edx,%eax
f011d8b6:	48                   	dec    %eax
f011d8b7:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011d8ba:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011d8bd:	ba 00 00 00 00       	mov    $0x0,%edx
f011d8c2:	f7 75 d4             	divl   -0x2c(%ebp)
f011d8c5:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011d8c8:	29 d0                	sub    %edx,%eax
f011d8ca:	01 d8                	add    %ebx,%eax
f011d8cc:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011d8d1:	39 c1                	cmp    %eax,%ecx
f011d8d3:	74 17                	je     f011d8ec <test_kmalloc_firstfit2+0x18b>
f011d8d5:	83 ec 04             	sub    $0x4,%esp
f011d8d8:	68 74 9b 13 f0       	push   $0xf0139b74
f011d8dd:	68 a1 03 00 00       	push   $0x3a1
f011d8e2:	68 5a 97 13 f0       	push   $0xf013975a
f011d8e7:	e8 c4 28 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d8ec:	e8 93 6d fe ff       	call   f0104684 <pf_calculate_free_frames>
f011d8f1:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011d8f4:	74 17                	je     f011d90d <test_kmalloc_firstfit2+0x1ac>
f011d8f6:	83 ec 04             	sub    $0x4,%esp
f011d8f9:	68 74 97 13 f0       	push   $0xf0139774
f011d8fe:	68 a2 03 00 00       	push   $0x3a2
f011d903:	68 5a 97 13 f0       	push   $0xf013975a
f011d908:	e8 a3 28 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011d90d:	e8 b4 f0 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011d912:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011d915:	29 c2                	sub    %eax,%edx
f011d917:	89 d0                	mov    %edx,%eax
f011d919:	3d 00 02 00 00       	cmp    $0x200,%eax
f011d91e:	74 17                	je     f011d937 <test_kmalloc_firstfit2+0x1d6>
f011d920:	83 ec 04             	sub    $0x4,%esp
f011d923:	68 a4 9b 13 f0       	push   $0xf0139ba4
f011d928:	68 a3 03 00 00       	push   $0x3a3
f011d92d:	68 5a 97 13 f0       	push   $0xf013975a
f011d932:	e8 79 28 fe ff       	call   f01001b0 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011d937:	e8 8a f0 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011d93c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d93f:	e8 40 6d fe ff       	call   f0104684 <pf_calculate_free_frames>
f011d944:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f011d947:	83 ec 0c             	sub    $0xc,%esp
f011d94a:	68 00 fc 1f 00       	push   $0x1ffc00
f011d94f:	e8 0b a6 fe ff       	call   f0107f5f <kmalloc>
f011d954:	83 c4 10             	add    $0x10,%esp
f011d957:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... ");
f011d95d:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011d963:	89 c1                	mov    %eax,%ecx
f011d965:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011d96c:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011d971:	0f b6 d0             	movzbl %al,%edx
f011d974:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011d977:	01 d0                	add    %edx,%eax
f011d979:	48                   	dec    %eax
f011d97a:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011d97d:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011d980:	ba 00 00 00 00       	mov    $0x0,%edx
f011d985:	f7 75 cc             	divl   -0x34(%ebp)
f011d988:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011d98b:	29 d0                	sub    %edx,%eax
f011d98d:	89 c3                	mov    %eax,%ebx
f011d98f:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011d996:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011d99b:	0f b6 c0             	movzbl %al,%eax
f011d99e:	c1 e0 04             	shl    $0x4,%eax
f011d9a1:	89 c2                	mov    %eax,%edx
f011d9a3:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011d9a6:	01 d0                	add    %edx,%eax
f011d9a8:	48                   	dec    %eax
f011d9a9:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011d9ac:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011d9af:	ba 00 00 00 00       	mov    $0x0,%edx
f011d9b4:	f7 75 c4             	divl   -0x3c(%ebp)
f011d9b7:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011d9ba:	29 d0                	sub    %edx,%eax
f011d9bc:	01 d8                	add    %ebx,%eax
f011d9be:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011d9c3:	39 c1                	cmp    %eax,%ecx
f011d9c5:	74 17                	je     f011d9de <test_kmalloc_firstfit2+0x27d>
f011d9c7:	83 ec 04             	sub    $0x4,%esp
f011d9ca:	68 74 9b 13 f0       	push   $0xf0139b74
f011d9cf:	68 a9 03 00 00       	push   $0x3a9
f011d9d4:	68 5a 97 13 f0       	push   $0xf013975a
f011d9d9:	e8 d2 27 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d9de:	e8 a1 6c fe ff       	call   f0104684 <pf_calculate_free_frames>
f011d9e3:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011d9e6:	74 17                	je     f011d9ff <test_kmalloc_firstfit2+0x29e>
f011d9e8:	83 ec 04             	sub    $0x4,%esp
f011d9eb:	68 74 97 13 f0       	push   $0xf0139774
f011d9f0:	68 aa 03 00 00       	push   $0x3aa
f011d9f5:	68 5a 97 13 f0       	push   $0xf013975a
f011d9fa:	e8 b1 27 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011d9ff:	e8 c2 ef fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011da04:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011da07:	29 c2                	sub    %eax,%edx
f011da09:	89 d0                	mov    %edx,%eax
f011da0b:	3d 00 02 00 00       	cmp    $0x200,%eax
f011da10:	74 17                	je     f011da29 <test_kmalloc_firstfit2+0x2c8>
f011da12:	83 ec 04             	sub    $0x4,%esp
f011da15:	68 a4 9b 13 f0       	push   $0xf0139ba4
f011da1a:	68 ab 03 00 00       	push   $0x3ab
f011da1f:	68 5a 97 13 f0       	push   $0xf013975a
f011da24:	e8 87 27 fe ff       	call   f01001b0 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011da29:	e8 98 ef fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011da2e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011da31:	e8 4e 6c fe ff       	call   f0104684 <pf_calculate_free_frames>
f011da36:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f011da39:	83 ec 0c             	sub    $0xc,%esp
f011da3c:	68 00 08 00 00       	push   $0x800
f011da41:	e8 19 a5 fe ff       	call   f0107f5f <kmalloc>
f011da46:	83 c4 10             	add    $0x10,%esp
f011da49:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
		if ((uint32) ptr_allocations[2] < (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011da4f:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011da55:	89 c1                	mov    %eax,%ecx
f011da57:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011da5e:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011da63:	0f b6 d0             	movzbl %al,%edx
f011da66:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011da69:	01 d0                	add    %edx,%eax
f011da6b:	48                   	dec    %eax
f011da6c:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011da6f:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011da72:	ba 00 00 00 00       	mov    $0x0,%edx
f011da77:	f7 75 bc             	divl   -0x44(%ebp)
f011da7a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011da7d:	29 d0                	sub    %edx,%eax
f011da7f:	89 c3                	mov    %eax,%ebx
f011da81:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011da88:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011da8d:	0f b6 c0             	movzbl %al,%eax
f011da90:	c1 e0 04             	shl    $0x4,%eax
f011da93:	89 c2                	mov    %eax,%edx
f011da95:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011da98:	01 d0                	add    %edx,%eax
f011da9a:	48                   	dec    %eax
f011da9b:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011da9e:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011daa1:	ba 00 00 00 00       	mov    $0x0,%edx
f011daa6:	f7 75 b4             	divl   -0x4c(%ebp)
f011daa9:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011daac:	29 d0                	sub    %edx,%eax
f011daae:	01 d8                	add    %ebx,%eax
f011dab0:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011dab5:	39 c1                	cmp    %eax,%ecx
f011dab7:	73 17                	jae    f011dad0 <test_kmalloc_firstfit2+0x36f>
f011dab9:	83 ec 04             	sub    $0x4,%esp
f011dabc:	68 74 9b 13 f0       	push   $0xf0139b74
f011dac1:	68 b1 03 00 00       	push   $0x3b1
f011dac6:	68 5a 97 13 f0       	push   $0xf013975a
f011dacb:	e8 e0 26 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011dad0:	e8 af 6b fe ff       	call   f0104684 <pf_calculate_free_frames>
f011dad5:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011dad8:	74 17                	je     f011daf1 <test_kmalloc_firstfit2+0x390>
f011dada:	83 ec 04             	sub    $0x4,%esp
f011dadd:	68 74 97 13 f0       	push   $0xf0139774
f011dae2:	68 b2 03 00 00       	push   $0x3b2
f011dae7:	68 5a 97 13 f0       	push   $0xf013975a
f011daec:	e8 bf 26 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: ");
f011daf1:	e8 d0 ee fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011daf6:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011daf9:	29 c2                	sub    %eax,%edx
f011dafb:	89 d0                	mov    %edx,%eax
f011dafd:	83 f8 01             	cmp    $0x1,%eax
f011db00:	74 17                	je     f011db19 <test_kmalloc_firstfit2+0x3b8>
f011db02:	83 ec 04             	sub    $0x4,%esp
f011db05:	68 a4 9b 13 f0       	push   $0xf0139ba4
f011db0a:	68 b3 03 00 00       	push   $0x3b3
f011db0f:	68 5a 97 13 f0       	push   $0xf013975a
f011db14:	e8 97 26 fe ff       	call   f01001b0 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011db19:	e8 a8 ee fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011db1e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011db21:	e8 5e 6b fe ff       	call   f0104684 <pf_calculate_free_frames>
f011db26:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f011db29:	83 ec 0c             	sub    $0xc,%esp
f011db2c:	68 00 08 00 00       	push   $0x800
f011db31:	e8 29 a4 fe ff       	call   f0107f5f <kmalloc>
f011db36:	83 c4 10             	add    $0x10,%esp
f011db39:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... ");
f011db3f:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011db45:	89 c1                	mov    %eax,%ecx
f011db47:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011db4e:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011db53:	0f b6 d0             	movzbl %al,%edx
f011db56:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011db59:	01 d0                	add    %edx,%eax
f011db5b:	48                   	dec    %eax
f011db5c:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011db5f:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011db62:	ba 00 00 00 00       	mov    $0x0,%edx
f011db67:	f7 75 ac             	divl   -0x54(%ebp)
f011db6a:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011db6d:	29 d0                	sub    %edx,%eax
f011db6f:	89 c3                	mov    %eax,%ebx
f011db71:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011db78:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011db7d:	0f b6 c0             	movzbl %al,%eax
f011db80:	c1 e0 04             	shl    $0x4,%eax
f011db83:	89 c2                	mov    %eax,%edx
f011db85:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011db88:	01 d0                	add    %edx,%eax
f011db8a:	48                   	dec    %eax
f011db8b:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011db8e:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011db91:	ba 00 00 00 00       	mov    $0x0,%edx
f011db96:	f7 75 a4             	divl   -0x5c(%ebp)
f011db99:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011db9c:	29 d0                	sub    %edx,%eax
f011db9e:	01 d8                	add    %ebx,%eax
f011dba0:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f011dba5:	39 c1                	cmp    %eax,%ecx
f011dba7:	74 17                	je     f011dbc0 <test_kmalloc_firstfit2+0x45f>
f011dba9:	83 ec 04             	sub    $0x4,%esp
f011dbac:	68 74 9b 13 f0       	push   $0xf0139b74
f011dbb1:	68 b9 03 00 00       	push   $0x3b9
f011dbb6:	68 5a 97 13 f0       	push   $0xf013975a
f011dbbb:	e8 f0 25 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011dbc0:	e8 bf 6a fe ff       	call   f0104684 <pf_calculate_free_frames>
f011dbc5:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011dbc8:	74 17                	je     f011dbe1 <test_kmalloc_firstfit2+0x480>
f011dbca:	83 ec 04             	sub    $0x4,%esp
f011dbcd:	68 74 97 13 f0       	push   $0xf0139774
f011dbd2:	68 ba 03 00 00       	push   $0x3ba
f011dbd7:	68 5a 97 13 f0       	push   $0xf013975a
f011dbdc:	e8 cf 25 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: ");
f011dbe1:	e8 e0 ed fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011dbe6:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011dbe9:	29 c2                	sub    %eax,%edx
f011dbeb:	89 d0                	mov    %edx,%eax
f011dbed:	83 f8 01             	cmp    $0x1,%eax
f011dbf0:	74 17                	je     f011dc09 <test_kmalloc_firstfit2+0x4a8>
f011dbf2:	83 ec 04             	sub    $0x4,%esp
f011dbf5:	68 a4 9b 13 f0       	push   $0xf0139ba4
f011dbfa:	68 bb 03 00 00       	push   $0x3bb
f011dbff:	68 5a 97 13 f0       	push   $0xf013975a
f011dc04:	e8 a7 25 fe ff       	call   f01001b0 <_panic>

		//4 KB Hole
		freeFrames = sys_calculate_free_frames() ;
f011dc09:	e8 b8 ed fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011dc0e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011dc11:	e8 6e 6a fe ff       	call   f0104684 <pf_calculate_free_frames>
f011dc16:	89 45 e0             	mov    %eax,-0x20(%ebp)
		kfree(ptr_allocations[2]);
f011dc19:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011dc1f:	83 ec 0c             	sub    $0xc,%esp
f011dc22:	50                   	push   %eax
f011dc23:	e8 51 a3 fe ff       	call   f0107f79 <kfree>
f011dc28:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011dc2b:	e8 54 6a fe ff       	call   f0104684 <pf_calculate_free_frames>
f011dc30:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011dc33:	74 17                	je     f011dc4c <test_kmalloc_firstfit2+0x4eb>
f011dc35:	83 ec 04             	sub    $0x4,%esp
f011dc38:	68 74 97 13 f0       	push   $0xf0139774
f011dc3d:	68 c1 03 00 00       	push   $0x3c1
f011dc42:	68 5a 97 13 f0       	push   $0xf013975a
f011dc47:	e8 64 25 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong free: ");
f011dc4c:	e8 75 ed fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011dc51:	2b 45 e4             	sub    -0x1c(%ebp),%eax
f011dc54:	83 f8 01             	cmp    $0x1,%eax
f011dc57:	74 17                	je     f011dc70 <test_kmalloc_firstfit2+0x50f>
f011dc59:	83 ec 04             	sub    $0x4,%esp
f011dc5c:	68 b7 9b 13 f0       	push   $0xf0139bb7
f011dc61:	68 c2 03 00 00       	push   $0x3c2
f011dc66:	68 5a 97 13 f0       	push   $0xf013975a
f011dc6b:	e8 40 25 fe ff       	call   f01001b0 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f011dc70:	e8 51 ed fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011dc75:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011dc78:	e8 07 6a fe ff       	call   f0104684 <pf_calculate_free_frames>
f011dc7d:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f011dc80:	83 ec 0c             	sub    $0xc,%esp
f011dc83:	68 00 1c 00 00       	push   $0x1c00
f011dc88:	e8 d2 a2 fe ff       	call   f0107f5f <kmalloc>
f011dc8d:	83 c4 10             	add    $0x10,%esp
f011dc90:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... ");
f011dc96:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011dc9c:	89 c1                	mov    %eax,%ecx
f011dc9e:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011dca5:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011dcaa:	0f b6 d0             	movzbl %al,%edx
f011dcad:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011dcb0:	01 d0                	add    %edx,%eax
f011dcb2:	48                   	dec    %eax
f011dcb3:	89 45 98             	mov    %eax,-0x68(%ebp)
f011dcb6:	8b 45 98             	mov    -0x68(%ebp),%eax
f011dcb9:	ba 00 00 00 00       	mov    $0x0,%edx
f011dcbe:	f7 75 9c             	divl   -0x64(%ebp)
f011dcc1:	8b 45 98             	mov    -0x68(%ebp),%eax
f011dcc4:	29 d0                	sub    %edx,%eax
f011dcc6:	89 c3                	mov    %eax,%ebx
f011dcc8:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011dccf:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011dcd4:	0f b6 c0             	movzbl %al,%eax
f011dcd7:	c1 e0 04             	shl    $0x4,%eax
f011dcda:	89 c2                	mov    %eax,%edx
f011dcdc:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011dcdf:	01 d0                	add    %edx,%eax
f011dce1:	48                   	dec    %eax
f011dce2:	89 45 90             	mov    %eax,-0x70(%ebp)
f011dce5:	8b 45 90             	mov    -0x70(%ebp),%eax
f011dce8:	ba 00 00 00 00       	mov    $0x0,%edx
f011dced:	f7 75 94             	divl   -0x6c(%ebp)
f011dcf0:	8b 45 90             	mov    -0x70(%ebp),%eax
f011dcf3:	29 d0                	sub    %edx,%eax
f011dcf5:	01 d8                	add    %ebx,%eax
f011dcf7:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f011dcfc:	39 c1                	cmp    %eax,%ecx
f011dcfe:	74 17                	je     f011dd17 <test_kmalloc_firstfit2+0x5b6>
f011dd00:	83 ec 04             	sub    $0x4,%esp
f011dd03:	68 74 9b 13 f0       	push   $0xf0139b74
f011dd08:	68 c8 03 00 00       	push   $0x3c8
f011dd0d:	68 5a 97 13 f0       	push   $0xf013975a
f011dd12:	e8 99 24 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011dd17:	e8 68 69 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011dd1c:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011dd1f:	74 17                	je     f011dd38 <test_kmalloc_firstfit2+0x5d7>
f011dd21:	83 ec 04             	sub    $0x4,%esp
f011dd24:	68 74 97 13 f0       	push   $0xf0139774
f011dd29:	68 c9 03 00 00       	push   $0x3c9
f011dd2e:	68 5a 97 13 f0       	push   $0xf013975a
f011dd33:	e8 78 24 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: ");
f011dd38:	e8 89 ec fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011dd3d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011dd40:	29 c2                	sub    %eax,%edx
f011dd42:	89 d0                	mov    %edx,%eax
f011dd44:	83 f8 02             	cmp    $0x2,%eax
f011dd47:	74 17                	je     f011dd60 <test_kmalloc_firstfit2+0x5ff>
f011dd49:	83 ec 04             	sub    $0x4,%esp
f011dd4c:	68 a4 9b 13 f0       	push   $0xf0139ba4
f011dd51:	68 ca 03 00 00       	push   $0x3ca
f011dd56:	68 5a 97 13 f0       	push   $0xf013975a
f011dd5b:	e8 50 24 fe ff       	call   f01001b0 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011dd60:	e8 61 ec fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011dd65:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011dd68:	e8 17 69 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011dd6d:	89 45 e0             	mov    %eax,-0x20(%ebp)
		kfree(ptr_allocations[0]);
f011dd70:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011dd76:	83 ec 0c             	sub    $0xc,%esp
f011dd79:	50                   	push   %eax
f011dd7a:	e8 fa a1 fe ff       	call   f0107f79 <kfree>
f011dd7f:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011dd82:	e8 fd 68 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011dd87:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011dd8a:	74 17                	je     f011dda3 <test_kmalloc_firstfit2+0x642>
f011dd8c:	83 ec 04             	sub    $0x4,%esp
f011dd8f:	68 74 97 13 f0       	push   $0xf0139774
f011dd94:	68 d0 03 00 00       	push   $0x3d0
f011dd99:	68 5a 97 13 f0       	push   $0xf013975a
f011dd9e:	e8 0d 24 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: ");
f011dda3:	e8 1e ec fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011dda8:	2b 45 e4             	sub    -0x1c(%ebp),%eax
f011ddab:	3d 00 02 00 00       	cmp    $0x200,%eax
f011ddb0:	74 17                	je     f011ddc9 <test_kmalloc_firstfit2+0x668>
f011ddb2:	83 ec 04             	sub    $0x4,%esp
f011ddb5:	68 b7 9b 13 f0       	push   $0xf0139bb7
f011ddba:	68 d1 03 00 00       	push   $0x3d1
f011ddbf:	68 5a 97 13 f0       	push   $0xf013975a
f011ddc4:	e8 e7 23 fe ff       	call   f01001b0 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011ddc9:	e8 f8 eb fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011ddce:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ddd1:	e8 ae 68 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011ddd6:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f011ddd9:	83 ec 0c             	sub    $0xc,%esp
f011dddc:	68 00 fc 2f 00       	push   $0x2ffc00
f011dde1:	e8 79 a1 fe ff       	call   f0107f5f <kmalloc>
f011dde6:	83 c4 10             	add    $0x10,%esp
f011dde9:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011ddef:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011ddf5:	89 c1                	mov    %eax,%ecx
f011ddf7:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011ddfe:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011de03:	0f b6 d0             	movzbl %al,%edx
f011de06:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011de09:	01 d0                	add    %edx,%eax
f011de0b:	48                   	dec    %eax
f011de0c:	89 45 88             	mov    %eax,-0x78(%ebp)
f011de0f:	8b 45 88             	mov    -0x78(%ebp),%eax
f011de12:	ba 00 00 00 00       	mov    $0x0,%edx
f011de17:	f7 75 8c             	divl   -0x74(%ebp)
f011de1a:	8b 45 88             	mov    -0x78(%ebp),%eax
f011de1d:	29 d0                	sub    %edx,%eax
f011de1f:	89 c3                	mov    %eax,%ebx
f011de21:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011de28:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011de2d:	0f b6 c0             	movzbl %al,%eax
f011de30:	c1 e0 04             	shl    $0x4,%eax
f011de33:	89 c2                	mov    %eax,%edx
f011de35:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011de38:	01 d0                	add    %edx,%eax
f011de3a:	48                   	dec    %eax
f011de3b:	89 45 80             	mov    %eax,-0x80(%ebp)
f011de3e:	8b 45 80             	mov    -0x80(%ebp),%eax
f011de41:	ba 00 00 00 00       	mov    $0x0,%edx
f011de46:	f7 75 84             	divl   -0x7c(%ebp)
f011de49:	8b 45 80             	mov    -0x80(%ebp),%eax
f011de4c:	29 d0                	sub    %edx,%eax
f011de4e:	01 d8                	add    %ebx,%eax
f011de50:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f011de55:	39 c1                	cmp    %eax,%ecx
f011de57:	74 17                	je     f011de70 <test_kmalloc_firstfit2+0x70f>
f011de59:	83 ec 04             	sub    $0x4,%esp
f011de5c:	68 74 9b 13 f0       	push   $0xf0139b74
f011de61:	68 d7 03 00 00       	push   $0x3d7
f011de66:	68 5a 97 13 f0       	push   $0xf013975a
f011de6b:	e8 40 23 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011de70:	e8 0f 68 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011de75:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011de78:	74 17                	je     f011de91 <test_kmalloc_firstfit2+0x730>
f011de7a:	83 ec 04             	sub    $0x4,%esp
f011de7d:	68 74 97 13 f0       	push   $0xf0139774
f011de82:	68 d8 03 00 00       	push   $0x3d8
f011de87:	68 5a 97 13 f0       	push   $0xf013975a
f011de8c:	e8 1f 23 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  3*Mega/PAGE_SIZE) panic("Wrong allocation: ");
f011de91:	e8 30 eb fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011de96:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011de99:	29 c2                	sub    %eax,%edx
f011de9b:	89 d0                	mov    %edx,%eax
f011de9d:	3d 00 03 00 00       	cmp    $0x300,%eax
f011dea2:	74 17                	je     f011debb <test_kmalloc_firstfit2+0x75a>
f011dea4:	83 ec 04             	sub    $0x4,%esp
f011dea7:	68 a4 9b 13 f0       	push   $0xf0139ba4
f011deac:	68 d9 03 00 00       	push   $0x3d9
f011deb1:	68 5a 97 13 f0       	push   $0xf013975a
f011deb6:	e8 f5 22 fe ff       	call   f01001b0 <_panic>

		//2 MB + 6 KB
		freeFrames = sys_calculate_free_frames() ;
f011debb:	e8 06 eb fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011dec0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011dec3:	e8 bc 67 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011dec8:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[6] = kmalloc(2*Mega + 6*kilo);
f011decb:	83 ec 0c             	sub    $0xc,%esp
f011dece:	68 00 18 20 00       	push   $0x201800
f011ded3:	e8 87 a0 fe ff       	call   f0107f5f <kmalloc>
f011ded8:	83 c4 10             	add    $0x10,%esp
f011dedb:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011dee1:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011dee7:	89 c1                	mov    %eax,%ecx
f011dee9:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011def0:	10 00 00 
f011def3:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011def8:	0f b6 d0             	movzbl %al,%edx
f011defb:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011df01:	01 d0                	add    %edx,%eax
f011df03:	48                   	dec    %eax
f011df04:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011df0a:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011df10:	ba 00 00 00 00       	mov    $0x0,%edx
f011df15:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011df1b:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011df21:	29 d0                	sub    %edx,%eax
f011df23:	89 c3                	mov    %eax,%ebx
f011df25:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011df2c:	10 00 00 
f011df2f:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011df34:	0f b6 c0             	movzbl %al,%eax
f011df37:	c1 e0 04             	shl    $0x4,%eax
f011df3a:	89 c2                	mov    %eax,%edx
f011df3c:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011df42:	01 d0                	add    %edx,%eax
f011df44:	48                   	dec    %eax
f011df45:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011df4b:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011df51:	ba 00 00 00 00       	mov    $0x0,%edx
f011df56:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011df5c:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011df62:	29 d0                	sub    %edx,%eax
f011df64:	01 d8                	add    %ebx,%eax
f011df66:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f011df6b:	39 c1                	cmp    %eax,%ecx
f011df6d:	74 17                	je     f011df86 <test_kmalloc_firstfit2+0x825>
f011df6f:	83 ec 04             	sub    $0x4,%esp
f011df72:	68 74 9b 13 f0       	push   $0xf0139b74
f011df77:	68 df 03 00 00       	push   $0x3df
f011df7c:	68 5a 97 13 f0       	push   $0xf013975a
f011df81:	e8 2a 22 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011df86:	e8 f9 66 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011df8b:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011df8e:	74 17                	je     f011dfa7 <test_kmalloc_firstfit2+0x846>
f011df90:	83 ec 04             	sub    $0x4,%esp
f011df93:	68 74 97 13 f0       	push   $0xf0139774
f011df98:	68 e0 03 00 00       	push   $0x3e0
f011df9d:	68 5a 97 13 f0       	push   $0xf013975a
f011dfa2:	e8 09 22 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  514) panic("Wrong allocation: ");
f011dfa7:	e8 1a ea fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011dfac:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011dfaf:	29 c2                	sub    %eax,%edx
f011dfb1:	89 d0                	mov    %edx,%eax
f011dfb3:	3d 02 02 00 00       	cmp    $0x202,%eax
f011dfb8:	74 17                	je     f011dfd1 <test_kmalloc_firstfit2+0x870>
f011dfba:	83 ec 04             	sub    $0x4,%esp
f011dfbd:	68 a4 9b 13 f0       	push   $0xf0139ba4
f011dfc2:	68 e1 03 00 00       	push   $0x3e1
f011dfc7:	68 5a 97 13 f0       	push   $0xf013975a
f011dfcc:	e8 df 21 fe ff       	call   f01001b0 <_panic>

		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011dfd1:	e8 f0 e9 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011dfd6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011dfd9:	e8 a6 66 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011dfde:	89 45 e0             	mov    %eax,-0x20(%ebp)
		kfree(ptr_allocations[5]);
f011dfe1:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011dfe7:	83 ec 0c             	sub    $0xc,%esp
f011dfea:	50                   	push   %eax
f011dfeb:	e8 89 9f fe ff       	call   f0107f79 <kfree>
f011dff0:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011dff3:	e8 8c 66 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011dff8:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011dffb:	74 17                	je     f011e014 <test_kmalloc_firstfit2+0x8b3>
f011dffd:	83 ec 04             	sub    $0x4,%esp
f011e000:	68 74 97 13 f0       	push   $0xf0139774
f011e005:	68 e7 03 00 00       	push   $0x3e7
f011e00a:	68 5a 97 13 f0       	push   $0xf013975a
f011e00f:	e8 9c 21 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 768) panic("Wrong free: ");
f011e014:	e8 ad e9 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011e019:	2b 45 e4             	sub    -0x1c(%ebp),%eax
f011e01c:	3d 00 03 00 00       	cmp    $0x300,%eax
f011e021:	74 17                	je     f011e03a <test_kmalloc_firstfit2+0x8d9>
f011e023:	83 ec 04             	sub    $0x4,%esp
f011e026:	68 b7 9b 13 f0       	push   $0xf0139bb7
f011e02b:	68 e8 03 00 00       	push   $0x3e8
f011e030:	68 5a 97 13 f0       	push   $0xf013975a
f011e035:	e8 76 21 fe ff       	call   f01001b0 <_panic>

		//2 MB Hole [Resulting Hole = 2 MB + 2 MB + 4 KB = 4 MB + 4 KB]
		freeFrames = sys_calculate_free_frames() ;
f011e03a:	e8 87 e9 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011e03f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e042:	e8 3d 66 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011e047:	89 45 e0             	mov    %eax,-0x20(%ebp)
		kfree(ptr_allocations[1]);
f011e04a:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011e050:	83 ec 0c             	sub    $0xc,%esp
f011e053:	50                   	push   %eax
f011e054:	e8 20 9f fe ff       	call   f0107f79 <kfree>
f011e059:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: ");
f011e05c:	e8 65 e9 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011e061:	2b 45 e4             	sub    -0x1c(%ebp),%eax
f011e064:	3d 00 02 00 00       	cmp    $0x200,%eax
f011e069:	74 17                	je     f011e082 <test_kmalloc_firstfit2+0x921>
f011e06b:	83 ec 04             	sub    $0x4,%esp
f011e06e:	68 b7 9b 13 f0       	push   $0xf0139bb7
f011e073:	68 ee 03 00 00       	push   $0x3ee
f011e078:	68 5a 97 13 f0       	push   $0xf013975a
f011e07d:	e8 2e 21 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e082:	e8 fd 65 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011e087:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011e08a:	74 17                	je     f011e0a3 <test_kmalloc_firstfit2+0x942>
f011e08c:	83 ec 04             	sub    $0x4,%esp
f011e08f:	68 74 97 13 f0       	push   $0xf0139774
f011e094:	68 ef 03 00 00       	push   $0x3ef
f011e099:	68 5a 97 13 f0       	push   $0xf013975a
f011e09e:	e8 0d 21 fe ff       	call   f01001b0 <_panic>

		//5 MB
		freeFrames = sys_calculate_free_frames() ;
f011e0a3:	e8 1e e9 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011e0a8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e0ab:	e8 d4 65 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011e0b0:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[7] = kmalloc(5*Mega-kilo);
f011e0b3:	83 ec 0c             	sub    $0xc,%esp
f011e0b6:	68 00 fc 4f 00       	push   $0x4ffc00
f011e0bb:	e8 9f 9e fe ff       	call   f0107f5f <kmalloc>
f011e0c0:	83 c4 10             	add    $0x10,%esp
f011e0c3:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 9*Mega + 24*kilo)) panic("Wrong start address for the allocated space... ");
f011e0c9:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011e0cf:	89 c1                	mov    %eax,%ecx
f011e0d1:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011e0d8:	10 00 00 
f011e0db:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011e0e0:	0f b6 d0             	movzbl %al,%edx
f011e0e3:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011e0e9:	01 d0                	add    %edx,%eax
f011e0eb:	48                   	dec    %eax
f011e0ec:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011e0f2:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011e0f8:	ba 00 00 00 00       	mov    $0x0,%edx
f011e0fd:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011e103:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011e109:	29 d0                	sub    %edx,%eax
f011e10b:	89 c3                	mov    %eax,%ebx
f011e10d:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011e114:	10 00 00 
f011e117:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011e11c:	0f b6 c0             	movzbl %al,%eax
f011e11f:	c1 e0 04             	shl    $0x4,%eax
f011e122:	89 c2                	mov    %eax,%edx
f011e124:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011e12a:	01 d0                	add    %edx,%eax
f011e12c:	48                   	dec    %eax
f011e12d:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011e133:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011e139:	ba 00 00 00 00       	mov    $0x0,%edx
f011e13e:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011e144:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011e14a:	29 d0                	sub    %edx,%eax
f011e14c:	01 d8                	add    %ebx,%eax
f011e14e:	2d 00 60 6f 09       	sub    $0x96f6000,%eax
f011e153:	39 c1                	cmp    %eax,%ecx
f011e155:	74 17                	je     f011e16e <test_kmalloc_firstfit2+0xa0d>
f011e157:	83 ec 04             	sub    $0x4,%esp
f011e15a:	68 74 9b 13 f0       	push   $0xf0139b74
f011e15f:	68 f5 03 00 00       	push   $0x3f5
f011e164:	68 5a 97 13 f0       	push   $0xf013975a
f011e169:	e8 42 20 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e16e:	e8 11 65 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011e173:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011e176:	74 17                	je     f011e18f <test_kmalloc_firstfit2+0xa2e>
f011e178:	83 ec 04             	sub    $0x4,%esp
f011e17b:	68 74 97 13 f0       	push   $0xf0139774
f011e180:	68 f6 03 00 00       	push   $0x3f6
f011e185:	68 5a 97 13 f0       	push   $0xf013975a
f011e18a:	e8 21 20 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=   5*Mega/PAGE_SIZE) panic("Wrong allocation: ");
f011e18f:	e8 32 e8 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011e194:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011e197:	29 c2                	sub    %eax,%edx
f011e199:	89 d0                	mov    %edx,%eax
f011e19b:	3d 00 05 00 00       	cmp    $0x500,%eax
f011e1a0:	74 17                	je     f011e1b9 <test_kmalloc_firstfit2+0xa58>
f011e1a2:	83 ec 04             	sub    $0x4,%esp
f011e1a5:	68 a4 9b 13 f0       	push   $0xf0139ba4
f011e1aa:	68 f7 03 00 00       	push   $0x3f7
f011e1af:	68 5a 97 13 f0       	push   $0xf013975a
f011e1b4:	e8 f7 1f fe ff       	call   f01001b0 <_panic>
//		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
//		if ((sys_calculate_free_frames() - freeFrames) != 514) panic("Wrong free: ");

		//[FIRST FIT Case]
		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011e1b9:	e8 08 e8 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011e1be:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e1c1:	e8 be 64 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011e1c6:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[8] = kmalloc(3*Mega-kilo);
f011e1c9:	83 ec 0c             	sub    $0xc,%esp
f011e1cc:	68 00 fc 2f 00       	push   $0x2ffc00
f011e1d1:	e8 89 9d fe ff       	call   f0107f5f <kmalloc>
f011e1d6:	83 c4 10             	add    $0x10,%esp
f011e1d9:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011e1df:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011e1e5:	89 c1                	mov    %eax,%ecx
f011e1e7:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011e1ee:	10 00 00 
f011e1f1:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011e1f6:	0f b6 d0             	movzbl %al,%edx
f011e1f9:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011e1ff:	01 d0                	add    %edx,%eax
f011e201:	48                   	dec    %eax
f011e202:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011e208:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011e20e:	ba 00 00 00 00       	mov    $0x0,%edx
f011e213:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011e219:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011e21f:	29 d0                	sub    %edx,%eax
f011e221:	89 c3                	mov    %eax,%ebx
f011e223:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011e22a:	10 00 00 
f011e22d:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011e232:	0f b6 c0             	movzbl %al,%eax
f011e235:	c1 e0 04             	shl    $0x4,%eax
f011e238:	89 c2                	mov    %eax,%edx
f011e23a:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011e240:	01 d0                	add    %edx,%eax
f011e242:	48                   	dec    %eax
f011e243:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011e249:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011e24f:	ba 00 00 00 00       	mov    $0x0,%edx
f011e254:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011e25a:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011e260:	29 d0                	sub    %edx,%eax
f011e262:	01 d8                	add    %ebx,%eax
f011e264:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011e269:	39 c1                	cmp    %eax,%ecx
f011e26b:	74 17                	je     f011e284 <test_kmalloc_firstfit2+0xb23>
f011e26d:	83 ec 04             	sub    $0x4,%esp
f011e270:	68 74 9b 13 f0       	push   $0xf0139b74
f011e275:	68 05 04 00 00       	push   $0x405
f011e27a:	68 5a 97 13 f0       	push   $0xf013975a
f011e27f:	e8 2c 1f fe ff       	call   f01001b0 <_panic>
		if((freeDiskFrames - pf_calculate_free_frames()) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e284:	e8 fb 63 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011e289:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011e28c:	74 17                	je     f011e2a5 <test_kmalloc_firstfit2+0xb44>
f011e28e:	83 ec 04             	sub    $0x4,%esp
f011e291:	68 74 97 13 f0       	push   $0xf0139774
f011e296:	68 06 04 00 00       	push   $0x406
f011e29b:	68 5a 97 13 f0       	push   $0xf013975a
f011e2a0:	e8 0b 1f fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=   3*Mega/PAGE_SIZE) panic("Wrong allocation: ");
f011e2a5:	e8 1c e7 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011e2aa:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011e2ad:	29 c2                	sub    %eax,%edx
f011e2af:	89 d0                	mov    %edx,%eax
f011e2b1:	3d 00 03 00 00       	cmp    $0x300,%eax
f011e2b6:	74 17                	je     f011e2cf <test_kmalloc_firstfit2+0xb6e>
f011e2b8:	83 ec 04             	sub    $0x4,%esp
f011e2bb:	68 a4 9b 13 f0       	push   $0xf0139ba4
f011e2c0:	68 07 04 00 00       	push   $0x407
f011e2c5:	68 5a 97 13 f0       	push   $0xf013975a
f011e2ca:	e8 e1 1e fe ff       	call   f01001b0 <_panic>
	}
	//	b) Attempt to allocate large segment with no suitable fragment to fit on
	{
		//Large Allocation
		ptr_allocations[9] = kmalloc((KERNEL_HEAP_MAX - ACTUAL_START - 14*Mega));
f011e2cf:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011e2d6:	10 00 00 
f011e2d9:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011e2de:	0f b6 d0             	movzbl %al,%edx
f011e2e1:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011e2e7:	01 d0                	add    %edx,%eax
f011e2e9:	48                   	dec    %eax
f011e2ea:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011e2f0:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011e2f6:	ba 00 00 00 00       	mov    $0x0,%edx
f011e2fb:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011e301:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011e307:	29 d0                	sub    %edx,%eax
f011e309:	89 c1                	mov    %eax,%ecx
f011e30b:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011e312:	10 00 00 
f011e315:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011e31a:	0f b6 c0             	movzbl %al,%eax
f011e31d:	c1 e0 04             	shl    $0x4,%eax
f011e320:	89 c2                	mov    %eax,%edx
f011e322:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011e328:	01 d0                	add    %edx,%eax
f011e32a:	48                   	dec    %eax
f011e32b:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011e331:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011e337:	ba 00 00 00 00       	mov    $0x0,%edx
f011e33c:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011e342:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011e348:	29 d0                	sub    %edx,%eax
f011e34a:	01 c8                	add    %ecx,%eax
f011e34c:	ba 00 b0 1f 09       	mov    $0x91fb000,%edx
f011e351:	29 c2                	sub    %eax,%edx
f011e353:	89 d0                	mov    %edx,%eax
f011e355:	83 ec 0c             	sub    $0xc,%esp
f011e358:	50                   	push   %eax
f011e359:	e8 01 9c fe ff       	call   f0107f5f <kmalloc>
f011e35e:	83 c4 10             	add    $0x10,%esp
f011e361:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
		if (ptr_allocations[9] != NULL) panic("Kmalloc: Attempt to allocate large segment with no suitable fragment to fit on, should return NULL");
f011e367:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011e36d:	85 c0                	test   %eax,%eax
f011e36f:	74 17                	je     f011e388 <test_kmalloc_firstfit2+0xc27>
f011e371:	83 ec 04             	sub    $0x4,%esp
f011e374:	68 a4 9c 13 f0       	push   $0xf0139ca4
f011e379:	68 0d 04 00 00       	push   $0x40d
f011e37e:	68 5a 97 13 f0       	push   $0xf013975a
f011e383:	e8 28 1e fe ff       	call   f01001b0 <_panic>

		cprintf("Congratulations!! test FIRST FIT allocation (2) completed successfully.\n");
f011e388:	83 ec 0c             	sub    $0xc,%esp
f011e38b:	68 e4 9d 13 f0       	push   $0xf0139de4
f011e390:	e8 9c 2a fe ff       	call   f0100e31 <cprintf>
f011e395:	83 c4 10             	add    $0x10,%esp
	}
	return 1;
f011e398:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011e39d:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011e3a0:	5b                   	pop    %ebx
f011e3a1:	5f                   	pop    %edi
f011e3a2:	5d                   	pop    %ebp
f011e3a3:	c3                   	ret    

f011e3a4 <test_kmalloc_worstfit>:

int test_kmalloc_worstfit()
{
f011e3a4:	55                   	push   %ebp
f011e3a5:	89 e5                	mov    %esp,%ebp
f011e3a7:	57                   	push   %edi
f011e3a8:	53                   	push   %ebx
f011e3a9:	81 ec c0 03 00 00    	sub    $0x3c0,%esp
	cprintf("==============================================\n");
f011e3af:	83 ec 0c             	sub    $0xc,%esp
f011e3b2:	68 9c 96 13 f0       	push   $0xf013969c
f011e3b7:	e8 75 2a fe ff       	call   f0100e31 <cprintf>
f011e3bc:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011e3bf:	83 ec 0c             	sub    $0xc,%esp
f011e3c2:	68 cc 96 13 f0       	push   $0xf01396cc
f011e3c7:	e8 65 2a fe ff       	call   f0100e31 <cprintf>
f011e3cc:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011e3cf:	83 ec 0c             	sub    $0xc,%esp
f011e3d2:	68 9c 96 13 f0       	push   $0xf013969c
f011e3d7:	e8 55 2a fe ff       	call   f0100e31 <cprintf>
f011e3dc:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[160] = {0};
f011e3df:	8d 95 44 fc ff ff    	lea    -0x3bc(%ebp),%edx
f011e3e5:	b9 a0 00 00 00       	mov    $0xa0,%ecx
f011e3ea:	b8 00 00 00 00       	mov    $0x0,%eax
f011e3ef:	89 d7                	mov    %edx,%edi
f011e3f1:	f3 ab                	rep stos %eax,%es:(%edi)

	// allocate pages
	int freeFrames = sys_calculate_free_frames() ;
f011e3f3:	e8 ce e5 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011e3f8:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int freeDiskFrames = pf_calculate_free_frames() ;
f011e3fb:	e8 84 62 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011e400:	89 45 ec             	mov    %eax,-0x14(%ebp)

	int count = 0;
f011e403:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	int i;
	for(i = 0; i< 79 ;i++)
f011e40a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011e411:	eb 1f                	jmp    f011e432 <test_kmalloc_worstfit+0x8e>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
f011e413:	83 ec 0c             	sub    $0xc,%esp
f011e416:	68 00 00 20 00       	push   $0x200000
f011e41b:	e8 3f 9b fe ff       	call   f0107f5f <kmalloc>
f011e420:	83 c4 10             	add    $0x10,%esp
f011e423:	89 c2                	mov    %eax,%edx
f011e425:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011e428:	89 94 85 44 fc ff ff 	mov    %edx,-0x3bc(%ebp,%eax,4)
	int freeFrames = sys_calculate_free_frames() ;
	int freeDiskFrames = pf_calculate_free_frames() ;

	int count = 0;
	int i;
	for(i = 0; i< 79 ;i++)
f011e42f:	ff 45 f4             	incl   -0xc(%ebp)
f011e432:	83 7d f4 4e          	cmpl   $0x4e,-0xc(%ebp)
f011e436:	7e db                	jle    f011e413 <test_kmalloc_worstfit+0x6f>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);
f011e438:	83 ec 0c             	sub    $0xc,%esp
f011e43b:	68 00 b0 1f 00       	push   $0x1fb000
f011e440:	e8 1a 9b fe ff       	call   f0107f5f <kmalloc>
f011e445:	83 c4 10             	add    $0x10,%esp
f011e448:	89 85 80 fd ff ff    	mov    %eax,-0x280(%ebp)

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f011e44e:	8b 85 44 fc ff ff    	mov    -0x3bc(%ebp),%eax
f011e454:	89 c1                	mov    %eax,%ecx
f011e456:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011e45d:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011e462:	0f b6 d0             	movzbl %al,%edx
f011e465:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011e468:	01 d0                	add    %edx,%eax
f011e46a:	48                   	dec    %eax
f011e46b:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011e46e:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011e471:	ba 00 00 00 00       	mov    $0x0,%edx
f011e476:	f7 75 e4             	divl   -0x1c(%ebp)
f011e479:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011e47c:	29 d0                	sub    %edx,%eax
f011e47e:	89 c3                	mov    %eax,%ebx
f011e480:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f011e487:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011e48c:	0f b6 c0             	movzbl %al,%eax
f011e48f:	c1 e0 04             	shl    $0x4,%eax
f011e492:	89 c2                	mov    %eax,%edx
f011e494:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011e497:	01 d0                	add    %edx,%eax
f011e499:	48                   	dec    %eax
f011e49a:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011e49d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011e4a0:	ba 00 00 00 00       	mov    $0x0,%edx
f011e4a5:	f7 75 dc             	divl   -0x24(%ebp)
f011e4a8:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011e4ab:	29 d0                	sub    %edx,%eax
f011e4ad:	01 d8                	add    %ebx,%eax
f011e4af:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011e4b4:	39 c1                	cmp    %eax,%ecx
f011e4b6:	0f 85 34 03 00 00    	jne    f011e7f0 <test_kmalloc_worstfit+0x44c>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f011e4bc:	8b 85 4c fc ff ff    	mov    -0x3b4(%ebp),%eax
f011e4c2:	89 c1                	mov    %eax,%ecx
f011e4c4:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011e4cb:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011e4d0:	0f b6 d0             	movzbl %al,%edx
f011e4d3:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011e4d6:	01 d0                	add    %edx,%eax
f011e4d8:	48                   	dec    %eax
f011e4d9:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011e4dc:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011e4df:	ba 00 00 00 00       	mov    $0x0,%edx
f011e4e4:	f7 75 d4             	divl   -0x2c(%ebp)
f011e4e7:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011e4ea:	29 d0                	sub    %edx,%eax
f011e4ec:	89 c3                	mov    %eax,%ebx
f011e4ee:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011e4f5:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011e4fa:	0f b6 c0             	movzbl %al,%eax
f011e4fd:	c1 e0 04             	shl    $0x4,%eax
f011e500:	89 c2                	mov    %eax,%edx
f011e502:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011e505:	01 d0                	add    %edx,%eax
f011e507:	48                   	dec    %eax
f011e508:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011e50b:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011e50e:	ba 00 00 00 00       	mov    $0x0,%edx
f011e513:	f7 75 cc             	divl   -0x34(%ebp)
f011e516:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011e519:	29 d0                	sub    %edx,%eax
f011e51b:	01 d8                	add    %ebx,%eax
f011e51d:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
		ptr_allocations[i] = kmalloc(2*Mega);
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f011e522:	39 c1                	cmp    %eax,%ecx
f011e524:	0f 85 c6 02 00 00    	jne    f011e7f0 <test_kmalloc_worstfit+0x44c>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f011e52a:	8b 85 64 fc ff ff    	mov    -0x39c(%ebp),%eax
f011e530:	89 c1                	mov    %eax,%ecx
f011e532:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011e539:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011e53e:	0f b6 d0             	movzbl %al,%edx
f011e541:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011e544:	01 d0                	add    %edx,%eax
f011e546:	48                   	dec    %eax
f011e547:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011e54a:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011e54d:	ba 00 00 00 00       	mov    $0x0,%edx
f011e552:	f7 75 c4             	divl   -0x3c(%ebp)
f011e555:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011e558:	29 d0                	sub    %edx,%eax
f011e55a:	89 c3                	mov    %eax,%ebx
f011e55c:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011e563:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011e568:	0f b6 c0             	movzbl %al,%eax
f011e56b:	c1 e0 04             	shl    $0x4,%eax
f011e56e:	89 c2                	mov    %eax,%edx
f011e570:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011e573:	01 d0                	add    %edx,%eax
f011e575:	48                   	dec    %eax
f011e576:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011e579:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011e57c:	ba 00 00 00 00       	mov    $0x0,%edx
f011e581:	f7 75 bc             	divl   -0x44(%ebp)
f011e584:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011e587:	29 d0                	sub    %edx,%eax
f011e589:	01 d8                	add    %ebx,%eax
f011e58b:	2d 00 c0 ff 08       	sub    $0x8ffc000,%eax
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f011e590:	39 c1                	cmp    %eax,%ecx
f011e592:	0f 85 58 02 00 00    	jne    f011e7f0 <test_kmalloc_worstfit+0x44c>
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f011e598:	8b 85 6c fc ff ff    	mov    -0x394(%ebp),%eax
f011e59e:	89 c1                	mov    %eax,%ecx
f011e5a0:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011e5a7:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011e5ac:	0f b6 d0             	movzbl %al,%edx
f011e5af:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011e5b2:	01 d0                	add    %edx,%eax
f011e5b4:	48                   	dec    %eax
f011e5b5:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011e5b8:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011e5bb:	ba 00 00 00 00       	mov    $0x0,%edx
f011e5c0:	f7 75 b4             	divl   -0x4c(%ebp)
f011e5c3:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011e5c6:	29 d0                	sub    %edx,%eax
f011e5c8:	89 c3                	mov    %eax,%ebx
f011e5ca:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011e5d1:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011e5d6:	0f b6 c0             	movzbl %al,%eax
f011e5d9:	c1 e0 04             	shl    $0x4,%eax
f011e5dc:	89 c2                	mov    %eax,%edx
f011e5de:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011e5e1:	01 d0                	add    %edx,%eax
f011e5e3:	48                   	dec    %eax
f011e5e4:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011e5e7:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011e5ea:	ba 00 00 00 00       	mov    $0x0,%edx
f011e5ef:	f7 75 ac             	divl   -0x54(%ebp)
f011e5f2:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011e5f5:	29 d0                	sub    %edx,%eax
f011e5f7:	01 d8                	add    %ebx,%eax
f011e5f9:	2d 00 c0 bf 08       	sub    $0x8bfc000,%eax
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f011e5fe:	39 c1                	cmp    %eax,%ecx
f011e600:	0f 85 ea 01 00 00    	jne    f011e7f0 <test_kmalloc_worstfit+0x44c>
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f011e606:	8b 85 80 fc ff ff    	mov    -0x380(%ebp),%eax
f011e60c:	89 c1                	mov    %eax,%ecx
f011e60e:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011e615:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011e61a:	0f b6 d0             	movzbl %al,%edx
f011e61d:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011e620:	01 d0                	add    %edx,%eax
f011e622:	48                   	dec    %eax
f011e623:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011e626:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011e629:	ba 00 00 00 00       	mov    $0x0,%edx
f011e62e:	f7 75 a4             	divl   -0x5c(%ebp)
f011e631:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011e634:	29 d0                	sub    %edx,%eax
f011e636:	89 c3                	mov    %eax,%ebx
f011e638:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011e63f:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011e644:	0f b6 c0             	movzbl %al,%eax
f011e647:	c1 e0 04             	shl    $0x4,%eax
f011e64a:	89 c2                	mov    %eax,%edx
f011e64c:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011e64f:	01 d0                	add    %edx,%eax
f011e651:	48                   	dec    %eax
f011e652:	89 45 98             	mov    %eax,-0x68(%ebp)
f011e655:	8b 45 98             	mov    -0x68(%ebp),%eax
f011e658:	ba 00 00 00 00       	mov    $0x0,%edx
f011e65d:	f7 75 9c             	divl   -0x64(%ebp)
f011e660:	8b 45 98             	mov    -0x68(%ebp),%eax
f011e663:	29 d0                	sub    %edx,%eax
f011e665:	01 d8                	add    %ebx,%eax
f011e667:	2d 00 c0 1f 08       	sub    $0x81fc000,%eax

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f011e66c:	39 c1                	cmp    %eax,%ecx
f011e66e:	0f 85 7c 01 00 00    	jne    f011e7f0 <test_kmalloc_worstfit+0x44c>
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f011e674:	8b 85 94 fc ff ff    	mov    -0x36c(%ebp),%eax
f011e67a:	89 c1                	mov    %eax,%ecx
f011e67c:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011e683:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011e688:	0f b6 d0             	movzbl %al,%edx
f011e68b:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011e68e:	01 d0                	add    %edx,%eax
f011e690:	48                   	dec    %eax
f011e691:	89 45 90             	mov    %eax,-0x70(%ebp)
f011e694:	8b 45 90             	mov    -0x70(%ebp),%eax
f011e697:	ba 00 00 00 00       	mov    $0x0,%edx
f011e69c:	f7 75 94             	divl   -0x6c(%ebp)
f011e69f:	8b 45 90             	mov    -0x70(%ebp),%eax
f011e6a2:	29 d0                	sub    %edx,%eax
f011e6a4:	89 c3                	mov    %eax,%ebx
f011e6a6:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011e6ad:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011e6b2:	0f b6 c0             	movzbl %al,%eax
f011e6b5:	c1 e0 04             	shl    $0x4,%eax
f011e6b8:	89 c2                	mov    %eax,%edx
f011e6ba:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011e6bd:	01 d0                	add    %edx,%eax
f011e6bf:	48                   	dec    %eax
f011e6c0:	89 45 88             	mov    %eax,-0x78(%ebp)
f011e6c3:	8b 45 88             	mov    -0x78(%ebp),%eax
f011e6c6:	ba 00 00 00 00       	mov    $0x0,%edx
f011e6cb:	f7 75 8c             	divl   -0x74(%ebp)
f011e6ce:	8b 45 88             	mov    -0x78(%ebp),%eax
f011e6d1:	29 d0                	sub    %edx,%eax
f011e6d3:	01 d8                	add    %ebx,%eax
f011e6d5:	2d 00 c0 7f 07       	sub    $0x77fc000,%eax
	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f011e6da:	39 c1                	cmp    %eax,%ecx
f011e6dc:	0f 85 0e 01 00 00    	jne    f011e7f0 <test_kmalloc_worstfit+0x44c>
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[50] != (ACTUAL_START + 100*Mega) ||
f011e6e2:	8b 85 0c fd ff ff    	mov    -0x2f4(%ebp),%eax
f011e6e8:	89 c1                	mov    %eax,%ecx
f011e6ea:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011e6f1:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011e6f6:	0f b6 d0             	movzbl %al,%edx
f011e6f9:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011e6fc:	01 d0                	add    %edx,%eax
f011e6fe:	48                   	dec    %eax
f011e6ff:	89 45 80             	mov    %eax,-0x80(%ebp)
f011e702:	8b 45 80             	mov    -0x80(%ebp),%eax
f011e705:	ba 00 00 00 00       	mov    $0x0,%edx
f011e70a:	f7 75 84             	divl   -0x7c(%ebp)
f011e70d:	8b 45 80             	mov    -0x80(%ebp),%eax
f011e710:	29 d0                	sub    %edx,%eax
f011e712:	89 c3                	mov    %eax,%ebx
f011e714:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011e71b:	10 00 00 
f011e71e:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011e723:	0f b6 c0             	movzbl %al,%eax
f011e726:	c1 e0 04             	shl    $0x4,%eax
f011e729:	89 c2                	mov    %eax,%edx
f011e72b:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011e731:	01 d0                	add    %edx,%eax
f011e733:	48                   	dec    %eax
f011e734:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011e73a:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011e740:	ba 00 00 00 00       	mov    $0x0,%edx
f011e745:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011e74b:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011e751:	29 d0                	sub    %edx,%eax
f011e753:	01 d8                	add    %ebx,%eax
f011e755:	2d 00 c0 bf 03       	sub    $0x3bfc000,%eax
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f011e75a:	39 c1                	cmp    %eax,%ecx
f011e75c:	0f 85 8e 00 00 00    	jne    f011e7f0 <test_kmalloc_worstfit+0x44c>
			(uint32)ptr_allocations[50] != (ACTUAL_START + 100*Mega) ||
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega))
f011e762:	8b 85 80 fd ff ff    	mov    -0x280(%ebp),%eax
f011e768:	89 c1                	mov    %eax,%ecx
f011e76a:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011e771:	10 00 00 
f011e774:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011e779:	0f b6 d0             	movzbl %al,%edx
f011e77c:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011e782:	01 d0                	add    %edx,%eax
f011e784:	48                   	dec    %eax
f011e785:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011e78b:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011e791:	ba 00 00 00 00       	mov    $0x0,%edx
f011e796:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011e79c:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011e7a2:	29 d0                	sub    %edx,%eax
f011e7a4:	89 c3                	mov    %eax,%ebx
f011e7a6:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011e7ad:	10 00 00 
f011e7b0:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011e7b5:	0f b6 c0             	movzbl %al,%eax
f011e7b8:	c1 e0 04             	shl    $0x4,%eax
f011e7bb:	89 c2                	mov    %eax,%edx
f011e7bd:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011e7c3:	01 d0                	add    %edx,%eax
f011e7c5:	48                   	dec    %eax
f011e7c6:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011e7cc:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011e7d2:	ba 00 00 00 00       	mov    $0x0,%edx
f011e7d7:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011e7dd:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011e7e3:	29 d0                	sub    %edx,%eax
f011e7e5:	01 d8                	add    %ebx,%eax
f011e7e7:	2d 00 c0 1f 00       	sub    $0x1fc000,%eax
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[50] != (ACTUAL_START + 100*Mega) ||
f011e7ec:	39 c1                	cmp    %eax,%ecx
f011e7ee:	74 17                	je     f011e807 <test_kmalloc_worstfit+0x463>
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega))
		panic("Wrong allocation, Check worst fitting strategy is working correctly");
f011e7f0:	83 ec 04             	sub    $0x4,%esp
f011e7f3:	68 30 9e 13 f0       	push   $0xf0139e30
f011e7f8:	68 31 04 00 00       	push   $0x431
f011e7fd:	68 5a 97 13 f0       	push   $0xf013975a
f011e802:	e8 a9 19 fe ff       	call   f01001b0 <_panic>

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e807:	e8 78 5e fe ff       	call   f0104684 <pf_calculate_free_frames>
f011e80c:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011e80f:	74 17                	je     f011e828 <test_kmalloc_worstfit+0x484>
f011e811:	83 ec 04             	sub    $0x4,%esp
f011e814:	68 74 97 13 f0       	push   $0xf0139774
f011e819:	68 33 04 00 00       	push   $0x433
f011e81e:	68 5a 97 13 f0       	push   $0xf013975a
f011e823:	e8 88 19 fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (160*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE)/(PAGE_SIZE) ) panic("Wrong allocation");
f011e828:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011e82b:	e8 96 e1 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011e830:	29 c3                	sub    %eax,%ebx
f011e832:	89 d8                	mov    %ebx,%eax
f011e834:	3d fb 9f 00 00       	cmp    $0x9ffb,%eax
f011e839:	74 17                	je     f011e852 <test_kmalloc_worstfit+0x4ae>
f011e83b:	83 ec 04             	sub    $0x4,%esp
f011e83e:	68 17 9a 13 f0       	push   $0xf0139a17
f011e843:	68 34 04 00 00       	push   $0x434
f011e848:	68 5a 97 13 f0       	push   $0xf013975a
f011e84d:	e8 5e 19 fe ff       	call   f01001b0 <_panic>

	//make memory holes
	freeFrames = sys_calculate_free_frames() ;
f011e852:	e8 6f e1 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011e857:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames() ;
f011e85a:	e8 25 5e fe ff       	call   f0104684 <pf_calculate_free_frames>
f011e85f:	89 45 ec             	mov    %eax,-0x14(%ebp)

	kfree(ptr_allocations[0]);		//Hole 1 = 2 M
f011e862:	8b 85 44 fc ff ff    	mov    -0x3bc(%ebp),%eax
f011e868:	83 ec 0c             	sub    $0xc,%esp
f011e86b:	50                   	push   %eax
f011e86c:	e8 08 97 fe ff       	call   f0107f79 <kfree>
f011e871:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[2]);		//Hole 2 = 4 M
f011e874:	8b 85 4c fc ff ff    	mov    -0x3b4(%ebp),%eax
f011e87a:	83 ec 0c             	sub    $0xc,%esp
f011e87d:	50                   	push   %eax
f011e87e:	e8 f6 96 fe ff       	call   f0107f79 <kfree>
f011e883:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[3]);
f011e886:	8b 85 50 fc ff ff    	mov    -0x3b0(%ebp),%eax
f011e88c:	83 ec 0c             	sub    $0xc,%esp
f011e88f:	50                   	push   %eax
f011e890:	e8 e4 96 fe ff       	call   f0107f79 <kfree>
f011e895:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[10]);		//Hole 3 = 6 M
f011e898:	8b 85 6c fc ff ff    	mov    -0x394(%ebp),%eax
f011e89e:	83 ec 0c             	sub    $0xc,%esp
f011e8a1:	50                   	push   %eax
f011e8a2:	e8 d2 96 fe ff       	call   f0107f79 <kfree>
f011e8a7:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[12]);
f011e8aa:	8b 85 74 fc ff ff    	mov    -0x38c(%ebp),%eax
f011e8b0:	83 ec 0c             	sub    $0xc,%esp
f011e8b3:	50                   	push   %eax
f011e8b4:	e8 c0 96 fe ff       	call   f0107f79 <kfree>
f011e8b9:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[11]);
f011e8bc:	8b 85 70 fc ff ff    	mov    -0x390(%ebp),%eax
f011e8c2:	83 ec 0c             	sub    $0xc,%esp
f011e8c5:	50                   	push   %eax
f011e8c6:	e8 ae 96 fe ff       	call   f0107f79 <kfree>
f011e8cb:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[30]);		//Hole 4 = 10 M
f011e8ce:	8b 85 bc fc ff ff    	mov    -0x344(%ebp),%eax
f011e8d4:	83 ec 0c             	sub    $0xc,%esp
f011e8d7:	50                   	push   %eax
f011e8d8:	e8 9c 96 fe ff       	call   f0107f79 <kfree>
f011e8dd:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[31]);
f011e8e0:	8b 85 c0 fc ff ff    	mov    -0x340(%ebp),%eax
f011e8e6:	83 ec 0c             	sub    $0xc,%esp
f011e8e9:	50                   	push   %eax
f011e8ea:	e8 8a 96 fe ff       	call   f0107f79 <kfree>
f011e8ef:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[32]);
f011e8f2:	8b 85 c4 fc ff ff    	mov    -0x33c(%ebp),%eax
f011e8f8:	83 ec 0c             	sub    $0xc,%esp
f011e8fb:	50                   	push   %eax
f011e8fc:	e8 78 96 fe ff       	call   f0107f79 <kfree>
f011e901:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[33]);
f011e904:	8b 85 c8 fc ff ff    	mov    -0x338(%ebp),%eax
f011e90a:	83 ec 0c             	sub    $0xc,%esp
f011e90d:	50                   	push   %eax
f011e90e:	e8 66 96 fe ff       	call   f0107f79 <kfree>
f011e913:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[34]);
f011e916:	8b 85 cc fc ff ff    	mov    -0x334(%ebp),%eax
f011e91c:	83 ec 0c             	sub    $0xc,%esp
f011e91f:	50                   	push   %eax
f011e920:	e8 54 96 fe ff       	call   f0107f79 <kfree>
f011e925:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[70]); 	//Hole 5 = 8 M
f011e928:	8b 85 5c fd ff ff    	mov    -0x2a4(%ebp),%eax
f011e92e:	83 ec 0c             	sub    $0xc,%esp
f011e931:	50                   	push   %eax
f011e932:	e8 42 96 fe ff       	call   f0107f79 <kfree>
f011e937:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[71]);
f011e93a:	8b 85 60 fd ff ff    	mov    -0x2a0(%ebp),%eax
f011e940:	83 ec 0c             	sub    $0xc,%esp
f011e943:	50                   	push   %eax
f011e944:	e8 30 96 fe ff       	call   f0107f79 <kfree>
f011e949:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[72]);
f011e94c:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f011e952:	83 ec 0c             	sub    $0xc,%esp
f011e955:	50                   	push   %eax
f011e956:	e8 1e 96 fe ff       	call   f0107f79 <kfree>
f011e95b:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[73]);
f011e95e:	8b 85 68 fd ff ff    	mov    -0x298(%ebp),%eax
f011e964:	83 ec 0c             	sub    $0xc,%esp
f011e967:	50                   	push   %eax
f011e968:	e8 0c 96 fe ff       	call   f0107f79 <kfree>
f011e96d:	83 c4 10             	add    $0x10,%esp

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e970:	e8 0f 5d fe ff       	call   f0104684 <pf_calculate_free_frames>
f011e975:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011e978:	74 17                	je     f011e991 <test_kmalloc_worstfit+0x5ed>
f011e97a:	83 ec 04             	sub    $0x4,%esp
f011e97d:	68 74 97 13 f0       	push   $0xf0139774
f011e982:	68 4a 04 00 00       	push   $0x44a
f011e987:	68 5a 97 13 f0       	push   $0xf013975a
f011e98c:	e8 1f 18 fe ff       	call   f01001b0 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) != ((15*2*Mega))/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f011e991:	e8 30 e0 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011e996:	89 c2                	mov    %eax,%edx
f011e998:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011e99b:	29 c2                	sub    %eax,%edx
f011e99d:	89 d0                	mov    %edx,%eax
f011e99f:	3d 00 1e 00 00       	cmp    $0x1e00,%eax
f011e9a4:	74 17                	je     f011e9bd <test_kmalloc_worstfit+0x619>
f011e9a6:	83 ec 04             	sub    $0x4,%esp
f011e9a9:	68 28 9a 13 f0       	push   $0xf0139a28
f011e9ae:	68 4b 04 00 00       	push   $0x44b
f011e9b3:	68 5a 97 13 f0       	push   $0xf013975a
f011e9b8:	e8 f3 17 fe ff       	call   f01001b0 <_panic>

	// Test worst fit
	freeFrames = sys_calculate_free_frames() ;
f011e9bd:	e8 04 e0 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011e9c2:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011e9c5:	e8 ba 5c fe ff       	call   f0104684 <pf_calculate_free_frames>
f011e9ca:	89 45 ec             	mov    %eax,-0x14(%ebp)
	void* tempAddress = kmalloc(Mega);		//Use Hole 4 -> Hole 4 = 9 M
f011e9cd:	83 ec 0c             	sub    $0xc,%esp
f011e9d0:	68 00 00 10 00       	push   $0x100000
f011e9d5:	e8 85 95 fe ff       	call   f0107f5f <kmalloc>
f011e9da:	83 c4 10             	add    $0x10,%esp
f011e9dd:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x03C00000)
f011e9e3:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f011e9ea:	10 00 00 
f011e9ed:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011e9f2:	0f b6 d0             	movzbl %al,%edx
f011e9f5:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011e9fb:	01 d0                	add    %edx,%eax
f011e9fd:	48                   	dec    %eax
f011e9fe:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f011ea04:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011ea0a:	ba 00 00 00 00       	mov    $0x0,%edx
f011ea0f:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f011ea15:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011ea1b:	29 d0                	sub    %edx,%eax
f011ea1d:	89 c1                	mov    %eax,%ecx
f011ea1f:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f011ea26:	10 00 00 
f011ea29:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011ea2e:	0f b6 c0             	movzbl %al,%eax
f011ea31:	c1 e0 04             	shl    $0x4,%eax
f011ea34:	89 c2                	mov    %eax,%edx
f011ea36:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011ea3c:	01 d0                	add    %edx,%eax
f011ea3e:	48                   	dec    %eax
f011ea3f:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f011ea45:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011ea4b:	ba 00 00 00 00       	mov    $0x0,%edx
f011ea50:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f011ea56:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011ea5c:	29 d0                	sub    %edx,%eax
f011ea5e:	01 c8                	add    %ecx,%eax
f011ea60:	8d 90 00 40 c0 f9    	lea    -0x63fc000(%eax),%edx
f011ea66:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011ea6c:	39 c2                	cmp    %eax,%edx
f011ea6e:	74 17                	je     f011ea87 <test_kmalloc_worstfit+0x6e3>
		panic("Worst Fit not working correctly");
f011ea70:	83 ec 04             	sub    $0x4,%esp
f011ea73:	68 74 9e 13 f0       	push   $0xf0139e74
f011ea78:	68 52 04 00 00       	push   $0x452
f011ea7d:	68 5a 97 13 f0       	push   $0xf013975a
f011ea82:	e8 29 17 fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ea87:	e8 f8 5b fe ff       	call   f0104684 <pf_calculate_free_frames>
f011ea8c:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011ea8f:	74 17                	je     f011eaa8 <test_kmalloc_worstfit+0x704>
f011ea91:	83 ec 04             	sub    $0x4,%esp
f011ea94:	68 74 97 13 f0       	push   $0xf0139774
f011ea99:	68 53 04 00 00       	push   $0x453
f011ea9e:	68 5a 97 13 f0       	push   $0xf013975a
f011eaa3:	e8 08 17 fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  1*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011eaa8:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011eaab:	e8 16 df fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011eab0:	29 c3                	sub    %eax,%ebx
f011eab2:	89 d8                	mov    %ebx,%eax
f011eab4:	3d 00 01 00 00       	cmp    $0x100,%eax
f011eab9:	74 17                	je     f011ead2 <test_kmalloc_worstfit+0x72e>
f011eabb:	83 ec 04             	sub    $0x4,%esp
f011eabe:	68 92 9c 13 f0       	push   $0xf0139c92
f011eac3:	68 54 04 00 00       	push   $0x454
f011eac8:	68 5a 97 13 f0       	push   $0xf013975a
f011eacd:	e8 de 16 fe ff       	call   f01001b0 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011ead2:	ff 45 e8             	incl   -0x18(%ebp)
f011ead5:	83 ec 08             	sub    $0x8,%esp
f011ead8:	ff 75 e8             	pushl  -0x18(%ebp)
f011eadb:	68 94 9e 13 f0       	push   $0xf0139e94
f011eae0:	e8 4c 23 fe ff       	call   f0100e31 <cprintf>
f011eae5:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011eae8:	e8 d9 de fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011eaed:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011eaf0:	e8 8f 5b fe ff       	call   f0104684 <pf_calculate_free_frames>
f011eaf5:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(4 * Mega);			//Use Hole 4 -> Hole 4 = 5 M
f011eaf8:	83 ec 0c             	sub    $0xc,%esp
f011eafb:	68 00 00 40 00       	push   $0x400000
f011eb00:	e8 5a 94 fe ff       	call   f0107f5f <kmalloc>
f011eb05:	83 c4 10             	add    $0x10,%esp
f011eb08:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x03D00000)
f011eb0e:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f011eb15:	10 00 00 
f011eb18:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011eb1d:	0f b6 d0             	movzbl %al,%edx
f011eb20:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011eb26:	01 d0                	add    %edx,%eax
f011eb28:	48                   	dec    %eax
f011eb29:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f011eb2f:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011eb35:	ba 00 00 00 00       	mov    $0x0,%edx
f011eb3a:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f011eb40:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011eb46:	29 d0                	sub    %edx,%eax
f011eb48:	89 c1                	mov    %eax,%ecx
f011eb4a:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f011eb51:	10 00 00 
f011eb54:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011eb59:	0f b6 c0             	movzbl %al,%eax
f011eb5c:	c1 e0 04             	shl    $0x4,%eax
f011eb5f:	89 c2                	mov    %eax,%edx
f011eb61:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011eb67:	01 d0                	add    %edx,%eax
f011eb69:	48                   	dec    %eax
f011eb6a:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f011eb70:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011eb76:	ba 00 00 00 00       	mov    $0x0,%edx
f011eb7b:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f011eb81:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011eb87:	29 d0                	sub    %edx,%eax
f011eb89:	01 c8                	add    %ecx,%eax
f011eb8b:	8d 90 00 40 d0 f9    	lea    -0x62fc000(%eax),%edx
f011eb91:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011eb97:	39 c2                	cmp    %eax,%edx
f011eb99:	74 17                	je     f011ebb2 <test_kmalloc_worstfit+0x80e>
		panic("Worst Fit not working correctly");
f011eb9b:	83 ec 04             	sub    $0x4,%esp
f011eb9e:	68 74 9e 13 f0       	push   $0xf0139e74
f011eba3:	68 5b 04 00 00       	push   $0x45b
f011eba8:	68 5a 97 13 f0       	push   $0xf013975a
f011ebad:	e8 fe 15 fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ebb2:	e8 cd 5a fe ff       	call   f0104684 <pf_calculate_free_frames>
f011ebb7:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011ebba:	74 17                	je     f011ebd3 <test_kmalloc_worstfit+0x82f>
f011ebbc:	83 ec 04             	sub    $0x4,%esp
f011ebbf:	68 74 97 13 f0       	push   $0xf0139774
f011ebc4:	68 5c 04 00 00       	push   $0x45c
f011ebc9:	68 5a 97 13 f0       	push   $0xf013975a
f011ebce:	e8 dd 15 fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  4*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011ebd3:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011ebd6:	e8 eb dd fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011ebdb:	29 c3                	sub    %eax,%ebx
f011ebdd:	89 d8                	mov    %ebx,%eax
f011ebdf:	3d 00 04 00 00       	cmp    $0x400,%eax
f011ebe4:	74 17                	je     f011ebfd <test_kmalloc_worstfit+0x859>
f011ebe6:	83 ec 04             	sub    $0x4,%esp
f011ebe9:	68 92 9c 13 f0       	push   $0xf0139c92
f011ebee:	68 5d 04 00 00       	push   $0x45d
f011ebf3:	68 5a 97 13 f0       	push   $0xf013975a
f011ebf8:	e8 b3 15 fe ff       	call   f01001b0 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011ebfd:	ff 45 e8             	incl   -0x18(%ebp)
f011ec00:	83 ec 08             	sub    $0x8,%esp
f011ec03:	ff 75 e8             	pushl  -0x18(%ebp)
f011ec06:	68 94 9e 13 f0       	push   $0xf0139e94
f011ec0b:	e8 21 22 fe ff       	call   f0100e31 <cprintf>
f011ec10:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011ec13:	e8 ae dd fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011ec18:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011ec1b:	e8 64 5a fe ff       	call   f0104684 <pf_calculate_free_frames>
f011ec20:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(6*Mega); 			   //Use Hole 5 -> Hole 5 = 2 M
f011ec23:	83 ec 0c             	sub    $0xc,%esp
f011ec26:	68 00 00 60 00       	push   $0x600000
f011ec2b:	e8 2f 93 fe ff       	call   f0107f5f <kmalloc>
f011ec30:	83 c4 10             	add    $0x10,%esp
f011ec33:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x08C00000)
f011ec39:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f011ec40:	10 00 00 
f011ec43:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011ec48:	0f b6 d0             	movzbl %al,%edx
f011ec4b:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011ec51:	01 d0                	add    %edx,%eax
f011ec53:	48                   	dec    %eax
f011ec54:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f011ec5a:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011ec60:	ba 00 00 00 00       	mov    $0x0,%edx
f011ec65:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f011ec6b:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011ec71:	29 d0                	sub    %edx,%eax
f011ec73:	89 c1                	mov    %eax,%ecx
f011ec75:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f011ec7c:	10 00 00 
f011ec7f:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011ec84:	0f b6 c0             	movzbl %al,%eax
f011ec87:	c1 e0 04             	shl    $0x4,%eax
f011ec8a:	89 c2                	mov    %eax,%edx
f011ec8c:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011ec92:	01 d0                	add    %edx,%eax
f011ec94:	48                   	dec    %eax
f011ec95:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f011ec9b:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011eca1:	ba 00 00 00 00       	mov    $0x0,%edx
f011eca6:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f011ecac:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011ecb2:	29 d0                	sub    %edx,%eax
f011ecb4:	01 c8                	add    %ecx,%eax
f011ecb6:	8d 90 00 40 c0 fe    	lea    -0x13fc000(%eax),%edx
f011ecbc:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011ecc2:	39 c2                	cmp    %eax,%edx
f011ecc4:	74 17                	je     f011ecdd <test_kmalloc_worstfit+0x939>
		panic("Worst Fit not working correctly");
f011ecc6:	83 ec 04             	sub    $0x4,%esp
f011ecc9:	68 74 9e 13 f0       	push   $0xf0139e74
f011ecce:	68 64 04 00 00       	push   $0x464
f011ecd3:	68 5a 97 13 f0       	push   $0xf013975a
f011ecd8:	e8 d3 14 fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ecdd:	e8 a2 59 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011ece2:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011ece5:	74 17                	je     f011ecfe <test_kmalloc_worstfit+0x95a>
f011ece7:	83 ec 04             	sub    $0x4,%esp
f011ecea:	68 74 97 13 f0       	push   $0xf0139774
f011ecef:	68 65 04 00 00       	push   $0x465
f011ecf4:	68 5a 97 13 f0       	push   $0xf013975a
f011ecf9:	e8 b2 14 fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  6*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011ecfe:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011ed01:	e8 c0 dc fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011ed06:	29 c3                	sub    %eax,%ebx
f011ed08:	89 d8                	mov    %ebx,%eax
f011ed0a:	3d 00 06 00 00       	cmp    $0x600,%eax
f011ed0f:	74 17                	je     f011ed28 <test_kmalloc_worstfit+0x984>
f011ed11:	83 ec 04             	sub    $0x4,%esp
f011ed14:	68 92 9c 13 f0       	push   $0xf0139c92
f011ed19:	68 66 04 00 00       	push   $0x466
f011ed1e:	68 5a 97 13 f0       	push   $0xf013975a
f011ed23:	e8 88 14 fe ff       	call   f01001b0 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011ed28:	ff 45 e8             	incl   -0x18(%ebp)
f011ed2b:	83 ec 08             	sub    $0x8,%esp
f011ed2e:	ff 75 e8             	pushl  -0x18(%ebp)
f011ed31:	68 94 9e 13 f0       	push   $0xf0139e94
f011ed36:	e8 f6 20 fe ff       	call   f0100e31 <cprintf>
f011ed3b:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011ed3e:	e8 83 dc fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011ed43:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011ed46:	e8 39 59 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011ed4b:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(5*Mega); 			   //Use Hole 3 -> Hole 3 = 1 M
f011ed4e:	83 ec 0c             	sub    $0xc,%esp
f011ed51:	68 00 00 50 00       	push   $0x500000
f011ed56:	e8 04 92 fe ff       	call   f0107f5f <kmalloc>
f011ed5b:	83 c4 10             	add    $0x10,%esp
f011ed5e:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01400000)
f011ed64:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f011ed6b:	10 00 00 
f011ed6e:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011ed73:	0f b6 d0             	movzbl %al,%edx
f011ed76:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011ed7c:	01 d0                	add    %edx,%eax
f011ed7e:	48                   	dec    %eax
f011ed7f:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f011ed85:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011ed8b:	ba 00 00 00 00       	mov    $0x0,%edx
f011ed90:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f011ed96:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011ed9c:	29 d0                	sub    %edx,%eax
f011ed9e:	89 c1                	mov    %eax,%ecx
f011eda0:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f011eda7:	10 00 00 
f011edaa:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011edaf:	0f b6 c0             	movzbl %al,%eax
f011edb2:	c1 e0 04             	shl    $0x4,%eax
f011edb5:	89 c2                	mov    %eax,%edx
f011edb7:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011edbd:	01 d0                	add    %edx,%eax
f011edbf:	48                   	dec    %eax
f011edc0:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f011edc6:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011edcc:	ba 00 00 00 00       	mov    $0x0,%edx
f011edd1:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f011edd7:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011eddd:	29 d0                	sub    %edx,%eax
f011eddf:	01 c8                	add    %ecx,%eax
f011ede1:	8d 90 00 40 40 f7    	lea    -0x8bfc000(%eax),%edx
f011ede7:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011eded:	39 c2                	cmp    %eax,%edx
f011edef:	74 17                	je     f011ee08 <test_kmalloc_worstfit+0xa64>
		panic("Worst Fit not working correctly");
f011edf1:	83 ec 04             	sub    $0x4,%esp
f011edf4:	68 74 9e 13 f0       	push   $0xf0139e74
f011edf9:	68 6d 04 00 00       	push   $0x46d
f011edfe:	68 5a 97 13 f0       	push   $0xf013975a
f011ee03:	e8 a8 13 fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ee08:	e8 77 58 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011ee0d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011ee10:	74 17                	je     f011ee29 <test_kmalloc_worstfit+0xa85>
f011ee12:	83 ec 04             	sub    $0x4,%esp
f011ee15:	68 74 97 13 f0       	push   $0xf0139774
f011ee1a:	68 6e 04 00 00       	push   $0x46e
f011ee1f:	68 5a 97 13 f0       	push   $0xf013975a
f011ee24:	e8 87 13 fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  5*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011ee29:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011ee2c:	e8 95 db fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011ee31:	29 c3                	sub    %eax,%ebx
f011ee33:	89 d8                	mov    %ebx,%eax
f011ee35:	3d 00 05 00 00       	cmp    $0x500,%eax
f011ee3a:	74 17                	je     f011ee53 <test_kmalloc_worstfit+0xaaf>
f011ee3c:	83 ec 04             	sub    $0x4,%esp
f011ee3f:	68 92 9c 13 f0       	push   $0xf0139c92
f011ee44:	68 6f 04 00 00       	push   $0x46f
f011ee49:	68 5a 97 13 f0       	push   $0xf013975a
f011ee4e:	e8 5d 13 fe ff       	call   f01001b0 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011ee53:	ff 45 e8             	incl   -0x18(%ebp)
f011ee56:	83 ec 08             	sub    $0x8,%esp
f011ee59:	ff 75 e8             	pushl  -0x18(%ebp)
f011ee5c:	68 94 9e 13 f0       	push   $0xf0139e94
f011ee61:	e8 cb 1f fe ff       	call   f0100e31 <cprintf>
f011ee66:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011ee69:	e8 58 db fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011ee6e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011ee71:	e8 0e 58 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011ee76:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(4*Mega); 			   // Use Hole 4 -> Hole 4 = 1 M
f011ee79:	83 ec 0c             	sub    $0xc,%esp
f011ee7c:	68 00 00 40 00       	push   $0x400000
f011ee81:	e8 d9 90 fe ff       	call   f0107f5f <kmalloc>
f011ee86:	83 c4 10             	add    $0x10,%esp
f011ee89:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x04100000)
f011ee8f:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f011ee96:	10 00 00 
f011ee99:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011ee9e:	0f b6 d0             	movzbl %al,%edx
f011eea1:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011eea7:	01 d0                	add    %edx,%eax
f011eea9:	48                   	dec    %eax
f011eeaa:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f011eeb0:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011eeb6:	ba 00 00 00 00       	mov    $0x0,%edx
f011eebb:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f011eec1:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011eec7:	29 d0                	sub    %edx,%eax
f011eec9:	89 c1                	mov    %eax,%ecx
f011eecb:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f011eed2:	10 00 00 
f011eed5:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011eeda:	0f b6 c0             	movzbl %al,%eax
f011eedd:	c1 e0 04             	shl    $0x4,%eax
f011eee0:	89 c2                	mov    %eax,%edx
f011eee2:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011eee8:	01 d0                	add    %edx,%eax
f011eeea:	48                   	dec    %eax
f011eeeb:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f011eef1:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011eef7:	ba 00 00 00 00       	mov    $0x0,%edx
f011eefc:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f011ef02:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011ef08:	29 d0                	sub    %edx,%eax
f011ef0a:	01 c8                	add    %ecx,%eax
f011ef0c:	8d 90 00 40 10 fa    	lea    -0x5efc000(%eax),%edx
f011ef12:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011ef18:	39 c2                	cmp    %eax,%edx
f011ef1a:	74 17                	je     f011ef33 <test_kmalloc_worstfit+0xb8f>
		panic("Worst Fit not working correctly");
f011ef1c:	83 ec 04             	sub    $0x4,%esp
f011ef1f:	68 74 9e 13 f0       	push   $0xf0139e74
f011ef24:	68 76 04 00 00       	push   $0x476
f011ef29:	68 5a 97 13 f0       	push   $0xf013975a
f011ef2e:	e8 7d 12 fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ef33:	e8 4c 57 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011ef38:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011ef3b:	74 17                	je     f011ef54 <test_kmalloc_worstfit+0xbb0>
f011ef3d:	83 ec 04             	sub    $0x4,%esp
f011ef40:	68 74 97 13 f0       	push   $0xf0139774
f011ef45:	68 77 04 00 00       	push   $0x477
f011ef4a:	68 5a 97 13 f0       	push   $0xf013975a
f011ef4f:	e8 5c 12 fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  4*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011ef54:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011ef57:	e8 6a da fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011ef5c:	29 c3                	sub    %eax,%ebx
f011ef5e:	89 d8                	mov    %ebx,%eax
f011ef60:	3d 00 04 00 00       	cmp    $0x400,%eax
f011ef65:	74 17                	je     f011ef7e <test_kmalloc_worstfit+0xbda>
f011ef67:	83 ec 04             	sub    $0x4,%esp
f011ef6a:	68 92 9c 13 f0       	push   $0xf0139c92
f011ef6f:	68 78 04 00 00       	push   $0x478
f011ef74:	68 5a 97 13 f0       	push   $0xf013975a
f011ef79:	e8 32 12 fe ff       	call   f01001b0 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011ef7e:	ff 45 e8             	incl   -0x18(%ebp)
f011ef81:	83 ec 08             	sub    $0x8,%esp
f011ef84:	ff 75 e8             	pushl  -0x18(%ebp)
f011ef87:	68 94 9e 13 f0       	push   $0xf0139e94
f011ef8c:	e8 a0 1e fe ff       	call   f0100e31 <cprintf>
f011ef91:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011ef94:	e8 2d da fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011ef99:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011ef9c:	e8 e3 56 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011efa1:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(2 * Mega); 			// Use Hole 2 -> Hole 2 = 2 M
f011efa4:	83 ec 0c             	sub    $0xc,%esp
f011efa7:	68 00 00 20 00       	push   $0x200000
f011efac:	e8 ae 8f fe ff       	call   f0107f5f <kmalloc>
f011efb1:	83 c4 10             	add    $0x10,%esp
f011efb4:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00400000)
f011efba:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f011efc1:	10 00 00 
f011efc4:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011efc9:	0f b6 d0             	movzbl %al,%edx
f011efcc:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011efd2:	01 d0                	add    %edx,%eax
f011efd4:	48                   	dec    %eax
f011efd5:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f011efdb:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011efe1:	ba 00 00 00 00       	mov    $0x0,%edx
f011efe6:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f011efec:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011eff2:	29 d0                	sub    %edx,%eax
f011eff4:	89 c1                	mov    %eax,%ecx
f011eff6:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f011effd:	10 00 00 
f011f000:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011f005:	0f b6 c0             	movzbl %al,%eax
f011f008:	c1 e0 04             	shl    $0x4,%eax
f011f00b:	89 c2                	mov    %eax,%edx
f011f00d:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011f013:	01 d0                	add    %edx,%eax
f011f015:	48                   	dec    %eax
f011f016:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f011f01c:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011f022:	ba 00 00 00 00       	mov    $0x0,%edx
f011f027:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f011f02d:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011f033:	29 d0                	sub    %edx,%eax
f011f035:	01 c8                	add    %ecx,%eax
f011f037:	8d 90 00 40 40 f6    	lea    -0x9bfc000(%eax),%edx
f011f03d:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011f043:	39 c2                	cmp    %eax,%edx
f011f045:	74 17                	je     f011f05e <test_kmalloc_worstfit+0xcba>
		panic("Worst Fit not working correctly");
f011f047:	83 ec 04             	sub    $0x4,%esp
f011f04a:	68 74 9e 13 f0       	push   $0xf0139e74
f011f04f:	68 7f 04 00 00       	push   $0x47f
f011f054:	68 5a 97 13 f0       	push   $0xf013975a
f011f059:	e8 52 11 fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f05e:	e8 21 56 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011f063:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f066:	74 17                	je     f011f07f <test_kmalloc_worstfit+0xcdb>
f011f068:	83 ec 04             	sub    $0x4,%esp
f011f06b:	68 74 97 13 f0       	push   $0xf0139774
f011f070:	68 80 04 00 00       	push   $0x480
f011f075:	68 5a 97 13 f0       	push   $0xf013975a
f011f07a:	e8 31 11 fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  2*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011f07f:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f082:	e8 3f d9 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011f087:	29 c3                	sub    %eax,%ebx
f011f089:	89 d8                	mov    %ebx,%eax
f011f08b:	3d 00 02 00 00       	cmp    $0x200,%eax
f011f090:	74 17                	je     f011f0a9 <test_kmalloc_worstfit+0xd05>
f011f092:	83 ec 04             	sub    $0x4,%esp
f011f095:	68 92 9c 13 f0       	push   $0xf0139c92
f011f09a:	68 81 04 00 00       	push   $0x481
f011f09f:	68 5a 97 13 f0       	push   $0xf013975a
f011f0a4:	e8 07 11 fe ff       	call   f01001b0 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f0a9:	ff 45 e8             	incl   -0x18(%ebp)
f011f0ac:	83 ec 08             	sub    $0x8,%esp
f011f0af:	ff 75 e8             	pushl  -0x18(%ebp)
f011f0b2:	68 94 9e 13 f0       	push   $0xf0139e94
f011f0b7:	e8 75 1d fe ff       	call   f0100e31 <cprintf>
f011f0bc:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011f0bf:	e8 02 d9 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011f0c4:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f0c7:	e8 b8 55 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011f0cc:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(1*Mega + 512*kilo);    // Use Hole 1 -> Hole 1 = 0.5 M
f011f0cf:	83 ec 0c             	sub    $0xc,%esp
f011f0d2:	68 00 00 18 00       	push   $0x180000
f011f0d7:	e8 83 8e fe ff       	call   f0107f5f <kmalloc>
f011f0dc:	83 c4 10             	add    $0x10,%esp
f011f0df:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
	if((uint32)tempAddress != ACTUAL_START)
f011f0e5:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f011f0ec:	10 00 00 
f011f0ef:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011f0f4:	0f b6 d0             	movzbl %al,%edx
f011f0f7:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011f0fd:	01 d0                	add    %edx,%eax
f011f0ff:	48                   	dec    %eax
f011f100:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f011f106:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011f10c:	ba 00 00 00 00       	mov    $0x0,%edx
f011f111:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f011f117:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011f11d:	29 d0                	sub    %edx,%eax
f011f11f:	89 c1                	mov    %eax,%ecx
f011f121:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f011f128:	10 00 00 
f011f12b:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011f130:	0f b6 c0             	movzbl %al,%eax
f011f133:	c1 e0 04             	shl    $0x4,%eax
f011f136:	89 c2                	mov    %eax,%edx
f011f138:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011f13e:	01 d0                	add    %edx,%eax
f011f140:	48                   	dec    %eax
f011f141:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f011f147:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011f14d:	ba 00 00 00 00       	mov    $0x0,%edx
f011f152:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f011f158:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011f15e:	29 d0                	sub    %edx,%eax
f011f160:	01 c8                	add    %ecx,%eax
f011f162:	8d 90 00 40 00 f6    	lea    -0x9ffc000(%eax),%edx
f011f168:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011f16e:	39 c2                	cmp    %eax,%edx
f011f170:	74 17                	je     f011f189 <test_kmalloc_worstfit+0xde5>
		panic("Worst Fit not working correctly");
f011f172:	83 ec 04             	sub    $0x4,%esp
f011f175:	68 74 9e 13 f0       	push   $0xf0139e74
f011f17a:	68 88 04 00 00       	push   $0x488
f011f17f:	68 5a 97 13 f0       	push   $0xf013975a
f011f184:	e8 27 10 fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f189:	e8 f6 54 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011f18e:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f191:	74 17                	je     f011f1aa <test_kmalloc_worstfit+0xe06>
f011f193:	83 ec 04             	sub    $0x4,%esp
f011f196:	68 74 97 13 f0       	push   $0xf0139774
f011f19b:	68 89 04 00 00       	push   $0x489
f011f1a0:	68 5a 97 13 f0       	push   $0xf013975a
f011f1a5:	e8 06 10 fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (1*Mega + 512*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f011f1aa:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f1ad:	e8 14 d8 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011f1b2:	29 c3                	sub    %eax,%ebx
f011f1b4:	89 d8                	mov    %ebx,%eax
f011f1b6:	3d 80 01 00 00       	cmp    $0x180,%eax
f011f1bb:	74 17                	je     f011f1d4 <test_kmalloc_worstfit+0xe30>
f011f1bd:	83 ec 04             	sub    $0x4,%esp
f011f1c0:	68 92 9c 13 f0       	push   $0xf0139c92
f011f1c5:	68 8a 04 00 00       	push   $0x48a
f011f1ca:	68 5a 97 13 f0       	push   $0xf013975a
f011f1cf:	e8 dc 0f fe ff       	call   f01001b0 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f1d4:	ff 45 e8             	incl   -0x18(%ebp)
f011f1d7:	83 ec 08             	sub    $0x8,%esp
f011f1da:	ff 75 e8             	pushl  -0x18(%ebp)
f011f1dd:	68 94 9e 13 f0       	push   $0xf0139e94
f011f1e2:	e8 4a 1c fe ff       	call   f0100e31 <cprintf>
f011f1e7:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011f1ea:	e8 d7 d7 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011f1ef:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f1f2:	e8 8d 54 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011f1f7:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(512*kilo); 			   // Use Hole 2 -> Hole 2 = 1.5 M
f011f1fa:	83 ec 0c             	sub    $0xc,%esp
f011f1fd:	68 00 00 08 00       	push   $0x80000
f011f202:	e8 58 8d fe ff       	call   f0107f5f <kmalloc>
f011f207:	83 c4 10             	add    $0x10,%esp
f011f20a:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00600000)
f011f210:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f011f217:	10 00 00 
f011f21a:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011f21f:	0f b6 d0             	movzbl %al,%edx
f011f222:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011f228:	01 d0                	add    %edx,%eax
f011f22a:	48                   	dec    %eax
f011f22b:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f011f231:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011f237:	ba 00 00 00 00       	mov    $0x0,%edx
f011f23c:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f011f242:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011f248:	29 d0                	sub    %edx,%eax
f011f24a:	89 c1                	mov    %eax,%ecx
f011f24c:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f011f253:	10 00 00 
f011f256:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011f25b:	0f b6 c0             	movzbl %al,%eax
f011f25e:	c1 e0 04             	shl    $0x4,%eax
f011f261:	89 c2                	mov    %eax,%edx
f011f263:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011f269:	01 d0                	add    %edx,%eax
f011f26b:	48                   	dec    %eax
f011f26c:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f011f272:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011f278:	ba 00 00 00 00       	mov    $0x0,%edx
f011f27d:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f011f283:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011f289:	29 d0                	sub    %edx,%eax
f011f28b:	01 c8                	add    %ecx,%eax
f011f28d:	8d 90 00 40 60 f6    	lea    -0x99fc000(%eax),%edx
f011f293:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011f299:	39 c2                	cmp    %eax,%edx
f011f29b:	74 17                	je     f011f2b4 <test_kmalloc_worstfit+0xf10>
		panic("Worst Fit not working correctly");
f011f29d:	83 ec 04             	sub    $0x4,%esp
f011f2a0:	68 74 9e 13 f0       	push   $0xf0139e74
f011f2a5:	68 91 04 00 00       	push   $0x491
f011f2aa:	68 5a 97 13 f0       	push   $0xf013975a
f011f2af:	e8 fc 0e fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f2b4:	e8 cb 53 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011f2b9:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f2bc:	74 17                	je     f011f2d5 <test_kmalloc_worstfit+0xf31>
f011f2be:	83 ec 04             	sub    $0x4,%esp
f011f2c1:	68 74 97 13 f0       	push   $0xf0139774
f011f2c6:	68 92 04 00 00       	push   $0x492
f011f2cb:	68 5a 97 13 f0       	push   $0xf013975a
f011f2d0:	e8 db 0e fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (512*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f011f2d5:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f2d8:	e8 e9 d6 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011f2dd:	29 c3                	sub    %eax,%ebx
f011f2df:	89 d8                	mov    %ebx,%eax
f011f2e1:	3d 80 00 00 00       	cmp    $0x80,%eax
f011f2e6:	74 17                	je     f011f2ff <test_kmalloc_worstfit+0xf5b>
f011f2e8:	83 ec 04             	sub    $0x4,%esp
f011f2eb:	68 92 9c 13 f0       	push   $0xf0139c92
f011f2f0:	68 93 04 00 00       	push   $0x493
f011f2f5:	68 5a 97 13 f0       	push   $0xf013975a
f011f2fa:	e8 b1 0e fe ff       	call   f01001b0 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f2ff:	ff 45 e8             	incl   -0x18(%ebp)
f011f302:	83 ec 08             	sub    $0x8,%esp
f011f305:	ff 75 e8             	pushl  -0x18(%ebp)
f011f308:	68 94 9e 13 f0       	push   $0xf0139e94
f011f30d:	e8 1f 1b fe ff       	call   f0100e31 <cprintf>
f011f312:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011f315:	e8 ac d6 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011f31a:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f31d:	e8 62 53 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011f322:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(kilo); 			   // Use Hole 5 -> Hole 5 = 2 M - K
f011f325:	83 ec 0c             	sub    $0xc,%esp
f011f328:	68 00 04 00 00       	push   $0x400
f011f32d:	e8 2d 8c fe ff       	call   f0107f5f <kmalloc>
f011f332:	83 c4 10             	add    $0x10,%esp
f011f335:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x09200000)
f011f33b:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f011f342:	10 00 00 
f011f345:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011f34a:	0f b6 d0             	movzbl %al,%edx
f011f34d:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011f353:	01 d0                	add    %edx,%eax
f011f355:	48                   	dec    %eax
f011f356:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f011f35c:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011f362:	ba 00 00 00 00       	mov    $0x0,%edx
f011f367:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f011f36d:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011f373:	29 d0                	sub    %edx,%eax
f011f375:	89 c1                	mov    %eax,%ecx
f011f377:	c7 85 d8 fe ff ff 00 	movl   $0x1000,-0x128(%ebp)
f011f37e:	10 00 00 
f011f381:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011f386:	0f b6 c0             	movzbl %al,%eax
f011f389:	c1 e0 04             	shl    $0x4,%eax
f011f38c:	89 c2                	mov    %eax,%edx
f011f38e:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011f394:	01 d0                	add    %edx,%eax
f011f396:	48                   	dec    %eax
f011f397:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
f011f39d:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011f3a3:	ba 00 00 00 00       	mov    $0x0,%edx
f011f3a8:	f7 b5 d8 fe ff ff    	divl   -0x128(%ebp)
f011f3ae:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011f3b4:	29 d0                	sub    %edx,%eax
f011f3b6:	01 c8                	add    %ecx,%eax
f011f3b8:	8d 90 00 40 20 ff    	lea    -0xdfc000(%eax),%edx
f011f3be:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011f3c4:	39 c2                	cmp    %eax,%edx
f011f3c6:	74 17                	je     f011f3df <test_kmalloc_worstfit+0x103b>
		panic("Worst Fit not working correctly");
f011f3c8:	83 ec 04             	sub    $0x4,%esp
f011f3cb:	68 74 9e 13 f0       	push   $0xf0139e74
f011f3d0:	68 9a 04 00 00       	push   $0x49a
f011f3d5:	68 5a 97 13 f0       	push   $0xf013975a
f011f3da:	e8 d1 0d fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f3df:	e8 a0 52 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011f3e4:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f3e7:	74 17                	je     f011f400 <test_kmalloc_worstfit+0x105c>
f011f3e9:	83 ec 04             	sub    $0x4,%esp
f011f3ec:	68 74 97 13 f0       	push   $0xf0139774
f011f3f1:	68 9b 04 00 00       	push   $0x49b
f011f3f6:	68 5a 97 13 f0       	push   $0xf013975a
f011f3fb:	e8 b0 0d fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (4*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f011f400:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f403:	e8 be d5 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011f408:	29 c3                	sub    %eax,%ebx
f011f40a:	89 d8                	mov    %ebx,%eax
f011f40c:	83 f8 01             	cmp    $0x1,%eax
f011f40f:	74 17                	je     f011f428 <test_kmalloc_worstfit+0x1084>
f011f411:	83 ec 04             	sub    $0x4,%esp
f011f414:	68 92 9c 13 f0       	push   $0xf0139c92
f011f419:	68 9c 04 00 00       	push   $0x49c
f011f41e:	68 5a 97 13 f0       	push   $0xf013975a
f011f423:	e8 88 0d fe ff       	call   f01001b0 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f428:	ff 45 e8             	incl   -0x18(%ebp)
f011f42b:	83 ec 08             	sub    $0x8,%esp
f011f42e:	ff 75 e8             	pushl  -0x18(%ebp)
f011f431:	68 94 9e 13 f0       	push   $0xf0139e94
f011f436:	e8 f6 19 fe ff       	call   f0100e31 <cprintf>
f011f43b:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011f43e:	e8 83 d5 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011f443:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f446:	e8 39 52 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011f44b:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(2*Mega - 4*kilo); 		// Use Hole 5 -> Hole 5 = 0
f011f44e:	83 ec 0c             	sub    $0xc,%esp
f011f451:	68 00 f0 1f 00       	push   $0x1ff000
f011f456:	e8 04 8b fe ff       	call   f0107f5f <kmalloc>
f011f45b:	83 c4 10             	add    $0x10,%esp
f011f45e:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x09201000)
f011f464:	c7 85 d0 fe ff ff 00 	movl   $0x1000,-0x130(%ebp)
f011f46b:	10 00 00 
f011f46e:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011f473:	0f b6 d0             	movzbl %al,%edx
f011f476:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011f47c:	01 d0                	add    %edx,%eax
f011f47e:	48                   	dec    %eax
f011f47f:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
f011f485:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011f48b:	ba 00 00 00 00       	mov    $0x0,%edx
f011f490:	f7 b5 d0 fe ff ff    	divl   -0x130(%ebp)
f011f496:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011f49c:	29 d0                	sub    %edx,%eax
f011f49e:	89 c1                	mov    %eax,%ecx
f011f4a0:	c7 85 c8 fe ff ff 00 	movl   $0x1000,-0x138(%ebp)
f011f4a7:	10 00 00 
f011f4aa:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011f4af:	0f b6 c0             	movzbl %al,%eax
f011f4b2:	c1 e0 04             	shl    $0x4,%eax
f011f4b5:	89 c2                	mov    %eax,%edx
f011f4b7:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011f4bd:	01 d0                	add    %edx,%eax
f011f4bf:	48                   	dec    %eax
f011f4c0:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
f011f4c6:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011f4cc:	ba 00 00 00 00       	mov    $0x0,%edx
f011f4d1:	f7 b5 c8 fe ff ff    	divl   -0x138(%ebp)
f011f4d7:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011f4dd:	29 d0                	sub    %edx,%eax
f011f4df:	01 c8                	add    %ecx,%eax
f011f4e1:	8d 90 00 50 20 ff    	lea    -0xdfb000(%eax),%edx
f011f4e7:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011f4ed:	39 c2                	cmp    %eax,%edx
f011f4ef:	74 17                	je     f011f508 <test_kmalloc_worstfit+0x1164>
		panic("Worst Fit not working correctly");
f011f4f1:	83 ec 04             	sub    $0x4,%esp
f011f4f4:	68 74 9e 13 f0       	push   $0xf0139e74
f011f4f9:	68 a3 04 00 00       	push   $0x4a3
f011f4fe:	68 5a 97 13 f0       	push   $0xf013975a
f011f503:	e8 a8 0c fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f508:	e8 77 51 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011f50d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f510:	74 17                	je     f011f529 <test_kmalloc_worstfit+0x1185>
f011f512:	83 ec 04             	sub    $0x4,%esp
f011f515:	68 74 97 13 f0       	push   $0xf0139774
f011f51a:	68 a4 04 00 00       	push   $0x4a4
f011f51f:	68 5a 97 13 f0       	push   $0xf013975a
f011f524:	e8 87 0c fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (2*Mega - 4*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f011f529:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f52c:	e8 95 d4 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011f531:	29 c3                	sub    %eax,%ebx
f011f533:	89 d8                	mov    %ebx,%eax
f011f535:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f011f53a:	74 17                	je     f011f553 <test_kmalloc_worstfit+0x11af>
f011f53c:	83 ec 04             	sub    $0x4,%esp
f011f53f:	68 92 9c 13 f0       	push   $0xf0139c92
f011f544:	68 a5 04 00 00       	push   $0x4a5
f011f549:	68 5a 97 13 f0       	push   $0xf013975a
f011f54e:	e8 5d 0c fe ff       	call   f01001b0 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f553:	ff 45 e8             	incl   -0x18(%ebp)
f011f556:	83 ec 08             	sub    $0x8,%esp
f011f559:	ff 75 e8             	pushl  -0x18(%ebp)
f011f55c:	68 94 9e 13 f0       	push   $0xf0139e94
f011f561:	e8 cb 18 fe ff       	call   f0100e31 <cprintf>
f011f566:	83 c4 10             	add    $0x10,%esp

	// Check that worst fit returns null in case all holes are not free
	freeFrames = sys_calculate_free_frames() ;
f011f569:	e8 58 d4 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011f56e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f571:	e8 0e 51 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011f576:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(4*Mega); 		//No Suitable hole
f011f579:	83 ec 0c             	sub    $0xc,%esp
f011f57c:	68 00 00 40 00       	push   $0x400000
f011f581:	e8 d9 89 fe ff       	call   f0107f5f <kmalloc>
f011f586:	83 c4 10             	add    $0x10,%esp
f011f589:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
	if((uint32)tempAddress != 0x0)
f011f58f:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011f595:	85 c0                	test   %eax,%eax
f011f597:	74 17                	je     f011f5b0 <test_kmalloc_worstfit+0x120c>
		panic("Worst Fit not working correctly");
f011f599:	83 ec 04             	sub    $0x4,%esp
f011f59c:	68 74 9e 13 f0       	push   $0xf0139e74
f011f5a1:	68 ad 04 00 00       	push   $0x4ad
f011f5a6:	68 5a 97 13 f0       	push   $0xf013975a
f011f5ab:	e8 00 0c fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f5b0:	e8 cf 50 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011f5b5:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f5b8:	74 17                	je     f011f5d1 <test_kmalloc_worstfit+0x122d>
f011f5ba:	83 ec 04             	sub    $0x4,%esp
f011f5bd:	68 74 97 13 f0       	push   $0xf0139774
f011f5c2:	68 ae 04 00 00       	push   $0x4ae
f011f5c7:	68 5a 97 13 f0       	push   $0xf013975a
f011f5cc:	e8 df 0b fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  0) panic("Wrong allocation:");
f011f5d1:	e8 f0 d3 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011f5d6:	89 c2                	mov    %eax,%edx
f011f5d8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011f5db:	39 c2                	cmp    %eax,%edx
f011f5dd:	74 17                	je     f011f5f6 <test_kmalloc_worstfit+0x1252>
f011f5df:	83 ec 04             	sub    $0x4,%esp
f011f5e2:	68 92 9c 13 f0       	push   $0xf0139c92
f011f5e7:	68 af 04 00 00       	push   $0x4af
f011f5ec:	68 5a 97 13 f0       	push   $0xf013975a
f011f5f1:	e8 ba 0b fe ff       	call   f01001b0 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f5f6:	ff 45 e8             	incl   -0x18(%ebp)
f011f5f9:	83 ec 08             	sub    $0x8,%esp
f011f5fc:	ff 75 e8             	pushl  -0x18(%ebp)
f011f5ff:	68 94 9e 13 f0       	push   $0xf0139e94
f011f604:	e8 28 18 fe ff       	call   f0100e31 <cprintf>
f011f609:	83 c4 10             	add    $0x10,%esp

	cprintf("Congratulations!! test Worst Fit completed successfully.\n");
f011f60c:	83 ec 0c             	sub    $0xc,%esp
f011f60f:	68 a8 9e 13 f0       	push   $0xf0139ea8
f011f614:	e8 18 18 fe ff       	call   f0100e31 <cprintf>
f011f619:	83 c4 10             	add    $0x10,%esp


	return 1;
f011f61c:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011f621:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011f624:	5b                   	pop    %ebx
f011f625:	5f                   	pop    %edi
f011f626:	5d                   	pop    %ebp
f011f627:	c3                   	ret    

f011f628 <test_kfree>:

int test_kfree()
{
f011f628:	55                   	push   %ebp
f011f629:	89 e5                	mov    %esp,%ebp
f011f62b:	57                   	push   %edi
f011f62c:	53                   	push   %ebx
f011f62d:	81 ec 40 02 00 00    	sub    $0x240,%esp
	cprintf("==============================================\n");
f011f633:	83 ec 0c             	sub    $0xc,%esp
f011f636:	68 9c 96 13 f0       	push   $0xf013969c
f011f63b:	e8 f1 17 fe ff       	call   f0100e31 <cprintf>
f011f640:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011f643:	83 ec 0c             	sub    $0xc,%esp
f011f646:	68 cc 96 13 f0       	push   $0xf01396cc
f011f64b:	e8 e1 17 fe ff       	call   f0100e31 <cprintf>
f011f650:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011f653:	83 ec 0c             	sub    $0xc,%esp
f011f656:	68 9c 96 13 f0       	push   $0xf013969c
f011f65b:	e8 d1 17 fe ff       	call   f0100e31 <cprintf>
f011f660:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f011f663:	c6 45 e7 80          	movb   $0x80,-0x19(%ebp)
	char maxByte = 0x7F;
f011f667:	c6 45 e6 7f          	movb   $0x7f,-0x1a(%ebp)
	short minShort = 1<<15 ;
f011f66b:	66 c7 45 e4 00 80    	movw   $0x8000,-0x1c(%ebp)
	short maxShort = 0x7FFF;
f011f671:	66 c7 45 e2 ff 7f    	movw   $0x7fff,-0x1e(%ebp)
	int minInt = 1<<31 ;
f011f677:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
	int maxInt = 0x7FFFFFFF;
f011f67e:	c7 45 d8 ff ff ff 7f 	movl   $0x7fffffff,-0x28(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f011f685:	e8 3c d3 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011f68a:	89 45 d4             	mov    %eax,-0x2c(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f011f68d:	8d 95 68 fe ff ff    	lea    -0x198(%ebp),%edx
f011f693:	b9 14 00 00 00       	mov    $0x14,%ecx
f011f698:	b8 00 00 00 00       	mov    $0x0,%eax
f011f69d:	89 d7                	mov    %edx,%edi
f011f69f:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f011f6a1:	8d 95 18 fe ff ff    	lea    -0x1e8(%ebp),%edx
f011f6a7:	b9 14 00 00 00       	mov    $0x14,%ecx
f011f6ac:	b8 00 00 00 00       	mov    $0x0,%eax
f011f6b1:	89 d7                	mov    %edx,%edi
f011f6b3:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f011f6b5:	8d 95 c8 fd ff ff    	lea    -0x238(%ebp),%edx
f011f6bb:	b9 14 00 00 00       	mov    $0x14,%ecx
f011f6c0:	b8 00 00 00 00       	mov    $0x0,%eax
f011f6c5:	89 d7                	mov    %edx,%edi
f011f6c7:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011f6c9:	e8 f8 d2 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011f6ce:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011f6d1:	e8 ae 4f fe ff       	call   f0104684 <pf_calculate_free_frames>
f011f6d6:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f011f6d9:	83 ec 0c             	sub    $0xc,%esp
f011f6dc:	68 00 fc 1f 00       	push   $0x1ffc00
f011f6e1:	e8 79 88 fe ff       	call   f0107f5f <kmalloc>
f011f6e6:	83 c4 10             	add    $0x10,%esp
f011f6e9:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011f6ef:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f011f6f5:	89 c1                	mov    %eax,%ecx
f011f6f7:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f011f6fe:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011f703:	0f b6 d0             	movzbl %al,%edx
f011f706:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011f709:	01 d0                	add    %edx,%eax
f011f70b:	48                   	dec    %eax
f011f70c:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f011f70f:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011f712:	ba 00 00 00 00       	mov    $0x0,%edx
f011f717:	f7 75 c8             	divl   -0x38(%ebp)
f011f71a:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011f71d:	29 d0                	sub    %edx,%eax
f011f71f:	89 c3                	mov    %eax,%ebx
f011f721:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f011f728:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011f72d:	0f b6 c0             	movzbl %al,%eax
f011f730:	c1 e0 04             	shl    $0x4,%eax
f011f733:	89 c2                	mov    %eax,%edx
f011f735:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011f738:	01 d0                	add    %edx,%eax
f011f73a:	48                   	dec    %eax
f011f73b:	89 45 bc             	mov    %eax,-0x44(%ebp)
f011f73e:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011f741:	ba 00 00 00 00       	mov    $0x0,%edx
f011f746:	f7 75 c0             	divl   -0x40(%ebp)
f011f749:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011f74c:	29 d0                	sub    %edx,%eax
f011f74e:	01 d8                	add    %ebx,%eax
f011f750:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011f755:	39 c1                	cmp    %eax,%ecx
f011f757:	74 17                	je     f011f770 <test_kfree+0x148>
f011f759:	83 ec 04             	sub    $0x4,%esp
f011f75c:	68 40 98 13 f0       	push   $0xf0139840
f011f761:	68 d7 04 00 00       	push   $0x4d7
f011f766:	68 5a 97 13 f0       	push   $0xf013975a
f011f76b:	e8 40 0a fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f770:	e8 0f 4f fe ff       	call   f0104684 <pf_calculate_free_frames>
f011f775:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011f778:	74 17                	je     f011f791 <test_kfree+0x169>
f011f77a:	83 ec 04             	sub    $0x4,%esp
f011f77d:	68 74 97 13 f0       	push   $0xf0139774
f011f782:	68 d8 04 00 00       	push   $0x4d8
f011f787:	68 5a 97 13 f0       	push   $0xf013975a
f011f78c:	e8 1f 0a fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f011f791:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011f794:	e8 2d d2 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011f799:	29 c3                	sub    %eax,%ebx
f011f79b:	89 d8                	mov    %ebx,%eax
f011f79d:	3d 00 02 00 00       	cmp    $0x200,%eax
f011f7a2:	74 17                	je     f011f7bb <test_kfree+0x193>
f011f7a4:	83 ec 04             	sub    $0x4,%esp
f011f7a7:	68 dc 97 13 f0       	push   $0xf01397dc
f011f7ac:	68 d9 04 00 00       	push   $0x4d9
f011f7b1:	68 5a 97 13 f0       	push   $0xf013975a
f011f7b6:	e8 f5 09 fe ff       	call   f01001b0 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f011f7bb:	c7 85 68 fe ff ff ff 	movl   $0x1ffbff,-0x198(%ebp)
f011f7c2:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011f7c5:	e8 fc d1 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011f7ca:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011f7cd:	e8 b2 4e fe ff       	call   f0104684 <pf_calculate_free_frames>
f011f7d2:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f011f7d5:	83 ec 0c             	sub    $0xc,%esp
f011f7d8:	68 00 fc 1f 00       	push   $0x1ffc00
f011f7dd:	e8 7d 87 fe ff       	call   f0107f5f <kmalloc>
f011f7e2:	83 c4 10             	add    $0x10,%esp
f011f7e5:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011f7eb:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f011f7f1:	89 c1                	mov    %eax,%ecx
f011f7f3:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f011f7fa:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011f7ff:	0f b6 d0             	movzbl %al,%edx
f011f802:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011f805:	01 d0                	add    %edx,%eax
f011f807:	48                   	dec    %eax
f011f808:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f011f80b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011f80e:	ba 00 00 00 00       	mov    $0x0,%edx
f011f813:	f7 75 b8             	divl   -0x48(%ebp)
f011f816:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011f819:	29 d0                	sub    %edx,%eax
f011f81b:	89 c3                	mov    %eax,%ebx
f011f81d:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f011f824:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011f829:	0f b6 c0             	movzbl %al,%eax
f011f82c:	c1 e0 04             	shl    $0x4,%eax
f011f82f:	89 c2                	mov    %eax,%edx
f011f831:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011f834:	01 d0                	add    %edx,%eax
f011f836:	48                   	dec    %eax
f011f837:	89 45 ac             	mov    %eax,-0x54(%ebp)
f011f83a:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011f83d:	ba 00 00 00 00       	mov    $0x0,%edx
f011f842:	f7 75 b0             	divl   -0x50(%ebp)
f011f845:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011f848:	29 d0                	sub    %edx,%eax
f011f84a:	01 d8                	add    %ebx,%eax
f011f84c:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011f851:	39 c1                	cmp    %eax,%ecx
f011f853:	74 17                	je     f011f86c <test_kfree+0x244>
f011f855:	83 ec 04             	sub    $0x4,%esp
f011f858:	68 40 98 13 f0       	push   $0xf0139840
f011f85d:	68 e0 04 00 00       	push   $0x4e0
f011f862:	68 5a 97 13 f0       	push   $0xf013975a
f011f867:	e8 44 09 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f86c:	e8 13 4e fe ff       	call   f0104684 <pf_calculate_free_frames>
f011f871:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011f874:	74 17                	je     f011f88d <test_kfree+0x265>
f011f876:	83 ec 04             	sub    $0x4,%esp
f011f879:	68 74 97 13 f0       	push   $0xf0139774
f011f87e:	68 e1 04 00 00       	push   $0x4e1
f011f883:	68 5a 97 13 f0       	push   $0xf013975a
f011f888:	e8 23 09 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f011f88d:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011f890:	e8 31 d1 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011f895:	29 c3                	sub    %eax,%ebx
f011f897:	89 d8                	mov    %ebx,%eax
f011f899:	3d 00 02 00 00       	cmp    $0x200,%eax
f011f89e:	74 17                	je     f011f8b7 <test_kfree+0x28f>
f011f8a0:	83 ec 04             	sub    $0x4,%esp
f011f8a3:	68 dc 97 13 f0       	push   $0xf01397dc
f011f8a8:	68 e2 04 00 00       	push   $0x4e2
f011f8ad:	68 5a 97 13 f0       	push   $0xf013975a
f011f8b2:	e8 f9 08 fe ff       	call   f01001b0 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f011f8b7:	c7 85 6c fe ff ff ff 	movl   $0x1ffbff,-0x194(%ebp)
f011f8be:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011f8c1:	e8 00 d1 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011f8c6:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011f8c9:	e8 b6 4d fe ff       	call   f0104684 <pf_calculate_free_frames>
f011f8ce:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f011f8d1:	83 ec 0c             	sub    $0xc,%esp
f011f8d4:	68 00 08 00 00       	push   $0x800
f011f8d9:	e8 81 86 fe ff       	call   f0107f5f <kmalloc>
f011f8de:	83 c4 10             	add    $0x10,%esp
f011f8e1:	89 85 d0 fd ff ff    	mov    %eax,-0x230(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011f8e7:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f011f8ed:	89 c1                	mov    %eax,%ecx
f011f8ef:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f011f8f6:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011f8fb:	0f b6 d0             	movzbl %al,%edx
f011f8fe:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011f901:	01 d0                	add    %edx,%eax
f011f903:	48                   	dec    %eax
f011f904:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f011f907:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011f90a:	ba 00 00 00 00       	mov    $0x0,%edx
f011f90f:	f7 75 a8             	divl   -0x58(%ebp)
f011f912:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011f915:	29 d0                	sub    %edx,%eax
f011f917:	89 c3                	mov    %eax,%ebx
f011f919:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f011f920:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011f925:	0f b6 c0             	movzbl %al,%eax
f011f928:	c1 e0 04             	shl    $0x4,%eax
f011f92b:	89 c2                	mov    %eax,%edx
f011f92d:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011f930:	01 d0                	add    %edx,%eax
f011f932:	48                   	dec    %eax
f011f933:	89 45 9c             	mov    %eax,-0x64(%ebp)
f011f936:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011f939:	ba 00 00 00 00       	mov    $0x0,%edx
f011f93e:	f7 75 a0             	divl   -0x60(%ebp)
f011f941:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011f944:	29 d0                	sub    %edx,%eax
f011f946:	01 d8                	add    %ebx,%eax
f011f948:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011f94d:	39 c1                	cmp    %eax,%ecx
f011f94f:	74 17                	je     f011f968 <test_kfree+0x340>
f011f951:	83 ec 04             	sub    $0x4,%esp
f011f954:	68 40 98 13 f0       	push   $0xf0139840
f011f959:	68 e9 04 00 00       	push   $0x4e9
f011f95e:	68 5a 97 13 f0       	push   $0xf013975a
f011f963:	e8 48 08 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f968:	e8 17 4d fe ff       	call   f0104684 <pf_calculate_free_frames>
f011f96d:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011f970:	74 17                	je     f011f989 <test_kfree+0x361>
f011f972:	83 ec 04             	sub    $0x4,%esp
f011f975:	68 74 97 13 f0       	push   $0xf0139774
f011f97a:	68 ea 04 00 00       	push   $0x4ea
f011f97f:	68 5a 97 13 f0       	push   $0xf013975a
f011f984:	e8 27 08 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f011f989:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011f98c:	e8 35 d0 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011f991:	29 c3                	sub    %eax,%ebx
f011f993:	89 d8                	mov    %ebx,%eax
f011f995:	83 f8 01             	cmp    $0x1,%eax
f011f998:	74 17                	je     f011f9b1 <test_kfree+0x389>
f011f99a:	83 ec 04             	sub    $0x4,%esp
f011f99d:	68 dc 97 13 f0       	push   $0xf01397dc
f011f9a2:	68 eb 04 00 00       	push   $0x4eb
f011f9a7:	68 5a 97 13 f0       	push   $0xf013975a
f011f9ac:	e8 ff 07 fe ff       	call   f01001b0 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f011f9b1:	c7 85 70 fe ff ff ff 	movl   $0x7ff,-0x190(%ebp)
f011f9b8:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f011f9bb:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f011f9c1:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f011f9c4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011f9cb:	eb 0e                	jmp    f011f9db <test_kfree+0x3b3>
		{
			ptr[i] = 2 ;
f011f9cd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011f9d0:	8b 45 98             	mov    -0x68(%ebp),%eax
f011f9d3:	01 d0                	add    %edx,%eax
f011f9d5:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f011f9d8:	ff 45 f4             	incl   -0xc(%ebp)
f011f9db:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f011f9e1:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011f9e4:	7f e7                	jg     f011f9cd <test_kfree+0x3a5>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011f9e6:	e8 db cf fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011f9eb:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011f9ee:	e8 91 4c fe ff       	call   f0104684 <pf_calculate_free_frames>
f011f9f3:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f011f9f6:	83 ec 0c             	sub    $0xc,%esp
f011f9f9:	68 00 08 00 00       	push   $0x800
f011f9fe:	e8 5c 85 fe ff       	call   f0107f5f <kmalloc>
f011fa03:	83 c4 10             	add    $0x10,%esp
f011fa06:	89 85 d4 fd ff ff    	mov    %eax,-0x22c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011fa0c:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f011fa12:	89 c1                	mov    %eax,%ecx
f011fa14:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011fa1b:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011fa20:	0f b6 d0             	movzbl %al,%edx
f011fa23:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011fa26:	01 d0                	add    %edx,%eax
f011fa28:	48                   	dec    %eax
f011fa29:	89 45 90             	mov    %eax,-0x70(%ebp)
f011fa2c:	8b 45 90             	mov    -0x70(%ebp),%eax
f011fa2f:	ba 00 00 00 00       	mov    $0x0,%edx
f011fa34:	f7 75 94             	divl   -0x6c(%ebp)
f011fa37:	8b 45 90             	mov    -0x70(%ebp),%eax
f011fa3a:	29 d0                	sub    %edx,%eax
f011fa3c:	89 c3                	mov    %eax,%ebx
f011fa3e:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011fa45:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011fa4a:	0f b6 c0             	movzbl %al,%eax
f011fa4d:	c1 e0 04             	shl    $0x4,%eax
f011fa50:	89 c2                	mov    %eax,%edx
f011fa52:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011fa55:	01 d0                	add    %edx,%eax
f011fa57:	48                   	dec    %eax
f011fa58:	89 45 88             	mov    %eax,-0x78(%ebp)
f011fa5b:	8b 45 88             	mov    -0x78(%ebp),%eax
f011fa5e:	ba 00 00 00 00       	mov    $0x0,%edx
f011fa63:	f7 75 8c             	divl   -0x74(%ebp)
f011fa66:	8b 45 88             	mov    -0x78(%ebp),%eax
f011fa69:	29 d0                	sub    %edx,%eax
f011fa6b:	01 d8                	add    %ebx,%eax
f011fa6d:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f011fa72:	39 c1                	cmp    %eax,%ecx
f011fa74:	74 17                	je     f011fa8d <test_kfree+0x465>
f011fa76:	83 ec 04             	sub    $0x4,%esp
f011fa79:	68 40 98 13 f0       	push   $0xf0139840
f011fa7e:	68 f7 04 00 00       	push   $0x4f7
f011fa83:	68 5a 97 13 f0       	push   $0xf013975a
f011fa88:	e8 23 07 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fa8d:	e8 f2 4b fe ff       	call   f0104684 <pf_calculate_free_frames>
f011fa92:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011fa95:	74 17                	je     f011faae <test_kfree+0x486>
f011fa97:	83 ec 04             	sub    $0x4,%esp
f011fa9a:	68 74 97 13 f0       	push   $0xf0139774
f011fa9f:	68 f8 04 00 00       	push   $0x4f8
f011faa4:	68 5a 97 13 f0       	push   $0xf013975a
f011faa9:	e8 02 07 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f011faae:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011fab1:	e8 10 cf fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011fab6:	29 c3                	sub    %eax,%ebx
f011fab8:	89 d8                	mov    %ebx,%eax
f011faba:	83 f8 01             	cmp    $0x1,%eax
f011fabd:	74 17                	je     f011fad6 <test_kfree+0x4ae>
f011fabf:	83 ec 04             	sub    $0x4,%esp
f011fac2:	68 dc 97 13 f0       	push   $0xf01397dc
f011fac7:	68 f9 04 00 00       	push   $0x4f9
f011facc:	68 5a 97 13 f0       	push   $0xf013975a
f011fad1:	e8 da 06 fe ff       	call   f01001b0 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f011fad6:	c7 85 74 fe ff ff ff 	movl   $0x7ff,-0x18c(%ebp)
f011fadd:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f011fae0:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f011fae6:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f011fae9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011faf0:	eb 0e                	jmp    f011fb00 <test_kfree+0x4d8>
		{
			ptr[i] = 3 ;
f011faf2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011faf5:	8b 45 98             	mov    -0x68(%ebp),%eax
f011faf8:	01 d0                	add    %edx,%eax
f011fafa:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f011fafd:	ff 45 f4             	incl   -0xc(%ebp)
f011fb00:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011fb06:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011fb09:	7f e7                	jg     f011faf2 <test_kfree+0x4ca>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f011fb0b:	e8 b6 ce fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011fb10:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011fb13:	e8 6c 4b fe ff       	call   f0104684 <pf_calculate_free_frames>
f011fb18:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f011fb1b:	83 ec 0c             	sub    $0xc,%esp
f011fb1e:	68 00 1c 00 00       	push   $0x1c00
f011fb23:	e8 37 84 fe ff       	call   f0107f5f <kmalloc>
f011fb28:	83 c4 10             	add    $0x10,%esp
f011fb2b:	89 85 d8 fd ff ff    	mov    %eax,-0x228(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011fb31:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f011fb37:	89 c1                	mov    %eax,%ecx
f011fb39:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011fb40:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011fb45:	0f b6 d0             	movzbl %al,%edx
f011fb48:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011fb4b:	01 d0                	add    %edx,%eax
f011fb4d:	48                   	dec    %eax
f011fb4e:	89 45 80             	mov    %eax,-0x80(%ebp)
f011fb51:	8b 45 80             	mov    -0x80(%ebp),%eax
f011fb54:	ba 00 00 00 00       	mov    $0x0,%edx
f011fb59:	f7 75 84             	divl   -0x7c(%ebp)
f011fb5c:	8b 45 80             	mov    -0x80(%ebp),%eax
f011fb5f:	29 d0                	sub    %edx,%eax
f011fb61:	89 c3                	mov    %eax,%ebx
f011fb63:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011fb6a:	10 00 00 
f011fb6d:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011fb72:	0f b6 c0             	movzbl %al,%eax
f011fb75:	c1 e0 04             	shl    $0x4,%eax
f011fb78:	89 c2                	mov    %eax,%edx
f011fb7a:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011fb80:	01 d0                	add    %edx,%eax
f011fb82:	48                   	dec    %eax
f011fb83:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011fb89:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011fb8f:	ba 00 00 00 00       	mov    $0x0,%edx
f011fb94:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011fb9a:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011fba0:	29 d0                	sub    %edx,%eax
f011fba2:	01 d8                	add    %ebx,%eax
f011fba4:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f011fba9:	39 c1                	cmp    %eax,%ecx
f011fbab:	74 17                	je     f011fbc4 <test_kfree+0x59c>
f011fbad:	83 ec 04             	sub    $0x4,%esp
f011fbb0:	68 40 98 13 f0       	push   $0xf0139840
f011fbb5:	68 05 05 00 00       	push   $0x505
f011fbba:	68 5a 97 13 f0       	push   $0xf013975a
f011fbbf:	e8 ec 05 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fbc4:	e8 bb 4a fe ff       	call   f0104684 <pf_calculate_free_frames>
f011fbc9:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011fbcc:	74 17                	je     f011fbe5 <test_kfree+0x5bd>
f011fbce:	83 ec 04             	sub    $0x4,%esp
f011fbd1:	68 74 97 13 f0       	push   $0xf0139774
f011fbd6:	68 06 05 00 00       	push   $0x506
f011fbdb:	68 5a 97 13 f0       	push   $0xf013975a
f011fbe0:	e8 cb 05 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f011fbe5:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011fbe8:	e8 d9 cd fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011fbed:	29 c3                	sub    %eax,%ebx
f011fbef:	89 d8                	mov    %ebx,%eax
f011fbf1:	83 f8 02             	cmp    $0x2,%eax
f011fbf4:	74 17                	je     f011fc0d <test_kfree+0x5e5>
f011fbf6:	83 ec 04             	sub    $0x4,%esp
f011fbf9:	68 dc 97 13 f0       	push   $0xf01397dc
f011fbfe:	68 07 05 00 00       	push   $0x507
f011fc03:	68 5a 97 13 f0       	push   $0xf013975a
f011fc08:	e8 a3 05 fe ff       	call   f01001b0 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f011fc0d:	c7 85 78 fe ff ff ff 	movl   $0x1bff,-0x188(%ebp)
f011fc14:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f011fc17:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f011fc1d:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f011fc20:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011fc27:	eb 0e                	jmp    f011fc37 <test_kfree+0x60f>
		{
			ptr[i] = 4 ;
f011fc29:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011fc2c:	8b 45 98             	mov    -0x68(%ebp),%eax
f011fc2f:	01 d0                	add    %edx,%eax
f011fc31:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f011fc34:	ff 45 f4             	incl   -0xc(%ebp)
f011fc37:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011fc3d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011fc40:	7f e7                	jg     f011fc29 <test_kfree+0x601>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011fc42:	e8 7f cd fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011fc47:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011fc4a:	e8 35 4a fe ff       	call   f0104684 <pf_calculate_free_frames>
f011fc4f:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f011fc52:	83 ec 0c             	sub    $0xc,%esp
f011fc55:	68 00 fc 2f 00       	push   $0x2ffc00
f011fc5a:	e8 00 83 fe ff       	call   f0107f5f <kmalloc>
f011fc5f:	83 c4 10             	add    $0x10,%esp
f011fc62:	89 85 dc fd ff ff    	mov    %eax,-0x224(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011fc68:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f011fc6e:	89 c1                	mov    %eax,%ecx
f011fc70:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011fc77:	10 00 00 
f011fc7a:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011fc7f:	0f b6 d0             	movzbl %al,%edx
f011fc82:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011fc88:	01 d0                	add    %edx,%eax
f011fc8a:	48                   	dec    %eax
f011fc8b:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011fc91:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011fc97:	ba 00 00 00 00       	mov    $0x0,%edx
f011fc9c:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011fca2:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011fca8:	29 d0                	sub    %edx,%eax
f011fcaa:	89 c3                	mov    %eax,%ebx
f011fcac:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011fcb3:	10 00 00 
f011fcb6:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011fcbb:	0f b6 c0             	movzbl %al,%eax
f011fcbe:	c1 e0 04             	shl    $0x4,%eax
f011fcc1:	89 c2                	mov    %eax,%edx
f011fcc3:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011fcc9:	01 d0                	add    %edx,%eax
f011fccb:	48                   	dec    %eax
f011fccc:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011fcd2:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011fcd8:	ba 00 00 00 00       	mov    $0x0,%edx
f011fcdd:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011fce3:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011fce9:	29 d0                	sub    %edx,%eax
f011fceb:	01 d8                	add    %ebx,%eax
f011fced:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f011fcf2:	39 c1                	cmp    %eax,%ecx
f011fcf4:	74 17                	je     f011fd0d <test_kfree+0x6e5>
f011fcf6:	83 ec 04             	sub    $0x4,%esp
f011fcf9:	68 40 98 13 f0       	push   $0xf0139840
f011fcfe:	68 13 05 00 00       	push   $0x513
f011fd03:	68 5a 97 13 f0       	push   $0xf013975a
f011fd08:	e8 a3 04 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fd0d:	e8 72 49 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011fd12:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011fd15:	74 17                	je     f011fd2e <test_kfree+0x706>
f011fd17:	83 ec 04             	sub    $0x4,%esp
f011fd1a:	68 74 97 13 f0       	push   $0xf0139774
f011fd1f:	68 14 05 00 00       	push   $0x514
f011fd24:	68 5a 97 13 f0       	push   $0xf013975a
f011fd29:	e8 82 04 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f011fd2e:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011fd31:	e8 90 cc fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011fd36:	29 c3                	sub    %eax,%ebx
f011fd38:	89 d8                	mov    %ebx,%eax
f011fd3a:	3d 00 03 00 00       	cmp    $0x300,%eax
f011fd3f:	74 17                	je     f011fd58 <test_kfree+0x730>
f011fd41:	83 ec 04             	sub    $0x4,%esp
f011fd44:	68 dc 97 13 f0       	push   $0xf01397dc
f011fd49:	68 15 05 00 00       	push   $0x515
f011fd4e:	68 5a 97 13 f0       	push   $0xf013975a
f011fd53:	e8 58 04 fe ff       	call   f01001b0 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f011fd58:	c7 85 7c fe ff ff ff 	movl   $0x2ffbff,-0x184(%ebp)
f011fd5f:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f011fd62:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f011fd68:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f011fd6b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011fd72:	eb 0e                	jmp    f011fd82 <test_kfree+0x75a>
		{
			ptr[i] = 5 ;
f011fd74:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011fd77:	8b 45 98             	mov    -0x68(%ebp),%eax
f011fd7a:	01 d0                	add    %edx,%eax
f011fd7c:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f011fd7f:	ff 45 f4             	incl   -0xc(%ebp)
f011fd82:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011fd88:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011fd8b:	7f e7                	jg     f011fd74 <test_kfree+0x74c>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f011fd8d:	e8 34 cc fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011fd92:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011fd95:	e8 ea 48 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011fd9a:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f011fd9d:	83 ec 0c             	sub    $0xc,%esp
f011fda0:	68 00 fc 5f 00       	push   $0x5ffc00
f011fda5:	e8 b5 81 fe ff       	call   f0107f5f <kmalloc>
f011fdaa:	83 c4 10             	add    $0x10,%esp
f011fdad:	89 85 e0 fd ff ff    	mov    %eax,-0x220(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011fdb3:	8b 85 e0 fd ff ff    	mov    -0x220(%ebp),%eax
f011fdb9:	89 c1                	mov    %eax,%ecx
f011fdbb:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011fdc2:	10 00 00 
f011fdc5:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011fdca:	0f b6 d0             	movzbl %al,%edx
f011fdcd:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011fdd3:	01 d0                	add    %edx,%eax
f011fdd5:	48                   	dec    %eax
f011fdd6:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011fddc:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011fde2:	ba 00 00 00 00       	mov    $0x0,%edx
f011fde7:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011fded:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011fdf3:	29 d0                	sub    %edx,%eax
f011fdf5:	89 c3                	mov    %eax,%ebx
f011fdf7:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011fdfe:	10 00 00 
f011fe01:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011fe06:	0f b6 c0             	movzbl %al,%eax
f011fe09:	c1 e0 04             	shl    $0x4,%eax
f011fe0c:	89 c2                	mov    %eax,%edx
f011fe0e:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011fe14:	01 d0                	add    %edx,%eax
f011fe16:	48                   	dec    %eax
f011fe17:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011fe1d:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011fe23:	ba 00 00 00 00       	mov    $0x0,%edx
f011fe28:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011fe2e:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011fe34:	29 d0                	sub    %edx,%eax
f011fe36:	01 d8                	add    %ebx,%eax
f011fe38:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f011fe3d:	39 c1                	cmp    %eax,%ecx
f011fe3f:	74 17                	je     f011fe58 <test_kfree+0x830>
f011fe41:	83 ec 04             	sub    $0x4,%esp
f011fe44:	68 40 98 13 f0       	push   $0xf0139840
f011fe49:	68 21 05 00 00       	push   $0x521
f011fe4e:	68 5a 97 13 f0       	push   $0xf013975a
f011fe53:	e8 58 03 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fe58:	e8 27 48 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011fe5d:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011fe60:	74 17                	je     f011fe79 <test_kfree+0x851>
f011fe62:	83 ec 04             	sub    $0x4,%esp
f011fe65:	68 74 97 13 f0       	push   $0xf0139774
f011fe6a:	68 22 05 00 00       	push   $0x522
f011fe6f:	68 5a 97 13 f0       	push   $0xf013975a
f011fe74:	e8 37 03 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f011fe79:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011fe7c:	e8 45 cb fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011fe81:	29 c3                	sub    %eax,%ebx
f011fe83:	89 d8                	mov    %ebx,%eax
f011fe85:	3d 00 06 00 00       	cmp    $0x600,%eax
f011fe8a:	74 17                	je     f011fea3 <test_kfree+0x87b>
f011fe8c:	83 ec 04             	sub    $0x4,%esp
f011fe8f:	68 dc 97 13 f0       	push   $0xf01397dc
f011fe94:	68 23 05 00 00       	push   $0x523
f011fe99:	68 5a 97 13 f0       	push   $0xf013975a
f011fe9e:	e8 0d 03 fe ff       	call   f01001b0 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f011fea3:	c7 85 80 fe ff ff ff 	movl   $0x5ffbff,-0x180(%ebp)
f011feaa:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f011fead:	e8 14 cb fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011feb2:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011feb5:	e8 ca 47 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011feba:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f011febd:	83 ec 0c             	sub    $0xc,%esp
f011fec0:	68 00 38 00 00       	push   $0x3800
f011fec5:	e8 95 80 fe ff       	call   f0107f5f <kmalloc>
f011feca:	83 c4 10             	add    $0x10,%esp
f011fecd:	89 85 e4 fd ff ff    	mov    %eax,-0x21c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011fed3:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f011fed9:	89 c1                	mov    %eax,%ecx
f011fedb:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011fee2:	10 00 00 
f011fee5:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011feea:	0f b6 d0             	movzbl %al,%edx
f011feed:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011fef3:	01 d0                	add    %edx,%eax
f011fef5:	48                   	dec    %eax
f011fef6:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011fefc:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011ff02:	ba 00 00 00 00       	mov    $0x0,%edx
f011ff07:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011ff0d:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011ff13:	29 d0                	sub    %edx,%eax
f011ff15:	89 c3                	mov    %eax,%ebx
f011ff17:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011ff1e:	10 00 00 
f011ff21:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f011ff26:	0f b6 c0             	movzbl %al,%eax
f011ff29:	c1 e0 04             	shl    $0x4,%eax
f011ff2c:	89 c2                	mov    %eax,%edx
f011ff2e:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011ff34:	01 d0                	add    %edx,%eax
f011ff36:	48                   	dec    %eax
f011ff37:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011ff3d:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011ff43:	ba 00 00 00 00       	mov    $0x0,%edx
f011ff48:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011ff4e:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011ff54:	29 d0                	sub    %edx,%eax
f011ff56:	01 d8                	add    %ebx,%eax
f011ff58:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f011ff5d:	39 c1                	cmp    %eax,%ecx
f011ff5f:	74 17                	je     f011ff78 <test_kfree+0x950>
f011ff61:	83 ec 04             	sub    $0x4,%esp
f011ff64:	68 40 98 13 f0       	push   $0xf0139840
f011ff69:	68 2a 05 00 00       	push   $0x52a
f011ff6e:	68 5a 97 13 f0       	push   $0xf013975a
f011ff73:	e8 38 02 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ff78:	e8 07 47 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011ff7d:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011ff80:	74 17                	je     f011ff99 <test_kfree+0x971>
f011ff82:	83 ec 04             	sub    $0x4,%esp
f011ff85:	68 74 97 13 f0       	push   $0xf0139774
f011ff8a:	68 2b 05 00 00       	push   $0x52b
f011ff8f:	68 5a 97 13 f0       	push   $0xf013975a
f011ff94:	e8 17 02 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f011ff99:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011ff9c:	e8 25 ca fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011ffa1:	29 c3                	sub    %eax,%ebx
f011ffa3:	89 d8                	mov    %ebx,%eax
f011ffa5:	83 f8 04             	cmp    $0x4,%eax
f011ffa8:	74 17                	je     f011ffc1 <test_kfree+0x999>
f011ffaa:	83 ec 04             	sub    $0x4,%esp
f011ffad:	68 dc 97 13 f0       	push   $0xf01397dc
f011ffb2:	68 2c 05 00 00       	push   $0x52c
f011ffb7:	68 5a 97 13 f0       	push   $0xf013975a
f011ffbc:	e8 ef 01 fe ff       	call   f01001b0 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f011ffc1:	c7 85 84 fe ff ff ff 	movl   $0x37ff,-0x17c(%ebp)
f011ffc8:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f011ffcb:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f011ffd1:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f011ffd4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011ffdb:	eb 0e                	jmp    f011ffeb <test_kfree+0x9c3>
		{
			ptr[i] = 7 ;
f011ffdd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011ffe0:	8b 45 98             	mov    -0x68(%ebp),%eax
f011ffe3:	01 d0                	add    %edx,%eax
f011ffe5:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f011ffe8:	ff 45 f4             	incl   -0xc(%ebp)
f011ffeb:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f011fff1:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011fff4:	7f e7                	jg     f011ffdd <test_kfree+0x9b5>
	}

	//kfree some of the allocated spaces [15%]
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f011fff6:	e8 cb c9 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f011fffb:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0120001:	e8 7e 46 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0120006:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[0]);
f012000c:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f0120012:	83 ec 0c             	sub    $0xc,%esp
f0120015:	50                   	push   %eax
f0120016:	e8 5e 7f fe ff       	call   f0107f79 <kfree>
f012001b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012001e:	e8 61 46 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0120023:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f0120029:	74 17                	je     f0120042 <test_kfree+0xa1a>
f012002b:	83 ec 04             	sub    $0x4,%esp
f012002e:	68 74 97 13 f0       	push   $0xf0139774
f0120033:	68 3b 05 00 00       	push   $0x53b
f0120038:	68 5a 97 13 f0       	push   $0xf013975a
f012003d:	e8 6e 01 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0120042:	e8 7f c9 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0120047:	89 c2                	mov    %eax,%edx
f0120049:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012004f:	29 c2                	sub    %eax,%edx
f0120051:	89 d0                	mov    %edx,%eax
f0120053:	3d 00 02 00 00       	cmp    $0x200,%eax
f0120058:	74 17                	je     f0120071 <test_kfree+0xa49>
f012005a:	83 ec 04             	sub    $0x4,%esp
f012005d:	68 e4 9e 13 f0       	push   $0xf0139ee4
f0120062:	68 3c 05 00 00       	push   $0x53c
f0120067:	68 5a 97 13 f0       	push   $0xf013975a
f012006c:	e8 3f 01 fe ff       	call   f01001b0 <_panic>

		//kfree 1st 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0120071:	e8 50 c9 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0120076:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012007c:	e8 03 46 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0120081:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[2]);
f0120087:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f012008d:	83 ec 0c             	sub    $0xc,%esp
f0120090:	50                   	push   %eax
f0120091:	e8 e3 7e fe ff       	call   f0107f79 <kfree>
f0120096:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120099:	e8 e6 45 fe ff       	call   f0104684 <pf_calculate_free_frames>
f012009e:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f01200a4:	74 17                	je     f01200bd <test_kfree+0xa95>
f01200a6:	83 ec 04             	sub    $0x4,%esp
f01200a9:	68 74 97 13 f0       	push   $0xf0139774
f01200ae:	68 42 05 00 00       	push   $0x542
f01200b3:	68 5a 97 13 f0       	push   $0xf013975a
f01200b8:	e8 f3 00 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1 ) panic("Wrong kfree: pages in memory are not freed correctly");
f01200bd:	e8 04 c9 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01200c2:	89 c2                	mov    %eax,%edx
f01200c4:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01200ca:	29 c2                	sub    %eax,%edx
f01200cc:	89 d0                	mov    %edx,%eax
f01200ce:	83 f8 01             	cmp    $0x1,%eax
f01200d1:	74 17                	je     f01200ea <test_kfree+0xac2>
f01200d3:	83 ec 04             	sub    $0x4,%esp
f01200d6:	68 e4 9e 13 f0       	push   $0xf0139ee4
f01200db:	68 43 05 00 00       	push   $0x543
f01200e0:	68 5a 97 13 f0       	push   $0xf013975a
f01200e5:	e8 c6 00 fe ff       	call   f01001b0 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f01200ea:	e8 d7 c8 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01200ef:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01200f5:	e8 8a 45 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01200fa:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[1]);
f0120100:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f0120106:	83 ec 0c             	sub    $0xc,%esp
f0120109:	50                   	push   %eax
f012010a:	e8 6a 7e fe ff       	call   f0107f79 <kfree>
f012010f:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120112:	e8 6d 45 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0120117:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f012011d:	74 17                	je     f0120136 <test_kfree+0xb0e>
f012011f:	83 ec 04             	sub    $0x4,%esp
f0120122:	68 74 97 13 f0       	push   $0xf0139774
f0120127:	68 49 05 00 00       	push   $0x549
f012012c:	68 5a 97 13 f0       	push   $0xf013975a
f0120131:	e8 7a 00 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f0120136:	e8 8b c8 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012013b:	89 c2                	mov    %eax,%edx
f012013d:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0120143:	29 c2                	sub    %eax,%edx
f0120145:	89 d0                	mov    %edx,%eax
f0120147:	3d 00 02 00 00       	cmp    $0x200,%eax
f012014c:	74 17                	je     f0120165 <test_kfree+0xb3d>
f012014e:	83 ec 04             	sub    $0x4,%esp
f0120151:	68 e4 9e 13 f0       	push   $0xf0139ee4
f0120156:	68 4a 05 00 00       	push   $0x54a
f012015b:	68 5a 97 13 f0       	push   $0xf013975a
f0120160:	e8 4b 00 fe ff       	call   f01001b0 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f0120165:	e8 5c c8 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012016a:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120170:	e8 0f 45 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0120175:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[6]);
f012017b:	8b 85 e0 fd ff ff    	mov    -0x220(%ebp),%eax
f0120181:	83 ec 0c             	sub    $0xc,%esp
f0120184:	50                   	push   %eax
f0120185:	e8 ef 7d fe ff       	call   f0107f79 <kfree>
f012018a:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012018d:	e8 f2 44 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0120192:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f0120198:	74 17                	je     f01201b1 <test_kfree+0xb89>
f012019a:	83 ec 04             	sub    $0x4,%esp
f012019d:	68 74 97 13 f0       	push   $0xf0139774
f01201a2:	68 50 05 00 00       	push   $0x550
f01201a7:	68 5a 97 13 f0       	push   $0xf013975a
f01201ac:	e8 ff ff fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f01201b1:	e8 10 c8 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01201b6:	89 c2                	mov    %eax,%edx
f01201b8:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01201be:	29 c2                	sub    %eax,%edx
f01201c0:	89 d0                	mov    %edx,%eax
f01201c2:	3d 00 06 00 00       	cmp    $0x600,%eax
f01201c7:	74 17                	je     f01201e0 <test_kfree+0xbb8>
f01201c9:	83 ec 04             	sub    $0x4,%esp
f01201cc:	68 e4 9e 13 f0       	push   $0xf0139ee4
f01201d1:	68 51 05 00 00       	push   $0x551
f01201d6:	68 5a 97 13 f0       	push   $0xf013975a
f01201db:	e8 d0 ff fd ff       	call   f01001b0 <_panic>
	}

	cprintf("\nkfree: current evaluation = 15%");
f01201e0:	83 ec 0c             	sub    $0xc,%esp
f01201e3:	68 1c 9f 13 f0       	push   $0xf0139f1c
f01201e8:	e8 44 0c fe ff       	call   f0100e31 <cprintf>
f01201ed:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
f01201f0:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f01201f6:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f01201f9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120200:	eb 1e                	jmp    f0120220 <test_kfree+0xbf8>
		{
			sums[3] += ptr[i] ;
f0120202:	8b 95 24 fe ff ff    	mov    -0x1dc(%ebp),%edx
f0120208:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012020b:	8b 45 98             	mov    -0x68(%ebp),%eax
f012020e:	01 c8                	add    %ecx,%eax
f0120210:	8a 00                	mov    (%eax),%al
f0120212:	0f be c0             	movsbl %al,%eax
f0120215:	01 d0                	add    %edx,%eax
f0120217:	89 85 24 fe ff ff    	mov    %eax,-0x1dc(%ebp)

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f012021d:	ff 45 f4             	incl   -0xc(%ebp)
f0120220:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0120226:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120229:	7f d7                	jg     f0120202 <test_kfree+0xbda>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f012022b:	8b 95 24 fe ff ff    	mov    -0x1dc(%ebp),%edx
f0120231:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0120237:	89 c1                	mov    %eax,%ecx
f0120239:	01 c9                	add    %ecx,%ecx
f012023b:	01 c8                	add    %ecx,%eax
f012023d:	39 c2                	cmp    %eax,%edx
f012023f:	74 17                	je     f0120258 <test_kfree+0xc30>
f0120241:	83 ec 04             	sub    $0x4,%esp
f0120244:	68 40 9f 13 f0       	push   $0xf0139f40
f0120249:	68 5e 05 00 00       	push   $0x55e
f012024e:	68 5a 97 13 f0       	push   $0xf013975a
f0120253:	e8 58 ff fd ff       	call   f01001b0 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f0120258:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f012025e:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0120261:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120268:	eb 1e                	jmp    f0120288 <test_kfree+0xc60>
		{
			sums[4] += ptr[i] ;
f012026a:	8b 95 28 fe ff ff    	mov    -0x1d8(%ebp),%edx
f0120270:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0120273:	8b 45 98             	mov    -0x68(%ebp),%eax
f0120276:	01 c8                	add    %ecx,%eax
f0120278:	8a 00                	mov    (%eax),%al
f012027a:	0f be c0             	movsbl %al,%eax
f012027d:	01 d0                	add    %edx,%eax
f012027f:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0120285:	ff 45 f4             	incl   -0xc(%ebp)
f0120288:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f012028e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120291:	7f d7                	jg     f012026a <test_kfree+0xc42>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f0120293:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f0120299:	8b 95 78 fe ff ff    	mov    -0x188(%ebp),%edx
f012029f:	c1 e2 02             	shl    $0x2,%edx
f01202a2:	39 d0                	cmp    %edx,%eax
f01202a4:	74 17                	je     f01202bd <test_kfree+0xc95>
f01202a6:	83 ec 04             	sub    $0x4,%esp
f01202a9:	68 40 9f 13 f0       	push   $0xf0139f40
f01202ae:	68 66 05 00 00       	push   $0x566
f01202b3:	68 5a 97 13 f0       	push   $0xf013975a
f01202b8:	e8 f3 fe fd ff       	call   f01001b0 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f01202bd:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f01202c3:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f01202c6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01202cd:	eb 1e                	jmp    f01202ed <test_kfree+0xcc5>
		{
			sums[5] += ptr[i] ;
f01202cf:	8b 95 2c fe ff ff    	mov    -0x1d4(%ebp),%edx
f01202d5:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01202d8:	8b 45 98             	mov    -0x68(%ebp),%eax
f01202db:	01 c8                	add    %ecx,%eax
f01202dd:	8a 00                	mov    (%eax),%al
f01202df:	0f be c0             	movsbl %al,%eax
f01202e2:	01 d0                	add    %edx,%eax
f01202e4:	89 85 2c fe ff ff    	mov    %eax,-0x1d4(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f01202ea:	ff 45 f4             	incl   -0xc(%ebp)
f01202ed:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f01202f3:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01202f6:	7f d7                	jg     f01202cf <test_kfree+0xca7>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f01202f8:	8b 8d 2c fe ff ff    	mov    -0x1d4(%ebp),%ecx
f01202fe:	8b 95 7c fe ff ff    	mov    -0x184(%ebp),%edx
f0120304:	89 d0                	mov    %edx,%eax
f0120306:	c1 e0 02             	shl    $0x2,%eax
f0120309:	01 d0                	add    %edx,%eax
f012030b:	39 c1                	cmp    %eax,%ecx
f012030d:	74 17                	je     f0120326 <test_kfree+0xcfe>
f012030f:	83 ec 04             	sub    $0x4,%esp
f0120312:	68 40 9f 13 f0       	push   $0xf0139f40
f0120317:	68 6e 05 00 00       	push   $0x56e
f012031c:	68 5a 97 13 f0       	push   $0xf013975a
f0120321:	e8 8a fe fd ff       	call   f01001b0 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f0120326:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f012032c:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f012032f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120336:	eb 1e                	jmp    f0120356 <test_kfree+0xd2e>
		{
			sums[7] += ptr[i] ;
f0120338:	8b 95 34 fe ff ff    	mov    -0x1cc(%ebp),%edx
f012033e:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0120341:	8b 45 98             	mov    -0x68(%ebp),%eax
f0120344:	01 c8                	add    %ecx,%eax
f0120346:	8a 00                	mov    (%eax),%al
f0120348:	0f be c0             	movsbl %al,%eax
f012034b:	01 d0                	add    %edx,%eax
f012034d:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0120353:	ff 45 f4             	incl   -0xc(%ebp)
f0120356:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f012035c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012035f:	7f d7                	jg     f0120338 <test_kfree+0xd10>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f0120361:	8b 8d 34 fe ff ff    	mov    -0x1cc(%ebp),%ecx
f0120367:	8b 95 84 fe ff ff    	mov    -0x17c(%ebp),%edx
f012036d:	89 d0                	mov    %edx,%eax
f012036f:	01 c0                	add    %eax,%eax
f0120371:	01 d0                	add    %edx,%eax
f0120373:	01 c0                	add    %eax,%eax
f0120375:	01 d0                	add    %edx,%eax
f0120377:	39 c1                	cmp    %eax,%ecx
f0120379:	74 17                	je     f0120392 <test_kfree+0xd6a>
f012037b:	83 ec 04             	sub    $0x4,%esp
f012037e:	68 40 9f 13 f0       	push   $0xf0139f40
f0120383:	68 76 05 00 00       	push   $0x576
f0120388:	68 5a 97 13 f0       	push   $0xf013975a
f012038d:	e8 1e fe fd ff       	call   f01001b0 <_panic>
	}
	cprintf("\b\b\b30%");
f0120392:	83 ec 0c             	sub    $0xc,%esp
f0120395:	68 73 9f 13 f0       	push   $0xf0139f73
f012039a:	e8 92 0a fe ff       	call   f0100e31 <cprintf>
f012039f:	83 c4 10             	add    $0x10,%esp

	//Allocate after kfree [15%]
	{
		//20 KB
		freeFrames = sys_calculate_free_frames() ;
f01203a2:	e8 1f c6 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01203a7:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01203aa:	e8 d5 42 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01203af:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[8] = kmalloc(20*kilo);
f01203b2:	83 ec 0c             	sub    $0xc,%esp
f01203b5:	68 00 50 00 00       	push   $0x5000
f01203ba:	e8 a0 7b fe ff       	call   f0107f5f <kmalloc>
f01203bf:	83 c4 10             	add    $0x10,%esp
f01203c2:	89 85 e8 fd ff ff    	mov    %eax,-0x218(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01203c8:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f01203ce:	89 c1                	mov    %eax,%ecx
f01203d0:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f01203d7:	10 00 00 
f01203da:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01203df:	0f b6 d0             	movzbl %al,%edx
f01203e2:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01203e8:	01 d0                	add    %edx,%eax
f01203ea:	48                   	dec    %eax
f01203eb:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f01203f1:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01203f7:	ba 00 00 00 00       	mov    $0x0,%edx
f01203fc:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f0120402:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0120408:	29 d0                	sub    %edx,%eax
f012040a:	89 c3                	mov    %eax,%ebx
f012040c:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f0120413:	10 00 00 
f0120416:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012041b:	0f b6 c0             	movzbl %al,%eax
f012041e:	c1 e0 04             	shl    $0x4,%eax
f0120421:	89 c2                	mov    %eax,%edx
f0120423:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0120429:	01 d0                	add    %edx,%eax
f012042b:	48                   	dec    %eax
f012042c:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f0120432:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0120438:	ba 00 00 00 00       	mov    $0x0,%edx
f012043d:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f0120443:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0120449:	29 d0                	sub    %edx,%eax
f012044b:	01 d8                	add    %ebx,%eax
f012044d:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0120452:	39 c1                	cmp    %eax,%ecx
f0120454:	74 17                	je     f012046d <test_kfree+0xe45>
f0120456:	83 ec 04             	sub    $0x4,%esp
f0120459:	68 40 98 13 f0       	push   $0xf0139840
f012045e:	68 80 05 00 00       	push   $0x580
f0120463:	68 5a 97 13 f0       	push   $0xf013975a
f0120468:	e8 43 fd fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012046d:	e8 12 42 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0120472:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120475:	74 17                	je     f012048e <test_kfree+0xe66>
f0120477:	83 ec 04             	sub    $0x4,%esp
f012047a:	68 74 97 13 f0       	push   $0xf0139774
f012047f:	68 81 05 00 00       	push   $0x581
f0120484:	68 5a 97 13 f0       	push   $0xf013975a
f0120489:	e8 22 fd fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
f012048e:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120491:	e8 30 c5 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0120496:	29 c3                	sub    %eax,%ebx
f0120498:	89 d8                	mov    %ebx,%eax
f012049a:	83 f8 05             	cmp    $0x5,%eax
f012049d:	74 17                	je     f01204b6 <test_kfree+0xe8e>
f012049f:	83 ec 04             	sub    $0x4,%esp
f01204a2:	68 dc 97 13 f0       	push   $0xf01397dc
f01204a7:	68 82 05 00 00       	push   $0x582
f01204ac:	68 5a 97 13 f0       	push   $0xf013975a
f01204b1:	e8 fa fc fd ff       	call   f01001b0 <_panic>
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
f01204b6:	c7 85 88 fe ff ff ff 	movl   $0x4fff,-0x178(%ebp)
f01204bd:	4f 00 00 
		ptr = (char*)ptr_allocations[8];
f01204c0:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f01204c6:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f01204c9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01204d0:	eb 0e                	jmp    f01204e0 <test_kfree+0xeb8>
		{
			ptr[i] = 8 ;
f01204d2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01204d5:	8b 45 98             	mov    -0x68(%ebp),%eax
f01204d8:	01 d0                	add    %edx,%eax
f01204da:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f01204dd:	ff 45 f4             	incl   -0xc(%ebp)
f01204e0:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f01204e6:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01204e9:	7f e7                	jg     f01204d2 <test_kfree+0xeaa>
		{
			ptr[i] = 8 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f01204eb:	e8 d6 c4 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01204f0:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01204f3:	e8 8c 41 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01204f8:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega);
f01204fb:	83 ec 0c             	sub    $0xc,%esp
f01204fe:	68 00 00 10 00       	push   $0x100000
f0120503:	e8 57 7a fe ff       	call   f0107f5f <kmalloc>
f0120508:	83 c4 10             	add    $0x10,%esp
f012050b:	89 85 ec fd ff ff    	mov    %eax,-0x214(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120511:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0120517:	89 c1                	mov    %eax,%ecx
f0120519:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f0120520:	10 00 00 
f0120523:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0120528:	0f b6 d0             	movzbl %al,%edx
f012052b:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0120531:	01 d0                	add    %edx,%eax
f0120533:	48                   	dec    %eax
f0120534:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f012053a:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0120540:	ba 00 00 00 00       	mov    $0x0,%edx
f0120545:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f012054b:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0120551:	29 d0                	sub    %edx,%eax
f0120553:	89 c3                	mov    %eax,%ebx
f0120555:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f012055c:	10 00 00 
f012055f:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0120564:	0f b6 c0             	movzbl %al,%eax
f0120567:	c1 e0 04             	shl    $0x4,%eax
f012056a:	89 c2                	mov    %eax,%edx
f012056c:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0120572:	01 d0                	add    %edx,%eax
f0120574:	48                   	dec    %eax
f0120575:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f012057b:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0120581:	ba 00 00 00 00       	mov    $0x0,%edx
f0120586:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f012058c:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0120592:	29 d0                	sub    %edx,%eax
f0120594:	01 d8                	add    %ebx,%eax
f0120596:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f012059b:	39 c1                	cmp    %eax,%ecx
f012059d:	74 17                	je     f01205b6 <test_kfree+0xf8e>
f012059f:	83 ec 04             	sub    $0x4,%esp
f01205a2:	68 40 98 13 f0       	push   $0xf0139840
f01205a7:	68 8e 05 00 00       	push   $0x58e
f01205ac:	68 5a 97 13 f0       	push   $0xf013975a
f01205b1:	e8 fa fb fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01205b6:	e8 c9 40 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01205bb:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01205be:	74 17                	je     f01205d7 <test_kfree+0xfaf>
f01205c0:	83 ec 04             	sub    $0x4,%esp
f01205c3:	68 74 97 13 f0       	push   $0xf0139774
f01205c8:	68 8f 05 00 00       	push   $0x58f
f01205cd:	68 5a 97 13 f0       	push   $0xf013975a
f01205d2:	e8 d9 fb fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f01205d7:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01205da:	e8 e7 c3 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01205df:	29 c3                	sub    %eax,%ebx
f01205e1:	89 d8                	mov    %ebx,%eax
f01205e3:	3d 00 01 00 00       	cmp    $0x100,%eax
f01205e8:	74 17                	je     f0120601 <test_kfree+0xfd9>
f01205ea:	83 ec 04             	sub    $0x4,%esp
f01205ed:	68 dc 97 13 f0       	push   $0xf01397dc
f01205f2:	68 90 05 00 00       	push   $0x590
f01205f7:	68 5a 97 13 f0       	push   $0xf013975a
f01205fc:	e8 af fb fd ff       	call   f01001b0 <_panic>
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
f0120601:	c7 85 8c fe ff ff ff 	movl   $0xfffff,-0x174(%ebp)
f0120608:	ff 0f 00 
		ptr = (char*)ptr_allocations[9];
f012060b:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0120611:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f0120614:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012061b:	eb 0e                	jmp    f012062b <test_kfree+0x1003>
		{
			ptr[i] = 9 ;
f012061d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0120620:	8b 45 98             	mov    -0x68(%ebp),%eax
f0120623:	01 d0                	add    %edx,%eax
f0120625:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f0120628:	ff 45 f4             	incl   -0xc(%ebp)
f012062b:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0120631:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120634:	7f e7                	jg     f012061d <test_kfree+0xff5>
		{
			ptr[i] = 9 ;
		}

		if (isKHeapPlacementStrategyNEXTFIT())
f0120636:	e8 16 7e ff ff       	call   f0118451 <isKHeapPlacementStrategyNEXTFIT>
f012063b:	84 c0                	test   %al,%al
f012063d:	0f 84 9e 05 00 00    	je     f0120be1 <test_kfree+0x15b9>
		{
			//Allocate Remaining MBs
			freeFrames = sys_calculate_free_frames() ;
f0120643:	e8 7e c3 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0120648:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f012064b:	e8 34 40 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0120650:	89 45 cc             	mov    %eax,-0x34(%ebp)
			uint32 reqAllocatedSpace = KERNEL_HEAP_MAX - (ACTUAL_START + 13*Mega + 52*kilo + 1*Mega);
f0120653:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f012065a:	10 00 00 
f012065d:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0120662:	0f b6 d0             	movzbl %al,%edx
f0120665:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012066b:	01 d0                	add    %edx,%eax
f012066d:	48                   	dec    %eax
f012066e:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f0120674:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012067a:	ba 00 00 00 00       	mov    $0x0,%edx
f012067f:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f0120685:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012068b:	29 d0                	sub    %edx,%eax
f012068d:	89 c1                	mov    %eax,%ecx
f012068f:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f0120696:	10 00 00 
f0120699:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012069e:	0f b6 c0             	movzbl %al,%eax
f01206a1:	c1 e0 04             	shl    $0x4,%eax
f01206a4:	89 c2                	mov    %eax,%edx
f01206a6:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f01206ac:	01 d0                	add    %edx,%eax
f01206ae:	48                   	dec    %eax
f01206af:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f01206b5:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01206bb:	ba 00 00 00 00       	mov    $0x0,%edx
f01206c0:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f01206c6:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01206cc:	29 d0                	sub    %edx,%eax
f01206ce:	01 c8                	add    %ecx,%eax
f01206d0:	ba 00 e0 1e 09       	mov    $0x91ee000,%edx
f01206d5:	29 c2                	sub    %eax,%edx
f01206d7:	89 d0                	mov    %edx,%eax
f01206d9:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
			ptr_allocations[10] = kmalloc(reqAllocatedSpace);
f01206df:	83 ec 0c             	sub    $0xc,%esp
f01206e2:	ff b5 0c ff ff ff    	pushl  -0xf4(%ebp)
f01206e8:	e8 72 78 fe ff       	call   f0107f5f <kmalloc>
f01206ed:	83 c4 10             	add    $0x10,%esp
f01206f0:	89 85 f0 fd ff ff    	mov    %eax,-0x210(%ebp)
			if ((uint32) ptr_allocations[10] != (ACTUAL_START + 13*Mega + 52*kilo + 1*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01206f6:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f01206fc:	89 c1                	mov    %eax,%ecx
f01206fe:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f0120705:	10 00 00 
f0120708:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012070d:	0f b6 d0             	movzbl %al,%edx
f0120710:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0120716:	01 d0                	add    %edx,%eax
f0120718:	48                   	dec    %eax
f0120719:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f012071f:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0120725:	ba 00 00 00 00       	mov    $0x0,%edx
f012072a:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f0120730:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0120736:	29 d0                	sub    %edx,%eax
f0120738:	89 c3                	mov    %eax,%ebx
f012073a:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f0120741:	10 00 00 
f0120744:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0120749:	0f b6 c0             	movzbl %al,%eax
f012074c:	c1 e0 04             	shl    $0x4,%eax
f012074f:	89 c2                	mov    %eax,%edx
f0120751:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0120757:	01 d0                	add    %edx,%eax
f0120759:	48                   	dec    %eax
f012075a:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f0120760:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0120766:	ba 00 00 00 00       	mov    $0x0,%edx
f012076b:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f0120771:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0120777:	29 d0                	sub    %edx,%eax
f0120779:	01 d8                	add    %ebx,%eax
f012077b:	2d 00 f0 1e 09       	sub    $0x91ef000,%eax
f0120780:	39 c1                	cmp    %eax,%ecx
f0120782:	74 17                	je     f012079b <test_kfree+0x1173>
f0120784:	83 ec 04             	sub    $0x4,%esp
f0120787:	68 40 98 13 f0       	push   $0xf0139840
f012078c:	68 9f 05 00 00       	push   $0x59f
f0120791:	68 5a 97 13 f0       	push   $0xf013975a
f0120796:	e8 15 fa fd ff       	call   f01001b0 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012079b:	e8 e4 3e fe ff       	call   f0104684 <pf_calculate_free_frames>
f01207a0:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01207a3:	74 17                	je     f01207bc <test_kfree+0x1194>
f01207a5:	83 ec 04             	sub    $0x4,%esp
f01207a8:	68 74 97 13 f0       	push   $0xf0139774
f01207ad:	68 a0 05 00 00       	push   $0x5a0
f01207b2:	68 5a 97 13 f0       	push   $0xf013975a
f01207b7:	e8 f4 f9 fd ff       	call   f01001b0 <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != reqAllocatedSpace/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f01207bc:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01207bf:	e8 02 c2 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01207c4:	29 c3                	sub    %eax,%ebx
f01207c6:	89 da                	mov    %ebx,%edx
f01207c8:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f01207ce:	c1 e8 0c             	shr    $0xc,%eax
f01207d1:	39 c2                	cmp    %eax,%edx
f01207d3:	74 17                	je     f01207ec <test_kfree+0x11c4>
f01207d5:	83 ec 04             	sub    $0x4,%esp
f01207d8:	68 dc 97 13 f0       	push   $0xf01397dc
f01207dd:	68 a1 05 00 00       	push   $0x5a1
f01207e2:	68 5a 97 13 f0       	push   $0xf013975a
f01207e7:	e8 c4 f9 fd ff       	call   f01001b0 <_panic>
			lastIndices[10] = (reqAllocatedSpace)/sizeof(char) - 1;
f01207ec:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f01207f2:	48                   	dec    %eax
f01207f3:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
			ptr = (char*)ptr_allocations[10];
f01207f9:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f01207ff:	89 45 98             	mov    %eax,-0x68(%ebp)
//				ptr[i] = 10;
//			}

			//Allocate in merged freed space FROM the beginning
			//3 MB
			freeFrames = sys_calculate_free_frames() ;
f0120802:	e8 bf c1 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0120807:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f012080a:	e8 75 3e fe ff       	call   f0104684 <pf_calculate_free_frames>
f012080f:	89 45 cc             	mov    %eax,-0x34(%ebp)
			ptr_allocations[11] = kmalloc(3*Mega);
f0120812:	83 ec 0c             	sub    $0xc,%esp
f0120815:	68 00 00 30 00       	push   $0x300000
f012081a:	e8 40 77 fe ff       	call   f0107f5f <kmalloc>
f012081f:	83 c4 10             	add    $0x10,%esp
f0120822:	89 85 f4 fd ff ff    	mov    %eax,-0x20c(%ebp)
			if ((uint32) ptr_allocations[11] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120828:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012082e:	89 c1                	mov    %eax,%ecx
f0120830:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f0120837:	10 00 00 
f012083a:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012083f:	0f b6 d0             	movzbl %al,%edx
f0120842:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0120848:	01 d0                	add    %edx,%eax
f012084a:	48                   	dec    %eax
f012084b:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f0120851:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0120857:	ba 00 00 00 00       	mov    $0x0,%edx
f012085c:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f0120862:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0120868:	29 d0                	sub    %edx,%eax
f012086a:	89 c3                	mov    %eax,%ebx
f012086c:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f0120873:	10 00 00 
f0120876:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012087b:	0f b6 c0             	movzbl %al,%eax
f012087e:	c1 e0 04             	shl    $0x4,%eax
f0120881:	89 c2                	mov    %eax,%edx
f0120883:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0120889:	01 d0                	add    %edx,%eax
f012088b:	48                   	dec    %eax
f012088c:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f0120892:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0120898:	ba 00 00 00 00       	mov    $0x0,%edx
f012089d:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f01208a3:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f01208a9:	29 d0                	sub    %edx,%eax
f01208ab:	01 d8                	add    %ebx,%eax
f01208ad:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f01208b2:	39 c1                	cmp    %eax,%ecx
f01208b4:	74 17                	je     f01208cd <test_kfree+0x12a5>
f01208b6:	83 ec 04             	sub    $0x4,%esp
f01208b9:	68 40 98 13 f0       	push   $0xf0139840
f01208be:	68 ae 05 00 00       	push   $0x5ae
f01208c3:	68 5a 97 13 f0       	push   $0xf013975a
f01208c8:	e8 e3 f8 fd ff       	call   f01001b0 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01208cd:	e8 b2 3d fe ff       	call   f0104684 <pf_calculate_free_frames>
f01208d2:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01208d5:	74 17                	je     f01208ee <test_kfree+0x12c6>
f01208d7:	83 ec 04             	sub    $0x4,%esp
f01208da:	68 74 97 13 f0       	push   $0xf0139774
f01208df:	68 af 05 00 00       	push   $0x5af
f01208e4:	68 5a 97 13 f0       	push   $0xf013975a
f01208e9:	e8 c2 f8 fd ff       	call   f01001b0 <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f01208ee:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01208f1:	e8 d0 c0 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01208f6:	29 c3                	sub    %eax,%ebx
f01208f8:	89 d8                	mov    %ebx,%eax
f01208fa:	3d 00 03 00 00       	cmp    $0x300,%eax
f01208ff:	74 17                	je     f0120918 <test_kfree+0x12f0>
f0120901:	83 ec 04             	sub    $0x4,%esp
f0120904:	68 dc 97 13 f0       	push   $0xf01397dc
f0120909:	68 b0 05 00 00       	push   $0x5b0
f012090e:	68 5a 97 13 f0       	push   $0xf013975a
f0120913:	e8 98 f8 fd ff       	call   f01001b0 <_panic>
			lastIndices[11] = (3*Mega)/sizeof(char) - 1;
f0120918:	c7 85 94 fe ff ff ff 	movl   $0x2fffff,-0x16c(%ebp)
f012091f:	ff 2f 00 
			ptr = (char*)ptr_allocations[11];
f0120922:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f0120928:	89 45 98             	mov    %eax,-0x68(%ebp)
			for (i = 0; i < lastIndices[11]; ++i)
f012092b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120932:	eb 0e                	jmp    f0120942 <test_kfree+0x131a>
			{
				ptr[i] = 8 ;
f0120934:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0120937:	8b 45 98             	mov    -0x68(%ebp),%eax
f012093a:	01 d0                	add    %edx,%eax
f012093c:	c6 00 08             	movb   $0x8,(%eax)
			if ((uint32) ptr_allocations[11] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
			if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
			lastIndices[11] = (3*Mega)/sizeof(char) - 1;
			ptr = (char*)ptr_allocations[11];
			for (i = 0; i < lastIndices[11]; ++i)
f012093f:	ff 45 f4             	incl   -0xc(%ebp)
f0120942:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0120948:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012094b:	7f e7                	jg     f0120934 <test_kfree+0x130c>
			{
				ptr[i] = 8 ;
			}

			//2 KB
			freeFrames = sys_calculate_free_frames() ;
f012094d:	e8 74 c0 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0120952:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0120955:	e8 2a 3d fe ff       	call   f0104684 <pf_calculate_free_frames>
f012095a:	89 45 cc             	mov    %eax,-0x34(%ebp)
			ptr_allocations[12] = kmalloc(2*kilo);
f012095d:	83 ec 0c             	sub    $0xc,%esp
f0120960:	68 00 08 00 00       	push   $0x800
f0120965:	e8 f5 75 fe ff       	call   f0107f5f <kmalloc>
f012096a:	83 c4 10             	add    $0x10,%esp
f012096d:	89 85 f8 fd ff ff    	mov    %eax,-0x208(%ebp)
			if ((uint32) ptr_allocations[12] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120973:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f0120979:	89 c1                	mov    %eax,%ecx
f012097b:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f0120982:	10 00 00 
f0120985:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012098a:	0f b6 d0             	movzbl %al,%edx
f012098d:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0120993:	01 d0                	add    %edx,%eax
f0120995:	48                   	dec    %eax
f0120996:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f012099c:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f01209a2:	ba 00 00 00 00       	mov    $0x0,%edx
f01209a7:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f01209ad:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f01209b3:	29 d0                	sub    %edx,%eax
f01209b5:	89 c3                	mov    %eax,%ebx
f01209b7:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f01209be:	10 00 00 
f01209c1:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01209c6:	0f b6 c0             	movzbl %al,%eax
f01209c9:	c1 e0 04             	shl    $0x4,%eax
f01209cc:	89 c2                	mov    %eax,%edx
f01209ce:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01209d4:	01 d0                	add    %edx,%eax
f01209d6:	48                   	dec    %eax
f01209d7:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f01209dd:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01209e3:	ba 00 00 00 00       	mov    $0x0,%edx
f01209e8:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f01209ee:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01209f4:	29 d0                	sub    %edx,%eax
f01209f6:	01 d8                	add    %ebx,%eax
f01209f8:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f01209fd:	39 c1                	cmp    %eax,%ecx
f01209ff:	74 17                	je     f0120a18 <test_kfree+0x13f0>
f0120a01:	83 ec 04             	sub    $0x4,%esp
f0120a04:	68 40 98 13 f0       	push   $0xf0139840
f0120a09:	68 bc 05 00 00       	push   $0x5bc
f0120a0e:	68 5a 97 13 f0       	push   $0xf013975a
f0120a13:	e8 98 f7 fd ff       	call   f01001b0 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120a18:	e8 67 3c fe ff       	call   f0104684 <pf_calculate_free_frames>
f0120a1d:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120a20:	74 17                	je     f0120a39 <test_kfree+0x1411>
f0120a22:	83 ec 04             	sub    $0x4,%esp
f0120a25:	68 74 97 13 f0       	push   $0xf0139774
f0120a2a:	68 bd 05 00 00       	push   $0x5bd
f0120a2f:	68 5a 97 13 f0       	push   $0xf013975a
f0120a34:	e8 77 f7 fd ff       	call   f01001b0 <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120a39:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120a3c:	e8 85 bf fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0120a41:	29 c3                	sub    %eax,%ebx
f0120a43:	89 d8                	mov    %ebx,%eax
f0120a45:	83 f8 01             	cmp    $0x1,%eax
f0120a48:	74 17                	je     f0120a61 <test_kfree+0x1439>
f0120a4a:	83 ec 04             	sub    $0x4,%esp
f0120a4d:	68 dc 97 13 f0       	push   $0xf01397dc
f0120a52:	68 be 05 00 00       	push   $0x5be
f0120a57:	68 5a 97 13 f0       	push   $0xf013975a
f0120a5c:	e8 4f f7 fd ff       	call   f01001b0 <_panic>
			lastIndices[12] = (2*kilo)/sizeof(char) - 1;
f0120a61:	c7 85 98 fe ff ff ff 	movl   $0x7ff,-0x168(%ebp)
f0120a68:	07 00 00 
			ptr = (char*)ptr_allocations[12];
f0120a6b:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f0120a71:	89 45 98             	mov    %eax,-0x68(%ebp)
			for (i = 0; i < lastIndices[12]; ++i)
f0120a74:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120a7b:	eb 0e                	jmp    f0120a8b <test_kfree+0x1463>
			{
				ptr[i] = 9 ;
f0120a7d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0120a80:	8b 45 98             	mov    -0x68(%ebp),%eax
f0120a83:	01 d0                	add    %edx,%eax
f0120a85:	c6 00 09             	movb   $0x9,(%eax)
			if ((uint32) ptr_allocations[12] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
			if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
			lastIndices[12] = (2*kilo)/sizeof(char) - 1;
			ptr = (char*)ptr_allocations[12];
			for (i = 0; i < lastIndices[12]; ++i)
f0120a88:	ff 45 f4             	incl   -0xc(%ebp)
f0120a8b:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0120a91:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120a94:	7f e7                	jg     f0120a7d <test_kfree+0x1455>
			{
				ptr[i] = 9 ;
			}

			//1 MB
			freeFrames = sys_calculate_free_frames() ;
f0120a96:	e8 2b bf fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0120a9b:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0120a9e:	e8 e1 3b fe ff       	call   f0104684 <pf_calculate_free_frames>
f0120aa3:	89 45 cc             	mov    %eax,-0x34(%ebp)
			ptr_allocations[13] = kmalloc(1*Mega);
f0120aa6:	83 ec 0c             	sub    $0xc,%esp
f0120aa9:	68 00 00 10 00       	push   $0x100000
f0120aae:	e8 ac 74 fe ff       	call   f0107f5f <kmalloc>
f0120ab3:	83 c4 10             	add    $0x10,%esp
f0120ab6:	89 85 fc fd ff ff    	mov    %eax,-0x204(%ebp)
			if ((uint32) ptr_allocations[13] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120abc:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f0120ac2:	89 c1                	mov    %eax,%ecx
f0120ac4:	c7 85 d8 fe ff ff 00 	movl   $0x1000,-0x128(%ebp)
f0120acb:	10 00 00 
f0120ace:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0120ad3:	0f b6 d0             	movzbl %al,%edx
f0120ad6:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0120adc:	01 d0                	add    %edx,%eax
f0120ade:	48                   	dec    %eax
f0120adf:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
f0120ae5:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0120aeb:	ba 00 00 00 00       	mov    $0x0,%edx
f0120af0:	f7 b5 d8 fe ff ff    	divl   -0x128(%ebp)
f0120af6:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0120afc:	29 d0                	sub    %edx,%eax
f0120afe:	89 c3                	mov    %eax,%ebx
f0120b00:	c7 85 d0 fe ff ff 00 	movl   $0x1000,-0x130(%ebp)
f0120b07:	10 00 00 
f0120b0a:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0120b0f:	0f b6 c0             	movzbl %al,%eax
f0120b12:	c1 e0 04             	shl    $0x4,%eax
f0120b15:	89 c2                	mov    %eax,%edx
f0120b17:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0120b1d:	01 d0                	add    %edx,%eax
f0120b1f:	48                   	dec    %eax
f0120b20:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
f0120b26:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0120b2c:	ba 00 00 00 00       	mov    $0x0,%edx
f0120b31:	f7 b5 d0 fe ff ff    	divl   -0x130(%ebp)
f0120b37:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0120b3d:	29 d0                	sub    %edx,%eax
f0120b3f:	01 d8                	add    %ebx,%eax
f0120b41:	2d 00 b0 cf 09       	sub    $0x9cfb000,%eax
f0120b46:	39 c1                	cmp    %eax,%ecx
f0120b48:	74 17                	je     f0120b61 <test_kfree+0x1539>
f0120b4a:	83 ec 04             	sub    $0x4,%esp
f0120b4d:	68 40 98 13 f0       	push   $0xf0139840
f0120b52:	68 ca 05 00 00       	push   $0x5ca
f0120b57:	68 5a 97 13 f0       	push   $0xf013975a
f0120b5c:	e8 4f f6 fd ff       	call   f01001b0 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120b61:	e8 1e 3b fe ff       	call   f0104684 <pf_calculate_free_frames>
f0120b66:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120b69:	74 17                	je     f0120b82 <test_kfree+0x155a>
f0120b6b:	83 ec 04             	sub    $0x4,%esp
f0120b6e:	68 74 97 13 f0       	push   $0xf0139774
f0120b73:	68 cb 05 00 00       	push   $0x5cb
f0120b78:	68 5a 97 13 f0       	push   $0xf013975a
f0120b7d:	e8 2e f6 fd ff       	call   f01001b0 <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120b82:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120b85:	e8 3c be fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0120b8a:	29 c3                	sub    %eax,%ebx
f0120b8c:	89 d8                	mov    %ebx,%eax
f0120b8e:	3d 00 01 00 00       	cmp    $0x100,%eax
f0120b93:	74 17                	je     f0120bac <test_kfree+0x1584>
f0120b95:	83 ec 04             	sub    $0x4,%esp
f0120b98:	68 dc 97 13 f0       	push   $0xf01397dc
f0120b9d:	68 cc 05 00 00       	push   $0x5cc
f0120ba2:	68 5a 97 13 f0       	push   $0xf013975a
f0120ba7:	e8 04 f6 fd ff       	call   f01001b0 <_panic>
			lastIndices[13] = (1*Mega)/sizeof(char) - 1;
f0120bac:	c7 85 9c fe ff ff ff 	movl   $0xfffff,-0x164(%ebp)
f0120bb3:	ff 0f 00 
			ptr = (char*)ptr_allocations[13];
f0120bb6:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f0120bbc:	89 45 98             	mov    %eax,-0x68(%ebp)
			for (i = 0; i < lastIndices[13]; ++i)
f0120bbf:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120bc6:	eb 0e                	jmp    f0120bd6 <test_kfree+0x15ae>
			{
				ptr[i] = 10 ;
f0120bc8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0120bcb:	8b 45 98             	mov    -0x68(%ebp),%eax
f0120bce:	01 d0                	add    %edx,%eax
f0120bd0:	c6 00 0a             	movb   $0xa,(%eax)
			if ((uint32) ptr_allocations[13] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
			if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
			lastIndices[13] = (1*Mega)/sizeof(char) - 1;
			ptr = (char*)ptr_allocations[13];
			for (i = 0; i < lastIndices[13]; ++i)
f0120bd3:	ff 45 f4             	incl   -0xc(%ebp)
f0120bd6:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0120bdc:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120bdf:	7f e7                	jg     f0120bc8 <test_kfree+0x15a0>
			{
				ptr[i] = 10 ;
			}
		}
	}
	cprintf("\b\b\b45%");
f0120be1:	83 ec 0c             	sub    $0xc,%esp
f0120be4:	68 7a 9f 13 f0       	push   $0xf0139f7a
f0120be9:	e8 43 02 fe ff       	call   f0100e31 <cprintf>
f0120bee:	83 c4 10             	add    $0x10,%esp

	//kfree remaining allocated spaces [15%]
	{
		//kfree 7 KB
		freeFrames = sys_calculate_free_frames() ;
f0120bf1:	e8 d0 bd fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0120bf6:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120bf9:	e8 86 3a fe ff       	call   f0104684 <pf_calculate_free_frames>
f0120bfe:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[4]);
f0120c01:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0120c07:	83 ec 0c             	sub    $0xc,%esp
f0120c0a:	50                   	push   %eax
f0120c0b:	e8 69 73 fe ff       	call   f0107f79 <kfree>
f0120c10:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120c13:	e8 6c 3a fe ff       	call   f0104684 <pf_calculate_free_frames>
f0120c18:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120c1b:	74 17                	je     f0120c34 <test_kfree+0x160c>
f0120c1d:	83 ec 04             	sub    $0x4,%esp
f0120c20:	68 74 97 13 f0       	push   $0xf0139774
f0120c25:	68 dd 05 00 00       	push   $0x5dd
f0120c2a:	68 5a 97 13 f0       	push   $0xf013975a
f0120c2f:	e8 7c f5 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 2) panic("Wrong kfree: pages in memory are not freed correctly");
f0120c34:	e8 8d bd fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0120c39:	89 c2                	mov    %eax,%edx
f0120c3b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0120c3e:	29 c2                	sub    %eax,%edx
f0120c40:	89 d0                	mov    %edx,%eax
f0120c42:	83 f8 02             	cmp    $0x2,%eax
f0120c45:	74 17                	je     f0120c5e <test_kfree+0x1636>
f0120c47:	83 ec 04             	sub    $0x4,%esp
f0120c4a:	68 e4 9e 13 f0       	push   $0xf0139ee4
f0120c4f:	68 de 05 00 00       	push   $0x5de
f0120c54:	68 5a 97 13 f0       	push   $0xf013975a
f0120c59:	e8 52 f5 fd ff       	call   f01001b0 <_panic>

		//kfree 3 MB
		freeFrames = sys_calculate_free_frames() ;
f0120c5e:	e8 63 bd fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0120c63:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120c66:	e8 19 3a fe ff       	call   f0104684 <pf_calculate_free_frames>
f0120c6b:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[5]);
f0120c6e:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0120c74:	83 ec 0c             	sub    $0xc,%esp
f0120c77:	50                   	push   %eax
f0120c78:	e8 fc 72 fe ff       	call   f0107f79 <kfree>
f0120c7d:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120c80:	e8 ff 39 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0120c85:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120c88:	74 17                	je     f0120ca1 <test_kfree+0x1679>
f0120c8a:	83 ec 04             	sub    $0x4,%esp
f0120c8d:	68 74 97 13 f0       	push   $0xf0139774
f0120c92:	68 e4 05 00 00       	push   $0x5e4
f0120c97:	68 5a 97 13 f0       	push   $0xf013975a
f0120c9c:	e8 0f f5 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0120ca1:	e8 20 bd fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0120ca6:	89 c2                	mov    %eax,%edx
f0120ca8:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0120cab:	29 c2                	sub    %eax,%edx
f0120cad:	89 d0                	mov    %edx,%eax
f0120caf:	3d 00 03 00 00       	cmp    $0x300,%eax
f0120cb4:	74 17                	je     f0120ccd <test_kfree+0x16a5>
f0120cb6:	83 ec 04             	sub    $0x4,%esp
f0120cb9:	68 e4 9e 13 f0       	push   $0xf0139ee4
f0120cbe:	68 e5 05 00 00       	push   $0x5e5
f0120cc3:	68 5a 97 13 f0       	push   $0xf013975a
f0120cc8:	e8 e3 f4 fd ff       	call   f01001b0 <_panic>

		//kfree 2nd 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0120ccd:	e8 f4 bc fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0120cd2:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120cd5:	e8 aa 39 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0120cda:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[3]);
f0120cdd:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0120ce3:	83 ec 0c             	sub    $0xc,%esp
f0120ce6:	50                   	push   %eax
f0120ce7:	e8 8d 72 fe ff       	call   f0107f79 <kfree>
f0120cec:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120cef:	e8 90 39 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0120cf4:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120cf7:	74 17                	je     f0120d10 <test_kfree+0x16e8>
f0120cf9:	83 ec 04             	sub    $0x4,%esp
f0120cfc:	68 74 97 13 f0       	push   $0xf0139774
f0120d01:	68 eb 05 00 00       	push   $0x5eb
f0120d06:	68 5a 97 13 f0       	push   $0xf013975a
f0120d0b:	e8 a0 f4 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f0120d10:	e8 b1 bc fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0120d15:	89 c2                	mov    %eax,%edx
f0120d17:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0120d1a:	29 c2                	sub    %eax,%edx
f0120d1c:	89 d0                	mov    %edx,%eax
f0120d1e:	83 f8 01             	cmp    $0x1,%eax
f0120d21:	74 17                	je     f0120d3a <test_kfree+0x1712>
f0120d23:	83 ec 04             	sub    $0x4,%esp
f0120d26:	68 e4 9e 13 f0       	push   $0xf0139ee4
f0120d2b:	68 ec 05 00 00       	push   $0x5ec
f0120d30:	68 5a 97 13 f0       	push   $0xf013975a
f0120d35:	e8 76 f4 fd ff       	call   f01001b0 <_panic>

		//kfree 14 KB
		freeFrames = sys_calculate_free_frames() ;
f0120d3a:	e8 87 bc fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0120d3f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120d42:	e8 3d 39 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0120d47:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[7]);
f0120d4a:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0120d50:	83 ec 0c             	sub    $0xc,%esp
f0120d53:	50                   	push   %eax
f0120d54:	e8 20 72 fe ff       	call   f0107f79 <kfree>
f0120d59:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120d5c:	e8 23 39 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0120d61:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120d64:	74 17                	je     f0120d7d <test_kfree+0x1755>
f0120d66:	83 ec 04             	sub    $0x4,%esp
f0120d69:	68 74 97 13 f0       	push   $0xf0139774
f0120d6e:	68 f2 05 00 00       	push   $0x5f2
f0120d73:	68 5a 97 13 f0       	push   $0xf013975a
f0120d78:	e8 33 f4 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 4) panic("Wrong kfree: pages in memory are not freed correctly");
f0120d7d:	e8 44 bc fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0120d82:	89 c2                	mov    %eax,%edx
f0120d84:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0120d87:	29 c2                	sub    %eax,%edx
f0120d89:	89 d0                	mov    %edx,%eax
f0120d8b:	83 f8 04             	cmp    $0x4,%eax
f0120d8e:	74 17                	je     f0120da7 <test_kfree+0x177f>
f0120d90:	83 ec 04             	sub    $0x4,%esp
f0120d93:	68 e4 9e 13 f0       	push   $0xf0139ee4
f0120d98:	68 f3 05 00 00       	push   $0x5f3
f0120d9d:	68 5a 97 13 f0       	push   $0xf013975a
f0120da2:	e8 09 f4 fd ff       	call   f01001b0 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f0120da7:	e8 1a bc fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0120dac:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120daf:	e8 d0 38 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0120db4:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f0120db7:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0120dbd:	83 ec 0c             	sub    $0xc,%esp
f0120dc0:	50                   	push   %eax
f0120dc1:	e8 b3 71 fe ff       	call   f0107f79 <kfree>
f0120dc6:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120dc9:	e8 b6 38 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0120dce:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120dd1:	74 17                	je     f0120dea <test_kfree+0x17c2>
f0120dd3:	83 ec 04             	sub    $0x4,%esp
f0120dd6:	68 74 97 13 f0       	push   $0xf0139774
f0120ddb:	68 f9 05 00 00       	push   $0x5f9
f0120de0:	68 5a 97 13 f0       	push   $0xf013975a
f0120de5:	e8 c6 f3 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 5) panic("Wrong kfree: pages in memory are not freed correctly");
f0120dea:	e8 d7 bb fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0120def:	89 c2                	mov    %eax,%edx
f0120df1:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0120df4:	29 c2                	sub    %eax,%edx
f0120df6:	89 d0                	mov    %edx,%eax
f0120df8:	83 f8 05             	cmp    $0x5,%eax
f0120dfb:	74 17                	je     f0120e14 <test_kfree+0x17ec>
f0120dfd:	83 ec 04             	sub    $0x4,%esp
f0120e00:	68 e4 9e 13 f0       	push   $0xf0139ee4
f0120e05:	68 fa 05 00 00       	push   $0x5fa
f0120e0a:	68 5a 97 13 f0       	push   $0xf013975a
f0120e0f:	e8 9c f3 fd ff       	call   f01001b0 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0120e14:	e8 ad bb fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0120e19:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120e1c:	e8 63 38 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0120e21:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f0120e24:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0120e2a:	83 ec 0c             	sub    $0xc,%esp
f0120e2d:	50                   	push   %eax
f0120e2e:	e8 46 71 fe ff       	call   f0107f79 <kfree>
f0120e33:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120e36:	e8 49 38 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0120e3b:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120e3e:	74 17                	je     f0120e57 <test_kfree+0x182f>
f0120e40:	83 ec 04             	sub    $0x4,%esp
f0120e43:	68 74 97 13 f0       	push   $0xf0139774
f0120e48:	68 00 06 00 00       	push   $0x600
f0120e4d:	68 5a 97 13 f0       	push   $0xf013975a
f0120e52:	e8 59 f3 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong kfree: pages in memory are not freed correctly");
f0120e57:	e8 6a bb fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0120e5c:	89 c2                	mov    %eax,%edx
f0120e5e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0120e61:	29 c2                	sub    %eax,%edx
f0120e63:	89 d0                	mov    %edx,%eax
f0120e65:	3d 00 01 00 00       	cmp    $0x100,%eax
f0120e6a:	74 17                	je     f0120e83 <test_kfree+0x185b>
f0120e6c:	83 ec 04             	sub    $0x4,%esp
f0120e6f:	68 e4 9e 13 f0       	push   $0xf0139ee4
f0120e74:	68 01 06 00 00       	push   $0x601
f0120e79:	68 5a 97 13 f0       	push   $0xf013975a
f0120e7e:	e8 2d f3 fd ff       	call   f01001b0 <_panic>

		if (isKHeapPlacementStrategyNEXTFIT())
f0120e83:	e8 c9 75 ff ff       	call   f0118451 <isKHeapPlacementStrategyNEXTFIT>
f0120e88:	84 c0                	test   %al,%al
f0120e8a:	0f 84 4a 02 00 00    	je     f01210da <test_kfree+0x1ab2>
		{
			//cprintf("FREE in NEXT FIT\n");
			//kfree Remaining MBs
			freeFrames = sys_calculate_free_frames() ;
f0120e90:	e8 31 bb fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0120e95:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0120e98:	e8 e7 37 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0120e9d:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[10]);
f0120ea0:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f0120ea6:	83 ec 0c             	sub    $0xc,%esp
f0120ea9:	50                   	push   %eax
f0120eaa:	e8 ca 70 fe ff       	call   f0107f79 <kfree>
f0120eaf:	83 c4 10             	add    $0x10,%esp
			uint32 reqAllocatedSpace = KERNEL_HEAP_MAX - (ACTUAL_START + 13*Mega + 52*kilo + 1*Mega);
f0120eb2:	c7 85 c8 fe ff ff 00 	movl   $0x1000,-0x138(%ebp)
f0120eb9:	10 00 00 
f0120ebc:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0120ec1:	0f b6 d0             	movzbl %al,%edx
f0120ec4:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0120eca:	01 d0                	add    %edx,%eax
f0120ecc:	48                   	dec    %eax
f0120ecd:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
f0120ed3:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0120ed9:	ba 00 00 00 00       	mov    $0x0,%edx
f0120ede:	f7 b5 c8 fe ff ff    	divl   -0x138(%ebp)
f0120ee4:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0120eea:	29 d0                	sub    %edx,%eax
f0120eec:	89 c1                	mov    %eax,%ecx
f0120eee:	c7 85 c0 fe ff ff 00 	movl   $0x1000,-0x140(%ebp)
f0120ef5:	10 00 00 
f0120ef8:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0120efd:	0f b6 c0             	movzbl %al,%eax
f0120f00:	c1 e0 04             	shl    $0x4,%eax
f0120f03:	89 c2                	mov    %eax,%edx
f0120f05:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0120f0b:	01 d0                	add    %edx,%eax
f0120f0d:	48                   	dec    %eax
f0120f0e:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
f0120f14:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0120f1a:	ba 00 00 00 00       	mov    $0x0,%edx
f0120f1f:	f7 b5 c0 fe ff ff    	divl   -0x140(%ebp)
f0120f25:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0120f2b:	29 d0                	sub    %edx,%eax
f0120f2d:	01 c8                	add    %ecx,%eax
f0120f2f:	ba 00 e0 1e 09       	mov    $0x91ee000,%edx
f0120f34:	29 c2                	sub    %eax,%edx
f0120f36:	89 d0                	mov    %edx,%eax
f0120f38:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120f3e:	e8 41 37 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0120f43:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120f46:	74 17                	je     f0120f5f <test_kfree+0x1937>
f0120f48:	83 ec 04             	sub    $0x4,%esp
f0120f4b:	68 74 97 13 f0       	push   $0xf0139774
f0120f50:	68 0b 06 00 00       	push   $0x60b
f0120f55:	68 5a 97 13 f0       	push   $0xf013975a
f0120f5a:	e8 51 f2 fd ff       	call   f01001b0 <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != reqAllocatedSpace/PAGE_SIZE) panic("Wrong kfree: pages in memory are not freed correctly");
f0120f5f:	e8 62 ba fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0120f64:	89 c2                	mov    %eax,%edx
f0120f66:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0120f69:	29 c2                	sub    %eax,%edx
f0120f6b:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0120f71:	c1 e8 0c             	shr    $0xc,%eax
f0120f74:	39 c2                	cmp    %eax,%edx
f0120f76:	74 17                	je     f0120f8f <test_kfree+0x1967>
f0120f78:	83 ec 04             	sub    $0x4,%esp
f0120f7b:	68 e4 9e 13 f0       	push   $0xf0139ee4
f0120f80:	68 0c 06 00 00       	push   $0x60c
f0120f85:	68 5a 97 13 f0       	push   $0xf013975a
f0120f8a:	e8 21 f2 fd ff       	call   f01001b0 <_panic>

			//kfree 3 MB
			freeFrames = sys_calculate_free_frames() ;
f0120f8f:	e8 32 ba fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0120f94:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0120f97:	e8 e8 36 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0120f9c:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[11]);
f0120f9f:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f0120fa5:	83 ec 0c             	sub    $0xc,%esp
f0120fa8:	50                   	push   %eax
f0120fa9:	e8 cb 6f fe ff       	call   f0107f79 <kfree>
f0120fae:	83 c4 10             	add    $0x10,%esp
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120fb1:	e8 ce 36 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0120fb6:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120fb9:	74 17                	je     f0120fd2 <test_kfree+0x19aa>
f0120fbb:	83 ec 04             	sub    $0x4,%esp
f0120fbe:	68 74 97 13 f0       	push   $0xf0139774
f0120fc3:	68 12 06 00 00       	push   $0x612
f0120fc8:	68 5a 97 13 f0       	push   $0xf013975a
f0120fcd:	e8 de f1 fd ff       	call   f01001b0 <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0120fd2:	e8 ef b9 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0120fd7:	89 c2                	mov    %eax,%edx
f0120fd9:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0120fdc:	29 c2                	sub    %eax,%edx
f0120fde:	89 d0                	mov    %edx,%eax
f0120fe0:	3d 00 03 00 00       	cmp    $0x300,%eax
f0120fe5:	74 17                	je     f0120ffe <test_kfree+0x19d6>
f0120fe7:	83 ec 04             	sub    $0x4,%esp
f0120fea:	68 e4 9e 13 f0       	push   $0xf0139ee4
f0120fef:	68 13 06 00 00       	push   $0x613
f0120ff4:	68 5a 97 13 f0       	push   $0xf013975a
f0120ff9:	e8 b2 f1 fd ff       	call   f01001b0 <_panic>

			//kfree 2 KB
			freeFrames = sys_calculate_free_frames() ;
f0120ffe:	e8 c3 b9 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0121003:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0121006:	e8 79 36 fe ff       	call   f0104684 <pf_calculate_free_frames>
f012100b:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[12]);
f012100e:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f0121014:	83 ec 0c             	sub    $0xc,%esp
f0121017:	50                   	push   %eax
f0121018:	e8 5c 6f fe ff       	call   f0107f79 <kfree>
f012101d:	83 c4 10             	add    $0x10,%esp
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121020:	e8 5f 36 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0121025:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121028:	74 17                	je     f0121041 <test_kfree+0x1a19>
f012102a:	83 ec 04             	sub    $0x4,%esp
f012102d:	68 74 97 13 f0       	push   $0xf0139774
f0121032:	68 19 06 00 00       	push   $0x619
f0121037:	68 5a 97 13 f0       	push   $0xf013975a
f012103c:	e8 6f f1 fd ff       	call   f01001b0 <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f0121041:	e8 80 b9 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0121046:	89 c2                	mov    %eax,%edx
f0121048:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012104b:	29 c2                	sub    %eax,%edx
f012104d:	89 d0                	mov    %edx,%eax
f012104f:	83 f8 01             	cmp    $0x1,%eax
f0121052:	74 17                	je     f012106b <test_kfree+0x1a43>
f0121054:	83 ec 04             	sub    $0x4,%esp
f0121057:	68 e4 9e 13 f0       	push   $0xf0139ee4
f012105c:	68 1a 06 00 00       	push   $0x61a
f0121061:	68 5a 97 13 f0       	push   $0xf013975a
f0121066:	e8 45 f1 fd ff       	call   f01001b0 <_panic>

			//kfree 1 MB
			freeFrames = sys_calculate_free_frames() ;
f012106b:	e8 56 b9 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0121070:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0121073:	e8 0c 36 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0121078:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[13]);
f012107b:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f0121081:	83 ec 0c             	sub    $0xc,%esp
f0121084:	50                   	push   %eax
f0121085:	e8 ef 6e fe ff       	call   f0107f79 <kfree>
f012108a:	83 c4 10             	add    $0x10,%esp
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012108d:	e8 f2 35 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0121092:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121095:	74 17                	je     f01210ae <test_kfree+0x1a86>
f0121097:	83 ec 04             	sub    $0x4,%esp
f012109a:	68 74 97 13 f0       	push   $0xf0139774
f012109f:	68 20 06 00 00       	push   $0x620
f01210a4:	68 5a 97 13 f0       	push   $0xf013975a
f01210a9:	e8 02 f1 fd ff       	call   f01001b0 <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != 1*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f01210ae:	e8 13 b9 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01210b3:	89 c2                	mov    %eax,%edx
f01210b5:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01210b8:	29 c2                	sub    %eax,%edx
f01210ba:	89 d0                	mov    %edx,%eax
f01210bc:	3d 00 01 00 00       	cmp    $0x100,%eax
f01210c1:	74 17                	je     f01210da <test_kfree+0x1ab2>
f01210c3:	83 ec 04             	sub    $0x4,%esp
f01210c6:	68 e4 9e 13 f0       	push   $0xf0139ee4
f01210cb:	68 21 06 00 00       	push   $0x621
f01210d0:	68 5a 97 13 f0       	push   $0xf013975a
f01210d5:	e8 d6 f0 fd ff       	call   f01001b0 <_panic>

		}
		if(start_freeFrames != (sys_calculate_free_frames())) {panic("Wrong kfree: not all pages removed correctly at end");}
f01210da:	e8 e7 b8 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01210df:	89 c2                	mov    %eax,%edx
f01210e1:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01210e4:	39 c2                	cmp    %eax,%edx
f01210e6:	74 17                	je     f01210ff <test_kfree+0x1ad7>
f01210e8:	83 ec 04             	sub    $0x4,%esp
f01210eb:	68 84 9f 13 f0       	push   $0xf0139f84
f01210f0:	68 24 06 00 00       	push   $0x624
f01210f5:	68 5a 97 13 f0       	push   $0xf013975a
f01210fa:	e8 b1 f0 fd ff       	call   f01001b0 <_panic>
	}
	cprintf("\b\b\b60%");
f01210ff:	83 ec 0c             	sub    $0xc,%esp
f0121102:	68 b8 9f 13 f0       	push   $0xf0139fb8
f0121107:	e8 25 fd fd ff       	call   f0100e31 <cprintf>
f012110c:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f012110f:	83 ec 0c             	sub    $0xc,%esp
f0121112:	6a 03                	push   $0x3
f0121114:	e8 48 bd fe ff       	call   f010ce61 <sys_bypassPageFault>
f0121119:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 10; ++i)
f012111c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121123:	e9 82 00 00 00       	jmp    f01211aa <test_kfree+0x1b82>
		{
			ptr = (char *) ptr_allocations[i];
f0121128:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012112b:	8b 84 85 c8 fd ff ff 	mov    -0x238(%ebp,%eax,4),%eax
f0121132:	89 45 98             	mov    %eax,-0x68(%ebp)
			ptr[0] = 10;
f0121135:	8b 45 98             	mov    -0x68(%ebp),%eax
f0121138:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
f012113b:	e8 0f bd fe ff       	call   f010ce4f <sys_rcr2>
f0121140:	89 c2                	mov    %eax,%edx
f0121142:	8b 45 98             	mov    -0x68(%ebp),%eax
f0121145:	39 c2                	cmp    %eax,%edx
f0121147:	74 17                	je     f0121160 <test_kfree+0x1b38>
f0121149:	83 ec 04             	sub    $0x4,%esp
f012114c:	68 c0 9f 13 f0       	push   $0xf0139fc0
f0121151:	68 33 06 00 00       	push   $0x633
f0121156:	68 5a 97 13 f0       	push   $0xf013975a
f012115b:	e8 50 f0 fd ff       	call   f01001b0 <_panic>
			ptr[lastIndices[i]] = 10;
f0121160:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0121163:	8b 84 85 68 fe ff ff 	mov    -0x198(%ebp,%eax,4),%eax
f012116a:	89 c2                	mov    %eax,%edx
f012116c:	8b 45 98             	mov    -0x68(%ebp),%eax
f012116f:	01 d0                	add    %edx,%eax
f0121171:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0121174:	e8 d6 bc fe ff       	call   f010ce4f <sys_rcr2>
f0121179:	89 c2                	mov    %eax,%edx
f012117b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012117e:	8b 84 85 68 fe ff ff 	mov    -0x198(%ebp,%eax,4),%eax
f0121185:	89 c1                	mov    %eax,%ecx
f0121187:	8b 45 98             	mov    -0x68(%ebp),%eax
f012118a:	01 c8                	add    %ecx,%eax
f012118c:	39 c2                	cmp    %eax,%edx
f012118e:	74 17                	je     f01211a7 <test_kfree+0x1b7f>
f0121190:	83 ec 04             	sub    $0x4,%esp
f0121193:	68 c0 9f 13 f0       	push   $0xf0139fc0
f0121198:	68 35 06 00 00       	push   $0x635
f012119d:	68 5a 97 13 f0       	push   $0xf013975a
f01211a2:	e8 09 f0 fd ff       	call   f01001b0 <_panic>
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 10; ++i)
f01211a7:	ff 45 f4             	incl   -0xc(%ebp)
f01211aa:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
f01211ae:	0f 8e 74 ff ff ff    	jle    f0121128 <test_kfree+0x1b00>
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f01211b4:	83 ec 0c             	sub    $0xc,%esp
f01211b7:	6a 00                	push   $0x0
f01211b9:	e8 a3 bc fe ff       	call   f010ce61 <sys_bypassPageFault>
f01211be:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("\b\b\b75%");
f01211c1:	83 ec 0c             	sub    $0xc,%esp
f01211c4:	68 05 a0 13 f0       	push   $0xf013a005
f01211c9:	e8 63 fc fd ff       	call   f0100e31 <cprintf>
f01211ce:	83 c4 10             	add    $0x10,%esp

	//kfree non-exist item [10%]
	{
		//kfree 2 MB
		freeFrames = sys_calculate_free_frames() ;
f01211d1:	e8 f0 b7 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01211d6:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01211d9:	e8 a6 34 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01211de:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[0]);
f01211e1:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f01211e7:	83 ec 0c             	sub    $0xc,%esp
f01211ea:	50                   	push   %eax
f01211eb:	e8 89 6d fe ff       	call   f0107f79 <kfree>
f01211f0:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01211f3:	e8 8c 34 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01211f8:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01211fb:	74 17                	je     f0121214 <test_kfree+0x1bec>
f01211fd:	83 ec 04             	sub    $0x4,%esp
f0121200:	68 74 97 13 f0       	push   $0xf0139774
f0121205:	68 43 06 00 00       	push   $0x643
f012120a:	68 5a 97 13 f0       	push   $0xf013975a
f012120f:	e8 9c ef fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0121214:	e8 ad b7 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0121219:	89 c2                	mov    %eax,%edx
f012121b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012121e:	39 c2                	cmp    %eax,%edx
f0121220:	74 17                	je     f0121239 <test_kfree+0x1c11>
f0121222:	83 ec 04             	sub    $0x4,%esp
f0121225:	68 0c a0 13 f0       	push   $0xf013a00c
f012122a:	68 44 06 00 00       	push   $0x644
f012122f:	68 5a 97 13 f0       	push   $0xf013975a
f0121234:	e8 77 ef fd ff       	call   f01001b0 <_panic>

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0121239:	e8 88 b7 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012123e:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121241:	e8 3e 34 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0121246:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f0121249:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f012124f:	83 ec 0c             	sub    $0xc,%esp
f0121252:	50                   	push   %eax
f0121253:	e8 21 6d fe ff       	call   f0107f79 <kfree>
f0121258:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012125b:	e8 24 34 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0121260:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121263:	74 17                	je     f012127c <test_kfree+0x1c54>
f0121265:	83 ec 04             	sub    $0x4,%esp
f0121268:	68 74 97 13 f0       	push   $0xf0139774
f012126d:	68 4a 06 00 00       	push   $0x64a
f0121272:	68 5a 97 13 f0       	push   $0xf013975a
f0121277:	e8 34 ef fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f012127c:	e8 45 b7 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0121281:	89 c2                	mov    %eax,%edx
f0121283:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121286:	39 c2                	cmp    %eax,%edx
f0121288:	74 17                	je     f01212a1 <test_kfree+0x1c79>
f012128a:	83 ec 04             	sub    $0x4,%esp
f012128d:	68 0c a0 13 f0       	push   $0xf013a00c
f0121292:	68 4b 06 00 00       	push   $0x64b
f0121297:	68 5a 97 13 f0       	push   $0xf013975a
f012129c:	e8 0f ef fd ff       	call   f01001b0 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f01212a1:	e8 20 b7 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01212a6:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01212a9:	e8 d6 33 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01212ae:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f01212b1:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f01212b7:	83 ec 0c             	sub    $0xc,%esp
f01212ba:	50                   	push   %eax
f01212bb:	e8 b9 6c fe ff       	call   f0107f79 <kfree>
f01212c0:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01212c3:	e8 bc 33 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01212c8:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01212cb:	74 17                	je     f01212e4 <test_kfree+0x1cbc>
f01212cd:	83 ec 04             	sub    $0x4,%esp
f01212d0:	68 74 97 13 f0       	push   $0xf0139774
f01212d5:	68 51 06 00 00       	push   $0x651
f01212da:	68 5a 97 13 f0       	push   $0xf013975a
f01212df:	e8 cc ee fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f01212e4:	e8 dd b6 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01212e9:	89 c2                	mov    %eax,%edx
f01212eb:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01212ee:	39 c2                	cmp    %eax,%edx
f01212f0:	74 17                	je     f0121309 <test_kfree+0x1ce1>
f01212f2:	83 ec 04             	sub    $0x4,%esp
f01212f5:	68 0c a0 13 f0       	push   $0xf013a00c
f01212fa:	68 52 06 00 00       	push   $0x652
f01212ff:	68 5a 97 13 f0       	push   $0xf013975a
f0121304:	e8 a7 ee fd ff       	call   f01001b0 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0121309:	e8 b8 b6 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012130e:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121311:	e8 6e 33 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0121316:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f0121319:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f012131f:	83 ec 0c             	sub    $0xc,%esp
f0121322:	50                   	push   %eax
f0121323:	e8 51 6c fe ff       	call   f0107f79 <kfree>
f0121328:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012132b:	e8 54 33 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0121330:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121333:	74 17                	je     f012134c <test_kfree+0x1d24>
f0121335:	83 ec 04             	sub    $0x4,%esp
f0121338:	68 74 97 13 f0       	push   $0xf0139774
f012133d:	68 58 06 00 00       	push   $0x658
f0121342:	68 5a 97 13 f0       	push   $0xf013975a
f0121347:	e8 64 ee fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f012134c:	e8 75 b6 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0121351:	89 c2                	mov    %eax,%edx
f0121353:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121356:	39 c2                	cmp    %eax,%edx
f0121358:	74 17                	je     f0121371 <test_kfree+0x1d49>
f012135a:	83 ec 04             	sub    $0x4,%esp
f012135d:	68 0c a0 13 f0       	push   $0xf013a00c
f0121362:	68 59 06 00 00       	push   $0x659
f0121367:	68 5a 97 13 f0       	push   $0xf013975a
f012136c:	e8 3f ee fd ff       	call   f01001b0 <_panic>

	}
	cprintf("\b\b\b85%");
f0121371:	83 ec 0c             	sub    $0xc,%esp
f0121374:	68 53 a0 13 f0       	push   $0xf013a053
f0121379:	e8 b3 fa fd ff       	call   f0100e31 <cprintf>
f012137e:	83 c4 10             	add    $0x10,%esp

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0121381:	c7 45 e8 00 00 00 f6 	movl   $0xf6000000,-0x18(%ebp)
f0121388:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f012138f:	eb 48                	jmp    f01213d9 <test_kfree+0x1db1>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va, &ptr_table);
f0121391:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0121394:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f0121399:	83 ec 04             	sub    $0x4,%esp
f012139c:	8d 8d c4 fd ff ff    	lea    -0x23c(%ebp),%ecx
f01213a2:	51                   	push   %ecx
f01213a3:	52                   	push   %edx
f01213a4:	50                   	push   %eax
f01213a5:	e8 3d 61 fe ff       	call   f01074e7 <get_page_table>
f01213aa:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f01213ad:	8b 85 c4 fd ff ff    	mov    -0x23c(%ebp),%eax
f01213b3:	85 c0                	test   %eax,%eax
f01213b5:	75 17                	jne    f01213ce <test_kfree+0x1da6>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
f01213b7:	83 ec 04             	sub    $0x4,%esp
f01213ba:	68 5c a0 13 f0       	push   $0xf013a05c
f01213bf:	68 67 06 00 00       	push   $0x667
f01213c4:	68 5a 97 13 f0       	push   $0xf013975a
f01213c9:	e8 e2 ed fd ff       	call   f01001b0 <_panic>
	cprintf("\b\b\b85%");

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f01213ce:	81 45 e8 00 00 40 00 	addl   $0x400000,-0x18(%ebp)
f01213d5:	83 55 ec 00          	adcl   $0x0,-0x14(%ebp)
f01213d9:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01213dd:	78 b2                	js     f0121391 <test_kfree+0x1d69>
f01213df:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01213e3:	7f 09                	jg     f01213ee <test_kfree+0x1dc6>
f01213e5:	81 7d e8 ff ef ff ff 	cmpl   $0xffffefff,-0x18(%ebp)
f01213ec:	76 a3                	jbe    f0121391 <test_kfree+0x1d69>
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
			}
		}
	}

	cprintf("\b\b\b100%\n");
f01213ee:	83 ec 0c             	sub    $0xc,%esp
f01213f1:	68 3e 99 13 f0       	push   $0xf013993e
f01213f6:	e8 36 fa fd ff       	call   f0100e31 <cprintf>
f01213fb:	83 c4 10             	add    $0x10,%esp



	cprintf("\nCongratulations!! test kfree completed successfully.\n");
f01213fe:	83 ec 0c             	sub    $0xc,%esp
f0121401:	68 c4 a0 13 f0       	push   $0xf013a0c4
f0121406:	e8 26 fa fd ff       	call   f0100e31 <cprintf>
f012140b:	83 c4 10             	add    $0x10,%esp

	return 1;
f012140e:	b8 01 00 00 00       	mov    $0x1,%eax

}
f0121413:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0121416:	5b                   	pop    %ebx
f0121417:	5f                   	pop    %edi
f0121418:	5d                   	pop    %ebp
f0121419:	c3                   	ret    

f012141a <test_kfree_bestfirstfit>:

int test_kfree_bestfirstfit()
{
f012141a:	55                   	push   %ebp
f012141b:	89 e5                	mov    %esp,%ebp
f012141d:	57                   	push   %edi
f012141e:	53                   	push   %ebx
f012141f:	81 ec e0 01 00 00    	sub    $0x1e0,%esp
	cprintf("==============================================\n");
f0121425:	83 ec 0c             	sub    $0xc,%esp
f0121428:	68 9c 96 13 f0       	push   $0xf013969c
f012142d:	e8 ff f9 fd ff       	call   f0100e31 <cprintf>
f0121432:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0121435:	83 ec 0c             	sub    $0xc,%esp
f0121438:	68 cc 96 13 f0       	push   $0xf01396cc
f012143d:	e8 ef f9 fd ff       	call   f0100e31 <cprintf>
f0121442:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0121445:	83 ec 0c             	sub    $0xc,%esp
f0121448:	68 9c 96 13 f0       	push   $0xf013969c
f012144d:	e8 df f9 fd ff       	call   f0100e31 <cprintf>
f0121452:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f0121455:	c6 45 e7 80          	movb   $0x80,-0x19(%ebp)
	char maxByte = 0x7F;
f0121459:	c6 45 e6 7f          	movb   $0x7f,-0x1a(%ebp)
	short minShort = 1<<15 ;
f012145d:	66 c7 45 e4 00 80    	movw   $0x8000,-0x1c(%ebp)
	short maxShort = 0x7FFF;
f0121463:	66 c7 45 e2 ff 7f    	movw   $0x7fff,-0x1e(%ebp)
	int minInt = 1<<31 ;
f0121469:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
	int maxInt = 0x7FFFFFFF;
f0121470:	c7 45 d8 ff ff ff 7f 	movl   $0x7fffffff,-0x28(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0121477:	e8 4a b5 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012147c:	89 45 d4             	mov    %eax,-0x2c(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f012147f:	8d 95 c0 fe ff ff    	lea    -0x140(%ebp),%edx
f0121485:	b9 14 00 00 00       	mov    $0x14,%ecx
f012148a:	b8 00 00 00 00       	mov    $0x0,%eax
f012148f:	89 d7                	mov    %edx,%edi
f0121491:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0121493:	8d 95 70 fe ff ff    	lea    -0x190(%ebp),%edx
f0121499:	b9 14 00 00 00       	mov    $0x14,%ecx
f012149e:	b8 00 00 00 00       	mov    $0x0,%eax
f01214a3:	89 d7                	mov    %edx,%edi
f01214a5:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f01214a7:	8d 95 20 fe ff ff    	lea    -0x1e0(%ebp),%edx
f01214ad:	b9 14 00 00 00       	mov    $0x14,%ecx
f01214b2:	b8 00 00 00 00       	mov    $0x0,%eax
f01214b7:	89 d7                	mov    %edx,%edi
f01214b9:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01214bb:	e8 06 b5 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01214c0:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01214c3:	e8 bc 31 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01214c8:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f01214cb:	83 ec 0c             	sub    $0xc,%esp
f01214ce:	68 00 fc 1f 00       	push   $0x1ffc00
f01214d3:	e8 87 6a fe ff       	call   f0107f5f <kmalloc>
f01214d8:	83 c4 10             	add    $0x10,%esp
f01214db:	89 85 20 fe ff ff    	mov    %eax,-0x1e0(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01214e1:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f01214e7:	89 c1                	mov    %eax,%ecx
f01214e9:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f01214f0:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01214f5:	0f b6 d0             	movzbl %al,%edx
f01214f8:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01214fb:	01 d0                	add    %edx,%eax
f01214fd:	48                   	dec    %eax
f01214fe:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f0121501:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0121504:	ba 00 00 00 00       	mov    $0x0,%edx
f0121509:	f7 75 c8             	divl   -0x38(%ebp)
f012150c:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f012150f:	29 d0                	sub    %edx,%eax
f0121511:	89 c3                	mov    %eax,%ebx
f0121513:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f012151a:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012151f:	0f b6 c0             	movzbl %al,%eax
f0121522:	c1 e0 04             	shl    $0x4,%eax
f0121525:	89 c2                	mov    %eax,%edx
f0121527:	8b 45 c0             	mov    -0x40(%ebp),%eax
f012152a:	01 d0                	add    %edx,%eax
f012152c:	48                   	dec    %eax
f012152d:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0121530:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0121533:	ba 00 00 00 00       	mov    $0x0,%edx
f0121538:	f7 75 c0             	divl   -0x40(%ebp)
f012153b:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012153e:	29 d0                	sub    %edx,%eax
f0121540:	01 d8                	add    %ebx,%eax
f0121542:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0121547:	39 c1                	cmp    %eax,%ecx
f0121549:	74 17                	je     f0121562 <test_kfree_bestfirstfit+0x148>
f012154b:	83 ec 04             	sub    $0x4,%esp
f012154e:	68 40 98 13 f0       	push   $0xf0139840
f0121553:	68 95 06 00 00       	push   $0x695
f0121558:	68 5a 97 13 f0       	push   $0xf013975a
f012155d:	e8 4e ec fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121562:	e8 1d 31 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0121567:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012156a:	74 17                	je     f0121583 <test_kfree_bestfirstfit+0x169>
f012156c:	83 ec 04             	sub    $0x4,%esp
f012156f:	68 74 97 13 f0       	push   $0xf0139774
f0121574:	68 96 06 00 00       	push   $0x696
f0121579:	68 5a 97 13 f0       	push   $0xf013975a
f012157e:	e8 2d ec fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121583:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121586:	e8 3b b4 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012158b:	29 c3                	sub    %eax,%ebx
f012158d:	89 d8                	mov    %ebx,%eax
f012158f:	3d 00 02 00 00       	cmp    $0x200,%eax
f0121594:	74 17                	je     f01215ad <test_kfree_bestfirstfit+0x193>
f0121596:	83 ec 04             	sub    $0x4,%esp
f0121599:	68 dc 97 13 f0       	push   $0xf01397dc
f012159e:	68 97 06 00 00       	push   $0x697
f01215a3:	68 5a 97 13 f0       	push   $0xf013975a
f01215a8:	e8 03 ec fd ff       	call   f01001b0 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f01215ad:	c7 85 c0 fe ff ff ff 	movl   $0x1ffbff,-0x140(%ebp)
f01215b4:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01215b7:	e8 0a b4 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01215bc:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01215bf:	e8 c0 30 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01215c4:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f01215c7:	83 ec 0c             	sub    $0xc,%esp
f01215ca:	68 00 fc 1f 00       	push   $0x1ffc00
f01215cf:	e8 8b 69 fe ff       	call   f0107f5f <kmalloc>
f01215d4:	83 c4 10             	add    $0x10,%esp
f01215d7:	89 85 24 fe ff ff    	mov    %eax,-0x1dc(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01215dd:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f01215e3:	89 c1                	mov    %eax,%ecx
f01215e5:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f01215ec:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01215f1:	0f b6 d0             	movzbl %al,%edx
f01215f4:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01215f7:	01 d0                	add    %edx,%eax
f01215f9:	48                   	dec    %eax
f01215fa:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f01215fd:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0121600:	ba 00 00 00 00       	mov    $0x0,%edx
f0121605:	f7 75 b8             	divl   -0x48(%ebp)
f0121608:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f012160b:	29 d0                	sub    %edx,%eax
f012160d:	89 c3                	mov    %eax,%ebx
f012160f:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f0121616:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012161b:	0f b6 c0             	movzbl %al,%eax
f012161e:	c1 e0 04             	shl    $0x4,%eax
f0121621:	89 c2                	mov    %eax,%edx
f0121623:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0121626:	01 d0                	add    %edx,%eax
f0121628:	48                   	dec    %eax
f0121629:	89 45 ac             	mov    %eax,-0x54(%ebp)
f012162c:	8b 45 ac             	mov    -0x54(%ebp),%eax
f012162f:	ba 00 00 00 00       	mov    $0x0,%edx
f0121634:	f7 75 b0             	divl   -0x50(%ebp)
f0121637:	8b 45 ac             	mov    -0x54(%ebp),%eax
f012163a:	29 d0                	sub    %edx,%eax
f012163c:	01 d8                	add    %ebx,%eax
f012163e:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0121643:	39 c1                	cmp    %eax,%ecx
f0121645:	74 17                	je     f012165e <test_kfree_bestfirstfit+0x244>
f0121647:	83 ec 04             	sub    $0x4,%esp
f012164a:	68 40 98 13 f0       	push   $0xf0139840
f012164f:	68 9e 06 00 00       	push   $0x69e
f0121654:	68 5a 97 13 f0       	push   $0xf013975a
f0121659:	e8 52 eb fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012165e:	e8 21 30 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0121663:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121666:	74 17                	je     f012167f <test_kfree_bestfirstfit+0x265>
f0121668:	83 ec 04             	sub    $0x4,%esp
f012166b:	68 74 97 13 f0       	push   $0xf0139774
f0121670:	68 9f 06 00 00       	push   $0x69f
f0121675:	68 5a 97 13 f0       	push   $0xf013975a
f012167a:	e8 31 eb fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f012167f:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121682:	e8 3f b3 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0121687:	29 c3                	sub    %eax,%ebx
f0121689:	89 d8                	mov    %ebx,%eax
f012168b:	3d 00 02 00 00       	cmp    $0x200,%eax
f0121690:	74 17                	je     f01216a9 <test_kfree_bestfirstfit+0x28f>
f0121692:	83 ec 04             	sub    $0x4,%esp
f0121695:	68 dc 97 13 f0       	push   $0xf01397dc
f012169a:	68 a0 06 00 00       	push   $0x6a0
f012169f:	68 5a 97 13 f0       	push   $0xf013975a
f01216a4:	e8 07 eb fd ff       	call   f01001b0 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f01216a9:	c7 85 c4 fe ff ff ff 	movl   $0x1ffbff,-0x13c(%ebp)
f01216b0:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01216b3:	e8 0e b3 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01216b8:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01216bb:	e8 c4 2f fe ff       	call   f0104684 <pf_calculate_free_frames>
f01216c0:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f01216c3:	83 ec 0c             	sub    $0xc,%esp
f01216c6:	68 00 08 00 00       	push   $0x800
f01216cb:	e8 8f 68 fe ff       	call   f0107f5f <kmalloc>
f01216d0:	83 c4 10             	add    $0x10,%esp
f01216d3:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01216d9:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f01216df:	89 c1                	mov    %eax,%ecx
f01216e1:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f01216e8:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01216ed:	0f b6 d0             	movzbl %al,%edx
f01216f0:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01216f3:	01 d0                	add    %edx,%eax
f01216f5:	48                   	dec    %eax
f01216f6:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f01216f9:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01216fc:	ba 00 00 00 00       	mov    $0x0,%edx
f0121701:	f7 75 a8             	divl   -0x58(%ebp)
f0121704:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0121707:	29 d0                	sub    %edx,%eax
f0121709:	89 c3                	mov    %eax,%ebx
f012170b:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0121712:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0121717:	0f b6 c0             	movzbl %al,%eax
f012171a:	c1 e0 04             	shl    $0x4,%eax
f012171d:	89 c2                	mov    %eax,%edx
f012171f:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0121722:	01 d0                	add    %edx,%eax
f0121724:	48                   	dec    %eax
f0121725:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0121728:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012172b:	ba 00 00 00 00       	mov    $0x0,%edx
f0121730:	f7 75 a0             	divl   -0x60(%ebp)
f0121733:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0121736:	29 d0                	sub    %edx,%eax
f0121738:	01 d8                	add    %ebx,%eax
f012173a:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f012173f:	39 c1                	cmp    %eax,%ecx
f0121741:	74 17                	je     f012175a <test_kfree_bestfirstfit+0x340>
f0121743:	83 ec 04             	sub    $0x4,%esp
f0121746:	68 40 98 13 f0       	push   $0xf0139840
f012174b:	68 a7 06 00 00       	push   $0x6a7
f0121750:	68 5a 97 13 f0       	push   $0xf013975a
f0121755:	e8 56 ea fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012175a:	e8 25 2f fe ff       	call   f0104684 <pf_calculate_free_frames>
f012175f:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121762:	74 17                	je     f012177b <test_kfree_bestfirstfit+0x361>
f0121764:	83 ec 04             	sub    $0x4,%esp
f0121767:	68 74 97 13 f0       	push   $0xf0139774
f012176c:	68 a8 06 00 00       	push   $0x6a8
f0121771:	68 5a 97 13 f0       	push   $0xf013975a
f0121776:	e8 35 ea fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f012177b:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012177e:	e8 43 b2 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0121783:	29 c3                	sub    %eax,%ebx
f0121785:	89 d8                	mov    %ebx,%eax
f0121787:	83 f8 01             	cmp    $0x1,%eax
f012178a:	74 17                	je     f01217a3 <test_kfree_bestfirstfit+0x389>
f012178c:	83 ec 04             	sub    $0x4,%esp
f012178f:	68 dc 97 13 f0       	push   $0xf01397dc
f0121794:	68 a9 06 00 00       	push   $0x6a9
f0121799:	68 5a 97 13 f0       	push   $0xf013975a
f012179e:	e8 0d ea fd ff       	call   f01001b0 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f01217a3:	c7 85 c8 fe ff ff ff 	movl   $0x7ff,-0x138(%ebp)
f01217aa:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f01217ad:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f01217b3:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f01217b6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01217bd:	eb 0e                	jmp    f01217cd <test_kfree_bestfirstfit+0x3b3>
		{
			ptr[i] = 2 ;
f01217bf:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01217c2:	8b 45 98             	mov    -0x68(%ebp),%eax
f01217c5:	01 d0                	add    %edx,%eax
f01217c7:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f01217ca:	ff 45 f4             	incl   -0xc(%ebp)
f01217cd:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f01217d3:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01217d6:	7f e7                	jg     f01217bf <test_kfree_bestfirstfit+0x3a5>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01217d8:	e8 e9 b1 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01217dd:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01217e0:	e8 9f 2e fe ff       	call   f0104684 <pf_calculate_free_frames>
f01217e5:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f01217e8:	83 ec 0c             	sub    $0xc,%esp
f01217eb:	68 00 08 00 00       	push   $0x800
f01217f0:	e8 6a 67 fe ff       	call   f0107f5f <kmalloc>
f01217f5:	83 c4 10             	add    $0x10,%esp
f01217f8:	89 85 2c fe ff ff    	mov    %eax,-0x1d4(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01217fe:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f0121804:	89 c1                	mov    %eax,%ecx
f0121806:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f012180d:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0121812:	0f b6 d0             	movzbl %al,%edx
f0121815:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0121818:	01 d0                	add    %edx,%eax
f012181a:	48                   	dec    %eax
f012181b:	89 45 90             	mov    %eax,-0x70(%ebp)
f012181e:	8b 45 90             	mov    -0x70(%ebp),%eax
f0121821:	ba 00 00 00 00       	mov    $0x0,%edx
f0121826:	f7 75 94             	divl   -0x6c(%ebp)
f0121829:	8b 45 90             	mov    -0x70(%ebp),%eax
f012182c:	29 d0                	sub    %edx,%eax
f012182e:	89 c3                	mov    %eax,%ebx
f0121830:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f0121837:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012183c:	0f b6 c0             	movzbl %al,%eax
f012183f:	c1 e0 04             	shl    $0x4,%eax
f0121842:	89 c2                	mov    %eax,%edx
f0121844:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0121847:	01 d0                	add    %edx,%eax
f0121849:	48                   	dec    %eax
f012184a:	89 45 88             	mov    %eax,-0x78(%ebp)
f012184d:	8b 45 88             	mov    -0x78(%ebp),%eax
f0121850:	ba 00 00 00 00       	mov    $0x0,%edx
f0121855:	f7 75 8c             	divl   -0x74(%ebp)
f0121858:	8b 45 88             	mov    -0x78(%ebp),%eax
f012185b:	29 d0                	sub    %edx,%eax
f012185d:	01 d8                	add    %ebx,%eax
f012185f:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0121864:	39 c1                	cmp    %eax,%ecx
f0121866:	74 17                	je     f012187f <test_kfree_bestfirstfit+0x465>
f0121868:	83 ec 04             	sub    $0x4,%esp
f012186b:	68 40 98 13 f0       	push   $0xf0139840
f0121870:	68 b5 06 00 00       	push   $0x6b5
f0121875:	68 5a 97 13 f0       	push   $0xf013975a
f012187a:	e8 31 e9 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012187f:	e8 00 2e fe ff       	call   f0104684 <pf_calculate_free_frames>
f0121884:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121887:	74 17                	je     f01218a0 <test_kfree_bestfirstfit+0x486>
f0121889:	83 ec 04             	sub    $0x4,%esp
f012188c:	68 74 97 13 f0       	push   $0xf0139774
f0121891:	68 b6 06 00 00       	push   $0x6b6
f0121896:	68 5a 97 13 f0       	push   $0xf013975a
f012189b:	e8 10 e9 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01218a0:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01218a3:	e8 1e b1 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01218a8:	29 c3                	sub    %eax,%ebx
f01218aa:	89 d8                	mov    %ebx,%eax
f01218ac:	83 f8 01             	cmp    $0x1,%eax
f01218af:	74 17                	je     f01218c8 <test_kfree_bestfirstfit+0x4ae>
f01218b1:	83 ec 04             	sub    $0x4,%esp
f01218b4:	68 dc 97 13 f0       	push   $0xf01397dc
f01218b9:	68 b7 06 00 00       	push   $0x6b7
f01218be:	68 5a 97 13 f0       	push   $0xf013975a
f01218c3:	e8 e8 e8 fd ff       	call   f01001b0 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f01218c8:	c7 85 cc fe ff ff ff 	movl   $0x7ff,-0x134(%ebp)
f01218cf:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f01218d2:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f01218d8:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f01218db:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01218e2:	eb 0e                	jmp    f01218f2 <test_kfree_bestfirstfit+0x4d8>
		{
			ptr[i] = 3 ;
f01218e4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01218e7:	8b 45 98             	mov    -0x68(%ebp),%eax
f01218ea:	01 d0                	add    %edx,%eax
f01218ec:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f01218ef:	ff 45 f4             	incl   -0xc(%ebp)
f01218f2:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f01218f8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01218fb:	7f e7                	jg     f01218e4 <test_kfree_bestfirstfit+0x4ca>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f01218fd:	e8 c4 b0 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0121902:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121905:	e8 7a 2d fe ff       	call   f0104684 <pf_calculate_free_frames>
f012190a:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f012190d:	83 ec 0c             	sub    $0xc,%esp
f0121910:	68 00 1c 00 00       	push   $0x1c00
f0121915:	e8 45 66 fe ff       	call   f0107f5f <kmalloc>
f012191a:	83 c4 10             	add    $0x10,%esp
f012191d:	89 85 30 fe ff ff    	mov    %eax,-0x1d0(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121923:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f0121929:	89 c1                	mov    %eax,%ecx
f012192b:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f0121932:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0121937:	0f b6 d0             	movzbl %al,%edx
f012193a:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012193d:	01 d0                	add    %edx,%eax
f012193f:	48                   	dec    %eax
f0121940:	89 45 80             	mov    %eax,-0x80(%ebp)
f0121943:	8b 45 80             	mov    -0x80(%ebp),%eax
f0121946:	ba 00 00 00 00       	mov    $0x0,%edx
f012194b:	f7 75 84             	divl   -0x7c(%ebp)
f012194e:	8b 45 80             	mov    -0x80(%ebp),%eax
f0121951:	29 d0                	sub    %edx,%eax
f0121953:	89 c3                	mov    %eax,%ebx
f0121955:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f012195c:	10 00 00 
f012195f:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0121964:	0f b6 c0             	movzbl %al,%eax
f0121967:	c1 e0 04             	shl    $0x4,%eax
f012196a:	89 c2                	mov    %eax,%edx
f012196c:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0121972:	01 d0                	add    %edx,%eax
f0121974:	48                   	dec    %eax
f0121975:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f012197b:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0121981:	ba 00 00 00 00       	mov    $0x0,%edx
f0121986:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f012198c:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0121992:	29 d0                	sub    %edx,%eax
f0121994:	01 d8                	add    %ebx,%eax
f0121996:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f012199b:	39 c1                	cmp    %eax,%ecx
f012199d:	74 17                	je     f01219b6 <test_kfree_bestfirstfit+0x59c>
f012199f:	83 ec 04             	sub    $0x4,%esp
f01219a2:	68 40 98 13 f0       	push   $0xf0139840
f01219a7:	68 c3 06 00 00       	push   $0x6c3
f01219ac:	68 5a 97 13 f0       	push   $0xf013975a
f01219b1:	e8 fa e7 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01219b6:	e8 c9 2c fe ff       	call   f0104684 <pf_calculate_free_frames>
f01219bb:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01219be:	74 17                	je     f01219d7 <test_kfree_bestfirstfit+0x5bd>
f01219c0:	83 ec 04             	sub    $0x4,%esp
f01219c3:	68 74 97 13 f0       	push   $0xf0139774
f01219c8:	68 c4 06 00 00       	push   $0x6c4
f01219cd:	68 5a 97 13 f0       	push   $0xf013975a
f01219d2:	e8 d9 e7 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f01219d7:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01219da:	e8 e7 af fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01219df:	29 c3                	sub    %eax,%ebx
f01219e1:	89 d8                	mov    %ebx,%eax
f01219e3:	83 f8 02             	cmp    $0x2,%eax
f01219e6:	74 17                	je     f01219ff <test_kfree_bestfirstfit+0x5e5>
f01219e8:	83 ec 04             	sub    $0x4,%esp
f01219eb:	68 dc 97 13 f0       	push   $0xf01397dc
f01219f0:	68 c5 06 00 00       	push   $0x6c5
f01219f5:	68 5a 97 13 f0       	push   $0xf013975a
f01219fa:	e8 b1 e7 fd ff       	call   f01001b0 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f01219ff:	c7 85 d0 fe ff ff ff 	movl   $0x1bff,-0x130(%ebp)
f0121a06:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f0121a09:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f0121a0f:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0121a12:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121a19:	eb 0e                	jmp    f0121a29 <test_kfree_bestfirstfit+0x60f>
		{
			ptr[i] = 4 ;
f0121a1b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0121a1e:	8b 45 98             	mov    -0x68(%ebp),%eax
f0121a21:	01 d0                	add    %edx,%eax
f0121a23:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0121a26:	ff 45 f4             	incl   -0xc(%ebp)
f0121a29:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0121a2f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121a32:	7f e7                	jg     f0121a1b <test_kfree_bestfirstfit+0x601>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0121a34:	e8 8d af fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0121a39:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121a3c:	e8 43 2c fe ff       	call   f0104684 <pf_calculate_free_frames>
f0121a41:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0121a44:	83 ec 0c             	sub    $0xc,%esp
f0121a47:	68 00 fc 2f 00       	push   $0x2ffc00
f0121a4c:	e8 0e 65 fe ff       	call   f0107f5f <kmalloc>
f0121a51:	83 c4 10             	add    $0x10,%esp
f0121a54:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121a5a:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f0121a60:	89 c1                	mov    %eax,%ecx
f0121a62:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f0121a69:	10 00 00 
f0121a6c:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0121a71:	0f b6 d0             	movzbl %al,%edx
f0121a74:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0121a7a:	01 d0                	add    %edx,%eax
f0121a7c:	48                   	dec    %eax
f0121a7d:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f0121a83:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0121a89:	ba 00 00 00 00       	mov    $0x0,%edx
f0121a8e:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f0121a94:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0121a9a:	29 d0                	sub    %edx,%eax
f0121a9c:	89 c3                	mov    %eax,%ebx
f0121a9e:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f0121aa5:	10 00 00 
f0121aa8:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0121aad:	0f b6 c0             	movzbl %al,%eax
f0121ab0:	c1 e0 04             	shl    $0x4,%eax
f0121ab3:	89 c2                	mov    %eax,%edx
f0121ab5:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0121abb:	01 d0                	add    %edx,%eax
f0121abd:	48                   	dec    %eax
f0121abe:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f0121ac4:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0121aca:	ba 00 00 00 00       	mov    $0x0,%edx
f0121acf:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f0121ad5:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0121adb:	29 d0                	sub    %edx,%eax
f0121add:	01 d8                	add    %ebx,%eax
f0121adf:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0121ae4:	39 c1                	cmp    %eax,%ecx
f0121ae6:	74 17                	je     f0121aff <test_kfree_bestfirstfit+0x6e5>
f0121ae8:	83 ec 04             	sub    $0x4,%esp
f0121aeb:	68 40 98 13 f0       	push   $0xf0139840
f0121af0:	68 d1 06 00 00       	push   $0x6d1
f0121af5:	68 5a 97 13 f0       	push   $0xf013975a
f0121afa:	e8 b1 e6 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121aff:	e8 80 2b fe ff       	call   f0104684 <pf_calculate_free_frames>
f0121b04:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121b07:	74 17                	je     f0121b20 <test_kfree_bestfirstfit+0x706>
f0121b09:	83 ec 04             	sub    $0x4,%esp
f0121b0c:	68 74 97 13 f0       	push   $0xf0139774
f0121b11:	68 d2 06 00 00       	push   $0x6d2
f0121b16:	68 5a 97 13 f0       	push   $0xf013975a
f0121b1b:	e8 90 e6 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121b20:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121b23:	e8 9e ae fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0121b28:	29 c3                	sub    %eax,%ebx
f0121b2a:	89 d8                	mov    %ebx,%eax
f0121b2c:	3d 00 03 00 00       	cmp    $0x300,%eax
f0121b31:	74 17                	je     f0121b4a <test_kfree_bestfirstfit+0x730>
f0121b33:	83 ec 04             	sub    $0x4,%esp
f0121b36:	68 dc 97 13 f0       	push   $0xf01397dc
f0121b3b:	68 d3 06 00 00       	push   $0x6d3
f0121b40:	68 5a 97 13 f0       	push   $0xf013975a
f0121b45:	e8 66 e6 fd ff       	call   f01001b0 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f0121b4a:	c7 85 d4 fe ff ff ff 	movl   $0x2ffbff,-0x12c(%ebp)
f0121b51:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f0121b54:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f0121b5a:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0121b5d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121b64:	eb 0e                	jmp    f0121b74 <test_kfree_bestfirstfit+0x75a>
		{
			ptr[i] = 5 ;
f0121b66:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0121b69:	8b 45 98             	mov    -0x68(%ebp),%eax
f0121b6c:	01 d0                	add    %edx,%eax
f0121b6e:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0121b71:	ff 45 f4             	incl   -0xc(%ebp)
f0121b74:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0121b7a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121b7d:	7f e7                	jg     f0121b66 <test_kfree_bestfirstfit+0x74c>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0121b7f:	e8 42 ae fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0121b84:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121b87:	e8 f8 2a fe ff       	call   f0104684 <pf_calculate_free_frames>
f0121b8c:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0121b8f:	83 ec 0c             	sub    $0xc,%esp
f0121b92:	68 00 fc 5f 00       	push   $0x5ffc00
f0121b97:	e8 c3 63 fe ff       	call   f0107f5f <kmalloc>
f0121b9c:	83 c4 10             	add    $0x10,%esp
f0121b9f:	89 85 38 fe ff ff    	mov    %eax,-0x1c8(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121ba5:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0121bab:	89 c1                	mov    %eax,%ecx
f0121bad:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f0121bb4:	10 00 00 
f0121bb7:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0121bbc:	0f b6 d0             	movzbl %al,%edx
f0121bbf:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0121bc5:	01 d0                	add    %edx,%eax
f0121bc7:	48                   	dec    %eax
f0121bc8:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f0121bce:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0121bd4:	ba 00 00 00 00       	mov    $0x0,%edx
f0121bd9:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f0121bdf:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0121be5:	29 d0                	sub    %edx,%eax
f0121be7:	89 c3                	mov    %eax,%ebx
f0121be9:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f0121bf0:	10 00 00 
f0121bf3:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0121bf8:	0f b6 c0             	movzbl %al,%eax
f0121bfb:	c1 e0 04             	shl    $0x4,%eax
f0121bfe:	89 c2                	mov    %eax,%edx
f0121c00:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0121c06:	01 d0                	add    %edx,%eax
f0121c08:	48                   	dec    %eax
f0121c09:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f0121c0f:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0121c15:	ba 00 00 00 00       	mov    $0x0,%edx
f0121c1a:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f0121c20:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0121c26:	29 d0                	sub    %edx,%eax
f0121c28:	01 d8                	add    %ebx,%eax
f0121c2a:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0121c2f:	39 c1                	cmp    %eax,%ecx
f0121c31:	74 17                	je     f0121c4a <test_kfree_bestfirstfit+0x830>
f0121c33:	83 ec 04             	sub    $0x4,%esp
f0121c36:	68 40 98 13 f0       	push   $0xf0139840
f0121c3b:	68 df 06 00 00       	push   $0x6df
f0121c40:	68 5a 97 13 f0       	push   $0xf013975a
f0121c45:	e8 66 e5 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121c4a:	e8 35 2a fe ff       	call   f0104684 <pf_calculate_free_frames>
f0121c4f:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121c52:	74 17                	je     f0121c6b <test_kfree_bestfirstfit+0x851>
f0121c54:	83 ec 04             	sub    $0x4,%esp
f0121c57:	68 74 97 13 f0       	push   $0xf0139774
f0121c5c:	68 e0 06 00 00       	push   $0x6e0
f0121c61:	68 5a 97 13 f0       	push   $0xf013975a
f0121c66:	e8 45 e5 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121c6b:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121c6e:	e8 53 ad fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0121c73:	29 c3                	sub    %eax,%ebx
f0121c75:	89 d8                	mov    %ebx,%eax
f0121c77:	3d 00 06 00 00       	cmp    $0x600,%eax
f0121c7c:	74 17                	je     f0121c95 <test_kfree_bestfirstfit+0x87b>
f0121c7e:	83 ec 04             	sub    $0x4,%esp
f0121c81:	68 dc 97 13 f0       	push   $0xf01397dc
f0121c86:	68 e1 06 00 00       	push   $0x6e1
f0121c8b:	68 5a 97 13 f0       	push   $0xf013975a
f0121c90:	e8 1b e5 fd ff       	call   f01001b0 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f0121c95:	c7 85 d8 fe ff ff ff 	movl   $0x5ffbff,-0x128(%ebp)
f0121c9c:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0121c9f:	e8 22 ad fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0121ca4:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121ca7:	e8 d8 29 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0121cac:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0121caf:	83 ec 0c             	sub    $0xc,%esp
f0121cb2:	68 00 38 00 00       	push   $0x3800
f0121cb7:	e8 a3 62 fe ff       	call   f0107f5f <kmalloc>
f0121cbc:	83 c4 10             	add    $0x10,%esp
f0121cbf:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121cc5:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0121ccb:	89 c1                	mov    %eax,%ecx
f0121ccd:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f0121cd4:	10 00 00 
f0121cd7:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0121cdc:	0f b6 d0             	movzbl %al,%edx
f0121cdf:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0121ce5:	01 d0                	add    %edx,%eax
f0121ce7:	48                   	dec    %eax
f0121ce8:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f0121cee:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0121cf4:	ba 00 00 00 00       	mov    $0x0,%edx
f0121cf9:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f0121cff:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0121d05:	29 d0                	sub    %edx,%eax
f0121d07:	89 c3                	mov    %eax,%ebx
f0121d09:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f0121d10:	10 00 00 
f0121d13:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0121d18:	0f b6 c0             	movzbl %al,%eax
f0121d1b:	c1 e0 04             	shl    $0x4,%eax
f0121d1e:	89 c2                	mov    %eax,%edx
f0121d20:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0121d26:	01 d0                	add    %edx,%eax
f0121d28:	48                   	dec    %eax
f0121d29:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f0121d2f:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0121d35:	ba 00 00 00 00       	mov    $0x0,%edx
f0121d3a:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f0121d40:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0121d46:	29 d0                	sub    %edx,%eax
f0121d48:	01 d8                	add    %ebx,%eax
f0121d4a:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0121d4f:	39 c1                	cmp    %eax,%ecx
f0121d51:	74 17                	je     f0121d6a <test_kfree_bestfirstfit+0x950>
f0121d53:	83 ec 04             	sub    $0x4,%esp
f0121d56:	68 40 98 13 f0       	push   $0xf0139840
f0121d5b:	68 e8 06 00 00       	push   $0x6e8
f0121d60:	68 5a 97 13 f0       	push   $0xf013975a
f0121d65:	e8 46 e4 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121d6a:	e8 15 29 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0121d6f:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121d72:	74 17                	je     f0121d8b <test_kfree_bestfirstfit+0x971>
f0121d74:	83 ec 04             	sub    $0x4,%esp
f0121d77:	68 74 97 13 f0       	push   $0xf0139774
f0121d7c:	68 e9 06 00 00       	push   $0x6e9
f0121d81:	68 5a 97 13 f0       	push   $0xf013975a
f0121d86:	e8 25 e4 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121d8b:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121d8e:	e8 33 ac fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0121d93:	29 c3                	sub    %eax,%ebx
f0121d95:	89 d8                	mov    %ebx,%eax
f0121d97:	83 f8 04             	cmp    $0x4,%eax
f0121d9a:	74 17                	je     f0121db3 <test_kfree_bestfirstfit+0x999>
f0121d9c:	83 ec 04             	sub    $0x4,%esp
f0121d9f:	68 dc 97 13 f0       	push   $0xf01397dc
f0121da4:	68 ea 06 00 00       	push   $0x6ea
f0121da9:	68 5a 97 13 f0       	push   $0xf013975a
f0121dae:	e8 fd e3 fd ff       	call   f01001b0 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f0121db3:	c7 85 dc fe ff ff ff 	movl   $0x37ff,-0x124(%ebp)
f0121dba:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f0121dbd:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0121dc3:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0121dc6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121dcd:	eb 0e                	jmp    f0121ddd <test_kfree_bestfirstfit+0x9c3>
		{
			ptr[i] = 7 ;
f0121dcf:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0121dd2:	8b 45 98             	mov    -0x68(%ebp),%eax
f0121dd5:	01 d0                	add    %edx,%eax
f0121dd7:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0121dda:	ff 45 f4             	incl   -0xc(%ebp)
f0121ddd:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0121de3:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121de6:	7f e7                	jg     f0121dcf <test_kfree_bestfirstfit+0x9b5>
	}

	//kfree some of the allocated spaces [15%]
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0121de8:	e8 d9 ab fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0121ded:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0121df3:	e8 8c 28 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0121df8:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[0]);
f0121dfe:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f0121e04:	83 ec 0c             	sub    $0xc,%esp
f0121e07:	50                   	push   %eax
f0121e08:	e8 6c 61 fe ff       	call   f0107f79 <kfree>
f0121e0d:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121e10:	e8 6f 28 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0121e15:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f0121e1b:	74 17                	je     f0121e34 <test_kfree_bestfirstfit+0xa1a>
f0121e1d:	83 ec 04             	sub    $0x4,%esp
f0121e20:	68 74 97 13 f0       	push   $0xf0139774
f0121e25:	68 f9 06 00 00       	push   $0x6f9
f0121e2a:	68 5a 97 13 f0       	push   $0xf013975a
f0121e2f:	e8 7c e3 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0121e34:	e8 8d ab fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0121e39:	89 c2                	mov    %eax,%edx
f0121e3b:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0121e41:	29 c2                	sub    %eax,%edx
f0121e43:	89 d0                	mov    %edx,%eax
f0121e45:	3d 00 02 00 00       	cmp    $0x200,%eax
f0121e4a:	74 17                	je     f0121e63 <test_kfree_bestfirstfit+0xa49>
f0121e4c:	83 ec 04             	sub    $0x4,%esp
f0121e4f:	68 e4 9e 13 f0       	push   $0xf0139ee4
f0121e54:	68 fa 06 00 00       	push   $0x6fa
f0121e59:	68 5a 97 13 f0       	push   $0xf013975a
f0121e5e:	e8 4d e3 fd ff       	call   f01001b0 <_panic>

		//kfree 1st 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0121e63:	e8 5e ab fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0121e68:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121e6e:	e8 11 28 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0121e73:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[2]);
f0121e79:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f0121e7f:	83 ec 0c             	sub    $0xc,%esp
f0121e82:	50                   	push   %eax
f0121e83:	e8 f1 60 fe ff       	call   f0107f79 <kfree>
f0121e88:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121e8b:	e8 f4 27 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0121e90:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f0121e96:	74 17                	je     f0121eaf <test_kfree_bestfirstfit+0xa95>
f0121e98:	83 ec 04             	sub    $0x4,%esp
f0121e9b:	68 74 97 13 f0       	push   $0xf0139774
f0121ea0:	68 00 07 00 00       	push   $0x700
f0121ea5:	68 5a 97 13 f0       	push   $0xf013975a
f0121eaa:	e8 01 e3 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0121eaf:	e8 12 ab fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0121eb4:	89 c2                	mov    %eax,%edx
f0121eb6:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0121ebc:	29 c2                	sub    %eax,%edx
f0121ebe:	89 d0                	mov    %edx,%eax
f0121ec0:	83 f8 01             	cmp    $0x1,%eax
f0121ec3:	74 17                	je     f0121edc <test_kfree_bestfirstfit+0xac2>
f0121ec5:	83 ec 04             	sub    $0x4,%esp
f0121ec8:	68 e4 9e 13 f0       	push   $0xf0139ee4
f0121ecd:	68 01 07 00 00       	push   $0x701
f0121ed2:	68 5a 97 13 f0       	push   $0xf013975a
f0121ed7:	e8 d4 e2 fd ff       	call   f01001b0 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0121edc:	e8 e5 aa fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0121ee1:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121ee7:	e8 98 27 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0121eec:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[1]);
f0121ef2:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f0121ef8:	83 ec 0c             	sub    $0xc,%esp
f0121efb:	50                   	push   %eax
f0121efc:	e8 78 60 fe ff       	call   f0107f79 <kfree>
f0121f01:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121f04:	e8 7b 27 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0121f09:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f0121f0f:	74 17                	je     f0121f28 <test_kfree_bestfirstfit+0xb0e>
f0121f11:	83 ec 04             	sub    $0x4,%esp
f0121f14:	68 74 97 13 f0       	push   $0xf0139774
f0121f19:	68 07 07 00 00       	push   $0x707
f0121f1e:	68 5a 97 13 f0       	push   $0xf013975a
f0121f23:	e8 88 e2 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f0121f28:	e8 99 aa fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0121f2d:	89 c2                	mov    %eax,%edx
f0121f2f:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0121f35:	29 c2                	sub    %eax,%edx
f0121f37:	89 d0                	mov    %edx,%eax
f0121f39:	3d 00 02 00 00       	cmp    $0x200,%eax
f0121f3e:	74 17                	je     f0121f57 <test_kfree_bestfirstfit+0xb3d>
f0121f40:	83 ec 04             	sub    $0x4,%esp
f0121f43:	68 e4 9e 13 f0       	push   $0xf0139ee4
f0121f48:	68 08 07 00 00       	push   $0x708
f0121f4d:	68 5a 97 13 f0       	push   $0xf013975a
f0121f52:	e8 59 e2 fd ff       	call   f01001b0 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f0121f57:	e8 6a aa fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0121f5c:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121f62:	e8 1d 27 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0121f67:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[6]);
f0121f6d:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0121f73:	83 ec 0c             	sub    $0xc,%esp
f0121f76:	50                   	push   %eax
f0121f77:	e8 fd 5f fe ff       	call   f0107f79 <kfree>
f0121f7c:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121f7f:	e8 00 27 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0121f84:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f0121f8a:	74 17                	je     f0121fa3 <test_kfree_bestfirstfit+0xb89>
f0121f8c:	83 ec 04             	sub    $0x4,%esp
f0121f8f:	68 74 97 13 f0       	push   $0xf0139774
f0121f94:	68 0e 07 00 00       	push   $0x70e
f0121f99:	68 5a 97 13 f0       	push   $0xf013975a
f0121f9e:	e8 0d e2 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0121fa3:	e8 1e aa fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0121fa8:	89 c2                	mov    %eax,%edx
f0121faa:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0121fb0:	29 c2                	sub    %eax,%edx
f0121fb2:	89 d0                	mov    %edx,%eax
f0121fb4:	3d 00 06 00 00       	cmp    $0x600,%eax
f0121fb9:	74 17                	je     f0121fd2 <test_kfree_bestfirstfit+0xbb8>
f0121fbb:	83 ec 04             	sub    $0x4,%esp
f0121fbe:	68 e4 9e 13 f0       	push   $0xf0139ee4
f0121fc3:	68 0f 07 00 00       	push   $0x70f
f0121fc8:	68 5a 97 13 f0       	push   $0xf013975a
f0121fcd:	e8 de e1 fd ff       	call   f01001b0 <_panic>
	}

	cprintf("\nkfree: current evaluation = 15%");
f0121fd2:	83 ec 0c             	sub    $0xc,%esp
f0121fd5:	68 1c 9f 13 f0       	push   $0xf0139f1c
f0121fda:	e8 52 ee fd ff       	call   f0100e31 <cprintf>
f0121fdf:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
f0121fe2:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f0121fe8:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0121feb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121ff2:	eb 1e                	jmp    f0122012 <test_kfree_bestfirstfit+0xbf8>
		{
			sums[3] += ptr[i] ;
f0121ff4:	8b 95 7c fe ff ff    	mov    -0x184(%ebp),%edx
f0121ffa:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0121ffd:	8b 45 98             	mov    -0x68(%ebp),%eax
f0122000:	01 c8                	add    %ecx,%eax
f0122002:	8a 00                	mov    (%eax),%al
f0122004:	0f be c0             	movsbl %al,%eax
f0122007:	01 d0                	add    %edx,%eax
f0122009:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f012200f:	ff 45 f4             	incl   -0xc(%ebp)
f0122012:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0122018:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012201b:	7f d7                	jg     f0121ff4 <test_kfree_bestfirstfit+0xbda>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f012201d:	8b 95 7c fe ff ff    	mov    -0x184(%ebp),%edx
f0122023:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0122029:	89 c1                	mov    %eax,%ecx
f012202b:	01 c9                	add    %ecx,%ecx
f012202d:	01 c8                	add    %ecx,%eax
f012202f:	39 c2                	cmp    %eax,%edx
f0122031:	74 17                	je     f012204a <test_kfree_bestfirstfit+0xc30>
f0122033:	83 ec 04             	sub    $0x4,%esp
f0122036:	68 40 9f 13 f0       	push   $0xf0139f40
f012203b:	68 1c 07 00 00       	push   $0x71c
f0122040:	68 5a 97 13 f0       	push   $0xf013975a
f0122045:	e8 66 e1 fd ff       	call   f01001b0 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f012204a:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f0122050:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0122053:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012205a:	eb 1e                	jmp    f012207a <test_kfree_bestfirstfit+0xc60>
		{
			sums[4] += ptr[i] ;
f012205c:	8b 95 80 fe ff ff    	mov    -0x180(%ebp),%edx
f0122062:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0122065:	8b 45 98             	mov    -0x68(%ebp),%eax
f0122068:	01 c8                	add    %ecx,%eax
f012206a:	8a 00                	mov    (%eax),%al
f012206c:	0f be c0             	movsbl %al,%eax
f012206f:	01 d0                	add    %edx,%eax
f0122071:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0122077:	ff 45 f4             	incl   -0xc(%ebp)
f012207a:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0122080:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122083:	7f d7                	jg     f012205c <test_kfree_bestfirstfit+0xc42>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f0122085:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f012208b:	8b 95 d0 fe ff ff    	mov    -0x130(%ebp),%edx
f0122091:	c1 e2 02             	shl    $0x2,%edx
f0122094:	39 d0                	cmp    %edx,%eax
f0122096:	74 17                	je     f01220af <test_kfree_bestfirstfit+0xc95>
f0122098:	83 ec 04             	sub    $0x4,%esp
f012209b:	68 40 9f 13 f0       	push   $0xf0139f40
f01220a0:	68 24 07 00 00       	push   $0x724
f01220a5:	68 5a 97 13 f0       	push   $0xf013975a
f01220aa:	e8 01 e1 fd ff       	call   f01001b0 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f01220af:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f01220b5:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f01220b8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01220bf:	eb 1e                	jmp    f01220df <test_kfree_bestfirstfit+0xcc5>
		{
			sums[5] += ptr[i] ;
f01220c1:	8b 95 84 fe ff ff    	mov    -0x17c(%ebp),%edx
f01220c7:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01220ca:	8b 45 98             	mov    -0x68(%ebp),%eax
f01220cd:	01 c8                	add    %ecx,%eax
f01220cf:	8a 00                	mov    (%eax),%al
f01220d1:	0f be c0             	movsbl %al,%eax
f01220d4:	01 d0                	add    %edx,%eax
f01220d6:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f01220dc:	ff 45 f4             	incl   -0xc(%ebp)
f01220df:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f01220e5:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01220e8:	7f d7                	jg     f01220c1 <test_kfree_bestfirstfit+0xca7>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f01220ea:	8b 8d 84 fe ff ff    	mov    -0x17c(%ebp),%ecx
f01220f0:	8b 95 d4 fe ff ff    	mov    -0x12c(%ebp),%edx
f01220f6:	89 d0                	mov    %edx,%eax
f01220f8:	c1 e0 02             	shl    $0x2,%eax
f01220fb:	01 d0                	add    %edx,%eax
f01220fd:	39 c1                	cmp    %eax,%ecx
f01220ff:	74 17                	je     f0122118 <test_kfree_bestfirstfit+0xcfe>
f0122101:	83 ec 04             	sub    $0x4,%esp
f0122104:	68 40 9f 13 f0       	push   $0xf0139f40
f0122109:	68 2c 07 00 00       	push   $0x72c
f012210e:	68 5a 97 13 f0       	push   $0xf013975a
f0122113:	e8 98 e0 fd ff       	call   f01001b0 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f0122118:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f012211e:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0122121:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122128:	eb 1e                	jmp    f0122148 <test_kfree_bestfirstfit+0xd2e>
		{
			sums[7] += ptr[i] ;
f012212a:	8b 95 8c fe ff ff    	mov    -0x174(%ebp),%edx
f0122130:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0122133:	8b 45 98             	mov    -0x68(%ebp),%eax
f0122136:	01 c8                	add    %ecx,%eax
f0122138:	8a 00                	mov    (%eax),%al
f012213a:	0f be c0             	movsbl %al,%eax
f012213d:	01 d0                	add    %edx,%eax
f012213f:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0122145:	ff 45 f4             	incl   -0xc(%ebp)
f0122148:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f012214e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122151:	7f d7                	jg     f012212a <test_kfree_bestfirstfit+0xd10>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f0122153:	8b 8d 8c fe ff ff    	mov    -0x174(%ebp),%ecx
f0122159:	8b 95 dc fe ff ff    	mov    -0x124(%ebp),%edx
f012215f:	89 d0                	mov    %edx,%eax
f0122161:	01 c0                	add    %eax,%eax
f0122163:	01 d0                	add    %edx,%eax
f0122165:	01 c0                	add    %eax,%eax
f0122167:	01 d0                	add    %edx,%eax
f0122169:	39 c1                	cmp    %eax,%ecx
f012216b:	74 17                	je     f0122184 <test_kfree_bestfirstfit+0xd6a>
f012216d:	83 ec 04             	sub    $0x4,%esp
f0122170:	68 40 9f 13 f0       	push   $0xf0139f40
f0122175:	68 34 07 00 00       	push   $0x734
f012217a:	68 5a 97 13 f0       	push   $0xf013975a
f012217f:	e8 2c e0 fd ff       	call   f01001b0 <_panic>
	}
	cprintf("\b\b\b30%");
f0122184:	83 ec 0c             	sub    $0xc,%esp
f0122187:	68 73 9f 13 f0       	push   $0xf0139f73
f012218c:	e8 a0 ec fd ff       	call   f0100e31 <cprintf>
f0122191:	83 c4 10             	add    $0x10,%esp

	//Allocate after kfree [15%]
	{
		//Allocate in merged freed space
		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0122194:	e8 2d a8 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0122199:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012219c:	e8 e3 24 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01221a1:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[8] = kmalloc(3*Mega);
f01221a4:	83 ec 0c             	sub    $0xc,%esp
f01221a7:	68 00 00 30 00       	push   $0x300000
f01221ac:	e8 ae 5d fe ff       	call   f0107f5f <kmalloc>
f01221b1:	83 c4 10             	add    $0x10,%esp
f01221b4:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01221ba:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f01221c0:	89 c1                	mov    %eax,%ecx
f01221c2:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f01221c9:	10 00 00 
f01221cc:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01221d1:	0f b6 d0             	movzbl %al,%edx
f01221d4:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01221da:	01 d0                	add    %edx,%eax
f01221dc:	48                   	dec    %eax
f01221dd:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f01221e3:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01221e9:	ba 00 00 00 00       	mov    $0x0,%edx
f01221ee:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f01221f4:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01221fa:	29 d0                	sub    %edx,%eax
f01221fc:	89 c3                	mov    %eax,%ebx
f01221fe:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f0122205:	10 00 00 
f0122208:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012220d:	0f b6 c0             	movzbl %al,%eax
f0122210:	c1 e0 04             	shl    $0x4,%eax
f0122213:	89 c2                	mov    %eax,%edx
f0122215:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f012221b:	01 d0                	add    %edx,%eax
f012221d:	48                   	dec    %eax
f012221e:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f0122224:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012222a:	ba 00 00 00 00       	mov    $0x0,%edx
f012222f:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f0122235:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012223b:	29 d0                	sub    %edx,%eax
f012223d:	01 d8                	add    %ebx,%eax
f012223f:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0122244:	39 c1                	cmp    %eax,%ecx
f0122246:	74 17                	je     f012225f <test_kfree_bestfirstfit+0xe45>
f0122248:	83 ec 04             	sub    $0x4,%esp
f012224b:	68 40 98 13 f0       	push   $0xf0139840
f0122250:	68 3f 07 00 00       	push   $0x73f
f0122255:	68 5a 97 13 f0       	push   $0xf013975a
f012225a:	e8 51 df fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012225f:	e8 20 24 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0122264:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122267:	74 17                	je     f0122280 <test_kfree_bestfirstfit+0xe66>
f0122269:	83 ec 04             	sub    $0x4,%esp
f012226c:	68 74 97 13 f0       	push   $0xf0139774
f0122271:	68 40 07 00 00       	push   $0x740
f0122276:	68 5a 97 13 f0       	push   $0xf013975a
f012227b:	e8 30 df fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122280:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0122283:	e8 3e a7 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0122288:	29 c3                	sub    %eax,%ebx
f012228a:	89 d8                	mov    %ebx,%eax
f012228c:	3d 00 03 00 00       	cmp    $0x300,%eax
f0122291:	74 17                	je     f01222aa <test_kfree_bestfirstfit+0xe90>
f0122293:	83 ec 04             	sub    $0x4,%esp
f0122296:	68 dc 97 13 f0       	push   $0xf01397dc
f012229b:	68 41 07 00 00       	push   $0x741
f01222a0:	68 5a 97 13 f0       	push   $0xf013975a
f01222a5:	e8 06 df fd ff       	call   f01001b0 <_panic>
		lastIndices[8] = (3*Mega)/sizeof(char) - 1;
f01222aa:	c7 85 e0 fe ff ff ff 	movl   $0x2fffff,-0x120(%ebp)
f01222b1:	ff 2f 00 
		ptr = (char*)ptr_allocations[8];
f01222b4:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f01222ba:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f01222bd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01222c4:	eb 0e                	jmp    f01222d4 <test_kfree_bestfirstfit+0xeba>
		{
			ptr[i] = 8 ;
f01222c6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01222c9:	8b 45 98             	mov    -0x68(%ebp),%eax
f01222cc:	01 d0                	add    %edx,%eax
f01222ce:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (3*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f01222d1:	ff 45 f4             	incl   -0xc(%ebp)
f01222d4:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01222da:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01222dd:	7f e7                	jg     f01222c6 <test_kfree_bestfirstfit+0xeac>
		{
			ptr[i] = 8 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01222df:	e8 e2 a6 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01222e4:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01222e7:	e8 98 23 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01222ec:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[9] = kmalloc(2*kilo);
f01222ef:	83 ec 0c             	sub    $0xc,%esp
f01222f2:	68 00 08 00 00       	push   $0x800
f01222f7:	e8 63 5c fe ff       	call   f0107f5f <kmalloc>
f01222fc:	83 c4 10             	add    $0x10,%esp
f01222ff:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122305:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012230b:	89 c1                	mov    %eax,%ecx
f012230d:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f0122314:	10 00 00 
f0122317:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012231c:	0f b6 d0             	movzbl %al,%edx
f012231f:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0122325:	01 d0                	add    %edx,%eax
f0122327:	48                   	dec    %eax
f0122328:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f012232e:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0122334:	ba 00 00 00 00       	mov    $0x0,%edx
f0122339:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f012233f:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0122345:	29 d0                	sub    %edx,%eax
f0122347:	89 c3                	mov    %eax,%ebx
f0122349:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f0122350:	10 00 00 
f0122353:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0122358:	0f b6 c0             	movzbl %al,%eax
f012235b:	c1 e0 04             	shl    $0x4,%eax
f012235e:	89 c2                	mov    %eax,%edx
f0122360:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0122366:	01 d0                	add    %edx,%eax
f0122368:	48                   	dec    %eax
f0122369:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f012236f:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0122375:	ba 00 00 00 00       	mov    $0x0,%edx
f012237a:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f0122380:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0122386:	29 d0                	sub    %edx,%eax
f0122388:	01 d8                	add    %ebx,%eax
f012238a:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f012238f:	39 c1                	cmp    %eax,%ecx
f0122391:	74 17                	je     f01223aa <test_kfree_bestfirstfit+0xf90>
f0122393:	83 ec 04             	sub    $0x4,%esp
f0122396:	68 40 98 13 f0       	push   $0xf0139840
f012239b:	68 4d 07 00 00       	push   $0x74d
f01223a0:	68 5a 97 13 f0       	push   $0xf013975a
f01223a5:	e8 06 de fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01223aa:	e8 d5 22 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01223af:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01223b2:	74 17                	je     f01223cb <test_kfree_bestfirstfit+0xfb1>
f01223b4:	83 ec 04             	sub    $0x4,%esp
f01223b7:	68 74 97 13 f0       	push   $0xf0139774
f01223bc:	68 4e 07 00 00       	push   $0x74e
f01223c1:	68 5a 97 13 f0       	push   $0xf013975a
f01223c6:	e8 e5 dd fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01223cb:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01223ce:	e8 f3 a5 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01223d3:	29 c3                	sub    %eax,%ebx
f01223d5:	89 d8                	mov    %ebx,%eax
f01223d7:	83 f8 01             	cmp    $0x1,%eax
f01223da:	74 17                	je     f01223f3 <test_kfree_bestfirstfit+0xfd9>
f01223dc:	83 ec 04             	sub    $0x4,%esp
f01223df:	68 dc 97 13 f0       	push   $0xf01397dc
f01223e4:	68 4f 07 00 00       	push   $0x74f
f01223e9:	68 5a 97 13 f0       	push   $0xf013975a
f01223ee:	e8 bd dd fd ff       	call   f01001b0 <_panic>
		lastIndices[9] = (2*kilo)/sizeof(char) - 1;
f01223f3:	c7 85 e4 fe ff ff ff 	movl   $0x7ff,-0x11c(%ebp)
f01223fa:	07 00 00 
		ptr = (char*)ptr_allocations[9];
f01223fd:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0122403:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f0122406:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012240d:	eb 0e                	jmp    f012241d <test_kfree_bestfirstfit+0x1003>
		{
			ptr[i] = 9 ;
f012240f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0122412:	8b 45 98             	mov    -0x68(%ebp),%eax
f0122415:	01 d0                	add    %edx,%eax
f0122417:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f012241a:	ff 45 f4             	incl   -0xc(%ebp)
f012241d:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0122423:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122426:	7f e7                	jg     f012240f <test_kfree_bestfirstfit+0xff5>
		{
			ptr[i] = 9 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f0122428:	e8 99 a5 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012242d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122430:	e8 4f 22 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0122435:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[10] = kmalloc(1*Mega);
f0122438:	83 ec 0c             	sub    $0xc,%esp
f012243b:	68 00 00 10 00       	push   $0x100000
f0122440:	e8 1a 5b fe ff       	call   f0107f5f <kmalloc>
f0122445:	83 c4 10             	add    $0x10,%esp
f0122448:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012244e:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0122454:	89 c1                	mov    %eax,%ecx
f0122456:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f012245d:	10 00 00 
f0122460:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0122465:	0f b6 d0             	movzbl %al,%edx
f0122468:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012246e:	01 d0                	add    %edx,%eax
f0122470:	48                   	dec    %eax
f0122471:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f0122477:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012247d:	ba 00 00 00 00       	mov    $0x0,%edx
f0122482:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f0122488:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012248e:	29 d0                	sub    %edx,%eax
f0122490:	89 c3                	mov    %eax,%ebx
f0122492:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f0122499:	10 00 00 
f012249c:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01224a1:	0f b6 c0             	movzbl %al,%eax
f01224a4:	c1 e0 04             	shl    $0x4,%eax
f01224a7:	89 c2                	mov    %eax,%edx
f01224a9:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f01224af:	01 d0                	add    %edx,%eax
f01224b1:	48                   	dec    %eax
f01224b2:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f01224b8:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01224be:	ba 00 00 00 00       	mov    $0x0,%edx
f01224c3:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f01224c9:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01224cf:	29 d0                	sub    %edx,%eax
f01224d1:	01 d8                	add    %ebx,%eax
f01224d3:	2d 00 b0 cf 09       	sub    $0x9cfb000,%eax
f01224d8:	39 c1                	cmp    %eax,%ecx
f01224da:	74 17                	je     f01224f3 <test_kfree_bestfirstfit+0x10d9>
f01224dc:	83 ec 04             	sub    $0x4,%esp
f01224df:	68 40 98 13 f0       	push   $0xf0139840
f01224e4:	68 5b 07 00 00       	push   $0x75b
f01224e9:	68 5a 97 13 f0       	push   $0xf013975a
f01224ee:	e8 bd dc fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01224f3:	e8 8c 21 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01224f8:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01224fb:	74 17                	je     f0122514 <test_kfree_bestfirstfit+0x10fa>
f01224fd:	83 ec 04             	sub    $0x4,%esp
f0122500:	68 74 97 13 f0       	push   $0xf0139774
f0122505:	68 5c 07 00 00       	push   $0x75c
f012250a:	68 5a 97 13 f0       	push   $0xf013975a
f012250f:	e8 9c dc fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122514:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0122517:	e8 aa a4 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012251c:	29 c3                	sub    %eax,%ebx
f012251e:	89 d8                	mov    %ebx,%eax
f0122520:	3d 00 01 00 00       	cmp    $0x100,%eax
f0122525:	74 17                	je     f012253e <test_kfree_bestfirstfit+0x1124>
f0122527:	83 ec 04             	sub    $0x4,%esp
f012252a:	68 dc 97 13 f0       	push   $0xf01397dc
f012252f:	68 5d 07 00 00       	push   $0x75d
f0122534:	68 5a 97 13 f0       	push   $0xf013975a
f0122539:	e8 72 dc fd ff       	call   f01001b0 <_panic>
		lastIndices[10] = (1*Mega)/sizeof(char) - 1;
f012253e:	c7 85 e8 fe ff ff ff 	movl   $0xfffff,-0x118(%ebp)
f0122545:	ff 0f 00 
		ptr = (char*)ptr_allocations[10];
f0122548:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012254e:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[10]; ++i)
f0122551:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122558:	eb 0e                	jmp    f0122568 <test_kfree_bestfirstfit+0x114e>
		{
			ptr[i] = 10 ;
f012255a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012255d:	8b 45 98             	mov    -0x68(%ebp),%eax
f0122560:	01 d0                	add    %edx,%eax
f0122562:	c6 00 0a             	movb   $0xa,(%eax)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[10] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[10];
		for (i = 0; i < lastIndices[10]; ++i)
f0122565:	ff 45 f4             	incl   -0xc(%ebp)
f0122568:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012256e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122571:	7f e7                	jg     f012255a <test_kfree_bestfirstfit+0x1140>
		{
			ptr[i] = 10 ;
		}
	}
	cprintf("\b\b\b45%");
f0122573:	83 ec 0c             	sub    $0xc,%esp
f0122576:	68 7a 9f 13 f0       	push   $0xf0139f7a
f012257b:	e8 b1 e8 fd ff       	call   f0100e31 <cprintf>
f0122580:	83 c4 10             	add    $0x10,%esp

	//kfree remaining allocated spaces [15%]
	{
		//kfree 7 KB
		freeFrames = sys_calculate_free_frames() ;
f0122583:	e8 3e a4 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0122588:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012258b:	e8 f4 20 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0122590:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[4]);
f0122593:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f0122599:	83 ec 0c             	sub    $0xc,%esp
f012259c:	50                   	push   %eax
f012259d:	e8 d7 59 fe ff       	call   f0107f79 <kfree>
f01225a2:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01225a5:	e8 da 20 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01225aa:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01225ad:	74 17                	je     f01225c6 <test_kfree_bestfirstfit+0x11ac>
f01225af:	83 ec 04             	sub    $0x4,%esp
f01225b2:	68 74 97 13 f0       	push   $0xf0139774
f01225b7:	68 6d 07 00 00       	push   $0x76d
f01225bc:	68 5a 97 13 f0       	push   $0xf013975a
f01225c1:	e8 ea db fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 2) panic("Wrong kfree: pages in memory are not freed correctly");
f01225c6:	e8 fb a3 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01225cb:	89 c2                	mov    %eax,%edx
f01225cd:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01225d0:	29 c2                	sub    %eax,%edx
f01225d2:	89 d0                	mov    %edx,%eax
f01225d4:	83 f8 02             	cmp    $0x2,%eax
f01225d7:	74 17                	je     f01225f0 <test_kfree_bestfirstfit+0x11d6>
f01225d9:	83 ec 04             	sub    $0x4,%esp
f01225dc:	68 e4 9e 13 f0       	push   $0xf0139ee4
f01225e1:	68 6e 07 00 00       	push   $0x76e
f01225e6:	68 5a 97 13 f0       	push   $0xf013975a
f01225eb:	e8 c0 db fd ff       	call   f01001b0 <_panic>

		//kfree 3 MB
		freeFrames = sys_calculate_free_frames() ;
f01225f0:	e8 d1 a3 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01225f5:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01225f8:	e8 87 20 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01225fd:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[5]);
f0122600:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f0122606:	83 ec 0c             	sub    $0xc,%esp
f0122609:	50                   	push   %eax
f012260a:	e8 6a 59 fe ff       	call   f0107f79 <kfree>
f012260f:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122612:	e8 6d 20 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0122617:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012261a:	74 17                	je     f0122633 <test_kfree_bestfirstfit+0x1219>
f012261c:	83 ec 04             	sub    $0x4,%esp
f012261f:	68 74 97 13 f0       	push   $0xf0139774
f0122624:	68 74 07 00 00       	push   $0x774
f0122629:	68 5a 97 13 f0       	push   $0xf013975a
f012262e:	e8 7d db fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0122633:	e8 8e a3 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0122638:	89 c2                	mov    %eax,%edx
f012263a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012263d:	29 c2                	sub    %eax,%edx
f012263f:	89 d0                	mov    %edx,%eax
f0122641:	3d 00 03 00 00       	cmp    $0x300,%eax
f0122646:	74 17                	je     f012265f <test_kfree_bestfirstfit+0x1245>
f0122648:	83 ec 04             	sub    $0x4,%esp
f012264b:	68 e4 9e 13 f0       	push   $0xf0139ee4
f0122650:	68 75 07 00 00       	push   $0x775
f0122655:	68 5a 97 13 f0       	push   $0xf013975a
f012265a:	e8 51 db fd ff       	call   f01001b0 <_panic>

		//kfree 2nd 2 KB
		freeFrames = sys_calculate_free_frames() ;
f012265f:	e8 62 a3 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0122664:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122667:	e8 18 20 fe ff       	call   f0104684 <pf_calculate_free_frames>
f012266c:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[3]);
f012266f:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f0122675:	83 ec 0c             	sub    $0xc,%esp
f0122678:	50                   	push   %eax
f0122679:	e8 fb 58 fe ff       	call   f0107f79 <kfree>
f012267e:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122681:	e8 fe 1f fe ff       	call   f0104684 <pf_calculate_free_frames>
f0122686:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122689:	74 17                	je     f01226a2 <test_kfree_bestfirstfit+0x1288>
f012268b:	83 ec 04             	sub    $0x4,%esp
f012268e:	68 74 97 13 f0       	push   $0xf0139774
f0122693:	68 7b 07 00 00       	push   $0x77b
f0122698:	68 5a 97 13 f0       	push   $0xf013975a
f012269d:	e8 0e db fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f01226a2:	e8 1f a3 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01226a7:	89 c2                	mov    %eax,%edx
f01226a9:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01226ac:	29 c2                	sub    %eax,%edx
f01226ae:	89 d0                	mov    %edx,%eax
f01226b0:	83 f8 01             	cmp    $0x1,%eax
f01226b3:	74 17                	je     f01226cc <test_kfree_bestfirstfit+0x12b2>
f01226b5:	83 ec 04             	sub    $0x4,%esp
f01226b8:	68 e4 9e 13 f0       	push   $0xf0139ee4
f01226bd:	68 7c 07 00 00       	push   $0x77c
f01226c2:	68 5a 97 13 f0       	push   $0xf013975a
f01226c7:	e8 e4 da fd ff       	call   f01001b0 <_panic>

		//kfree 14 KB
		freeFrames = sys_calculate_free_frames() ;
f01226cc:	e8 f5 a2 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01226d1:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01226d4:	e8 ab 1f fe ff       	call   f0104684 <pf_calculate_free_frames>
f01226d9:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[7]);
f01226dc:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f01226e2:	83 ec 0c             	sub    $0xc,%esp
f01226e5:	50                   	push   %eax
f01226e6:	e8 8e 58 fe ff       	call   f0107f79 <kfree>
f01226eb:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01226ee:	e8 91 1f fe ff       	call   f0104684 <pf_calculate_free_frames>
f01226f3:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01226f6:	74 17                	je     f012270f <test_kfree_bestfirstfit+0x12f5>
f01226f8:	83 ec 04             	sub    $0x4,%esp
f01226fb:	68 74 97 13 f0       	push   $0xf0139774
f0122700:	68 82 07 00 00       	push   $0x782
f0122705:	68 5a 97 13 f0       	push   $0xf013975a
f012270a:	e8 a1 da fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 4) panic("Wrong kfree: pages in memory are not freed correctly");
f012270f:	e8 b2 a2 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0122714:	89 c2                	mov    %eax,%edx
f0122716:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122719:	29 c2                	sub    %eax,%edx
f012271b:	89 d0                	mov    %edx,%eax
f012271d:	83 f8 04             	cmp    $0x4,%eax
f0122720:	74 17                	je     f0122739 <test_kfree_bestfirstfit+0x131f>
f0122722:	83 ec 04             	sub    $0x4,%esp
f0122725:	68 e4 9e 13 f0       	push   $0xf0139ee4
f012272a:	68 83 07 00 00       	push   $0x783
f012272f:	68 5a 97 13 f0       	push   $0xf013975a
f0122734:	e8 77 da fd ff       	call   f01001b0 <_panic>

		//kfree 3 MB
		freeFrames = sys_calculate_free_frames() ;
f0122739:	e8 88 a2 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012273e:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122741:	e8 3e 1f fe ff       	call   f0104684 <pf_calculate_free_frames>
f0122746:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f0122749:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012274f:	83 ec 0c             	sub    $0xc,%esp
f0122752:	50                   	push   %eax
f0122753:	e8 21 58 fe ff       	call   f0107f79 <kfree>
f0122758:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012275b:	e8 24 1f fe ff       	call   f0104684 <pf_calculate_free_frames>
f0122760:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122763:	74 17                	je     f012277c <test_kfree_bestfirstfit+0x1362>
f0122765:	83 ec 04             	sub    $0x4,%esp
f0122768:	68 74 97 13 f0       	push   $0xf0139774
f012276d:	68 89 07 00 00       	push   $0x789
f0122772:	68 5a 97 13 f0       	push   $0xf013975a
f0122777:	e8 34 da fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f012277c:	e8 45 a2 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0122781:	89 c2                	mov    %eax,%edx
f0122783:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122786:	29 c2                	sub    %eax,%edx
f0122788:	89 d0                	mov    %edx,%eax
f012278a:	3d 00 03 00 00       	cmp    $0x300,%eax
f012278f:	74 17                	je     f01227a8 <test_kfree_bestfirstfit+0x138e>
f0122791:	83 ec 04             	sub    $0x4,%esp
f0122794:	68 e4 9e 13 f0       	push   $0xf0139ee4
f0122799:	68 8a 07 00 00       	push   $0x78a
f012279e:	68 5a 97 13 f0       	push   $0xf013975a
f01227a3:	e8 08 da fd ff       	call   f01001b0 <_panic>

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f01227a8:	e8 19 a2 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01227ad:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01227b0:	e8 cf 1e fe ff       	call   f0104684 <pf_calculate_free_frames>
f01227b5:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f01227b8:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f01227be:	83 ec 0c             	sub    $0xc,%esp
f01227c1:	50                   	push   %eax
f01227c2:	e8 b2 57 fe ff       	call   f0107f79 <kfree>
f01227c7:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01227ca:	e8 b5 1e fe ff       	call   f0104684 <pf_calculate_free_frames>
f01227cf:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01227d2:	74 17                	je     f01227eb <test_kfree_bestfirstfit+0x13d1>
f01227d4:	83 ec 04             	sub    $0x4,%esp
f01227d7:	68 74 97 13 f0       	push   $0xf0139774
f01227dc:	68 90 07 00 00       	push   $0x790
f01227e1:	68 5a 97 13 f0       	push   $0xf013975a
f01227e6:	e8 c5 d9 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f01227eb:	e8 d6 a1 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01227f0:	89 c2                	mov    %eax,%edx
f01227f2:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01227f5:	29 c2                	sub    %eax,%edx
f01227f7:	89 d0                	mov    %edx,%eax
f01227f9:	83 f8 01             	cmp    $0x1,%eax
f01227fc:	74 17                	je     f0122815 <test_kfree_bestfirstfit+0x13fb>
f01227fe:	83 ec 04             	sub    $0x4,%esp
f0122801:	68 e4 9e 13 f0       	push   $0xf0139ee4
f0122806:	68 91 07 00 00       	push   $0x791
f012280b:	68 5a 97 13 f0       	push   $0xf013975a
f0122810:	e8 9b d9 fd ff       	call   f01001b0 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0122815:	e8 ac a1 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012281a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012281d:	e8 62 1e fe ff       	call   f0104684 <pf_calculate_free_frames>
f0122822:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[10]);
f0122825:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012282b:	83 ec 0c             	sub    $0xc,%esp
f012282e:	50                   	push   %eax
f012282f:	e8 45 57 fe ff       	call   f0107f79 <kfree>
f0122834:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122837:	e8 48 1e fe ff       	call   f0104684 <pf_calculate_free_frames>
f012283c:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012283f:	74 17                	je     f0122858 <test_kfree_bestfirstfit+0x143e>
f0122841:	83 ec 04             	sub    $0x4,%esp
f0122844:	68 74 97 13 f0       	push   $0xf0139774
f0122849:	68 97 07 00 00       	push   $0x797
f012284e:	68 5a 97 13 f0       	push   $0xf013975a
f0122853:	e8 58 d9 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0122858:	e8 69 a1 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012285d:	89 c2                	mov    %eax,%edx
f012285f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122862:	29 c2                	sub    %eax,%edx
f0122864:	89 d0                	mov    %edx,%eax
f0122866:	3d 00 01 00 00       	cmp    $0x100,%eax
f012286b:	74 17                	je     f0122884 <test_kfree_bestfirstfit+0x146a>
f012286d:	83 ec 04             	sub    $0x4,%esp
f0122870:	68 e4 9e 13 f0       	push   $0xf0139ee4
f0122875:	68 98 07 00 00       	push   $0x798
f012287a:	68 5a 97 13 f0       	push   $0xf013975a
f012287f:	e8 2c d9 fd ff       	call   f01001b0 <_panic>

		if(start_freeFrames != (sys_calculate_free_frames())) {panic("Wrong kfree: not all pages removed correctly at end");}
f0122884:	e8 3d a1 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0122889:	89 c2                	mov    %eax,%edx
f012288b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012288e:	39 c2                	cmp    %eax,%edx
f0122890:	74 17                	je     f01228a9 <test_kfree_bestfirstfit+0x148f>
f0122892:	83 ec 04             	sub    $0x4,%esp
f0122895:	68 84 9f 13 f0       	push   $0xf0139f84
f012289a:	68 9a 07 00 00       	push   $0x79a
f012289f:	68 5a 97 13 f0       	push   $0xf013975a
f01228a4:	e8 07 d9 fd ff       	call   f01001b0 <_panic>
	}
	cprintf("\b\b\b60%");
f01228a9:	83 ec 0c             	sub    $0xc,%esp
f01228ac:	68 b8 9f 13 f0       	push   $0xf0139fb8
f01228b1:	e8 7b e5 fd ff       	call   f0100e31 <cprintf>
f01228b6:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f01228b9:	83 ec 0c             	sub    $0xc,%esp
f01228bc:	6a 03                	push   $0x3
f01228be:	e8 9e a5 fe ff       	call   f010ce61 <sys_bypassPageFault>
f01228c3:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 10; ++i)
f01228c6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01228cd:	e9 82 00 00 00       	jmp    f0122954 <test_kfree_bestfirstfit+0x153a>
		{
			ptr = (char *) ptr_allocations[i];
f01228d2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01228d5:	8b 84 85 20 fe ff ff 	mov    -0x1e0(%ebp,%eax,4),%eax
f01228dc:	89 45 98             	mov    %eax,-0x68(%ebp)
			ptr[0] = 10;
f01228df:	8b 45 98             	mov    -0x68(%ebp),%eax
f01228e2:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
f01228e5:	e8 65 a5 fe ff       	call   f010ce4f <sys_rcr2>
f01228ea:	89 c2                	mov    %eax,%edx
f01228ec:	8b 45 98             	mov    -0x68(%ebp),%eax
f01228ef:	39 c2                	cmp    %eax,%edx
f01228f1:	74 17                	je     f012290a <test_kfree_bestfirstfit+0x14f0>
f01228f3:	83 ec 04             	sub    $0x4,%esp
f01228f6:	68 c0 9f 13 f0       	push   $0xf0139fc0
f01228fb:	68 a9 07 00 00       	push   $0x7a9
f0122900:	68 5a 97 13 f0       	push   $0xf013975a
f0122905:	e8 a6 d8 fd ff       	call   f01001b0 <_panic>
			ptr[lastIndices[i]] = 10;
f012290a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012290d:	8b 84 85 c0 fe ff ff 	mov    -0x140(%ebp,%eax,4),%eax
f0122914:	89 c2                	mov    %eax,%edx
f0122916:	8b 45 98             	mov    -0x68(%ebp),%eax
f0122919:	01 d0                	add    %edx,%eax
f012291b:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
f012291e:	e8 2c a5 fe ff       	call   f010ce4f <sys_rcr2>
f0122923:	89 c2                	mov    %eax,%edx
f0122925:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0122928:	8b 84 85 c0 fe ff ff 	mov    -0x140(%ebp,%eax,4),%eax
f012292f:	89 c1                	mov    %eax,%ecx
f0122931:	8b 45 98             	mov    -0x68(%ebp),%eax
f0122934:	01 c8                	add    %ecx,%eax
f0122936:	39 c2                	cmp    %eax,%edx
f0122938:	74 17                	je     f0122951 <test_kfree_bestfirstfit+0x1537>
f012293a:	83 ec 04             	sub    $0x4,%esp
f012293d:	68 c0 9f 13 f0       	push   $0xf0139fc0
f0122942:	68 ab 07 00 00       	push   $0x7ab
f0122947:	68 5a 97 13 f0       	push   $0xf013975a
f012294c:	e8 5f d8 fd ff       	call   f01001b0 <_panic>
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 10; ++i)
f0122951:	ff 45 f4             	incl   -0xc(%ebp)
f0122954:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
f0122958:	0f 8e 74 ff ff ff    	jle    f01228d2 <test_kfree_bestfirstfit+0x14b8>
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f012295e:	83 ec 0c             	sub    $0xc,%esp
f0122961:	6a 00                	push   $0x0
f0122963:	e8 f9 a4 fe ff       	call   f010ce61 <sys_bypassPageFault>
f0122968:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("\b\b\b75%");
f012296b:	83 ec 0c             	sub    $0xc,%esp
f012296e:	68 05 a0 13 f0       	push   $0xf013a005
f0122973:	e8 b9 e4 fd ff       	call   f0100e31 <cprintf>
f0122978:	83 c4 10             	add    $0x10,%esp

	//kfree non-exist item [10%]
	{
		//kfree 2 MB
		freeFrames = sys_calculate_free_frames() ;
f012297b:	e8 46 a0 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0122980:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122983:	e8 fc 1c fe ff       	call   f0104684 <pf_calculate_free_frames>
f0122988:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[0]);
f012298b:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f0122991:	83 ec 0c             	sub    $0xc,%esp
f0122994:	50                   	push   %eax
f0122995:	e8 df 55 fe ff       	call   f0107f79 <kfree>
f012299a:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012299d:	e8 e2 1c fe ff       	call   f0104684 <pf_calculate_free_frames>
f01229a2:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01229a5:	74 17                	je     f01229be <test_kfree_bestfirstfit+0x15a4>
f01229a7:	83 ec 04             	sub    $0x4,%esp
f01229aa:	68 74 97 13 f0       	push   $0xf0139774
f01229af:	68 b9 07 00 00       	push   $0x7b9
f01229b4:	68 5a 97 13 f0       	push   $0xf013975a
f01229b9:	e8 f2 d7 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f01229be:	e8 03 a0 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01229c3:	89 c2                	mov    %eax,%edx
f01229c5:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01229c8:	39 c2                	cmp    %eax,%edx
f01229ca:	74 17                	je     f01229e3 <test_kfree_bestfirstfit+0x15c9>
f01229cc:	83 ec 04             	sub    $0x4,%esp
f01229cf:	68 0c a0 13 f0       	push   $0xf013a00c
f01229d4:	68 ba 07 00 00       	push   $0x7ba
f01229d9:	68 5a 97 13 f0       	push   $0xf013975a
f01229de:	e8 cd d7 fd ff       	call   f01001b0 <_panic>

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f01229e3:	e8 de 9f fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01229e8:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01229eb:	e8 94 1c fe ff       	call   f0104684 <pf_calculate_free_frames>
f01229f0:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f01229f3:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f01229f9:	83 ec 0c             	sub    $0xc,%esp
f01229fc:	50                   	push   %eax
f01229fd:	e8 77 55 fe ff       	call   f0107f79 <kfree>
f0122a02:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122a05:	e8 7a 1c fe ff       	call   f0104684 <pf_calculate_free_frames>
f0122a0a:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122a0d:	74 17                	je     f0122a26 <test_kfree_bestfirstfit+0x160c>
f0122a0f:	83 ec 04             	sub    $0x4,%esp
f0122a12:	68 74 97 13 f0       	push   $0xf0139774
f0122a17:	68 c0 07 00 00       	push   $0x7c0
f0122a1c:	68 5a 97 13 f0       	push   $0xf013975a
f0122a21:	e8 8a d7 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0122a26:	e8 9b 9f fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0122a2b:	89 c2                	mov    %eax,%edx
f0122a2d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122a30:	39 c2                	cmp    %eax,%edx
f0122a32:	74 17                	je     f0122a4b <test_kfree_bestfirstfit+0x1631>
f0122a34:	83 ec 04             	sub    $0x4,%esp
f0122a37:	68 0c a0 13 f0       	push   $0xf013a00c
f0122a3c:	68 c1 07 00 00       	push   $0x7c1
f0122a41:	68 5a 97 13 f0       	push   $0xf013975a
f0122a46:	e8 65 d7 fd ff       	call   f01001b0 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f0122a4b:	e8 76 9f fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0122a50:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122a53:	e8 2c 1c fe ff       	call   f0104684 <pf_calculate_free_frames>
f0122a58:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f0122a5b:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0122a61:	83 ec 0c             	sub    $0xc,%esp
f0122a64:	50                   	push   %eax
f0122a65:	e8 0f 55 fe ff       	call   f0107f79 <kfree>
f0122a6a:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122a6d:	e8 12 1c fe ff       	call   f0104684 <pf_calculate_free_frames>
f0122a72:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122a75:	74 17                	je     f0122a8e <test_kfree_bestfirstfit+0x1674>
f0122a77:	83 ec 04             	sub    $0x4,%esp
f0122a7a:	68 74 97 13 f0       	push   $0xf0139774
f0122a7f:	68 c7 07 00 00       	push   $0x7c7
f0122a84:	68 5a 97 13 f0       	push   $0xf013975a
f0122a89:	e8 22 d7 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0122a8e:	e8 33 9f fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0122a93:	89 c2                	mov    %eax,%edx
f0122a95:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122a98:	39 c2                	cmp    %eax,%edx
f0122a9a:	74 17                	je     f0122ab3 <test_kfree_bestfirstfit+0x1699>
f0122a9c:	83 ec 04             	sub    $0x4,%esp
f0122a9f:	68 0c a0 13 f0       	push   $0xf013a00c
f0122aa4:	68 c8 07 00 00       	push   $0x7c8
f0122aa9:	68 5a 97 13 f0       	push   $0xf013975a
f0122aae:	e8 fd d6 fd ff       	call   f01001b0 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0122ab3:	e8 0e 9f fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0122ab8:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122abb:	e8 c4 1b fe ff       	call   f0104684 <pf_calculate_free_frames>
f0122ac0:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f0122ac3:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0122ac9:	83 ec 0c             	sub    $0xc,%esp
f0122acc:	50                   	push   %eax
f0122acd:	e8 a7 54 fe ff       	call   f0107f79 <kfree>
f0122ad2:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122ad5:	e8 aa 1b fe ff       	call   f0104684 <pf_calculate_free_frames>
f0122ada:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122add:	74 17                	je     f0122af6 <test_kfree_bestfirstfit+0x16dc>
f0122adf:	83 ec 04             	sub    $0x4,%esp
f0122ae2:	68 74 97 13 f0       	push   $0xf0139774
f0122ae7:	68 ce 07 00 00       	push   $0x7ce
f0122aec:	68 5a 97 13 f0       	push   $0xf013975a
f0122af1:	e8 ba d6 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0122af6:	e8 cb 9e fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0122afb:	89 c2                	mov    %eax,%edx
f0122afd:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122b00:	39 c2                	cmp    %eax,%edx
f0122b02:	74 17                	je     f0122b1b <test_kfree_bestfirstfit+0x1701>
f0122b04:	83 ec 04             	sub    $0x4,%esp
f0122b07:	68 0c a0 13 f0       	push   $0xf013a00c
f0122b0c:	68 cf 07 00 00       	push   $0x7cf
f0122b11:	68 5a 97 13 f0       	push   $0xf013975a
f0122b16:	e8 95 d6 fd ff       	call   f01001b0 <_panic>

	}
	cprintf("\b\b\b85%");
f0122b1b:	83 ec 0c             	sub    $0xc,%esp
f0122b1e:	68 53 a0 13 f0       	push   $0xf013a053
f0122b23:	e8 09 e3 fd ff       	call   f0100e31 <cprintf>
f0122b28:	83 c4 10             	add    $0x10,%esp

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0122b2b:	c7 45 e8 00 00 00 f6 	movl   $0xf6000000,-0x18(%ebp)
f0122b32:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0122b39:	eb 48                	jmp    f0122b83 <test_kfree_bestfirstfit+0x1769>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va, &ptr_table);
f0122b3b:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0122b3e:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f0122b43:	83 ec 04             	sub    $0x4,%esp
f0122b46:	8d 8d 1c fe ff ff    	lea    -0x1e4(%ebp),%ecx
f0122b4c:	51                   	push   %ecx
f0122b4d:	52                   	push   %edx
f0122b4e:	50                   	push   %eax
f0122b4f:	e8 93 49 fe ff       	call   f01074e7 <get_page_table>
f0122b54:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0122b57:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f0122b5d:	85 c0                	test   %eax,%eax
f0122b5f:	75 17                	jne    f0122b78 <test_kfree_bestfirstfit+0x175e>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
f0122b61:	83 ec 04             	sub    $0x4,%esp
f0122b64:	68 5c a0 13 f0       	push   $0xf013a05c
f0122b69:	68 dd 07 00 00       	push   $0x7dd
f0122b6e:	68 5a 97 13 f0       	push   $0xf013975a
f0122b73:	e8 38 d6 fd ff       	call   f01001b0 <_panic>
	cprintf("\b\b\b85%");

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0122b78:	81 45 e8 00 00 40 00 	addl   $0x400000,-0x18(%ebp)
f0122b7f:	83 55 ec 00          	adcl   $0x0,-0x14(%ebp)
f0122b83:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0122b87:	78 b2                	js     f0122b3b <test_kfree_bestfirstfit+0x1721>
f0122b89:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0122b8d:	7f 09                	jg     f0122b98 <test_kfree_bestfirstfit+0x177e>
f0122b8f:	81 7d e8 ff ef ff ff 	cmpl   $0xffffefff,-0x18(%ebp)
f0122b96:	76 a3                	jbe    f0122b3b <test_kfree_bestfirstfit+0x1721>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
			}
		}
	}
	cprintf("\b\b\b100%\n");
f0122b98:	83 ec 0c             	sub    $0xc,%esp
f0122b9b:	68 3e 99 13 f0       	push   $0xf013993e
f0122ba0:	e8 8c e2 fd ff       	call   f0100e31 <cprintf>
f0122ba5:	83 c4 10             	add    $0x10,%esp



	cprintf("\nCongratulations!! test kfree completed successfully.\n");
f0122ba8:	83 ec 0c             	sub    $0xc,%esp
f0122bab:	68 c4 a0 13 f0       	push   $0xf013a0c4
f0122bb0:	e8 7c e2 fd ff       	call   f0100e31 <cprintf>
f0122bb5:	83 c4 10             	add    $0x10,%esp

	return 1;
f0122bb8:	b8 01 00 00 00       	mov    $0x1,%eax

}
f0122bbd:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0122bc0:	5b                   	pop    %ebx
f0122bc1:	5f                   	pop    %edi
f0122bc2:	5d                   	pop    %ebp
f0122bc3:	c3                   	ret    

f0122bc4 <test_kheap_phys_addr>:

int test_kheap_phys_addr()
{
f0122bc4:	55                   	push   %ebp
f0122bc5:	89 e5                	mov    %esp,%ebp
f0122bc7:	57                   	push   %edi
f0122bc8:	56                   	push   %esi
f0122bc9:	53                   	push   %ebx
f0122bca:	81 ec 5c 02 00 00    	sub    $0x25c,%esp
	cprintf("==============================================\n");
f0122bd0:	83 ec 0c             	sub    $0xc,%esp
f0122bd3:	68 9c 96 13 f0       	push   $0xf013969c
f0122bd8:	e8 54 e2 fd ff       	call   f0100e31 <cprintf>
f0122bdd:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0122be0:	83 ec 0c             	sub    $0xc,%esp
f0122be3:	68 cc 96 13 f0       	push   $0xf01396cc
f0122be8:	e8 44 e2 fd ff       	call   f0100e31 <cprintf>
f0122bed:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0122bf0:	83 ec 0c             	sub    $0xc,%esp
f0122bf3:	68 9c 96 13 f0       	push   $0xf013969c
f0122bf8:	e8 34 e2 fd ff       	call   f0100e31 <cprintf>
f0122bfd:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f0122c00:	c6 45 bf 80          	movb   $0x80,-0x41(%ebp)
	char maxByte = 0x7F;
f0122c04:	c6 45 be 7f          	movb   $0x7f,-0x42(%ebp)
	short minShort = 1<<15 ;
f0122c08:	66 c7 45 bc 00 80    	movw   $0x8000,-0x44(%ebp)
	short maxShort = 0x7FFF;
f0122c0e:	66 c7 45 ba ff 7f    	movw   $0x7fff,-0x46(%ebp)
	int minInt = 1<<31 ;
f0122c14:	c7 45 b4 00 00 00 80 	movl   $0x80000000,-0x4c(%ebp)
	int maxInt = 0x7FFFFFFF;
f0122c1b:	c7 45 b0 ff ff ff 7f 	movl   $0x7fffffff,-0x50(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0122c22:	e8 9f 9d fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0122c27:	89 45 ac             	mov    %eax,-0x54(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0122c2a:	8d 95 4c fe ff ff    	lea    -0x1b4(%ebp),%edx
f0122c30:	b9 14 00 00 00       	mov    $0x14,%ecx
f0122c35:	b8 00 00 00 00       	mov    $0x0,%eax
f0122c3a:	89 d7                	mov    %edx,%edi
f0122c3c:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0122c3e:	8d 95 fc fd ff ff    	lea    -0x204(%ebp),%edx
f0122c44:	b9 14 00 00 00       	mov    $0x14,%ecx
f0122c49:	b8 00 00 00 00       	mov    $0x0,%eax
f0122c4e:	89 d7                	mov    %edx,%edi
f0122c50:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f0122c52:	8d 95 ac fd ff ff    	lea    -0x254(%ebp),%edx
f0122c58:	b9 14 00 00 00       	mov    $0x14,%ecx
f0122c5d:	b8 00 00 00 00       	mov    $0x0,%eax
f0122c62:	89 d7                	mov    %edx,%edi
f0122c64:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0122c66:	e8 5b 9d fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0122c6b:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122c6e:	e8 11 1a fe ff       	call   f0104684 <pf_calculate_free_frames>
f0122c73:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0122c76:	83 ec 0c             	sub    $0xc,%esp
f0122c79:	68 00 fc 1f 00       	push   $0x1ffc00
f0122c7e:	e8 dc 52 fe ff       	call   f0107f5f <kmalloc>
f0122c83:	83 c4 10             	add    $0x10,%esp
f0122c86:	89 85 ac fd ff ff    	mov    %eax,-0x254(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122c8c:	8b 85 ac fd ff ff    	mov    -0x254(%ebp),%eax
f0122c92:	89 c1                	mov    %eax,%ecx
f0122c94:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0122c9b:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0122ca0:	0f b6 d0             	movzbl %al,%edx
f0122ca3:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0122ca6:	01 d0                	add    %edx,%eax
f0122ca8:	48                   	dec    %eax
f0122ca9:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0122cac:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0122caf:	ba 00 00 00 00       	mov    $0x0,%edx
f0122cb4:	f7 75 a0             	divl   -0x60(%ebp)
f0122cb7:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0122cba:	29 d0                	sub    %edx,%eax
f0122cbc:	89 c3                	mov    %eax,%ebx
f0122cbe:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f0122cc5:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0122cca:	0f b6 c0             	movzbl %al,%eax
f0122ccd:	c1 e0 04             	shl    $0x4,%eax
f0122cd0:	89 c2                	mov    %eax,%edx
f0122cd2:	8b 45 98             	mov    -0x68(%ebp),%eax
f0122cd5:	01 d0                	add    %edx,%eax
f0122cd7:	48                   	dec    %eax
f0122cd8:	89 45 94             	mov    %eax,-0x6c(%ebp)
f0122cdb:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0122cde:	ba 00 00 00 00       	mov    $0x0,%edx
f0122ce3:	f7 75 98             	divl   -0x68(%ebp)
f0122ce6:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0122ce9:	29 d0                	sub    %edx,%eax
f0122ceb:	01 d8                	add    %ebx,%eax
f0122ced:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0122cf2:	39 c1                	cmp    %eax,%ecx
f0122cf4:	74 17                	je     f0122d0d <test_kheap_phys_addr+0x149>
f0122cf6:	83 ec 04             	sub    $0x4,%esp
f0122cf9:	68 40 98 13 f0       	push   $0xf0139840
f0122cfe:	68 0a 08 00 00       	push   $0x80a
f0122d03:	68 5a 97 13 f0       	push   $0xf013975a
f0122d08:	e8 a3 d4 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122d0d:	e8 72 19 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0122d12:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0122d15:	74 17                	je     f0122d2e <test_kheap_phys_addr+0x16a>
f0122d17:	83 ec 04             	sub    $0x4,%esp
f0122d1a:	68 74 97 13 f0       	push   $0xf0139774
f0122d1f:	68 0b 08 00 00       	push   $0x80b
f0122d24:	68 5a 97 13 f0       	push   $0xf013975a
f0122d29:	e8 82 d4 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122d2e:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0122d31:	e8 90 9c fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0122d36:	29 c3                	sub    %eax,%ebx
f0122d38:	89 d8                	mov    %ebx,%eax
f0122d3a:	3d 00 02 00 00       	cmp    $0x200,%eax
f0122d3f:	74 17                	je     f0122d58 <test_kheap_phys_addr+0x194>
f0122d41:	83 ec 04             	sub    $0x4,%esp
f0122d44:	68 dc 97 13 f0       	push   $0xf01397dc
f0122d49:	68 0c 08 00 00       	push   $0x80c
f0122d4e:	68 5a 97 13 f0       	push   $0xf013975a
f0122d53:	e8 58 d4 fd ff       	call   f01001b0 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0122d58:	e8 69 9c fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0122d5d:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122d60:	e8 1f 19 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0122d65:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0122d68:	83 ec 0c             	sub    $0xc,%esp
f0122d6b:	68 00 fc 1f 00       	push   $0x1ffc00
f0122d70:	e8 ea 51 fe ff       	call   f0107f5f <kmalloc>
f0122d75:	83 c4 10             	add    $0x10,%esp
f0122d78:	89 85 b0 fd ff ff    	mov    %eax,-0x250(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122d7e:	8b 85 b0 fd ff ff    	mov    -0x250(%ebp),%eax
f0122d84:	89 c1                	mov    %eax,%ecx
f0122d86:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f0122d8d:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0122d92:	0f b6 d0             	movzbl %al,%edx
f0122d95:	8b 45 90             	mov    -0x70(%ebp),%eax
f0122d98:	01 d0                	add    %edx,%eax
f0122d9a:	48                   	dec    %eax
f0122d9b:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0122d9e:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0122da1:	ba 00 00 00 00       	mov    $0x0,%edx
f0122da6:	f7 75 90             	divl   -0x70(%ebp)
f0122da9:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0122dac:	29 d0                	sub    %edx,%eax
f0122dae:	89 c3                	mov    %eax,%ebx
f0122db0:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0122db7:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0122dbc:	0f b6 c0             	movzbl %al,%eax
f0122dbf:	c1 e0 04             	shl    $0x4,%eax
f0122dc2:	89 c2                	mov    %eax,%edx
f0122dc4:	8b 45 88             	mov    -0x78(%ebp),%eax
f0122dc7:	01 d0                	add    %edx,%eax
f0122dc9:	48                   	dec    %eax
f0122dca:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0122dcd:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0122dd0:	ba 00 00 00 00       	mov    $0x0,%edx
f0122dd5:	f7 75 88             	divl   -0x78(%ebp)
f0122dd8:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0122ddb:	29 d0                	sub    %edx,%eax
f0122ddd:	01 d8                	add    %ebx,%eax
f0122ddf:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0122de4:	39 c1                	cmp    %eax,%ecx
f0122de6:	74 17                	je     f0122dff <test_kheap_phys_addr+0x23b>
f0122de8:	83 ec 04             	sub    $0x4,%esp
f0122deb:	68 40 98 13 f0       	push   $0xf0139840
f0122df0:	68 12 08 00 00       	push   $0x812
f0122df5:	68 5a 97 13 f0       	push   $0xf013975a
f0122dfa:	e8 b1 d3 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122dff:	e8 80 18 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0122e04:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0122e07:	74 17                	je     f0122e20 <test_kheap_phys_addr+0x25c>
f0122e09:	83 ec 04             	sub    $0x4,%esp
f0122e0c:	68 74 97 13 f0       	push   $0xf0139774
f0122e11:	68 13 08 00 00       	push   $0x813
f0122e16:	68 5a 97 13 f0       	push   $0xf013975a
f0122e1b:	e8 90 d3 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122e20:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0122e23:	e8 9e 9b fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0122e28:	29 c3                	sub    %eax,%ebx
f0122e2a:	89 d8                	mov    %ebx,%eax
f0122e2c:	3d 00 02 00 00       	cmp    $0x200,%eax
f0122e31:	74 17                	je     f0122e4a <test_kheap_phys_addr+0x286>
f0122e33:	83 ec 04             	sub    $0x4,%esp
f0122e36:	68 dc 97 13 f0       	push   $0xf01397dc
f0122e3b:	68 14 08 00 00       	push   $0x814
f0122e40:	68 5a 97 13 f0       	push   $0xf013975a
f0122e45:	e8 66 d3 fd ff       	call   f01001b0 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0122e4a:	e8 77 9b fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0122e4f:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122e52:	e8 2d 18 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0122e57:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0122e5a:	83 ec 0c             	sub    $0xc,%esp
f0122e5d:	68 00 08 00 00       	push   $0x800
f0122e62:	e8 f8 50 fe ff       	call   f0107f5f <kmalloc>
f0122e67:	83 c4 10             	add    $0x10,%esp
f0122e6a:	89 85 b4 fd ff ff    	mov    %eax,-0x24c(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122e70:	8b 85 b4 fd ff ff    	mov    -0x24c(%ebp),%eax
f0122e76:	89 c1                	mov    %eax,%ecx
f0122e78:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f0122e7f:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0122e84:	0f b6 d0             	movzbl %al,%edx
f0122e87:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122e8a:	01 d0                	add    %edx,%eax
f0122e8c:	48                   	dec    %eax
f0122e8d:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0122e93:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0122e99:	ba 00 00 00 00       	mov    $0x0,%edx
f0122e9e:	f7 75 80             	divl   -0x80(%ebp)
f0122ea1:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0122ea7:	29 d0                	sub    %edx,%eax
f0122ea9:	89 c3                	mov    %eax,%ebx
f0122eab:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0122eb2:	10 00 00 
f0122eb5:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0122eba:	0f b6 c0             	movzbl %al,%eax
f0122ebd:	c1 e0 04             	shl    $0x4,%eax
f0122ec0:	89 c2                	mov    %eax,%edx
f0122ec2:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0122ec8:	01 d0                	add    %edx,%eax
f0122eca:	48                   	dec    %eax
f0122ecb:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0122ed1:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0122ed7:	ba 00 00 00 00       	mov    $0x0,%edx
f0122edc:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f0122ee2:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0122ee8:	29 d0                	sub    %edx,%eax
f0122eea:	01 d8                	add    %ebx,%eax
f0122eec:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0122ef1:	39 c1                	cmp    %eax,%ecx
f0122ef3:	74 17                	je     f0122f0c <test_kheap_phys_addr+0x348>
f0122ef5:	83 ec 04             	sub    $0x4,%esp
f0122ef8:	68 40 98 13 f0       	push   $0xf0139840
f0122efd:	68 1a 08 00 00       	push   $0x81a
f0122f02:	68 5a 97 13 f0       	push   $0xf013975a
f0122f07:	e8 a4 d2 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122f0c:	e8 73 17 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0122f11:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0122f14:	74 17                	je     f0122f2d <test_kheap_phys_addr+0x369>
f0122f16:	83 ec 04             	sub    $0x4,%esp
f0122f19:	68 74 97 13 f0       	push   $0xf0139774
f0122f1e:	68 1b 08 00 00       	push   $0x81b
f0122f23:	68 5a 97 13 f0       	push   $0xf013975a
f0122f28:	e8 83 d2 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122f2d:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0122f30:	e8 91 9a fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0122f35:	29 c3                	sub    %eax,%ebx
f0122f37:	89 d8                	mov    %ebx,%eax
f0122f39:	83 f8 01             	cmp    $0x1,%eax
f0122f3c:	74 17                	je     f0122f55 <test_kheap_phys_addr+0x391>
f0122f3e:	83 ec 04             	sub    $0x4,%esp
f0122f41:	68 dc 97 13 f0       	push   $0xf01397dc
f0122f46:	68 1c 08 00 00       	push   $0x81c
f0122f4b:	68 5a 97 13 f0       	push   $0xf013975a
f0122f50:	e8 5b d2 fd ff       	call   f01001b0 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0122f55:	e8 6c 9a fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0122f5a:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122f5d:	e8 22 17 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0122f62:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0122f65:	83 ec 0c             	sub    $0xc,%esp
f0122f68:	68 00 08 00 00       	push   $0x800
f0122f6d:	e8 ed 4f fe ff       	call   f0107f5f <kmalloc>
f0122f72:	83 c4 10             	add    $0x10,%esp
f0122f75:	89 85 b8 fd ff ff    	mov    %eax,-0x248(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122f7b:	8b 85 b8 fd ff ff    	mov    -0x248(%ebp),%eax
f0122f81:	89 c1                	mov    %eax,%ecx
f0122f83:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0122f8a:	10 00 00 
f0122f8d:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0122f92:	0f b6 d0             	movzbl %al,%edx
f0122f95:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0122f9b:	01 d0                	add    %edx,%eax
f0122f9d:	48                   	dec    %eax
f0122f9e:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f0122fa4:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0122faa:	ba 00 00 00 00       	mov    $0x0,%edx
f0122faf:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f0122fb5:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0122fbb:	29 d0                	sub    %edx,%eax
f0122fbd:	89 c3                	mov    %eax,%ebx
f0122fbf:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0122fc6:	10 00 00 
f0122fc9:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0122fce:	0f b6 c0             	movzbl %al,%eax
f0122fd1:	c1 e0 04             	shl    $0x4,%eax
f0122fd4:	89 c2                	mov    %eax,%edx
f0122fd6:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0122fdc:	01 d0                	add    %edx,%eax
f0122fde:	48                   	dec    %eax
f0122fdf:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0122fe5:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0122feb:	ba 00 00 00 00       	mov    $0x0,%edx
f0122ff0:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0122ff6:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0122ffc:	29 d0                	sub    %edx,%eax
f0122ffe:	01 d8                	add    %ebx,%eax
f0123000:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0123005:	39 c1                	cmp    %eax,%ecx
f0123007:	74 17                	je     f0123020 <test_kheap_phys_addr+0x45c>
f0123009:	83 ec 04             	sub    $0x4,%esp
f012300c:	68 40 98 13 f0       	push   $0xf0139840
f0123011:	68 22 08 00 00       	push   $0x822
f0123016:	68 5a 97 13 f0       	push   $0xf013975a
f012301b:	e8 90 d1 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123020:	e8 5f 16 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0123025:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0123028:	74 17                	je     f0123041 <test_kheap_phys_addr+0x47d>
f012302a:	83 ec 04             	sub    $0x4,%esp
f012302d:	68 74 97 13 f0       	push   $0xf0139774
f0123032:	68 23 08 00 00       	push   $0x823
f0123037:	68 5a 97 13 f0       	push   $0xf013975a
f012303c:	e8 6f d1 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123041:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0123044:	e8 7d 99 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0123049:	29 c3                	sub    %eax,%ebx
f012304b:	89 d8                	mov    %ebx,%eax
f012304d:	83 f8 01             	cmp    $0x1,%eax
f0123050:	74 17                	je     f0123069 <test_kheap_phys_addr+0x4a5>
f0123052:	83 ec 04             	sub    $0x4,%esp
f0123055:	68 dc 97 13 f0       	push   $0xf01397dc
f012305a:	68 24 08 00 00       	push   $0x824
f012305f:	68 5a 97 13 f0       	push   $0xf013975a
f0123064:	e8 47 d1 fd ff       	call   f01001b0 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0123069:	e8 58 99 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012306e:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123071:	e8 0e 16 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0123076:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0123079:	83 ec 0c             	sub    $0xc,%esp
f012307c:	68 00 1c 00 00       	push   $0x1c00
f0123081:	e8 d9 4e fe ff       	call   f0107f5f <kmalloc>
f0123086:	83 c4 10             	add    $0x10,%esp
f0123089:	89 85 bc fd ff ff    	mov    %eax,-0x244(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012308f:	8b 85 bc fd ff ff    	mov    -0x244(%ebp),%eax
f0123095:	89 c1                	mov    %eax,%ecx
f0123097:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f012309e:	10 00 00 
f01230a1:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01230a6:	0f b6 d0             	movzbl %al,%edx
f01230a9:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01230af:	01 d0                	add    %edx,%eax
f01230b1:	48                   	dec    %eax
f01230b2:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f01230b8:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01230be:	ba 00 00 00 00       	mov    $0x0,%edx
f01230c3:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f01230c9:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01230cf:	29 d0                	sub    %edx,%eax
f01230d1:	89 c3                	mov    %eax,%ebx
f01230d3:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f01230da:	10 00 00 
f01230dd:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01230e2:	0f b6 c0             	movzbl %al,%eax
f01230e5:	c1 e0 04             	shl    $0x4,%eax
f01230e8:	89 c2                	mov    %eax,%edx
f01230ea:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f01230f0:	01 d0                	add    %edx,%eax
f01230f2:	48                   	dec    %eax
f01230f3:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f01230f9:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01230ff:	ba 00 00 00 00       	mov    $0x0,%edx
f0123104:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f012310a:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0123110:	29 d0                	sub    %edx,%eax
f0123112:	01 d8                	add    %ebx,%eax
f0123114:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0123119:	39 c1                	cmp    %eax,%ecx
f012311b:	74 17                	je     f0123134 <test_kheap_phys_addr+0x570>
f012311d:	83 ec 04             	sub    $0x4,%esp
f0123120:	68 40 98 13 f0       	push   $0xf0139840
f0123125:	68 2a 08 00 00       	push   $0x82a
f012312a:	68 5a 97 13 f0       	push   $0xf013975a
f012312f:	e8 7c d0 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123134:	e8 4b 15 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0123139:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f012313c:	74 17                	je     f0123155 <test_kheap_phys_addr+0x591>
f012313e:	83 ec 04             	sub    $0x4,%esp
f0123141:	68 74 97 13 f0       	push   $0xf0139774
f0123146:	68 2b 08 00 00       	push   $0x82b
f012314b:	68 5a 97 13 f0       	push   $0xf013975a
f0123150:	e8 5b d0 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123155:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0123158:	e8 69 98 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012315d:	29 c3                	sub    %eax,%ebx
f012315f:	89 d8                	mov    %ebx,%eax
f0123161:	83 f8 02             	cmp    $0x2,%eax
f0123164:	74 17                	je     f012317d <test_kheap_phys_addr+0x5b9>
f0123166:	83 ec 04             	sub    $0x4,%esp
f0123169:	68 dc 97 13 f0       	push   $0xf01397dc
f012316e:	68 2c 08 00 00       	push   $0x82c
f0123173:	68 5a 97 13 f0       	push   $0xf013975a
f0123178:	e8 33 d0 fd ff       	call   f01001b0 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f012317d:	e8 44 98 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0123182:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123185:	e8 fa 14 fe ff       	call   f0104684 <pf_calculate_free_frames>
f012318a:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f012318d:	83 ec 0c             	sub    $0xc,%esp
f0123190:	68 00 fc 2f 00       	push   $0x2ffc00
f0123195:	e8 c5 4d fe ff       	call   f0107f5f <kmalloc>
f012319a:	83 c4 10             	add    $0x10,%esp
f012319d:	89 85 c0 fd ff ff    	mov    %eax,-0x240(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01231a3:	8b 85 c0 fd ff ff    	mov    -0x240(%ebp),%eax
f01231a9:	89 c1                	mov    %eax,%ecx
f01231ab:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f01231b2:	10 00 00 
f01231b5:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01231ba:	0f b6 d0             	movzbl %al,%edx
f01231bd:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f01231c3:	01 d0                	add    %edx,%eax
f01231c5:	48                   	dec    %eax
f01231c6:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f01231cc:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01231d2:	ba 00 00 00 00       	mov    $0x0,%edx
f01231d7:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f01231dd:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01231e3:	29 d0                	sub    %edx,%eax
f01231e5:	89 c3                	mov    %eax,%ebx
f01231e7:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f01231ee:	10 00 00 
f01231f1:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01231f6:	0f b6 c0             	movzbl %al,%eax
f01231f9:	c1 e0 04             	shl    $0x4,%eax
f01231fc:	89 c2                	mov    %eax,%edx
f01231fe:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0123204:	01 d0                	add    %edx,%eax
f0123206:	48                   	dec    %eax
f0123207:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f012320d:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0123213:	ba 00 00 00 00       	mov    $0x0,%edx
f0123218:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f012321e:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0123224:	29 d0                	sub    %edx,%eax
f0123226:	01 d8                	add    %ebx,%eax
f0123228:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f012322d:	39 c1                	cmp    %eax,%ecx
f012322f:	74 17                	je     f0123248 <test_kheap_phys_addr+0x684>
f0123231:	83 ec 04             	sub    $0x4,%esp
f0123234:	68 40 98 13 f0       	push   $0xf0139840
f0123239:	68 32 08 00 00       	push   $0x832
f012323e:	68 5a 97 13 f0       	push   $0xf013975a
f0123243:	e8 68 cf fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123248:	e8 37 14 fe ff       	call   f0104684 <pf_calculate_free_frames>
f012324d:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0123250:	74 17                	je     f0123269 <test_kheap_phys_addr+0x6a5>
f0123252:	83 ec 04             	sub    $0x4,%esp
f0123255:	68 74 97 13 f0       	push   $0xf0139774
f012325a:	68 33 08 00 00       	push   $0x833
f012325f:	68 5a 97 13 f0       	push   $0xf013975a
f0123264:	e8 47 cf fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123269:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f012326c:	e8 55 97 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0123271:	29 c3                	sub    %eax,%ebx
f0123273:	89 d8                	mov    %ebx,%eax
f0123275:	3d 00 03 00 00       	cmp    $0x300,%eax
f012327a:	74 17                	je     f0123293 <test_kheap_phys_addr+0x6cf>
f012327c:	83 ec 04             	sub    $0x4,%esp
f012327f:	68 dc 97 13 f0       	push   $0xf01397dc
f0123284:	68 34 08 00 00       	push   $0x834
f0123289:	68 5a 97 13 f0       	push   $0xf013975a
f012328e:	e8 1d cf fd ff       	call   f01001b0 <_panic>

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0123293:	e8 2e 97 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0123298:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012329b:	e8 e4 13 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01232a0:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f01232a3:	83 ec 0c             	sub    $0xc,%esp
f01232a6:	68 00 fc 5f 00       	push   $0x5ffc00
f01232ab:	e8 af 4c fe ff       	call   f0107f5f <kmalloc>
f01232b0:	83 c4 10             	add    $0x10,%esp
f01232b3:	89 85 c4 fd ff ff    	mov    %eax,-0x23c(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01232b9:	8b 85 c4 fd ff ff    	mov    -0x23c(%ebp),%eax
f01232bf:	89 c1                	mov    %eax,%ecx
f01232c1:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f01232c8:	10 00 00 
f01232cb:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01232d0:	0f b6 d0             	movzbl %al,%edx
f01232d3:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01232d9:	01 d0                	add    %edx,%eax
f01232db:	48                   	dec    %eax
f01232dc:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f01232e2:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01232e8:	ba 00 00 00 00       	mov    $0x0,%edx
f01232ed:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f01232f3:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01232f9:	29 d0                	sub    %edx,%eax
f01232fb:	89 c3                	mov    %eax,%ebx
f01232fd:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f0123304:	10 00 00 
f0123307:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012330c:	0f b6 c0             	movzbl %al,%eax
f012330f:	c1 e0 04             	shl    $0x4,%eax
f0123312:	89 c2                	mov    %eax,%edx
f0123314:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012331a:	01 d0                	add    %edx,%eax
f012331c:	48                   	dec    %eax
f012331d:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f0123323:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0123329:	ba 00 00 00 00       	mov    $0x0,%edx
f012332e:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f0123334:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f012333a:	29 d0                	sub    %edx,%eax
f012333c:	01 d8                	add    %ebx,%eax
f012333e:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0123343:	39 c1                	cmp    %eax,%ecx
f0123345:	74 17                	je     f012335e <test_kheap_phys_addr+0x79a>
f0123347:	83 ec 04             	sub    $0x4,%esp
f012334a:	68 40 98 13 f0       	push   $0xf0139840
f012334f:	68 3a 08 00 00       	push   $0x83a
f0123354:	68 5a 97 13 f0       	push   $0xf013975a
f0123359:	e8 52 ce fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012335e:	e8 21 13 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0123363:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0123366:	74 17                	je     f012337f <test_kheap_phys_addr+0x7bb>
f0123368:	83 ec 04             	sub    $0x4,%esp
f012336b:	68 74 97 13 f0       	push   $0xf0139774
f0123370:	68 3b 08 00 00       	push   $0x83b
f0123375:	68 5a 97 13 f0       	push   $0xf013975a
f012337a:	e8 31 ce fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f012337f:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0123382:	e8 3f 96 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0123387:	29 c3                	sub    %eax,%ebx
f0123389:	89 d8                	mov    %ebx,%eax
f012338b:	3d 00 06 00 00       	cmp    $0x600,%eax
f0123390:	74 17                	je     f01233a9 <test_kheap_phys_addr+0x7e5>
f0123392:	83 ec 04             	sub    $0x4,%esp
f0123395:	68 dc 97 13 f0       	push   $0xf01397dc
f012339a:	68 3c 08 00 00       	push   $0x83c
f012339f:	68 5a 97 13 f0       	push   $0xf013975a
f01233a4:	e8 07 ce fd ff       	call   f01001b0 <_panic>

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f01233a9:	e8 18 96 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01233ae:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01233b1:	e8 ce 12 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01233b6:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f01233b9:	83 ec 0c             	sub    $0xc,%esp
f01233bc:	68 00 38 00 00       	push   $0x3800
f01233c1:	e8 99 4b fe ff       	call   f0107f5f <kmalloc>
f01233c6:	83 c4 10             	add    $0x10,%esp
f01233c9:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01233cf:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f01233d5:	89 c1                	mov    %eax,%ecx
f01233d7:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f01233de:	10 00 00 
f01233e1:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01233e6:	0f b6 d0             	movzbl %al,%edx
f01233e9:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01233ef:	01 d0                	add    %edx,%eax
f01233f1:	48                   	dec    %eax
f01233f2:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f01233f8:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01233fe:	ba 00 00 00 00       	mov    $0x0,%edx
f0123403:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f0123409:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012340f:	29 d0                	sub    %edx,%eax
f0123411:	89 c3                	mov    %eax,%ebx
f0123413:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f012341a:	10 00 00 
f012341d:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0123422:	0f b6 c0             	movzbl %al,%eax
f0123425:	c1 e0 04             	shl    $0x4,%eax
f0123428:	89 c2                	mov    %eax,%edx
f012342a:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0123430:	01 d0                	add    %edx,%eax
f0123432:	48                   	dec    %eax
f0123433:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f0123439:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012343f:	ba 00 00 00 00       	mov    $0x0,%edx
f0123444:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f012344a:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0123450:	29 d0                	sub    %edx,%eax
f0123452:	01 d8                	add    %ebx,%eax
f0123454:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0123459:	39 c1                	cmp    %eax,%ecx
f012345b:	74 17                	je     f0123474 <test_kheap_phys_addr+0x8b0>
f012345d:	83 ec 04             	sub    $0x4,%esp
f0123460:	68 40 98 13 f0       	push   $0xf0139840
f0123465:	68 42 08 00 00       	push   $0x842
f012346a:	68 5a 97 13 f0       	push   $0xf013975a
f012346f:	e8 3c cd fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123474:	e8 0b 12 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0123479:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f012347c:	74 17                	je     f0123495 <test_kheap_phys_addr+0x8d1>
f012347e:	83 ec 04             	sub    $0x4,%esp
f0123481:	68 74 97 13 f0       	push   $0xf0139774
f0123486:	68 43 08 00 00       	push   $0x843
f012348b:	68 5a 97 13 f0       	push   $0xf013975a
f0123490:	e8 1b cd fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123495:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0123498:	e8 29 95 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012349d:	29 c3                	sub    %eax,%ebx
f012349f:	89 d8                	mov    %ebx,%eax
f01234a1:	83 f8 04             	cmp    $0x4,%eax
f01234a4:	74 17                	je     f01234bd <test_kheap_phys_addr+0x8f9>
f01234a6:	83 ec 04             	sub    $0x4,%esp
f01234a9:	68 dc 97 13 f0       	push   $0xf01397dc
f01234ae:	68 44 08 00 00       	push   $0x844
f01234b3:	68 5a 97 13 f0       	push   $0xf013975a
f01234b8:	e8 f3 cc fd ff       	call   f01001b0 <_panic>
	}

	//test kheap_physical_address after kmalloc only [40%]
	{
f01234bd:	89 e0                	mov    %esp,%eax
f01234bf:	89 c6                	mov    %eax,%esi
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f01234c1:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f01234c8:	10 00 00 
f01234cb:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01234d0:	0f b6 d0             	movzbl %al,%edx
f01234d3:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01234d9:	01 d0                	add    %edx,%eax
f01234db:	48                   	dec    %eax
f01234dc:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f01234e2:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f01234e8:	ba 00 00 00 00       	mov    $0x0,%edx
f01234ed:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f01234f3:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f01234f9:	29 d0                	sub    %edx,%eax
f01234fb:	89 c1                	mov    %eax,%ecx
f01234fd:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f0123504:	10 00 00 
f0123507:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012350c:	0f b6 c0             	movzbl %al,%eax
f012350f:	c1 e0 04             	shl    $0x4,%eax
f0123512:	89 c2                	mov    %eax,%edx
f0123514:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012351a:	01 d0                	add    %edx,%eax
f012351c:	48                   	dec    %eax
f012351d:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f0123523:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0123529:	ba 00 00 00 00       	mov    $0x0,%edx
f012352e:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f0123534:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012353a:	29 d0                	sub    %edx,%eax
f012353c:	01 c8                	add    %ecx,%eax
f012353e:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0123543:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
f0123549:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f0123550:	10 00 00 
f0123553:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0123558:	0f b6 d0             	movzbl %al,%edx
f012355b:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0123561:	01 d0                	add    %edx,%eax
f0123563:	48                   	dec    %eax
f0123564:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f012356a:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0123570:	ba 00 00 00 00       	mov    $0x0,%edx
f0123575:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f012357b:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0123581:	29 d0                	sub    %edx,%eax
f0123583:	89 c1                	mov    %eax,%ecx
f0123585:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f012358c:	10 00 00 
f012358f:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0123594:	0f b6 c0             	movzbl %al,%eax
f0123597:	c1 e0 04             	shl    $0x4,%eax
f012359a:	89 c2                	mov    %eax,%edx
f012359c:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01235a2:	01 d0                	add    %edx,%eax
f01235a4:	48                   	dec    %eax
f01235a5:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f01235ab:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f01235b1:	ba 00 00 00 00       	mov    $0x0,%edx
f01235b6:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f01235bc:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f01235c2:	29 d0                	sub    %edx,%eax
f01235c4:	01 c8                	add    %ecx,%eax
f01235c6:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f01235cb:	c1 e8 0c             	shr    $0xc,%eax
f01235ce:	89 c2                	mov    %eax,%edx
f01235d0:	4a                   	dec    %edx
f01235d1:	89 95 fc fe ff ff    	mov    %edx,-0x104(%ebp)
f01235d7:	c1 e0 02             	shl    $0x2,%eax
f01235da:	8d 50 03             	lea    0x3(%eax),%edx
f01235dd:	b8 10 00 00 00       	mov    $0x10,%eax
f01235e2:	48                   	dec    %eax
f01235e3:	01 d0                	add    %edx,%eax
f01235e5:	bf 10 00 00 00       	mov    $0x10,%edi
f01235ea:	ba 00 00 00 00       	mov    $0x0,%edx
f01235ef:	f7 f7                	div    %edi
f01235f1:	6b c0 10             	imul   $0x10,%eax,%eax
f01235f4:	29 c4                	sub    %eax,%esp
f01235f6:	89 e0                	mov    %esp,%eax
f01235f8:	83 c0 03             	add    $0x3,%eax
f01235fb:	c1 e8 02             	shr    $0x2,%eax
f01235fe:	c1 e0 02             	shl    $0x2,%eax
f0123601:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
		i = 0;
f0123607:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f012360e:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
f0123615:	eb 29                	jmp    f0123640 <test_kheap_phys_addr+0xa7c>
		{
			allPAs[i++] = kheap_physical_address(va);
f0123617:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
f012361a:	8d 43 01             	lea    0x1(%ebx),%eax
f012361d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0123620:	83 ec 0c             	sub    $0xc,%esp
f0123623:	ff 75 e0             	pushl  -0x20(%ebp)
f0123626:	e8 82 49 fe ff       	call   f0107fad <kheap_physical_address>
f012362b:	83 c4 10             	add    $0x10,%esp
f012362e:	89 c2                	mov    %eax,%edx
f0123630:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0123636:	89 14 98             	mov    %edx,(%eax,%ebx,4)
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
		i = 0;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f0123639:	81 45 e0 00 10 00 00 	addl   $0x1000,-0x20(%ebp)
f0123640:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0123643:	3b 85 10 ff ff ff    	cmp    -0xf0(%ebp),%eax
f0123649:	72 cc                	jb     f0123617 <test_kheap_phys_addr+0xa53>
		{
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
f012364b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f012364e:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
		i = 0;
f0123654:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f012365b:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
f0123662:	e9 ab 00 00 00       	jmp    f0123712 <test_kheap_phys_addr+0xb4e>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f0123667:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f012366c:	83 ec 04             	sub    $0x4,%esp
f012366f:	8d 95 a8 fd ff ff    	lea    -0x258(%ebp),%edx
f0123675:	52                   	push   %edx
f0123676:	ff 75 e0             	pushl  -0x20(%ebp)
f0123679:	50                   	push   %eax
f012367a:	e8 68 3e fe ff       	call   f01074e7 <get_page_table>
f012367f:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0123682:	8b 85 a8 fd ff ff    	mov    -0x258(%ebp),%eax
f0123688:	85 c0                	test   %eax,%eax
f012368a:	75 17                	jne    f01236a3 <test_kheap_phys_addr+0xadf>
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f012368c:	83 ec 04             	sub    $0x4,%esp
f012368f:	68 fc a0 13 f0       	push   $0xf013a0fc
f0123694:	68 59 08 00 00       	push   $0x859
f0123699:	68 5a 97 13 f0       	push   $0xf013975a
f012369e:	e8 0d cb fd ff       	call   f01001b0 <_panic>

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f01236a3:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01236a6:	c1 e8 0c             	shr    $0xc,%eax
f01236a9:	25 ff 03 00 00       	and    $0x3ff,%eax
f01236ae:	89 45 dc             	mov    %eax,-0x24(%ebp)
f01236b1:	eb 4b                	jmp    f01236fe <test_kheap_phys_addr+0xb3a>
			{
				if ((ptr_table[j] & 0xFFFFF000) != allPAs[i])
f01236b3:	8b 85 a8 fd ff ff    	mov    -0x258(%ebp),%eax
f01236b9:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01236bc:	c1 e2 02             	shl    $0x2,%edx
f01236bf:	01 d0                	add    %edx,%eax
f01236c1:	8b 00                	mov    (%eax),%eax
f01236c3:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01236c8:	89 c1                	mov    %eax,%ecx
f01236ca:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f01236d0:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01236d3:	8b 04 90             	mov    (%eax,%edx,4),%eax
f01236d6:	39 c1                	cmp    %eax,%ecx
f01236d8:	74 17                	je     f01236f1 <test_kheap_phys_addr+0xb2d>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					panic("Wrong kheap_physical_address");
f01236da:	83 ec 04             	sub    $0x4,%esp
f01236dd:	68 55 a1 13 f0       	push   $0xf013a155
f01236e2:	68 60 08 00 00       	push   $0x860
f01236e7:	68 5a 97 13 f0       	push   $0xf013975a
f01236ec:	e8 bf ca fd ff       	call   f01001b0 <_panic>
				}
				va+=PAGE_SIZE;
f01236f1:	81 45 e0 00 10 00 00 	addl   $0x1000,-0x20(%ebp)
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
			if (ptr_table == NULL)
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f01236f8:	ff 45 dc             	incl   -0x24(%ebp)
f01236fb:	ff 45 e4             	incl   -0x1c(%ebp)
f01236fe:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0123701:	3b 85 f4 fe ff ff    	cmp    -0x10c(%ebp),%eax
f0123707:	7d 09                	jge    f0123712 <test_kheap_phys_addr+0xb4e>
f0123709:	81 7d dc ff 03 00 00 	cmpl   $0x3ff,-0x24(%ebp)
f0123710:	7e a1                	jle    f01236b3 <test_kheap_phys_addr+0xaef>
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
		i = 0;
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f0123712:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0123715:	3b 85 10 ff ff ff    	cmp    -0xf0(%ebp),%eax
f012371b:	0f 82 46 ff ff ff    	jb     f0123667 <test_kheap_phys_addr+0xaa3>
f0123721:	89 f4                	mov    %esi,%esp
				}
				va+=PAGE_SIZE;
			}
		}
	}
	cprintf("\nkheap_physical_address: current evaluation = 40%");
f0123723:	83 ec 0c             	sub    $0xc,%esp
f0123726:	68 74 a1 13 f0       	push   $0xf013a174
f012372b:	e8 01 d7 fd ff       	call   f0100e31 <cprintf>
f0123730:	83 c4 10             	add    $0x10,%esp

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0123733:	e8 8e 92 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0123738:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f012373e:	e8 41 0f fe ff       	call   f0104684 <pf_calculate_free_frames>
f0123743:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		kfree(ptr_allocations[0]);
f0123749:	8b 85 ac fd ff ff    	mov    -0x254(%ebp),%eax
f012374f:	83 ec 0c             	sub    $0xc,%esp
f0123752:	50                   	push   %eax
f0123753:	e8 21 48 fe ff       	call   f0107f79 <kfree>
f0123758:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012375b:	e8 24 0f fe ff       	call   f0104684 <pf_calculate_free_frames>
f0123760:	3b 85 ec fe ff ff    	cmp    -0x114(%ebp),%eax
f0123766:	74 17                	je     f012377f <test_kheap_phys_addr+0xbbb>
f0123768:	83 ec 04             	sub    $0x4,%esp
f012376b:	68 74 97 13 f0       	push   $0xf0139774
f0123770:	68 6e 08 00 00       	push   $0x86e
f0123775:	68 5a 97 13 f0       	push   $0xf013975a
f012377a:	e8 31 ca fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f012377f:	e8 42 92 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0123784:	89 c2                	mov    %eax,%edx
f0123786:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012378c:	29 c2                	sub    %eax,%edx
f012378e:	89 d0                	mov    %edx,%eax
f0123790:	3d 00 02 00 00       	cmp    $0x200,%eax
f0123795:	74 17                	je     f01237ae <test_kheap_phys_addr+0xbea>
f0123797:	83 ec 04             	sub    $0x4,%esp
f012379a:	68 e4 9e 13 f0       	push   $0xf0139ee4
f012379f:	68 6f 08 00 00       	push   $0x86f
f01237a4:	68 5a 97 13 f0       	push   $0xf013975a
f01237a9:	e8 02 ca fd ff       	call   f01001b0 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f01237ae:	e8 13 92 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01237b3:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01237b9:	e8 c6 0e fe ff       	call   f0104684 <pf_calculate_free_frames>
f01237be:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		kfree(ptr_allocations[1]);
f01237c4:	8b 85 b0 fd ff ff    	mov    -0x250(%ebp),%eax
f01237ca:	83 ec 0c             	sub    $0xc,%esp
f01237cd:	50                   	push   %eax
f01237ce:	e8 a6 47 fe ff       	call   f0107f79 <kfree>
f01237d3:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01237d6:	e8 a9 0e fe ff       	call   f0104684 <pf_calculate_free_frames>
f01237db:	3b 85 ec fe ff ff    	cmp    -0x114(%ebp),%eax
f01237e1:	74 17                	je     f01237fa <test_kheap_phys_addr+0xc36>
f01237e3:	83 ec 04             	sub    $0x4,%esp
f01237e6:	68 74 97 13 f0       	push   $0xf0139774
f01237eb:	68 75 08 00 00       	push   $0x875
f01237f0:	68 5a 97 13 f0       	push   $0xf013975a
f01237f5:	e8 b6 c9 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f01237fa:	e8 c7 91 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01237ff:	89 c2                	mov    %eax,%edx
f0123801:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0123807:	29 c2                	sub    %eax,%edx
f0123809:	89 d0                	mov    %edx,%eax
f012380b:	3d 00 02 00 00       	cmp    $0x200,%eax
f0123810:	74 17                	je     f0123829 <test_kheap_phys_addr+0xc65>
f0123812:	83 ec 04             	sub    $0x4,%esp
f0123815:	68 e4 9e 13 f0       	push   $0xf0139ee4
f012381a:	68 76 08 00 00       	push   $0x876
f012381f:	68 5a 97 13 f0       	push   $0xf013975a
f0123824:	e8 87 c9 fd ff       	call   f01001b0 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f0123829:	e8 98 91 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012382e:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123834:	e8 4b 0e fe ff       	call   f0104684 <pf_calculate_free_frames>
f0123839:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		kfree(ptr_allocations[6]);
f012383f:	8b 85 c4 fd ff ff    	mov    -0x23c(%ebp),%eax
f0123845:	83 ec 0c             	sub    $0xc,%esp
f0123848:	50                   	push   %eax
f0123849:	e8 2b 47 fe ff       	call   f0107f79 <kfree>
f012384e:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123851:	e8 2e 0e fe ff       	call   f0104684 <pf_calculate_free_frames>
f0123856:	3b 85 ec fe ff ff    	cmp    -0x114(%ebp),%eax
f012385c:	74 17                	je     f0123875 <test_kheap_phys_addr+0xcb1>
f012385e:	83 ec 04             	sub    $0x4,%esp
f0123861:	68 74 97 13 f0       	push   $0xf0139774
f0123866:	68 7c 08 00 00       	push   $0x87c
f012386b:	68 5a 97 13 f0       	push   $0xf013975a
f0123870:	e8 3b c9 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0123875:	e8 4c 91 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012387a:	89 c2                	mov    %eax,%edx
f012387c:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0123882:	29 c2                	sub    %eax,%edx
f0123884:	89 d0                	mov    %edx,%eax
f0123886:	3d 00 06 00 00       	cmp    $0x600,%eax
f012388b:	74 17                	je     f01238a4 <test_kheap_phys_addr+0xce0>
f012388d:	83 ec 04             	sub    $0x4,%esp
f0123890:	68 e4 9e 13 f0       	push   $0xf0139ee4
f0123895:	68 7d 08 00 00       	push   $0x87d
f012389a:	68 5a 97 13 f0       	push   $0xf013975a
f012389f:	e8 0c c9 fd ff       	call   f01001b0 <_panic>
	}


	//test kheap_physical_address after kmalloc and kfree [40%]
	{
f01238a4:	89 e0                	mov    %esp,%eax
f01238a6:	89 c6                	mov    %eax,%esi
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f01238a8:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f01238af:	10 00 00 
f01238b2:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01238b7:	0f b6 d0             	movzbl %al,%edx
f01238ba:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f01238c0:	01 d0                	add    %edx,%eax
f01238c2:	48                   	dec    %eax
f01238c3:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f01238c9:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f01238cf:	ba 00 00 00 00       	mov    $0x0,%edx
f01238d4:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f01238da:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f01238e0:	29 d0                	sub    %edx,%eax
f01238e2:	89 c1                	mov    %eax,%ecx
f01238e4:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f01238eb:	10 00 00 
f01238ee:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01238f3:	0f b6 c0             	movzbl %al,%eax
f01238f6:	c1 e0 04             	shl    $0x4,%eax
f01238f9:	89 c2                	mov    %eax,%edx
f01238fb:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0123901:	01 d0                	add    %edx,%eax
f0123903:	48                   	dec    %eax
f0123904:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f012390a:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0123910:	ba 00 00 00 00       	mov    $0x0,%edx
f0123915:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f012391b:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0123921:	29 d0                	sub    %edx,%eax
f0123923:	01 c8                	add    %ecx,%eax
f0123925:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f012392a:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
f0123930:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f0123937:	10 00 00 
f012393a:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012393f:	0f b6 d0             	movzbl %al,%edx
f0123942:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0123948:	01 d0                	add    %edx,%eax
f012394a:	48                   	dec    %eax
f012394b:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f0123951:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0123957:	ba 00 00 00 00       	mov    $0x0,%edx
f012395c:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f0123962:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0123968:	29 d0                	sub    %edx,%eax
f012396a:	89 c1                	mov    %eax,%ecx
f012396c:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f0123973:	10 00 00 
f0123976:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012397b:	0f b6 c0             	movzbl %al,%eax
f012397e:	c1 e0 04             	shl    $0x4,%eax
f0123981:	89 c2                	mov    %eax,%edx
f0123983:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0123989:	01 d0                	add    %edx,%eax
f012398b:	48                   	dec    %eax
f012398c:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f0123992:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0123998:	ba 00 00 00 00       	mov    $0x0,%edx
f012399d:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f01239a3:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f01239a9:	29 d0                	sub    %edx,%eax
f01239ab:	01 c8                	add    %ecx,%eax
f01239ad:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f01239b2:	c1 e8 0c             	shr    $0xc,%eax
f01239b5:	89 c2                	mov    %eax,%edx
f01239b7:	4a                   	dec    %edx
f01239b8:	89 95 c4 fe ff ff    	mov    %edx,-0x13c(%ebp)
f01239be:	c1 e0 02             	shl    $0x2,%eax
f01239c1:	8d 50 03             	lea    0x3(%eax),%edx
f01239c4:	b8 10 00 00 00       	mov    $0x10,%eax
f01239c9:	48                   	dec    %eax
f01239ca:	01 d0                	add    %edx,%eax
f01239cc:	bf 10 00 00 00       	mov    $0x10,%edi
f01239d1:	ba 00 00 00 00       	mov    $0x0,%edx
f01239d6:	f7 f7                	div    %edi
f01239d8:	6b c0 10             	imul   $0x10,%eax,%eax
f01239db:	29 c4                	sub    %eax,%esp
f01239dd:	89 e0                	mov    %esp,%eax
f01239df:	83 c0 03             	add    $0x3,%eax
f01239e2:	c1 e8 02             	shr    $0x2,%eax
f01239e5:	c1 e0 02             	shl    $0x2,%eax
f01239e8:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
		i = 0;
f01239ee:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f01239f5:	c7 45 d8 00 00 00 f6 	movl   $0xf6000000,-0x28(%ebp)
f01239fc:	eb 29                	jmp    f0123a27 <test_kheap_phys_addr+0xe63>
		{
			allPAs[i++] = kheap_physical_address(va);
f01239fe:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
f0123a01:	8d 43 01             	lea    0x1(%ebx),%eax
f0123a04:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0123a07:	83 ec 0c             	sub    $0xc,%esp
f0123a0a:	ff 75 d8             	pushl  -0x28(%ebp)
f0123a0d:	e8 9b 45 fe ff       	call   f0107fad <kheap_physical_address>
f0123a12:	83 c4 10             	add    $0x10,%esp
f0123a15:	89 c2                	mov    %eax,%edx
f0123a17:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0123a1d:	89 14 98             	mov    %edx,(%eax,%ebx,4)
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
		i = 0;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f0123a20:	81 45 d8 00 10 00 00 	addl   $0x1000,-0x28(%ebp)
f0123a27:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0123a2a:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f0123a30:	72 cc                	jb     f01239fe <test_kheap_phys_addr+0xe3a>
		{
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
f0123a32:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0123a35:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
		i = 0;
f0123a3b:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f0123a42:	c7 45 d8 00 00 00 f6 	movl   $0xf6000000,-0x28(%ebp)
f0123a49:	e9 ab 00 00 00       	jmp    f0123af9 <test_kheap_phys_addr+0xf35>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f0123a4e:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f0123a53:	83 ec 04             	sub    $0x4,%esp
f0123a56:	8d 95 a4 fd ff ff    	lea    -0x25c(%ebp),%edx
f0123a5c:	52                   	push   %edx
f0123a5d:	ff 75 d8             	pushl  -0x28(%ebp)
f0123a60:	50                   	push   %eax
f0123a61:	e8 81 3a fe ff       	call   f01074e7 <get_page_table>
f0123a66:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0123a69:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f0123a6f:	85 c0                	test   %eax,%eax
f0123a71:	75 17                	jne    f0123a8a <test_kheap_phys_addr+0xec6>
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f0123a73:	83 ec 04             	sub    $0x4,%esp
f0123a76:	68 fc a0 13 f0       	push   $0xf013a0fc
f0123a7b:	68 93 08 00 00       	push   $0x893
f0123a80:	68 5a 97 13 f0       	push   $0xf013975a
f0123a85:	e8 26 c7 fd ff       	call   f01001b0 <_panic>

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f0123a8a:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0123a8d:	c1 e8 0c             	shr    $0xc,%eax
f0123a90:	25 ff 03 00 00       	and    $0x3ff,%eax
f0123a95:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0123a98:	eb 4b                	jmp    f0123ae5 <test_kheap_phys_addr+0xf21>
			{
				if ((ptr_table[j] & 0xFFFFF000) != allPAs[i])
f0123a9a:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f0123aa0:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0123aa3:	c1 e2 02             	shl    $0x2,%edx
f0123aa6:	01 d0                	add    %edx,%eax
f0123aa8:	8b 00                	mov    (%eax),%eax
f0123aaa:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0123aaf:	89 c1                	mov    %eax,%ecx
f0123ab1:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0123ab7:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0123aba:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0123abd:	39 c1                	cmp    %eax,%ecx
f0123abf:	74 17                	je     f0123ad8 <test_kheap_phys_addr+0xf14>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					panic("Wrong kheap_physical_address");
f0123ac1:	83 ec 04             	sub    $0x4,%esp
f0123ac4:	68 55 a1 13 f0       	push   $0xf013a155
f0123ac9:	68 9a 08 00 00       	push   $0x89a
f0123ace:	68 5a 97 13 f0       	push   $0xf013975a
f0123ad3:	e8 d8 c6 fd ff       	call   f01001b0 <_panic>
				}
				va += PAGE_SIZE;
f0123ad8:	81 45 d8 00 10 00 00 	addl   $0x1000,-0x28(%ebp)
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
			if (ptr_table == NULL)
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f0123adf:	ff 45 d4             	incl   -0x2c(%ebp)
f0123ae2:	ff 45 e4             	incl   -0x1c(%ebp)
f0123ae5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0123ae8:	3b 85 bc fe ff ff    	cmp    -0x144(%ebp),%eax
f0123aee:	7d 09                	jge    f0123af9 <test_kheap_phys_addr+0xf35>
f0123af0:	81 7d d4 ff 03 00 00 	cmpl   $0x3ff,-0x2c(%ebp)
f0123af7:	7e a1                	jle    f0123a9a <test_kheap_phys_addr+0xed6>
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
		i = 0;
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f0123af9:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0123afc:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f0123b02:	0f 82 46 ff ff ff    	jb     f0123a4e <test_kheap_phys_addr+0xe8a>
f0123b08:	89 f4                	mov    %esi,%esp
				va += PAGE_SIZE;
			}
		}
	}

	cprintf("\b\b\b80%");
f0123b0a:	83 ec 0c             	sub    $0xc,%esp
f0123b0d:	68 e5 98 13 f0       	push   $0xf01398e5
f0123b12:	e8 1a d3 fd ff       	call   f0100e31 <cprintf>
f0123b17:	83 c4 10             	add    $0x10,%esp

	//test kheap_physical_address on non-mapped area [20%]
	{
		uint32 va;
		uint32 startVA = ACTUAL_START + 16*Mega;
f0123b1a:	c7 85 b8 fe ff ff 00 	movl   $0x1000,-0x148(%ebp)
f0123b21:	10 00 00 
f0123b24:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0123b29:	0f b6 d0             	movzbl %al,%edx
f0123b2c:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0123b32:	01 d0                	add    %edx,%eax
f0123b34:	48                   	dec    %eax
f0123b35:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
f0123b3b:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0123b41:	ba 00 00 00 00       	mov    $0x0,%edx
f0123b46:	f7 b5 b8 fe ff ff    	divl   -0x148(%ebp)
f0123b4c:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0123b52:	29 d0                	sub    %edx,%eax
f0123b54:	89 c1                	mov    %eax,%ecx
f0123b56:	c7 85 b0 fe ff ff 00 	movl   $0x1000,-0x150(%ebp)
f0123b5d:	10 00 00 
f0123b60:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0123b65:	0f b6 c0             	movzbl %al,%eax
f0123b68:	c1 e0 04             	shl    $0x4,%eax
f0123b6b:	89 c2                	mov    %eax,%edx
f0123b6d:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0123b73:	01 d0                	add    %edx,%eax
f0123b75:	48                   	dec    %eax
f0123b76:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
f0123b7c:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f0123b82:	ba 00 00 00 00       	mov    $0x0,%edx
f0123b87:	f7 b5 b0 fe ff ff    	divl   -0x150(%ebp)
f0123b8d:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f0123b93:	29 d0                	sub    %edx,%eax
f0123b95:	01 c8                	add    %ecx,%eax
f0123b97:	2d 00 c0 ff 08       	sub    $0x8ffc000,%eax
f0123b9c:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
		i = 0;
f0123ba2:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		for (va = startVA; va < KERNEL_HEAP_MAX; va+=PAGE_SIZE)
f0123ba9:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0123baf:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0123bb2:	eb 0a                	jmp    f0123bbe <test_kheap_phys_addr+0xffa>
		{
			i++;
f0123bb4:	ff 45 e4             	incl   -0x1c(%ebp)
	//test kheap_physical_address on non-mapped area [20%]
	{
		uint32 va;
		uint32 startVA = ACTUAL_START + 16*Mega;
		i = 0;
		for (va = startVA; va < KERNEL_HEAP_MAX; va+=PAGE_SIZE)
f0123bb7:	81 45 d0 00 10 00 00 	addl   $0x1000,-0x30(%ebp)
f0123bbe:	81 7d d0 ff ef ff ff 	cmpl   $0xffffefff,-0x30(%ebp)
f0123bc5:	76 ed                	jbe    f0123bb4 <test_kheap_phys_addr+0xff0>
		{
			i++;
		}
		int ii = i ;
f0123bc7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0123bca:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
		i = 0;
f0123bd0:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		int j;
		long long va2;
		for (va2 = startVA; va2 < (long long)KERNEL_HEAP_MAX; va2+=PTSIZE)
f0123bd7:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0123bdd:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0123be0:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
f0123be7:	e9 cc 00 00 00       	jmp    f0123cb8 <test_kheap_phys_addr+0x10f4>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va2, &ptr_table);
f0123bec:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0123bef:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f0123bf4:	83 ec 04             	sub    $0x4,%esp
f0123bf7:	8d 8d a0 fd ff ff    	lea    -0x260(%ebp),%ecx
f0123bfd:	51                   	push   %ecx
f0123bfe:	52                   	push   %edx
f0123bff:	50                   	push   %eax
f0123c00:	e8 e2 38 fe ff       	call   f01074e7 <get_page_table>
f0123c05:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0123c08:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f0123c0e:	85 c0                	test   %eax,%eax
f0123c10:	75 17                	jne    f0123c29 <test_kheap_phys_addr+0x1065>
			{
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f0123c12:	83 ec 04             	sub    $0x4,%esp
f0123c15:	68 fc a0 13 f0       	push   $0xf013a0fc
f0123c1a:	68 b6 08 00 00       	push   $0x8b6
f0123c1f:	68 5a 97 13 f0       	push   $0xf013975a
f0123c24:	e8 87 c5 fd ff       	call   f01001b0 <_panic>
			}
			for (j = 0; i < ii && j < 1024; ++j, ++i)
f0123c29:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f0123c30:	eb 67                	jmp    f0123c99 <test_kheap_phys_addr+0x10d5>
			{
				//if ((ptr_table[j] & 0xFFFFF000) != allPAs[i])
				unsigned int page_va = startVA+i*PAGE_SIZE;
f0123c32:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0123c35:	c1 e0 0c             	shl    $0xc,%eax
f0123c38:	89 c2                	mov    %eax,%edx
f0123c3a:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0123c40:	01 d0                	add    %edx,%eax
f0123c42:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
				unsigned int supposed_kheap_phys_add = kheap_physical_address(page_va);
f0123c48:	83 ec 0c             	sub    $0xc,%esp
f0123c4b:	ff b5 a0 fe ff ff    	pushl  -0x160(%ebp)
f0123c51:	e8 57 43 fe ff       	call   f0107fad <kheap_physical_address>
f0123c56:	83 c4 10             	add    $0x10,%esp
f0123c59:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
				if ((ptr_table[j] & 0xFFFFF000) != supposed_kheap_phys_add)
f0123c5f:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f0123c65:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0123c68:	c1 e2 02             	shl    $0x2,%edx
f0123c6b:	01 d0                	add    %edx,%eax
f0123c6d:	8b 00                	mov    (%eax),%eax
f0123c6f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0123c74:	3b 85 9c fe ff ff    	cmp    -0x164(%ebp),%eax
f0123c7a:	74 17                	je     f0123c93 <test_kheap_phys_addr+0x10cf>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va2 + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					panic("Wrong kheap_physical_address");
f0123c7c:	83 ec 04             	sub    $0x4,%esp
f0123c7f:	68 55 a1 13 f0       	push   $0xf013a155
f0123c84:	68 c0 08 00 00       	push   $0x8c0
f0123c89:	68 5a 97 13 f0       	push   $0xf013975a
f0123c8e:	e8 1d c5 fd ff       	call   f01001b0 <_panic>
			get_page_table(ptr_page_directory, (uint32)va2, &ptr_table);
			if (ptr_table == NULL)
			{
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
			}
			for (j = 0; i < ii && j < 1024; ++j, ++i)
f0123c93:	ff 45 cc             	incl   -0x34(%ebp)
f0123c96:	ff 45 e4             	incl   -0x1c(%ebp)
f0123c99:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0123c9c:	3b 85 a4 fe ff ff    	cmp    -0x15c(%ebp),%eax
f0123ca2:	7d 09                	jge    f0123cad <test_kheap_phys_addr+0x10e9>
f0123ca4:	81 7d cc ff 03 00 00 	cmpl   $0x3ff,-0x34(%ebp)
f0123cab:	7e 85                	jle    f0123c32 <test_kheap_phys_addr+0x106e>
		}
		int ii = i ;
		i = 0;
		int j;
		long long va2;
		for (va2 = startVA; va2 < (long long)KERNEL_HEAP_MAX; va2+=PTSIZE)
f0123cad:	81 45 c0 00 00 40 00 	addl   $0x400000,-0x40(%ebp)
f0123cb4:	83 55 c4 00          	adcl   $0x0,-0x3c(%ebp)
f0123cb8:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
f0123cbc:	0f 88 2a ff ff ff    	js     f0123bec <test_kheap_phys_addr+0x1028>
f0123cc2:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
f0123cc6:	7f 0d                	jg     f0123cd5 <test_kheap_phys_addr+0x1111>
f0123cc8:	81 7d c0 ff ef ff ff 	cmpl   $0xffffefff,-0x40(%ebp)
f0123ccf:	0f 86 17 ff ff ff    	jbe    f0123bec <test_kheap_phys_addr+0x1028>
				}
			}
		}
	}

	cprintf("\b\b\b100%\n");
f0123cd5:	83 ec 0c             	sub    $0xc,%esp
f0123cd8:	68 3e 99 13 f0       	push   $0xf013993e
f0123cdd:	e8 4f d1 fd ff       	call   f0100e31 <cprintf>
f0123ce2:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test kheap_physical_address completed successfully.\n");
f0123ce5:	83 ec 0c             	sub    $0xc,%esp
f0123ce8:	68 a8 a1 13 f0       	push   $0xf013a1a8
f0123ced:	e8 3f d1 fd ff       	call   f0100e31 <cprintf>
f0123cf2:	83 c4 10             	add    $0x10,%esp

	return 1;
f0123cf5:	b8 01 00 00 00       	mov    $0x1,%eax

}
f0123cfa:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0123cfd:	5b                   	pop    %ebx
f0123cfe:	5e                   	pop    %esi
f0123cff:	5f                   	pop    %edi
f0123d00:	5d                   	pop    %ebp
f0123d01:	c3                   	ret    

f0123d02 <test_kheap_virt_addr>:

int test_kheap_virt_addr()
{
f0123d02:	55                   	push   %ebp
f0123d03:	89 e5                	mov    %esp,%ebp
f0123d05:	57                   	push   %edi
f0123d06:	56                   	push   %esi
f0123d07:	53                   	push   %ebx
f0123d08:	81 ec 3c 02 00 00    	sub    $0x23c,%esp
f0123d0e:	89 e0                	mov    %esp,%eax
f0123d10:	89 c6                	mov    %eax,%esi
	cprintf("==============================================\n");
f0123d12:	83 ec 0c             	sub    $0xc,%esp
f0123d15:	68 9c 96 13 f0       	push   $0xf013969c
f0123d1a:	e8 12 d1 fd ff       	call   f0100e31 <cprintf>
f0123d1f:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0123d22:	83 ec 0c             	sub    $0xc,%esp
f0123d25:	68 cc 96 13 f0       	push   $0xf01396cc
f0123d2a:	e8 02 d1 fd ff       	call   f0100e31 <cprintf>
f0123d2f:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0123d32:	83 ec 0c             	sub    $0xc,%esp
f0123d35:	68 9c 96 13 f0       	push   $0xf013969c
f0123d3a:	e8 f2 d0 fd ff       	call   f0100e31 <cprintf>
f0123d3f:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f0123d42:	c6 45 d3 80          	movb   $0x80,-0x2d(%ebp)
	char maxByte = 0x7F;
f0123d46:	c6 45 d2 7f          	movb   $0x7f,-0x2e(%ebp)
	short minShort = 1<<15 ;
f0123d4a:	66 c7 45 d0 00 80    	movw   $0x8000,-0x30(%ebp)
	short maxShort = 0x7FFF;
f0123d50:	66 c7 45 ce ff 7f    	movw   $0x7fff,-0x32(%ebp)
	int minInt = 1<<31 ;
f0123d56:	c7 45 c8 00 00 00 80 	movl   $0x80000000,-0x38(%ebp)
	int maxInt = 0x7FFFFFFF;
f0123d5d:	c7 45 c4 ff ff ff 7f 	movl   $0x7fffffff,-0x3c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0123d64:	e8 5d 8c fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0123d69:	89 45 c0             	mov    %eax,-0x40(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0123d6c:	8d 95 60 fe ff ff    	lea    -0x1a0(%ebp),%edx
f0123d72:	b9 14 00 00 00       	mov    $0x14,%ecx
f0123d77:	b8 00 00 00 00       	mov    $0x0,%eax
f0123d7c:	89 d7                	mov    %edx,%edi
f0123d7e:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0123d80:	8d 95 10 fe ff ff    	lea    -0x1f0(%ebp),%edx
f0123d86:	b9 14 00 00 00       	mov    $0x14,%ecx
f0123d8b:	b8 00 00 00 00       	mov    $0x0,%eax
f0123d90:	89 d7                	mov    %edx,%edi
f0123d92:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f0123d94:	8d 95 c0 fd ff ff    	lea    -0x240(%ebp),%edx
f0123d9a:	b9 14 00 00 00       	mov    $0x14,%ecx
f0123d9f:	b8 00 00 00 00       	mov    $0x0,%eax
f0123da4:	89 d7                	mov    %edx,%edi
f0123da6:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0123da8:	e8 19 8c fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0123dad:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123db0:	e8 cf 08 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0123db5:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0123db8:	83 ec 0c             	sub    $0xc,%esp
f0123dbb:	68 00 fc 1f 00       	push   $0x1ffc00
f0123dc0:	e8 9a 41 fe ff       	call   f0107f5f <kmalloc>
f0123dc5:	83 c4 10             	add    $0x10,%esp
f0123dc8:	89 85 c0 fd ff ff    	mov    %eax,-0x240(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123dce:	8b 85 c0 fd ff ff    	mov    -0x240(%ebp),%eax
f0123dd4:	89 c1                	mov    %eax,%ecx
f0123dd6:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f0123ddd:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0123de2:	0f b6 d0             	movzbl %al,%edx
f0123de5:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0123de8:	01 d0                	add    %edx,%eax
f0123dea:	48                   	dec    %eax
f0123deb:	89 45 b0             	mov    %eax,-0x50(%ebp)
f0123dee:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0123df1:	ba 00 00 00 00       	mov    $0x0,%edx
f0123df6:	f7 75 b4             	divl   -0x4c(%ebp)
f0123df9:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0123dfc:	29 d0                	sub    %edx,%eax
f0123dfe:	89 c3                	mov    %eax,%ebx
f0123e00:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f0123e07:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0123e0c:	0f b6 c0             	movzbl %al,%eax
f0123e0f:	c1 e0 04             	shl    $0x4,%eax
f0123e12:	89 c2                	mov    %eax,%edx
f0123e14:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0123e17:	01 d0                	add    %edx,%eax
f0123e19:	48                   	dec    %eax
f0123e1a:	89 45 a8             	mov    %eax,-0x58(%ebp)
f0123e1d:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0123e20:	ba 00 00 00 00       	mov    $0x0,%edx
f0123e25:	f7 75 ac             	divl   -0x54(%ebp)
f0123e28:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0123e2b:	29 d0                	sub    %edx,%eax
f0123e2d:	01 d8                	add    %ebx,%eax
f0123e2f:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0123e34:	39 c1                	cmp    %eax,%ecx
f0123e36:	74 17                	je     f0123e4f <test_kheap_virt_addr+0x14d>
f0123e38:	83 ec 04             	sub    $0x4,%esp
f0123e3b:	68 40 98 13 f0       	push   $0xf0139840
f0123e40:	68 ed 08 00 00       	push   $0x8ed
f0123e45:	68 5a 97 13 f0       	push   $0xf013975a
f0123e4a:	e8 61 c3 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123e4f:	e8 30 08 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0123e54:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0123e57:	74 17                	je     f0123e70 <test_kheap_virt_addr+0x16e>
f0123e59:	83 ec 04             	sub    $0x4,%esp
f0123e5c:	68 74 97 13 f0       	push   $0xf0139774
f0123e61:	68 ee 08 00 00       	push   $0x8ee
f0123e66:	68 5a 97 13 f0       	push   $0xf013975a
f0123e6b:	e8 40 c3 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123e70:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0123e73:	e8 4e 8b fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0123e78:	29 c3                	sub    %eax,%ebx
f0123e7a:	89 d8                	mov    %ebx,%eax
f0123e7c:	3d 00 02 00 00       	cmp    $0x200,%eax
f0123e81:	74 17                	je     f0123e9a <test_kheap_virt_addr+0x198>
f0123e83:	83 ec 04             	sub    $0x4,%esp
f0123e86:	68 dc 97 13 f0       	push   $0xf01397dc
f0123e8b:	68 ef 08 00 00       	push   $0x8ef
f0123e90:	68 5a 97 13 f0       	push   $0xf013975a
f0123e95:	e8 16 c3 fd ff       	call   f01001b0 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0123e9a:	e8 27 8b fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0123e9f:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123ea2:	e8 dd 07 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0123ea7:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0123eaa:	83 ec 0c             	sub    $0xc,%esp
f0123ead:	68 00 fc 1f 00       	push   $0x1ffc00
f0123eb2:	e8 a8 40 fe ff       	call   f0107f5f <kmalloc>
f0123eb7:	83 c4 10             	add    $0x10,%esp
f0123eba:	89 85 c4 fd ff ff    	mov    %eax,-0x23c(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123ec0:	8b 85 c4 fd ff ff    	mov    -0x23c(%ebp),%eax
f0123ec6:	89 c1                	mov    %eax,%ecx
f0123ec8:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f0123ecf:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0123ed4:	0f b6 d0             	movzbl %al,%edx
f0123ed7:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0123eda:	01 d0                	add    %edx,%eax
f0123edc:	48                   	dec    %eax
f0123edd:	89 45 a0             	mov    %eax,-0x60(%ebp)
f0123ee0:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0123ee3:	ba 00 00 00 00       	mov    $0x0,%edx
f0123ee8:	f7 75 a4             	divl   -0x5c(%ebp)
f0123eeb:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0123eee:	29 d0                	sub    %edx,%eax
f0123ef0:	89 c3                	mov    %eax,%ebx
f0123ef2:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f0123ef9:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0123efe:	0f b6 c0             	movzbl %al,%eax
f0123f01:	c1 e0 04             	shl    $0x4,%eax
f0123f04:	89 c2                	mov    %eax,%edx
f0123f06:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0123f09:	01 d0                	add    %edx,%eax
f0123f0b:	48                   	dec    %eax
f0123f0c:	89 45 98             	mov    %eax,-0x68(%ebp)
f0123f0f:	8b 45 98             	mov    -0x68(%ebp),%eax
f0123f12:	ba 00 00 00 00       	mov    $0x0,%edx
f0123f17:	f7 75 9c             	divl   -0x64(%ebp)
f0123f1a:	8b 45 98             	mov    -0x68(%ebp),%eax
f0123f1d:	29 d0                	sub    %edx,%eax
f0123f1f:	01 d8                	add    %ebx,%eax
f0123f21:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0123f26:	39 c1                	cmp    %eax,%ecx
f0123f28:	74 17                	je     f0123f41 <test_kheap_virt_addr+0x23f>
f0123f2a:	83 ec 04             	sub    $0x4,%esp
f0123f2d:	68 40 98 13 f0       	push   $0xf0139840
f0123f32:	68 f5 08 00 00       	push   $0x8f5
f0123f37:	68 5a 97 13 f0       	push   $0xf013975a
f0123f3c:	e8 6f c2 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123f41:	e8 3e 07 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0123f46:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0123f49:	74 17                	je     f0123f62 <test_kheap_virt_addr+0x260>
f0123f4b:	83 ec 04             	sub    $0x4,%esp
f0123f4e:	68 74 97 13 f0       	push   $0xf0139774
f0123f53:	68 f6 08 00 00       	push   $0x8f6
f0123f58:	68 5a 97 13 f0       	push   $0xf013975a
f0123f5d:	e8 4e c2 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123f62:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0123f65:	e8 5c 8a fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0123f6a:	29 c3                	sub    %eax,%ebx
f0123f6c:	89 d8                	mov    %ebx,%eax
f0123f6e:	3d 00 02 00 00       	cmp    $0x200,%eax
f0123f73:	74 17                	je     f0123f8c <test_kheap_virt_addr+0x28a>
f0123f75:	83 ec 04             	sub    $0x4,%esp
f0123f78:	68 dc 97 13 f0       	push   $0xf01397dc
f0123f7d:	68 f7 08 00 00       	push   $0x8f7
f0123f82:	68 5a 97 13 f0       	push   $0xf013975a
f0123f87:	e8 24 c2 fd ff       	call   f01001b0 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0123f8c:	e8 35 8a fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0123f91:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123f94:	e8 eb 06 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0123f99:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0123f9c:	83 ec 0c             	sub    $0xc,%esp
f0123f9f:	68 00 08 00 00       	push   $0x800
f0123fa4:	e8 b6 3f fe ff       	call   f0107f5f <kmalloc>
f0123fa9:	83 c4 10             	add    $0x10,%esp
f0123fac:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123fb2:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f0123fb8:	89 c1                	mov    %eax,%ecx
f0123fba:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f0123fc1:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0123fc6:	0f b6 d0             	movzbl %al,%edx
f0123fc9:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0123fcc:	01 d0                	add    %edx,%eax
f0123fce:	48                   	dec    %eax
f0123fcf:	89 45 90             	mov    %eax,-0x70(%ebp)
f0123fd2:	8b 45 90             	mov    -0x70(%ebp),%eax
f0123fd5:	ba 00 00 00 00       	mov    $0x0,%edx
f0123fda:	f7 75 94             	divl   -0x6c(%ebp)
f0123fdd:	8b 45 90             	mov    -0x70(%ebp),%eax
f0123fe0:	29 d0                	sub    %edx,%eax
f0123fe2:	89 c3                	mov    %eax,%ebx
f0123fe4:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f0123feb:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0123ff0:	0f b6 c0             	movzbl %al,%eax
f0123ff3:	c1 e0 04             	shl    $0x4,%eax
f0123ff6:	89 c2                	mov    %eax,%edx
f0123ff8:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0123ffb:	01 d0                	add    %edx,%eax
f0123ffd:	48                   	dec    %eax
f0123ffe:	89 45 88             	mov    %eax,-0x78(%ebp)
f0124001:	8b 45 88             	mov    -0x78(%ebp),%eax
f0124004:	ba 00 00 00 00       	mov    $0x0,%edx
f0124009:	f7 75 8c             	divl   -0x74(%ebp)
f012400c:	8b 45 88             	mov    -0x78(%ebp),%eax
f012400f:	29 d0                	sub    %edx,%eax
f0124011:	01 d8                	add    %ebx,%eax
f0124013:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0124018:	39 c1                	cmp    %eax,%ecx
f012401a:	74 17                	je     f0124033 <test_kheap_virt_addr+0x331>
f012401c:	83 ec 04             	sub    $0x4,%esp
f012401f:	68 40 98 13 f0       	push   $0xf0139840
f0124024:	68 fd 08 00 00       	push   $0x8fd
f0124029:	68 5a 97 13 f0       	push   $0xf013975a
f012402e:	e8 7d c1 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124033:	e8 4c 06 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0124038:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f012403b:	74 17                	je     f0124054 <test_kheap_virt_addr+0x352>
f012403d:	83 ec 04             	sub    $0x4,%esp
f0124040:	68 74 97 13 f0       	push   $0xf0139774
f0124045:	68 fe 08 00 00       	push   $0x8fe
f012404a:	68 5a 97 13 f0       	push   $0xf013975a
f012404f:	e8 5c c1 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124054:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0124057:	e8 6a 89 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012405c:	29 c3                	sub    %eax,%ebx
f012405e:	89 d8                	mov    %ebx,%eax
f0124060:	83 f8 01             	cmp    $0x1,%eax
f0124063:	74 17                	je     f012407c <test_kheap_virt_addr+0x37a>
f0124065:	83 ec 04             	sub    $0x4,%esp
f0124068:	68 dc 97 13 f0       	push   $0xf01397dc
f012406d:	68 ff 08 00 00       	push   $0x8ff
f0124072:	68 5a 97 13 f0       	push   $0xf013975a
f0124077:	e8 34 c1 fd ff       	call   f01001b0 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f012407c:	e8 45 89 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0124081:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124084:	e8 fb 05 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0124089:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f012408c:	83 ec 0c             	sub    $0xc,%esp
f012408f:	68 00 08 00 00       	push   $0x800
f0124094:	e8 c6 3e fe ff       	call   f0107f5f <kmalloc>
f0124099:	83 c4 10             	add    $0x10,%esp
f012409c:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01240a2:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f01240a8:	89 c1                	mov    %eax,%ecx
f01240aa:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f01240b1:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01240b6:	0f b6 d0             	movzbl %al,%edx
f01240b9:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01240bc:	01 d0                	add    %edx,%eax
f01240be:	48                   	dec    %eax
f01240bf:	89 45 80             	mov    %eax,-0x80(%ebp)
f01240c2:	8b 45 80             	mov    -0x80(%ebp),%eax
f01240c5:	ba 00 00 00 00       	mov    $0x0,%edx
f01240ca:	f7 75 84             	divl   -0x7c(%ebp)
f01240cd:	8b 45 80             	mov    -0x80(%ebp),%eax
f01240d0:	29 d0                	sub    %edx,%eax
f01240d2:	89 c3                	mov    %eax,%ebx
f01240d4:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f01240db:	10 00 00 
f01240de:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01240e3:	0f b6 c0             	movzbl %al,%eax
f01240e6:	c1 e0 04             	shl    $0x4,%eax
f01240e9:	89 c2                	mov    %eax,%edx
f01240eb:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01240f1:	01 d0                	add    %edx,%eax
f01240f3:	48                   	dec    %eax
f01240f4:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f01240fa:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0124100:	ba 00 00 00 00       	mov    $0x0,%edx
f0124105:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f012410b:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0124111:	29 d0                	sub    %edx,%eax
f0124113:	01 d8                	add    %ebx,%eax
f0124115:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f012411a:	39 c1                	cmp    %eax,%ecx
f012411c:	74 17                	je     f0124135 <test_kheap_virt_addr+0x433>
f012411e:	83 ec 04             	sub    $0x4,%esp
f0124121:	68 40 98 13 f0       	push   $0xf0139840
f0124126:	68 05 09 00 00       	push   $0x905
f012412b:	68 5a 97 13 f0       	push   $0xf013975a
f0124130:	e8 7b c0 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124135:	e8 4a 05 fe ff       	call   f0104684 <pf_calculate_free_frames>
f012413a:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f012413d:	74 17                	je     f0124156 <test_kheap_virt_addr+0x454>
f012413f:	83 ec 04             	sub    $0x4,%esp
f0124142:	68 74 97 13 f0       	push   $0xf0139774
f0124147:	68 06 09 00 00       	push   $0x906
f012414c:	68 5a 97 13 f0       	push   $0xf013975a
f0124151:	e8 5a c0 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124156:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0124159:	e8 68 88 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012415e:	29 c3                	sub    %eax,%ebx
f0124160:	89 d8                	mov    %ebx,%eax
f0124162:	83 f8 01             	cmp    $0x1,%eax
f0124165:	74 17                	je     f012417e <test_kheap_virt_addr+0x47c>
f0124167:	83 ec 04             	sub    $0x4,%esp
f012416a:	68 dc 97 13 f0       	push   $0xf01397dc
f012416f:	68 07 09 00 00       	push   $0x907
f0124174:	68 5a 97 13 f0       	push   $0xf013975a
f0124179:	e8 32 c0 fd ff       	call   f01001b0 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f012417e:	e8 43 88 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0124183:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124186:	e8 f9 04 fe ff       	call   f0104684 <pf_calculate_free_frames>
f012418b:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f012418e:	83 ec 0c             	sub    $0xc,%esp
f0124191:	68 00 1c 00 00       	push   $0x1c00
f0124196:	e8 c4 3d fe ff       	call   f0107f5f <kmalloc>
f012419b:	83 c4 10             	add    $0x10,%esp
f012419e:	89 85 d0 fd ff ff    	mov    %eax,-0x230(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01241a4:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f01241aa:	89 c1                	mov    %eax,%ecx
f01241ac:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f01241b3:	10 00 00 
f01241b6:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01241bb:	0f b6 d0             	movzbl %al,%edx
f01241be:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01241c4:	01 d0                	add    %edx,%eax
f01241c6:	48                   	dec    %eax
f01241c7:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f01241cd:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01241d3:	ba 00 00 00 00       	mov    $0x0,%edx
f01241d8:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f01241de:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01241e4:	29 d0                	sub    %edx,%eax
f01241e6:	89 c3                	mov    %eax,%ebx
f01241e8:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f01241ef:	10 00 00 
f01241f2:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01241f7:	0f b6 c0             	movzbl %al,%eax
f01241fa:	c1 e0 04             	shl    $0x4,%eax
f01241fd:	89 c2                	mov    %eax,%edx
f01241ff:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0124205:	01 d0                	add    %edx,%eax
f0124207:	48                   	dec    %eax
f0124208:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f012420e:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0124214:	ba 00 00 00 00       	mov    $0x0,%edx
f0124219:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f012421f:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0124225:	29 d0                	sub    %edx,%eax
f0124227:	01 d8                	add    %ebx,%eax
f0124229:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f012422e:	39 c1                	cmp    %eax,%ecx
f0124230:	74 17                	je     f0124249 <test_kheap_virt_addr+0x547>
f0124232:	83 ec 04             	sub    $0x4,%esp
f0124235:	68 40 98 13 f0       	push   $0xf0139840
f012423a:	68 0d 09 00 00       	push   $0x90d
f012423f:	68 5a 97 13 f0       	push   $0xf013975a
f0124244:	e8 67 bf fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124249:	e8 36 04 fe ff       	call   f0104684 <pf_calculate_free_frames>
f012424e:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0124251:	74 17                	je     f012426a <test_kheap_virt_addr+0x568>
f0124253:	83 ec 04             	sub    $0x4,%esp
f0124256:	68 74 97 13 f0       	push   $0xf0139774
f012425b:	68 0e 09 00 00       	push   $0x90e
f0124260:	68 5a 97 13 f0       	push   $0xf013975a
f0124265:	e8 46 bf fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f012426a:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f012426d:	e8 54 87 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0124272:	29 c3                	sub    %eax,%ebx
f0124274:	89 d8                	mov    %ebx,%eax
f0124276:	83 f8 02             	cmp    $0x2,%eax
f0124279:	74 17                	je     f0124292 <test_kheap_virt_addr+0x590>
f012427b:	83 ec 04             	sub    $0x4,%esp
f012427e:	68 dc 97 13 f0       	push   $0xf01397dc
f0124283:	68 0f 09 00 00       	push   $0x90f
f0124288:	68 5a 97 13 f0       	push   $0xf013975a
f012428d:	e8 1e bf fd ff       	call   f01001b0 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0124292:	e8 2f 87 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0124297:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012429a:	e8 e5 03 fe ff       	call   f0104684 <pf_calculate_free_frames>
f012429f:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f01242a2:	83 ec 0c             	sub    $0xc,%esp
f01242a5:	68 00 fc 2f 00       	push   $0x2ffc00
f01242aa:	e8 b0 3c fe ff       	call   f0107f5f <kmalloc>
f01242af:	83 c4 10             	add    $0x10,%esp
f01242b2:	89 85 d4 fd ff ff    	mov    %eax,-0x22c(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01242b8:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f01242be:	89 c1                	mov    %eax,%ecx
f01242c0:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f01242c7:	10 00 00 
f01242ca:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01242cf:	0f b6 d0             	movzbl %al,%edx
f01242d2:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01242d8:	01 d0                	add    %edx,%eax
f01242da:	48                   	dec    %eax
f01242db:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f01242e1:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01242e7:	ba 00 00 00 00       	mov    $0x0,%edx
f01242ec:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f01242f2:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01242f8:	29 d0                	sub    %edx,%eax
f01242fa:	89 c3                	mov    %eax,%ebx
f01242fc:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f0124303:	10 00 00 
f0124306:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012430b:	0f b6 c0             	movzbl %al,%eax
f012430e:	c1 e0 04             	shl    $0x4,%eax
f0124311:	89 c2                	mov    %eax,%edx
f0124313:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0124319:	01 d0                	add    %edx,%eax
f012431b:	48                   	dec    %eax
f012431c:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f0124322:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0124328:	ba 00 00 00 00       	mov    $0x0,%edx
f012432d:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f0124333:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0124339:	29 d0                	sub    %edx,%eax
f012433b:	01 d8                	add    %ebx,%eax
f012433d:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0124342:	39 c1                	cmp    %eax,%ecx
f0124344:	74 17                	je     f012435d <test_kheap_virt_addr+0x65b>
f0124346:	83 ec 04             	sub    $0x4,%esp
f0124349:	68 40 98 13 f0       	push   $0xf0139840
f012434e:	68 15 09 00 00       	push   $0x915
f0124353:	68 5a 97 13 f0       	push   $0xf013975a
f0124358:	e8 53 be fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012435d:	e8 22 03 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0124362:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0124365:	74 17                	je     f012437e <test_kheap_virt_addr+0x67c>
f0124367:	83 ec 04             	sub    $0x4,%esp
f012436a:	68 74 97 13 f0       	push   $0xf0139774
f012436f:	68 16 09 00 00       	push   $0x916
f0124374:	68 5a 97 13 f0       	push   $0xf013975a
f0124379:	e8 32 be fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f012437e:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0124381:	e8 40 86 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0124386:	29 c3                	sub    %eax,%ebx
f0124388:	89 d8                	mov    %ebx,%eax
f012438a:	3d 00 03 00 00       	cmp    $0x300,%eax
f012438f:	74 17                	je     f01243a8 <test_kheap_virt_addr+0x6a6>
f0124391:	83 ec 04             	sub    $0x4,%esp
f0124394:	68 dc 97 13 f0       	push   $0xf01397dc
f0124399:	68 17 09 00 00       	push   $0x917
f012439e:	68 5a 97 13 f0       	push   $0xf013975a
f01243a3:	e8 08 be fd ff       	call   f01001b0 <_panic>

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f01243a8:	e8 19 86 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01243ad:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01243b0:	e8 cf 02 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01243b5:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f01243b8:	83 ec 0c             	sub    $0xc,%esp
f01243bb:	68 00 fc 5f 00       	push   $0x5ffc00
f01243c0:	e8 9a 3b fe ff       	call   f0107f5f <kmalloc>
f01243c5:	83 c4 10             	add    $0x10,%esp
f01243c8:	89 85 d8 fd ff ff    	mov    %eax,-0x228(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01243ce:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f01243d4:	89 c1                	mov    %eax,%ecx
f01243d6:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f01243dd:	10 00 00 
f01243e0:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01243e5:	0f b6 d0             	movzbl %al,%edx
f01243e8:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01243ee:	01 d0                	add    %edx,%eax
f01243f0:	48                   	dec    %eax
f01243f1:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f01243f7:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f01243fd:	ba 00 00 00 00       	mov    $0x0,%edx
f0124402:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f0124408:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012440e:	29 d0                	sub    %edx,%eax
f0124410:	89 c3                	mov    %eax,%ebx
f0124412:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f0124419:	10 00 00 
f012441c:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0124421:	0f b6 c0             	movzbl %al,%eax
f0124424:	c1 e0 04             	shl    $0x4,%eax
f0124427:	89 c2                	mov    %eax,%edx
f0124429:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012442f:	01 d0                	add    %edx,%eax
f0124431:	48                   	dec    %eax
f0124432:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f0124438:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012443e:	ba 00 00 00 00       	mov    $0x0,%edx
f0124443:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f0124449:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012444f:	29 d0                	sub    %edx,%eax
f0124451:	01 d8                	add    %ebx,%eax
f0124453:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0124458:	39 c1                	cmp    %eax,%ecx
f012445a:	74 17                	je     f0124473 <test_kheap_virt_addr+0x771>
f012445c:	83 ec 04             	sub    $0x4,%esp
f012445f:	68 40 98 13 f0       	push   $0xf0139840
f0124464:	68 1d 09 00 00       	push   $0x91d
f0124469:	68 5a 97 13 f0       	push   $0xf013975a
f012446e:	e8 3d bd fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124473:	e8 0c 02 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0124478:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f012447b:	74 17                	je     f0124494 <test_kheap_virt_addr+0x792>
f012447d:	83 ec 04             	sub    $0x4,%esp
f0124480:	68 74 97 13 f0       	push   $0xf0139774
f0124485:	68 1e 09 00 00       	push   $0x91e
f012448a:	68 5a 97 13 f0       	push   $0xf013975a
f012448f:	e8 1c bd fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124494:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0124497:	e8 2a 85 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012449c:	29 c3                	sub    %eax,%ebx
f012449e:	89 d8                	mov    %ebx,%eax
f01244a0:	3d 00 06 00 00       	cmp    $0x600,%eax
f01244a5:	74 17                	je     f01244be <test_kheap_virt_addr+0x7bc>
f01244a7:	83 ec 04             	sub    $0x4,%esp
f01244aa:	68 dc 97 13 f0       	push   $0xf01397dc
f01244af:	68 1f 09 00 00       	push   $0x91f
f01244b4:	68 5a 97 13 f0       	push   $0xf013975a
f01244b9:	e8 f2 bc fd ff       	call   f01001b0 <_panic>

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f01244be:	e8 03 85 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01244c3:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01244c6:	e8 b9 01 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01244cb:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f01244ce:	83 ec 0c             	sub    $0xc,%esp
f01244d1:	68 00 38 00 00       	push   $0x3800
f01244d6:	e8 84 3a fe ff       	call   f0107f5f <kmalloc>
f01244db:	83 c4 10             	add    $0x10,%esp
f01244de:	89 85 dc fd ff ff    	mov    %eax,-0x224(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01244e4:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f01244ea:	89 c1                	mov    %eax,%ecx
f01244ec:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f01244f3:	10 00 00 
f01244f6:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01244fb:	0f b6 d0             	movzbl %al,%edx
f01244fe:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0124504:	01 d0                	add    %edx,%eax
f0124506:	48                   	dec    %eax
f0124507:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f012450d:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0124513:	ba 00 00 00 00       	mov    $0x0,%edx
f0124518:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f012451e:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0124524:	29 d0                	sub    %edx,%eax
f0124526:	89 c3                	mov    %eax,%ebx
f0124528:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f012452f:	10 00 00 
f0124532:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0124537:	0f b6 c0             	movzbl %al,%eax
f012453a:	c1 e0 04             	shl    $0x4,%eax
f012453d:	89 c2                	mov    %eax,%edx
f012453f:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0124545:	01 d0                	add    %edx,%eax
f0124547:	48                   	dec    %eax
f0124548:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f012454e:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0124554:	ba 00 00 00 00       	mov    $0x0,%edx
f0124559:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f012455f:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0124565:	29 d0                	sub    %edx,%eax
f0124567:	01 d8                	add    %ebx,%eax
f0124569:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f012456e:	39 c1                	cmp    %eax,%ecx
f0124570:	74 17                	je     f0124589 <test_kheap_virt_addr+0x887>
f0124572:	83 ec 04             	sub    $0x4,%esp
f0124575:	68 40 98 13 f0       	push   $0xf0139840
f012457a:	68 25 09 00 00       	push   $0x925
f012457f:	68 5a 97 13 f0       	push   $0xf013975a
f0124584:	e8 27 bc fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124589:	e8 f6 00 fe ff       	call   f0104684 <pf_calculate_free_frames>
f012458e:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0124591:	74 17                	je     f01245aa <test_kheap_virt_addr+0x8a8>
f0124593:	83 ec 04             	sub    $0x4,%esp
f0124596:	68 74 97 13 f0       	push   $0xf0139774
f012459b:	68 26 09 00 00       	push   $0x926
f01245a0:	68 5a 97 13 f0       	push   $0xf013975a
f01245a5:	e8 06 bc fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f01245aa:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f01245ad:	e8 14 84 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01245b2:	29 c3                	sub    %eax,%ebx
f01245b4:	89 d8                	mov    %ebx,%eax
f01245b6:	83 f8 04             	cmp    $0x4,%eax
f01245b9:	74 17                	je     f01245d2 <test_kheap_virt_addr+0x8d0>
f01245bb:	83 ec 04             	sub    $0x4,%esp
f01245be:	68 dc 97 13 f0       	push   $0xf01397dc
f01245c3:	68 27 09 00 00       	push   $0x927
f01245c8:	68 5a 97 13 f0       	push   $0xf013975a
f01245cd:	e8 de bb fd ff       	call   f01001b0 <_panic>
	}

	uint32 allPAs[(13*Mega + 32*kilo+ (INITIAL_KHEAP_ALLOCATIONS-DYNAMIC_ALLOCATOR_DS))/PAGE_SIZE] ;
f01245d2:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f01245d9:	10 00 00 
f01245dc:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01245e1:	0f b6 d0             	movzbl %al,%edx
f01245e4:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01245ea:	01 d0                	add    %edx,%eax
f01245ec:	48                   	dec    %eax
f01245ed:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f01245f3:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01245f9:	ba 00 00 00 00       	mov    $0x0,%edx
f01245fe:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f0124604:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012460a:	29 d0                	sub    %edx,%eax
f012460c:	89 c1                	mov    %eax,%ecx
f012460e:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f0124615:	10 00 00 
f0124618:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012461d:	0f b6 c0             	movzbl %al,%eax
f0124620:	c1 e0 04             	shl    $0x4,%eax
f0124623:	89 c2                	mov    %eax,%edx
f0124625:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012462b:	01 d0                	add    %edx,%eax
f012462d:	48                   	dec    %eax
f012462e:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f0124634:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012463a:	ba 00 00 00 00       	mov    $0x0,%edx
f012463f:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f0124645:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012464b:	29 d0                	sub    %edx,%eax
f012464d:	01 c8                	add    %ecx,%eax
f012464f:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f0124654:	c1 e8 0c             	shr    $0xc,%eax
f0124657:	89 c2                	mov    %eax,%edx
f0124659:	4a                   	dec    %edx
f012465a:	89 95 24 ff ff ff    	mov    %edx,-0xdc(%ebp)
f0124660:	c1 e0 02             	shl    $0x2,%eax
f0124663:	8d 50 03             	lea    0x3(%eax),%edx
f0124666:	b8 10 00 00 00       	mov    $0x10,%eax
f012466b:	48                   	dec    %eax
f012466c:	01 d0                	add    %edx,%eax
f012466e:	bf 10 00 00 00       	mov    $0x10,%edi
f0124673:	ba 00 00 00 00       	mov    $0x0,%edx
f0124678:	f7 f7                	div    %edi
f012467a:	6b c0 10             	imul   $0x10,%eax,%eax
f012467d:	29 c4                	sub    %eax,%esp
f012467f:	89 e0                	mov    %esp,%eax
f0124681:	83 c0 03             	add    $0x3,%eax
f0124684:	c1 e8 02             	shr    $0x2,%eax
f0124687:	c1 e0 02             	shl    $0x2,%eax
f012468a:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
	int numOfFrames = (13*Mega + 32*kilo+(INITIAL_KHEAP_ALLOCATIONS-DYNAMIC_ALLOCATOR_DS))/PAGE_SIZE ;
f0124690:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f0124697:	10 00 00 
f012469a:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012469f:	0f b6 d0             	movzbl %al,%edx
f01246a2:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f01246a8:	01 d0                	add    %edx,%eax
f01246aa:	48                   	dec    %eax
f01246ab:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f01246b1:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f01246b7:	ba 00 00 00 00       	mov    $0x0,%edx
f01246bc:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f01246c2:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f01246c8:	29 d0                	sub    %edx,%eax
f01246ca:	89 c1                	mov    %eax,%ecx
f01246cc:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f01246d3:	10 00 00 
f01246d6:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01246db:	0f b6 c0             	movzbl %al,%eax
f01246de:	c1 e0 04             	shl    $0x4,%eax
f01246e1:	89 c2                	mov    %eax,%edx
f01246e3:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f01246e9:	01 d0                	add    %edx,%eax
f01246eb:	48                   	dec    %eax
f01246ec:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f01246f2:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01246f8:	ba 00 00 00 00       	mov    $0x0,%edx
f01246fd:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f0124703:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0124709:	29 d0                	sub    %edx,%eax
f012470b:	01 c8                	add    %ecx,%eax
f012470d:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f0124712:	c1 e8 0c             	shr    $0xc,%eax
f0124715:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)

	//test kheap_virtual_address after kmalloc only [40%]
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f012471b:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f0124722:	10 00 00 
f0124725:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012472a:	0f b6 d0             	movzbl %al,%edx
f012472d:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0124733:	01 d0                	add    %edx,%eax
f0124735:	48                   	dec    %eax
f0124736:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f012473c:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0124742:	ba 00 00 00 00       	mov    $0x0,%edx
f0124747:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f012474d:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0124753:	29 d0                	sub    %edx,%eax
f0124755:	89 c1                	mov    %eax,%ecx
f0124757:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f012475e:	10 00 00 
f0124761:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0124766:	0f b6 c0             	movzbl %al,%eax
f0124769:	c1 e0 04             	shl    $0x4,%eax
f012476c:	89 c2                	mov    %eax,%edx
f012476e:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0124774:	01 d0                	add    %edx,%eax
f0124776:	48                   	dec    %eax
f0124777:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f012477d:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0124783:	ba 00 00 00 00       	mov    $0x0,%edx
f0124788:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f012478e:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0124794:	29 d0                	sub    %edx,%eax
f0124796:	01 c8                	add    %ecx,%eax
f0124798:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f012479d:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
		int i = 0;
f01247a3:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f01247aa:	c7 45 e4 00 00 00 f6 	movl   $0xf6000000,-0x1c(%ebp)
f01247b1:	e9 21 01 00 00       	jmp    f01248d7 <test_kheap_virt_addr+0xbd5>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f01247b6:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f01247bb:	83 ec 04             	sub    $0x4,%esp
f01247be:	8d 95 bc fd ff ff    	lea    -0x244(%ebp),%edx
f01247c4:	52                   	push   %edx
f01247c5:	ff 75 e4             	pushl  -0x1c(%ebp)
f01247c8:	50                   	push   %eax
f01247c9:	e8 19 2d fe ff       	call   f01074e7 <get_page_table>
f01247ce:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f01247d1:	8b 85 bc fd ff ff    	mov    -0x244(%ebp),%eax
f01247d7:	85 c0                	test   %eax,%eax
f01247d9:	75 17                	jne    f01247f2 <test_kheap_virt_addr+0xaf0>
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f01247db:	83 ec 04             	sub    $0x4,%esp
f01247de:	68 fc a0 13 f0       	push   $0xf013a0fc
f01247e3:	68 38 09 00 00       	push   $0x938
f01247e8:	68 5a 97 13 f0       	push   $0xf013975a
f01247ed:	e8 be b9 fd ff       	call   f01001b0 <_panic>

			for (j = PTX(va); i < numOfFrames && j < 1024; ++j, ++i)
f01247f2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01247f5:	c1 e8 0c             	shr    $0xc,%eax
f01247f8:	25 ff 03 00 00       	and    $0x3ff,%eax
f01247fd:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0124800:	e9 ba 00 00 00       	jmp    f01248bf <test_kheap_virt_addr+0xbbd>
			{
				allPAs[i] = (ptr_table[j] & 0xFFFFF000);
f0124805:	8b 85 bc fd ff ff    	mov    -0x244(%ebp),%eax
f012480b:	8b 55 dc             	mov    -0x24(%ebp),%edx
f012480e:	c1 e2 02             	shl    $0x2,%edx
f0124811:	01 d0                	add    %edx,%eax
f0124813:	8b 00                	mov    (%eax),%eax
f0124815:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f012481a:	89 c1                	mov    %eax,%ecx
f012481c:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0124822:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0124825:	89 0c 90             	mov    %ecx,(%eax,%edx,4)
				uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f0124828:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012482e:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0124831:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0124834:	83 ec 0c             	sub    $0xc,%esp
f0124837:	50                   	push   %eax
f0124838:	e8 56 37 fe ff       	call   f0107f93 <kheap_virtual_address>
f012483d:	83 c4 10             	add    $0x10,%esp
f0124840:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
				//cprintf("va to check = %x\n", va);
				if (retrievedVA != (va))
f0124846:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f012484c:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f012484f:	74 61                	je     f01248b2 <test_kheap_virt_addr+0xbb0>
				{
					cprintf("\nretrievedVA = %x, Actual VA = %x, table entry = %x, khep_pa = %x\n",retrievedVA, va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
f0124851:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0124857:	8b 55 e0             	mov    -0x20(%ebp),%edx
f012485a:	8b 04 90             	mov    (%eax,%edx,4),%eax
f012485d:	8b 95 bc fd ff ff    	mov    -0x244(%ebp),%edx
f0124863:	8b 4d dc             	mov    -0x24(%ebp),%ecx
f0124866:	c1 e1 02             	shl    $0x2,%ecx
f0124869:	01 ca                	add    %ecx,%edx
f012486b:	8b 12                	mov    (%edx),%edx
f012486d:	89 d1                	mov    %edx,%ecx
f012486f:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
f0124875:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0124878:	c1 e2 0c             	shl    $0xc,%edx
f012487b:	89 d3                	mov    %edx,%ebx
f012487d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0124880:	01 da                	add    %ebx,%edx
f0124882:	83 ec 0c             	sub    $0xc,%esp
f0124885:	50                   	push   %eax
f0124886:	51                   	push   %ecx
f0124887:	52                   	push   %edx
f0124888:	ff b5 f4 fe ff ff    	pushl  -0x10c(%ebp)
f012488e:	68 f0 a1 13 f0       	push   $0xf013a1f0
f0124893:	e8 99 c5 fd ff       	call   f0100e31 <cprintf>
f0124898:	83 c4 20             	add    $0x20,%esp
					panic("Wrong kheap_virtual_address");
f012489b:	83 ec 04             	sub    $0x4,%esp
f012489e:	68 33 a2 13 f0       	push   $0xf013a233
f01248a3:	68 42 09 00 00       	push   $0x942
f01248a8:	68 5a 97 13 f0       	push   $0xf013975a
f01248ad:	e8 fe b8 fd ff       	call   f01001b0 <_panic>
				}
				va+=PAGE_SIZE;
f01248b2:	81 45 e4 00 10 00 00 	addl   $0x1000,-0x1c(%ebp)
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
			if (ptr_table == NULL)
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");

			for (j = PTX(va); i < numOfFrames && j < 1024; ++j, ++i)
f01248b9:	ff 45 dc             	incl   -0x24(%ebp)
f01248bc:	ff 45 e0             	incl   -0x20(%ebp)
f01248bf:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01248c2:	3b 85 0c ff ff ff    	cmp    -0xf4(%ebp),%eax
f01248c8:	7d 0d                	jge    f01248d7 <test_kheap_virt_addr+0xbd5>
f01248ca:	81 7d dc ff 03 00 00 	cmpl   $0x3ff,-0x24(%ebp)
f01248d1:	0f 8e 2e ff ff ff    	jle    f0124805 <test_kheap_virt_addr+0xb03>
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		int i = 0;
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f01248d7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01248da:	3b 85 f8 fe ff ff    	cmp    -0x108(%ebp),%eax
f01248e0:	0f 82 d0 fe ff ff    	jb     f01247b6 <test_kheap_virt_addr+0xab4>
				}
				va+=PAGE_SIZE;
			}
		}
	}
	cprintf("\nkheap_virtual_address: current evaluation = 40%");
f01248e6:	83 ec 0c             	sub    $0xc,%esp
f01248e9:	68 50 a2 13 f0       	push   $0xf013a250
f01248ee:	e8 3e c5 fd ff       	call   f0100e31 <cprintf>
f01248f3:	83 c4 10             	add    $0x10,%esp

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f01248f6:	e8 cb 80 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01248fb:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0124901:	e8 7e fd fd ff       	call   f0104684 <pf_calculate_free_frames>
f0124906:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		kfree(ptr_allocations[0]);
f012490c:	8b 85 c0 fd ff ff    	mov    -0x240(%ebp),%eax
f0124912:	83 ec 0c             	sub    $0xc,%esp
f0124915:	50                   	push   %eax
f0124916:	e8 5e 36 fe ff       	call   f0107f79 <kfree>
f012491b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012491e:	e8 61 fd fd ff       	call   f0104684 <pf_calculate_free_frames>
f0124923:	3b 85 ec fe ff ff    	cmp    -0x114(%ebp),%eax
f0124929:	74 17                	je     f0124942 <test_kheap_virt_addr+0xc40>
f012492b:	83 ec 04             	sub    $0x4,%esp
f012492e:	68 74 97 13 f0       	push   $0xf0139774
f0124933:	68 50 09 00 00       	push   $0x950
f0124938:	68 5a 97 13 f0       	push   $0xf013975a
f012493d:	e8 6e b8 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0124942:	e8 7f 80 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0124947:	89 c2                	mov    %eax,%edx
f0124949:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012494f:	29 c2                	sub    %eax,%edx
f0124951:	89 d0                	mov    %edx,%eax
f0124953:	3d 00 02 00 00       	cmp    $0x200,%eax
f0124958:	74 17                	je     f0124971 <test_kheap_virt_addr+0xc6f>
f012495a:	83 ec 04             	sub    $0x4,%esp
f012495d:	68 e4 9e 13 f0       	push   $0xf0139ee4
f0124962:	68 51 09 00 00       	push   $0x951
f0124967:	68 5a 97 13 f0       	push   $0xf013975a
f012496c:	e8 3f b8 fd ff       	call   f01001b0 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0124971:	e8 50 80 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0124976:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012497c:	e8 03 fd fd ff       	call   f0104684 <pf_calculate_free_frames>
f0124981:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		kfree(ptr_allocations[1]);
f0124987:	8b 85 c4 fd ff ff    	mov    -0x23c(%ebp),%eax
f012498d:	83 ec 0c             	sub    $0xc,%esp
f0124990:	50                   	push   %eax
f0124991:	e8 e3 35 fe ff       	call   f0107f79 <kfree>
f0124996:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124999:	e8 e6 fc fd ff       	call   f0104684 <pf_calculate_free_frames>
f012499e:	3b 85 ec fe ff ff    	cmp    -0x114(%ebp),%eax
f01249a4:	74 17                	je     f01249bd <test_kheap_virt_addr+0xcbb>
f01249a6:	83 ec 04             	sub    $0x4,%esp
f01249a9:	68 74 97 13 f0       	push   $0xf0139774
f01249ae:	68 57 09 00 00       	push   $0x957
f01249b3:	68 5a 97 13 f0       	push   $0xf013975a
f01249b8:	e8 f3 b7 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f01249bd:	e8 04 80 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01249c2:	89 c2                	mov    %eax,%edx
f01249c4:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f01249ca:	29 c2                	sub    %eax,%edx
f01249cc:	89 d0                	mov    %edx,%eax
f01249ce:	3d 00 02 00 00       	cmp    $0x200,%eax
f01249d3:	74 17                	je     f01249ec <test_kheap_virt_addr+0xcea>
f01249d5:	83 ec 04             	sub    $0x4,%esp
f01249d8:	68 e4 9e 13 f0       	push   $0xf0139ee4
f01249dd:	68 58 09 00 00       	push   $0x958
f01249e2:	68 5a 97 13 f0       	push   $0xf013975a
f01249e7:	e8 c4 b7 fd ff       	call   f01001b0 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f01249ec:	e8 d5 7f fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01249f1:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01249f7:	e8 88 fc fd ff       	call   f0104684 <pf_calculate_free_frames>
f01249fc:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		kfree(ptr_allocations[6]);
f0124a02:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0124a08:	83 ec 0c             	sub    $0xc,%esp
f0124a0b:	50                   	push   %eax
f0124a0c:	e8 68 35 fe ff       	call   f0107f79 <kfree>
f0124a11:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124a14:	e8 6b fc fd ff       	call   f0104684 <pf_calculate_free_frames>
f0124a19:	3b 85 ec fe ff ff    	cmp    -0x114(%ebp),%eax
f0124a1f:	74 17                	je     f0124a38 <test_kheap_virt_addr+0xd36>
f0124a21:	83 ec 04             	sub    $0x4,%esp
f0124a24:	68 74 97 13 f0       	push   $0xf0139774
f0124a29:	68 5e 09 00 00       	push   $0x95e
f0124a2e:	68 5a 97 13 f0       	push   $0xf013975a
f0124a33:	e8 78 b7 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0124a38:	e8 89 7f fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0124a3d:	89 c2                	mov    %eax,%edx
f0124a3f:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0124a45:	29 c2                	sub    %eax,%edx
f0124a47:	89 d0                	mov    %edx,%eax
f0124a49:	3d 00 06 00 00       	cmp    $0x600,%eax
f0124a4e:	74 17                	je     f0124a67 <test_kheap_virt_addr+0xd65>
f0124a50:	83 ec 04             	sub    $0x4,%esp
f0124a53:	68 e4 9e 13 f0       	push   $0xf0139ee4
f0124a58:	68 5f 09 00 00       	push   $0x95f
f0124a5d:	68 5a 97 13 f0       	push   $0xf013975a
f0124a62:	e8 49 b7 fd ff       	call   f01001b0 <_panic>


	//test kheap_virtual_address after kmalloc and kfree [40%]
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f0124a67:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f0124a6e:	10 00 00 
f0124a71:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0124a76:	0f b6 d0             	movzbl %al,%edx
f0124a79:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0124a7f:	01 d0                	add    %edx,%eax
f0124a81:	48                   	dec    %eax
f0124a82:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f0124a88:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0124a8e:	ba 00 00 00 00       	mov    $0x0,%edx
f0124a93:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f0124a99:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0124a9f:	29 d0                	sub    %edx,%eax
f0124aa1:	89 c1                	mov    %eax,%ecx
f0124aa3:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f0124aaa:	10 00 00 
f0124aad:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0124ab2:	0f b6 c0             	movzbl %al,%eax
f0124ab5:	c1 e0 04             	shl    $0x4,%eax
f0124ab8:	89 c2                	mov    %eax,%edx
f0124aba:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0124ac0:	01 d0                	add    %edx,%eax
f0124ac2:	48                   	dec    %eax
f0124ac3:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f0124ac9:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0124acf:	ba 00 00 00 00       	mov    $0x0,%edx
f0124ad4:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f0124ada:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0124ae0:	29 d0                	sub    %edx,%eax
f0124ae2:	01 c8                	add    %ecx,%eax
f0124ae4:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0124ae9:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		int i = 0;
f0124aef:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
		int j;
		//frames of first 4 MB
		uint32 startIndex = (INITIAL_KHEAP_ALLOCATIONS - DYNAMIC_ALLOCATOR_DS) / PAGE_SIZE;
f0124af6:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f0124afd:	10 00 00 
f0124b00:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0124b05:	0f b6 d0             	movzbl %al,%edx
f0124b08:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0124b0e:	01 d0                	add    %edx,%eax
f0124b10:	48                   	dec    %eax
f0124b11:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f0124b17:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0124b1d:	ba 00 00 00 00       	mov    $0x0,%edx
f0124b22:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f0124b28:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0124b2e:	29 d0                	sub    %edx,%eax
f0124b30:	89 c1                	mov    %eax,%ecx
f0124b32:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f0124b39:	10 00 00 
f0124b3c:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0124b41:	0f b6 c0             	movzbl %al,%eax
f0124b44:	c1 e0 04             	shl    $0x4,%eax
f0124b47:	89 c2                	mov    %eax,%edx
f0124b49:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0124b4f:	01 d0                	add    %edx,%eax
f0124b51:	48                   	dec    %eax
f0124b52:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f0124b58:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0124b5e:	ba 00 00 00 00       	mov    $0x0,%edx
f0124b63:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f0124b69:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0124b6f:	29 d0                	sub    %edx,%eax
f0124b71:	01 c8                	add    %ecx,%eax
f0124b73:	05 00 40 00 00       	add    $0x4000,%eax
f0124b78:	c1 e8 0c             	shr    $0xc,%eax
f0124b7b:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
		for (i = startIndex ; i < startIndex + 4*Mega/PAGE_SIZE; ++i)
f0124b81:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0124b87:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0124b8a:	eb 41                	jmp    f0124bcd <test_kheap_virt_addr+0xecb>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f0124b8c:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0124b92:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0124b95:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0124b98:	83 ec 0c             	sub    $0xc,%esp
f0124b9b:	50                   	push   %eax
f0124b9c:	e8 f2 33 fe ff       	call   f0107f93 <kheap_virtual_address>
f0124ba1:	83 c4 10             	add    $0x10,%esp
f0124ba4:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
			if (retrievedVA != 0)
f0124baa:	83 bd c0 fe ff ff 00 	cmpl   $0x0,-0x140(%ebp)
f0124bb1:	74 17                	je     f0124bca <test_kheap_virt_addr+0xec8>
			{
				panic("Wrong kheap_virtual_address");
f0124bb3:	83 ec 04             	sub    $0x4,%esp
f0124bb6:	68 33 a2 13 f0       	push   $0xf013a233
f0124bbb:	68 70 09 00 00       	push   $0x970
f0124bc0:	68 5a 97 13 f0       	push   $0xf013975a
f0124bc5:	e8 e6 b5 fd ff       	call   f01001b0 <_panic>
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		int i = 0;
		int j;
		//frames of first 4 MB
		uint32 startIndex = (INITIAL_KHEAP_ALLOCATIONS - DYNAMIC_ALLOCATOR_DS) / PAGE_SIZE;
		for (i = startIndex ; i < startIndex + 4*Mega/PAGE_SIZE; ++i)
f0124bca:	ff 45 d8             	incl   -0x28(%ebp)
f0124bcd:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0124bd3:	8d 90 00 04 00 00    	lea    0x400(%eax),%edx
f0124bd9:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0124bdc:	39 c2                	cmp    %eax,%edx
f0124bde:	77 ac                	ja     f0124b8c <test_kheap_virt_addr+0xe8a>
				panic("Wrong kheap_virtual_address");
			}

		}
		//next frames until 6 MB
		for (i = startIndex + 4*Mega/PAGE_SIZE; i < startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; ++i)
f0124be0:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0124be6:	05 00 04 00 00       	add    $0x400,%eax
f0124beb:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0124bee:	eb 4b                	jmp    f0124c3b <test_kheap_virt_addr+0xf39>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f0124bf0:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0124bf6:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0124bf9:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0124bfc:	83 ec 0c             	sub    $0xc,%esp
f0124bff:	50                   	push   %eax
f0124c00:	e8 8e 33 fe ff       	call   f0107f93 <kheap_virtual_address>
f0124c05:	83 c4 10             	add    $0x10,%esp
f0124c08:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
			if (retrievedVA != KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS + i*PAGE_SIZE)
f0124c0e:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0124c11:	c1 e0 0c             	shl    $0xc,%eax
f0124c14:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0124c19:	3b 85 bc fe ff ff    	cmp    -0x144(%ebp),%eax
f0124c1f:	74 17                	je     f0124c38 <test_kheap_virt_addr+0xf36>
			{
				panic("Wrong kheap_virtual_address");
f0124c21:	83 ec 04             	sub    $0x4,%esp
f0124c24:	68 33 a2 13 f0       	push   $0xf013a233
f0124c29:	68 7a 09 00 00       	push   $0x97a
f0124c2e:	68 5a 97 13 f0       	push   $0xf013975a
f0124c33:	e8 78 b5 fd ff       	call   f01001b0 <_panic>
				panic("Wrong kheap_virtual_address");
			}

		}
		//next frames until 6 MB
		for (i = startIndex + 4*Mega/PAGE_SIZE; i < startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; ++i)
f0124c38:	ff 45 d8             	incl   -0x28(%ebp)
f0124c3b:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0124c41:	8d 90 04 07 00 00    	lea    0x704(%eax),%edx
f0124c47:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0124c4a:	39 c2                	cmp    %eax,%edx
f0124c4c:	77 a2                	ja     f0124bf0 <test_kheap_virt_addr+0xeee>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of 6 MB
		for (i = startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; ++i)
f0124c4e:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0124c54:	05 04 07 00 00       	add    $0x704,%eax
f0124c59:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0124c5c:	eb 41                	jmp    f0124c9f <test_kheap_virt_addr+0xf9d>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f0124c5e:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0124c64:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0124c67:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0124c6a:	83 ec 0c             	sub    $0xc,%esp
f0124c6d:	50                   	push   %eax
f0124c6e:	e8 20 33 fe ff       	call   f0107f93 <kheap_virtual_address>
f0124c73:	83 c4 10             	add    $0x10,%esp
f0124c76:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
			if (retrievedVA != 0)
f0124c7c:	83 bd b8 fe ff ff 00 	cmpl   $0x0,-0x148(%ebp)
f0124c83:	74 17                	je     f0124c9c <test_kheap_virt_addr+0xf9a>
			{
				panic("Wrong kheap_virtual_address");
f0124c85:	83 ec 04             	sub    $0x4,%esp
f0124c88:	68 33 a2 13 f0       	push   $0xf013a233
f0124c8d:	68 83 09 00 00       	push   $0x983
f0124c92:	68 5a 97 13 f0       	push   $0xf013975a
f0124c97:	e8 14 b5 fd ff       	call   f01001b0 <_panic>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of 6 MB
		for (i = startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; ++i)
f0124c9c:	ff 45 d8             	incl   -0x28(%ebp)
f0124c9f:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0124ca5:	8d 90 04 0d 00 00    	lea    0xd04(%eax),%edx
f0124cab:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0124cae:	39 c2                	cmp    %eax,%edx
f0124cb0:	77 ac                	ja     f0124c5e <test_kheap_virt_addr+0xf5c>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of last allocation (14 KB)
		for (i = startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 32*kilo)/PAGE_SIZE; ++i)
f0124cb2:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0124cb8:	05 04 0d 00 00       	add    $0xd04,%eax
f0124cbd:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0124cc0:	eb 4b                	jmp    f0124d0d <test_kheap_virt_addr+0x100b>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f0124cc2:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0124cc8:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0124ccb:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0124cce:	83 ec 0c             	sub    $0xc,%esp
f0124cd1:	50                   	push   %eax
f0124cd2:	e8 bc 32 fe ff       	call   f0107f93 <kheap_virtual_address>
f0124cd7:	83 c4 10             	add    $0x10,%esp
f0124cda:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
			if (retrievedVA != KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS + i*PAGE_SIZE)
f0124ce0:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0124ce3:	c1 e0 0c             	shl    $0xc,%eax
f0124ce6:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0124ceb:	3b 85 b4 fe ff ff    	cmp    -0x14c(%ebp),%eax
f0124cf1:	74 17                	je     f0124d0a <test_kheap_virt_addr+0x1008>
			{
				panic("Wrong kheap_virtual_address");
f0124cf3:	83 ec 04             	sub    $0x4,%esp
f0124cf6:	68 33 a2 13 f0       	push   $0xf013a233
f0124cfb:	68 8c 09 00 00       	push   $0x98c
f0124d00:	68 5a 97 13 f0       	push   $0xf013975a
f0124d05:	e8 a6 b4 fd ff       	call   f01001b0 <_panic>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of last allocation (14 KB)
		for (i = startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 32*kilo)/PAGE_SIZE; ++i)
f0124d0a:	ff 45 d8             	incl   -0x28(%ebp)
f0124d0d:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0124d13:	8d 90 08 0d 00 00    	lea    0xd08(%eax),%edx
f0124d19:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0124d1c:	39 c2                	cmp    %eax,%edx
f0124d1e:	77 a2                	ja     f0124cc2 <test_kheap_virt_addr+0xfc0>
				panic("Wrong kheap_virtual_address");
			}
		}
	}

	cprintf("\b\b\b80%");
f0124d20:	83 ec 0c             	sub    $0xc,%esp
f0124d23:	68 e5 98 13 f0       	push   $0xf01398e5
f0124d28:	e8 04 c1 fd ff       	call   f0100e31 <cprintf>
f0124d2d:	83 c4 10             	add    $0x10,%esp

	//test kheap_virtual_address on frames of KERNEL CODE [20%]
	{
		uint32 i;
		for (i = 1*Mega; i < (uint32)(end_of_kernel - KERNEL_BASE); i+=PAGE_SIZE)
f0124d30:	c7 45 d4 00 00 10 00 	movl   $0x100000,-0x2c(%ebp)
f0124d37:	eb 54                	jmp    f0124d8d <test_kheap_virt_addr+0x108b>
		{
			uint32 retrievedVA = kheap_virtual_address(i);
f0124d39:	83 ec 0c             	sub    $0xc,%esp
f0124d3c:	ff 75 d4             	pushl  -0x2c(%ebp)
f0124d3f:	e8 4f 32 fe ff       	call   f0107f93 <kheap_virtual_address>
f0124d44:	83 c4 10             	add    $0x10,%esp
f0124d47:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
			if (retrievedVA != 0)
f0124d4d:	83 bd b0 fe ff ff 00 	cmpl   $0x0,-0x150(%ebp)
f0124d54:	74 30                	je     f0124d86 <test_kheap_virt_addr+0x1084>
			{
				cprintf("\nPA = %x, retrievedVA = %x\n", i, retrievedVA);
f0124d56:	83 ec 04             	sub    $0x4,%esp
f0124d59:	ff b5 b0 fe ff ff    	pushl  -0x150(%ebp)
f0124d5f:	ff 75 d4             	pushl  -0x2c(%ebp)
f0124d62:	68 81 a2 13 f0       	push   $0xf013a281
f0124d67:	e8 c5 c0 fd ff       	call   f0100e31 <cprintf>
f0124d6c:	83 c4 10             	add    $0x10,%esp
				panic("Wrong kheap_virtual_address");
f0124d6f:	83 ec 04             	sub    $0x4,%esp
f0124d72:	68 33 a2 13 f0       	push   $0xf013a233
f0124d77:	68 9c 09 00 00       	push   $0x99c
f0124d7c:	68 5a 97 13 f0       	push   $0xf013975a
f0124d81:	e8 2a b4 fd ff       	call   f01001b0 <_panic>
	cprintf("\b\b\b80%");

	//test kheap_virtual_address on frames of KERNEL CODE [20%]
	{
		uint32 i;
		for (i = 1*Mega; i < (uint32)(end_of_kernel - KERNEL_BASE); i+=PAGE_SIZE)
f0124d86:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
f0124d8d:	b8 6c e5 2d 00       	mov    $0x2de56c,%eax
f0124d92:	39 45 d4             	cmp    %eax,-0x2c(%ebp)
f0124d95:	72 a2                	jb     f0124d39 <test_kheap_virt_addr+0x1037>
				panic("Wrong kheap_virtual_address");
			}
		}
	}

	cprintf("\b\b\b100%\n");
f0124d97:	83 ec 0c             	sub    $0xc,%esp
f0124d9a:	68 3e 99 13 f0       	push   $0xf013993e
f0124d9f:	e8 8d c0 fd ff       	call   f0100e31 <cprintf>
f0124da4:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test kheap_virtual_address completed successfully.\n");
f0124da7:	83 ec 0c             	sub    $0xc,%esp
f0124daa:	68 a0 a2 13 f0       	push   $0xf013a2a0
f0124daf:	e8 7d c0 fd ff       	call   f0100e31 <cprintf>
f0124db4:	83 c4 10             	add    $0x10,%esp

	return 1;
f0124db7:	b8 01 00 00 00       	mov    $0x1,%eax
f0124dbc:	89 f4                	mov    %esi,%esp

}
f0124dbe:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0124dc1:	5b                   	pop    %ebx
f0124dc2:	5e                   	pop    %esi
f0124dc3:	5f                   	pop    %edi
f0124dc4:	5d                   	pop    %ebp
f0124dc5:	c3                   	ret    

f0124dc6 <test_three_creation_functions>:

int initFreeFrames;
int initFreeDiskFrames ;
uint8 firstCall = 1 ;
int test_three_creation_functions()
{
f0124dc6:	55                   	push   %ebp
f0124dc7:	89 e5                	mov    %esp,%ebp
f0124dc9:	57                   	push   %edi
f0124dca:	56                   	push   %esi
f0124dcb:	53                   	push   %ebx
f0124dcc:	81 ec 9c 00 00 00    	sub    $0x9c,%esp
	if (firstCall)
f0124dd2:	a0 3d eb 18 f0       	mov    0xf018eb3d,%al
f0124dd7:	84 c0                	test   %al,%al
f0124dd9:	74 56                	je     f0124e31 <test_three_creation_functions+0x6b>
	{
		firstCall = 0;
f0124ddb:	c6 05 3d eb 18 f0 00 	movb   $0x0,0xf018eb3d
		initFreeFrames = sys_calculate_free_frames() ;
f0124de2:	e8 df 7b fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0124de7:	a3 68 e5 2d f0       	mov    %eax,0xf02de568
		initFreeDiskFrames = pf_calculate_free_frames() ;
f0124dec:	e8 93 f8 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0124df1:	a3 64 e5 2d f0       	mov    %eax,0xf02de564
		//Run simple user program
		{
			char command[100] = "run fos_add 4096";
f0124df6:	8d 85 5c ff ff ff    	lea    -0xa4(%ebp),%eax
f0124dfc:	bb fd a3 13 f0       	mov    $0xf013a3fd,%ebx
f0124e01:	ba 11 00 00 00       	mov    $0x11,%edx
f0124e06:	89 c7                	mov    %eax,%edi
f0124e08:	89 de                	mov    %ebx,%esi
f0124e0a:	89 d1                	mov    %edx,%ecx
f0124e0c:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0124e0e:	8d 95 6d ff ff ff    	lea    -0x93(%ebp),%edx
f0124e14:	b9 53 00 00 00       	mov    $0x53,%ecx
f0124e19:	b0 00                	mov    $0x0,%al
f0124e1b:	89 d7                	mov    %edx,%edi
f0124e1d:	f3 aa                	rep stos %al,%es:(%edi)
			execute_command(command) ;
f0124e1f:	83 ec 0c             	sub    $0xc,%esp
f0124e22:	8d 85 5c ff ff ff    	lea    -0xa4(%ebp),%eax
f0124e28:	50                   	push   %eax
f0124e29:	e8 95 cd fd ff       	call   f0101bc3 <execute_command>
f0124e2e:	83 c4 10             	add    $0x10,%esp
		}
	}
	//Ensure that the user directory, page WS and page tables are allocated in KERNEL HEAP
	{
		struct Env * e = NULL;
f0124e31:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		struct Env * ptr_env = NULL;
f0124e38:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0124e3f:	a1 c4 99 2b f0       	mov    0xf02b99c4,%eax
f0124e44:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0124e47:	eb 2b                	jmp    f0124e74 <test_three_creation_functions+0xae>
		{
			if (strcmp(ptr_env->prog_name, "fos_add") == 0)
f0124e49:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0124e4c:	83 c0 5c             	add    $0x5c,%eax
f0124e4f:	83 ec 08             	sub    $0x8,%esp
f0124e52:	68 e7 a2 13 f0       	push   $0xf013a2e7
f0124e57:	50                   	push   %eax
f0124e58:	e8 ec a0 00 00       	call   f012ef49 <strcmp>
f0124e5d:	83 c4 10             	add    $0x10,%esp
f0124e60:	85 c0                	test   %eax,%eax
f0124e62:	75 08                	jne    f0124e6c <test_three_creation_functions+0xa6>
			{
				e = ptr_env ;
f0124e64:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0124e67:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				break;
f0124e6a:	eb 2f                	jmp    f0124e9b <test_three_creation_functions+0xd5>
	}
	//Ensure that the user directory, page WS and page tables are allocated in KERNEL HEAP
	{
		struct Env * e = NULL;
		struct Env * ptr_env = NULL;
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0124e6c:	a1 cc 99 2b f0       	mov    0xf02b99cc,%eax
f0124e71:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0124e74:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0124e78:	74 08                	je     f0124e82 <test_three_creation_functions+0xbc>
f0124e7a:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0124e7d:	8b 40 44             	mov    0x44(%eax),%eax
f0124e80:	eb 05                	jmp    f0124e87 <test_three_creation_functions+0xc1>
f0124e82:	b8 00 00 00 00       	mov    $0x0,%eax
f0124e87:	a3 cc 99 2b f0       	mov    %eax,0xf02b99cc
f0124e8c:	a1 cc 99 2b f0       	mov    0xf02b99cc,%eax
f0124e91:	85 c0                	test   %eax,%eax
f0124e93:	75 b4                	jne    f0124e49 <test_three_creation_functions+0x83>
f0124e95:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0124e99:	75 ae                	jne    f0124e49 <test_three_creation_functions+0x83>
			{
				e = ptr_env ;
				break;
			}
		}
		if (e->pageFaultsCounter != 0)
f0124e9b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0124e9e:	8b 80 74 da 01 00    	mov    0x1da74(%eax),%eax
f0124ea4:	85 c0                	test   %eax,%eax
f0124ea6:	74 17                	je     f0124ebf <test_three_creation_functions+0xf9>
			panic("Page fault is occur while not expected to. Review the three creation functions");
f0124ea8:	83 ec 04             	sub    $0x4,%esp
f0124eab:	68 f0 a2 13 f0       	push   $0xf013a2f0
f0124eb0:	68 c6 09 00 00       	push   $0x9c6
f0124eb5:	68 5a 97 13 f0       	push   $0xf013975a
f0124eba:	e8 f1 b2 fd ff       	call   f01001b0 <_panic>

		int pagesInWS = env_page_ws_get_size(e);
f0124ebf:	83 ec 0c             	sub    $0xc,%esp
f0124ec2:	ff 75 e4             	pushl  -0x1c(%ebp)
f0124ec5:	e8 8b 33 fe ff       	call   f0108255 <env_page_ws_get_size>
f0124eca:	83 c4 10             	add    $0x10,%esp
f0124ecd:	89 45 dc             	mov    %eax,-0x24(%ebp)
		int curFreeFrames = sys_calculate_free_frames() ;
f0124ed0:	e8 f1 7a fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0124ed5:	89 45 d8             	mov    %eax,-0x28(%ebp)
		int curFreeDiskFrames = pf_calculate_free_frames() ;
f0124ed8:	e8 a7 f7 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0124edd:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		//cprintf("\ndiff in page file = %d, pages in WS = %d\n", initFreeDiskFrames - curFreeDiskFrames, pagesInWS);
		if ((initFreeDiskFrames - curFreeDiskFrames) != pagesInWS) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124ee0:	a1 64 e5 2d f0       	mov    0xf02de564,%eax
f0124ee5:	2b 45 d4             	sub    -0x2c(%ebp),%eax
f0124ee8:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f0124eeb:	74 17                	je     f0124f04 <test_three_creation_functions+0x13e>
f0124eed:	83 ec 04             	sub    $0x4,%esp
f0124ef0:	68 74 97 13 f0       	push   $0xf0139774
f0124ef5:	68 cc 09 00 00       	push   $0x9cc
f0124efa:	68 5a 97 13 f0       	push   $0xf013975a
f0124eff:	e8 ac b2 fd ff       	call   f01001b0 <_panic>
		//cprintf("\ndiff in mem frames = %d, pages in WS = %d\n", initFreeFrames - curFreeFrames, pagesInWS);
		if ((initFreeFrames - curFreeFrames) != 12/*WS*/ + 2*1/*DIR*/ + 2*3/*Tables*/ + 1 /*user WS table*/ + pagesInWS) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124f04:	a1 68 e5 2d f0       	mov    0xf02de568,%eax
f0124f09:	2b 45 d8             	sub    -0x28(%ebp),%eax
f0124f0c:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0124f0f:	83 c2 15             	add    $0x15,%edx
f0124f12:	39 d0                	cmp    %edx,%eax
f0124f14:	74 17                	je     f0124f2d <test_three_creation_functions+0x167>
f0124f16:	83 ec 04             	sub    $0x4,%esp
f0124f19:	68 dc 97 13 f0       	push   $0xf01397dc
f0124f1e:	68 ce 09 00 00       	push   $0x9ce
f0124f23:	68 5a 97 13 f0       	push   $0xf013975a
f0124f28:	e8 83 b2 fd ff       	call   f01001b0 <_panic>

		//allocate 4 KB
		char *ptr = kmalloc(4*kilo);
f0124f2d:	83 ec 0c             	sub    $0xc,%esp
f0124f30:	68 00 10 00 00       	push   $0x1000
f0124f35:	e8 25 30 fe ff       	call   f0107f5f <kmalloc>
f0124f3a:	83 c4 10             	add    $0x10,%esp
f0124f3d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		if ((uint32) ptr !=  (ACTUAL_START + (12+2*1+2*3+1)*PAGE_SIZE)) panic("Wrong start address for the allocated space... make sure you create the dir, table and page WS in KERNEL HEAP");
f0124f40:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0124f47:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0124f4c:	0f b6 d0             	movzbl %al,%edx
f0124f4f:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0124f52:	01 d0                	add    %edx,%eax
f0124f54:	48                   	dec    %eax
f0124f55:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0124f58:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0124f5b:	ba 00 00 00 00       	mov    $0x0,%edx
f0124f60:	f7 75 cc             	divl   -0x34(%ebp)
f0124f63:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0124f66:	29 d0                	sub    %edx,%eax
f0124f68:	89 c1                	mov    %eax,%ecx
f0124f6a:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f0124f71:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0124f76:	0f b6 c0             	movzbl %al,%eax
f0124f79:	c1 e0 04             	shl    $0x4,%eax
f0124f7c:	89 c2                	mov    %eax,%edx
f0124f7e:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0124f81:	01 d0                	add    %edx,%eax
f0124f83:	48                   	dec    %eax
f0124f84:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0124f87:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0124f8a:	ba 00 00 00 00       	mov    $0x0,%edx
f0124f8f:	f7 75 c4             	divl   -0x3c(%ebp)
f0124f92:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0124f95:	29 d0                	sub    %edx,%eax
f0124f97:	01 c8                	add    %ecx,%eax
f0124f99:	8d 90 00 90 01 f6    	lea    -0x9fe7000(%eax),%edx
f0124f9f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0124fa2:	39 c2                	cmp    %eax,%edx
f0124fa4:	74 17                	je     f0124fbd <test_three_creation_functions+0x1f7>
f0124fa6:	83 ec 04             	sub    $0x4,%esp
f0124fa9:	68 40 a3 13 f0       	push   $0xf013a340
f0124fae:	68 d2 09 00 00       	push   $0x9d2
f0124fb3:	68 5a 97 13 f0       	push   $0xf013975a
f0124fb8:	e8 f3 b1 fd ff       	call   f01001b0 <_panic>
	}

	cprintf("\nCongratulations!! test the 3 creation functions is completed successfully.\n");
f0124fbd:	83 ec 0c             	sub    $0xc,%esp
f0124fc0:	68 b0 a3 13 f0       	push   $0xf013a3b0
f0124fc5:	e8 67 be fd ff       	call   f0100e31 <cprintf>
f0124fca:	83 c4 10             	add    $0x10,%esp

	return 1;
f0124fcd:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0124fd2:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0124fd5:	5b                   	pop    %ebx
f0124fd6:	5e                   	pop    %esi
f0124fd7:	5f                   	pop    %edi
f0124fd8:	5d                   	pop    %ebp
f0124fd9:	c3                   	ret    

f0124fda <test_kfreeall>:


extern void kfreeall() ;

int test_kfreeall()
{
f0124fda:	55                   	push   %ebp
f0124fdb:	89 e5                	mov    %esp,%ebp
f0124fdd:	57                   	push   %edi
f0124fde:	53                   	push   %ebx
f0124fdf:	81 ec e0 01 00 00    	sub    $0x1e0,%esp
	char minByte = 1<<7;
f0124fe5:	c6 45 e7 80          	movb   $0x80,-0x19(%ebp)
	char maxByte = 0x7F;
f0124fe9:	c6 45 e6 7f          	movb   $0x7f,-0x1a(%ebp)
	short minShort = 1<<15 ;
f0124fed:	66 c7 45 e4 00 80    	movw   $0x8000,-0x1c(%ebp)
	short maxShort = 0x7FFF;
f0124ff3:	66 c7 45 e2 ff 7f    	movw   $0x7fff,-0x1e(%ebp)
	int minInt = 1<<31 ;
f0124ff9:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
	int maxInt = 0x7FFFFFFF;
f0125000:	c7 45 d8 ff ff ff 7f 	movl   $0x7fffffff,-0x28(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0125007:	e8 ba 79 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012500c:	89 45 d4             	mov    %eax,-0x2c(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f012500f:	8d 95 c0 fe ff ff    	lea    -0x140(%ebp),%edx
f0125015:	b9 14 00 00 00       	mov    $0x14,%ecx
f012501a:	b8 00 00 00 00       	mov    $0x0,%eax
f012501f:	89 d7                	mov    %edx,%edi
f0125021:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0125023:	8d 95 70 fe ff ff    	lea    -0x190(%ebp),%edx
f0125029:	b9 14 00 00 00       	mov    $0x14,%ecx
f012502e:	b8 00 00 00 00       	mov    $0x0,%eax
f0125033:	89 d7                	mov    %edx,%edi
f0125035:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f0125037:	8d 95 20 fe ff ff    	lea    -0x1e0(%ebp),%edx
f012503d:	b9 14 00 00 00       	mov    $0x14,%ecx
f0125042:	b8 00 00 00 00       	mov    $0x0,%eax
f0125047:	89 d7                	mov    %edx,%edi
f0125049:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f012504b:	e8 76 79 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0125050:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125053:	e8 2c f6 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0125058:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f012505b:	83 ec 0c             	sub    $0xc,%esp
f012505e:	68 00 fc 1f 00       	push   $0x1ffc00
f0125063:	e8 f7 2e fe ff       	call   f0107f5f <kmalloc>
f0125068:	83 c4 10             	add    $0x10,%esp
f012506b:	89 85 20 fe ff ff    	mov    %eax,-0x1e0(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125071:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f0125077:	89 c1                	mov    %eax,%ecx
f0125079:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f0125080:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0125085:	0f b6 d0             	movzbl %al,%edx
f0125088:	8b 45 c8             	mov    -0x38(%ebp),%eax
f012508b:	01 d0                	add    %edx,%eax
f012508d:	48                   	dec    %eax
f012508e:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f0125091:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0125094:	ba 00 00 00 00       	mov    $0x0,%edx
f0125099:	f7 75 c8             	divl   -0x38(%ebp)
f012509c:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f012509f:	29 d0                	sub    %edx,%eax
f01250a1:	89 c3                	mov    %eax,%ebx
f01250a3:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f01250aa:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01250af:	0f b6 c0             	movzbl %al,%eax
f01250b2:	c1 e0 04             	shl    $0x4,%eax
f01250b5:	89 c2                	mov    %eax,%edx
f01250b7:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01250ba:	01 d0                	add    %edx,%eax
f01250bc:	48                   	dec    %eax
f01250bd:	89 45 bc             	mov    %eax,-0x44(%ebp)
f01250c0:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01250c3:	ba 00 00 00 00       	mov    $0x0,%edx
f01250c8:	f7 75 c0             	divl   -0x40(%ebp)
f01250cb:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01250ce:	29 d0                	sub    %edx,%eax
f01250d0:	01 d8                	add    %ebx,%eax
f01250d2:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f01250d7:	39 c1                	cmp    %eax,%ecx
f01250d9:	74 17                	je     f01250f2 <test_kfreeall+0x118>
f01250db:	83 ec 04             	sub    $0x4,%esp
f01250de:	68 40 98 13 f0       	push   $0xf0139840
f01250e3:	68 f9 09 00 00       	push   $0x9f9
f01250e8:	68 5a 97 13 f0       	push   $0xf013975a
f01250ed:	e8 be b0 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01250f2:	e8 8d f5 fd ff       	call   f0104684 <pf_calculate_free_frames>
f01250f7:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01250fa:	74 17                	je     f0125113 <test_kfreeall+0x139>
f01250fc:	83 ec 04             	sub    $0x4,%esp
f01250ff:	68 74 97 13 f0       	push   $0xf0139774
f0125104:	68 fa 09 00 00       	push   $0x9fa
f0125109:	68 5a 97 13 f0       	push   $0xf013975a
f012510e:	e8 9d b0 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125113:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0125116:	e8 ab 78 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012511b:	29 c3                	sub    %eax,%ebx
f012511d:	89 d8                	mov    %ebx,%eax
f012511f:	3d 00 02 00 00       	cmp    $0x200,%eax
f0125124:	74 17                	je     f012513d <test_kfreeall+0x163>
f0125126:	83 ec 04             	sub    $0x4,%esp
f0125129:	68 dc 97 13 f0       	push   $0xf01397dc
f012512e:	68 fb 09 00 00       	push   $0x9fb
f0125133:	68 5a 97 13 f0       	push   $0xf013975a
f0125138:	e8 73 b0 fd ff       	call   f01001b0 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f012513d:	c7 85 c0 fe ff ff ff 	movl   $0x1ffbff,-0x140(%ebp)
f0125144:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0125147:	e8 7a 78 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012514c:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012514f:	e8 30 f5 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0125154:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0125157:	83 ec 0c             	sub    $0xc,%esp
f012515a:	68 00 fc 1f 00       	push   $0x1ffc00
f012515f:	e8 fb 2d fe ff       	call   f0107f5f <kmalloc>
f0125164:	83 c4 10             	add    $0x10,%esp
f0125167:	89 85 24 fe ff ff    	mov    %eax,-0x1dc(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012516d:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f0125173:	89 c1                	mov    %eax,%ecx
f0125175:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f012517c:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0125181:	0f b6 d0             	movzbl %al,%edx
f0125184:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0125187:	01 d0                	add    %edx,%eax
f0125189:	48                   	dec    %eax
f012518a:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f012518d:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0125190:	ba 00 00 00 00       	mov    $0x0,%edx
f0125195:	f7 75 b8             	divl   -0x48(%ebp)
f0125198:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f012519b:	29 d0                	sub    %edx,%eax
f012519d:	89 c3                	mov    %eax,%ebx
f012519f:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f01251a6:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01251ab:	0f b6 c0             	movzbl %al,%eax
f01251ae:	c1 e0 04             	shl    $0x4,%eax
f01251b1:	89 c2                	mov    %eax,%edx
f01251b3:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01251b6:	01 d0                	add    %edx,%eax
f01251b8:	48                   	dec    %eax
f01251b9:	89 45 ac             	mov    %eax,-0x54(%ebp)
f01251bc:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01251bf:	ba 00 00 00 00       	mov    $0x0,%edx
f01251c4:	f7 75 b0             	divl   -0x50(%ebp)
f01251c7:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01251ca:	29 d0                	sub    %edx,%eax
f01251cc:	01 d8                	add    %ebx,%eax
f01251ce:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f01251d3:	39 c1                	cmp    %eax,%ecx
f01251d5:	74 17                	je     f01251ee <test_kfreeall+0x214>
f01251d7:	83 ec 04             	sub    $0x4,%esp
f01251da:	68 40 98 13 f0       	push   $0xf0139840
f01251df:	68 02 0a 00 00       	push   $0xa02
f01251e4:	68 5a 97 13 f0       	push   $0xf013975a
f01251e9:	e8 c2 af fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01251ee:	e8 91 f4 fd ff       	call   f0104684 <pf_calculate_free_frames>
f01251f3:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01251f6:	74 17                	je     f012520f <test_kfreeall+0x235>
f01251f8:	83 ec 04             	sub    $0x4,%esp
f01251fb:	68 74 97 13 f0       	push   $0xf0139774
f0125200:	68 03 0a 00 00       	push   $0xa03
f0125205:	68 5a 97 13 f0       	push   $0xf013975a
f012520a:	e8 a1 af fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f012520f:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0125212:	e8 af 77 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0125217:	29 c3                	sub    %eax,%ebx
f0125219:	89 d8                	mov    %ebx,%eax
f012521b:	3d 00 02 00 00       	cmp    $0x200,%eax
f0125220:	74 17                	je     f0125239 <test_kfreeall+0x25f>
f0125222:	83 ec 04             	sub    $0x4,%esp
f0125225:	68 dc 97 13 f0       	push   $0xf01397dc
f012522a:	68 04 0a 00 00       	push   $0xa04
f012522f:	68 5a 97 13 f0       	push   $0xf013975a
f0125234:	e8 77 af fd ff       	call   f01001b0 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f0125239:	c7 85 c4 fe ff ff ff 	movl   $0x1ffbff,-0x13c(%ebp)
f0125240:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0125243:	e8 7e 77 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0125248:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012524b:	e8 34 f4 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0125250:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0125253:	83 ec 0c             	sub    $0xc,%esp
f0125256:	68 00 08 00 00       	push   $0x800
f012525b:	e8 ff 2c fe ff       	call   f0107f5f <kmalloc>
f0125260:	83 c4 10             	add    $0x10,%esp
f0125263:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125269:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f012526f:	89 c1                	mov    %eax,%ecx
f0125271:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f0125278:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012527d:	0f b6 d0             	movzbl %al,%edx
f0125280:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0125283:	01 d0                	add    %edx,%eax
f0125285:	48                   	dec    %eax
f0125286:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f0125289:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012528c:	ba 00 00 00 00       	mov    $0x0,%edx
f0125291:	f7 75 a8             	divl   -0x58(%ebp)
f0125294:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0125297:	29 d0                	sub    %edx,%eax
f0125299:	89 c3                	mov    %eax,%ebx
f012529b:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f01252a2:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01252a7:	0f b6 c0             	movzbl %al,%eax
f01252aa:	c1 e0 04             	shl    $0x4,%eax
f01252ad:	89 c2                	mov    %eax,%edx
f01252af:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01252b2:	01 d0                	add    %edx,%eax
f01252b4:	48                   	dec    %eax
f01252b5:	89 45 9c             	mov    %eax,-0x64(%ebp)
f01252b8:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01252bb:	ba 00 00 00 00       	mov    $0x0,%edx
f01252c0:	f7 75 a0             	divl   -0x60(%ebp)
f01252c3:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01252c6:	29 d0                	sub    %edx,%eax
f01252c8:	01 d8                	add    %ebx,%eax
f01252ca:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f01252cf:	39 c1                	cmp    %eax,%ecx
f01252d1:	74 17                	je     f01252ea <test_kfreeall+0x310>
f01252d3:	83 ec 04             	sub    $0x4,%esp
f01252d6:	68 40 98 13 f0       	push   $0xf0139840
f01252db:	68 0b 0a 00 00       	push   $0xa0b
f01252e0:	68 5a 97 13 f0       	push   $0xf013975a
f01252e5:	e8 c6 ae fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01252ea:	e8 95 f3 fd ff       	call   f0104684 <pf_calculate_free_frames>
f01252ef:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01252f2:	74 17                	je     f012530b <test_kfreeall+0x331>
f01252f4:	83 ec 04             	sub    $0x4,%esp
f01252f7:	68 74 97 13 f0       	push   $0xf0139774
f01252fc:	68 0c 0a 00 00       	push   $0xa0c
f0125301:	68 5a 97 13 f0       	push   $0xf013975a
f0125306:	e8 a5 ae fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f012530b:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012530e:	e8 b3 76 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0125313:	29 c3                	sub    %eax,%ebx
f0125315:	89 d8                	mov    %ebx,%eax
f0125317:	83 f8 01             	cmp    $0x1,%eax
f012531a:	74 17                	je     f0125333 <test_kfreeall+0x359>
f012531c:	83 ec 04             	sub    $0x4,%esp
f012531f:	68 dc 97 13 f0       	push   $0xf01397dc
f0125324:	68 0d 0a 00 00       	push   $0xa0d
f0125329:	68 5a 97 13 f0       	push   $0xf013975a
f012532e:	e8 7d ae fd ff       	call   f01001b0 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f0125333:	c7 85 c8 fe ff ff ff 	movl   $0x7ff,-0x138(%ebp)
f012533a:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f012533d:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f0125343:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0125346:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012534d:	eb 0e                	jmp    f012535d <test_kfreeall+0x383>
		{
			ptr[i] = 2 ;
f012534f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0125352:	8b 45 98             	mov    -0x68(%ebp),%eax
f0125355:	01 d0                	add    %edx,%eax
f0125357:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f012535a:	ff 45 f4             	incl   -0xc(%ebp)
f012535d:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0125363:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0125366:	7f e7                	jg     f012534f <test_kfreeall+0x375>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0125368:	e8 59 76 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012536d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125370:	e8 0f f3 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0125375:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0125378:	83 ec 0c             	sub    $0xc,%esp
f012537b:	68 00 08 00 00       	push   $0x800
f0125380:	e8 da 2b fe ff       	call   f0107f5f <kmalloc>
f0125385:	83 c4 10             	add    $0x10,%esp
f0125388:	89 85 2c fe ff ff    	mov    %eax,-0x1d4(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012538e:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f0125394:	89 c1                	mov    %eax,%ecx
f0125396:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f012539d:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01253a2:	0f b6 d0             	movzbl %al,%edx
f01253a5:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01253a8:	01 d0                	add    %edx,%eax
f01253aa:	48                   	dec    %eax
f01253ab:	89 45 90             	mov    %eax,-0x70(%ebp)
f01253ae:	8b 45 90             	mov    -0x70(%ebp),%eax
f01253b1:	ba 00 00 00 00       	mov    $0x0,%edx
f01253b6:	f7 75 94             	divl   -0x6c(%ebp)
f01253b9:	8b 45 90             	mov    -0x70(%ebp),%eax
f01253bc:	29 d0                	sub    %edx,%eax
f01253be:	89 c3                	mov    %eax,%ebx
f01253c0:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f01253c7:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01253cc:	0f b6 c0             	movzbl %al,%eax
f01253cf:	c1 e0 04             	shl    $0x4,%eax
f01253d2:	89 c2                	mov    %eax,%edx
f01253d4:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01253d7:	01 d0                	add    %edx,%eax
f01253d9:	48                   	dec    %eax
f01253da:	89 45 88             	mov    %eax,-0x78(%ebp)
f01253dd:	8b 45 88             	mov    -0x78(%ebp),%eax
f01253e0:	ba 00 00 00 00       	mov    $0x0,%edx
f01253e5:	f7 75 8c             	divl   -0x74(%ebp)
f01253e8:	8b 45 88             	mov    -0x78(%ebp),%eax
f01253eb:	29 d0                	sub    %edx,%eax
f01253ed:	01 d8                	add    %ebx,%eax
f01253ef:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f01253f4:	39 c1                	cmp    %eax,%ecx
f01253f6:	74 17                	je     f012540f <test_kfreeall+0x435>
f01253f8:	83 ec 04             	sub    $0x4,%esp
f01253fb:	68 40 98 13 f0       	push   $0xf0139840
f0125400:	68 19 0a 00 00       	push   $0xa19
f0125405:	68 5a 97 13 f0       	push   $0xf013975a
f012540a:	e8 a1 ad fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012540f:	e8 70 f2 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0125414:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0125417:	74 17                	je     f0125430 <test_kfreeall+0x456>
f0125419:	83 ec 04             	sub    $0x4,%esp
f012541c:	68 74 97 13 f0       	push   $0xf0139774
f0125421:	68 1a 0a 00 00       	push   $0xa1a
f0125426:	68 5a 97 13 f0       	push   $0xf013975a
f012542b:	e8 80 ad fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125430:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0125433:	e8 8e 75 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0125438:	29 c3                	sub    %eax,%ebx
f012543a:	89 d8                	mov    %ebx,%eax
f012543c:	83 f8 01             	cmp    $0x1,%eax
f012543f:	74 17                	je     f0125458 <test_kfreeall+0x47e>
f0125441:	83 ec 04             	sub    $0x4,%esp
f0125444:	68 dc 97 13 f0       	push   $0xf01397dc
f0125449:	68 1b 0a 00 00       	push   $0xa1b
f012544e:	68 5a 97 13 f0       	push   $0xf013975a
f0125453:	e8 58 ad fd ff       	call   f01001b0 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f0125458:	c7 85 cc fe ff ff ff 	movl   $0x7ff,-0x134(%ebp)
f012545f:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f0125462:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f0125468:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f012546b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0125472:	eb 0e                	jmp    f0125482 <test_kfreeall+0x4a8>
		{
			ptr[i] = 3 ;
f0125474:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0125477:	8b 45 98             	mov    -0x68(%ebp),%eax
f012547a:	01 d0                	add    %edx,%eax
f012547c:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f012547f:	ff 45 f4             	incl   -0xc(%ebp)
f0125482:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0125488:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012548b:	7f e7                	jg     f0125474 <test_kfreeall+0x49a>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f012548d:	e8 34 75 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0125492:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125495:	e8 ea f1 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012549a:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f012549d:	83 ec 0c             	sub    $0xc,%esp
f01254a0:	68 00 1c 00 00       	push   $0x1c00
f01254a5:	e8 b5 2a fe ff       	call   f0107f5f <kmalloc>
f01254aa:	83 c4 10             	add    $0x10,%esp
f01254ad:	89 85 30 fe ff ff    	mov    %eax,-0x1d0(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01254b3:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f01254b9:	89 c1                	mov    %eax,%ecx
f01254bb:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f01254c2:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01254c7:	0f b6 d0             	movzbl %al,%edx
f01254ca:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01254cd:	01 d0                	add    %edx,%eax
f01254cf:	48                   	dec    %eax
f01254d0:	89 45 80             	mov    %eax,-0x80(%ebp)
f01254d3:	8b 45 80             	mov    -0x80(%ebp),%eax
f01254d6:	ba 00 00 00 00       	mov    $0x0,%edx
f01254db:	f7 75 84             	divl   -0x7c(%ebp)
f01254de:	8b 45 80             	mov    -0x80(%ebp),%eax
f01254e1:	29 d0                	sub    %edx,%eax
f01254e3:	89 c3                	mov    %eax,%ebx
f01254e5:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f01254ec:	10 00 00 
f01254ef:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01254f4:	0f b6 c0             	movzbl %al,%eax
f01254f7:	c1 e0 04             	shl    $0x4,%eax
f01254fa:	89 c2                	mov    %eax,%edx
f01254fc:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0125502:	01 d0                	add    %edx,%eax
f0125504:	48                   	dec    %eax
f0125505:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f012550b:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0125511:	ba 00 00 00 00       	mov    $0x0,%edx
f0125516:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f012551c:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0125522:	29 d0                	sub    %edx,%eax
f0125524:	01 d8                	add    %ebx,%eax
f0125526:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f012552b:	39 c1                	cmp    %eax,%ecx
f012552d:	74 17                	je     f0125546 <test_kfreeall+0x56c>
f012552f:	83 ec 04             	sub    $0x4,%esp
f0125532:	68 40 98 13 f0       	push   $0xf0139840
f0125537:	68 27 0a 00 00       	push   $0xa27
f012553c:	68 5a 97 13 f0       	push   $0xf013975a
f0125541:	e8 6a ac fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125546:	e8 39 f1 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012554b:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012554e:	74 17                	je     f0125567 <test_kfreeall+0x58d>
f0125550:	83 ec 04             	sub    $0x4,%esp
f0125553:	68 74 97 13 f0       	push   $0xf0139774
f0125558:	68 28 0a 00 00       	push   $0xa28
f012555d:	68 5a 97 13 f0       	push   $0xf013975a
f0125562:	e8 49 ac fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125567:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012556a:	e8 57 74 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012556f:	29 c3                	sub    %eax,%ebx
f0125571:	89 d8                	mov    %ebx,%eax
f0125573:	83 f8 02             	cmp    $0x2,%eax
f0125576:	74 17                	je     f012558f <test_kfreeall+0x5b5>
f0125578:	83 ec 04             	sub    $0x4,%esp
f012557b:	68 dc 97 13 f0       	push   $0xf01397dc
f0125580:	68 29 0a 00 00       	push   $0xa29
f0125585:	68 5a 97 13 f0       	push   $0xf013975a
f012558a:	e8 21 ac fd ff       	call   f01001b0 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f012558f:	c7 85 d0 fe ff ff ff 	movl   $0x1bff,-0x130(%ebp)
f0125596:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f0125599:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f012559f:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f01255a2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01255a9:	eb 0e                	jmp    f01255b9 <test_kfreeall+0x5df>
		{
			ptr[i] = 4 ;
f01255ab:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01255ae:	8b 45 98             	mov    -0x68(%ebp),%eax
f01255b1:	01 d0                	add    %edx,%eax
f01255b3:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f01255b6:	ff 45 f4             	incl   -0xc(%ebp)
f01255b9:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01255bf:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01255c2:	7f e7                	jg     f01255ab <test_kfreeall+0x5d1>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f01255c4:	e8 fd 73 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01255c9:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01255cc:	e8 b3 f0 fd ff       	call   f0104684 <pf_calculate_free_frames>
f01255d1:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f01255d4:	83 ec 0c             	sub    $0xc,%esp
f01255d7:	68 00 fc 2f 00       	push   $0x2ffc00
f01255dc:	e8 7e 29 fe ff       	call   f0107f5f <kmalloc>
f01255e1:	83 c4 10             	add    $0x10,%esp
f01255e4:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01255ea:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f01255f0:	89 c1                	mov    %eax,%ecx
f01255f2:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f01255f9:	10 00 00 
f01255fc:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0125601:	0f b6 d0             	movzbl %al,%edx
f0125604:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012560a:	01 d0                	add    %edx,%eax
f012560c:	48                   	dec    %eax
f012560d:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f0125613:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0125619:	ba 00 00 00 00       	mov    $0x0,%edx
f012561e:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f0125624:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012562a:	29 d0                	sub    %edx,%eax
f012562c:	89 c3                	mov    %eax,%ebx
f012562e:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f0125635:	10 00 00 
f0125638:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012563d:	0f b6 c0             	movzbl %al,%eax
f0125640:	c1 e0 04             	shl    $0x4,%eax
f0125643:	89 c2                	mov    %eax,%edx
f0125645:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f012564b:	01 d0                	add    %edx,%eax
f012564d:	48                   	dec    %eax
f012564e:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f0125654:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012565a:	ba 00 00 00 00       	mov    $0x0,%edx
f012565f:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f0125665:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012566b:	29 d0                	sub    %edx,%eax
f012566d:	01 d8                	add    %ebx,%eax
f012566f:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0125674:	39 c1                	cmp    %eax,%ecx
f0125676:	74 17                	je     f012568f <test_kfreeall+0x6b5>
f0125678:	83 ec 04             	sub    $0x4,%esp
f012567b:	68 40 98 13 f0       	push   $0xf0139840
f0125680:	68 35 0a 00 00       	push   $0xa35
f0125685:	68 5a 97 13 f0       	push   $0xf013975a
f012568a:	e8 21 ab fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012568f:	e8 f0 ef fd ff       	call   f0104684 <pf_calculate_free_frames>
f0125694:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0125697:	74 17                	je     f01256b0 <test_kfreeall+0x6d6>
f0125699:	83 ec 04             	sub    $0x4,%esp
f012569c:	68 74 97 13 f0       	push   $0xf0139774
f01256a1:	68 36 0a 00 00       	push   $0xa36
f01256a6:	68 5a 97 13 f0       	push   $0xf013975a
f01256ab:	e8 00 ab fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f01256b0:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01256b3:	e8 0e 73 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01256b8:	29 c3                	sub    %eax,%ebx
f01256ba:	89 d8                	mov    %ebx,%eax
f01256bc:	3d 00 03 00 00       	cmp    $0x300,%eax
f01256c1:	74 17                	je     f01256da <test_kfreeall+0x700>
f01256c3:	83 ec 04             	sub    $0x4,%esp
f01256c6:	68 dc 97 13 f0       	push   $0xf01397dc
f01256cb:	68 37 0a 00 00       	push   $0xa37
f01256d0:	68 5a 97 13 f0       	push   $0xf013975a
f01256d5:	e8 d6 aa fd ff       	call   f01001b0 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f01256da:	c7 85 d4 fe ff ff ff 	movl   $0x2ffbff,-0x12c(%ebp)
f01256e1:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f01256e4:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f01256ea:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f01256ed:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01256f4:	eb 0e                	jmp    f0125704 <test_kfreeall+0x72a>
		{
			ptr[i] = 5 ;
f01256f6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01256f9:	8b 45 98             	mov    -0x68(%ebp),%eax
f01256fc:	01 d0                	add    %edx,%eax
f01256fe:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0125701:	ff 45 f4             	incl   -0xc(%ebp)
f0125704:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f012570a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012570d:	7f e7                	jg     f01256f6 <test_kfreeall+0x71c>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f012570f:	e8 b2 72 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0125714:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125717:	e8 68 ef fd ff       	call   f0104684 <pf_calculate_free_frames>
f012571c:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f012571f:	83 ec 0c             	sub    $0xc,%esp
f0125722:	68 00 fc 5f 00       	push   $0x5ffc00
f0125727:	e8 33 28 fe ff       	call   f0107f5f <kmalloc>
f012572c:	83 c4 10             	add    $0x10,%esp
f012572f:	89 85 38 fe ff ff    	mov    %eax,-0x1c8(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125735:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f012573b:	89 c1                	mov    %eax,%ecx
f012573d:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f0125744:	10 00 00 
f0125747:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012574c:	0f b6 d0             	movzbl %al,%edx
f012574f:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0125755:	01 d0                	add    %edx,%eax
f0125757:	48                   	dec    %eax
f0125758:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f012575e:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0125764:	ba 00 00 00 00       	mov    $0x0,%edx
f0125769:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f012576f:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0125775:	29 d0                	sub    %edx,%eax
f0125777:	89 c3                	mov    %eax,%ebx
f0125779:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f0125780:	10 00 00 
f0125783:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0125788:	0f b6 c0             	movzbl %al,%eax
f012578b:	c1 e0 04             	shl    $0x4,%eax
f012578e:	89 c2                	mov    %eax,%edx
f0125790:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0125796:	01 d0                	add    %edx,%eax
f0125798:	48                   	dec    %eax
f0125799:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f012579f:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f01257a5:	ba 00 00 00 00       	mov    $0x0,%edx
f01257aa:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f01257b0:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f01257b6:	29 d0                	sub    %edx,%eax
f01257b8:	01 d8                	add    %ebx,%eax
f01257ba:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f01257bf:	39 c1                	cmp    %eax,%ecx
f01257c1:	74 17                	je     f01257da <test_kfreeall+0x800>
f01257c3:	83 ec 04             	sub    $0x4,%esp
f01257c6:	68 40 98 13 f0       	push   $0xf0139840
f01257cb:	68 43 0a 00 00       	push   $0xa43
f01257d0:	68 5a 97 13 f0       	push   $0xf013975a
f01257d5:	e8 d6 a9 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01257da:	e8 a5 ee fd ff       	call   f0104684 <pf_calculate_free_frames>
f01257df:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01257e2:	74 17                	je     f01257fb <test_kfreeall+0x821>
f01257e4:	83 ec 04             	sub    $0x4,%esp
f01257e7:	68 74 97 13 f0       	push   $0xf0139774
f01257ec:	68 44 0a 00 00       	push   $0xa44
f01257f1:	68 5a 97 13 f0       	push   $0xf013975a
f01257f6:	e8 b5 a9 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f01257fb:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01257fe:	e8 c3 71 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0125803:	29 c3                	sub    %eax,%ebx
f0125805:	89 d8                	mov    %ebx,%eax
f0125807:	3d 00 06 00 00       	cmp    $0x600,%eax
f012580c:	74 17                	je     f0125825 <test_kfreeall+0x84b>
f012580e:	83 ec 04             	sub    $0x4,%esp
f0125811:	68 dc 97 13 f0       	push   $0xf01397dc
f0125816:	68 45 0a 00 00       	push   $0xa45
f012581b:	68 5a 97 13 f0       	push   $0xf013975a
f0125820:	e8 8b a9 fd ff       	call   f01001b0 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f0125825:	c7 85 d8 fe ff ff ff 	movl   $0x5ffbff,-0x128(%ebp)
f012582c:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f012582f:	e8 92 71 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0125834:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125837:	e8 48 ee fd ff       	call   f0104684 <pf_calculate_free_frames>
f012583c:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f012583f:	83 ec 0c             	sub    $0xc,%esp
f0125842:	68 00 38 00 00       	push   $0x3800
f0125847:	e8 13 27 fe ff       	call   f0107f5f <kmalloc>
f012584c:	83 c4 10             	add    $0x10,%esp
f012584f:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125855:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f012585b:	89 c1                	mov    %eax,%ecx
f012585d:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f0125864:	10 00 00 
f0125867:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012586c:	0f b6 d0             	movzbl %al,%edx
f012586f:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0125875:	01 d0                	add    %edx,%eax
f0125877:	48                   	dec    %eax
f0125878:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f012587e:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0125884:	ba 00 00 00 00       	mov    $0x0,%edx
f0125889:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f012588f:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0125895:	29 d0                	sub    %edx,%eax
f0125897:	89 c3                	mov    %eax,%ebx
f0125899:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f01258a0:	10 00 00 
f01258a3:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01258a8:	0f b6 c0             	movzbl %al,%eax
f01258ab:	c1 e0 04             	shl    $0x4,%eax
f01258ae:	89 c2                	mov    %eax,%edx
f01258b0:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01258b6:	01 d0                	add    %edx,%eax
f01258b8:	48                   	dec    %eax
f01258b9:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f01258bf:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f01258c5:	ba 00 00 00 00       	mov    $0x0,%edx
f01258ca:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f01258d0:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f01258d6:	29 d0                	sub    %edx,%eax
f01258d8:	01 d8                	add    %ebx,%eax
f01258da:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f01258df:	39 c1                	cmp    %eax,%ecx
f01258e1:	74 17                	je     f01258fa <test_kfreeall+0x920>
f01258e3:	83 ec 04             	sub    $0x4,%esp
f01258e6:	68 40 98 13 f0       	push   $0xf0139840
f01258eb:	68 4c 0a 00 00       	push   $0xa4c
f01258f0:	68 5a 97 13 f0       	push   $0xf013975a
f01258f5:	e8 b6 a8 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01258fa:	e8 85 ed fd ff       	call   f0104684 <pf_calculate_free_frames>
f01258ff:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0125902:	74 17                	je     f012591b <test_kfreeall+0x941>
f0125904:	83 ec 04             	sub    $0x4,%esp
f0125907:	68 74 97 13 f0       	push   $0xf0139774
f012590c:	68 4d 0a 00 00       	push   $0xa4d
f0125911:	68 5a 97 13 f0       	push   $0xf013975a
f0125916:	e8 95 a8 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f012591b:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012591e:	e8 a3 70 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0125923:	29 c3                	sub    %eax,%ebx
f0125925:	89 d8                	mov    %ebx,%eax
f0125927:	83 f8 04             	cmp    $0x4,%eax
f012592a:	74 17                	je     f0125943 <test_kfreeall+0x969>
f012592c:	83 ec 04             	sub    $0x4,%esp
f012592f:	68 dc 97 13 f0       	push   $0xf01397dc
f0125934:	68 4e 0a 00 00       	push   $0xa4e
f0125939:	68 5a 97 13 f0       	push   $0xf013975a
f012593e:	e8 6d a8 fd ff       	call   f01001b0 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f0125943:	c7 85 dc fe ff ff ff 	movl   $0x37ff,-0x124(%ebp)
f012594a:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f012594d:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0125953:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0125956:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012595d:	eb 0e                	jmp    f012596d <test_kfreeall+0x993>
		{
			ptr[i] = 7 ;
f012595f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0125962:	8b 45 98             	mov    -0x68(%ebp),%eax
f0125965:	01 d0                	add    %edx,%eax
f0125967:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f012596a:	ff 45 f4             	incl   -0xc(%ebp)
f012596d:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0125973:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0125976:	7f e7                	jg     f012595f <test_kfreeall+0x985>
	}

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0125978:	e8 49 70 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012597d:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0125983:	e8 fc ec fd ff       	call   f0104684 <pf_calculate_free_frames>
f0125988:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[0]);
f012598e:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f0125994:	83 ec 0c             	sub    $0xc,%esp
f0125997:	50                   	push   %eax
f0125998:	e8 dc 25 fe ff       	call   f0107f79 <kfree>
f012599d:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01259a0:	e8 df ec fd ff       	call   f0104684 <pf_calculate_free_frames>
f01259a5:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f01259ab:	74 17                	je     f01259c4 <test_kfreeall+0x9ea>
f01259ad:	83 ec 04             	sub    $0x4,%esp
f01259b0:	68 74 97 13 f0       	push   $0xf0139774
f01259b5:	68 5d 0a 00 00       	push   $0xa5d
f01259ba:	68 5a 97 13 f0       	push   $0xf013975a
f01259bf:	e8 ec a7 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f01259c4:	e8 fd 6f fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01259c9:	89 c2                	mov    %eax,%edx
f01259cb:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01259d1:	29 c2                	sub    %eax,%edx
f01259d3:	89 d0                	mov    %edx,%eax
f01259d5:	3d 00 02 00 00       	cmp    $0x200,%eax
f01259da:	74 17                	je     f01259f3 <test_kfreeall+0xa19>
f01259dc:	83 ec 04             	sub    $0x4,%esp
f01259df:	68 e4 9e 13 f0       	push   $0xf0139ee4
f01259e4:	68 5e 0a 00 00       	push   $0xa5e
f01259e9:	68 5a 97 13 f0       	push   $0xf013975a
f01259ee:	e8 bd a7 fd ff       	call   f01001b0 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f01259f3:	e8 ce 6f fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01259f8:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01259fe:	e8 81 ec fd ff       	call   f0104684 <pf_calculate_free_frames>
f0125a03:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[1]);
f0125a09:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f0125a0f:	83 ec 0c             	sub    $0xc,%esp
f0125a12:	50                   	push   %eax
f0125a13:	e8 61 25 fe ff       	call   f0107f79 <kfree>
f0125a18:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125a1b:	e8 64 ec fd ff       	call   f0104684 <pf_calculate_free_frames>
f0125a20:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f0125a26:	74 17                	je     f0125a3f <test_kfreeall+0xa65>
f0125a28:	83 ec 04             	sub    $0x4,%esp
f0125a2b:	68 74 97 13 f0       	push   $0xf0139774
f0125a30:	68 64 0a 00 00       	push   $0xa64
f0125a35:	68 5a 97 13 f0       	push   $0xf013975a
f0125a3a:	e8 71 a7 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f0125a3f:	e8 82 6f fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0125a44:	89 c2                	mov    %eax,%edx
f0125a46:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0125a4c:	29 c2                	sub    %eax,%edx
f0125a4e:	89 d0                	mov    %edx,%eax
f0125a50:	3d 00 02 00 00       	cmp    $0x200,%eax
f0125a55:	74 17                	je     f0125a6e <test_kfreeall+0xa94>
f0125a57:	83 ec 04             	sub    $0x4,%esp
f0125a5a:	68 e4 9e 13 f0       	push   $0xf0139ee4
f0125a5f:	68 65 0a 00 00       	push   $0xa65
f0125a64:	68 5a 97 13 f0       	push   $0xf013975a
f0125a69:	e8 42 a7 fd ff       	call   f01001b0 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f0125a6e:	e8 53 6f fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0125a73:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125a79:	e8 06 ec fd ff       	call   f0104684 <pf_calculate_free_frames>
f0125a7e:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[6]);
f0125a84:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0125a8a:	83 ec 0c             	sub    $0xc,%esp
f0125a8d:	50                   	push   %eax
f0125a8e:	e8 e6 24 fe ff       	call   f0107f79 <kfree>
f0125a93:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125a96:	e8 e9 eb fd ff       	call   f0104684 <pf_calculate_free_frames>
f0125a9b:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f0125aa1:	74 17                	je     f0125aba <test_kfreeall+0xae0>
f0125aa3:	83 ec 04             	sub    $0x4,%esp
f0125aa6:	68 74 97 13 f0       	push   $0xf0139774
f0125aab:	68 6b 0a 00 00       	push   $0xa6b
f0125ab0:	68 5a 97 13 f0       	push   $0xf013975a
f0125ab5:	e8 f6 a6 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0125aba:	e8 07 6f fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0125abf:	89 c2                	mov    %eax,%edx
f0125ac1:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0125ac7:	29 c2                	sub    %eax,%edx
f0125ac9:	89 d0                	mov    %edx,%eax
f0125acb:	3d 00 06 00 00       	cmp    $0x600,%eax
f0125ad0:	74 17                	je     f0125ae9 <test_kfreeall+0xb0f>
f0125ad2:	83 ec 04             	sub    $0x4,%esp
f0125ad5:	68 e4 9e 13 f0       	push   $0xf0139ee4
f0125ada:	68 6c 0a 00 00       	push   $0xa6c
f0125adf:	68 5a 97 13 f0       	push   $0xf013975a
f0125ae4:	e8 c7 a6 fd ff       	call   f01001b0 <_panic>


	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
f0125ae9:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f0125aef:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0125af2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0125af9:	eb 1e                	jmp    f0125b19 <test_kfreeall+0xb3f>
		{
			sums[2] += ptr[i] ;
f0125afb:	8b 95 78 fe ff ff    	mov    -0x188(%ebp),%edx
f0125b01:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0125b04:	8b 45 98             	mov    -0x68(%ebp),%eax
f0125b07:	01 c8                	add    %ecx,%eax
f0125b09:	8a 00                	mov    (%eax),%al
f0125b0b:	0f be c0             	movsbl %al,%eax
f0125b0e:	01 d0                	add    %edx,%eax
f0125b10:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)

	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0125b16:	ff 45 f4             	incl   -0xc(%ebp)
f0125b19:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0125b1f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0125b22:	7f d7                	jg     f0125afb <test_kfreeall+0xb21>
		{
			sums[2] += ptr[i] ;
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");
f0125b24:	8b 95 78 fe ff ff    	mov    -0x188(%ebp),%edx
f0125b2a:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0125b30:	01 c0                	add    %eax,%eax
f0125b32:	39 c2                	cmp    %eax,%edx
f0125b34:	74 17                	je     f0125b4d <test_kfreeall+0xb73>
f0125b36:	83 ec 04             	sub    $0x4,%esp
f0125b39:	68 40 9f 13 f0       	push   $0xf0139f40
f0125b3e:	68 78 0a 00 00       	push   $0xa78
f0125b43:	68 5a 97 13 f0       	push   $0xf013975a
f0125b48:	e8 63 a6 fd ff       	call   f01001b0 <_panic>

		//2 KB
		ptr = (char*)ptr_allocations[3];
f0125b4d:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f0125b53:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0125b56:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0125b5d:	eb 1e                	jmp    f0125b7d <test_kfreeall+0xba3>
		{
			sums[3] += ptr[i] ;
f0125b5f:	8b 95 7c fe ff ff    	mov    -0x184(%ebp),%edx
f0125b65:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0125b68:	8b 45 98             	mov    -0x68(%ebp),%eax
f0125b6b:	01 c8                	add    %ecx,%eax
f0125b6d:	8a 00                	mov    (%eax),%al
f0125b6f:	0f be c0             	movsbl %al,%eax
f0125b72:	01 d0                	add    %edx,%eax
f0125b74:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");

		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0125b7a:	ff 45 f4             	incl   -0xc(%ebp)
f0125b7d:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0125b83:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0125b86:	7f d7                	jg     f0125b5f <test_kfreeall+0xb85>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f0125b88:	8b 95 7c fe ff ff    	mov    -0x184(%ebp),%edx
f0125b8e:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0125b94:	89 c1                	mov    %eax,%ecx
f0125b96:	01 c9                	add    %ecx,%ecx
f0125b98:	01 c8                	add    %ecx,%eax
f0125b9a:	39 c2                	cmp    %eax,%edx
f0125b9c:	74 17                	je     f0125bb5 <test_kfreeall+0xbdb>
f0125b9e:	83 ec 04             	sub    $0x4,%esp
f0125ba1:	68 40 9f 13 f0       	push   $0xf0139f40
f0125ba6:	68 80 0a 00 00       	push   $0xa80
f0125bab:	68 5a 97 13 f0       	push   $0xf013975a
f0125bb0:	e8 fb a5 fd ff       	call   f01001b0 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f0125bb5:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f0125bbb:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0125bbe:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0125bc5:	eb 1e                	jmp    f0125be5 <test_kfreeall+0xc0b>
		{
			sums[4] += ptr[i] ;
f0125bc7:	8b 95 80 fe ff ff    	mov    -0x180(%ebp),%edx
f0125bcd:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0125bd0:	8b 45 98             	mov    -0x68(%ebp),%eax
f0125bd3:	01 c8                	add    %ecx,%eax
f0125bd5:	8a 00                	mov    (%eax),%al
f0125bd7:	0f be c0             	movsbl %al,%eax
f0125bda:	01 d0                	add    %edx,%eax
f0125bdc:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0125be2:	ff 45 f4             	incl   -0xc(%ebp)
f0125be5:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0125beb:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0125bee:	7f d7                	jg     f0125bc7 <test_kfreeall+0xbed>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f0125bf0:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0125bf6:	8b 95 d0 fe ff ff    	mov    -0x130(%ebp),%edx
f0125bfc:	c1 e2 02             	shl    $0x2,%edx
f0125bff:	39 d0                	cmp    %edx,%eax
f0125c01:	74 17                	je     f0125c1a <test_kfreeall+0xc40>
f0125c03:	83 ec 04             	sub    $0x4,%esp
f0125c06:	68 40 9f 13 f0       	push   $0xf0139f40
f0125c0b:	68 88 0a 00 00       	push   $0xa88
f0125c10:	68 5a 97 13 f0       	push   $0xf013975a
f0125c15:	e8 96 a5 fd ff       	call   f01001b0 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f0125c1a:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f0125c20:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0125c23:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0125c2a:	eb 1e                	jmp    f0125c4a <test_kfreeall+0xc70>
		{
			sums[5] += ptr[i] ;
f0125c2c:	8b 95 84 fe ff ff    	mov    -0x17c(%ebp),%edx
f0125c32:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0125c35:	8b 45 98             	mov    -0x68(%ebp),%eax
f0125c38:	01 c8                	add    %ecx,%eax
f0125c3a:	8a 00                	mov    (%eax),%al
f0125c3c:	0f be c0             	movsbl %al,%eax
f0125c3f:	01 d0                	add    %edx,%eax
f0125c41:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0125c47:	ff 45 f4             	incl   -0xc(%ebp)
f0125c4a:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0125c50:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0125c53:	7f d7                	jg     f0125c2c <test_kfreeall+0xc52>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f0125c55:	8b 8d 84 fe ff ff    	mov    -0x17c(%ebp),%ecx
f0125c5b:	8b 95 d4 fe ff ff    	mov    -0x12c(%ebp),%edx
f0125c61:	89 d0                	mov    %edx,%eax
f0125c63:	c1 e0 02             	shl    $0x2,%eax
f0125c66:	01 d0                	add    %edx,%eax
f0125c68:	39 c1                	cmp    %eax,%ecx
f0125c6a:	74 17                	je     f0125c83 <test_kfreeall+0xca9>
f0125c6c:	83 ec 04             	sub    $0x4,%esp
f0125c6f:	68 40 9f 13 f0       	push   $0xf0139f40
f0125c74:	68 90 0a 00 00       	push   $0xa90
f0125c79:	68 5a 97 13 f0       	push   $0xf013975a
f0125c7e:	e8 2d a5 fd ff       	call   f01001b0 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f0125c83:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0125c89:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0125c8c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0125c93:	eb 1e                	jmp    f0125cb3 <test_kfreeall+0xcd9>
		{
			sums[7] += ptr[i] ;
f0125c95:	8b 95 8c fe ff ff    	mov    -0x174(%ebp),%edx
f0125c9b:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0125c9e:	8b 45 98             	mov    -0x68(%ebp),%eax
f0125ca1:	01 c8                	add    %ecx,%eax
f0125ca3:	8a 00                	mov    (%eax),%al
f0125ca5:	0f be c0             	movsbl %al,%eax
f0125ca8:	01 d0                	add    %edx,%eax
f0125caa:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0125cb0:	ff 45 f4             	incl   -0xc(%ebp)
f0125cb3:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0125cb9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0125cbc:	7f d7                	jg     f0125c95 <test_kfreeall+0xcbb>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f0125cbe:	8b 8d 8c fe ff ff    	mov    -0x174(%ebp),%ecx
f0125cc4:	8b 95 dc fe ff ff    	mov    -0x124(%ebp),%edx
f0125cca:	89 d0                	mov    %edx,%eax
f0125ccc:	01 c0                	add    %eax,%eax
f0125cce:	01 d0                	add    %edx,%eax
f0125cd0:	01 c0                	add    %eax,%eax
f0125cd2:	01 d0                	add    %edx,%eax
f0125cd4:	39 c1                	cmp    %eax,%ecx
f0125cd6:	74 17                	je     f0125cef <test_kfreeall+0xd15>
f0125cd8:	83 ec 04             	sub    $0x4,%esp
f0125cdb:	68 40 9f 13 f0       	push   $0xf0139f40
f0125ce0:	68 98 0a 00 00       	push   $0xa98
f0125ce5:	68 5a 97 13 f0       	push   $0xf013975a
f0125cea:	e8 c1 a4 fd ff       	call   f01001b0 <_panic>
	}

	//Allocate after kfree
	{
		//20 KB
		freeFrames = sys_calculate_free_frames() ;
f0125cef:	e8 d2 6c fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0125cf4:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125cf7:	e8 88 e9 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0125cfc:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[8] = kmalloc(20*kilo);
f0125cff:	83 ec 0c             	sub    $0xc,%esp
f0125d02:	68 00 50 00 00       	push   $0x5000
f0125d07:	e8 53 22 fe ff       	call   f0107f5f <kmalloc>
f0125d0c:	83 c4 10             	add    $0x10,%esp
f0125d0f:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125d15:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0125d1b:	89 c1                	mov    %eax,%ecx
f0125d1d:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f0125d24:	10 00 00 
f0125d27:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0125d2c:	0f b6 d0             	movzbl %al,%edx
f0125d2f:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0125d35:	01 d0                	add    %edx,%eax
f0125d37:	48                   	dec    %eax
f0125d38:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f0125d3e:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0125d44:	ba 00 00 00 00       	mov    $0x0,%edx
f0125d49:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f0125d4f:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0125d55:	29 d0                	sub    %edx,%eax
f0125d57:	89 c3                	mov    %eax,%ebx
f0125d59:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f0125d60:	10 00 00 
f0125d63:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0125d68:	0f b6 c0             	movzbl %al,%eax
f0125d6b:	c1 e0 04             	shl    $0x4,%eax
f0125d6e:	89 c2                	mov    %eax,%edx
f0125d70:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0125d76:	01 d0                	add    %edx,%eax
f0125d78:	48                   	dec    %eax
f0125d79:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f0125d7f:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0125d85:	ba 00 00 00 00       	mov    $0x0,%edx
f0125d8a:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f0125d90:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0125d96:	29 d0                	sub    %edx,%eax
f0125d98:	01 d8                	add    %ebx,%eax
f0125d9a:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0125d9f:	39 c1                	cmp    %eax,%ecx
f0125da1:	74 17                	je     f0125dba <test_kfreeall+0xde0>
f0125da3:	83 ec 04             	sub    $0x4,%esp
f0125da6:	68 40 98 13 f0       	push   $0xf0139840
f0125dab:	68 a1 0a 00 00       	push   $0xaa1
f0125db0:	68 5a 97 13 f0       	push   $0xf013975a
f0125db5:	e8 f6 a3 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125dba:	e8 c5 e8 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0125dbf:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0125dc2:	74 17                	je     f0125ddb <test_kfreeall+0xe01>
f0125dc4:	83 ec 04             	sub    $0x4,%esp
f0125dc7:	68 74 97 13 f0       	push   $0xf0139774
f0125dcc:	68 a2 0a 00 00       	push   $0xaa2
f0125dd1:	68 5a 97 13 f0       	push   $0xf013975a
f0125dd6:	e8 d5 a3 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125ddb:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0125dde:	e8 e3 6b fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0125de3:	29 c3                	sub    %eax,%ebx
f0125de5:	89 d8                	mov    %ebx,%eax
f0125de7:	83 f8 05             	cmp    $0x5,%eax
f0125dea:	74 17                	je     f0125e03 <test_kfreeall+0xe29>
f0125dec:	83 ec 04             	sub    $0x4,%esp
f0125def:	68 dc 97 13 f0       	push   $0xf01397dc
f0125df4:	68 a3 0a 00 00       	push   $0xaa3
f0125df9:	68 5a 97 13 f0       	push   $0xf013975a
f0125dfe:	e8 ad a3 fd ff       	call   f01001b0 <_panic>
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
f0125e03:	c7 85 e0 fe ff ff ff 	movl   $0x4fff,-0x120(%ebp)
f0125e0a:	4f 00 00 
		ptr = (char*)ptr_allocations[8];
f0125e0d:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0125e13:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f0125e16:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0125e1d:	eb 0e                	jmp    f0125e2d <test_kfreeall+0xe53>
		{
			ptr[i] = 8 ;
f0125e1f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0125e22:	8b 45 98             	mov    -0x68(%ebp),%eax
f0125e25:	01 d0                	add    %edx,%eax
f0125e27:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f0125e2a:	ff 45 f4             	incl   -0xc(%ebp)
f0125e2d:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0125e33:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0125e36:	7f e7                	jg     f0125e1f <test_kfreeall+0xe45>
		{
			ptr[i] = 8 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f0125e38:	e8 89 6b fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0125e3d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125e40:	e8 3f e8 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0125e45:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega);
f0125e48:	83 ec 0c             	sub    $0xc,%esp
f0125e4b:	68 00 00 10 00       	push   $0x100000
f0125e50:	e8 0a 21 fe ff       	call   f0107f5f <kmalloc>
f0125e55:	83 c4 10             	add    $0x10,%esp
f0125e58:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125e5e:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0125e64:	89 c1                	mov    %eax,%ecx
f0125e66:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f0125e6d:	10 00 00 
f0125e70:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0125e75:	0f b6 d0             	movzbl %al,%edx
f0125e78:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0125e7e:	01 d0                	add    %edx,%eax
f0125e80:	48                   	dec    %eax
f0125e81:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f0125e87:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0125e8d:	ba 00 00 00 00       	mov    $0x0,%edx
f0125e92:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f0125e98:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0125e9e:	29 d0                	sub    %edx,%eax
f0125ea0:	89 c3                	mov    %eax,%ebx
f0125ea2:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f0125ea9:	10 00 00 
f0125eac:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0125eb1:	0f b6 c0             	movzbl %al,%eax
f0125eb4:	c1 e0 04             	shl    $0x4,%eax
f0125eb7:	89 c2                	mov    %eax,%edx
f0125eb9:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0125ebf:	01 d0                	add    %edx,%eax
f0125ec1:	48                   	dec    %eax
f0125ec2:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f0125ec8:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0125ece:	ba 00 00 00 00       	mov    $0x0,%edx
f0125ed3:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f0125ed9:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0125edf:	29 d0                	sub    %edx,%eax
f0125ee1:	01 d8                	add    %ebx,%eax
f0125ee3:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f0125ee8:	39 c1                	cmp    %eax,%ecx
f0125eea:	74 17                	je     f0125f03 <test_kfreeall+0xf29>
f0125eec:	83 ec 04             	sub    $0x4,%esp
f0125eef:	68 40 98 13 f0       	push   $0xf0139840
f0125ef4:	68 af 0a 00 00       	push   $0xaaf
f0125ef9:	68 5a 97 13 f0       	push   $0xf013975a
f0125efe:	e8 ad a2 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125f03:	e8 7c e7 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0125f08:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0125f0b:	74 17                	je     f0125f24 <test_kfreeall+0xf4a>
f0125f0d:	83 ec 04             	sub    $0x4,%esp
f0125f10:	68 74 97 13 f0       	push   $0xf0139774
f0125f15:	68 b0 0a 00 00       	push   $0xab0
f0125f1a:	68 5a 97 13 f0       	push   $0xf013975a
f0125f1f:	e8 8c a2 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125f24:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0125f27:	e8 9a 6a fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0125f2c:	29 c3                	sub    %eax,%ebx
f0125f2e:	89 d8                	mov    %ebx,%eax
f0125f30:	3d 00 01 00 00       	cmp    $0x100,%eax
f0125f35:	74 17                	je     f0125f4e <test_kfreeall+0xf74>
f0125f37:	83 ec 04             	sub    $0x4,%esp
f0125f3a:	68 dc 97 13 f0       	push   $0xf01397dc
f0125f3f:	68 b1 0a 00 00       	push   $0xab1
f0125f44:	68 5a 97 13 f0       	push   $0xf013975a
f0125f49:	e8 62 a2 fd ff       	call   f01001b0 <_panic>
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
f0125f4e:	c7 85 e4 fe ff ff ff 	movl   $0xfffff,-0x11c(%ebp)
f0125f55:	ff 0f 00 
		ptr = (char*)ptr_allocations[9];
f0125f58:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0125f5e:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f0125f61:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0125f68:	eb 0e                	jmp    f0125f78 <test_kfreeall+0xf9e>
		{
			ptr[i] = 9 ;
f0125f6a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0125f6d:	8b 45 98             	mov    -0x68(%ebp),%eax
f0125f70:	01 d0                	add    %edx,%eax
f0125f72:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f0125f75:	ff 45 f4             	incl   -0xc(%ebp)
f0125f78:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0125f7e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0125f81:	7f e7                	jg     f0125f6a <test_kfreeall+0xf90>
		}
	}

	//kfree entire kernel heap
	{
		freeFrames = sys_calculate_free_frames() ;
f0125f83:	e8 3e 6a fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0125f88:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125f8b:	e8 f4 e6 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0125f90:	89 45 cc             	mov    %eax,-0x34(%ebp)

		kfreeall();
f0125f93:	e8 2f 20 fe ff       	call   f0107fc7 <kfreeall>

		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125f98:	e8 e7 e6 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0125f9d:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0125fa0:	74 17                	je     f0125fb9 <test_kfreeall+0xfdf>
f0125fa2:	83 ec 04             	sub    $0x4,%esp
f0125fa5:	68 74 97 13 f0       	push   $0xf0139774
f0125faa:	68 c1 0a 00 00       	push   $0xac1
f0125faf:	68 5a 97 13 f0       	push   $0xf013975a
f0125fb4:	e8 f7 a1 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != (INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE+ 2 + 3*Mega/4096 + 1 + 1 + 4 + 5 + 256) panic("Wrong kfree: pages in memory are not freed correctly");
f0125fb9:	e8 08 6a fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0125fbe:	89 c2                	mov    %eax,%edx
f0125fc0:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0125fc3:	89 d1                	mov    %edx,%ecx
f0125fc5:	29 c1                	sub    %eax,%ecx
f0125fc7:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f0125fce:	10 00 00 
f0125fd1:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0125fd6:	0f b6 d0             	movzbl %al,%edx
f0125fd9:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0125fdf:	01 d0                	add    %edx,%eax
f0125fe1:	48                   	dec    %eax
f0125fe2:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f0125fe8:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0125fee:	ba 00 00 00 00       	mov    $0x0,%edx
f0125ff3:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f0125ff9:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0125fff:	29 d0                	sub    %edx,%eax
f0126001:	89 c3                	mov    %eax,%ebx
f0126003:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f012600a:	10 00 00 
f012600d:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0126012:	0f b6 c0             	movzbl %al,%eax
f0126015:	c1 e0 04             	shl    $0x4,%eax
f0126018:	89 c2                	mov    %eax,%edx
f012601a:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0126020:	01 d0                	add    %edx,%eax
f0126022:	48                   	dec    %eax
f0126023:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f0126029:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012602f:	ba 00 00 00 00       	mov    $0x0,%edx
f0126034:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f012603a:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0126040:	29 d0                	sub    %edx,%eax
f0126042:	01 d8                	add    %ebx,%eax
f0126044:	05 00 40 00 00       	add    $0x4000,%eax
f0126049:	c1 e8 0c             	shr    $0xc,%eax
f012604c:	05 0d 04 00 00       	add    $0x40d,%eax
f0126051:	39 c1                	cmp    %eax,%ecx
f0126053:	74 17                	je     f012606c <test_kfreeall+0x1092>
f0126055:	83 ec 04             	sub    $0x4,%esp
f0126058:	68 e4 9e 13 f0       	push   $0xf0139ee4
f012605d:	68 c2 0a 00 00       	push   $0xac2
f0126062:	68 5a 97 13 f0       	push   $0xf013975a
f0126067:	e8 44 a1 fd ff       	call   f01001b0 <_panic>

	//Check memory access after kfreeall
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f012606c:	83 ec 0c             	sub    $0xc,%esp
f012606f:	6a 03                	push   $0x3
f0126071:	e8 eb 6d fe ff       	call   f010ce61 <sys_bypassPageFault>
f0126076:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 10; ++i)
f0126079:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126080:	e9 82 00 00 00       	jmp    f0126107 <test_kfreeall+0x112d>
		{
			ptr = (char *) ptr_allocations[i];
f0126085:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0126088:	8b 84 85 20 fe ff ff 	mov    -0x1e0(%ebp,%eax,4),%eax
f012608f:	89 45 98             	mov    %eax,-0x68(%ebp)
			ptr[0] = 10;
f0126092:	8b 45 98             	mov    -0x68(%ebp),%eax
f0126095:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0126098:	e8 b2 6d fe ff       	call   f010ce4f <sys_rcr2>
f012609d:	89 c2                	mov    %eax,%edx
f012609f:	8b 45 98             	mov    -0x68(%ebp),%eax
f01260a2:	39 c2                	cmp    %eax,%edx
f01260a4:	74 17                	je     f01260bd <test_kfreeall+0x10e3>
f01260a6:	83 ec 04             	sub    $0x4,%esp
f01260a9:	68 c0 9f 13 f0       	push   $0xf0139fc0
f01260ae:	68 d0 0a 00 00       	push   $0xad0
f01260b3:	68 5a 97 13 f0       	push   $0xf013975a
f01260b8:	e8 f3 a0 fd ff       	call   f01001b0 <_panic>
			ptr[lastIndices[i]] = 10;
f01260bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01260c0:	8b 84 85 c0 fe ff ff 	mov    -0x140(%ebp,%eax,4),%eax
f01260c7:	89 c2                	mov    %eax,%edx
f01260c9:	8b 45 98             	mov    -0x68(%ebp),%eax
f01260cc:	01 d0                	add    %edx,%eax
f01260ce:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
f01260d1:	e8 79 6d fe ff       	call   f010ce4f <sys_rcr2>
f01260d6:	89 c2                	mov    %eax,%edx
f01260d8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01260db:	8b 84 85 c0 fe ff ff 	mov    -0x140(%ebp,%eax,4),%eax
f01260e2:	89 c1                	mov    %eax,%ecx
f01260e4:	8b 45 98             	mov    -0x68(%ebp),%eax
f01260e7:	01 c8                	add    %ecx,%eax
f01260e9:	39 c2                	cmp    %eax,%edx
f01260eb:	74 17                	je     f0126104 <test_kfreeall+0x112a>
f01260ed:	83 ec 04             	sub    $0x4,%esp
f01260f0:	68 c0 9f 13 f0       	push   $0xf0139fc0
f01260f5:	68 d2 0a 00 00       	push   $0xad2
f01260fa:	68 5a 97 13 f0       	push   $0xf013975a
f01260ff:	e8 ac a0 fd ff       	call   f01001b0 <_panic>
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 10; ++i)
f0126104:	ff 45 f4             	incl   -0xc(%ebp)
f0126107:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
f012610b:	0f 8e 74 ff ff ff    	jle    f0126085 <test_kfreeall+0x10ab>
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
		}
		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f0126111:	83 ec 0c             	sub    $0xc,%esp
f0126114:	6a 00                	push   $0x0
f0126116:	e8 46 6d fe ff       	call   f010ce61 <sys_bypassPageFault>
f012611b:	83 c4 10             	add    $0x10,%esp
	}

	//Allocate after kfreeall
	{
		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f012611e:	e8 a3 68 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0126123:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126126:	e8 59 e5 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012612b:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[10] = kmalloc(4*Mega);
f012612e:	83 ec 0c             	sub    $0xc,%esp
f0126131:	68 00 00 40 00       	push   $0x400000
f0126136:	e8 24 1e fe ff       	call   f0107f5f <kmalloc>
f012613b:	83 c4 10             	add    $0x10,%esp
f012613e:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
		if ((uint32) ptr_allocations[10] != (KERNEL_HEAP_START)) panic("Wrong start address after kfreeall()... check return address updating of heap ptr");
f0126144:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012614a:	3d 00 00 00 f6       	cmp    $0xf6000000,%eax
f012614f:	74 17                	je     f0126168 <test_kfreeall+0x118e>
f0126151:	83 ec 04             	sub    $0x4,%esp
f0126154:	68 64 a4 13 f0       	push   $0xf013a464
f0126159:	68 de 0a 00 00       	push   $0xade
f012615e:	68 5a 97 13 f0       	push   $0xf013975a
f0126163:	e8 48 a0 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126168:	e8 17 e5 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012616d:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126170:	74 17                	je     f0126189 <test_kfreeall+0x11af>
f0126172:	83 ec 04             	sub    $0x4,%esp
f0126175:	68 74 97 13 f0       	push   $0xf0139774
f012617a:	68 df 0a 00 00       	push   $0xadf
f012617f:	68 5a 97 13 f0       	push   $0xf013975a
f0126184:	e8 27 a0 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4*Mega/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126189:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012618c:	e8 35 68 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0126191:	29 c3                	sub    %eax,%ebx
f0126193:	89 d8                	mov    %ebx,%eax
f0126195:	3d 00 04 00 00       	cmp    $0x400,%eax
f012619a:	74 17                	je     f01261b3 <test_kfreeall+0x11d9>
f012619c:	83 ec 04             	sub    $0x4,%esp
f012619f:	68 dc 97 13 f0       	push   $0xf01397dc
f01261a4:	68 e0 0a 00 00       	push   $0xae0
f01261a9:	68 5a 97 13 f0       	push   $0xf013975a
f01261ae:	e8 fd 9f fd ff       	call   f01001b0 <_panic>

		//12 KB
		freeFrames = sys_calculate_free_frames() ;
f01261b3:	e8 0e 68 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01261b8:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01261bb:	e8 c4 e4 fd ff       	call   f0104684 <pf_calculate_free_frames>
f01261c0:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[11] = kmalloc(12*kilo);
f01261c3:	83 ec 0c             	sub    $0xc,%esp
f01261c6:	68 00 30 00 00       	push   $0x3000
f01261cb:	e8 8f 1d fe ff       	call   f0107f5f <kmalloc>
f01261d0:	83 c4 10             	add    $0x10,%esp
f01261d3:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
		if ((uint32) ptr_allocations[11] != (KERNEL_HEAP_START + 4*Mega)) panic("Wrong start address after kfreeall()... check return address updating of heap ptr");
f01261d9:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f01261df:	3d 00 00 40 f6       	cmp    $0xf6400000,%eax
f01261e4:	74 17                	je     f01261fd <test_kfreeall+0x1223>
f01261e6:	83 ec 04             	sub    $0x4,%esp
f01261e9:	68 64 a4 13 f0       	push   $0xf013a464
f01261ee:	68 e6 0a 00 00       	push   $0xae6
f01261f3:	68 5a 97 13 f0       	push   $0xf013975a
f01261f8:	e8 b3 9f fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01261fd:	e8 82 e4 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0126202:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126205:	74 17                	je     f012621e <test_kfreeall+0x1244>
f0126207:	83 ec 04             	sub    $0x4,%esp
f012620a:	68 74 97 13 f0       	push   $0xf0139774
f012620f:	68 e7 0a 00 00       	push   $0xae7
f0126214:	68 5a 97 13 f0       	push   $0xf013975a
f0126219:	e8 92 9f fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 3) panic("Wrong allocation: pages are not loaded successfully into memory");
f012621e:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0126221:	e8 a0 67 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0126226:	29 c3                	sub    %eax,%ebx
f0126228:	89 d8                	mov    %ebx,%eax
f012622a:	83 f8 03             	cmp    $0x3,%eax
f012622d:	74 17                	je     f0126246 <test_kfreeall+0x126c>
f012622f:	83 ec 04             	sub    $0x4,%esp
f0126232:	68 dc 97 13 f0       	push   $0xf01397dc
f0126237:	68 e8 0a 00 00       	push   $0xae8
f012623c:	68 5a 97 13 f0       	push   $0xf013975a
f0126241:	e8 6a 9f fd ff       	call   f01001b0 <_panic>
	}

	//kfree one of the newly allocated space
	{
		//kfree 12 KB
		freeFrames = sys_calculate_free_frames() ;
f0126246:	e8 7b 67 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012624b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012624e:	e8 31 e4 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0126253:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[11]);
f0126256:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012625c:	83 ec 0c             	sub    $0xc,%esp
f012625f:	50                   	push   %eax
f0126260:	e8 14 1d fe ff       	call   f0107f79 <kfree>
f0126265:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126268:	e8 17 e4 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012626d:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126270:	74 17                	je     f0126289 <test_kfreeall+0x12af>
f0126272:	83 ec 04             	sub    $0x4,%esp
f0126275:	68 74 97 13 f0       	push   $0xf0139774
f012627a:	68 f2 0a 00 00       	push   $0xaf2
f012627f:	68 5a 97 13 f0       	push   $0xf013975a
f0126284:	e8 27 9f fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0126289:	e8 38 67 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012628e:	89 c2                	mov    %eax,%edx
f0126290:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0126293:	29 c2                	sub    %eax,%edx
f0126295:	89 d0                	mov    %edx,%eax
f0126297:	83 f8 03             	cmp    $0x3,%eax
f012629a:	74 17                	je     f01262b3 <test_kfreeall+0x12d9>
f012629c:	83 ec 04             	sub    $0x4,%esp
f012629f:	68 0c a0 13 f0       	push   $0xf013a00c
f01262a4:	68 f3 0a 00 00       	push   $0xaf3
f01262a9:	68 5a 97 13 f0       	push   $0xf013975a
f01262ae:	e8 fd 9e fd ff       	call   f01001b0 <_panic>
	}

	//kfree non-exist item
	{
		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f01262b3:	e8 0e 67 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01262b8:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01262bb:	e8 c4 e3 fd ff       	call   f0104684 <pf_calculate_free_frames>
f01262c0:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f01262c3:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f01262c9:	83 ec 0c             	sub    $0xc,%esp
f01262cc:	50                   	push   %eax
f01262cd:	e8 a7 1c fe ff       	call   f0107f79 <kfree>
f01262d2:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01262d5:	e8 aa e3 fd ff       	call   f0104684 <pf_calculate_free_frames>
f01262da:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01262dd:	74 17                	je     f01262f6 <test_kfreeall+0x131c>
f01262df:	83 ec 04             	sub    $0x4,%esp
f01262e2:	68 74 97 13 f0       	push   $0xf0139774
f01262e7:	68 fc 0a 00 00       	push   $0xafc
f01262ec:	68 5a 97 13 f0       	push   $0xf013975a
f01262f1:	e8 ba 9e fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f01262f6:	e8 cb 66 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01262fb:	89 c2                	mov    %eax,%edx
f01262fd:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0126300:	39 c2                	cmp    %eax,%edx
f0126302:	74 17                	je     f012631b <test_kfreeall+0x1341>
f0126304:	83 ec 04             	sub    $0x4,%esp
f0126307:	68 0c a0 13 f0       	push   $0xf013a00c
f012630c:	68 fd 0a 00 00       	push   $0xafd
f0126311:	68 5a 97 13 f0       	push   $0xf013975a
f0126316:	e8 95 9e fd ff       	call   f01001b0 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f012631b:	e8 a6 66 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0126320:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126323:	e8 5c e3 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0126328:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f012632b:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0126331:	83 ec 0c             	sub    $0xc,%esp
f0126334:	50                   	push   %eax
f0126335:	e8 3f 1c fe ff       	call   f0107f79 <kfree>
f012633a:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012633d:	e8 42 e3 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0126342:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126345:	74 17                	je     f012635e <test_kfreeall+0x1384>
f0126347:	83 ec 04             	sub    $0x4,%esp
f012634a:	68 74 97 13 f0       	push   $0xf0139774
f012634f:	68 03 0b 00 00       	push   $0xb03
f0126354:	68 5a 97 13 f0       	push   $0xf013975a
f0126359:	e8 52 9e fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f012635e:	e8 63 66 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0126363:	89 c2                	mov    %eax,%edx
f0126365:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0126368:	39 c2                	cmp    %eax,%edx
f012636a:	74 17                	je     f0126383 <test_kfreeall+0x13a9>
f012636c:	83 ec 04             	sub    $0x4,%esp
f012636f:	68 0c a0 13 f0       	push   $0xf013a00c
f0126374:	68 04 0b 00 00       	push   $0xb04
f0126379:	68 5a 97 13 f0       	push   $0xf013975a
f012637e:	e8 2d 9e fd ff       	call   f01001b0 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0126383:	e8 3e 66 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0126388:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012638b:	e8 f4 e2 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0126390:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f0126393:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0126399:	83 ec 0c             	sub    $0xc,%esp
f012639c:	50                   	push   %eax
f012639d:	e8 d7 1b fe ff       	call   f0107f79 <kfree>
f01263a2:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01263a5:	e8 da e2 fd ff       	call   f0104684 <pf_calculate_free_frames>
f01263aa:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01263ad:	74 17                	je     f01263c6 <test_kfreeall+0x13ec>
f01263af:	83 ec 04             	sub    $0x4,%esp
f01263b2:	68 74 97 13 f0       	push   $0xf0139774
f01263b7:	68 0a 0b 00 00       	push   $0xb0a
f01263bc:	68 5a 97 13 f0       	push   $0xf013975a
f01263c1:	e8 ea 9d fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f01263c6:	e8 fb 65 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01263cb:	89 c2                	mov    %eax,%edx
f01263cd:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01263d0:	39 c2                	cmp    %eax,%edx
f01263d2:	74 17                	je     f01263eb <test_kfreeall+0x1411>
f01263d4:	83 ec 04             	sub    $0x4,%esp
f01263d7:	68 0c a0 13 f0       	push   $0xf013a00c
f01263dc:	68 0b 0b 00 00       	push   $0xb0b
f01263e1:	68 5a 97 13 f0       	push   $0xf013975a
f01263e6:	e8 c5 9d fd ff       	call   f01001b0 <_panic>
	}

	//check tables
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f01263eb:	c7 45 e8 00 00 00 f6 	movl   $0xf6000000,-0x18(%ebp)
f01263f2:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f01263f9:	eb 48                	jmp    f0126443 <test_kfreeall+0x1469>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va, &ptr_table);
f01263fb:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01263fe:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f0126403:	83 ec 04             	sub    $0x4,%esp
f0126406:	8d 8d 1c fe ff ff    	lea    -0x1e4(%ebp),%ecx
f012640c:	51                   	push   %ecx
f012640d:	52                   	push   %edx
f012640e:	50                   	push   %eax
f012640f:	e8 d3 10 fe ff       	call   f01074e7 <get_page_table>
f0126414:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0126417:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f012641d:	85 c0                	test   %eax,%eax
f012641f:	75 17                	jne    f0126438 <test_kfreeall+0x145e>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
f0126421:	83 ec 04             	sub    $0x4,%esp
f0126424:	68 5c a0 13 f0       	push   $0xf013a05c
f0126429:	68 18 0b 00 00       	push   $0xb18
f012642e:	68 5a 97 13 f0       	push   $0xf013975a
f0126433:	e8 78 9d fd ff       	call   f01001b0 <_panic>
	}

	//check tables
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0126438:	81 45 e8 00 00 40 00 	addl   $0x400000,-0x18(%ebp)
f012643f:	83 55 ec 00          	adcl   $0x0,-0x14(%ebp)
f0126443:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0126447:	78 b2                	js     f01263fb <test_kfreeall+0x1421>
f0126449:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012644d:	7f 09                	jg     f0126458 <test_kfreeall+0x147e>
f012644f:	81 7d e8 ff ef ff ff 	cmpl   $0xffffefff,-0x18(%ebp)
f0126456:	76 a3                	jbe    f01263fb <test_kfreeall+0x1421>
			}
		}
	}


	cprintf("\nCongratulations!! your modification is run successfully.\n");
f0126458:	83 ec 0c             	sub    $0xc,%esp
f012645b:	68 b8 a4 13 f0       	push   $0xf013a4b8
f0126460:	e8 cc a9 fd ff       	call   f0100e31 <cprintf>
f0126465:	83 c4 10             	add    $0x10,%esp

	return 1;
f0126468:	b8 01 00 00 00       	mov    $0x1,%eax

}
f012646d:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0126470:	5b                   	pop    %ebx
f0126471:	5f                   	pop    %edi
f0126472:	5d                   	pop    %ebp
f0126473:	c3                   	ret    

f0126474 <test_kexpand>:


extern void kexpand(uint32 newSize) ;

int test_kexpand()
{
f0126474:	55                   	push   %ebp
f0126475:	89 e5                	mov    %esp,%ebp
f0126477:	57                   	push   %edi
f0126478:	53                   	push   %ebx
f0126479:	81 ec 50 01 00 00    	sub    $0x150,%esp
	char minByte = 1<<7;
f012647f:	c6 45 f3 80          	movb   $0x80,-0xd(%ebp)
	char maxByte = 0x7F;
f0126483:	c6 45 f2 7f          	movb   $0x7f,-0xe(%ebp)
	short minShort = 1<<15 ;
f0126487:	66 c7 45 f0 00 80    	movw   $0x8000,-0x10(%ebp)
	short maxShort = 0x7FFF;
f012648d:	66 c7 45 ee ff 7f    	movw   $0x7fff,-0x12(%ebp)
	int minInt = 1<<31 ;
f0126493:	c7 45 e8 00 00 00 80 	movl   $0x80000000,-0x18(%ebp)
	int maxInt = 0x7FFFFFFF;
f012649a:	c7 45 e4 ff ff ff 7f 	movl   $0x7fffffff,-0x1c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f01264a1:	e8 20 65 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01264a6:	89 45 e0             	mov    %eax,-0x20(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f01264a9:	8d 95 fc fe ff ff    	lea    -0x104(%ebp),%edx
f01264af:	b9 14 00 00 00       	mov    $0x14,%ecx
f01264b4:	b8 00 00 00 00       	mov    $0x0,%eax
f01264b9:	89 d7                	mov    %edx,%edi
f01264bb:	f3 ab                	rep stos %eax,%es:(%edi)

	uint32 *arr;
	void* ptr_allocations[20] = {0};
f01264bd:	8d 95 ac fe ff ff    	lea    -0x154(%ebp),%edx
f01264c3:	b9 14 00 00 00       	mov    $0x14,%ecx
f01264c8:	b8 00 00 00 00       	mov    $0x0,%eax
f01264cd:	89 d7                	mov    %edx,%edi
f01264cf:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01264d1:	e8 f0 64 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01264d6:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01264d9:	e8 a6 e1 fd ff       	call   f0104684 <pf_calculate_free_frames>
f01264de:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f01264e1:	83 ec 0c             	sub    $0xc,%esp
f01264e4:	68 00 fc 1f 00       	push   $0x1ffc00
f01264e9:	e8 71 1a fe ff       	call   f0107f5f <kmalloc>
f01264ee:	83 c4 10             	add    $0x10,%esp
f01264f1:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01264f7:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f01264fd:	89 c1                	mov    %eax,%ecx
f01264ff:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f0126506:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012650b:	0f b6 d0             	movzbl %al,%edx
f012650e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0126511:	01 d0                	add    %edx,%eax
f0126513:	48                   	dec    %eax
f0126514:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0126517:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012651a:	ba 00 00 00 00       	mov    $0x0,%edx
f012651f:	f7 75 d4             	divl   -0x2c(%ebp)
f0126522:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0126525:	29 d0                	sub    %edx,%eax
f0126527:	89 c3                	mov    %eax,%ebx
f0126529:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0126530:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0126535:	0f b6 c0             	movzbl %al,%eax
f0126538:	c1 e0 04             	shl    $0x4,%eax
f012653b:	89 c2                	mov    %eax,%edx
f012653d:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0126540:	01 d0                	add    %edx,%eax
f0126542:	48                   	dec    %eax
f0126543:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0126546:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0126549:	ba 00 00 00 00       	mov    $0x0,%edx
f012654e:	f7 75 cc             	divl   -0x34(%ebp)
f0126551:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0126554:	29 d0                	sub    %edx,%eax
f0126556:	01 d8                	add    %ebx,%eax
f0126558:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f012655d:	39 c1                	cmp    %eax,%ecx
f012655f:	74 17                	je     f0126578 <test_kexpand+0x104>
f0126561:	83 ec 04             	sub    $0x4,%esp
f0126564:	68 40 98 13 f0       	push   $0xf0139840
f0126569:	68 43 0b 00 00       	push   $0xb43
f012656e:	68 5a 97 13 f0       	push   $0xf013975a
f0126573:	e8 38 9c fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126578:	e8 07 e1 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012657d:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0126580:	74 17                	je     f0126599 <test_kexpand+0x125>
f0126582:	83 ec 04             	sub    $0x4,%esp
f0126585:	68 74 97 13 f0       	push   $0xf0139774
f012658a:	68 44 0b 00 00       	push   $0xb44
f012658f:	68 5a 97 13 f0       	push   $0xf013975a
f0126594:	e8 17 9c fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126599:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f012659c:	e8 25 64 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01265a1:	29 c3                	sub    %eax,%ebx
f01265a3:	89 d8                	mov    %ebx,%eax
f01265a5:	3d 00 02 00 00       	cmp    $0x200,%eax
f01265aa:	74 17                	je     f01265c3 <test_kexpand+0x14f>
f01265ac:	83 ec 04             	sub    $0x4,%esp
f01265af:	68 dc 97 13 f0       	push   $0xf01397dc
f01265b4:	68 45 0b 00 00       	push   $0xb45
f01265b9:	68 5a 97 13 f0       	push   $0xf013975a
f01265be:	e8 ed 9b fd ff       	call   f01001b0 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f01265c3:	c7 85 fc fe ff ff ff 	movl   $0x1ffbff,-0x104(%ebp)
f01265ca:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01265cd:	e8 f4 63 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01265d2:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01265d5:	e8 aa e0 fd ff       	call   f0104684 <pf_calculate_free_frames>
f01265da:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f01265dd:	83 ec 0c             	sub    $0xc,%esp
f01265e0:	68 00 fc 1f 00       	push   $0x1ffc00
f01265e5:	e8 75 19 fe ff       	call   f0107f5f <kmalloc>
f01265ea:	83 c4 10             	add    $0x10,%esp
f01265ed:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01265f3:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f01265f9:	89 c1                	mov    %eax,%ecx
f01265fb:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f0126602:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0126607:	0f b6 d0             	movzbl %al,%edx
f012660a:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f012660d:	01 d0                	add    %edx,%eax
f012660f:	48                   	dec    %eax
f0126610:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0126613:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0126616:	ba 00 00 00 00       	mov    $0x0,%edx
f012661b:	f7 75 c4             	divl   -0x3c(%ebp)
f012661e:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0126621:	29 d0                	sub    %edx,%eax
f0126623:	89 c3                	mov    %eax,%ebx
f0126625:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f012662c:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0126631:	0f b6 c0             	movzbl %al,%eax
f0126634:	c1 e0 04             	shl    $0x4,%eax
f0126637:	89 c2                	mov    %eax,%edx
f0126639:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012663c:	01 d0                	add    %edx,%eax
f012663e:	48                   	dec    %eax
f012663f:	89 45 b8             	mov    %eax,-0x48(%ebp)
f0126642:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0126645:	ba 00 00 00 00       	mov    $0x0,%edx
f012664a:	f7 75 bc             	divl   -0x44(%ebp)
f012664d:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0126650:	29 d0                	sub    %edx,%eax
f0126652:	01 d8                	add    %ebx,%eax
f0126654:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0126659:	39 c1                	cmp    %eax,%ecx
f012665b:	74 17                	je     f0126674 <test_kexpand+0x200>
f012665d:	83 ec 04             	sub    $0x4,%esp
f0126660:	68 40 98 13 f0       	push   $0xf0139840
f0126665:	68 4c 0b 00 00       	push   $0xb4c
f012666a:	68 5a 97 13 f0       	push   $0xf013975a
f012666f:	e8 3c 9b fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126674:	e8 0b e0 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0126679:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012667c:	74 17                	je     f0126695 <test_kexpand+0x221>
f012667e:	83 ec 04             	sub    $0x4,%esp
f0126681:	68 74 97 13 f0       	push   $0xf0139774
f0126686:	68 4d 0b 00 00       	push   $0xb4d
f012668b:	68 5a 97 13 f0       	push   $0xf013975a
f0126690:	e8 1b 9b fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126695:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0126698:	e8 29 63 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012669d:	29 c3                	sub    %eax,%ebx
f012669f:	89 d8                	mov    %ebx,%eax
f01266a1:	3d 00 02 00 00       	cmp    $0x200,%eax
f01266a6:	74 17                	je     f01266bf <test_kexpand+0x24b>
f01266a8:	83 ec 04             	sub    $0x4,%esp
f01266ab:	68 dc 97 13 f0       	push   $0xf01397dc
f01266b0:	68 4e 0b 00 00       	push   $0xb4e
f01266b5:	68 5a 97 13 f0       	push   $0xf013975a
f01266ba:	e8 f1 9a fd ff       	call   f01001b0 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f01266bf:	c7 85 00 ff ff ff ff 	movl   $0x1ffbff,-0x100(%ebp)
f01266c6:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01266c9:	e8 f8 62 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01266ce:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01266d1:	e8 ae df fd ff       	call   f0104684 <pf_calculate_free_frames>
f01266d6:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f01266d9:	83 ec 0c             	sub    $0xc,%esp
f01266dc:	68 00 08 00 00       	push   $0x800
f01266e1:	e8 79 18 fe ff       	call   f0107f5f <kmalloc>
f01266e6:	83 c4 10             	add    $0x10,%esp
f01266e9:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01266ef:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f01266f5:	89 c1                	mov    %eax,%ecx
f01266f7:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f01266fe:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0126703:	0f b6 d0             	movzbl %al,%edx
f0126706:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0126709:	01 d0                	add    %edx,%eax
f012670b:	48                   	dec    %eax
f012670c:	89 45 b0             	mov    %eax,-0x50(%ebp)
f012670f:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0126712:	ba 00 00 00 00       	mov    $0x0,%edx
f0126717:	f7 75 b4             	divl   -0x4c(%ebp)
f012671a:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012671d:	29 d0                	sub    %edx,%eax
f012671f:	89 c3                	mov    %eax,%ebx
f0126721:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f0126728:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012672d:	0f b6 c0             	movzbl %al,%eax
f0126730:	c1 e0 04             	shl    $0x4,%eax
f0126733:	89 c2                	mov    %eax,%edx
f0126735:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0126738:	01 d0                	add    %edx,%eax
f012673a:	48                   	dec    %eax
f012673b:	89 45 a8             	mov    %eax,-0x58(%ebp)
f012673e:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0126741:	ba 00 00 00 00       	mov    $0x0,%edx
f0126746:	f7 75 ac             	divl   -0x54(%ebp)
f0126749:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012674c:	29 d0                	sub    %edx,%eax
f012674e:	01 d8                	add    %ebx,%eax
f0126750:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0126755:	39 c1                	cmp    %eax,%ecx
f0126757:	74 17                	je     f0126770 <test_kexpand+0x2fc>
f0126759:	83 ec 04             	sub    $0x4,%esp
f012675c:	68 40 98 13 f0       	push   $0xf0139840
f0126761:	68 55 0b 00 00       	push   $0xb55
f0126766:	68 5a 97 13 f0       	push   $0xf013975a
f012676b:	e8 40 9a fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126770:	e8 0f df fd ff       	call   f0104684 <pf_calculate_free_frames>
f0126775:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0126778:	74 17                	je     f0126791 <test_kexpand+0x31d>
f012677a:	83 ec 04             	sub    $0x4,%esp
f012677d:	68 74 97 13 f0       	push   $0xf0139774
f0126782:	68 56 0b 00 00       	push   $0xb56
f0126787:	68 5a 97 13 f0       	push   $0xf013975a
f012678c:	e8 1f 9a fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126791:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0126794:	e8 2d 62 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0126799:	29 c3                	sub    %eax,%ebx
f012679b:	89 d8                	mov    %ebx,%eax
f012679d:	83 f8 01             	cmp    $0x1,%eax
f01267a0:	74 17                	je     f01267b9 <test_kexpand+0x345>
f01267a2:	83 ec 04             	sub    $0x4,%esp
f01267a5:	68 dc 97 13 f0       	push   $0xf01397dc
f01267aa:	68 57 0b 00 00       	push   $0xb57
f01267af:	68 5a 97 13 f0       	push   $0xf013975a
f01267b4:	e8 f7 99 fd ff       	call   f01001b0 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f01267b9:	c7 85 04 ff ff ff ff 	movl   $0x7ff,-0xfc(%ebp)
f01267c0:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f01267c3:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f01267c9:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f01267cc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01267d3:	eb 0e                	jmp    f01267e3 <test_kexpand+0x36f>
		{
			ptr[i] = 2 ;
f01267d5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01267d8:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01267db:	01 d0                	add    %edx,%eax
f01267dd:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f01267e0:	ff 45 f4             	incl   -0xc(%ebp)
f01267e3:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01267e9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01267ec:	7f e7                	jg     f01267d5 <test_kexpand+0x361>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01267ee:	e8 d3 61 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01267f3:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01267f6:	e8 89 de fd ff       	call   f0104684 <pf_calculate_free_frames>
f01267fb:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f01267fe:	83 ec 0c             	sub    $0xc,%esp
f0126801:	68 00 08 00 00       	push   $0x800
f0126806:	e8 54 17 fe ff       	call   f0107f5f <kmalloc>
f012680b:	83 c4 10             	add    $0x10,%esp
f012680e:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126814:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012681a:	89 c1                	mov    %eax,%ecx
f012681c:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0126823:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0126828:	0f b6 d0             	movzbl %al,%edx
f012682b:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012682e:	01 d0                	add    %edx,%eax
f0126830:	48                   	dec    %eax
f0126831:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0126834:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0126837:	ba 00 00 00 00       	mov    $0x0,%edx
f012683c:	f7 75 a0             	divl   -0x60(%ebp)
f012683f:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0126842:	29 d0                	sub    %edx,%eax
f0126844:	89 c3                	mov    %eax,%ebx
f0126846:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f012684d:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0126852:	0f b6 c0             	movzbl %al,%eax
f0126855:	c1 e0 04             	shl    $0x4,%eax
f0126858:	89 c2                	mov    %eax,%edx
f012685a:	8b 45 98             	mov    -0x68(%ebp),%eax
f012685d:	01 d0                	add    %edx,%eax
f012685f:	48                   	dec    %eax
f0126860:	89 45 94             	mov    %eax,-0x6c(%ebp)
f0126863:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0126866:	ba 00 00 00 00       	mov    $0x0,%edx
f012686b:	f7 75 98             	divl   -0x68(%ebp)
f012686e:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0126871:	29 d0                	sub    %edx,%eax
f0126873:	01 d8                	add    %ebx,%eax
f0126875:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f012687a:	39 c1                	cmp    %eax,%ecx
f012687c:	74 17                	je     f0126895 <test_kexpand+0x421>
f012687e:	83 ec 04             	sub    $0x4,%esp
f0126881:	68 40 98 13 f0       	push   $0xf0139840
f0126886:	68 63 0b 00 00       	push   $0xb63
f012688b:	68 5a 97 13 f0       	push   $0xf013975a
f0126890:	e8 1b 99 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126895:	e8 ea dd fd ff       	call   f0104684 <pf_calculate_free_frames>
f012689a:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012689d:	74 17                	je     f01268b6 <test_kexpand+0x442>
f012689f:	83 ec 04             	sub    $0x4,%esp
f01268a2:	68 74 97 13 f0       	push   $0xf0139774
f01268a7:	68 64 0b 00 00       	push   $0xb64
f01268ac:	68 5a 97 13 f0       	push   $0xf013975a
f01268b1:	e8 fa 98 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01268b6:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01268b9:	e8 08 61 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01268be:	29 c3                	sub    %eax,%ebx
f01268c0:	89 d8                	mov    %ebx,%eax
f01268c2:	83 f8 01             	cmp    $0x1,%eax
f01268c5:	74 17                	je     f01268de <test_kexpand+0x46a>
f01268c7:	83 ec 04             	sub    $0x4,%esp
f01268ca:	68 dc 97 13 f0       	push   $0xf01397dc
f01268cf:	68 65 0b 00 00       	push   $0xb65
f01268d4:	68 5a 97 13 f0       	push   $0xf013975a
f01268d9:	e8 d2 98 fd ff       	call   f01001b0 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f01268de:	c7 85 08 ff ff ff ff 	movl   $0x7ff,-0xf8(%ebp)
f01268e5:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f01268e8:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f01268ee:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f01268f1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01268f8:	eb 0e                	jmp    f0126908 <test_kexpand+0x494>
		{
			ptr[i] = 3 ;
f01268fa:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01268fd:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0126900:	01 d0                	add    %edx,%eax
f0126902:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0126905:	ff 45 f4             	incl   -0xc(%ebp)
f0126908:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012690e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126911:	7f e7                	jg     f01268fa <test_kexpand+0x486>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0126913:	e8 ae 60 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0126918:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012691b:	e8 64 dd fd ff       	call   f0104684 <pf_calculate_free_frames>
f0126920:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0126923:	83 ec 0c             	sub    $0xc,%esp
f0126926:	68 00 1c 00 00       	push   $0x1c00
f012692b:	e8 2f 16 fe ff       	call   f0107f5f <kmalloc>
f0126930:	83 c4 10             	add    $0x10,%esp
f0126933:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126939:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012693f:	89 c1                	mov    %eax,%ecx
f0126941:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f0126948:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012694d:	0f b6 d0             	movzbl %al,%edx
f0126950:	8b 45 90             	mov    -0x70(%ebp),%eax
f0126953:	01 d0                	add    %edx,%eax
f0126955:	48                   	dec    %eax
f0126956:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0126959:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012695c:	ba 00 00 00 00       	mov    $0x0,%edx
f0126961:	f7 75 90             	divl   -0x70(%ebp)
f0126964:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0126967:	29 d0                	sub    %edx,%eax
f0126969:	89 c3                	mov    %eax,%ebx
f012696b:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0126972:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0126977:	0f b6 c0             	movzbl %al,%eax
f012697a:	c1 e0 04             	shl    $0x4,%eax
f012697d:	89 c2                	mov    %eax,%edx
f012697f:	8b 45 88             	mov    -0x78(%ebp),%eax
f0126982:	01 d0                	add    %edx,%eax
f0126984:	48                   	dec    %eax
f0126985:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0126988:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012698b:	ba 00 00 00 00       	mov    $0x0,%edx
f0126990:	f7 75 88             	divl   -0x78(%ebp)
f0126993:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0126996:	29 d0                	sub    %edx,%eax
f0126998:	01 d8                	add    %ebx,%eax
f012699a:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f012699f:	39 c1                	cmp    %eax,%ecx
f01269a1:	74 17                	je     f01269ba <test_kexpand+0x546>
f01269a3:	83 ec 04             	sub    $0x4,%esp
f01269a6:	68 40 98 13 f0       	push   $0xf0139840
f01269ab:	68 71 0b 00 00       	push   $0xb71
f01269b0:	68 5a 97 13 f0       	push   $0xf013975a
f01269b5:	e8 f6 97 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01269ba:	e8 c5 dc fd ff       	call   f0104684 <pf_calculate_free_frames>
f01269bf:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01269c2:	74 17                	je     f01269db <test_kexpand+0x567>
f01269c4:	83 ec 04             	sub    $0x4,%esp
f01269c7:	68 74 97 13 f0       	push   $0xf0139774
f01269cc:	68 72 0b 00 00       	push   $0xb72
f01269d1:	68 5a 97 13 f0       	push   $0xf013975a
f01269d6:	e8 d5 97 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f01269db:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01269de:	e8 e3 5f fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01269e3:	29 c3                	sub    %eax,%ebx
f01269e5:	89 d8                	mov    %ebx,%eax
f01269e7:	83 f8 02             	cmp    $0x2,%eax
f01269ea:	74 17                	je     f0126a03 <test_kexpand+0x58f>
f01269ec:	83 ec 04             	sub    $0x4,%esp
f01269ef:	68 dc 97 13 f0       	push   $0xf01397dc
f01269f4:	68 73 0b 00 00       	push   $0xb73
f01269f9:	68 5a 97 13 f0       	push   $0xf013975a
f01269fe:	e8 ad 97 fd ff       	call   f01001b0 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f0126a03:	c7 85 0c ff ff ff ff 	movl   $0x1bff,-0xf4(%ebp)
f0126a0a:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f0126a0d:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0126a13:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0126a16:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126a1d:	eb 0e                	jmp    f0126a2d <test_kexpand+0x5b9>
		{
			ptr[i] = 4 ;
f0126a1f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0126a22:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0126a25:	01 d0                	add    %edx,%eax
f0126a27:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0126a2a:	ff 45 f4             	incl   -0xc(%ebp)
f0126a2d:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0126a33:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126a36:	7f e7                	jg     f0126a1f <test_kexpand+0x5ab>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0126a38:	e8 89 5f fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0126a3d:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126a40:	e8 3f dc fd ff       	call   f0104684 <pf_calculate_free_frames>
f0126a45:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0126a48:	83 ec 0c             	sub    $0xc,%esp
f0126a4b:	68 00 fc 2f 00       	push   $0x2ffc00
f0126a50:	e8 0a 15 fe ff       	call   f0107f5f <kmalloc>
f0126a55:	83 c4 10             	add    $0x10,%esp
f0126a58:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126a5e:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0126a64:	89 c1                	mov    %eax,%ecx
f0126a66:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f0126a6d:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0126a72:	0f b6 d0             	movzbl %al,%edx
f0126a75:	8b 45 80             	mov    -0x80(%ebp),%eax
f0126a78:	01 d0                	add    %edx,%eax
f0126a7a:	48                   	dec    %eax
f0126a7b:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0126a81:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0126a87:	ba 00 00 00 00       	mov    $0x0,%edx
f0126a8c:	f7 75 80             	divl   -0x80(%ebp)
f0126a8f:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0126a95:	29 d0                	sub    %edx,%eax
f0126a97:	89 c3                	mov    %eax,%ebx
f0126a99:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0126aa0:	10 00 00 
f0126aa3:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0126aa8:	0f b6 c0             	movzbl %al,%eax
f0126aab:	c1 e0 04             	shl    $0x4,%eax
f0126aae:	89 c2                	mov    %eax,%edx
f0126ab0:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0126ab6:	01 d0                	add    %edx,%eax
f0126ab8:	48                   	dec    %eax
f0126ab9:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0126abf:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0126ac5:	ba 00 00 00 00       	mov    $0x0,%edx
f0126aca:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f0126ad0:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0126ad6:	29 d0                	sub    %edx,%eax
f0126ad8:	01 d8                	add    %ebx,%eax
f0126ada:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0126adf:	39 c1                	cmp    %eax,%ecx
f0126ae1:	74 17                	je     f0126afa <test_kexpand+0x686>
f0126ae3:	83 ec 04             	sub    $0x4,%esp
f0126ae6:	68 40 98 13 f0       	push   $0xf0139840
f0126aeb:	68 7f 0b 00 00       	push   $0xb7f
f0126af0:	68 5a 97 13 f0       	push   $0xf013975a
f0126af5:	e8 b6 96 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126afa:	e8 85 db fd ff       	call   f0104684 <pf_calculate_free_frames>
f0126aff:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0126b02:	74 17                	je     f0126b1b <test_kexpand+0x6a7>
f0126b04:	83 ec 04             	sub    $0x4,%esp
f0126b07:	68 74 97 13 f0       	push   $0xf0139774
f0126b0c:	68 80 0b 00 00       	push   $0xb80
f0126b11:	68 5a 97 13 f0       	push   $0xf013975a
f0126b16:	e8 95 96 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126b1b:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0126b1e:	e8 a3 5e fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0126b23:	29 c3                	sub    %eax,%ebx
f0126b25:	89 d8                	mov    %ebx,%eax
f0126b27:	3d 00 03 00 00       	cmp    $0x300,%eax
f0126b2c:	74 17                	je     f0126b45 <test_kexpand+0x6d1>
f0126b2e:	83 ec 04             	sub    $0x4,%esp
f0126b31:	68 dc 97 13 f0       	push   $0xf01397dc
f0126b36:	68 81 0b 00 00       	push   $0xb81
f0126b3b:	68 5a 97 13 f0       	push   $0xf013975a
f0126b40:	e8 6b 96 fd ff       	call   f01001b0 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f0126b45:	c7 85 10 ff ff ff ff 	movl   $0x2ffbff,-0xf0(%ebp)
f0126b4c:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f0126b4f:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0126b55:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0126b58:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126b5f:	eb 0e                	jmp    f0126b6f <test_kexpand+0x6fb>
		{
			ptr[i] = 5 ;
f0126b61:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0126b64:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0126b67:	01 d0                	add    %edx,%eax
f0126b69:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0126b6c:	ff 45 f4             	incl   -0xc(%ebp)
f0126b6f:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0126b75:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126b78:	7f e7                	jg     f0126b61 <test_kexpand+0x6ed>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0126b7a:	e8 47 5e fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0126b7f:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126b82:	e8 fd da fd ff       	call   f0104684 <pf_calculate_free_frames>
f0126b87:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega);
f0126b8a:	83 ec 0c             	sub    $0xc,%esp
f0126b8d:	68 00 00 60 00       	push   $0x600000
f0126b92:	e8 c8 13 fe ff       	call   f0107f5f <kmalloc>
f0126b97:	83 c4 10             	add    $0x10,%esp
f0126b9a:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126ba0:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0126ba6:	89 c1                	mov    %eax,%ecx
f0126ba8:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0126baf:	10 00 00 
f0126bb2:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0126bb7:	0f b6 d0             	movzbl %al,%edx
f0126bba:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0126bc0:	01 d0                	add    %edx,%eax
f0126bc2:	48                   	dec    %eax
f0126bc3:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f0126bc9:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0126bcf:	ba 00 00 00 00       	mov    $0x0,%edx
f0126bd4:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f0126bda:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0126be0:	29 d0                	sub    %edx,%eax
f0126be2:	89 c3                	mov    %eax,%ebx
f0126be4:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0126beb:	10 00 00 
f0126bee:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0126bf3:	0f b6 c0             	movzbl %al,%eax
f0126bf6:	c1 e0 04             	shl    $0x4,%eax
f0126bf9:	89 c2                	mov    %eax,%edx
f0126bfb:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0126c01:	01 d0                	add    %edx,%eax
f0126c03:	48                   	dec    %eax
f0126c04:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0126c0a:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0126c10:	ba 00 00 00 00       	mov    $0x0,%edx
f0126c15:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0126c1b:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0126c21:	29 d0                	sub    %edx,%eax
f0126c23:	01 d8                	add    %ebx,%eax
f0126c25:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0126c2a:	39 c1                	cmp    %eax,%ecx
f0126c2c:	74 17                	je     f0126c45 <test_kexpand+0x7d1>
f0126c2e:	83 ec 04             	sub    $0x4,%esp
f0126c31:	68 40 98 13 f0       	push   $0xf0139840
f0126c36:	68 8d 0b 00 00       	push   $0xb8d
f0126c3b:	68 5a 97 13 f0       	push   $0xf013975a
f0126c40:	e8 6b 95 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126c45:	e8 3a da fd ff       	call   f0104684 <pf_calculate_free_frames>
f0126c4a:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0126c4d:	74 17                	je     f0126c66 <test_kexpand+0x7f2>
f0126c4f:	83 ec 04             	sub    $0x4,%esp
f0126c52:	68 74 97 13 f0       	push   $0xf0139774
f0126c57:	68 8e 0b 00 00       	push   $0xb8e
f0126c5c:	68 5a 97 13 f0       	push   $0xf013975a
f0126c61:	e8 4a 95 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126c66:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0126c69:	e8 58 5d fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0126c6e:	29 c3                	sub    %eax,%ebx
f0126c70:	89 d8                	mov    %ebx,%eax
f0126c72:	3d 00 06 00 00       	cmp    $0x600,%eax
f0126c77:	74 17                	je     f0126c90 <test_kexpand+0x81c>
f0126c79:	83 ec 04             	sub    $0x4,%esp
f0126c7c:	68 dc 97 13 f0       	push   $0xf01397dc
f0126c81:	68 8f 0b 00 00       	push   $0xb8f
f0126c86:	68 5a 97 13 f0       	push   $0xf013975a
f0126c8b:	e8 20 95 fd ff       	call   f01001b0 <_panic>
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
f0126c90:	c7 85 14 ff ff ff ff 	movl   $0x17ffff,-0xec(%ebp)
f0126c97:	ff 17 00 
		arr = (uint32*)ptr_allocations[6];
f0126c9a:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0126ca0:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
		for (i = 0; i <= lastIndices[6]; ++i)
f0126ca6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126cad:	eb 1a                	jmp    f0126cc9 <test_kexpand+0x855>
		{
			arr[i] = i ;
f0126caf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0126cb2:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0126cb9:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0126cbf:	01 c2                	add    %eax,%edx
f0126cc1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0126cc4:	89 02                	mov    %eax,(%edx)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
		arr = (uint32*)ptr_allocations[6];
		for (i = 0; i <= lastIndices[6]; ++i)
f0126cc6:	ff 45 f4             	incl   -0xc(%ebp)
f0126cc9:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0126ccf:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126cd2:	7d db                	jge    f0126caf <test_kexpand+0x83b>
			arr[i] = i ;
		}
	}

	//Expand last allocated variable to 7 MB instead of 6 MB
	int newLastIndex = (7*Mega)/sizeof(uint32) - 1;
f0126cd4:	c7 85 5c ff ff ff ff 	movl   $0x1bffff,-0xa4(%ebp)
f0126cdb:	ff 1b 00 
	{
		freeFrames = sys_calculate_free_frames() ;
f0126cde:	e8 e3 5c fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0126ce3:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126ce6:	e8 99 d9 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0126ceb:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kexpand(7*Mega) ;
f0126cee:	83 ec 0c             	sub    $0xc,%esp
f0126cf1:	68 00 00 70 00       	push   $0x700000
f0126cf6:	e8 00 13 fe ff       	call   f0107ffb <kexpand>
f0126cfb:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0126cfe:	e8 81 d9 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0126d03:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0126d06:	74 19                	je     f0126d21 <test_kexpand+0x8ad>
f0126d08:	68 f4 a4 13 f0       	push   $0xf013a4f4
f0126d0d:	68 25 a5 13 f0       	push   $0xf013a525
f0126d12:	68 a0 0b 00 00       	push   $0xba0
f0126d17:	68 5a 97 13 f0       	push   $0xf013975a
f0126d1c:	e8 8f 94 fd ff       	call   f01001b0 <_panic>
		assert(freeFrames - sys_calculate_free_frames() == 256) ;
f0126d21:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0126d24:	e8 9d 5c fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0126d29:	29 c3                	sub    %eax,%ebx
f0126d2b:	89 d8                	mov    %ebx,%eax
f0126d2d:	3d 00 01 00 00       	cmp    $0x100,%eax
f0126d32:	74 19                	je     f0126d4d <test_kexpand+0x8d9>
f0126d34:	68 3c a5 13 f0       	push   $0xf013a53c
f0126d39:	68 25 a5 13 f0       	push   $0xf013a525
f0126d3e:	68 a1 0b 00 00       	push   $0xba1
f0126d43:	68 5a 97 13 f0       	push   $0xf013975a
f0126d48:	e8 63 94 fd ff       	call   f01001b0 <_panic>

		for (i = lastIndices[6]; i < newLastIndex ; ++i)
f0126d4d:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0126d53:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0126d56:	eb 1a                	jmp    f0126d72 <test_kexpand+0x8fe>
		{
			arr[i] = i ;
f0126d58:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0126d5b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0126d62:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0126d68:	01 c2                	add    %eax,%edx
f0126d6a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0126d6d:	89 02                	mov    %eax,(%edx)
		kexpand(7*Mega) ;

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
		assert(freeFrames - sys_calculate_free_frames() == 256) ;

		for (i = lastIndices[6]; i < newLastIndex ; ++i)
f0126d6f:	ff 45 f4             	incl   -0xc(%ebp)
f0126d72:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0126d75:	3b 85 5c ff ff ff    	cmp    -0xa4(%ebp),%eax
f0126d7b:	7c db                	jl     f0126d58 <test_kexpand+0x8e4>
		}
	}

	//Access elements after expansion
	{
		for (i = 0; i < newLastIndex ; ++i)
f0126d7d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126d84:	eb 37                	jmp    f0126dbd <test_kexpand+0x949>
		{
			assert(arr[i] ==i);
f0126d86:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0126d89:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0126d90:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0126d96:	01 d0                	add    %edx,%eax
f0126d98:	8b 10                	mov    (%eax),%edx
f0126d9a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0126d9d:	39 c2                	cmp    %eax,%edx
f0126d9f:	74 19                	je     f0126dba <test_kexpand+0x946>
f0126da1:	68 6c a5 13 f0       	push   $0xf013a56c
f0126da6:	68 25 a5 13 f0       	push   $0xf013a525
f0126dab:	68 ad 0b 00 00       	push   $0xbad
f0126db0:	68 5a 97 13 f0       	push   $0xf013975a
f0126db5:	e8 f6 93 fd ff       	call   f01001b0 <_panic>
		}
	}

	//Access elements after expansion
	{
		for (i = 0; i < newLastIndex ; ++i)
f0126dba:	ff 45 f4             	incl   -0xc(%ebp)
f0126dbd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0126dc0:	3b 85 5c ff ff ff    	cmp    -0xa4(%ebp),%eax
f0126dc6:	7c be                	jl     f0126d86 <test_kexpand+0x912>
		}
	}

	//Expand it again to 10 MB instead of 7 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f0126dc8:	e8 f9 5b fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0126dcd:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126dd0:	e8 af d8 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0126dd5:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kexpand(10*Mega) ;
f0126dd8:	83 ec 0c             	sub    $0xc,%esp
f0126ddb:	68 00 00 a0 00       	push   $0xa00000
f0126de0:	e8 16 12 fe ff       	call   f0107ffb <kexpand>
f0126de5:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0126de8:	e8 97 d8 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0126ded:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0126df0:	74 19                	je     f0126e0b <test_kexpand+0x997>
f0126df2:	68 f4 a4 13 f0       	push   $0xf013a4f4
f0126df7:	68 25 a5 13 f0       	push   $0xf013a525
f0126dfc:	68 b8 0b 00 00       	push   $0xbb8
f0126e01:	68 5a 97 13 f0       	push   $0xf013975a
f0126e06:	e8 a5 93 fd ff       	call   f01001b0 <_panic>
		assert(freeFrames - sys_calculate_free_frames() == 768) ;
f0126e0b:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0126e0e:	e8 b3 5b fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0126e13:	29 c3                	sub    %eax,%ebx
f0126e15:	89 d8                	mov    %ebx,%eax
f0126e17:	3d 00 03 00 00       	cmp    $0x300,%eax
f0126e1c:	74 19                	je     f0126e37 <test_kexpand+0x9c3>
f0126e1e:	68 78 a5 13 f0       	push   $0xf013a578
f0126e23:	68 25 a5 13 f0       	push   $0xf013a525
f0126e28:	68 b9 0b 00 00       	push   $0xbb9
f0126e2d:	68 5a 97 13 f0       	push   $0xf013975a
f0126e32:	e8 79 93 fd ff       	call   f01001b0 <_panic>


	//Allocate after expanding last var
	{
		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f0126e37:	e8 8a 5b fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0126e3c:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126e3f:	e8 40 d8 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0126e44:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(4*Mega);
f0126e47:	83 ec 0c             	sub    $0xc,%esp
f0126e4a:	68 00 00 40 00       	push   $0x400000
f0126e4f:	e8 0b 11 fe ff       	call   f0107f5f <kmalloc>
f0126e54:	83 c4 10             	add    $0x10,%esp
f0126e57:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)

		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 7*Mega + 16*kilo + 10*Mega)) panic("Wrong start address after kexpand()... ");
f0126e5d:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0126e63:	89 c1                	mov    %eax,%ecx
f0126e65:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f0126e6c:	10 00 00 
f0126e6f:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0126e74:	0f b6 d0             	movzbl %al,%edx
f0126e77:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0126e7d:	01 d0                	add    %edx,%eax
f0126e7f:	48                   	dec    %eax
f0126e80:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f0126e86:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0126e8c:	ba 00 00 00 00       	mov    $0x0,%edx
f0126e91:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f0126e97:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0126e9d:	29 d0                	sub    %edx,%eax
f0126e9f:	89 c3                	mov    %eax,%ebx
f0126ea1:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f0126ea8:	10 00 00 
f0126eab:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0126eb0:	0f b6 c0             	movzbl %al,%eax
f0126eb3:	c1 e0 04             	shl    $0x4,%eax
f0126eb6:	89 c2                	mov    %eax,%edx
f0126eb8:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0126ebe:	01 d0                	add    %edx,%eax
f0126ec0:	48                   	dec    %eax
f0126ec1:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f0126ec7:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0126ecd:	ba 00 00 00 00       	mov    $0x0,%edx
f0126ed2:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f0126ed8:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0126ede:	29 d0                	sub    %edx,%eax
f0126ee0:	01 d8                	add    %ebx,%eax
f0126ee2:	2d 00 80 ef 08       	sub    $0x8ef8000,%eax
f0126ee7:	39 c1                	cmp    %eax,%ecx
f0126ee9:	74 17                	je     f0126f02 <test_kexpand+0xa8e>
f0126eeb:	83 ec 04             	sub    $0x4,%esp
f0126eee:	68 a8 a5 13 f0       	push   $0xf013a5a8
f0126ef3:	68 c4 0b 00 00       	push   $0xbc4
f0126ef8:	68 5a 97 13 f0       	push   $0xf013975a
f0126efd:	e8 ae 92 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126f02:	e8 7d d7 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0126f07:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0126f0a:	74 17                	je     f0126f23 <test_kexpand+0xaaf>
f0126f0c:	83 ec 04             	sub    $0x4,%esp
f0126f0f:	68 74 97 13 f0       	push   $0xf0139774
f0126f14:	68 c5 0b 00 00       	push   $0xbc5
f0126f19:	68 5a 97 13 f0       	push   $0xf013975a
f0126f1e:	e8 8d 92 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4*Mega/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126f23:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0126f26:	e8 9b 5a fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0126f2b:	29 c3                	sub    %eax,%ebx
f0126f2d:	89 d8                	mov    %ebx,%eax
f0126f2f:	3d 00 04 00 00       	cmp    $0x400,%eax
f0126f34:	74 17                	je     f0126f4d <test_kexpand+0xad9>
f0126f36:	83 ec 04             	sub    $0x4,%esp
f0126f39:	68 dc 97 13 f0       	push   $0xf01397dc
f0126f3e:	68 c6 0b 00 00       	push   $0xbc6
f0126f43:	68 5a 97 13 f0       	push   $0xf013975a
f0126f48:	e8 63 92 fd ff       	call   f01001b0 <_panic>
	}

	//kfree the expanded variable
	{
		//kfree 10 MB (expanded)
		freeFrames = sys_calculate_free_frames() ;
f0126f4d:	e8 74 5a fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0126f52:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126f55:	e8 2a d7 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0126f5a:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[6]);
f0126f5d:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0126f63:	83 ec 0c             	sub    $0xc,%esp
f0126f66:	50                   	push   %eax
f0126f67:	e8 0d 10 fe ff       	call   f0107f79 <kfree>
f0126f6c:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126f6f:	e8 10 d7 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0126f74:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0126f77:	74 17                	je     f0126f90 <test_kexpand+0xb1c>
f0126f79:	83 ec 04             	sub    $0x4,%esp
f0126f7c:	68 74 97 13 f0       	push   $0xf0139774
f0126f81:	68 cf 0b 00 00       	push   $0xbcf
f0126f86:	68 5a 97 13 f0       	push   $0xf013975a
f0126f8b:	e8 20 92 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 10*Mega/PAGE_SIZE) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0126f90:	e8 31 5a fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0126f95:	89 c2                	mov    %eax,%edx
f0126f97:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0126f9a:	29 c2                	sub    %eax,%edx
f0126f9c:	89 d0                	mov    %edx,%eax
f0126f9e:	3d 00 0a 00 00       	cmp    $0xa00,%eax
f0126fa3:	74 17                	je     f0126fbc <test_kexpand+0xb48>
f0126fa5:	83 ec 04             	sub    $0x4,%esp
f0126fa8:	68 0c a0 13 f0       	push   $0xf013a00c
f0126fad:	68 d0 0b 00 00       	push   $0xbd0
f0126fb2:	68 5a 97 13 f0       	push   $0xf013975a
f0126fb7:	e8 f4 91 fd ff       	call   f01001b0 <_panic>
	}

	//Expand last allocated variable to 4 MB + 20 kilo instead of 4 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f0126fbc:	e8 05 5a fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0126fc1:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126fc4:	e8 bb d6 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0126fc9:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kexpand(4*Mega + 20*kilo) ;
f0126fcc:	83 ec 0c             	sub    $0xc,%esp
f0126fcf:	68 00 50 40 00       	push   $0x405000
f0126fd4:	e8 22 10 fe ff       	call   f0107ffb <kexpand>
f0126fd9:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0126fdc:	e8 a3 d6 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0126fe1:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0126fe4:	74 19                	je     f0126fff <test_kexpand+0xb8b>
f0126fe6:	68 f4 a4 13 f0       	push   $0xf013a4f4
f0126feb:	68 25 a5 13 f0       	push   $0xf013a525
f0126ff0:	68 da 0b 00 00       	push   $0xbda
f0126ff5:	68 5a 97 13 f0       	push   $0xf013975a
f0126ffa:	e8 b1 91 fd ff       	call   f01001b0 <_panic>
		assert(freeFrames - sys_calculate_free_frames()  == 5) ;
f0126fff:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0127002:	e8 bf 59 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0127007:	29 c3                	sub    %eax,%ebx
f0127009:	89 d8                	mov    %ebx,%eax
f012700b:	83 f8 05             	cmp    $0x5,%eax
f012700e:	74 19                	je     f0127029 <test_kexpand+0xbb5>
f0127010:	68 d0 a5 13 f0       	push   $0xf013a5d0
f0127015:	68 25 a5 13 f0       	push   $0xf013a525
f012701a:	68 db 0b 00 00       	push   $0xbdb
f012701f:	68 5a 97 13 f0       	push   $0xf013975a
f0127024:	e8 87 91 fd ff       	call   f01001b0 <_panic>
	}

	cprintf("\nCongratulations!! your modification is run successfully.\n");
f0127029:	83 ec 0c             	sub    $0xc,%esp
f012702c:	68 b8 a4 13 f0       	push   $0xf013a4b8
f0127031:	e8 fb 9d fd ff       	call   f0100e31 <cprintf>
f0127036:	83 c4 10             	add    $0x10,%esp

	return 1;
f0127039:	b8 01 00 00 00       	mov    $0x1,%eax
}
f012703e:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0127041:	5b                   	pop    %ebx
f0127042:	5f                   	pop    %edi
f0127043:	5d                   	pop    %ebp
f0127044:	c3                   	ret    

f0127045 <test_kshrink>:

extern void kshrink(uint32 newSize) ;

int test_kshrink()
{
f0127045:	55                   	push   %ebp
f0127046:	89 e5                	mov    %esp,%ebp
f0127048:	57                   	push   %edi
f0127049:	53                   	push   %ebx
f012704a:	81 ec 60 01 00 00    	sub    $0x160,%esp
	char minByte = 1<<7;
f0127050:	c6 45 f3 80          	movb   $0x80,-0xd(%ebp)
	char maxByte = 0x7F;
f0127054:	c6 45 f2 7f          	movb   $0x7f,-0xe(%ebp)
	short minShort = 1<<15 ;
f0127058:	66 c7 45 f0 00 80    	movw   $0x8000,-0x10(%ebp)
	short maxShort = 0x7FFF;
f012705e:	66 c7 45 ee ff 7f    	movw   $0x7fff,-0x12(%ebp)
	int minInt = 1<<31 ;
f0127064:	c7 45 e8 00 00 00 80 	movl   $0x80000000,-0x18(%ebp)
	int maxInt = 0x7FFFFFFF;
f012706b:	c7 45 e4 ff ff ff 7f 	movl   $0x7fffffff,-0x1c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0127072:	e8 4f 59 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0127077:	89 45 e0             	mov    %eax,-0x20(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f012707a:	8d 95 ec fe ff ff    	lea    -0x114(%ebp),%edx
f0127080:	b9 14 00 00 00       	mov    $0x14,%ecx
f0127085:	b8 00 00 00 00       	mov    $0x0,%eax
f012708a:	89 d7                	mov    %edx,%edi
f012708c:	f3 ab                	rep stos %eax,%es:(%edi)

	uint32 *arr;
	void* ptr_allocations[20] = {0};
f012708e:	8d 95 9c fe ff ff    	lea    -0x164(%ebp),%edx
f0127094:	b9 14 00 00 00       	mov    $0x14,%ecx
f0127099:	b8 00 00 00 00       	mov    $0x0,%eax
f012709e:	89 d7                	mov    %edx,%edi
f01270a0:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01270a2:	e8 1f 59 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01270a7:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01270aa:	e8 d5 d5 fd ff       	call   f0104684 <pf_calculate_free_frames>
f01270af:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f01270b2:	83 ec 0c             	sub    $0xc,%esp
f01270b5:	68 00 fc 1f 00       	push   $0x1ffc00
f01270ba:	e8 a0 0e fe ff       	call   f0107f5f <kmalloc>
f01270bf:	83 c4 10             	add    $0x10,%esp
f01270c2:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01270c8:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f01270ce:	89 c1                	mov    %eax,%ecx
f01270d0:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f01270d7:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01270dc:	0f b6 d0             	movzbl %al,%edx
f01270df:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01270e2:	01 d0                	add    %edx,%eax
f01270e4:	48                   	dec    %eax
f01270e5:	89 45 d0             	mov    %eax,-0x30(%ebp)
f01270e8:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01270eb:	ba 00 00 00 00       	mov    $0x0,%edx
f01270f0:	f7 75 d4             	divl   -0x2c(%ebp)
f01270f3:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01270f6:	29 d0                	sub    %edx,%eax
f01270f8:	89 c3                	mov    %eax,%ebx
f01270fa:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0127101:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0127106:	0f b6 c0             	movzbl %al,%eax
f0127109:	c1 e0 04             	shl    $0x4,%eax
f012710c:	89 c2                	mov    %eax,%edx
f012710e:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0127111:	01 d0                	add    %edx,%eax
f0127113:	48                   	dec    %eax
f0127114:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0127117:	8b 45 c8             	mov    -0x38(%ebp),%eax
f012711a:	ba 00 00 00 00       	mov    $0x0,%edx
f012711f:	f7 75 cc             	divl   -0x34(%ebp)
f0127122:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0127125:	29 d0                	sub    %edx,%eax
f0127127:	01 d8                	add    %ebx,%eax
f0127129:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f012712e:	39 c1                	cmp    %eax,%ecx
f0127130:	74 17                	je     f0127149 <test_kshrink+0x104>
f0127132:	83 ec 04             	sub    $0x4,%esp
f0127135:	68 40 98 13 f0       	push   $0xf0139840
f012713a:	68 01 0c 00 00       	push   $0xc01
f012713f:	68 5a 97 13 f0       	push   $0xf013975a
f0127144:	e8 67 90 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127149:	e8 36 d5 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012714e:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127151:	74 17                	je     f012716a <test_kshrink+0x125>
f0127153:	83 ec 04             	sub    $0x4,%esp
f0127156:	68 74 97 13 f0       	push   $0xf0139774
f012715b:	68 02 0c 00 00       	push   $0xc02
f0127160:	68 5a 97 13 f0       	push   $0xf013975a
f0127165:	e8 46 90 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f012716a:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f012716d:	e8 54 58 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0127172:	29 c3                	sub    %eax,%ebx
f0127174:	89 d8                	mov    %ebx,%eax
f0127176:	3d 00 02 00 00       	cmp    $0x200,%eax
f012717b:	74 17                	je     f0127194 <test_kshrink+0x14f>
f012717d:	83 ec 04             	sub    $0x4,%esp
f0127180:	68 dc 97 13 f0       	push   $0xf01397dc
f0127185:	68 03 0c 00 00       	push   $0xc03
f012718a:	68 5a 97 13 f0       	push   $0xf013975a
f012718f:	e8 1c 90 fd ff       	call   f01001b0 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f0127194:	c7 85 ec fe ff ff ff 	movl   $0x1ffbff,-0x114(%ebp)
f012719b:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f012719e:	e8 23 58 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01271a3:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01271a6:	e8 d9 d4 fd ff       	call   f0104684 <pf_calculate_free_frames>
f01271ab:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f01271ae:	83 ec 0c             	sub    $0xc,%esp
f01271b1:	68 00 fc 1f 00       	push   $0x1ffc00
f01271b6:	e8 a4 0d fe ff       	call   f0107f5f <kmalloc>
f01271bb:	83 c4 10             	add    $0x10,%esp
f01271be:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01271c4:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f01271ca:	89 c1                	mov    %eax,%ecx
f01271cc:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f01271d3:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01271d8:	0f b6 d0             	movzbl %al,%edx
f01271db:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01271de:	01 d0                	add    %edx,%eax
f01271e0:	48                   	dec    %eax
f01271e1:	89 45 c0             	mov    %eax,-0x40(%ebp)
f01271e4:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01271e7:	ba 00 00 00 00       	mov    $0x0,%edx
f01271ec:	f7 75 c4             	divl   -0x3c(%ebp)
f01271ef:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01271f2:	29 d0                	sub    %edx,%eax
f01271f4:	89 c3                	mov    %eax,%ebx
f01271f6:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f01271fd:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0127202:	0f b6 c0             	movzbl %al,%eax
f0127205:	c1 e0 04             	shl    $0x4,%eax
f0127208:	89 c2                	mov    %eax,%edx
f012720a:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012720d:	01 d0                	add    %edx,%eax
f012720f:	48                   	dec    %eax
f0127210:	89 45 b8             	mov    %eax,-0x48(%ebp)
f0127213:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0127216:	ba 00 00 00 00       	mov    $0x0,%edx
f012721b:	f7 75 bc             	divl   -0x44(%ebp)
f012721e:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0127221:	29 d0                	sub    %edx,%eax
f0127223:	01 d8                	add    %ebx,%eax
f0127225:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f012722a:	39 c1                	cmp    %eax,%ecx
f012722c:	74 17                	je     f0127245 <test_kshrink+0x200>
f012722e:	83 ec 04             	sub    $0x4,%esp
f0127231:	68 40 98 13 f0       	push   $0xf0139840
f0127236:	68 0a 0c 00 00       	push   $0xc0a
f012723b:	68 5a 97 13 f0       	push   $0xf013975a
f0127240:	e8 6b 8f fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127245:	e8 3a d4 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012724a:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012724d:	74 17                	je     f0127266 <test_kshrink+0x221>
f012724f:	83 ec 04             	sub    $0x4,%esp
f0127252:	68 74 97 13 f0       	push   $0xf0139774
f0127257:	68 0b 0c 00 00       	push   $0xc0b
f012725c:	68 5a 97 13 f0       	push   $0xf013975a
f0127261:	e8 4a 8f fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127266:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0127269:	e8 58 57 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012726e:	29 c3                	sub    %eax,%ebx
f0127270:	89 d8                	mov    %ebx,%eax
f0127272:	3d 00 02 00 00       	cmp    $0x200,%eax
f0127277:	74 17                	je     f0127290 <test_kshrink+0x24b>
f0127279:	83 ec 04             	sub    $0x4,%esp
f012727c:	68 dc 97 13 f0       	push   $0xf01397dc
f0127281:	68 0c 0c 00 00       	push   $0xc0c
f0127286:	68 5a 97 13 f0       	push   $0xf013975a
f012728b:	e8 20 8f fd ff       	call   f01001b0 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f0127290:	c7 85 f0 fe ff ff ff 	movl   $0x1ffbff,-0x110(%ebp)
f0127297:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f012729a:	e8 27 57 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012729f:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01272a2:	e8 dd d3 fd ff       	call   f0104684 <pf_calculate_free_frames>
f01272a7:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f01272aa:	83 ec 0c             	sub    $0xc,%esp
f01272ad:	68 00 08 00 00       	push   $0x800
f01272b2:	e8 a8 0c fe ff       	call   f0107f5f <kmalloc>
f01272b7:	83 c4 10             	add    $0x10,%esp
f01272ba:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01272c0:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f01272c6:	89 c1                	mov    %eax,%ecx
f01272c8:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f01272cf:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01272d4:	0f b6 d0             	movzbl %al,%edx
f01272d7:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01272da:	01 d0                	add    %edx,%eax
f01272dc:	48                   	dec    %eax
f01272dd:	89 45 b0             	mov    %eax,-0x50(%ebp)
f01272e0:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01272e3:	ba 00 00 00 00       	mov    $0x0,%edx
f01272e8:	f7 75 b4             	divl   -0x4c(%ebp)
f01272eb:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01272ee:	29 d0                	sub    %edx,%eax
f01272f0:	89 c3                	mov    %eax,%ebx
f01272f2:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f01272f9:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01272fe:	0f b6 c0             	movzbl %al,%eax
f0127301:	c1 e0 04             	shl    $0x4,%eax
f0127304:	89 c2                	mov    %eax,%edx
f0127306:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0127309:	01 d0                	add    %edx,%eax
f012730b:	48                   	dec    %eax
f012730c:	89 45 a8             	mov    %eax,-0x58(%ebp)
f012730f:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0127312:	ba 00 00 00 00       	mov    $0x0,%edx
f0127317:	f7 75 ac             	divl   -0x54(%ebp)
f012731a:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012731d:	29 d0                	sub    %edx,%eax
f012731f:	01 d8                	add    %ebx,%eax
f0127321:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0127326:	39 c1                	cmp    %eax,%ecx
f0127328:	74 17                	je     f0127341 <test_kshrink+0x2fc>
f012732a:	83 ec 04             	sub    $0x4,%esp
f012732d:	68 40 98 13 f0       	push   $0xf0139840
f0127332:	68 13 0c 00 00       	push   $0xc13
f0127337:	68 5a 97 13 f0       	push   $0xf013975a
f012733c:	e8 6f 8e fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127341:	e8 3e d3 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0127346:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127349:	74 17                	je     f0127362 <test_kshrink+0x31d>
f012734b:	83 ec 04             	sub    $0x4,%esp
f012734e:	68 74 97 13 f0       	push   $0xf0139774
f0127353:	68 14 0c 00 00       	push   $0xc14
f0127358:	68 5a 97 13 f0       	push   $0xf013975a
f012735d:	e8 4e 8e fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127362:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0127365:	e8 5c 56 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012736a:	29 c3                	sub    %eax,%ebx
f012736c:	89 d8                	mov    %ebx,%eax
f012736e:	83 f8 01             	cmp    $0x1,%eax
f0127371:	74 17                	je     f012738a <test_kshrink+0x345>
f0127373:	83 ec 04             	sub    $0x4,%esp
f0127376:	68 dc 97 13 f0       	push   $0xf01397dc
f012737b:	68 15 0c 00 00       	push   $0xc15
f0127380:	68 5a 97 13 f0       	push   $0xf013975a
f0127385:	e8 26 8e fd ff       	call   f01001b0 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f012738a:	c7 85 f4 fe ff ff ff 	movl   $0x7ff,-0x10c(%ebp)
f0127391:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f0127394:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012739a:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f012739d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01273a4:	eb 0e                	jmp    f01273b4 <test_kshrink+0x36f>
		{
			ptr[i] = 2 ;
f01273a6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01273a9:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01273ac:	01 d0                	add    %edx,%eax
f01273ae:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f01273b1:	ff 45 f4             	incl   -0xc(%ebp)
f01273b4:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f01273ba:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01273bd:	7f e7                	jg     f01273a6 <test_kshrink+0x361>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01273bf:	e8 02 56 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01273c4:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01273c7:	e8 b8 d2 fd ff       	call   f0104684 <pf_calculate_free_frames>
f01273cc:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f01273cf:	83 ec 0c             	sub    $0xc,%esp
f01273d2:	68 00 08 00 00       	push   $0x800
f01273d7:	e8 83 0b fe ff       	call   f0107f5f <kmalloc>
f01273dc:	83 c4 10             	add    $0x10,%esp
f01273df:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01273e5:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f01273eb:	89 c1                	mov    %eax,%ecx
f01273ed:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f01273f4:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01273f9:	0f b6 d0             	movzbl %al,%edx
f01273fc:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01273ff:	01 d0                	add    %edx,%eax
f0127401:	48                   	dec    %eax
f0127402:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0127405:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0127408:	ba 00 00 00 00       	mov    $0x0,%edx
f012740d:	f7 75 a0             	divl   -0x60(%ebp)
f0127410:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0127413:	29 d0                	sub    %edx,%eax
f0127415:	89 c3                	mov    %eax,%ebx
f0127417:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f012741e:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0127423:	0f b6 c0             	movzbl %al,%eax
f0127426:	c1 e0 04             	shl    $0x4,%eax
f0127429:	89 c2                	mov    %eax,%edx
f012742b:	8b 45 98             	mov    -0x68(%ebp),%eax
f012742e:	01 d0                	add    %edx,%eax
f0127430:	48                   	dec    %eax
f0127431:	89 45 94             	mov    %eax,-0x6c(%ebp)
f0127434:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0127437:	ba 00 00 00 00       	mov    $0x0,%edx
f012743c:	f7 75 98             	divl   -0x68(%ebp)
f012743f:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0127442:	29 d0                	sub    %edx,%eax
f0127444:	01 d8                	add    %ebx,%eax
f0127446:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f012744b:	39 c1                	cmp    %eax,%ecx
f012744d:	74 17                	je     f0127466 <test_kshrink+0x421>
f012744f:	83 ec 04             	sub    $0x4,%esp
f0127452:	68 40 98 13 f0       	push   $0xf0139840
f0127457:	68 21 0c 00 00       	push   $0xc21
f012745c:	68 5a 97 13 f0       	push   $0xf013975a
f0127461:	e8 4a 8d fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127466:	e8 19 d2 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012746b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012746e:	74 17                	je     f0127487 <test_kshrink+0x442>
f0127470:	83 ec 04             	sub    $0x4,%esp
f0127473:	68 74 97 13 f0       	push   $0xf0139774
f0127478:	68 22 0c 00 00       	push   $0xc22
f012747d:	68 5a 97 13 f0       	push   $0xf013975a
f0127482:	e8 29 8d fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127487:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f012748a:	e8 37 55 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012748f:	29 c3                	sub    %eax,%ebx
f0127491:	89 d8                	mov    %ebx,%eax
f0127493:	83 f8 01             	cmp    $0x1,%eax
f0127496:	74 17                	je     f01274af <test_kshrink+0x46a>
f0127498:	83 ec 04             	sub    $0x4,%esp
f012749b:	68 dc 97 13 f0       	push   $0xf01397dc
f01274a0:	68 23 0c 00 00       	push   $0xc23
f01274a5:	68 5a 97 13 f0       	push   $0xf013975a
f01274aa:	e8 01 8d fd ff       	call   f01001b0 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f01274af:	c7 85 f8 fe ff ff ff 	movl   $0x7ff,-0x108(%ebp)
f01274b6:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f01274b9:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f01274bf:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f01274c2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01274c9:	eb 0e                	jmp    f01274d9 <test_kshrink+0x494>
		{
			ptr[i] = 3 ;
f01274cb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01274ce:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01274d1:	01 d0                	add    %edx,%eax
f01274d3:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f01274d6:	ff 45 f4             	incl   -0xc(%ebp)
f01274d9:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f01274df:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01274e2:	7f e7                	jg     f01274cb <test_kshrink+0x486>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f01274e4:	e8 dd 54 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01274e9:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01274ec:	e8 93 d1 fd ff       	call   f0104684 <pf_calculate_free_frames>
f01274f1:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f01274f4:	83 ec 0c             	sub    $0xc,%esp
f01274f7:	68 00 1c 00 00       	push   $0x1c00
f01274fc:	e8 5e 0a fe ff       	call   f0107f5f <kmalloc>
f0127501:	83 c4 10             	add    $0x10,%esp
f0127504:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012750a:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f0127510:	89 c1                	mov    %eax,%ecx
f0127512:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f0127519:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012751e:	0f b6 d0             	movzbl %al,%edx
f0127521:	8b 45 90             	mov    -0x70(%ebp),%eax
f0127524:	01 d0                	add    %edx,%eax
f0127526:	48                   	dec    %eax
f0127527:	89 45 8c             	mov    %eax,-0x74(%ebp)
f012752a:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012752d:	ba 00 00 00 00       	mov    $0x0,%edx
f0127532:	f7 75 90             	divl   -0x70(%ebp)
f0127535:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0127538:	29 d0                	sub    %edx,%eax
f012753a:	89 c3                	mov    %eax,%ebx
f012753c:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0127543:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0127548:	0f b6 c0             	movzbl %al,%eax
f012754b:	c1 e0 04             	shl    $0x4,%eax
f012754e:	89 c2                	mov    %eax,%edx
f0127550:	8b 45 88             	mov    -0x78(%ebp),%eax
f0127553:	01 d0                	add    %edx,%eax
f0127555:	48                   	dec    %eax
f0127556:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0127559:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012755c:	ba 00 00 00 00       	mov    $0x0,%edx
f0127561:	f7 75 88             	divl   -0x78(%ebp)
f0127564:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0127567:	29 d0                	sub    %edx,%eax
f0127569:	01 d8                	add    %ebx,%eax
f012756b:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0127570:	39 c1                	cmp    %eax,%ecx
f0127572:	74 17                	je     f012758b <test_kshrink+0x546>
f0127574:	83 ec 04             	sub    $0x4,%esp
f0127577:	68 40 98 13 f0       	push   $0xf0139840
f012757c:	68 2f 0c 00 00       	push   $0xc2f
f0127581:	68 5a 97 13 f0       	push   $0xf013975a
f0127586:	e8 25 8c fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012758b:	e8 f4 d0 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0127590:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127593:	74 17                	je     f01275ac <test_kshrink+0x567>
f0127595:	83 ec 04             	sub    $0x4,%esp
f0127598:	68 74 97 13 f0       	push   $0xf0139774
f012759d:	68 30 0c 00 00       	push   $0xc30
f01275a2:	68 5a 97 13 f0       	push   $0xf013975a
f01275a7:	e8 04 8c fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f01275ac:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01275af:	e8 12 54 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01275b4:	29 c3                	sub    %eax,%ebx
f01275b6:	89 d8                	mov    %ebx,%eax
f01275b8:	83 f8 02             	cmp    $0x2,%eax
f01275bb:	74 17                	je     f01275d4 <test_kshrink+0x58f>
f01275bd:	83 ec 04             	sub    $0x4,%esp
f01275c0:	68 dc 97 13 f0       	push   $0xf01397dc
f01275c5:	68 31 0c 00 00       	push   $0xc31
f01275ca:	68 5a 97 13 f0       	push   $0xf013975a
f01275cf:	e8 dc 8b fd ff       	call   f01001b0 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f01275d4:	c7 85 fc fe ff ff ff 	movl   $0x1bff,-0x104(%ebp)
f01275db:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f01275de:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f01275e4:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f01275e7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01275ee:	eb 0e                	jmp    f01275fe <test_kshrink+0x5b9>
		{
			ptr[i] = 4 ;
f01275f0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01275f3:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01275f6:	01 d0                	add    %edx,%eax
f01275f8:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f01275fb:	ff 45 f4             	incl   -0xc(%ebp)
f01275fe:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0127604:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127607:	7f e7                	jg     f01275f0 <test_kshrink+0x5ab>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0127609:	e8 b8 53 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012760e:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127611:	e8 6e d0 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0127616:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0127619:	83 ec 0c             	sub    $0xc,%esp
f012761c:	68 00 fc 2f 00       	push   $0x2ffc00
f0127621:	e8 39 09 fe ff       	call   f0107f5f <kmalloc>
f0127626:	83 c4 10             	add    $0x10,%esp
f0127629:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012762f:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0127635:	89 c1                	mov    %eax,%ecx
f0127637:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f012763e:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0127643:	0f b6 d0             	movzbl %al,%edx
f0127646:	8b 45 80             	mov    -0x80(%ebp),%eax
f0127649:	01 d0                	add    %edx,%eax
f012764b:	48                   	dec    %eax
f012764c:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0127652:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0127658:	ba 00 00 00 00       	mov    $0x0,%edx
f012765d:	f7 75 80             	divl   -0x80(%ebp)
f0127660:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0127666:	29 d0                	sub    %edx,%eax
f0127668:	89 c3                	mov    %eax,%ebx
f012766a:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0127671:	10 00 00 
f0127674:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0127679:	0f b6 c0             	movzbl %al,%eax
f012767c:	c1 e0 04             	shl    $0x4,%eax
f012767f:	89 c2                	mov    %eax,%edx
f0127681:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0127687:	01 d0                	add    %edx,%eax
f0127689:	48                   	dec    %eax
f012768a:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0127690:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0127696:	ba 00 00 00 00       	mov    $0x0,%edx
f012769b:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f01276a1:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01276a7:	29 d0                	sub    %edx,%eax
f01276a9:	01 d8                	add    %ebx,%eax
f01276ab:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f01276b0:	39 c1                	cmp    %eax,%ecx
f01276b2:	74 17                	je     f01276cb <test_kshrink+0x686>
f01276b4:	83 ec 04             	sub    $0x4,%esp
f01276b7:	68 40 98 13 f0       	push   $0xf0139840
f01276bc:	68 3d 0c 00 00       	push   $0xc3d
f01276c1:	68 5a 97 13 f0       	push   $0xf013975a
f01276c6:	e8 e5 8a fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01276cb:	e8 b4 cf fd ff       	call   f0104684 <pf_calculate_free_frames>
f01276d0:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01276d3:	74 17                	je     f01276ec <test_kshrink+0x6a7>
f01276d5:	83 ec 04             	sub    $0x4,%esp
f01276d8:	68 74 97 13 f0       	push   $0xf0139774
f01276dd:	68 3e 0c 00 00       	push   $0xc3e
f01276e2:	68 5a 97 13 f0       	push   $0xf013975a
f01276e7:	e8 c4 8a fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f01276ec:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01276ef:	e8 d2 52 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01276f4:	29 c3                	sub    %eax,%ebx
f01276f6:	89 d8                	mov    %ebx,%eax
f01276f8:	3d 00 03 00 00       	cmp    $0x300,%eax
f01276fd:	74 17                	je     f0127716 <test_kshrink+0x6d1>
f01276ff:	83 ec 04             	sub    $0x4,%esp
f0127702:	68 dc 97 13 f0       	push   $0xf01397dc
f0127707:	68 3f 0c 00 00       	push   $0xc3f
f012770c:	68 5a 97 13 f0       	push   $0xf013975a
f0127711:	e8 9a 8a fd ff       	call   f01001b0 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f0127716:	c7 85 00 ff ff ff ff 	movl   $0x2ffbff,-0x100(%ebp)
f012771d:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f0127720:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0127726:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0127729:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127730:	eb 0e                	jmp    f0127740 <test_kshrink+0x6fb>
		{
			ptr[i] = 5 ;
f0127732:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0127735:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0127738:	01 d0                	add    %edx,%eax
f012773a:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f012773d:	ff 45 f4             	incl   -0xc(%ebp)
f0127740:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0127746:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127749:	7f e7                	jg     f0127732 <test_kshrink+0x6ed>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f012774b:	e8 76 52 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0127750:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127753:	e8 2c cf fd ff       	call   f0104684 <pf_calculate_free_frames>
f0127758:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega);
f012775b:	83 ec 0c             	sub    $0xc,%esp
f012775e:	68 00 00 60 00       	push   $0x600000
f0127763:	e8 f7 07 fe ff       	call   f0107f5f <kmalloc>
f0127768:	83 c4 10             	add    $0x10,%esp
f012776b:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127771:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0127777:	89 c1                	mov    %eax,%ecx
f0127779:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0127780:	10 00 00 
f0127783:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0127788:	0f b6 d0             	movzbl %al,%edx
f012778b:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0127791:	01 d0                	add    %edx,%eax
f0127793:	48                   	dec    %eax
f0127794:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f012779a:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01277a0:	ba 00 00 00 00       	mov    $0x0,%edx
f01277a5:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f01277ab:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01277b1:	29 d0                	sub    %edx,%eax
f01277b3:	89 c3                	mov    %eax,%ebx
f01277b5:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f01277bc:	10 00 00 
f01277bf:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01277c4:	0f b6 c0             	movzbl %al,%eax
f01277c7:	c1 e0 04             	shl    $0x4,%eax
f01277ca:	89 c2                	mov    %eax,%edx
f01277cc:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01277d2:	01 d0                	add    %edx,%eax
f01277d4:	48                   	dec    %eax
f01277d5:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f01277db:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01277e1:	ba 00 00 00 00       	mov    $0x0,%edx
f01277e6:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f01277ec:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01277f2:	29 d0                	sub    %edx,%eax
f01277f4:	01 d8                	add    %ebx,%eax
f01277f6:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f01277fb:	39 c1                	cmp    %eax,%ecx
f01277fd:	74 17                	je     f0127816 <test_kshrink+0x7d1>
f01277ff:	83 ec 04             	sub    $0x4,%esp
f0127802:	68 40 98 13 f0       	push   $0xf0139840
f0127807:	68 4b 0c 00 00       	push   $0xc4b
f012780c:	68 5a 97 13 f0       	push   $0xf013975a
f0127811:	e8 9a 89 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127816:	e8 69 ce fd ff       	call   f0104684 <pf_calculate_free_frames>
f012781b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012781e:	74 17                	je     f0127837 <test_kshrink+0x7f2>
f0127820:	83 ec 04             	sub    $0x4,%esp
f0127823:	68 74 97 13 f0       	push   $0xf0139774
f0127828:	68 4c 0c 00 00       	push   $0xc4c
f012782d:	68 5a 97 13 f0       	push   $0xf013975a
f0127832:	e8 79 89 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127837:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f012783a:	e8 87 51 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012783f:	29 c3                	sub    %eax,%ebx
f0127841:	89 d8                	mov    %ebx,%eax
f0127843:	3d 00 06 00 00       	cmp    $0x600,%eax
f0127848:	74 17                	je     f0127861 <test_kshrink+0x81c>
f012784a:	83 ec 04             	sub    $0x4,%esp
f012784d:	68 dc 97 13 f0       	push   $0xf01397dc
f0127852:	68 4d 0c 00 00       	push   $0xc4d
f0127857:	68 5a 97 13 f0       	push   $0xf013975a
f012785c:	e8 4f 89 fd ff       	call   f01001b0 <_panic>
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
f0127861:	c7 85 04 ff ff ff ff 	movl   $0x17ffff,-0xfc(%ebp)
f0127868:	ff 17 00 
		arr = (uint32*)ptr_allocations[6];
f012786b:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0127871:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
		for (i = 0; i <= lastIndices[6]; ++i)
f0127877:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012787e:	eb 1a                	jmp    f012789a <test_kshrink+0x855>
		{
			arr[i] = i ;
f0127880:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0127883:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012788a:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0127890:	01 c2                	add    %eax,%edx
f0127892:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0127895:	89 02                	mov    %eax,(%edx)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
		arr = (uint32*)ptr_allocations[6];
		for (i = 0; i <= lastIndices[6]; ++i)
f0127897:	ff 45 f4             	incl   -0xc(%ebp)
f012789a:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01278a0:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01278a3:	7d db                	jge    f0127880 <test_kshrink+0x83b>
		}
	}

	//Shrink last allocated variable to 5 MB instead of 6 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f01278a5:	e8 1c 51 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01278aa:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01278ad:	e8 d2 cd fd ff       	call   f0104684 <pf_calculate_free_frames>
f01278b2:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kshrink(5*Mega) ;
f01278b5:	83 ec 0c             	sub    $0xc,%esp
f01278b8:	68 00 00 50 00       	push   $0x500000
f01278bd:	e8 1f 07 fe ff       	call   f0107fe1 <kshrink>
f01278c2:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f01278c5:	e8 ba cd fd ff       	call   f0104684 <pf_calculate_free_frames>
f01278ca:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01278cd:	74 19                	je     f01278e8 <test_kshrink+0x8a3>
f01278cf:	68 f4 a4 13 f0       	push   $0xf013a4f4
f01278d4:	68 25 a5 13 f0       	push   $0xf013a525
f01278d9:	68 5d 0c 00 00       	push   $0xc5d
f01278de:	68 5a 97 13 f0       	push   $0xf013975a
f01278e3:	e8 c8 88 fd ff       	call   f01001b0 <_panic>
		assert(sys_calculate_free_frames() - freeFrames == 256) ;
f01278e8:	e8 d9 50 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01278ed:	89 c2                	mov    %eax,%edx
f01278ef:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01278f2:	29 c2                	sub    %eax,%edx
f01278f4:	89 d0                	mov    %edx,%eax
f01278f6:	3d 00 01 00 00       	cmp    $0x100,%eax
f01278fb:	74 19                	je     f0127916 <test_kshrink+0x8d1>
f01278fd:	68 00 a6 13 f0       	push   $0xf013a600
f0127902:	68 25 a5 13 f0       	push   $0xf013a525
f0127907:	68 5e 0c 00 00       	push   $0xc5e
f012790c:	68 5a 97 13 f0       	push   $0xf013975a
f0127911:	e8 9a 88 fd ff       	call   f01001b0 <_panic>
	}

	//Access elements after shrink
	int newLastIndex = (5*Mega)/sizeof(uint32) - 1;
f0127916:	c7 85 5c ff ff ff ff 	movl   $0x13ffff,-0xa4(%ebp)
f012791d:	ff 13 00 
	{
		for (i = 0; i <= newLastIndex ; ++i)
f0127920:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127927:	eb 37                	jmp    f0127960 <test_kshrink+0x91b>
		{
			assert(arr[i] == i);
f0127929:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012792c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0127933:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0127939:	01 d0                	add    %edx,%eax
f012793b:	8b 10                	mov    (%eax),%edx
f012793d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0127940:	39 c2                	cmp    %eax,%edx
f0127942:	74 19                	je     f012795d <test_kshrink+0x918>
f0127944:	68 30 a6 13 f0       	push   $0xf013a630
f0127949:	68 25 a5 13 f0       	push   $0xf013a525
f012794e:	68 66 0c 00 00       	push   $0xc66
f0127953:	68 5a 97 13 f0       	push   $0xf013975a
f0127958:	e8 53 88 fd ff       	call   f01001b0 <_panic>
	}

	//Access elements after shrink
	int newLastIndex = (5*Mega)/sizeof(uint32) - 1;
	{
		for (i = 0; i <= newLastIndex ; ++i)
f012795d:	ff 45 f4             	incl   -0xc(%ebp)
f0127960:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0127963:	3b 85 5c ff ff ff    	cmp    -0xa4(%ebp),%eax
f0127969:	7e be                	jle    f0127929 <test_kshrink+0x8e4>
			assert(arr[i] == i);
		}

		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f012796b:	83 ec 0c             	sub    $0xc,%esp
f012796e:	6a 03                	push   $0x3
f0127970:	e8 ec 54 fe ff       	call   f010ce61 <sys_bypassPageFault>
f0127975:	83 c4 10             	add    $0x10,%esp

		ptr = (char *) ptr_allocations[6];
f0127978:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012797e:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr[5*Mega] = 10;
f0127981:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0127984:	05 00 00 50 00       	add    $0x500000,%eax
f0127989:	c6 00 0a             	movb   $0xa,(%eax)
		assert(sys_rcr2() == (uint32)&(ptr[5*Mega])) ;
f012798c:	e8 be 54 fe ff       	call   f010ce4f <sys_rcr2>
f0127991:	8b 55 a4             	mov    -0x5c(%ebp),%edx
f0127994:	81 c2 00 00 50 00    	add    $0x500000,%edx
f012799a:	39 d0                	cmp    %edx,%eax
f012799c:	74 19                	je     f01279b7 <test_kshrink+0x972>
f012799e:	68 3c a6 13 f0       	push   $0xf013a63c
f01279a3:	68 25 a5 13 f0       	push   $0xf013a525
f01279a8:	68 6f 0c 00 00       	push   $0xc6f
f01279ad:	68 5a 97 13 f0       	push   $0xf013975a
f01279b2:	e8 f9 87 fd ff       	call   f01001b0 <_panic>

		ptr[5*Mega+4*kilo] = 10;
f01279b7:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01279ba:	05 00 10 50 00       	add    $0x501000,%eax
f01279bf:	c6 00 0a             	movb   $0xa,(%eax)
		assert(sys_rcr2() == (uint32)&(ptr[5*Mega+4*kilo])) ;
f01279c2:	e8 88 54 fe ff       	call   f010ce4f <sys_rcr2>
f01279c7:	8b 55 a4             	mov    -0x5c(%ebp),%edx
f01279ca:	81 c2 00 10 50 00    	add    $0x501000,%edx
f01279d0:	39 d0                	cmp    %edx,%eax
f01279d2:	74 19                	je     f01279ed <test_kshrink+0x9a8>
f01279d4:	68 64 a6 13 f0       	push   $0xf013a664
f01279d9:	68 25 a5 13 f0       	push   $0xf013a525
f01279de:	68 72 0c 00 00       	push   $0xc72
f01279e3:	68 5a 97 13 f0       	push   $0xf013975a
f01279e8:	e8 c3 87 fd ff       	call   f01001b0 <_panic>

		ptr[6*Mega - kilo] = 10;
f01279ed:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01279f0:	05 00 fc 5f 00       	add    $0x5ffc00,%eax
f01279f5:	c6 00 0a             	movb   $0xa,(%eax)
		assert(sys_rcr2() == (uint32)&(ptr[6*Mega - kilo])) ;
f01279f8:	e8 52 54 fe ff       	call   f010ce4f <sys_rcr2>
f01279fd:	8b 55 a4             	mov    -0x5c(%ebp),%edx
f0127a00:	81 c2 00 fc 5f 00    	add    $0x5ffc00,%edx
f0127a06:	39 d0                	cmp    %edx,%eax
f0127a08:	74 19                	je     f0127a23 <test_kshrink+0x9de>
f0127a0a:	68 90 a6 13 f0       	push   $0xf013a690
f0127a0f:	68 25 a5 13 f0       	push   $0xf013a525
f0127a14:	68 75 0c 00 00       	push   $0xc75
f0127a19:	68 5a 97 13 f0       	push   $0xf013975a
f0127a1e:	e8 8d 87 fd ff       	call   f01001b0 <_panic>

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f0127a23:	83 ec 0c             	sub    $0xc,%esp
f0127a26:	6a 00                	push   $0x0
f0127a28:	e8 34 54 fe ff       	call   f010ce61 <sys_bypassPageFault>
f0127a2d:	83 c4 10             	add    $0x10,%esp
	}

	//Shrink it again to 2 MB instead of 5 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f0127a30:	e8 91 4f fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0127a35:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127a38:	e8 47 cc fd ff       	call   f0104684 <pf_calculate_free_frames>
f0127a3d:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kshrink(2*Mega) ;
f0127a40:	83 ec 0c             	sub    $0xc,%esp
f0127a43:	68 00 00 20 00       	push   $0x200000
f0127a48:	e8 94 05 fe ff       	call   f0107fe1 <kshrink>
f0127a4d:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0127a50:	e8 2f cc fd ff       	call   f0104684 <pf_calculate_free_frames>
f0127a55:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127a58:	74 19                	je     f0127a73 <test_kshrink+0xa2e>
f0127a5a:	68 f4 a4 13 f0       	push   $0xf013a4f4
f0127a5f:	68 25 a5 13 f0       	push   $0xf013a525
f0127a64:	68 82 0c 00 00       	push   $0xc82
f0127a69:	68 5a 97 13 f0       	push   $0xf013975a
f0127a6e:	e8 3d 87 fd ff       	call   f01001b0 <_panic>
		assert(sys_calculate_free_frames() - freeFrames == 768) ;
f0127a73:	e8 4e 4f fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0127a78:	89 c2                	mov    %eax,%edx
f0127a7a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0127a7d:	29 c2                	sub    %eax,%edx
f0127a7f:	89 d0                	mov    %edx,%eax
f0127a81:	3d 00 03 00 00       	cmp    $0x300,%eax
f0127a86:	74 19                	je     f0127aa1 <test_kshrink+0xa5c>
f0127a88:	68 bc a6 13 f0       	push   $0xf013a6bc
f0127a8d:	68 25 a5 13 f0       	push   $0xf013a525
f0127a92:	68 83 0c 00 00       	push   $0xc83
f0127a97:	68 5a 97 13 f0       	push   $0xf013975a
f0127a9c:	e8 0f 87 fd ff       	call   f01001b0 <_panic>


	//Allocate after shrinking last var
	{
		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f0127aa1:	e8 20 4f fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0127aa6:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127aa9:	e8 d6 cb fd ff       	call   f0104684 <pf_calculate_free_frames>
f0127aae:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(4*Mega);
f0127ab1:	83 ec 0c             	sub    $0xc,%esp
f0127ab4:	68 00 00 40 00       	push   $0x400000
f0127ab9:	e8 a1 04 fe ff       	call   f0107f5f <kmalloc>
f0127abe:	83 c4 10             	add    $0x10,%esp
f0127ac1:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
		cprintf("ACTUAL = %x, DESIRED = %x\n", (uint32) ptr_allocations[7] ,(ACTUAL_START + 7*Mega + 16*kilo + 2*Mega));
f0127ac7:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f0127ace:	10 00 00 
f0127ad1:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0127ad6:	0f b6 d0             	movzbl %al,%edx
f0127ad9:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0127adf:	01 d0                	add    %edx,%eax
f0127ae1:	48                   	dec    %eax
f0127ae2:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f0127ae8:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0127aee:	ba 00 00 00 00       	mov    $0x0,%edx
f0127af3:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f0127af9:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0127aff:	29 d0                	sub    %edx,%eax
f0127b01:	89 c1                	mov    %eax,%ecx
f0127b03:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f0127b0a:	10 00 00 
f0127b0d:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0127b12:	0f b6 c0             	movzbl %al,%eax
f0127b15:	c1 e0 04             	shl    $0x4,%eax
f0127b18:	89 c2                	mov    %eax,%edx
f0127b1a:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0127b20:	01 d0                	add    %edx,%eax
f0127b22:	48                   	dec    %eax
f0127b23:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f0127b29:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0127b2f:	ba 00 00 00 00       	mov    $0x0,%edx
f0127b34:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f0127b3a:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0127b40:	29 d0                	sub    %edx,%eax
f0127b42:	01 c8                	add    %ecx,%eax
f0127b44:	8d 90 00 80 90 f6    	lea    -0x96f8000(%eax),%edx
f0127b4a:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0127b50:	83 ec 04             	sub    $0x4,%esp
f0127b53:	52                   	push   %edx
f0127b54:	50                   	push   %eax
f0127b55:	68 ec a6 13 f0       	push   $0xf013a6ec
f0127b5a:	e8 d2 92 fd ff       	call   f0100e31 <cprintf>
f0127b5f:	83 c4 10             	add    $0x10,%esp
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 7*Mega + 16*kilo + 2*Mega)) panic("Wrong start address after kshrink()... check the updating of your data structures");
f0127b62:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0127b68:	89 c1                	mov    %eax,%ecx
f0127b6a:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f0127b71:	10 00 00 
f0127b74:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0127b79:	0f b6 d0             	movzbl %al,%edx
f0127b7c:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0127b82:	01 d0                	add    %edx,%eax
f0127b84:	48                   	dec    %eax
f0127b85:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f0127b8b:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0127b91:	ba 00 00 00 00       	mov    $0x0,%edx
f0127b96:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f0127b9c:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0127ba2:	29 d0                	sub    %edx,%eax
f0127ba4:	89 c3                	mov    %eax,%ebx
f0127ba6:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f0127bad:	10 00 00 
f0127bb0:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0127bb5:	0f b6 c0             	movzbl %al,%eax
f0127bb8:	c1 e0 04             	shl    $0x4,%eax
f0127bbb:	89 c2                	mov    %eax,%edx
f0127bbd:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0127bc3:	01 d0                	add    %edx,%eax
f0127bc5:	48                   	dec    %eax
f0127bc6:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f0127bcc:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0127bd2:	ba 00 00 00 00       	mov    $0x0,%edx
f0127bd7:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f0127bdd:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0127be3:	29 d0                	sub    %edx,%eax
f0127be5:	01 d8                	add    %ebx,%eax
f0127be7:	2d 00 80 6f 09       	sub    $0x96f8000,%eax
f0127bec:	39 c1                	cmp    %eax,%ecx
f0127bee:	74 17                	je     f0127c07 <test_kshrink+0xbc2>
f0127bf0:	83 ec 04             	sub    $0x4,%esp
f0127bf3:	68 08 a7 13 f0       	push   $0xf013a708
f0127bf8:	68 8e 0c 00 00       	push   $0xc8e
f0127bfd:	68 5a 97 13 f0       	push   $0xf013975a
f0127c02:	e8 a9 85 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127c07:	e8 78 ca fd ff       	call   f0104684 <pf_calculate_free_frames>
f0127c0c:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127c0f:	74 17                	je     f0127c28 <test_kshrink+0xbe3>
f0127c11:	83 ec 04             	sub    $0x4,%esp
f0127c14:	68 74 97 13 f0       	push   $0xf0139774
f0127c19:	68 8f 0c 00 00       	push   $0xc8f
f0127c1e:	68 5a 97 13 f0       	push   $0xf013975a
f0127c23:	e8 88 85 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4*Mega/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127c28:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0127c2b:	e8 96 4d fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0127c30:	29 c3                	sub    %eax,%ebx
f0127c32:	89 d8                	mov    %ebx,%eax
f0127c34:	3d 00 04 00 00       	cmp    $0x400,%eax
f0127c39:	74 17                	je     f0127c52 <test_kshrink+0xc0d>
f0127c3b:	83 ec 04             	sub    $0x4,%esp
f0127c3e:	68 dc 97 13 f0       	push   $0xf01397dc
f0127c43:	68 90 0c 00 00       	push   $0xc90
f0127c48:	68 5a 97 13 f0       	push   $0xf013975a
f0127c4d:	e8 5e 85 fd ff       	call   f01001b0 <_panic>


	//kfree the shrunk variable
	{
		//kfree 2 MB (shrunk)
		freeFrames = sys_calculate_free_frames() ;
f0127c52:	e8 6f 4d fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0127c57:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127c5a:	e8 25 ca fd ff       	call   f0104684 <pf_calculate_free_frames>
f0127c5f:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[6]);
f0127c62:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0127c68:	83 ec 0c             	sub    $0xc,%esp
f0127c6b:	50                   	push   %eax
f0127c6c:	e8 08 03 fe ff       	call   f0107f79 <kfree>
f0127c71:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127c74:	e8 0b ca fd ff       	call   f0104684 <pf_calculate_free_frames>
f0127c79:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127c7c:	74 17                	je     f0127c95 <test_kshrink+0xc50>
f0127c7e:	83 ec 04             	sub    $0x4,%esp
f0127c81:	68 74 97 13 f0       	push   $0xf0139774
f0127c86:	68 9a 0c 00 00       	push   $0xc9a
f0127c8b:	68 5a 97 13 f0       	push   $0xf013975a
f0127c90:	e8 1b 85 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0127c95:	e8 2c 4d fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0127c9a:	89 c2                	mov    %eax,%edx
f0127c9c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0127c9f:	29 c2                	sub    %eax,%edx
f0127ca1:	89 d0                	mov    %edx,%eax
f0127ca3:	3d 00 02 00 00       	cmp    $0x200,%eax
f0127ca8:	74 17                	je     f0127cc1 <test_kshrink+0xc7c>
f0127caa:	83 ec 04             	sub    $0x4,%esp
f0127cad:	68 0c a0 13 f0       	push   $0xf013a00c
f0127cb2:	68 9b 0c 00 00       	push   $0xc9b
f0127cb7:	68 5a 97 13 f0       	push   $0xf013975a
f0127cbc:	e8 ef 84 fd ff       	call   f01001b0 <_panic>
	}

	//Shrink last allocated variable to 4 MB - 20 kilo instead of 4 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f0127cc1:	e8 00 4d fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0127cc6:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127cc9:	e8 b6 c9 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0127cce:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kshrink(4*Mega - 20*kilo) ;
f0127cd1:	83 ec 0c             	sub    $0xc,%esp
f0127cd4:	68 00 b0 3f 00       	push   $0x3fb000
f0127cd9:	e8 03 03 fe ff       	call   f0107fe1 <kshrink>
f0127cde:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0127ce1:	e8 9e c9 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0127ce6:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127ce9:	74 19                	je     f0127d04 <test_kshrink+0xcbf>
f0127ceb:	68 f4 a4 13 f0       	push   $0xf013a4f4
f0127cf0:	68 25 a5 13 f0       	push   $0xf013a525
f0127cf5:	68 a5 0c 00 00       	push   $0xca5
f0127cfa:	68 5a 97 13 f0       	push   $0xf013975a
f0127cff:	e8 ac 84 fd ff       	call   f01001b0 <_panic>
		assert(sys_calculate_free_frames() - freeFrames == 5) ;
f0127d04:	e8 bd 4c fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0127d09:	89 c2                	mov    %eax,%edx
f0127d0b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0127d0e:	29 c2                	sub    %eax,%edx
f0127d10:	89 d0                	mov    %edx,%eax
f0127d12:	83 f8 05             	cmp    $0x5,%eax
f0127d15:	74 19                	je     f0127d30 <test_kshrink+0xceb>
f0127d17:	68 5c a7 13 f0       	push   $0xf013a75c
f0127d1c:	68 25 a5 13 f0       	push   $0xf013a525
f0127d21:	68 a6 0c 00 00       	push   $0xca6
f0127d26:	68 5a 97 13 f0       	push   $0xf013975a
f0127d2b:	e8 80 84 fd ff       	call   f01001b0 <_panic>
	}

	cprintf("\nCongratulations!! your modification is run successfully.\n");
f0127d30:	83 ec 0c             	sub    $0xc,%esp
f0127d33:	68 b8 a4 13 f0       	push   $0xf013a4b8
f0127d38:	e8 f4 90 fd ff       	call   f0100e31 <cprintf>
f0127d3d:	83 c4 10             	add    $0x10,%esp

	return 1;
f0127d40:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0127d45:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0127d48:	5b                   	pop    %ebx
f0127d49:	5f                   	pop    %edi
f0127d4a:	5d                   	pop    %ebp
f0127d4b:	c3                   	ret    

f0127d4c <test_kfreelast>:


int test_kfreelast()
{
f0127d4c:	55                   	push   %ebp
f0127d4d:	89 e5                	mov    %esp,%ebp
f0127d4f:	57                   	push   %edi
f0127d50:	53                   	push   %ebx
f0127d51:	81 ec 20 02 00 00    	sub    $0x220,%esp
	char minByte = 1<<7;
f0127d57:	c6 45 eb 80          	movb   $0x80,-0x15(%ebp)
	char maxByte = 0x7F;
f0127d5b:	c6 45 ea 7f          	movb   $0x7f,-0x16(%ebp)
	short minShort = 1<<15 ;
f0127d5f:	66 c7 45 e8 00 80    	movw   $0x8000,-0x18(%ebp)
	short maxShort = 0x7FFF;
f0127d65:	66 c7 45 e6 ff 7f    	movw   $0x7fff,-0x1a(%ebp)
	int minInt = 1<<31 ;
f0127d6b:	c7 45 e0 00 00 00 80 	movl   $0x80000000,-0x20(%ebp)
	int maxInt = 0x7FFFFFFF;
f0127d72:	c7 45 dc ff ff ff 7f 	movl   $0x7fffffff,-0x24(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0127d79:	e8 48 4c fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0127d7e:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//malloc some spaces
	int i, ce, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0127d81:	8d 95 84 fe ff ff    	lea    -0x17c(%ebp),%edx
f0127d87:	b9 14 00 00 00       	mov    $0x14,%ecx
f0127d8c:	b8 00 00 00 00       	mov    $0x0,%eax
f0127d91:	89 d7                	mov    %edx,%edi
f0127d93:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0127d95:	8d 95 34 fe ff ff    	lea    -0x1cc(%ebp),%edx
f0127d9b:	b9 14 00 00 00       	mov    $0x14,%ecx
f0127da0:	b8 00 00 00 00       	mov    $0x0,%eax
f0127da5:	89 d7                	mov    %edx,%edi
f0127da7:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f0127da9:	8d 95 e4 fd ff ff    	lea    -0x21c(%ebp),%edx
f0127daf:	b9 14 00 00 00       	mov    $0x14,%ecx
f0127db4:	b8 00 00 00 00       	mov    $0x0,%eax
f0127db9:	89 d7                	mov    %edx,%edi
f0127dbb:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0127dbd:	e8 04 4c fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0127dc2:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127dc5:	e8 ba c8 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0127dca:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0127dcd:	83 ec 0c             	sub    $0xc,%esp
f0127dd0:	68 00 fc 1f 00       	push   $0x1ffc00
f0127dd5:	e8 85 01 fe ff       	call   f0107f5f <kmalloc>
f0127dda:	83 c4 10             	add    $0x10,%esp
f0127ddd:	89 85 e4 fd ff ff    	mov    %eax,-0x21c(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127de3:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0127de9:	89 c1                	mov    %eax,%ecx
f0127deb:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0127df2:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0127df7:	0f b6 d0             	movzbl %al,%edx
f0127dfa:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0127dfd:	01 d0                	add    %edx,%eax
f0127dff:	48                   	dec    %eax
f0127e00:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0127e03:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0127e06:	ba 00 00 00 00       	mov    $0x0,%edx
f0127e0b:	f7 75 cc             	divl   -0x34(%ebp)
f0127e0e:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0127e11:	29 d0                	sub    %edx,%eax
f0127e13:	89 c3                	mov    %eax,%ebx
f0127e15:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f0127e1c:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0127e21:	0f b6 c0             	movzbl %al,%eax
f0127e24:	c1 e0 04             	shl    $0x4,%eax
f0127e27:	89 c2                	mov    %eax,%edx
f0127e29:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0127e2c:	01 d0                	add    %edx,%eax
f0127e2e:	48                   	dec    %eax
f0127e2f:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0127e32:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0127e35:	ba 00 00 00 00       	mov    $0x0,%edx
f0127e3a:	f7 75 c4             	divl   -0x3c(%ebp)
f0127e3d:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0127e40:	29 d0                	sub    %edx,%eax
f0127e42:	01 d8                	add    %ebx,%eax
f0127e44:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0127e49:	39 c1                	cmp    %eax,%ecx
f0127e4b:	74 17                	je     f0127e64 <test_kfreelast+0x118>
f0127e4d:	83 ec 04             	sub    $0x4,%esp
f0127e50:	68 40 98 13 f0       	push   $0xf0139840
f0127e55:	68 ca 0c 00 00       	push   $0xcca
f0127e5a:	68 5a 97 13 f0       	push   $0xf013975a
f0127e5f:	e8 4c 83 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127e64:	e8 1b c8 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0127e69:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0127e6c:	74 17                	je     f0127e85 <test_kfreelast+0x139>
f0127e6e:	83 ec 04             	sub    $0x4,%esp
f0127e71:	68 74 97 13 f0       	push   $0xf0139774
f0127e76:	68 cb 0c 00 00       	push   $0xccb
f0127e7b:	68 5a 97 13 f0       	push   $0xf013975a
f0127e80:	e8 2b 83 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127e85:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0127e88:	e8 39 4b fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0127e8d:	29 c3                	sub    %eax,%ebx
f0127e8f:	89 d8                	mov    %ebx,%eax
f0127e91:	3d 00 02 00 00       	cmp    $0x200,%eax
f0127e96:	74 17                	je     f0127eaf <test_kfreelast+0x163>
f0127e98:	83 ec 04             	sub    $0x4,%esp
f0127e9b:	68 dc 97 13 f0       	push   $0xf01397dc
f0127ea0:	68 cc 0c 00 00       	push   $0xccc
f0127ea5:	68 5a 97 13 f0       	push   $0xf013975a
f0127eaa:	e8 01 83 fd ff       	call   f01001b0 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f0127eaf:	c7 85 84 fe ff ff ff 	movl   $0x1ffbff,-0x17c(%ebp)
f0127eb6:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0127eb9:	e8 08 4b fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0127ebe:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127ec1:	e8 be c7 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0127ec6:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0127ec9:	83 ec 0c             	sub    $0xc,%esp
f0127ecc:	68 00 fc 1f 00       	push   $0x1ffc00
f0127ed1:	e8 89 00 fe ff       	call   f0107f5f <kmalloc>
f0127ed6:	83 c4 10             	add    $0x10,%esp
f0127ed9:	89 85 e8 fd ff ff    	mov    %eax,-0x218(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127edf:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0127ee5:	89 c1                	mov    %eax,%ecx
f0127ee7:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f0127eee:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0127ef3:	0f b6 d0             	movzbl %al,%edx
f0127ef6:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0127ef9:	01 d0                	add    %edx,%eax
f0127efb:	48                   	dec    %eax
f0127efc:	89 45 b8             	mov    %eax,-0x48(%ebp)
f0127eff:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0127f02:	ba 00 00 00 00       	mov    $0x0,%edx
f0127f07:	f7 75 bc             	divl   -0x44(%ebp)
f0127f0a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0127f0d:	29 d0                	sub    %edx,%eax
f0127f0f:	89 c3                	mov    %eax,%ebx
f0127f11:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f0127f18:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0127f1d:	0f b6 c0             	movzbl %al,%eax
f0127f20:	c1 e0 04             	shl    $0x4,%eax
f0127f23:	89 c2                	mov    %eax,%edx
f0127f25:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0127f28:	01 d0                	add    %edx,%eax
f0127f2a:	48                   	dec    %eax
f0127f2b:	89 45 b0             	mov    %eax,-0x50(%ebp)
f0127f2e:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0127f31:	ba 00 00 00 00       	mov    $0x0,%edx
f0127f36:	f7 75 b4             	divl   -0x4c(%ebp)
f0127f39:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0127f3c:	29 d0                	sub    %edx,%eax
f0127f3e:	01 d8                	add    %ebx,%eax
f0127f40:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0127f45:	39 c1                	cmp    %eax,%ecx
f0127f47:	74 17                	je     f0127f60 <test_kfreelast+0x214>
f0127f49:	83 ec 04             	sub    $0x4,%esp
f0127f4c:	68 40 98 13 f0       	push   $0xf0139840
f0127f51:	68 d3 0c 00 00       	push   $0xcd3
f0127f56:	68 5a 97 13 f0       	push   $0xf013975a
f0127f5b:	e8 50 82 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127f60:	e8 1f c7 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0127f65:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0127f68:	74 17                	je     f0127f81 <test_kfreelast+0x235>
f0127f6a:	83 ec 04             	sub    $0x4,%esp
f0127f6d:	68 74 97 13 f0       	push   $0xf0139774
f0127f72:	68 d4 0c 00 00       	push   $0xcd4
f0127f77:	68 5a 97 13 f0       	push   $0xf013975a
f0127f7c:	e8 2f 82 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127f81:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0127f84:	e8 3d 4a fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0127f89:	29 c3                	sub    %eax,%ebx
f0127f8b:	89 d8                	mov    %ebx,%eax
f0127f8d:	3d 00 02 00 00       	cmp    $0x200,%eax
f0127f92:	74 17                	je     f0127fab <test_kfreelast+0x25f>
f0127f94:	83 ec 04             	sub    $0x4,%esp
f0127f97:	68 dc 97 13 f0       	push   $0xf01397dc
f0127f9c:	68 d5 0c 00 00       	push   $0xcd5
f0127fa1:	68 5a 97 13 f0       	push   $0xf013975a
f0127fa6:	e8 05 82 fd ff       	call   f01001b0 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f0127fab:	c7 85 88 fe ff ff ff 	movl   $0x1ffbff,-0x178(%ebp)
f0127fb2:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0127fb5:	e8 0c 4a fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0127fba:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127fbd:	e8 c2 c6 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0127fc2:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0127fc5:	83 ec 0c             	sub    $0xc,%esp
f0127fc8:	68 00 08 00 00       	push   $0x800
f0127fcd:	e8 8d ff fd ff       	call   f0107f5f <kmalloc>
f0127fd2:	83 c4 10             	add    $0x10,%esp
f0127fd5:	89 85 ec fd ff ff    	mov    %eax,-0x214(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127fdb:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0127fe1:	89 c1                	mov    %eax,%ecx
f0127fe3:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f0127fea:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0127fef:	0f b6 d0             	movzbl %al,%edx
f0127ff2:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0127ff5:	01 d0                	add    %edx,%eax
f0127ff7:	48                   	dec    %eax
f0127ff8:	89 45 a8             	mov    %eax,-0x58(%ebp)
f0127ffb:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0127ffe:	ba 00 00 00 00       	mov    $0x0,%edx
f0128003:	f7 75 ac             	divl   -0x54(%ebp)
f0128006:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0128009:	29 d0                	sub    %edx,%eax
f012800b:	89 c3                	mov    %eax,%ebx
f012800d:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f0128014:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0128019:	0f b6 c0             	movzbl %al,%eax
f012801c:	c1 e0 04             	shl    $0x4,%eax
f012801f:	89 c2                	mov    %eax,%edx
f0128021:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0128024:	01 d0                	add    %edx,%eax
f0128026:	48                   	dec    %eax
f0128027:	89 45 a0             	mov    %eax,-0x60(%ebp)
f012802a:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012802d:	ba 00 00 00 00       	mov    $0x0,%edx
f0128032:	f7 75 a4             	divl   -0x5c(%ebp)
f0128035:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0128038:	29 d0                	sub    %edx,%eax
f012803a:	01 d8                	add    %ebx,%eax
f012803c:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0128041:	39 c1                	cmp    %eax,%ecx
f0128043:	74 17                	je     f012805c <test_kfreelast+0x310>
f0128045:	83 ec 04             	sub    $0x4,%esp
f0128048:	68 40 98 13 f0       	push   $0xf0139840
f012804d:	68 dc 0c 00 00       	push   $0xcdc
f0128052:	68 5a 97 13 f0       	push   $0xf013975a
f0128057:	e8 54 81 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012805c:	e8 23 c6 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0128061:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0128064:	74 17                	je     f012807d <test_kfreelast+0x331>
f0128066:	83 ec 04             	sub    $0x4,%esp
f0128069:	68 74 97 13 f0       	push   $0xf0139774
f012806e:	68 dd 0c 00 00       	push   $0xcdd
f0128073:	68 5a 97 13 f0       	push   $0xf013975a
f0128078:	e8 33 81 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f012807d:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0128080:	e8 41 49 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0128085:	29 c3                	sub    %eax,%ebx
f0128087:	89 d8                	mov    %ebx,%eax
f0128089:	83 f8 01             	cmp    $0x1,%eax
f012808c:	74 17                	je     f01280a5 <test_kfreelast+0x359>
f012808e:	83 ec 04             	sub    $0x4,%esp
f0128091:	68 dc 97 13 f0       	push   $0xf01397dc
f0128096:	68 de 0c 00 00       	push   $0xcde
f012809b:	68 5a 97 13 f0       	push   $0xf013975a
f01280a0:	e8 0b 81 fd ff       	call   f01001b0 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f01280a5:	c7 85 8c fe ff ff ff 	movl   $0x7ff,-0x174(%ebp)
f01280ac:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f01280af:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f01280b5:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f01280b8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01280bf:	eb 0e                	jmp    f01280cf <test_kfreelast+0x383>
		{
			ptr[i] = 2 ;
f01280c1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01280c4:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01280c7:	01 d0                	add    %edx,%eax
f01280c9:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f01280cc:	ff 45 f4             	incl   -0xc(%ebp)
f01280cf:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f01280d5:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01280d8:	7f e7                	jg     f01280c1 <test_kfreelast+0x375>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01280da:	e8 e7 48 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01280df:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01280e2:	e8 9d c5 fd ff       	call   f0104684 <pf_calculate_free_frames>
f01280e7:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f01280ea:	83 ec 0c             	sub    $0xc,%esp
f01280ed:	68 00 08 00 00       	push   $0x800
f01280f2:	e8 68 fe fd ff       	call   f0107f5f <kmalloc>
f01280f7:	83 c4 10             	add    $0x10,%esp
f01280fa:	89 85 f0 fd ff ff    	mov    %eax,-0x210(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128100:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f0128106:	89 c1                	mov    %eax,%ecx
f0128108:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f012810f:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0128114:	0f b6 d0             	movzbl %al,%edx
f0128117:	8b 45 98             	mov    -0x68(%ebp),%eax
f012811a:	01 d0                	add    %edx,%eax
f012811c:	48                   	dec    %eax
f012811d:	89 45 94             	mov    %eax,-0x6c(%ebp)
f0128120:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0128123:	ba 00 00 00 00       	mov    $0x0,%edx
f0128128:	f7 75 98             	divl   -0x68(%ebp)
f012812b:	8b 45 94             	mov    -0x6c(%ebp),%eax
f012812e:	29 d0                	sub    %edx,%eax
f0128130:	89 c3                	mov    %eax,%ebx
f0128132:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f0128139:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012813e:	0f b6 c0             	movzbl %al,%eax
f0128141:	c1 e0 04             	shl    $0x4,%eax
f0128144:	89 c2                	mov    %eax,%edx
f0128146:	8b 45 90             	mov    -0x70(%ebp),%eax
f0128149:	01 d0                	add    %edx,%eax
f012814b:	48                   	dec    %eax
f012814c:	89 45 8c             	mov    %eax,-0x74(%ebp)
f012814f:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0128152:	ba 00 00 00 00       	mov    $0x0,%edx
f0128157:	f7 75 90             	divl   -0x70(%ebp)
f012815a:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012815d:	29 d0                	sub    %edx,%eax
f012815f:	01 d8                	add    %ebx,%eax
f0128161:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0128166:	39 c1                	cmp    %eax,%ecx
f0128168:	74 17                	je     f0128181 <test_kfreelast+0x435>
f012816a:	83 ec 04             	sub    $0x4,%esp
f012816d:	68 40 98 13 f0       	push   $0xf0139840
f0128172:	68 ea 0c 00 00       	push   $0xcea
f0128177:	68 5a 97 13 f0       	push   $0xf013975a
f012817c:	e8 2f 80 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128181:	e8 fe c4 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0128186:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0128189:	74 17                	je     f01281a2 <test_kfreelast+0x456>
f012818b:	83 ec 04             	sub    $0x4,%esp
f012818e:	68 74 97 13 f0       	push   $0xf0139774
f0128193:	68 eb 0c 00 00       	push   $0xceb
f0128198:	68 5a 97 13 f0       	push   $0xf013975a
f012819d:	e8 0e 80 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01281a2:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f01281a5:	e8 1c 48 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01281aa:	29 c3                	sub    %eax,%ebx
f01281ac:	89 d8                	mov    %ebx,%eax
f01281ae:	83 f8 01             	cmp    $0x1,%eax
f01281b1:	74 17                	je     f01281ca <test_kfreelast+0x47e>
f01281b3:	83 ec 04             	sub    $0x4,%esp
f01281b6:	68 dc 97 13 f0       	push   $0xf01397dc
f01281bb:	68 ec 0c 00 00       	push   $0xcec
f01281c0:	68 5a 97 13 f0       	push   $0xf013975a
f01281c5:	e8 e6 7f fd ff       	call   f01001b0 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f01281ca:	c7 85 90 fe ff ff ff 	movl   $0x7ff,-0x170(%ebp)
f01281d1:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f01281d4:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f01281da:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f01281dd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01281e4:	eb 0e                	jmp    f01281f4 <test_kfreelast+0x4a8>
		{
			ptr[i] = 3 ;
f01281e6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01281e9:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01281ec:	01 d0                	add    %edx,%eax
f01281ee:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f01281f1:	ff 45 f4             	incl   -0xc(%ebp)
f01281f4:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f01281fa:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01281fd:	7f e7                	jg     f01281e6 <test_kfreelast+0x49a>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f01281ff:	e8 c2 47 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0128204:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128207:	e8 78 c4 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012820c:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f012820f:	83 ec 0c             	sub    $0xc,%esp
f0128212:	68 00 1c 00 00       	push   $0x1c00
f0128217:	e8 43 fd fd ff       	call   f0107f5f <kmalloc>
f012821c:	83 c4 10             	add    $0x10,%esp
f012821f:	89 85 f4 fd ff ff    	mov    %eax,-0x20c(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128225:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012822b:	89 c1                	mov    %eax,%ecx
f012822d:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0128234:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0128239:	0f b6 d0             	movzbl %al,%edx
f012823c:	8b 45 88             	mov    -0x78(%ebp),%eax
f012823f:	01 d0                	add    %edx,%eax
f0128241:	48                   	dec    %eax
f0128242:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0128245:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0128248:	ba 00 00 00 00       	mov    $0x0,%edx
f012824d:	f7 75 88             	divl   -0x78(%ebp)
f0128250:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0128253:	29 d0                	sub    %edx,%eax
f0128255:	89 c3                	mov    %eax,%ebx
f0128257:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f012825e:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0128263:	0f b6 c0             	movzbl %al,%eax
f0128266:	c1 e0 04             	shl    $0x4,%eax
f0128269:	89 c2                	mov    %eax,%edx
f012826b:	8b 45 80             	mov    -0x80(%ebp),%eax
f012826e:	01 d0                	add    %edx,%eax
f0128270:	48                   	dec    %eax
f0128271:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0128277:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012827d:	ba 00 00 00 00       	mov    $0x0,%edx
f0128282:	f7 75 80             	divl   -0x80(%ebp)
f0128285:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012828b:	29 d0                	sub    %edx,%eax
f012828d:	01 d8                	add    %ebx,%eax
f012828f:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0128294:	39 c1                	cmp    %eax,%ecx
f0128296:	74 17                	je     f01282af <test_kfreelast+0x563>
f0128298:	83 ec 04             	sub    $0x4,%esp
f012829b:	68 40 98 13 f0       	push   $0xf0139840
f01282a0:	68 f8 0c 00 00       	push   $0xcf8
f01282a5:	68 5a 97 13 f0       	push   $0xf013975a
f01282aa:	e8 01 7f fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01282af:	e8 d0 c3 fd ff       	call   f0104684 <pf_calculate_free_frames>
f01282b4:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f01282b7:	74 17                	je     f01282d0 <test_kfreelast+0x584>
f01282b9:	83 ec 04             	sub    $0x4,%esp
f01282bc:	68 74 97 13 f0       	push   $0xf0139774
f01282c1:	68 f9 0c 00 00       	push   $0xcf9
f01282c6:	68 5a 97 13 f0       	push   $0xf013975a
f01282cb:	e8 e0 7e fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f01282d0:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f01282d3:	e8 ee 46 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01282d8:	29 c3                	sub    %eax,%ebx
f01282da:	89 d8                	mov    %ebx,%eax
f01282dc:	83 f8 02             	cmp    $0x2,%eax
f01282df:	74 17                	je     f01282f8 <test_kfreelast+0x5ac>
f01282e1:	83 ec 04             	sub    $0x4,%esp
f01282e4:	68 dc 97 13 f0       	push   $0xf01397dc
f01282e9:	68 fa 0c 00 00       	push   $0xcfa
f01282ee:	68 5a 97 13 f0       	push   $0xf013975a
f01282f3:	e8 b8 7e fd ff       	call   f01001b0 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f01282f8:	c7 85 94 fe ff ff ff 	movl   $0x1bff,-0x16c(%ebp)
f01282ff:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f0128302:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f0128308:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f012830b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128312:	eb 0e                	jmp    f0128322 <test_kfreelast+0x5d6>
		{
			ptr[i] = 4 ;
f0128314:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0128317:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012831a:	01 d0                	add    %edx,%eax
f012831c:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f012831f:	ff 45 f4             	incl   -0xc(%ebp)
f0128322:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0128328:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012832b:	7f e7                	jg     f0128314 <test_kfreelast+0x5c8>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f012832d:	e8 94 46 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0128332:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128335:	e8 4a c3 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012833a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f012833d:	83 ec 0c             	sub    $0xc,%esp
f0128340:	68 00 fc 2f 00       	push   $0x2ffc00
f0128345:	e8 15 fc fd ff       	call   f0107f5f <kmalloc>
f012834a:	83 c4 10             	add    $0x10,%esp
f012834d:	89 85 f8 fd ff ff    	mov    %eax,-0x208(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128353:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f0128359:	89 c1                	mov    %eax,%ecx
f012835b:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0128362:	10 00 00 
f0128365:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012836a:	0f b6 d0             	movzbl %al,%edx
f012836d:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0128373:	01 d0                	add    %edx,%eax
f0128375:	48                   	dec    %eax
f0128376:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f012837c:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0128382:	ba 00 00 00 00       	mov    $0x0,%edx
f0128387:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f012838d:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0128393:	29 d0                	sub    %edx,%eax
f0128395:	89 c3                	mov    %eax,%ebx
f0128397:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f012839e:	10 00 00 
f01283a1:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01283a6:	0f b6 c0             	movzbl %al,%eax
f01283a9:	c1 e0 04             	shl    $0x4,%eax
f01283ac:	89 c2                	mov    %eax,%edx
f01283ae:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01283b4:	01 d0                	add    %edx,%eax
f01283b6:	48                   	dec    %eax
f01283b7:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f01283bd:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01283c3:	ba 00 00 00 00       	mov    $0x0,%edx
f01283c8:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f01283ce:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01283d4:	29 d0                	sub    %edx,%eax
f01283d6:	01 d8                	add    %ebx,%eax
f01283d8:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f01283dd:	39 c1                	cmp    %eax,%ecx
f01283df:	74 17                	je     f01283f8 <test_kfreelast+0x6ac>
f01283e1:	83 ec 04             	sub    $0x4,%esp
f01283e4:	68 40 98 13 f0       	push   $0xf0139840
f01283e9:	68 06 0d 00 00       	push   $0xd06
f01283ee:	68 5a 97 13 f0       	push   $0xf013975a
f01283f3:	e8 b8 7d fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01283f8:	e8 87 c2 fd ff       	call   f0104684 <pf_calculate_free_frames>
f01283fd:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0128400:	74 17                	je     f0128419 <test_kfreelast+0x6cd>
f0128402:	83 ec 04             	sub    $0x4,%esp
f0128405:	68 74 97 13 f0       	push   $0xf0139774
f012840a:	68 07 0d 00 00       	push   $0xd07
f012840f:	68 5a 97 13 f0       	push   $0xf013975a
f0128414:	e8 97 7d fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128419:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012841c:	e8 a5 45 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0128421:	29 c3                	sub    %eax,%ebx
f0128423:	89 d8                	mov    %ebx,%eax
f0128425:	3d 00 03 00 00       	cmp    $0x300,%eax
f012842a:	74 17                	je     f0128443 <test_kfreelast+0x6f7>
f012842c:	83 ec 04             	sub    $0x4,%esp
f012842f:	68 dc 97 13 f0       	push   $0xf01397dc
f0128434:	68 08 0d 00 00       	push   $0xd08
f0128439:	68 5a 97 13 f0       	push   $0xf013975a
f012843e:	e8 6d 7d fd ff       	call   f01001b0 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f0128443:	c7 85 98 fe ff ff ff 	movl   $0x2ffbff,-0x168(%ebp)
f012844a:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f012844d:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f0128453:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0128456:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012845d:	eb 0e                	jmp    f012846d <test_kfreelast+0x721>
		{
			ptr[i] = 5 ;
f012845f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0128462:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0128465:	01 d0                	add    %edx,%eax
f0128467:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f012846a:	ff 45 f4             	incl   -0xc(%ebp)
f012846d:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0128473:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128476:	7f e7                	jg     f012845f <test_kfreelast+0x713>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0128478:	e8 49 45 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012847d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128480:	e8 ff c1 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0128485:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0128488:	83 ec 0c             	sub    $0xc,%esp
f012848b:	68 00 fc 5f 00       	push   $0x5ffc00
f0128490:	e8 ca fa fd ff       	call   f0107f5f <kmalloc>
f0128495:	83 c4 10             	add    $0x10,%esp
f0128498:	89 85 fc fd ff ff    	mov    %eax,-0x204(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012849e:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f01284a4:	89 c1                	mov    %eax,%ecx
f01284a6:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f01284ad:	10 00 00 
f01284b0:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01284b5:	0f b6 d0             	movzbl %al,%edx
f01284b8:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01284be:	01 d0                	add    %edx,%eax
f01284c0:	48                   	dec    %eax
f01284c1:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f01284c7:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01284cd:	ba 00 00 00 00       	mov    $0x0,%edx
f01284d2:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f01284d8:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01284de:	29 d0                	sub    %edx,%eax
f01284e0:	89 c3                	mov    %eax,%ebx
f01284e2:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f01284e9:	10 00 00 
f01284ec:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01284f1:	0f b6 c0             	movzbl %al,%eax
f01284f4:	c1 e0 04             	shl    $0x4,%eax
f01284f7:	89 c2                	mov    %eax,%edx
f01284f9:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01284ff:	01 d0                	add    %edx,%eax
f0128501:	48                   	dec    %eax
f0128502:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f0128508:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012850e:	ba 00 00 00 00       	mov    $0x0,%edx
f0128513:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f0128519:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012851f:	29 d0                	sub    %edx,%eax
f0128521:	01 d8                	add    %ebx,%eax
f0128523:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0128528:	39 c1                	cmp    %eax,%ecx
f012852a:	74 17                	je     f0128543 <test_kfreelast+0x7f7>
f012852c:	83 ec 04             	sub    $0x4,%esp
f012852f:	68 40 98 13 f0       	push   $0xf0139840
f0128534:	68 14 0d 00 00       	push   $0xd14
f0128539:	68 5a 97 13 f0       	push   $0xf013975a
f012853e:	e8 6d 7c fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128543:	e8 3c c1 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0128548:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012854b:	74 17                	je     f0128564 <test_kfreelast+0x818>
f012854d:	83 ec 04             	sub    $0x4,%esp
f0128550:	68 74 97 13 f0       	push   $0xf0139774
f0128555:	68 15 0d 00 00       	push   $0xd15
f012855a:	68 5a 97 13 f0       	push   $0xf013975a
f012855f:	e8 4c 7c fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128564:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0128567:	e8 5a 44 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012856c:	29 c3                	sub    %eax,%ebx
f012856e:	89 d8                	mov    %ebx,%eax
f0128570:	3d 00 06 00 00       	cmp    $0x600,%eax
f0128575:	74 17                	je     f012858e <test_kfreelast+0x842>
f0128577:	83 ec 04             	sub    $0x4,%esp
f012857a:	68 dc 97 13 f0       	push   $0xf01397dc
f012857f:	68 16 0d 00 00       	push   $0xd16
f0128584:	68 5a 97 13 f0       	push   $0xf013975a
f0128589:	e8 22 7c fd ff       	call   f01001b0 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f012858e:	c7 85 9c fe ff ff ff 	movl   $0x5ffbff,-0x164(%ebp)
f0128595:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0128598:	e8 29 44 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012859d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01285a0:	e8 df c0 fd ff       	call   f0104684 <pf_calculate_free_frames>
f01285a5:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f01285a8:	83 ec 0c             	sub    $0xc,%esp
f01285ab:	68 00 38 00 00       	push   $0x3800
f01285b0:	e8 aa f9 fd ff       	call   f0107f5f <kmalloc>
f01285b5:	83 c4 10             	add    $0x10,%esp
f01285b8:	89 85 00 fe ff ff    	mov    %eax,-0x200(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01285be:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f01285c4:	89 c1                	mov    %eax,%ecx
f01285c6:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f01285cd:	10 00 00 
f01285d0:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01285d5:	0f b6 d0             	movzbl %al,%edx
f01285d8:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f01285de:	01 d0                	add    %edx,%eax
f01285e0:	48                   	dec    %eax
f01285e1:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f01285e7:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01285ed:	ba 00 00 00 00       	mov    $0x0,%edx
f01285f2:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f01285f8:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01285fe:	29 d0                	sub    %edx,%eax
f0128600:	89 c3                	mov    %eax,%ebx
f0128602:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f0128609:	10 00 00 
f012860c:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0128611:	0f b6 c0             	movzbl %al,%eax
f0128614:	c1 e0 04             	shl    $0x4,%eax
f0128617:	89 c2                	mov    %eax,%edx
f0128619:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012861f:	01 d0                	add    %edx,%eax
f0128621:	48                   	dec    %eax
f0128622:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f0128628:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012862e:	ba 00 00 00 00       	mov    $0x0,%edx
f0128633:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f0128639:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012863f:	29 d0                	sub    %edx,%eax
f0128641:	01 d8                	add    %ebx,%eax
f0128643:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0128648:	39 c1                	cmp    %eax,%ecx
f012864a:	74 17                	je     f0128663 <test_kfreelast+0x917>
f012864c:	83 ec 04             	sub    $0x4,%esp
f012864f:	68 40 98 13 f0       	push   $0xf0139840
f0128654:	68 1d 0d 00 00       	push   $0xd1d
f0128659:	68 5a 97 13 f0       	push   $0xf013975a
f012865e:	e8 4d 7b fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128663:	e8 1c c0 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0128668:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012866b:	74 17                	je     f0128684 <test_kfreelast+0x938>
f012866d:	83 ec 04             	sub    $0x4,%esp
f0128670:	68 74 97 13 f0       	push   $0xf0139774
f0128675:	68 1e 0d 00 00       	push   $0xd1e
f012867a:	68 5a 97 13 f0       	push   $0xf013975a
f012867f:	e8 2c 7b fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128684:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0128687:	e8 3a 43 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012868c:	29 c3                	sub    %eax,%ebx
f012868e:	89 d8                	mov    %ebx,%eax
f0128690:	83 f8 04             	cmp    $0x4,%eax
f0128693:	74 17                	je     f01286ac <test_kfreelast+0x960>
f0128695:	83 ec 04             	sub    $0x4,%esp
f0128698:	68 dc 97 13 f0       	push   $0xf01397dc
f012869d:	68 1f 0d 00 00       	push   $0xd1f
f01286a2:	68 5a 97 13 f0       	push   $0xf013975a
f01286a7:	e8 04 7b fd ff       	call   f01001b0 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f01286ac:	c7 85 a0 fe ff ff ff 	movl   $0x37ff,-0x160(%ebp)
f01286b3:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f01286b6:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f01286bc:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f01286bf:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01286c6:	eb 0e                	jmp    f01286d6 <test_kfreelast+0x98a>
		{
			ptr[i] = 7 ;
f01286c8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01286cb:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01286ce:	01 d0                	add    %edx,%eax
f01286d0:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f01286d3:	ff 45 f4             	incl   -0xc(%ebp)
f01286d6:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f01286dc:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01286df:	7f e7                	jg     f01286c8 <test_kfreelast+0x97c>
	}

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f01286e1:	e8 e0 42 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01286e6:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f01286ec:	e8 93 bf fd ff       	call   f0104684 <pf_calculate_free_frames>
f01286f1:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		kfree(ptr_allocations[0]);
f01286f7:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f01286fd:	83 ec 0c             	sub    $0xc,%esp
f0128700:	50                   	push   %eax
f0128701:	e8 73 f8 fd ff       	call   f0107f79 <kfree>
f0128706:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128709:	e8 76 bf fd ff       	call   f0104684 <pf_calculate_free_frames>
f012870e:	3b 85 44 ff ff ff    	cmp    -0xbc(%ebp),%eax
f0128714:	74 17                	je     f012872d <test_kfreelast+0x9e1>
f0128716:	83 ec 04             	sub    $0x4,%esp
f0128719:	68 74 97 13 f0       	push   $0xf0139774
f012871e:	68 2e 0d 00 00       	push   $0xd2e
f0128723:	68 5a 97 13 f0       	push   $0xf013975a
f0128728:	e8 83 7a fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f012872d:	e8 94 42 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0128732:	89 c2                	mov    %eax,%edx
f0128734:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012873a:	29 c2                	sub    %eax,%edx
f012873c:	89 d0                	mov    %edx,%eax
f012873e:	3d 00 02 00 00       	cmp    $0x200,%eax
f0128743:	74 17                	je     f012875c <test_kfreelast+0xa10>
f0128745:	83 ec 04             	sub    $0x4,%esp
f0128748:	68 e4 9e 13 f0       	push   $0xf0139ee4
f012874d:	68 2f 0d 00 00       	push   $0xd2f
f0128752:	68 5a 97 13 f0       	push   $0xf013975a
f0128757:	e8 54 7a fd ff       	call   f01001b0 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f012875c:	e8 65 42 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0128761:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128767:	e8 18 bf fd ff       	call   f0104684 <pf_calculate_free_frames>
f012876c:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		kfree(ptr_allocations[1]);
f0128772:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0128778:	83 ec 0c             	sub    $0xc,%esp
f012877b:	50                   	push   %eax
f012877c:	e8 f8 f7 fd ff       	call   f0107f79 <kfree>
f0128781:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128784:	e8 fb be fd ff       	call   f0104684 <pf_calculate_free_frames>
f0128789:	3b 85 44 ff ff ff    	cmp    -0xbc(%ebp),%eax
f012878f:	74 17                	je     f01287a8 <test_kfreelast+0xa5c>
f0128791:	83 ec 04             	sub    $0x4,%esp
f0128794:	68 74 97 13 f0       	push   $0xf0139774
f0128799:	68 35 0d 00 00       	push   $0xd35
f012879e:	68 5a 97 13 f0       	push   $0xf013975a
f01287a3:	e8 08 7a fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f01287a8:	e8 19 42 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01287ad:	89 c2                	mov    %eax,%edx
f01287af:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f01287b5:	29 c2                	sub    %eax,%edx
f01287b7:	89 d0                	mov    %edx,%eax
f01287b9:	3d 00 02 00 00       	cmp    $0x200,%eax
f01287be:	74 17                	je     f01287d7 <test_kfreelast+0xa8b>
f01287c0:	83 ec 04             	sub    $0x4,%esp
f01287c3:	68 e4 9e 13 f0       	push   $0xf0139ee4
f01287c8:	68 36 0d 00 00       	push   $0xd36
f01287cd:	68 5a 97 13 f0       	push   $0xf013975a
f01287d2:	e8 d9 79 fd ff       	call   f01001b0 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f01287d7:	e8 ea 41 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01287dc:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01287e2:	e8 9d be fd ff       	call   f0104684 <pf_calculate_free_frames>
f01287e7:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		kfree(ptr_allocations[6]);
f01287ed:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f01287f3:	83 ec 0c             	sub    $0xc,%esp
f01287f6:	50                   	push   %eax
f01287f7:	e8 7d f7 fd ff       	call   f0107f79 <kfree>
f01287fc:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01287ff:	e8 80 be fd ff       	call   f0104684 <pf_calculate_free_frames>
f0128804:	3b 85 44 ff ff ff    	cmp    -0xbc(%ebp),%eax
f012880a:	74 17                	je     f0128823 <test_kfreelast+0xad7>
f012880c:	83 ec 04             	sub    $0x4,%esp
f012880f:	68 74 97 13 f0       	push   $0xf0139774
f0128814:	68 3c 0d 00 00       	push   $0xd3c
f0128819:	68 5a 97 13 f0       	push   $0xf013975a
f012881e:	e8 8d 79 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0128823:	e8 9e 41 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0128828:	89 c2                	mov    %eax,%edx
f012882a:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0128830:	29 c2                	sub    %eax,%edx
f0128832:	89 d0                	mov    %edx,%eax
f0128834:	3d 00 06 00 00       	cmp    $0x600,%eax
f0128839:	74 17                	je     f0128852 <test_kfreelast+0xb06>
f012883b:	83 ec 04             	sub    $0x4,%esp
f012883e:	68 e4 9e 13 f0       	push   $0xf0139ee4
f0128843:	68 3d 0d 00 00       	push   $0xd3d
f0128848:	68 5a 97 13 f0       	push   $0xf013975a
f012884d:	e8 5e 79 fd ff       	call   f01001b0 <_panic>
	}

	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
f0128852:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0128858:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f012885b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128862:	eb 1e                	jmp    f0128882 <test_kfreelast+0xb36>
		{
			sums[2] += ptr[i] ;
f0128864:	8b 95 3c fe ff ff    	mov    -0x1c4(%ebp),%edx
f012886a:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012886d:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0128870:	01 c8                	add    %ecx,%eax
f0128872:	8a 00                	mov    (%eax),%al
f0128874:	0f be c0             	movsbl %al,%eax
f0128877:	01 d0                	add    %edx,%eax
f0128879:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)

	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f012887f:	ff 45 f4             	incl   -0xc(%ebp)
f0128882:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0128888:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012888b:	7f d7                	jg     f0128864 <test_kfreelast+0xb18>
		{
			sums[2] += ptr[i] ;
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");
f012888d:	8b 95 3c fe ff ff    	mov    -0x1c4(%ebp),%edx
f0128893:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0128899:	01 c0                	add    %eax,%eax
f012889b:	39 c2                	cmp    %eax,%edx
f012889d:	74 17                	je     f01288b6 <test_kfreelast+0xb6a>
f012889f:	83 ec 04             	sub    $0x4,%esp
f01288a2:	68 40 9f 13 f0       	push   $0xf0139f40
f01288a7:	68 48 0d 00 00       	push   $0xd48
f01288ac:	68 5a 97 13 f0       	push   $0xf013975a
f01288b1:	e8 fa 78 fd ff       	call   f01001b0 <_panic>

		//2 KB
		ptr = (char*)ptr_allocations[3];
f01288b6:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f01288bc:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f01288bf:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01288c6:	eb 1e                	jmp    f01288e6 <test_kfreelast+0xb9a>
		{
			sums[3] += ptr[i] ;
f01288c8:	8b 95 40 fe ff ff    	mov    -0x1c0(%ebp),%edx
f01288ce:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01288d1:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01288d4:	01 c8                	add    %ecx,%eax
f01288d6:	8a 00                	mov    (%eax),%al
f01288d8:	0f be c0             	movsbl %al,%eax
f01288db:	01 d0                	add    %edx,%eax
f01288dd:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");

		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f01288e3:	ff 45 f4             	incl   -0xc(%ebp)
f01288e6:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f01288ec:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01288ef:	7f d7                	jg     f01288c8 <test_kfreelast+0xb7c>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f01288f1:	8b 95 40 fe ff ff    	mov    -0x1c0(%ebp),%edx
f01288f7:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f01288fd:	89 c1                	mov    %eax,%ecx
f01288ff:	01 c9                	add    %ecx,%ecx
f0128901:	01 c8                	add    %ecx,%eax
f0128903:	39 c2                	cmp    %eax,%edx
f0128905:	74 17                	je     f012891e <test_kfreelast+0xbd2>
f0128907:	83 ec 04             	sub    $0x4,%esp
f012890a:	68 40 9f 13 f0       	push   $0xf0139f40
f012890f:	68 50 0d 00 00       	push   $0xd50
f0128914:	68 5a 97 13 f0       	push   $0xf013975a
f0128919:	e8 92 78 fd ff       	call   f01001b0 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f012891e:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f0128924:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0128927:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012892e:	eb 1e                	jmp    f012894e <test_kfreelast+0xc02>
		{
			sums[4] += ptr[i] ;
f0128930:	8b 95 44 fe ff ff    	mov    -0x1bc(%ebp),%edx
f0128936:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0128939:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012893c:	01 c8                	add    %ecx,%eax
f012893e:	8a 00                	mov    (%eax),%al
f0128940:	0f be c0             	movsbl %al,%eax
f0128943:	01 d0                	add    %edx,%eax
f0128945:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f012894b:	ff 45 f4             	incl   -0xc(%ebp)
f012894e:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0128954:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128957:	7f d7                	jg     f0128930 <test_kfreelast+0xbe4>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f0128959:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012895f:	8b 95 94 fe ff ff    	mov    -0x16c(%ebp),%edx
f0128965:	c1 e2 02             	shl    $0x2,%edx
f0128968:	39 d0                	cmp    %edx,%eax
f012896a:	74 17                	je     f0128983 <test_kfreelast+0xc37>
f012896c:	83 ec 04             	sub    $0x4,%esp
f012896f:	68 40 9f 13 f0       	push   $0xf0139f40
f0128974:	68 58 0d 00 00       	push   $0xd58
f0128979:	68 5a 97 13 f0       	push   $0xf013975a
f012897e:	e8 2d 78 fd ff       	call   f01001b0 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f0128983:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f0128989:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f012898c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128993:	eb 1e                	jmp    f01289b3 <test_kfreelast+0xc67>
		{
			sums[5] += ptr[i] ;
f0128995:	8b 95 48 fe ff ff    	mov    -0x1b8(%ebp),%edx
f012899b:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012899e:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01289a1:	01 c8                	add    %ecx,%eax
f01289a3:	8a 00                	mov    (%eax),%al
f01289a5:	0f be c0             	movsbl %al,%eax
f01289a8:	01 d0                	add    %edx,%eax
f01289aa:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f01289b0:	ff 45 f4             	incl   -0xc(%ebp)
f01289b3:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f01289b9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01289bc:	7f d7                	jg     f0128995 <test_kfreelast+0xc49>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f01289be:	8b 8d 48 fe ff ff    	mov    -0x1b8(%ebp),%ecx
f01289c4:	8b 95 98 fe ff ff    	mov    -0x168(%ebp),%edx
f01289ca:	89 d0                	mov    %edx,%eax
f01289cc:	c1 e0 02             	shl    $0x2,%eax
f01289cf:	01 d0                	add    %edx,%eax
f01289d1:	39 c1                	cmp    %eax,%ecx
f01289d3:	74 17                	je     f01289ec <test_kfreelast+0xca0>
f01289d5:	83 ec 04             	sub    $0x4,%esp
f01289d8:	68 40 9f 13 f0       	push   $0xf0139f40
f01289dd:	68 60 0d 00 00       	push   $0xd60
f01289e2:	68 5a 97 13 f0       	push   $0xf013975a
f01289e7:	e8 c4 77 fd ff       	call   f01001b0 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f01289ec:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f01289f2:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f01289f5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01289fc:	eb 1e                	jmp    f0128a1c <test_kfreelast+0xcd0>
		{
			sums[7] += ptr[i] ;
f01289fe:	8b 95 50 fe ff ff    	mov    -0x1b0(%ebp),%edx
f0128a04:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0128a07:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0128a0a:	01 c8                	add    %ecx,%eax
f0128a0c:	8a 00                	mov    (%eax),%al
f0128a0e:	0f be c0             	movsbl %al,%eax
f0128a11:	01 d0                	add    %edx,%eax
f0128a13:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0128a19:	ff 45 f4             	incl   -0xc(%ebp)
f0128a1c:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0128a22:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128a25:	7f d7                	jg     f01289fe <test_kfreelast+0xcb2>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f0128a27:	8b 8d 50 fe ff ff    	mov    -0x1b0(%ebp),%ecx
f0128a2d:	8b 95 a0 fe ff ff    	mov    -0x160(%ebp),%edx
f0128a33:	89 d0                	mov    %edx,%eax
f0128a35:	01 c0                	add    %eax,%eax
f0128a37:	01 d0                	add    %edx,%eax
f0128a39:	01 c0                	add    %eax,%eax
f0128a3b:	01 d0                	add    %edx,%eax
f0128a3d:	39 c1                	cmp    %eax,%ecx
f0128a3f:	74 17                	je     f0128a58 <test_kfreelast+0xd0c>
f0128a41:	83 ec 04             	sub    $0x4,%esp
f0128a44:	68 40 9f 13 f0       	push   $0xf0139f40
f0128a49:	68 68 0d 00 00       	push   $0xd68
f0128a4e:	68 5a 97 13 f0       	push   $0xf013975a
f0128a53:	e8 58 77 fd ff       	call   f01001b0 <_panic>
	}

	//Allocate after kfree
	{
		//20 KB
		freeFrames = sys_calculate_free_frames() ;
f0128a58:	e8 69 3f fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0128a5d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128a60:	e8 1f bc fd ff       	call   f0104684 <pf_calculate_free_frames>
f0128a65:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[8] = kmalloc(20*kilo);
f0128a68:	83 ec 0c             	sub    $0xc,%esp
f0128a6b:	68 00 50 00 00       	push   $0x5000
f0128a70:	e8 ea f4 fd ff       	call   f0107f5f <kmalloc>
f0128a75:	83 c4 10             	add    $0x10,%esp
f0128a78:	89 85 04 fe ff ff    	mov    %eax,-0x1fc(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128a7e:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f0128a84:	89 c1                	mov    %eax,%ecx
f0128a86:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f0128a8d:	10 00 00 
f0128a90:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0128a95:	0f b6 d0             	movzbl %al,%edx
f0128a98:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0128a9e:	01 d0                	add    %edx,%eax
f0128aa0:	48                   	dec    %eax
f0128aa1:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f0128aa7:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0128aad:	ba 00 00 00 00       	mov    $0x0,%edx
f0128ab2:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f0128ab8:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0128abe:	29 d0                	sub    %edx,%eax
f0128ac0:	89 c3                	mov    %eax,%ebx
f0128ac2:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f0128ac9:	10 00 00 
f0128acc:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0128ad1:	0f b6 c0             	movzbl %al,%eax
f0128ad4:	c1 e0 04             	shl    $0x4,%eax
f0128ad7:	89 c2                	mov    %eax,%edx
f0128ad9:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0128adf:	01 d0                	add    %edx,%eax
f0128ae1:	48                   	dec    %eax
f0128ae2:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f0128ae8:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0128aee:	ba 00 00 00 00       	mov    $0x0,%edx
f0128af3:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f0128af9:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0128aff:	29 d0                	sub    %edx,%eax
f0128b01:	01 d8                	add    %ebx,%eax
f0128b03:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0128b08:	39 c1                	cmp    %eax,%ecx
f0128b0a:	74 17                	je     f0128b23 <test_kfreelast+0xdd7>
f0128b0c:	83 ec 04             	sub    $0x4,%esp
f0128b0f:	68 40 98 13 f0       	push   $0xf0139840
f0128b14:	68 71 0d 00 00       	push   $0xd71
f0128b19:	68 5a 97 13 f0       	push   $0xf013975a
f0128b1e:	e8 8d 76 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128b23:	e8 5c bb fd ff       	call   f0104684 <pf_calculate_free_frames>
f0128b28:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0128b2b:	74 17                	je     f0128b44 <test_kfreelast+0xdf8>
f0128b2d:	83 ec 04             	sub    $0x4,%esp
f0128b30:	68 74 97 13 f0       	push   $0xf0139774
f0128b35:	68 72 0d 00 00       	push   $0xd72
f0128b3a:	68 5a 97 13 f0       	push   $0xf013975a
f0128b3f:	e8 6c 76 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128b44:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0128b47:	e8 7a 3e fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0128b4c:	29 c3                	sub    %eax,%ebx
f0128b4e:	89 d8                	mov    %ebx,%eax
f0128b50:	83 f8 05             	cmp    $0x5,%eax
f0128b53:	74 17                	je     f0128b6c <test_kfreelast+0xe20>
f0128b55:	83 ec 04             	sub    $0x4,%esp
f0128b58:	68 dc 97 13 f0       	push   $0xf01397dc
f0128b5d:	68 73 0d 00 00       	push   $0xd73
f0128b62:	68 5a 97 13 f0       	push   $0xf013975a
f0128b67:	e8 44 76 fd ff       	call   f01001b0 <_panic>
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
f0128b6c:	c7 85 a4 fe ff ff ff 	movl   $0x4fff,-0x15c(%ebp)
f0128b73:	4f 00 00 
		ptr = (char*)ptr_allocations[8];
f0128b76:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f0128b7c:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f0128b7f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128b86:	eb 0e                	jmp    f0128b96 <test_kfreelast+0xe4a>
		{
			ptr[i] = 8 ;
f0128b88:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0128b8b:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0128b8e:	01 d0                	add    %edx,%eax
f0128b90:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f0128b93:	ff 45 f4             	incl   -0xc(%ebp)
f0128b96:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0128b9c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128b9f:	7f e7                	jg     f0128b88 <test_kfreelast+0xe3c>
		{
			ptr[i] = 8 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f0128ba1:	e8 20 3e fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0128ba6:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128ba9:	e8 d6 ba fd ff       	call   f0104684 <pf_calculate_free_frames>
f0128bae:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega);
f0128bb1:	83 ec 0c             	sub    $0xc,%esp
f0128bb4:	68 00 00 10 00       	push   $0x100000
f0128bb9:	e8 a1 f3 fd ff       	call   f0107f5f <kmalloc>
f0128bbe:	83 c4 10             	add    $0x10,%esp
f0128bc1:	89 85 08 fe ff ff    	mov    %eax,-0x1f8(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128bc7:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f0128bcd:	89 c1                	mov    %eax,%ecx
f0128bcf:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f0128bd6:	10 00 00 
f0128bd9:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0128bde:	0f b6 d0             	movzbl %al,%edx
f0128be1:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0128be7:	01 d0                	add    %edx,%eax
f0128be9:	48                   	dec    %eax
f0128bea:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f0128bf0:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0128bf6:	ba 00 00 00 00       	mov    $0x0,%edx
f0128bfb:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f0128c01:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0128c07:	29 d0                	sub    %edx,%eax
f0128c09:	89 c3                	mov    %eax,%ebx
f0128c0b:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f0128c12:	10 00 00 
f0128c15:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0128c1a:	0f b6 c0             	movzbl %al,%eax
f0128c1d:	c1 e0 04             	shl    $0x4,%eax
f0128c20:	89 c2                	mov    %eax,%edx
f0128c22:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0128c28:	01 d0                	add    %edx,%eax
f0128c2a:	48                   	dec    %eax
f0128c2b:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f0128c31:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0128c37:	ba 00 00 00 00       	mov    $0x0,%edx
f0128c3c:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f0128c42:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0128c48:	29 d0                	sub    %edx,%eax
f0128c4a:	01 d8                	add    %ebx,%eax
f0128c4c:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f0128c51:	39 c1                	cmp    %eax,%ecx
f0128c53:	74 17                	je     f0128c6c <test_kfreelast+0xf20>
f0128c55:	83 ec 04             	sub    $0x4,%esp
f0128c58:	68 40 98 13 f0       	push   $0xf0139840
f0128c5d:	68 7f 0d 00 00       	push   $0xd7f
f0128c62:	68 5a 97 13 f0       	push   $0xf013975a
f0128c67:	e8 44 75 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128c6c:	e8 13 ba fd ff       	call   f0104684 <pf_calculate_free_frames>
f0128c71:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0128c74:	74 17                	je     f0128c8d <test_kfreelast+0xf41>
f0128c76:	83 ec 04             	sub    $0x4,%esp
f0128c79:	68 74 97 13 f0       	push   $0xf0139774
f0128c7e:	68 80 0d 00 00       	push   $0xd80
f0128c83:	68 5a 97 13 f0       	push   $0xf013975a
f0128c88:	e8 23 75 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128c8d:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0128c90:	e8 31 3d fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0128c95:	29 c3                	sub    %eax,%ebx
f0128c97:	89 d8                	mov    %ebx,%eax
f0128c99:	3d 00 01 00 00       	cmp    $0x100,%eax
f0128c9e:	74 17                	je     f0128cb7 <test_kfreelast+0xf6b>
f0128ca0:	83 ec 04             	sub    $0x4,%esp
f0128ca3:	68 dc 97 13 f0       	push   $0xf01397dc
f0128ca8:	68 81 0d 00 00       	push   $0xd81
f0128cad:	68 5a 97 13 f0       	push   $0xf013975a
f0128cb2:	e8 f9 74 fd ff       	call   f01001b0 <_panic>
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
f0128cb7:	c7 85 a8 fe ff ff ff 	movl   $0xfffff,-0x158(%ebp)
f0128cbe:	ff 0f 00 
		ptr = (char*)ptr_allocations[9];
f0128cc1:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f0128cc7:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f0128cca:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128cd1:	eb 0e                	jmp    f0128ce1 <test_kfreelast+0xf95>
		{
			ptr[i] = 9 ;
f0128cd3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0128cd6:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0128cd9:	01 d0                	add    %edx,%eax
f0128cdb:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f0128cde:	ff 45 f4             	incl   -0xc(%ebp)
f0128ce1:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0128ce7:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128cea:	7f e7                	jg     f0128cd3 <test_kfreelast+0xf87>
		{
			ptr[i] = 9 ;
		}
	}

	ce = 0;
f0128cec:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	//kfree last allocated space
	{
		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0128cf3:	e8 ce 3c fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0128cf8:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128cfb:	e8 84 b9 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0128d00:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[9]);
f0128d03:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f0128d09:	83 ec 0c             	sub    $0xc,%esp
f0128d0c:	50                   	push   %eax
f0128d0d:	e8 67 f2 fd ff       	call   f0107f79 <kfree>
f0128d12:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128d15:	e8 6a b9 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0128d1a:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0128d1d:	74 17                	je     f0128d36 <test_kfreelast+0xfea>
f0128d1f:	83 ec 04             	sub    $0x4,%esp
f0128d22:	68 74 97 13 f0       	push   $0xf0139774
f0128d27:	68 91 0d 00 00       	push   $0xd91
f0128d2c:	68 5a 97 13 f0       	push   $0xf013975a
f0128d31:	e8 7a 74 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong kfree: pages in memory are not freed correctly");
f0128d36:	e8 8b 3c fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0128d3b:	89 c2                	mov    %eax,%edx
f0128d3d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0128d40:	29 c2                	sub    %eax,%edx
f0128d42:	89 d0                	mov    %edx,%eax
f0128d44:	3d 00 01 00 00       	cmp    $0x100,%eax
f0128d49:	74 17                	je     f0128d62 <test_kfreelast+0x1016>
f0128d4b:	83 ec 04             	sub    $0x4,%esp
f0128d4e:	68 e4 9e 13 f0       	push   $0xf0139ee4
f0128d53:	68 92 0d 00 00       	push   $0xd92
f0128d58:	68 5a 97 13 f0       	push   $0xf013975a
f0128d5d:	e8 4e 74 fd ff       	call   f01001b0 <_panic>
	}

	//Allocate after kfree last [25%]
	{
		//30 KB
		freeFrames = sys_calculate_free_frames() ;
f0128d62:	e8 5f 3c fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0128d67:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128d6a:	e8 15 b9 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0128d6f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[10] = kmalloc(30*kilo);
f0128d72:	83 ec 0c             	sub    $0xc,%esp
f0128d75:	68 00 78 00 00       	push   $0x7800
f0128d7a:	e8 e0 f1 fd ff       	call   f0107f5f <kmalloc>
f0128d7f:	83 c4 10             	add    $0x10,%esp
f0128d82:	89 85 0c fe ff ff    	mov    %eax,-0x1f4(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128d88:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f0128d8e:	89 c1                	mov    %eax,%ecx
f0128d90:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f0128d97:	10 00 00 
f0128d9a:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0128d9f:	0f b6 d0             	movzbl %al,%edx
f0128da2:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0128da8:	01 d0                	add    %edx,%eax
f0128daa:	48                   	dec    %eax
f0128dab:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f0128db1:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0128db7:	ba 00 00 00 00       	mov    $0x0,%edx
f0128dbc:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f0128dc2:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0128dc8:	29 d0                	sub    %edx,%eax
f0128dca:	89 c3                	mov    %eax,%ebx
f0128dcc:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f0128dd3:	10 00 00 
f0128dd6:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0128ddb:	0f b6 c0             	movzbl %al,%eax
f0128dde:	c1 e0 04             	shl    $0x4,%eax
f0128de1:	89 c2                	mov    %eax,%edx
f0128de3:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0128de9:	01 d0                	add    %edx,%eax
f0128deb:	48                   	dec    %eax
f0128dec:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f0128df2:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0128df8:	ba 00 00 00 00       	mov    $0x0,%edx
f0128dfd:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f0128e03:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0128e09:	29 d0                	sub    %edx,%eax
f0128e0b:	01 d8                	add    %ebx,%eax
f0128e0d:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f0128e12:	39 c1                	cmp    %eax,%ecx
f0128e14:	74 17                	je     f0128e2d <test_kfreelast+0x10e1>
f0128e16:	83 ec 04             	sub    $0x4,%esp
f0128e19:	68 40 98 13 f0       	push   $0xf0139840
f0128e1e:	68 9b 0d 00 00       	push   $0xd9b
f0128e23:	68 5a 97 13 f0       	push   $0xf013975a
f0128e28:	e8 83 73 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128e2d:	e8 52 b8 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0128e32:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0128e35:	74 17                	je     f0128e4e <test_kfreelast+0x1102>
f0128e37:	83 ec 04             	sub    $0x4,%esp
f0128e3a:	68 74 97 13 f0       	push   $0xf0139774
f0128e3f:	68 9c 0d 00 00       	push   $0xd9c
f0128e44:	68 5a 97 13 f0       	push   $0xf013975a
f0128e49:	e8 62 73 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 8) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128e4e:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0128e51:	e8 70 3b fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0128e56:	29 c3                	sub    %eax,%ebx
f0128e58:	89 d8                	mov    %ebx,%eax
f0128e5a:	83 f8 08             	cmp    $0x8,%eax
f0128e5d:	74 17                	je     f0128e76 <test_kfreelast+0x112a>
f0128e5f:	83 ec 04             	sub    $0x4,%esp
f0128e62:	68 dc 97 13 f0       	push   $0xf01397dc
f0128e67:	68 9d 0d 00 00       	push   $0xd9d
f0128e6c:	68 5a 97 13 f0       	push   $0xf013975a
f0128e71:	e8 3a 73 fd ff       	call   f01001b0 <_panic>
		lastIndices[10] = (30*kilo)/sizeof(char) - 1;
f0128e76:	c7 85 ac fe ff ff ff 	movl   $0x77ff,-0x154(%ebp)
f0128e7d:	77 00 00 
		ptr = (char*)ptr_allocations[10];
f0128e80:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f0128e86:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[10]; ++i)
f0128e89:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128e90:	eb 0e                	jmp    f0128ea0 <test_kfreelast+0x1154>
		{
			ptr[i] = 10 ;
f0128e92:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0128e95:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0128e98:	01 d0                	add    %edx,%eax
f0128e9a:	c6 00 0a             	movb   $0xa,(%eax)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 8) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[10] = (30*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[10];
		for (i = 0; i < lastIndices[10]; ++i)
f0128e9d:	ff 45 f4             	incl   -0xc(%ebp)
f0128ea0:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f0128ea6:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128ea9:	7f e7                	jg     f0128e92 <test_kfreelast+0x1146>
		{
			ptr[i] = 10 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f0128eab:	e8 16 3b fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0128eb0:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128eb3:	e8 cc b7 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0128eb8:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[11] = kmalloc(1*Mega);
f0128ebb:	83 ec 0c             	sub    $0xc,%esp
f0128ebe:	68 00 00 10 00       	push   $0x100000
f0128ec3:	e8 97 f0 fd ff       	call   f0107f5f <kmalloc>
f0128ec8:	83 c4 10             	add    $0x10,%esp
f0128ecb:	89 85 10 fe ff ff    	mov    %eax,-0x1f0(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 13*Mega + 84*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128ed1:	8b 85 10 fe ff ff    	mov    -0x1f0(%ebp),%eax
f0128ed7:	89 c1                	mov    %eax,%ecx
f0128ed9:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f0128ee0:	10 00 00 
f0128ee3:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0128ee8:	0f b6 d0             	movzbl %al,%edx
f0128eeb:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0128ef1:	01 d0                	add    %edx,%eax
f0128ef3:	48                   	dec    %eax
f0128ef4:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f0128efa:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0128f00:	ba 00 00 00 00       	mov    $0x0,%edx
f0128f05:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f0128f0b:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0128f11:	29 d0                	sub    %edx,%eax
f0128f13:	89 c3                	mov    %eax,%ebx
f0128f15:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f0128f1c:	10 00 00 
f0128f1f:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0128f24:	0f b6 c0             	movzbl %al,%eax
f0128f27:	c1 e0 04             	shl    $0x4,%eax
f0128f2a:	89 c2                	mov    %eax,%edx
f0128f2c:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0128f32:	01 d0                	add    %edx,%eax
f0128f34:	48                   	dec    %eax
f0128f35:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f0128f3b:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0128f41:	ba 00 00 00 00       	mov    $0x0,%edx
f0128f46:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f0128f4c:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0128f52:	29 d0                	sub    %edx,%eax
f0128f54:	01 d8                	add    %ebx,%eax
f0128f56:	2d 00 70 2e 09       	sub    $0x92e7000,%eax
f0128f5b:	39 c1                	cmp    %eax,%ecx
f0128f5d:	74 17                	je     f0128f76 <test_kfreelast+0x122a>
f0128f5f:	83 ec 04             	sub    $0x4,%esp
f0128f62:	68 40 98 13 f0       	push   $0xf0139840
f0128f67:	68 a9 0d 00 00       	push   $0xda9
f0128f6c:	68 5a 97 13 f0       	push   $0xf013975a
f0128f71:	e8 3a 72 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128f76:	e8 09 b7 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0128f7b:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0128f7e:	74 17                	je     f0128f97 <test_kfreelast+0x124b>
f0128f80:	83 ec 04             	sub    $0x4,%esp
f0128f83:	68 74 97 13 f0       	push   $0xf0139774
f0128f88:	68 aa 0d 00 00       	push   $0xdaa
f0128f8d:	68 5a 97 13 f0       	push   $0xf013975a
f0128f92:	e8 19 72 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128f97:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0128f9a:	e8 27 3a fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0128f9f:	29 c3                	sub    %eax,%ebx
f0128fa1:	89 d8                	mov    %ebx,%eax
f0128fa3:	3d 00 01 00 00       	cmp    $0x100,%eax
f0128fa8:	74 17                	je     f0128fc1 <test_kfreelast+0x1275>
f0128faa:	83 ec 04             	sub    $0x4,%esp
f0128fad:	68 dc 97 13 f0       	push   $0xf01397dc
f0128fb2:	68 ab 0d 00 00       	push   $0xdab
f0128fb7:	68 5a 97 13 f0       	push   $0xf013975a
f0128fbc:	e8 ef 71 fd ff       	call   f01001b0 <_panic>
		lastIndices[11] = (1*Mega)/sizeof(char) - 1;
f0128fc1:	c7 85 b0 fe ff ff ff 	movl   $0xfffff,-0x150(%ebp)
f0128fc8:	ff 0f 00 
		ptr = (char*)ptr_allocations[11];
f0128fcb:	8b 85 10 fe ff ff    	mov    -0x1f0(%ebp),%eax
f0128fd1:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[11]; ++i)
f0128fd4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128fdb:	eb 0e                	jmp    f0128feb <test_kfreelast+0x129f>
		{
			ptr[i] = 11 ;
f0128fdd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0128fe0:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0128fe3:	01 d0                	add    %edx,%eax
f0128fe5:	c6 00 0b             	movb   $0xb,(%eax)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 13*Mega + 84*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[11] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[11];
		for (i = 0; i < lastIndices[11]; ++i)
f0128fe8:	ff 45 f4             	incl   -0xc(%ebp)
f0128feb:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0128ff1:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128ff4:	7f e7                	jg     f0128fdd <test_kfreelast+0x1291>
		{
			ptr[i] = 11 ;
		}
	}
	ce += 25;
f0128ff6:	83 45 f0 19          	addl   $0x19,-0x10(%ebp)
	cprintf("\nkfreelast: current evaluation = %d%\n", ce);
f0128ffa:	83 ec 08             	sub    $0x8,%esp
f0128ffd:	ff 75 f0             	pushl  -0x10(%ebp)
f0129000:	68 8c a7 13 f0       	push   $0xf013a78c
f0129005:	e8 27 7e fd ff       	call   f0100e31 <cprintf>
f012900a:	83 c4 10             	add    $0x10,%esp

	int f = 0;
f012900d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	//kfree last allocated two spaces
	{
		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0129014:	e8 ad 39 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0129019:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012901c:	e8 63 b6 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0129021:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[11]);
f0129024:	8b 85 10 fe ff ff    	mov    -0x1f0(%ebp),%eax
f012902a:	83 ec 0c             	sub    $0xc,%esp
f012902d:	50                   	push   %eax
f012902e:	e8 46 ef fd ff       	call   f0107f79 <kfree>
f0129033:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f0129036:	e8 49 b6 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012903b:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012903e:	74 1d                	je     f012905d <test_kfreelast+0x1311>
f0129040:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129044:	75 17                	jne    f012905d <test_kfreelast+0x1311>
f0129046:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012904d:	83 ec 0c             	sub    $0xc,%esp
f0129050:	68 b4 a7 13 f0       	push   $0xf013a7b4
f0129055:	e8 d7 7d fd ff       	call   f0100e31 <cprintf>
f012905a:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 256) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012905d:	e8 64 39 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0129062:	89 c2                	mov    %eax,%edx
f0129064:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0129067:	29 c2                	sub    %eax,%edx
f0129069:	89 d0                	mov    %edx,%eax
f012906b:	3d 00 01 00 00       	cmp    $0x100,%eax
f0129070:	74 1d                	je     f012908f <test_kfreelast+0x1343>
f0129072:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129076:	75 17                	jne    f012908f <test_kfreelast+0x1343>
f0129078:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012907f:	83 ec 0c             	sub    $0xc,%esp
f0129082:	68 20 a8 13 f0       	push   $0xf013a820
f0129087:	e8 a5 7d fd ff       	call   f0100e31 <cprintf>
f012908c:	83 c4 10             	add    $0x10,%esp

		//kfree 30 KB
		freeFrames = sys_calculate_free_frames() ;
f012908f:	e8 32 39 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0129094:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129097:	e8 e8 b5 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012909c:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[10]);
f012909f:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f01290a5:	83 ec 0c             	sub    $0xc,%esp
f01290a8:	50                   	push   %eax
f01290a9:	e8 cb ee fd ff       	call   f0107f79 <kfree>
f01290ae:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f01290b1:	e8 ce b5 fd ff       	call   f0104684 <pf_calculate_free_frames>
f01290b6:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f01290b9:	74 1d                	je     f01290d8 <test_kfreelast+0x138c>
f01290bb:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01290bf:	75 17                	jne    f01290d8 <test_kfreelast+0x138c>
f01290c1:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f01290c8:	83 ec 0c             	sub    $0xc,%esp
f01290cb:	68 b4 a7 13 f0       	push   $0xf013a7b4
f01290d0:	e8 5c 7d fd ff       	call   f0100e31 <cprintf>
f01290d5:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 8) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f01290d8:	e8 e9 38 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01290dd:	89 c2                	mov    %eax,%edx
f01290df:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01290e2:	29 c2                	sub    %eax,%edx
f01290e4:	89 d0                	mov    %edx,%eax
f01290e6:	83 f8 08             	cmp    $0x8,%eax
f01290e9:	74 1d                	je     f0129108 <test_kfreelast+0x13bc>
f01290eb:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01290ef:	75 17                	jne    f0129108 <test_kfreelast+0x13bc>
f01290f1:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f01290f8:	83 ec 0c             	sub    $0xc,%esp
f01290fb:	68 20 a8 13 f0       	push   $0xf013a820
f0129100:	e8 2c 7d fd ff       	call   f0100e31 <cprintf>
f0129105:	83 c4 10             	add    $0x10,%esp
	}

	//Allocate after kfree last allocated two spaces (in order) [10%]
	{
		//10 KB
		freeFrames = sys_calculate_free_frames() ;
f0129108:	e8 b9 38 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012910d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129110:	e8 6f b5 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0129115:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[12] = kmalloc(10*kilo);
f0129118:	83 ec 0c             	sub    $0xc,%esp
f012911b:	68 00 28 00 00       	push   $0x2800
f0129120:	e8 3a ee fd ff       	call   f0107f5f <kmalloc>
f0129125:	83 c4 10             	add    $0x10,%esp
f0129128:	89 85 14 fe ff ff    	mov    %eax,-0x1ec(%ebp)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 13*Mega + 52*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
f012912e:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f0129134:	89 c1                	mov    %eax,%ecx
f0129136:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f012913d:	10 00 00 
f0129140:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0129145:	0f b6 d0             	movzbl %al,%edx
f0129148:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012914e:	01 d0                	add    %edx,%eax
f0129150:	48                   	dec    %eax
f0129151:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f0129157:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012915d:	ba 00 00 00 00       	mov    $0x0,%edx
f0129162:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f0129168:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012916e:	29 d0                	sub    %edx,%eax
f0129170:	89 c3                	mov    %eax,%ebx
f0129172:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f0129179:	10 00 00 
f012917c:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0129181:	0f b6 c0             	movzbl %al,%eax
f0129184:	c1 e0 04             	shl    $0x4,%eax
f0129187:	89 c2                	mov    %eax,%edx
f0129189:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012918f:	01 d0                	add    %edx,%eax
f0129191:	48                   	dec    %eax
f0129192:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f0129198:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f012919e:	ba 00 00 00 00       	mov    $0x0,%edx
f01291a3:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f01291a9:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f01291af:	29 d0                	sub    %edx,%eax
f01291b1:	01 d8                	add    %ebx,%eax
f01291b3:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f01291b8:	39 c1                	cmp    %eax,%ecx
f01291ba:	74 1d                	je     f01291d9 <test_kfreelast+0x148d>
f01291bc:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01291c0:	75 17                	jne    f01291d9 <test_kfreelast+0x148d>
f01291c2:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f01291c9:	83 ec 0c             	sub    $0xc,%esp
f01291cc:	68 58 a8 13 f0       	push   $0xf013a858
f01291d1:	e8 5b 7c fd ff       	call   f0100e31 <cprintf>
f01291d6:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f01291d9:	e8 a6 b4 fd ff       	call   f0104684 <pf_calculate_free_frames>
f01291de:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f01291e1:	74 1d                	je     f0129200 <test_kfreelast+0x14b4>
f01291e3:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01291e7:	75 17                	jne    f0129200 <test_kfreelast+0x14b4>
f01291e9:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f01291f0:	83 ec 0c             	sub    $0xc,%esp
f01291f3:	68 b4 a7 13 f0       	push   $0xf013a7b4
f01291f8:	e8 34 7c fd ff       	call   f0100e31 <cprintf>
f01291fd:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 3) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
f0129200:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0129203:	e8 be 37 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0129208:	29 c3                	sub    %eax,%ebx
f012920a:	89 d8                	mov    %ebx,%eax
f012920c:	83 f8 03             	cmp    $0x3,%eax
f012920f:	74 1d                	je     f012922e <test_kfreelast+0x14e2>
f0129211:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129215:	75 17                	jne    f012922e <test_kfreelast+0x14e2>
f0129217:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012921e:	83 ec 0c             	sub    $0xc,%esp
f0129221:	68 c0 a8 13 f0       	push   $0xf013a8c0
f0129226:	e8 06 7c fd ff       	call   f0100e31 <cprintf>
f012922b:	83 c4 10             	add    $0x10,%esp
		lastIndices[12] = (10*kilo)/sizeof(char) - 1;
f012922e:	c7 85 b4 fe ff ff ff 	movl   $0x27ff,-0x14c(%ebp)
f0129235:	27 00 00 
		ptr = (char*)ptr_allocations[12];
f0129238:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012923e:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[12]; ++i)
f0129241:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129248:	eb 0e                	jmp    f0129258 <test_kfreelast+0x150c>
		{
			ptr[i] = 12 ;
f012924a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012924d:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0129250:	01 d0                	add    %edx,%eax
f0129252:	c6 00 0c             	movb   $0xc,(%eax)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 13*Mega + 52*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
		if ((freeFrames - sys_calculate_free_frames()) != 3) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
		lastIndices[12] = (10*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[12];
		for (i = 0; i < lastIndices[12]; ++i)
f0129255:	ff 45 f4             	incl   -0xc(%ebp)
f0129258:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012925e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129261:	7f e7                	jg     f012924a <test_kfreelast+0x14fe>
		{
			ptr[i] = 12 ;
		}
	}

	if (!f) {ce += 10;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f0129263:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129267:	75 17                	jne    f0129280 <test_kfreelast+0x1534>
f0129269:	83 45 f0 0a          	addl   $0xa,-0x10(%ebp)
f012926d:	83 ec 08             	sub    $0x8,%esp
f0129270:	ff 75 f0             	pushl  -0x10(%ebp)
f0129273:	68 8c a7 13 f0       	push   $0xf013a78c
f0129278:	e8 b4 7b fd ff       	call   f0100e31 <cprintf>
f012927d:	83 c4 10             	add    $0x10,%esp
f0129280:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//Check memory access after kfree last and kalloc [15%]
	{
		//10 KB
		ptr = (char*)ptr_allocations[12];
f0129287:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012928d:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[12]; ++i)
f0129290:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129297:	eb 1e                	jmp    f01292b7 <test_kfreelast+0x156b>
		{
			sums[12] += ptr[i] ;
f0129299:	8b 95 64 fe ff ff    	mov    -0x19c(%ebp),%edx
f012929f:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01292a2:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01292a5:	01 c8                	add    %ecx,%eax
f01292a7:	8a 00                	mov    (%eax),%al
f01292a9:	0f be c0             	movsbl %al,%eax
f01292ac:	01 d0                	add    %edx,%eax
f01292ae:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)

	//Check memory access after kfree last and kalloc [15%]
	{
		//10 KB
		ptr = (char*)ptr_allocations[12];
		for (i = 0; i < lastIndices[12]; ++i)
f01292b4:	ff 45 f4             	incl   -0xc(%ebp)
f01292b7:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f01292bd:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01292c0:	7f d7                	jg     f0129299 <test_kfreelast+0x154d>
		{
			sums[12] += ptr[i] ;
		}
		if (sums[12] != 12*lastIndices[12])	if (!f) {f=1; cprintf("\nkfree: invalid read after freeing some allocations");}
f01292c2:	8b 8d 64 fe ff ff    	mov    -0x19c(%ebp),%ecx
f01292c8:	8b 95 b4 fe ff ff    	mov    -0x14c(%ebp),%edx
f01292ce:	89 d0                	mov    %edx,%eax
f01292d0:	01 c0                	add    %eax,%eax
f01292d2:	01 d0                	add    %edx,%eax
f01292d4:	c1 e0 02             	shl    $0x2,%eax
f01292d7:	39 c1                	cmp    %eax,%ecx
f01292d9:	74 1d                	je     f01292f8 <test_kfreelast+0x15ac>
f01292db:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01292df:	75 17                	jne    f01292f8 <test_kfreelast+0x15ac>
f01292e1:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f01292e8:	83 ec 0c             	sub    $0xc,%esp
f01292eb:	68 04 a9 13 f0       	push   $0xf013a904
f01292f0:	e8 3c 7b fd ff       	call   f0100e31 <cprintf>
f01292f5:	83 c4 10             	add    $0x10,%esp


		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f01292f8:	83 ec 0c             	sub    $0xc,%esp
f01292fb:	6a 03                	push   $0x3
f01292fd:	e8 5f 3b fe ff       	call   f010ce61 <sys_bypassPageFault>
f0129302:	83 c4 10             	add    $0x10,%esp

		ptr = (char *) ptr_allocations[12] + 12*kilo;
f0129305:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012930b:	05 00 30 00 00       	add    $0x3000,%eax
f0129310:	89 45 9c             	mov    %eax,-0x64(%ebp)

		for (i = 0; i < 30*kilo; ++i)
f0129313:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012931a:	eb 3c                	jmp    f0129358 <test_kfreelast+0x160c>
		{
			ptr[i] = 10;
f012931c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012931f:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0129322:	01 d0                	add    %edx,%eax
f0129324:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f0129327:	e8 23 3b fe ff       	call   f010ce4f <sys_rcr2>
f012932c:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012932f:	8b 55 9c             	mov    -0x64(%ebp),%edx
f0129332:	01 ca                	add    %ecx,%edx
f0129334:	39 d0                	cmp    %edx,%eax
f0129336:	74 1d                	je     f0129355 <test_kfreelast+0x1609>
f0129338:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012933c:	75 17                	jne    f0129355 <test_kfreelast+0x1609>
f012933e:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129345:	83 ec 0c             	sub    $0xc,%esp
f0129348:	68 38 a9 13 f0       	push   $0xf013a938
f012934d:	e8 df 7a fd ff       	call   f0100e31 <cprintf>
f0129352:	83 c4 10             	add    $0x10,%esp
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		ptr = (char *) ptr_allocations[12] + 12*kilo;

		for (i = 0; i < 30*kilo; ++i)
f0129355:	ff 45 f4             	incl   -0xc(%ebp)
f0129358:	81 7d f4 ff 77 00 00 	cmpl   $0x77ff,-0xc(%ebp)
f012935f:	7e bb                	jle    f012931c <test_kfreelast+0x15d0>
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f0129361:	83 ec 0c             	sub    $0xc,%esp
f0129364:	6a 00                	push   $0x0
f0129366:	e8 f6 3a fe ff       	call   f010ce61 <sys_bypassPageFault>
f012936b:	83 c4 10             	add    $0x10,%esp

	}

	if (!f) {ce += 15;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f012936e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129372:	75 17                	jne    f012938b <test_kfreelast+0x163f>
f0129374:	83 45 f0 0f          	addl   $0xf,-0x10(%ebp)
f0129378:	83 ec 08             	sub    $0x8,%esp
f012937b:	ff 75 f0             	pushl  -0x10(%ebp)
f012937e:	68 8c a7 13 f0       	push   $0xf013a78c
f0129383:	e8 a9 7a fd ff       	call   f0100e31 <cprintf>
f0129388:	83 c4 10             	add    $0x10,%esp
f012938b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//kfree last allocated three spaces [but with different order]
	{
		//kfree 10 KB
		freeFrames = sys_calculate_free_frames() ;
f0129392:	e8 2f 36 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0129397:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012939a:	e8 e5 b2 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012939f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[12]);
f01293a2:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f01293a8:	83 ec 0c             	sub    $0xc,%esp
f01293ab:	50                   	push   %eax
f01293ac:	e8 c8 eb fd ff       	call   f0107f79 <kfree>
f01293b1:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f01293b4:	e8 cb b2 fd ff       	call   f0104684 <pf_calculate_free_frames>
f01293b9:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f01293bc:	74 1d                	je     f01293db <test_kfreelast+0x168f>
f01293be:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01293c2:	75 17                	jne    f01293db <test_kfreelast+0x168f>
f01293c4:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f01293cb:	83 ec 0c             	sub    $0xc,%esp
f01293ce:	68 b4 a7 13 f0       	push   $0xf013a7b4
f01293d3:	e8 59 7a fd ff       	call   f0100e31 <cprintf>
f01293d8:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 3) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f01293db:	e8 e6 35 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01293e0:	89 c2                	mov    %eax,%edx
f01293e2:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01293e5:	29 c2                	sub    %eax,%edx
f01293e7:	89 d0                	mov    %edx,%eax
f01293e9:	83 f8 03             	cmp    $0x3,%eax
f01293ec:	74 1d                	je     f012940b <test_kfreelast+0x16bf>
f01293ee:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01293f2:	75 17                	jne    f012940b <test_kfreelast+0x16bf>
f01293f4:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f01293fb:	83 ec 0c             	sub    $0xc,%esp
f01293fe:	68 20 a8 13 f0       	push   $0xf013a820
f0129403:	e8 29 7a fd ff       	call   f0100e31 <cprintf>
f0129408:	83 c4 10             	add    $0x10,%esp

		//kfree 14 KB
		freeFrames = sys_calculate_free_frames() ;
f012940b:	e8 b6 35 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0129410:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129413:	e8 6c b2 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0129418:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[7]);
f012941b:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f0129421:	83 ec 0c             	sub    $0xc,%esp
f0129424:	50                   	push   %eax
f0129425:	e8 4f eb fd ff       	call   f0107f79 <kfree>
f012942a:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012942d:	e8 52 b2 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0129432:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129435:	74 1d                	je     f0129454 <test_kfreelast+0x1708>
f0129437:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012943b:	75 17                	jne    f0129454 <test_kfreelast+0x1708>
f012943d:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129444:	83 ec 0c             	sub    $0xc,%esp
f0129447:	68 b4 a7 13 f0       	push   $0xf013a7b4
f012944c:	e8 e0 79 fd ff       	call   f0100e31 <cprintf>
f0129451:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 4) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f0129454:	e8 6d 35 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0129459:	89 c2                	mov    %eax,%edx
f012945b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012945e:	29 c2                	sub    %eax,%edx
f0129460:	89 d0                	mov    %edx,%eax
f0129462:	83 f8 04             	cmp    $0x4,%eax
f0129465:	74 1d                	je     f0129484 <test_kfreelast+0x1738>
f0129467:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012946b:	75 17                	jne    f0129484 <test_kfreelast+0x1738>
f012946d:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129474:	83 ec 0c             	sub    $0xc,%esp
f0129477:	68 20 a8 13 f0       	push   $0xf013a820
f012947c:	e8 b0 79 fd ff       	call   f0100e31 <cprintf>
f0129481:	83 c4 10             	add    $0x10,%esp

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f0129484:	e8 3d 35 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0129489:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012948c:	e8 f3 b1 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0129491:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[8]);
f0129494:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f012949a:	83 ec 0c             	sub    $0xc,%esp
f012949d:	50                   	push   %eax
f012949e:	e8 d6 ea fd ff       	call   f0107f79 <kfree>
f01294a3:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f01294a6:	e8 d9 b1 fd ff       	call   f0104684 <pf_calculate_free_frames>
f01294ab:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f01294ae:	74 1d                	je     f01294cd <test_kfreelast+0x1781>
f01294b0:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01294b4:	75 17                	jne    f01294cd <test_kfreelast+0x1781>
f01294b6:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f01294bd:	83 ec 0c             	sub    $0xc,%esp
f01294c0:	68 b4 a7 13 f0       	push   $0xf013a7b4
f01294c5:	e8 67 79 fd ff       	call   f0100e31 <cprintf>
f01294ca:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 5) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f01294cd:	e8 f4 34 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01294d2:	89 c2                	mov    %eax,%edx
f01294d4:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01294d7:	29 c2                	sub    %eax,%edx
f01294d9:	89 d0                	mov    %edx,%eax
f01294db:	83 f8 05             	cmp    $0x5,%eax
f01294de:	74 1d                	je     f01294fd <test_kfreelast+0x17b1>
f01294e0:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01294e4:	75 17                	jne    f01294fd <test_kfreelast+0x17b1>
f01294e6:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f01294ed:	83 ec 0c             	sub    $0xc,%esp
f01294f0:	68 20 a8 13 f0       	push   $0xf013a820
f01294f5:	e8 37 79 fd ff       	call   f0100e31 <cprintf>
f01294fa:	83 c4 10             	add    $0x10,%esp


	//Allocate after kfree last allocated 3 spaces with different order [25%]
	{
		//50 KB
		freeFrames = sys_calculate_free_frames() ;
f01294fd:	e8 c4 34 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0129502:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129505:	e8 7a b1 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012950a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[13] = kmalloc(50*kilo);
f012950d:	83 ec 0c             	sub    $0xc,%esp
f0129510:	68 00 c8 00 00       	push   $0xc800
f0129515:	e8 45 ea fd ff       	call   f0107f5f <kmalloc>
f012951a:	83 c4 10             	add    $0x10,%esp
f012951d:	89 85 18 fe ff ff    	mov    %eax,-0x1e8(%ebp)
		if ((uint32) ptr_allocations[13] != (ACTUAL_START + 7*Mega + 16*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
f0129523:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f0129529:	89 c1                	mov    %eax,%ecx
f012952b:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f0129532:	10 00 00 
f0129535:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012953a:	0f b6 d0             	movzbl %al,%edx
f012953d:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0129543:	01 d0                	add    %edx,%eax
f0129545:	48                   	dec    %eax
f0129546:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f012954c:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0129552:	ba 00 00 00 00       	mov    $0x0,%edx
f0129557:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f012955d:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0129563:	29 d0                	sub    %edx,%eax
f0129565:	89 c3                	mov    %eax,%ebx
f0129567:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f012956e:	10 00 00 
f0129571:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0129576:	0f b6 c0             	movzbl %al,%eax
f0129579:	c1 e0 04             	shl    $0x4,%eax
f012957c:	89 c2                	mov    %eax,%edx
f012957e:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0129584:	01 d0                	add    %edx,%eax
f0129586:	48                   	dec    %eax
f0129587:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f012958d:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0129593:	ba 00 00 00 00       	mov    $0x0,%edx
f0129598:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f012959e:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f01295a4:	29 d0                	sub    %edx,%eax
f01295a6:	01 d8                	add    %ebx,%eax
f01295a8:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f01295ad:	39 c1                	cmp    %eax,%ecx
f01295af:	74 1d                	je     f01295ce <test_kfreelast+0x1882>
f01295b1:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01295b5:	75 17                	jne    f01295ce <test_kfreelast+0x1882>
f01295b7:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f01295be:	83 ec 0c             	sub    $0xc,%esp
f01295c1:	68 58 a8 13 f0       	push   $0xf013a858
f01295c6:	e8 66 78 fd ff       	call   f0100e31 <cprintf>
f01295cb:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f01295ce:	e8 b1 b0 fd ff       	call   f0104684 <pf_calculate_free_frames>
f01295d3:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f01295d6:	74 1d                	je     f01295f5 <test_kfreelast+0x18a9>
f01295d8:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01295dc:	75 17                	jne    f01295f5 <test_kfreelast+0x18a9>
f01295de:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f01295e5:	83 ec 0c             	sub    $0xc,%esp
f01295e8:	68 b4 a7 13 f0       	push   $0xf013a7b4
f01295ed:	e8 3f 78 fd ff       	call   f0100e31 <cprintf>
f01295f2:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 13) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
f01295f5:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f01295f8:	e8 c9 33 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01295fd:	29 c3                	sub    %eax,%ebx
f01295ff:	89 d8                	mov    %ebx,%eax
f0129601:	83 f8 0d             	cmp    $0xd,%eax
f0129604:	74 1d                	je     f0129623 <test_kfreelast+0x18d7>
f0129606:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012960a:	75 17                	jne    f0129623 <test_kfreelast+0x18d7>
f012960c:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129613:	83 ec 0c             	sub    $0xc,%esp
f0129616:	68 c0 a8 13 f0       	push   $0xf013a8c0
f012961b:	e8 11 78 fd ff       	call   f0100e31 <cprintf>
f0129620:	83 c4 10             	add    $0x10,%esp
		lastIndices[13] = (50*kilo)/sizeof(char) - 1;
f0129623:	c7 85 b8 fe ff ff ff 	movl   $0xc7ff,-0x148(%ebp)
f012962a:	c7 00 00 
		ptr = (char*)ptr_allocations[13];
f012962d:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f0129633:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[13]; ++i)
f0129636:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012963d:	eb 0e                	jmp    f012964d <test_kfreelast+0x1901>
		{
			ptr[i] = 13 ;
f012963f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0129642:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0129645:	01 d0                	add    %edx,%eax
f0129647:	c6 00 0d             	movb   $0xd,(%eax)
		if ((uint32) ptr_allocations[13] != (ACTUAL_START + 7*Mega + 16*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
		if ((freeFrames - sys_calculate_free_frames()) != 13) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
		lastIndices[13] = (50*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[13];
		for (i = 0; i < lastIndices[13]; ++i)
f012964a:	ff 45 f4             	incl   -0xc(%ebp)
f012964d:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0129653:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129656:	7f e7                	jg     f012963f <test_kfreelast+0x18f3>
		{
			ptr[i] = 13 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0129658:	e8 69 33 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012965d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129660:	e8 1f b0 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0129665:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[14] = kmalloc(3*Mega-kilo);
f0129668:	83 ec 0c             	sub    $0xc,%esp
f012966b:	68 00 fc 2f 00       	push   $0x2ffc00
f0129670:	e8 ea e8 fd ff       	call   f0107f5f <kmalloc>
f0129675:	83 c4 10             	add    $0x10,%esp
f0129678:	89 85 1c fe ff ff    	mov    %eax,-0x1e4(%ebp)
		if ((uint32) ptr_allocations[14] != (ACTUAL_START + 7*Mega + 68*kilo) ) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
f012967e:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f0129684:	89 c1                	mov    %eax,%ecx
f0129686:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f012968d:	10 00 00 
f0129690:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0129695:	0f b6 d0             	movzbl %al,%edx
f0129698:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012969e:	01 d0                	add    %edx,%eax
f01296a0:	48                   	dec    %eax
f01296a1:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f01296a7:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01296ad:	ba 00 00 00 00       	mov    $0x0,%edx
f01296b2:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f01296b8:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01296be:	29 d0                	sub    %edx,%eax
f01296c0:	89 c3                	mov    %eax,%ebx
f01296c2:	c7 85 d8 fe ff ff 00 	movl   $0x1000,-0x128(%ebp)
f01296c9:	10 00 00 
f01296cc:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f01296d1:	0f b6 c0             	movzbl %al,%eax
f01296d4:	c1 e0 04             	shl    $0x4,%eax
f01296d7:	89 c2                	mov    %eax,%edx
f01296d9:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f01296df:	01 d0                	add    %edx,%eax
f01296e1:	48                   	dec    %eax
f01296e2:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
f01296e8:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f01296ee:	ba 00 00 00 00       	mov    $0x0,%edx
f01296f3:	f7 b5 d8 fe ff ff    	divl   -0x128(%ebp)
f01296f9:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f01296ff:	29 d0                	sub    %edx,%eax
f0129701:	01 d8                	add    %ebx,%eax
f0129703:	2d 00 b0 8e 09       	sub    $0x98eb000,%eax
f0129708:	39 c1                	cmp    %eax,%ecx
f012970a:	74 1d                	je     f0129729 <test_kfreelast+0x19dd>
f012970c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129710:	75 17                	jne    f0129729 <test_kfreelast+0x19dd>
f0129712:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129719:	83 ec 0c             	sub    $0xc,%esp
f012971c:	68 58 a8 13 f0       	push   $0xf013a858
f0129721:	e8 0b 77 fd ff       	call   f0100e31 <cprintf>
f0129726:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f0129729:	e8 56 af fd ff       	call   f0104684 <pf_calculate_free_frames>
f012972e:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129731:	74 1d                	je     f0129750 <test_kfreelast+0x1a04>
f0129733:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129737:	75 17                	jne    f0129750 <test_kfreelast+0x1a04>
f0129739:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129740:	83 ec 0c             	sub    $0xc,%esp
f0129743:	68 b4 a7 13 f0       	push   $0xf013a7b4
f0129748:	e8 e4 76 fd ff       	call   f0100e31 <cprintf>
f012974d:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 768) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
f0129750:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0129753:	e8 6e 32 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0129758:	29 c3                	sub    %eax,%ebx
f012975a:	89 d8                	mov    %ebx,%eax
f012975c:	3d 00 03 00 00       	cmp    $0x300,%eax
f0129761:	74 1d                	je     f0129780 <test_kfreelast+0x1a34>
f0129763:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129767:	75 17                	jne    f0129780 <test_kfreelast+0x1a34>
f0129769:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129770:	83 ec 0c             	sub    $0xc,%esp
f0129773:	68 c0 a8 13 f0       	push   $0xf013a8c0
f0129778:	e8 b4 76 fd ff       	call   f0100e31 <cprintf>
f012977d:	83 c4 10             	add    $0x10,%esp
		lastIndices[14] = (3*Mega-kilo)/sizeof(char) - 1;
f0129780:	c7 85 bc fe ff ff ff 	movl   $0x2ffbff,-0x144(%ebp)
f0129787:	fb 2f 00 
		ptr = (char*)ptr_allocations[14];
f012978a:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f0129790:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[14]; ++i)
f0129793:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012979a:	eb 0e                	jmp    f01297aa <test_kfreelast+0x1a5e>
		{
			ptr[i] = 14 ;
f012979c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012979f:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01297a2:	01 d0                	add    %edx,%eax
f01297a4:	c6 00 0e             	movb   $0xe,(%eax)
		if ((uint32) ptr_allocations[14] != (ACTUAL_START + 7*Mega + 68*kilo) ) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
		if ((freeFrames - sys_calculate_free_frames()) != 768) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
		lastIndices[14] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[14];
		for (i = 0; i < lastIndices[14]; ++i)
f01297a7:	ff 45 f4             	incl   -0xc(%ebp)
f01297aa:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f01297b0:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01297b3:	7f e7                	jg     f012979c <test_kfreelast+0x1a50>
		{
			ptr[i] = 14 ;
		}
	}

	if (!f) {ce += 25;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f01297b5:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01297b9:	75 17                	jne    f01297d2 <test_kfreelast+0x1a86>
f01297bb:	83 45 f0 19          	addl   $0x19,-0x10(%ebp)
f01297bf:	83 ec 08             	sub    $0x8,%esp
f01297c2:	ff 75 f0             	pushl  -0x10(%ebp)
f01297c5:	68 8c a7 13 f0       	push   $0xf013a78c
f01297ca:	e8 62 76 fd ff       	call   f0100e31 <cprintf>
f01297cf:	83 c4 10             	add    $0x10,%esp
f01297d2:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//kfree one of the newly allocated space that override a previously allocated one
	{
		//kfree 50 KB
		freeFrames = sys_calculate_free_frames() ;
f01297d9:	e8 e8 31 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01297de:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01297e1:	e8 9e ae fd ff       	call   f0104684 <pf_calculate_free_frames>
f01297e6:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[13]);
f01297e9:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f01297ef:	83 ec 0c             	sub    $0xc,%esp
f01297f2:	50                   	push   %eax
f01297f3:	e8 81 e7 fd ff       	call   f0107f79 <kfree>
f01297f8:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f01297fb:	e8 84 ae fd ff       	call   f0104684 <pf_calculate_free_frames>
f0129800:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129803:	74 1d                	je     f0129822 <test_kfreelast+0x1ad6>
f0129805:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129809:	75 17                	jne    f0129822 <test_kfreelast+0x1ad6>
f012980b:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129812:	83 ec 0c             	sub    $0xc,%esp
f0129815:	68 b4 a7 13 f0       	push   $0xf013a7b4
f012981a:	e8 12 76 fd ff       	call   f0100e31 <cprintf>
f012981f:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 13) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f0129822:	e8 9f 31 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0129827:	89 c2                	mov    %eax,%edx
f0129829:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012982c:	29 c2                	sub    %eax,%edx
f012982e:	89 d0                	mov    %edx,%eax
f0129830:	83 f8 0d             	cmp    $0xd,%eax
f0129833:	74 1d                	je     f0129852 <test_kfreelast+0x1b06>
f0129835:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129839:	75 17                	jne    f0129852 <test_kfreelast+0x1b06>
f012983b:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129842:	83 ec 0c             	sub    $0xc,%esp
f0129845:	68 20 a8 13 f0       	push   $0xf013a820
f012984a:	e8 e2 75 fd ff       	call   f0100e31 <cprintf>
f012984f:	83 c4 10             	add    $0x10,%esp
	{
		//50 KB

		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f0129852:	83 ec 0c             	sub    $0xc,%esp
f0129855:	6a 03                	push   $0x3
f0129857:	e8 05 36 fe ff       	call   f010ce61 <sys_bypassPageFault>
f012985c:	83 c4 10             	add    $0x10,%esp

		ptr = (char *) ptr_allocations[13];
f012985f:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f0129865:	89 45 9c             	mov    %eax,-0x64(%ebp)

		for (i = 0; i < 50*kilo; ++i)
f0129868:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012986f:	eb 3c                	jmp    f01298ad <test_kfreelast+0x1b61>
		{
			ptr[i] = 10;
f0129871:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0129874:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0129877:	01 d0                	add    %edx,%eax
f0129879:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f012987c:	e8 ce 35 fe ff       	call   f010ce4f <sys_rcr2>
f0129881:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0129884:	8b 55 9c             	mov    -0x64(%ebp),%edx
f0129887:	01 ca                	add    %ecx,%edx
f0129889:	39 d0                	cmp    %edx,%eax
f012988b:	74 1d                	je     f01298aa <test_kfreelast+0x1b5e>
f012988d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129891:	75 17                	jne    f01298aa <test_kfreelast+0x1b5e>
f0129893:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012989a:	83 ec 0c             	sub    $0xc,%esp
f012989d:	68 38 a9 13 f0       	push   $0xf013a938
f01298a2:	e8 8a 75 fd ff       	call   f0100e31 <cprintf>
f01298a7:	83 c4 10             	add    $0x10,%esp
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		ptr = (char *) ptr_allocations[13];

		for (i = 0; i < 50*kilo; ++i)
f01298aa:	ff 45 f4             	incl   -0xc(%ebp)
f01298ad:	81 7d f4 ff c7 00 00 	cmpl   $0xc7ff,-0xc(%ebp)
f01298b4:	7e bb                	jle    f0129871 <test_kfreelast+0x1b25>
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f01298b6:	83 ec 0c             	sub    $0xc,%esp
f01298b9:	6a 00                	push   $0x0
f01298bb:	e8 a1 35 fe ff       	call   f010ce61 <sys_bypassPageFault>
f01298c0:	83 c4 10             	add    $0x10,%esp


		//3 MB
		ptr = (char*)ptr_allocations[14];
f01298c3:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f01298c9:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[14]; ++i)
f01298cc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01298d3:	eb 1e                	jmp    f01298f3 <test_kfreelast+0x1ba7>
		{
			sums[14] += ptr[i] ;
f01298d5:	8b 95 6c fe ff ff    	mov    -0x194(%ebp),%edx
f01298db:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01298de:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01298e1:	01 c8                	add    %ecx,%eax
f01298e3:	8a 00                	mov    (%eax),%al
f01298e5:	0f be c0             	movsbl %al,%eax
f01298e8:	01 d0                	add    %edx,%eax
f01298ea:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		sys_bypassPageFault(0);


		//3 MB
		ptr = (char*)ptr_allocations[14];
		for (i = 0; i < lastIndices[14]; ++i)
f01298f0:	ff 45 f4             	incl   -0xc(%ebp)
f01298f3:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f01298f9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01298fc:	7f d7                	jg     f01298d5 <test_kfreelast+0x1b89>
		{
			sums[14] += ptr[i] ;
		}
		if (sums[14] != 14*lastIndices[14])	if (!f) {f=1; cprintf("\nkfree: invalid read after freeing some allocations");}
f01298fe:	8b 8d 6c fe ff ff    	mov    -0x194(%ebp),%ecx
f0129904:	8b 95 bc fe ff ff    	mov    -0x144(%ebp),%edx
f012990a:	89 d0                	mov    %edx,%eax
f012990c:	01 c0                	add    %eax,%eax
f012990e:	01 d0                	add    %edx,%eax
f0129910:	01 c0                	add    %eax,%eax
f0129912:	01 d0                	add    %edx,%eax
f0129914:	01 c0                	add    %eax,%eax
f0129916:	39 c1                	cmp    %eax,%ecx
f0129918:	74 1d                	je     f0129937 <test_kfreelast+0x1beb>
f012991a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012991e:	75 17                	jne    f0129937 <test_kfreelast+0x1beb>
f0129920:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129927:	83 ec 0c             	sub    $0xc,%esp
f012992a:	68 04 a9 13 f0       	push   $0xf013a904
f012992f:	e8 fd 74 fd ff       	call   f0100e31 <cprintf>
f0129934:	83 c4 10             	add    $0x10,%esp
	}

	if (!f) {ce += 15;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f0129937:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012993b:	75 17                	jne    f0129954 <test_kfreelast+0x1c08>
f012993d:	83 45 f0 0f          	addl   $0xf,-0x10(%ebp)
f0129941:	83 ec 08             	sub    $0x8,%esp
f0129944:	ff 75 f0             	pushl  -0x10(%ebp)
f0129947:	68 8c a7 13 f0       	push   $0xf013a78c
f012994c:	e8 e0 74 fd ff       	call   f0100e31 <cprintf>
f0129951:	83 c4 10             	add    $0x10,%esp
f0129954:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//kfree all remaining allocations
	{
		//kfree 7 KB
		freeFrames = sys_calculate_free_frames() ;
f012995b:	e8 66 30 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0129960:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129963:	e8 1c ad fd ff       	call   f0104684 <pf_calculate_free_frames>
f0129968:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[4]);
f012996b:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f0129971:	83 ec 0c             	sub    $0xc,%esp
f0129974:	50                   	push   %eax
f0129975:	e8 ff e5 fd ff       	call   f0107f79 <kfree>
f012997a:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012997d:	e8 02 ad fd ff       	call   f0104684 <pf_calculate_free_frames>
f0129982:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129985:	74 1d                	je     f01299a4 <test_kfreelast+0x1c58>
f0129987:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012998b:	75 17                	jne    f01299a4 <test_kfreelast+0x1c58>
f012998d:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129994:	83 ec 0c             	sub    $0xc,%esp
f0129997:	68 b4 a7 13 f0       	push   $0xf013a7b4
f012999c:	e8 90 74 fd ff       	call   f0100e31 <cprintf>
f01299a1:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 2) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f01299a4:	e8 1d 30 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01299a9:	89 c2                	mov    %eax,%edx
f01299ab:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01299ae:	29 c2                	sub    %eax,%edx
f01299b0:	89 d0                	mov    %edx,%eax
f01299b2:	83 f8 02             	cmp    $0x2,%eax
f01299b5:	74 1d                	je     f01299d4 <test_kfreelast+0x1c88>
f01299b7:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01299bb:	75 17                	jne    f01299d4 <test_kfreelast+0x1c88>
f01299bd:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f01299c4:	83 ec 0c             	sub    $0xc,%esp
f01299c7:	68 20 a8 13 f0       	push   $0xf013a820
f01299cc:	e8 60 74 fd ff       	call   f0100e31 <cprintf>
f01299d1:	83 c4 10             	add    $0x10,%esp

		//kfree 2nd 3 MB
		freeFrames = sys_calculate_free_frames() ;
f01299d4:	e8 ed 2f fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f01299d9:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01299dc:	e8 a3 ac fd ff       	call   f0104684 <pf_calculate_free_frames>
f01299e1:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[14]);
f01299e4:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f01299ea:	83 ec 0c             	sub    $0xc,%esp
f01299ed:	50                   	push   %eax
f01299ee:	e8 86 e5 fd ff       	call   f0107f79 <kfree>
f01299f3:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f01299f6:	e8 89 ac fd ff       	call   f0104684 <pf_calculate_free_frames>
f01299fb:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f01299fe:	74 1d                	je     f0129a1d <test_kfreelast+0x1cd1>
f0129a00:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129a04:	75 17                	jne    f0129a1d <test_kfreelast+0x1cd1>
f0129a06:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129a0d:	83 ec 0c             	sub    $0xc,%esp
f0129a10:	68 b4 a7 13 f0       	push   $0xf013a7b4
f0129a15:	e8 17 74 fd ff       	call   f0100e31 <cprintf>
f0129a1a:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f0129a1d:	e8 a4 2f fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0129a22:	89 c2                	mov    %eax,%edx
f0129a24:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0129a27:	29 c2                	sub    %eax,%edx
f0129a29:	89 d0                	mov    %edx,%eax
f0129a2b:	3d 00 03 00 00       	cmp    $0x300,%eax
f0129a30:	74 1d                	je     f0129a4f <test_kfreelast+0x1d03>
f0129a32:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129a36:	75 17                	jne    f0129a4f <test_kfreelast+0x1d03>
f0129a38:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129a3f:	83 ec 0c             	sub    $0xc,%esp
f0129a42:	68 20 a8 13 f0       	push   $0xf013a820
f0129a47:	e8 e5 73 fd ff       	call   f0100e31 <cprintf>
f0129a4c:	83 c4 10             	add    $0x10,%esp

		//kfree 1st 3 MB
		freeFrames = sys_calculate_free_frames() ;
f0129a4f:	e8 72 2f fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0129a54:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129a57:	e8 28 ac fd ff       	call   f0104684 <pf_calculate_free_frames>
f0129a5c:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[5]);
f0129a5f:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f0129a65:	83 ec 0c             	sub    $0xc,%esp
f0129a68:	50                   	push   %eax
f0129a69:	e8 0b e5 fd ff       	call   f0107f79 <kfree>
f0129a6e:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f0129a71:	e8 0e ac fd ff       	call   f0104684 <pf_calculate_free_frames>
f0129a76:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129a79:	74 1d                	je     f0129a98 <test_kfreelast+0x1d4c>
f0129a7b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129a7f:	75 17                	jne    f0129a98 <test_kfreelast+0x1d4c>
f0129a81:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129a88:	83 ec 0c             	sub    $0xc,%esp
f0129a8b:	68 b4 a7 13 f0       	push   $0xf013a7b4
f0129a90:	e8 9c 73 fd ff       	call   f0100e31 <cprintf>
f0129a95:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f0129a98:	e8 29 2f fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0129a9d:	89 c2                	mov    %eax,%edx
f0129a9f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0129aa2:	29 c2                	sub    %eax,%edx
f0129aa4:	89 d0                	mov    %edx,%eax
f0129aa6:	3d 00 03 00 00       	cmp    $0x300,%eax
f0129aab:	74 1d                	je     f0129aca <test_kfreelast+0x1d7e>
f0129aad:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129ab1:	75 17                	jne    f0129aca <test_kfreelast+0x1d7e>
f0129ab3:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129aba:	83 ec 0c             	sub    $0xc,%esp
f0129abd:	68 20 a8 13 f0       	push   $0xf013a820
f0129ac2:	e8 6a 73 fd ff       	call   f0100e31 <cprintf>
f0129ac7:	83 c4 10             	add    $0x10,%esp

		//kfree 1st 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0129aca:	e8 f7 2e fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0129acf:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129ad2:	e8 ad ab fd ff       	call   f0104684 <pf_calculate_free_frames>
f0129ad7:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[2]);
f0129ada:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0129ae0:	83 ec 0c             	sub    $0xc,%esp
f0129ae3:	50                   	push   %eax
f0129ae4:	e8 90 e4 fd ff       	call   f0107f79 <kfree>
f0129ae9:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f0129aec:	e8 93 ab fd ff       	call   f0104684 <pf_calculate_free_frames>
f0129af1:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129af4:	74 1d                	je     f0129b13 <test_kfreelast+0x1dc7>
f0129af6:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129afa:	75 17                	jne    f0129b13 <test_kfreelast+0x1dc7>
f0129afc:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129b03:	83 ec 0c             	sub    $0xc,%esp
f0129b06:	68 b4 a7 13 f0       	push   $0xf013a7b4
f0129b0b:	e8 21 73 fd ff       	call   f0100e31 <cprintf>
f0129b10:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 1) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f0129b13:	e8 ae 2e fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0129b18:	89 c2                	mov    %eax,%edx
f0129b1a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0129b1d:	29 c2                	sub    %eax,%edx
f0129b1f:	89 d0                	mov    %edx,%eax
f0129b21:	83 f8 01             	cmp    $0x1,%eax
f0129b24:	74 1d                	je     f0129b43 <test_kfreelast+0x1df7>
f0129b26:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129b2a:	75 17                	jne    f0129b43 <test_kfreelast+0x1df7>
f0129b2c:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129b33:	83 ec 0c             	sub    $0xc,%esp
f0129b36:	68 20 a8 13 f0       	push   $0xf013a820
f0129b3b:	e8 f1 72 fd ff       	call   f0100e31 <cprintf>
f0129b40:	83 c4 10             	add    $0x10,%esp

		//kfree 2nd 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0129b43:	e8 7e 2e fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0129b48:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129b4b:	e8 34 ab fd ff       	call   f0104684 <pf_calculate_free_frames>
f0129b50:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[3]);
f0129b53:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f0129b59:	83 ec 0c             	sub    $0xc,%esp
f0129b5c:	50                   	push   %eax
f0129b5d:	e8 17 e4 fd ff       	call   f0107f79 <kfree>
f0129b62:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f0129b65:	e8 1a ab fd ff       	call   f0104684 <pf_calculate_free_frames>
f0129b6a:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129b6d:	74 1d                	je     f0129b8c <test_kfreelast+0x1e40>
f0129b6f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129b73:	75 17                	jne    f0129b8c <test_kfreelast+0x1e40>
f0129b75:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129b7c:	83 ec 0c             	sub    $0xc,%esp
f0129b7f:	68 b4 a7 13 f0       	push   $0xf013a7b4
f0129b84:	e8 a8 72 fd ff       	call   f0100e31 <cprintf>
f0129b89:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 1) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f0129b8c:	e8 35 2e fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0129b91:	89 c2                	mov    %eax,%edx
f0129b93:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0129b96:	29 c2                	sub    %eax,%edx
f0129b98:	89 d0                	mov    %edx,%eax
f0129b9a:	83 f8 01             	cmp    $0x1,%eax
f0129b9d:	74 1d                	je     f0129bbc <test_kfreelast+0x1e70>
f0129b9f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129ba3:	75 17                	jne    f0129bbc <test_kfreelast+0x1e70>
f0129ba5:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129bac:	83 ec 0c             	sub    $0xc,%esp
f0129baf:	68 20 a8 13 f0       	push   $0xf013a820
f0129bb4:	e8 78 72 fd ff       	call   f0100e31 <cprintf>
f0129bb9:	83 c4 10             	add    $0x10,%esp

		if(start_freeFrames != (sys_calculate_free_frames())) if (!f) {f=1; cprintf("\nWrong kfree: not all pages removed correctly at end");}
f0129bbc:	e8 05 2e fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0129bc1:	89 c2                	mov    %eax,%edx
f0129bc3:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0129bc6:	39 c2                	cmp    %eax,%edx
f0129bc8:	74 1d                	je     f0129be7 <test_kfreelast+0x1e9b>
f0129bca:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129bce:	75 17                	jne    f0129be7 <test_kfreelast+0x1e9b>
f0129bd0:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129bd7:	83 ec 0c             	sub    $0xc,%esp
f0129bda:	68 80 a9 13 f0       	push   $0xf013a980
f0129bdf:	e8 4d 72 fd ff       	call   f0100e31 <cprintf>
f0129be4:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f0129be7:	83 ec 0c             	sub    $0xc,%esp
f0129bea:	6a 03                	push   $0x3
f0129bec:	e8 70 32 fe ff       	call   f010ce61 <sys_bypassPageFault>
f0129bf1:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 15; ++i)
f0129bf4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129bfb:	e9 8e 00 00 00       	jmp    f0129c8e <test_kfreelast+0x1f42>
		{
			ptr = (char *) ptr_allocations[i];
f0129c00:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0129c03:	8b 84 85 e4 fd ff ff 	mov    -0x21c(%ebp,%eax,4),%eax
f0129c0a:	89 45 9c             	mov    %eax,-0x64(%ebp)
			ptr[0] = 10;
f0129c0d:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0129c10:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f0129c13:	e8 37 32 fe ff       	call   f010ce4f <sys_rcr2>
f0129c18:	89 c2                	mov    %eax,%edx
f0129c1a:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0129c1d:	39 c2                	cmp    %eax,%edx
f0129c1f:	74 1d                	je     f0129c3e <test_kfreelast+0x1ef2>
f0129c21:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129c25:	75 17                	jne    f0129c3e <test_kfreelast+0x1ef2>
f0129c27:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129c2e:	83 ec 0c             	sub    $0xc,%esp
f0129c31:	68 38 a9 13 f0       	push   $0xf013a938
f0129c36:	e8 f6 71 fd ff       	call   f0100e31 <cprintf>
f0129c3b:	83 c4 10             	add    $0x10,%esp
			ptr[lastIndices[i]] = 10;
f0129c3e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0129c41:	8b 84 85 84 fe ff ff 	mov    -0x17c(%ebp,%eax,4),%eax
f0129c48:	89 c2                	mov    %eax,%edx
f0129c4a:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0129c4d:	01 d0                	add    %edx,%eax
f0129c4f:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f0129c52:	e8 f8 31 fe ff       	call   f010ce4f <sys_rcr2>
f0129c57:	89 c2                	mov    %eax,%edx
f0129c59:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0129c5c:	8b 84 85 84 fe ff ff 	mov    -0x17c(%ebp,%eax,4),%eax
f0129c63:	89 c1                	mov    %eax,%ecx
f0129c65:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0129c68:	01 c8                	add    %ecx,%eax
f0129c6a:	39 c2                	cmp    %eax,%edx
f0129c6c:	74 1d                	je     f0129c8b <test_kfreelast+0x1f3f>
f0129c6e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129c72:	75 17                	jne    f0129c8b <test_kfreelast+0x1f3f>
f0129c74:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129c7b:	83 ec 0c             	sub    $0xc,%esp
f0129c7e:	68 38 a9 13 f0       	push   $0xf013a938
f0129c83:	e8 a9 71 fd ff       	call   f0100e31 <cprintf>
f0129c88:	83 c4 10             	add    $0x10,%esp
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 15; ++i)
f0129c8b:	ff 45 f4             	incl   -0xc(%ebp)
f0129c8e:	83 7d f4 0e          	cmpl   $0xe,-0xc(%ebp)
f0129c92:	0f 8e 68 ff ff ff    	jle    f0129c00 <test_kfreelast+0x1eb4>
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f0129c98:	83 ec 0c             	sub    $0xc,%esp
f0129c9b:	6a 00                	push   $0x0
f0129c9d:	e8 bf 31 fe ff       	call   f010ce61 <sys_bypassPageFault>
f0129ca2:	83 c4 10             	add    $0x10,%esp
	}

	//kfree non-exist item
	{
		//kfree 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0129ca5:	e8 1c 2d fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0129caa:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129cad:	e8 d2 a9 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0129cb2:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[0]);
f0129cb5:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0129cbb:	83 ec 0c             	sub    $0xc,%esp
f0129cbe:	50                   	push   %eax
f0129cbf:	e8 b5 e2 fd ff       	call   f0107f79 <kfree>
f0129cc4:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f0129cc7:	e8 b8 a9 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0129ccc:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129ccf:	74 1d                	je     f0129cee <test_kfreelast+0x1fa2>
f0129cd1:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129cd5:	75 17                	jne    f0129cee <test_kfreelast+0x1fa2>
f0129cd7:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129cde:	83 ec 0c             	sub    $0xc,%esp
f0129ce1:	68 b4 a7 13 f0       	push   $0xf013a7b4
f0129ce6:	e8 46 71 fd ff       	call   f0100e31 <cprintf>
f0129ceb:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f0129cee:	e8 d3 2c fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0129cf3:	89 c2                	mov    %eax,%edx
f0129cf5:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0129cf8:	39 c2                	cmp    %eax,%edx
f0129cfa:	74 1d                	je     f0129d19 <test_kfreelast+0x1fcd>
f0129cfc:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129d00:	75 17                	jne    f0129d19 <test_kfreelast+0x1fcd>
f0129d02:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129d09:	83 ec 0c             	sub    $0xc,%esp
f0129d0c:	68 b8 a9 13 f0       	push   $0xf013a9b8
f0129d11:	e8 1b 71 fd ff       	call   f0100e31 <cprintf>
f0129d16:	83 c4 10             	add    $0x10,%esp

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0129d19:	e8 a8 2c fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0129d1e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129d21:	e8 5e a9 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0129d26:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[2]);
f0129d29:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0129d2f:	83 ec 0c             	sub    $0xc,%esp
f0129d32:	50                   	push   %eax
f0129d33:	e8 41 e2 fd ff       	call   f0107f79 <kfree>
f0129d38:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f0129d3b:	e8 44 a9 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0129d40:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129d43:	74 1d                	je     f0129d62 <test_kfreelast+0x2016>
f0129d45:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129d49:	75 17                	jne    f0129d62 <test_kfreelast+0x2016>
f0129d4b:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129d52:	83 ec 0c             	sub    $0xc,%esp
f0129d55:	68 b4 a7 13 f0       	push   $0xf013a7b4
f0129d5a:	e8 d2 70 fd ff       	call   f0100e31 <cprintf>
f0129d5f:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f0129d62:	e8 5f 2c fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0129d67:	89 c2                	mov    %eax,%edx
f0129d69:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0129d6c:	39 c2                	cmp    %eax,%edx
f0129d6e:	74 1d                	je     f0129d8d <test_kfreelast+0x2041>
f0129d70:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129d74:	75 17                	jne    f0129d8d <test_kfreelast+0x2041>
f0129d76:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129d7d:	83 ec 0c             	sub    $0xc,%esp
f0129d80:	68 b8 a9 13 f0       	push   $0xf013a9b8
f0129d85:	e8 a7 70 fd ff       	call   f0100e31 <cprintf>
f0129d8a:	83 c4 10             	add    $0x10,%esp

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f0129d8d:	e8 34 2c fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0129d92:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129d95:	e8 ea a8 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0129d9a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[8]);
f0129d9d:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f0129da3:	83 ec 0c             	sub    $0xc,%esp
f0129da6:	50                   	push   %eax
f0129da7:	e8 cd e1 fd ff       	call   f0107f79 <kfree>
f0129dac:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f0129daf:	e8 d0 a8 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0129db4:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129db7:	74 1d                	je     f0129dd6 <test_kfreelast+0x208a>
f0129db9:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129dbd:	75 17                	jne    f0129dd6 <test_kfreelast+0x208a>
f0129dbf:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129dc6:	83 ec 0c             	sub    $0xc,%esp
f0129dc9:	68 b4 a7 13 f0       	push   $0xf013a7b4
f0129dce:	e8 5e 70 fd ff       	call   f0100e31 <cprintf>
f0129dd3:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f0129dd6:	e8 eb 2b fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0129ddb:	89 c2                	mov    %eax,%edx
f0129ddd:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0129de0:	39 c2                	cmp    %eax,%edx
f0129de2:	74 1d                	je     f0129e01 <test_kfreelast+0x20b5>
f0129de4:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129de8:	75 17                	jne    f0129e01 <test_kfreelast+0x20b5>
f0129dea:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129df1:	83 ec 0c             	sub    $0xc,%esp
f0129df4:	68 b8 a9 13 f0       	push   $0xf013a9b8
f0129df9:	e8 33 70 fd ff       	call   f0100e31 <cprintf>
f0129dfe:	83 c4 10             	add    $0x10,%esp

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0129e01:	e8 c0 2b fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0129e06:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129e09:	e8 76 a8 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0129e0e:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[9]);
f0129e11:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f0129e17:	83 ec 0c             	sub    $0xc,%esp
f0129e1a:	50                   	push   %eax
f0129e1b:	e8 59 e1 fd ff       	call   f0107f79 <kfree>
f0129e20:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f0129e23:	e8 5c a8 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0129e28:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129e2b:	74 1d                	je     f0129e4a <test_kfreelast+0x20fe>
f0129e2d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129e31:	75 17                	jne    f0129e4a <test_kfreelast+0x20fe>
f0129e33:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129e3a:	83 ec 0c             	sub    $0xc,%esp
f0129e3d:	68 b4 a7 13 f0       	push   $0xf013a7b4
f0129e42:	e8 ea 6f fd ff       	call   f0100e31 <cprintf>
f0129e47:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f0129e4a:	e8 77 2b fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0129e4f:	89 c2                	mov    %eax,%edx
f0129e51:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0129e54:	39 c2                	cmp    %eax,%edx
f0129e56:	74 1d                	je     f0129e75 <test_kfreelast+0x2129>
f0129e58:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129e5c:	75 17                	jne    f0129e75 <test_kfreelast+0x2129>
f0129e5e:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129e65:	83 ec 0c             	sub    $0xc,%esp
f0129e68:	68 b8 a9 13 f0       	push   $0xf013a9b8
f0129e6d:	e8 bf 6f fd ff       	call   f0100e31 <cprintf>
f0129e72:	83 c4 10             	add    $0x10,%esp

	}

	if (!f) {ce += 10;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f0129e75:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129e79:	75 17                	jne    f0129e92 <test_kfreelast+0x2146>
f0129e7b:	83 45 f0 0a          	addl   $0xa,-0x10(%ebp)
f0129e7f:	83 ec 08             	sub    $0x8,%esp
f0129e82:	ff 75 f0             	pushl  -0x10(%ebp)
f0129e85:	68 8c a7 13 f0       	push   $0xf013a78c
f0129e8a:	e8 a2 6f fd ff       	call   f0100e31 <cprintf>
f0129e8f:	83 c4 10             	add    $0x10,%esp
f0129e92:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//cprintf("\nCongratulations!! your modification is run successfully.\n");

	return 1;
f0129e99:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0129e9e:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0129ea1:	5b                   	pop    %ebx
f0129ea2:	5f                   	pop    %edi
f0129ea3:	5d                   	pop    %ebp
f0129ea4:	c3                   	ret    

f0129ea5 <test_krealloc>:

int test_krealloc() {
f0129ea5:	55                   	push   %ebp
f0129ea6:	89 e5                	mov    %esp,%ebp
f0129ea8:	57                   	push   %edi
f0129ea9:	53                   	push   %ebx
f0129eaa:	81 ec 00 02 00 00    	sub    $0x200,%esp
	cprintf("==============================================\n");
f0129eb0:	83 ec 0c             	sub    $0xc,%esp
f0129eb3:	68 9c 96 13 f0       	push   $0xf013969c
f0129eb8:	e8 74 6f fd ff       	call   f0100e31 <cprintf>
f0129ebd:	83 c4 10             	add    $0x10,%esp
	cprintf(
f0129ec0:	83 ec 0c             	sub    $0xc,%esp
f0129ec3:	68 cc 96 13 f0       	push   $0xf01396cc
f0129ec8:	e8 64 6f fd ff       	call   f0100e31 <cprintf>
f0129ecd:	83 c4 10             	add    $0x10,%esp
			"MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
	cprintf("==============================================\n");
f0129ed0:	83 ec 0c             	sub    $0xc,%esp
f0129ed3:	68 9c 96 13 f0       	push   $0xf013969c
f0129ed8:	e8 54 6f fd ff       	call   f0100e31 <cprintf>
f0129edd:	83 c4 10             	add    $0x10,%esp
	char minByte = 1 << 7;
f0129ee0:	c6 45 cf 80          	movb   $0x80,-0x31(%ebp)
	char maxByte = 0x7F;
f0129ee4:	c6 45 ce 7f          	movb   $0x7f,-0x32(%ebp)
	short minShort = 1 << 15;
f0129ee8:	66 c7 45 cc 00 80    	movw   $0x8000,-0x34(%ebp)
	short maxShort = 0x7FFF;
f0129eee:	66 c7 45 ca ff 7f    	movw   $0x7fff,-0x36(%ebp)
	int minInt = 1 << 31;
f0129ef4:	c7 45 c4 00 00 00 80 	movl   $0x80000000,-0x3c(%ebp)
	int maxInt = 0x7FFFFFFF;
f0129efb:	c7 45 c0 ff ff ff 7f 	movl   $0x7fffffff,-0x40(%ebp)
	int *intArr;
	struct MyStruct *structArr;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2,
			lastIndexOfInt, lastIndexOfStruct;
	//[1] Test calling krealloc with VA = NULL. It should call malloc
	void* ptr_allocations[20] = { 0 };
f0129f02:	8d 95 a8 fe ff ff    	lea    -0x158(%ebp),%edx
f0129f08:	b9 14 00 00 00       	mov    $0x14,%ecx
f0129f0d:	b8 00 00 00 00       	mov    $0x0,%eax
f0129f12:	89 d7                	mov    %edx,%edi
f0129f14:	f3 ab                	rep stos %eax,%es:(%edi)
	char* ptr;
	void* newAddress = NULL;
f0129f16:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
	int freeDiskFrames;


	int lastIndices[20] = { 0 };
f0129f1d:	8d 95 58 fe ff ff    	lea    -0x1a8(%ebp),%edx
f0129f23:	b9 14 00 00 00       	mov    $0x14,%ecx
f0129f28:	b8 00 00 00 00       	mov    $0x0,%eax
f0129f2d:	89 d7                	mov    %edx,%edi
f0129f2f:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = { 0 };
f0129f31:	8d 95 08 fe ff ff    	lea    -0x1f8(%ebp),%edx
f0129f37:	b9 14 00 00 00       	mov    $0x14,%ecx
f0129f3c:	b8 00 00 00 00       	mov    $0x0,%eax
f0129f41:	89 d7                	mov    %edx,%edi
f0129f43:	f3 ab                	rep stos %eax,%es:(%edi)
	int freeFrames;
	//[1] Allocate all
	{
		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f0129f45:	e8 7c 2a fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f0129f4a:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[0] = krealloc(NULL, 1 * Mega - kilo);
f0129f4d:	83 ec 08             	sub    $0x8,%esp
f0129f50:	68 00 fc 0f 00       	push   $0xffc00
f0129f55:	6a 00                	push   $0x0
f0129f57:	e8 b9 e0 fd ff       	call   f0108015 <krealloc>
f0129f5c:	83 c4 10             	add    $0x10,%esp
f0129f5f:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
		if ((uint32) ptr_allocations[0] < (KERNEL_HEAP_START))
f0129f65:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0129f6b:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f0129f70:	77 17                	ja     f0129f89 <test_krealloc+0xe4>
			panic("krealloc: Wrong start address for the allocated space... ");
f0129f72:	83 ec 04             	sub    $0x4,%esp
f0129f75:	68 00 aa 13 f0       	push   $0xf013aa00
f0129f7a:	68 e2 0e 00 00       	push   $0xee2
f0129f7f:	68 5a 97 13 f0       	push   $0xf013975a
f0129f84:	e8 27 62 fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[0] != ACTUAL_START)
f0129f89:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0129f8f:	89 c1                	mov    %eax,%ecx
f0129f91:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f0129f98:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0129f9d:	0f b6 d0             	movzbl %al,%edx
f0129fa0:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0129fa3:	01 d0                	add    %edx,%eax
f0129fa5:	48                   	dec    %eax
f0129fa6:	89 45 b0             	mov    %eax,-0x50(%ebp)
f0129fa9:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0129fac:	ba 00 00 00 00       	mov    $0x0,%edx
f0129fb1:	f7 75 b4             	divl   -0x4c(%ebp)
f0129fb4:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0129fb7:	29 d0                	sub    %edx,%eax
f0129fb9:	89 c3                	mov    %eax,%ebx
f0129fbb:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f0129fc2:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f0129fc7:	0f b6 c0             	movzbl %al,%eax
f0129fca:	c1 e0 04             	shl    $0x4,%eax
f0129fcd:	89 c2                	mov    %eax,%edx
f0129fcf:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0129fd2:	01 d0                	add    %edx,%eax
f0129fd4:	48                   	dec    %eax
f0129fd5:	89 45 a8             	mov    %eax,-0x58(%ebp)
f0129fd8:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0129fdb:	ba 00 00 00 00       	mov    $0x0,%edx
f0129fe0:	f7 75 ac             	divl   -0x54(%ebp)
f0129fe3:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0129fe6:	29 d0                	sub    %edx,%eax
f0129fe8:	01 d8                	add    %ebx,%eax
f0129fea:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0129fef:	39 c1                	cmp    %eax,%ecx
f0129ff1:	74 17                	je     f012a00a <test_krealloc+0x165>
			panic("krealloc: Wrong start address for allocated space");
f0129ff3:	83 ec 04             	sub    $0x4,%esp
f0129ff6:	68 3c aa 13 f0       	push   $0xf013aa3c
f0129ffb:	68 e4 0e 00 00       	push   $0xee4
f012a000:	68 5a 97 13 f0       	push   $0xf013975a
f012a005:	e8 a6 61 fd ff       	call   f01001b0 <_panic>

		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012a00a:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012a00d:	e8 b4 29 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012a012:	29 c3                	sub    %eax,%ebx
f012a014:	89 d8                	mov    %ebx,%eax
f012a016:	3d 00 01 00 00       	cmp    $0x100,%eax
f012a01b:	74 17                	je     f012a034 <test_krealloc+0x18f>
			panic("krealloc: Wrong allocation: ");
f012a01d:	83 ec 04             	sub    $0x4,%esp
f012a020:	68 6e aa 13 f0       	push   $0xf013aa6e
f012a025:	68 e7 0e 00 00       	push   $0xee7
f012a02a:	68 5a 97 13 f0       	push   $0xf013975a
f012a02f:	e8 7c 61 fd ff       	call   f01001b0 <_panic>

		lastIndices[0] = (1 * Mega - kilo) / sizeof(char) - 1;
f012a034:	c7 85 58 fe ff ff ff 	movl   $0xffbff,-0x1a8(%ebp)
f012a03b:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012a03e:	e8 83 29 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012a043:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[1] = krealloc(NULL, 1 * Mega - kilo);
f012a046:	83 ec 08             	sub    $0x8,%esp
f012a049:	68 00 fc 0f 00       	push   $0xffc00
f012a04e:	6a 00                	push   $0x0
f012a050:	e8 c0 df fd ff       	call   f0108015 <krealloc>
f012a055:	83 c4 10             	add    $0x10,%esp
f012a058:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
		if ((uint32) ptr_allocations[1] < (KERNEL_HEAP_START + 1 * Mega))
f012a05e:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012a064:	3d ff ff 0f f6       	cmp    $0xf60fffff,%eax
f012a069:	77 17                	ja     f012a082 <test_krealloc+0x1dd>
			panic("krealloc: Wrong start address for the allocated space... ");
f012a06b:	83 ec 04             	sub    $0x4,%esp
f012a06e:	68 00 aa 13 f0       	push   $0xf013aa00
f012a073:	68 ef 0e 00 00       	push   $0xeef
f012a078:	68 5a 97 13 f0       	push   $0xf013975a
f012a07d:	e8 2e 61 fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[1] != ACTUAL_START + (1 * Mega))
f012a082:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012a088:	89 c1                	mov    %eax,%ecx
f012a08a:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f012a091:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012a096:	0f b6 d0             	movzbl %al,%edx
f012a099:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012a09c:	01 d0                	add    %edx,%eax
f012a09e:	48                   	dec    %eax
f012a09f:	89 45 a0             	mov    %eax,-0x60(%ebp)
f012a0a2:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012a0a5:	ba 00 00 00 00       	mov    $0x0,%edx
f012a0aa:	f7 75 a4             	divl   -0x5c(%ebp)
f012a0ad:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012a0b0:	29 d0                	sub    %edx,%eax
f012a0b2:	89 c3                	mov    %eax,%ebx
f012a0b4:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f012a0bb:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012a0c0:	0f b6 c0             	movzbl %al,%eax
f012a0c3:	c1 e0 04             	shl    $0x4,%eax
f012a0c6:	89 c2                	mov    %eax,%edx
f012a0c8:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012a0cb:	01 d0                	add    %edx,%eax
f012a0cd:	48                   	dec    %eax
f012a0ce:	89 45 98             	mov    %eax,-0x68(%ebp)
f012a0d1:	8b 45 98             	mov    -0x68(%ebp),%eax
f012a0d4:	ba 00 00 00 00       	mov    $0x0,%edx
f012a0d9:	f7 75 9c             	divl   -0x64(%ebp)
f012a0dc:	8b 45 98             	mov    -0x68(%ebp),%eax
f012a0df:	29 d0                	sub    %edx,%eax
f012a0e1:	01 d8                	add    %ebx,%eax
f012a0e3:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f012a0e8:	39 c1                	cmp    %eax,%ecx
f012a0ea:	74 17                	je     f012a103 <test_krealloc+0x25e>
			panic("krealloc: Wrong start address for allocated space");
f012a0ec:	83 ec 04             	sub    $0x4,%esp
f012a0ef:	68 3c aa 13 f0       	push   $0xf013aa3c
f012a0f4:	68 f1 0e 00 00       	push   $0xef1
f012a0f9:	68 5a 97 13 f0       	push   $0xf013975a
f012a0fe:	e8 ad 60 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012a103:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012a106:	e8 bb 28 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012a10b:	29 c3                	sub    %eax,%ebx
f012a10d:	89 d8                	mov    %ebx,%eax
f012a10f:	3d 00 01 00 00       	cmp    $0x100,%eax
f012a114:	74 17                	je     f012a12d <test_krealloc+0x288>
			panic("krealloc: Wrong allocation: ");
f012a116:	83 ec 04             	sub    $0x4,%esp
f012a119:	68 6e aa 13 f0       	push   $0xf013aa6e
f012a11e:	68 f3 0e 00 00       	push   $0xef3
f012a123:	68 5a 97 13 f0       	push   $0xf013975a
f012a128:	e8 83 60 fd ff       	call   f01001b0 <_panic>

		lastIndices[1] = (1 * Mega - kilo) / sizeof(char) - 1;
f012a12d:	c7 85 5c fe ff ff ff 	movl   $0xffbff,-0x1a4(%ebp)
f012a134:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012a137:	e8 8a 28 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012a13c:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[2] = krealloc(NULL, 1 * Mega - kilo);
f012a13f:	83 ec 08             	sub    $0x8,%esp
f012a142:	68 00 fc 0f 00       	push   $0xffc00
f012a147:	6a 00                	push   $0x0
f012a149:	e8 c7 de fd ff       	call   f0108015 <krealloc>
f012a14e:	83 c4 10             	add    $0x10,%esp
f012a151:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
		if ((uint32) ptr_allocations[2] < (KERNEL_HEAP_START + 2 * Mega))
f012a157:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012a15d:	3d ff ff 1f f6       	cmp    $0xf61fffff,%eax
f012a162:	77 17                	ja     f012a17b <test_krealloc+0x2d6>
			panic("krealloc: Wrong start address for the allocated space... ");
f012a164:	83 ec 04             	sub    $0x4,%esp
f012a167:	68 00 aa 13 f0       	push   $0xf013aa00
f012a16c:	68 fb 0e 00 00       	push   $0xefb
f012a171:	68 5a 97 13 f0       	push   $0xf013975a
f012a176:	e8 35 60 fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[2] != ACTUAL_START + (2 * Mega))
f012a17b:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012a181:	89 c1                	mov    %eax,%ecx
f012a183:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f012a18a:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012a18f:	0f b6 d0             	movzbl %al,%edx
f012a192:	8b 45 94             	mov    -0x6c(%ebp),%eax
f012a195:	01 d0                	add    %edx,%eax
f012a197:	48                   	dec    %eax
f012a198:	89 45 90             	mov    %eax,-0x70(%ebp)
f012a19b:	8b 45 90             	mov    -0x70(%ebp),%eax
f012a19e:	ba 00 00 00 00       	mov    $0x0,%edx
f012a1a3:	f7 75 94             	divl   -0x6c(%ebp)
f012a1a6:	8b 45 90             	mov    -0x70(%ebp),%eax
f012a1a9:	29 d0                	sub    %edx,%eax
f012a1ab:	89 c3                	mov    %eax,%ebx
f012a1ad:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f012a1b4:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012a1b9:	0f b6 c0             	movzbl %al,%eax
f012a1bc:	c1 e0 04             	shl    $0x4,%eax
f012a1bf:	89 c2                	mov    %eax,%edx
f012a1c1:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012a1c4:	01 d0                	add    %edx,%eax
f012a1c6:	48                   	dec    %eax
f012a1c7:	89 45 88             	mov    %eax,-0x78(%ebp)
f012a1ca:	8b 45 88             	mov    -0x78(%ebp),%eax
f012a1cd:	ba 00 00 00 00       	mov    $0x0,%edx
f012a1d2:	f7 75 8c             	divl   -0x74(%ebp)
f012a1d5:	8b 45 88             	mov    -0x78(%ebp),%eax
f012a1d8:	29 d0                	sub    %edx,%eax
f012a1da:	01 d8                	add    %ebx,%eax
f012a1dc:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f012a1e1:	39 c1                	cmp    %eax,%ecx
f012a1e3:	74 17                	je     f012a1fc <test_krealloc+0x357>
			panic("krealloc: Wrong start address for allocated space");
f012a1e5:	83 ec 04             	sub    $0x4,%esp
f012a1e8:	68 3c aa 13 f0       	push   $0xf013aa3c
f012a1ed:	68 fd 0e 00 00       	push   $0xefd
f012a1f2:	68 5a 97 13 f0       	push   $0xf013975a
f012a1f7:	e8 b4 5f fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012a1fc:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012a1ff:	e8 c2 27 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012a204:	29 c3                	sub    %eax,%ebx
f012a206:	89 d8                	mov    %ebx,%eax
f012a208:	3d 00 01 00 00       	cmp    $0x100,%eax
f012a20d:	74 17                	je     f012a226 <test_krealloc+0x381>
			panic("krealloc: Wrong allocation: ");
f012a20f:	83 ec 04             	sub    $0x4,%esp
f012a212:	68 6e aa 13 f0       	push   $0xf013aa6e
f012a217:	68 ff 0e 00 00       	push   $0xeff
f012a21c:	68 5a 97 13 f0       	push   $0xf013975a
f012a221:	e8 8a 5f fd ff       	call   f01001b0 <_panic>
		lastIndices[2] = (1 * Mega - kilo) / sizeof(int) - 1;
f012a226:	c7 85 60 fe ff ff ff 	movl   $0x3feff,-0x1a0(%ebp)
f012a22d:	fe 03 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012a230:	e8 91 27 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012a235:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[3] = krealloc(NULL, 1 * Mega - kilo);
f012a238:	83 ec 08             	sub    $0x8,%esp
f012a23b:	68 00 fc 0f 00       	push   $0xffc00
f012a240:	6a 00                	push   $0x0
f012a242:	e8 ce dd fd ff       	call   f0108015 <krealloc>
f012a247:	83 c4 10             	add    $0x10,%esp
f012a24a:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
		if ((uint32) ptr_allocations[3] < (KERNEL_HEAP_START + 3 * Mega))
f012a250:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012a256:	3d ff ff 2f f6       	cmp    $0xf62fffff,%eax
f012a25b:	77 17                	ja     f012a274 <test_krealloc+0x3cf>
			panic("krealloc: Wrong start address for the allocated space... ");
f012a25d:	83 ec 04             	sub    $0x4,%esp
f012a260:	68 00 aa 13 f0       	push   $0xf013aa00
f012a265:	68 06 0f 00 00       	push   $0xf06
f012a26a:	68 5a 97 13 f0       	push   $0xf013975a
f012a26f:	e8 3c 5f fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[3] != ACTUAL_START + (3 * Mega))
f012a274:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012a27a:	89 c1                	mov    %eax,%ecx
f012a27c:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f012a283:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012a288:	0f b6 d0             	movzbl %al,%edx
f012a28b:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a28e:	01 d0                	add    %edx,%eax
f012a290:	48                   	dec    %eax
f012a291:	89 45 80             	mov    %eax,-0x80(%ebp)
f012a294:	8b 45 80             	mov    -0x80(%ebp),%eax
f012a297:	ba 00 00 00 00       	mov    $0x0,%edx
f012a29c:	f7 75 84             	divl   -0x7c(%ebp)
f012a29f:	8b 45 80             	mov    -0x80(%ebp),%eax
f012a2a2:	29 d0                	sub    %edx,%eax
f012a2a4:	89 c3                	mov    %eax,%ebx
f012a2a6:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f012a2ad:	10 00 00 
f012a2b0:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012a2b5:	0f b6 c0             	movzbl %al,%eax
f012a2b8:	c1 e0 04             	shl    $0x4,%eax
f012a2bb:	89 c2                	mov    %eax,%edx
f012a2bd:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012a2c3:	01 d0                	add    %edx,%eax
f012a2c5:	48                   	dec    %eax
f012a2c6:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f012a2cc:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012a2d2:	ba 00 00 00 00       	mov    $0x0,%edx
f012a2d7:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f012a2dd:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012a2e3:	29 d0                	sub    %edx,%eax
f012a2e5:	01 d8                	add    %ebx,%eax
f012a2e7:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f012a2ec:	39 c1                	cmp    %eax,%ecx
f012a2ee:	74 17                	je     f012a307 <test_krealloc+0x462>
			panic("krealloc: Wrong start address for allocated space");
f012a2f0:	83 ec 04             	sub    $0x4,%esp
f012a2f3:	68 3c aa 13 f0       	push   $0xf013aa3c
f012a2f8:	68 08 0f 00 00       	push   $0xf08
f012a2fd:	68 5a 97 13 f0       	push   $0xf013975a
f012a302:	e8 a9 5e fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012a307:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012a30a:	e8 b7 26 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012a30f:	29 c3                	sub    %eax,%ebx
f012a311:	89 d8                	mov    %ebx,%eax
f012a313:	3d 00 01 00 00       	cmp    $0x100,%eax
f012a318:	74 17                	je     f012a331 <test_krealloc+0x48c>
			panic("krealloc: Wrong allocation: ");
f012a31a:	83 ec 04             	sub    $0x4,%esp
f012a31d:	68 6e aa 13 f0       	push   $0xf013aa6e
f012a322:	68 0a 0f 00 00       	push   $0xf0a
f012a327:	68 5a 97 13 f0       	push   $0xf013975a
f012a32c:	e8 7f 5e fd ff       	call   f01001b0 <_panic>
		lastIndices[3] = (1 * Mega - kilo) / sizeof(int) - 1;
f012a331:	c7 85 64 fe ff ff ff 	movl   $0x3feff,-0x19c(%ebp)
f012a338:	fe 03 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012a33b:	e8 86 26 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012a340:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[4] = krealloc(NULL, 2 * Mega - kilo);
f012a343:	83 ec 08             	sub    $0x8,%esp
f012a346:	68 00 fc 1f 00       	push   $0x1ffc00
f012a34b:	6a 00                	push   $0x0
f012a34d:	e8 c3 dc fd ff       	call   f0108015 <krealloc>
f012a352:	83 c4 10             	add    $0x10,%esp
f012a355:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
		if ((uint32) ptr_allocations[4] < (KERNEL_HEAP_START + 4 * Mega))
f012a35b:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012a361:	3d ff ff 3f f6       	cmp    $0xf63fffff,%eax
f012a366:	77 17                	ja     f012a37f <test_krealloc+0x4da>
			panic("krealloc: Wrong start address for the allocated space... ");
f012a368:	83 ec 04             	sub    $0x4,%esp
f012a36b:	68 00 aa 13 f0       	push   $0xf013aa00
f012a370:	68 11 0f 00 00       	push   $0xf11
f012a375:	68 5a 97 13 f0       	push   $0xf013975a
f012a37a:	e8 31 5e fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[4] != ACTUAL_START + (4 * Mega))
f012a37f:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012a385:	89 c1                	mov    %eax,%ecx
f012a387:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f012a38e:	10 00 00 
f012a391:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012a396:	0f b6 d0             	movzbl %al,%edx
f012a399:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012a39f:	01 d0                	add    %edx,%eax
f012a3a1:	48                   	dec    %eax
f012a3a2:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f012a3a8:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012a3ae:	ba 00 00 00 00       	mov    $0x0,%edx
f012a3b3:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f012a3b9:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012a3bf:	29 d0                	sub    %edx,%eax
f012a3c1:	89 c3                	mov    %eax,%ebx
f012a3c3:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f012a3ca:	10 00 00 
f012a3cd:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012a3d2:	0f b6 c0             	movzbl %al,%eax
f012a3d5:	c1 e0 04             	shl    $0x4,%eax
f012a3d8:	89 c2                	mov    %eax,%edx
f012a3da:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f012a3e0:	01 d0                	add    %edx,%eax
f012a3e2:	48                   	dec    %eax
f012a3e3:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f012a3e9:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012a3ef:	ba 00 00 00 00       	mov    $0x0,%edx
f012a3f4:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f012a3fa:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012a400:	29 d0                	sub    %edx,%eax
f012a402:	01 d8                	add    %ebx,%eax
f012a404:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f012a409:	39 c1                	cmp    %eax,%ecx
f012a40b:	74 17                	je     f012a424 <test_krealloc+0x57f>
			panic("krealloc: Wrong start address for allocated space");
f012a40d:	83 ec 04             	sub    $0x4,%esp
f012a410:	68 3c aa 13 f0       	push   $0xf013aa3c
f012a415:	68 13 0f 00 00       	push   $0xf13
f012a41a:	68 5a 97 13 f0       	push   $0xf013975a
f012a41f:	e8 8c 5d fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012a424:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012a427:	e8 9a 25 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012a42c:	29 c3                	sub    %eax,%ebx
f012a42e:	89 d8                	mov    %ebx,%eax
f012a430:	3d 00 02 00 00       	cmp    $0x200,%eax
f012a435:	74 17                	je     f012a44e <test_krealloc+0x5a9>
			panic("krealloc: Wrong allocation: ");
f012a437:	83 ec 04             	sub    $0x4,%esp
f012a43a:	68 6e aa 13 f0       	push   $0xf013aa6e
f012a43f:	68 15 0f 00 00       	push   $0xf15
f012a444:	68 5a 97 13 f0       	push   $0xf013975a
f012a449:	e8 62 5d fd ff       	call   f01001b0 <_panic>
		lastIndices[4] = (2 * Mega - kilo) / sizeof(short) - 1;
f012a44e:	c7 85 68 fe ff ff ff 	movl   $0xffdff,-0x198(%ebp)
f012a455:	fd 0f 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012a458:	e8 69 25 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012a45d:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[5] = krealloc(NULL, 2 * Mega - kilo);
f012a460:	83 ec 08             	sub    $0x8,%esp
f012a463:	68 00 fc 1f 00       	push   $0x1ffc00
f012a468:	6a 00                	push   $0x0
f012a46a:	e8 a6 db fd ff       	call   f0108015 <krealloc>
f012a46f:	83 c4 10             	add    $0x10,%esp
f012a472:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
		if ((uint32) ptr_allocations[5] < (KERNEL_HEAP_START + 6 * Mega))
f012a478:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012a47e:	3d ff ff 5f f6       	cmp    $0xf65fffff,%eax
f012a483:	77 17                	ja     f012a49c <test_krealloc+0x5f7>
			panic("krealloc: Wrong start address for the allocated space... ");
f012a485:	83 ec 04             	sub    $0x4,%esp
f012a488:	68 00 aa 13 f0       	push   $0xf013aa00
f012a48d:	68 1c 0f 00 00       	push   $0xf1c
f012a492:	68 5a 97 13 f0       	push   $0xf013975a
f012a497:	e8 14 5d fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[5] != ACTUAL_START + (6 * Mega))
f012a49c:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012a4a2:	89 c1                	mov    %eax,%ecx
f012a4a4:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f012a4ab:	10 00 00 
f012a4ae:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012a4b3:	0f b6 d0             	movzbl %al,%edx
f012a4b6:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012a4bc:	01 d0                	add    %edx,%eax
f012a4be:	48                   	dec    %eax
f012a4bf:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f012a4c5:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012a4cb:	ba 00 00 00 00       	mov    $0x0,%edx
f012a4d0:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f012a4d6:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012a4dc:	29 d0                	sub    %edx,%eax
f012a4de:	89 c3                	mov    %eax,%ebx
f012a4e0:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f012a4e7:	10 00 00 
f012a4ea:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012a4ef:	0f b6 c0             	movzbl %al,%eax
f012a4f2:	c1 e0 04             	shl    $0x4,%eax
f012a4f5:	89 c2                	mov    %eax,%edx
f012a4f7:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012a4fd:	01 d0                	add    %edx,%eax
f012a4ff:	48                   	dec    %eax
f012a500:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f012a506:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012a50c:	ba 00 00 00 00       	mov    $0x0,%edx
f012a511:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f012a517:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012a51d:	29 d0                	sub    %edx,%eax
f012a51f:	01 d8                	add    %ebx,%eax
f012a521:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f012a526:	39 c1                	cmp    %eax,%ecx
f012a528:	74 17                	je     f012a541 <test_krealloc+0x69c>
			panic("krealloc: Wrong start address for allocated space");
f012a52a:	83 ec 04             	sub    $0x4,%esp
f012a52d:	68 3c aa 13 f0       	push   $0xf013aa3c
f012a532:	68 1e 0f 00 00       	push   $0xf1e
f012a537:	68 5a 97 13 f0       	push   $0xf013975a
f012a53c:	e8 6f 5c fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012a541:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012a544:	e8 7d 24 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012a549:	29 c3                	sub    %eax,%ebx
f012a54b:	89 d8                	mov    %ebx,%eax
f012a54d:	3d 00 02 00 00       	cmp    $0x200,%eax
f012a552:	74 17                	je     f012a56b <test_krealloc+0x6c6>
			panic("krealloc: Wrong allocation: ");
f012a554:	83 ec 04             	sub    $0x4,%esp
f012a557:	68 6e aa 13 f0       	push   $0xf013aa6e
f012a55c:	68 20 0f 00 00       	push   $0xf20
f012a561:	68 5a 97 13 f0       	push   $0xf013975a
f012a566:	e8 45 5c fd ff       	call   f01001b0 <_panic>
		lastIndices[5] = (2 * Mega - kilo) / sizeof(short) - 1;
f012a56b:	c7 85 6c fe ff ff ff 	movl   $0xffdff,-0x194(%ebp)
f012a572:	fd 0f 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012a575:	e8 4c 24 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012a57a:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[6] = krealloc(NULL, 3 * Mega - kilo);
f012a57d:	83 ec 08             	sub    $0x8,%esp
f012a580:	68 00 fc 2f 00       	push   $0x2ffc00
f012a585:	6a 00                	push   $0x0
f012a587:	e8 89 da fd ff       	call   f0108015 <krealloc>
f012a58c:	83 c4 10             	add    $0x10,%esp
f012a58f:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
		if ((uint32) ptr_allocations[6] < (KERNEL_HEAP_START + 8 * Mega))
f012a595:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012a59b:	3d ff ff 7f f6       	cmp    $0xf67fffff,%eax
f012a5a0:	77 17                	ja     f012a5b9 <test_krealloc+0x714>
			panic("krealloc: Wrong start address for the allocated space... ");
f012a5a2:	83 ec 04             	sub    $0x4,%esp
f012a5a5:	68 00 aa 13 f0       	push   $0xf013aa00
f012a5aa:	68 27 0f 00 00       	push   $0xf27
f012a5af:	68 5a 97 13 f0       	push   $0xf013975a
f012a5b4:	e8 f7 5b fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[6] != ACTUAL_START + (8 * Mega))
f012a5b9:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012a5bf:	89 c1                	mov    %eax,%ecx
f012a5c1:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f012a5c8:	10 00 00 
f012a5cb:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012a5d0:	0f b6 d0             	movzbl %al,%edx
f012a5d3:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012a5d9:	01 d0                	add    %edx,%eax
f012a5db:	48                   	dec    %eax
f012a5dc:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f012a5e2:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012a5e8:	ba 00 00 00 00       	mov    $0x0,%edx
f012a5ed:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f012a5f3:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012a5f9:	29 d0                	sub    %edx,%eax
f012a5fb:	89 c3                	mov    %eax,%ebx
f012a5fd:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f012a604:	10 00 00 
f012a607:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012a60c:	0f b6 c0             	movzbl %al,%eax
f012a60f:	c1 e0 04             	shl    $0x4,%eax
f012a612:	89 c2                	mov    %eax,%edx
f012a614:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012a61a:	01 d0                	add    %edx,%eax
f012a61c:	48                   	dec    %eax
f012a61d:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f012a623:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012a629:	ba 00 00 00 00       	mov    $0x0,%edx
f012a62e:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f012a634:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012a63a:	29 d0                	sub    %edx,%eax
f012a63c:	01 d8                	add    %ebx,%eax
f012a63e:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f012a643:	39 c1                	cmp    %eax,%ecx
f012a645:	74 17                	je     f012a65e <test_krealloc+0x7b9>
			panic("krealloc: Wrong start address for allocated space");
f012a647:	83 ec 04             	sub    $0x4,%esp
f012a64a:	68 3c aa 13 f0       	push   $0xf013aa3c
f012a64f:	68 29 0f 00 00       	push   $0xf29
f012a654:	68 5a 97 13 f0       	push   $0xf013975a
f012a659:	e8 52 5b fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012a65e:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012a661:	e8 60 23 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012a666:	29 c3                	sub    %eax,%ebx
f012a668:	89 d8                	mov    %ebx,%eax
f012a66a:	3d 00 03 00 00       	cmp    $0x300,%eax
f012a66f:	74 17                	je     f012a688 <test_krealloc+0x7e3>
			panic("Wrong allocation: ");
f012a671:	83 ec 04             	sub    $0x4,%esp
f012a674:	68 a4 9b 13 f0       	push   $0xf0139ba4
f012a679:	68 2b 0f 00 00       	push   $0xf2b
f012a67e:	68 5a 97 13 f0       	push   $0xf013975a
f012a683:	e8 28 5b fd ff       	call   f01001b0 <_panic>
		lastIndices[6] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012a688:	c7 85 70 fe ff ff 7f 	movl   $0x5ff7f,-0x190(%ebp)
f012a68f:	ff 05 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012a692:	e8 2f 23 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012a697:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[7] = krealloc(NULL, 3 * Mega - kilo);
f012a69a:	83 ec 08             	sub    $0x8,%esp
f012a69d:	68 00 fc 2f 00       	push   $0x2ffc00
f012a6a2:	6a 00                	push   $0x0
f012a6a4:	e8 6c d9 fd ff       	call   f0108015 <krealloc>
f012a6a9:	83 c4 10             	add    $0x10,%esp
f012a6ac:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
		if ((uint32) ptr_allocations[7] < (KERNEL_HEAP_START + 11 * Mega))
f012a6b2:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012a6b8:	3d ff ff af f6       	cmp    $0xf6afffff,%eax
f012a6bd:	77 17                	ja     f012a6d6 <test_krealloc+0x831>
			panic("krealloc: Wrong start address for the allocated space... ");
f012a6bf:	83 ec 04             	sub    $0x4,%esp
f012a6c2:	68 00 aa 13 f0       	push   $0xf013aa00
f012a6c7:	68 32 0f 00 00       	push   $0xf32
f012a6cc:	68 5a 97 13 f0       	push   $0xf013975a
f012a6d1:	e8 da 5a fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[7] != ACTUAL_START + (11 * Mega))
f012a6d6:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012a6dc:	89 c1                	mov    %eax,%ecx
f012a6de:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f012a6e5:	10 00 00 
f012a6e8:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012a6ed:	0f b6 d0             	movzbl %al,%edx
f012a6f0:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012a6f6:	01 d0                	add    %edx,%eax
f012a6f8:	48                   	dec    %eax
f012a6f9:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f012a6ff:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012a705:	ba 00 00 00 00       	mov    $0x0,%edx
f012a70a:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f012a710:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012a716:	29 d0                	sub    %edx,%eax
f012a718:	89 c3                	mov    %eax,%ebx
f012a71a:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f012a721:	10 00 00 
f012a724:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012a729:	0f b6 c0             	movzbl %al,%eax
f012a72c:	c1 e0 04             	shl    $0x4,%eax
f012a72f:	89 c2                	mov    %eax,%edx
f012a731:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012a737:	01 d0                	add    %edx,%eax
f012a739:	48                   	dec    %eax
f012a73a:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f012a740:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012a746:	ba 00 00 00 00       	mov    $0x0,%edx
f012a74b:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f012a751:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012a757:	29 d0                	sub    %edx,%eax
f012a759:	01 d8                	add    %ebx,%eax
f012a75b:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f012a760:	39 c1                	cmp    %eax,%ecx
f012a762:	74 17                	je     f012a77b <test_krealloc+0x8d6>
			panic("krealloc: Wrong start address for allocated space");
f012a764:	83 ec 04             	sub    $0x4,%esp
f012a767:	68 3c aa 13 f0       	push   $0xf013aa3c
f012a76c:	68 34 0f 00 00       	push   $0xf34
f012a771:	68 5a 97 13 f0       	push   $0xf013975a
f012a776:	e8 35 5a fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012a77b:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012a77e:	e8 43 22 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012a783:	29 c3                	sub    %eax,%ebx
f012a785:	89 d8                	mov    %ebx,%eax
f012a787:	3d 00 03 00 00       	cmp    $0x300,%eax
f012a78c:	74 17                	je     f012a7a5 <test_krealloc+0x900>
			panic("krealloc: Wrong allocation: ");
f012a78e:	83 ec 04             	sub    $0x4,%esp
f012a791:	68 6e aa 13 f0       	push   $0xf013aa6e
f012a796:	68 36 0f 00 00       	push   $0xf36
f012a79b:	68 5a 97 13 f0       	push   $0xf013975a
f012a7a0:	e8 0b 5a fd ff       	call   f01001b0 <_panic>
		lastIndices[7] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012a7a5:	c7 85 74 fe ff ff 7f 	movl   $0x5ff7f,-0x18c(%ebp)
f012a7ac:	ff 05 00 
	char *byteArr1;
	//[3] Test read write access
	{
		//cprintf("\nTest read write access");
		//Test access for the first 1 MB
		freeFrames = sys_calculate_free_frames();
f012a7af:	e8 12 22 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012a7b4:	89 45 b8             	mov    %eax,-0x48(%ebp)

		//Write values
		//In 1st 1 MB
		lastIndexOfByte = (1 * Mega - kilo) / sizeof(char) - 1;
f012a7b7:	c7 85 34 ff ff ff ff 	movl   $0xffbff,-0xcc(%ebp)
f012a7be:	fb 0f 00 
		byteArr = (char *) ptr_allocations[0];
f012a7c1:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012a7c7:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
		byteArr[0] = minByte;
f012a7cd:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012a7d3:	8a 55 cf             	mov    -0x31(%ebp),%dl
f012a7d6:	88 10                	mov    %dl,(%eax)
		byteArr[lastIndexOfByte] = maxByte;
f012a7d8:	8b 95 34 ff ff ff    	mov    -0xcc(%ebp),%edx
f012a7de:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012a7e4:	01 c2                	add    %eax,%edx
f012a7e6:	8a 45 ce             	mov    -0x32(%ebp),%al
f012a7e9:	88 02                	mov    %al,(%edx)

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f012a7eb:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012a7f1:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012a7f7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a7fe:	eb 11                	jmp    f012a811 <test_krealloc+0x96c>
			ptr[i] = 2;
f012a800:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012a803:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012a809:	01 d0                	add    %edx,%eax
f012a80b:	c6 00 02             	movb   $0x2,(%eax)
		byteArr[0] = minByte;
		byteArr[lastIndexOfByte] = maxByte;

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012a80e:	ff 45 f4             	incl   -0xc(%ebp)
f012a811:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012a817:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a81a:	7d e4                	jge    f012a800 <test_krealloc+0x95b>
			ptr[i] = 2;
		}

		//In 3rd 1 MB
		intArr = (int*) ptr_allocations[2];
f012a81c:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012a822:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
		intArr[0] = 3;
f012a828:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012a82e:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
		intArr[lastIndices[2]] = 3;
f012a834:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012a83a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012a841:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012a847:	01 d0                	add    %edx,%eax
f012a849:	c7 00 03 00 00 00    	movl   $0x3,(%eax)

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
f012a84f:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012a855:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012a85b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f012a862:	eb 1b                	jmp    f012a87f <test_krealloc+0x9da>
			intArr[i] = 4;
f012a864:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012a867:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012a86e:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012a874:	01 d0                	add    %edx,%eax
f012a876:	c7 00 04 00 00 00    	movl   $0x4,(%eax)
		intArr[0] = 3;
		intArr[lastIndices[2]] = 3;

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012a87c:	ff 45 f0             	incl   -0x10(%ebp)
f012a87f:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012a885:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012a888:	7d da                	jge    f012a864 <test_krealloc+0x9bf>
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f012a88a:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012a890:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012a896:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f012a89d:	eb 17                	jmp    f012a8b6 <test_krealloc+0xa11>
			shortArr[i] = 5;
f012a89f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f012a8a2:	01 c0                	add    %eax,%eax
f012a8a4:	89 c2                	mov    %eax,%edx
f012a8a6:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012a8ac:	01 d0                	add    %edx,%eax
f012a8ae:	66 c7 00 05 00       	movw   $0x5,(%eax)
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012a8b3:	ff 45 ec             	incl   -0x14(%ebp)
f012a8b6:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012a8bc:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f012a8bf:	7d de                	jge    f012a89f <test_krealloc+0x9fa>
			shortArr[i] = 5;
		}

		//In the 2nd 2 MB
		shortArr = (short*) ptr_allocations[5];
f012a8c1:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012a8c7:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
		shortArr[0] = 6;
f012a8cd:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012a8d3:	66 c7 00 06 00       	movw   $0x6,(%eax)
		shortArr[lastIndices[5]] = 6;
f012a8d8:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012a8de:	01 c0                	add    %eax,%eax
f012a8e0:	89 c2                	mov    %eax,%edx
f012a8e2:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012a8e8:	01 d0                	add    %edx,%eax
f012a8ea:	66 c7 00 06 00       	movw   $0x6,(%eax)

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
f012a8ef:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012a8f5:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
		for (int i = 0; i <= lastIndices[6]; i++) {
f012a8fb:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f012a902:	eb 49                	jmp    f012a94d <test_krealloc+0xaa8>
			structArr[i].a = 7;
f012a904:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012a907:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012a90e:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012a914:	01 d0                	add    %edx,%eax
f012a916:	c6 00 07             	movb   $0x7,(%eax)
			structArr[i].b = 7;
f012a919:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012a91c:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012a923:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012a929:	01 d0                	add    %edx,%eax
f012a92b:	66 c7 40 02 07 00    	movw   $0x7,0x2(%eax)
			structArr[i].c = 7;
f012a931:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012a934:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012a93b:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012a941:	01 d0                	add    %edx,%eax
f012a943:	c7 40 04 07 00 00 00 	movl   $0x7,0x4(%eax)
		shortArr[0] = 6;
		shortArr[lastIndices[5]] = 6;

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
		for (int i = 0; i <= lastIndices[6]; i++) {
f012a94a:	ff 45 e8             	incl   -0x18(%ebp)
f012a94d:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012a953:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f012a956:	7d ac                	jge    f012a904 <test_krealloc+0xa5f>
			structArr[i].b = 7;
			structArr[i].c = 7;
		}

		//In the last 3 MB
		structArr = (struct MyStruct*) ptr_allocations[7];
f012a958:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012a95e:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
		structArr[0].a = 8;
f012a964:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012a96a:	c6 00 08             	movb   $0x8,(%eax)
		structArr[0].b = 8;
f012a96d:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012a973:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[0].c = 8;
f012a979:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012a97f:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)
		structArr[lastIndices[7]].a = 8;
f012a986:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012a98c:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012a993:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012a999:	01 d0                	add    %edx,%eax
f012a99b:	c6 00 08             	movb   $0x8,(%eax)
		structArr[lastIndices[7]].b = 8;
f012a99e:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012a9a4:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012a9ab:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012a9b1:	01 d0                	add    %edx,%eax
f012a9b3:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[lastIndices[7]].c = 8;
f012a9b9:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012a9bf:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012a9c6:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012a9cc:	01 d0                	add    %edx,%eax
f012a9ce:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)

		//Read values: check that the values are successfully written
		if (byteArr[0] != minByte || byteArr[lastIndices[0]] != maxByte)
f012a9d5:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012a9db:	8a 00                	mov    (%eax),%al
f012a9dd:	3a 45 cf             	cmp    -0x31(%ebp),%al
f012a9e0:	75 17                	jne    f012a9f9 <test_krealloc+0xb54>
f012a9e2:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012a9e8:	89 c2                	mov    %eax,%edx
f012a9ea:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012a9f0:	01 d0                	add    %edx,%eax
f012a9f2:	8a 00                	mov    (%eax),%al
f012a9f4:	3a 45 ce             	cmp    -0x32(%ebp),%al
f012a9f7:	74 17                	je     f012aa10 <test_krealloc+0xb6b>
			panic(
f012a9f9:	83 ec 04             	sub    $0x4,%esp
f012a9fc:	68 8c aa 13 f0       	push   $0xf013aa8c
f012aa01:	68 79 0f 00 00       	push   $0xf79
f012aa06:	68 5a 97 13 f0       	push   $0xf013975a
f012aa0b:	e8 a0 57 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		ptr = (char*) ptr_allocations[1];
f012aa10:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012aa16:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
		if (ptr[0] != 2 || ptr[lastIndices[1]] != 2)
f012aa1c:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012aa22:	8a 00                	mov    (%eax),%al
f012aa24:	3c 02                	cmp    $0x2,%al
f012aa26:	75 16                	jne    f012aa3e <test_krealloc+0xb99>
f012aa28:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012aa2e:	89 c2                	mov    %eax,%edx
f012aa30:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012aa36:	01 d0                	add    %edx,%eax
f012aa38:	8a 00                	mov    (%eax),%al
f012aa3a:	3c 02                	cmp    $0x2,%al
f012aa3c:	74 20                	je     f012aa5e <test_krealloc+0xbb9>
			panic(
f012aa3e:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012aa44:	8a 00                	mov    (%eax),%al
f012aa46:	0f be c0             	movsbl %al,%eax
f012aa49:	50                   	push   %eax
f012aa4a:	68 cc aa 13 f0       	push   $0xf013aacc
f012aa4f:	68 7f 0f 00 00       	push   $0xf7f
f012aa54:	68 5a 97 13 f0       	push   $0xf013975a
f012aa59:	e8 52 57 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!, char = %c",
					ptr[0]);

		intArr = (int*) ptr_allocations[2];
f012aa5e:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012aa64:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
		if (intArr[0] != 3 || intArr[lastIndices[2]] != 3)
f012aa6a:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012aa70:	8b 00                	mov    (%eax),%eax
f012aa72:	83 f8 03             	cmp    $0x3,%eax
f012aa75:	75 1c                	jne    f012aa93 <test_krealloc+0xbee>
f012aa77:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012aa7d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012aa84:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012aa8a:	01 d0                	add    %edx,%eax
f012aa8c:	8b 00                	mov    (%eax),%eax
f012aa8e:	83 f8 03             	cmp    $0x3,%eax
f012aa91:	74 17                	je     f012aaaa <test_krealloc+0xc05>
			panic("Wrong allocation stored values are wrongly changed!");
f012aa93:	83 ec 04             	sub    $0x4,%esp
f012aa96:	68 18 ab 13 f0       	push   $0xf013ab18
f012aa9b:	68 83 0f 00 00       	push   $0xf83
f012aaa0:	68 5a 97 13 f0       	push   $0xf013975a
f012aaa5:	e8 06 57 fd ff       	call   f01001b0 <_panic>

		intArr = (int*) ptr_allocations[3];
f012aaaa:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012aab0:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
		if (intArr[0] != 4 || intArr[lastIndices[3]] != 4)
f012aab6:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012aabc:	8b 00                	mov    (%eax),%eax
f012aabe:	83 f8 04             	cmp    $0x4,%eax
f012aac1:	75 1c                	jne    f012aadf <test_krealloc+0xc3a>
f012aac3:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012aac9:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012aad0:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012aad6:	01 d0                	add    %edx,%eax
f012aad8:	8b 00                	mov    (%eax),%eax
f012aada:	83 f8 04             	cmp    $0x4,%eax
f012aadd:	74 17                	je     f012aaf6 <test_krealloc+0xc51>
			panic(
f012aadf:	83 ec 04             	sub    $0x4,%esp
f012aae2:	68 8c aa 13 f0       	push   $0xf013aa8c
f012aae7:	68 88 0f 00 00       	push   $0xf88
f012aaec:	68 5a 97 13 f0       	push   $0xf013975a
f012aaf1:	e8 ba 56 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[4];
f012aaf6:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012aafc:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
		if (shortArr[0] != 5 || shortArr[lastIndices[4]] != 5)
f012ab02:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012ab08:	66 8b 00             	mov    (%eax),%ax
f012ab0b:	66 83 f8 05          	cmp    $0x5,%ax
f012ab0f:	75 1b                	jne    f012ab2c <test_krealloc+0xc87>
f012ab11:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012ab17:	01 c0                	add    %eax,%eax
f012ab19:	89 c2                	mov    %eax,%edx
f012ab1b:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012ab21:	01 d0                	add    %edx,%eax
f012ab23:	66 8b 00             	mov    (%eax),%ax
f012ab26:	66 83 f8 05          	cmp    $0x5,%ax
f012ab2a:	74 17                	je     f012ab43 <test_krealloc+0xc9e>
			panic(
f012ab2c:	83 ec 04             	sub    $0x4,%esp
f012ab2f:	68 8c aa 13 f0       	push   $0xf013aa8c
f012ab34:	68 8d 0f 00 00       	push   $0xf8d
f012ab39:	68 5a 97 13 f0       	push   $0xf013975a
f012ab3e:	e8 6d 56 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[5];
f012ab43:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012ab49:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
		if (shortArr[0] != 6 || shortArr[lastIndices[5]] != 6)
f012ab4f:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012ab55:	66 8b 00             	mov    (%eax),%ax
f012ab58:	66 83 f8 06          	cmp    $0x6,%ax
f012ab5c:	75 1b                	jne    f012ab79 <test_krealloc+0xcd4>
f012ab5e:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012ab64:	01 c0                	add    %eax,%eax
f012ab66:	89 c2                	mov    %eax,%edx
f012ab68:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012ab6e:	01 d0                	add    %edx,%eax
f012ab70:	66 8b 00             	mov    (%eax),%ax
f012ab73:	66 83 f8 06          	cmp    $0x6,%ax
f012ab77:	74 17                	je     f012ab90 <test_krealloc+0xceb>
			panic(
f012ab79:	83 ec 04             	sub    $0x4,%esp
f012ab7c:	68 8c aa 13 f0       	push   $0xf013aa8c
f012ab81:	68 92 0f 00 00       	push   $0xf92
f012ab86:	68 5a 97 13 f0       	push   $0xf013975a
f012ab8b:	e8 20 56 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[6];
f012ab90:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012ab96:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
		if (structArr[0].a != 7 || structArr[lastIndices[6]].a != 7)
f012ab9c:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012aba2:	8a 00                	mov    (%eax),%al
f012aba4:	3c 07                	cmp    $0x7,%al
f012aba6:	75 1b                	jne    f012abc3 <test_krealloc+0xd1e>
f012aba8:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012abae:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012abb5:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012abbb:	01 d0                	add    %edx,%eax
f012abbd:	8a 00                	mov    (%eax),%al
f012abbf:	3c 07                	cmp    $0x7,%al
f012abc1:	74 17                	je     f012abda <test_krealloc+0xd35>
			panic(
f012abc3:	83 ec 04             	sub    $0x4,%esp
f012abc6:	68 8c aa 13 f0       	push   $0xf013aa8c
f012abcb:	68 97 0f 00 00       	push   $0xf97
f012abd0:	68 5a 97 13 f0       	push   $0xf013975a
f012abd5:	e8 d6 55 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 7 || structArr[lastIndices[6]].b != 7)
f012abda:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012abe0:	66 8b 40 02          	mov    0x2(%eax),%ax
f012abe4:	66 83 f8 07          	cmp    $0x7,%ax
f012abe8:	75 1f                	jne    f012ac09 <test_krealloc+0xd64>
f012abea:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012abf0:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012abf7:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012abfd:	01 d0                	add    %edx,%eax
f012abff:	66 8b 40 02          	mov    0x2(%eax),%ax
f012ac03:	66 83 f8 07          	cmp    $0x7,%ax
f012ac07:	74 17                	je     f012ac20 <test_krealloc+0xd7b>
			panic(
f012ac09:	83 ec 04             	sub    $0x4,%esp
f012ac0c:	68 8c aa 13 f0       	push   $0xf013aa8c
f012ac11:	68 9a 0f 00 00       	push   $0xf9a
f012ac16:	68 5a 97 13 f0       	push   $0xf013975a
f012ac1b:	e8 90 55 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 7 || structArr[lastIndices[6]].c != 7)
f012ac20:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012ac26:	8b 40 04             	mov    0x4(%eax),%eax
f012ac29:	83 f8 07             	cmp    $0x7,%eax
f012ac2c:	75 1d                	jne    f012ac4b <test_krealloc+0xda6>
f012ac2e:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012ac34:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012ac3b:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012ac41:	01 d0                	add    %edx,%eax
f012ac43:	8b 40 04             	mov    0x4(%eax),%eax
f012ac46:	83 f8 07             	cmp    $0x7,%eax
f012ac49:	74 17                	je     f012ac62 <test_krealloc+0xdbd>
			panic(
f012ac4b:	83 ec 04             	sub    $0x4,%esp
f012ac4e:	68 8c aa 13 f0       	push   $0xf013aa8c
f012ac53:	68 9d 0f 00 00       	push   $0xf9d
f012ac58:	68 5a 97 13 f0       	push   $0xf013975a
f012ac5d:	e8 4e 55 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[7];
f012ac62:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012ac68:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
		if (structArr[0].a != 8 || structArr[lastIndices[7]].a != 8)
f012ac6e:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012ac74:	8a 00                	mov    (%eax),%al
f012ac76:	3c 08                	cmp    $0x8,%al
f012ac78:	75 1b                	jne    f012ac95 <test_krealloc+0xdf0>
f012ac7a:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012ac80:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012ac87:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012ac8d:	01 d0                	add    %edx,%eax
f012ac8f:	8a 00                	mov    (%eax),%al
f012ac91:	3c 08                	cmp    $0x8,%al
f012ac93:	74 17                	je     f012acac <test_krealloc+0xe07>
			panic(
f012ac95:	83 ec 04             	sub    $0x4,%esp
f012ac98:	68 8c aa 13 f0       	push   $0xf013aa8c
f012ac9d:	68 a2 0f 00 00       	push   $0xfa2
f012aca2:	68 5a 97 13 f0       	push   $0xf013975a
f012aca7:	e8 04 55 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 8 || structArr[lastIndices[7]].b != 8)
f012acac:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012acb2:	66 8b 40 02          	mov    0x2(%eax),%ax
f012acb6:	66 83 f8 08          	cmp    $0x8,%ax
f012acba:	75 1f                	jne    f012acdb <test_krealloc+0xe36>
f012acbc:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012acc2:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012acc9:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012accf:	01 d0                	add    %edx,%eax
f012acd1:	66 8b 40 02          	mov    0x2(%eax),%ax
f012acd5:	66 83 f8 08          	cmp    $0x8,%ax
f012acd9:	74 17                	je     f012acf2 <test_krealloc+0xe4d>
			panic(
f012acdb:	83 ec 04             	sub    $0x4,%esp
f012acde:	68 8c aa 13 f0       	push   $0xf013aa8c
f012ace3:	68 a5 0f 00 00       	push   $0xfa5
f012ace8:	68 5a 97 13 f0       	push   $0xf013975a
f012aced:	e8 be 54 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 8 || structArr[lastIndices[7]].c != 8)
f012acf2:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012acf8:	8b 40 04             	mov    0x4(%eax),%eax
f012acfb:	83 f8 08             	cmp    $0x8,%eax
f012acfe:	75 1d                	jne    f012ad1d <test_krealloc+0xe78>
f012ad00:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012ad06:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012ad0d:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012ad13:	01 d0                	add    %edx,%eax
f012ad15:	8b 40 04             	mov    0x4(%eax),%eax
f012ad18:	83 f8 08             	cmp    $0x8,%eax
f012ad1b:	74 17                	je     f012ad34 <test_krealloc+0xe8f>
			panic(
f012ad1d:	83 ec 04             	sub    $0x4,%esp
f012ad20:	68 8c aa 13 f0       	push   $0xf013aa8c
f012ad25:	68 a8 0f 00 00       	push   $0xfa8
f012ad2a:	68 5a 97 13 f0       	push   $0xf013975a
f012ad2f:	e8 7c 54 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		if ((freeFrames - sys_calculate_free_frames()) != 0)
f012ad34:	e8 8d 1c fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012ad39:	89 c2                	mov    %eax,%edx
f012ad3b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012ad3e:	39 c2                	cmp    %eax,%edx
f012ad40:	74 17                	je     f012ad59 <test_krealloc+0xeb4>
			panic(
f012ad42:	83 ec 04             	sub    $0x4,%esp
f012ad45:	68 4c ab 13 f0       	push   $0xf013ab4c
f012ad4a:	68 ac 0f 00 00       	push   $0xfac
f012ad4f:	68 5a 97 13 f0       	push   $0xf013975a
f012ad54:	e8 57 54 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation pages are not loaded successfully into memory");

	}
	cprintf("\nkrealloc: current evaluation = 10%");
f012ad59:	83 ec 0c             	sub    $0xc,%esp
f012ad5c:	68 98 ab 13 f0       	push   $0xf013ab98
f012ad61:	e8 cb 60 fd ff       	call   f0100e31 <cprintf>
f012ad66:	83 c4 10             	add    $0x10,%esp

	//[3] Test krealloc by passing size = 0
	{
		//kfree 1st 1 MB
		freeFrames = sys_calculate_free_frames();
f012ad69:	e8 58 1c fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012ad6e:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012ad71:	e8 0e 99 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012ad76:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
		krealloc(ptr_allocations[0], 0);
f012ad7c:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012ad82:	83 ec 08             	sub    $0x8,%esp
f012ad85:	6a 00                	push   $0x0
f012ad87:	50                   	push   %eax
f012ad88:	e8 88 d2 fd ff       	call   f0108015 <krealloc>
f012ad8d:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012ad90:	e8 ef 98 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012ad95:	3b 85 1c ff ff ff    	cmp    -0xe4(%ebp),%eax
f012ad9b:	74 17                	je     f012adb4 <test_krealloc+0xf0f>
			panic(
f012ad9d:	83 ec 04             	sub    $0x4,%esp
f012ada0:	68 bc ab 13 f0       	push   $0xf013abbc
f012ada5:	68 b9 0f 00 00       	push   $0xfb9
f012adaa:	68 5a 97 13 f0       	push   $0xf013975a
f012adaf:	e8 fc 53 fd ff       	call   f01001b0 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012adb4:	e8 0d 1c fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012adb9:	89 c2                	mov    %eax,%edx
f012adbb:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012adbe:	29 c2                	sub    %eax,%edx
f012adc0:	89 d0                	mov    %edx,%eax
f012adc2:	3d 00 01 00 00       	cmp    $0x100,%eax
f012adc7:	74 17                	je     f012ade0 <test_krealloc+0xf3b>
			panic("krealloc: pages in memory are not freed correctly");
f012adc9:	83 ec 04             	sub    $0x4,%esp
f012adcc:	68 30 ac 13 f0       	push   $0xf013ac30
f012add1:	68 bb 0f 00 00       	push   $0xfbb
f012add6:	68 5a 97 13 f0       	push   $0xf013975a
f012addb:	e8 d0 53 fd ff       	call   f01001b0 <_panic>

		//kfree 3rd 1 MB
		freeFrames = sys_calculate_free_frames();
f012ade0:	e8 e1 1b fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012ade5:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012ade8:	e8 97 98 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012aded:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)

		krealloc(ptr_allocations[2], 0);
f012adf3:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012adf9:	83 ec 08             	sub    $0x8,%esp
f012adfc:	6a 00                	push   $0x0
f012adfe:	50                   	push   %eax
f012adff:	e8 11 d2 fd ff       	call   f0108015 <krealloc>
f012ae04:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012ae07:	e8 78 98 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012ae0c:	3b 85 1c ff ff ff    	cmp    -0xe4(%ebp),%eax
f012ae12:	74 17                	je     f012ae2b <test_krealloc+0xf86>
			panic(
f012ae14:	83 ec 04             	sub    $0x4,%esp
f012ae17:	68 bc ab 13 f0       	push   $0xf013abbc
f012ae1c:	68 c4 0f 00 00       	push   $0xfc4
f012ae21:	68 5a 97 13 f0       	push   $0xf013975a
f012ae26:	e8 85 53 fd ff       	call   f01001b0 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012ae2b:	e8 96 1b fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012ae30:	89 c2                	mov    %eax,%edx
f012ae32:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012ae35:	29 c2                	sub    %eax,%edx
f012ae37:	89 d0                	mov    %edx,%eax
f012ae39:	3d 00 01 00 00       	cmp    $0x100,%eax
f012ae3e:	74 17                	je     f012ae57 <test_krealloc+0xfb2>
			panic("krealloc: pages in memory are not freed correctly");
f012ae40:	83 ec 04             	sub    $0x4,%esp
f012ae43:	68 30 ac 13 f0       	push   $0xf013ac30
f012ae48:	68 c6 0f 00 00       	push   $0xfc6
f012ae4d:	68 5a 97 13 f0       	push   $0xf013975a
f012ae52:	e8 59 53 fd ff       	call   f01001b0 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames();
f012ae57:	e8 6a 1b fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012ae5c:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012ae5f:	e8 20 98 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012ae64:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
		krealloc(ptr_allocations[5], 0);
f012ae6a:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012ae70:	83 ec 08             	sub    $0x8,%esp
f012ae73:	6a 00                	push   $0x0
f012ae75:	50                   	push   %eax
f012ae76:	e8 9a d1 fd ff       	call   f0108015 <krealloc>
f012ae7b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012ae7e:	e8 01 98 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012ae83:	3b 85 1c ff ff ff    	cmp    -0xe4(%ebp),%eax
f012ae89:	74 17                	je     f012aea2 <test_krealloc+0xffd>
			panic(
f012ae8b:	83 ec 04             	sub    $0x4,%esp
f012ae8e:	68 74 97 13 f0       	push   $0xf0139774
f012ae93:	68 ce 0f 00 00       	push   $0xfce
f012ae98:	68 5a 97 13 f0       	push   $0xf013975a
f012ae9d:	e8 0e 53 fd ff       	call   f01001b0 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 2 * Mega / PAGE_SIZE)
f012aea2:	e8 1f 1b fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012aea7:	89 c2                	mov    %eax,%edx
f012aea9:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012aeac:	29 c2                	sub    %eax,%edx
f012aeae:	89 d0                	mov    %edx,%eax
f012aeb0:	3d 00 02 00 00       	cmp    $0x200,%eax
f012aeb5:	74 17                	je     f012aece <test_krealloc+0x1029>
			panic("krealloc: pages in memory are not freed correctly");
f012aeb7:	83 ec 04             	sub    $0x4,%esp
f012aeba:	68 30 ac 13 f0       	push   $0xf013ac30
f012aebf:	68 d0 0f 00 00       	push   $0xfd0
f012aec4:	68 5a 97 13 f0       	push   $0xf013975a
f012aec9:	e8 e2 52 fd ff       	call   f01001b0 <_panic>

		//kfree last 3 MB
		freeFrames = sys_calculate_free_frames();
f012aece:	e8 f3 1a fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012aed3:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012aed6:	e8 a9 97 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012aedb:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
		krealloc(ptr_allocations[7], 0);
f012aee1:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012aee7:	83 ec 08             	sub    $0x8,%esp
f012aeea:	6a 00                	push   $0x0
f012aeec:	50                   	push   %eax
f012aeed:	e8 23 d1 fd ff       	call   f0108015 <krealloc>
f012aef2:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012aef5:	e8 8a 97 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012aefa:	3b 85 1c ff ff ff    	cmp    -0xe4(%ebp),%eax
f012af00:	74 17                	je     f012af19 <test_krealloc+0x1074>
			panic(
f012af02:	83 ec 04             	sub    $0x4,%esp
f012af05:	68 bc ab 13 f0       	push   $0xf013abbc
f012af0a:	68 d8 0f 00 00       	push   $0xfd8
f012af0f:	68 5a 97 13 f0       	push   $0xf013975a
f012af14:	e8 97 52 fd ff       	call   f01001b0 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 3 * Mega / PAGE_SIZE)
f012af19:	e8 a8 1a fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012af1e:	89 c2                	mov    %eax,%edx
f012af20:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012af23:	29 c2                	sub    %eax,%edx
f012af25:	89 d0                	mov    %edx,%eax
f012af27:	3d 00 03 00 00       	cmp    $0x300,%eax
f012af2c:	74 17                	je     f012af45 <test_krealloc+0x10a0>
			panic(
f012af2e:	83 ec 04             	sub    $0x4,%esp
f012af31:	68 64 ac 13 f0       	push   $0xf013ac64
f012af36:	68 db 0f 00 00       	push   $0xfdb
f012af3b:	68 5a 97 13 f0       	push   $0xf013975a
f012af40:	e8 6b 52 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012af45:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
f012af4c:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f012af53:	eb 48                	jmp    f012af9d <test_krealloc+0x10f8>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f012af55:	8b 55 e0             	mov    -0x20(%ebp),%edx
f012af58:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f012af5d:	83 ec 04             	sub    $0x4,%esp
f012af60:	8d 8d 04 fe ff ff    	lea    -0x1fc(%ebp),%ecx
f012af66:	51                   	push   %ecx
f012af67:	52                   	push   %edx
f012af68:	50                   	push   %eax
f012af69:	e8 79 c5 fd ff       	call   f01074e7 <get_page_table>
f012af6e:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f012af71:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f012af77:	85 c0                	test   %eax,%eax
f012af79:	75 17                	jne    f012af92 <test_krealloc+0x10ed>
					panic(
f012af7b:	83 ec 04             	sub    $0x4,%esp
f012af7e:	68 5c a0 13 f0       	push   $0xf013a05c
f012af83:	68 e7 0f 00 00       	push   $0xfe7
f012af88:	68 5a 97 13 f0       	push   $0xf013975a
f012af8d:	e8 1e 52 fd ff       	call   f01001b0 <_panic>
			panic(
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012af92:	81 45 e0 00 00 40 00 	addl   $0x400000,-0x20(%ebp)
f012af99:	83 55 e4 00          	adcl   $0x0,-0x1c(%ebp)
f012af9d:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012afa1:	78 b2                	js     f012af55 <test_krealloc+0x10b0>
f012afa3:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012afa7:	7f 09                	jg     f012afb2 <test_krealloc+0x110d>
f012afa9:	81 7d e0 ff ef ff ff 	cmpl   $0xffffefff,-0x20(%ebp)
f012afb0:	76 a3                	jbe    f012af55 <test_krealloc+0x10b0>
							"Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
				}
			}
		}
	}
	cprintf("\b\b\b20%");
f012afb2:	83 ec 0c             	sub    $0xc,%esp
f012afb5:	68 a3 ac 13 f0       	push   $0xf013aca3
f012afba:	e8 72 5e fd ff       	call   f0100e31 <cprintf>
f012afbf:	83 c4 10             	add    $0x10,%esp
	//Check memory access after kfree by checking sum
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
f012afc2:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012afc8:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012afce:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012afd5:	eb 21                	jmp    f012aff8 <test_krealloc+0x1153>
			sums[0] += ptr[i];
f012afd7:	8b 95 08 fe ff ff    	mov    -0x1f8(%ebp),%edx
f012afdd:	8b 4d dc             	mov    -0x24(%ebp),%ecx
f012afe0:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012afe6:	01 c8                	add    %ecx,%eax
f012afe8:	8a 00                	mov    (%eax),%al
f012afea:	0f be c0             	movsbl %al,%eax
f012afed:	01 d0                	add    %edx,%eax
f012afef:	89 85 08 fe ff ff    	mov    %eax,-0x1f8(%ebp)
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012aff5:	ff 45 dc             	incl   -0x24(%ebp)
f012aff8:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012affe:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012b001:	7d d4                	jge    f012afd7 <test_krealloc+0x1132>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012b003:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012b009:	8b 95 5c fe ff ff    	mov    -0x1a4(%ebp),%edx
f012b00f:	42                   	inc    %edx
f012b010:	01 d2                	add    %edx,%edx
f012b012:	39 d0                	cmp    %edx,%eax
f012b014:	74 17                	je     f012b02d <test_krealloc+0x1188>
			panic("krealloc: invalid read after freeing some allocations");
f012b016:	83 ec 04             	sub    $0x4,%esp
f012b019:	68 ac ac 13 f0       	push   $0xf013acac
f012b01e:	68 f9 0f 00 00       	push   $0xff9
f012b023:	68 5a 97 13 f0       	push   $0xf013975a
f012b028:	e8 83 51 fd ff       	call   f01001b0 <_panic>

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];
f012b02d:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012b033:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)

		for (i = 0; i <= lastIndices[3]; ++i) {
f012b039:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012b040:	eb 25                	jmp    f012b067 <test_krealloc+0x11c2>
			sums[1] += intArr[i];
f012b042:	8b 95 0c fe ff ff    	mov    -0x1f4(%ebp),%edx
f012b048:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012b04b:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f012b052:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012b058:	01 c8                	add    %ecx,%eax
f012b05a:	8b 00                	mov    (%eax),%eax
f012b05c:	01 d0                	add    %edx,%eax
f012b05e:	89 85 0c fe ff ff    	mov    %eax,-0x1f4(%ebp)

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];

		for (i = 0; i <= lastIndices[3]; ++i) {
f012b064:	ff 45 dc             	incl   -0x24(%ebp)
f012b067:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012b06d:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012b070:	7d d0                	jge    f012b042 <test_krealloc+0x119d>
			sums[1] += intArr[i];
		}
		if (sums[1] != (lastIndices[3] + 1) * 4)
f012b072:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012b078:	8b 95 64 fe ff ff    	mov    -0x19c(%ebp),%edx
f012b07e:	42                   	inc    %edx
f012b07f:	c1 e2 02             	shl    $0x2,%edx
f012b082:	39 d0                	cmp    %edx,%eax
f012b084:	74 17                	je     f012b09d <test_krealloc+0x11f8>
			panic("krealloc: invalid read after freeing some allocations");
f012b086:	83 ec 04             	sub    $0x4,%esp
f012b089:	68 ac ac 13 f0       	push   $0xf013acac
f012b08e:	68 03 10 00 00       	push   $0x1003
f012b093:	68 5a 97 13 f0       	push   $0xf013975a
f012b098:	e8 13 51 fd ff       	call   f01001b0 <_panic>

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];
f012b09d:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012b0a3:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)

		for (i = 0; i <= lastIndices[4]; ++i) {
f012b0a9:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012b0b0:	eb 24                	jmp    f012b0d6 <test_krealloc+0x1231>
			sums[2] += shortArr[i];
f012b0b2:	8b 95 10 fe ff ff    	mov    -0x1f0(%ebp),%edx
f012b0b8:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012b0bb:	01 c0                	add    %eax,%eax
f012b0bd:	89 c1                	mov    %eax,%ecx
f012b0bf:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012b0c5:	01 c8                	add    %ecx,%eax
f012b0c7:	66 8b 00             	mov    (%eax),%ax
f012b0ca:	98                   	cwtl   
f012b0cb:	01 d0                	add    %edx,%eax
f012b0cd:	89 85 10 fe ff ff    	mov    %eax,-0x1f0(%ebp)

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];

		for (i = 0; i <= lastIndices[4]; ++i) {
f012b0d3:	ff 45 dc             	incl   -0x24(%ebp)
f012b0d6:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012b0dc:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012b0df:	7d d1                	jge    f012b0b2 <test_krealloc+0x120d>
			sums[2] += shortArr[i];
		}
		if (sums[2] != (lastIndices[4] + 1) * 5)
f012b0e1:	8b 95 10 fe ff ff    	mov    -0x1f0(%ebp),%edx
f012b0e7:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012b0ed:	8d 48 01             	lea    0x1(%eax),%ecx
f012b0f0:	89 c8                	mov    %ecx,%eax
f012b0f2:	c1 e0 02             	shl    $0x2,%eax
f012b0f5:	01 c8                	add    %ecx,%eax
f012b0f7:	39 c2                	cmp    %eax,%edx
f012b0f9:	74 17                	je     f012b112 <test_krealloc+0x126d>
			panic("krealloc: invalid read after freeing some allocations");
f012b0fb:	83 ec 04             	sub    $0x4,%esp
f012b0fe:	68 ac ac 13 f0       	push   $0xf013acac
f012b103:	68 0d 10 00 00       	push   $0x100d
f012b108:	68 5a 97 13 f0       	push   $0xf013975a
f012b10d:	e8 9e 50 fd ff       	call   f01001b0 <_panic>

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];
f012b112:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012b118:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)

		for (i = 0; i <= lastIndices[6]; ++i) {
f012b11e:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012b125:	eb 70                	jmp    f012b197 <test_krealloc+0x12f2>
			sums[3] += structArr[i].a;
f012b127:	8b 95 14 fe ff ff    	mov    -0x1ec(%ebp),%edx
f012b12d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012b130:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012b137:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012b13d:	01 c8                	add    %ecx,%eax
f012b13f:	8a 00                	mov    (%eax),%al
f012b141:	0f be c0             	movsbl %al,%eax
f012b144:	01 d0                	add    %edx,%eax
f012b146:	89 85 14 fe ff ff    	mov    %eax,-0x1ec(%ebp)
			sums[4] += structArr[i].b;
f012b14c:	8b 95 18 fe ff ff    	mov    -0x1e8(%ebp),%edx
f012b152:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012b155:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012b15c:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012b162:	01 c8                	add    %ecx,%eax
f012b164:	66 8b 40 02          	mov    0x2(%eax),%ax
f012b168:	98                   	cwtl   
f012b169:	01 d0                	add    %edx,%eax
f012b16b:	89 85 18 fe ff ff    	mov    %eax,-0x1e8(%ebp)
			sums[5] += structArr[i].c;
f012b171:	8b 95 1c fe ff ff    	mov    -0x1e4(%ebp),%edx
f012b177:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012b17a:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012b181:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012b187:	01 c8                	add    %ecx,%eax
f012b189:	8b 40 04             	mov    0x4(%eax),%eax
f012b18c:	01 d0                	add    %edx,%eax
f012b18e:	89 85 1c fe ff ff    	mov    %eax,-0x1e4(%ebp)

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];

		for (i = 0; i <= lastIndices[6]; ++i) {
f012b194:	ff 45 dc             	incl   -0x24(%ebp)
f012b197:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012b19d:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012b1a0:	7d 85                	jge    f012b127 <test_krealloc+0x1282>
			sums[3] += structArr[i].a;
			sums[4] += structArr[i].b;
			sums[5] += structArr[i].c;
		}
		if (sums[3] != (lastIndices[6] + 1) * 7
f012b1a2:	8b 8d 14 fe ff ff    	mov    -0x1ec(%ebp),%ecx
f012b1a8:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012b1ae:	8d 50 01             	lea    0x1(%eax),%edx
f012b1b1:	89 d0                	mov    %edx,%eax
f012b1b3:	01 c0                	add    %eax,%eax
f012b1b5:	01 d0                	add    %edx,%eax
f012b1b7:	01 c0                	add    %eax,%eax
f012b1b9:	01 d0                	add    %edx,%eax
f012b1bb:	39 c1                	cmp    %eax,%ecx
f012b1bd:	75 3a                	jne    f012b1f9 <test_krealloc+0x1354>
				|| sums[4] != (lastIndices[6] + 1) * 7
f012b1bf:	8b 8d 18 fe ff ff    	mov    -0x1e8(%ebp),%ecx
f012b1c5:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012b1cb:	8d 50 01             	lea    0x1(%eax),%edx
f012b1ce:	89 d0                	mov    %edx,%eax
f012b1d0:	01 c0                	add    %eax,%eax
f012b1d2:	01 d0                	add    %edx,%eax
f012b1d4:	01 c0                	add    %eax,%eax
f012b1d6:	01 d0                	add    %edx,%eax
f012b1d8:	39 c1                	cmp    %eax,%ecx
f012b1da:	75 1d                	jne    f012b1f9 <test_krealloc+0x1354>
				|| sums[5] != (lastIndices[6] + 1) * 7)
f012b1dc:	8b 8d 1c fe ff ff    	mov    -0x1e4(%ebp),%ecx
f012b1e2:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012b1e8:	8d 50 01             	lea    0x1(%eax),%edx
f012b1eb:	89 d0                	mov    %edx,%eax
f012b1ed:	01 c0                	add    %eax,%eax
f012b1ef:	01 d0                	add    %edx,%eax
f012b1f1:	01 c0                	add    %eax,%eax
f012b1f3:	01 d0                	add    %edx,%eax
f012b1f5:	39 c1                	cmp    %eax,%ecx
f012b1f7:	74 17                	je     f012b210 <test_krealloc+0x136b>
			panic("krealloc: invalid read after freeing some allocations");
f012b1f9:	83 ec 04             	sub    $0x4,%esp
f012b1fc:	68 ac ac 13 f0       	push   $0xf013acac
f012b201:	68 1b 10 00 00       	push   $0x101b
f012b206:	68 5a 97 13 f0       	push   $0xf013975a
f012b20b:	e8 a0 4f fd ff       	call   f01001b0 <_panic>
	}

	//[4] Test krealloc reallocation with valid and invalid sizes
	{
		int freeDiskFrames;
		void* newAddress = NULL;
f012b210:	c7 85 18 ff ff ff 00 	movl   $0x0,-0xe8(%ebp)
f012b217:	00 00 00 
		//Try to reallocate 2nd 1 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012b21a:	e8 a7 17 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012b21f:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 15 * kilo);
f012b222:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012b228:	83 ec 08             	sub    $0x8,%esp
f012b22b:	68 00 3c 00 00       	push   $0x3c00
f012b230:	50                   	push   %eax
f012b231:	e8 df cd fd ff       	call   f0108015 <krealloc>
f012b236:	83 c4 10             	add    $0x10,%esp
f012b239:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012b23f:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012b245:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012b24a:	77 17                	ja     f012b263 <test_krealloc+0x13be>
			panic("krealloc: Wrong start address for the allocated space... ");
f012b24c:	83 ec 04             	sub    $0x4,%esp
f012b24f:	68 00 aa 13 f0       	push   $0xf013aa00
f012b254:	68 27 10 00 00       	push   $0x1027
f012b259:	68 5a 97 13 f0       	push   $0xf013975a
f012b25e:	e8 4d 4f fd ff       	call   f01001b0 <_panic>
		if (newAddress != ptr_allocations[1])
f012b263:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012b269:	3b 85 18 ff ff ff    	cmp    -0xe8(%ebp),%eax
f012b26f:	74 17                	je     f012b288 <test_krealloc+0x13e3>
			panic(
f012b271:	83 ec 04             	sub    $0x4,%esp
f012b274:	68 e4 ac 13 f0       	push   $0xf013ace4
f012b279:	68 2a 10 00 00       	push   $0x102a
f012b27e:	68 5a 97 13 f0       	push   $0xf013975a
f012b283:	e8 28 4f fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012b288:	e8 39 17 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012b28d:	89 c2                	mov    %eax,%edx
f012b28f:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012b292:	39 c2                	cmp    %eax,%edx
f012b294:	74 17                	je     f012b2ad <test_krealloc+0x1408>
			panic(
f012b296:	83 ec 04             	sub    $0x4,%esp
f012b299:	68 50 ad 13 f0       	push   $0xf013ad50
f012b29e:	68 2d 10 00 00       	push   $0x102d
f012b2a3:	68 5a 97 13 f0       	push   $0xf013975a
f012b2a8:	e8 03 4f fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 1st 2 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012b2ad:	e8 14 17 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012b2b2:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], 1 * Mega - kilo);
f012b2b5:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012b2bb:	83 ec 08             	sub    $0x8,%esp
f012b2be:	68 00 fc 0f 00       	push   $0xffc00
f012b2c3:	50                   	push   %eax
f012b2c4:	e8 4c cd fd ff       	call   f0108015 <krealloc>
f012b2c9:	83 c4 10             	add    $0x10,%esp
f012b2cc:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012b2d2:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012b2d8:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012b2dd:	77 17                	ja     f012b2f6 <test_krealloc+0x1451>
			panic("krealloc: Wrong start address for the allocated space... ");
f012b2df:	83 ec 04             	sub    $0x4,%esp
f012b2e2:	68 00 aa 13 f0       	push   $0xf013aa00
f012b2e7:	68 33 10 00 00       	push   $0x1033
f012b2ec:	68 5a 97 13 f0       	push   $0xf013975a
f012b2f1:	e8 ba 4e fd ff       	call   f01001b0 <_panic>
		if (newAddress != ptr_allocations[4])
f012b2f6:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012b2fc:	3b 85 18 ff ff ff    	cmp    -0xe8(%ebp),%eax
f012b302:	74 17                	je     f012b31b <test_krealloc+0x1476>
			panic(
f012b304:	83 ec 04             	sub    $0x4,%esp
f012b307:	68 e4 ac 13 f0       	push   $0xf013ace4
f012b30c:	68 36 10 00 00       	push   $0x1036
f012b311:	68 5a 97 13 f0       	push   $0xf013975a
f012b316:	e8 95 4e fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012b31b:	e8 a6 16 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012b320:	89 c2                	mov    %eax,%edx
f012b322:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012b325:	39 c2                	cmp    %eax,%edx
f012b327:	74 17                	je     f012b340 <test_krealloc+0x149b>
			panic(
f012b329:	83 ec 04             	sub    $0x4,%esp
f012b32c:	68 50 ad 13 f0       	push   $0xf013ad50
f012b331:	68 39 10 00 00       	push   $0x1039
f012b336:	68 5a 97 13 f0       	push   $0xf013975a
f012b33b:	e8 70 4e fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 2nd 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012b340:	e8 81 16 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012b345:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 1 * Mega - kilo);
f012b348:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012b34e:	83 ec 08             	sub    $0x8,%esp
f012b351:	68 00 fc 0f 00       	push   $0xffc00
f012b356:	50                   	push   %eax
f012b357:	e8 b9 cc fd ff       	call   f0108015 <krealloc>
f012b35c:	83 c4 10             	add    $0x10,%esp
f012b35f:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012b365:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012b36b:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012b370:	77 17                	ja     f012b389 <test_krealloc+0x14e4>
			panic("krealloc: Wrong start address for the allocated space... ");
f012b372:	83 ec 04             	sub    $0x4,%esp
f012b375:	68 00 aa 13 f0       	push   $0xf013aa00
f012b37a:	68 3f 10 00 00       	push   $0x103f
f012b37f:	68 5a 97 13 f0       	push   $0xf013975a
f012b384:	e8 27 4e fd ff       	call   f01001b0 <_panic>
		if (newAddress != ptr_allocations[1])
f012b389:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012b38f:	3b 85 18 ff ff ff    	cmp    -0xe8(%ebp),%eax
f012b395:	74 17                	je     f012b3ae <test_krealloc+0x1509>
			panic(
f012b397:	83 ec 04             	sub    $0x4,%esp
f012b39a:	68 e4 ac 13 f0       	push   $0xf013ace4
f012b39f:	68 42 10 00 00       	push   $0x1042
f012b3a4:	68 5a 97 13 f0       	push   $0xf013975a
f012b3a9:	e8 02 4e fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012b3ae:	e8 13 16 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012b3b3:	89 c2                	mov    %eax,%edx
f012b3b5:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012b3b8:	39 c2                	cmp    %eax,%edx
f012b3ba:	74 17                	je     f012b3d3 <test_krealloc+0x152e>
			panic(
f012b3bc:	83 ec 04             	sub    $0x4,%esp
f012b3bf:	68 50 ad 13 f0       	push   $0xf013ad50
f012b3c4:	68 45 10 00 00       	push   $0x1045
f012b3c9:	68 5a 97 13 f0       	push   $0xf013975a
f012b3ce:	e8 dd 4d fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");



		//Try to reallocate 4th 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012b3d3:	e8 ee 15 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012b3d8:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[3], 1 * Mega - kilo);
f012b3db:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012b3e1:	83 ec 08             	sub    $0x8,%esp
f012b3e4:	68 00 fc 0f 00       	push   $0xffc00
f012b3e9:	50                   	push   %eax
f012b3ea:	e8 26 cc fd ff       	call   f0108015 <krealloc>
f012b3ef:	83 c4 10             	add    $0x10,%esp
f012b3f2:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012b3f8:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012b3fe:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012b403:	77 17                	ja     f012b41c <test_krealloc+0x1577>
			panic("krealloc: Wrong start address for the allocated space... ");
f012b405:	83 ec 04             	sub    $0x4,%esp
f012b408:	68 00 aa 13 f0       	push   $0xf013aa00
f012b40d:	68 4d 10 00 00       	push   $0x104d
f012b412:	68 5a 97 13 f0       	push   $0xf013975a
f012b417:	e8 94 4d fd ff       	call   f01001b0 <_panic>
		if (newAddress != ptr_allocations[3])
f012b41c:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012b422:	3b 85 18 ff ff ff    	cmp    -0xe8(%ebp),%eax
f012b428:	74 17                	je     f012b441 <test_krealloc+0x159c>
			panic(
f012b42a:	83 ec 04             	sub    $0x4,%esp
f012b42d:	68 94 ad 13 f0       	push   $0xf013ad94
f012b432:	68 50 10 00 00       	push   $0x1050
f012b437:	68 5a 97 13 f0       	push   $0xf013975a
f012b43c:	e8 6f 4d fd ff       	call   f01001b0 <_panic>
					"Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012b441:	e8 80 15 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012b446:	89 c2                	mov    %eax,%edx
f012b448:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012b44b:	39 c2                	cmp    %eax,%edx
f012b44d:	74 17                	je     f012b466 <test_krealloc+0x15c1>
			panic(
f012b44f:	83 ec 04             	sub    $0x4,%esp
f012b452:	68 50 ad 13 f0       	push   $0xf013ad50
f012b457:	68 53 10 00 00       	push   $0x1053
f012b45c:	68 5a 97 13 f0       	push   $0xf013975a
f012b461:	e8 4a 4d fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");
	}
	cprintf("\b\b\b30%");
f012b466:	83 ec 0c             	sub    $0xc,%esp
f012b469:	68 73 9f 13 f0       	push   $0xf0139f73
f012b46e:	e8 be 59 fd ff       	call   f0100e31 <cprintf>
f012b473:	83 c4 10             	add    $0x10,%esp
    {
		//Reallocate 2nd 1 MB to 1 MB + 7 KB
		freeFrames = sys_calculate_free_frames();
f012b476:	e8 4b 15 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012b47b:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1],
f012b47e:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012b484:	83 ec 08             	sub    $0x8,%esp
f012b487:	68 00 18 10 00       	push   $0x101800
f012b48c:	50                   	push   %eax
f012b48d:	e8 83 cb fd ff       	call   f0108015 <krealloc>
f012b492:	83 c4 10             	add    $0x10,%esp
f012b495:	89 45 bc             	mov    %eax,-0x44(%ebp)
				(1 * Mega - kilo) + (7 * kilo));
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012b498:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012b49b:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012b4a0:	77 17                	ja     f012b4b9 <test_krealloc+0x1614>
			panic("krealloc: Wrong start address for the allocated space... ");
f012b4a2:	83 ec 04             	sub    $0x4,%esp
f012b4a5:	68 00 aa 13 f0       	push   $0xf013aa00
f012b4aa:	68 5c 10 00 00       	push   $0x105c
f012b4af:	68 5a 97 13 f0       	push   $0xf013975a
f012b4b4:	e8 f7 4c fd ff       	call   f01001b0 <_panic>
		if (newAddress != ptr_allocations[1])
f012b4b9:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012b4bf:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012b4c2:	74 17                	je     f012b4db <test_krealloc+0x1636>
			panic(
f012b4c4:	83 ec 04             	sub    $0x4,%esp
f012b4c7:	68 f4 ad 13 f0       	push   $0xf013adf4
f012b4cc:	68 5f 10 00 00       	push   $0x105f
f012b4d1:	68 5a 97 13 f0       	push   $0xf013975a
f012b4d6:	e8 d5 4c fd ff       	call   f01001b0 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		if (freeFrames - sys_calculate_free_frames() != 2)
f012b4db:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012b4de:	e8 e3 14 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012b4e3:	29 c3                	sub    %eax,%ebx
f012b4e5:	89 d8                	mov    %ebx,%eax
f012b4e7:	83 f8 02             	cmp    $0x2,%eax
f012b4ea:	74 17                	je     f012b503 <test_krealloc+0x165e>
			panic("krealloc: pages in memory are not loaded correctly");
f012b4ec:	83 ec 04             	sub    $0x4,%esp
f012b4ef:	68 70 ae 13 f0       	push   $0xf013ae70
f012b4f4:	68 61 10 00 00       	push   $0x1061
f012b4f9:	68 5a 97 13 f0       	push   $0xf013975a
f012b4fe:	e8 ad 4c fd ff       	call   f01001b0 <_panic>

		//Reallocate 1st 2 MB to 2 MB + 2 MB
		freeFrames = sys_calculate_free_frames();
f012b503:	e8 be 14 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012b508:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (4 * Mega - kilo));
f012b50b:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012b511:	83 ec 08             	sub    $0x8,%esp
f012b514:	68 00 fc 3f 00       	push   $0x3ffc00
f012b519:	50                   	push   %eax
f012b51a:	e8 f6 ca fd ff       	call   f0108015 <krealloc>
f012b51f:	83 c4 10             	add    $0x10,%esp
f012b522:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012b525:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012b528:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012b52d:	77 17                	ja     f012b546 <test_krealloc+0x16a1>
			panic("krealloc: Wrong start address for the allocated space... ");
f012b52f:	83 ec 04             	sub    $0x4,%esp
f012b532:	68 00 aa 13 f0       	push   $0xf013aa00
f012b537:	68 67 10 00 00       	push   $0x1067
f012b53c:	68 5a 97 13 f0       	push   $0xf013975a
f012b541:	e8 6a 4c fd ff       	call   f01001b0 <_panic>
		if (newAddress != ptr_allocations[4])
f012b546:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012b54c:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012b54f:	74 17                	je     f012b568 <test_krealloc+0x16c3>
			panic(
f012b551:	83 ec 04             	sub    $0x4,%esp
f012b554:	68 f4 ad 13 f0       	push   $0xf013adf4
f012b559:	68 6a 10 00 00       	push   $0x106a
f012b55e:	68 5a 97 13 f0       	push   $0xf013975a
f012b563:	e8 48 4c fd ff       	call   f01001b0 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		//2 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 512)
f012b568:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012b56b:	e8 56 14 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012b570:	29 c3                	sub    %eax,%ebx
f012b572:	89 d8                	mov    %ebx,%eax
f012b574:	3d 00 02 00 00       	cmp    $0x200,%eax
f012b579:	74 17                	je     f012b592 <test_krealloc+0x16ed>
			panic("krealloc: pages in memory are not loaded correctly");
f012b57b:	83 ec 04             	sub    $0x4,%esp
f012b57e:	68 70 ae 13 f0       	push   $0xf013ae70
f012b583:	68 6d 10 00 00       	push   $0x106d
f012b588:	68 5a 97 13 f0       	push   $0xf013975a
f012b58d:	e8 1e 4c fd ff       	call   f01001b0 <_panic>


	}
	cprintf("\b\b\b60%");
f012b592:	83 ec 0c             	sub    $0xc,%esp
f012b595:	68 b8 9f 13 f0       	push   $0xf0139fb8
f012b59a:	e8 92 58 fd ff       	call   f0100e31 <cprintf>
f012b59f:	83 c4 10             	add    $0x10,%esp
	//Test krealloc: Cut & paste
	{
		//Reallocate 1st 2 MB (already reallocated to 4 MB) to 10 MB. It should return new VA
		freeFrames = sys_calculate_free_frames();
f012b5a2:	e8 1f 14 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012b5a7:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (10 * Mega - kilo));
f012b5aa:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012b5b0:	83 ec 08             	sub    $0x8,%esp
f012b5b3:	68 00 fc 9f 00       	push   $0x9ffc00
f012b5b8:	50                   	push   %eax
f012b5b9:	e8 57 ca fd ff       	call   f0108015 <krealloc>
f012b5be:	83 c4 10             	add    $0x10,%esp
f012b5c1:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012b5c4:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012b5c7:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012b5cc:	77 17                	ja     f012b5e5 <test_krealloc+0x1740>
			panic("krealloc: Wrong start address for the allocated space... ");
f012b5ce:	83 ec 04             	sub    $0x4,%esp
f012b5d1:	68 00 aa 13 f0       	push   $0xf013aa00
f012b5d6:	68 78 10 00 00       	push   $0x1078
f012b5db:	68 5a 97 13 f0       	push   $0xf013975a
f012b5e0:	e8 cb 4b fd ff       	call   f01001b0 <_panic>
		if ((uint32) newAddress != ACTUAL_START + (14 * Mega))
f012b5e5:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f012b5ec:	10 00 00 
f012b5ef:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012b5f4:	0f b6 d0             	movzbl %al,%edx
f012b5f7:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012b5fd:	01 d0                	add    %edx,%eax
f012b5ff:	48                   	dec    %eax
f012b600:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f012b606:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012b60c:	ba 00 00 00 00       	mov    $0x0,%edx
f012b611:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f012b617:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012b61d:	29 d0                	sub    %edx,%eax
f012b61f:	89 c1                	mov    %eax,%ecx
f012b621:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f012b628:	10 00 00 
f012b62b:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012b630:	0f b6 c0             	movzbl %al,%eax
f012b633:	c1 e0 04             	shl    $0x4,%eax
f012b636:	89 c2                	mov    %eax,%edx
f012b638:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012b63e:	01 d0                	add    %edx,%eax
f012b640:	48                   	dec    %eax
f012b641:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f012b647:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012b64d:	ba 00 00 00 00       	mov    $0x0,%edx
f012b652:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f012b658:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012b65e:	29 d0                	sub    %edx,%eax
f012b660:	01 c8                	add    %ecx,%eax
f012b662:	8d 90 00 40 e0 f6    	lea    -0x91fc000(%eax),%edx
f012b668:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012b66b:	39 c2                	cmp    %eax,%edx
f012b66d:	74 18                	je     f012b687 <test_krealloc+0x17e2>
			panic(
f012b66f:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012b672:	50                   	push   %eax
f012b673:	68 a4 ae 13 f0       	push   $0xf013aea4
f012b678:	68 7c 10 00 00       	push   $0x107c
f012b67d:	68 5a 97 13 f0       	push   $0xf013975a
f012b682:	e8 29 4b fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong start address for reallocated space, NSA = %x\nbbb",
					(uint32 )newAddress);
		if (newAddress == ptr_allocations[4])
f012b687:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012b68d:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012b690:	75 17                	jne    f012b6a9 <test_krealloc+0x1804>
			panic(
f012b692:	83 ec 04             	sub    $0x4,%esp
f012b695:	68 e8 ae 13 f0       	push   $0xf013aee8
f012b69a:	68 7f 10 00 00       	push   $0x107f
f012b69f:	68 5a 97 13 f0       	push   $0xf013975a
f012b6a4:	e8 07 4b fd ff       	call   f01001b0 <_panic>
					"Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
		//6 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 1536)
f012b6a9:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012b6ac:	e8 15 13 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012b6b1:	29 c3                	sub    %eax,%ebx
f012b6b3:	89 d8                	mov    %ebx,%eax
f012b6b5:	3d 00 06 00 00       	cmp    $0x600,%eax
f012b6ba:	74 17                	je     f012b6d3 <test_krealloc+0x182e>
			panic("krealloc: pages in memory are not loaded correctly");
f012b6bc:	83 ec 04             	sub    $0x4,%esp
f012b6bf:	68 70 ae 13 f0       	push   $0xf013ae70
f012b6c4:	68 82 10 00 00       	push   $0x1082
f012b6c9:	68 5a 97 13 f0       	push   $0xf013975a
f012b6ce:	e8 dd 4a fd ff       	call   f01001b0 <_panic>

		ptr_allocations[4] = newAddress;
f012b6d3:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012b6d6:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
		//lastIndices[4] = (10 * Mega - kilo) / sizeof(short) - 1;

		//Reallocate 1st 3 MB to 6 MB
		freeFrames = sys_calculate_free_frames();
f012b6dc:	e8 e5 12 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012b6e1:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (6 * Mega - kilo));
f012b6e4:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012b6ea:	83 ec 08             	sub    $0x8,%esp
f012b6ed:	68 00 fc 5f 00       	push   $0x5ffc00
f012b6f2:	50                   	push   %eax
f012b6f3:	e8 1d c9 fd ff       	call   f0108015 <krealloc>
f012b6f8:	83 c4 10             	add    $0x10,%esp
f012b6fb:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012b6fe:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012b701:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012b706:	77 17                	ja     f012b71f <test_krealloc+0x187a>
			panic("krealloc: Wrong start address for the allocated space... ");
f012b708:	83 ec 04             	sub    $0x4,%esp
f012b70b:	68 00 aa 13 f0       	push   $0xf013aa00
f012b710:	68 8b 10 00 00       	push   $0x108b
f012b715:	68 5a 97 13 f0       	push   $0xf013975a
f012b71a:	e8 91 4a fd ff       	call   f01001b0 <_panic>
		if (newAddress != ptr_allocations[6])
f012b71f:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012b725:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012b728:	74 17                	je     f012b741 <test_krealloc+0x189c>
			panic(
f012b72a:	83 ec 04             	sub    $0x4,%esp
f012b72d:	68 f4 ad 13 f0       	push   $0xf013adf4
f012b732:	68 8e 10 00 00       	push   $0x108e
f012b737:	68 5a 97 13 f0       	push   $0xf013975a
f012b73c:	e8 6f 4a fd ff       	call   f01001b0 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		//3 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 768)
f012b741:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012b744:	e8 7d 12 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012b749:	29 c3                	sub    %eax,%ebx
f012b74b:	89 d8                	mov    %ebx,%eax
f012b74d:	3d 00 03 00 00       	cmp    $0x300,%eax
f012b752:	74 17                	je     f012b76b <test_krealloc+0x18c6>
			panic("krealloc: pages in memory are not loaded correctly");
f012b754:	83 ec 04             	sub    $0x4,%esp
f012b757:	68 70 ae 13 f0       	push   $0xf013ae70
f012b75c:	68 91 10 00 00       	push   $0x1091
f012b761:	68 5a 97 13 f0       	push   $0xf013975a
f012b766:	e8 45 4a fd ff       	call   f01001b0 <_panic>

		//Reallocate 1st 3 MB (already reallocated to 6 MB) to 20 MB. It should return new VA

		freeFrames = sys_calculate_free_frames();
f012b76b:	e8 56 12 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012b770:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (20 * Mega - kilo));
f012b773:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012b779:	83 ec 08             	sub    $0x8,%esp
f012b77c:	68 00 fc 3f 01       	push   $0x13ffc00
f012b781:	50                   	push   %eax
f012b782:	e8 8e c8 fd ff       	call   f0108015 <krealloc>
f012b787:	83 c4 10             	add    $0x10,%esp
f012b78a:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012b78d:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012b790:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012b795:	77 17                	ja     f012b7ae <test_krealloc+0x1909>
			panic("krealloc: Wrong start address for the allocated space... ");
f012b797:	83 ec 04             	sub    $0x4,%esp
f012b79a:	68 00 aa 13 f0       	push   $0xf013aa00
f012b79f:	68 98 10 00 00       	push   $0x1098
f012b7a4:	68 5a 97 13 f0       	push   $0xf013975a
f012b7a9:	e8 02 4a fd ff       	call   f01001b0 <_panic>
		if (newAddress == ptr_allocations[6])
f012b7ae:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012b7b4:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012b7b7:	75 17                	jne    f012b7d0 <test_krealloc+0x192b>
			panic(
f012b7b9:	83 ec 04             	sub    $0x4,%esp
f012b7bc:	68 e8 ae 13 f0       	push   $0xf013aee8
f012b7c1:	68 9b 10 00 00       	push   $0x109b
f012b7c6:	68 5a 97 13 f0       	push   $0xf013975a
f012b7cb:	e8 e0 49 fd ff       	call   f01001b0 <_panic>
					"Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
		if ((uint32) newAddress != ACTUAL_START + (24 * Mega))
f012b7d0:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f012b7d7:	10 00 00 
f012b7da:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012b7df:	0f b6 d0             	movzbl %al,%edx
f012b7e2:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012b7e8:	01 d0                	add    %edx,%eax
f012b7ea:	48                   	dec    %eax
f012b7eb:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f012b7f1:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012b7f7:	ba 00 00 00 00       	mov    $0x0,%edx
f012b7fc:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f012b802:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012b808:	29 d0                	sub    %edx,%eax
f012b80a:	89 c1                	mov    %eax,%ecx
f012b80c:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f012b813:	10 00 00 
f012b816:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012b81b:	0f b6 c0             	movzbl %al,%eax
f012b81e:	c1 e0 04             	shl    $0x4,%eax
f012b821:	89 c2                	mov    %eax,%edx
f012b823:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012b829:	01 d0                	add    %edx,%eax
f012b82b:	48                   	dec    %eax
f012b82c:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f012b832:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012b838:	ba 00 00 00 00       	mov    $0x0,%edx
f012b83d:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f012b843:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012b849:	29 d0                	sub    %edx,%eax
f012b84b:	01 c8                	add    %ecx,%eax
f012b84d:	8d 90 00 40 80 f7    	lea    -0x87fc000(%eax),%edx
f012b853:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012b856:	39 c2                	cmp    %eax,%edx
f012b858:	74 17                	je     f012b871 <test_krealloc+0x19cc>
			panic("krealloc: Wrong start address for reallocated space");
f012b85a:	83 ec 04             	sub    $0x4,%esp
f012b85d:	68 6c af 13 f0       	push   $0xf013af6c
f012b862:	68 9d 10 00 00       	push   $0x109d
f012b867:	68 5a 97 13 f0       	push   $0xf013975a
f012b86c:	e8 3f 49 fd ff       	call   f01001b0 <_panic>
		//3 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 3584)
f012b871:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012b874:	e8 4d 11 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012b879:	29 c3                	sub    %eax,%ebx
f012b87b:	89 d8                	mov    %ebx,%eax
f012b87d:	3d 00 0e 00 00       	cmp    $0xe00,%eax
f012b882:	74 17                	je     f012b89b <test_krealloc+0x19f6>
			panic("krealloc: pages in memory are not loaded correctly");
f012b884:	83 ec 04             	sub    $0x4,%esp
f012b887:	68 70 ae 13 f0       	push   $0xf013ae70
f012b88c:	68 a0 10 00 00       	push   $0x10a0
f012b891:	68 5a 97 13 f0       	push   $0xf013975a
f012b896:	e8 15 49 fd ff       	call   f01001b0 <_panic>

		ptr_allocations[6] = newAddress;
f012b89b:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012b89e:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f012b8a4:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012b8aa:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
		int i;
		sums[0] = 0;
f012b8b0:	c7 85 08 fe ff ff 00 	movl   $0x0,-0x1f8(%ebp)
f012b8b7:	00 00 00 
		for (i = 0; i <= lastIndices[1]; ++i) {
f012b8ba:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012b8c1:	eb 21                	jmp    f012b8e4 <test_krealloc+0x1a3f>
			sums[0] += ptr[i];
f012b8c3:	8b 95 08 fe ff ff    	mov    -0x1f8(%ebp),%edx
f012b8c9:	8b 4d d8             	mov    -0x28(%ebp),%ecx
f012b8cc:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012b8d2:	01 c8                	add    %ecx,%eax
f012b8d4:	8a 00                	mov    (%eax),%al
f012b8d6:	0f be c0             	movsbl %al,%eax
f012b8d9:	01 d0                	add    %edx,%eax
f012b8db:	89 85 08 fe ff ff    	mov    %eax,-0x1f8(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		int i;
		sums[0] = 0;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012b8e1:	ff 45 d8             	incl   -0x28(%ebp)
f012b8e4:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012b8ea:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012b8ed:	7d d4                	jge    f012b8c3 <test_krealloc+0x1a1e>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012b8ef:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012b8f5:	8b 95 5c fe ff ff    	mov    -0x1a4(%ebp),%edx
f012b8fb:	42                   	inc    %edx
f012b8fc:	01 d2                	add    %edx,%edx
f012b8fe:	39 d0                	cmp    %edx,%eax
f012b900:	74 17                	je     f012b919 <test_krealloc+0x1a74>
			panic("krealloc: invalid read after re-allocations");
f012b902:	83 ec 04             	sub    $0x4,%esp
f012b905:	68 a0 af 13 f0       	push   $0xf013afa0
f012b90a:	68 ae 10 00 00       	push   $0x10ae
f012b90f:	68 5a 97 13 f0       	push   $0xf013975a
f012b914:	e8 97 48 fd ff       	call   f01001b0 <_panic>

		//Test read write access for the new allocated size of 1st 3 MB
		structArr = (struct MyStruct*) ptr_allocations[6];
f012b919:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012b91f:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)

		sums[0] = 0;
f012b925:	c7 85 08 fe ff ff 00 	movl   $0x0,-0x1f8(%ebp)
f012b92c:	00 00 00 
		sums[1] = 0;
f012b92f:	c7 85 0c fe ff ff 00 	movl   $0x0,-0x1f4(%ebp)
f012b936:	00 00 00 
		sums[2] = 0;
f012b939:	c7 85 10 fe ff ff 00 	movl   $0x0,-0x1f0(%ebp)
f012b940:	00 00 00 
		for (i = 0; i <= lastIndices[6]; ++i) {
f012b943:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012b94a:	eb 70                	jmp    f012b9bc <test_krealloc+0x1b17>
			sums[0] += structArr[i].a;
f012b94c:	8b 95 08 fe ff ff    	mov    -0x1f8(%ebp),%edx
f012b952:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012b955:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012b95c:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012b962:	01 c8                	add    %ecx,%eax
f012b964:	8a 00                	mov    (%eax),%al
f012b966:	0f be c0             	movsbl %al,%eax
f012b969:	01 d0                	add    %edx,%eax
f012b96b:	89 85 08 fe ff ff    	mov    %eax,-0x1f8(%ebp)
			sums[1] += structArr[i].b;
f012b971:	8b 95 0c fe ff ff    	mov    -0x1f4(%ebp),%edx
f012b977:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012b97a:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012b981:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012b987:	01 c8                	add    %ecx,%eax
f012b989:	66 8b 40 02          	mov    0x2(%eax),%ax
f012b98d:	98                   	cwtl   
f012b98e:	01 d0                	add    %edx,%eax
f012b990:	89 85 0c fe ff ff    	mov    %eax,-0x1f4(%ebp)
			sums[2] += structArr[i].c;
f012b996:	8b 95 10 fe ff ff    	mov    -0x1f0(%ebp),%edx
f012b99c:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012b99f:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012b9a6:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012b9ac:	01 c8                	add    %ecx,%eax
f012b9ae:	8b 40 04             	mov    0x4(%eax),%eax
f012b9b1:	01 d0                	add    %edx,%eax
f012b9b3:	89 85 10 fe ff ff    	mov    %eax,-0x1f0(%ebp)
		structArr = (struct MyStruct*) ptr_allocations[6];

		sums[0] = 0;
		sums[1] = 0;
		sums[2] = 0;
		for (i = 0; i <= lastIndices[6]; ++i) {
f012b9b9:	ff 45 d8             	incl   -0x28(%ebp)
f012b9bc:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012b9c2:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012b9c5:	7d 85                	jge    f012b94c <test_krealloc+0x1aa7>
			sums[1] += structArr[i].b;
			sums[2] += structArr[i].c;

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[6] + 1) * 7
f012b9c7:	8b 8d 08 fe ff ff    	mov    -0x1f8(%ebp),%ecx
f012b9cd:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012b9d3:	8d 50 01             	lea    0x1(%eax),%edx
f012b9d6:	89 d0                	mov    %edx,%eax
f012b9d8:	01 c0                	add    %eax,%eax
f012b9da:	01 d0                	add    %edx,%eax
f012b9dc:	01 c0                	add    %eax,%eax
f012b9de:	01 d0                	add    %edx,%eax
f012b9e0:	39 c1                	cmp    %eax,%ecx
f012b9e2:	75 3a                	jne    f012ba1e <test_krealloc+0x1b79>
				|| sums[1] != (lastIndices[6] + 1) * 7
f012b9e4:	8b 8d 0c fe ff ff    	mov    -0x1f4(%ebp),%ecx
f012b9ea:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012b9f0:	8d 50 01             	lea    0x1(%eax),%edx
f012b9f3:	89 d0                	mov    %edx,%eax
f012b9f5:	01 c0                	add    %eax,%eax
f012b9f7:	01 d0                	add    %edx,%eax
f012b9f9:	01 c0                	add    %eax,%eax
f012b9fb:	01 d0                	add    %edx,%eax
f012b9fd:	39 c1                	cmp    %eax,%ecx
f012b9ff:	75 1d                	jne    f012ba1e <test_krealloc+0x1b79>
				|| sums[2] != (lastIndices[6] + 1) * 7)
f012ba01:	8b 8d 10 fe ff ff    	mov    -0x1f0(%ebp),%ecx
f012ba07:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012ba0d:	8d 50 01             	lea    0x1(%eax),%edx
f012ba10:	89 d0                	mov    %edx,%eax
f012ba12:	01 c0                	add    %eax,%eax
f012ba14:	01 d0                	add    %edx,%eax
f012ba16:	01 c0                	add    %eax,%eax
f012ba18:	01 d0                	add    %edx,%eax
f012ba1a:	39 c1                	cmp    %eax,%ecx
f012ba1c:	74 17                	je     f012ba35 <test_krealloc+0x1b90>
			panic("krealloc: invalid read after re-allocations");
f012ba1e:	83 ec 04             	sub    $0x4,%esp
f012ba21:	68 a0 af 13 f0       	push   $0xf013afa0
f012ba26:	68 c0 10 00 00       	push   $0x10c0
f012ba2b:	68 5a 97 13 f0       	push   $0xf013975a
f012ba30:	e8 7b 47 fd ff       	call   f01001b0 <_panic>

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f012ba35:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012ba3b:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)

		sums[0] = 0;
f012ba41:	c7 85 08 fe ff ff 00 	movl   $0x0,-0x1f8(%ebp)
f012ba48:	00 00 00 
		for (i = 0; i <= lastIndices[4]; ++i) {
f012ba4b:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012ba52:	eb 24                	jmp    f012ba78 <test_krealloc+0x1bd3>
			sums[0] += shortArr[i];
f012ba54:	8b 95 08 fe ff ff    	mov    -0x1f8(%ebp),%edx
f012ba5a:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012ba5d:	01 c0                	add    %eax,%eax
f012ba5f:	89 c1                	mov    %eax,%ecx
f012ba61:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012ba67:	01 c8                	add    %ecx,%eax
f012ba69:	66 8b 00             	mov    (%eax),%ax
f012ba6c:	98                   	cwtl   
f012ba6d:	01 d0                	add    %edx,%eax
f012ba6f:	89 85 08 fe ff ff    	mov    %eax,-0x1f8(%ebp)

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];

		sums[0] = 0;
		for (i = 0; i <= lastIndices[4]; ++i) {
f012ba75:	ff 45 d8             	incl   -0x28(%ebp)
f012ba78:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012ba7e:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012ba81:	7d d1                	jge    f012ba54 <test_krealloc+0x1baf>
			sums[0] += shortArr[i];
		}
		if (sums[0] != (lastIndices[4] + 1) * 5)
f012ba83:	8b 95 08 fe ff ff    	mov    -0x1f8(%ebp),%edx
f012ba89:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012ba8f:	8d 48 01             	lea    0x1(%eax),%ecx
f012ba92:	89 c8                	mov    %ecx,%eax
f012ba94:	c1 e0 02             	shl    $0x2,%eax
f012ba97:	01 c8                	add    %ecx,%eax
f012ba99:	39 c2                	cmp    %eax,%edx
f012ba9b:	74 17                	je     f012bab4 <test_krealloc+0x1c0f>
			panic("krealloc: invalid read after re-allocations");
f012ba9d:	83 ec 04             	sub    $0x4,%esp
f012baa0:	68 a0 af 13 f0       	push   $0xf013afa0
f012baa5:	68 ca 10 00 00       	push   $0x10ca
f012baaa:	68 5a 97 13 f0       	push   $0xf013975a
f012baaf:	e8 fc 46 fd ff       	call   f01001b0 <_panic>

		//Test krealloc with size = 0 after krealloc 1st 3 MB to 20 MB
		freeFrames = sys_calculate_free_frames();
f012bab4:	e8 0d 0f fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012bab9:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012babc:	e8 c3 8b fd ff       	call   f0104684 <pf_calculate_free_frames>
f012bac1:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
		krealloc(ptr_allocations[6], 0);
f012bac7:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012bacd:	83 ec 08             	sub    $0x8,%esp
f012bad0:	6a 00                	push   $0x0
f012bad2:	50                   	push   %eax
f012bad3:	e8 3d c5 fd ff       	call   f0108015 <krealloc>
f012bad8:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012badb:	e8 a4 8b fd ff       	call   f0104684 <pf_calculate_free_frames>
f012bae0:	3b 85 1c ff ff ff    	cmp    -0xe4(%ebp),%eax
f012bae6:	74 17                	je     f012baff <test_krealloc+0x1c5a>
			panic(
f012bae8:	83 ec 04             	sub    $0x4,%esp
f012baeb:	68 74 97 13 f0       	push   $0xf0139774
f012baf0:	68 d2 10 00 00       	push   $0x10d2
f012baf5:	68 5a 97 13 f0       	push   $0xf013975a
f012bafa:	e8 b1 46 fd ff       	call   f01001b0 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 20 * Mega / PAGE_SIZE)
f012baff:	e8 c2 0e fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012bb04:	89 c2                	mov    %eax,%edx
f012bb06:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012bb09:	29 c2                	sub    %eax,%edx
f012bb0b:	89 d0                	mov    %edx,%eax
f012bb0d:	3d 00 14 00 00       	cmp    $0x1400,%eax
f012bb12:	74 17                	je     f012bb2b <test_krealloc+0x1c86>
			panic("krealloc: pages in memory are not freed correctly");
f012bb14:	83 ec 04             	sub    $0x4,%esp
f012bb17:	68 30 ac 13 f0       	push   $0xf013ac30
f012bb1c:	68 d4 10 00 00       	push   $0x10d4
f012bb21:	68 5a 97 13 f0       	push   $0xf013975a
f012bb26:	e8 85 46 fd ff       	call   f01001b0 <_panic>

		//Test kfree after krealloc 1st 2 MB to 10 MB
		freeFrames = sys_calculate_free_frames();
f012bb2b:	e8 96 0e fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012bb30:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012bb33:	e8 4c 8b fd ff       	call   f0104684 <pf_calculate_free_frames>
f012bb38:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
		kfree(ptr_allocations[4]);
f012bb3e:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012bb44:	83 ec 0c             	sub    $0xc,%esp
f012bb47:	50                   	push   %eax
f012bb48:	e8 2c c4 fd ff       	call   f0107f79 <kfree>
f012bb4d:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012bb50:	e8 2f 8b fd ff       	call   f0104684 <pf_calculate_free_frames>
f012bb55:	3b 85 1c ff ff ff    	cmp    -0xe4(%ebp),%eax
f012bb5b:	74 17                	je     f012bb74 <test_krealloc+0x1ccf>
			panic(
f012bb5d:	83 ec 04             	sub    $0x4,%esp
f012bb60:	68 74 97 13 f0       	push   $0xf0139774
f012bb65:	68 dc 10 00 00       	push   $0x10dc
f012bb6a:	68 5a 97 13 f0       	push   $0xf013975a
f012bb6f:	e8 3c 46 fd ff       	call   f01001b0 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 10 * Mega / PAGE_SIZE)
f012bb74:	e8 4d 0e fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012bb79:	89 c2                	mov    %eax,%edx
f012bb7b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012bb7e:	29 c2                	sub    %eax,%edx
f012bb80:	89 d0                	mov    %edx,%eax
f012bb82:	3d 00 0a 00 00       	cmp    $0xa00,%eax
f012bb87:	74 17                	je     f012bba0 <test_krealloc+0x1cfb>
			panic("krealloc: pages in memory are not freed correctly");
f012bb89:	83 ec 04             	sub    $0x4,%esp
f012bb8c:	68 30 ac 13 f0       	push   $0xf013ac30
f012bb91:	68 de 10 00 00       	push   $0x10de
f012bb96:	68 5a 97 13 f0       	push   $0xf013975a
f012bb9b:	e8 10 46 fd ff       	call   f01001b0 <_panic>

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012bba0:	c7 45 d0 00 00 00 f6 	movl   $0xf6000000,-0x30(%ebp)
f012bba7:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f012bbae:	eb 48                	jmp    f012bbf8 <test_krealloc+0x1d53>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f012bbb0:	8b 55 d0             	mov    -0x30(%ebp),%edx
f012bbb3:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f012bbb8:	83 ec 04             	sub    $0x4,%esp
f012bbbb:	8d 8d 00 fe ff ff    	lea    -0x200(%ebp),%ecx
f012bbc1:	51                   	push   %ecx
f012bbc2:	52                   	push   %edx
f012bbc3:	50                   	push   %eax
f012bbc4:	e8 1e b9 fd ff       	call   f01074e7 <get_page_table>
f012bbc9:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f012bbcc:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012bbd2:	85 c0                	test   %eax,%eax
f012bbd4:	75 17                	jne    f012bbed <test_krealloc+0x1d48>
					panic(
f012bbd6:	83 ec 04             	sub    $0x4,%esp
f012bbd9:	68 5c a0 13 f0       	push   $0xf013a05c
f012bbde:	68 eb 10 00 00       	push   $0x10eb
f012bbe3:	68 5a 97 13 f0       	push   $0xf013975a
f012bbe8:	e8 c3 45 fd ff       	call   f01001b0 <_panic>
			panic("krealloc: pages in memory are not freed correctly");

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012bbed:	81 45 d0 00 00 40 00 	addl   $0x400000,-0x30(%ebp)
f012bbf4:	83 55 d4 00          	adcl   $0x0,-0x2c(%ebp)
f012bbf8:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f012bbfc:	78 b2                	js     f012bbb0 <test_krealloc+0x1d0b>
f012bbfe:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f012bc02:	7f 09                	jg     f012bc0d <test_krealloc+0x1d68>
f012bc04:	81 7d d0 ff ef ff ff 	cmpl   $0xffffefff,-0x30(%ebp)
f012bc0b:	76 a3                	jbe    f012bbb0 <test_krealloc+0x1d0b>
			}
		}

	}

	cprintf("\b\b\b100%\n");
f012bc0d:	83 ec 0c             	sub    $0xc,%esp
f012bc10:	68 3e 99 13 f0       	push   $0xf013993e
f012bc15:	e8 17 52 fd ff       	call   f0100e31 <cprintf>
f012bc1a:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test krealloc completed successfully.\n");
f012bc1d:	83 ec 0c             	sub    $0xc,%esp
f012bc20:	68 cc af 13 f0       	push   $0xf013afcc
f012bc25:	e8 07 52 fd ff       	call   f0100e31 <cprintf>
f012bc2a:	83 c4 10             	add    $0x10,%esp
	return 0;
f012bc2d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f012bc32:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012bc35:	5b                   	pop    %ebx
f012bc36:	5f                   	pop    %edi
f012bc37:	5d                   	pop    %ebp
f012bc38:	c3                   	ret    

f012bc39 <test_krealloc_BF>:


int test_krealloc_BF() {
f012bc39:	55                   	push   %ebp
f012bc3a:	89 e5                	mov    %esp,%ebp
f012bc3c:	57                   	push   %edi
f012bc3d:	53                   	push   %ebx
f012bc3e:	81 ec 10 02 00 00    	sub    $0x210,%esp
	cprintf("==============================================\n");
f012bc44:	83 ec 0c             	sub    $0xc,%esp
f012bc47:	68 9c 96 13 f0       	push   $0xf013969c
f012bc4c:	e8 e0 51 fd ff       	call   f0100e31 <cprintf>
f012bc51:	83 c4 10             	add    $0x10,%esp
	cprintf(
f012bc54:	83 ec 0c             	sub    $0xc,%esp
f012bc57:	68 cc 96 13 f0       	push   $0xf01396cc
f012bc5c:	e8 d0 51 fd ff       	call   f0100e31 <cprintf>
f012bc61:	83 c4 10             	add    $0x10,%esp
			"MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
	cprintf("==============================================\n");
f012bc64:	83 ec 0c             	sub    $0xc,%esp
f012bc67:	68 9c 96 13 f0       	push   $0xf013969c
f012bc6c:	e8 c0 51 fd ff       	call   f0100e31 <cprintf>
f012bc71:	83 c4 10             	add    $0x10,%esp
	char minByte = 1 << 7;
f012bc74:	c6 45 cf 80          	movb   $0x80,-0x31(%ebp)
	char maxByte = 0x7F;
f012bc78:	c6 45 ce 7f          	movb   $0x7f,-0x32(%ebp)
	short minShort = 1 << 15;
f012bc7c:	66 c7 45 cc 00 80    	movw   $0x8000,-0x34(%ebp)
	short maxShort = 0x7FFF;
f012bc82:	66 c7 45 ca ff 7f    	movw   $0x7fff,-0x36(%ebp)
	int minInt = 1 << 31;
f012bc88:	c7 45 c4 00 00 00 80 	movl   $0x80000000,-0x3c(%ebp)
	int maxInt = 0x7FFFFFFF;
f012bc8f:	c7 45 c0 ff ff ff 7f 	movl   $0x7fffffff,-0x40(%ebp)
	int *intArr;
	struct MyStruct *structArr;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2,
			lastIndexOfInt, lastIndexOfStruct;
	//[1] Test calling krealloc with VA = NULL. It should call malloc
	void* ptr_allocations[20] = { 0 };
f012bc96:	8d 95 98 fe ff ff    	lea    -0x168(%ebp),%edx
f012bc9c:	b9 14 00 00 00       	mov    $0x14,%ecx
f012bca1:	b8 00 00 00 00       	mov    $0x0,%eax
f012bca6:	89 d7                	mov    %edx,%edi
f012bca8:	f3 ab                	rep stos %eax,%es:(%edi)
	char* ptr;
	void* newAddress = NULL;
f012bcaa:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
	int freeDiskFrames;


	int lastIndices[20] = { 0 };
f012bcb1:	8d 95 48 fe ff ff    	lea    -0x1b8(%ebp),%edx
f012bcb7:	b9 14 00 00 00       	mov    $0x14,%ecx
f012bcbc:	b8 00 00 00 00       	mov    $0x0,%eax
f012bcc1:	89 d7                	mov    %edx,%edi
f012bcc3:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = { 0 };
f012bcc5:	8d 95 f8 fd ff ff    	lea    -0x208(%ebp),%edx
f012bccb:	b9 14 00 00 00       	mov    $0x14,%ecx
f012bcd0:	b8 00 00 00 00       	mov    $0x0,%eax
f012bcd5:	89 d7                	mov    %edx,%edi
f012bcd7:	f3 ab                	rep stos %eax,%es:(%edi)
	int freeFrames;
	//[1] Allocate all
	{
		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012bcd9:	e8 e8 0c fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012bcde:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[0] = krealloc(NULL, 1 * Mega - kilo);
f012bce1:	83 ec 08             	sub    $0x8,%esp
f012bce4:	68 00 fc 0f 00       	push   $0xffc00
f012bce9:	6a 00                	push   $0x0
f012bceb:	e8 25 c3 fd ff       	call   f0108015 <krealloc>
f012bcf0:	83 c4 10             	add    $0x10,%esp
f012bcf3:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
		if ((uint32) ptr_allocations[0] < (KERNEL_HEAP_START))
f012bcf9:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f012bcff:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012bd04:	77 17                	ja     f012bd1d <test_krealloc_BF+0xe4>
			panic("krealloc: Wrong start address for the allocated space... ");
f012bd06:	83 ec 04             	sub    $0x4,%esp
f012bd09:	68 00 aa 13 f0       	push   $0xf013aa00
f012bd0e:	68 1a 11 00 00       	push   $0x111a
f012bd13:	68 5a 97 13 f0       	push   $0xf013975a
f012bd18:	e8 93 44 fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[0] != ACTUAL_START)
f012bd1d:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f012bd23:	89 c1                	mov    %eax,%ecx
f012bd25:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f012bd2c:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012bd31:	0f b6 d0             	movzbl %al,%edx
f012bd34:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f012bd37:	01 d0                	add    %edx,%eax
f012bd39:	48                   	dec    %eax
f012bd3a:	89 45 b0             	mov    %eax,-0x50(%ebp)
f012bd3d:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012bd40:	ba 00 00 00 00       	mov    $0x0,%edx
f012bd45:	f7 75 b4             	divl   -0x4c(%ebp)
f012bd48:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012bd4b:	29 d0                	sub    %edx,%eax
f012bd4d:	89 c3                	mov    %eax,%ebx
f012bd4f:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f012bd56:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012bd5b:	0f b6 c0             	movzbl %al,%eax
f012bd5e:	c1 e0 04             	shl    $0x4,%eax
f012bd61:	89 c2                	mov    %eax,%edx
f012bd63:	8b 45 ac             	mov    -0x54(%ebp),%eax
f012bd66:	01 d0                	add    %edx,%eax
f012bd68:	48                   	dec    %eax
f012bd69:	89 45 a8             	mov    %eax,-0x58(%ebp)
f012bd6c:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012bd6f:	ba 00 00 00 00       	mov    $0x0,%edx
f012bd74:	f7 75 ac             	divl   -0x54(%ebp)
f012bd77:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012bd7a:	29 d0                	sub    %edx,%eax
f012bd7c:	01 d8                	add    %ebx,%eax
f012bd7e:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f012bd83:	39 c1                	cmp    %eax,%ecx
f012bd85:	74 17                	je     f012bd9e <test_krealloc_BF+0x165>
			panic("krealloc: Wrong start address for allocated space");
f012bd87:	83 ec 04             	sub    $0x4,%esp
f012bd8a:	68 3c aa 13 f0       	push   $0xf013aa3c
f012bd8f:	68 1c 11 00 00       	push   $0x111c
f012bd94:	68 5a 97 13 f0       	push   $0xf013975a
f012bd99:	e8 12 44 fd ff       	call   f01001b0 <_panic>

		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012bd9e:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012bda1:	e8 20 0c fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012bda6:	29 c3                	sub    %eax,%ebx
f012bda8:	89 d8                	mov    %ebx,%eax
f012bdaa:	3d 00 01 00 00       	cmp    $0x100,%eax
f012bdaf:	74 17                	je     f012bdc8 <test_krealloc_BF+0x18f>
			panic("krealloc: Wrong allocation: ");
f012bdb1:	83 ec 04             	sub    $0x4,%esp
f012bdb4:	68 6e aa 13 f0       	push   $0xf013aa6e
f012bdb9:	68 1f 11 00 00       	push   $0x111f
f012bdbe:	68 5a 97 13 f0       	push   $0xf013975a
f012bdc3:	e8 e8 43 fd ff       	call   f01001b0 <_panic>

		lastIndices[0] = (1 * Mega - kilo) / sizeof(char) - 1;
f012bdc8:	c7 85 48 fe ff ff ff 	movl   $0xffbff,-0x1b8(%ebp)
f012bdcf:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012bdd2:	e8 ef 0b fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012bdd7:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[1] = krealloc(NULL, 1 * Mega - kilo);
f012bdda:	83 ec 08             	sub    $0x8,%esp
f012bddd:	68 00 fc 0f 00       	push   $0xffc00
f012bde2:	6a 00                	push   $0x0
f012bde4:	e8 2c c2 fd ff       	call   f0108015 <krealloc>
f012bde9:	83 c4 10             	add    $0x10,%esp
f012bdec:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
		if ((uint32) ptr_allocations[1] < (KERNEL_HEAP_START + 1 * Mega))
f012bdf2:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012bdf8:	3d ff ff 0f f6       	cmp    $0xf60fffff,%eax
f012bdfd:	77 17                	ja     f012be16 <test_krealloc_BF+0x1dd>
			panic("krealloc: Wrong start address for the allocated space... ");
f012bdff:	83 ec 04             	sub    $0x4,%esp
f012be02:	68 00 aa 13 f0       	push   $0xf013aa00
f012be07:	68 27 11 00 00       	push   $0x1127
f012be0c:	68 5a 97 13 f0       	push   $0xf013975a
f012be11:	e8 9a 43 fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[1] != ACTUAL_START + (1 * Mega))
f012be16:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012be1c:	89 c1                	mov    %eax,%ecx
f012be1e:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f012be25:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012be2a:	0f b6 d0             	movzbl %al,%edx
f012be2d:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012be30:	01 d0                	add    %edx,%eax
f012be32:	48                   	dec    %eax
f012be33:	89 45 a0             	mov    %eax,-0x60(%ebp)
f012be36:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012be39:	ba 00 00 00 00       	mov    $0x0,%edx
f012be3e:	f7 75 a4             	divl   -0x5c(%ebp)
f012be41:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012be44:	29 d0                	sub    %edx,%eax
f012be46:	89 c3                	mov    %eax,%ebx
f012be48:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f012be4f:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012be54:	0f b6 c0             	movzbl %al,%eax
f012be57:	c1 e0 04             	shl    $0x4,%eax
f012be5a:	89 c2                	mov    %eax,%edx
f012be5c:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012be5f:	01 d0                	add    %edx,%eax
f012be61:	48                   	dec    %eax
f012be62:	89 45 98             	mov    %eax,-0x68(%ebp)
f012be65:	8b 45 98             	mov    -0x68(%ebp),%eax
f012be68:	ba 00 00 00 00       	mov    $0x0,%edx
f012be6d:	f7 75 9c             	divl   -0x64(%ebp)
f012be70:	8b 45 98             	mov    -0x68(%ebp),%eax
f012be73:	29 d0                	sub    %edx,%eax
f012be75:	01 d8                	add    %ebx,%eax
f012be77:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f012be7c:	39 c1                	cmp    %eax,%ecx
f012be7e:	74 17                	je     f012be97 <test_krealloc_BF+0x25e>
			panic("krealloc: Wrong start address for allocated space");
f012be80:	83 ec 04             	sub    $0x4,%esp
f012be83:	68 3c aa 13 f0       	push   $0xf013aa3c
f012be88:	68 29 11 00 00       	push   $0x1129
f012be8d:	68 5a 97 13 f0       	push   $0xf013975a
f012be92:	e8 19 43 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012be97:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012be9a:	e8 27 0b fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012be9f:	29 c3                	sub    %eax,%ebx
f012bea1:	89 d8                	mov    %ebx,%eax
f012bea3:	3d 00 01 00 00       	cmp    $0x100,%eax
f012bea8:	74 17                	je     f012bec1 <test_krealloc_BF+0x288>
			panic("krealloc: Wrong allocation: ");
f012beaa:	83 ec 04             	sub    $0x4,%esp
f012bead:	68 6e aa 13 f0       	push   $0xf013aa6e
f012beb2:	68 2b 11 00 00       	push   $0x112b
f012beb7:	68 5a 97 13 f0       	push   $0xf013975a
f012bebc:	e8 ef 42 fd ff       	call   f01001b0 <_panic>

		lastIndices[1] = (1 * Mega - kilo) / sizeof(char) - 1;
f012bec1:	c7 85 4c fe ff ff ff 	movl   $0xffbff,-0x1b4(%ebp)
f012bec8:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012becb:	e8 f6 0a fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012bed0:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[2] = krealloc(NULL, 1 * Mega - kilo);
f012bed3:	83 ec 08             	sub    $0x8,%esp
f012bed6:	68 00 fc 0f 00       	push   $0xffc00
f012bedb:	6a 00                	push   $0x0
f012bedd:	e8 33 c1 fd ff       	call   f0108015 <krealloc>
f012bee2:	83 c4 10             	add    $0x10,%esp
f012bee5:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
		if ((uint32) ptr_allocations[2] < (KERNEL_HEAP_START + 2 * Mega))
f012beeb:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f012bef1:	3d ff ff 1f f6       	cmp    $0xf61fffff,%eax
f012bef6:	77 17                	ja     f012bf0f <test_krealloc_BF+0x2d6>
			panic("krealloc: Wrong start address for the allocated space... ");
f012bef8:	83 ec 04             	sub    $0x4,%esp
f012befb:	68 00 aa 13 f0       	push   $0xf013aa00
f012bf00:	68 33 11 00 00       	push   $0x1133
f012bf05:	68 5a 97 13 f0       	push   $0xf013975a
f012bf0a:	e8 a1 42 fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[2] != ACTUAL_START + (2 * Mega))
f012bf0f:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f012bf15:	89 c1                	mov    %eax,%ecx
f012bf17:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f012bf1e:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012bf23:	0f b6 d0             	movzbl %al,%edx
f012bf26:	8b 45 94             	mov    -0x6c(%ebp),%eax
f012bf29:	01 d0                	add    %edx,%eax
f012bf2b:	48                   	dec    %eax
f012bf2c:	89 45 90             	mov    %eax,-0x70(%ebp)
f012bf2f:	8b 45 90             	mov    -0x70(%ebp),%eax
f012bf32:	ba 00 00 00 00       	mov    $0x0,%edx
f012bf37:	f7 75 94             	divl   -0x6c(%ebp)
f012bf3a:	8b 45 90             	mov    -0x70(%ebp),%eax
f012bf3d:	29 d0                	sub    %edx,%eax
f012bf3f:	89 c3                	mov    %eax,%ebx
f012bf41:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f012bf48:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012bf4d:	0f b6 c0             	movzbl %al,%eax
f012bf50:	c1 e0 04             	shl    $0x4,%eax
f012bf53:	89 c2                	mov    %eax,%edx
f012bf55:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012bf58:	01 d0                	add    %edx,%eax
f012bf5a:	48                   	dec    %eax
f012bf5b:	89 45 88             	mov    %eax,-0x78(%ebp)
f012bf5e:	8b 45 88             	mov    -0x78(%ebp),%eax
f012bf61:	ba 00 00 00 00       	mov    $0x0,%edx
f012bf66:	f7 75 8c             	divl   -0x74(%ebp)
f012bf69:	8b 45 88             	mov    -0x78(%ebp),%eax
f012bf6c:	29 d0                	sub    %edx,%eax
f012bf6e:	01 d8                	add    %ebx,%eax
f012bf70:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f012bf75:	39 c1                	cmp    %eax,%ecx
f012bf77:	74 17                	je     f012bf90 <test_krealloc_BF+0x357>
			panic("krealloc: Wrong start address for allocated space");
f012bf79:	83 ec 04             	sub    $0x4,%esp
f012bf7c:	68 3c aa 13 f0       	push   $0xf013aa3c
f012bf81:	68 35 11 00 00       	push   $0x1135
f012bf86:	68 5a 97 13 f0       	push   $0xf013975a
f012bf8b:	e8 20 42 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012bf90:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012bf93:	e8 2e 0a fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012bf98:	29 c3                	sub    %eax,%ebx
f012bf9a:	89 d8                	mov    %ebx,%eax
f012bf9c:	3d 00 01 00 00       	cmp    $0x100,%eax
f012bfa1:	74 17                	je     f012bfba <test_krealloc_BF+0x381>
			panic("krealloc: Wrong allocation: ");
f012bfa3:	83 ec 04             	sub    $0x4,%esp
f012bfa6:	68 6e aa 13 f0       	push   $0xf013aa6e
f012bfab:	68 37 11 00 00       	push   $0x1137
f012bfb0:	68 5a 97 13 f0       	push   $0xf013975a
f012bfb5:	e8 f6 41 fd ff       	call   f01001b0 <_panic>
		lastIndices[2] = (1 * Mega - kilo) / sizeof(int) - 1;
f012bfba:	c7 85 50 fe ff ff ff 	movl   $0x3feff,-0x1b0(%ebp)
f012bfc1:	fe 03 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012bfc4:	e8 fd 09 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012bfc9:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[3] = krealloc(NULL, 1 * Mega - kilo);
f012bfcc:	83 ec 08             	sub    $0x8,%esp
f012bfcf:	68 00 fc 0f 00       	push   $0xffc00
f012bfd4:	6a 00                	push   $0x0
f012bfd6:	e8 3a c0 fd ff       	call   f0108015 <krealloc>
f012bfdb:	83 c4 10             	add    $0x10,%esp
f012bfde:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
		if ((uint32) ptr_allocations[3] < (KERNEL_HEAP_START + 3 * Mega))
f012bfe4:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012bfea:	3d ff ff 2f f6       	cmp    $0xf62fffff,%eax
f012bfef:	77 17                	ja     f012c008 <test_krealloc_BF+0x3cf>
			panic("krealloc: Wrong start address for the allocated space... ");
f012bff1:	83 ec 04             	sub    $0x4,%esp
f012bff4:	68 00 aa 13 f0       	push   $0xf013aa00
f012bff9:	68 3e 11 00 00       	push   $0x113e
f012bffe:	68 5a 97 13 f0       	push   $0xf013975a
f012c003:	e8 a8 41 fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[3] != ACTUAL_START + (3 * Mega))
f012c008:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012c00e:	89 c1                	mov    %eax,%ecx
f012c010:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f012c017:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012c01c:	0f b6 d0             	movzbl %al,%edx
f012c01f:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012c022:	01 d0                	add    %edx,%eax
f012c024:	48                   	dec    %eax
f012c025:	89 45 80             	mov    %eax,-0x80(%ebp)
f012c028:	8b 45 80             	mov    -0x80(%ebp),%eax
f012c02b:	ba 00 00 00 00       	mov    $0x0,%edx
f012c030:	f7 75 84             	divl   -0x7c(%ebp)
f012c033:	8b 45 80             	mov    -0x80(%ebp),%eax
f012c036:	29 d0                	sub    %edx,%eax
f012c038:	89 c3                	mov    %eax,%ebx
f012c03a:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f012c041:	10 00 00 
f012c044:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012c049:	0f b6 c0             	movzbl %al,%eax
f012c04c:	c1 e0 04             	shl    $0x4,%eax
f012c04f:	89 c2                	mov    %eax,%edx
f012c051:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012c057:	01 d0                	add    %edx,%eax
f012c059:	48                   	dec    %eax
f012c05a:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f012c060:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012c066:	ba 00 00 00 00       	mov    $0x0,%edx
f012c06b:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f012c071:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012c077:	29 d0                	sub    %edx,%eax
f012c079:	01 d8                	add    %ebx,%eax
f012c07b:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f012c080:	39 c1                	cmp    %eax,%ecx
f012c082:	74 17                	je     f012c09b <test_krealloc_BF+0x462>
			panic("krealloc: Wrong start address for allocated space");
f012c084:	83 ec 04             	sub    $0x4,%esp
f012c087:	68 3c aa 13 f0       	push   $0xf013aa3c
f012c08c:	68 40 11 00 00       	push   $0x1140
f012c091:	68 5a 97 13 f0       	push   $0xf013975a
f012c096:	e8 15 41 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012c09b:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c09e:	e8 23 09 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012c0a3:	29 c3                	sub    %eax,%ebx
f012c0a5:	89 d8                	mov    %ebx,%eax
f012c0a7:	3d 00 01 00 00       	cmp    $0x100,%eax
f012c0ac:	74 17                	je     f012c0c5 <test_krealloc_BF+0x48c>
			panic("krealloc: Wrong allocation: ");
f012c0ae:	83 ec 04             	sub    $0x4,%esp
f012c0b1:	68 6e aa 13 f0       	push   $0xf013aa6e
f012c0b6:	68 42 11 00 00       	push   $0x1142
f012c0bb:	68 5a 97 13 f0       	push   $0xf013975a
f012c0c0:	e8 eb 40 fd ff       	call   f01001b0 <_panic>
		lastIndices[3] = (1 * Mega - kilo) / sizeof(int) - 1;
f012c0c5:	c7 85 54 fe ff ff ff 	movl   $0x3feff,-0x1ac(%ebp)
f012c0cc:	fe 03 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012c0cf:	e8 f2 08 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012c0d4:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[4] = krealloc(NULL, 2 * Mega - kilo);
f012c0d7:	83 ec 08             	sub    $0x8,%esp
f012c0da:	68 00 fc 1f 00       	push   $0x1ffc00
f012c0df:	6a 00                	push   $0x0
f012c0e1:	e8 2f bf fd ff       	call   f0108015 <krealloc>
f012c0e6:	83 c4 10             	add    $0x10,%esp
f012c0e9:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
		if ((uint32) ptr_allocations[4] < (KERNEL_HEAP_START + 4 * Mega))
f012c0ef:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012c0f5:	3d ff ff 3f f6       	cmp    $0xf63fffff,%eax
f012c0fa:	77 17                	ja     f012c113 <test_krealloc_BF+0x4da>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c0fc:	83 ec 04             	sub    $0x4,%esp
f012c0ff:	68 00 aa 13 f0       	push   $0xf013aa00
f012c104:	68 49 11 00 00       	push   $0x1149
f012c109:	68 5a 97 13 f0       	push   $0xf013975a
f012c10e:	e8 9d 40 fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[4] != ACTUAL_START + (4 * Mega))
f012c113:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012c119:	89 c1                	mov    %eax,%ecx
f012c11b:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f012c122:	10 00 00 
f012c125:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012c12a:	0f b6 d0             	movzbl %al,%edx
f012c12d:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012c133:	01 d0                	add    %edx,%eax
f012c135:	48                   	dec    %eax
f012c136:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f012c13c:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012c142:	ba 00 00 00 00       	mov    $0x0,%edx
f012c147:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f012c14d:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012c153:	29 d0                	sub    %edx,%eax
f012c155:	89 c3                	mov    %eax,%ebx
f012c157:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f012c15e:	10 00 00 
f012c161:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012c166:	0f b6 c0             	movzbl %al,%eax
f012c169:	c1 e0 04             	shl    $0x4,%eax
f012c16c:	89 c2                	mov    %eax,%edx
f012c16e:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f012c174:	01 d0                	add    %edx,%eax
f012c176:	48                   	dec    %eax
f012c177:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f012c17d:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012c183:	ba 00 00 00 00       	mov    $0x0,%edx
f012c188:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f012c18e:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012c194:	29 d0                	sub    %edx,%eax
f012c196:	01 d8                	add    %ebx,%eax
f012c198:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f012c19d:	39 c1                	cmp    %eax,%ecx
f012c19f:	74 17                	je     f012c1b8 <test_krealloc_BF+0x57f>
			panic("krealloc: Wrong start address for allocated space");
f012c1a1:	83 ec 04             	sub    $0x4,%esp
f012c1a4:	68 3c aa 13 f0       	push   $0xf013aa3c
f012c1a9:	68 4b 11 00 00       	push   $0x114b
f012c1ae:	68 5a 97 13 f0       	push   $0xf013975a
f012c1b3:	e8 f8 3f fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012c1b8:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c1bb:	e8 06 08 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012c1c0:	29 c3                	sub    %eax,%ebx
f012c1c2:	89 d8                	mov    %ebx,%eax
f012c1c4:	3d 00 02 00 00       	cmp    $0x200,%eax
f012c1c9:	74 17                	je     f012c1e2 <test_krealloc_BF+0x5a9>
			panic("krealloc: Wrong allocation: ");
f012c1cb:	83 ec 04             	sub    $0x4,%esp
f012c1ce:	68 6e aa 13 f0       	push   $0xf013aa6e
f012c1d3:	68 4d 11 00 00       	push   $0x114d
f012c1d8:	68 5a 97 13 f0       	push   $0xf013975a
f012c1dd:	e8 ce 3f fd ff       	call   f01001b0 <_panic>
		lastIndices[4] = (2 * Mega - kilo) / sizeof(short) - 1;
f012c1e2:	c7 85 58 fe ff ff ff 	movl   $0xffdff,-0x1a8(%ebp)
f012c1e9:	fd 0f 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012c1ec:	e8 d5 07 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012c1f1:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[5] = krealloc(NULL, 2 * Mega - kilo);
f012c1f4:	83 ec 08             	sub    $0x8,%esp
f012c1f7:	68 00 fc 1f 00       	push   $0x1ffc00
f012c1fc:	6a 00                	push   $0x0
f012c1fe:	e8 12 be fd ff       	call   f0108015 <krealloc>
f012c203:	83 c4 10             	add    $0x10,%esp
f012c206:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
		if ((uint32) ptr_allocations[5] < (KERNEL_HEAP_START + 6 * Mega))
f012c20c:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012c212:	3d ff ff 5f f6       	cmp    $0xf65fffff,%eax
f012c217:	77 17                	ja     f012c230 <test_krealloc_BF+0x5f7>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c219:	83 ec 04             	sub    $0x4,%esp
f012c21c:	68 00 aa 13 f0       	push   $0xf013aa00
f012c221:	68 54 11 00 00       	push   $0x1154
f012c226:	68 5a 97 13 f0       	push   $0xf013975a
f012c22b:	e8 80 3f fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[5] != ACTUAL_START + (6 * Mega))
f012c230:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012c236:	89 c1                	mov    %eax,%ecx
f012c238:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f012c23f:	10 00 00 
f012c242:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012c247:	0f b6 d0             	movzbl %al,%edx
f012c24a:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012c250:	01 d0                	add    %edx,%eax
f012c252:	48                   	dec    %eax
f012c253:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f012c259:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012c25f:	ba 00 00 00 00       	mov    $0x0,%edx
f012c264:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f012c26a:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012c270:	29 d0                	sub    %edx,%eax
f012c272:	89 c3                	mov    %eax,%ebx
f012c274:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f012c27b:	10 00 00 
f012c27e:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012c283:	0f b6 c0             	movzbl %al,%eax
f012c286:	c1 e0 04             	shl    $0x4,%eax
f012c289:	89 c2                	mov    %eax,%edx
f012c28b:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012c291:	01 d0                	add    %edx,%eax
f012c293:	48                   	dec    %eax
f012c294:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f012c29a:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012c2a0:	ba 00 00 00 00       	mov    $0x0,%edx
f012c2a5:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f012c2ab:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012c2b1:	29 d0                	sub    %edx,%eax
f012c2b3:	01 d8                	add    %ebx,%eax
f012c2b5:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f012c2ba:	39 c1                	cmp    %eax,%ecx
f012c2bc:	74 17                	je     f012c2d5 <test_krealloc_BF+0x69c>
			panic("krealloc: Wrong start address for allocated space");
f012c2be:	83 ec 04             	sub    $0x4,%esp
f012c2c1:	68 3c aa 13 f0       	push   $0xf013aa3c
f012c2c6:	68 56 11 00 00       	push   $0x1156
f012c2cb:	68 5a 97 13 f0       	push   $0xf013975a
f012c2d0:	e8 db 3e fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012c2d5:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c2d8:	e8 e9 06 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012c2dd:	29 c3                	sub    %eax,%ebx
f012c2df:	89 d8                	mov    %ebx,%eax
f012c2e1:	3d 00 02 00 00       	cmp    $0x200,%eax
f012c2e6:	74 17                	je     f012c2ff <test_krealloc_BF+0x6c6>
			panic("krealloc: Wrong allocation: ");
f012c2e8:	83 ec 04             	sub    $0x4,%esp
f012c2eb:	68 6e aa 13 f0       	push   $0xf013aa6e
f012c2f0:	68 58 11 00 00       	push   $0x1158
f012c2f5:	68 5a 97 13 f0       	push   $0xf013975a
f012c2fa:	e8 b1 3e fd ff       	call   f01001b0 <_panic>
		lastIndices[5] = (2 * Mega - kilo) / sizeof(short) - 1;
f012c2ff:	c7 85 5c fe ff ff ff 	movl   $0xffdff,-0x1a4(%ebp)
f012c306:	fd 0f 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012c309:	e8 b8 06 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012c30e:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[6] = krealloc(NULL, 3 * Mega - kilo);
f012c311:	83 ec 08             	sub    $0x8,%esp
f012c314:	68 00 fc 2f 00       	push   $0x2ffc00
f012c319:	6a 00                	push   $0x0
f012c31b:	e8 f5 bc fd ff       	call   f0108015 <krealloc>
f012c320:	83 c4 10             	add    $0x10,%esp
f012c323:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
		if ((uint32) ptr_allocations[6] < (KERNEL_HEAP_START + 8 * Mega))
f012c329:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012c32f:	3d ff ff 7f f6       	cmp    $0xf67fffff,%eax
f012c334:	77 17                	ja     f012c34d <test_krealloc_BF+0x714>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c336:	83 ec 04             	sub    $0x4,%esp
f012c339:	68 00 aa 13 f0       	push   $0xf013aa00
f012c33e:	68 5f 11 00 00       	push   $0x115f
f012c343:	68 5a 97 13 f0       	push   $0xf013975a
f012c348:	e8 63 3e fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[6] != ACTUAL_START + (8 * Mega))
f012c34d:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012c353:	89 c1                	mov    %eax,%ecx
f012c355:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f012c35c:	10 00 00 
f012c35f:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012c364:	0f b6 d0             	movzbl %al,%edx
f012c367:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012c36d:	01 d0                	add    %edx,%eax
f012c36f:	48                   	dec    %eax
f012c370:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f012c376:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012c37c:	ba 00 00 00 00       	mov    $0x0,%edx
f012c381:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f012c387:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012c38d:	29 d0                	sub    %edx,%eax
f012c38f:	89 c3                	mov    %eax,%ebx
f012c391:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f012c398:	10 00 00 
f012c39b:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012c3a0:	0f b6 c0             	movzbl %al,%eax
f012c3a3:	c1 e0 04             	shl    $0x4,%eax
f012c3a6:	89 c2                	mov    %eax,%edx
f012c3a8:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012c3ae:	01 d0                	add    %edx,%eax
f012c3b0:	48                   	dec    %eax
f012c3b1:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f012c3b7:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012c3bd:	ba 00 00 00 00       	mov    $0x0,%edx
f012c3c2:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f012c3c8:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012c3ce:	29 d0                	sub    %edx,%eax
f012c3d0:	01 d8                	add    %ebx,%eax
f012c3d2:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f012c3d7:	39 c1                	cmp    %eax,%ecx
f012c3d9:	74 17                	je     f012c3f2 <test_krealloc_BF+0x7b9>
			panic("krealloc: Wrong start address for allocated space");
f012c3db:	83 ec 04             	sub    $0x4,%esp
f012c3de:	68 3c aa 13 f0       	push   $0xf013aa3c
f012c3e3:	68 61 11 00 00       	push   $0x1161
f012c3e8:	68 5a 97 13 f0       	push   $0xf013975a
f012c3ed:	e8 be 3d fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012c3f2:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c3f5:	e8 cc 05 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012c3fa:	29 c3                	sub    %eax,%ebx
f012c3fc:	89 d8                	mov    %ebx,%eax
f012c3fe:	3d 00 03 00 00       	cmp    $0x300,%eax
f012c403:	74 17                	je     f012c41c <test_krealloc_BF+0x7e3>
			panic("Wrong allocation: ");
f012c405:	83 ec 04             	sub    $0x4,%esp
f012c408:	68 a4 9b 13 f0       	push   $0xf0139ba4
f012c40d:	68 63 11 00 00       	push   $0x1163
f012c412:	68 5a 97 13 f0       	push   $0xf013975a
f012c417:	e8 94 3d fd ff       	call   f01001b0 <_panic>
		lastIndices[6] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012c41c:	c7 85 60 fe ff ff 7f 	movl   $0x5ff7f,-0x1a0(%ebp)
f012c423:	ff 05 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012c426:	e8 9b 05 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012c42b:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[7] = krealloc(NULL, 3 * Mega - kilo);
f012c42e:	83 ec 08             	sub    $0x8,%esp
f012c431:	68 00 fc 2f 00       	push   $0x2ffc00
f012c436:	6a 00                	push   $0x0
f012c438:	e8 d8 bb fd ff       	call   f0108015 <krealloc>
f012c43d:	83 c4 10             	add    $0x10,%esp
f012c440:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
		if ((uint32) ptr_allocations[7] < (KERNEL_HEAP_START + 11 * Mega))
f012c446:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012c44c:	3d ff ff af f6       	cmp    $0xf6afffff,%eax
f012c451:	77 17                	ja     f012c46a <test_krealloc_BF+0x831>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c453:	83 ec 04             	sub    $0x4,%esp
f012c456:	68 00 aa 13 f0       	push   $0xf013aa00
f012c45b:	68 6a 11 00 00       	push   $0x116a
f012c460:	68 5a 97 13 f0       	push   $0xf013975a
f012c465:	e8 46 3d fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[7] != ACTUAL_START + (11 * Mega))
f012c46a:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012c470:	89 c1                	mov    %eax,%ecx
f012c472:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f012c479:	10 00 00 
f012c47c:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012c481:	0f b6 d0             	movzbl %al,%edx
f012c484:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012c48a:	01 d0                	add    %edx,%eax
f012c48c:	48                   	dec    %eax
f012c48d:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f012c493:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012c499:	ba 00 00 00 00       	mov    $0x0,%edx
f012c49e:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f012c4a4:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012c4aa:	29 d0                	sub    %edx,%eax
f012c4ac:	89 c3                	mov    %eax,%ebx
f012c4ae:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f012c4b5:	10 00 00 
f012c4b8:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012c4bd:	0f b6 c0             	movzbl %al,%eax
f012c4c0:	c1 e0 04             	shl    $0x4,%eax
f012c4c3:	89 c2                	mov    %eax,%edx
f012c4c5:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012c4cb:	01 d0                	add    %edx,%eax
f012c4cd:	48                   	dec    %eax
f012c4ce:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f012c4d4:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012c4da:	ba 00 00 00 00       	mov    $0x0,%edx
f012c4df:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f012c4e5:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012c4eb:	29 d0                	sub    %edx,%eax
f012c4ed:	01 d8                	add    %ebx,%eax
f012c4ef:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f012c4f4:	39 c1                	cmp    %eax,%ecx
f012c4f6:	74 17                	je     f012c50f <test_krealloc_BF+0x8d6>
			panic("krealloc: Wrong start address for allocated space");
f012c4f8:	83 ec 04             	sub    $0x4,%esp
f012c4fb:	68 3c aa 13 f0       	push   $0xf013aa3c
f012c500:	68 6c 11 00 00       	push   $0x116c
f012c505:	68 5a 97 13 f0       	push   $0xf013975a
f012c50a:	e8 a1 3c fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012c50f:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c512:	e8 af 04 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012c517:	29 c3                	sub    %eax,%ebx
f012c519:	89 d8                	mov    %ebx,%eax
f012c51b:	3d 00 03 00 00       	cmp    $0x300,%eax
f012c520:	74 17                	je     f012c539 <test_krealloc_BF+0x900>
			panic("krealloc: Wrong allocation: ");
f012c522:	83 ec 04             	sub    $0x4,%esp
f012c525:	68 6e aa 13 f0       	push   $0xf013aa6e
f012c52a:	68 6e 11 00 00       	push   $0x116e
f012c52f:	68 5a 97 13 f0       	push   $0xf013975a
f012c534:	e8 77 3c fd ff       	call   f01001b0 <_panic>
		lastIndices[7] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012c539:	c7 85 64 fe ff ff 7f 	movl   $0x5ff7f,-0x19c(%ebp)
f012c540:	ff 05 00 
	char *byteArr1;
	//[3] Test read write access
	{
		//cprintf("\nTest read write access");
		//Test access for the first 1 MB
		freeFrames = sys_calculate_free_frames();
f012c543:	e8 7e 04 fe ff       	call   f010c9c6 <sys_calculate_free_frames>
f012c548:	89 45 b8             	mov    %eax,-0x48(%ebp)

		//Write values
		//In 1st 1 MB
		lastIndexOfByte = (1 * Mega - kilo) / sizeof(char) - 1;
f012c54b:	c7 85 34 ff ff ff ff 	movl   $0xffbff,-0xcc(%ebp)
f012c552:	fb 0f 00 
		byteArr = (char *) ptr_allocations[0];
f012c555:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f012c55b:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
		byteArr[0] = minByte;
f012c561:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012c567:	8a 55 cf             	mov    -0x31(%ebp),%dl
f012c56a:	88 10                	mov    %dl,(%eax)
		byteArr[lastIndexOfByte] = maxByte;
f012c56c:	8b 95 34 ff ff ff    	mov    -0xcc(%ebp),%edx
f012c572:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012c578:	01 c2                	add    %eax,%edx
f012c57a:	8a 45 ce             	mov    -0x32(%ebp),%al
f012c57d:	88 02                	mov    %al,(%edx)

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f012c57f:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012c585:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012c58b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012c592:	eb 11                	jmp    f012c5a5 <test_krealloc_BF+0x96c>
			ptr[i] = 2;
f012c594:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012c597:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012c59d:	01 d0                	add    %edx,%eax
f012c59f:	c6 00 02             	movb   $0x2,(%eax)
		byteArr[0] = minByte;
		byteArr[lastIndexOfByte] = maxByte;

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012c5a2:	ff 45 f4             	incl   -0xc(%ebp)
f012c5a5:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012c5ab:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012c5ae:	7d e4                	jge    f012c594 <test_krealloc_BF+0x95b>
			ptr[i] = 2;
		}

		//In 3rd 1 MB
		intArr = (int*) ptr_allocations[2];
f012c5b0:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f012c5b6:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
		intArr[0] = 3;
f012c5bc:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012c5c2:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
		intArr[lastIndices[2]] = 3;
f012c5c8:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012c5ce:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012c5d5:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012c5db:	01 d0                	add    %edx,%eax
f012c5dd:	c7 00 03 00 00 00    	movl   $0x3,(%eax)

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
f012c5e3:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012c5e9:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012c5ef:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f012c5f6:	eb 1b                	jmp    f012c613 <test_krealloc_BF+0x9da>
			intArr[i] = 4;
f012c5f8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012c5fb:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012c602:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012c608:	01 d0                	add    %edx,%eax
f012c60a:	c7 00 04 00 00 00    	movl   $0x4,(%eax)
		intArr[0] = 3;
		intArr[lastIndices[2]] = 3;

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012c610:	ff 45 f0             	incl   -0x10(%ebp)
f012c613:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012c619:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012c61c:	7d da                	jge    f012c5f8 <test_krealloc_BF+0x9bf>
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f012c61e:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012c624:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012c62a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f012c631:	eb 17                	jmp    f012c64a <test_krealloc_BF+0xa11>
			shortArr[i] = 5;
f012c633:	8b 45 ec             	mov    -0x14(%ebp),%eax
f012c636:	01 c0                	add    %eax,%eax
f012c638:	89 c2                	mov    %eax,%edx
f012c63a:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012c640:	01 d0                	add    %edx,%eax
f012c642:	66 c7 00 05 00       	movw   $0x5,(%eax)
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012c647:	ff 45 ec             	incl   -0x14(%ebp)
f012c64a:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012c650:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f012c653:	7d de                	jge    f012c633 <test_krealloc_BF+0x9fa>
			shortArr[i] = 5;
		}

		//In the 2nd 2 MB
		shortArr = (short*) ptr_allocations[5];
f012c655:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012c65b:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
		shortArr[0] = 6;
f012c661:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012c667:	66 c7 00 06 00       	movw   $0x6,(%eax)
		shortArr[lastIndices[5]] = 6;
f012c66c:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012c672:	01 c0                	add    %eax,%eax
f012c674:	89 c2                	mov    %eax,%edx
f012c676:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012c67c:	01 d0                	add    %edx,%eax
f012c67e:	66 c7 00 06 00       	movw   $0x6,(%eax)

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
f012c683:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012c689:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
		for (int i = 0; i <= lastIndices[6]; i++) {
f012c68f:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f012c696:	eb 49                	jmp    f012c6e1 <test_krealloc_BF+0xaa8>
			structArr[i].a = 7;
f012c698:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012c69b:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c6a2:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c6a8:	01 d0                	add    %edx,%eax
f012c6aa:	c6 00 07             	movb   $0x7,(%eax)
			structArr[i].b = 7;
f012c6ad:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012c6b0:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c6b7:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c6bd:	01 d0                	add    %edx,%eax
f012c6bf:	66 c7 40 02 07 00    	movw   $0x7,0x2(%eax)
			structArr[i].c = 7;
f012c6c5:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012c6c8:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c6cf:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c6d5:	01 d0                	add    %edx,%eax
f012c6d7:	c7 40 04 07 00 00 00 	movl   $0x7,0x4(%eax)
		shortArr[0] = 6;
		shortArr[lastIndices[5]] = 6;

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
		for (int i = 0; i <= lastIndices[6]; i++) {
f012c6de:	ff 45 e8             	incl   -0x18(%ebp)
f012c6e1:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012c6e7:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f012c6ea:	7d ac                	jge    f012c698 <test_krealloc_BF+0xa5f>
			structArr[i].b = 7;
			structArr[i].c = 7;
		}

		//In the last 3 MB
		structArr = (struct MyStruct*) ptr_allocations[7];
f012c6ec:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012c6f2:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
		structArr[0].a = 8;
f012c6f8:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c6fe:	c6 00 08             	movb   $0x8,(%eax)
		structArr[0].b = 8;
f012c701:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c707:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[0].c = 8;
f012c70d:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c713:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)
		structArr[lastIndices[7]].a = 8;
f012c71a:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012c720:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c727:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c72d:	01 d0                	add    %edx,%eax
f012c72f:	c6 00 08             	movb   $0x8,(%eax)
		structArr[lastIndices[7]].b = 8;
f012c732:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012c738:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c73f:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c745:	01 d0                	add    %edx,%eax
f012c747:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[lastIndices[7]].c = 8;
f012c74d:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012c753:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c75a:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c760:	01 d0                	add    %edx,%eax
f012c762:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)

		//Read values: check that the values are successfully written
		if (byteArr[0] != minByte || byteArr[lastIndices[0]] != maxByte)
f012c769:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012c76f:	8a 00                	mov    (%eax),%al
f012c771:	3a 45 cf             	cmp    -0x31(%ebp),%al
f012c774:	75 17                	jne    f012c78d <test_krealloc_BF+0xb54>
f012c776:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012c77c:	89 c2                	mov    %eax,%edx
f012c77e:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012c784:	01 d0                	add    %edx,%eax
f012c786:	8a 00                	mov    (%eax),%al
f012c788:	3a 45 ce             	cmp    -0x32(%ebp),%al
f012c78b:	74 17                	je     f012c7a4 <test_krealloc_BF+0xb6b>
			panic(
f012c78d:	83 ec 04             	sub    $0x4,%esp
f012c790:	68 8c aa 13 f0       	push   $0xf013aa8c
f012c795:	68 b1 11 00 00       	push   $0x11b1
f012c79a:	68 5a 97 13 f0       	push   $0xf013975a
f012c79f:	e8 0c 3a fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		ptr = (char*) ptr_allocations[1];
f012c7a4:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012c7aa:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
		if (ptr[0] != 2 || ptr[lastIndices[1]] != 2)
f012c7b0:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012c7b6:	8a 00                	mov    (%eax),%al
f012c7b8:	3c 02                	cmp    $0x2,%al
f012c7ba:	75 16                	jne    f012c7d2 <test_krealloc_BF+0xb99>
f012c7bc:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012c7c2:	89 c2                	mov    %eax,%edx
f012c7c4:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012c7ca:	01 d0                	add    %edx,%eax
f012c7cc:	8a 00                	mov    (%eax),%al
f012c7ce:	3c 02                	cmp    $0x2,%al
f012c7d0:	74 20                	je     f012c7f2 <test_krealloc_BF+0xbb9>
			panic(
f012c7d2:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012c7d8:	8a 00                	mov    (%eax),%al
f012c7da:	0f be c0             	movsbl %al,%eax
f012c7dd:	50                   	push   %eax
f012c7de:	68 cc aa 13 f0       	push   $0xf013aacc
f012c7e3:	68 b7 11 00 00       	push   $0x11b7
f012c7e8:	68 5a 97 13 f0       	push   $0xf013975a
f012c7ed:	e8 be 39 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!, char = %c",
					ptr[0]);

		intArr = (int*) ptr_allocations[2];
f012c7f2:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f012c7f8:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
		if (intArr[0] != 3 || intArr[lastIndices[2]] != 3)
f012c7fe:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012c804:	8b 00                	mov    (%eax),%eax
f012c806:	83 f8 03             	cmp    $0x3,%eax
f012c809:	75 1c                	jne    f012c827 <test_krealloc_BF+0xbee>
f012c80b:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012c811:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012c818:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012c81e:	01 d0                	add    %edx,%eax
f012c820:	8b 00                	mov    (%eax),%eax
f012c822:	83 f8 03             	cmp    $0x3,%eax
f012c825:	74 17                	je     f012c83e <test_krealloc_BF+0xc05>
			panic("Wrong allocation stored values are wrongly changed!");
f012c827:	83 ec 04             	sub    $0x4,%esp
f012c82a:	68 18 ab 13 f0       	push   $0xf013ab18
f012c82f:	68 bb 11 00 00       	push   $0x11bb
f012c834:	68 5a 97 13 f0       	push   $0xf013975a
f012c839:	e8 72 39 fd ff       	call   f01001b0 <_panic>

		intArr = (int*) ptr_allocations[3];
f012c83e:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012c844:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
		if (intArr[0] != 4 || intArr[lastIndices[3]] != 4)
f012c84a:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012c850:	8b 00                	mov    (%eax),%eax
f012c852:	83 f8 04             	cmp    $0x4,%eax
f012c855:	75 1c                	jne    f012c873 <test_krealloc_BF+0xc3a>
f012c857:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012c85d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012c864:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012c86a:	01 d0                	add    %edx,%eax
f012c86c:	8b 00                	mov    (%eax),%eax
f012c86e:	83 f8 04             	cmp    $0x4,%eax
f012c871:	74 17                	je     f012c88a <test_krealloc_BF+0xc51>
			panic(
f012c873:	83 ec 04             	sub    $0x4,%esp
f012c876:	68 8c aa 13 f0       	push   $0xf013aa8c
f012c87b:	68 c0 11 00 00       	push   $0x11c0
f012c880:	68 5a 97 13 f0       	push   $0xf013975a
f012c885:	e8 26 39 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[4];
f012c88a:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012c890:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
		if (shortArr[0] != 5 || shortArr[lastIndices[4]] != 5)
f012c896:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012c89c:	66 8b 00             	mov    (%eax),%ax
f012c89f:	66 83 f8 05          	cmp    $0x5,%ax
f012c8a3:	75 1b                	jne    f012c8c0 <test_krealloc_BF+0xc87>
f012c8a5:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012c8ab:	01 c0                	add    %eax,%eax
f012c8ad:	89 c2                	mov    %eax,%edx
f012c8af:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012c8b5:	01 d0                	add    %edx,%eax
f012c8b7:	66 8b 00             	mov    (%eax),%ax
f012c8ba:	66 83 f8 05          	cmp    $0x5,%ax
f012c8be:	74 17                	je     f012c8d7 <test_krealloc_BF+0xc9e>
			panic(
f012c8c0:	83 ec 04             	sub    $0x4,%esp
f012c8c3:	68 8c aa 13 f0       	push   $0xf013aa8c
f012c8c8:	68 c5 11 00 00       	push   $0x11c5
f012c8cd:	68 5a 97 13 f0       	push   $0xf013975a
f012c8d2:	e8 d9 38 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[5];
f012c8d7:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012c8dd:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
		if (shortArr[0] != 6 || shortArr[lastIndices[5]] != 6)
f012c8e3:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012c8e9:	66 8b 00             	mov    (%eax),%ax
f012c8ec:	66 83 f8 06          	cmp    $0x6,%ax
f012c8f0:	75 1b                	jne    f012c90d <test_krealloc_BF+0xcd4>
f012c8f2:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012c8f8:	01 c0                	add    %eax,%eax
f012c8fa:	89 c2                	mov    %eax,%edx
f012c8fc:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012c902:	01 d0                	add    %edx,%eax
f012c904:	66 8b 00             	mov    (%eax),%ax
f012c907:	66 83 f8 06          	cmp    $0x6,%ax
f012c90b:	74 17                	je     f012c924 <test_krealloc_BF+0xceb>
			panic(
f012c90d:	83 ec 04             	sub    $0x4,%esp
f012c910:	68 8c aa 13 f0       	push   $0xf013aa8c
f012c915:	68 ca 11 00 00       	push   $0x11ca
f012c91a:	68 5a 97 13 f0       	push   $0xf013975a
f012c91f:	e8 8c 38 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[6];
f012c924:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012c92a:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
		if (structArr[0].a != 7 || structArr[lastIndices[6]].a != 7)
f012c930:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c936:	8a 00                	mov    (%eax),%al
f012c938:	3c 07                	cmp    $0x7,%al
f012c93a:	75 1b                	jne    f012c957 <test_krealloc_BF+0xd1e>
f012c93c:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012c942:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c949:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c94f:	01 d0                	add    %edx,%eax
f012c951:	8a 00                	mov    (%eax),%al
f012c953:	3c 07                	cmp    $0x7,%al
f012c955:	74 17                	je     f012c96e <test_krealloc_BF+0xd35>
			panic(
f012c957:	83 ec 04             	sub    $0x4,%esp
f012c95a:	68 8c aa 13 f0       	push   $0xf013aa8c
f012c95f:	68 cf 11 00 00       	push   $0x11cf
f012c964:	68 5a 97 13 f0       	push   $0xf013975a
f012c969:	e8 42 38 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 7 || structArr[lastIndices[6]].b != 7)
f012c96e:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c974:	66 8b 40 02          	mov    0x2(%eax),%ax
f012c978:	66 83 f8 07          	cmp    $0x7,%ax
f012c97c:	75 1f                	jne    f012c99d <test_krealloc_BF+0xd64>
f012c97e:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012c984:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c98b:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c991:	01 d0                	add    %edx,%eax
f012c993:	66 8b 40 02          	mov    0x2(%eax),%ax
f012c997:	66 83 f8 07          	cmp    $0x7,%ax
f012c99b:	74 17                	je     f012c9b4 <test_krealloc_BF+0xd7b>
			panic(
f012c99d:	83 ec 04             	sub    $0x4,%esp
f012c9a0:	68 8c aa 13 f0       	push   $0xf013aa8c
f012c9a5:	68 d2 11 00 00       	push   $0x11d2
f012c9aa:	68 5a 97 13 f0       	push   $0xf013975a
f012c9af:	e8 fc 37 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 7 || structArr[lastIndices[6]].c != 7)
f012c9b4:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c9ba:	8b 40 04             	mov    0x4(%eax),%eax
f012c9bd:	83 f8 07             	cmp    $0x7,%eax
f012c9c0:	75 1d                	jne    f012c9df <test_krealloc_BF+0xda6>
f012c9c2:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012c9c8:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c9cf:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012c9d5:	01 d0                	add    %edx,%eax
f012c9d7:	8b 40 04             	mov    0x4(%eax),%eax
f012c9da:	83 f8 07             	cmp    $0x7,%eax
f012c9dd:	74 17                	je     f012c9f6 <test_krealloc_BF+0xdbd>
			panic(
f012c9df:	83 ec 04             	sub    $0x4,%esp
f012c9e2:	68 8c aa 13 f0       	push   $0xf013aa8c
f012c9e7:	68 d5 11 00 00       	push   $0x11d5
f012c9ec:	68 5a 97 13 f0       	push   $0xf013975a
f012c9f1:	e8 ba 37 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[7];
f012c9f6:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012c9fc:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
		if (structArr[0].a != 8 || structArr[lastIndices[7]].a != 8)
f012ca02:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012ca08:	8a 00                	mov    (%eax),%al
f012ca0a:	3c 08                	cmp    $0x8,%al
f012ca0c:	75 1b                	jne    f012ca29 <test_krealloc_BF+0xdf0>
f012ca0e:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012ca14:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012ca1b:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012ca21:	01 d0                	add    %edx,%eax
f012ca23:	8a 00                	mov    (%eax),%al
f012ca25:	3c 08                	cmp    $0x8,%al
f012ca27:	74 17                	je     f012ca40 <test_krealloc_BF+0xe07>
			panic(
f012ca29:	83 ec 04             	sub    $0x4,%esp
f012ca2c:	68 8c aa 13 f0       	push   $0xf013aa8c
f012ca31:	68 da 11 00 00       	push   $0x11da
f012ca36:	68 5a 97 13 f0       	push   $0xf013975a
f012ca3b:	e8 70 37 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 8 || structArr[lastIndices[7]].b != 8)
f012ca40:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012ca46:	66 8b 40 02          	mov    0x2(%eax),%ax
f012ca4a:	66 83 f8 08          	cmp    $0x8,%ax
f012ca4e:	75 1f                	jne    f012ca6f <test_krealloc_BF+0xe36>
f012ca50:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012ca56:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012ca5d:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012ca63:	01 d0                	add    %edx,%eax
f012ca65:	66 8b 40 02          	mov    0x2(%eax),%ax
f012ca69:	66 83 f8 08          	cmp    $0x8,%ax
f012ca6d:	74 17                	je     f012ca86 <test_krealloc_BF+0xe4d>
			panic(
f012ca6f:	83 ec 04             	sub    $0x4,%esp
f012ca72:	68 8c aa 13 f0       	push   $0xf013aa8c
f012ca77:	68 dd 11 00 00       	push   $0x11dd
f012ca7c:	68 5a 97 13 f0       	push   $0xf013975a
f012ca81:	e8 2a 37 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 8 || structArr[lastIndices[7]].c != 8)
f012ca86:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012ca8c:	8b 40 04             	mov    0x4(%eax),%eax
f012ca8f:	83 f8 08             	cmp    $0x8,%eax
f012ca92:	75 1d                	jne    f012cab1 <test_krealloc_BF+0xe78>
f012ca94:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012ca9a:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012caa1:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012caa7:	01 d0                	add    %edx,%eax
f012caa9:	8b 40 04             	mov    0x4(%eax),%eax
f012caac:	83 f8 08             	cmp    $0x8,%eax
f012caaf:	74 17                	je     f012cac8 <test_krealloc_BF+0xe8f>
			panic(
f012cab1:	83 ec 04             	sub    $0x4,%esp
f012cab4:	68 8c aa 13 f0       	push   $0xf013aa8c
f012cab9:	68 e0 11 00 00       	push   $0x11e0
f012cabe:	68 5a 97 13 f0       	push   $0xf013975a
f012cac3:	e8 e8 36 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		if ((freeFrames - sys_calculate_free_frames()) != 0)
f012cac8:	e8 f9 fe fd ff       	call   f010c9c6 <sys_calculate_free_frames>
f012cacd:	89 c2                	mov    %eax,%edx
f012cacf:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012cad2:	39 c2                	cmp    %eax,%edx
f012cad4:	74 17                	je     f012caed <test_krealloc_BF+0xeb4>
			panic(
f012cad6:	83 ec 04             	sub    $0x4,%esp
f012cad9:	68 4c ab 13 f0       	push   $0xf013ab4c
f012cade:	68 e4 11 00 00       	push   $0x11e4
f012cae3:	68 5a 97 13 f0       	push   $0xf013975a
f012cae8:	e8 c3 36 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation pages are not loaded successfully into memory");

	}
	cprintf("\nkrealloc: current evaluation = 10%");
f012caed:	83 ec 0c             	sub    $0xc,%esp
f012caf0:	68 98 ab 13 f0       	push   $0xf013ab98
f012caf5:	e8 37 43 fd ff       	call   f0100e31 <cprintf>
f012cafa:	83 c4 10             	add    $0x10,%esp

	//[3] Test krealloc by passing size = 0
	{
		//kfree 1st 1 MB
		freeFrames = sys_calculate_free_frames();
f012cafd:	e8 c4 fe fd ff       	call   f010c9c6 <sys_calculate_free_frames>
f012cb02:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012cb05:	e8 7a 7b fd ff       	call   f0104684 <pf_calculate_free_frames>
f012cb0a:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
		krealloc(ptr_allocations[0], 0);
f012cb10:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f012cb16:	83 ec 08             	sub    $0x8,%esp
f012cb19:	6a 00                	push   $0x0
f012cb1b:	50                   	push   %eax
f012cb1c:	e8 f4 b4 fd ff       	call   f0108015 <krealloc>
f012cb21:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012cb24:	e8 5b 7b fd ff       	call   f0104684 <pf_calculate_free_frames>
f012cb29:	3b 85 1c ff ff ff    	cmp    -0xe4(%ebp),%eax
f012cb2f:	74 17                	je     f012cb48 <test_krealloc_BF+0xf0f>
			panic(
f012cb31:	83 ec 04             	sub    $0x4,%esp
f012cb34:	68 bc ab 13 f0       	push   $0xf013abbc
f012cb39:	68 f1 11 00 00       	push   $0x11f1
f012cb3e:	68 5a 97 13 f0       	push   $0xf013975a
f012cb43:	e8 68 36 fd ff       	call   f01001b0 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012cb48:	e8 79 fe fd ff       	call   f010c9c6 <sys_calculate_free_frames>
f012cb4d:	89 c2                	mov    %eax,%edx
f012cb4f:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012cb52:	29 c2                	sub    %eax,%edx
f012cb54:	89 d0                	mov    %edx,%eax
f012cb56:	3d 00 01 00 00       	cmp    $0x100,%eax
f012cb5b:	74 17                	je     f012cb74 <test_krealloc_BF+0xf3b>
			panic("krealloc: pages in memory are not freed correctly");
f012cb5d:	83 ec 04             	sub    $0x4,%esp
f012cb60:	68 30 ac 13 f0       	push   $0xf013ac30
f012cb65:	68 f3 11 00 00       	push   $0x11f3
f012cb6a:	68 5a 97 13 f0       	push   $0xf013975a
f012cb6f:	e8 3c 36 fd ff       	call   f01001b0 <_panic>

		//kfree 3rd 1 MB
		freeFrames = sys_calculate_free_frames();
f012cb74:	e8 4d fe fd ff       	call   f010c9c6 <sys_calculate_free_frames>
f012cb79:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012cb7c:	e8 03 7b fd ff       	call   f0104684 <pf_calculate_free_frames>
f012cb81:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)

		krealloc(ptr_allocations[2], 0);
f012cb87:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f012cb8d:	83 ec 08             	sub    $0x8,%esp
f012cb90:	6a 00                	push   $0x0
f012cb92:	50                   	push   %eax
f012cb93:	e8 7d b4 fd ff       	call   f0108015 <krealloc>
f012cb98:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012cb9b:	e8 e4 7a fd ff       	call   f0104684 <pf_calculate_free_frames>
f012cba0:	3b 85 1c ff ff ff    	cmp    -0xe4(%ebp),%eax
f012cba6:	74 17                	je     f012cbbf <test_krealloc_BF+0xf86>
			panic(
f012cba8:	83 ec 04             	sub    $0x4,%esp
f012cbab:	68 bc ab 13 f0       	push   $0xf013abbc
f012cbb0:	68 fc 11 00 00       	push   $0x11fc
f012cbb5:	68 5a 97 13 f0       	push   $0xf013975a
f012cbba:	e8 f1 35 fd ff       	call   f01001b0 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012cbbf:	e8 02 fe fd ff       	call   f010c9c6 <sys_calculate_free_frames>
f012cbc4:	89 c2                	mov    %eax,%edx
f012cbc6:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012cbc9:	29 c2                	sub    %eax,%edx
f012cbcb:	89 d0                	mov    %edx,%eax
f012cbcd:	3d 00 01 00 00       	cmp    $0x100,%eax
f012cbd2:	74 17                	je     f012cbeb <test_krealloc_BF+0xfb2>
			panic("krealloc: pages in memory are not freed correctly");
f012cbd4:	83 ec 04             	sub    $0x4,%esp
f012cbd7:	68 30 ac 13 f0       	push   $0xf013ac30
f012cbdc:	68 fe 11 00 00       	push   $0x11fe
f012cbe1:	68 5a 97 13 f0       	push   $0xf013975a
f012cbe6:	e8 c5 35 fd ff       	call   f01001b0 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames();
f012cbeb:	e8 d6 fd fd ff       	call   f010c9c6 <sys_calculate_free_frames>
f012cbf0:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012cbf3:	e8 8c 7a fd ff       	call   f0104684 <pf_calculate_free_frames>
f012cbf8:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
		krealloc(ptr_allocations[5], 0);
f012cbfe:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012cc04:	83 ec 08             	sub    $0x8,%esp
f012cc07:	6a 00                	push   $0x0
f012cc09:	50                   	push   %eax
f012cc0a:	e8 06 b4 fd ff       	call   f0108015 <krealloc>
f012cc0f:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012cc12:	e8 6d 7a fd ff       	call   f0104684 <pf_calculate_free_frames>
f012cc17:	3b 85 1c ff ff ff    	cmp    -0xe4(%ebp),%eax
f012cc1d:	74 17                	je     f012cc36 <test_krealloc_BF+0xffd>
			panic(
f012cc1f:	83 ec 04             	sub    $0x4,%esp
f012cc22:	68 74 97 13 f0       	push   $0xf0139774
f012cc27:	68 06 12 00 00       	push   $0x1206
f012cc2c:	68 5a 97 13 f0       	push   $0xf013975a
f012cc31:	e8 7a 35 fd ff       	call   f01001b0 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 2 * Mega / PAGE_SIZE)
f012cc36:	e8 8b fd fd ff       	call   f010c9c6 <sys_calculate_free_frames>
f012cc3b:	89 c2                	mov    %eax,%edx
f012cc3d:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012cc40:	29 c2                	sub    %eax,%edx
f012cc42:	89 d0                	mov    %edx,%eax
f012cc44:	3d 00 02 00 00       	cmp    $0x200,%eax
f012cc49:	74 17                	je     f012cc62 <test_krealloc_BF+0x1029>
			panic("krealloc: pages in memory are not freed correctly");
f012cc4b:	83 ec 04             	sub    $0x4,%esp
f012cc4e:	68 30 ac 13 f0       	push   $0xf013ac30
f012cc53:	68 08 12 00 00       	push   $0x1208
f012cc58:	68 5a 97 13 f0       	push   $0xf013975a
f012cc5d:	e8 4e 35 fd ff       	call   f01001b0 <_panic>

		//kfree last 3 MB
		freeFrames = sys_calculate_free_frames();
f012cc62:	e8 5f fd fd ff       	call   f010c9c6 <sys_calculate_free_frames>
f012cc67:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012cc6a:	e8 15 7a fd ff       	call   f0104684 <pf_calculate_free_frames>
f012cc6f:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
		krealloc(ptr_allocations[7], 0);
f012cc75:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012cc7b:	83 ec 08             	sub    $0x8,%esp
f012cc7e:	6a 00                	push   $0x0
f012cc80:	50                   	push   %eax
f012cc81:	e8 8f b3 fd ff       	call   f0108015 <krealloc>
f012cc86:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012cc89:	e8 f6 79 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012cc8e:	3b 85 1c ff ff ff    	cmp    -0xe4(%ebp),%eax
f012cc94:	74 17                	je     f012ccad <test_krealloc_BF+0x1074>
			panic(
f012cc96:	83 ec 04             	sub    $0x4,%esp
f012cc99:	68 bc ab 13 f0       	push   $0xf013abbc
f012cc9e:	68 10 12 00 00       	push   $0x1210
f012cca3:	68 5a 97 13 f0       	push   $0xf013975a
f012cca8:	e8 03 35 fd ff       	call   f01001b0 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 3 * Mega / PAGE_SIZE)
f012ccad:	e8 14 fd fd ff       	call   f010c9c6 <sys_calculate_free_frames>
f012ccb2:	89 c2                	mov    %eax,%edx
f012ccb4:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012ccb7:	29 c2                	sub    %eax,%edx
f012ccb9:	89 d0                	mov    %edx,%eax
f012ccbb:	3d 00 03 00 00       	cmp    $0x300,%eax
f012ccc0:	74 17                	je     f012ccd9 <test_krealloc_BF+0x10a0>
			panic(
f012ccc2:	83 ec 04             	sub    $0x4,%esp
f012ccc5:	68 64 ac 13 f0       	push   $0xf013ac64
f012ccca:	68 13 12 00 00       	push   $0x1213
f012cccf:	68 5a 97 13 f0       	push   $0xf013975a
f012ccd4:	e8 d7 34 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012ccd9:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
f012cce0:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f012cce7:	eb 48                	jmp    f012cd31 <test_krealloc_BF+0x10f8>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f012cce9:	8b 55 e0             	mov    -0x20(%ebp),%edx
f012ccec:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f012ccf1:	83 ec 04             	sub    $0x4,%esp
f012ccf4:	8d 8d f4 fd ff ff    	lea    -0x20c(%ebp),%ecx
f012ccfa:	51                   	push   %ecx
f012ccfb:	52                   	push   %edx
f012ccfc:	50                   	push   %eax
f012ccfd:	e8 e5 a7 fd ff       	call   f01074e7 <get_page_table>
f012cd02:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f012cd05:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012cd0b:	85 c0                	test   %eax,%eax
f012cd0d:	75 17                	jne    f012cd26 <test_krealloc_BF+0x10ed>
					panic(
f012cd0f:	83 ec 04             	sub    $0x4,%esp
f012cd12:	68 5c a0 13 f0       	push   $0xf013a05c
f012cd17:	68 1f 12 00 00       	push   $0x121f
f012cd1c:	68 5a 97 13 f0       	push   $0xf013975a
f012cd21:	e8 8a 34 fd ff       	call   f01001b0 <_panic>
			panic(
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012cd26:	81 45 e0 00 00 40 00 	addl   $0x400000,-0x20(%ebp)
f012cd2d:	83 55 e4 00          	adcl   $0x0,-0x1c(%ebp)
f012cd31:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012cd35:	78 b2                	js     f012cce9 <test_krealloc_BF+0x10b0>
f012cd37:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012cd3b:	7f 09                	jg     f012cd46 <test_krealloc_BF+0x110d>
f012cd3d:	81 7d e0 ff ef ff ff 	cmpl   $0xffffefff,-0x20(%ebp)
f012cd44:	76 a3                	jbe    f012cce9 <test_krealloc_BF+0x10b0>
							"Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
				}
			}
		}
	}
	cprintf("\b\b\b20%");
f012cd46:	83 ec 0c             	sub    $0xc,%esp
f012cd49:	68 a3 ac 13 f0       	push   $0xf013aca3
f012cd4e:	e8 de 40 fd ff       	call   f0100e31 <cprintf>
f012cd53:	83 c4 10             	add    $0x10,%esp
	//Check memory access after kfree by checking sum
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
f012cd56:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012cd5c:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012cd62:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012cd69:	eb 21                	jmp    f012cd8c <test_krealloc_BF+0x1153>
			sums[0] += ptr[i];
f012cd6b:	8b 95 f8 fd ff ff    	mov    -0x208(%ebp),%edx
f012cd71:	8b 4d dc             	mov    -0x24(%ebp),%ecx
f012cd74:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012cd7a:	01 c8                	add    %ecx,%eax
f012cd7c:	8a 00                	mov    (%eax),%al
f012cd7e:	0f be c0             	movsbl %al,%eax
f012cd81:	01 d0                	add    %edx,%eax
f012cd83:	89 85 f8 fd ff ff    	mov    %eax,-0x208(%ebp)
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012cd89:	ff 45 dc             	incl   -0x24(%ebp)
f012cd8c:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012cd92:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012cd95:	7d d4                	jge    f012cd6b <test_krealloc_BF+0x1132>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012cd97:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f012cd9d:	8b 95 4c fe ff ff    	mov    -0x1b4(%ebp),%edx
f012cda3:	42                   	inc    %edx
f012cda4:	01 d2                	add    %edx,%edx
f012cda6:	39 d0                	cmp    %edx,%eax
f012cda8:	74 17                	je     f012cdc1 <test_krealloc_BF+0x1188>
			panic("krealloc: invalid read after freeing some allocations");
f012cdaa:	83 ec 04             	sub    $0x4,%esp
f012cdad:	68 ac ac 13 f0       	push   $0xf013acac
f012cdb2:	68 31 12 00 00       	push   $0x1231
f012cdb7:	68 5a 97 13 f0       	push   $0xf013975a
f012cdbc:	e8 ef 33 fd ff       	call   f01001b0 <_panic>

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];
f012cdc1:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012cdc7:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)

		for (i = 0; i <= lastIndices[3]; ++i) {
f012cdcd:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012cdd4:	eb 25                	jmp    f012cdfb <test_krealloc_BF+0x11c2>
			sums[1] += intArr[i];
f012cdd6:	8b 95 fc fd ff ff    	mov    -0x204(%ebp),%edx
f012cddc:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012cddf:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f012cde6:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012cdec:	01 c8                	add    %ecx,%eax
f012cdee:	8b 00                	mov    (%eax),%eax
f012cdf0:	01 d0                	add    %edx,%eax
f012cdf2:	89 85 fc fd ff ff    	mov    %eax,-0x204(%ebp)

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];

		for (i = 0; i <= lastIndices[3]; ++i) {
f012cdf8:	ff 45 dc             	incl   -0x24(%ebp)
f012cdfb:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012ce01:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012ce04:	7d d0                	jge    f012cdd6 <test_krealloc_BF+0x119d>
			sums[1] += intArr[i];
		}
		if (sums[1] != (lastIndices[3] + 1) * 4)
f012ce06:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f012ce0c:	8b 95 54 fe ff ff    	mov    -0x1ac(%ebp),%edx
f012ce12:	42                   	inc    %edx
f012ce13:	c1 e2 02             	shl    $0x2,%edx
f012ce16:	39 d0                	cmp    %edx,%eax
f012ce18:	74 17                	je     f012ce31 <test_krealloc_BF+0x11f8>
			panic("krealloc: invalid read after freeing some allocations");
f012ce1a:	83 ec 04             	sub    $0x4,%esp
f012ce1d:	68 ac ac 13 f0       	push   $0xf013acac
f012ce22:	68 3b 12 00 00       	push   $0x123b
f012ce27:	68 5a 97 13 f0       	push   $0xf013975a
f012ce2c:	e8 7f 33 fd ff       	call   f01001b0 <_panic>

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];
f012ce31:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012ce37:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)

		for (i = 0; i <= lastIndices[4]; ++i) {
f012ce3d:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012ce44:	eb 24                	jmp    f012ce6a <test_krealloc_BF+0x1231>
			sums[2] += shortArr[i];
f012ce46:	8b 95 00 fe ff ff    	mov    -0x200(%ebp),%edx
f012ce4c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012ce4f:	01 c0                	add    %eax,%eax
f012ce51:	89 c1                	mov    %eax,%ecx
f012ce53:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012ce59:	01 c8                	add    %ecx,%eax
f012ce5b:	66 8b 00             	mov    (%eax),%ax
f012ce5e:	98                   	cwtl   
f012ce5f:	01 d0                	add    %edx,%eax
f012ce61:	89 85 00 fe ff ff    	mov    %eax,-0x200(%ebp)

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];

		for (i = 0; i <= lastIndices[4]; ++i) {
f012ce67:	ff 45 dc             	incl   -0x24(%ebp)
f012ce6a:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012ce70:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012ce73:	7d d1                	jge    f012ce46 <test_krealloc_BF+0x120d>
			sums[2] += shortArr[i];
		}
		if (sums[2] != (lastIndices[4] + 1) * 5)
f012ce75:	8b 95 00 fe ff ff    	mov    -0x200(%ebp),%edx
f012ce7b:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012ce81:	8d 48 01             	lea    0x1(%eax),%ecx
f012ce84:	89 c8                	mov    %ecx,%eax
f012ce86:	c1 e0 02             	shl    $0x2,%eax
f012ce89:	01 c8                	add    %ecx,%eax
f012ce8b:	39 c2                	cmp    %eax,%edx
f012ce8d:	74 17                	je     f012cea6 <test_krealloc_BF+0x126d>
			panic("krealloc: invalid read after freeing some allocations");
f012ce8f:	83 ec 04             	sub    $0x4,%esp
f012ce92:	68 ac ac 13 f0       	push   $0xf013acac
f012ce97:	68 45 12 00 00       	push   $0x1245
f012ce9c:	68 5a 97 13 f0       	push   $0xf013975a
f012cea1:	e8 0a 33 fd ff       	call   f01001b0 <_panic>

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];
f012cea6:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012ceac:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)

		for (i = 0; i <= lastIndices[6]; ++i) {
f012ceb2:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012ceb9:	eb 70                	jmp    f012cf2b <test_krealloc_BF+0x12f2>
			sums[3] += structArr[i].a;
f012cebb:	8b 95 04 fe ff ff    	mov    -0x1fc(%ebp),%edx
f012cec1:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012cec4:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012cecb:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012ced1:	01 c8                	add    %ecx,%eax
f012ced3:	8a 00                	mov    (%eax),%al
f012ced5:	0f be c0             	movsbl %al,%eax
f012ced8:	01 d0                	add    %edx,%eax
f012ceda:	89 85 04 fe ff ff    	mov    %eax,-0x1fc(%ebp)
			sums[4] += structArr[i].b;
f012cee0:	8b 95 08 fe ff ff    	mov    -0x1f8(%ebp),%edx
f012cee6:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012cee9:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012cef0:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012cef6:	01 c8                	add    %ecx,%eax
f012cef8:	66 8b 40 02          	mov    0x2(%eax),%ax
f012cefc:	98                   	cwtl   
f012cefd:	01 d0                	add    %edx,%eax
f012ceff:	89 85 08 fe ff ff    	mov    %eax,-0x1f8(%ebp)
			sums[5] += structArr[i].c;
f012cf05:	8b 95 0c fe ff ff    	mov    -0x1f4(%ebp),%edx
f012cf0b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012cf0e:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012cf15:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012cf1b:	01 c8                	add    %ecx,%eax
f012cf1d:	8b 40 04             	mov    0x4(%eax),%eax
f012cf20:	01 d0                	add    %edx,%eax
f012cf22:	89 85 0c fe ff ff    	mov    %eax,-0x1f4(%ebp)

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];

		for (i = 0; i <= lastIndices[6]; ++i) {
f012cf28:	ff 45 dc             	incl   -0x24(%ebp)
f012cf2b:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012cf31:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012cf34:	7d 85                	jge    f012cebb <test_krealloc_BF+0x1282>
			sums[3] += structArr[i].a;
			sums[4] += structArr[i].b;
			sums[5] += structArr[i].c;
		}
		if (sums[3] != (lastIndices[6] + 1) * 7
f012cf36:	8b 8d 04 fe ff ff    	mov    -0x1fc(%ebp),%ecx
f012cf3c:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012cf42:	8d 50 01             	lea    0x1(%eax),%edx
f012cf45:	89 d0                	mov    %edx,%eax
f012cf47:	01 c0                	add    %eax,%eax
f012cf49:	01 d0                	add    %edx,%eax
f012cf4b:	01 c0                	add    %eax,%eax
f012cf4d:	01 d0                	add    %edx,%eax
f012cf4f:	39 c1                	cmp    %eax,%ecx
f012cf51:	75 3a                	jne    f012cf8d <test_krealloc_BF+0x1354>
				|| sums[4] != (lastIndices[6] + 1) * 7
f012cf53:	8b 8d 08 fe ff ff    	mov    -0x1f8(%ebp),%ecx
f012cf59:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012cf5f:	8d 50 01             	lea    0x1(%eax),%edx
f012cf62:	89 d0                	mov    %edx,%eax
f012cf64:	01 c0                	add    %eax,%eax
f012cf66:	01 d0                	add    %edx,%eax
f012cf68:	01 c0                	add    %eax,%eax
f012cf6a:	01 d0                	add    %edx,%eax
f012cf6c:	39 c1                	cmp    %eax,%ecx
f012cf6e:	75 1d                	jne    f012cf8d <test_krealloc_BF+0x1354>
				|| sums[5] != (lastIndices[6] + 1) * 7)
f012cf70:	8b 8d 0c fe ff ff    	mov    -0x1f4(%ebp),%ecx
f012cf76:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012cf7c:	8d 50 01             	lea    0x1(%eax),%edx
f012cf7f:	89 d0                	mov    %edx,%eax
f012cf81:	01 c0                	add    %eax,%eax
f012cf83:	01 d0                	add    %edx,%eax
f012cf85:	01 c0                	add    %eax,%eax
f012cf87:	01 d0                	add    %edx,%eax
f012cf89:	39 c1                	cmp    %eax,%ecx
f012cf8b:	74 17                	je     f012cfa4 <test_krealloc_BF+0x136b>
			panic("krealloc: invalid read after freeing some allocations");
f012cf8d:	83 ec 04             	sub    $0x4,%esp
f012cf90:	68 ac ac 13 f0       	push   $0xf013acac
f012cf95:	68 53 12 00 00       	push   $0x1253
f012cf9a:	68 5a 97 13 f0       	push   $0xf013975a
f012cf9f:	e8 0c 32 fd ff       	call   f01001b0 <_panic>
	}

	//[4] Test krealloc reallocation with valid and invalid sizes
	{
		int freeDiskFrames;
		void* newAddress = NULL;
f012cfa4:	c7 85 18 ff ff ff 00 	movl   $0x0,-0xe8(%ebp)
f012cfab:	00 00 00 
		//Try to reallocate 2nd 1 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012cfae:	e8 13 fa fd ff       	call   f010c9c6 <sys_calculate_free_frames>
f012cfb3:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 15 * kilo);
f012cfb6:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012cfbc:	83 ec 08             	sub    $0x8,%esp
f012cfbf:	68 00 3c 00 00       	push   $0x3c00
f012cfc4:	50                   	push   %eax
f012cfc5:	e8 4b b0 fd ff       	call   f0108015 <krealloc>
f012cfca:	83 c4 10             	add    $0x10,%esp
f012cfcd:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012cfd3:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012cfd9:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012cfde:	77 17                	ja     f012cff7 <test_krealloc_BF+0x13be>
			panic("krealloc: Wrong start address for the allocated space... ");
f012cfe0:	83 ec 04             	sub    $0x4,%esp
f012cfe3:	68 00 aa 13 f0       	push   $0xf013aa00
f012cfe8:	68 5f 12 00 00       	push   $0x125f
f012cfed:	68 5a 97 13 f0       	push   $0xf013975a
f012cff2:	e8 b9 31 fd ff       	call   f01001b0 <_panic>
		if (newAddress != ptr_allocations[1])
f012cff7:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012cffd:	3b 85 18 ff ff ff    	cmp    -0xe8(%ebp),%eax
f012d003:	74 17                	je     f012d01c <test_krealloc_BF+0x13e3>
			panic(
f012d005:	83 ec 04             	sub    $0x4,%esp
f012d008:	68 e4 ac 13 f0       	push   $0xf013ace4
f012d00d:	68 62 12 00 00       	push   $0x1262
f012d012:	68 5a 97 13 f0       	push   $0xf013975a
f012d017:	e8 94 31 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012d01c:	e8 a5 f9 fd ff       	call   f010c9c6 <sys_calculate_free_frames>
f012d021:	89 c2                	mov    %eax,%edx
f012d023:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d026:	39 c2                	cmp    %eax,%edx
f012d028:	74 17                	je     f012d041 <test_krealloc_BF+0x1408>
			panic(
f012d02a:	83 ec 04             	sub    $0x4,%esp
f012d02d:	68 50 ad 13 f0       	push   $0xf013ad50
f012d032:	68 65 12 00 00       	push   $0x1265
f012d037:	68 5a 97 13 f0       	push   $0xf013975a
f012d03c:	e8 6f 31 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 1st 2 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012d041:	e8 80 f9 fd ff       	call   f010c9c6 <sys_calculate_free_frames>
f012d046:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], 1 * Mega - kilo);
f012d049:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012d04f:	83 ec 08             	sub    $0x8,%esp
f012d052:	68 00 fc 0f 00       	push   $0xffc00
f012d057:	50                   	push   %eax
f012d058:	e8 b8 af fd ff       	call   f0108015 <krealloc>
f012d05d:	83 c4 10             	add    $0x10,%esp
f012d060:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d066:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012d06c:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d071:	77 17                	ja     f012d08a <test_krealloc_BF+0x1451>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d073:	83 ec 04             	sub    $0x4,%esp
f012d076:	68 00 aa 13 f0       	push   $0xf013aa00
f012d07b:	68 6b 12 00 00       	push   $0x126b
f012d080:	68 5a 97 13 f0       	push   $0xf013975a
f012d085:	e8 26 31 fd ff       	call   f01001b0 <_panic>
		if (newAddress != ptr_allocations[4])
f012d08a:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012d090:	3b 85 18 ff ff ff    	cmp    -0xe8(%ebp),%eax
f012d096:	74 17                	je     f012d0af <test_krealloc_BF+0x1476>
			panic(
f012d098:	83 ec 04             	sub    $0x4,%esp
f012d09b:	68 e4 ac 13 f0       	push   $0xf013ace4
f012d0a0:	68 6e 12 00 00       	push   $0x126e
f012d0a5:	68 5a 97 13 f0       	push   $0xf013975a
f012d0aa:	e8 01 31 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012d0af:	e8 12 f9 fd ff       	call   f010c9c6 <sys_calculate_free_frames>
f012d0b4:	89 c2                	mov    %eax,%edx
f012d0b6:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d0b9:	39 c2                	cmp    %eax,%edx
f012d0bb:	74 17                	je     f012d0d4 <test_krealloc_BF+0x149b>
			panic(
f012d0bd:	83 ec 04             	sub    $0x4,%esp
f012d0c0:	68 50 ad 13 f0       	push   $0xf013ad50
f012d0c5:	68 71 12 00 00       	push   $0x1271
f012d0ca:	68 5a 97 13 f0       	push   $0xf013975a
f012d0cf:	e8 dc 30 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 2nd 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012d0d4:	e8 ed f8 fd ff       	call   f010c9c6 <sys_calculate_free_frames>
f012d0d9:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 1 * Mega - kilo);
f012d0dc:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012d0e2:	83 ec 08             	sub    $0x8,%esp
f012d0e5:	68 00 fc 0f 00       	push   $0xffc00
f012d0ea:	50                   	push   %eax
f012d0eb:	e8 25 af fd ff       	call   f0108015 <krealloc>
f012d0f0:	83 c4 10             	add    $0x10,%esp
f012d0f3:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d0f9:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012d0ff:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d104:	77 17                	ja     f012d11d <test_krealloc_BF+0x14e4>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d106:	83 ec 04             	sub    $0x4,%esp
f012d109:	68 00 aa 13 f0       	push   $0xf013aa00
f012d10e:	68 77 12 00 00       	push   $0x1277
f012d113:	68 5a 97 13 f0       	push   $0xf013975a
f012d118:	e8 93 30 fd ff       	call   f01001b0 <_panic>
		if (newAddress != ptr_allocations[1])
f012d11d:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012d123:	3b 85 18 ff ff ff    	cmp    -0xe8(%ebp),%eax
f012d129:	74 17                	je     f012d142 <test_krealloc_BF+0x1509>
			panic(
f012d12b:	83 ec 04             	sub    $0x4,%esp
f012d12e:	68 e4 ac 13 f0       	push   $0xf013ace4
f012d133:	68 7a 12 00 00       	push   $0x127a
f012d138:	68 5a 97 13 f0       	push   $0xf013975a
f012d13d:	e8 6e 30 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012d142:	e8 7f f8 fd ff       	call   f010c9c6 <sys_calculate_free_frames>
f012d147:	89 c2                	mov    %eax,%edx
f012d149:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d14c:	39 c2                	cmp    %eax,%edx
f012d14e:	74 17                	je     f012d167 <test_krealloc_BF+0x152e>
			panic(
f012d150:	83 ec 04             	sub    $0x4,%esp
f012d153:	68 50 ad 13 f0       	push   $0xf013ad50
f012d158:	68 7d 12 00 00       	push   $0x127d
f012d15d:	68 5a 97 13 f0       	push   $0xf013975a
f012d162:	e8 49 30 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");



		//Try to reallocate 4th 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012d167:	e8 5a f8 fd ff       	call   f010c9c6 <sys_calculate_free_frames>
f012d16c:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[3], 1 * Mega - kilo);
f012d16f:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012d175:	83 ec 08             	sub    $0x8,%esp
f012d178:	68 00 fc 0f 00       	push   $0xffc00
f012d17d:	50                   	push   %eax
f012d17e:	e8 92 ae fd ff       	call   f0108015 <krealloc>
f012d183:	83 c4 10             	add    $0x10,%esp
f012d186:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d18c:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012d192:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d197:	77 17                	ja     f012d1b0 <test_krealloc_BF+0x1577>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d199:	83 ec 04             	sub    $0x4,%esp
f012d19c:	68 00 aa 13 f0       	push   $0xf013aa00
f012d1a1:	68 85 12 00 00       	push   $0x1285
f012d1a6:	68 5a 97 13 f0       	push   $0xf013975a
f012d1ab:	e8 00 30 fd ff       	call   f01001b0 <_panic>
		if (newAddress != ptr_allocations[3])
f012d1b0:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012d1b6:	3b 85 18 ff ff ff    	cmp    -0xe8(%ebp),%eax
f012d1bc:	74 17                	je     f012d1d5 <test_krealloc_BF+0x159c>
			panic(
f012d1be:	83 ec 04             	sub    $0x4,%esp
f012d1c1:	68 94 ad 13 f0       	push   $0xf013ad94
f012d1c6:	68 88 12 00 00       	push   $0x1288
f012d1cb:	68 5a 97 13 f0       	push   $0xf013975a
f012d1d0:	e8 db 2f fd ff       	call   f01001b0 <_panic>
					"Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012d1d5:	e8 ec f7 fd ff       	call   f010c9c6 <sys_calculate_free_frames>
f012d1da:	89 c2                	mov    %eax,%edx
f012d1dc:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d1df:	39 c2                	cmp    %eax,%edx
f012d1e1:	74 17                	je     f012d1fa <test_krealloc_BF+0x15c1>
			panic(
f012d1e3:	83 ec 04             	sub    $0x4,%esp
f012d1e6:	68 50 ad 13 f0       	push   $0xf013ad50
f012d1eb:	68 8b 12 00 00       	push   $0x128b
f012d1f0:	68 5a 97 13 f0       	push   $0xf013975a
f012d1f5:	e8 b6 2f fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");
	}
	cprintf("\b\b\b30%");
f012d1fa:	83 ec 0c             	sub    $0xc,%esp
f012d1fd:	68 73 9f 13 f0       	push   $0xf0139f73
f012d202:	e8 2a 3c fd ff       	call   f0100e31 <cprintf>
f012d207:	83 c4 10             	add    $0x10,%esp
    {
		//Reallocate 2nd 1 MB to 1 MB + 7 KB
		freeFrames = sys_calculate_free_frames();
f012d20a:	e8 b7 f7 fd ff       	call   f010c9c6 <sys_calculate_free_frames>
f012d20f:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], (1 * Mega - kilo) + (7 * kilo));
f012d212:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012d218:	83 ec 08             	sub    $0x8,%esp
f012d21b:	68 00 18 10 00       	push   $0x101800
f012d220:	50                   	push   %eax
f012d221:	e8 ef ad fd ff       	call   f0108015 <krealloc>
f012d226:	83 c4 10             	add    $0x10,%esp
f012d229:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d22c:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d22f:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d234:	77 17                	ja     f012d24d <test_krealloc_BF+0x1614>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d236:	83 ec 04             	sub    $0x4,%esp
f012d239:	68 00 aa 13 f0       	push   $0xf013aa00
f012d23e:	68 93 12 00 00       	push   $0x1293
f012d243:	68 5a 97 13 f0       	push   $0xf013975a
f012d248:	e8 63 2f fd ff       	call   f01001b0 <_panic>
		if (newAddress != ptr_allocations[1])
f012d24d:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012d253:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012d256:	74 17                	je     f012d26f <test_krealloc_BF+0x1636>
			panic(
f012d258:	83 ec 04             	sub    $0x4,%esp
f012d25b:	68 f4 ad 13 f0       	push   $0xf013adf4
f012d260:	68 96 12 00 00       	push   $0x1296
f012d265:	68 5a 97 13 f0       	push   $0xf013975a
f012d26a:	e8 41 2f fd ff       	call   f01001b0 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		if (freeFrames - sys_calculate_free_frames() != 2)
f012d26f:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012d272:	e8 4f f7 fd ff       	call   f010c9c6 <sys_calculate_free_frames>
f012d277:	29 c3                	sub    %eax,%ebx
f012d279:	89 d8                	mov    %ebx,%eax
f012d27b:	83 f8 02             	cmp    $0x2,%eax
f012d27e:	74 17                	je     f012d297 <test_krealloc_BF+0x165e>
			panic("krealloc: pages in memory are not loaded correctly");
f012d280:	83 ec 04             	sub    $0x4,%esp
f012d283:	68 70 ae 13 f0       	push   $0xf013ae70
f012d288:	68 98 12 00 00       	push   $0x1298
f012d28d:	68 5a 97 13 f0       	push   $0xf013975a
f012d292:	e8 19 2f fd ff       	call   f01001b0 <_panic>

		//Reallocate 1st 2 MB to 2 MB + 2 MB
		freeFrames = sys_calculate_free_frames();
f012d297:	e8 2a f7 fd ff       	call   f010c9c6 <sys_calculate_free_frames>
f012d29c:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (4 * Mega - kilo));
f012d29f:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012d2a5:	83 ec 08             	sub    $0x8,%esp
f012d2a8:	68 00 fc 3f 00       	push   $0x3ffc00
f012d2ad:	50                   	push   %eax
f012d2ae:	e8 62 ad fd ff       	call   f0108015 <krealloc>
f012d2b3:	83 c4 10             	add    $0x10,%esp
f012d2b6:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d2b9:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d2bc:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d2c1:	77 17                	ja     f012d2da <test_krealloc_BF+0x16a1>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d2c3:	83 ec 04             	sub    $0x4,%esp
f012d2c6:	68 00 aa 13 f0       	push   $0xf013aa00
f012d2cb:	68 9e 12 00 00       	push   $0x129e
f012d2d0:	68 5a 97 13 f0       	push   $0xf013975a
f012d2d5:	e8 d6 2e fd ff       	call   f01001b0 <_panic>
		if (newAddress != ptr_allocations[4])
f012d2da:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012d2e0:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012d2e3:	74 17                	je     f012d2fc <test_krealloc_BF+0x16c3>
			panic(
f012d2e5:	83 ec 04             	sub    $0x4,%esp
f012d2e8:	68 f4 ad 13 f0       	push   $0xf013adf4
f012d2ed:	68 a1 12 00 00       	push   $0x12a1
f012d2f2:	68 5a 97 13 f0       	push   $0xf013975a
f012d2f7:	e8 b4 2e fd ff       	call   f01001b0 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		//2 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 512)
f012d2fc:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012d2ff:	e8 c2 f6 fd ff       	call   f010c9c6 <sys_calculate_free_frames>
f012d304:	29 c3                	sub    %eax,%ebx
f012d306:	89 d8                	mov    %ebx,%eax
f012d308:	3d 00 02 00 00       	cmp    $0x200,%eax
f012d30d:	74 17                	je     f012d326 <test_krealloc_BF+0x16ed>
			panic("krealloc: pages in memory are not loaded correctly");
f012d30f:	83 ec 04             	sub    $0x4,%esp
f012d312:	68 70 ae 13 f0       	push   $0xf013ae70
f012d317:	68 a4 12 00 00       	push   $0x12a4
f012d31c:	68 5a 97 13 f0       	push   $0xf013975a
f012d321:	e8 8a 2e fd ff       	call   f01001b0 <_panic>


	}
	cprintf("\b\b\b60%");
f012d326:	83 ec 0c             	sub    $0xc,%esp
f012d329:	68 b8 9f 13 f0       	push   $0xf0139fb8
f012d32e:	e8 fe 3a fd ff       	call   f0100e31 <cprintf>
f012d333:	83 c4 10             	add    $0x10,%esp
	//Test krealloc: Cut & paste
	{
		//Reallocate 1st 2 MB (already reallocated to 4 MB) to 10 MB. It should return new VA
		freeFrames = sys_calculate_free_frames();
f012d336:	e8 8b f6 fd ff       	call   f010c9c6 <sys_calculate_free_frames>
f012d33b:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (10 * Mega - kilo));
f012d33e:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012d344:	83 ec 08             	sub    $0x8,%esp
f012d347:	68 00 fc 9f 00       	push   $0x9ffc00
f012d34c:	50                   	push   %eax
f012d34d:	e8 c3 ac fd ff       	call   f0108015 <krealloc>
f012d352:	83 c4 10             	add    $0x10,%esp
f012d355:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d358:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d35b:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d360:	77 17                	ja     f012d379 <test_krealloc_BF+0x1740>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d362:	83 ec 04             	sub    $0x4,%esp
f012d365:	68 00 aa 13 f0       	push   $0xf013aa00
f012d36a:	68 af 12 00 00       	push   $0x12af
f012d36f:	68 5a 97 13 f0       	push   $0xf013975a
f012d374:	e8 37 2e fd ff       	call   f01001b0 <_panic>
		if ((uint32) newAddress != ACTUAL_START + (11 * Mega))
f012d379:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f012d380:	10 00 00 
f012d383:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012d388:	0f b6 d0             	movzbl %al,%edx
f012d38b:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012d391:	01 d0                	add    %edx,%eax
f012d393:	48                   	dec    %eax
f012d394:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f012d39a:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012d3a0:	ba 00 00 00 00       	mov    $0x0,%edx
f012d3a5:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f012d3ab:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012d3b1:	29 d0                	sub    %edx,%eax
f012d3b3:	89 c1                	mov    %eax,%ecx
f012d3b5:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f012d3bc:	10 00 00 
f012d3bf:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012d3c4:	0f b6 c0             	movzbl %al,%eax
f012d3c7:	c1 e0 04             	shl    $0x4,%eax
f012d3ca:	89 c2                	mov    %eax,%edx
f012d3cc:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012d3d2:	01 d0                	add    %edx,%eax
f012d3d4:	48                   	dec    %eax
f012d3d5:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f012d3db:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012d3e1:	ba 00 00 00 00       	mov    $0x0,%edx
f012d3e6:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f012d3ec:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012d3f2:	29 d0                	sub    %edx,%eax
f012d3f4:	01 c8                	add    %ecx,%eax
f012d3f6:	8d 90 00 40 b0 f6    	lea    -0x94fc000(%eax),%edx
f012d3fc:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d3ff:	39 c2                	cmp    %eax,%edx
f012d401:	74 18                	je     f012d41b <test_krealloc_BF+0x17e2>
			panic(
f012d403:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d406:	50                   	push   %eax
f012d407:	68 a4 ae 13 f0       	push   $0xf013aea4
f012d40c:	68 b3 12 00 00       	push   $0x12b3
f012d411:	68 5a 97 13 f0       	push   $0xf013975a
f012d416:	e8 95 2d fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong start address for reallocated space, NSA = %x\nbbb",
					(uint32 )newAddress);
		if (newAddress == ptr_allocations[4])
f012d41b:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012d421:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012d424:	75 17                	jne    f012d43d <test_krealloc_BF+0x1804>
			panic(
f012d426:	83 ec 04             	sub    $0x4,%esp
f012d429:	68 e8 ae 13 f0       	push   $0xf013aee8
f012d42e:	68 b6 12 00 00       	push   $0x12b6
f012d433:	68 5a 97 13 f0       	push   $0xf013975a
f012d438:	e8 73 2d fd ff       	call   f01001b0 <_panic>
					"Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
		//6 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 1536)
f012d43d:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012d440:	e8 81 f5 fd ff       	call   f010c9c6 <sys_calculate_free_frames>
f012d445:	29 c3                	sub    %eax,%ebx
f012d447:	89 d8                	mov    %ebx,%eax
f012d449:	3d 00 06 00 00       	cmp    $0x600,%eax
f012d44e:	74 17                	je     f012d467 <test_krealloc_BF+0x182e>
			panic("krealloc: pages in memory are not loaded correctly");
f012d450:	83 ec 04             	sub    $0x4,%esp
f012d453:	68 70 ae 13 f0       	push   $0xf013ae70
f012d458:	68 b9 12 00 00       	push   $0x12b9
f012d45d:	68 5a 97 13 f0       	push   $0xf013975a
f012d462:	e8 49 2d fd ff       	call   f01001b0 <_panic>

		ptr_allocations[4] = newAddress;
f012d467:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d46a:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
		//lastIndices[4] = (10 * Mega - kilo) / sizeof(short) - 1;

		//Reallocate 1st 3 MB to 4 MB
		freeFrames = sys_calculate_free_frames();
f012d470:	e8 51 f5 fd ff       	call   f010c9c6 <sys_calculate_free_frames>
f012d475:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (4 * Mega - kilo));
f012d478:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012d47e:	83 ec 08             	sub    $0x8,%esp
f012d481:	68 00 fc 3f 00       	push   $0x3ffc00
f012d486:	50                   	push   %eax
f012d487:	e8 89 ab fd ff       	call   f0108015 <krealloc>
f012d48c:	83 c4 10             	add    $0x10,%esp
f012d48f:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d492:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d495:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d49a:	77 17                	ja     f012d4b3 <test_krealloc_BF+0x187a>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d49c:	83 ec 04             	sub    $0x4,%esp
f012d49f:	68 00 aa 13 f0       	push   $0xf013aa00
f012d4a4:	68 c2 12 00 00       	push   $0x12c2
f012d4a9:	68 5a 97 13 f0       	push   $0xf013975a
f012d4ae:	e8 fd 2c fd ff       	call   f01001b0 <_panic>
		if (newAddress == ptr_allocations[6])
f012d4b3:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012d4b9:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012d4bc:	75 17                	jne    f012d4d5 <test_krealloc_BF+0x189c>
			panic("Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
f012d4be:	83 ec 04             	sub    $0x4,%esp
f012d4c1:	68 e8 ae 13 f0       	push   $0xf013aee8
f012d4c6:	68 c4 12 00 00       	push   $0x12c4
f012d4cb:	68 5a 97 13 f0       	push   $0xf013975a
f012d4d0:	e8 db 2c fd ff       	call   f01001b0 <_panic>
		if ((uint32)newAddress != ACTUAL_START + 4 * Mega) panic("krealloc: Wrong start address for allocated space");
f012d4d5:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f012d4dc:	10 00 00 
f012d4df:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012d4e4:	0f b6 d0             	movzbl %al,%edx
f012d4e7:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012d4ed:	01 d0                	add    %edx,%eax
f012d4ef:	48                   	dec    %eax
f012d4f0:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f012d4f6:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012d4fc:	ba 00 00 00 00       	mov    $0x0,%edx
f012d501:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f012d507:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012d50d:	29 d0                	sub    %edx,%eax
f012d50f:	89 c1                	mov    %eax,%ecx
f012d511:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f012d518:	10 00 00 
f012d51b:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012d520:	0f b6 c0             	movzbl %al,%eax
f012d523:	c1 e0 04             	shl    $0x4,%eax
f012d526:	89 c2                	mov    %eax,%edx
f012d528:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012d52e:	01 d0                	add    %edx,%eax
f012d530:	48                   	dec    %eax
f012d531:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f012d537:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012d53d:	ba 00 00 00 00       	mov    $0x0,%edx
f012d542:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f012d548:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012d54e:	29 d0                	sub    %edx,%eax
f012d550:	01 c8                	add    %ecx,%eax
f012d552:	8d 90 00 40 40 f6    	lea    -0x9bfc000(%eax),%edx
f012d558:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d55b:	39 c2                	cmp    %eax,%edx
f012d55d:	74 17                	je     f012d576 <test_krealloc_BF+0x193d>
f012d55f:	83 ec 04             	sub    $0x4,%esp
f012d562:	68 3c aa 13 f0       	push   $0xf013aa3c
f012d567:	68 c5 12 00 00       	push   $0x12c5
f012d56c:	68 5a 97 13 f0       	push   $0xf013975a
f012d571:	e8 3a 2c fd ff       	call   f01001b0 <_panic>

		//1 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 256)
f012d576:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012d579:	e8 48 f4 fd ff       	call   f010c9c6 <sys_calculate_free_frames>
f012d57e:	29 c3                	sub    %eax,%ebx
f012d580:	89 d8                	mov    %ebx,%eax
f012d582:	3d 00 01 00 00       	cmp    $0x100,%eax
f012d587:	74 17                	je     f012d5a0 <test_krealloc_BF+0x1967>
			panic("krealloc: pages in memory are not loaded correctly");
f012d589:	83 ec 04             	sub    $0x4,%esp
f012d58c:	68 70 ae 13 f0       	push   $0xf013ae70
f012d591:	68 c9 12 00 00       	push   $0x12c9
f012d596:	68 5a 97 13 f0       	push   $0xf013975a
f012d59b:	e8 10 2c fd ff       	call   f01001b0 <_panic>
		ptr_allocations[6] = newAddress;
f012d5a0:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d5a3:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
		//Reallocate 1st 3 MB (already reallocated to 4 MB) to 20 MB. It should return new VA
		freeFrames = sys_calculate_free_frames();
f012d5a9:	e8 18 f4 fd ff       	call   f010c9c6 <sys_calculate_free_frames>
f012d5ae:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (20 * Mega - kilo));
f012d5b1:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012d5b7:	83 ec 08             	sub    $0x8,%esp
f012d5ba:	68 00 fc 3f 01       	push   $0x13ffc00
f012d5bf:	50                   	push   %eax
f012d5c0:	e8 50 aa fd ff       	call   f0108015 <krealloc>
f012d5c5:	83 c4 10             	add    $0x10,%esp
f012d5c8:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d5cb:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d5ce:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d5d3:	77 17                	ja     f012d5ec <test_krealloc_BF+0x19b3>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d5d5:	83 ec 04             	sub    $0x4,%esp
f012d5d8:	68 00 aa 13 f0       	push   $0xf013aa00
f012d5dd:	68 cf 12 00 00       	push   $0x12cf
f012d5e2:	68 5a 97 13 f0       	push   $0xf013975a
f012d5e7:	e8 c4 2b fd ff       	call   f01001b0 <_panic>
		if (newAddress == ptr_allocations[6])
f012d5ec:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012d5f2:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012d5f5:	75 17                	jne    f012d60e <test_krealloc_BF+0x19d5>
			panic("Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
f012d5f7:	83 ec 04             	sub    $0x4,%esp
f012d5fa:	68 e8 ae 13 f0       	push   $0xf013aee8
f012d5ff:	68 d1 12 00 00       	push   $0x12d1
f012d604:	68 5a 97 13 f0       	push   $0xf013975a
f012d609:	e8 a2 2b fd ff       	call   f01001b0 <_panic>
		if ((uint32) newAddress != ACTUAL_START + (21 * Mega))
f012d60e:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f012d615:	10 00 00 
f012d618:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012d61d:	0f b6 d0             	movzbl %al,%edx
f012d620:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f012d626:	01 d0                	add    %edx,%eax
f012d628:	48                   	dec    %eax
f012d629:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f012d62f:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012d635:	ba 00 00 00 00       	mov    $0x0,%edx
f012d63a:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f012d640:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012d646:	29 d0                	sub    %edx,%eax
f012d648:	89 c1                	mov    %eax,%ecx
f012d64a:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f012d651:	10 00 00 
f012d654:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012d659:	0f b6 c0             	movzbl %al,%eax
f012d65c:	c1 e0 04             	shl    $0x4,%eax
f012d65f:	89 c2                	mov    %eax,%edx
f012d661:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012d667:	01 d0                	add    %edx,%eax
f012d669:	48                   	dec    %eax
f012d66a:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f012d670:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012d676:	ba 00 00 00 00       	mov    $0x0,%edx
f012d67b:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f012d681:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012d687:	29 d0                	sub    %edx,%eax
f012d689:	01 c8                	add    %ecx,%eax
f012d68b:	8d 90 00 40 50 f7    	lea    -0x8afc000(%eax),%edx
f012d691:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d694:	39 c2                	cmp    %eax,%edx
f012d696:	74 17                	je     f012d6af <test_krealloc_BF+0x1a76>
			panic("krealloc: Wrong start address for reallocated space\n");
f012d698:	83 ec 04             	sub    $0x4,%esp
f012d69b:	68 08 b0 13 f0       	push   $0xf013b008
f012d6a0:	68 d3 12 00 00       	push   $0x12d3
f012d6a5:	68 5a 97 13 f0       	push   $0xf013975a
f012d6aa:	e8 01 2b fd ff       	call   f01001b0 <_panic>
		//3 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != (16 * Mega) / PAGE_SIZE)
f012d6af:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012d6b2:	e8 0f f3 fd ff       	call   f010c9c6 <sys_calculate_free_frames>
f012d6b7:	29 c3                	sub    %eax,%ebx
f012d6b9:	89 d8                	mov    %ebx,%eax
f012d6bb:	3d 00 10 00 00       	cmp    $0x1000,%eax
f012d6c0:	74 17                	je     f012d6d9 <test_krealloc_BF+0x1aa0>
			panic("krealloc: pages in memory are not loaded correctly");
f012d6c2:	83 ec 04             	sub    $0x4,%esp
f012d6c5:	68 70 ae 13 f0       	push   $0xf013ae70
f012d6ca:	68 d6 12 00 00       	push   $0x12d6
f012d6cf:	68 5a 97 13 f0       	push   $0xf013975a
f012d6d4:	e8 d7 2a fd ff       	call   f01001b0 <_panic>

		ptr_allocations[6] = newAddress;
f012d6d9:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d6dc:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f012d6e2:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012d6e8:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
		int i;
		sums[0] = 0;
f012d6ee:	c7 85 f8 fd ff ff 00 	movl   $0x0,-0x208(%ebp)
f012d6f5:	00 00 00 
		for (i = 0; i <= lastIndices[1]; ++i) {
f012d6f8:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012d6ff:	eb 21                	jmp    f012d722 <test_krealloc_BF+0x1ae9>
			sums[0] += ptr[i];
f012d701:	8b 95 f8 fd ff ff    	mov    -0x208(%ebp),%edx
f012d707:	8b 4d d8             	mov    -0x28(%ebp),%ecx
f012d70a:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012d710:	01 c8                	add    %ecx,%eax
f012d712:	8a 00                	mov    (%eax),%al
f012d714:	0f be c0             	movsbl %al,%eax
f012d717:	01 d0                	add    %edx,%eax
f012d719:	89 85 f8 fd ff ff    	mov    %eax,-0x208(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		int i;
		sums[0] = 0;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012d71f:	ff 45 d8             	incl   -0x28(%ebp)
f012d722:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012d728:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012d72b:	7d d4                	jge    f012d701 <test_krealloc_BF+0x1ac8>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012d72d:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f012d733:	8b 95 4c fe ff ff    	mov    -0x1b4(%ebp),%edx
f012d739:	42                   	inc    %edx
f012d73a:	01 d2                	add    %edx,%edx
f012d73c:	39 d0                	cmp    %edx,%eax
f012d73e:	74 17                	je     f012d757 <test_krealloc_BF+0x1b1e>
			panic("krealloc: invalid read after re-allocations");
f012d740:	83 ec 04             	sub    $0x4,%esp
f012d743:	68 a0 af 13 f0       	push   $0xf013afa0
f012d748:	68 e4 12 00 00       	push   $0x12e4
f012d74d:	68 5a 97 13 f0       	push   $0xf013975a
f012d752:	e8 59 2a fd ff       	call   f01001b0 <_panic>

		//Test read write access for the new allocated size of 1st 3 MB
		structArr = (struct MyStruct*) ptr_allocations[6];
f012d757:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012d75d:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)

		sums[0] = 0;
f012d763:	c7 85 f8 fd ff ff 00 	movl   $0x0,-0x208(%ebp)
f012d76a:	00 00 00 
		sums[1] = 0;
f012d76d:	c7 85 fc fd ff ff 00 	movl   $0x0,-0x204(%ebp)
f012d774:	00 00 00 
		sums[2] = 0;
f012d777:	c7 85 00 fe ff ff 00 	movl   $0x0,-0x200(%ebp)
f012d77e:	00 00 00 
		for (i = 0; i <= lastIndices[6]; ++i) {
f012d781:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012d788:	eb 70                	jmp    f012d7fa <test_krealloc_BF+0x1bc1>
			sums[0] += structArr[i].a;
f012d78a:	8b 95 f8 fd ff ff    	mov    -0x208(%ebp),%edx
f012d790:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012d793:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012d79a:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012d7a0:	01 c8                	add    %ecx,%eax
f012d7a2:	8a 00                	mov    (%eax),%al
f012d7a4:	0f be c0             	movsbl %al,%eax
f012d7a7:	01 d0                	add    %edx,%eax
f012d7a9:	89 85 f8 fd ff ff    	mov    %eax,-0x208(%ebp)
			sums[1] += structArr[i].b;
f012d7af:	8b 95 fc fd ff ff    	mov    -0x204(%ebp),%edx
f012d7b5:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012d7b8:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012d7bf:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012d7c5:	01 c8                	add    %ecx,%eax
f012d7c7:	66 8b 40 02          	mov    0x2(%eax),%ax
f012d7cb:	98                   	cwtl   
f012d7cc:	01 d0                	add    %edx,%eax
f012d7ce:	89 85 fc fd ff ff    	mov    %eax,-0x204(%ebp)
			sums[2] += structArr[i].c;
f012d7d4:	8b 95 00 fe ff ff    	mov    -0x200(%ebp),%edx
f012d7da:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012d7dd:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012d7e4:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012d7ea:	01 c8                	add    %ecx,%eax
f012d7ec:	8b 40 04             	mov    0x4(%eax),%eax
f012d7ef:	01 d0                	add    %edx,%eax
f012d7f1:	89 85 00 fe ff ff    	mov    %eax,-0x200(%ebp)
		structArr = (struct MyStruct*) ptr_allocations[6];

		sums[0] = 0;
		sums[1] = 0;
		sums[2] = 0;
		for (i = 0; i <= lastIndices[6]; ++i) {
f012d7f7:	ff 45 d8             	incl   -0x28(%ebp)
f012d7fa:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012d800:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012d803:	7d 85                	jge    f012d78a <test_krealloc_BF+0x1b51>
			sums[1] += structArr[i].b;
			sums[2] += structArr[i].c;

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[6] + 1) * 7
f012d805:	8b 8d f8 fd ff ff    	mov    -0x208(%ebp),%ecx
f012d80b:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012d811:	8d 50 01             	lea    0x1(%eax),%edx
f012d814:	89 d0                	mov    %edx,%eax
f012d816:	01 c0                	add    %eax,%eax
f012d818:	01 d0                	add    %edx,%eax
f012d81a:	01 c0                	add    %eax,%eax
f012d81c:	01 d0                	add    %edx,%eax
f012d81e:	39 c1                	cmp    %eax,%ecx
f012d820:	75 3a                	jne    f012d85c <test_krealloc_BF+0x1c23>
				|| sums[1] != (lastIndices[6] + 1) * 7
f012d822:	8b 8d fc fd ff ff    	mov    -0x204(%ebp),%ecx
f012d828:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012d82e:	8d 50 01             	lea    0x1(%eax),%edx
f012d831:	89 d0                	mov    %edx,%eax
f012d833:	01 c0                	add    %eax,%eax
f012d835:	01 d0                	add    %edx,%eax
f012d837:	01 c0                	add    %eax,%eax
f012d839:	01 d0                	add    %edx,%eax
f012d83b:	39 c1                	cmp    %eax,%ecx
f012d83d:	75 1d                	jne    f012d85c <test_krealloc_BF+0x1c23>
				|| sums[2] != (lastIndices[6] + 1) * 7)
f012d83f:	8b 8d 00 fe ff ff    	mov    -0x200(%ebp),%ecx
f012d845:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012d84b:	8d 50 01             	lea    0x1(%eax),%edx
f012d84e:	89 d0                	mov    %edx,%eax
f012d850:	01 c0                	add    %eax,%eax
f012d852:	01 d0                	add    %edx,%eax
f012d854:	01 c0                	add    %eax,%eax
f012d856:	01 d0                	add    %edx,%eax
f012d858:	39 c1                	cmp    %eax,%ecx
f012d85a:	74 17                	je     f012d873 <test_krealloc_BF+0x1c3a>
			panic("krealloc: invalid read after re-allocations");
f012d85c:	83 ec 04             	sub    $0x4,%esp
f012d85f:	68 a0 af 13 f0       	push   $0xf013afa0
f012d864:	68 f6 12 00 00       	push   $0x12f6
f012d869:	68 5a 97 13 f0       	push   $0xf013975a
f012d86e:	e8 3d 29 fd ff       	call   f01001b0 <_panic>

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f012d873:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012d879:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)

		sums[0] = 0;
f012d87f:	c7 85 f8 fd ff ff 00 	movl   $0x0,-0x208(%ebp)
f012d886:	00 00 00 
		for (i = 0; i <= lastIndices[4]; ++i) {
f012d889:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012d890:	eb 24                	jmp    f012d8b6 <test_krealloc_BF+0x1c7d>
			sums[0] += shortArr[i];
f012d892:	8b 95 f8 fd ff ff    	mov    -0x208(%ebp),%edx
f012d898:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012d89b:	01 c0                	add    %eax,%eax
f012d89d:	89 c1                	mov    %eax,%ecx
f012d89f:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012d8a5:	01 c8                	add    %ecx,%eax
f012d8a7:	66 8b 00             	mov    (%eax),%ax
f012d8aa:	98                   	cwtl   
f012d8ab:	01 d0                	add    %edx,%eax
f012d8ad:	89 85 f8 fd ff ff    	mov    %eax,-0x208(%ebp)

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];

		sums[0] = 0;
		for (i = 0; i <= lastIndices[4]; ++i) {
f012d8b3:	ff 45 d8             	incl   -0x28(%ebp)
f012d8b6:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012d8bc:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012d8bf:	7d d1                	jge    f012d892 <test_krealloc_BF+0x1c59>
			sums[0] += shortArr[i];
		}
		if (sums[0] != (lastIndices[4] + 1) * 5)
f012d8c1:	8b 95 f8 fd ff ff    	mov    -0x208(%ebp),%edx
f012d8c7:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012d8cd:	8d 48 01             	lea    0x1(%eax),%ecx
f012d8d0:	89 c8                	mov    %ecx,%eax
f012d8d2:	c1 e0 02             	shl    $0x2,%eax
f012d8d5:	01 c8                	add    %ecx,%eax
f012d8d7:	39 c2                	cmp    %eax,%edx
f012d8d9:	74 17                	je     f012d8f2 <test_krealloc_BF+0x1cb9>
			panic("krealloc: invalid read after re-allocations");
f012d8db:	83 ec 04             	sub    $0x4,%esp
f012d8de:	68 a0 af 13 f0       	push   $0xf013afa0
f012d8e3:	68 00 13 00 00       	push   $0x1300
f012d8e8:	68 5a 97 13 f0       	push   $0xf013975a
f012d8ed:	e8 be 28 fd ff       	call   f01001b0 <_panic>

		//Test krealloc with size = 0 after krealloc 1st 3 MB to 20 MB
		freeFrames = sys_calculate_free_frames();
f012d8f2:	e8 cf f0 fd ff       	call   f010c9c6 <sys_calculate_free_frames>
f012d8f7:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012d8fa:	e8 85 6d fd ff       	call   f0104684 <pf_calculate_free_frames>
f012d8ff:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
		krealloc(ptr_allocations[6], 0);
f012d905:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012d90b:	83 ec 08             	sub    $0x8,%esp
f012d90e:	6a 00                	push   $0x0
f012d910:	50                   	push   %eax
f012d911:	e8 ff a6 fd ff       	call   f0108015 <krealloc>
f012d916:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012d919:	e8 66 6d fd ff       	call   f0104684 <pf_calculate_free_frames>
f012d91e:	3b 85 1c ff ff ff    	cmp    -0xe4(%ebp),%eax
f012d924:	74 17                	je     f012d93d <test_krealloc_BF+0x1d04>
			panic(
f012d926:	83 ec 04             	sub    $0x4,%esp
f012d929:	68 74 97 13 f0       	push   $0xf0139774
f012d92e:	68 08 13 00 00       	push   $0x1308
f012d933:	68 5a 97 13 f0       	push   $0xf013975a
f012d938:	e8 73 28 fd ff       	call   f01001b0 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 20 * Mega / PAGE_SIZE)
f012d93d:	e8 84 f0 fd ff       	call   f010c9c6 <sys_calculate_free_frames>
f012d942:	89 c2                	mov    %eax,%edx
f012d944:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d947:	29 c2                	sub    %eax,%edx
f012d949:	89 d0                	mov    %edx,%eax
f012d94b:	3d 00 14 00 00       	cmp    $0x1400,%eax
f012d950:	74 17                	je     f012d969 <test_krealloc_BF+0x1d30>
			panic("krealloc: pages in memory are not freed correctly");
f012d952:	83 ec 04             	sub    $0x4,%esp
f012d955:	68 30 ac 13 f0       	push   $0xf013ac30
f012d95a:	68 0a 13 00 00       	push   $0x130a
f012d95f:	68 5a 97 13 f0       	push   $0xf013975a
f012d964:	e8 47 28 fd ff       	call   f01001b0 <_panic>

		//Test kfree after krealloc 1st 2 MB to 10 MB
		freeFrames = sys_calculate_free_frames();
f012d969:	e8 58 f0 fd ff       	call   f010c9c6 <sys_calculate_free_frames>
f012d96e:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012d971:	e8 0e 6d fd ff       	call   f0104684 <pf_calculate_free_frames>
f012d976:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
		kfree(ptr_allocations[4]);
f012d97c:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012d982:	83 ec 0c             	sub    $0xc,%esp
f012d985:	50                   	push   %eax
f012d986:	e8 ee a5 fd ff       	call   f0107f79 <kfree>
f012d98b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012d98e:	e8 f1 6c fd ff       	call   f0104684 <pf_calculate_free_frames>
f012d993:	3b 85 1c ff ff ff    	cmp    -0xe4(%ebp),%eax
f012d999:	74 17                	je     f012d9b2 <test_krealloc_BF+0x1d79>
			panic(
f012d99b:	83 ec 04             	sub    $0x4,%esp
f012d99e:	68 74 97 13 f0       	push   $0xf0139774
f012d9a3:	68 12 13 00 00       	push   $0x1312
f012d9a8:	68 5a 97 13 f0       	push   $0xf013975a
f012d9ad:	e8 fe 27 fd ff       	call   f01001b0 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 10 * Mega / PAGE_SIZE)
f012d9b2:	e8 0f f0 fd ff       	call   f010c9c6 <sys_calculate_free_frames>
f012d9b7:	89 c2                	mov    %eax,%edx
f012d9b9:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d9bc:	29 c2                	sub    %eax,%edx
f012d9be:	89 d0                	mov    %edx,%eax
f012d9c0:	3d 00 0a 00 00       	cmp    $0xa00,%eax
f012d9c5:	74 17                	je     f012d9de <test_krealloc_BF+0x1da5>
			panic("krealloc: pages in memory are not freed correctly");
f012d9c7:	83 ec 04             	sub    $0x4,%esp
f012d9ca:	68 30 ac 13 f0       	push   $0xf013ac30
f012d9cf:	68 14 13 00 00       	push   $0x1314
f012d9d4:	68 5a 97 13 f0       	push   $0xf013975a
f012d9d9:	e8 d2 27 fd ff       	call   f01001b0 <_panic>

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012d9de:	c7 45 d0 00 00 00 f6 	movl   $0xf6000000,-0x30(%ebp)
f012d9e5:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f012d9ec:	eb 48                	jmp    f012da36 <test_krealloc_BF+0x1dfd>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f012d9ee:	8b 55 d0             	mov    -0x30(%ebp),%edx
f012d9f1:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f012d9f6:	83 ec 04             	sub    $0x4,%esp
f012d9f9:	8d 8d f0 fd ff ff    	lea    -0x210(%ebp),%ecx
f012d9ff:	51                   	push   %ecx
f012da00:	52                   	push   %edx
f012da01:	50                   	push   %eax
f012da02:	e8 e0 9a fd ff       	call   f01074e7 <get_page_table>
f012da07:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f012da0a:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f012da10:	85 c0                	test   %eax,%eax
f012da12:	75 17                	jne    f012da2b <test_krealloc_BF+0x1df2>
					panic(
f012da14:	83 ec 04             	sub    $0x4,%esp
f012da17:	68 5c a0 13 f0       	push   $0xf013a05c
f012da1c:	68 21 13 00 00       	push   $0x1321
f012da21:	68 5a 97 13 f0       	push   $0xf013975a
f012da26:	e8 85 27 fd ff       	call   f01001b0 <_panic>
			panic("krealloc: pages in memory are not freed correctly");

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012da2b:	81 45 d0 00 00 40 00 	addl   $0x400000,-0x30(%ebp)
f012da32:	83 55 d4 00          	adcl   $0x0,-0x2c(%ebp)
f012da36:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f012da3a:	78 b2                	js     f012d9ee <test_krealloc_BF+0x1db5>
f012da3c:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f012da40:	7f 09                	jg     f012da4b <test_krealloc_BF+0x1e12>
f012da42:	81 7d d0 ff ef ff ff 	cmpl   $0xffffefff,-0x30(%ebp)
f012da49:	76 a3                	jbe    f012d9ee <test_krealloc_BF+0x1db5>
			}
		}

	}

	cprintf("\b\b\b100%\n");
f012da4b:	83 ec 0c             	sub    $0xc,%esp
f012da4e:	68 3e 99 13 f0       	push   $0xf013993e
f012da53:	e8 d9 33 fd ff       	call   f0100e31 <cprintf>
f012da58:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test krealloc BF completed successfully.\n");
f012da5b:	83 ec 0c             	sub    $0xc,%esp
f012da5e:	68 40 b0 13 f0       	push   $0xf013b040
f012da63:	e8 c9 33 fd ff       	call   f0100e31 <cprintf>
f012da68:	83 c4 10             	add    $0x10,%esp
	return 0;
f012da6b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f012da70:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012da73:	5b                   	pop    %ebx
f012da74:	5f                   	pop    %edi
f012da75:	5d                   	pop    %ebp
f012da76:	c3                   	ret    

f012da77 <test_initialize_dyn_block_system>:

//2022
int test_initialize_dyn_block_system(int freeFrames_before, int freeDiskFrames_before, int freeFrames_after, int freeDiskFrames_after)
{
f012da77:	55                   	push   %ebp
f012da78:	89 e5                	mov    %esp,%ebp
		}
	}

	//===============================================//
	cprintf("\nCongratulations!! test initialize_dyn_block_system of KHEAP completed successfully.\n");
*/	return 0;
f012da7a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f012da7f:	5d                   	pop    %ebp
f012da80:	c3                   	ret    

f012da81 <rsttst>:
#include <kern/mem/memory_manager.h>
#include "../cons/console.h"


void rsttst()
{
f012da81:	55                   	push   %ebp
f012da82:	89 e5                	mov    %esp,%ebp
	tstcnt = 0;
f012da84:	c7 05 54 3a 25 f0 00 	movl   $0x0,0xf0253a54
f012da8b:	00 00 00 
}
f012da8e:	90                   	nop
f012da8f:	5d                   	pop    %ebp
f012da90:	c3                   	ret    

f012da91 <inctst>:
void inctst()
{
f012da91:	55                   	push   %ebp
f012da92:	89 e5                	mov    %esp,%ebp
	tstcnt++;
f012da94:	a1 54 3a 25 f0       	mov    0xf0253a54,%eax
f012da99:	40                   	inc    %eax
f012da9a:	a3 54 3a 25 f0       	mov    %eax,0xf0253a54
}
f012da9f:	90                   	nop
f012daa0:	5d                   	pop    %ebp
f012daa1:	c3                   	ret    

f012daa2 <gettst>:
uint32 gettst()
{
f012daa2:	55                   	push   %ebp
f012daa3:	89 e5                	mov    %esp,%ebp
	return tstcnt;
f012daa5:	a1 54 3a 25 f0       	mov    0xf0253a54,%eax
}
f012daaa:	5d                   	pop    %ebp
f012daab:	c3                   	ret    

f012daac <tst>:

void tst(uint32 n, uint32 v1, uint32 v2, char c, int inv)
{
f012daac:	55                   	push   %ebp
f012daad:	89 e5                	mov    %esp,%ebp
f012daaf:	83 ec 28             	sub    $0x28,%esp
f012dab2:	8b 45 14             	mov    0x14(%ebp),%eax
f012dab5:	88 45 e4             	mov    %al,-0x1c(%ebp)
	int chk = 0;
f012dab8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	switch (c)
f012dabf:	0f be 45 e4          	movsbl -0x1c(%ebp),%eax
f012dac3:	83 f8 65             	cmp    $0x65,%eax
f012dac6:	74 5d                	je     f012db25 <tst+0x79>
f012dac8:	83 f8 65             	cmp    $0x65,%eax
f012dacb:	7f 0a                	jg     f012dad7 <tst+0x2b>
f012dacd:	83 f8 62             	cmp    $0x62,%eax
f012dad0:	74 73                	je     f012db45 <tst+0x99>
f012dad2:	e9 91 00 00 00       	jmp    f012db68 <tst+0xbc>
f012dad7:	83 f8 67             	cmp    $0x67,%eax
f012dada:	74 29                	je     f012db05 <tst+0x59>
f012dadc:	83 f8 6c             	cmp    $0x6c,%eax
f012dadf:	0f 85 83 00 00 00    	jne    f012db68 <tst+0xbc>
	{
	case 'l':
		if (n < v1)
f012dae5:	8b 45 08             	mov    0x8(%ebp),%eax
f012dae8:	3b 45 0c             	cmp    0xc(%ebp),%eax
f012daeb:	73 09                	jae    f012daf6 <tst+0x4a>
			chk = 1;
f012daed:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f012daf4:	eb 68                	jmp    f012db5e <tst+0xb2>
	switch (c)
	{
	case 'l':
		if (n < v1)
			chk = 1;
		else if (inv)
f012daf6:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f012dafa:	74 62                	je     f012db5e <tst+0xb2>
			chk = 1;
f012dafc:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f012db03:	eb 59                	jmp    f012db5e <tst+0xb2>
	case 'g':
		if (n > v1)
f012db05:	8b 45 08             	mov    0x8(%ebp),%eax
f012db08:	3b 45 0c             	cmp    0xc(%ebp),%eax
f012db0b:	76 09                	jbe    f012db16 <tst+0x6a>
			chk = 1;
f012db0d:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f012db14:	eb 4b                	jmp    f012db61 <tst+0xb5>
			chk = 1;
		break;
	case 'g':
		if (n > v1)
			chk = 1;
		else if (inv)
f012db16:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f012db1a:	74 45                	je     f012db61 <tst+0xb5>
			chk = 1;
f012db1c:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f012db23:	eb 3c                	jmp    f012db61 <tst+0xb5>
	case 'e':
		if (n == v1)
f012db25:	8b 45 08             	mov    0x8(%ebp),%eax
f012db28:	3b 45 0c             	cmp    0xc(%ebp),%eax
f012db2b:	75 09                	jne    f012db36 <tst+0x8a>
			chk = 1;
f012db2d:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f012db34:	eb 2e                	jmp    f012db64 <tst+0xb8>
			chk = 1;
		break;
	case 'e':
		if (n == v1)
			chk = 1;
		else if (inv)
f012db36:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f012db3a:	74 28                	je     f012db64 <tst+0xb8>
			chk = 1;
f012db3c:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f012db43:	eb 1f                	jmp    f012db64 <tst+0xb8>
	case 'b':
		if (n >= v1 && n <= v2)
f012db45:	8b 45 08             	mov    0x8(%ebp),%eax
f012db48:	3b 45 0c             	cmp    0xc(%ebp),%eax
f012db4b:	72 1a                	jb     f012db67 <tst+0xbb>
f012db4d:	8b 45 08             	mov    0x8(%ebp),%eax
f012db50:	3b 45 10             	cmp    0x10(%ebp),%eax
f012db53:	77 12                	ja     f012db67 <tst+0xbb>
			chk = 1;
f012db55:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f012db5c:	eb 09                	jmp    f012db67 <tst+0xbb>
	case 'l':
		if (n < v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f012db5e:	90                   	nop
f012db5f:	eb 07                	jmp    f012db68 <tst+0xbc>
	case 'g':
		if (n > v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f012db61:	90                   	nop
f012db62:	eb 04                	jmp    f012db68 <tst+0xbc>
	case 'e':
		if (n == v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f012db64:	90                   	nop
f012db65:	eb 01                	jmp    f012db68 <tst+0xbc>
	case 'b':
		if (n >= v1 && n <= v2)
			chk = 1;
		break;
f012db67:	90                   	nop
	}

	if (chk == 0) panic("Error!! test fails");
f012db68:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f012db6c:	75 14                	jne    f012db82 <tst+0xd6>
f012db6e:	83 ec 04             	sub    $0x4,%esp
f012db71:	68 80 b0 13 f0       	push   $0xf013b080
f012db76:	6a 3c                	push   $0x3c
f012db78:	68 93 b0 13 f0       	push   $0xf013b093
f012db7d:	e8 2e 26 fd ff       	call   f01001b0 <_panic>
	tstcnt++ ;
f012db82:	a1 54 3a 25 f0       	mov    0xf0253a54,%eax
f012db87:	40                   	inc    %eax
f012db88:	a3 54 3a 25 f0       	mov    %eax,0xf0253a54
	return;
f012db8d:	90                   	nop
}
f012db8e:	c9                   	leave  
f012db8f:	c3                   	ret    

f012db90 <chktst>:

void chktst(uint32 n)
{
f012db90:	55                   	push   %ebp
f012db91:	89 e5                	mov    %esp,%ebp
f012db93:	83 ec 08             	sub    $0x8,%esp
	if (tstcnt == n)
f012db96:	a1 54 3a 25 f0       	mov    0xf0253a54,%eax
f012db9b:	3b 45 08             	cmp    0x8(%ebp),%eax
f012db9e:	75 12                	jne    f012dbb2 <chktst+0x22>
		cprintf("\nCongratulations... test runs successfully\n");
f012dba0:	83 ec 0c             	sub    $0xc,%esp
f012dba3:	68 ac b0 13 f0       	push   $0xf013b0ac
f012dba8:	e8 84 32 fd ff       	call   f0100e31 <cprintf>
f012dbad:	83 c4 10             	add    $0x10,%esp
	else
		panic("Error!! test fails at final");
}
f012dbb0:	eb 14                	jmp    f012dbc6 <chktst+0x36>
void chktst(uint32 n)
{
	if (tstcnt == n)
		cprintf("\nCongratulations... test runs successfully\n");
	else
		panic("Error!! test fails at final");
f012dbb2:	83 ec 04             	sub    $0x4,%esp
f012dbb5:	68 d8 b0 13 f0       	push   $0xf013b0d8
f012dbba:	6a 46                	push   $0x46
f012dbbc:	68 93 b0 13 f0       	push   $0xf013b093
f012dbc1:	e8 ea 25 fd ff       	call   f01001b0 <_panic>
}
f012dbc6:	c9                   	leave  
f012dbc7:	c3                   	ret    

f012dbc8 <nearest_pow2_ceil>:

inline unsigned int nearest_pow2_ceil(unsigned int x) {
f012dbc8:	55                   	push   %ebp
f012dbc9:	89 e5                	mov    %esp,%ebp
f012dbcb:	83 ec 10             	sub    $0x10,%esp
    if (x <= 1) return 1;
f012dbce:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f012dbd2:	77 07                	ja     f012dbdb <nearest_pow2_ceil+0x13>
f012dbd4:	b8 01 00 00 00       	mov    $0x1,%eax
f012dbd9:	eb 20                	jmp    f012dbfb <nearest_pow2_ceil+0x33>
    int power = 2;
f012dbdb:	c7 45 fc 02 00 00 00 	movl   $0x2,-0x4(%ebp)
    x--;
f012dbe2:	ff 4d 08             	decl   0x8(%ebp)
    while (x >>= 1) {
f012dbe5:	eb 08                	jmp    f012dbef <nearest_pow2_ceil+0x27>
    	power <<= 1;
f012dbe7:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012dbea:	01 c0                	add    %eax,%eax
f012dbec:	89 45 fc             	mov    %eax,-0x4(%ebp)

inline unsigned int nearest_pow2_ceil(unsigned int x) {
    if (x <= 1) return 1;
    int power = 2;
    x--;
    while (x >>= 1) {
f012dbef:	d1 6d 08             	shrl   0x8(%ebp)
f012dbf2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f012dbf6:	75 ef                	jne    f012dbe7 <nearest_pow2_ceil+0x1f>
    	power <<= 1;
    }
    return power;
f012dbf8:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f012dbfb:	c9                   	leave  
f012dbfc:	c3                   	ret    

f012dbfd <log2_ceil>:
inline unsigned int log2_ceil(unsigned int x) {
f012dbfd:	55                   	push   %ebp
f012dbfe:	89 e5                	mov    %esp,%ebp
f012dc00:	83 ec 10             	sub    $0x10,%esp
    if (x <= 1) return 1;
f012dc03:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f012dc07:	77 07                	ja     f012dc10 <log2_ceil+0x13>
f012dc09:	b8 01 00 00 00       	mov    $0x1,%eax
f012dc0e:	eb 1b                	jmp    f012dc2b <log2_ceil+0x2e>
    //int power = 2;
    int bits_cnt = 2 ;
f012dc10:	c7 45 fc 02 00 00 00 	movl   $0x2,-0x4(%ebp)
    x--;
f012dc17:	ff 4d 08             	decl   0x8(%ebp)
    while (x >>= 1) {
f012dc1a:	eb 03                	jmp    f012dc1f <log2_ceil+0x22>
    	//power <<= 1;
    	bits_cnt++ ;
f012dc1c:	ff 45 fc             	incl   -0x4(%ebp)
inline unsigned int log2_ceil(unsigned int x) {
    if (x <= 1) return 1;
    //int power = 2;
    int bits_cnt = 2 ;
    x--;
    while (x >>= 1) {
f012dc1f:	d1 6d 08             	shrl   0x8(%ebp)
f012dc22:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f012dc26:	75 f4                	jne    f012dc1c <log2_ceil+0x1f>
    	//power <<= 1;
    	bits_cnt++ ;
    }
    return bits_cnt;
f012dc28:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f012dc2b:	c9                   	leave  
f012dc2c:	c3                   	ret    

f012dc2d <detect_loop_in_FrameInfo_list>:
void detect_loop_in_FrameInfo_list(struct FrameInfo_List* fi_list)
{
f012dc2d:	55                   	push   %ebp
f012dc2e:	89 e5                	mov    %esp,%ebp
f012dc30:	83 ec 18             	sub    $0x18,%esp
	struct  FrameInfo * slowPtr = LIST_FIRST(fi_list);
f012dc33:	8b 45 08             	mov    0x8(%ebp),%eax
f012dc36:	8b 00                	mov    (%eax),%eax
f012dc38:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct  FrameInfo * fastPtr = LIST_FIRST(fi_list);
f012dc3b:	8b 45 08             	mov    0x8(%ebp),%eax
f012dc3e:	8b 00                	mov    (%eax),%eax
f012dc40:	89 45 f0             	mov    %eax,-0x10(%ebp)


	while (slowPtr && fastPtr) {
f012dc43:	eb 52                	jmp    f012dc97 <detect_loop_in_FrameInfo_list+0x6a>
		fastPtr = LIST_NEXT(fastPtr); // advance the fast pointer
f012dc45:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012dc48:	8b 00                	mov    (%eax),%eax
f012dc4a:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (fastPtr == slowPtr) // and check if its equal to the slow pointer
f012dc4d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012dc50:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012dc53:	75 12                	jne    f012dc67 <detect_loop_in_FrameInfo_list+0x3a>
		{
			cprintf("loop detected in modiflist\n");
f012dc55:	83 ec 0c             	sub    $0xc,%esp
f012dc58:	68 f4 b0 13 f0       	push   $0xf013b0f4
f012dc5d:	e8 cf 31 fd ff       	call   f0100e31 <cprintf>
f012dc62:	83 c4 10             	add    $0x10,%esp
			break;
f012dc65:	eb 3f                	jmp    f012dca6 <detect_loop_in_FrameInfo_list+0x79>
		}

		if (fastPtr == NULL) {
f012dc67:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012dc6b:	74 38                	je     f012dca5 <detect_loop_in_FrameInfo_list+0x78>
			break; // since fastPtr is NULL we reached the tail
		}

		fastPtr = LIST_NEXT(fastPtr); //advance and check again
f012dc6d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012dc70:	8b 00                	mov    (%eax),%eax
f012dc72:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (fastPtr == slowPtr) {
f012dc75:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012dc78:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012dc7b:	75 12                	jne    f012dc8f <detect_loop_in_FrameInfo_list+0x62>
			cprintf("loop detected in list\n");
f012dc7d:	83 ec 0c             	sub    $0xc,%esp
f012dc80:	68 10 b1 13 f0       	push   $0xf013b110
f012dc85:	e8 a7 31 fd ff       	call   f0100e31 <cprintf>
f012dc8a:	83 c4 10             	add    $0x10,%esp
			break;
f012dc8d:	eb 17                	jmp    f012dca6 <detect_loop_in_FrameInfo_list+0x79>
		}

		slowPtr = LIST_NEXT(slowPtr); // advance the slow pointer only once
f012dc8f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012dc92:	8b 00                	mov    (%eax),%eax
f012dc94:	89 45 f4             	mov    %eax,-0xc(%ebp)
{
	struct  FrameInfo * slowPtr = LIST_FIRST(fi_list);
	struct  FrameInfo * fastPtr = LIST_FIRST(fi_list);


	while (slowPtr && fastPtr) {
f012dc97:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f012dc9b:	74 09                	je     f012dca6 <detect_loop_in_FrameInfo_list+0x79>
f012dc9d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012dca1:	75 a2                	jne    f012dc45 <detect_loop_in_FrameInfo_list+0x18>
f012dca3:	eb 01                	jmp    f012dca6 <detect_loop_in_FrameInfo_list+0x79>
			cprintf("loop detected in modiflist\n");
			break;
		}

		if (fastPtr == NULL) {
			break; // since fastPtr is NULL we reached the tail
f012dca5:	90                   	nop
			break;
		}

		slowPtr = LIST_NEXT(slowPtr); // advance the slow pointer only once
	}
	cprintf("finished  loop detection\n");
f012dca6:	83 ec 0c             	sub    $0xc,%esp
f012dca9:	68 27 b1 13 f0       	push   $0xf013b127
f012dcae:	e8 7e 31 fd ff       	call   f0100e31 <cprintf>
f012dcb3:	83 c4 10             	add    $0x10,%esp
}
f012dcb6:	90                   	nop
f012dcb7:	c9                   	leave  
f012dcb8:	c3                   	ret    

f012dcb9 <scarce_memory>:

void scarce_memory()
{
f012dcb9:	55                   	push   %ebp
f012dcba:	89 e5                	mov    %esp,%ebp
f012dcbc:	83 ec 28             	sub    $0x28,%esp
	uint32 total_size_tobe_allocated = ((100 - memory_scarce_threshold_percentage)*number_of_frames)/100;
f012dcbf:	a1 c0 99 2b f0       	mov    0xf02b99c0,%eax
f012dcc4:	ba 64 00 00 00       	mov    $0x64,%edx
f012dcc9:	29 c2                	sub    %eax,%edx
f012dccb:	a1 d0 bd 2b f0       	mov    0xf02bbdd0,%eax
f012dcd0:	0f af c2             	imul   %edx,%eax
f012dcd3:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f012dcd8:	f7 e2                	mul    %edx
f012dcda:	89 d0                	mov    %edx,%eax
f012dcdc:	c1 e8 05             	shr    $0x5,%eax
f012dcdf:	89 45 f4             	mov    %eax,-0xc(%ebp)
//	cprintf("total_size_tobe_allocated %d\n", number_of_frames);
	if (((100 - memory_scarce_threshold_percentage)*number_of_frames) % 100 > 0)
f012dce2:	a1 c0 99 2b f0       	mov    0xf02b99c0,%eax
f012dce7:	ba 64 00 00 00       	mov    $0x64,%edx
f012dcec:	29 c2                	sub    %eax,%edx
f012dcee:	a1 d0 bd 2b f0       	mov    0xf02bbdd0,%eax
f012dcf3:	89 d1                	mov    %edx,%ecx
f012dcf5:	0f af c8             	imul   %eax,%ecx
f012dcf8:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f012dcfd:	f7 e1                	mul    %ecx
f012dcff:	c1 ea 05             	shr    $0x5,%edx
f012dd02:	89 d0                	mov    %edx,%eax
f012dd04:	c1 e0 02             	shl    $0x2,%eax
f012dd07:	01 d0                	add    %edx,%eax
f012dd09:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012dd10:	01 d0                	add    %edx,%eax
f012dd12:	c1 e0 02             	shl    $0x2,%eax
f012dd15:	29 c1                	sub    %eax,%ecx
f012dd17:	89 ca                	mov    %ecx,%edx
f012dd19:	85 d2                	test   %edx,%edx
f012dd1b:	74 03                	je     f012dd20 <scarce_memory+0x67>
		total_size_tobe_allocated++;
f012dd1d:	ff 45 f4             	incl   -0xc(%ebp)

	uint32 size_of_already_allocated = number_of_frames - LIST_SIZE(&free_frame_list) ;
f012dd20:	8b 15 d0 bd 2b f0    	mov    0xf02bbdd0,%edx
f012dd26:	a1 e4 bd 2b f0       	mov    0xf02bbde4,%eax
f012dd2b:	29 c2                	sub    %eax,%edx
f012dd2d:	89 d0                	mov    %edx,%eax
f012dd2f:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 size_tobe_allocated = total_size_tobe_allocated - size_of_already_allocated;
f012dd32:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012dd35:	2b 45 ec             	sub    -0x14(%ebp),%eax
f012dd38:	89 45 e8             	mov    %eax,-0x18(%ebp)
//	cprintf("size_of_already_allocated %d\n", size_of_already_allocated);
//	cprintf("size to be allocated %d\n", size_tobe_allocated);
	int i = 0 ;
f012dd3b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	struct FrameInfo* ptr_tmp_FI ;
	for (; i <= size_tobe_allocated ; i++)
f012dd42:	eb 12                	jmp    f012dd56 <scarce_memory+0x9d>
	{
		allocate_frame(&ptr_tmp_FI) ;
f012dd44:	83 ec 0c             	sub    $0xc,%esp
f012dd47:	8d 45 e4             	lea    -0x1c(%ebp),%eax
f012dd4a:	50                   	push   %eax
f012dd4b:	e8 d5 95 fd ff       	call   f0107325 <allocate_frame>
f012dd50:	83 c4 10             	add    $0x10,%esp
	uint32 size_tobe_allocated = total_size_tobe_allocated - size_of_already_allocated;
//	cprintf("size_of_already_allocated %d\n", size_of_already_allocated);
//	cprintf("size to be allocated %d\n", size_tobe_allocated);
	int i = 0 ;
	struct FrameInfo* ptr_tmp_FI ;
	for (; i <= size_tobe_allocated ; i++)
f012dd53:	ff 45 f0             	incl   -0x10(%ebp)
f012dd56:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012dd59:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f012dd5c:	76 e6                	jbe    f012dd44 <scarce_memory+0x8b>
	{
		allocate_frame(&ptr_tmp_FI) ;
	}
}
f012dd5e:	90                   	nop
f012dd5f:	c9                   	leave  
f012dd60:	c3                   	ret    

f012dd61 <calc_no_pages_tobe_removed_from_ready_exit_queues>:

uint32 calc_no_pages_tobe_removed_from_ready_exit_queues(uint32 WS_or_MEMORY_flag)
{
f012dd61:	55                   	push   %ebp
f012dd62:	89 e5                	mov    %esp,%ebp
f012dd64:	83 ec 38             	sub    $0x38,%esp
	uint32 no_of_pages_tobe_removed_from_ready = 0;
f012dd67:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 no_of_pages_tobe_removed_from_exit = 0;
f012dd6e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	uint32 no_of_pages_tobe_removed_from_curenv = 0;
f012dd75:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	if(WS_or_MEMORY_flag == 1)	// THEN MEMORY SHALL BE FREED
f012dd7c:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f012dd80:	0f 85 d3 01 00 00    	jne    f012df59 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x1f8>
	{
		for(int i = 0; i < num_of_ready_queues; i++)
f012dd86:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f012dd8d:	e9 e1 00 00 00       	jmp    f012de73 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x112>
		{
			struct Env * ptr_ready_env = NULL;
f012dd92:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
			LIST_FOREACH(ptr_ready_env, &(env_ready_queues[i]))
f012dd99:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012dd9c:	c1 e0 04             	shl    $0x4,%eax
f012dd9f:	05 60 3a 25 f0       	add    $0xf0253a60,%eax
f012dda4:	8b 00                	mov    (%eax),%eax
f012dda6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f012dda9:	e9 82 00 00 00       	jmp    f012de30 <calc_no_pages_tobe_removed_from_ready_exit_queues+0xcf>
			{
				int num_of_pages_in_WS = env_page_ws_get_size(ptr_ready_env);
f012ddae:	83 ec 0c             	sub    $0xc,%esp
f012ddb1:	ff 75 e4             	pushl  -0x1c(%ebp)
f012ddb4:	e8 9c a4 fd ff       	call   f0108255 <env_page_ws_get_size>
f012ddb9:	83 c4 10             	add    $0x10,%esp
f012ddbc:	89 45 d0             	mov    %eax,-0x30(%ebp)
				int num_of_pages_to_be_removed = curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS / 100;
f012ddbf:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f012ddc4:	8b 90 70 da 01 00    	mov    0x1da70(%eax),%edx
f012ddca:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012ddcd:	0f af c2             	imul   %edx,%eax
f012ddd0:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f012ddd5:	f7 e2                	mul    %edx
f012ddd7:	89 d0                	mov    %edx,%eax
f012ddd9:	c1 e8 05             	shr    $0x5,%eax
f012dddc:	89 45 e0             	mov    %eax,-0x20(%ebp)
				if ((curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS) % 100 > 0)
f012dddf:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f012dde4:	8b 90 70 da 01 00    	mov    0x1da70(%eax),%edx
f012ddea:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012dded:	89 d1                	mov    %edx,%ecx
f012ddef:	0f af c8             	imul   %eax,%ecx
f012ddf2:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f012ddf7:	f7 e1                	mul    %ecx
f012ddf9:	c1 ea 05             	shr    $0x5,%edx
f012ddfc:	89 d0                	mov    %edx,%eax
f012ddfe:	c1 e0 02             	shl    $0x2,%eax
f012de01:	01 d0                	add    %edx,%eax
f012de03:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012de0a:	01 d0                	add    %edx,%eax
f012de0c:	c1 e0 02             	shl    $0x2,%eax
f012de0f:	29 c1                	sub    %eax,%ecx
f012de11:	89 ca                	mov    %ecx,%edx
f012de13:	85 d2                	test   %edx,%edx
f012de15:	74 03                	je     f012de1a <calc_no_pages_tobe_removed_from_ready_exit_queues+0xb9>
					num_of_pages_to_be_removed++;
f012de17:	ff 45 e0             	incl   -0x20(%ebp)
				no_of_pages_tobe_removed_from_ready += num_of_pages_to_be_removed;
f012de1a:	8b 45 e0             	mov    -0x20(%ebp),%eax
f012de1d:	01 45 f4             	add    %eax,-0xc(%ebp)
	if(WS_or_MEMORY_flag == 1)	// THEN MEMORY SHALL BE FREED
	{
		for(int i = 0; i < num_of_ready_queues; i++)
		{
			struct Env * ptr_ready_env = NULL;
			LIST_FOREACH(ptr_ready_env, &(env_ready_queues[i]))
f012de20:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012de23:	c1 e0 04             	shl    $0x4,%eax
f012de26:	05 68 3a 25 f0       	add    $0xf0253a68,%eax
f012de2b:	8b 00                	mov    (%eax),%eax
f012de2d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f012de30:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012de34:	74 08                	je     f012de3e <calc_no_pages_tobe_removed_from_ready_exit_queues+0xdd>
f012de36:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f012de39:	8b 40 44             	mov    0x44(%eax),%eax
f012de3c:	eb 05                	jmp    f012de43 <calc_no_pages_tobe_removed_from_ready_exit_queues+0xe2>
f012de3e:	b8 00 00 00 00       	mov    $0x0,%eax
f012de43:	8b 55 e8             	mov    -0x18(%ebp),%edx
f012de46:	c1 e2 04             	shl    $0x4,%edx
f012de49:	81 c2 68 3a 25 f0    	add    $0xf0253a68,%edx
f012de4f:	89 02                	mov    %eax,(%edx)
f012de51:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012de54:	c1 e0 04             	shl    $0x4,%eax
f012de57:	05 68 3a 25 f0       	add    $0xf0253a68,%eax
f012de5c:	8b 00                	mov    (%eax),%eax
f012de5e:	85 c0                	test   %eax,%eax
f012de60:	0f 85 48 ff ff ff    	jne    f012ddae <calc_no_pages_tobe_removed_from_ready_exit_queues+0x4d>
f012de66:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012de6a:	0f 85 3e ff ff ff    	jne    f012ddae <calc_no_pages_tobe_removed_from_ready_exit_queues+0x4d>
	uint32 no_of_pages_tobe_removed_from_ready = 0;
	uint32 no_of_pages_tobe_removed_from_exit = 0;
	uint32 no_of_pages_tobe_removed_from_curenv = 0;
	if(WS_or_MEMORY_flag == 1)	// THEN MEMORY SHALL BE FREED
	{
		for(int i = 0; i < num_of_ready_queues; i++)
f012de70:	ff 45 e8             	incl   -0x18(%ebp)
f012de73:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012de78:	0f b6 c0             	movzbl %al,%eax
f012de7b:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f012de7e:	0f 8f 0e ff ff ff    	jg     f012dd92 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x31>
					num_of_pages_to_be_removed++;
				no_of_pages_tobe_removed_from_ready += num_of_pages_to_be_removed;
			}
		}

		struct Env * ptr_exit_env = NULL;
f012de84:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		LIST_FOREACH(ptr_exit_env, &env_exit_queue)
f012de8b:	a1 c4 99 2b f0       	mov    0xf02b99c4,%eax
f012de90:	89 45 dc             	mov    %eax,-0x24(%ebp)
f012de93:	eb 19                	jmp    f012deae <calc_no_pages_tobe_removed_from_ready_exit_queues+0x14d>
		{
			no_of_pages_tobe_removed_from_exit += env_page_ws_get_size(ptr_exit_env);
f012de95:	83 ec 0c             	sub    $0xc,%esp
f012de98:	ff 75 dc             	pushl  -0x24(%ebp)
f012de9b:	e8 b5 a3 fd ff       	call   f0108255 <env_page_ws_get_size>
f012dea0:	83 c4 10             	add    $0x10,%esp
f012dea3:	01 45 f0             	add    %eax,-0x10(%ebp)
				no_of_pages_tobe_removed_from_ready += num_of_pages_to_be_removed;
			}
		}

		struct Env * ptr_exit_env = NULL;
		LIST_FOREACH(ptr_exit_env, &env_exit_queue)
f012dea6:	a1 cc 99 2b f0       	mov    0xf02b99cc,%eax
f012deab:	89 45 dc             	mov    %eax,-0x24(%ebp)
f012deae:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f012deb2:	74 08                	je     f012debc <calc_no_pages_tobe_removed_from_ready_exit_queues+0x15b>
f012deb4:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012deb7:	8b 40 44             	mov    0x44(%eax),%eax
f012deba:	eb 05                	jmp    f012dec1 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x160>
f012debc:	b8 00 00 00 00       	mov    $0x0,%eax
f012dec1:	a3 cc 99 2b f0       	mov    %eax,0xf02b99cc
f012dec6:	a1 cc 99 2b f0       	mov    0xf02b99cc,%eax
f012decb:	85 c0                	test   %eax,%eax
f012decd:	75 c6                	jne    f012de95 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x134>
f012decf:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f012ded3:	75 c0                	jne    f012de95 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x134>
		{
			no_of_pages_tobe_removed_from_exit += env_page_ws_get_size(ptr_exit_env);
		}

		if(curenv != NULL)
f012ded5:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f012deda:	85 c0                	test   %eax,%eax
f012dedc:	0f 84 ec 00 00 00    	je     f012dfce <calc_no_pages_tobe_removed_from_ready_exit_queues+0x26d>
		{
			int num_of_pages_in_WS = env_page_ws_get_size(curenv);
f012dee2:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f012dee7:	83 ec 0c             	sub    $0xc,%esp
f012deea:	50                   	push   %eax
f012deeb:	e8 65 a3 fd ff       	call   f0108255 <env_page_ws_get_size>
f012def0:	83 c4 10             	add    $0x10,%esp
f012def3:	89 45 cc             	mov    %eax,-0x34(%ebp)
			int num_of_pages_to_be_removed = curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS / 100;
f012def6:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f012defb:	8b 90 70 da 01 00    	mov    0x1da70(%eax),%edx
f012df01:	8b 45 cc             	mov    -0x34(%ebp),%eax
f012df04:	0f af c2             	imul   %edx,%eax
f012df07:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f012df0c:	f7 e2                	mul    %edx
f012df0e:	89 d0                	mov    %edx,%eax
f012df10:	c1 e8 05             	shr    $0x5,%eax
f012df13:	89 45 d8             	mov    %eax,-0x28(%ebp)
			if ((curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS) % 100 > 0)
f012df16:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f012df1b:	8b 90 70 da 01 00    	mov    0x1da70(%eax),%edx
f012df21:	8b 45 cc             	mov    -0x34(%ebp),%eax
f012df24:	89 d1                	mov    %edx,%ecx
f012df26:	0f af c8             	imul   %eax,%ecx
f012df29:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f012df2e:	f7 e1                	mul    %ecx
f012df30:	c1 ea 05             	shr    $0x5,%edx
f012df33:	89 d0                	mov    %edx,%eax
f012df35:	c1 e0 02             	shl    $0x2,%eax
f012df38:	01 d0                	add    %edx,%eax
f012df3a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012df41:	01 d0                	add    %edx,%eax
f012df43:	c1 e0 02             	shl    $0x2,%eax
f012df46:	29 c1                	sub    %eax,%ecx
f012df48:	89 ca                	mov    %ecx,%edx
f012df4a:	85 d2                	test   %edx,%edx
f012df4c:	74 03                	je     f012df51 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x1f0>
				num_of_pages_to_be_removed++;
f012df4e:	ff 45 d8             	incl   -0x28(%ebp)
			no_of_pages_tobe_removed_from_curenv = num_of_pages_to_be_removed;
f012df51:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012df54:	89 45 ec             	mov    %eax,-0x14(%ebp)
f012df57:	eb 75                	jmp    f012dfce <calc_no_pages_tobe_removed_from_ready_exit_queues+0x26d>
		}
	}
	else	// THEN RAPID PROCESS SHALL BE FREED ONLY
	{
		int num_of_pages_in_WS = env_page_ws_get_size(curenv);
f012df59:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f012df5e:	83 ec 0c             	sub    $0xc,%esp
f012df61:	50                   	push   %eax
f012df62:	e8 ee a2 fd ff       	call   f0108255 <env_page_ws_get_size>
f012df67:	83 c4 10             	add    $0x10,%esp
f012df6a:	89 45 c8             	mov    %eax,-0x38(%ebp)
		int num_of_pages_to_be_removed = curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS / 100;
f012df6d:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f012df72:	8b 90 70 da 01 00    	mov    0x1da70(%eax),%edx
f012df78:	8b 45 c8             	mov    -0x38(%ebp),%eax
f012df7b:	0f af c2             	imul   %edx,%eax
f012df7e:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f012df83:	f7 e2                	mul    %edx
f012df85:	89 d0                	mov    %edx,%eax
f012df87:	c1 e8 05             	shr    $0x5,%eax
f012df8a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		if ((curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS) % 100 > 0)
f012df8d:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f012df92:	8b 90 70 da 01 00    	mov    0x1da70(%eax),%edx
f012df98:	8b 45 c8             	mov    -0x38(%ebp),%eax
f012df9b:	89 d1                	mov    %edx,%ecx
f012df9d:	0f af c8             	imul   %eax,%ecx
f012dfa0:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f012dfa5:	f7 e1                	mul    %ecx
f012dfa7:	c1 ea 05             	shr    $0x5,%edx
f012dfaa:	89 d0                	mov    %edx,%eax
f012dfac:	c1 e0 02             	shl    $0x2,%eax
f012dfaf:	01 d0                	add    %edx,%eax
f012dfb1:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012dfb8:	01 d0                	add    %edx,%eax
f012dfba:	c1 e0 02             	shl    $0x2,%eax
f012dfbd:	29 c1                	sub    %eax,%ecx
f012dfbf:	89 ca                	mov    %ecx,%edx
f012dfc1:	85 d2                	test   %edx,%edx
f012dfc3:	74 03                	je     f012dfc8 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x267>
			num_of_pages_to_be_removed++;
f012dfc5:	ff 45 d4             	incl   -0x2c(%ebp)
		no_of_pages_tobe_removed_from_curenv = num_of_pages_to_be_removed;
f012dfc8:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012dfcb:	89 45 ec             	mov    %eax,-0x14(%ebp)
	}

	return no_of_pages_tobe_removed_from_curenv + no_of_pages_tobe_removed_from_ready + no_of_pages_tobe_removed_from_exit;
f012dfce:	8b 55 ec             	mov    -0x14(%ebp),%edx
f012dfd1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012dfd4:	01 c2                	add    %eax,%edx
f012dfd6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012dfd9:	01 d0                	add    %edx,%eax
}
f012dfdb:	c9                   	leave  
f012dfdc:	c3                   	ret    

f012dfdd <schenv>:


void schenv()
{
f012dfdd:	55                   	push   %ebp
f012dfde:	89 e5                	mov    %esp,%ebp
f012dfe0:	83 ec 18             	sub    $0x18,%esp
	__nl = 0;
f012dfe3:	c6 05 6c be 2b f0 00 	movb   $0x0,0xf02bbe6c
	__ne = NULL;
f012dfea:	c7 05 f4 bd 2b f0 00 	movl   $0x0,0xf02bbdf4
f012dff1:	00 00 00 
	for (int i = 0; i < num_of_ready_queues; ++i)
f012dff4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012dffb:	eb 3a                	jmp    f012e037 <schenv+0x5a>
	{
		if (queue_size(&(env_ready_queues[i])))
f012dffd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012e000:	c1 e0 04             	shl    $0x4,%eax
f012e003:	05 60 3a 25 f0       	add    $0xf0253a60,%eax
f012e008:	83 ec 0c             	sub    $0xc,%esp
f012e00b:	50                   	push   %eax
f012e00c:	e8 9c 6d fd ff       	call   f0104dad <queue_size>
f012e011:	83 c4 10             	add    $0x10,%esp
f012e014:	85 c0                	test   %eax,%eax
f012e016:	74 1c                	je     f012e034 <schenv+0x57>
		{
			__ne = LIST_LAST(&(env_ready_queues[i]));
f012e018:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012e01b:	c1 e0 04             	shl    $0x4,%eax
f012e01e:	05 64 3a 25 f0       	add    $0xf0253a64,%eax
f012e023:	8b 00                	mov    (%eax),%eax
f012e025:	a3 f4 bd 2b f0       	mov    %eax,0xf02bbdf4
			__nl = i;
f012e02a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012e02d:	a2 6c be 2b f0       	mov    %al,0xf02bbe6c
			break;
f012e032:	eb 10                	jmp    f012e044 <schenv+0x67>

void schenv()
{
	__nl = 0;
	__ne = NULL;
	for (int i = 0; i < num_of_ready_queues; ++i)
f012e034:	ff 45 f4             	incl   -0xc(%ebp)
f012e037:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012e03c:	0f b6 c0             	movzbl %al,%eax
f012e03f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012e042:	7f b9                	jg     f012dffd <schenv+0x20>
			__ne = LIST_LAST(&(env_ready_queues[i]));
			__nl = i;
			break;
		}
	}
	if (curenv != NULL)
f012e044:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f012e049:	85 c0                	test   %eax,%eax
f012e04b:	0f 84 86 00 00 00    	je     f012e0d7 <schenv+0xfa>
	{
		if (__ne != NULL)
f012e051:	a1 f4 bd 2b f0       	mov    0xf02bbdf4,%eax
f012e056:	85 c0                	test   %eax,%eax
f012e058:	74 4b                	je     f012e0a5 <schenv+0xc8>
		{
			if ((__pl + 1) < __nl)
f012e05a:	a0 58 3a 25 f0       	mov    0xf0253a58,%al
f012e05f:	0f b6 c0             	movzbl %al,%eax
f012e062:	8d 50 01             	lea    0x1(%eax),%edx
f012e065:	a0 6c be 2b f0       	mov    0xf02bbe6c,%al
f012e06a:	0f b6 c0             	movzbl %al,%eax
f012e06d:	39 c2                	cmp    %eax,%edx
f012e06f:	7d 66                	jge    f012e0d7 <schenv+0xfa>
			{
				__ne = curenv;
f012e071:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f012e076:	a3 f4 bd 2b f0       	mov    %eax,0xf02bbdf4
				__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
f012e07b:	a0 58 3a 25 f0       	mov    0xf0253a58,%al
f012e080:	0f b6 c0             	movzbl %al,%eax
f012e083:	8a 15 44 be 2b f0    	mov    0xf02bbe44,%dl
f012e089:	0f b6 d2             	movzbl %dl,%edx
f012e08c:	4a                   	dec    %edx
f012e08d:	39 d0                	cmp    %edx,%eax
f012e08f:	7d 08                	jge    f012e099 <schenv+0xbc>
f012e091:	a0 58 3a 25 f0       	mov    0xf0253a58,%al
f012e096:	40                   	inc    %eax
f012e097:	eb 05                	jmp    f012e09e <schenv+0xc1>
f012e099:	a0 58 3a 25 f0       	mov    0xf0253a58,%al
f012e09e:	a2 6c be 2b f0       	mov    %al,0xf02bbe6c
		{
			__ne = curenv;
			__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
		}
	}
}
f012e0a3:	eb 32                	jmp    f012e0d7 <schenv+0xfa>
				__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
			}
		}
		else
		{
			__ne = curenv;
f012e0a5:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f012e0aa:	a3 f4 bd 2b f0       	mov    %eax,0xf02bbdf4
			__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
f012e0af:	a0 58 3a 25 f0       	mov    0xf0253a58,%al
f012e0b4:	0f b6 c0             	movzbl %al,%eax
f012e0b7:	8a 15 44 be 2b f0    	mov    0xf02bbe44,%dl
f012e0bd:	0f b6 d2             	movzbl %dl,%edx
f012e0c0:	4a                   	dec    %edx
f012e0c1:	39 d0                	cmp    %edx,%eax
f012e0c3:	7d 08                	jge    f012e0cd <schenv+0xf0>
f012e0c5:	a0 58 3a 25 f0       	mov    0xf0253a58,%al
f012e0ca:	40                   	inc    %eax
f012e0cb:	eb 05                	jmp    f012e0d2 <schenv+0xf5>
f012e0cd:	a0 58 3a 25 f0       	mov    0xf0253a58,%al
f012e0d2:	a2 6c be 2b f0       	mov    %al,0xf02bbe6c
		}
	}
}
f012e0d7:	90                   	nop
f012e0d8:	c9                   	leave  
f012e0d9:	c3                   	ret    

f012e0da <chksch>:

void chksch(uint8 onoff)
{
f012e0da:	55                   	push   %ebp
f012e0db:	89 e5                	mov    %esp,%ebp
f012e0dd:	83 ec 04             	sub    $0x4,%esp
f012e0e0:	8b 45 08             	mov    0x8(%ebp),%eax
f012e0e3:	88 45 fc             	mov    %al,-0x4(%ebp)
	__pe = NULL;
f012e0e6:	c7 05 68 be 2b f0 00 	movl   $0x0,0xf02bbe68
f012e0ed:	00 00 00 
	__ne = NULL;
f012e0f0:	c7 05 f4 bd 2b f0 00 	movl   $0x0,0xf02bbdf4
f012e0f7:	00 00 00 
	__pl = 0 ;
f012e0fa:	c6 05 58 3a 25 f0 00 	movb   $0x0,0xf0253a58
	__nl = 0 ;
f012e101:	c6 05 6c be 2b f0 00 	movb   $0x0,0xf02bbe6c
	__chkstatus = onoff;
f012e108:	8a 45 fc             	mov    -0x4(%ebp),%al
f012e10b:	a2 f0 bd 2b f0       	mov    %al,0xf02bbdf0
}
f012e110:	90                   	nop
f012e111:	c9                   	leave  
f012e112:	c3                   	ret    

f012e113 <chk1>:
void chk1()
{
f012e113:	55                   	push   %ebp
f012e114:	89 e5                	mov    %esp,%ebp
f012e116:	83 ec 08             	sub    $0x8,%esp
	if (__chkstatus == 0)
f012e119:	a0 f0 bd 2b f0       	mov    0xf02bbdf0,%al
f012e11e:	84 c0                	test   %al,%al
f012e120:	74 2b                	je     f012e14d <chk1+0x3a>
		return ;
	__pe = curenv;
f012e122:	a1 74 31 25 f0       	mov    0xf0253174,%eax
f012e127:	a3 68 be 2b f0       	mov    %eax,0xf02bbe68
	__pl = __nl ;
f012e12c:	a0 6c be 2b f0       	mov    0xf02bbe6c,%al
f012e131:	a2 58 3a 25 f0       	mov    %al,0xf0253a58
	if (__pe == NULL)
f012e136:	a1 68 be 2b f0       	mov    0xf02bbe68,%eax
f012e13b:	85 c0                	test   %eax,%eax
f012e13d:	75 07                	jne    f012e146 <chk1+0x33>
	{
		__pl = 0;
f012e13f:	c6 05 58 3a 25 f0 00 	movb   $0x0,0xf0253a58
	}
	//cprintf("chk1: current = %s @ level %d\n", __pe == NULL? "NULL" : __pe->prog_name, __pl);
	schenv();
f012e146:	e8 92 fe ff ff       	call   f012dfdd <schenv>
f012e14b:	eb 01                	jmp    f012e14e <chk1+0x3b>
	__chkstatus = onoff;
}
void chk1()
{
	if (__chkstatus == 0)
		return ;
f012e14d:	90                   	nop
	{
		__pl = 0;
	}
	//cprintf("chk1: current = %s @ level %d\n", __pe == NULL? "NULL" : __pe->prog_name, __pl);
	schenv();
}
f012e14e:	c9                   	leave  
f012e14f:	c3                   	ret    

f012e150 <chk2>:
void chk2(struct Env* __se)
{
f012e150:	55                   	push   %ebp
f012e151:	89 e5                	mov    %esp,%ebp
f012e153:	53                   	push   %ebx
f012e154:	83 ec 14             	sub    $0x14,%esp
	if (__chkstatus == 0)
f012e157:	a0 f0 bd 2b f0       	mov    0xf02bbdf0,%al
f012e15c:	84 c0                	test   %al,%al
f012e15e:	0f 84 35 02 00 00    	je     f012e399 <chk2+0x249>
		return ;

	//cprintf("chk2: next = %s @ level %d\n", __ne == NULL? "NULL" : __ne->prog_name, __nl);

	assert_endall(__se == __ne);
f012e164:	a1 f4 bd 2b f0       	mov    0xf02bbdf4,%eax
f012e169:	39 45 08             	cmp    %eax,0x8(%ebp)
f012e16c:	74 19                	je     f012e187 <chk2+0x37>
f012e16e:	68 41 b1 13 f0       	push   $0xf013b141
f012e173:	68 4e b1 13 f0       	push   $0xf013b14e
f012e178:	68 f8 00 00 00       	push   $0xf8
f012e17d:	68 93 b0 13 f0       	push   $0xf013b093
f012e182:	e8 df 20 fd ff       	call   f0100266 <_panic_all>
	//cprintf("%d - %d\n", kclock_read_cnt0_latch() , TIMER_DIV((1000/quantums[__nl])));

	if (__ne != NULL)
f012e187:	a1 f4 bd 2b f0       	mov    0xf02bbdf4,%eax
f012e18c:	85 c0                	test   %eax,%eax
f012e18e:	0f 84 1b 01 00 00    	je     f012e2af <chk2+0x15f>
	{
		uint16 upper = TIMER_DIV((1000/quantums[__nl])) ;
f012e194:	a0 6c be 2b f0       	mov    0xf02bbe6c,%al
f012e199:	0f b6 c0             	movzbl %al,%eax
f012e19c:	8a 80 e8 bd 2b f0    	mov    -0xfd44218(%eax),%al
f012e1a2:	0f b6 d8             	movzbl %al,%ebx
f012e1a5:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f012e1aa:	99                   	cltd   
f012e1ab:	f7 fb                	idiv   %ebx
f012e1ad:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f012e1b3:	a0 6c be 2b f0       	mov    0xf02bbe6c,%al
f012e1b8:	0f b6 c0             	movzbl %al,%eax
f012e1bb:	8a 80 e8 bd 2b f0    	mov    -0xfd44218(%eax),%al
f012e1c1:	0f b6 d8             	movzbl %al,%ebx
f012e1c4:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f012e1c9:	99                   	cltd   
f012e1ca:	f7 fb                	idiv   %ebx
f012e1cc:	89 c3                	mov    %eax,%ebx
f012e1ce:	89 c8                	mov    %ecx,%eax
f012e1d0:	99                   	cltd   
f012e1d1:	f7 fb                	idiv   %ebx
f012e1d3:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
		upper = upper % 2 == 1? upper+1 : upper ;
f012e1d7:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f012e1db:	83 e0 01             	and    $0x1,%eax
f012e1de:	66 85 c0             	test   %ax,%ax
f012e1e1:	74 07                	je     f012e1ea <chk2+0x9a>
f012e1e3:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f012e1e7:	40                   	inc    %eax
f012e1e8:	eb 04                	jmp    f012e1ee <chk2+0x9e>
f012e1ea:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f012e1ee:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
		uint16 lower = 90 * upper / 100 ;
f012e1f2:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
f012e1f6:	89 d0                	mov    %edx,%eax
f012e1f8:	c1 e0 02             	shl    $0x2,%eax
f012e1fb:	01 d0                	add    %edx,%eax
f012e1fd:	01 c0                	add    %eax,%eax
f012e1ff:	01 d0                	add    %edx,%eax
f012e201:	c1 e0 02             	shl    $0x2,%eax
f012e204:	01 d0                	add    %edx,%eax
f012e206:	01 c0                	add    %eax,%eax
f012e208:	89 c1                	mov    %eax,%ecx
f012e20a:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f012e20f:	f7 e9                	imul   %ecx
f012e211:	c1 fa 05             	sar    $0x5,%edx
f012e214:	89 c8                	mov    %ecx,%eax
f012e216:	c1 f8 1f             	sar    $0x1f,%eax
f012e219:	29 c2                	sub    %eax,%edx
f012e21b:	89 d0                	mov    %edx,%eax
f012e21d:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
		uint16 current = kclock_read_cnt0();
f012e221:	e8 8d 6a fd ff       	call   f0104cb3 <kclock_read_cnt0>
f012e226:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
		//cprintf("current = %d, lower = %d, upper = %d\n", current, lower, upper);
		assert_endall(current > lower && current <= upper) ;
f012e22a:	66 8b 45 ea          	mov    -0x16(%ebp),%ax
f012e22e:	66 3b 45 ec          	cmp    -0x14(%ebp),%ax
f012e232:	76 0a                	jbe    f012e23e <chk2+0xee>
f012e234:	66 8b 45 ea          	mov    -0x16(%ebp),%ax
f012e238:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f012e23c:	76 19                	jbe    f012e257 <chk2+0x107>
f012e23e:	68 64 b1 13 f0       	push   $0xf013b164
f012e243:	68 4e b1 13 f0       	push   $0xf013b14e
f012e248:	68 02 01 00 00       	push   $0x102
f012e24d:	68 93 b0 13 f0       	push   $0xf013b093
f012e252:	e8 0f 20 fd ff       	call   f0100266 <_panic_all>

		for (int i = 0; i < num_of_ready_queues; ++i)
f012e257:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012e25e:	eb 42                	jmp    f012e2a2 <chk2+0x152>
		{
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __ne->env_id) == NULL);
f012e260:	a1 f4 bd 2b f0       	mov    0xf02bbdf4,%eax
f012e265:	8b 40 4c             	mov    0x4c(%eax),%eax
f012e268:	89 c2                	mov    %eax,%edx
f012e26a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012e26d:	c1 e0 04             	shl    $0x4,%eax
f012e270:	05 60 3a 25 f0       	add    $0xf0253a60,%eax
f012e275:	83 ec 08             	sub    $0x8,%esp
f012e278:	52                   	push   %edx
f012e279:	50                   	push   %eax
f012e27a:	e8 48 6d fd ff       	call   f0104fc7 <find_env_in_queue>
f012e27f:	83 c4 10             	add    $0x10,%esp
f012e282:	85 c0                	test   %eax,%eax
f012e284:	74 19                	je     f012e29f <chk2+0x14f>
f012e286:	68 88 b1 13 f0       	push   $0xf013b188
f012e28b:	68 4e b1 13 f0       	push   $0xf013b14e
f012e290:	68 06 01 00 00       	push   $0x106
f012e295:	68 93 b0 13 f0       	push   $0xf013b093
f012e29a:	e8 c7 1f fd ff       	call   f0100266 <_panic_all>
		uint16 lower = 90 * upper / 100 ;
		uint16 current = kclock_read_cnt0();
		//cprintf("current = %d, lower = %d, upper = %d\n", current, lower, upper);
		assert_endall(current > lower && current <= upper) ;

		for (int i = 0; i < num_of_ready_queues; ++i)
f012e29f:	ff 45 f4             	incl   -0xc(%ebp)
f012e2a2:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012e2a7:	0f b6 c0             	movzbl %al,%eax
f012e2aa:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012e2ad:	7f b1                	jg     f012e260 <chk2+0x110>
		{
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __ne->env_id) == NULL);
		}
	}
	if (__pe != NULL && __pe != __ne)
f012e2af:	a1 68 be 2b f0       	mov    0xf02bbe68,%eax
f012e2b4:	85 c0                	test   %eax,%eax
f012e2b6:	0f 84 de 00 00 00    	je     f012e39a <chk2+0x24a>
f012e2bc:	8b 15 68 be 2b f0    	mov    0xf02bbe68,%edx
f012e2c2:	a1 f4 bd 2b f0       	mov    0xf02bbdf4,%eax
f012e2c7:	39 c2                	cmp    %eax,%edx
f012e2c9:	0f 84 cb 00 00 00    	je     f012e39a <chk2+0x24a>
	{
		uint8 __tl = __pl == num_of_ready_queues-1 ? __pl : __pl + 1 ;
f012e2cf:	a0 58 3a 25 f0       	mov    0xf0253a58,%al
f012e2d4:	0f b6 c0             	movzbl %al,%eax
f012e2d7:	8a 15 44 be 2b f0    	mov    0xf02bbe44,%dl
f012e2dd:	0f b6 d2             	movzbl %dl,%edx
f012e2e0:	4a                   	dec    %edx
f012e2e1:	39 d0                	cmp    %edx,%eax
f012e2e3:	74 08                	je     f012e2ed <chk2+0x19d>
f012e2e5:	a0 58 3a 25 f0       	mov    0xf0253a58,%al
f012e2ea:	40                   	inc    %eax
f012e2eb:	eb 05                	jmp    f012e2f2 <chk2+0x1a2>
f012e2ed:	a0 58 3a 25 f0       	mov    0xf0253a58,%al
f012e2f2:	88 45 e9             	mov    %al,-0x17(%ebp)
		assert_endall(find_env_in_queue(&(env_ready_queues[__tl]), __pe->env_id) != NULL);
f012e2f5:	a1 68 be 2b f0       	mov    0xf02bbe68,%eax
f012e2fa:	8b 40 4c             	mov    0x4c(%eax),%eax
f012e2fd:	89 c2                	mov    %eax,%edx
f012e2ff:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
f012e303:	c1 e0 04             	shl    $0x4,%eax
f012e306:	05 60 3a 25 f0       	add    $0xf0253a60,%eax
f012e30b:	83 ec 08             	sub    $0x8,%esp
f012e30e:	52                   	push   %edx
f012e30f:	50                   	push   %eax
f012e310:	e8 b2 6c fd ff       	call   f0104fc7 <find_env_in_queue>
f012e315:	83 c4 10             	add    $0x10,%esp
f012e318:	85 c0                	test   %eax,%eax
f012e31a:	75 19                	jne    f012e335 <chk2+0x1e5>
f012e31c:	68 c8 b1 13 f0       	push   $0xf013b1c8
f012e321:	68 4e b1 13 f0       	push   $0xf013b14e
f012e326:	68 0c 01 00 00       	push   $0x10c
f012e32b:	68 93 b0 13 f0       	push   $0xf013b093
f012e330:	e8 31 1f fd ff       	call   f0100266 <_panic_all>
		for (int i = 0; i < num_of_ready_queues; ++i)
f012e335:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f012e33c:	eb 4c                	jmp    f012e38a <chk2+0x23a>
		{
			if (i == __tl) continue;
f012e33e:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
f012e342:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012e345:	74 3f                	je     f012e386 <chk2+0x236>
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __pe->env_id) == NULL) ;
f012e347:	a1 68 be 2b f0       	mov    0xf02bbe68,%eax
f012e34c:	8b 40 4c             	mov    0x4c(%eax),%eax
f012e34f:	89 c2                	mov    %eax,%edx
f012e351:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012e354:	c1 e0 04             	shl    $0x4,%eax
f012e357:	05 60 3a 25 f0       	add    $0xf0253a60,%eax
f012e35c:	83 ec 08             	sub    $0x8,%esp
f012e35f:	52                   	push   %edx
f012e360:	50                   	push   %eax
f012e361:	e8 61 6c fd ff       	call   f0104fc7 <find_env_in_queue>
f012e366:	83 c4 10             	add    $0x10,%esp
f012e369:	85 c0                	test   %eax,%eax
f012e36b:	74 1a                	je     f012e387 <chk2+0x237>
f012e36d:	68 0c b2 13 f0       	push   $0xf013b20c
f012e372:	68 4e b1 13 f0       	push   $0xf013b14e
f012e377:	68 10 01 00 00       	push   $0x110
f012e37c:	68 93 b0 13 f0       	push   $0xf013b093
f012e381:	e8 e0 1e fd ff       	call   f0100266 <_panic_all>
	{
		uint8 __tl = __pl == num_of_ready_queues-1 ? __pl : __pl + 1 ;
		assert_endall(find_env_in_queue(&(env_ready_queues[__tl]), __pe->env_id) != NULL);
		for (int i = 0; i < num_of_ready_queues; ++i)
		{
			if (i == __tl) continue;
f012e386:	90                   	nop
	}
	if (__pe != NULL && __pe != __ne)
	{
		uint8 __tl = __pl == num_of_ready_queues-1 ? __pl : __pl + 1 ;
		assert_endall(find_env_in_queue(&(env_ready_queues[__tl]), __pe->env_id) != NULL);
		for (int i = 0; i < num_of_ready_queues; ++i)
f012e387:	ff 45 f0             	incl   -0x10(%ebp)
f012e38a:	a0 44 be 2b f0       	mov    0xf02bbe44,%al
f012e38f:	0f b6 c0             	movzbl %al,%eax
f012e392:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012e395:	7f a7                	jg     f012e33e <chk2+0x1ee>
f012e397:	eb 01                	jmp    f012e39a <chk2+0x24a>
	schenv();
}
void chk2(struct Env* __se)
{
	if (__chkstatus == 0)
		return ;
f012e399:	90                   	nop
		{
			if (i == __tl) continue;
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __pe->env_id) == NULL) ;
		}
	}
}
f012e39a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f012e39d:	c9                   	leave  
f012e39e:	c3                   	ret    

f012e39f <check_boot_pgdir>:
// but it is a pretty good check.
//
uint32 check_va2pa(uint32 *ptr_page_directory, uint32 va);

void check_boot_pgdir()
{
f012e39f:	55                   	push   %ebp
f012e3a0:	89 e5                	mov    %esp,%ebp
f012e3a2:	83 ec 18             	sub    $0x18,%esp
		for (i = 0; KERNEL_BASE + i < (uint32)ptr_free_mem; i += PAGE_SIZE)
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}
	#else
	{
		for (i = 0; KERNEL_BASE + i != 0; i += PAGE_SIZE)
f012e3a5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012e3ac:	eb 40                	jmp    f012e3ee <check_boot_pgdir+0x4f>
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
f012e3ae:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012e3b1:	8d 90 00 00 00 f0    	lea    -0x10000000(%eax),%edx
f012e3b7:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f012e3bc:	83 ec 08             	sub    $0x8,%esp
f012e3bf:	52                   	push   %edx
f012e3c0:	50                   	push   %eax
f012e3c1:	e8 92 01 00 00       	call   f012e558 <check_va2pa>
f012e3c6:	83 c4 10             	add    $0x10,%esp
f012e3c9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012e3cc:	74 19                	je     f012e3e7 <check_boot_pgdir+0x48>
f012e3ce:	68 4c b2 13 f0       	push   $0xf013b24c
f012e3d3:	68 4e b1 13 f0       	push   $0xf013b14e
f012e3d8:	68 37 01 00 00       	push   $0x137
f012e3dd:	68 93 b0 13 f0       	push   $0xf013b093
f012e3e2:	e8 c9 1d fd ff       	call   f01001b0 <_panic>
		for (i = 0; KERNEL_BASE + i < (uint32)ptr_free_mem; i += PAGE_SIZE)
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}
	#else
	{
		for (i = 0; KERNEL_BASE + i != 0; i += PAGE_SIZE)
f012e3e7:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f012e3ee:	81 7d f4 00 00 00 10 	cmpl   $0x10000000,-0xc(%ebp)
f012e3f5:	75 b7                	jne    f012e3ae <check_boot_pgdir+0xf>
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}
	#endif
	// check kernel stack
	for (i = 0; i < KERNEL_STACK_SIZE; i += PAGE_SIZE)
f012e3f7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012e3fe:	eb 74                	jmp    f012e474 <check_boot_pgdir+0xd5>
		assert(check_va2pa(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);
f012e400:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012e403:	8d 90 00 80 bf ef    	lea    -0x10408000(%eax),%edx
f012e409:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f012e40e:	83 ec 08             	sub    $0x8,%esp
f012e411:	52                   	push   %edx
f012e412:	50                   	push   %eax
f012e413:	e8 40 01 00 00       	call   f012e558 <check_va2pa>
f012e418:	83 c4 10             	add    $0x10,%esp
f012e41b:	c7 45 f0 00 60 18 f0 	movl   $0xf0186000,-0x10(%ebp)
f012e422:	81 7d f0 ff ff ff ef 	cmpl   $0xefffffff,-0x10(%ebp)
f012e429:	77 17                	ja     f012e442 <check_boot_pgdir+0xa3>
f012e42b:	ff 75 f0             	pushl  -0x10(%ebp)
f012e42e:	68 84 b2 13 f0       	push   $0xf013b284
f012e433:	68 3c 01 00 00       	push   $0x13c
f012e438:	68 93 b0 13 f0       	push   $0xf013b093
f012e43d:	e8 6e 1d fd ff       	call   f01001b0 <_panic>
f012e442:	8b 55 f0             	mov    -0x10(%ebp),%edx
f012e445:	8d 8a 00 00 00 10    	lea    0x10000000(%edx),%ecx
f012e44b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012e44e:	01 ca                	add    %ecx,%edx
f012e450:	39 d0                	cmp    %edx,%eax
f012e452:	74 19                	je     f012e46d <check_boot_pgdir+0xce>
f012e454:	68 b8 b2 13 f0       	push   $0xf013b2b8
f012e459:	68 4e b1 13 f0       	push   $0xf013b14e
f012e45e:	68 3c 01 00 00       	push   $0x13c
f012e463:	68 93 b0 13 f0       	push   $0xf013b093
f012e468:	e8 43 1d fd ff       	call   f01001b0 <_panic>
		for (i = 0; KERNEL_BASE + i != 0; i += PAGE_SIZE)
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}
	#endif
	// check kernel stack
	for (i = 0; i < KERNEL_STACK_SIZE; i += PAGE_SIZE)
f012e46d:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f012e474:	81 7d f4 ff 7f 00 00 	cmpl   $0x7fff,-0xc(%ebp)
f012e47b:	76 83                	jbe    f012e400 <check_boot_pgdir+0x61>
		assert(check_va2pa(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);

	// check for zero/non-zero in PDEs
	for (i = 0; i < NPDENTRIES; i++) {
f012e47d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012e484:	e9 af 00 00 00       	jmp    f012e538 <check_boot_pgdir+0x199>
		switch (i) {
f012e489:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012e48c:	3d bb 03 00 00       	cmp    $0x3bb,%eax
f012e491:	74 11                	je     f012e4a4 <check_boot_pgdir+0x105>
f012e493:	3d bb 03 00 00       	cmp    $0x3bb,%eax
f012e498:	72 36                	jb     f012e4d0 <check_boot_pgdir+0x131>
f012e49a:	2d bd 03 00 00       	sub    $0x3bd,%eax
f012e49f:	83 f8 02             	cmp    $0x2,%eax
f012e4a2:	77 2c                	ja     f012e4d0 <check_boot_pgdir+0x131>
		case PDX(UVPT):
		case PDX(KERNEL_STACK_TOP-1):
		case PDX(UENVS):
		//2016: READ_ONLY_FRAMES_INFO not valid any more since it can't fit in 4 MB space
		//case PDX(READ_ONLY_FRAMES_INFO):
		assert(ptr_page_directory[i]);
f012e4a4:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f012e4a9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012e4ac:	c1 e2 02             	shl    $0x2,%edx
f012e4af:	01 d0                	add    %edx,%eax
f012e4b1:	8b 00                	mov    (%eax),%eax
f012e4b3:	85 c0                	test   %eax,%eax
f012e4b5:	75 7a                	jne    f012e531 <check_boot_pgdir+0x192>
f012e4b7:	68 3a b3 13 f0       	push   $0xf013b33a
f012e4bc:	68 4e b1 13 f0       	push   $0xf013b14e
f012e4c1:	68 47 01 00 00       	push   $0x147
f012e4c6:	68 93 b0 13 f0       	push   $0xf013b093
f012e4cb:	e8 e0 1c fd ff       	call   f01001b0 <_panic>
		break;
		default:
			if (i >= PDX(KERNEL_BASE))
f012e4d0:	81 7d f4 bf 03 00 00 	cmpl   $0x3bf,-0xc(%ebp)
f012e4d7:	76 2c                	jbe    f012e505 <check_boot_pgdir+0x166>
				assert(ptr_page_directory[i]);
f012e4d9:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f012e4de:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012e4e1:	c1 e2 02             	shl    $0x2,%edx
f012e4e4:	01 d0                	add    %edx,%eax
f012e4e6:	8b 00                	mov    (%eax),%eax
f012e4e8:	85 c0                	test   %eax,%eax
f012e4ea:	75 48                	jne    f012e534 <check_boot_pgdir+0x195>
f012e4ec:	68 3a b3 13 f0       	push   $0xf013b33a
f012e4f1:	68 4e b1 13 f0       	push   $0xf013b14e
f012e4f6:	68 4b 01 00 00       	push   $0x14b
f012e4fb:	68 93 b0 13 f0       	push   $0xf013b093
f012e500:	e8 ab 1c fd ff       	call   f01001b0 <_panic>
			else
				assert(ptr_page_directory[i] == 0);
f012e505:	a1 30 be 2b f0       	mov    0xf02bbe30,%eax
f012e50a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012e50d:	c1 e2 02             	shl    $0x2,%edx
f012e510:	01 d0                	add    %edx,%eax
f012e512:	8b 00                	mov    (%eax),%eax
f012e514:	85 c0                	test   %eax,%eax
f012e516:	74 1c                	je     f012e534 <check_boot_pgdir+0x195>
f012e518:	68 50 b3 13 f0       	push   $0xf013b350
f012e51d:	68 4e b1 13 f0       	push   $0xf013b14e
f012e522:	68 4d 01 00 00       	push   $0x14d
f012e527:	68 93 b0 13 f0       	push   $0xf013b093
f012e52c:	e8 7f 1c fd ff       	call   f01001b0 <_panic>
		case PDX(KERNEL_STACK_TOP-1):
		case PDX(UENVS):
		//2016: READ_ONLY_FRAMES_INFO not valid any more since it can't fit in 4 MB space
		//case PDX(READ_ONLY_FRAMES_INFO):
		assert(ptr_page_directory[i]);
		break;
f012e531:	90                   	nop
f012e532:	eb 01                	jmp    f012e535 <check_boot_pgdir+0x196>
		default:
			if (i >= PDX(KERNEL_BASE))
				assert(ptr_page_directory[i]);
			else
				assert(ptr_page_directory[i] == 0);
			break;
f012e534:	90                   	nop
	// check kernel stack
	for (i = 0; i < KERNEL_STACK_SIZE; i += PAGE_SIZE)
		assert(check_va2pa(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);

	// check for zero/non-zero in PDEs
	for (i = 0; i < NPDENTRIES; i++) {
f012e535:	ff 45 f4             	incl   -0xc(%ebp)
f012e538:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f012e53f:	0f 86 44 ff ff ff    	jbe    f012e489 <check_boot_pgdir+0xea>
			else
				assert(ptr_page_directory[i] == 0);
			break;
		}
	}
	cprintf("check_boot_pgdir() succeeded!\n");
f012e545:	83 ec 0c             	sub    $0xc,%esp
f012e548:	68 6c b3 13 f0       	push   $0xf013b36c
f012e54d:	e8 df 28 fd ff       	call   f0100e31 <cprintf>
f012e552:	83 c4 10             	add    $0x10,%esp
}
f012e555:	90                   	nop
f012e556:	c9                   	leave  
f012e557:	c3                   	ret    

f012e558 <check_va2pa>:
// defined by the page directory 'ptr_page_directory'.  The hardware normally performs
// this functionality for us!  We define our own version to help check
// the check_boot_pgdir() function; it shouldn't be used elsewhere.

uint32 check_va2pa(uint32 *ptr_page_directory, uint32 va)
{
f012e558:	55                   	push   %ebp
f012e559:	89 e5                	mov    %esp,%ebp
f012e55b:	83 ec 18             	sub    $0x18,%esp
	uint32 *p;

	uint32* dirEntry = &(ptr_page_directory[PDX(va)]);
f012e55e:	8b 45 0c             	mov    0xc(%ebp),%eax
f012e561:	c1 e8 16             	shr    $0x16,%eax
f012e564:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012e56b:	8b 45 08             	mov    0x8(%ebp),%eax
f012e56e:	01 d0                	add    %edx,%eax
f012e570:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_VARS("dir table entry %x", *dirEntry);

	if (!(*dirEntry & PERM_PRESENT))
f012e573:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012e576:	8b 00                	mov    (%eax),%eax
f012e578:	83 e0 01             	and    $0x1,%eax
f012e57b:	85 c0                	test   %eax,%eax
f012e57d:	75 0a                	jne    f012e589 <check_va2pa+0x31>
		return ~0;
f012e57f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f012e584:	e9 87 00 00 00       	jmp    f012e610 <check_va2pa+0xb8>
	p = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(*dirEntry));
f012e589:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012e58c:	8b 00                	mov    (%eax),%eax
f012e58e:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f012e593:	89 45 f0             	mov    %eax,-0x10(%ebp)
f012e596:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012e599:	c1 e8 0c             	shr    $0xc,%eax
f012e59c:	89 45 ec             	mov    %eax,-0x14(%ebp)
f012e59f:	a1 d0 bd 2b f0       	mov    0xf02bbdd0,%eax
f012e5a4:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f012e5a7:	72 17                	jb     f012e5c0 <check_va2pa+0x68>
f012e5a9:	ff 75 f0             	pushl  -0x10(%ebp)
f012e5ac:	68 8c b3 13 f0       	push   $0xf013b38c
f012e5b1:	68 63 01 00 00       	push   $0x163
f012e5b6:	68 93 b0 13 f0       	push   $0xf013b093
f012e5bb:	e8 f0 1b fd ff       	call   f01001b0 <_panic>
f012e5c0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012e5c3:	2d 00 00 00 10       	sub    $0x10000000,%eax
f012e5c8:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//LOG_VARS("ptr to page table  = %x", p);

	if (!(p[PTX(va)] & PERM_PRESENT))
f012e5cb:	8b 45 0c             	mov    0xc(%ebp),%eax
f012e5ce:	c1 e8 0c             	shr    $0xc,%eax
f012e5d1:	25 ff 03 00 00       	and    $0x3ff,%eax
f012e5d6:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012e5dd:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012e5e0:	01 d0                	add    %edx,%eax
f012e5e2:	8b 00                	mov    (%eax),%eax
f012e5e4:	83 e0 01             	and    $0x1,%eax
f012e5e7:	85 c0                	test   %eax,%eax
f012e5e9:	75 07                	jne    f012e5f2 <check_va2pa+0x9a>
		return ~0;
f012e5eb:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f012e5f0:	eb 1e                	jmp    f012e610 <check_va2pa+0xb8>

	//LOG_VARS("page phys addres = %x",EXTRACT_ADDRESS(p[PTX(va)]));
	return EXTRACT_ADDRESS(p[PTX(va)]);
f012e5f2:	8b 45 0c             	mov    0xc(%ebp),%eax
f012e5f5:	c1 e8 0c             	shr    $0xc,%eax
f012e5f8:	25 ff 03 00 00       	and    $0x3ff,%eax
f012e5fd:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012e604:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012e607:	01 d0                	add    %edx,%eax
f012e609:	8b 00                	mov    (%eax),%eax
f012e60b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
}
f012e610:	c9                   	leave  
f012e611:	c3                   	ret    

f012e612 <printnum>:
 * using specified putch function and associated pointer putdat.
 */
static void
printnum(void (*putch)(int, void*), void *putdat,
	 unsigned long long num, unsigned base, int width, int padc)
{
f012e612:	55                   	push   %ebp
f012e613:	89 e5                	mov    %esp,%ebp
f012e615:	53                   	push   %ebx
f012e616:	83 ec 14             	sub    $0x14,%esp
f012e619:	8b 45 10             	mov    0x10(%ebp),%eax
f012e61c:	89 45 f0             	mov    %eax,-0x10(%ebp)
f012e61f:	8b 45 14             	mov    0x14(%ebp),%eax
f012e622:	89 45 f4             	mov    %eax,-0xc(%ebp)
	// first recursively print all preceding (more significant) digits
	if (num >= base) {
f012e625:	8b 45 18             	mov    0x18(%ebp),%eax
f012e628:	ba 00 00 00 00       	mov    $0x0,%edx
f012e62d:	3b 55 f4             	cmp    -0xc(%ebp),%edx
f012e630:	77 55                	ja     f012e687 <printnum+0x75>
f012e632:	3b 55 f4             	cmp    -0xc(%ebp),%edx
f012e635:	72 05                	jb     f012e63c <printnum+0x2a>
f012e637:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012e63a:	77 4b                	ja     f012e687 <printnum+0x75>
		printnum(putch, putdat, num / base, base, width - 1, padc);
f012e63c:	8b 45 1c             	mov    0x1c(%ebp),%eax
f012e63f:	8d 58 ff             	lea    -0x1(%eax),%ebx
f012e642:	8b 45 18             	mov    0x18(%ebp),%eax
f012e645:	ba 00 00 00 00       	mov    $0x0,%edx
f012e64a:	52                   	push   %edx
f012e64b:	50                   	push   %eax
f012e64c:	ff 75 f4             	pushl  -0xc(%ebp)
f012e64f:	ff 75 f0             	pushl  -0x10(%ebp)
f012e652:	e8 91 1a 00 00       	call   f01300e8 <__udivdi3>
f012e657:	83 c4 10             	add    $0x10,%esp
f012e65a:	83 ec 04             	sub    $0x4,%esp
f012e65d:	ff 75 20             	pushl  0x20(%ebp)
f012e660:	53                   	push   %ebx
f012e661:	ff 75 18             	pushl  0x18(%ebp)
f012e664:	52                   	push   %edx
f012e665:	50                   	push   %eax
f012e666:	ff 75 0c             	pushl  0xc(%ebp)
f012e669:	ff 75 08             	pushl  0x8(%ebp)
f012e66c:	e8 a1 ff ff ff       	call   f012e612 <printnum>
f012e671:	83 c4 20             	add    $0x20,%esp
f012e674:	eb 1a                	jmp    f012e690 <printnum+0x7e>
	} else {
		// print any needed pad characters before first digit
		while (--width > 0)
			putch(padc, putdat);
f012e676:	83 ec 08             	sub    $0x8,%esp
f012e679:	ff 75 0c             	pushl  0xc(%ebp)
f012e67c:	ff 75 20             	pushl  0x20(%ebp)
f012e67f:	8b 45 08             	mov    0x8(%ebp),%eax
f012e682:	ff d0                	call   *%eax
f012e684:	83 c4 10             	add    $0x10,%esp
	// first recursively print all preceding (more significant) digits
	if (num >= base) {
		printnum(putch, putdat, num / base, base, width - 1, padc);
	} else {
		// print any needed pad characters before first digit
		while (--width > 0)
f012e687:	ff 4d 1c             	decl   0x1c(%ebp)
f012e68a:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
f012e68e:	7f e6                	jg     f012e676 <printnum+0x64>
			putch(padc, putdat);
	}

	// then print this (the least significant) digit
	putch("0123456789abcdef"[num % base], putdat);
f012e690:	8b 4d 18             	mov    0x18(%ebp),%ecx
f012e693:	bb 00 00 00 00       	mov    $0x0,%ebx
f012e698:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012e69b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012e69e:	53                   	push   %ebx
f012e69f:	51                   	push   %ecx
f012e6a0:	52                   	push   %edx
f012e6a1:	50                   	push   %eax
f012e6a2:	e8 51 1b 00 00       	call   f01301f8 <__umoddi3>
f012e6a7:	83 c4 10             	add    $0x10,%esp
f012e6aa:	05 d4 b5 13 f0       	add    $0xf013b5d4,%eax
f012e6af:	8a 00                	mov    (%eax),%al
f012e6b1:	0f be c0             	movsbl %al,%eax
f012e6b4:	83 ec 08             	sub    $0x8,%esp
f012e6b7:	ff 75 0c             	pushl  0xc(%ebp)
f012e6ba:	50                   	push   %eax
f012e6bb:	8b 45 08             	mov    0x8(%ebp),%eax
f012e6be:	ff d0                	call   *%eax
f012e6c0:	83 c4 10             	add    $0x10,%esp
}
f012e6c3:	90                   	nop
f012e6c4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f012e6c7:	c9                   	leave  
f012e6c8:	c3                   	ret    

f012e6c9 <getuint>:

// Get an unsigned int of various possible sizes from a varargs list,
// depending on the lflag parameter.
static unsigned long long
getuint(va_list *ap, int lflag)
{
f012e6c9:	55                   	push   %ebp
f012e6ca:	89 e5                	mov    %esp,%ebp
	if (lflag >= 2)
f012e6cc:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
f012e6d0:	7e 1c                	jle    f012e6ee <getuint+0x25>
		return va_arg(*ap, unsigned long long);
f012e6d2:	8b 45 08             	mov    0x8(%ebp),%eax
f012e6d5:	8b 00                	mov    (%eax),%eax
f012e6d7:	8d 50 08             	lea    0x8(%eax),%edx
f012e6da:	8b 45 08             	mov    0x8(%ebp),%eax
f012e6dd:	89 10                	mov    %edx,(%eax)
f012e6df:	8b 45 08             	mov    0x8(%ebp),%eax
f012e6e2:	8b 00                	mov    (%eax),%eax
f012e6e4:	83 e8 08             	sub    $0x8,%eax
f012e6e7:	8b 50 04             	mov    0x4(%eax),%edx
f012e6ea:	8b 00                	mov    (%eax),%eax
f012e6ec:	eb 40                	jmp    f012e72e <getuint+0x65>
	else if (lflag)
f012e6ee:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f012e6f2:	74 1e                	je     f012e712 <getuint+0x49>
		return va_arg(*ap, unsigned long);
f012e6f4:	8b 45 08             	mov    0x8(%ebp),%eax
f012e6f7:	8b 00                	mov    (%eax),%eax
f012e6f9:	8d 50 04             	lea    0x4(%eax),%edx
f012e6fc:	8b 45 08             	mov    0x8(%ebp),%eax
f012e6ff:	89 10                	mov    %edx,(%eax)
f012e701:	8b 45 08             	mov    0x8(%ebp),%eax
f012e704:	8b 00                	mov    (%eax),%eax
f012e706:	83 e8 04             	sub    $0x4,%eax
f012e709:	8b 00                	mov    (%eax),%eax
f012e70b:	ba 00 00 00 00       	mov    $0x0,%edx
f012e710:	eb 1c                	jmp    f012e72e <getuint+0x65>
	else
		return va_arg(*ap, unsigned int);
f012e712:	8b 45 08             	mov    0x8(%ebp),%eax
f012e715:	8b 00                	mov    (%eax),%eax
f012e717:	8d 50 04             	lea    0x4(%eax),%edx
f012e71a:	8b 45 08             	mov    0x8(%ebp),%eax
f012e71d:	89 10                	mov    %edx,(%eax)
f012e71f:	8b 45 08             	mov    0x8(%ebp),%eax
f012e722:	8b 00                	mov    (%eax),%eax
f012e724:	83 e8 04             	sub    $0x4,%eax
f012e727:	8b 00                	mov    (%eax),%eax
f012e729:	ba 00 00 00 00       	mov    $0x0,%edx
}
f012e72e:	5d                   	pop    %ebp
f012e72f:	c3                   	ret    

f012e730 <getint>:

// Same as getuint but signed - can't use getuint
// because of sign extension
static long long
getint(va_list *ap, int lflag)
{
f012e730:	55                   	push   %ebp
f012e731:	89 e5                	mov    %esp,%ebp
	if (lflag >= 2)
f012e733:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
f012e737:	7e 1c                	jle    f012e755 <getint+0x25>
		return va_arg(*ap, long long);
f012e739:	8b 45 08             	mov    0x8(%ebp),%eax
f012e73c:	8b 00                	mov    (%eax),%eax
f012e73e:	8d 50 08             	lea    0x8(%eax),%edx
f012e741:	8b 45 08             	mov    0x8(%ebp),%eax
f012e744:	89 10                	mov    %edx,(%eax)
f012e746:	8b 45 08             	mov    0x8(%ebp),%eax
f012e749:	8b 00                	mov    (%eax),%eax
f012e74b:	83 e8 08             	sub    $0x8,%eax
f012e74e:	8b 50 04             	mov    0x4(%eax),%edx
f012e751:	8b 00                	mov    (%eax),%eax
f012e753:	eb 38                	jmp    f012e78d <getint+0x5d>
	else if (lflag)
f012e755:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f012e759:	74 1a                	je     f012e775 <getint+0x45>
		return va_arg(*ap, long);
f012e75b:	8b 45 08             	mov    0x8(%ebp),%eax
f012e75e:	8b 00                	mov    (%eax),%eax
f012e760:	8d 50 04             	lea    0x4(%eax),%edx
f012e763:	8b 45 08             	mov    0x8(%ebp),%eax
f012e766:	89 10                	mov    %edx,(%eax)
f012e768:	8b 45 08             	mov    0x8(%ebp),%eax
f012e76b:	8b 00                	mov    (%eax),%eax
f012e76d:	83 e8 04             	sub    $0x4,%eax
f012e770:	8b 00                	mov    (%eax),%eax
f012e772:	99                   	cltd   
f012e773:	eb 18                	jmp    f012e78d <getint+0x5d>
	else
		return va_arg(*ap, int);
f012e775:	8b 45 08             	mov    0x8(%ebp),%eax
f012e778:	8b 00                	mov    (%eax),%eax
f012e77a:	8d 50 04             	lea    0x4(%eax),%edx
f012e77d:	8b 45 08             	mov    0x8(%ebp),%eax
f012e780:	89 10                	mov    %edx,(%eax)
f012e782:	8b 45 08             	mov    0x8(%ebp),%eax
f012e785:	8b 00                	mov    (%eax),%eax
f012e787:	83 e8 04             	sub    $0x4,%eax
f012e78a:	8b 00                	mov    (%eax),%eax
f012e78c:	99                   	cltd   
}
f012e78d:	5d                   	pop    %ebp
f012e78e:	c3                   	ret    

f012e78f <vprintfmt>:
// Main function to format and print a string.
void printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...);

void
vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap)
{
f012e78f:	55                   	push   %ebp
f012e790:	89 e5                	mov    %esp,%ebp
f012e792:	56                   	push   %esi
f012e793:	53                   	push   %ebx
f012e794:	83 ec 20             	sub    $0x20,%esp
	unsigned long long num;
	int base, lflag, width, precision, altflag;
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
f012e797:	eb 17                	jmp    f012e7b0 <vprintfmt+0x21>
			if (ch == '\0')
f012e799:	85 db                	test   %ebx,%ebx
f012e79b:	0f 84 af 03 00 00    	je     f012eb50 <vprintfmt+0x3c1>
				return;
			putch(ch, putdat);
f012e7a1:	83 ec 08             	sub    $0x8,%esp
f012e7a4:	ff 75 0c             	pushl  0xc(%ebp)
f012e7a7:	53                   	push   %ebx
f012e7a8:	8b 45 08             	mov    0x8(%ebp),%eax
f012e7ab:	ff d0                	call   *%eax
f012e7ad:	83 c4 10             	add    $0x10,%esp
	unsigned long long num;
	int base, lflag, width, precision, altflag;
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
f012e7b0:	8b 45 10             	mov    0x10(%ebp),%eax
f012e7b3:	8d 50 01             	lea    0x1(%eax),%edx
f012e7b6:	89 55 10             	mov    %edx,0x10(%ebp)
f012e7b9:	8a 00                	mov    (%eax),%al
f012e7bb:	0f b6 d8             	movzbl %al,%ebx
f012e7be:	83 fb 25             	cmp    $0x25,%ebx
f012e7c1:	75 d6                	jne    f012e799 <vprintfmt+0xa>
				return;
			putch(ch, putdat);
		}

		// Process a %-escape sequence
		padc = ' ';
f012e7c3:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
		width = -1;
f012e7c7:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
		precision = -1;
f012e7ce:	c7 45 e0 ff ff ff ff 	movl   $0xffffffff,-0x20(%ebp)
		lflag = 0;
f012e7d5:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
		altflag = 0;
f012e7dc:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	reswitch:
		switch (ch = *(unsigned char *) fmt++) {
f012e7e3:	8b 45 10             	mov    0x10(%ebp),%eax
f012e7e6:	8d 50 01             	lea    0x1(%eax),%edx
f012e7e9:	89 55 10             	mov    %edx,0x10(%ebp)
f012e7ec:	8a 00                	mov    (%eax),%al
f012e7ee:	0f b6 d8             	movzbl %al,%ebx
f012e7f1:	8d 43 dd             	lea    -0x23(%ebx),%eax
f012e7f4:	83 f8 55             	cmp    $0x55,%eax
f012e7f7:	0f 87 2b 03 00 00    	ja     f012eb28 <vprintfmt+0x399>
f012e7fd:	8b 04 85 f8 b5 13 f0 	mov    -0xfec4a08(,%eax,4),%eax
f012e804:	ff e0                	jmp    *%eax

		// flag to pad on the right
		case '-':
			padc = '-';
f012e806:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
			goto reswitch;
f012e80a:	eb d7                	jmp    f012e7e3 <vprintfmt+0x54>

		// flag to pad with 0's instead of spaces
		case '0':
			padc = '0';
f012e80c:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
			goto reswitch;
f012e810:	eb d1                	jmp    f012e7e3 <vprintfmt+0x54>
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			for (precision = 0; ; ++fmt) {
f012e812:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
				precision = precision * 10 + ch - '0';
f012e819:	8b 55 e0             	mov    -0x20(%ebp),%edx
f012e81c:	89 d0                	mov    %edx,%eax
f012e81e:	c1 e0 02             	shl    $0x2,%eax
f012e821:	01 d0                	add    %edx,%eax
f012e823:	01 c0                	add    %eax,%eax
f012e825:	01 d8                	add    %ebx,%eax
f012e827:	83 e8 30             	sub    $0x30,%eax
f012e82a:	89 45 e0             	mov    %eax,-0x20(%ebp)
				ch = *fmt;
f012e82d:	8b 45 10             	mov    0x10(%ebp),%eax
f012e830:	8a 00                	mov    (%eax),%al
f012e832:	0f be d8             	movsbl %al,%ebx
				if (ch < '0' || ch > '9')
f012e835:	83 fb 2f             	cmp    $0x2f,%ebx
f012e838:	7e 3e                	jle    f012e878 <vprintfmt+0xe9>
f012e83a:	83 fb 39             	cmp    $0x39,%ebx
f012e83d:	7f 39                	jg     f012e878 <vprintfmt+0xe9>
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			for (precision = 0; ; ++fmt) {
f012e83f:	ff 45 10             	incl   0x10(%ebp)
				precision = precision * 10 + ch - '0';
				ch = *fmt;
				if (ch < '0' || ch > '9')
					break;
			}
f012e842:	eb d5                	jmp    f012e819 <vprintfmt+0x8a>
			goto process_precision;

		case '*':
			precision = va_arg(ap, int);
f012e844:	8b 45 14             	mov    0x14(%ebp),%eax
f012e847:	83 c0 04             	add    $0x4,%eax
f012e84a:	89 45 14             	mov    %eax,0x14(%ebp)
f012e84d:	8b 45 14             	mov    0x14(%ebp),%eax
f012e850:	83 e8 04             	sub    $0x4,%eax
f012e853:	8b 00                	mov    (%eax),%eax
f012e855:	89 45 e0             	mov    %eax,-0x20(%ebp)
			goto process_precision;
f012e858:	eb 1f                	jmp    f012e879 <vprintfmt+0xea>

		case '.':
			if (width < 0)
f012e85a:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012e85e:	79 83                	jns    f012e7e3 <vprintfmt+0x54>
				width = 0;
f012e860:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
			goto reswitch;
f012e867:	e9 77 ff ff ff       	jmp    f012e7e3 <vprintfmt+0x54>

		case '#':
			altflag = 1;
f012e86c:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
			goto reswitch;
f012e873:	e9 6b ff ff ff       	jmp    f012e7e3 <vprintfmt+0x54>
				precision = precision * 10 + ch - '0';
				ch = *fmt;
				if (ch < '0' || ch > '9')
					break;
			}
			goto process_precision;
f012e878:	90                   	nop
		case '#':
			altflag = 1;
			goto reswitch;

		process_precision:
			if (width < 0)
f012e879:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012e87d:	0f 89 60 ff ff ff    	jns    f012e7e3 <vprintfmt+0x54>
				width = precision, precision = -1;
f012e883:	8b 45 e0             	mov    -0x20(%ebp),%eax
f012e886:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f012e889:	c7 45 e0 ff ff ff ff 	movl   $0xffffffff,-0x20(%ebp)
			goto reswitch;
f012e890:	e9 4e ff ff ff       	jmp    f012e7e3 <vprintfmt+0x54>

		// long flag (doubled for long long)
		case 'l':
			lflag++;
f012e895:	ff 45 e8             	incl   -0x18(%ebp)
			goto reswitch;
f012e898:	e9 46 ff ff ff       	jmp    f012e7e3 <vprintfmt+0x54>

		// character
		case 'c':
			putch(va_arg(ap, int), putdat);
f012e89d:	8b 45 14             	mov    0x14(%ebp),%eax
f012e8a0:	83 c0 04             	add    $0x4,%eax
f012e8a3:	89 45 14             	mov    %eax,0x14(%ebp)
f012e8a6:	8b 45 14             	mov    0x14(%ebp),%eax
f012e8a9:	83 e8 04             	sub    $0x4,%eax
f012e8ac:	8b 00                	mov    (%eax),%eax
f012e8ae:	83 ec 08             	sub    $0x8,%esp
f012e8b1:	ff 75 0c             	pushl  0xc(%ebp)
f012e8b4:	50                   	push   %eax
f012e8b5:	8b 45 08             	mov    0x8(%ebp),%eax
f012e8b8:	ff d0                	call   *%eax
f012e8ba:	83 c4 10             	add    $0x10,%esp
			break;
f012e8bd:	e9 89 02 00 00       	jmp    f012eb4b <vprintfmt+0x3bc>

		// error message
		case 'e':
			err = va_arg(ap, int);
f012e8c2:	8b 45 14             	mov    0x14(%ebp),%eax
f012e8c5:	83 c0 04             	add    $0x4,%eax
f012e8c8:	89 45 14             	mov    %eax,0x14(%ebp)
f012e8cb:	8b 45 14             	mov    0x14(%ebp),%eax
f012e8ce:	83 e8 04             	sub    $0x4,%eax
f012e8d1:	8b 18                	mov    (%eax),%ebx
			if (err < 0)
f012e8d3:	85 db                	test   %ebx,%ebx
f012e8d5:	79 02                	jns    f012e8d9 <vprintfmt+0x14a>
				err = -err;
f012e8d7:	f7 db                	neg    %ebx
			if (err > MAXERROR || (p = error_string[err]) == NULL)
f012e8d9:	83 fb 64             	cmp    $0x64,%ebx
f012e8dc:	7f 0b                	jg     f012e8e9 <vprintfmt+0x15a>
f012e8de:	8b 34 9d 40 b4 13 f0 	mov    -0xfec4bc0(,%ebx,4),%esi
f012e8e5:	85 f6                	test   %esi,%esi
f012e8e7:	75 19                	jne    f012e902 <vprintfmt+0x173>
				printfmt(putch, putdat, "error %d", err);
f012e8e9:	53                   	push   %ebx
f012e8ea:	68 e5 b5 13 f0       	push   $0xf013b5e5
f012e8ef:	ff 75 0c             	pushl  0xc(%ebp)
f012e8f2:	ff 75 08             	pushl  0x8(%ebp)
f012e8f5:	e8 5e 02 00 00       	call   f012eb58 <printfmt>
f012e8fa:	83 c4 10             	add    $0x10,%esp
			else
				printfmt(putch, putdat, "%s", p);
			break;
f012e8fd:	e9 49 02 00 00       	jmp    f012eb4b <vprintfmt+0x3bc>
			if (err < 0)
				err = -err;
			if (err > MAXERROR || (p = error_string[err]) == NULL)
				printfmt(putch, putdat, "error %d", err);
			else
				printfmt(putch, putdat, "%s", p);
f012e902:	56                   	push   %esi
f012e903:	68 ee b5 13 f0       	push   $0xf013b5ee
f012e908:	ff 75 0c             	pushl  0xc(%ebp)
f012e90b:	ff 75 08             	pushl  0x8(%ebp)
f012e90e:	e8 45 02 00 00       	call   f012eb58 <printfmt>
f012e913:	83 c4 10             	add    $0x10,%esp
			break;
f012e916:	e9 30 02 00 00       	jmp    f012eb4b <vprintfmt+0x3bc>

		// string
		case 's':
			if ((p = va_arg(ap, char *)) == NULL)
f012e91b:	8b 45 14             	mov    0x14(%ebp),%eax
f012e91e:	83 c0 04             	add    $0x4,%eax
f012e921:	89 45 14             	mov    %eax,0x14(%ebp)
f012e924:	8b 45 14             	mov    0x14(%ebp),%eax
f012e927:	83 e8 04             	sub    $0x4,%eax
f012e92a:	8b 30                	mov    (%eax),%esi
f012e92c:	85 f6                	test   %esi,%esi
f012e92e:	75 05                	jne    f012e935 <vprintfmt+0x1a6>
				p = "(null)";
f012e930:	be f1 b5 13 f0       	mov    $0xf013b5f1,%esi
			if (width > 0 && padc != '-')
f012e935:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012e939:	7e 6d                	jle    f012e9a8 <vprintfmt+0x219>
f012e93b:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
f012e93f:	74 67                	je     f012e9a8 <vprintfmt+0x219>
				for (width -= strnlen(p, precision); width > 0; width--)
f012e941:	8b 45 e0             	mov    -0x20(%ebp),%eax
f012e944:	83 ec 08             	sub    $0x8,%esp
f012e947:	50                   	push   %eax
f012e948:	56                   	push   %esi
f012e949:	e8 12 05 00 00       	call   f012ee60 <strnlen>
f012e94e:	83 c4 10             	add    $0x10,%esp
f012e951:	29 45 e4             	sub    %eax,-0x1c(%ebp)
f012e954:	eb 16                	jmp    f012e96c <vprintfmt+0x1dd>
					putch(padc, putdat);
f012e956:	0f be 45 db          	movsbl -0x25(%ebp),%eax
f012e95a:	83 ec 08             	sub    $0x8,%esp
f012e95d:	ff 75 0c             	pushl  0xc(%ebp)
f012e960:	50                   	push   %eax
f012e961:	8b 45 08             	mov    0x8(%ebp),%eax
f012e964:	ff d0                	call   *%eax
f012e966:	83 c4 10             	add    $0x10,%esp
		// string
		case 's':
			if ((p = va_arg(ap, char *)) == NULL)
				p = "(null)";
			if (width > 0 && padc != '-')
				for (width -= strnlen(p, precision); width > 0; width--)
f012e969:	ff 4d e4             	decl   -0x1c(%ebp)
f012e96c:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012e970:	7f e4                	jg     f012e956 <vprintfmt+0x1c7>
					putch(padc, putdat);
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
f012e972:	eb 34                	jmp    f012e9a8 <vprintfmt+0x219>
				if (altflag && (ch < ' ' || ch > '~'))
f012e974:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f012e978:	74 1c                	je     f012e996 <vprintfmt+0x207>
f012e97a:	83 fb 1f             	cmp    $0x1f,%ebx
f012e97d:	7e 05                	jle    f012e984 <vprintfmt+0x1f5>
f012e97f:	83 fb 7e             	cmp    $0x7e,%ebx
f012e982:	7e 12                	jle    f012e996 <vprintfmt+0x207>
					putch('?', putdat);
f012e984:	83 ec 08             	sub    $0x8,%esp
f012e987:	ff 75 0c             	pushl  0xc(%ebp)
f012e98a:	6a 3f                	push   $0x3f
f012e98c:	8b 45 08             	mov    0x8(%ebp),%eax
f012e98f:	ff d0                	call   *%eax
f012e991:	83 c4 10             	add    $0x10,%esp
f012e994:	eb 0f                	jmp    f012e9a5 <vprintfmt+0x216>
				else
					putch(ch, putdat);
f012e996:	83 ec 08             	sub    $0x8,%esp
f012e999:	ff 75 0c             	pushl  0xc(%ebp)
f012e99c:	53                   	push   %ebx
f012e99d:	8b 45 08             	mov    0x8(%ebp),%eax
f012e9a0:	ff d0                	call   *%eax
f012e9a2:	83 c4 10             	add    $0x10,%esp
			if ((p = va_arg(ap, char *)) == NULL)
				p = "(null)";
			if (width > 0 && padc != '-')
				for (width -= strnlen(p, precision); width > 0; width--)
					putch(padc, putdat);
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
f012e9a5:	ff 4d e4             	decl   -0x1c(%ebp)
f012e9a8:	89 f0                	mov    %esi,%eax
f012e9aa:	8d 70 01             	lea    0x1(%eax),%esi
f012e9ad:	8a 00                	mov    (%eax),%al
f012e9af:	0f be d8             	movsbl %al,%ebx
f012e9b2:	85 db                	test   %ebx,%ebx
f012e9b4:	74 24                	je     f012e9da <vprintfmt+0x24b>
f012e9b6:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f012e9ba:	78 b8                	js     f012e974 <vprintfmt+0x1e5>
f012e9bc:	ff 4d e0             	decl   -0x20(%ebp)
f012e9bf:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f012e9c3:	79 af                	jns    f012e974 <vprintfmt+0x1e5>
				if (altflag && (ch < ' ' || ch > '~'))
					putch('?', putdat);
				else
					putch(ch, putdat);
			for (; width > 0; width--)
f012e9c5:	eb 13                	jmp    f012e9da <vprintfmt+0x24b>
				putch(' ', putdat);
f012e9c7:	83 ec 08             	sub    $0x8,%esp
f012e9ca:	ff 75 0c             	pushl  0xc(%ebp)
f012e9cd:	6a 20                	push   $0x20
f012e9cf:	8b 45 08             	mov    0x8(%ebp),%eax
f012e9d2:	ff d0                	call   *%eax
f012e9d4:	83 c4 10             	add    $0x10,%esp
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
				if (altflag && (ch < ' ' || ch > '~'))
					putch('?', putdat);
				else
					putch(ch, putdat);
			for (; width > 0; width--)
f012e9d7:	ff 4d e4             	decl   -0x1c(%ebp)
f012e9da:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012e9de:	7f e7                	jg     f012e9c7 <vprintfmt+0x238>
				putch(' ', putdat);
			break;
f012e9e0:	e9 66 01 00 00       	jmp    f012eb4b <vprintfmt+0x3bc>

		// (signed) decimal
		case 'd':
			num = getint(&ap, lflag);
f012e9e5:	83 ec 08             	sub    $0x8,%esp
f012e9e8:	ff 75 e8             	pushl  -0x18(%ebp)
f012e9eb:	8d 45 14             	lea    0x14(%ebp),%eax
f012e9ee:	50                   	push   %eax
f012e9ef:	e8 3c fd ff ff       	call   f012e730 <getint>
f012e9f4:	83 c4 10             	add    $0x10,%esp
f012e9f7:	89 45 f0             	mov    %eax,-0x10(%ebp)
f012e9fa:	89 55 f4             	mov    %edx,-0xc(%ebp)
			if ((long long) num < 0) {
f012e9fd:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012ea00:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012ea03:	85 d2                	test   %edx,%edx
f012ea05:	79 23                	jns    f012ea2a <vprintfmt+0x29b>
				putch('-', putdat);
f012ea07:	83 ec 08             	sub    $0x8,%esp
f012ea0a:	ff 75 0c             	pushl  0xc(%ebp)
f012ea0d:	6a 2d                	push   $0x2d
f012ea0f:	8b 45 08             	mov    0x8(%ebp),%eax
f012ea12:	ff d0                	call   *%eax
f012ea14:	83 c4 10             	add    $0x10,%esp
				num = -(long long) num;
f012ea17:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012ea1a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012ea1d:	f7 d8                	neg    %eax
f012ea1f:	83 d2 00             	adc    $0x0,%edx
f012ea22:	f7 da                	neg    %edx
f012ea24:	89 45 f0             	mov    %eax,-0x10(%ebp)
f012ea27:	89 55 f4             	mov    %edx,-0xc(%ebp)
			}
			base = 10;
f012ea2a:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
			goto number;
f012ea31:	e9 bc 00 00 00       	jmp    f012eaf2 <vprintfmt+0x363>

		// unsigned decimal
		case 'u':
			num = getuint(&ap, lflag);
f012ea36:	83 ec 08             	sub    $0x8,%esp
f012ea39:	ff 75 e8             	pushl  -0x18(%ebp)
f012ea3c:	8d 45 14             	lea    0x14(%ebp),%eax
f012ea3f:	50                   	push   %eax
f012ea40:	e8 84 fc ff ff       	call   f012e6c9 <getuint>
f012ea45:	83 c4 10             	add    $0x10,%esp
f012ea48:	89 45 f0             	mov    %eax,-0x10(%ebp)
f012ea4b:	89 55 f4             	mov    %edx,-0xc(%ebp)
			base = 10;
f012ea4e:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
			goto number;
f012ea55:	e9 98 00 00 00       	jmp    f012eaf2 <vprintfmt+0x363>

		// (unsigned) octal
		case 'o':
			// Replace this with your code.
			putch('X', putdat);
f012ea5a:	83 ec 08             	sub    $0x8,%esp
f012ea5d:	ff 75 0c             	pushl  0xc(%ebp)
f012ea60:	6a 58                	push   $0x58
f012ea62:	8b 45 08             	mov    0x8(%ebp),%eax
f012ea65:	ff d0                	call   *%eax
f012ea67:	83 c4 10             	add    $0x10,%esp
			putch('X', putdat);
f012ea6a:	83 ec 08             	sub    $0x8,%esp
f012ea6d:	ff 75 0c             	pushl  0xc(%ebp)
f012ea70:	6a 58                	push   $0x58
f012ea72:	8b 45 08             	mov    0x8(%ebp),%eax
f012ea75:	ff d0                	call   *%eax
f012ea77:	83 c4 10             	add    $0x10,%esp
			putch('X', putdat);
f012ea7a:	83 ec 08             	sub    $0x8,%esp
f012ea7d:	ff 75 0c             	pushl  0xc(%ebp)
f012ea80:	6a 58                	push   $0x58
f012ea82:	8b 45 08             	mov    0x8(%ebp),%eax
f012ea85:	ff d0                	call   *%eax
f012ea87:	83 c4 10             	add    $0x10,%esp
			break;
f012ea8a:	e9 bc 00 00 00       	jmp    f012eb4b <vprintfmt+0x3bc>

		// pointer
		case 'p':
			putch('0', putdat);
f012ea8f:	83 ec 08             	sub    $0x8,%esp
f012ea92:	ff 75 0c             	pushl  0xc(%ebp)
f012ea95:	6a 30                	push   $0x30
f012ea97:	8b 45 08             	mov    0x8(%ebp),%eax
f012ea9a:	ff d0                	call   *%eax
f012ea9c:	83 c4 10             	add    $0x10,%esp
			putch('x', putdat);
f012ea9f:	83 ec 08             	sub    $0x8,%esp
f012eaa2:	ff 75 0c             	pushl  0xc(%ebp)
f012eaa5:	6a 78                	push   $0x78
f012eaa7:	8b 45 08             	mov    0x8(%ebp),%eax
f012eaaa:	ff d0                	call   *%eax
f012eaac:	83 c4 10             	add    $0x10,%esp
			num = (unsigned long long)
				(uint32) va_arg(ap, void *);
f012eaaf:	8b 45 14             	mov    0x14(%ebp),%eax
f012eab2:	83 c0 04             	add    $0x4,%eax
f012eab5:	89 45 14             	mov    %eax,0x14(%ebp)
f012eab8:	8b 45 14             	mov    0x14(%ebp),%eax
f012eabb:	83 e8 04             	sub    $0x4,%eax
f012eabe:	8b 00                	mov    (%eax),%eax

		// pointer
		case 'p':
			putch('0', putdat);
			putch('x', putdat);
			num = (unsigned long long)
f012eac0:	89 45 f0             	mov    %eax,-0x10(%ebp)
f012eac3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				(uint32) va_arg(ap, void *);
			base = 16;
f012eaca:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
			goto number;
f012ead1:	eb 1f                	jmp    f012eaf2 <vprintfmt+0x363>

		// (unsigned) hexadecimal
		case 'x':
			num = getuint(&ap, lflag);
f012ead3:	83 ec 08             	sub    $0x8,%esp
f012ead6:	ff 75 e8             	pushl  -0x18(%ebp)
f012ead9:	8d 45 14             	lea    0x14(%ebp),%eax
f012eadc:	50                   	push   %eax
f012eadd:	e8 e7 fb ff ff       	call   f012e6c9 <getuint>
f012eae2:	83 c4 10             	add    $0x10,%esp
f012eae5:	89 45 f0             	mov    %eax,-0x10(%ebp)
f012eae8:	89 55 f4             	mov    %edx,-0xc(%ebp)
			base = 16;
f012eaeb:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
		number:
			printnum(putch, putdat, num, base, width, padc);
f012eaf2:	0f be 55 db          	movsbl -0x25(%ebp),%edx
f012eaf6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f012eaf9:	83 ec 04             	sub    $0x4,%esp
f012eafc:	52                   	push   %edx
f012eafd:	ff 75 e4             	pushl  -0x1c(%ebp)
f012eb00:	50                   	push   %eax
f012eb01:	ff 75 f4             	pushl  -0xc(%ebp)
f012eb04:	ff 75 f0             	pushl  -0x10(%ebp)
f012eb07:	ff 75 0c             	pushl  0xc(%ebp)
f012eb0a:	ff 75 08             	pushl  0x8(%ebp)
f012eb0d:	e8 00 fb ff ff       	call   f012e612 <printnum>
f012eb12:	83 c4 20             	add    $0x20,%esp
			break;
f012eb15:	eb 34                	jmp    f012eb4b <vprintfmt+0x3bc>

		// escaped '%' character
		case '%':
			putch(ch, putdat);
f012eb17:	83 ec 08             	sub    $0x8,%esp
f012eb1a:	ff 75 0c             	pushl  0xc(%ebp)
f012eb1d:	53                   	push   %ebx
f012eb1e:	8b 45 08             	mov    0x8(%ebp),%eax
f012eb21:	ff d0                	call   *%eax
f012eb23:	83 c4 10             	add    $0x10,%esp
			break;
f012eb26:	eb 23                	jmp    f012eb4b <vprintfmt+0x3bc>

		// unrecognized escape sequence - just print it literally
		default:
			putch('%', putdat);
f012eb28:	83 ec 08             	sub    $0x8,%esp
f012eb2b:	ff 75 0c             	pushl  0xc(%ebp)
f012eb2e:	6a 25                	push   $0x25
f012eb30:	8b 45 08             	mov    0x8(%ebp),%eax
f012eb33:	ff d0                	call   *%eax
f012eb35:	83 c4 10             	add    $0x10,%esp
			for (fmt--; fmt[-1] != '%'; fmt--)
f012eb38:	ff 4d 10             	decl   0x10(%ebp)
f012eb3b:	eb 03                	jmp    f012eb40 <vprintfmt+0x3b1>
f012eb3d:	ff 4d 10             	decl   0x10(%ebp)
f012eb40:	8b 45 10             	mov    0x10(%ebp),%eax
f012eb43:	48                   	dec    %eax
f012eb44:	8a 00                	mov    (%eax),%al
f012eb46:	3c 25                	cmp    $0x25,%al
f012eb48:	75 f3                	jne    f012eb3d <vprintfmt+0x3ae>
				/* do nothing */;
			break;
f012eb4a:	90                   	nop
		}
	}
f012eb4b:	e9 47 fc ff ff       	jmp    f012e797 <vprintfmt+0x8>
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
			if (ch == '\0')
				return;
f012eb50:	90                   	nop
			for (fmt--; fmt[-1] != '%'; fmt--)
				/* do nothing */;
			break;
		}
	}
}
f012eb51:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012eb54:	5b                   	pop    %ebx
f012eb55:	5e                   	pop    %esi
f012eb56:	5d                   	pop    %ebp
f012eb57:	c3                   	ret    

f012eb58 <printfmt>:

void
printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...)
{
f012eb58:	55                   	push   %ebp
f012eb59:	89 e5                	mov    %esp,%ebp
f012eb5b:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	va_start(ap, fmt);
f012eb5e:	8d 45 10             	lea    0x10(%ebp),%eax
f012eb61:	83 c0 04             	add    $0x4,%eax
f012eb64:	89 45 f4             	mov    %eax,-0xc(%ebp)
	vprintfmt(putch, putdat, fmt, ap);
f012eb67:	8b 45 10             	mov    0x10(%ebp),%eax
f012eb6a:	ff 75 f4             	pushl  -0xc(%ebp)
f012eb6d:	50                   	push   %eax
f012eb6e:	ff 75 0c             	pushl  0xc(%ebp)
f012eb71:	ff 75 08             	pushl  0x8(%ebp)
f012eb74:	e8 16 fc ff ff       	call   f012e78f <vprintfmt>
f012eb79:	83 c4 10             	add    $0x10,%esp
	va_end(ap);
}
f012eb7c:	90                   	nop
f012eb7d:	c9                   	leave  
f012eb7e:	c3                   	ret    

f012eb7f <sprintputch>:
	int cnt;
};

static void
sprintputch(int ch, struct sprintbuf *b)
{
f012eb7f:	55                   	push   %ebp
f012eb80:	89 e5                	mov    %esp,%ebp
	b->cnt++;
f012eb82:	8b 45 0c             	mov    0xc(%ebp),%eax
f012eb85:	8b 40 08             	mov    0x8(%eax),%eax
f012eb88:	8d 50 01             	lea    0x1(%eax),%edx
f012eb8b:	8b 45 0c             	mov    0xc(%ebp),%eax
f012eb8e:	89 50 08             	mov    %edx,0x8(%eax)
	if (b->buf < b->ebuf)
f012eb91:	8b 45 0c             	mov    0xc(%ebp),%eax
f012eb94:	8b 10                	mov    (%eax),%edx
f012eb96:	8b 45 0c             	mov    0xc(%ebp),%eax
f012eb99:	8b 40 04             	mov    0x4(%eax),%eax
f012eb9c:	39 c2                	cmp    %eax,%edx
f012eb9e:	73 12                	jae    f012ebb2 <sprintputch+0x33>
		*b->buf++ = ch;
f012eba0:	8b 45 0c             	mov    0xc(%ebp),%eax
f012eba3:	8b 00                	mov    (%eax),%eax
f012eba5:	8d 48 01             	lea    0x1(%eax),%ecx
f012eba8:	8b 55 0c             	mov    0xc(%ebp),%edx
f012ebab:	89 0a                	mov    %ecx,(%edx)
f012ebad:	8b 55 08             	mov    0x8(%ebp),%edx
f012ebb0:	88 10                	mov    %dl,(%eax)
}
f012ebb2:	90                   	nop
f012ebb3:	5d                   	pop    %ebp
f012ebb4:	c3                   	ret    

f012ebb5 <vsnprintf>:

int
vsnprintf(char *buf, int n, const char *fmt, va_list ap)
{
f012ebb5:	55                   	push   %ebp
f012ebb6:	89 e5                	mov    %esp,%ebp
f012ebb8:	83 ec 18             	sub    $0x18,%esp
	struct sprintbuf b = {buf, buf+n-1, 0};
f012ebbb:	8b 45 08             	mov    0x8(%ebp),%eax
f012ebbe:	89 45 ec             	mov    %eax,-0x14(%ebp)
f012ebc1:	8b 45 0c             	mov    0xc(%ebp),%eax
f012ebc4:	8d 50 ff             	lea    -0x1(%eax),%edx
f012ebc7:	8b 45 08             	mov    0x8(%ebp),%eax
f012ebca:	01 d0                	add    %edx,%eax
f012ebcc:	89 45 f0             	mov    %eax,-0x10(%ebp)
f012ebcf:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	if (buf == NULL || n < 1)
f012ebd6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f012ebda:	74 06                	je     f012ebe2 <vsnprintf+0x2d>
f012ebdc:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f012ebe0:	7f 07                	jg     f012ebe9 <vsnprintf+0x34>
		return -E_INVAL;
f012ebe2:	b8 03 00 00 00       	mov    $0x3,%eax
f012ebe7:	eb 20                	jmp    f012ec09 <vsnprintf+0x54>

	// print the string to the buffer
	vprintfmt((void*)sprintputch, &b, fmt, ap);
f012ebe9:	ff 75 14             	pushl  0x14(%ebp)
f012ebec:	ff 75 10             	pushl  0x10(%ebp)
f012ebef:	8d 45 ec             	lea    -0x14(%ebp),%eax
f012ebf2:	50                   	push   %eax
f012ebf3:	68 7f eb 12 f0       	push   $0xf012eb7f
f012ebf8:	e8 92 fb ff ff       	call   f012e78f <vprintfmt>
f012ebfd:	83 c4 10             	add    $0x10,%esp

	// null terminate the buffer
	*b.buf = '\0';
f012ec00:	8b 45 ec             	mov    -0x14(%ebp),%eax
f012ec03:	c6 00 00             	movb   $0x0,(%eax)

	return b.cnt;
f012ec06:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f012ec09:	c9                   	leave  
f012ec0a:	c3                   	ret    

f012ec0b <snprintf>:

int
snprintf(char *buf, int n, const char *fmt, ...)
{
f012ec0b:	55                   	push   %ebp
f012ec0c:	89 e5                	mov    %esp,%ebp
f012ec0e:	83 ec 18             	sub    $0x18,%esp
	va_list ap;
	int rc;

	va_start(ap, fmt);
f012ec11:	8d 45 10             	lea    0x10(%ebp),%eax
f012ec14:	83 c0 04             	add    $0x4,%eax
f012ec17:	89 45 f4             	mov    %eax,-0xc(%ebp)
	rc = vsnprintf(buf, n, fmt, ap);
f012ec1a:	8b 45 10             	mov    0x10(%ebp),%eax
f012ec1d:	ff 75 f4             	pushl  -0xc(%ebp)
f012ec20:	50                   	push   %eax
f012ec21:	ff 75 0c             	pushl  0xc(%ebp)
f012ec24:	ff 75 08             	pushl  0x8(%ebp)
f012ec27:	e8 89 ff ff ff       	call   f012ebb5 <vsnprintf>
f012ec2c:	83 c4 10             	add    $0x10,%esp
f012ec2f:	89 45 f0             	mov    %eax,-0x10(%ebp)
	va_end(ap);

	return rc;
f012ec32:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f012ec35:	c9                   	leave  
f012ec36:	c3                   	ret    

f012ec37 <readline>:
#include <inc/lib.h>

//static char buf[BUFLEN];

void readline(const char *prompt, char* buf)
{
f012ec37:	55                   	push   %ebp
f012ec38:	89 e5                	mov    %esp,%ebp
f012ec3a:	83 ec 18             	sub    $0x18,%esp
		int i, c, echoing;

	if (prompt != NULL)
f012ec3d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f012ec41:	74 13                	je     f012ec56 <readline+0x1f>
		cprintf("%s", prompt);
f012ec43:	83 ec 08             	sub    $0x8,%esp
f012ec46:	ff 75 08             	pushl  0x8(%ebp)
f012ec49:	68 50 b7 13 f0       	push   $0xf013b750
f012ec4e:	e8 de 21 fd ff       	call   f0100e31 <cprintf>
f012ec53:	83 c4 10             	add    $0x10,%esp

	i = 0;
f012ec56:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	echoing = iscons(0);
f012ec5d:	83 ec 0c             	sub    $0xc,%esp
f012ec60:	6a 00                	push   $0x0
f012ec62:	e8 73 21 fd ff       	call   f0100dda <iscons>
f012ec67:	83 c4 10             	add    $0x10,%esp
f012ec6a:	89 45 f0             	mov    %eax,-0x10(%ebp)
	while (1) {
		c = getchar();
f012ec6d:	e8 4f 21 fd ff       	call   f0100dc1 <getchar>
f012ec72:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if (c < 0) {
f012ec75:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ec79:	79 22                	jns    f012ec9d <readline+0x66>
			if (c != -E_EOF)
f012ec7b:	83 7d ec 07          	cmpl   $0x7,-0x14(%ebp)
f012ec7f:	0f 84 ad 00 00 00    	je     f012ed32 <readline+0xfb>
				cprintf("read error: %e\n", c);
f012ec85:	83 ec 08             	sub    $0x8,%esp
f012ec88:	ff 75 ec             	pushl  -0x14(%ebp)
f012ec8b:	68 53 b7 13 f0       	push   $0xf013b753
f012ec90:	e8 9c 21 fd ff       	call   f0100e31 <cprintf>
f012ec95:	83 c4 10             	add    $0x10,%esp
			return;
f012ec98:	e9 95 00 00 00       	jmp    f012ed32 <readline+0xfb>
		} else if (c >= ' ' && i < BUFLEN-1) {
f012ec9d:	83 7d ec 1f          	cmpl   $0x1f,-0x14(%ebp)
f012eca1:	7e 34                	jle    f012ecd7 <readline+0xa0>
f012eca3:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
f012ecaa:	7f 2b                	jg     f012ecd7 <readline+0xa0>
			if (echoing)
f012ecac:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012ecb0:	74 0e                	je     f012ecc0 <readline+0x89>
				cputchar(c);
f012ecb2:	83 ec 0c             	sub    $0xc,%esp
f012ecb5:	ff 75 ec             	pushl  -0x14(%ebp)
f012ecb8:	e8 ed 20 fd ff       	call   f0100daa <cputchar>
f012ecbd:	83 c4 10             	add    $0x10,%esp
			buf[i++] = c;
f012ecc0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012ecc3:	8d 50 01             	lea    0x1(%eax),%edx
f012ecc6:	89 55 f4             	mov    %edx,-0xc(%ebp)
f012ecc9:	89 c2                	mov    %eax,%edx
f012eccb:	8b 45 0c             	mov    0xc(%ebp),%eax
f012ecce:	01 d0                	add    %edx,%eax
f012ecd0:	8b 55 ec             	mov    -0x14(%ebp),%edx
f012ecd3:	88 10                	mov    %dl,(%eax)
f012ecd5:	eb 56                	jmp    f012ed2d <readline+0xf6>
		} else if (c == '\b' && i > 0) {
f012ecd7:	83 7d ec 08          	cmpl   $0x8,-0x14(%ebp)
f012ecdb:	75 1f                	jne    f012ecfc <readline+0xc5>
f012ecdd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f012ece1:	7e 19                	jle    f012ecfc <readline+0xc5>
			if (echoing)
f012ece3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012ece7:	74 0e                	je     f012ecf7 <readline+0xc0>
				cputchar(c);
f012ece9:	83 ec 0c             	sub    $0xc,%esp
f012ecec:	ff 75 ec             	pushl  -0x14(%ebp)
f012ecef:	e8 b6 20 fd ff       	call   f0100daa <cputchar>
f012ecf4:	83 c4 10             	add    $0x10,%esp

			i--;
f012ecf7:	ff 4d f4             	decl   -0xc(%ebp)
f012ecfa:	eb 31                	jmp    f012ed2d <readline+0xf6>
		} else if (c == '\n' || c == '\r') {
f012ecfc:	83 7d ec 0a          	cmpl   $0xa,-0x14(%ebp)
f012ed00:	74 0a                	je     f012ed0c <readline+0xd5>
f012ed02:	83 7d ec 0d          	cmpl   $0xd,-0x14(%ebp)
f012ed06:	0f 85 61 ff ff ff    	jne    f012ec6d <readline+0x36>
			if (echoing)
f012ed0c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012ed10:	74 0e                	je     f012ed20 <readline+0xe9>
				cputchar(c);
f012ed12:	83 ec 0c             	sub    $0xc,%esp
f012ed15:	ff 75 ec             	pushl  -0x14(%ebp)
f012ed18:	e8 8d 20 fd ff       	call   f0100daa <cputchar>
f012ed1d:	83 c4 10             	add    $0x10,%esp

			buf[i] = 0;
f012ed20:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012ed23:	8b 45 0c             	mov    0xc(%ebp),%eax
f012ed26:	01 d0                	add    %edx,%eax
f012ed28:	c6 00 00             	movb   $0x0,(%eax)
			return;
f012ed2b:	eb 06                	jmp    f012ed33 <readline+0xfc>
		}
	}
f012ed2d:	e9 3b ff ff ff       	jmp    f012ec6d <readline+0x36>
	while (1) {
		c = getchar();
		if (c < 0) {
			if (c != -E_EOF)
				cprintf("read error: %e\n", c);
			return;
f012ed32:	90                   	nop
			buf[i] = 0;
			return;
		}
	}

}
f012ed33:	c9                   	leave  
f012ed34:	c3                   	ret    

f012ed35 <atomic_readline>:

void atomic_readline(const char *prompt, char* buf)
{
f012ed35:	55                   	push   %ebp
f012ed36:	89 e5                	mov    %esp,%ebp
f012ed38:	83 ec 18             	sub    $0x18,%esp
	sys_disable_interrupt();
f012ed3b:	e8 0a de fd ff       	call   f010cb4a <sys_disable_interrupt>
	int i, c, echoing;

	if (prompt != NULL)
f012ed40:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f012ed44:	74 13                	je     f012ed59 <atomic_readline+0x24>
		cprintf("%s", prompt);
f012ed46:	83 ec 08             	sub    $0x8,%esp
f012ed49:	ff 75 08             	pushl  0x8(%ebp)
f012ed4c:	68 50 b7 13 f0       	push   $0xf013b750
f012ed51:	e8 db 20 fd ff       	call   f0100e31 <cprintf>
f012ed56:	83 c4 10             	add    $0x10,%esp

	i = 0;
f012ed59:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	echoing = iscons(0);
f012ed60:	83 ec 0c             	sub    $0xc,%esp
f012ed63:	6a 00                	push   $0x0
f012ed65:	e8 70 20 fd ff       	call   f0100dda <iscons>
f012ed6a:	83 c4 10             	add    $0x10,%esp
f012ed6d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	while (1) {
		c = getchar();
f012ed70:	e8 4c 20 fd ff       	call   f0100dc1 <getchar>
f012ed75:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if (c < 0) {
f012ed78:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ed7c:	79 23                	jns    f012eda1 <atomic_readline+0x6c>
			if (c != -E_EOF)
f012ed7e:	83 7d ec 07          	cmpl   $0x7,-0x14(%ebp)
f012ed82:	74 13                	je     f012ed97 <atomic_readline+0x62>
				cprintf("read error: %e\n", c);
f012ed84:	83 ec 08             	sub    $0x8,%esp
f012ed87:	ff 75 ec             	pushl  -0x14(%ebp)
f012ed8a:	68 53 b7 13 f0       	push   $0xf013b753
f012ed8f:	e8 9d 20 fd ff       	call   f0100e31 <cprintf>
f012ed94:	83 c4 10             	add    $0x10,%esp
			sys_enable_interrupt();
f012ed97:	e8 c8 dd fd ff       	call   f010cb64 <sys_enable_interrupt>
			return;
f012ed9c:	e9 9a 00 00 00       	jmp    f012ee3b <atomic_readline+0x106>
		} else if (c >= ' ' && i < BUFLEN-1) {
f012eda1:	83 7d ec 1f          	cmpl   $0x1f,-0x14(%ebp)
f012eda5:	7e 34                	jle    f012eddb <atomic_readline+0xa6>
f012eda7:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
f012edae:	7f 2b                	jg     f012eddb <atomic_readline+0xa6>
			if (echoing)
f012edb0:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012edb4:	74 0e                	je     f012edc4 <atomic_readline+0x8f>
				cputchar(c);
f012edb6:	83 ec 0c             	sub    $0xc,%esp
f012edb9:	ff 75 ec             	pushl  -0x14(%ebp)
f012edbc:	e8 e9 1f fd ff       	call   f0100daa <cputchar>
f012edc1:	83 c4 10             	add    $0x10,%esp
			buf[i++] = c;
f012edc4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012edc7:	8d 50 01             	lea    0x1(%eax),%edx
f012edca:	89 55 f4             	mov    %edx,-0xc(%ebp)
f012edcd:	89 c2                	mov    %eax,%edx
f012edcf:	8b 45 0c             	mov    0xc(%ebp),%eax
f012edd2:	01 d0                	add    %edx,%eax
f012edd4:	8b 55 ec             	mov    -0x14(%ebp),%edx
f012edd7:	88 10                	mov    %dl,(%eax)
f012edd9:	eb 5b                	jmp    f012ee36 <atomic_readline+0x101>
		} else if (c == '\b' && i > 0) {
f012eddb:	83 7d ec 08          	cmpl   $0x8,-0x14(%ebp)
f012eddf:	75 1f                	jne    f012ee00 <atomic_readline+0xcb>
f012ede1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f012ede5:	7e 19                	jle    f012ee00 <atomic_readline+0xcb>
			if (echoing)
f012ede7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012edeb:	74 0e                	je     f012edfb <atomic_readline+0xc6>
				cputchar(c);
f012eded:	83 ec 0c             	sub    $0xc,%esp
f012edf0:	ff 75 ec             	pushl  -0x14(%ebp)
f012edf3:	e8 b2 1f fd ff       	call   f0100daa <cputchar>
f012edf8:	83 c4 10             	add    $0x10,%esp
			i--;
f012edfb:	ff 4d f4             	decl   -0xc(%ebp)
f012edfe:	eb 36                	jmp    f012ee36 <atomic_readline+0x101>
		} else if (c == '\n' || c == '\r') {
f012ee00:	83 7d ec 0a          	cmpl   $0xa,-0x14(%ebp)
f012ee04:	74 0a                	je     f012ee10 <atomic_readline+0xdb>
f012ee06:	83 7d ec 0d          	cmpl   $0xd,-0x14(%ebp)
f012ee0a:	0f 85 60 ff ff ff    	jne    f012ed70 <atomic_readline+0x3b>
			if (echoing)
f012ee10:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012ee14:	74 0e                	je     f012ee24 <atomic_readline+0xef>
				cputchar(c);
f012ee16:	83 ec 0c             	sub    $0xc,%esp
f012ee19:	ff 75 ec             	pushl  -0x14(%ebp)
f012ee1c:	e8 89 1f fd ff       	call   f0100daa <cputchar>
f012ee21:	83 c4 10             	add    $0x10,%esp
			buf[i] = 0;
f012ee24:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012ee27:	8b 45 0c             	mov    0xc(%ebp),%eax
f012ee2a:	01 d0                	add    %edx,%eax
f012ee2c:	c6 00 00             	movb   $0x0,(%eax)
			sys_enable_interrupt();
f012ee2f:	e8 30 dd fd ff       	call   f010cb64 <sys_enable_interrupt>
			return;
f012ee34:	eb 05                	jmp    f012ee3b <atomic_readline+0x106>
		}
	}
f012ee36:	e9 35 ff ff ff       	jmp    f012ed70 <atomic_readline+0x3b>
}
f012ee3b:	c9                   	leave  
f012ee3c:	c3                   	ret    

f012ee3d <strlen>:

#include <inc/string.h>
#include <inc/assert.h>
int
strlen(const char *s)
{
f012ee3d:	55                   	push   %ebp
f012ee3e:	89 e5                	mov    %esp,%ebp
f012ee40:	83 ec 10             	sub    $0x10,%esp
	int n;

	for (n = 0; *s != '\0'; s++)
f012ee43:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f012ee4a:	eb 06                	jmp    f012ee52 <strlen+0x15>
		n++;
f012ee4c:	ff 45 fc             	incl   -0x4(%ebp)
int
strlen(const char *s)
{
	int n;

	for (n = 0; *s != '\0'; s++)
f012ee4f:	ff 45 08             	incl   0x8(%ebp)
f012ee52:	8b 45 08             	mov    0x8(%ebp),%eax
f012ee55:	8a 00                	mov    (%eax),%al
f012ee57:	84 c0                	test   %al,%al
f012ee59:	75 f1                	jne    f012ee4c <strlen+0xf>
		n++;
	return n;
f012ee5b:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f012ee5e:	c9                   	leave  
f012ee5f:	c3                   	ret    

f012ee60 <strnlen>:

int
strnlen(const char *s, uint32 size)
{
f012ee60:	55                   	push   %ebp
f012ee61:	89 e5                	mov    %esp,%ebp
f012ee63:	83 ec 10             	sub    $0x10,%esp
	int n;

	for (n = 0; size > 0 && *s != '\0'; s++, size--)
f012ee66:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f012ee6d:	eb 09                	jmp    f012ee78 <strnlen+0x18>
		n++;
f012ee6f:	ff 45 fc             	incl   -0x4(%ebp)
int
strnlen(const char *s, uint32 size)
{
	int n;

	for (n = 0; size > 0 && *s != '\0'; s++, size--)
f012ee72:	ff 45 08             	incl   0x8(%ebp)
f012ee75:	ff 4d 0c             	decl   0xc(%ebp)
f012ee78:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f012ee7c:	74 09                	je     f012ee87 <strnlen+0x27>
f012ee7e:	8b 45 08             	mov    0x8(%ebp),%eax
f012ee81:	8a 00                	mov    (%eax),%al
f012ee83:	84 c0                	test   %al,%al
f012ee85:	75 e8                	jne    f012ee6f <strnlen+0xf>
		n++;
	return n;
f012ee87:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f012ee8a:	c9                   	leave  
f012ee8b:	c3                   	ret    

f012ee8c <strcpy>:

char *
strcpy(char *dst, const char *src)
{
f012ee8c:	55                   	push   %ebp
f012ee8d:	89 e5                	mov    %esp,%ebp
f012ee8f:	83 ec 10             	sub    $0x10,%esp
	char *ret;

	ret = dst;
f012ee92:	8b 45 08             	mov    0x8(%ebp),%eax
f012ee95:	89 45 fc             	mov    %eax,-0x4(%ebp)
	while ((*dst++ = *src++) != '\0')
f012ee98:	90                   	nop
f012ee99:	8b 45 08             	mov    0x8(%ebp),%eax
f012ee9c:	8d 50 01             	lea    0x1(%eax),%edx
f012ee9f:	89 55 08             	mov    %edx,0x8(%ebp)
f012eea2:	8b 55 0c             	mov    0xc(%ebp),%edx
f012eea5:	8d 4a 01             	lea    0x1(%edx),%ecx
f012eea8:	89 4d 0c             	mov    %ecx,0xc(%ebp)
f012eeab:	8a 12                	mov    (%edx),%dl
f012eead:	88 10                	mov    %dl,(%eax)
f012eeaf:	8a 00                	mov    (%eax),%al
f012eeb1:	84 c0                	test   %al,%al
f012eeb3:	75 e4                	jne    f012ee99 <strcpy+0xd>
		/* do nothing */;
	return ret;
f012eeb5:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f012eeb8:	c9                   	leave  
f012eeb9:	c3                   	ret    

f012eeba <strncpy>:

char *
strncpy(char *dst, const char *src, uint32 size) {
f012eeba:	55                   	push   %ebp
f012eebb:	89 e5                	mov    %esp,%ebp
f012eebd:	83 ec 10             	sub    $0x10,%esp
	uint32 i;
	char *ret;

	ret = dst;
f012eec0:	8b 45 08             	mov    0x8(%ebp),%eax
f012eec3:	89 45 f8             	mov    %eax,-0x8(%ebp)
	for (i = 0; i < size; i++) {
f012eec6:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f012eecd:	eb 1f                	jmp    f012eeee <strncpy+0x34>
		*dst++ = *src;
f012eecf:	8b 45 08             	mov    0x8(%ebp),%eax
f012eed2:	8d 50 01             	lea    0x1(%eax),%edx
f012eed5:	89 55 08             	mov    %edx,0x8(%ebp)
f012eed8:	8b 55 0c             	mov    0xc(%ebp),%edx
f012eedb:	8a 12                	mov    (%edx),%dl
f012eedd:	88 10                	mov    %dl,(%eax)
		// If strlen(src) < size, null-pad 'dst' out to 'size' chars
		if (*src != '\0')
f012eedf:	8b 45 0c             	mov    0xc(%ebp),%eax
f012eee2:	8a 00                	mov    (%eax),%al
f012eee4:	84 c0                	test   %al,%al
f012eee6:	74 03                	je     f012eeeb <strncpy+0x31>
			src++;
f012eee8:	ff 45 0c             	incl   0xc(%ebp)
strncpy(char *dst, const char *src, uint32 size) {
	uint32 i;
	char *ret;

	ret = dst;
	for (i = 0; i < size; i++) {
f012eeeb:	ff 45 fc             	incl   -0x4(%ebp)
f012eeee:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012eef1:	3b 45 10             	cmp    0x10(%ebp),%eax
f012eef4:	72 d9                	jb     f012eecf <strncpy+0x15>
		*dst++ = *src;
		// If strlen(src) < size, null-pad 'dst' out to 'size' chars
		if (*src != '\0')
			src++;
	}
	return ret;
f012eef6:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f012eef9:	c9                   	leave  
f012eefa:	c3                   	ret    

f012eefb <strlcpy>:

uint32
strlcpy(char *dst, const char *src, uint32 size)
{
f012eefb:	55                   	push   %ebp
f012eefc:	89 e5                	mov    %esp,%ebp
f012eefe:	83 ec 10             	sub    $0x10,%esp
	char *dst_in;

	dst_in = dst;
f012ef01:	8b 45 08             	mov    0x8(%ebp),%eax
f012ef04:	89 45 fc             	mov    %eax,-0x4(%ebp)
	if (size > 0) {
f012ef07:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f012ef0b:	74 30                	je     f012ef3d <strlcpy+0x42>
		while (--size > 0 && *src != '\0')
f012ef0d:	eb 16                	jmp    f012ef25 <strlcpy+0x2a>
			*dst++ = *src++;
f012ef0f:	8b 45 08             	mov    0x8(%ebp),%eax
f012ef12:	8d 50 01             	lea    0x1(%eax),%edx
f012ef15:	89 55 08             	mov    %edx,0x8(%ebp)
f012ef18:	8b 55 0c             	mov    0xc(%ebp),%edx
f012ef1b:	8d 4a 01             	lea    0x1(%edx),%ecx
f012ef1e:	89 4d 0c             	mov    %ecx,0xc(%ebp)
f012ef21:	8a 12                	mov    (%edx),%dl
f012ef23:	88 10                	mov    %dl,(%eax)
{
	char *dst_in;

	dst_in = dst;
	if (size > 0) {
		while (--size > 0 && *src != '\0')
f012ef25:	ff 4d 10             	decl   0x10(%ebp)
f012ef28:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f012ef2c:	74 09                	je     f012ef37 <strlcpy+0x3c>
f012ef2e:	8b 45 0c             	mov    0xc(%ebp),%eax
f012ef31:	8a 00                	mov    (%eax),%al
f012ef33:	84 c0                	test   %al,%al
f012ef35:	75 d8                	jne    f012ef0f <strlcpy+0x14>
			*dst++ = *src++;
		*dst = '\0';
f012ef37:	8b 45 08             	mov    0x8(%ebp),%eax
f012ef3a:	c6 00 00             	movb   $0x0,(%eax)
	}
	return dst - dst_in;
f012ef3d:	8b 55 08             	mov    0x8(%ebp),%edx
f012ef40:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012ef43:	29 c2                	sub    %eax,%edx
f012ef45:	89 d0                	mov    %edx,%eax
}
f012ef47:	c9                   	leave  
f012ef48:	c3                   	ret    

f012ef49 <strcmp>:

int
strcmp(const char *p, const char *q)
{
f012ef49:	55                   	push   %ebp
f012ef4a:	89 e5                	mov    %esp,%ebp
	while (*p && *p == *q)
f012ef4c:	eb 06                	jmp    f012ef54 <strcmp+0xb>
		p++, q++;
f012ef4e:	ff 45 08             	incl   0x8(%ebp)
f012ef51:	ff 45 0c             	incl   0xc(%ebp)
}

int
strcmp(const char *p, const char *q)
{
	while (*p && *p == *q)
f012ef54:	8b 45 08             	mov    0x8(%ebp),%eax
f012ef57:	8a 00                	mov    (%eax),%al
f012ef59:	84 c0                	test   %al,%al
f012ef5b:	74 0e                	je     f012ef6b <strcmp+0x22>
f012ef5d:	8b 45 08             	mov    0x8(%ebp),%eax
f012ef60:	8a 10                	mov    (%eax),%dl
f012ef62:	8b 45 0c             	mov    0xc(%ebp),%eax
f012ef65:	8a 00                	mov    (%eax),%al
f012ef67:	38 c2                	cmp    %al,%dl
f012ef69:	74 e3                	je     f012ef4e <strcmp+0x5>
		p++, q++;
	return (int) ((unsigned char) *p - (unsigned char) *q);
f012ef6b:	8b 45 08             	mov    0x8(%ebp),%eax
f012ef6e:	8a 00                	mov    (%eax),%al
f012ef70:	0f b6 d0             	movzbl %al,%edx
f012ef73:	8b 45 0c             	mov    0xc(%ebp),%eax
f012ef76:	8a 00                	mov    (%eax),%al
f012ef78:	0f b6 c0             	movzbl %al,%eax
f012ef7b:	29 c2                	sub    %eax,%edx
f012ef7d:	89 d0                	mov    %edx,%eax
}
f012ef7f:	5d                   	pop    %ebp
f012ef80:	c3                   	ret    

f012ef81 <strncmp>:

int
strncmp(const char *p, const char *q, uint32 n)
{
f012ef81:	55                   	push   %ebp
f012ef82:	89 e5                	mov    %esp,%ebp
	while (n > 0 && *p && *p == *q)
f012ef84:	eb 09                	jmp    f012ef8f <strncmp+0xe>
		n--, p++, q++;
f012ef86:	ff 4d 10             	decl   0x10(%ebp)
f012ef89:	ff 45 08             	incl   0x8(%ebp)
f012ef8c:	ff 45 0c             	incl   0xc(%ebp)
}

int
strncmp(const char *p, const char *q, uint32 n)
{
	while (n > 0 && *p && *p == *q)
f012ef8f:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f012ef93:	74 17                	je     f012efac <strncmp+0x2b>
f012ef95:	8b 45 08             	mov    0x8(%ebp),%eax
f012ef98:	8a 00                	mov    (%eax),%al
f012ef9a:	84 c0                	test   %al,%al
f012ef9c:	74 0e                	je     f012efac <strncmp+0x2b>
f012ef9e:	8b 45 08             	mov    0x8(%ebp),%eax
f012efa1:	8a 10                	mov    (%eax),%dl
f012efa3:	8b 45 0c             	mov    0xc(%ebp),%eax
f012efa6:	8a 00                	mov    (%eax),%al
f012efa8:	38 c2                	cmp    %al,%dl
f012efaa:	74 da                	je     f012ef86 <strncmp+0x5>
		n--, p++, q++;
	if (n == 0)
f012efac:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f012efb0:	75 07                	jne    f012efb9 <strncmp+0x38>
		return 0;
f012efb2:	b8 00 00 00 00       	mov    $0x0,%eax
f012efb7:	eb 14                	jmp    f012efcd <strncmp+0x4c>
	else
		return (int) ((unsigned char) *p - (unsigned char) *q);
f012efb9:	8b 45 08             	mov    0x8(%ebp),%eax
f012efbc:	8a 00                	mov    (%eax),%al
f012efbe:	0f b6 d0             	movzbl %al,%edx
f012efc1:	8b 45 0c             	mov    0xc(%ebp),%eax
f012efc4:	8a 00                	mov    (%eax),%al
f012efc6:	0f b6 c0             	movzbl %al,%eax
f012efc9:	29 c2                	sub    %eax,%edx
f012efcb:	89 d0                	mov    %edx,%eax
}
f012efcd:	5d                   	pop    %ebp
f012efce:	c3                   	ret    

f012efcf <strchr>:

// Return a pointer to the first occurrence of 'c' in 's',
// or a null pointer if the string has no 'c'.
char *
strchr(const char *s, char c)
{
f012efcf:	55                   	push   %ebp
f012efd0:	89 e5                	mov    %esp,%ebp
f012efd2:	83 ec 04             	sub    $0x4,%esp
f012efd5:	8b 45 0c             	mov    0xc(%ebp),%eax
f012efd8:	88 45 fc             	mov    %al,-0x4(%ebp)
	for (; *s; s++)
f012efdb:	eb 12                	jmp    f012efef <strchr+0x20>
		if (*s == c)
f012efdd:	8b 45 08             	mov    0x8(%ebp),%eax
f012efe0:	8a 00                	mov    (%eax),%al
f012efe2:	3a 45 fc             	cmp    -0x4(%ebp),%al
f012efe5:	75 05                	jne    f012efec <strchr+0x1d>
			return (char *) s;
f012efe7:	8b 45 08             	mov    0x8(%ebp),%eax
f012efea:	eb 11                	jmp    f012effd <strchr+0x2e>
// Return a pointer to the first occurrence of 'c' in 's',
// or a null pointer if the string has no 'c'.
char *
strchr(const char *s, char c)
{
	for (; *s; s++)
f012efec:	ff 45 08             	incl   0x8(%ebp)
f012efef:	8b 45 08             	mov    0x8(%ebp),%eax
f012eff2:	8a 00                	mov    (%eax),%al
f012eff4:	84 c0                	test   %al,%al
f012eff6:	75 e5                	jne    f012efdd <strchr+0xe>
		if (*s == c)
			return (char *) s;
	return 0;
f012eff8:	b8 00 00 00 00       	mov    $0x0,%eax
}
f012effd:	c9                   	leave  
f012effe:	c3                   	ret    

f012efff <strfind>:

// Return a pointer to the first occurrence of 'c' in 's',
// or a pointer to the string-ending null character if the string has no 'c'.
char *
strfind(const char *s, char c)
{
f012efff:	55                   	push   %ebp
f012f000:	89 e5                	mov    %esp,%ebp
f012f002:	83 ec 04             	sub    $0x4,%esp
f012f005:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f008:	88 45 fc             	mov    %al,-0x4(%ebp)
	for (; *s; s++)
f012f00b:	eb 0d                	jmp    f012f01a <strfind+0x1b>
		if (*s == c)
f012f00d:	8b 45 08             	mov    0x8(%ebp),%eax
f012f010:	8a 00                	mov    (%eax),%al
f012f012:	3a 45 fc             	cmp    -0x4(%ebp),%al
f012f015:	74 0e                	je     f012f025 <strfind+0x26>
// Return a pointer to the first occurrence of 'c' in 's',
// or a pointer to the string-ending null character if the string has no 'c'.
char *
strfind(const char *s, char c)
{
	for (; *s; s++)
f012f017:	ff 45 08             	incl   0x8(%ebp)
f012f01a:	8b 45 08             	mov    0x8(%ebp),%eax
f012f01d:	8a 00                	mov    (%eax),%al
f012f01f:	84 c0                	test   %al,%al
f012f021:	75 ea                	jne    f012f00d <strfind+0xe>
f012f023:	eb 01                	jmp    f012f026 <strfind+0x27>
		if (*s == c)
			break;
f012f025:	90                   	nop
	return (char *) s;
f012f026:	8b 45 08             	mov    0x8(%ebp),%eax
}
f012f029:	c9                   	leave  
f012f02a:	c3                   	ret    

f012f02b <memset>:


void *
memset(void *v, int c, uint32 n)
{
f012f02b:	55                   	push   %ebp
f012f02c:	89 e5                	mov    %esp,%ebp
f012f02e:	83 ec 10             	sub    $0x10,%esp
	char *p;
	int m;

	p = v;
f012f031:	8b 45 08             	mov    0x8(%ebp),%eax
f012f034:	89 45 fc             	mov    %eax,-0x4(%ebp)
	m = n;
f012f037:	8b 45 10             	mov    0x10(%ebp),%eax
f012f03a:	89 45 f8             	mov    %eax,-0x8(%ebp)
	while (--m >= 0)
f012f03d:	eb 0e                	jmp    f012f04d <memset+0x22>
		*p++ = c;
f012f03f:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012f042:	8d 50 01             	lea    0x1(%eax),%edx
f012f045:	89 55 fc             	mov    %edx,-0x4(%ebp)
f012f048:	8b 55 0c             	mov    0xc(%ebp),%edx
f012f04b:	88 10                	mov    %dl,(%eax)
	char *p;
	int m;

	p = v;
	m = n;
	while (--m >= 0)
f012f04d:	ff 4d f8             	decl   -0x8(%ebp)
f012f050:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f012f054:	79 e9                	jns    f012f03f <memset+0x14>
		*p++ = c;

	return v;
f012f056:	8b 45 08             	mov    0x8(%ebp),%eax
}
f012f059:	c9                   	leave  
f012f05a:	c3                   	ret    

f012f05b <memcpy>:

void *
memcpy(void *dst, const void *src, uint32 n)
{
f012f05b:	55                   	push   %ebp
f012f05c:	89 e5                	mov    %esp,%ebp
f012f05e:	83 ec 10             	sub    $0x10,%esp
	const char *s;
	char *d;

	s = src;
f012f061:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f064:	89 45 fc             	mov    %eax,-0x4(%ebp)
	d = dst;
f012f067:	8b 45 08             	mov    0x8(%ebp),%eax
f012f06a:	89 45 f8             	mov    %eax,-0x8(%ebp)
	while (n-- > 0)
f012f06d:	eb 16                	jmp    f012f085 <memcpy+0x2a>
		*d++ = *s++;
f012f06f:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012f072:	8d 50 01             	lea    0x1(%eax),%edx
f012f075:	89 55 f8             	mov    %edx,-0x8(%ebp)
f012f078:	8b 55 fc             	mov    -0x4(%ebp),%edx
f012f07b:	8d 4a 01             	lea    0x1(%edx),%ecx
f012f07e:	89 4d fc             	mov    %ecx,-0x4(%ebp)
f012f081:	8a 12                	mov    (%edx),%dl
f012f083:	88 10                	mov    %dl,(%eax)
	const char *s;
	char *d;

	s = src;
	d = dst;
	while (n-- > 0)
f012f085:	8b 45 10             	mov    0x10(%ebp),%eax
f012f088:	8d 50 ff             	lea    -0x1(%eax),%edx
f012f08b:	89 55 10             	mov    %edx,0x10(%ebp)
f012f08e:	85 c0                	test   %eax,%eax
f012f090:	75 dd                	jne    f012f06f <memcpy+0x14>
		*d++ = *s++;

	return dst;
f012f092:	8b 45 08             	mov    0x8(%ebp),%eax
}
f012f095:	c9                   	leave  
f012f096:	c3                   	ret    

f012f097 <memmove>:

void *
memmove(void *dst, const void *src, uint32 n)
{
f012f097:	55                   	push   %ebp
f012f098:	89 e5                	mov    %esp,%ebp
f012f09a:	83 ec 10             	sub    $0x10,%esp
	const char *s;
	char *d;

	s = src;
f012f09d:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f0a0:	89 45 fc             	mov    %eax,-0x4(%ebp)
	d = dst;
f012f0a3:	8b 45 08             	mov    0x8(%ebp),%eax
f012f0a6:	89 45 f8             	mov    %eax,-0x8(%ebp)
	if (s < d && s + n > d) {
f012f0a9:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012f0ac:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f012f0af:	73 50                	jae    f012f101 <memmove+0x6a>
f012f0b1:	8b 55 fc             	mov    -0x4(%ebp),%edx
f012f0b4:	8b 45 10             	mov    0x10(%ebp),%eax
f012f0b7:	01 d0                	add    %edx,%eax
f012f0b9:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f012f0bc:	76 43                	jbe    f012f101 <memmove+0x6a>
		s += n;
f012f0be:	8b 45 10             	mov    0x10(%ebp),%eax
f012f0c1:	01 45 fc             	add    %eax,-0x4(%ebp)
		d += n;
f012f0c4:	8b 45 10             	mov    0x10(%ebp),%eax
f012f0c7:	01 45 f8             	add    %eax,-0x8(%ebp)
		while (n-- > 0)
f012f0ca:	eb 10                	jmp    f012f0dc <memmove+0x45>
			*--d = *--s;
f012f0cc:	ff 4d f8             	decl   -0x8(%ebp)
f012f0cf:	ff 4d fc             	decl   -0x4(%ebp)
f012f0d2:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012f0d5:	8a 10                	mov    (%eax),%dl
f012f0d7:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012f0da:	88 10                	mov    %dl,(%eax)
	s = src;
	d = dst;
	if (s < d && s + n > d) {
		s += n;
		d += n;
		while (n-- > 0)
f012f0dc:	8b 45 10             	mov    0x10(%ebp),%eax
f012f0df:	8d 50 ff             	lea    -0x1(%eax),%edx
f012f0e2:	89 55 10             	mov    %edx,0x10(%ebp)
f012f0e5:	85 c0                	test   %eax,%eax
f012f0e7:	75 e3                	jne    f012f0cc <memmove+0x35>
	const char *s;
	char *d;

	s = src;
	d = dst;
	if (s < d && s + n > d) {
f012f0e9:	eb 23                	jmp    f012f10e <memmove+0x77>
		d += n;
		while (n-- > 0)
			*--d = *--s;
	} else
		while (n-- > 0)
			*d++ = *s++;
f012f0eb:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012f0ee:	8d 50 01             	lea    0x1(%eax),%edx
f012f0f1:	89 55 f8             	mov    %edx,-0x8(%ebp)
f012f0f4:	8b 55 fc             	mov    -0x4(%ebp),%edx
f012f0f7:	8d 4a 01             	lea    0x1(%edx),%ecx
f012f0fa:	89 4d fc             	mov    %ecx,-0x4(%ebp)
f012f0fd:	8a 12                	mov    (%edx),%dl
f012f0ff:	88 10                	mov    %dl,(%eax)
		s += n;
		d += n;
		while (n-- > 0)
			*--d = *--s;
	} else
		while (n-- > 0)
f012f101:	8b 45 10             	mov    0x10(%ebp),%eax
f012f104:	8d 50 ff             	lea    -0x1(%eax),%edx
f012f107:	89 55 10             	mov    %edx,0x10(%ebp)
f012f10a:	85 c0                	test   %eax,%eax
f012f10c:	75 dd                	jne    f012f0eb <memmove+0x54>
			*d++ = *s++;

	return dst;
f012f10e:	8b 45 08             	mov    0x8(%ebp),%eax
}
f012f111:	c9                   	leave  
f012f112:	c3                   	ret    

f012f113 <memcmp>:

int
memcmp(const void *v1, const void *v2, uint32 n)
{
f012f113:	55                   	push   %ebp
f012f114:	89 e5                	mov    %esp,%ebp
f012f116:	83 ec 10             	sub    $0x10,%esp
	const uint8 *s1 = (const uint8 *) v1;
f012f119:	8b 45 08             	mov    0x8(%ebp),%eax
f012f11c:	89 45 fc             	mov    %eax,-0x4(%ebp)
	const uint8 *s2 = (const uint8 *) v2;
f012f11f:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f122:	89 45 f8             	mov    %eax,-0x8(%ebp)

	while (n-- > 0) {
f012f125:	eb 2a                	jmp    f012f151 <memcmp+0x3e>
		if (*s1 != *s2)
f012f127:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012f12a:	8a 10                	mov    (%eax),%dl
f012f12c:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012f12f:	8a 00                	mov    (%eax),%al
f012f131:	38 c2                	cmp    %al,%dl
f012f133:	74 16                	je     f012f14b <memcmp+0x38>
			return (int) *s1 - (int) *s2;
f012f135:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012f138:	8a 00                	mov    (%eax),%al
f012f13a:	0f b6 d0             	movzbl %al,%edx
f012f13d:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012f140:	8a 00                	mov    (%eax),%al
f012f142:	0f b6 c0             	movzbl %al,%eax
f012f145:	29 c2                	sub    %eax,%edx
f012f147:	89 d0                	mov    %edx,%eax
f012f149:	eb 18                	jmp    f012f163 <memcmp+0x50>
		s1++, s2++;
f012f14b:	ff 45 fc             	incl   -0x4(%ebp)
f012f14e:	ff 45 f8             	incl   -0x8(%ebp)
memcmp(const void *v1, const void *v2, uint32 n)
{
	const uint8 *s1 = (const uint8 *) v1;
	const uint8 *s2 = (const uint8 *) v2;

	while (n-- > 0) {
f012f151:	8b 45 10             	mov    0x10(%ebp),%eax
f012f154:	8d 50 ff             	lea    -0x1(%eax),%edx
f012f157:	89 55 10             	mov    %edx,0x10(%ebp)
f012f15a:	85 c0                	test   %eax,%eax
f012f15c:	75 c9                	jne    f012f127 <memcmp+0x14>
		if (*s1 != *s2)
			return (int) *s1 - (int) *s2;
		s1++, s2++;
	}

	return 0;
f012f15e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f012f163:	c9                   	leave  
f012f164:	c3                   	ret    

f012f165 <memfind>:

void *
memfind(const void *s, int c, uint32 n)
{
f012f165:	55                   	push   %ebp
f012f166:	89 e5                	mov    %esp,%ebp
f012f168:	83 ec 10             	sub    $0x10,%esp
	const void *ends = (const char *) s + n;
f012f16b:	8b 55 08             	mov    0x8(%ebp),%edx
f012f16e:	8b 45 10             	mov    0x10(%ebp),%eax
f012f171:	01 d0                	add    %edx,%eax
f012f173:	89 45 fc             	mov    %eax,-0x4(%ebp)
	for (; s < ends; s++)
f012f176:	eb 15                	jmp    f012f18d <memfind+0x28>
		if (*(const unsigned char *) s == (unsigned char) c)
f012f178:	8b 45 08             	mov    0x8(%ebp),%eax
f012f17b:	8a 00                	mov    (%eax),%al
f012f17d:	0f b6 d0             	movzbl %al,%edx
f012f180:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f183:	0f b6 c0             	movzbl %al,%eax
f012f186:	39 c2                	cmp    %eax,%edx
f012f188:	74 0d                	je     f012f197 <memfind+0x32>

void *
memfind(const void *s, int c, uint32 n)
{
	const void *ends = (const char *) s + n;
	for (; s < ends; s++)
f012f18a:	ff 45 08             	incl   0x8(%ebp)
f012f18d:	8b 45 08             	mov    0x8(%ebp),%eax
f012f190:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f012f193:	72 e3                	jb     f012f178 <memfind+0x13>
f012f195:	eb 01                	jmp    f012f198 <memfind+0x33>
		if (*(const unsigned char *) s == (unsigned char) c)
			break;
f012f197:	90                   	nop
	return (void *) s;
f012f198:	8b 45 08             	mov    0x8(%ebp),%eax
}
f012f19b:	c9                   	leave  
f012f19c:	c3                   	ret    

f012f19d <strtol>:

long
strtol(const char *s, char **endptr, int base)
{
f012f19d:	55                   	push   %ebp
f012f19e:	89 e5                	mov    %esp,%ebp
f012f1a0:	83 ec 10             	sub    $0x10,%esp
	int neg = 0;
f012f1a3:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	long val = 0;
f012f1aa:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	// gobble initial whitespace
	while (*s == ' ' || *s == '\t')
f012f1b1:	eb 03                	jmp    f012f1b6 <strtol+0x19>
		s++;
f012f1b3:	ff 45 08             	incl   0x8(%ebp)
{
	int neg = 0;
	long val = 0;

	// gobble initial whitespace
	while (*s == ' ' || *s == '\t')
f012f1b6:	8b 45 08             	mov    0x8(%ebp),%eax
f012f1b9:	8a 00                	mov    (%eax),%al
f012f1bb:	3c 20                	cmp    $0x20,%al
f012f1bd:	74 f4                	je     f012f1b3 <strtol+0x16>
f012f1bf:	8b 45 08             	mov    0x8(%ebp),%eax
f012f1c2:	8a 00                	mov    (%eax),%al
f012f1c4:	3c 09                	cmp    $0x9,%al
f012f1c6:	74 eb                	je     f012f1b3 <strtol+0x16>
		s++;

	// plus/minus sign
	if (*s == '+')
f012f1c8:	8b 45 08             	mov    0x8(%ebp),%eax
f012f1cb:	8a 00                	mov    (%eax),%al
f012f1cd:	3c 2b                	cmp    $0x2b,%al
f012f1cf:	75 05                	jne    f012f1d6 <strtol+0x39>
		s++;
f012f1d1:	ff 45 08             	incl   0x8(%ebp)
f012f1d4:	eb 13                	jmp    f012f1e9 <strtol+0x4c>
	else if (*s == '-')
f012f1d6:	8b 45 08             	mov    0x8(%ebp),%eax
f012f1d9:	8a 00                	mov    (%eax),%al
f012f1db:	3c 2d                	cmp    $0x2d,%al
f012f1dd:	75 0a                	jne    f012f1e9 <strtol+0x4c>
		s++, neg = 1;
f012f1df:	ff 45 08             	incl   0x8(%ebp)
f012f1e2:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)

	// hex or octal base prefix
	if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x'))
f012f1e9:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f012f1ed:	74 06                	je     f012f1f5 <strtol+0x58>
f012f1ef:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
f012f1f3:	75 20                	jne    f012f215 <strtol+0x78>
f012f1f5:	8b 45 08             	mov    0x8(%ebp),%eax
f012f1f8:	8a 00                	mov    (%eax),%al
f012f1fa:	3c 30                	cmp    $0x30,%al
f012f1fc:	75 17                	jne    f012f215 <strtol+0x78>
f012f1fe:	8b 45 08             	mov    0x8(%ebp),%eax
f012f201:	40                   	inc    %eax
f012f202:	8a 00                	mov    (%eax),%al
f012f204:	3c 78                	cmp    $0x78,%al
f012f206:	75 0d                	jne    f012f215 <strtol+0x78>
		s += 2, base = 16;
f012f208:	83 45 08 02          	addl   $0x2,0x8(%ebp)
f012f20c:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
f012f213:	eb 28                	jmp    f012f23d <strtol+0xa0>
	else if (base == 0 && s[0] == '0')
f012f215:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f012f219:	75 15                	jne    f012f230 <strtol+0x93>
f012f21b:	8b 45 08             	mov    0x8(%ebp),%eax
f012f21e:	8a 00                	mov    (%eax),%al
f012f220:	3c 30                	cmp    $0x30,%al
f012f222:	75 0c                	jne    f012f230 <strtol+0x93>
		s++, base = 8;
f012f224:	ff 45 08             	incl   0x8(%ebp)
f012f227:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
f012f22e:	eb 0d                	jmp    f012f23d <strtol+0xa0>
	else if (base == 0)
f012f230:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f012f234:	75 07                	jne    f012f23d <strtol+0xa0>
		base = 10;
f012f236:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)

	// digits
	while (1) {
		int dig;

		if (*s >= '0' && *s <= '9')
f012f23d:	8b 45 08             	mov    0x8(%ebp),%eax
f012f240:	8a 00                	mov    (%eax),%al
f012f242:	3c 2f                	cmp    $0x2f,%al
f012f244:	7e 19                	jle    f012f25f <strtol+0xc2>
f012f246:	8b 45 08             	mov    0x8(%ebp),%eax
f012f249:	8a 00                	mov    (%eax),%al
f012f24b:	3c 39                	cmp    $0x39,%al
f012f24d:	7f 10                	jg     f012f25f <strtol+0xc2>
			dig = *s - '0';
f012f24f:	8b 45 08             	mov    0x8(%ebp),%eax
f012f252:	8a 00                	mov    (%eax),%al
f012f254:	0f be c0             	movsbl %al,%eax
f012f257:	83 e8 30             	sub    $0x30,%eax
f012f25a:	89 45 f4             	mov    %eax,-0xc(%ebp)
f012f25d:	eb 42                	jmp    f012f2a1 <strtol+0x104>
		else if (*s >= 'a' && *s <= 'z')
f012f25f:	8b 45 08             	mov    0x8(%ebp),%eax
f012f262:	8a 00                	mov    (%eax),%al
f012f264:	3c 60                	cmp    $0x60,%al
f012f266:	7e 19                	jle    f012f281 <strtol+0xe4>
f012f268:	8b 45 08             	mov    0x8(%ebp),%eax
f012f26b:	8a 00                	mov    (%eax),%al
f012f26d:	3c 7a                	cmp    $0x7a,%al
f012f26f:	7f 10                	jg     f012f281 <strtol+0xe4>
			dig = *s - 'a' + 10;
f012f271:	8b 45 08             	mov    0x8(%ebp),%eax
f012f274:	8a 00                	mov    (%eax),%al
f012f276:	0f be c0             	movsbl %al,%eax
f012f279:	83 e8 57             	sub    $0x57,%eax
f012f27c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f012f27f:	eb 20                	jmp    f012f2a1 <strtol+0x104>
		else if (*s >= 'A' && *s <= 'Z')
f012f281:	8b 45 08             	mov    0x8(%ebp),%eax
f012f284:	8a 00                	mov    (%eax),%al
f012f286:	3c 40                	cmp    $0x40,%al
f012f288:	7e 39                	jle    f012f2c3 <strtol+0x126>
f012f28a:	8b 45 08             	mov    0x8(%ebp),%eax
f012f28d:	8a 00                	mov    (%eax),%al
f012f28f:	3c 5a                	cmp    $0x5a,%al
f012f291:	7f 30                	jg     f012f2c3 <strtol+0x126>
			dig = *s - 'A' + 10;
f012f293:	8b 45 08             	mov    0x8(%ebp),%eax
f012f296:	8a 00                	mov    (%eax),%al
f012f298:	0f be c0             	movsbl %al,%eax
f012f29b:	83 e8 37             	sub    $0x37,%eax
f012f29e:	89 45 f4             	mov    %eax,-0xc(%ebp)
		else
			break;
		if (dig >= base)
f012f2a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012f2a4:	3b 45 10             	cmp    0x10(%ebp),%eax
f012f2a7:	7d 19                	jge    f012f2c2 <strtol+0x125>
			break;
		s++, val = (val * base) + dig;
f012f2a9:	ff 45 08             	incl   0x8(%ebp)
f012f2ac:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012f2af:	0f af 45 10          	imul   0x10(%ebp),%eax
f012f2b3:	89 c2                	mov    %eax,%edx
f012f2b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012f2b8:	01 d0                	add    %edx,%eax
f012f2ba:	89 45 f8             	mov    %eax,-0x8(%ebp)
		// we don't properly detect overflow!
	}
f012f2bd:	e9 7b ff ff ff       	jmp    f012f23d <strtol+0xa0>
		else if (*s >= 'A' && *s <= 'Z')
			dig = *s - 'A' + 10;
		else
			break;
		if (dig >= base)
			break;
f012f2c2:	90                   	nop
		s++, val = (val * base) + dig;
		// we don't properly detect overflow!
	}

	if (endptr)
f012f2c3:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f012f2c7:	74 08                	je     f012f2d1 <strtol+0x134>
		*endptr = (char *) s;
f012f2c9:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f2cc:	8b 55 08             	mov    0x8(%ebp),%edx
f012f2cf:	89 10                	mov    %edx,(%eax)
	return (neg ? -val : val);
f012f2d1:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f012f2d5:	74 07                	je     f012f2de <strtol+0x141>
f012f2d7:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012f2da:	f7 d8                	neg    %eax
f012f2dc:	eb 03                	jmp    f012f2e1 <strtol+0x144>
f012f2de:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f012f2e1:	c9                   	leave  
f012f2e2:	c3                   	ret    

f012f2e3 <ltostr>:

void
ltostr(long value, char *str)
{
f012f2e3:	55                   	push   %ebp
f012f2e4:	89 e5                	mov    %esp,%ebp
f012f2e6:	83 ec 20             	sub    $0x20,%esp
	int neg = 0;
f012f2e9:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	int s = 0 ;
f012f2f0:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	// plus/minus sign
	if (value < 0)
f012f2f7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f012f2fb:	79 13                	jns    f012f310 <ltostr+0x2d>
	{
		neg = 1;
f012f2fd:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
		str[0] = '-';
f012f304:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f307:	c6 00 2d             	movb   $0x2d,(%eax)
		value = value * -1 ;
f012f30a:	f7 5d 08             	negl   0x8(%ebp)
		s++ ;
f012f30d:	ff 45 f8             	incl   -0x8(%ebp)
	}
	do
	{
		int mod = value % 10 ;
f012f310:	8b 45 08             	mov    0x8(%ebp),%eax
f012f313:	b9 0a 00 00 00       	mov    $0xa,%ecx
f012f318:	99                   	cltd   
f012f319:	f7 f9                	idiv   %ecx
f012f31b:	89 55 ec             	mov    %edx,-0x14(%ebp)
		str[s++] = mod + '0' ;
f012f31e:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012f321:	8d 50 01             	lea    0x1(%eax),%edx
f012f324:	89 55 f8             	mov    %edx,-0x8(%ebp)
f012f327:	89 c2                	mov    %eax,%edx
f012f329:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f32c:	01 d0                	add    %edx,%eax
f012f32e:	8b 55 ec             	mov    -0x14(%ebp),%edx
f012f331:	83 c2 30             	add    $0x30,%edx
f012f334:	88 10                	mov    %dl,(%eax)
		value = value / 10 ;
f012f336:	8b 4d 08             	mov    0x8(%ebp),%ecx
f012f339:	b8 67 66 66 66       	mov    $0x66666667,%eax
f012f33e:	f7 e9                	imul   %ecx
f012f340:	c1 fa 02             	sar    $0x2,%edx
f012f343:	89 c8                	mov    %ecx,%eax
f012f345:	c1 f8 1f             	sar    $0x1f,%eax
f012f348:	29 c2                	sub    %eax,%edx
f012f34a:	89 d0                	mov    %edx,%eax
f012f34c:	89 45 08             	mov    %eax,0x8(%ebp)
	} while (value % 10 != 0);
f012f34f:	8b 4d 08             	mov    0x8(%ebp),%ecx
f012f352:	b8 67 66 66 66       	mov    $0x66666667,%eax
f012f357:	f7 e9                	imul   %ecx
f012f359:	c1 fa 02             	sar    $0x2,%edx
f012f35c:	89 c8                	mov    %ecx,%eax
f012f35e:	c1 f8 1f             	sar    $0x1f,%eax
f012f361:	29 c2                	sub    %eax,%edx
f012f363:	89 d0                	mov    %edx,%eax
f012f365:	c1 e0 02             	shl    $0x2,%eax
f012f368:	01 d0                	add    %edx,%eax
f012f36a:	01 c0                	add    %eax,%eax
f012f36c:	29 c1                	sub    %eax,%ecx
f012f36e:	89 ca                	mov    %ecx,%edx
f012f370:	85 d2                	test   %edx,%edx
f012f372:	75 9c                	jne    f012f310 <ltostr+0x2d>

	//reverse the string
	int start = 0 ;
f012f374:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int end = s-1 ;
f012f37b:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012f37e:	48                   	dec    %eax
f012f37f:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (neg)
f012f382:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f012f386:	74 3d                	je     f012f3c5 <ltostr+0xe2>
		start = 1 ;
f012f388:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
	while(start<end)
f012f38f:	eb 34                	jmp    f012f3c5 <ltostr+0xe2>
	{
		char tmp = str[start] ;
f012f391:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012f394:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f397:	01 d0                	add    %edx,%eax
f012f399:	8a 00                	mov    (%eax),%al
f012f39b:	88 45 eb             	mov    %al,-0x15(%ebp)
		str[start] = str[end] ;
f012f39e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012f3a1:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f3a4:	01 c2                	add    %eax,%edx
f012f3a6:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f012f3a9:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f3ac:	01 c8                	add    %ecx,%eax
f012f3ae:	8a 00                	mov    (%eax),%al
f012f3b0:	88 02                	mov    %al,(%edx)
		str[end] = tmp;
f012f3b2:	8b 55 f0             	mov    -0x10(%ebp),%edx
f012f3b5:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f3b8:	01 c2                	add    %eax,%edx
f012f3ba:	8a 45 eb             	mov    -0x15(%ebp),%al
f012f3bd:	88 02                	mov    %al,(%edx)
		start++ ;
f012f3bf:	ff 45 f4             	incl   -0xc(%ebp)
		end-- ;
f012f3c2:	ff 4d f0             	decl   -0x10(%ebp)
	//reverse the string
	int start = 0 ;
	int end = s-1 ;
	if (neg)
		start = 1 ;
	while(start<end)
f012f3c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012f3c8:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012f3cb:	7c c4                	jl     f012f391 <ltostr+0xae>
		str[end] = tmp;
		start++ ;
		end-- ;
	}

	str[s] = 0 ;
f012f3cd:	8b 55 f8             	mov    -0x8(%ebp),%edx
f012f3d0:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f3d3:	01 d0                	add    %edx,%eax
f012f3d5:	c6 00 00             	movb   $0x0,(%eax)
	// we don't properly detect overflow!

}
f012f3d8:	90                   	nop
f012f3d9:	c9                   	leave  
f012f3da:	c3                   	ret    

f012f3db <strcconcat>:

void
strcconcat(const char *str1, const char *str2, char *final)
{
f012f3db:	55                   	push   %ebp
f012f3dc:	89 e5                	mov    %esp,%ebp
f012f3de:	83 ec 10             	sub    $0x10,%esp
	int len1 = strlen(str1);
f012f3e1:	ff 75 08             	pushl  0x8(%ebp)
f012f3e4:	e8 54 fa ff ff       	call   f012ee3d <strlen>
f012f3e9:	83 c4 04             	add    $0x4,%esp
f012f3ec:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int len2 = strlen(str2);
f012f3ef:	ff 75 0c             	pushl  0xc(%ebp)
f012f3f2:	e8 46 fa ff ff       	call   f012ee3d <strlen>
f012f3f7:	83 c4 04             	add    $0x4,%esp
f012f3fa:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int s = 0 ;
f012f3fd:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	for (s=0 ; s < len1 ; s++)
f012f404:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f012f40b:	eb 17                	jmp    f012f424 <strcconcat+0x49>
		final[s] = str1[s] ;
f012f40d:	8b 55 fc             	mov    -0x4(%ebp),%edx
f012f410:	8b 45 10             	mov    0x10(%ebp),%eax
f012f413:	01 c2                	add    %eax,%edx
f012f415:	8b 4d fc             	mov    -0x4(%ebp),%ecx
f012f418:	8b 45 08             	mov    0x8(%ebp),%eax
f012f41b:	01 c8                	add    %ecx,%eax
f012f41d:	8a 00                	mov    (%eax),%al
f012f41f:	88 02                	mov    %al,(%edx)
strcconcat(const char *str1, const char *str2, char *final)
{
	int len1 = strlen(str1);
	int len2 = strlen(str2);
	int s = 0 ;
	for (s=0 ; s < len1 ; s++)
f012f421:	ff 45 fc             	incl   -0x4(%ebp)
f012f424:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012f427:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012f42a:	7c e1                	jl     f012f40d <strcconcat+0x32>
		final[s] = str1[s] ;

	int i = 0 ;
f012f42c:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for (i=0 ; i < len2 ; i++)
f012f433:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
f012f43a:	eb 1f                	jmp    f012f45b <strcconcat+0x80>
		final[s++] = str2[i] ;
f012f43c:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012f43f:	8d 50 01             	lea    0x1(%eax),%edx
f012f442:	89 55 fc             	mov    %edx,-0x4(%ebp)
f012f445:	89 c2                	mov    %eax,%edx
f012f447:	8b 45 10             	mov    0x10(%ebp),%eax
f012f44a:	01 c2                	add    %eax,%edx
f012f44c:	8b 4d f8             	mov    -0x8(%ebp),%ecx
f012f44f:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f452:	01 c8                	add    %ecx,%eax
f012f454:	8a 00                	mov    (%eax),%al
f012f456:	88 02                	mov    %al,(%edx)
	int s = 0 ;
	for (s=0 ; s < len1 ; s++)
		final[s] = str1[s] ;

	int i = 0 ;
	for (i=0 ; i < len2 ; i++)
f012f458:	ff 45 f8             	incl   -0x8(%ebp)
f012f45b:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012f45e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012f461:	7c d9                	jl     f012f43c <strcconcat+0x61>
		final[s++] = str2[i] ;

	final[s] = 0;
f012f463:	8b 55 fc             	mov    -0x4(%ebp),%edx
f012f466:	8b 45 10             	mov    0x10(%ebp),%eax
f012f469:	01 d0                	add    %edx,%eax
f012f46b:	c6 00 00             	movb   $0x0,(%eax)
}
f012f46e:	90                   	nop
f012f46f:	c9                   	leave  
f012f470:	c3                   	ret    

f012f471 <strsplit>:
int strsplit(char *string, char *SPLIT_CHARS, char **argv, int * argc)
{
f012f471:	55                   	push   %ebp
f012f472:	89 e5                	mov    %esp,%ebp
	// Parse the command string into splitchars-separated arguments
	*argc = 0;
f012f474:	8b 45 14             	mov    0x14(%ebp),%eax
f012f477:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	(argv)[*argc] = 0;
f012f47d:	8b 45 14             	mov    0x14(%ebp),%eax
f012f480:	8b 00                	mov    (%eax),%eax
f012f482:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012f489:	8b 45 10             	mov    0x10(%ebp),%eax
f012f48c:	01 d0                	add    %edx,%eax
f012f48e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	while (1)
	{
		// trim splitchars
		while (*string && strchr(SPLIT_CHARS, *string))
f012f494:	eb 0c                	jmp    f012f4a2 <strsplit+0x31>
			*string++ = 0;
f012f496:	8b 45 08             	mov    0x8(%ebp),%eax
f012f499:	8d 50 01             	lea    0x1(%eax),%edx
f012f49c:	89 55 08             	mov    %edx,0x8(%ebp)
f012f49f:	c6 00 00             	movb   $0x0,(%eax)
	*argc = 0;
	(argv)[*argc] = 0;
	while (1)
	{
		// trim splitchars
		while (*string && strchr(SPLIT_CHARS, *string))
f012f4a2:	8b 45 08             	mov    0x8(%ebp),%eax
f012f4a5:	8a 00                	mov    (%eax),%al
f012f4a7:	84 c0                	test   %al,%al
f012f4a9:	74 18                	je     f012f4c3 <strsplit+0x52>
f012f4ab:	8b 45 08             	mov    0x8(%ebp),%eax
f012f4ae:	8a 00                	mov    (%eax),%al
f012f4b0:	0f be c0             	movsbl %al,%eax
f012f4b3:	50                   	push   %eax
f012f4b4:	ff 75 0c             	pushl  0xc(%ebp)
f012f4b7:	e8 13 fb ff ff       	call   f012efcf <strchr>
f012f4bc:	83 c4 08             	add    $0x8,%esp
f012f4bf:	85 c0                	test   %eax,%eax
f012f4c1:	75 d3                	jne    f012f496 <strsplit+0x25>
			*string++ = 0;

		//if the command string is finished, then break the loop
		if (*string == 0)
f012f4c3:	8b 45 08             	mov    0x8(%ebp),%eax
f012f4c6:	8a 00                	mov    (%eax),%al
f012f4c8:	84 c0                	test   %al,%al
f012f4ca:	74 5a                	je     f012f526 <strsplit+0xb5>
			break;

		//check current number of arguments
		if (*argc == MAX_ARGUMENTS-1)
f012f4cc:	8b 45 14             	mov    0x14(%ebp),%eax
f012f4cf:	8b 00                	mov    (%eax),%eax
f012f4d1:	83 f8 0f             	cmp    $0xf,%eax
f012f4d4:	75 07                	jne    f012f4dd <strsplit+0x6c>
		{
			return 0;
f012f4d6:	b8 00 00 00 00       	mov    $0x0,%eax
f012f4db:	eb 66                	jmp    f012f543 <strsplit+0xd2>
		}

		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
f012f4dd:	8b 45 14             	mov    0x14(%ebp),%eax
f012f4e0:	8b 00                	mov    (%eax),%eax
f012f4e2:	8d 48 01             	lea    0x1(%eax),%ecx
f012f4e5:	8b 55 14             	mov    0x14(%ebp),%edx
f012f4e8:	89 0a                	mov    %ecx,(%edx)
f012f4ea:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012f4f1:	8b 45 10             	mov    0x10(%ebp),%eax
f012f4f4:	01 c2                	add    %eax,%edx
f012f4f6:	8b 45 08             	mov    0x8(%ebp),%eax
f012f4f9:	89 02                	mov    %eax,(%edx)
		while (*string && !strchr(SPLIT_CHARS, *string))
f012f4fb:	eb 03                	jmp    f012f500 <strsplit+0x8f>
			string++;
f012f4fd:	ff 45 08             	incl   0x8(%ebp)
			return 0;
		}

		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
		while (*string && !strchr(SPLIT_CHARS, *string))
f012f500:	8b 45 08             	mov    0x8(%ebp),%eax
f012f503:	8a 00                	mov    (%eax),%al
f012f505:	84 c0                	test   %al,%al
f012f507:	74 8b                	je     f012f494 <strsplit+0x23>
f012f509:	8b 45 08             	mov    0x8(%ebp),%eax
f012f50c:	8a 00                	mov    (%eax),%al
f012f50e:	0f be c0             	movsbl %al,%eax
f012f511:	50                   	push   %eax
f012f512:	ff 75 0c             	pushl  0xc(%ebp)
f012f515:	e8 b5 fa ff ff       	call   f012efcf <strchr>
f012f51a:	83 c4 08             	add    $0x8,%esp
f012f51d:	85 c0                	test   %eax,%eax
f012f51f:	74 dc                	je     f012f4fd <strsplit+0x8c>
			string++;
	}
f012f521:	e9 6e ff ff ff       	jmp    f012f494 <strsplit+0x23>
		while (*string && strchr(SPLIT_CHARS, *string))
			*string++ = 0;

		//if the command string is finished, then break the loop
		if (*string == 0)
			break;
f012f526:	90                   	nop
		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
		while (*string && !strchr(SPLIT_CHARS, *string))
			string++;
	}
	(argv)[*argc] = 0;
f012f527:	8b 45 14             	mov    0x14(%ebp),%eax
f012f52a:	8b 00                	mov    (%eax),%eax
f012f52c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012f533:	8b 45 10             	mov    0x10(%ebp),%eax
f012f536:	01 d0                	add    %edx,%eax
f012f538:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	return 1 ;
f012f53e:	b8 01 00 00 00       	mov    $0x1,%eax
}
f012f543:	c9                   	leave  
f012f544:	c3                   	ret    

f012f545 <str2lower>:


/*2024*/
char* str2lower(char *dst, const char *src)
{
f012f545:	55                   	push   %ebp
f012f546:	89 e5                	mov    %esp,%ebp
f012f548:	83 ec 10             	sub    $0x10,%esp
	//TODO: [PROJECT'23.MS1 - #1] [1] PLAY WITH CODE! - str2lower
	//Comment the following line before start coding...
	//panic("process_command is not implemented yet");
	if(src==NULL||dst==NULL){
f012f54b:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f012f54f:	74 06                	je     f012f557 <str2lower+0x12>
f012f551:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f012f555:	75 07                	jne    f012f55e <str2lower+0x19>
		return NULL;
f012f557:	b8 00 00 00 00       	mov    $0x0,%eax
f012f55c:	eb 4d                	jmp    f012f5ab <str2lower+0x66>
	}
	char *ref=dst;
f012f55e:	8b 45 08             	mov    0x8(%ebp),%eax
f012f561:	89 45 fc             	mov    %eax,-0x4(%ebp)
		while(*src!='\0'){
f012f564:	eb 33                	jmp    f012f599 <str2lower+0x54>
			if(*src>=65&&*src<=90){
f012f566:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f569:	8a 00                	mov    (%eax),%al
f012f56b:	3c 40                	cmp    $0x40,%al
f012f56d:	7e 1a                	jle    f012f589 <str2lower+0x44>
f012f56f:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f572:	8a 00                	mov    (%eax),%al
f012f574:	3c 5a                	cmp    $0x5a,%al
f012f576:	7f 11                	jg     f012f589 <str2lower+0x44>
				*dst=*src+32;
f012f578:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f57b:	8a 00                	mov    (%eax),%al
f012f57d:	83 c0 20             	add    $0x20,%eax
f012f580:	88 c2                	mov    %al,%dl
f012f582:	8b 45 08             	mov    0x8(%ebp),%eax
f012f585:	88 10                	mov    %dl,(%eax)
f012f587:	eb 0a                	jmp    f012f593 <str2lower+0x4e>
			}
			else{
				*dst=*src;
f012f589:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f58c:	8a 10                	mov    (%eax),%dl
f012f58e:	8b 45 08             	mov    0x8(%ebp),%eax
f012f591:	88 10                	mov    %dl,(%eax)
			}
			src++;
f012f593:	ff 45 0c             	incl   0xc(%ebp)
			dst++;
f012f596:	ff 45 08             	incl   0x8(%ebp)
	//panic("process_command is not implemented yet");
	if(src==NULL||dst==NULL){
		return NULL;
	}
	char *ref=dst;
		while(*src!='\0'){
f012f599:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f59c:	8a 00                	mov    (%eax),%al
f012f59e:	84 c0                	test   %al,%al
f012f5a0:	75 c4                	jne    f012f566 <str2lower+0x21>
				*dst=*src;
			}
			src++;
			dst++;
		}
		*dst='\0';
f012f5a2:	8b 45 08             	mov    0x8(%ebp),%eax
f012f5a5:	c6 00 00             	movb   $0x0,(%eax)
		return ref;
f012f5a8:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f012f5ab:	c9                   	leave  
f012f5ac:	c3                   	ret    

f012f5ad <ide_wait_ready>:
#define IDE_ERR		0x01

static int diskno = 0;

static int ide_wait_ready(bool check_error)
{
f012f5ad:	55                   	push   %ebp
f012f5ae:	89 e5                	mov    %esp,%ebp
f012f5b0:	83 ec 10             	sub    $0x10,%esp
	int r;

	while (((r = inb(0x1F7)) & (IDE_BSY|IDE_DRDY)) != IDE_DRDY)
f012f5b3:	90                   	nop
f012f5b4:	c7 45 f8 f7 01 00 00 	movl   $0x1f7,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f012f5bb:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012f5be:	89 c2                	mov    %eax,%edx
f012f5c0:	ec                   	in     (%dx),%al
f012f5c1:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f012f5c4:	8a 45 f7             	mov    -0x9(%ebp),%al
f012f5c7:	0f b6 c0             	movzbl %al,%eax
f012f5ca:	89 45 fc             	mov    %eax,-0x4(%ebp)
f012f5cd:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012f5d0:	25 c0 00 00 00       	and    $0xc0,%eax
f012f5d5:	83 f8 40             	cmp    $0x40,%eax
f012f5d8:	75 da                	jne    f012f5b4 <ide_wait_ready+0x7>
		/* do nothing */;


	if (check_error && (r & (IDE_DF|IDE_ERR)) != 0)
f012f5da:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f012f5de:	74 11                	je     f012f5f1 <ide_wait_ready+0x44>
f012f5e0:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012f5e3:	83 e0 21             	and    $0x21,%eax
f012f5e6:	85 c0                	test   %eax,%eax
f012f5e8:	74 07                	je     f012f5f1 <ide_wait_ready+0x44>
	{
 		LOG_STATMENT(cprintf("ERROR @ ide_wait_ready() = %x(%d)\n",r,r););
		return -1;
f012f5ea:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f012f5ef:	eb 05                	jmp    f012f5f6 <ide_wait_ready+0x49>
	}
	return 0;
f012f5f1:	b8 00 00 00 00       	mov    $0x0,%eax
}
f012f5f6:	c9                   	leave  
f012f5f7:	c3                   	ret    

f012f5f8 <ide_read>:

int	ide_read(uint32 secno, void *dst, uint32 nsecs)
{
f012f5f8:	55                   	push   %ebp
f012f5f9:	89 e5                	mov    %esp,%ebp
f012f5fb:	57                   	push   %edi
f012f5fc:	53                   	push   %ebx
f012f5fd:	83 ec 30             	sub    $0x30,%esp
	int r;

	assert(nsecs <= 256);
f012f600:	81 7d 10 00 01 00 00 	cmpl   $0x100,0x10(%ebp)
f012f607:	76 16                	jbe    f012f61f <ide_read+0x27>
f012f609:	68 63 b7 13 f0       	push   $0xf013b763
f012f60e:	68 70 b7 13 f0       	push   $0xf013b770
f012f613:	6a 25                	push   $0x25
f012f615:	68 85 b7 13 f0       	push   $0xf013b785
f012f61a:	e8 91 0b fd ff       	call   f01001b0 <_panic>

	//TODO: FUTURE NOTE: This BUSY-WAIT should be replaced by Interrupt to allow the OS to schedule another process till the device become ready [el7 :)]
	ide_wait_ready(0);
f012f61f:	83 ec 0c             	sub    $0xc,%esp
f012f622:	6a 00                	push   $0x0
f012f624:	e8 84 ff ff ff       	call   f012f5ad <ide_wait_ready>
f012f629:	83 c4 10             	add    $0x10,%esp

	outb(0x1F2, nsecs);
f012f62c:	8b 45 10             	mov    0x10(%ebp),%eax
f012f62f:	0f b6 c0             	movzbl %al,%eax
f012f632:	c7 45 f0 f2 01 00 00 	movl   $0x1f2,-0x10(%ebp)
f012f639:	88 45 d2             	mov    %al,-0x2e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f012f63c:	8a 45 d2             	mov    -0x2e(%ebp),%al
f012f63f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f012f642:	ee                   	out    %al,(%dx)
	outb(0x1F3, secno & 0xFF);
f012f643:	8b 45 08             	mov    0x8(%ebp),%eax
f012f646:	0f b6 c0             	movzbl %al,%eax
f012f649:	c7 45 ec f3 01 00 00 	movl   $0x1f3,-0x14(%ebp)
f012f650:	88 45 d3             	mov    %al,-0x2d(%ebp)
f012f653:	8a 45 d3             	mov    -0x2d(%ebp),%al
f012f656:	8b 55 ec             	mov    -0x14(%ebp),%edx
f012f659:	ee                   	out    %al,(%dx)
	outb(0x1F4, (secno >> 8) & 0xFF);
f012f65a:	8b 45 08             	mov    0x8(%ebp),%eax
f012f65d:	c1 e8 08             	shr    $0x8,%eax
f012f660:	0f b6 c0             	movzbl %al,%eax
f012f663:	c7 45 e8 f4 01 00 00 	movl   $0x1f4,-0x18(%ebp)
f012f66a:	88 45 d4             	mov    %al,-0x2c(%ebp)
f012f66d:	8a 45 d4             	mov    -0x2c(%ebp),%al
f012f670:	8b 55 e8             	mov    -0x18(%ebp),%edx
f012f673:	ee                   	out    %al,(%dx)
	outb(0x1F5, (secno >> 16) & 0xFF);
f012f674:	8b 45 08             	mov    0x8(%ebp),%eax
f012f677:	c1 e8 10             	shr    $0x10,%eax
f012f67a:	0f b6 c0             	movzbl %al,%eax
f012f67d:	c7 45 e4 f5 01 00 00 	movl   $0x1f5,-0x1c(%ebp)
f012f684:	88 45 d5             	mov    %al,-0x2b(%ebp)
f012f687:	8a 45 d5             	mov    -0x2b(%ebp),%al
f012f68a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f012f68d:	ee                   	out    %al,(%dx)
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
f012f68e:	a1 2c 3a 25 f0       	mov    0xf0253a2c,%eax
f012f693:	83 e0 01             	and    $0x1,%eax
f012f696:	c1 e0 04             	shl    $0x4,%eax
f012f699:	88 c2                	mov    %al,%dl
f012f69b:	8b 45 08             	mov    0x8(%ebp),%eax
f012f69e:	c1 e8 18             	shr    $0x18,%eax
f012f6a1:	83 e0 0f             	and    $0xf,%eax
f012f6a4:	09 d0                	or     %edx,%eax
f012f6a6:	83 c8 e0             	or     $0xffffffe0,%eax
f012f6a9:	0f b6 c0             	movzbl %al,%eax
f012f6ac:	c7 45 e0 f6 01 00 00 	movl   $0x1f6,-0x20(%ebp)
f012f6b3:	88 45 d6             	mov    %al,-0x2a(%ebp)
f012f6b6:	8a 45 d6             	mov    -0x2a(%ebp),%al
f012f6b9:	8b 55 e0             	mov    -0x20(%ebp),%edx
f012f6bc:	ee                   	out    %al,(%dx)
f012f6bd:	c7 45 d8 f7 01 00 00 	movl   $0x1f7,-0x28(%ebp)
f012f6c4:	c6 45 d7 20          	movb   $0x20,-0x29(%ebp)
f012f6c8:	8a 45 d7             	mov    -0x29(%ebp),%al
f012f6cb:	8b 55 d8             	mov    -0x28(%ebp),%edx
f012f6ce:	ee                   	out    %al,(%dx)
	outb(0x1F7, 0x20);	// CMD 0x20 means read sector

	for (; nsecs > 0; nsecs--, dst += SECTSIZE) {
f012f6cf:	eb 55                	jmp    f012f726 <ide_read+0x12e>
		if ((r = ide_wait_ready(1)) < 0)
f012f6d1:	83 ec 0c             	sub    $0xc,%esp
f012f6d4:	6a 01                	push   $0x1
f012f6d6:	e8 d2 fe ff ff       	call   f012f5ad <ide_wait_ready>
f012f6db:	83 c4 10             	add    $0x10,%esp
f012f6de:	89 45 dc             	mov    %eax,-0x24(%ebp)
f012f6e1:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f012f6e5:	79 05                	jns    f012f6ec <ide_read+0xf4>
			return r;
f012f6e7:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012f6ea:	eb 45                	jmp    f012f731 <ide_read+0x139>
f012f6ec:	c7 45 f4 f0 01 00 00 	movl   $0x1f0,-0xc(%ebp)
f012f6f3:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f6f6:	89 45 cc             	mov    %eax,-0x34(%ebp)
f012f6f9:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
}

static __inline void
insl(int port, void *addr, int cnt)
{
	__asm __volatile("cld\n\trepne\n\tinsl"			:
f012f700:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012f703:	8b 4d cc             	mov    -0x34(%ebp),%ecx
f012f706:	8b 45 c8             	mov    -0x38(%ebp),%eax
f012f709:	89 cb                	mov    %ecx,%ebx
f012f70b:	89 df                	mov    %ebx,%edi
f012f70d:	89 c1                	mov    %eax,%ecx
f012f70f:	fc                   	cld    
f012f710:	f2 6d                	repnz insl (%dx),%es:(%edi)
f012f712:	89 c8                	mov    %ecx,%eax
f012f714:	89 fb                	mov    %edi,%ebx
f012f716:	89 5d cc             	mov    %ebx,-0x34(%ebp)
f012f719:	89 45 c8             	mov    %eax,-0x38(%ebp)
	outb(0x1F4, (secno >> 8) & 0xFF);
	outb(0x1F5, (secno >> 16) & 0xFF);
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
	outb(0x1F7, 0x20);	// CMD 0x20 means read sector

	for (; nsecs > 0; nsecs--, dst += SECTSIZE) {
f012f71c:	ff 4d 10             	decl   0x10(%ebp)
f012f71f:	81 45 0c 00 02 00 00 	addl   $0x200,0xc(%ebp)
f012f726:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f012f72a:	75 a5                	jne    f012f6d1 <ide_read+0xd9>
		if ((r = ide_wait_ready(1)) < 0)
			return r;
		insl(0x1F0, dst, SECTSIZE/4);
	}

	return 0;
f012f72c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f012f731:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012f734:	5b                   	pop    %ebx
f012f735:	5f                   	pop    %edi
f012f736:	5d                   	pop    %ebp
f012f737:	c3                   	ret    

f012f738 <ide_write>:

int ide_write(uint32 secno, const void *src, uint32 nsecs)
{
f012f738:	55                   	push   %ebp
f012f739:	89 e5                	mov    %esp,%ebp
f012f73b:	56                   	push   %esi
f012f73c:	53                   	push   %ebx
f012f73d:	83 ec 30             	sub    $0x30,%esp
	int r;

	//LOG_STATMENT(cprintf("1 ==> nsecs = %d\n",nsecs);)
	assert(nsecs <= 256);
f012f740:	81 7d 10 00 01 00 00 	cmpl   $0x100,0x10(%ebp)
f012f747:	76 16                	jbe    f012f75f <ide_write+0x27>
f012f749:	68 63 b7 13 f0       	push   $0xf013b763
f012f74e:	68 70 b7 13 f0       	push   $0xf013b770
f012f753:	6a 3f                	push   $0x3f
f012f755:	68 85 b7 13 f0       	push   $0xf013b785
f012f75a:	e8 51 0a fd ff       	call   f01001b0 <_panic>

	//LOG_STATMENT(cprintf("2\n");)
	ide_wait_ready(0);
f012f75f:	83 ec 0c             	sub    $0xc,%esp
f012f762:	6a 00                	push   $0x0
f012f764:	e8 44 fe ff ff       	call   f012f5ad <ide_wait_ready>
f012f769:	83 c4 10             	add    $0x10,%esp

	//LOG_STATMENT(cprintf("3 ==> nsecs = %d\n",nsecs);)
	outb(0x1F2, nsecs);
f012f76c:	8b 45 10             	mov    0x10(%ebp),%eax
f012f76f:	0f b6 c0             	movzbl %al,%eax
f012f772:	c7 45 f0 f2 01 00 00 	movl   $0x1f2,-0x10(%ebp)
f012f779:	88 45 d2             	mov    %al,-0x2e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f012f77c:	8a 45 d2             	mov    -0x2e(%ebp),%al
f012f77f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f012f782:	ee                   	out    %al,(%dx)
	outb(0x1F3, secno & 0xFF);
f012f783:	8b 45 08             	mov    0x8(%ebp),%eax
f012f786:	0f b6 c0             	movzbl %al,%eax
f012f789:	c7 45 ec f3 01 00 00 	movl   $0x1f3,-0x14(%ebp)
f012f790:	88 45 d3             	mov    %al,-0x2d(%ebp)
f012f793:	8a 45 d3             	mov    -0x2d(%ebp),%al
f012f796:	8b 55 ec             	mov    -0x14(%ebp),%edx
f012f799:	ee                   	out    %al,(%dx)
	outb(0x1F4, (secno >> 8) & 0xFF);
f012f79a:	8b 45 08             	mov    0x8(%ebp),%eax
f012f79d:	c1 e8 08             	shr    $0x8,%eax
f012f7a0:	0f b6 c0             	movzbl %al,%eax
f012f7a3:	c7 45 e8 f4 01 00 00 	movl   $0x1f4,-0x18(%ebp)
f012f7aa:	88 45 d4             	mov    %al,-0x2c(%ebp)
f012f7ad:	8a 45 d4             	mov    -0x2c(%ebp),%al
f012f7b0:	8b 55 e8             	mov    -0x18(%ebp),%edx
f012f7b3:	ee                   	out    %al,(%dx)
	outb(0x1F5, (secno >> 16) & 0xFF);
f012f7b4:	8b 45 08             	mov    0x8(%ebp),%eax
f012f7b7:	c1 e8 10             	shr    $0x10,%eax
f012f7ba:	0f b6 c0             	movzbl %al,%eax
f012f7bd:	c7 45 e4 f5 01 00 00 	movl   $0x1f5,-0x1c(%ebp)
f012f7c4:	88 45 d5             	mov    %al,-0x2b(%ebp)
f012f7c7:	8a 45 d5             	mov    -0x2b(%ebp),%al
f012f7ca:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f012f7cd:	ee                   	out    %al,(%dx)
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
f012f7ce:	a1 2c 3a 25 f0       	mov    0xf0253a2c,%eax
f012f7d3:	83 e0 01             	and    $0x1,%eax
f012f7d6:	c1 e0 04             	shl    $0x4,%eax
f012f7d9:	88 c2                	mov    %al,%dl
f012f7db:	8b 45 08             	mov    0x8(%ebp),%eax
f012f7de:	c1 e8 18             	shr    $0x18,%eax
f012f7e1:	83 e0 0f             	and    $0xf,%eax
f012f7e4:	09 d0                	or     %edx,%eax
f012f7e6:	83 c8 e0             	or     $0xffffffe0,%eax
f012f7e9:	0f b6 c0             	movzbl %al,%eax
f012f7ec:	c7 45 e0 f6 01 00 00 	movl   $0x1f6,-0x20(%ebp)
f012f7f3:	88 45 d6             	mov    %al,-0x2a(%ebp)
f012f7f6:	8a 45 d6             	mov    -0x2a(%ebp),%al
f012f7f9:	8b 55 e0             	mov    -0x20(%ebp),%edx
f012f7fc:	ee                   	out    %al,(%dx)
f012f7fd:	c7 45 d8 f7 01 00 00 	movl   $0x1f7,-0x28(%ebp)
f012f804:	c6 45 d7 30          	movb   $0x30,-0x29(%ebp)
f012f808:	8a 45 d7             	mov    -0x29(%ebp),%al
f012f80b:	8b 55 d8             	mov    -0x28(%ebp),%edx
f012f80e:	ee                   	out    %al,(%dx)
	outb(0x1F7, 0x30);	// CMD 0x30 means write sector


	for (; nsecs > 0; nsecs--, src += SECTSIZE) {
f012f80f:	eb 55                	jmp    f012f866 <ide_write+0x12e>
		if ((r = ide_wait_ready(1)) < 0)
f012f811:	83 ec 0c             	sub    $0xc,%esp
f012f814:	6a 01                	push   $0x1
f012f816:	e8 92 fd ff ff       	call   f012f5ad <ide_wait_ready>
f012f81b:	83 c4 10             	add    $0x10,%esp
f012f81e:	89 45 dc             	mov    %eax,-0x24(%ebp)
f012f821:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f012f825:	79 05                	jns    f012f82c <ide_write+0xf4>
		{
			LOG_STATMENT(cprintf("FAILURE to write %d sectors to disk\n",nsecs););
			return r;
f012f827:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012f82a:	eb 45                	jmp    f012f871 <ide_write+0x139>
f012f82c:	c7 45 f4 f0 01 00 00 	movl   $0x1f0,-0xc(%ebp)
f012f833:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f836:	89 45 cc             	mov    %eax,-0x34(%ebp)
f012f839:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
}

static __inline void
outsl(int port, const void *addr, int cnt)
{
	__asm __volatile("cld\n\trepne\n\toutsl"		:
f012f840:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012f843:	8b 4d cc             	mov    -0x34(%ebp),%ecx
f012f846:	8b 45 c8             	mov    -0x38(%ebp),%eax
f012f849:	89 cb                	mov    %ecx,%ebx
f012f84b:	89 de                	mov    %ebx,%esi
f012f84d:	89 c1                	mov    %eax,%ecx
f012f84f:	fc                   	cld    
f012f850:	f2 6f                	repnz outsl %ds:(%esi),(%dx)
f012f852:	89 c8                	mov    %ecx,%eax
f012f854:	89 f3                	mov    %esi,%ebx
f012f856:	89 5d cc             	mov    %ebx,-0x34(%ebp)
f012f859:	89 45 c8             	mov    %eax,-0x38(%ebp)
	outb(0x1F5, (secno >> 16) & 0xFF);
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
	outb(0x1F7, 0x30);	// CMD 0x30 means write sector


	for (; nsecs > 0; nsecs--, src += SECTSIZE) {
f012f85c:	ff 4d 10             	decl   0x10(%ebp)
f012f85f:	81 45 0c 00 02 00 00 	addl   $0x200,0xc(%ebp)
f012f866:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f012f86a:	75 a5                	jne    f012f811 <ide_write+0xd9>
		}
	}
	//LOG_STATMENT(cprintf("5\n");)
	//cprintf("returning from ide_write \n");

	return 0;
f012f86c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f012f871:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012f874:	5b                   	pop    %ebx
f012f875:	5e                   	pop    %esi
f012f876:	5d                   	pop    %ebp
f012f877:	c3                   	ret    

f012f878 <get_block_size>:
//==================================================================================//

//=====================================================
// 1) GET BLOCK SIZE (including size of its meta data):
//=====================================================
uint32 get_block_size(void* va) {
f012f878:	55                   	push   %ebp
f012f879:	89 e5                	mov    %esp,%ebp
f012f87b:	83 ec 10             	sub    $0x10,%esp
	struct BlockMetaData *curBlkMetaData = ((struct BlockMetaData *) va - 1);
f012f87e:	8b 45 08             	mov    0x8(%ebp),%eax
f012f881:	83 e8 10             	sub    $0x10,%eax
f012f884:	89 45 fc             	mov    %eax,-0x4(%ebp)
	return curBlkMetaData->size;
f012f887:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012f88a:	8b 00                	mov    (%eax),%eax
}
f012f88c:	c9                   	leave  
f012f88d:	c3                   	ret    

f012f88e <is_free_block>:

//===========================
// 2) GET BLOCK STATUS:
//===========================
int8 is_free_block(void* va) {
f012f88e:	55                   	push   %ebp
f012f88f:	89 e5                	mov    %esp,%ebp
f012f891:	83 ec 10             	sub    $0x10,%esp
	struct BlockMetaData *curBlkMetaData = ((struct BlockMetaData *) va - 1);
f012f894:	8b 45 08             	mov    0x8(%ebp),%eax
f012f897:	83 e8 10             	sub    $0x10,%eax
f012f89a:	89 45 fc             	mov    %eax,-0x4(%ebp)
	return curBlkMetaData->is_free;
f012f89d:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012f8a0:	8a 40 04             	mov    0x4(%eax),%al
}
f012f8a3:	c9                   	leave  
f012f8a4:	c3                   	ret    

f012f8a5 <alloc_block>:

//===========================================
// 3) ALLOCATE BLOCK BASED ON GIVEN STRATEGY:
//===========================================
void *alloc_block(uint32 size, int ALLOC_STRATEGY) {
f012f8a5:	55                   	push   %ebp
f012f8a6:	89 e5                	mov    %esp,%ebp
f012f8a8:	83 ec 18             	sub    $0x18,%esp
	void *va = NULL;
f012f8ab:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	switch (ALLOC_STRATEGY) {
f012f8b2:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f8b5:	83 f8 02             	cmp    $0x2,%eax
f012f8b8:	74 2b                	je     f012f8e5 <alloc_block+0x40>
f012f8ba:	83 f8 02             	cmp    $0x2,%eax
f012f8bd:	7f 07                	jg     f012f8c6 <alloc_block+0x21>
f012f8bf:	83 f8 01             	cmp    $0x1,%eax
f012f8c2:	74 0e                	je     f012f8d2 <alloc_block+0x2d>
f012f8c4:	eb 58                	jmp    f012f91e <alloc_block+0x79>
f012f8c6:	83 f8 03             	cmp    $0x3,%eax
f012f8c9:	74 2d                	je     f012f8f8 <alloc_block+0x53>
f012f8cb:	83 f8 04             	cmp    $0x4,%eax
f012f8ce:	74 3b                	je     f012f90b <alloc_block+0x66>
f012f8d0:	eb 4c                	jmp    f012f91e <alloc_block+0x79>
	case DA_FF:
		va = alloc_block_FF(size);
f012f8d2:	83 ec 0c             	sub    $0xc,%esp
f012f8d5:	ff 75 08             	pushl  0x8(%ebp)
f012f8d8:	e8 69 01 00 00       	call   f012fa46 <alloc_block_FF>
f012f8dd:	83 c4 10             	add    $0x10,%esp
f012f8e0:	89 45 f4             	mov    %eax,-0xc(%ebp)
		break;
f012f8e3:	eb 4a                	jmp    f012f92f <alloc_block+0x8a>
	case DA_NF:
		va = alloc_block_NF(size);
f012f8e5:	83 ec 0c             	sub    $0xc,%esp
f012f8e8:	ff 75 08             	pushl  0x8(%ebp)
f012f8eb:	e8 e7 04 00 00       	call   f012fdd7 <alloc_block_NF>
f012f8f0:	83 c4 10             	add    $0x10,%esp
f012f8f3:	89 45 f4             	mov    %eax,-0xc(%ebp)
		break;
f012f8f6:	eb 37                	jmp    f012f92f <alloc_block+0x8a>
	case DA_BF:
		va = alloc_block_BF(size);
f012f8f8:	83 ec 0c             	sub    $0xc,%esp
f012f8fb:	ff 75 08             	pushl  0x8(%ebp)
f012f8fe:	e8 ee 02 00 00       	call   f012fbf1 <alloc_block_BF>
f012f903:	83 c4 10             	add    $0x10,%esp
f012f906:	89 45 f4             	mov    %eax,-0xc(%ebp)
		break;
f012f909:	eb 24                	jmp    f012f92f <alloc_block+0x8a>
	case DA_WF:
		va = alloc_block_WF(size);
f012f90b:	83 ec 0c             	sub    $0xc,%esp
f012f90e:	ff 75 08             	pushl  0x8(%ebp)
f012f911:	e8 a4 04 00 00       	call   f012fdba <alloc_block_WF>
f012f916:	83 c4 10             	add    $0x10,%esp
f012f919:	89 45 f4             	mov    %eax,-0xc(%ebp)
		break;
f012f91c:	eb 11                	jmp    f012f92f <alloc_block+0x8a>
	default:
		cprintf("Invalid allocation strategy\n");
f012f91e:	83 ec 0c             	sub    $0xc,%esp
f012f921:	68 90 b7 13 f0       	push   $0xf013b790
f012f926:	e8 06 15 fd ff       	call   f0100e31 <cprintf>
f012f92b:	83 c4 10             	add    $0x10,%esp
		break;
f012f92e:	90                   	nop
	}
	return va;
f012f92f:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f012f932:	c9                   	leave  
f012f933:	c3                   	ret    

f012f934 <print_blocks_list>:

//===========================
// 4) PRINT BLOCKS LIST:
//===========================

void print_blocks_list(struct MemBlock_LIST list) {
f012f934:	55                   	push   %ebp
f012f935:	89 e5                	mov    %esp,%ebp
f012f937:	83 ec 18             	sub    $0x18,%esp
	cprintf("=========================================\n");
f012f93a:	83 ec 0c             	sub    $0xc,%esp
f012f93d:	68 b0 b7 13 f0       	push   $0xf013b7b0
f012f942:	e8 ea 14 fd ff       	call   f0100e31 <cprintf>
f012f947:	83 c4 10             	add    $0x10,%esp
	struct BlockMetaData* blk;
	cprintf("\nDynAlloc Blocks List:\n");
f012f94a:	83 ec 0c             	sub    $0xc,%esp
f012f94d:	68 db b7 13 f0       	push   $0xf013b7db
f012f952:	e8 da 14 fd ff       	call   f0100e31 <cprintf>
f012f957:	83 c4 10             	add    $0x10,%esp
	LIST_FOREACH(blk, &list)
f012f95a:	8b 45 08             	mov    0x8(%ebp),%eax
f012f95d:	89 45 f4             	mov    %eax,-0xc(%ebp)
f012f960:	eb 26                	jmp    f012f988 <print_blocks_list+0x54>
	{
		cprintf("(size: %d, isFree: %d)\n", blk->size, blk->is_free);
f012f962:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012f965:	8a 40 04             	mov    0x4(%eax),%al
f012f968:	0f b6 d0             	movzbl %al,%edx
f012f96b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012f96e:	8b 00                	mov    (%eax),%eax
f012f970:	83 ec 04             	sub    $0x4,%esp
f012f973:	52                   	push   %edx
f012f974:	50                   	push   %eax
f012f975:	68 f3 b7 13 f0       	push   $0xf013b7f3
f012f97a:	e8 b2 14 fd ff       	call   f0100e31 <cprintf>
f012f97f:	83 c4 10             	add    $0x10,%esp

void print_blocks_list(struct MemBlock_LIST list) {
	cprintf("=========================================\n");
	struct BlockMetaData* blk;
	cprintf("\nDynAlloc Blocks List:\n");
	LIST_FOREACH(blk, &list)
f012f982:	8b 45 10             	mov    0x10(%ebp),%eax
f012f985:	89 45 f4             	mov    %eax,-0xc(%ebp)
f012f988:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f012f98c:	74 08                	je     f012f996 <print_blocks_list+0x62>
f012f98e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012f991:	8b 40 08             	mov    0x8(%eax),%eax
f012f994:	eb 05                	jmp    f012f99b <print_blocks_list+0x67>
f012f996:	b8 00 00 00 00       	mov    $0x0,%eax
f012f99b:	89 45 10             	mov    %eax,0x10(%ebp)
f012f99e:	8b 45 10             	mov    0x10(%ebp),%eax
f012f9a1:	85 c0                	test   %eax,%eax
f012f9a3:	75 bd                	jne    f012f962 <print_blocks_list+0x2e>
f012f9a5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f012f9a9:	75 b7                	jne    f012f962 <print_blocks_list+0x2e>
	{
		cprintf("(size: %d, isFree: %d)\n", blk->size, blk->is_free);
	}
	cprintf("=========================================\n");
f012f9ab:	83 ec 0c             	sub    $0xc,%esp
f012f9ae:	68 b0 b7 13 f0       	push   $0xf013b7b0
f012f9b3:	e8 79 14 fd ff       	call   f0100e31 <cprintf>
f012f9b8:	83 c4 10             	add    $0x10,%esp

}
f012f9bb:	90                   	nop
f012f9bc:	c9                   	leave  
f012f9bd:	c3                   	ret    

f012f9be <initialize_dynamic_allocator>:

//==================================
// [1] INITIALIZE DYNAMIC ALLOCATOR:
//==================================
void initialize_dynamic_allocator(uint32 daStart,
		uint32 initSizeOfAllocatedSpace) {
f012f9be:	55                   	push   %ebp
f012f9bf:	89 e5                	mov    %esp,%ebp
f012f9c1:	83 ec 18             	sub    $0x18,%esp
	//=========================================
	//DON'T CHANGE THESE LINES=================
	if (initSizeOfAllocatedSpace == 0)
f012f9c4:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f012f9c8:	74 79                	je     f012fa43 <initialize_dynamic_allocator+0x85>
	//=========================================
	//=========================================

	//TODO: [PROJECT'23.MS1 - #5] [3] DYNAMIC ALLOCATOR - initialize_dynamic_allocator()
	//panic("initialize_dynamic_allocator is not implemented yet");
	struct BlockMetaData *firstMeta = (struct BlockMetaData *) daStart;
f012f9ca:	8b 45 08             	mov    0x8(%ebp),%eax
f012f9cd:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//Heap_MetaBlock.lh_first = firstMeta;
	firstMeta->size = initSizeOfAllocatedSpace;
f012f9d0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012f9d3:	8b 55 0c             	mov    0xc(%ebp),%edx
f012f9d6:	89 10                	mov    %edx,(%eax)
	firstMeta->is_free = 1;
f012f9d8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012f9db:	c6 40 04 01          	movb   $0x1,0x4(%eax)
	LIST_INSERT_HEAD(&Heap_MetaBlock, firstMeta);
f012f9df:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f012f9e3:	75 14                	jne    f012f9f9 <initialize_dynamic_allocator+0x3b>
f012f9e5:	83 ec 04             	sub    $0x4,%esp
f012f9e8:	68 0c b8 13 f0       	push   $0xf013b80c
f012f9ed:	6a 63                	push   $0x63
f012f9ef:	68 2f b8 13 f0       	push   $0xf013b82f
f012f9f4:	e8 b7 07 fd ff       	call   f01001b0 <_panic>
f012f9f9:	8b 15 34 be 2b f0    	mov    0xf02bbe34,%edx
f012f9ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fa02:	89 50 08             	mov    %edx,0x8(%eax)
f012fa05:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fa08:	8b 40 08             	mov    0x8(%eax),%eax
f012fa0b:	85 c0                	test   %eax,%eax
f012fa0d:	74 0d                	je     f012fa1c <initialize_dynamic_allocator+0x5e>
f012fa0f:	a1 34 be 2b f0       	mov    0xf02bbe34,%eax
f012fa14:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012fa17:	89 50 0c             	mov    %edx,0xc(%eax)
f012fa1a:	eb 08                	jmp    f012fa24 <initialize_dynamic_allocator+0x66>
f012fa1c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fa1f:	a3 38 be 2b f0       	mov    %eax,0xf02bbe38
f012fa24:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fa27:	a3 34 be 2b f0       	mov    %eax,0xf02bbe34
f012fa2c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fa2f:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
f012fa36:	a1 40 be 2b f0       	mov    0xf02bbe40,%eax
f012fa3b:	40                   	inc    %eax
f012fa3c:	a3 40 be 2b f0       	mov    %eax,0xf02bbe40
f012fa41:	eb 01                	jmp    f012fa44 <initialize_dynamic_allocator+0x86>
void initialize_dynamic_allocator(uint32 daStart,
		uint32 initSizeOfAllocatedSpace) {
	//=========================================
	//DON'T CHANGE THESE LINES=================
	if (initSizeOfAllocatedSpace == 0)
		return;
f012fa43:	90                   	nop
	//Heap_MetaBlock.lh_first = firstMeta;
	firstMeta->size = initSizeOfAllocatedSpace;
	firstMeta->is_free = 1;
	LIST_INSERT_HEAD(&Heap_MetaBlock, firstMeta);

}
f012fa44:	c9                   	leave  
f012fa45:	c3                   	ret    

f012fa46 <alloc_block_FF>:

//=========================================
// [4] ALLOCATE BLOCK BY FIRST FIT:
//=========================================

void *alloc_block_FF(uint32 size) {
f012fa46:	55                   	push   %ebp
f012fa47:	89 e5                	mov    %esp,%ebp
f012fa49:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT'23.MS1 - #6] [3] DYNAMIC ALLOCATOR - alloc_block_FF()
	//panic("alloc_block_FF is not implemented yet");
	if (size == 0) {
f012fa4c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f012fa50:	75 0a                	jne    f012fa5c <alloc_block_FF+0x16>
		return NULL;
f012fa52:	b8 00 00 00 00       	mov    $0x0,%eax
f012fa57:	e9 93 01 00 00       	jmp    f012fbef <alloc_block_FF+0x1a9>
	}
	struct BlockMetaData* iterator, *temp;
	uint32 sizeToAllocate = size + sizeOfMetaData();
f012fa5c:	8b 45 08             	mov    0x8(%ebp),%eax
f012fa5f:	83 c0 10             	add    $0x10,%eax
f012fa62:	89 45 f0             	mov    %eax,-0x10(%ebp)
	LIST_FOREACH(iterator,&Heap_MetaBlock)
f012fa65:	a1 34 be 2b f0       	mov    0xf02bbe34,%eax
f012fa6a:	89 45 f4             	mov    %eax,-0xc(%ebp)
f012fa6d:	e9 16 01 00 00       	jmp    f012fb88 <alloc_block_FF+0x142>
	{
		if (!iterator->is_free) {
f012fa72:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fa75:	8a 40 04             	mov    0x4(%eax),%al
f012fa78:	84 c0                	test   %al,%al
f012fa7a:	0f 84 fc 00 00 00    	je     f012fb7c <alloc_block_FF+0x136>
			continue;
		} else if (iterator->size < sizeToAllocate) {
f012fa80:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fa83:	8b 00                	mov    (%eax),%eax
f012fa85:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012fa88:	0f 82 f1 00 00 00    	jb     f012fb7f <alloc_block_FF+0x139>
			continue;
		}
		if (iterator->is_free && iterator->size >= sizeToAllocate) {
f012fa8e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fa91:	8a 40 04             	mov    0x4(%eax),%al
f012fa94:	84 c0                	test   %al,%al
f012fa96:	0f 84 e4 00 00 00    	je     f012fb80 <alloc_block_FF+0x13a>
f012fa9c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fa9f:	8b 00                	mov    (%eax),%eax
f012faa1:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012faa4:	0f 82 d6 00 00 00    	jb     f012fb80 <alloc_block_FF+0x13a>
			if (iterator->size - sizeToAllocate < sizeOfMetaData()) {
f012faaa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012faad:	8b 00                	mov    (%eax),%eax
f012faaf:	2b 45 f0             	sub    -0x10(%ebp),%eax
f012fab2:	83 f8 0f             	cmp    $0xf,%eax
f012fab5:	77 12                	ja     f012fac9 <alloc_block_FF+0x83>
				iterator->is_free = 0;
f012fab7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012faba:	c6 40 04 00          	movb   $0x0,0x4(%eax)
				return (struct BlockMetaData*) ((uint32) iterator
						+ sizeOfMetaData());
f012fabe:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fac1:	83 c0 10             	add    $0x10,%eax
			continue;
		}
		if (iterator->is_free && iterator->size >= sizeToAllocate) {
			if (iterator->size - sizeToAllocate < sizeOfMetaData()) {
				iterator->is_free = 0;
				return (struct BlockMetaData*) ((uint32) iterator
f012fac4:	e9 26 01 00 00       	jmp    f012fbef <alloc_block_FF+0x1a9>
						+ sizeOfMetaData());
			} else {
				temp = iterator;
f012fac9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012facc:	89 45 e8             	mov    %eax,-0x18(%ebp)
				iterator = (struct BlockMetaData *) ((uint32) iterator
f012facf:	8b 55 f4             	mov    -0xc(%ebp),%edx
						+ sizeToAllocate);
f012fad2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012fad5:	01 d0                	add    %edx,%eax
				iterator->is_free = 0;
				return (struct BlockMetaData*) ((uint32) iterator
						+ sizeOfMetaData());
			} else {
				temp = iterator;
				iterator = (struct BlockMetaData *) ((uint32) iterator
f012fad7:	89 45 f4             	mov    %eax,-0xc(%ebp)
						+ sizeToAllocate);
				iterator->size = temp->size - (size + sizeOfMetaData());
f012fada:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012fadd:	8b 00                	mov    (%eax),%eax
f012fadf:	2b 45 08             	sub    0x8(%ebp),%eax
f012fae2:	8d 50 f0             	lea    -0x10(%eax),%edx
f012fae5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fae8:	89 10                	mov    %edx,(%eax)
				iterator->is_free = 1;
f012faea:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012faed:	c6 40 04 01          	movb   $0x1,0x4(%eax)
				LIST_INSERT_AFTER(&Heap_MetaBlock, temp, iterator);
f012faf1:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f012faf5:	74 06                	je     f012fafd <alloc_block_FF+0xb7>
f012faf7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f012fafb:	75 17                	jne    f012fb14 <alloc_block_FF+0xce>
f012fafd:	83 ec 04             	sub    $0x4,%esp
f012fb00:	68 48 b8 13 f0       	push   $0xf013b848
f012fb05:	68 85 00 00 00       	push   $0x85
f012fb0a:	68 2f b8 13 f0       	push   $0xf013b82f
f012fb0f:	e8 9c 06 fd ff       	call   f01001b0 <_panic>
f012fb14:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012fb17:	8b 50 08             	mov    0x8(%eax),%edx
f012fb1a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fb1d:	89 50 08             	mov    %edx,0x8(%eax)
f012fb20:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fb23:	8b 40 08             	mov    0x8(%eax),%eax
f012fb26:	85 c0                	test   %eax,%eax
f012fb28:	74 0c                	je     f012fb36 <alloc_block_FF+0xf0>
f012fb2a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012fb2d:	8b 40 08             	mov    0x8(%eax),%eax
f012fb30:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012fb33:	89 50 0c             	mov    %edx,0xc(%eax)
f012fb36:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012fb39:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012fb3c:	89 50 08             	mov    %edx,0x8(%eax)
f012fb3f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fb42:	8b 55 e8             	mov    -0x18(%ebp),%edx
f012fb45:	89 50 0c             	mov    %edx,0xc(%eax)
f012fb48:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fb4b:	8b 40 08             	mov    0x8(%eax),%eax
f012fb4e:	85 c0                	test   %eax,%eax
f012fb50:	75 08                	jne    f012fb5a <alloc_block_FF+0x114>
f012fb52:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fb55:	a3 38 be 2b f0       	mov    %eax,0xf02bbe38
f012fb5a:	a1 40 be 2b f0       	mov    0xf02bbe40,%eax
f012fb5f:	40                   	inc    %eax
f012fb60:	a3 40 be 2b f0       	mov    %eax,0xf02bbe40
				temp->is_free = 0;
f012fb65:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012fb68:	c6 40 04 00          	movb   $0x0,0x4(%eax)
				temp->size = sizeToAllocate;
f012fb6c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012fb6f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f012fb72:	89 10                	mov    %edx,(%eax)
				return (struct BlockMetaData *) ((uint32) temp
						+ sizeOfMetaData());
f012fb74:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012fb77:	83 c0 10             	add    $0x10,%eax
				iterator->size = temp->size - (size + sizeOfMetaData());
				iterator->is_free = 1;
				LIST_INSERT_AFTER(&Heap_MetaBlock, temp, iterator);
				temp->is_free = 0;
				temp->size = sizeToAllocate;
				return (struct BlockMetaData *) ((uint32) temp
f012fb7a:	eb 73                	jmp    f012fbef <alloc_block_FF+0x1a9>
	struct BlockMetaData* iterator, *temp;
	uint32 sizeToAllocate = size + sizeOfMetaData();
	LIST_FOREACH(iterator,&Heap_MetaBlock)
	{
		if (!iterator->is_free) {
			continue;
f012fb7c:	90                   	nop
f012fb7d:	eb 01                	jmp    f012fb80 <alloc_block_FF+0x13a>
		} else if (iterator->size < sizeToAllocate) {
			continue;
f012fb7f:	90                   	nop
	if (size == 0) {
		return NULL;
	}
	struct BlockMetaData* iterator, *temp;
	uint32 sizeToAllocate = size + sizeOfMetaData();
	LIST_FOREACH(iterator,&Heap_MetaBlock)
f012fb80:	a1 3c be 2b f0       	mov    0xf02bbe3c,%eax
f012fb85:	89 45 f4             	mov    %eax,-0xc(%ebp)
f012fb88:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f012fb8c:	74 08                	je     f012fb96 <alloc_block_FF+0x150>
f012fb8e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fb91:	8b 40 08             	mov    0x8(%eax),%eax
f012fb94:	eb 05                	jmp    f012fb9b <alloc_block_FF+0x155>
f012fb96:	b8 00 00 00 00       	mov    $0x0,%eax
f012fb9b:	a3 3c be 2b f0       	mov    %eax,0xf02bbe3c
f012fba0:	a1 3c be 2b f0       	mov    0xf02bbe3c,%eax
f012fba5:	85 c0                	test   %eax,%eax
f012fba7:	0f 85 c5 fe ff ff    	jne    f012fa72 <alloc_block_FF+0x2c>
f012fbad:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f012fbb1:	0f 85 bb fe ff ff    	jne    f012fa72 <alloc_block_FF+0x2c>
				return (struct BlockMetaData *) ((uint32) temp
						+ sizeOfMetaData());
			}
		}
	}
	if (sbrk(sizeToAllocate) == (void*) -1) {
f012fbb7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012fbba:	83 ec 0c             	sub    $0xc,%esp
f012fbbd:	50                   	push   %eax
f012fbbe:	e8 92 83 fd ff       	call   f0107f55 <sbrk>
f012fbc3:	83 c4 10             	add    $0x10,%esp
f012fbc6:	83 f8 ff             	cmp    $0xffffffff,%eax
f012fbc9:	75 07                	jne    f012fbd2 <alloc_block_FF+0x18c>
		return NULL;
f012fbcb:	b8 00 00 00 00       	mov    $0x0,%eax
f012fbd0:	eb 1d                	jmp    f012fbef <alloc_block_FF+0x1a9>
	}
	struct BlockMetaData* extendingBlock;
	extendingBlock = (struct BlockMetaData*) ((uint32) Heap_MetaBlock.lh_last);
f012fbd2:	a1 38 be 2b f0       	mov    0xf02bbe38,%eax
f012fbd7:	89 45 ec             	mov    %eax,-0x14(%ebp)
	extendingBlock->is_free = 0;
f012fbda:	8b 45 ec             	mov    -0x14(%ebp),%eax
f012fbdd:	c6 40 04 00          	movb   $0x0,0x4(%eax)
	extendingBlock->size = sizeToAllocate;
f012fbe1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f012fbe4:	8b 55 f0             	mov    -0x10(%ebp),%edx
f012fbe7:	89 10                	mov    %edx,(%eax)
	return (struct BlockMetaData*) ((uint32) extendingBlock + sizeOfMetaData());
f012fbe9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f012fbec:	83 c0 10             	add    $0x10,%eax

}
f012fbef:	c9                   	leave  
f012fbf0:	c3                   	ret    

f012fbf1 <alloc_block_BF>:

//=========================================
// [5] ALLOCATE BLOCK BY BEST FIT:
//=========================================
void *alloc_block_BF(uint32 size) {
f012fbf1:	55                   	push   %ebp
f012fbf2:	89 e5                	mov    %esp,%ebp
f012fbf4:	83 ec 28             	sub    $0x28,%esp
	//TODO: [PROJECT'23.MS1 - BONUS] [3] DYNAMIC ALLOCATOR - alloc_block_BF()
	//panic("alloc_block_BF is not implemented yet");
	if (size == 0) {
f012fbf7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f012fbfb:	75 0a                	jne    f012fc07 <alloc_block_BF+0x16>
		return NULL;
f012fbfd:	b8 00 00 00 00       	mov    $0x0,%eax
f012fc02:	e9 b1 01 00 00       	jmp    f012fdb8 <alloc_block_BF+0x1c7>
	}
	struct BlockMetaData* iterator, *temp, *allocate=NULL;
f012fc07:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	uint32 diff = -1;
f012fc0e:	c7 45 ec ff ff ff ff 	movl   $0xffffffff,-0x14(%ebp)
	uint32 sizeToAllocate = size + sizeOfMetaData();
f012fc15:	8b 45 08             	mov    0x8(%ebp),%eax
f012fc18:	83 c0 10             	add    $0x10,%eax
f012fc1b:	89 45 e8             	mov    %eax,-0x18(%ebp)
	LIST_FOREACH(iterator,&Heap_MetaBlock)
f012fc1e:	a1 34 be 2b f0       	mov    0xf02bbe34,%eax
f012fc23:	89 45 f4             	mov    %eax,-0xc(%ebp)
f012fc26:	eb 4d                	jmp    f012fc75 <alloc_block_BF+0x84>
	{

		if (!iterator->is_free)
f012fc28:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fc2b:	8a 40 04             	mov    0x4(%eax),%al
f012fc2e:	84 c0                	test   %al,%al
f012fc30:	74 37                	je     f012fc69 <alloc_block_BF+0x78>
		{
			continue;
		} else if (iterator->size < sizeToAllocate)
f012fc32:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fc35:	8b 00                	mov    (%eax),%eax
f012fc37:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f012fc3a:	72 30                	jb     f012fc6c <alloc_block_BF+0x7b>
		{
			continue;
		}
		if(allocate==NULL)
f012fc3c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012fc40:	75 06                	jne    f012fc48 <alloc_block_BF+0x57>
		 {
			allocate=iterator;
f012fc42:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fc45:	89 45 f0             	mov    %eax,-0x10(%ebp)
		 }
		uint32 newdiff = iterator->size - sizeToAllocate;
f012fc48:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fc4b:	8b 00                	mov    (%eax),%eax
f012fc4d:	2b 45 e8             	sub    -0x18(%ebp),%eax
f012fc50:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		if (diff > newdiff)
f012fc53:	8b 45 ec             	mov    -0x14(%ebp),%eax
f012fc56:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f012fc59:	76 12                	jbe    f012fc6d <alloc_block_BF+0x7c>
		{
			diff = newdiff;
f012fc5b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f012fc5e:	89 45 ec             	mov    %eax,-0x14(%ebp)
			allocate = iterator;
f012fc61:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fc64:	89 45 f0             	mov    %eax,-0x10(%ebp)
f012fc67:	eb 04                	jmp    f012fc6d <alloc_block_BF+0x7c>
	LIST_FOREACH(iterator,&Heap_MetaBlock)
	{

		if (!iterator->is_free)
		{
			continue;
f012fc69:	90                   	nop
f012fc6a:	eb 01                	jmp    f012fc6d <alloc_block_BF+0x7c>
		} else if (iterator->size < sizeToAllocate)
		{
			continue;
f012fc6c:	90                   	nop
		return NULL;
	}
	struct BlockMetaData* iterator, *temp, *allocate=NULL;
	uint32 diff = -1;
	uint32 sizeToAllocate = size + sizeOfMetaData();
	LIST_FOREACH(iterator,&Heap_MetaBlock)
f012fc6d:	a1 3c be 2b f0       	mov    0xf02bbe3c,%eax
f012fc72:	89 45 f4             	mov    %eax,-0xc(%ebp)
f012fc75:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f012fc79:	74 08                	je     f012fc83 <alloc_block_BF+0x92>
f012fc7b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fc7e:	8b 40 08             	mov    0x8(%eax),%eax
f012fc81:	eb 05                	jmp    f012fc88 <alloc_block_BF+0x97>
f012fc83:	b8 00 00 00 00       	mov    $0x0,%eax
f012fc88:	a3 3c be 2b f0       	mov    %eax,0xf02bbe3c
f012fc8d:	a1 3c be 2b f0       	mov    0xf02bbe3c,%eax
f012fc92:	85 c0                	test   %eax,%eax
f012fc94:	75 92                	jne    f012fc28 <alloc_block_BF+0x37>
f012fc96:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f012fc9a:	75 8c                	jne    f012fc28 <alloc_block_BF+0x37>
		{
			diff = newdiff;
			allocate = iterator;
		}
	}
	if(allocate!=NULL)
f012fc9c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012fca0:	0f 84 da 00 00 00    	je     f012fd80 <alloc_block_BF+0x18f>
	{
		if (allocate->size - sizeToAllocate < sizeOfMetaData()) {
f012fca6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012fca9:	8b 00                	mov    (%eax),%eax
f012fcab:	2b 45 e8             	sub    -0x18(%ebp),%eax
f012fcae:	83 f8 0f             	cmp    $0xf,%eax
f012fcb1:	77 1a                	ja     f012fccd <alloc_block_BF+0xdc>

				allocate->is_free = 0;
f012fcb3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012fcb6:	c6 40 04 00          	movb   $0x0,0x4(%eax)
				allocate->size = sizeToAllocate;
f012fcba:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012fcbd:	8b 55 e8             	mov    -0x18(%ebp),%edx
f012fcc0:	89 10                	mov    %edx,(%eax)
				return (struct BlockMetaData*) ((uint32) allocate + sizeOfMetaData());
f012fcc2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012fcc5:	83 c0 10             	add    $0x10,%eax
f012fcc8:	e9 eb 00 00 00       	jmp    f012fdb8 <alloc_block_BF+0x1c7>
			} else {
				temp = allocate;
f012fccd:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012fcd0:	89 45 e0             	mov    %eax,-0x20(%ebp)
				allocate = (struct BlockMetaData *) ((uint32) allocate
f012fcd3:	8b 55 f0             	mov    -0x10(%ebp),%edx
						+ sizeToAllocate);
f012fcd6:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012fcd9:	01 d0                	add    %edx,%eax
				allocate->is_free = 0;
				allocate->size = sizeToAllocate;
				return (struct BlockMetaData*) ((uint32) allocate + sizeOfMetaData());
			} else {
				temp = allocate;
				allocate = (struct BlockMetaData *) ((uint32) allocate
f012fcdb:	89 45 f0             	mov    %eax,-0x10(%ebp)
						+ sizeToAllocate);
				allocate->size = temp->size - (size + sizeOfMetaData());
f012fcde:	8b 45 e0             	mov    -0x20(%ebp),%eax
f012fce1:	8b 00                	mov    (%eax),%eax
f012fce3:	2b 45 08             	sub    0x8(%ebp),%eax
f012fce6:	8d 50 f0             	lea    -0x10(%eax),%edx
f012fce9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012fcec:	89 10                	mov    %edx,(%eax)
				allocate->is_free = 1;
f012fcee:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012fcf1:	c6 40 04 01          	movb   $0x1,0x4(%eax)
				LIST_INSERT_AFTER(&Heap_MetaBlock, temp, allocate);
f012fcf5:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f012fcf9:	74 06                	je     f012fd01 <alloc_block_BF+0x110>
f012fcfb:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012fcff:	75 17                	jne    f012fd18 <alloc_block_BF+0x127>
f012fd01:	83 ec 04             	sub    $0x4,%esp
f012fd04:	68 48 b8 13 f0       	push   $0xf013b848
f012fd09:	68 c6 00 00 00       	push   $0xc6
f012fd0e:	68 2f b8 13 f0       	push   $0xf013b82f
f012fd13:	e8 98 04 fd ff       	call   f01001b0 <_panic>
f012fd18:	8b 45 e0             	mov    -0x20(%ebp),%eax
f012fd1b:	8b 50 08             	mov    0x8(%eax),%edx
f012fd1e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012fd21:	89 50 08             	mov    %edx,0x8(%eax)
f012fd24:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012fd27:	8b 40 08             	mov    0x8(%eax),%eax
f012fd2a:	85 c0                	test   %eax,%eax
f012fd2c:	74 0c                	je     f012fd3a <alloc_block_BF+0x149>
f012fd2e:	8b 45 e0             	mov    -0x20(%ebp),%eax
f012fd31:	8b 40 08             	mov    0x8(%eax),%eax
f012fd34:	8b 55 f0             	mov    -0x10(%ebp),%edx
f012fd37:	89 50 0c             	mov    %edx,0xc(%eax)
f012fd3a:	8b 45 e0             	mov    -0x20(%ebp),%eax
f012fd3d:	8b 55 f0             	mov    -0x10(%ebp),%edx
f012fd40:	89 50 08             	mov    %edx,0x8(%eax)
f012fd43:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012fd46:	8b 55 e0             	mov    -0x20(%ebp),%edx
f012fd49:	89 50 0c             	mov    %edx,0xc(%eax)
f012fd4c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012fd4f:	8b 40 08             	mov    0x8(%eax),%eax
f012fd52:	85 c0                	test   %eax,%eax
f012fd54:	75 08                	jne    f012fd5e <alloc_block_BF+0x16d>
f012fd56:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012fd59:	a3 38 be 2b f0       	mov    %eax,0xf02bbe38
f012fd5e:	a1 40 be 2b f0       	mov    0xf02bbe40,%eax
f012fd63:	40                   	inc    %eax
f012fd64:	a3 40 be 2b f0       	mov    %eax,0xf02bbe40
				temp->is_free = 0;
f012fd69:	8b 45 e0             	mov    -0x20(%ebp),%eax
f012fd6c:	c6 40 04 00          	movb   $0x0,0x4(%eax)
				temp->size = sizeToAllocate;
f012fd70:	8b 45 e0             	mov    -0x20(%ebp),%eax
f012fd73:	8b 55 e8             	mov    -0x18(%ebp),%edx
f012fd76:	89 10                	mov    %edx,(%eax)
				return (struct BlockMetaData *) ((uint32) temp + sizeOfMetaData());
f012fd78:	8b 45 e0             	mov    -0x20(%ebp),%eax
f012fd7b:	83 c0 10             	add    $0x10,%eax
f012fd7e:	eb 38                	jmp    f012fdb8 <alloc_block_BF+0x1c7>
			}
	}
	else{
	if (sbrk(sizeToAllocate) == (void*) -1) {
f012fd80:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012fd83:	83 ec 0c             	sub    $0xc,%esp
f012fd86:	50                   	push   %eax
f012fd87:	e8 c9 81 fd ff       	call   f0107f55 <sbrk>
f012fd8c:	83 c4 10             	add    $0x10,%esp
f012fd8f:	83 f8 ff             	cmp    $0xffffffff,%eax
f012fd92:	75 07                	jne    f012fd9b <alloc_block_BF+0x1aa>
		return NULL;
f012fd94:	b8 00 00 00 00       	mov    $0x0,%eax
f012fd99:	eb 1d                	jmp    f012fdb8 <alloc_block_BF+0x1c7>
	}
	struct BlockMetaData* extendingBlock;
	extendingBlock = (struct BlockMetaData*) ((uint32) Heap_MetaBlock.lh_last);
f012fd9b:	a1 38 be 2b f0       	mov    0xf02bbe38,%eax
f012fda0:	89 45 dc             	mov    %eax,-0x24(%ebp)
	extendingBlock->is_free = 0;
f012fda3:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012fda6:	c6 40 04 00          	movb   $0x0,0x4(%eax)
	extendingBlock->size = sizeToAllocate;
f012fdaa:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012fdad:	8b 55 e8             	mov    -0x18(%ebp),%edx
f012fdb0:	89 10                	mov    %edx,(%eax)
	return (struct BlockMetaData*) ((uint32) extendingBlock + sizeOfMetaData());
f012fdb2:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012fdb5:	83 c0 10             	add    $0x10,%eax
	}


}
f012fdb8:	c9                   	leave  
f012fdb9:	c3                   	ret    

f012fdba <alloc_block_WF>:

//=========================================
// [6] ALLOCATE BLOCK BY WORST FIT:
//=========================================
void *alloc_block_WF(uint32 size) {
f012fdba:	55                   	push   %ebp
f012fdbb:	89 e5                	mov    %esp,%ebp
f012fdbd:	83 ec 08             	sub    $0x8,%esp
	panic("alloc_block_WF is not implemented yet");
f012fdc0:	83 ec 04             	sub    $0x4,%esp
f012fdc3:	68 7c b8 13 f0       	push   $0xf013b87c
f012fdc8:	68 de 00 00 00       	push   $0xde
f012fdcd:	68 2f b8 13 f0       	push   $0xf013b82f
f012fdd2:	e8 d9 03 fd ff       	call   f01001b0 <_panic>

f012fdd7 <alloc_block_NF>:
}

//=========================================
// [7] ALLOCATE BLOCK BY NEXT FIT:
//=========================================
void *alloc_block_NF(uint32 size) {
f012fdd7:	55                   	push   %ebp
f012fdd8:	89 e5                	mov    %esp,%ebp
f012fdda:	83 ec 08             	sub    $0x8,%esp
	panic("alloc_block_NF is not implemented yet");
f012fddd:	83 ec 04             	sub    $0x4,%esp
f012fde0:	68 a4 b8 13 f0       	push   $0xf013b8a4
f012fde5:	68 e6 00 00 00       	push   $0xe6
f012fdea:	68 2f b8 13 f0       	push   $0xf013b82f
f012fdef:	e8 bc 03 fd ff       	call   f01001b0 <_panic>

f012fdf4 <free_block>:
}

//===================================================
// [8] FREE BLOCK WITH COALESCING:
//===================================================
void free_block(void *va) {
f012fdf4:	55                   	push   %ebp
f012fdf5:	89 e5                	mov    %esp,%ebp
f012fdf7:	83 ec 10             	sub    $0x10,%esp
	//TODO: [PROJECT'23.MS1 - #7] [3] DYNAMIC ALLOCATOR - free_block()
	//	panic("free_block is not implemented yet");
	if (va == NULL) {
f012fdfa:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f012fdfe:	0f 84 96 00 00 00    	je     f012fe9a <free_block+0xa6>
		return;
	}
	struct BlockMetaData *currBlock = ((struct BlockMetaData *) va - 1);
f012fe04:	8b 45 08             	mov    0x8(%ebp),%eax
f012fe07:	83 e8 10             	sub    $0x10,%eax
f012fe0a:	89 45 fc             	mov    %eax,-0x4(%ebp)
	struct BlockMetaData *nextBlock = currBlock->prev_next_info.le_next;
f012fe0d:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012fe10:	8b 40 08             	mov    0x8(%eax),%eax
f012fe13:	89 45 f8             	mov    %eax,-0x8(%ebp)
	struct BlockMetaData *prevBlock = currBlock->prev_next_info.le_prev;
f012fe16:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012fe19:	8b 40 0c             	mov    0xc(%eax),%eax
f012fe1c:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//address is null or block is already free
	if (currBlock->is_free || currBlock == NULL) {
f012fe1f:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012fe22:	8a 40 04             	mov    0x4(%eax),%al
f012fe25:	84 c0                	test   %al,%al
f012fe27:	75 74                	jne    f012fe9d <free_block+0xa9>
f012fe29:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f012fe2d:	74 6e                	je     f012fe9d <free_block+0xa9>
		return;
	}

	//freeing the block
	currBlock->is_free = 1;
f012fe2f:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012fe32:	c6 40 04 01          	movb   $0x1,0x4(%eax)

	//next is free
	if (nextBlock != NULL && nextBlock->is_free) {
f012fe36:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f012fe3a:	74 2b                	je     f012fe67 <free_block+0x73>
f012fe3c:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012fe3f:	8a 40 04             	mov    0x4(%eax),%al
f012fe42:	84 c0                	test   %al,%al
f012fe44:	74 21                	je     f012fe67 <free_block+0x73>
		currBlock->size += nextBlock->size;
f012fe46:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012fe49:	8b 10                	mov    (%eax),%edx
f012fe4b:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012fe4e:	8b 00                	mov    (%eax),%eax
f012fe50:	01 c2                	add    %eax,%edx
f012fe52:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012fe55:	89 10                	mov    %edx,(%eax)
		nextBlock->is_free = 0;
f012fe57:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012fe5a:	c6 40 04 00          	movb   $0x0,0x4(%eax)
		nextBlock->size = 0;
f012fe5e:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012fe61:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	}
	//prev is free or prev and next are free
	if (prevBlock != NULL && prevBlock->is_free) {
f012fe67:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f012fe6b:	74 31                	je     f012fe9e <free_block+0xaa>
f012fe6d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fe70:	8a 40 04             	mov    0x4(%eax),%al
f012fe73:	84 c0                	test   %al,%al
f012fe75:	74 27                	je     f012fe9e <free_block+0xaa>
		prevBlock->size += currBlock->size;
f012fe77:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fe7a:	8b 10                	mov    (%eax),%edx
f012fe7c:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012fe7f:	8b 00                	mov    (%eax),%eax
f012fe81:	01 c2                	add    %eax,%edx
f012fe83:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fe86:	89 10                	mov    %edx,(%eax)
		currBlock->size = 0;
f012fe88:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012fe8b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		currBlock->is_free = 0;
f012fe91:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012fe94:	c6 40 04 00          	movb   $0x0,0x4(%eax)
f012fe98:	eb 04                	jmp    f012fe9e <free_block+0xaa>
//===================================================
void free_block(void *va) {
	//TODO: [PROJECT'23.MS1 - #7] [3] DYNAMIC ALLOCATOR - free_block()
	//	panic("free_block is not implemented yet");
	if (va == NULL) {
		return;
f012fe9a:	90                   	nop
f012fe9b:	eb 01                	jmp    f012fe9e <free_block+0xaa>
	struct BlockMetaData *currBlock = ((struct BlockMetaData *) va - 1);
	struct BlockMetaData *nextBlock = currBlock->prev_next_info.le_next;
	struct BlockMetaData *prevBlock = currBlock->prev_next_info.le_prev;
	//address is null or block is already free
	if (currBlock->is_free || currBlock == NULL) {
		return;
f012fe9d:	90                   	nop
		currBlock->size = 0;
		currBlock->is_free = 0;

	}

}
f012fe9e:	c9                   	leave  
f012fe9f:	c3                   	ret    

f012fea0 <realloc_block_FF>:

//=========================================
// [4] REALLOCATE BLOCK BY FIRST FIT:
//=========================================
void *realloc_block_FF(void* va, uint32 new_size) {
f012fea0:	55                   	push   %ebp
f012fea1:	89 e5                	mov    %esp,%ebp
f012fea3:	83 ec 28             	sub    $0x28,%esp
	//TODO: [PROJECT'23.MS1 - #8] [3] DYNAMIC ALLOCATOR - realloc_block_FF()
	//panic("realloc_block_FF is not implemented yet");

	if (va == NULL && new_size != 0) {
f012fea6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f012feaa:	75 19                	jne    f012fec5 <realloc_block_FF+0x25>
f012feac:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f012feb0:	74 13                	je     f012fec5 <realloc_block_FF+0x25>
		return alloc_block_FF(new_size);
f012feb2:	83 ec 0c             	sub    $0xc,%esp
f012feb5:	ff 75 0c             	pushl  0xc(%ebp)
f012feb8:	e8 89 fb ff ff       	call   f012fa46 <alloc_block_FF>
f012febd:	83 c4 10             	add    $0x10,%esp
f012fec0:	e9 1f 02 00 00       	jmp    f01300e4 <realloc_block_FF+0x244>
	} else if (va != NULL && new_size == 0) {
f012fec5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f012fec9:	74 1e                	je     f012fee9 <realloc_block_FF+0x49>
f012fecb:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f012fecf:	75 18                	jne    f012fee9 <realloc_block_FF+0x49>
		free_block(va);
f012fed1:	83 ec 0c             	sub    $0xc,%esp
f012fed4:	ff 75 08             	pushl  0x8(%ebp)
f012fed7:	e8 18 ff ff ff       	call   f012fdf4 <free_block>
f012fedc:	83 c4 10             	add    $0x10,%esp
		return NULL;
f012fedf:	b8 00 00 00 00       	mov    $0x0,%eax
f012fee4:	e9 fb 01 00 00       	jmp    f01300e4 <realloc_block_FF+0x244>
	} else if (va == NULL && new_size == 0) {
f012fee9:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f012feed:	75 10                	jne    f012feff <realloc_block_FF+0x5f>
f012feef:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f012fef3:	75 0a                	jne    f012feff <realloc_block_FF+0x5f>
		return NULL;
f012fef5:	b8 00 00 00 00       	mov    $0x0,%eax
f012fefa:	e9 e5 01 00 00       	jmp    f01300e4 <realloc_block_FF+0x244>
	}
	uint32 sizeToAllocate = new_size + sizeOfMetaData();
f012feff:	8b 45 0c             	mov    0xc(%ebp),%eax
f012ff02:	83 c0 10             	add    $0x10,%eax
f012ff05:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct BlockMetaData *currBlock = ((struct BlockMetaData *) va - 1);
f012ff08:	8b 45 08             	mov    0x8(%ebp),%eax
f012ff0b:	83 e8 10             	sub    $0x10,%eax
f012ff0e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	struct BlockMetaData *nextBlock = currBlock->prev_next_info.le_next;
f012ff11:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012ff14:	8b 40 08             	mov    0x8(%eax),%eax
f012ff17:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if (sizeToAllocate < currBlock->size) {
f012ff1a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012ff1d:	8b 00                	mov    (%eax),%eax
f012ff1f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012ff22:	0f 86 ae 00 00 00    	jbe    f012ffd6 <realloc_block_FF+0x136>
		struct BlockMetaData *temp = currBlock;
f012ff28:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012ff2b:	89 45 e8             	mov    %eax,-0x18(%ebp)
		currBlock = (struct BlockMetaData *) ((uint32) temp + sizeToAllocate);
f012ff2e:	8b 55 e8             	mov    -0x18(%ebp),%edx
f012ff31:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012ff34:	01 d0                	add    %edx,%eax
f012ff36:	89 45 f0             	mov    %eax,-0x10(%ebp)
		currBlock->size = temp->size - sizeToAllocate;
f012ff39:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012ff3c:	8b 00                	mov    (%eax),%eax
f012ff3e:	2b 45 f4             	sub    -0xc(%ebp),%eax
f012ff41:	89 c2                	mov    %eax,%edx
f012ff43:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012ff46:	89 10                	mov    %edx,(%eax)
		currBlock->is_free = 1;
f012ff48:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012ff4b:	c6 40 04 01          	movb   $0x1,0x4(%eax)
		temp->size = sizeToAllocate;
f012ff4f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012ff52:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012ff55:	89 10                	mov    %edx,(%eax)
		LIST_INSERT_AFTER(&Heap_MetaBlock, temp, currBlock);
f012ff57:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f012ff5b:	74 06                	je     f012ff63 <realloc_block_FF+0xc3>
f012ff5d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012ff61:	75 17                	jne    f012ff7a <realloc_block_FF+0xda>
f012ff63:	83 ec 04             	sub    $0x4,%esp
f012ff66:	68 48 b8 13 f0       	push   $0xf013b848
f012ff6b:	68 26 01 00 00       	push   $0x126
f012ff70:	68 2f b8 13 f0       	push   $0xf013b82f
f012ff75:	e8 36 02 fd ff       	call   f01001b0 <_panic>
f012ff7a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012ff7d:	8b 50 08             	mov    0x8(%eax),%edx
f012ff80:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012ff83:	89 50 08             	mov    %edx,0x8(%eax)
f012ff86:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012ff89:	8b 40 08             	mov    0x8(%eax),%eax
f012ff8c:	85 c0                	test   %eax,%eax
f012ff8e:	74 0c                	je     f012ff9c <realloc_block_FF+0xfc>
f012ff90:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012ff93:	8b 40 08             	mov    0x8(%eax),%eax
f012ff96:	8b 55 f0             	mov    -0x10(%ebp),%edx
f012ff99:	89 50 0c             	mov    %edx,0xc(%eax)
f012ff9c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012ff9f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f012ffa2:	89 50 08             	mov    %edx,0x8(%eax)
f012ffa5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012ffa8:	8b 55 e8             	mov    -0x18(%ebp),%edx
f012ffab:	89 50 0c             	mov    %edx,0xc(%eax)
f012ffae:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012ffb1:	8b 40 08             	mov    0x8(%eax),%eax
f012ffb4:	85 c0                	test   %eax,%eax
f012ffb6:	75 08                	jne    f012ffc0 <realloc_block_FF+0x120>
f012ffb8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012ffbb:	a3 38 be 2b f0       	mov    %eax,0xf02bbe38
f012ffc0:	a1 40 be 2b f0       	mov    0xf02bbe40,%eax
f012ffc5:	40                   	inc    %eax
f012ffc6:	a3 40 be 2b f0       	mov    %eax,0xf02bbe40
		return (struct BlockMetaData *) ((uint32) temp + sizeOfMetaData());
f012ffcb:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012ffce:	83 c0 10             	add    $0x10,%eax
f012ffd1:	e9 0e 01 00 00       	jmp    f01300e4 <realloc_block_FF+0x244>
	} else if (sizeToAllocate > currBlock->size) {
f012ffd6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012ffd9:	8b 00                	mov    (%eax),%eax
f012ffdb:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012ffde:	0f 83 e9 00 00 00    	jae    f01300cd <realloc_block_FF+0x22d>
		if (nextBlock->is_free && nextBlock != NULL) {
f012ffe4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f012ffe7:	8a 40 04             	mov    0x4(%eax),%al
f012ffea:	84 c0                	test   %al,%al
f012ffec:	0f 84 98 00 00 00    	je     f013008a <realloc_block_FF+0x1ea>
f012fff2:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012fff6:	0f 84 8e 00 00 00    	je     f013008a <realloc_block_FF+0x1ea>
			if (nextBlock->size == sizeToAllocate - currBlock->size) {
f012fffc:	8b 45 ec             	mov    -0x14(%ebp),%eax
f012ffff:	8b 10                	mov    (%eax),%edx
f0130001:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130004:	8b 00                	mov    (%eax),%eax
f0130006:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0130009:	29 c1                	sub    %eax,%ecx
f013000b:	89 c8                	mov    %ecx,%eax
f013000d:	39 c2                	cmp    %eax,%edx
f013000f:	75 1a                	jne    f013002b <realloc_block_FF+0x18b>
				currBlock->size = sizeToAllocate;
f0130011:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130014:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0130017:	89 10                	mov    %edx,(%eax)
				nextBlock->is_free = 0;
f0130019:	8b 45 ec             	mov    -0x14(%ebp),%eax
f013001c:	c6 40 04 00          	movb   $0x0,0x4(%eax)
				nextBlock->size = 0;
f0130020:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0130023:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0130029:	eb 57                	jmp    f0130082 <realloc_block_FF+0x1e2>
			} else if (nextBlock->size - sizeOfMetaData()
f013002b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f013002e:	8b 00                	mov    (%eax),%eax
f0130030:	8d 48 f0             	lea    -0x10(%eax),%ecx
					> sizeToAllocate - currBlock->size) {
f0130033:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130036:	8b 00                	mov    (%eax),%eax
f0130038:	8b 55 f4             	mov    -0xc(%ebp),%edx
f013003b:	29 c2                	sub    %eax,%edx
f013003d:	89 d0                	mov    %edx,%eax
		if (nextBlock->is_free && nextBlock != NULL) {
			if (nextBlock->size == sizeToAllocate - currBlock->size) {
				currBlock->size = sizeToAllocate;
				nextBlock->is_free = 0;
				nextBlock->size = 0;
			} else if (nextBlock->size - sizeOfMetaData()
f013003f:	39 c1                	cmp    %eax,%ecx
f0130041:	76 3f                	jbe    f0130082 <realloc_block_FF+0x1e2>
					> sizeToAllocate - currBlock->size) {
				struct BlockMetaData *temp = nextBlock;
f0130043:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0130046:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				nextBlock = (struct BlockMetaData *) ((uint32) temp
f0130049:	8b 55 e4             	mov    -0x1c(%ebp),%edx
						+ sizeToAllocate);
f013004c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013004f:	01 d0                	add    %edx,%eax
				nextBlock->is_free = 0;
				nextBlock->size = 0;
			} else if (nextBlock->size - sizeOfMetaData()
					> sizeToAllocate - currBlock->size) {
				struct BlockMetaData *temp = nextBlock;
				nextBlock = (struct BlockMetaData *) ((uint32) temp
f0130051:	89 45 ec             	mov    %eax,-0x14(%ebp)
						+ sizeToAllocate);
				nextBlock->size = temp->size - sizeToAllocate - currBlock->size;
f0130054:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0130057:	8b 00                	mov    (%eax),%eax
f0130059:	2b 45 f4             	sub    -0xc(%ebp),%eax
f013005c:	89 c2                	mov    %eax,%edx
f013005e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130061:	8b 00                	mov    (%eax),%eax
f0130063:	29 c2                	sub    %eax,%edx
f0130065:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0130068:	89 10                	mov    %edx,(%eax)
				temp->size = 0;
f013006a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f013006d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
				temp->is_free = 0;
f0130073:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0130076:	c6 40 04 00          	movb   $0x0,0x4(%eax)
				currBlock->size = sizeToAllocate;
f013007a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013007d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0130080:	89 10                	mov    %edx,(%eax)
			}
			return (struct BlockMetaData *) ((uint32) currBlock
					+ sizeOfMetaData());
f0130082:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130085:	83 c0 10             	add    $0x10,%eax
				nextBlock->size = temp->size - sizeToAllocate - currBlock->size;
				temp->size = 0;
				temp->is_free = 0;
				currBlock->size = sizeToAllocate;
			}
			return (struct BlockMetaData *) ((uint32) currBlock
f0130088:	eb 5a                	jmp    f01300e4 <realloc_block_FF+0x244>
					+ sizeOfMetaData());
		} else if (nextBlock == NULL
f013008a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f013008e:	74 1f                	je     f01300af <realloc_block_FF+0x20f>
				|| nextBlock->size < sizeToAllocate - currBlock->size
f0130090:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0130093:	8b 10                	mov    (%eax),%edx
f0130095:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130098:	8b 00                	mov    (%eax),%eax
f013009a:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f013009d:	29 c1                	sub    %eax,%ecx
f013009f:	89 c8                	mov    %ecx,%eax
f01300a1:	39 c2                	cmp    %eax,%edx
f01300a3:	72 0a                	jb     f01300af <realloc_block_FF+0x20f>
				|| !nextBlock->is_free) {
f01300a5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01300a8:	8a 40 04             	mov    0x4(%eax),%al
f01300ab:	84 c0                	test   %al,%al
f01300ad:	75 30                	jne    f01300df <realloc_block_FF+0x23f>
			free_block(currBlock);
f01300af:	83 ec 0c             	sub    $0xc,%esp
f01300b2:	ff 75 f0             	pushl  -0x10(%ebp)
f01300b5:	e8 3a fd ff ff       	call   f012fdf4 <free_block>
f01300ba:	83 c4 10             	add    $0x10,%esp
			return alloc_block_FF(new_size);
f01300bd:	83 ec 0c             	sub    $0xc,%esp
f01300c0:	ff 75 0c             	pushl  0xc(%ebp)
f01300c3:	e8 7e f9 ff ff       	call   f012fa46 <alloc_block_FF>
f01300c8:	83 c4 10             	add    $0x10,%esp
f01300cb:	eb 17                	jmp    f01300e4 <realloc_block_FF+0x244>

		}
	} else if (sizeToAllocate == currBlock->size) {
f01300cd:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01300d0:	8b 00                	mov    (%eax),%eax
f01300d2:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01300d5:	75 08                	jne    f01300df <realloc_block_FF+0x23f>
		return (struct BlockMetaData *) ((uint32) currBlock + sizeOfMetaData());
f01300d7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01300da:	83 c0 10             	add    $0x10,%eax
f01300dd:	eb 05                	jmp    f01300e4 <realloc_block_FF+0x244>
	}
	return NULL;
f01300df:	b8 00 00 00 00       	mov    $0x0,%eax

}
f01300e4:	c9                   	leave  
f01300e5:	c3                   	ret    
f01300e6:	66 90                	xchg   %ax,%ax

f01300e8 <__udivdi3>:
f01300e8:	55                   	push   %ebp
f01300e9:	57                   	push   %edi
f01300ea:	56                   	push   %esi
f01300eb:	53                   	push   %ebx
f01300ec:	83 ec 1c             	sub    $0x1c,%esp
f01300ef:	8b 5c 24 30          	mov    0x30(%esp),%ebx
f01300f3:	8b 4c 24 34          	mov    0x34(%esp),%ecx
f01300f7:	8b 7c 24 38          	mov    0x38(%esp),%edi
f01300fb:	89 5c 24 08          	mov    %ebx,0x8(%esp)
f01300ff:	89 ca                	mov    %ecx,%edx
f0130101:	89 f8                	mov    %edi,%eax
f0130103:	8b 74 24 3c          	mov    0x3c(%esp),%esi
f0130107:	85 f6                	test   %esi,%esi
f0130109:	75 2d                	jne    f0130138 <__udivdi3+0x50>
f013010b:	39 cf                	cmp    %ecx,%edi
f013010d:	77 65                	ja     f0130174 <__udivdi3+0x8c>
f013010f:	89 fd                	mov    %edi,%ebp
f0130111:	85 ff                	test   %edi,%edi
f0130113:	75 0b                	jne    f0130120 <__udivdi3+0x38>
f0130115:	b8 01 00 00 00       	mov    $0x1,%eax
f013011a:	31 d2                	xor    %edx,%edx
f013011c:	f7 f7                	div    %edi
f013011e:	89 c5                	mov    %eax,%ebp
f0130120:	31 d2                	xor    %edx,%edx
f0130122:	89 c8                	mov    %ecx,%eax
f0130124:	f7 f5                	div    %ebp
f0130126:	89 c1                	mov    %eax,%ecx
f0130128:	89 d8                	mov    %ebx,%eax
f013012a:	f7 f5                	div    %ebp
f013012c:	89 cf                	mov    %ecx,%edi
f013012e:	89 fa                	mov    %edi,%edx
f0130130:	83 c4 1c             	add    $0x1c,%esp
f0130133:	5b                   	pop    %ebx
f0130134:	5e                   	pop    %esi
f0130135:	5f                   	pop    %edi
f0130136:	5d                   	pop    %ebp
f0130137:	c3                   	ret    
f0130138:	39 ce                	cmp    %ecx,%esi
f013013a:	77 28                	ja     f0130164 <__udivdi3+0x7c>
f013013c:	0f bd fe             	bsr    %esi,%edi
f013013f:	83 f7 1f             	xor    $0x1f,%edi
f0130142:	75 40                	jne    f0130184 <__udivdi3+0x9c>
f0130144:	39 ce                	cmp    %ecx,%esi
f0130146:	72 0a                	jb     f0130152 <__udivdi3+0x6a>
f0130148:	3b 44 24 08          	cmp    0x8(%esp),%eax
f013014c:	0f 87 9e 00 00 00    	ja     f01301f0 <__udivdi3+0x108>
f0130152:	b8 01 00 00 00       	mov    $0x1,%eax
f0130157:	89 fa                	mov    %edi,%edx
f0130159:	83 c4 1c             	add    $0x1c,%esp
f013015c:	5b                   	pop    %ebx
f013015d:	5e                   	pop    %esi
f013015e:	5f                   	pop    %edi
f013015f:	5d                   	pop    %ebp
f0130160:	c3                   	ret    
f0130161:	8d 76 00             	lea    0x0(%esi),%esi
f0130164:	31 ff                	xor    %edi,%edi
f0130166:	31 c0                	xor    %eax,%eax
f0130168:	89 fa                	mov    %edi,%edx
f013016a:	83 c4 1c             	add    $0x1c,%esp
f013016d:	5b                   	pop    %ebx
f013016e:	5e                   	pop    %esi
f013016f:	5f                   	pop    %edi
f0130170:	5d                   	pop    %ebp
f0130171:	c3                   	ret    
f0130172:	66 90                	xchg   %ax,%ax
f0130174:	89 d8                	mov    %ebx,%eax
f0130176:	f7 f7                	div    %edi
f0130178:	31 ff                	xor    %edi,%edi
f013017a:	89 fa                	mov    %edi,%edx
f013017c:	83 c4 1c             	add    $0x1c,%esp
f013017f:	5b                   	pop    %ebx
f0130180:	5e                   	pop    %esi
f0130181:	5f                   	pop    %edi
f0130182:	5d                   	pop    %ebp
f0130183:	c3                   	ret    
f0130184:	bd 20 00 00 00       	mov    $0x20,%ebp
f0130189:	89 eb                	mov    %ebp,%ebx
f013018b:	29 fb                	sub    %edi,%ebx
f013018d:	89 f9                	mov    %edi,%ecx
f013018f:	d3 e6                	shl    %cl,%esi
f0130191:	89 c5                	mov    %eax,%ebp
f0130193:	88 d9                	mov    %bl,%cl
f0130195:	d3 ed                	shr    %cl,%ebp
f0130197:	89 e9                	mov    %ebp,%ecx
f0130199:	09 f1                	or     %esi,%ecx
f013019b:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
f013019f:	89 f9                	mov    %edi,%ecx
f01301a1:	d3 e0                	shl    %cl,%eax
f01301a3:	89 c5                	mov    %eax,%ebp
f01301a5:	89 d6                	mov    %edx,%esi
f01301a7:	88 d9                	mov    %bl,%cl
f01301a9:	d3 ee                	shr    %cl,%esi
f01301ab:	89 f9                	mov    %edi,%ecx
f01301ad:	d3 e2                	shl    %cl,%edx
f01301af:	8b 44 24 08          	mov    0x8(%esp),%eax
f01301b3:	88 d9                	mov    %bl,%cl
f01301b5:	d3 e8                	shr    %cl,%eax
f01301b7:	09 c2                	or     %eax,%edx
f01301b9:	89 d0                	mov    %edx,%eax
f01301bb:	89 f2                	mov    %esi,%edx
f01301bd:	f7 74 24 0c          	divl   0xc(%esp)
f01301c1:	89 d6                	mov    %edx,%esi
f01301c3:	89 c3                	mov    %eax,%ebx
f01301c5:	f7 e5                	mul    %ebp
f01301c7:	39 d6                	cmp    %edx,%esi
f01301c9:	72 19                	jb     f01301e4 <__udivdi3+0xfc>
f01301cb:	74 0b                	je     f01301d8 <__udivdi3+0xf0>
f01301cd:	89 d8                	mov    %ebx,%eax
f01301cf:	31 ff                	xor    %edi,%edi
f01301d1:	e9 58 ff ff ff       	jmp    f013012e <__udivdi3+0x46>
f01301d6:	66 90                	xchg   %ax,%ax
f01301d8:	8b 54 24 08          	mov    0x8(%esp),%edx
f01301dc:	89 f9                	mov    %edi,%ecx
f01301de:	d3 e2                	shl    %cl,%edx
f01301e0:	39 c2                	cmp    %eax,%edx
f01301e2:	73 e9                	jae    f01301cd <__udivdi3+0xe5>
f01301e4:	8d 43 ff             	lea    -0x1(%ebx),%eax
f01301e7:	31 ff                	xor    %edi,%edi
f01301e9:	e9 40 ff ff ff       	jmp    f013012e <__udivdi3+0x46>
f01301ee:	66 90                	xchg   %ax,%ax
f01301f0:	31 c0                	xor    %eax,%eax
f01301f2:	e9 37 ff ff ff       	jmp    f013012e <__udivdi3+0x46>
f01301f7:	90                   	nop

f01301f8 <__umoddi3>:
f01301f8:	55                   	push   %ebp
f01301f9:	57                   	push   %edi
f01301fa:	56                   	push   %esi
f01301fb:	53                   	push   %ebx
f01301fc:	83 ec 1c             	sub    $0x1c,%esp
f01301ff:	8b 4c 24 30          	mov    0x30(%esp),%ecx
f0130203:	8b 74 24 34          	mov    0x34(%esp),%esi
f0130207:	8b 7c 24 38          	mov    0x38(%esp),%edi
f013020b:	8b 44 24 3c          	mov    0x3c(%esp),%eax
f013020f:	89 44 24 0c          	mov    %eax,0xc(%esp)
f0130213:	89 4c 24 08          	mov    %ecx,0x8(%esp)
f0130217:	89 f3                	mov    %esi,%ebx
f0130219:	89 fa                	mov    %edi,%edx
f013021b:	89 4c 24 04          	mov    %ecx,0x4(%esp)
f013021f:	89 34 24             	mov    %esi,(%esp)
f0130222:	85 c0                	test   %eax,%eax
f0130224:	75 1a                	jne    f0130240 <__umoddi3+0x48>
f0130226:	39 f7                	cmp    %esi,%edi
f0130228:	0f 86 a2 00 00 00    	jbe    f01302d0 <__umoddi3+0xd8>
f013022e:	89 c8                	mov    %ecx,%eax
f0130230:	89 f2                	mov    %esi,%edx
f0130232:	f7 f7                	div    %edi
f0130234:	89 d0                	mov    %edx,%eax
f0130236:	31 d2                	xor    %edx,%edx
f0130238:	83 c4 1c             	add    $0x1c,%esp
f013023b:	5b                   	pop    %ebx
f013023c:	5e                   	pop    %esi
f013023d:	5f                   	pop    %edi
f013023e:	5d                   	pop    %ebp
f013023f:	c3                   	ret    
f0130240:	39 f0                	cmp    %esi,%eax
f0130242:	0f 87 ac 00 00 00    	ja     f01302f4 <__umoddi3+0xfc>
f0130248:	0f bd e8             	bsr    %eax,%ebp
f013024b:	83 f5 1f             	xor    $0x1f,%ebp
f013024e:	0f 84 ac 00 00 00    	je     f0130300 <__umoddi3+0x108>
f0130254:	bf 20 00 00 00       	mov    $0x20,%edi
f0130259:	29 ef                	sub    %ebp,%edi
f013025b:	89 fe                	mov    %edi,%esi
f013025d:	89 7c 24 0c          	mov    %edi,0xc(%esp)
f0130261:	89 e9                	mov    %ebp,%ecx
f0130263:	d3 e0                	shl    %cl,%eax
f0130265:	89 d7                	mov    %edx,%edi
f0130267:	89 f1                	mov    %esi,%ecx
f0130269:	d3 ef                	shr    %cl,%edi
f013026b:	09 c7                	or     %eax,%edi
f013026d:	89 e9                	mov    %ebp,%ecx
f013026f:	d3 e2                	shl    %cl,%edx
f0130271:	89 14 24             	mov    %edx,(%esp)
f0130274:	89 d8                	mov    %ebx,%eax
f0130276:	d3 e0                	shl    %cl,%eax
f0130278:	89 c2                	mov    %eax,%edx
f013027a:	8b 44 24 08          	mov    0x8(%esp),%eax
f013027e:	d3 e0                	shl    %cl,%eax
f0130280:	89 44 24 04          	mov    %eax,0x4(%esp)
f0130284:	8b 44 24 08          	mov    0x8(%esp),%eax
f0130288:	89 f1                	mov    %esi,%ecx
f013028a:	d3 e8                	shr    %cl,%eax
f013028c:	09 d0                	or     %edx,%eax
f013028e:	d3 eb                	shr    %cl,%ebx
f0130290:	89 da                	mov    %ebx,%edx
f0130292:	f7 f7                	div    %edi
f0130294:	89 d3                	mov    %edx,%ebx
f0130296:	f7 24 24             	mull   (%esp)
f0130299:	89 c6                	mov    %eax,%esi
f013029b:	89 d1                	mov    %edx,%ecx
f013029d:	39 d3                	cmp    %edx,%ebx
f013029f:	0f 82 87 00 00 00    	jb     f013032c <__umoddi3+0x134>
f01302a5:	0f 84 91 00 00 00    	je     f013033c <__umoddi3+0x144>
f01302ab:	8b 54 24 04          	mov    0x4(%esp),%edx
f01302af:	29 f2                	sub    %esi,%edx
f01302b1:	19 cb                	sbb    %ecx,%ebx
f01302b3:	89 d8                	mov    %ebx,%eax
f01302b5:	8a 4c 24 0c          	mov    0xc(%esp),%cl
f01302b9:	d3 e0                	shl    %cl,%eax
f01302bb:	89 e9                	mov    %ebp,%ecx
f01302bd:	d3 ea                	shr    %cl,%edx
f01302bf:	09 d0                	or     %edx,%eax
f01302c1:	89 e9                	mov    %ebp,%ecx
f01302c3:	d3 eb                	shr    %cl,%ebx
f01302c5:	89 da                	mov    %ebx,%edx
f01302c7:	83 c4 1c             	add    $0x1c,%esp
f01302ca:	5b                   	pop    %ebx
f01302cb:	5e                   	pop    %esi
f01302cc:	5f                   	pop    %edi
f01302cd:	5d                   	pop    %ebp
f01302ce:	c3                   	ret    
f01302cf:	90                   	nop
f01302d0:	89 fd                	mov    %edi,%ebp
f01302d2:	85 ff                	test   %edi,%edi
f01302d4:	75 0b                	jne    f01302e1 <__umoddi3+0xe9>
f01302d6:	b8 01 00 00 00       	mov    $0x1,%eax
f01302db:	31 d2                	xor    %edx,%edx
f01302dd:	f7 f7                	div    %edi
f01302df:	89 c5                	mov    %eax,%ebp
f01302e1:	89 f0                	mov    %esi,%eax
f01302e3:	31 d2                	xor    %edx,%edx
f01302e5:	f7 f5                	div    %ebp
f01302e7:	89 c8                	mov    %ecx,%eax
f01302e9:	f7 f5                	div    %ebp
f01302eb:	89 d0                	mov    %edx,%eax
f01302ed:	e9 44 ff ff ff       	jmp    f0130236 <__umoddi3+0x3e>
f01302f2:	66 90                	xchg   %ax,%ax
f01302f4:	89 c8                	mov    %ecx,%eax
f01302f6:	89 f2                	mov    %esi,%edx
f01302f8:	83 c4 1c             	add    $0x1c,%esp
f01302fb:	5b                   	pop    %ebx
f01302fc:	5e                   	pop    %esi
f01302fd:	5f                   	pop    %edi
f01302fe:	5d                   	pop    %ebp
f01302ff:	c3                   	ret    
f0130300:	3b 04 24             	cmp    (%esp),%eax
f0130303:	72 06                	jb     f013030b <__umoddi3+0x113>
f0130305:	3b 7c 24 04          	cmp    0x4(%esp),%edi
f0130309:	77 0f                	ja     f013031a <__umoddi3+0x122>
f013030b:	89 f2                	mov    %esi,%edx
f013030d:	29 f9                	sub    %edi,%ecx
f013030f:	1b 54 24 0c          	sbb    0xc(%esp),%edx
f0130313:	89 14 24             	mov    %edx,(%esp)
f0130316:	89 4c 24 04          	mov    %ecx,0x4(%esp)
f013031a:	8b 44 24 04          	mov    0x4(%esp),%eax
f013031e:	8b 14 24             	mov    (%esp),%edx
f0130321:	83 c4 1c             	add    $0x1c,%esp
f0130324:	5b                   	pop    %ebx
f0130325:	5e                   	pop    %esi
f0130326:	5f                   	pop    %edi
f0130327:	5d                   	pop    %ebp
f0130328:	c3                   	ret    
f0130329:	8d 76 00             	lea    0x0(%esi),%esi
f013032c:	2b 04 24             	sub    (%esp),%eax
f013032f:	19 fa                	sbb    %edi,%edx
f0130331:	89 d1                	mov    %edx,%ecx
f0130333:	89 c6                	mov    %eax,%esi
f0130335:	e9 71 ff ff ff       	jmp    f01302ab <__umoddi3+0xb3>
f013033a:	66 90                	xchg   %ax,%ax
f013033c:	39 44 24 04          	cmp    %eax,0x4(%esp)
f0130340:	72 ea                	jb     f013032c <__umoddi3+0x134>
f0130342:	89 d9                	mov    %ebx,%ecx
f0130344:	e9 62 ff ff ff       	jmp    f01302ab <__umoddi3+0xb3>
