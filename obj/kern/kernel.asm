
obj/kern/kernel:     file format elf32-i386


Disassembly of section .text:

f0100000 <start_of_kernel-0xc>:
.long MULTIBOOT_HEADER_FLAGS
.long CHECKSUM

.globl		start_of_kernel
start_of_kernel:
	movw	$0x1234,0x472			# warm boot
f0100000:	02 b0 ad 1b 03 00    	add    0x31bad(%eax),%dh
f0100006:	00 00                	add    %al,(%eax)
f0100008:	fb                   	sti    
f0100009:	4f                   	dec    %edi
f010000a:	52                   	push   %edx
f010000b:	e4                   	.byte 0xe4

f010000c <start_of_kernel>:
f010000c:	66 c7 05 72 04 00 00 	movw   $0x1234,0x472
f0100013:	34 12 

	# Establish our own GDT in place of the boot loader's temporary GDT.
	lgdt	RELOC(mygdtdesc)		# load descriptor table
f0100015:	0f 01 15 18 f0 18 00 	lgdtl  0x18f018

	# Immediately reload all segment registers (including CS!)
	# with segment selectors from the new GDT.
	movl	$DATA_SEL, %eax			# Data segment selector
f010001c:	b8 10 00 00 00       	mov    $0x10,%eax
	movw	%ax,%ds				# -> DS: Data Segment
f0100021:	8e d8                	mov    %eax,%ds
	movw	%ax,%es				# -> ES: Extra Segment
f0100023:	8e c0                	mov    %eax,%es
	movw	%ax,%ss				# -> SS: Stack Segment
f0100025:	8e d0                	mov    %eax,%ss
	ljmp	$CODE_SEL,$relocated		# reload CS by jumping
f0100027:	ea 2e 00 10 f0 08 00 	ljmp   $0x8,$0xf010002e

f010002e <relocated>:
relocated:

	# Clear the frame pointer register (EBP)
	# so that once we get into debugging C code,
	# stack backtraces will be terminated properly.
	movl	$0x0,%ebp			# nuke frame pointer
f010002e:	bd 00 00 00 00       	mov    $0x0,%ebp

        # Leave a few words on the stack for the user trap frame
	movl	$(ptr_stack_top-SIZEOF_STRUCT_TRAPFRAME),%esp
f0100033:	bc bc ef 18 f0       	mov    $0xf018efbc,%esp

	# now to C code
	call	FOS_initialize
f0100038:	e8 22 00 00 00       	call   f010005f <FOS_initialize>

f010003d <spin>:

	# Should never get here, but in case we do, just spin.
spin:	jmp	spin
f010003d:	eb fe                	jmp    f010003d <spin>

f010003f <setKHeapPlacementStrategyFIRSTFIT>:
#define KHP_PLACE_CONTALLOC 0x0
#define KHP_PLACE_FIRSTFIT 	0x1
#define KHP_PLACE_BESTFIT 	0x2
#define KHP_PLACE_NEXTFIT 	0x3
#define KHP_PLACE_WORSTFIT 	0x4

f010003f:	55                   	push   %ebp
f0100040:	89 e5                	mov    %esp,%ebp
f0100042:	c7 05 18 ce 2b f0 01 	movl   $0x1,0xf02bce18
f0100049:	00 00 00 
f010004c:	90                   	nop
f010004d:	5d                   	pop    %ebp
f010004e:	c3                   	ret    

f010004f <setUHeapPlacementStrategyFIRSTFIT>:

//***********************************
/*2015*/ //USER HEAP STRATEGIES
uint32 _UHeapPlacementStrategy;

static inline void setUHeapPlacementStrategyFIRSTFIT(){_UHeapPlacementStrategy = UHP_PLACE_FIRSTFIT;}
f010004f:	55                   	push   %ebp
f0100050:	89 e5                	mov    %esp,%ebp
f0100052:	c7 05 ec cd 2b f0 01 	movl   $0x1,0xf02bcdec
f0100059:	00 00 00 
f010005c:	90                   	nop
f010005d:	5d                   	pop    %ebp
f010005e:	c3                   	ret    

f010005f <FOS_initialize>:
void print_welcome_message();
//=======================================

//First ever function called in FOS kernel
void FOS_initialize()
{
f010005f:	55                   	push   %ebp
f0100060:	89 e5                	mov    %esp,%ebp
f0100062:	83 ec 08             	sub    $0x8,%esp
	extern char start_of_uninitialized_data_section[], end_of_kernel[];

	// Before doing anything else,
	// clear the uninitialized global data (BSS) section of our program, from start_of_uninitialized_data_section to end_of_kernel
	// This ensures that all static/global variables start with zero value.
	memset(start_of_uninitialized_data_section, 0, end_of_kernel - start_of_uninitialized_data_section);
f0100065:	ba 6c f5 2d f0       	mov    $0xf02df56c,%edx
f010006a:	b8 06 3f 25 f0       	mov    $0xf0253f06,%eax
f010006f:	29 c2                	sub    %eax,%edx
f0100071:	89 d0                	mov    %edx,%eax
f0100073:	83 ec 04             	sub    $0x4,%esp
f0100076:	50                   	push   %eax
f0100077:	6a 00                	push   $0x0
f0100079:	68 06 3f 25 f0       	push   $0xf0253f06
f010007e:	e8 e3 f5 02 00       	call   f012f666 <memset>
f0100083:	83 c4 10             	add    $0x10,%esp

	/*2022*/
	scheduler_status = SCH_UNINITIALIZED;
f0100086:	c7 05 14 ce 2b f0 ff 	movl   $0xffffffff,0xf02bce14
f010008d:	ff ff ff 

	// Initialize the console.
	// Can't call cprintf until after we do this!
	console_initialize();
f0100090:	e8 e4 0c 00 00       	call   f0100d79 <console_initialize>

	//print welcome message
	print_welcome_message();
f0100095:	e8 9d 00 00 00       	call   f0100137 <print_welcome_message>

	// Lab 2 memory management initialization functions
	detect_memory();
f010009a:	e8 d6 6a 00 00       	call   f0106b75 <detect_memory>
	initialize_kernel_VM();
f010009f:	e8 af 66 00 00       	call   f0106753 <initialize_kernel_VM>
	initialize_paging();
f01000a4:	e8 2a 6e 00 00       	call   f0106ed3 <initialize_paging>
	//	page_check();

	// Lab 3 user environment initialization functions
	env_init();
f01000a9:	e8 8e 9e 00 00       	call   f0109f3c <env_init>
	idt_init();
f01000ae:	e8 b0 b3 00 00       	call   f010b463 <idt_init>
	//2021
	//setPageReplacmentAlgorithmNchanceCLOCK();
	//setPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX);
	//setPageReplacmentAlgorithmFIFO();
	//setPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX);
	setPageReplacmentAlgorithmFIFO();
f01000b3:	e8 bb db 00 00       	call   f010dc73 <setPageReplacmentAlgorithmFIFO>
	setUHeapPlacementStrategyFIRSTFIT();
f01000b8:	e8 92 ff ff ff       	call   f010004f <setUHeapPlacementStrategyFIRSTFIT>
	setKHeapPlacementStrategyFIRSTFIT();
f01000bd:	e8 7d ff ff ff       	call   f010003f <setKHeapPlacementStrategyFIRSTFIT>
		test_initialize_dyn_block_system(freeFrames_before, freeDiskFrames_before, freeFrames_after, freeDiskFrames_after);
	}
	MAX_SHARES = (KERNEL_SHARES_ARR_INIT_SIZE) / sizeof(struct Share);
	MAX_SEMAPHORES = (KERNEL_SEMAPHORES_ARR_INIT_SIZE) / sizeof(struct Semaphore);
#endif
	create_shares_array(MAX_SHARES);
f01000c2:	83 ec 0c             	sub    $0xc,%esp
f01000c5:	6a 64                	push   $0x64
f01000c7:	e8 d9 79 00 00       	call   f0107aa5 <create_shares_array>
f01000cc:	83 c4 10             	add    $0x10,%esp
	create_semaphores_array(MAX_SEMAPHORES);
f01000cf:	83 ec 0c             	sub    $0xc,%esp
f01000d2:	6a 64                	push   $0x64
f01000d4:	e8 84 dd 00 00       	call   f010de5d <create_semaphores_array>
f01000d9:	83 c4 10             	add    $0x10,%esp


	enableBuffering(0);
f01000dc:	83 ec 0c             	sub    $0xc,%esp
f01000df:	6a 00                	push   $0x0
f01000e1:	e8 8a dc 00 00       	call   f010dd70 <enableBuffering>
f01000e6:	83 c4 10             	add    $0x10,%esp
	//enableModifiedBuffer(1) ;
	enableModifiedBuffer(0) ;
f01000e9:	83 ec 0c             	sub    $0xc,%esp
f01000ec:	6a 00                	push   $0x0
f01000ee:	e8 65 dc 00 00       	call   f010dd58 <enableModifiedBuffer>
f01000f3:	83 c4 10             	add    $0x10,%esp
	setModifiedBufferLength(1000);
f01000f6:	83 ec 0c             	sub    $0xc,%esp
f01000f9:	68 e8 03 00 00       	push   $0x3e8
f01000fe:	e8 85 dc 00 00       	call   f010dd88 <setModifiedBufferLength>
f0100103:	83 c4 10             	add    $0x10,%esp

	// Lab 4 multitasking initialization functions
	pic_init();
f0100106:	e8 c2 64 00 00       	call   f01065cd <pic_init>
	sched_init() ;
f010010b:	e8 bf 60 00 00       	call   f01061cf <sched_init>
	//Project initializations

	// start the kernel command prompt.
	while (1==1)
	{
		cprintf("\nWelcome to the FOS kernel command prompt!\n");
f0100110:	83 ec 0c             	sub    $0xc,%esp
f0100113:	68 40 0a 13 f0       	push   $0xf0130a40
f0100118:	e8 14 0d 00 00       	call   f0100e31 <cprintf>
f010011d:	83 c4 10             	add    $0x10,%esp
		cprintf("Type 'help' for a list of commands.\n");
f0100120:	83 ec 0c             	sub    $0xc,%esp
f0100123:	68 6c 0a 13 f0       	push   $0xf0130a6c
f0100128:	e8 04 0d 00 00       	call   f0100e31 <cprintf>
f010012d:	83 c4 10             	add    $0x10,%esp
		run_command_prompt();
f0100130:	e8 1b 1a 00 00       	call   f0101b50 <run_command_prompt>
	}
f0100135:	eb d9                	jmp    f0100110 <FOS_initialize+0xb1>

f0100137 <print_welcome_message>:
}


void print_welcome_message()
{
f0100137:	55                   	push   %ebp
f0100138:	89 e5                	mov    %esp,%ebp
f010013a:	83 ec 08             	sub    $0x8,%esp
	cprintf("\n\n\n");
f010013d:	83 ec 0c             	sub    $0xc,%esp
f0100140:	68 91 0a 13 f0       	push   $0xf0130a91
f0100145:	e8 e7 0c 00 00       	call   f0100e31 <cprintf>
f010014a:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
f010014d:	83 ec 0c             	sub    $0xc,%esp
f0100150:	68 98 0a 13 f0       	push   $0xf0130a98
f0100155:	e8 d7 0c 00 00       	call   f0100e31 <cprintf>
f010015a:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                                                             !!\n");
f010015d:	83 ec 0c             	sub    $0xc,%esp
f0100160:	68 e0 0a 13 f0       	push   $0xf0130ae0
f0100165:	e8 c7 0c 00 00       	call   f0100e31 <cprintf>
f010016a:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                   !! FCIS says HELLO !!                     !!\n");
f010016d:	83 ec 0c             	sub    $0xc,%esp
f0100170:	68 28 0b 13 f0       	push   $0xf0130b28
f0100175:	e8 b7 0c 00 00       	call   f0100e31 <cprintf>
f010017a:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                                                             !!\n");
f010017d:	83 ec 0c             	sub    $0xc,%esp
f0100180:	68 e0 0a 13 f0       	push   $0xf0130ae0
f0100185:	e8 a7 0c 00 00       	call   f0100e31 <cprintf>
f010018a:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
f010018d:	83 ec 0c             	sub    $0xc,%esp
f0100190:	68 98 0a 13 f0       	push   $0xf0130a98
f0100195:	e8 97 0c 00 00       	call   f0100e31 <cprintf>
f010019a:	83 c4 10             	add    $0x10,%esp
	cprintf("\n\n\n\n");
f010019d:	83 ec 0c             	sub    $0xc,%esp
f01001a0:	68 6d 0b 13 f0       	push   $0xf0130b6d
f01001a5:	e8 87 0c 00 00       	call   f0100e31 <cprintf>
f01001aa:	83 c4 10             	add    $0x10,%esp
}
f01001ad:	90                   	nop
f01001ae:	c9                   	leave  
f01001af:	c3                   	ret    

f01001b0 <_panic>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit the curenv and schedule the next environment.
 */
void _panic(const char *file, int line, const char *fmt,...)
{
f01001b0:	55                   	push   %ebp
f01001b1:	89 e5                	mov    %esp,%ebp
f01001b3:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f01001b6:	8b 45 10             	mov    0x10(%ebp),%eax
f01001b9:	a3 20 3f 25 f0       	mov    %eax,0xf0253f20

	va_start(ap, fmt);
f01001be:	8d 45 10             	lea    0x10(%ebp),%eax
f01001c1:	83 c0 04             	add    $0x4,%eax
f01001c4:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f01001c7:	83 ec 04             	sub    $0x4,%esp
f01001ca:	ff 75 0c             	pushl  0xc(%ebp)
f01001cd:	ff 75 08             	pushl  0x8(%ebp)
f01001d0:	68 72 0b 13 f0       	push   $0xf0130b72
f01001d5:	e8 57 0c 00 00       	call   f0100e31 <cprintf>
f01001da:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f01001dd:	8b 45 10             	mov    0x10(%ebp),%eax
f01001e0:	83 ec 08             	sub    $0x8,%esp
f01001e3:	ff 75 f4             	pushl  -0xc(%ebp)
f01001e6:	50                   	push   %eax
f01001e7:	e8 1c 0c 00 00       	call   f0100e08 <vcprintf>
f01001ec:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f01001ef:	83 ec 0c             	sub    $0xc,%esp
f01001f2:	68 8b 0b 13 f0       	push   $0xf0130b8b
f01001f7:	e8 35 0c 00 00       	call   f0100e31 <cprintf>
f01001fc:	83 c4 10             	add    $0x10,%esp
	va_end(ap);

	dead:
	/* break into the fos scheduler */
	//2013: Check if the panic occur when running an environment
	if (curenv != NULL && curenv->env_status == ENV_RUNNABLE)
f01001ff:	a1 74 41 25 f0       	mov    0xf0254174,%eax
f0100204:	85 c0                	test   %eax,%eax
f0100206:	74 12                	je     f010021a <_panic+0x6a>
f0100208:	a1 74 41 25 f0       	mov    0xf0254174,%eax
f010020d:	8b 40 54             	mov    0x54(%eax),%eax
f0100210:	83 f8 02             	cmp    $0x2,%eax
f0100213:	75 05                	jne    f010021a <_panic+0x6a>
	{
		//2015
		env_exit();
f0100215:	e8 0c 9c 00 00       	call   f0109e26 <env_exit>
		//env_run_cmd_prmpt() ;
	}

	/*2022*///Check if the scheduler is successfully initialized or not
	if (scheduler_status != SCH_UNINITIALIZED)
f010021a:	a1 14 ce 2b f0       	mov    0xf02bce14,%eax
f010021f:	83 f8 ff             	cmp    $0xffffffff,%eax
f0100222:	74 1b                	je     f010023f <_panic+0x8f>
	{
		cprintf("scheduler_status=%d\n", scheduler_status);
f0100224:	a1 14 ce 2b f0       	mov    0xf02bce14,%eax
f0100229:	83 ec 08             	sub    $0x8,%esp
f010022c:	50                   	push   %eax
f010022d:	68 8d 0b 13 f0       	push   $0xf0130b8d
f0100232:	e8 fa 0b 00 00       	call   f0100e31 <cprintf>
f0100237:	83 c4 10             	add    $0x10,%esp
		//2015
		fos_scheduler();
f010023a:	e8 da 5f 00 00       	call   f0106219 <fos_scheduler>
	}
	else
	{
		curenv = NULL;
f010023f:	c7 05 74 41 25 f0 00 	movl   $0x0,0xf0254174
f0100246:	00 00 00 
		lcr3(phys_page_directory);
f0100249:	a1 70 ce 2b f0       	mov    0xf02bce70,%eax
f010024e:	89 45 f0             	mov    %eax,-0x10(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0100251:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0100254:	0f 22 d8             	mov    %eax,%cr3
		while (1)
			run_command_prompt(NULL);
f0100257:	83 ec 0c             	sub    $0xc,%esp
f010025a:	6a 00                	push   $0x0
f010025c:	e8 ef 18 00 00       	call   f0101b50 <run_command_prompt>
f0100261:	83 c4 10             	add    $0x10,%esp
f0100264:	eb f1                	jmp    f0100257 <_panic+0xa7>

f0100266 <_panic_all>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit all env's and then enters the kernel command prompt.
 */
void _panic_all(const char *file, int line, const char *fmt,...)
{
f0100266:	55                   	push   %ebp
f0100267:	89 e5                	mov    %esp,%ebp
f0100269:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f010026c:	8b 45 10             	mov    0x10(%ebp),%eax
f010026f:	a3 20 3f 25 f0       	mov    %eax,0xf0253f20

	va_start(ap, fmt);
f0100274:	8d 45 10             	lea    0x10(%ebp),%eax
f0100277:	83 c0 04             	add    $0x4,%eax
f010027a:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f010027d:	83 ec 04             	sub    $0x4,%esp
f0100280:	ff 75 0c             	pushl  0xc(%ebp)
f0100283:	ff 75 08             	pushl  0x8(%ebp)
f0100286:	68 72 0b 13 f0       	push   $0xf0130b72
f010028b:	e8 a1 0b 00 00       	call   f0100e31 <cprintf>
f0100290:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f0100293:	8b 45 10             	mov    0x10(%ebp),%eax
f0100296:	83 ec 08             	sub    $0x8,%esp
f0100299:	ff 75 f4             	pushl  -0xc(%ebp)
f010029c:	50                   	push   %eax
f010029d:	e8 66 0b 00 00       	call   f0100e08 <vcprintf>
f01002a2:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f01002a5:	83 ec 0c             	sub    $0xc,%esp
f01002a8:	68 8b 0b 13 f0       	push   $0xf0130b8b
f01002ad:	e8 7f 0b 00 00       	call   f0100e31 <cprintf>
f01002b2:	83 c4 10             	add    $0x10,%esp
	va_end(ap);

	dead:
	/* break into the fos scheduler */
	/*2022*///Check if the scheduler is successfully initialized or not
	if (scheduler_status != SCH_UNINITIALIZED)
f01002b5:	a1 14 ce 2b f0       	mov    0xf02bce14,%eax
f01002ba:	83 f8 ff             	cmp    $0xffffffff,%eax
f01002bd:	74 27                	je     f01002e6 <_panic_all+0x80>
	{
		//exit all ready env's
		sched_exit_all_ready_envs();
f01002bf:	e8 cc 5c 00 00       	call   f0105f90 <sched_exit_all_ready_envs>
		if (curenv != NULL)
f01002c4:	a1 74 41 25 f0       	mov    0xf0254174,%eax
f01002c9:	85 c0                	test   %eax,%eax
f01002cb:	74 14                	je     f01002e1 <_panic_all+0x7b>
		{
			//cprintf("exit curenv...........\n");
			sched_exit_env(curenv->env_id);
f01002cd:	a1 74 41 25 f0       	mov    0xf0254174,%eax
f01002d2:	8b 40 4c             	mov    0x4c(%eax),%eax
f01002d5:	83 ec 0c             	sub    $0xc,%esp
f01002d8:	50                   	push   %eax
f01002d9:	e8 f3 50 00 00       	call   f01053d1 <sched_exit_env>
f01002de:	83 c4 10             	add    $0x10,%esp
			//env_run_cmd_prmpt() ;
		}

		fos_scheduler();
f01002e1:	e8 33 5f 00 00       	call   f0106219 <fos_scheduler>
	}
	else
	{
		curenv = NULL;
f01002e6:	c7 05 74 41 25 f0 00 	movl   $0x0,0xf0254174
f01002ed:	00 00 00 
		lcr3(phys_page_directory);
f01002f0:	a1 70 ce 2b f0       	mov    0xf02bce70,%eax
f01002f5:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01002f8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01002fb:	0f 22 d8             	mov    %eax,%cr3
		while (1)
			run_command_prompt(NULL);
f01002fe:	83 ec 0c             	sub    $0xc,%esp
f0100301:	6a 00                	push   $0x0
f0100303:	e8 48 18 00 00       	call   f0101b50 <run_command_prompt>
f0100308:	83 c4 10             	add    $0x10,%esp
f010030b:	eb f1                	jmp    f01002fe <_panic_all+0x98>

f010030d <_panic_into_prompt>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit the curenv (if any) and break into the command prompt.
 */
void _panic_into_prompt(const char *file, int line, const char *fmt,...)
{
f010030d:	55                   	push   %ebp
f010030e:	89 e5                	mov    %esp,%ebp
f0100310:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f0100313:	8b 45 10             	mov    0x10(%ebp),%eax
f0100316:	a3 20 3f 25 f0       	mov    %eax,0xf0253f20

	va_start(ap, fmt);
f010031b:	8d 45 10             	lea    0x10(%ebp),%eax
f010031e:	83 c0 04             	add    $0x4,%eax
f0100321:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f0100324:	83 ec 04             	sub    $0x4,%esp
f0100327:	ff 75 0c             	pushl  0xc(%ebp)
f010032a:	ff 75 08             	pushl  0x8(%ebp)
f010032d:	68 72 0b 13 f0       	push   $0xf0130b72
f0100332:	e8 fa 0a 00 00       	call   f0100e31 <cprintf>
f0100337:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f010033a:	8b 45 10             	mov    0x10(%ebp),%eax
f010033d:	83 ec 08             	sub    $0x8,%esp
f0100340:	ff 75 f4             	pushl  -0xc(%ebp)
f0100343:	50                   	push   %eax
f0100344:	e8 bf 0a 00 00       	call   f0100e08 <vcprintf>
f0100349:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f010034c:	83 ec 0c             	sub    $0xc,%esp
f010034f:	68 8b 0b 13 f0       	push   $0xf0130b8b
f0100354:	e8 d8 0a 00 00       	call   f0100e31 <cprintf>
f0100359:	83 c4 10             	add    $0x10,%esp
	va_end(ap);

	dead:
	/* break into the fos scheduler */
	//2013: Check if the panic occur when running an environment
	if (curenv != NULL && curenv->env_status == ENV_RUNNABLE)
f010035c:	a1 74 41 25 f0       	mov    0xf0254174,%eax
f0100361:	85 c0                	test   %eax,%eax
f0100363:	74 28                	je     f010038d <_panic_into_prompt+0x80>
f0100365:	a1 74 41 25 f0       	mov    0xf0254174,%eax
f010036a:	8b 40 54             	mov    0x54(%eax),%eax
f010036d:	83 f8 02             	cmp    $0x2,%eax
f0100370:	75 1b                	jne    f010038d <_panic_into_prompt+0x80>
	{
		sched_insert_exit(curenv);
f0100372:	a1 74 41 25 f0       	mov    0xf0254174,%eax
f0100377:	83 ec 0c             	sub    $0xc,%esp
f010037a:	50                   	push   %eax
f010037b:	e8 cb 4e 00 00       	call   f010524b <sched_insert_exit>
f0100380:	83 c4 10             	add    $0x10,%esp
		curenv = NULL;
f0100383:	c7 05 74 41 25 f0 00 	movl   $0x0,0xf0254174
f010038a:	00 00 00 
	}

	lcr3(phys_page_directory);
f010038d:	a1 70 ce 2b f0       	mov    0xf02bce70,%eax
f0100392:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0100395:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0100398:	0f 22 d8             	mov    %eax,%cr3

	/*2022*///Check if the scheduler is successfully initialized or not
	if (scheduler_status != SCH_UNINITIALIZED)
f010039b:	a1 14 ce 2b f0       	mov    0xf02bce14,%eax
f01003a0:	83 f8 ff             	cmp    $0xffffffff,%eax
f01003a3:	74 0a                	je     f01003af <_panic_into_prompt+0xa2>
	{
		scheduler_status = SCH_STOPPED;
f01003a5:	c7 05 14 ce 2b f0 00 	movl   $0x0,0xf02bce14
f01003ac:	00 00 00 
	}
	while (1)
		run_command_prompt(NULL);
f01003af:	83 ec 0c             	sub    $0xc,%esp
f01003b2:	6a 00                	push   $0x0
f01003b4:	e8 97 17 00 00       	call   f0101b50 <run_command_prompt>
f01003b9:	83 c4 10             	add    $0x10,%esp
f01003bc:	eb f1                	jmp    f01003af <_panic_into_prompt+0xa2>

f01003be <_warn>:
}

/* like panic, but don't enters the kernel command prompt*/
void _warn(const char *file, int line, const char *fmt,...)
{
f01003be:	55                   	push   %ebp
f01003bf:	89 e5                	mov    %esp,%ebp
f01003c1:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	va_start(ap, fmt);
f01003c4:	8d 45 10             	lea    0x10(%ebp),%eax
f01003c7:	83 c0 04             	add    $0x4,%eax
f01003ca:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel warning at %s:%d: ", file, line);
f01003cd:	83 ec 04             	sub    $0x4,%esp
f01003d0:	ff 75 0c             	pushl  0xc(%ebp)
f01003d3:	ff 75 08             	pushl  0x8(%ebp)
f01003d6:	68 a2 0b 13 f0       	push   $0xf0130ba2
f01003db:	e8 51 0a 00 00       	call   f0100e31 <cprintf>
f01003e0:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f01003e3:	8b 45 10             	mov    0x10(%ebp),%eax
f01003e6:	83 ec 08             	sub    $0x8,%esp
f01003e9:	ff 75 f4             	pushl  -0xc(%ebp)
f01003ec:	50                   	push   %eax
f01003ed:	e8 16 0a 00 00       	call   f0100e08 <vcprintf>
f01003f2:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f01003f5:	83 ec 0c             	sub    $0xc,%esp
f01003f8:	68 8b 0b 13 f0       	push   $0xf0130b8b
f01003fd:	e8 2f 0a 00 00       	call   f0100e31 <cprintf>
f0100402:	83 c4 10             	add    $0x10,%esp
	va_end(ap);
}
f0100405:	90                   	nop
f0100406:	c9                   	leave  
f0100407:	c3                   	ret    

f0100408 <serial_proc_data>:

static bool serial_exists;

int
serial_proc_data(void)
{
f0100408:	55                   	push   %ebp
f0100409:	89 e5                	mov    %esp,%ebp
f010040b:	83 ec 10             	sub    $0x10,%esp
f010040e:	c7 45 f8 fd 03 00 00 	movl   $0x3fd,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100415:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0100418:	89 c2                	mov    %eax,%edx
f010041a:	ec                   	in     (%dx),%al
f010041b:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f010041e:	8a 45 f7             	mov    -0x9(%ebp),%al
	if (!(inb(COM1+COM_LSR) & COM_LSR_DATA))
f0100421:	0f b6 c0             	movzbl %al,%eax
f0100424:	83 e0 01             	and    $0x1,%eax
f0100427:	85 c0                	test   %eax,%eax
f0100429:	75 07                	jne    f0100432 <serial_proc_data+0x2a>
		return -1;
f010042b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0100430:	eb 16                	jmp    f0100448 <serial_proc_data+0x40>
f0100432:	c7 45 fc f8 03 00 00 	movl   $0x3f8,-0x4(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100439:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010043c:	89 c2                	mov    %eax,%edx
f010043e:	ec                   	in     (%dx),%al
f010043f:	88 45 f6             	mov    %al,-0xa(%ebp)
	return data;
f0100442:	8a 45 f6             	mov    -0xa(%ebp),%al
	return inb(COM1+COM_RX);
f0100445:	0f b6 c0             	movzbl %al,%eax
}
f0100448:	c9                   	leave  
f0100449:	c3                   	ret    

f010044a <serial_intr>:

void
serial_intr(void)
{
f010044a:	55                   	push   %ebp
f010044b:	89 e5                	mov    %esp,%ebp
f010044d:	83 ec 08             	sub    $0x8,%esp
	if (serial_exists)
f0100450:	a1 44 3f 25 f0       	mov    0xf0253f44,%eax
f0100455:	85 c0                	test   %eax,%eax
f0100457:	74 10                	je     f0100469 <serial_intr+0x1f>
		cons_intr(serial_proc_data);
f0100459:	83 ec 0c             	sub    $0xc,%esp
f010045c:	68 08 04 10 f0       	push   $0xf0100408
f0100461:	e8 58 07 00 00       	call   f0100bbe <cons_intr>
f0100466:	83 c4 10             	add    $0x10,%esp
}
f0100469:	90                   	nop
f010046a:	c9                   	leave  
f010046b:	c3                   	ret    

f010046c <serial_init>:

void
serial_init(void)
{
f010046c:	55                   	push   %ebp
f010046d:	89 e5                	mov    %esp,%ebp
f010046f:	83 ec 40             	sub    $0x40,%esp
f0100472:	c7 45 fc fa 03 00 00 	movl   $0x3fa,-0x4(%ebp)
f0100479:	c6 45 ce 00          	movb   $0x0,-0x32(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f010047d:	8a 45 ce             	mov    -0x32(%ebp),%al
f0100480:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0100483:	ee                   	out    %al,(%dx)
f0100484:	c7 45 f8 fb 03 00 00 	movl   $0x3fb,-0x8(%ebp)
f010048b:	c6 45 cf 80          	movb   $0x80,-0x31(%ebp)
f010048f:	8a 45 cf             	mov    -0x31(%ebp),%al
f0100492:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0100495:	ee                   	out    %al,(%dx)
f0100496:	c7 45 f4 f8 03 00 00 	movl   $0x3f8,-0xc(%ebp)
f010049d:	c6 45 d0 0c          	movb   $0xc,-0x30(%ebp)
f01004a1:	8a 45 d0             	mov    -0x30(%ebp),%al
f01004a4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01004a7:	ee                   	out    %al,(%dx)
f01004a8:	c7 45 f0 f9 03 00 00 	movl   $0x3f9,-0x10(%ebp)
f01004af:	c6 45 d1 00          	movb   $0x0,-0x2f(%ebp)
f01004b3:	8a 45 d1             	mov    -0x2f(%ebp),%al
f01004b6:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01004b9:	ee                   	out    %al,(%dx)
f01004ba:	c7 45 ec fb 03 00 00 	movl   $0x3fb,-0x14(%ebp)
f01004c1:	c6 45 d2 03          	movb   $0x3,-0x2e(%ebp)
f01004c5:	8a 45 d2             	mov    -0x2e(%ebp),%al
f01004c8:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01004cb:	ee                   	out    %al,(%dx)
f01004cc:	c7 45 e8 fc 03 00 00 	movl   $0x3fc,-0x18(%ebp)
f01004d3:	c6 45 d3 00          	movb   $0x0,-0x2d(%ebp)
f01004d7:	8a 45 d3             	mov    -0x2d(%ebp),%al
f01004da:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01004dd:	ee                   	out    %al,(%dx)
f01004de:	c7 45 e4 f9 03 00 00 	movl   $0x3f9,-0x1c(%ebp)
f01004e5:	c6 45 d4 01          	movb   $0x1,-0x2c(%ebp)
f01004e9:	8a 45 d4             	mov    -0x2c(%ebp),%al
f01004ec:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01004ef:	ee                   	out    %al,(%dx)
f01004f0:	c7 45 e0 fd 03 00 00 	movl   $0x3fd,-0x20(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01004f7:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01004fa:	89 c2                	mov    %eax,%edx
f01004fc:	ec                   	in     (%dx),%al
f01004fd:	88 45 d5             	mov    %al,-0x2b(%ebp)
	return data;
f0100500:	8a 45 d5             	mov    -0x2b(%ebp),%al
	// Enable rcv interrupts
	outb(COM1+COM_IER, COM_IER_RDI);

	// Clear any preexisting overrun indications and interrupts
	// Serial port doesn't exist if COM_LSR returns 0xFF
	serial_exists = (inb(COM1+COM_LSR) != 0xFF);
f0100503:	3c ff                	cmp    $0xff,%al
f0100505:	0f 95 c0             	setne  %al
f0100508:	0f b6 c0             	movzbl %al,%eax
f010050b:	a3 44 3f 25 f0       	mov    %eax,0xf0253f44
f0100510:	c7 45 dc fa 03 00 00 	movl   $0x3fa,-0x24(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100517:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010051a:	89 c2                	mov    %eax,%edx
f010051c:	ec                   	in     (%dx),%al
f010051d:	88 45 d6             	mov    %al,-0x2a(%ebp)
f0100520:	c7 45 d8 f8 03 00 00 	movl   $0x3f8,-0x28(%ebp)
f0100527:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010052a:	89 c2                	mov    %eax,%edx
f010052c:	ec                   	in     (%dx),%al
f010052d:	88 45 d7             	mov    %al,-0x29(%ebp)
	(void) inb(COM1+COM_IIR);
	(void) inb(COM1+COM_RX);

}
f0100530:	90                   	nop
f0100531:	c9                   	leave  
f0100532:	c3                   	ret    

f0100533 <delay>:
// page.

// Stupid I/O delay routine necessitated by historical PC design flaws
static void
delay(void)
{
f0100533:	55                   	push   %ebp
f0100534:	89 e5                	mov    %esp,%ebp
f0100536:	83 ec 20             	sub    $0x20,%esp
f0100539:	c7 45 fc 84 00 00 00 	movl   $0x84,-0x4(%ebp)
f0100540:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100543:	89 c2                	mov    %eax,%edx
f0100545:	ec                   	in     (%dx),%al
f0100546:	88 45 ec             	mov    %al,-0x14(%ebp)
f0100549:	c7 45 f8 84 00 00 00 	movl   $0x84,-0x8(%ebp)
f0100550:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0100553:	89 c2                	mov    %eax,%edx
f0100555:	ec                   	in     (%dx),%al
f0100556:	88 45 ed             	mov    %al,-0x13(%ebp)
f0100559:	c7 45 f4 84 00 00 00 	movl   $0x84,-0xc(%ebp)
f0100560:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0100563:	89 c2                	mov    %eax,%edx
f0100565:	ec                   	in     (%dx),%al
f0100566:	88 45 ee             	mov    %al,-0x12(%ebp)
f0100569:	c7 45 f0 84 00 00 00 	movl   $0x84,-0x10(%ebp)
f0100570:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0100573:	89 c2                	mov    %eax,%edx
f0100575:	ec                   	in     (%dx),%al
f0100576:	88 45 ef             	mov    %al,-0x11(%ebp)
	inb(0x84);
	inb(0x84);
	inb(0x84);
	inb(0x84);
}
f0100579:	90                   	nop
f010057a:	c9                   	leave  
f010057b:	c3                   	ret    

f010057c <lpt_putc>:

static void
lpt_putc(int c)
{
f010057c:	55                   	push   %ebp
f010057d:	89 e5                	mov    %esp,%ebp
f010057f:	83 ec 20             	sub    $0x20,%esp
	int i;

	for (i = 0; !(inb(0x378+1) & 0x80) && i < 2800; i++) //12800
f0100582:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0100589:	eb 08                	jmp    f0100593 <lpt_putc+0x17>
		delay();
f010058b:	e8 a3 ff ff ff       	call   f0100533 <delay>
static void
lpt_putc(int c)
{
	int i;

	for (i = 0; !(inb(0x378+1) & 0x80) && i < 2800; i++) //12800
f0100590:	ff 45 fc             	incl   -0x4(%ebp)
f0100593:	c7 45 ec 79 03 00 00 	movl   $0x379,-0x14(%ebp)
f010059a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010059d:	89 c2                	mov    %eax,%edx
f010059f:	ec                   	in     (%dx),%al
f01005a0:	88 45 eb             	mov    %al,-0x15(%ebp)
	return data;
f01005a3:	8a 45 eb             	mov    -0x15(%ebp),%al
f01005a6:	84 c0                	test   %al,%al
f01005a8:	78 09                	js     f01005b3 <lpt_putc+0x37>
f01005aa:	81 7d fc ef 0a 00 00 	cmpl   $0xaef,-0x4(%ebp)
f01005b1:	7e d8                	jle    f010058b <lpt_putc+0xf>
		delay();
	outb(0x378+0, c);
f01005b3:	8b 45 08             	mov    0x8(%ebp),%eax
f01005b6:	0f b6 c0             	movzbl %al,%eax
f01005b9:	c7 45 f4 78 03 00 00 	movl   $0x378,-0xc(%ebp)
f01005c0:	88 45 e8             	mov    %al,-0x18(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01005c3:	8a 45 e8             	mov    -0x18(%ebp),%al
f01005c6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01005c9:	ee                   	out    %al,(%dx)
f01005ca:	c7 45 f0 7a 03 00 00 	movl   $0x37a,-0x10(%ebp)
f01005d1:	c6 45 e9 0d          	movb   $0xd,-0x17(%ebp)
f01005d5:	8a 45 e9             	mov    -0x17(%ebp),%al
f01005d8:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01005db:	ee                   	out    %al,(%dx)
f01005dc:	c7 45 f8 7a 03 00 00 	movl   $0x37a,-0x8(%ebp)
f01005e3:	c6 45 ea 08          	movb   $0x8,-0x16(%ebp)
f01005e7:	8a 45 ea             	mov    -0x16(%ebp),%al
f01005ea:	8b 55 f8             	mov    -0x8(%ebp),%edx
f01005ed:	ee                   	out    %al,(%dx)
	outb(0x378+2, 0x08|0x04|0x01);
	outb(0x378+2, 0x08);
}
f01005ee:	90                   	nop
f01005ef:	c9                   	leave  
f01005f0:	c3                   	ret    

f01005f1 <cga_init>:
static uint16 *crt_buf;
static uint16 crt_pos;

void
cga_init(void)
{
f01005f1:	55                   	push   %ebp
f01005f2:	89 e5                	mov    %esp,%ebp
f01005f4:	83 ec 20             	sub    $0x20,%esp
	volatile uint16 *cp;
	uint16 was;
	unsigned pos;

	cp = (uint16*) (KERNEL_BASE + CGA_BUF);
f01005f7:	c7 45 fc 00 80 0b f0 	movl   $0xf00b8000,-0x4(%ebp)
	was = *cp;
f01005fe:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100601:	66 8b 00             	mov    (%eax),%ax
f0100604:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
	*cp = (uint16) 0xA55A;
f0100608:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010060b:	66 c7 00 5a a5       	movw   $0xa55a,(%eax)
	if (*cp != 0xA55A) {
f0100610:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100613:	66 8b 00             	mov    (%eax),%ax
f0100616:	66 3d 5a a5          	cmp    $0xa55a,%ax
f010061a:	74 13                	je     f010062f <cga_init+0x3e>
		cp = (uint16*) (KERNEL_BASE + MONO_BUF);
f010061c:	c7 45 fc 00 00 0b f0 	movl   $0xf00b0000,-0x4(%ebp)
		addr_6845 = MONO_BASE;
f0100623:	c7 05 48 3f 25 f0 b4 	movl   $0x3b4,0xf0253f48
f010062a:	03 00 00 
f010062d:	eb 14                	jmp    f0100643 <cga_init+0x52>
	} else {
		*cp = was;
f010062f:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0100632:	66 8b 45 fa          	mov    -0x6(%ebp),%ax
f0100636:	66 89 02             	mov    %ax,(%edx)
		addr_6845 = CGA_BASE;
f0100639:	c7 05 48 3f 25 f0 d4 	movl   $0x3d4,0xf0253f48
f0100640:	03 00 00 
	}

	/* Extract cursor location */
	outb(addr_6845, 14);
f0100643:	a1 48 3f 25 f0       	mov    0xf0253f48,%eax
f0100648:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010064b:	c6 45 e0 0e          	movb   $0xe,-0x20(%ebp)
f010064f:	8a 45 e0             	mov    -0x20(%ebp),%al
f0100652:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100655:	ee                   	out    %al,(%dx)
	pos = inb(addr_6845 + 1) << 8;
f0100656:	a1 48 3f 25 f0       	mov    0xf0253f48,%eax
f010065b:	40                   	inc    %eax
f010065c:	89 45 ec             	mov    %eax,-0x14(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010065f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0100662:	89 c2                	mov    %eax,%edx
f0100664:	ec                   	in     (%dx),%al
f0100665:	88 45 e1             	mov    %al,-0x1f(%ebp)
	return data;
f0100668:	8a 45 e1             	mov    -0x1f(%ebp),%al
f010066b:	0f b6 c0             	movzbl %al,%eax
f010066e:	c1 e0 08             	shl    $0x8,%eax
f0100671:	89 45 f0             	mov    %eax,-0x10(%ebp)
	outb(addr_6845, 15);
f0100674:	a1 48 3f 25 f0       	mov    0xf0253f48,%eax
f0100679:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010067c:	c6 45 e2 0f          	movb   $0xf,-0x1e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0100680:	8a 45 e2             	mov    -0x1e(%ebp),%al
f0100683:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0100686:	ee                   	out    %al,(%dx)
	pos |= inb(addr_6845 + 1);
f0100687:	a1 48 3f 25 f0       	mov    0xf0253f48,%eax
f010068c:	40                   	inc    %eax
f010068d:	89 45 e4             	mov    %eax,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100690:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0100693:	89 c2                	mov    %eax,%edx
f0100695:	ec                   	in     (%dx),%al
f0100696:	88 45 e3             	mov    %al,-0x1d(%ebp)
	return data;
f0100699:	8a 45 e3             	mov    -0x1d(%ebp),%al
f010069c:	0f b6 c0             	movzbl %al,%eax
f010069f:	09 45 f0             	or     %eax,-0x10(%ebp)

	crt_buf = (uint16*) cp;
f01006a2:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01006a5:	a3 4c 3f 25 f0       	mov    %eax,0xf0253f4c
	crt_pos = pos;
f01006aa:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01006ad:	66 a3 50 3f 25 f0    	mov    %ax,0xf0253f50
}
f01006b3:	90                   	nop
f01006b4:	c9                   	leave  
f01006b5:	c3                   	ret    

f01006b6 <cga_putc>:
//2016: Preliminary backward and forward cursor movement was added to FOS
// 		Thanks to student Abdullah Mohammad Ma3en, 3rd year, and TA Ghada Hamed.

void
cga_putc(int c)
{
f01006b6:	55                   	push   %ebp
f01006b7:	89 e5                	mov    %esp,%ebp
f01006b9:	53                   	push   %ebx
f01006ba:	83 ec 24             	sub    $0x24,%esp
	// if no attribute given, then use black on white
	if (!(c & ~0xFF))
f01006bd:	8b 45 08             	mov    0x8(%ebp),%eax
f01006c0:	b0 00                	mov    $0x0,%al
f01006c2:	85 c0                	test   %eax,%eax
f01006c4:	75 07                	jne    f01006cd <cga_putc+0x17>
		c |= 0x0700;
f01006c6:	81 4d 08 00 07 00 00 	orl    $0x700,0x8(%ebp)

	switch (c & 0xff) {
f01006cd:	8b 45 08             	mov    0x8(%ebp),%eax
f01006d0:	0f b6 c0             	movzbl %al,%eax
f01006d3:	83 f8 0a             	cmp    $0xa,%eax
f01006d6:	74 77                	je     f010074f <cga_putc+0x99>
f01006d8:	83 f8 0a             	cmp    $0xa,%eax
f01006db:	7f 13                	jg     f01006f0 <cga_putc+0x3a>
f01006dd:	83 f8 08             	cmp    $0x8,%eax
f01006e0:	74 2e                	je     f0100710 <cga_putc+0x5a>
f01006e2:	83 f8 09             	cmp    $0x9,%eax
f01006e5:	0f 84 a8 00 00 00    	je     f0100793 <cga_putc+0xdd>
f01006eb:	e9 22 01 00 00       	jmp    f0100812 <cga_putc+0x15c>
f01006f0:	3d e4 00 00 00       	cmp    $0xe4,%eax
f01006f5:	0f 84 de 00 00 00    	je     f01007d9 <cga_putc+0x123>
f01006fb:	3d e5 00 00 00       	cmp    $0xe5,%eax
f0100700:	0f 84 f1 00 00 00    	je     f01007f7 <cga_putc+0x141>
f0100706:	83 f8 0d             	cmp    $0xd,%eax
f0100709:	74 5d                	je     f0100768 <cga_putc+0xb2>
f010070b:	e9 02 01 00 00       	jmp    f0100812 <cga_putc+0x15c>
	case '\b':
		if (crt_pos > 0) {
f0100710:	66 a1 50 3f 25 f0    	mov    0xf0253f50,%ax
f0100716:	66 85 c0             	test   %ax,%ax
f0100719:	0f 84 4f 01 00 00    	je     f010086e <cga_putc+0x1b8>
			crt_pos--;
f010071f:	66 a1 50 3f 25 f0    	mov    0xf0253f50,%ax
f0100725:	48                   	dec    %eax
f0100726:	66 a3 50 3f 25 f0    	mov    %ax,0xf0253f50
			crt_buf[crt_pos] = (c & ~0xff) | ' ';
f010072c:	8b 15 4c 3f 25 f0    	mov    0xf0253f4c,%edx
f0100732:	66 a1 50 3f 25 f0    	mov    0xf0253f50,%ax
f0100738:	0f b7 c0             	movzwl %ax,%eax
f010073b:	01 c0                	add    %eax,%eax
f010073d:	01 c2                	add    %eax,%edx
f010073f:	8b 45 08             	mov    0x8(%ebp),%eax
f0100742:	b0 00                	mov    $0x0,%al
f0100744:	83 c8 20             	or     $0x20,%eax
f0100747:	66 89 02             	mov    %ax,(%edx)
		}
		break;
f010074a:	e9 1f 01 00 00       	jmp    f010086e <cga_putc+0x1b8>
	case '\n':
		crt_pos += CRT_COLS;
f010074f:	66 a1 50 3f 25 f0    	mov    0xf0253f50,%ax
f0100755:	83 c0 50             	add    $0x50,%eax
f0100758:	66 a3 50 3f 25 f0    	mov    %ax,0xf0253f50
		text_length = 0;
f010075e:	c7 05 40 3f 25 f0 00 	movl   $0x0,0xf0253f40
f0100765:	00 00 00 
		/* fallthru */
	case '\r':
		crt_pos -= (crt_pos % CRT_COLS);
f0100768:	66 8b 0d 50 3f 25 f0 	mov    0xf0253f50,%cx
f010076f:	66 a1 50 3f 25 f0    	mov    0xf0253f50,%ax
f0100775:	bb 50 00 00 00       	mov    $0x50,%ebx
f010077a:	ba 00 00 00 00       	mov    $0x0,%edx
f010077f:	66 f7 f3             	div    %bx
f0100782:	89 d0                	mov    %edx,%eax
f0100784:	29 c1                	sub    %eax,%ecx
f0100786:	89 c8                	mov    %ecx,%eax
f0100788:	66 a3 50 3f 25 f0    	mov    %ax,0xf0253f50
		break;
f010078e:	e9 e5 00 00 00       	jmp    f0100878 <cga_putc+0x1c2>
	case '\t':
		cons_putc(' ');
f0100793:	83 ec 0c             	sub    $0xc,%esp
f0100796:	6a 20                	push   $0x20
f0100798:	e8 ba 05 00 00       	call   f0100d57 <cons_putc>
f010079d:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01007a0:	83 ec 0c             	sub    $0xc,%esp
f01007a3:	6a 20                	push   $0x20
f01007a5:	e8 ad 05 00 00       	call   f0100d57 <cons_putc>
f01007aa:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01007ad:	83 ec 0c             	sub    $0xc,%esp
f01007b0:	6a 20                	push   $0x20
f01007b2:	e8 a0 05 00 00       	call   f0100d57 <cons_putc>
f01007b7:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01007ba:	83 ec 0c             	sub    $0xc,%esp
f01007bd:	6a 20                	push   $0x20
f01007bf:	e8 93 05 00 00       	call   f0100d57 <cons_putc>
f01007c4:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01007c7:	83 ec 0c             	sub    $0xc,%esp
f01007ca:	6a 20                	push   $0x20
f01007cc:	e8 86 05 00 00       	call   f0100d57 <cons_putc>
f01007d1:	83 c4 10             	add    $0x10,%esp
		break;
f01007d4:	e9 9f 00 00 00       	jmp    f0100878 <cga_putc+0x1c2>
	case 228:
              if(crt_pos>0)
f01007d9:	66 a1 50 3f 25 f0    	mov    0xf0253f50,%ax
f01007df:	66 85 c0             	test   %ax,%ax
f01007e2:	0f 84 89 00 00 00    	je     f0100871 <cga_putc+0x1bb>
		     crt_pos--;
f01007e8:	66 a1 50 3f 25 f0    	mov    0xf0253f50,%ax
f01007ee:	48                   	dec    %eax
f01007ef:	66 a3 50 3f 25 f0    	mov    %ax,0xf0253f50
		     break;
f01007f5:	eb 7a                	jmp    f0100871 <cga_putc+0x1bb>
	case 229:
		if (crt_pos < CRT_SIZE)
f01007f7:	66 a1 50 3f 25 f0    	mov    0xf0253f50,%ax
f01007fd:	66 3d cf 07          	cmp    $0x7cf,%ax
f0100801:	77 71                	ja     f0100874 <cga_putc+0x1be>
			     crt_pos++;
f0100803:	66 a1 50 3f 25 f0    	mov    0xf0253f50,%ax
f0100809:	40                   	inc    %eax
f010080a:	66 a3 50 3f 25 f0    	mov    %ax,0xf0253f50
			     break;
f0100810:	eb 62                	jmp    f0100874 <cga_putc+0x1be>
	default: {
		if (c != KEY_LF && c != KEY_RT) {
f0100812:	81 7d 08 e4 00 00 00 	cmpl   $0xe4,0x8(%ebp)
f0100819:	74 5c                	je     f0100877 <cga_putc+0x1c1>
f010081b:	81 7d 08 e5 00 00 00 	cmpl   $0xe5,0x8(%ebp)
f0100822:	74 53                	je     f0100877 <cga_putc+0x1c1>
		crt_buf[crt_pos++] = c;		/* write the character */
f0100824:	8b 0d 4c 3f 25 f0    	mov    0xf0253f4c,%ecx
f010082a:	66 a1 50 3f 25 f0    	mov    0xf0253f50,%ax
f0100830:	8d 50 01             	lea    0x1(%eax),%edx
f0100833:	66 89 15 50 3f 25 f0 	mov    %dx,0xf0253f50
f010083a:	0f b7 c0             	movzwl %ax,%eax
f010083d:	01 c0                	add    %eax,%eax
f010083f:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0100842:	8b 45 08             	mov    0x8(%ebp),%eax
f0100845:	66 89 02             	mov    %ax,(%edx)
			if (crt_pos > 1920 + text_length)
f0100848:	66 a1 50 3f 25 f0    	mov    0xf0253f50,%ax
f010084e:	0f b7 c0             	movzwl %ax,%eax
f0100851:	8b 15 40 3f 25 f0    	mov    0xf0253f40,%edx
f0100857:	81 c2 80 07 00 00    	add    $0x780,%edx
f010085d:	39 d0                	cmp    %edx,%eax
f010085f:	7e 16                	jle    f0100877 <cga_putc+0x1c1>
				text_length++;
f0100861:	a1 40 3f 25 f0       	mov    0xf0253f40,%eax
f0100866:	40                   	inc    %eax
f0100867:	a3 40 3f 25 f0       	mov    %eax,0xf0253f40
		}
		break;
f010086c:	eb 09                	jmp    f0100877 <cga_putc+0x1c1>
	case '\b':
		if (crt_pos > 0) {
			crt_pos--;
			crt_buf[crt_pos] = (c & ~0xff) | ' ';
		}
		break;
f010086e:	90                   	nop
f010086f:	eb 07                	jmp    f0100878 <cga_putc+0x1c2>
		cons_putc(' ');
		break;
	case 228:
              if(crt_pos>0)
		     crt_pos--;
		     break;
f0100871:	90                   	nop
f0100872:	eb 04                	jmp    f0100878 <cga_putc+0x1c2>
	case 229:
		if (crt_pos < CRT_SIZE)
			     crt_pos++;
			     break;
f0100874:	90                   	nop
f0100875:	eb 01                	jmp    f0100878 <cga_putc+0x1c2>
		if (c != KEY_LF && c != KEY_RT) {
		crt_buf[crt_pos++] = c;		/* write the character */
			if (crt_pos > 1920 + text_length)
				text_length++;
		}
		break;
f0100877:	90                   	nop
	}
	}

	// What is the purpose of this?
	if (crt_pos >= CRT_SIZE) {
f0100878:	66 a1 50 3f 25 f0    	mov    0xf0253f50,%ax
f010087e:	66 3d cf 07          	cmp    $0x7cf,%ax
f0100882:	76 58                	jbe    f01008dc <cga_putc+0x226>
		int i;

		memcpy(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16));
f0100884:	a1 4c 3f 25 f0       	mov    0xf0253f4c,%eax
f0100889:	8d 90 a0 00 00 00    	lea    0xa0(%eax),%edx
f010088f:	a1 4c 3f 25 f0       	mov    0xf0253f4c,%eax
f0100894:	83 ec 04             	sub    $0x4,%esp
f0100897:	68 00 0f 00 00       	push   $0xf00
f010089c:	52                   	push   %edx
f010089d:	50                   	push   %eax
f010089e:	e8 f3 ed 02 00       	call   f012f696 <memcpy>
f01008a3:	83 c4 10             	add    $0x10,%esp
		for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i++)
f01008a6:	c7 45 f4 80 07 00 00 	movl   $0x780,-0xc(%ebp)
f01008ad:	eb 15                	jmp    f01008c4 <cga_putc+0x20e>
			crt_buf[i] = 0x0700 | ' ';
f01008af:	8b 15 4c 3f 25 f0    	mov    0xf0253f4c,%edx
f01008b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01008b8:	01 c0                	add    %eax,%eax
f01008ba:	01 d0                	add    %edx,%eax
f01008bc:	66 c7 00 20 07       	movw   $0x720,(%eax)
	// What is the purpose of this?
	if (crt_pos >= CRT_SIZE) {
		int i;

		memcpy(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16));
		for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i++)
f01008c1:	ff 45 f4             	incl   -0xc(%ebp)
f01008c4:	81 7d f4 cf 07 00 00 	cmpl   $0x7cf,-0xc(%ebp)
f01008cb:	7e e2                	jle    f01008af <cga_putc+0x1f9>
			crt_buf[i] = 0x0700 | ' ';
		crt_pos -= CRT_COLS;
f01008cd:	66 a1 50 3f 25 f0    	mov    0xf0253f50,%ax
f01008d3:	83 e8 50             	sub    $0x50,%eax
f01008d6:	66 a3 50 3f 25 f0    	mov    %ax,0xf0253f50
	}

	/* move that little blinky thing */
	outb(addr_6845, 14);
f01008dc:	a1 48 3f 25 f0       	mov    0xf0253f48,%eax
f01008e1:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01008e4:	c6 45 e0 0e          	movb   $0xe,-0x20(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01008e8:	8a 45 e0             	mov    -0x20(%ebp),%al
f01008eb:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01008ee:	ee                   	out    %al,(%dx)
	outb(addr_6845 + 1, crt_pos >> 8);
f01008ef:	66 a1 50 3f 25 f0    	mov    0xf0253f50,%ax
f01008f5:	66 c1 e8 08          	shr    $0x8,%ax
f01008f9:	0f b6 c0             	movzbl %al,%eax
f01008fc:	8b 15 48 3f 25 f0    	mov    0xf0253f48,%edx
f0100902:	42                   	inc    %edx
f0100903:	89 55 ec             	mov    %edx,-0x14(%ebp)
f0100906:	88 45 e1             	mov    %al,-0x1f(%ebp)
f0100909:	8a 45 e1             	mov    -0x1f(%ebp),%al
f010090c:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010090f:	ee                   	out    %al,(%dx)
	outb(addr_6845, 15);
f0100910:	a1 48 3f 25 f0       	mov    0xf0253f48,%eax
f0100915:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0100918:	c6 45 e2 0f          	movb   $0xf,-0x1e(%ebp)
f010091c:	8a 45 e2             	mov    -0x1e(%ebp),%al
f010091f:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0100922:	ee                   	out    %al,(%dx)
	outb(addr_6845 + 1, crt_pos);
f0100923:	66 a1 50 3f 25 f0    	mov    0xf0253f50,%ax
f0100929:	0f b6 c0             	movzbl %al,%eax
f010092c:	8b 15 48 3f 25 f0    	mov    0xf0253f48,%edx
f0100932:	42                   	inc    %edx
f0100933:	89 55 e4             	mov    %edx,-0x1c(%ebp)
f0100936:	88 45 e3             	mov    %al,-0x1d(%ebp)
f0100939:	8a 45 e3             	mov    -0x1d(%ebp),%al
f010093c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010093f:	ee                   	out    %al,(%dx)
}
f0100940:	90                   	nop
f0100941:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0100944:	c9                   	leave  
f0100945:	c3                   	ret    

f0100946 <kbd_proc_data>:
 * Get data from the keyboard.  If we finish a character, return it.  Else 0.
 * Return -1 if no data.
 */
static int
kbd_proc_data(void)
{
f0100946:	55                   	push   %ebp
f0100947:	89 e5                	mov    %esp,%ebp
f0100949:	83 ec 28             	sub    $0x28,%esp
f010094c:	c7 45 dc 64 00 00 00 	movl   $0x64,-0x24(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100953:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0100956:	89 c2                	mov    %eax,%edx
f0100958:	ec                   	in     (%dx),%al
f0100959:	88 45 db             	mov    %al,-0x25(%ebp)
	return data;
f010095c:	8a 45 db             	mov    -0x25(%ebp),%al
	int c;
	uint8 data;
	static uint32 shift;

	if ((inb(KBSTATP) & KBS_DIB) == 0)
f010095f:	0f b6 c0             	movzbl %al,%eax
f0100962:	83 e0 01             	and    $0x1,%eax
f0100965:	85 c0                	test   %eax,%eax
f0100967:	75 0a                	jne    f0100973 <kbd_proc_data+0x2d>
		return -1;
f0100969:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f010096e:	e9 2a 02 00 00       	jmp    f0100b9d <kbd_proc_data+0x257>
f0100973:	c7 45 e4 60 00 00 00 	movl   $0x60,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010097a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010097d:	89 c2                	mov    %eax,%edx
f010097f:	ec                   	in     (%dx),%al
f0100980:	88 45 da             	mov    %al,-0x26(%ebp)
	return data;
f0100983:	8a 45 da             	mov    -0x26(%ebp),%al

	data = inb(KBDATAP);
f0100986:	88 45 f3             	mov    %al,-0xd(%ebp)

	if (data == 0xE0) {
f0100989:	80 7d f3 e0          	cmpb   $0xe0,-0xd(%ebp)
f010098d:	75 17                	jne    f01009a6 <kbd_proc_data+0x60>
		// E0 escape character
		shift |= E0ESC;
f010098f:	a1 68 41 25 f0       	mov    0xf0254168,%eax
f0100994:	83 c8 40             	or     $0x40,%eax
f0100997:	a3 68 41 25 f0       	mov    %eax,0xf0254168
		return 0;
f010099c:	b8 00 00 00 00       	mov    $0x0,%eax
f01009a1:	e9 f7 01 00 00       	jmp    f0100b9d <kbd_proc_data+0x257>
	} else if (data & 0x80) {
f01009a6:	8a 45 f3             	mov    -0xd(%ebp),%al
f01009a9:	84 c0                	test   %al,%al
f01009ab:	79 44                	jns    f01009f1 <kbd_proc_data+0xab>
		// Key released
		data = (shift & E0ESC ? data : data & 0x7F);
f01009ad:	a1 68 41 25 f0       	mov    0xf0254168,%eax
f01009b2:	83 e0 40             	and    $0x40,%eax
f01009b5:	85 c0                	test   %eax,%eax
f01009b7:	75 08                	jne    f01009c1 <kbd_proc_data+0x7b>
f01009b9:	8a 45 f3             	mov    -0xd(%ebp),%al
f01009bc:	83 e0 7f             	and    $0x7f,%eax
f01009bf:	eb 03                	jmp    f01009c4 <kbd_proc_data+0x7e>
f01009c1:	8a 45 f3             	mov    -0xd(%ebp),%al
f01009c4:	88 45 f3             	mov    %al,-0xd(%ebp)
		shift &= ~(shiftcode[data] | E0ESC);
f01009c7:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f01009cb:	8a 80 20 f0 18 f0    	mov    -0xfe70fe0(%eax),%al
f01009d1:	83 c8 40             	or     $0x40,%eax
f01009d4:	0f b6 c0             	movzbl %al,%eax
f01009d7:	f7 d0                	not    %eax
f01009d9:	89 c2                	mov    %eax,%edx
f01009db:	a1 68 41 25 f0       	mov    0xf0254168,%eax
f01009e0:	21 d0                	and    %edx,%eax
f01009e2:	a3 68 41 25 f0       	mov    %eax,0xf0254168
		return 0;
f01009e7:	b8 00 00 00 00       	mov    $0x0,%eax
f01009ec:	e9 ac 01 00 00       	jmp    f0100b9d <kbd_proc_data+0x257>
	} else if (shift & E0ESC) {
f01009f1:	a1 68 41 25 f0       	mov    0xf0254168,%eax
f01009f6:	83 e0 40             	and    $0x40,%eax
f01009f9:	85 c0                	test   %eax,%eax
f01009fb:	74 11                	je     f0100a0e <kbd_proc_data+0xc8>
		// Last character was an E0 escape; or with 0x80
		data |= 0x80;
f01009fd:	80 4d f3 80          	orb    $0x80,-0xd(%ebp)
		shift &= ~E0ESC;
f0100a01:	a1 68 41 25 f0       	mov    0xf0254168,%eax
f0100a06:	83 e0 bf             	and    $0xffffffbf,%eax
f0100a09:	a3 68 41 25 f0       	mov    %eax,0xf0254168
	}

	shift |= shiftcode[data];
f0100a0e:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0100a12:	8a 80 20 f0 18 f0    	mov    -0xfe70fe0(%eax),%al
f0100a18:	0f b6 d0             	movzbl %al,%edx
f0100a1b:	a1 68 41 25 f0       	mov    0xf0254168,%eax
f0100a20:	09 d0                	or     %edx,%eax
f0100a22:	a3 68 41 25 f0       	mov    %eax,0xf0254168
	shift ^= togglecode[data];
f0100a27:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0100a2b:	8a 80 20 f1 18 f0    	mov    -0xfe70ee0(%eax),%al
f0100a31:	0f b6 d0             	movzbl %al,%edx
f0100a34:	a1 68 41 25 f0       	mov    0xf0254168,%eax
f0100a39:	31 d0                	xor    %edx,%eax
f0100a3b:	a3 68 41 25 f0       	mov    %eax,0xf0254168

	c = charcode[shift & (CTL | SHIFT)][data];
f0100a40:	a1 68 41 25 f0       	mov    0xf0254168,%eax
f0100a45:	83 e0 03             	and    $0x3,%eax
f0100a48:	8b 14 85 20 f5 18 f0 	mov    -0xfe70ae0(,%eax,4),%edx
f0100a4f:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0100a53:	01 d0                	add    %edx,%eax
f0100a55:	8a 00                	mov    (%eax),%al
f0100a57:	0f b6 c0             	movzbl %al,%eax
f0100a5a:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (c == KEY_DEL) {
f0100a5d:	81 7d f4 e9 00 00 00 	cmpl   $0xe9,-0xc(%ebp)
f0100a64:	0f 85 9c 00 00 00    	jne    f0100b06 <kbd_proc_data+0x1c0>
		if (text_length > 0) {
f0100a6a:	a1 40 3f 25 f0       	mov    0xf0253f40,%eax
f0100a6f:	85 c0                	test   %eax,%eax
f0100a71:	0f 8e 85 00 00 00    	jle    f0100afc <kbd_proc_data+0x1b6>
			if (crt_pos == 1920 + text_length)
f0100a77:	66 a1 50 3f 25 f0    	mov    0xf0253f50,%ax
f0100a7d:	0f b7 c0             	movzwl %ax,%eax
f0100a80:	8b 15 40 3f 25 f0    	mov    0xf0253f40,%edx
f0100a86:	81 c2 80 07 00 00    	add    $0x780,%edx
f0100a8c:	39 d0                	cmp    %edx,%eax
f0100a8e:	75 0a                	jne    f0100a9a <kbd_proc_data+0x154>
				return 0;
f0100a90:	b8 00 00 00 00       	mov    $0x0,%eax
f0100a95:	e9 03 01 00 00       	jmp    f0100b9d <kbd_proc_data+0x257>
			else {
			text_length--;
f0100a9a:	a1 40 3f 25 f0       	mov    0xf0253f40,%eax
f0100a9f:	48                   	dec    %eax
f0100aa0:	a3 40 3f 25 f0       	mov    %eax,0xf0253f40
				int crt_pos_Length = crt_pos - 1925;
f0100aa5:	66 a1 50 3f 25 f0    	mov    0xf0253f50,%ax
f0100aab:	0f b7 c0             	movzwl %ax,%eax
f0100aae:	2d 85 07 00 00       	sub    $0x785,%eax
f0100ab3:	89 45 ec             	mov    %eax,-0x14(%ebp)
				for (int i = crt_pos; crt_pos_Length <= text_length;
f0100ab6:	66 a1 50 3f 25 f0    	mov    0xf0253f50,%ax
f0100abc:	0f b7 c0             	movzwl %ax,%eax
f0100abf:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0100ac2:	eb 26                	jmp    f0100aea <kbd_proc_data+0x1a4>
						++i, crt_pos_Length++) {
					crt_buf[i] = crt_buf[i + 1];
f0100ac4:	8b 15 4c 3f 25 f0    	mov    0xf0253f4c,%edx
f0100aca:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0100acd:	01 c0                	add    %eax,%eax
f0100acf:	01 c2                	add    %eax,%edx
f0100ad1:	a1 4c 3f 25 f0       	mov    0xf0253f4c,%eax
f0100ad6:	8b 4d e8             	mov    -0x18(%ebp),%ecx
f0100ad9:	41                   	inc    %ecx
f0100ada:	01 c9                	add    %ecx,%ecx
f0100adc:	01 c8                	add    %ecx,%eax
f0100ade:	66 8b 00             	mov    (%eax),%ax
f0100ae1:	66 89 02             	mov    %ax,(%edx)
				return 0;
			else {
			text_length--;
				int crt_pos_Length = crt_pos - 1925;
				for (int i = crt_pos; crt_pos_Length <= text_length;
						++i, crt_pos_Length++) {
f0100ae4:	ff 45 e8             	incl   -0x18(%ebp)
f0100ae7:	ff 45 ec             	incl   -0x14(%ebp)
			if (crt_pos == 1920 + text_length)
				return 0;
			else {
			text_length--;
				int crt_pos_Length = crt_pos - 1925;
				for (int i = crt_pos; crt_pos_Length <= text_length;
f0100aea:	a1 40 3f 25 f0       	mov    0xf0253f40,%eax
f0100aef:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0100af2:	7e d0                	jle    f0100ac4 <kbd_proc_data+0x17e>
						++i, crt_pos_Length++) {
					crt_buf[i] = crt_buf[i + 1];
				}
				return c;
f0100af4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0100af7:	e9 a1 00 00 00       	jmp    f0100b9d <kbd_proc_data+0x257>
			}
		}
		return 0;
f0100afc:	b8 00 00 00 00       	mov    $0x0,%eax
f0100b01:	e9 97 00 00 00       	jmp    f0100b9d <kbd_proc_data+0x257>
	}
	if (shift & CAPSLOCK) {
f0100b06:	a1 68 41 25 f0       	mov    0xf0254168,%eax
f0100b0b:	83 e0 08             	and    $0x8,%eax
f0100b0e:	85 c0                	test   %eax,%eax
f0100b10:	74 22                	je     f0100b34 <kbd_proc_data+0x1ee>
		if ('a' <= c && c <= 'z')
f0100b12:	83 7d f4 60          	cmpl   $0x60,-0xc(%ebp)
f0100b16:	7e 0c                	jle    f0100b24 <kbd_proc_data+0x1de>
f0100b18:	83 7d f4 7a          	cmpl   $0x7a,-0xc(%ebp)
f0100b1c:	7f 06                	jg     f0100b24 <kbd_proc_data+0x1de>
			c += 'A' - 'a';
f0100b1e:	83 6d f4 20          	subl   $0x20,-0xc(%ebp)
f0100b22:	eb 10                	jmp    f0100b34 <kbd_proc_data+0x1ee>
		else if ('A' <= c && c <= 'Z')
f0100b24:	83 7d f4 40          	cmpl   $0x40,-0xc(%ebp)
f0100b28:	7e 0a                	jle    f0100b34 <kbd_proc_data+0x1ee>
f0100b2a:	83 7d f4 5a          	cmpl   $0x5a,-0xc(%ebp)
f0100b2e:	7f 04                	jg     f0100b34 <kbd_proc_data+0x1ee>
			c += 'a' - 'A';
f0100b30:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
	}

	// Process special keys
	if ((int) shift == NUMLOCK && c >= '0' && c <= '9')
f0100b34:	a1 68 41 25 f0       	mov    0xf0254168,%eax
f0100b39:	83 f8 10             	cmp    $0x10,%eax
f0100b3c:	75 13                	jne    f0100b51 <kbd_proc_data+0x20b>
f0100b3e:	83 7d f4 2f          	cmpl   $0x2f,-0xc(%ebp)
f0100b42:	7e 0d                	jle    f0100b51 <kbd_proc_data+0x20b>
f0100b44:	83 7d f4 39          	cmpl   $0x39,-0xc(%ebp)
f0100b48:	7f 07                	jg     f0100b51 <kbd_proc_data+0x20b>
		return 0;
f0100b4a:	b8 00 00 00 00       	mov    $0x0,%eax
f0100b4f:	eb 4c                	jmp    f0100b9d <kbd_proc_data+0x257>
	if (c == 255)
f0100b51:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
f0100b58:	75 07                	jne    f0100b61 <kbd_proc_data+0x21b>
		return 0;
f0100b5a:	b8 00 00 00 00       	mov    $0x0,%eax
f0100b5f:	eb 3c                	jmp    f0100b9d <kbd_proc_data+0x257>
	// Ctrl-Alt-Del: reboot
	if (!(~shift & (CTL | ALT)) && c == KEY_DEL) {
f0100b61:	a1 68 41 25 f0       	mov    0xf0254168,%eax
f0100b66:	f7 d0                	not    %eax
f0100b68:	83 e0 06             	and    $0x6,%eax
f0100b6b:	85 c0                	test   %eax,%eax
f0100b6d:	75 2b                	jne    f0100b9a <kbd_proc_data+0x254>
f0100b6f:	81 7d f4 e9 00 00 00 	cmpl   $0xe9,-0xc(%ebp)
f0100b76:	75 22                	jne    f0100b9a <kbd_proc_data+0x254>
		cprintf("Rebooting!\n");
f0100b78:	83 ec 0c             	sub    $0xc,%esp
f0100b7b:	68 bd 0b 13 f0       	push   $0xf0130bbd
f0100b80:	e8 ac 02 00 00       	call   f0100e31 <cprintf>
f0100b85:	83 c4 10             	add    $0x10,%esp
f0100b88:	c7 45 e0 92 00 00 00 	movl   $0x92,-0x20(%ebp)
f0100b8f:	c6 45 d9 03          	movb   $0x3,-0x27(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0100b93:	8a 45 d9             	mov    -0x27(%ebp),%al
f0100b96:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0100b99:	ee                   	out    %al,(%dx)
		outb(0x92, 0x3); // courtesy of Chris Frost
	}

	return c;
f0100b9a:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0100b9d:	c9                   	leave  
f0100b9e:	c3                   	ret    

f0100b9f <kbd_intr>:

void
kbd_intr(void)
{
f0100b9f:	55                   	push   %ebp
f0100ba0:	89 e5                	mov    %esp,%ebp
f0100ba2:	83 ec 08             	sub    $0x8,%esp
	cons_intr(kbd_proc_data);
f0100ba5:	83 ec 0c             	sub    $0xc,%esp
f0100ba8:	68 46 09 10 f0       	push   $0xf0100946
f0100bad:	e8 0c 00 00 00       	call   f0100bbe <cons_intr>
f0100bb2:	83 c4 10             	add    $0x10,%esp
}
f0100bb5:	90                   	nop
f0100bb6:	c9                   	leave  
f0100bb7:	c3                   	ret    

f0100bb8 <kbd_init>:

void
kbd_init(void)
{
f0100bb8:	55                   	push   %ebp
f0100bb9:	89 e5                	mov    %esp,%ebp
}
f0100bbb:	90                   	nop
f0100bbc:	5d                   	pop    %ebp
f0100bbd:	c3                   	ret    

f0100bbe <cons_intr>:

// called by device interrupt routines to feed input characters
// into the circular console input buffer.
void
cons_intr(int (*proc)(void))
{
f0100bbe:	55                   	push   %ebp
f0100bbf:	89 e5                	mov    %esp,%ebp
f0100bc1:	83 ec 18             	sub    $0x18,%esp
	int c;

	while ((c = (*proc)()) != -1) {
f0100bc4:	eb 35                	jmp    f0100bfb <cons_intr+0x3d>
		if (c == 0)
f0100bc6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100bca:	75 02                	jne    f0100bce <cons_intr+0x10>
			continue;
f0100bcc:	eb 2d                	jmp    f0100bfb <cons_intr+0x3d>
		cons.buf[cons.wpos++] = c;
f0100bce:	a1 64 41 25 f0       	mov    0xf0254164,%eax
f0100bd3:	8d 50 01             	lea    0x1(%eax),%edx
f0100bd6:	89 15 64 41 25 f0    	mov    %edx,0xf0254164
f0100bdc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100bdf:	88 90 60 3f 25 f0    	mov    %dl,-0xfdac0a0(%eax)
		if (cons.wpos == CONSBUFSIZE)
f0100be5:	a1 64 41 25 f0       	mov    0xf0254164,%eax
f0100bea:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100bef:	75 0a                	jne    f0100bfb <cons_intr+0x3d>
			cons.wpos = 0;
f0100bf1:	c7 05 64 41 25 f0 00 	movl   $0x0,0xf0254164
f0100bf8:	00 00 00 
void
cons_intr(int (*proc)(void))
{
	int c;

	while ((c = (*proc)()) != -1) {
f0100bfb:	8b 45 08             	mov    0x8(%ebp),%eax
f0100bfe:	ff d0                	call   *%eax
f0100c00:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100c03:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f0100c07:	75 bd                	jne    f0100bc6 <cons_intr+0x8>
			continue;
		cons.buf[cons.wpos++] = c;
		if (cons.wpos == CONSBUFSIZE)
			cons.wpos = 0;
	}
}
f0100c09:	90                   	nop
f0100c0a:	c9                   	leave  
f0100c0b:	c3                   	ret    

f0100c0c <cons_getc>:

// return the next input character from the console, or 0 if none waiting
int
cons_getc(void)
{
f0100c0c:	55                   	push   %ebp
f0100c0d:	89 e5                	mov    %esp,%ebp
f0100c0f:	83 ec 18             	sub    $0x18,%esp
	int c;

	// poll for any pending input characters,
	// so that this function works even when interrupts are disabled
	// (e.g., when called from the kernel monitor).
	serial_intr();
f0100c12:	e8 33 f8 ff ff       	call   f010044a <serial_intr>
	kbd_intr();
f0100c17:	e8 83 ff ff ff       	call   f0100b9f <kbd_intr>

	// grab the next character from the input buffer.
	if (cons.rpos != cons.wpos) {
f0100c1c:	8b 15 60 41 25 f0    	mov    0xf0254160,%edx
f0100c22:	a1 64 41 25 f0       	mov    0xf0254164,%eax
f0100c27:	39 c2                	cmp    %eax,%edx
f0100c29:	74 35                	je     f0100c60 <cons_getc+0x54>
		c = cons.buf[cons.rpos++];
f0100c2b:	a1 60 41 25 f0       	mov    0xf0254160,%eax
f0100c30:	8d 50 01             	lea    0x1(%eax),%edx
f0100c33:	89 15 60 41 25 f0    	mov    %edx,0xf0254160
f0100c39:	8a 80 60 3f 25 f0    	mov    -0xfdac0a0(%eax),%al
f0100c3f:	0f b6 c0             	movzbl %al,%eax
f0100c42:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if (cons.rpos == CONSBUFSIZE)
f0100c45:	a1 60 41 25 f0       	mov    0xf0254160,%eax
f0100c4a:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100c4f:	75 0a                	jne    f0100c5b <cons_getc+0x4f>
			cons.rpos = 0;
f0100c51:	c7 05 60 41 25 f0 00 	movl   $0x0,0xf0254160
f0100c58:	00 00 00 
		return c;
f0100c5b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0100c5e:	eb 05                	jmp    f0100c65 <cons_getc+0x59>
	}
	return 0;
f0100c60:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0100c65:	c9                   	leave  
f0100c66:	c3                   	ret    

f0100c67 <cons_getc2>:

// return the next input character from the console, or 0 if none waiting
int
cons_getc2(void)
{
f0100c67:	55                   	push   %ebp
f0100c68:	89 e5                	mov    %esp,%ebp
f0100c6a:	83 ec 18             	sub    $0x18,%esp

	// poll for any pending input characters,
	// so that this function works even when interrupts are disabled
	// (e.g., when called from the kernel monitor).

	int c1 = 0;
f0100c6d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	//serial_intr();
	{
		if (serial_exists)
f0100c74:	a1 44 3f 25 f0       	mov    0xf0253f44,%eax
f0100c79:	85 c0                	test   %eax,%eax
f0100c7b:	74 41                	je     f0100cbe <cons_getc2+0x57>
		{
			if ((c1 = serial_proc_data()) != -1) {
f0100c7d:	e8 86 f7 ff ff       	call   f0100408 <serial_proc_data>
f0100c82:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100c85:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f0100c89:	74 33                	je     f0100cbe <cons_getc2+0x57>
				if (c1 == 0)
f0100c8b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100c8f:	74 2d                	je     f0100cbe <cons_getc2+0x57>
				{
					//continue;
				}
				else
				{
					cons.buf[cons.wpos++] = c1;
f0100c91:	a1 64 41 25 f0       	mov    0xf0254164,%eax
f0100c96:	8d 50 01             	lea    0x1(%eax),%edx
f0100c99:	89 15 64 41 25 f0    	mov    %edx,0xf0254164
f0100c9f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100ca2:	88 90 60 3f 25 f0    	mov    %dl,-0xfdac0a0(%eax)
					if (cons.wpos == CONSBUFSIZE)
f0100ca8:	a1 64 41 25 f0       	mov    0xf0254164,%eax
f0100cad:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100cb2:	75 0a                	jne    f0100cbe <cons_getc2+0x57>
						cons.wpos = 0;
f0100cb4:	c7 05 64 41 25 f0 00 	movl   $0x0,0xf0254164
f0100cbb:	00 00 00 
				}
			}
		}
	}

	int c2 = 0;
f0100cbe:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	//kbd_intr();
	{
		if ((c2 = kbd_proc_data()) != -1) {
f0100cc5:	e8 7c fc ff ff       	call   f0100946 <kbd_proc_data>
f0100cca:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0100ccd:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
f0100cd1:	74 33                	je     f0100d06 <cons_getc2+0x9f>
			if (c2 == 0)
f0100cd3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0100cd7:	74 2d                	je     f0100d06 <cons_getc2+0x9f>
			{
				//continue;
			}
			else
			{
				cons.buf[cons.wpos++] = c2;
f0100cd9:	a1 64 41 25 f0       	mov    0xf0254164,%eax
f0100cde:	8d 50 01             	lea    0x1(%eax),%edx
f0100ce1:	89 15 64 41 25 f0    	mov    %edx,0xf0254164
f0100ce7:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100cea:	88 90 60 3f 25 f0    	mov    %dl,-0xfdac0a0(%eax)
				if (cons.wpos == CONSBUFSIZE)
f0100cf0:	a1 64 41 25 f0       	mov    0xf0254164,%eax
f0100cf5:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100cfa:	75 0a                	jne    f0100d06 <cons_getc2+0x9f>
					cons.wpos = 0;
f0100cfc:	c7 05 64 41 25 f0 00 	movl   $0x0,0xf0254164
f0100d03:	00 00 00 
	}

	// grab the next character from the input buffer.
	//cprintf("%d, %d \n", c1, c2);
	//if(c1 > 0 && c2 > 0)
	if(c2 > 0)
f0100d06:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0100d0a:	7e 44                	jle    f0100d50 <cons_getc2+0xe9>
	{
		if (cons.rpos != cons.wpos) {
f0100d0c:	8b 15 60 41 25 f0    	mov    0xf0254160,%edx
f0100d12:	a1 64 41 25 f0       	mov    0xf0254164,%eax
f0100d17:	39 c2                	cmp    %eax,%edx
f0100d19:	74 35                	je     f0100d50 <cons_getc2+0xe9>
			c = cons.buf[cons.rpos++];
f0100d1b:	a1 60 41 25 f0       	mov    0xf0254160,%eax
f0100d20:	8d 50 01             	lea    0x1(%eax),%edx
f0100d23:	89 15 60 41 25 f0    	mov    %edx,0xf0254160
f0100d29:	8a 80 60 3f 25 f0    	mov    -0xfdac0a0(%eax),%al
f0100d2f:	0f b6 c0             	movzbl %al,%eax
f0100d32:	89 45 ec             	mov    %eax,-0x14(%ebp)
			if (cons.rpos == CONSBUFSIZE)
f0100d35:	a1 60 41 25 f0       	mov    0xf0254160,%eax
f0100d3a:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100d3f:	75 0a                	jne    f0100d4b <cons_getc2+0xe4>
				cons.rpos = 0;
f0100d41:	c7 05 60 41 25 f0 00 	movl   $0x0,0xf0254160
f0100d48:	00 00 00 
			return c;
f0100d4b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0100d4e:	eb 05                	jmp    f0100d55 <cons_getc2+0xee>
		}
	}
	return 0;
f0100d50:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0100d55:	c9                   	leave  
f0100d56:	c3                   	ret    

f0100d57 <cons_putc>:

// output a character to the console
void
cons_putc(int c)
{
f0100d57:	55                   	push   %ebp
f0100d58:	89 e5                	mov    %esp,%ebp
f0100d5a:	83 ec 08             	sub    $0x8,%esp
	lpt_putc(c);
f0100d5d:	ff 75 08             	pushl  0x8(%ebp)
f0100d60:	e8 17 f8 ff ff       	call   f010057c <lpt_putc>
f0100d65:	83 c4 04             	add    $0x4,%esp
	cga_putc(c);
f0100d68:	83 ec 0c             	sub    $0xc,%esp
f0100d6b:	ff 75 08             	pushl  0x8(%ebp)
f0100d6e:	e8 43 f9 ff ff       	call   f01006b6 <cga_putc>
f0100d73:	83 c4 10             	add    $0x10,%esp
}
f0100d76:	90                   	nop
f0100d77:	c9                   	leave  
f0100d78:	c3                   	ret    

f0100d79 <console_initialize>:

// initialize the console devices
void
console_initialize(void)
{
f0100d79:	55                   	push   %ebp
f0100d7a:	89 e5                	mov    %esp,%ebp
f0100d7c:	83 ec 08             	sub    $0x8,%esp
	cga_init();
f0100d7f:	e8 6d f8 ff ff       	call   f01005f1 <cga_init>
	kbd_init();
f0100d84:	e8 2f fe ff ff       	call   f0100bb8 <kbd_init>
	serial_init();
f0100d89:	e8 de f6 ff ff       	call   f010046c <serial_init>

	if (!serial_exists)
f0100d8e:	a1 44 3f 25 f0       	mov    0xf0253f44,%eax
f0100d93:	85 c0                	test   %eax,%eax
f0100d95:	75 10                	jne    f0100da7 <console_initialize+0x2e>
		cprintf("Serial port does not exist!\n");
f0100d97:	83 ec 0c             	sub    $0xc,%esp
f0100d9a:	68 c9 0b 13 f0       	push   $0xf0130bc9
f0100d9f:	e8 8d 00 00 00       	call   f0100e31 <cprintf>
f0100da4:	83 c4 10             	add    $0x10,%esp
}
f0100da7:	90                   	nop
f0100da8:	c9                   	leave  
f0100da9:	c3                   	ret    

f0100daa <cputchar>:

// `High'-level console I/O.  Used by readline and cprintf.

void
cputchar(int c)
{
f0100daa:	55                   	push   %ebp
f0100dab:	89 e5                	mov    %esp,%ebp
f0100dad:	83 ec 08             	sub    $0x8,%esp
	cons_putc(c);
f0100db0:	83 ec 0c             	sub    $0xc,%esp
f0100db3:	ff 75 08             	pushl  0x8(%ebp)
f0100db6:	e8 9c ff ff ff       	call   f0100d57 <cons_putc>
f0100dbb:	83 c4 10             	add    $0x10,%esp
}
f0100dbe:	90                   	nop
f0100dbf:	c9                   	leave  
f0100dc0:	c3                   	ret    

f0100dc1 <getchar>:

int
getchar(void)
{
f0100dc1:	55                   	push   %ebp
f0100dc2:	89 e5                	mov    %esp,%ebp
f0100dc4:	83 ec 18             	sub    $0x18,%esp
	int c;

	while ((c = cons_getc()) == 0)
f0100dc7:	e8 40 fe ff ff       	call   f0100c0c <cons_getc>
f0100dcc:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100dcf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100dd3:	74 f2                	je     f0100dc7 <getchar+0x6>
		/* do nothing */;
	return c;
f0100dd5:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0100dd8:	c9                   	leave  
f0100dd9:	c3                   	ret    

f0100dda <iscons>:

int
iscons(int fdnum)
{
f0100dda:	55                   	push   %ebp
f0100ddb:	89 e5                	mov    %esp,%ebp
	// used by readline
	return 1;
f0100ddd:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0100de2:	5d                   	pop    %ebp
f0100de3:	c3                   	ret    

f0100de4 <putch>:
#include <inc/stdarg.h>


static void
putch(int ch, int *cnt)
{
f0100de4:	55                   	push   %ebp
f0100de5:	89 e5                	mov    %esp,%ebp
f0100de7:	83 ec 08             	sub    $0x8,%esp
	cputchar(ch);
f0100dea:	83 ec 0c             	sub    $0xc,%esp
f0100ded:	ff 75 08             	pushl  0x8(%ebp)
f0100df0:	e8 b5 ff ff ff       	call   f0100daa <cputchar>
f0100df5:	83 c4 10             	add    $0x10,%esp
	(*cnt)++;
f0100df8:	8b 45 0c             	mov    0xc(%ebp),%eax
f0100dfb:	8b 00                	mov    (%eax),%eax
f0100dfd:	8d 50 01             	lea    0x1(%eax),%edx
f0100e00:	8b 45 0c             	mov    0xc(%ebp),%eax
f0100e03:	89 10                	mov    %edx,(%eax)
}
f0100e05:	90                   	nop
f0100e06:	c9                   	leave  
f0100e07:	c3                   	ret    

f0100e08 <vcprintf>:

int
vcprintf(const char *fmt, va_list ap)
{
f0100e08:	55                   	push   %ebp
f0100e09:	89 e5                	mov    %esp,%ebp
f0100e0b:	83 ec 18             	sub    $0x18,%esp
	int cnt = 0;
f0100e0e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	vprintfmt((void*)putch, &cnt, fmt, ap);
f0100e15:	ff 75 0c             	pushl  0xc(%ebp)
f0100e18:	ff 75 08             	pushl  0x8(%ebp)
f0100e1b:	8d 45 f4             	lea    -0xc(%ebp),%eax
f0100e1e:	50                   	push   %eax
f0100e1f:	68 e4 0d 10 f0       	push   $0xf0100de4
f0100e24:	e8 a1 df 02 00       	call   f012edca <vprintfmt>
f0100e29:	83 c4 10             	add    $0x10,%esp
	return cnt;
f0100e2c:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0100e2f:	c9                   	leave  
f0100e30:	c3                   	ret    

f0100e31 <cprintf>:

int
cprintf(const char *fmt, ...)
{
f0100e31:	55                   	push   %ebp
f0100e32:	89 e5                	mov    %esp,%ebp
f0100e34:	83 ec 18             	sub    $0x18,%esp
	va_list ap;
	int cnt;

	va_start(ap, fmt);
f0100e37:	8d 45 0c             	lea    0xc(%ebp),%eax
f0100e3a:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cnt = vcprintf(fmt, ap);
f0100e3d:	8b 45 08             	mov    0x8(%ebp),%eax
f0100e40:	83 ec 08             	sub    $0x8,%esp
f0100e43:	ff 75 f4             	pushl  -0xc(%ebp)
f0100e46:	50                   	push   %eax
f0100e47:	e8 bc ff ff ff       	call   f0100e08 <vcprintf>
f0100e4c:	83 c4 10             	add    $0x10,%esp
f0100e4f:	89 45 f0             	mov    %eax,-0x10(%ebp)
	va_end(ap);

	return cnt;
f0100e52:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0100e55:	c9                   	leave  
f0100e56:	c3                   	ret    

f0100e57 <clearandwritecommand>:
#define HISTORY_MAX 19
int last_command_idx = -1;
char command_history[HISTORY_MAX+1][BUFLEN];
char empty[BUFLEN];

void clearandwritecommand(int* i, int commandidx, char* buf, int *last_index) {
f0100e57:	55                   	push   %ebp
f0100e58:	89 e5                	mov    %esp,%ebp
f0100e5a:	83 ec 18             	sub    $0x18,%esp
	for (int j = 0; j < *i; j++) {
f0100e5d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0100e64:	eb 10                	jmp    f0100e76 <clearandwritecommand+0x1f>
		cputchar('\b');
f0100e66:	83 ec 0c             	sub    $0xc,%esp
f0100e69:	6a 08                	push   $0x8
f0100e6b:	e8 3a ff ff ff       	call   f0100daa <cputchar>
f0100e70:	83 c4 10             	add    $0x10,%esp
int last_command_idx = -1;
char command_history[HISTORY_MAX+1][BUFLEN];
char empty[BUFLEN];

void clearandwritecommand(int* i, int commandidx, char* buf, int *last_index) {
	for (int j = 0; j < *i; j++) {
f0100e73:	ff 45 f4             	incl   -0xc(%ebp)
f0100e76:	8b 45 08             	mov    0x8(%ebp),%eax
f0100e79:	8b 00                	mov    (%eax),%eax
f0100e7b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0100e7e:	7f e6                	jg     f0100e66 <clearandwritecommand+0xf>
		cputchar('\b');
	}
	int len = strlen(command_history[commandidx]);
f0100e80:	8b 45 0c             	mov    0xc(%ebp),%eax
f0100e83:	c1 e0 0a             	shl    $0xa,%eax
f0100e86:	05 80 5e 2d f0       	add    $0xf02d5e80,%eax
f0100e8b:	83 ec 0c             	sub    $0xc,%esp
f0100e8e:	50                   	push   %eax
f0100e8f:	e8 e4 e5 02 00       	call   f012f478 <strlen>
f0100e94:	83 c4 10             	add    $0x10,%esp
f0100e97:	89 45 f0             	mov    %eax,-0x10(%ebp)
	memcpy(buf, empty, BUFLEN);
f0100e9a:	83 ec 04             	sub    $0x4,%esp
f0100e9d:	68 00 04 00 00       	push   $0x400
f0100ea2:	68 80 ae 2d f0       	push   $0xf02dae80
f0100ea7:	ff 75 10             	pushl  0x10(%ebp)
f0100eaa:	e8 e7 e7 02 00       	call   f012f696 <memcpy>
f0100eaf:	83 c4 10             	add    $0x10,%esp
	for (*i = 0; *i < len; (*i)++) {
f0100eb2:	8b 45 08             	mov    0x8(%ebp),%eax
f0100eb5:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0100ebb:	eb 52                	jmp    f0100f0f <clearandwritecommand+0xb8>
		cputchar(command_history[commandidx][*i]);
f0100ebd:	8b 45 08             	mov    0x8(%ebp),%eax
f0100ec0:	8b 00                	mov    (%eax),%eax
f0100ec2:	8b 55 0c             	mov    0xc(%ebp),%edx
f0100ec5:	c1 e2 0a             	shl    $0xa,%edx
f0100ec8:	01 d0                	add    %edx,%eax
f0100eca:	05 80 5e 2d f0       	add    $0xf02d5e80,%eax
f0100ecf:	8a 00                	mov    (%eax),%al
f0100ed1:	0f be c0             	movsbl %al,%eax
f0100ed4:	83 ec 0c             	sub    $0xc,%esp
f0100ed7:	50                   	push   %eax
f0100ed8:	e8 cd fe ff ff       	call   f0100daa <cputchar>
f0100edd:	83 c4 10             	add    $0x10,%esp
		buf[*i] = command_history[commandidx][*i];
f0100ee0:	8b 45 08             	mov    0x8(%ebp),%eax
f0100ee3:	8b 00                	mov    (%eax),%eax
f0100ee5:	89 c2                	mov    %eax,%edx
f0100ee7:	8b 45 10             	mov    0x10(%ebp),%eax
f0100eea:	01 c2                	add    %eax,%edx
f0100eec:	8b 45 08             	mov    0x8(%ebp),%eax
f0100eef:	8b 00                	mov    (%eax),%eax
f0100ef1:	8b 4d 0c             	mov    0xc(%ebp),%ecx
f0100ef4:	c1 e1 0a             	shl    $0xa,%ecx
f0100ef7:	01 c8                	add    %ecx,%eax
f0100ef9:	05 80 5e 2d f0       	add    $0xf02d5e80,%eax
f0100efe:	8a 00                	mov    (%eax),%al
f0100f00:	88 02                	mov    %al,(%edx)
	for (int j = 0; j < *i; j++) {
		cputchar('\b');
	}
	int len = strlen(command_history[commandidx]);
	memcpy(buf, empty, BUFLEN);
	for (*i = 0; *i < len; (*i)++) {
f0100f02:	8b 45 08             	mov    0x8(%ebp),%eax
f0100f05:	8b 00                	mov    (%eax),%eax
f0100f07:	8d 50 01             	lea    0x1(%eax),%edx
f0100f0a:	8b 45 08             	mov    0x8(%ebp),%eax
f0100f0d:	89 10                	mov    %edx,(%eax)
f0100f0f:	8b 45 08             	mov    0x8(%ebp),%eax
f0100f12:	8b 00                	mov    (%eax),%eax
f0100f14:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0100f17:	7c a4                	jl     f0100ebd <clearandwritecommand+0x66>
		cputchar(command_history[commandidx][*i]);
		buf[*i] = command_history[commandidx][*i];
	}
	*last_index = len;
f0100f19:	8b 45 14             	mov    0x14(%ebp),%eax
f0100f1c:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100f1f:	89 10                	mov    %edx,(%eax)
}
f0100f21:	90                   	nop
f0100f22:	c9                   	leave  
f0100f23:	c3                   	ret    

f0100f24 <RoundAutoCompleteCommandWithTheSamePrefix>:

void RoundAutoCompleteCommandWithTheSamePrefix(int old_buf_len, char* prefix_element,
		char* buf, int* i, int *last_index) {
f0100f24:	55                   	push   %ebp
f0100f25:	89 e5                	mov    %esp,%ebp
f0100f27:	83 ec 18             	sub    $0x18,%esp
	for (int j = 0; j < old_buf_len; j++) {
f0100f2a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0100f31:	eb 10                	jmp    f0100f43 <RoundAutoCompleteCommandWithTheSamePrefix+0x1f>
		cputchar('\b');
f0100f33:	83 ec 0c             	sub    $0xc,%esp
f0100f36:	6a 08                	push   $0x8
f0100f38:	e8 6d fe ff ff       	call   f0100daa <cputchar>
f0100f3d:	83 c4 10             	add    $0x10,%esp
	*last_index = len;
}

void RoundAutoCompleteCommandWithTheSamePrefix(int old_buf_len, char* prefix_element,
		char* buf, int* i, int *last_index) {
	for (int j = 0; j < old_buf_len; j++) {
f0100f40:	ff 45 f4             	incl   -0xc(%ebp)
f0100f43:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0100f46:	3b 45 08             	cmp    0x8(%ebp),%eax
f0100f49:	7c e8                	jl     f0100f33 <RoundAutoCompleteCommandWithTheSamePrefix+0xf>
		cputchar('\b');
	}
	int len = strlen(prefix_element);
f0100f4b:	83 ec 0c             	sub    $0xc,%esp
f0100f4e:	ff 75 0c             	pushl  0xc(%ebp)
f0100f51:	e8 22 e5 02 00       	call   f012f478 <strlen>
f0100f56:	83 c4 10             	add    $0x10,%esp
f0100f59:	89 45 f0             	mov    %eax,-0x10(%ebp)
	memcpy(buf, empty, BUFLEN);
f0100f5c:	83 ec 04             	sub    $0x4,%esp
f0100f5f:	68 00 04 00 00       	push   $0x400
f0100f64:	68 80 ae 2d f0       	push   $0xf02dae80
f0100f69:	ff 75 10             	pushl  0x10(%ebp)
f0100f6c:	e8 25 e7 02 00       	call   f012f696 <memcpy>
f0100f71:	83 c4 10             	add    $0x10,%esp
	for (*i = 0; *i < len; (*i)++) {
f0100f74:	8b 45 14             	mov    0x14(%ebp),%eax
f0100f77:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0100f7d:	eb 46                	jmp    f0100fc5 <RoundAutoCompleteCommandWithTheSamePrefix+0xa1>
		cputchar(prefix_element[*i]);
f0100f7f:	8b 45 14             	mov    0x14(%ebp),%eax
f0100f82:	8b 00                	mov    (%eax),%eax
f0100f84:	89 c2                	mov    %eax,%edx
f0100f86:	8b 45 0c             	mov    0xc(%ebp),%eax
f0100f89:	01 d0                	add    %edx,%eax
f0100f8b:	8a 00                	mov    (%eax),%al
f0100f8d:	0f be c0             	movsbl %al,%eax
f0100f90:	83 ec 0c             	sub    $0xc,%esp
f0100f93:	50                   	push   %eax
f0100f94:	e8 11 fe ff ff       	call   f0100daa <cputchar>
f0100f99:	83 c4 10             	add    $0x10,%esp
		buf[*i] = prefix_element[*i];
f0100f9c:	8b 45 14             	mov    0x14(%ebp),%eax
f0100f9f:	8b 00                	mov    (%eax),%eax
f0100fa1:	89 c2                	mov    %eax,%edx
f0100fa3:	8b 45 10             	mov    0x10(%ebp),%eax
f0100fa6:	01 c2                	add    %eax,%edx
f0100fa8:	8b 45 14             	mov    0x14(%ebp),%eax
f0100fab:	8b 00                	mov    (%eax),%eax
f0100fad:	89 c1                	mov    %eax,%ecx
f0100faf:	8b 45 0c             	mov    0xc(%ebp),%eax
f0100fb2:	01 c8                	add    %ecx,%eax
f0100fb4:	8a 00                	mov    (%eax),%al
f0100fb6:	88 02                	mov    %al,(%edx)
	for (int j = 0; j < old_buf_len; j++) {
		cputchar('\b');
	}
	int len = strlen(prefix_element);
	memcpy(buf, empty, BUFLEN);
	for (*i = 0; *i < len; (*i)++) {
f0100fb8:	8b 45 14             	mov    0x14(%ebp),%eax
f0100fbb:	8b 00                	mov    (%eax),%eax
f0100fbd:	8d 50 01             	lea    0x1(%eax),%edx
f0100fc0:	8b 45 14             	mov    0x14(%ebp),%eax
f0100fc3:	89 10                	mov    %edx,(%eax)
f0100fc5:	8b 45 14             	mov    0x14(%ebp),%eax
f0100fc8:	8b 00                	mov    (%eax),%eax
f0100fca:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0100fcd:	7c b0                	jl     f0100f7f <RoundAutoCompleteCommandWithTheSamePrefix+0x5b>
		cputchar(prefix_element[*i]);
		buf[*i] = prefix_element[*i];
	}
	*last_index = len;
f0100fcf:	8b 45 18             	mov    0x18(%ebp),%eax
f0100fd2:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100fd5:	89 10                	mov    %edx,(%eax)
}
f0100fd7:	90                   	nop
f0100fd8:	c9                   	leave  
f0100fd9:	c3                   	ret    

f0100fda <clear_prefix_list>:

char PrefixList[100][1024];
void clear_prefix_list()
{
f0100fda:	55                   	push   %ebp
f0100fdb:	89 e5                	mov    %esp,%ebp
f0100fdd:	83 ec 18             	sub    $0x18,%esp
	for (int i = 0; i < 100; ++i) {
f0100fe0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0100fe7:	eb 21                	jmp    f010100a <clear_prefix_list+0x30>
		memset(PrefixList[i], 0, 1024);}
f0100fe9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0100fec:	c1 e0 0a             	shl    $0xa,%eax
f0100fef:	05 80 ce 2b f0       	add    $0xf02bce80,%eax
f0100ff4:	83 ec 04             	sub    $0x4,%esp
f0100ff7:	68 00 04 00 00       	push   $0x400
f0100ffc:	6a 00                	push   $0x0
f0100ffe:	50                   	push   %eax
f0100fff:	e8 62 e6 02 00       	call   f012f666 <memset>
f0101004:	83 c4 10             	add    $0x10,%esp
}

char PrefixList[100][1024];
void clear_prefix_list()
{
	for (int i = 0; i < 100; ++i) {
f0101007:	ff 45 f4             	incl   -0xc(%ebp)
f010100a:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
f010100e:	7e d9                	jle    f0100fe9 <clear_prefix_list+0xf>
		memset(PrefixList[i], 0, 1024);}
}
f0101010:	90                   	nop
f0101011:	c9                   	leave  
f0101012:	c3                   	ret    

f0101013 <command_prompt_readline>:

void command_prompt_readline(const char *prompt, char* buf) {
f0101013:	55                   	push   %ebp
f0101014:	89 e5                	mov    %esp,%ebp
f0101016:	57                   	push   %edi
f0101017:	53                   	push   %ebx
f0101018:	81 ec d0 08 00 00    	sub    $0x8d0,%esp
	int i, c, echoing, lastIndex;
	if (prompt != NULL)
f010101e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0101022:	74 13                	je     f0101037 <command_prompt_readline+0x24>
		cprintf("%s", prompt);
f0101024:	83 ec 08             	sub    $0x8,%esp
f0101027:	ff 75 08             	pushl  0x8(%ebp)
f010102a:	68 e8 0b 13 f0       	push   $0xf0130be8
f010102f:	e8 fd fd ff ff       	call   f0100e31 <cprintf>
f0101034:	83 c4 10             	add    $0x10,%esp

	int commandidx = last_command_idx + 1;
f0101037:	a1 30 f5 18 f0       	mov    0xf018f530,%eax
f010103c:	40                   	inc    %eax
f010103d:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int prefix_list_idx = lastIndex = i = 0;
f0101040:	c7 85 78 ff ff ff 00 	movl   $0x0,-0x88(%ebp)
f0101047:	00 00 00 
f010104a:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0101050:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0101056:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f010105c:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int prefix_list_size, last_c;
	echoing = iscons(0);
f010105f:	83 ec 0c             	sub    $0xc,%esp
f0101062:	6a 00                	push   $0x0
f0101064:	e8 71 fd ff ff       	call   f0100dda <iscons>
f0101069:	83 c4 10             	add    $0x10,%esp
f010106c:	89 45 98             	mov    %eax,-0x68(%ebp)
	bool is_run_cmd = 0;
f010106f:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	bool is_tst_cmd = 0;
f0101076:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)

	while (1) {
		c = getchar();
f010107d:	e8 3f fd ff ff       	call   f0100dc1 <getchar>
f0101082:	89 45 94             	mov    %eax,-0x6c(%ebp)
		if (i > lastIndex)
f0101085:	8b 95 78 ff ff ff    	mov    -0x88(%ebp),%edx
f010108b:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0101091:	39 c2                	cmp    %eax,%edx
f0101093:	7e 0c                	jle    f01010a1 <command_prompt_readline+0x8e>
			lastIndex = i;
f0101095:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f010109b:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
		if (c < 0) {
f01010a1:	83 7d 94 00          	cmpl   $0x0,-0x6c(%ebp)
f01010a5:	79 22                	jns    f01010c9 <command_prompt_readline+0xb6>

			if (c != -E_EOF)
f01010a7:	83 7d 94 07          	cmpl   $0x7,-0x6c(%ebp)
f01010ab:	0f 84 94 0a 00 00    	je     f0101b45 <command_prompt_readline+0xb32>
				cprintf("read error: %e\n", c);
f01010b1:	83 ec 08             	sub    $0x8,%esp
f01010b4:	ff 75 94             	pushl  -0x6c(%ebp)
f01010b7:	68 eb 0b 13 f0       	push   $0xf0130beb
f01010bc:	e8 70 fd ff ff       	call   f0100e31 <cprintf>
f01010c1:	83 c4 10             	add    $0x10,%esp
			return;
f01010c4:	e9 7c 0a 00 00       	jmp    f0101b45 <command_prompt_readline+0xb32>
		} else if (c == 226) { // Up arrow
f01010c9:	81 7d 94 e2 00 00 00 	cmpl   $0xe2,-0x6c(%ebp)
f01010d0:	75 2a                	jne    f01010fc <command_prompt_readline+0xe9>
			if (commandidx)
f01010d2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01010d6:	74 03                	je     f01010db <command_prompt_readline+0xc8>
				commandidx--;
f01010d8:	ff 4d f4             	decl   -0xc(%ebp)
			clearandwritecommand(&i, commandidx, buf, &lastIndex);
f01010db:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
f01010e1:	50                   	push   %eax
f01010e2:	ff 75 0c             	pushl  0xc(%ebp)
f01010e5:	ff 75 f4             	pushl  -0xc(%ebp)
f01010e8:	8d 85 78 ff ff ff    	lea    -0x88(%ebp),%eax
f01010ee:	50                   	push   %eax
f01010ef:	e8 63 fd ff ff       	call   f0100e57 <clearandwritecommand>
f01010f4:	83 c4 10             	add    $0x10,%esp
f01010f7:	e9 32 0a 00 00       	jmp    f0101b2e <command_prompt_readline+0xb1b>
		} else if (c == 227) { // Down arrow
f01010fc:	81 7d 94 e3 00 00 00 	cmpl   $0xe3,-0x6c(%ebp)
f0101103:	75 3b                	jne    f0101140 <command_prompt_readline+0x12d>
			if (commandidx < last_command_idx)
f0101105:	a1 30 f5 18 f0       	mov    0xf018f530,%eax
f010110a:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010110d:	7d 03                	jge    f0101112 <command_prompt_readline+0xff>
				commandidx++;
f010110f:	ff 45 f4             	incl   -0xc(%ebp)
			if (last_command_idx >= 0)
f0101112:	a1 30 f5 18 f0       	mov    0xf018f530,%eax
f0101117:	85 c0                	test   %eax,%eax
f0101119:	0f 88 0f 0a 00 00    	js     f0101b2e <command_prompt_readline+0xb1b>
				clearandwritecommand(&i, commandidx, buf, &lastIndex);
f010111f:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
f0101125:	50                   	push   %eax
f0101126:	ff 75 0c             	pushl  0xc(%ebp)
f0101129:	ff 75 f4             	pushl  -0xc(%ebp)
f010112c:	8d 85 78 ff ff ff    	lea    -0x88(%ebp),%eax
f0101132:	50                   	push   %eax
f0101133:	e8 1f fd ff ff       	call   f0100e57 <clearandwritecommand>
f0101138:	83 c4 10             	add    $0x10,%esp
f010113b:	e9 ee 09 00 00       	jmp    f0101b2e <command_prompt_readline+0xb1b>
		} else if (c == 9) { // Tab button
f0101140:	83 7d 94 09          	cmpl   $0x9,-0x6c(%ebp)
f0101144:	0f 85 6d 07 00 00    	jne    f01018b7 <command_prompt_readline+0x8a4>
			if (last_c != 9) {
f010114a:	83 7d e8 09          	cmpl   $0x9,-0x18(%ebp)
f010114e:	0f 84 fc 06 00 00    	je     f0101850 <command_prompt_readline+0x83d>
				clear_prefix_list(PrefixList, 100);
f0101154:	83 ec 08             	sub    $0x8,%esp
f0101157:	6a 64                	push   $0x64
f0101159:	68 80 ce 2b f0       	push   $0xf02bce80
f010115e:	e8 77 fe ff ff       	call   f0100fda <clear_prefix_list>
f0101163:	83 c4 10             	add    $0x10,%esp
				if (strlen(buf) == 0 || last_c == 255)
f0101166:	83 ec 0c             	sub    $0xc,%esp
f0101169:	ff 75 0c             	pushl  0xc(%ebp)
f010116c:	e8 07 e3 02 00       	call   f012f478 <strlen>
f0101171:	83 c4 10             	add    $0x10,%esp
f0101174:	85 c0                	test   %eax,%eax
f0101176:	0f 84 bd 09 00 00    	je     f0101b39 <command_prompt_readline+0xb26>
f010117c:	81 7d e8 ff 00 00 00 	cmpl   $0xff,-0x18(%ebp)
f0101183:	0f 84 b0 09 00 00    	je     f0101b39 <command_prompt_readline+0xb26>
					continue;
				char *arguments[MAX_ARGUMENTS];
				int number_of_arguments = prefix_list_size = 0;
f0101189:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0101190:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101193:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
				char temp_buf[1024];
				strcpy(temp_buf, buf);
f0101199:	83 ec 08             	sub    $0x8,%esp
f010119c:	ff 75 0c             	pushl  0xc(%ebp)
f010119f:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
f01011a5:	50                   	push   %eax
f01011a6:	e8 1c e3 02 00       	call   f012f4c7 <strcpy>
f01011ab:	83 c4 10             	add    $0x10,%esp
				int bufLength = strlen(buf);
f01011ae:	83 ec 0c             	sub    $0xc,%esp
f01011b1:	ff 75 0c             	pushl  0xc(%ebp)
f01011b4:	e8 bf e2 02 00       	call   f012f478 <strlen>
f01011b9:	83 c4 10             	add    $0x10,%esp
f01011bc:	89 45 90             	mov    %eax,-0x70(%ebp)
				if (buf[bufLength - 1] == ' ')
f01011bf:	8b 45 90             	mov    -0x70(%ebp),%eax
f01011c2:	8d 50 ff             	lea    -0x1(%eax),%edx
f01011c5:	8b 45 0c             	mov    0xc(%ebp),%eax
f01011c8:	01 d0                	add    %edx,%eax
f01011ca:	8a 00                	mov    (%eax),%al
f01011cc:	3c 20                	cmp    $0x20,%al
f01011ce:	0f 84 6b 09 00 00    	je     f0101b3f <command_prompt_readline+0xb2c>
					continue;
				strsplit(temp_buf, WHITESPACE, arguments, &number_of_arguments);
f01011d4:	8d 85 70 ff ff ff    	lea    -0x90(%ebp),%eax
f01011da:	50                   	push   %eax
f01011db:	8d 85 30 f7 ff ff    	lea    -0x8d0(%ebp),%eax
f01011e1:	50                   	push   %eax
f01011e2:	68 fb 0b 13 f0       	push   $0xf0130bfb
f01011e7:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
f01011ed:	50                   	push   %eax
f01011ee:	e8 b9 e8 02 00       	call   f012faac <strsplit>
f01011f3:	83 c4 10             	add    $0x10,%esp
				int it_str = 0;
f01011f6:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
				if (number_of_arguments > 1) {
f01011fd:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0101203:	83 f8 01             	cmp    $0x1,%eax
f0101206:	0f 8e 28 01 00 00    	jle    f0101334 <command_prompt_readline+0x321>
					if((strcmp(arguments[0], "run") != 0) && (strcmp(arguments[0], "load") != 0)
f010120c:	8b 85 30 f7 ff ff    	mov    -0x8d0(%ebp),%eax
f0101212:	83 ec 08             	sub    $0x8,%esp
f0101215:	68 00 0c 13 f0       	push   $0xf0130c00
f010121a:	50                   	push   %eax
f010121b:	e8 64 e3 02 00       	call   f012f584 <strcmp>
f0101220:	83 c4 10             	add    $0x10,%esp
f0101223:	85 c0                	test   %eax,%eax
f0101225:	74 3c                	je     f0101263 <command_prompt_readline+0x250>
f0101227:	8b 85 30 f7 ff ff    	mov    -0x8d0(%ebp),%eax
f010122d:	83 ec 08             	sub    $0x8,%esp
f0101230:	68 04 0c 13 f0       	push   $0xf0130c04
f0101235:	50                   	push   %eax
f0101236:	e8 49 e3 02 00       	call   f012f584 <strcmp>
f010123b:	83 c4 10             	add    $0x10,%esp
f010123e:	85 c0                	test   %eax,%eax
f0101240:	74 21                	je     f0101263 <command_prompt_readline+0x250>
							&& (strcmp(arguments[0], "tst") != 0)) // to autocomplete only in case that the command take arguments and defined arguments (run & load & tst) only
f0101242:	8b 85 30 f7 ff ff    	mov    -0x8d0(%ebp),%eax
f0101248:	83 ec 08             	sub    $0x8,%esp
f010124b:	68 09 0c 13 f0       	push   $0xf0130c09
f0101250:	50                   	push   %eax
f0101251:	e8 2e e3 02 00       	call   f012f584 <strcmp>
f0101256:	83 c4 10             	add    $0x10,%esp
f0101259:	85 c0                	test   %eax,%eax
f010125b:	74 06                	je     f0101263 <command_prompt_readline+0x250>
						continue;
f010125d:	90                   	nop
				clearandwritecommand(&i, commandidx, buf, &lastIndex);
		} else if (c == 9) { // Tab button
			if (last_c != 9) {
				clear_prefix_list(PrefixList, 100);
				if (strlen(buf) == 0 || last_c == 255)
					continue;
f010125e:	e9 d6 08 00 00       	jmp    f0101b39 <command_prompt_readline+0xb26>
				int it_str = 0;
				if (number_of_arguments > 1) {
					if((strcmp(arguments[0], "run") != 0) && (strcmp(arguments[0], "load") != 0)
							&& (strcmp(arguments[0], "tst") != 0)) // to autocomplete only in case that the command take arguments and defined arguments (run & load & tst) only
						continue;
					if ((strcmp(arguments[0], "tst") == 0))
f0101263:	8b 85 30 f7 ff ff    	mov    -0x8d0(%ebp),%eax
f0101269:	83 ec 08             	sub    $0x8,%esp
f010126c:	68 09 0c 13 f0       	push   $0xf0130c09
f0101271:	50                   	push   %eax
f0101272:	e8 0d e3 02 00       	call   f012f584 <strcmp>
f0101277:	83 c4 10             	add    $0x10,%esp
f010127a:	85 c0                	test   %eax,%eax
f010127c:	75 09                	jne    f0101287 <command_prompt_readline+0x274>
					{
						is_tst_cmd = 1;
f010127e:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
f0101285:	eb 07                	jmp    f010128e <command_prompt_readline+0x27b>
					}
					else
					{
						is_run_cmd = 1;
f0101287:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
					}
					char temp[1024] = "";
f010128e:	c7 85 70 fb ff ff 00 	movl   $0x0,-0x490(%ebp)
f0101295:	00 00 00 
f0101298:	8d 95 74 fb ff ff    	lea    -0x48c(%ebp),%edx
f010129e:	b9 ff 00 00 00       	mov    $0xff,%ecx
f01012a3:	b8 00 00 00 00       	mov    $0x0,%eax
f01012a8:	89 d7                	mov    %edx,%edi
f01012aa:	f3 ab                	rep stos %eax,%es:(%edi)
					int TotalLen = bufLength - strlen(arguments[number_of_arguments - 1]);
f01012ac:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01012b2:	48                   	dec    %eax
f01012b3:	8b 84 85 30 f7 ff ff 	mov    -0x8d0(%ebp,%eax,4),%eax
f01012ba:	83 ec 0c             	sub    $0xc,%esp
f01012bd:	50                   	push   %eax
f01012be:	e8 b5 e1 02 00       	call   f012f478 <strlen>
f01012c3:	83 c4 10             	add    $0x10,%esp
f01012c6:	8b 55 90             	mov    -0x70(%ebp),%edx
f01012c9:	29 c2                	sub    %eax,%edx
f01012cb:	89 d0                	mov    %edx,%eax
f01012cd:	89 45 8c             	mov    %eax,-0x74(%ebp)
					for (int var = 0; var < TotalLen; ++var) {
f01012d0:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f01012d7:	eb 1d                	jmp    f01012f6 <command_prompt_readline+0x2e3>
						temp[it_str++] = buf[var];
f01012d9:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01012dc:	8d 50 01             	lea    0x1(%eax),%edx
f01012df:	89 55 dc             	mov    %edx,-0x24(%ebp)
f01012e2:	8b 4d d8             	mov    -0x28(%ebp),%ecx
f01012e5:	8b 55 0c             	mov    0xc(%ebp),%edx
f01012e8:	01 ca                	add    %ecx,%edx
f01012ea:	8a 12                	mov    (%edx),%dl
f01012ec:	88 94 05 70 fb ff ff 	mov    %dl,-0x490(%ebp,%eax,1)
					{
						is_run_cmd = 1;
					}
					char temp[1024] = "";
					int TotalLen = bufLength - strlen(arguments[number_of_arguments - 1]);
					for (int var = 0; var < TotalLen; ++var) {
f01012f3:	ff 45 d8             	incl   -0x28(%ebp)
f01012f6:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01012f9:	3b 45 8c             	cmp    -0x74(%ebp),%eax
f01012fc:	7c db                	jl     f01012d9 <command_prompt_readline+0x2c6>
						temp[it_str++] = buf[var];
					}
					strcpy(buf, temp);   //buf contains all arguments except the last one
f01012fe:	83 ec 08             	sub    $0x8,%esp
f0101301:	8d 85 70 fb ff ff    	lea    -0x490(%ebp),%eax
f0101307:	50                   	push   %eax
f0101308:	ff 75 0c             	pushl  0xc(%ebp)
f010130b:	e8 b7 e1 02 00       	call   f012f4c7 <strcpy>
f0101310:	83 c4 10             	add    $0x10,%esp
					strcpy(temp_buf, arguments[number_of_arguments - 1]);   //temp_buf contains the last argument
f0101313:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0101319:	48                   	dec    %eax
f010131a:	8b 84 85 30 f7 ff ff 	mov    -0x8d0(%ebp,%eax,4),%eax
f0101321:	83 ec 08             	sub    $0x8,%esp
f0101324:	50                   	push   %eax
f0101325:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
f010132b:	50                   	push   %eax
f010132c:	e8 96 e1 02 00       	call   f012f4c7 <strcpy>
f0101331:	83 c4 10             	add    $0x10,%esp
				}
				int it_prefix_list = 0;
f0101334:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
				if(number_of_arguments == 1)
f010133b:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0101341:	83 f8 01             	cmp    $0x1,%eax
f0101344:	0f 85 30 01 00 00    	jne    f010147a <command_prompt_readline+0x467>
				{
					for (int var = 0; var < NUM_OF_COMMANDS; ++var) {
f010134a:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
f0101351:	e9 0f 01 00 00       	jmp    f0101465 <command_prompt_readline+0x452>
						int x = strncmp(temp_buf, commands[var].name, strlen(temp_buf));
f0101356:	83 ec 0c             	sub    $0xc,%esp
f0101359:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
f010135f:	50                   	push   %eax
f0101360:	e8 13 e1 02 00       	call   f012f478 <strlen>
f0101365:	83 c4 10             	add    $0x10,%esp
f0101368:	89 c1                	mov    %eax,%ecx
f010136a:	8b 55 d0             	mov    -0x30(%ebp),%edx
f010136d:	89 d0                	mov    %edx,%eax
f010136f:	01 c0                	add    %eax,%eax
f0101371:	01 d0                	add    %edx,%eax
f0101373:	c1 e0 03             	shl    $0x3,%eax
f0101376:	05 40 f5 18 f0       	add    $0xf018f540,%eax
f010137b:	8b 00                	mov    (%eax),%eax
f010137d:	83 ec 04             	sub    $0x4,%esp
f0101380:	51                   	push   %ecx
f0101381:	50                   	push   %eax
f0101382:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
f0101388:	50                   	push   %eax
f0101389:	e8 2e e2 02 00       	call   f012f5bc <strncmp>
f010138e:	83 c4 10             	add    $0x10,%esp
f0101391:	89 45 88             	mov    %eax,-0x78(%ebp)
						if (x == 0) {
f0101394:	83 7d 88 00          	cmpl   $0x0,-0x78(%ebp)
f0101398:	0f 85 c4 00 00 00    	jne    f0101462 <command_prompt_readline+0x44f>
							it_str = -1;
f010139e:	c7 45 dc ff ff ff ff 	movl   $0xffffffff,-0x24(%ebp)
							char string[1024] = "";
f01013a5:	c7 85 70 fb ff ff 00 	movl   $0x0,-0x490(%ebp)
f01013ac:	00 00 00 
f01013af:	8d 95 74 fb ff ff    	lea    -0x48c(%ebp),%edx
f01013b5:	b9 ff 00 00 00       	mov    $0xff,%ecx
f01013ba:	b8 00 00 00 00       	mov    $0x0,%eax
f01013bf:	89 d7                	mov    %edx,%edi
f01013c1:	f3 ab                	rep stos %eax,%es:(%edi)
							for (int var3 = 0; var3 < strlen(commands[var].name); ++var3) {
f01013c3:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f01013ca:	eb 2d                	jmp    f01013f9 <command_prompt_readline+0x3e6>
								string[++it_str] = commands[var].name[var3];
f01013cc:	ff 45 dc             	incl   -0x24(%ebp)
f01013cf:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01013d2:	89 d0                	mov    %edx,%eax
f01013d4:	01 c0                	add    %eax,%eax
f01013d6:	01 d0                	add    %edx,%eax
f01013d8:	c1 e0 03             	shl    $0x3,%eax
f01013db:	05 40 f5 18 f0       	add    $0xf018f540,%eax
f01013e0:	8b 10                	mov    (%eax),%edx
f01013e2:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01013e5:	01 d0                	add    %edx,%eax
f01013e7:	8a 00                	mov    (%eax),%al
f01013e9:	8d 8d 70 fb ff ff    	lea    -0x490(%ebp),%ecx
f01013ef:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01013f2:	01 ca                	add    %ecx,%edx
f01013f4:	88 02                	mov    %al,(%edx)
					for (int var = 0; var < NUM_OF_COMMANDS; ++var) {
						int x = strncmp(temp_buf, commands[var].name, strlen(temp_buf));
						if (x == 0) {
							it_str = -1;
							char string[1024] = "";
							for (int var3 = 0; var3 < strlen(commands[var].name); ++var3) {
f01013f6:	ff 45 cc             	incl   -0x34(%ebp)
f01013f9:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01013fc:	89 d0                	mov    %edx,%eax
f01013fe:	01 c0                	add    %eax,%eax
f0101400:	01 d0                	add    %edx,%eax
f0101402:	c1 e0 03             	shl    $0x3,%eax
f0101405:	05 40 f5 18 f0       	add    $0xf018f540,%eax
f010140a:	8b 00                	mov    (%eax),%eax
f010140c:	83 ec 0c             	sub    $0xc,%esp
f010140f:	50                   	push   %eax
f0101410:	e8 63 e0 02 00       	call   f012f478 <strlen>
f0101415:	83 c4 10             	add    $0x10,%esp
f0101418:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f010141b:	7f af                	jg     f01013cc <command_prompt_readline+0x3b9>
								string[++it_str] = commands[var].name[var3];
							}
							memset(PrefixList[it_prefix_list], 0, 1024);
f010141d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0101420:	c1 e0 0a             	shl    $0xa,%eax
f0101423:	05 80 ce 2b f0       	add    $0xf02bce80,%eax
f0101428:	83 ec 04             	sub    $0x4,%esp
f010142b:	68 00 04 00 00       	push   $0x400
f0101430:	6a 00                	push   $0x0
f0101432:	50                   	push   %eax
f0101433:	e8 2e e2 02 00       	call   f012f666 <memset>
f0101438:	83 c4 10             	add    $0x10,%esp
							strncpy(PrefixList[it_prefix_list], string, it_str + 1);
f010143b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010143e:	40                   	inc    %eax
f010143f:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0101442:	c1 e2 0a             	shl    $0xa,%edx
f0101445:	81 c2 80 ce 2b f0    	add    $0xf02bce80,%edx
f010144b:	83 ec 04             	sub    $0x4,%esp
f010144e:	50                   	push   %eax
f010144f:	8d 85 70 fb ff ff    	lea    -0x490(%ebp),%eax
f0101455:	50                   	push   %eax
f0101456:	52                   	push   %edx
f0101457:	e8 99 e0 02 00       	call   f012f4f5 <strncpy>
f010145c:	83 c4 10             	add    $0x10,%esp
							it_prefix_list++;
f010145f:	ff 45 d4             	incl   -0x2c(%ebp)
					strcpy(temp_buf, arguments[number_of_arguments - 1]);   //temp_buf contains the last argument
				}
				int it_prefix_list = 0;
				if(number_of_arguments == 1)
				{
					for (int var = 0; var < NUM_OF_COMMANDS; ++var) {
f0101462:	ff 45 d0             	incl   -0x30(%ebp)
f0101465:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0101468:	a1 60 f9 18 f0       	mov    0xf018f960,%eax
f010146d:	39 c2                	cmp    %eax,%edx
f010146f:	0f 82 e1 fe ff ff    	jb     f0101356 <command_prompt_readline+0x343>
f0101475:	e9 fe 02 00 00       	jmp    f0101778 <command_prompt_readline+0x765>
						}
					}
				}
				else
				{
					if(is_run_cmd)
f010147a:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010147e:	0f 84 7b 01 00 00    	je     f01015ff <command_prompt_readline+0x5ec>
					{
						for (int var = 0; var < NUM_USER_PROGS; ++var) {
f0101484:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
f010148b:	e9 5c 01 00 00       	jmp    f01015ec <command_prompt_readline+0x5d9>
							int x = strncmp(temp_buf, ptr_UserPrograms[var].name, strlen(temp_buf));
f0101490:	83 ec 0c             	sub    $0xc,%esp
f0101493:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
f0101499:	50                   	push   %eax
f010149a:	e8 d9 df 02 00       	call   f012f478 <strlen>
f010149f:	83 c4 10             	add    $0x10,%esp
f01014a2:	89 c1                	mov    %eax,%ecx
f01014a4:	8b 1d 68 fa 18 f0    	mov    0xf018fa68,%ebx
f01014aa:	8b 55 c8             	mov    -0x38(%ebp),%edx
f01014ad:	89 d0                	mov    %edx,%eax
f01014af:	01 c0                	add    %eax,%eax
f01014b1:	01 d0                	add    %edx,%eax
f01014b3:	c1 e0 02             	shl    $0x2,%eax
f01014b6:	01 d8                	add    %ebx,%eax
f01014b8:	8b 00                	mov    (%eax),%eax
f01014ba:	83 ec 04             	sub    $0x4,%esp
f01014bd:	51                   	push   %ecx
f01014be:	50                   	push   %eax
f01014bf:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
f01014c5:	50                   	push   %eax
f01014c6:	e8 f1 e0 02 00       	call   f012f5bc <strncmp>
f01014cb:	83 c4 10             	add    $0x10,%esp
f01014ce:	89 45 84             	mov    %eax,-0x7c(%ebp)
							if (x == 0) {
f01014d1:	83 7d 84 00          	cmpl   $0x0,-0x7c(%ebp)
f01014d5:	0f 85 0e 01 00 00    	jne    f01015e9 <command_prompt_readline+0x5d6>
								it_str = -1;
f01014db:	c7 45 dc ff ff ff ff 	movl   $0xffffffff,-0x24(%ebp)
								char string[1024] = "";
f01014e2:	c7 85 70 fb ff ff 00 	movl   $0x0,-0x490(%ebp)
f01014e9:	00 00 00 
f01014ec:	8d 95 74 fb ff ff    	lea    -0x48c(%ebp),%edx
f01014f2:	b9 ff 00 00 00       	mov    $0xff,%ecx
f01014f7:	b8 00 00 00 00       	mov    $0x0,%eax
f01014fc:	89 d7                	mov    %edx,%edi
f01014fe:	f3 ab                	rep stos %eax,%es:(%edi)
								if (number_of_arguments > 1) {
f0101500:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0101506:	83 f8 01             	cmp    $0x1,%eax
f0101509:	7e 39                	jle    f0101544 <command_prompt_readline+0x531>
									for (int var2 = 0; var2 < strlen(buf); ++var2) {
f010150b:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
f0101512:	eb 1d                	jmp    f0101531 <command_prompt_readline+0x51e>
										string[++it_str] = buf[var2];
f0101514:	ff 45 dc             	incl   -0x24(%ebp)
f0101517:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f010151a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010151d:	01 d0                	add    %edx,%eax
f010151f:	8a 00                	mov    (%eax),%al
f0101521:	8d 8d 70 fb ff ff    	lea    -0x490(%ebp),%ecx
f0101527:	8b 55 dc             	mov    -0x24(%ebp),%edx
f010152a:	01 ca                	add    %ecx,%edx
f010152c:	88 02                	mov    %al,(%edx)
							int x = strncmp(temp_buf, ptr_UserPrograms[var].name, strlen(temp_buf));
							if (x == 0) {
								it_str = -1;
								char string[1024] = "";
								if (number_of_arguments > 1) {
									for (int var2 = 0; var2 < strlen(buf); ++var2) {
f010152e:	ff 45 c4             	incl   -0x3c(%ebp)
f0101531:	83 ec 0c             	sub    $0xc,%esp
f0101534:	ff 75 0c             	pushl  0xc(%ebp)
f0101537:	e8 3c df 02 00       	call   f012f478 <strlen>
f010153c:	83 c4 10             	add    $0x10,%esp
f010153f:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0101542:	7f d0                	jg     f0101514 <command_prompt_readline+0x501>
										string[++it_str] = buf[var2];
									}
								}
								for (int var3 = 0; var3 < strlen(ptr_UserPrograms[var].name) ; ++var3) {
f0101544:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
f010154b:	eb 30                	jmp    f010157d <command_prompt_readline+0x56a>
									string[++it_str] = ptr_UserPrograms[var].name[var3];
f010154d:	ff 45 dc             	incl   -0x24(%ebp)
f0101550:	8b 0d 68 fa 18 f0    	mov    0xf018fa68,%ecx
f0101556:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0101559:	89 d0                	mov    %edx,%eax
f010155b:	01 c0                	add    %eax,%eax
f010155d:	01 d0                	add    %edx,%eax
f010155f:	c1 e0 02             	shl    $0x2,%eax
f0101562:	01 c8                	add    %ecx,%eax
f0101564:	8b 10                	mov    (%eax),%edx
f0101566:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0101569:	01 d0                	add    %edx,%eax
f010156b:	8a 00                	mov    (%eax),%al
f010156d:	8d 8d 70 fb ff ff    	lea    -0x490(%ebp),%ecx
f0101573:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0101576:	01 ca                	add    %ecx,%edx
f0101578:	88 02                	mov    %al,(%edx)
								if (number_of_arguments > 1) {
									for (int var2 = 0; var2 < strlen(buf); ++var2) {
										string[++it_str] = buf[var2];
									}
								}
								for (int var3 = 0; var3 < strlen(ptr_UserPrograms[var].name) ; ++var3) {
f010157a:	ff 45 c0             	incl   -0x40(%ebp)
f010157d:	8b 0d 68 fa 18 f0    	mov    0xf018fa68,%ecx
f0101583:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0101586:	89 d0                	mov    %edx,%eax
f0101588:	01 c0                	add    %eax,%eax
f010158a:	01 d0                	add    %edx,%eax
f010158c:	c1 e0 02             	shl    $0x2,%eax
f010158f:	01 c8                	add    %ecx,%eax
f0101591:	8b 00                	mov    (%eax),%eax
f0101593:	83 ec 0c             	sub    $0xc,%esp
f0101596:	50                   	push   %eax
f0101597:	e8 dc de 02 00       	call   f012f478 <strlen>
f010159c:	83 c4 10             	add    $0x10,%esp
f010159f:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f01015a2:	7f a9                	jg     f010154d <command_prompt_readline+0x53a>
									string[++it_str] = ptr_UserPrograms[var].name[var3];
								}
								memset(PrefixList[it_prefix_list], 0, 1024);
f01015a4:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01015a7:	c1 e0 0a             	shl    $0xa,%eax
f01015aa:	05 80 ce 2b f0       	add    $0xf02bce80,%eax
f01015af:	83 ec 04             	sub    $0x4,%esp
f01015b2:	68 00 04 00 00       	push   $0x400
f01015b7:	6a 00                	push   $0x0
f01015b9:	50                   	push   %eax
f01015ba:	e8 a7 e0 02 00       	call   f012f666 <memset>
f01015bf:	83 c4 10             	add    $0x10,%esp
								strncpy(PrefixList[it_prefix_list], string, it_str + 1);
f01015c2:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01015c5:	40                   	inc    %eax
f01015c6:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f01015c9:	c1 e2 0a             	shl    $0xa,%edx
f01015cc:	81 c2 80 ce 2b f0    	add    $0xf02bce80,%edx
f01015d2:	83 ec 04             	sub    $0x4,%esp
f01015d5:	50                   	push   %eax
f01015d6:	8d 85 70 fb ff ff    	lea    -0x490(%ebp),%eax
f01015dc:	50                   	push   %eax
f01015dd:	52                   	push   %edx
f01015de:	e8 12 df 02 00       	call   f012f4f5 <strncpy>
f01015e3:	83 c4 10             	add    $0x10,%esp
								it_prefix_list++;
f01015e6:	ff 45 d4             	incl   -0x2c(%ebp)
				}
				else
				{
					if(is_run_cmd)
					{
						for (int var = 0; var < NUM_USER_PROGS; ++var) {
f01015e9:	ff 45 c8             	incl   -0x38(%ebp)
f01015ec:	a1 6c fa 18 f0       	mov    0xf018fa6c,%eax
f01015f1:	39 45 c8             	cmp    %eax,-0x38(%ebp)
f01015f4:	0f 8c 96 fe ff ff    	jl     f0101490 <command_prompt_readline+0x47d>
f01015fa:	e9 79 01 00 00       	jmp    f0101778 <command_prompt_readline+0x765>
								strncpy(PrefixList[it_prefix_list], string, it_str + 1);
								it_prefix_list++;
							}
						}
					}
					else if(is_tst_cmd)
f01015ff:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0101603:	0f 84 6f 01 00 00    	je     f0101778 <command_prompt_readline+0x765>
					{
						for (int var = 0; var < NUM_OF_TESTS; ++var) {
f0101609:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
f0101610:	e9 53 01 00 00       	jmp    f0101768 <command_prompt_readline+0x755>
							int x = strncmp(temp_buf, tests[var].name, strlen(temp_buf));
f0101615:	83 ec 0c             	sub    $0xc,%esp
f0101618:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
f010161e:	50                   	push   %eax
f010161f:	e8 54 de 02 00       	call   f012f478 <strlen>
f0101624:	83 c4 10             	add    $0x10,%esp
f0101627:	89 c1                	mov    %eax,%ecx
f0101629:	8b 55 bc             	mov    -0x44(%ebp),%edx
f010162c:	89 d0                	mov    %edx,%eax
f010162e:	01 c0                	add    %eax,%eax
f0101630:	01 d0                	add    %edx,%eax
f0101632:	c1 e0 02             	shl    $0x2,%eax
f0101635:	05 80 fa 18 f0       	add    $0xf018fa80,%eax
f010163a:	8b 00                	mov    (%eax),%eax
f010163c:	83 ec 04             	sub    $0x4,%esp
f010163f:	51                   	push   %ecx
f0101640:	50                   	push   %eax
f0101641:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
f0101647:	50                   	push   %eax
f0101648:	e8 6f df 02 00       	call   f012f5bc <strncmp>
f010164d:	83 c4 10             	add    $0x10,%esp
f0101650:	89 45 80             	mov    %eax,-0x80(%ebp)
							if (x == 0) {
f0101653:	83 7d 80 00          	cmpl   $0x0,-0x80(%ebp)
f0101657:	0f 85 08 01 00 00    	jne    f0101765 <command_prompt_readline+0x752>
								it_str = -1;
f010165d:	c7 45 dc ff ff ff ff 	movl   $0xffffffff,-0x24(%ebp)
								char string[1024] = "";
f0101664:	c7 85 70 fb ff ff 00 	movl   $0x0,-0x490(%ebp)
f010166b:	00 00 00 
f010166e:	8d 95 74 fb ff ff    	lea    -0x48c(%ebp),%edx
f0101674:	b9 ff 00 00 00       	mov    $0xff,%ecx
f0101679:	b8 00 00 00 00       	mov    $0x0,%eax
f010167e:	89 d7                	mov    %edx,%edi
f0101680:	f3 ab                	rep stos %eax,%es:(%edi)
								if (number_of_arguments > 1) {
f0101682:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0101688:	83 f8 01             	cmp    $0x1,%eax
f010168b:	7e 39                	jle    f01016c6 <command_prompt_readline+0x6b3>
									for (int var2 = 0; var2 < strlen(buf); ++var2) {
f010168d:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
f0101694:	eb 1d                	jmp    f01016b3 <command_prompt_readline+0x6a0>
										string[++it_str] = buf[var2];
f0101696:	ff 45 dc             	incl   -0x24(%ebp)
f0101699:	8b 55 b8             	mov    -0x48(%ebp),%edx
f010169c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010169f:	01 d0                	add    %edx,%eax
f01016a1:	8a 00                	mov    (%eax),%al
f01016a3:	8d 8d 70 fb ff ff    	lea    -0x490(%ebp),%ecx
f01016a9:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01016ac:	01 ca                	add    %ecx,%edx
f01016ae:	88 02                	mov    %al,(%edx)
							int x = strncmp(temp_buf, tests[var].name, strlen(temp_buf));
							if (x == 0) {
								it_str = -1;
								char string[1024] = "";
								if (number_of_arguments > 1) {
									for (int var2 = 0; var2 < strlen(buf); ++var2) {
f01016b0:	ff 45 b8             	incl   -0x48(%ebp)
f01016b3:	83 ec 0c             	sub    $0xc,%esp
f01016b6:	ff 75 0c             	pushl  0xc(%ebp)
f01016b9:	e8 ba dd 02 00       	call   f012f478 <strlen>
f01016be:	83 c4 10             	add    $0x10,%esp
f01016c1:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f01016c4:	7f d0                	jg     f0101696 <command_prompt_readline+0x683>
										string[++it_str] = buf[var2];
									}
								}
								for (int var3 = 0; var3 < strlen(tests[var].name) ; ++var3) {
f01016c6:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%ebp)
f01016cd:	eb 2d                	jmp    f01016fc <command_prompt_readline+0x6e9>
									string[++it_str] = tests[var].name[var3];
f01016cf:	ff 45 dc             	incl   -0x24(%ebp)
f01016d2:	8b 55 bc             	mov    -0x44(%ebp),%edx
f01016d5:	89 d0                	mov    %edx,%eax
f01016d7:	01 c0                	add    %eax,%eax
f01016d9:	01 d0                	add    %edx,%eax
f01016db:	c1 e0 02             	shl    $0x2,%eax
f01016de:	05 80 fa 18 f0       	add    $0xf018fa80,%eax
f01016e3:	8b 10                	mov    (%eax),%edx
f01016e5:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01016e8:	01 d0                	add    %edx,%eax
f01016ea:	8a 00                	mov    (%eax),%al
f01016ec:	8d 8d 70 fb ff ff    	lea    -0x490(%ebp),%ecx
f01016f2:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01016f5:	01 ca                	add    %ecx,%edx
f01016f7:	88 02                	mov    %al,(%edx)
								if (number_of_arguments > 1) {
									for (int var2 = 0; var2 < strlen(buf); ++var2) {
										string[++it_str] = buf[var2];
									}
								}
								for (int var3 = 0; var3 < strlen(tests[var].name) ; ++var3) {
f01016f9:	ff 45 b4             	incl   -0x4c(%ebp)
f01016fc:	8b 55 bc             	mov    -0x44(%ebp),%edx
f01016ff:	89 d0                	mov    %edx,%eax
f0101701:	01 c0                	add    %eax,%eax
f0101703:	01 d0                	add    %edx,%eax
f0101705:	c1 e0 02             	shl    $0x2,%eax
f0101708:	05 80 fa 18 f0       	add    $0xf018fa80,%eax
f010170d:	8b 00                	mov    (%eax),%eax
f010170f:	83 ec 0c             	sub    $0xc,%esp
f0101712:	50                   	push   %eax
f0101713:	e8 60 dd 02 00       	call   f012f478 <strlen>
f0101718:	83 c4 10             	add    $0x10,%esp
f010171b:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f010171e:	7f af                	jg     f01016cf <command_prompt_readline+0x6bc>
									string[++it_str] = tests[var].name[var3];
								}
								memset(PrefixList[it_prefix_list], 0, 1024);
f0101720:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0101723:	c1 e0 0a             	shl    $0xa,%eax
f0101726:	05 80 ce 2b f0       	add    $0xf02bce80,%eax
f010172b:	83 ec 04             	sub    $0x4,%esp
f010172e:	68 00 04 00 00       	push   $0x400
f0101733:	6a 00                	push   $0x0
f0101735:	50                   	push   %eax
f0101736:	e8 2b df 02 00       	call   f012f666 <memset>
f010173b:	83 c4 10             	add    $0x10,%esp
								strncpy(PrefixList[it_prefix_list], string, it_str + 1);
f010173e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0101741:	40                   	inc    %eax
f0101742:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0101745:	c1 e2 0a             	shl    $0xa,%edx
f0101748:	81 c2 80 ce 2b f0    	add    $0xf02bce80,%edx
f010174e:	83 ec 04             	sub    $0x4,%esp
f0101751:	50                   	push   %eax
f0101752:	8d 85 70 fb ff ff    	lea    -0x490(%ebp),%eax
f0101758:	50                   	push   %eax
f0101759:	52                   	push   %edx
f010175a:	e8 96 dd 02 00       	call   f012f4f5 <strncpy>
f010175f:	83 c4 10             	add    $0x10,%esp
								it_prefix_list++;
f0101762:	ff 45 d4             	incl   -0x2c(%ebp)
							}
						}
					}
					else if(is_tst_cmd)
					{
						for (int var = 0; var < NUM_OF_TESTS; ++var) {
f0101765:	ff 45 bc             	incl   -0x44(%ebp)
f0101768:	8b 55 bc             	mov    -0x44(%ebp),%edx
f010176b:	a1 1c fb 18 f0       	mov    0xf018fb1c,%eax
f0101770:	39 c2                	cmp    %eax,%edx
f0101772:	0f 82 9d fe ff ff    	jb     f0101615 <command_prompt_readline+0x602>
								it_prefix_list++;
							}
						}
					}
				}
				prefix_list_size = it_prefix_list;
f0101778:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010177b:	89 45 ec             	mov    %eax,-0x14(%ebp)
				if (it_prefix_list) {
f010177e:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f0101782:	0f 84 a6 03 00 00    	je     f0101b2e <command_prompt_readline+0xb1b>
					prefix_list_idx = it_str = 0;
f0101788:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f010178f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0101792:	89 45 f0             	mov    %eax,-0x10(%ebp)
					for (int var2 = 0; var2 < strlen(PrefixList[0]); ++var2) {
f0101795:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%ebp)
f010179c:	eb 1f                	jmp    f01017bd <command_prompt_readline+0x7aa>
						buf[it_str++] = PrefixList[0][var2];}
f010179e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01017a1:	8d 50 01             	lea    0x1(%eax),%edx
f01017a4:	89 55 dc             	mov    %edx,-0x24(%ebp)
f01017a7:	89 c2                	mov    %eax,%edx
f01017a9:	8b 45 0c             	mov    0xc(%ebp),%eax
f01017ac:	01 c2                	add    %eax,%edx
f01017ae:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01017b1:	05 80 ce 2b f0       	add    $0xf02bce80,%eax
f01017b6:	8a 00                	mov    (%eax),%al
f01017b8:	88 02                	mov    %al,(%edx)
					}
				}
				prefix_list_size = it_prefix_list;
				if (it_prefix_list) {
					prefix_list_idx = it_str = 0;
					for (int var2 = 0; var2 < strlen(PrefixList[0]); ++var2) {
f01017ba:	ff 45 b0             	incl   -0x50(%ebp)
f01017bd:	83 ec 0c             	sub    $0xc,%esp
f01017c0:	68 80 ce 2b f0       	push   $0xf02bce80
f01017c5:	e8 ae dc 02 00       	call   f012f478 <strlen>
f01017ca:	83 c4 10             	add    $0x10,%esp
f01017cd:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f01017d0:	7f cc                	jg     f010179e <command_prompt_readline+0x78b>
						buf[it_str++] = PrefixList[0][var2];}
					for (int var = 0; var < bufLength; ++var) {
f01017d2:	c7 45 ac 00 00 00 00 	movl   $0x0,-0x54(%ebp)
f01017d9:	eb 10                	jmp    f01017eb <command_prompt_readline+0x7d8>
						cputchar('\b');}
f01017db:	83 ec 0c             	sub    $0xc,%esp
f01017de:	6a 08                	push   $0x8
f01017e0:	e8 c5 f5 ff ff       	call   f0100daa <cputchar>
f01017e5:	83 c4 10             	add    $0x10,%esp
				prefix_list_size = it_prefix_list;
				if (it_prefix_list) {
					prefix_list_idx = it_str = 0;
					for (int var2 = 0; var2 < strlen(PrefixList[0]); ++var2) {
						buf[it_str++] = PrefixList[0][var2];}
					for (int var = 0; var < bufLength; ++var) {
f01017e8:	ff 45 ac             	incl   -0x54(%ebp)
f01017eb:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01017ee:	3b 45 90             	cmp    -0x70(%ebp),%eax
f01017f1:	7c e8                	jl     f01017db <command_prompt_readline+0x7c8>
						cputchar('\b');}
					for (int j = 0; j < strlen(buf); ++j) {
f01017f3:	c7 45 a8 00 00 00 00 	movl   $0x0,-0x58(%ebp)
f01017fa:	eb 1c                	jmp    f0101818 <command_prompt_readline+0x805>
						cputchar(buf[j]);}
f01017fc:	8b 55 a8             	mov    -0x58(%ebp),%edx
f01017ff:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101802:	01 d0                	add    %edx,%eax
f0101804:	8a 00                	mov    (%eax),%al
f0101806:	0f be c0             	movsbl %al,%eax
f0101809:	83 ec 0c             	sub    $0xc,%esp
f010180c:	50                   	push   %eax
f010180d:	e8 98 f5 ff ff       	call   f0100daa <cputchar>
f0101812:	83 c4 10             	add    $0x10,%esp
					prefix_list_idx = it_str = 0;
					for (int var2 = 0; var2 < strlen(PrefixList[0]); ++var2) {
						buf[it_str++] = PrefixList[0][var2];}
					for (int var = 0; var < bufLength; ++var) {
						cputchar('\b');}
					for (int j = 0; j < strlen(buf); ++j) {
f0101815:	ff 45 a8             	incl   -0x58(%ebp)
f0101818:	83 ec 0c             	sub    $0xc,%esp
f010181b:	ff 75 0c             	pushl  0xc(%ebp)
f010181e:	e8 55 dc 02 00       	call   f012f478 <strlen>
f0101823:	83 c4 10             	add    $0x10,%esp
f0101826:	3b 45 a8             	cmp    -0x58(%ebp),%eax
f0101829:	7f d1                	jg     f01017fc <command_prompt_readline+0x7e9>
						cputchar(buf[j]);}
					i = lastIndex = strlen(buf);
f010182b:	83 ec 0c             	sub    $0xc,%esp
f010182e:	ff 75 0c             	pushl  0xc(%ebp)
f0101831:	e8 42 dc 02 00       	call   f012f478 <strlen>
f0101836:	83 c4 10             	add    $0x10,%esp
f0101839:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f010183f:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0101845:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f010184b:	e9 de 02 00 00       	jmp    f0101b2e <command_prompt_readline+0xb1b>
				}
			}
			else {
				if (prefix_list_size > 0) {	int prev = prefix_list_idx;
f0101850:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0101854:	0f 8e d4 02 00 00    	jle    f0101b2e <command_prompt_readline+0xb1b>
f010185a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010185d:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
				prefix_list_idx = (prefix_list_idx + 1) % prefix_list_size;
f0101863:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101866:	40                   	inc    %eax
f0101867:	99                   	cltd   
f0101868:	f7 7d ec             	idivl  -0x14(%ebp)
f010186b:	89 55 f0             	mov    %edx,-0x10(%ebp)
				RoundAutoCompleteCommandWithTheSamePrefix(strlen(PrefixList[prev]), PrefixList[prefix_list_idx], buf, &i, &lastIndex);
f010186e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101871:	c1 e0 0a             	shl    $0xa,%eax
f0101874:	8d 98 80 ce 2b f0    	lea    -0xfd43180(%eax),%ebx
f010187a:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0101880:	c1 e0 0a             	shl    $0xa,%eax
f0101883:	05 80 ce 2b f0       	add    $0xf02bce80,%eax
f0101888:	83 ec 0c             	sub    $0xc,%esp
f010188b:	50                   	push   %eax
f010188c:	e8 e7 db 02 00       	call   f012f478 <strlen>
f0101891:	83 c4 10             	add    $0x10,%esp
f0101894:	83 ec 0c             	sub    $0xc,%esp
f0101897:	8d 95 74 ff ff ff    	lea    -0x8c(%ebp),%edx
f010189d:	52                   	push   %edx
f010189e:	8d 95 78 ff ff ff    	lea    -0x88(%ebp),%edx
f01018a4:	52                   	push   %edx
f01018a5:	ff 75 0c             	pushl  0xc(%ebp)
f01018a8:	53                   	push   %ebx
f01018a9:	50                   	push   %eax
f01018aa:	e8 75 f6 ff ff       	call   f0100f24 <RoundAutoCompleteCommandWithTheSamePrefix>
f01018af:	83 c4 20             	add    $0x20,%esp
f01018b2:	e9 77 02 00 00       	jmp    f0101b2e <command_prompt_readline+0xb1b>
				}
			}
		}

		else if (c == 228) { // left arrow
f01018b7:	81 7d 94 e4 00 00 00 	cmpl   $0xe4,-0x6c(%ebp)
f01018be:	75 2e                	jne    f01018ee <command_prompt_readline+0x8db>
			if (i > 0) {
f01018c0:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01018c6:	85 c0                	test   %eax,%eax
f01018c8:	0f 8e 60 02 00 00    	jle    f0101b2e <command_prompt_readline+0xb1b>
				i--;
f01018ce:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01018d4:	48                   	dec    %eax
f01018d5:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
				cputchar(c);
f01018db:	83 ec 0c             	sub    $0xc,%esp
f01018de:	ff 75 94             	pushl  -0x6c(%ebp)
f01018e1:	e8 c4 f4 ff ff       	call   f0100daa <cputchar>
f01018e6:	83 c4 10             	add    $0x10,%esp
f01018e9:	e9 40 02 00 00       	jmp    f0101b2e <command_prompt_readline+0xb1b>
			}
		} else if (c == 229) { // right arrow
f01018ee:	81 7d 94 e5 00 00 00 	cmpl   $0xe5,-0x6c(%ebp)
f01018f5:	75 34                	jne    f010192b <command_prompt_readline+0x918>
			if (i < lastIndex) {
f01018f7:	8b 95 78 ff ff ff    	mov    -0x88(%ebp),%edx
f01018fd:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0101903:	39 c2                	cmp    %eax,%edx
f0101905:	0f 8d 23 02 00 00    	jge    f0101b2e <command_prompt_readline+0xb1b>
				i++;
f010190b:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0101911:	40                   	inc    %eax
f0101912:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
				cputchar(c);
f0101918:	83 ec 0c             	sub    $0xc,%esp
f010191b:	ff 75 94             	pushl  -0x6c(%ebp)
f010191e:	e8 87 f4 ff ff       	call   f0100daa <cputchar>
f0101923:	83 c4 10             	add    $0x10,%esp
f0101926:	e9 03 02 00 00       	jmp    f0101b2e <command_prompt_readline+0xb1b>
			}
		}
		else if (c == 0xE9 && i > 0) {		 // KEY_DEL
f010192b:	81 7d 94 e9 00 00 00 	cmpl   $0xe9,-0x6c(%ebp)
f0101932:	75 4c                	jne    f0101980 <command_prompt_readline+0x96d>
f0101934:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f010193a:	85 c0                	test   %eax,%eax
f010193c:	7e 42                	jle    f0101980 <command_prompt_readline+0x96d>
			for (int var = i; var <= lastIndex; ++var) {
f010193e:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0101944:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f0101947:	eb 1a                	jmp    f0101963 <command_prompt_readline+0x950>
				buf[var] = buf[var + 1];
f0101949:	8b 55 a4             	mov    -0x5c(%ebp),%edx
f010194c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010194f:	01 c2                	add    %eax,%edx
f0101951:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0101954:	8d 48 01             	lea    0x1(%eax),%ecx
f0101957:	8b 45 0c             	mov    0xc(%ebp),%eax
f010195a:	01 c8                	add    %ecx,%eax
f010195c:	8a 00                	mov    (%eax),%al
f010195e:	88 02                	mov    %al,(%edx)
				i++;
				cputchar(c);
			}
		}
		else if (c == 0xE9 && i > 0) {		 // KEY_DEL
			for (int var = i; var <= lastIndex; ++var) {
f0101960:	ff 45 a4             	incl   -0x5c(%ebp)
f0101963:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0101969:	39 45 a4             	cmp    %eax,-0x5c(%ebp)
f010196c:	7e db                	jle    f0101949 <command_prompt_readline+0x936>
				buf[var] = buf[var + 1];
			}
			lastIndex--;
f010196e:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0101974:	48                   	dec    %eax
f0101975:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f010197b:	e9 ae 01 00 00       	jmp    f0101b2e <command_prompt_readline+0xb1b>
		}
		else if (c >= ' ' && i < BUFLEN - 1 && c != 229 && c != 228) {
f0101980:	83 7d 94 1f          	cmpl   $0x1f,-0x6c(%ebp)
f0101984:	7e 60                	jle    f01019e6 <command_prompt_readline+0x9d3>
f0101986:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f010198c:	3d fe 03 00 00       	cmp    $0x3fe,%eax
f0101991:	7f 53                	jg     f01019e6 <command_prompt_readline+0x9d3>
f0101993:	81 7d 94 e5 00 00 00 	cmpl   $0xe5,-0x6c(%ebp)
f010199a:	74 4a                	je     f01019e6 <command_prompt_readline+0x9d3>
f010199c:	81 7d 94 e4 00 00 00 	cmpl   $0xe4,-0x6c(%ebp)
f01019a3:	74 41                	je     f01019e6 <command_prompt_readline+0x9d3>
			if (echoing)
f01019a5:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
f01019a9:	74 0e                	je     f01019b9 <command_prompt_readline+0x9a6>
				cputchar(c);
f01019ab:	83 ec 0c             	sub    $0xc,%esp
f01019ae:	ff 75 94             	pushl  -0x6c(%ebp)
f01019b1:	e8 f4 f3 ff ff       	call   f0100daa <cputchar>
f01019b6:	83 c4 10             	add    $0x10,%esp
			buf[i++] = c;
f01019b9:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01019bf:	8d 50 01             	lea    0x1(%eax),%edx
f01019c2:	89 95 78 ff ff ff    	mov    %edx,-0x88(%ebp)
f01019c8:	89 c2                	mov    %eax,%edx
f01019ca:	8b 45 0c             	mov    0xc(%ebp),%eax
f01019cd:	01 d0                	add    %edx,%eax
f01019cf:	8b 55 94             	mov    -0x6c(%ebp),%edx
f01019d2:	88 10                	mov    %dl,(%eax)
			lastIndex++;
f01019d4:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01019da:	40                   	inc    %eax
f01019db:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f01019e1:	e9 48 01 00 00       	jmp    f0101b2e <command_prompt_readline+0xb1b>
		} else if (c == '\b' && i > 0) {
f01019e6:	83 7d 94 08          	cmpl   $0x8,-0x6c(%ebp)
f01019ea:	75 60                	jne    f0101a4c <command_prompt_readline+0xa39>
f01019ec:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01019f2:	85 c0                	test   %eax,%eax
f01019f4:	7e 56                	jle    f0101a4c <command_prompt_readline+0xa39>

			if (echoing)
f01019f6:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
f01019fa:	74 0e                	je     f0101a0a <command_prompt_readline+0x9f7>
				cputchar(c);
f01019fc:	83 ec 0c             	sub    $0xc,%esp
f01019ff:	ff 75 94             	pushl  -0x6c(%ebp)
f0101a02:	e8 a3 f3 ff ff       	call   f0100daa <cputchar>
f0101a07:	83 c4 10             	add    $0x10,%esp
			for (int var = i; var <= i; ++var) {
f0101a0a:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0101a10:	89 45 a0             	mov    %eax,-0x60(%ebp)
f0101a13:	eb 1a                	jmp    f0101a2f <command_prompt_readline+0xa1c>
				buf[var - 1] = buf[var];
f0101a15:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0101a18:	8d 50 ff             	lea    -0x1(%eax),%edx
f0101a1b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101a1e:	01 c2                	add    %eax,%edx
f0101a20:	8b 4d a0             	mov    -0x60(%ebp),%ecx
f0101a23:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101a26:	01 c8                	add    %ecx,%eax
f0101a28:	8a 00                	mov    (%eax),%al
f0101a2a:	88 02                	mov    %al,(%edx)
			lastIndex++;
		} else if (c == '\b' && i > 0) {

			if (echoing)
				cputchar(c);
			for (int var = i; var <= i; ++var) {
f0101a2c:	ff 45 a0             	incl   -0x60(%ebp)
f0101a2f:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0101a35:	39 45 a0             	cmp    %eax,-0x60(%ebp)
f0101a38:	7e db                	jle    f0101a15 <command_prompt_readline+0xa02>
				buf[var - 1] = buf[var];
			}
			i--;
f0101a3a:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0101a40:	48                   	dec    %eax
f0101a41:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f0101a47:	e9 e2 00 00 00       	jmp    f0101b2e <command_prompt_readline+0xb1b>
		} else if (c == '\n' || c == '\r') {
f0101a4c:	83 7d 94 0a          	cmpl   $0xa,-0x6c(%ebp)
f0101a50:	74 0a                	je     f0101a5c <command_prompt_readline+0xa49>
f0101a52:	83 7d 94 0d          	cmpl   $0xd,-0x6c(%ebp)
f0101a56:	0f 85 d2 00 00 00    	jne    f0101b2e <command_prompt_readline+0xb1b>

			if (echoing)
f0101a5c:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
f0101a60:	74 0e                	je     f0101a70 <command_prompt_readline+0xa5d>
				cputchar(c);
f0101a62:	83 ec 0c             	sub    $0xc,%esp
f0101a65:	ff 75 94             	pushl  -0x6c(%ebp)
f0101a68:	e8 3d f3 ff ff       	call   f0100daa <cputchar>
f0101a6d:	83 c4 10             	add    $0x10,%esp

			buf[lastIndex] = 0;
f0101a70:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0101a76:	89 c2                	mov    %eax,%edx
f0101a78:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101a7b:	01 d0                	add    %edx,%eax
f0101a7d:	c6 00 00             	movb   $0x0,(%eax)
			if (last_command_idx == HISTORY_MAX) {
f0101a80:	a1 30 f5 18 f0       	mov    0xf018f530,%eax
f0101a85:	83 f8 13             	cmp    $0x13,%eax
f0101a88:	75 56                	jne    f0101ae0 <command_prompt_readline+0xacd>
				for (int idx = 0; idx < HISTORY_MAX; idx++) {
f0101a8a:	c7 45 9c 00 00 00 00 	movl   $0x0,-0x64(%ebp)
f0101a91:	eb 2d                	jmp    f0101ac0 <command_prompt_readline+0xaad>
					memcpy(command_history[idx], command_history[idx + 1],
f0101a93:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0101a96:	40                   	inc    %eax
f0101a97:	c1 e0 0a             	shl    $0xa,%eax
f0101a9a:	8d 90 80 5e 2d f0    	lea    -0xfd2a180(%eax),%edx
f0101aa0:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0101aa3:	c1 e0 0a             	shl    $0xa,%eax
f0101aa6:	05 80 5e 2d f0       	add    $0xf02d5e80,%eax
f0101aab:	83 ec 04             	sub    $0x4,%esp
f0101aae:	68 00 04 00 00       	push   $0x400
f0101ab3:	52                   	push   %edx
f0101ab4:	50                   	push   %eax
f0101ab5:	e8 dc db 02 00       	call   f012f696 <memcpy>
f0101aba:	83 c4 10             	add    $0x10,%esp
			if (echoing)
				cputchar(c);

			buf[lastIndex] = 0;
			if (last_command_idx == HISTORY_MAX) {
				for (int idx = 0; idx < HISTORY_MAX; idx++) {
f0101abd:	ff 45 9c             	incl   -0x64(%ebp)
f0101ac0:	83 7d 9c 12          	cmpl   $0x12,-0x64(%ebp)
f0101ac4:	7e cd                	jle    f0101a93 <command_prompt_readline+0xa80>
					memcpy(command_history[idx], command_history[idx + 1],
							BUFLEN);
				}
				memcpy(command_history[HISTORY_MAX], buf, BUFLEN);
f0101ac6:	83 ec 04             	sub    $0x4,%esp
f0101ac9:	68 00 04 00 00       	push   $0x400
f0101ace:	ff 75 0c             	pushl  0xc(%ebp)
f0101ad1:	68 80 aa 2d f0       	push   $0xf02daa80
f0101ad6:	e8 bb db 02 00       	call   f012f696 <memcpy>
f0101adb:	83 c4 10             	add    $0x10,%esp
			} else if (strcmp(command_history[last_command_idx], buf) != 0) {
				memcpy(command_history[++last_command_idx], buf, BUFLEN);
			}
			return;
f0101ade:	eb 68                	jmp    f0101b48 <command_prompt_readline+0xb35>
				for (int idx = 0; idx < HISTORY_MAX; idx++) {
					memcpy(command_history[idx], command_history[idx + 1],
							BUFLEN);
				}
				memcpy(command_history[HISTORY_MAX], buf, BUFLEN);
			} else if (strcmp(command_history[last_command_idx], buf) != 0) {
f0101ae0:	a1 30 f5 18 f0       	mov    0xf018f530,%eax
f0101ae5:	c1 e0 0a             	shl    $0xa,%eax
f0101ae8:	05 80 5e 2d f0       	add    $0xf02d5e80,%eax
f0101aed:	83 ec 08             	sub    $0x8,%esp
f0101af0:	ff 75 0c             	pushl  0xc(%ebp)
f0101af3:	50                   	push   %eax
f0101af4:	e8 8b da 02 00       	call   f012f584 <strcmp>
f0101af9:	83 c4 10             	add    $0x10,%esp
f0101afc:	85 c0                	test   %eax,%eax
f0101afe:	74 48                	je     f0101b48 <command_prompt_readline+0xb35>
				memcpy(command_history[++last_command_idx], buf, BUFLEN);
f0101b00:	a1 30 f5 18 f0       	mov    0xf018f530,%eax
f0101b05:	40                   	inc    %eax
f0101b06:	a3 30 f5 18 f0       	mov    %eax,0xf018f530
f0101b0b:	a1 30 f5 18 f0       	mov    0xf018f530,%eax
f0101b10:	c1 e0 0a             	shl    $0xa,%eax
f0101b13:	05 80 5e 2d f0       	add    $0xf02d5e80,%eax
f0101b18:	83 ec 04             	sub    $0x4,%esp
f0101b1b:	68 00 04 00 00       	push   $0x400
f0101b20:	ff 75 0c             	pushl  0xc(%ebp)
f0101b23:	50                   	push   %eax
f0101b24:	e8 6d db 02 00       	call   f012f696 <memcpy>
f0101b29:	83 c4 10             	add    $0x10,%esp
			}
			return;
f0101b2c:	eb 1a                	jmp    f0101b48 <command_prompt_readline+0xb35>

		}
		last_c = c;
f0101b2e:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0101b31:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0101b34:	e9 44 f5 ff ff       	jmp    f010107d <command_prompt_readline+0x6a>
				clearandwritecommand(&i, commandidx, buf, &lastIndex);
		} else if (c == 9) { // Tab button
			if (last_c != 9) {
				clear_prefix_list(PrefixList, 100);
				if (strlen(buf) == 0 || last_c == 255)
					continue;
f0101b39:	90                   	nop
f0101b3a:	e9 3e f5 ff ff       	jmp    f010107d <command_prompt_readline+0x6a>
				int number_of_arguments = prefix_list_size = 0;
				char temp_buf[1024];
				strcpy(temp_buf, buf);
				int bufLength = strlen(buf);
				if (buf[bufLength - 1] == ' ')
					continue;
f0101b3f:	90                   	nop
			}
			return;

		}
		last_c = c;
	}
f0101b40:	e9 38 f5 ff ff       	jmp    f010107d <command_prompt_readline+0x6a>
			lastIndex = i;
		if (c < 0) {

			if (c != -E_EOF)
				cprintf("read error: %e\n", c);
			return;
f0101b45:	90                   	nop
f0101b46:	eb 01                	jmp    f0101b49 <command_prompt_readline+0xb36>
				}
				memcpy(command_history[HISTORY_MAX], buf, BUFLEN);
			} else if (strcmp(command_history[last_command_idx], buf) != 0) {
				memcpy(command_history[++last_command_idx], buf, BUFLEN);
			}
			return;
f0101b48:	90                   	nop

		}
		last_c = c;
	}
}
f0101b49:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0101b4c:	5b                   	pop    %ebx
f0101b4d:	5f                   	pop    %edi
f0101b4e:	5d                   	pop    %ebp
f0101b4f:	c3                   	ret    

f0101b50 <run_command_prompt>:
// ******************************************************************
// ******************************************************************

//invoke the command prompt
void run_command_prompt()
{
f0101b50:	55                   	push   %ebp
f0101b51:	89 e5                	mov    %esp,%ebp
f0101b53:	81 ec 08 04 00 00    	sub    $0x408,%esp
	/*2024*/
	LIST_INIT(&foundCommands);
f0101b59:	c7 05 50 ce 2b f0 00 	movl   $0x0,0xf02bce50
f0101b60:	00 00 00 
f0101b63:	c7 05 54 ce 2b f0 00 	movl   $0x0,0xf02bce54
f0101b6a:	00 00 00 
f0101b6d:	c7 05 5c ce 2b f0 00 	movl   $0x0,0xf02bce5c
f0101b74:	00 00 00 
		//readline("FOS> ", command_line);

		// ********** This DosKey supported readline function is a combined implementation from **********
		// ********** 		Mohamed Raafat & Mohamed Yousry, 3rd year students, FCIS, 2017		**********
		// ********** 				Combined, edited and modified by TA\Ghada Hamed				**********
		memset(command_line, 0, sizeof(command_line));
f0101b77:	83 ec 04             	sub    $0x4,%esp
f0101b7a:	68 00 04 00 00       	push   $0x400
f0101b7f:	6a 00                	push   $0x0
f0101b81:	8d 85 f8 fb ff ff    	lea    -0x408(%ebp),%eax
f0101b87:	50                   	push   %eax
f0101b88:	e8 d9 da 02 00       	call   f012f666 <memset>
f0101b8d:	83 c4 10             	add    $0x10,%esp
		command_prompt_readline("FOS> ", command_line);
f0101b90:	83 ec 08             	sub    $0x8,%esp
f0101b93:	8d 85 f8 fb ff ff    	lea    -0x408(%ebp),%eax
f0101b99:	50                   	push   %eax
f0101b9a:	68 0d 0c 13 f0       	push   $0xf0130c0d
f0101b9f:	e8 6f f4 ff ff       	call   f0101013 <command_prompt_readline>
f0101ba4:	83 c4 10             	add    $0x10,%esp

		//parse and execute the command
		if (command_line != NULL)
			if (execute_command(command_line) < 0)
f0101ba7:	83 ec 0c             	sub    $0xc,%esp
f0101baa:	8d 85 f8 fb ff ff    	lea    -0x408(%ebp),%eax
f0101bb0:	50                   	push   %eax
f0101bb1:	e8 0d 00 00 00       	call   f0101bc3 <execute_command>
f0101bb6:	83 c4 10             	add    $0x10,%esp
f0101bb9:	85 c0                	test   %eax,%eax
f0101bbb:	78 02                	js     f0101bbf <run_command_prompt+0x6f>
				break;
	}
f0101bbd:	eb b8                	jmp    f0101b77 <run_command_prompt+0x27>
		command_prompt_readline("FOS> ", command_line);

		//parse and execute the command
		if (command_line != NULL)
			if (execute_command(command_line) < 0)
				break;
f0101bbf:	90                   	nop
	}
}
f0101bc0:	90                   	nop
f0101bc1:	c9                   	leave  
f0101bc2:	c3                   	ret    

f0101bc3 <execute_command>:
#define WHITESPACE "\t\r\n "

//Function to parse any command and execute it
//(simply by calling its corresponding function)
int execute_command(char *command_string)
{
f0101bc3:	55                   	push   %ebp
f0101bc4:	89 e5                	mov    %esp,%ebp
f0101bc6:	83 ec 78             	sub    $0x78,%esp
	int number_of_arguments;
	//allocate array of char * of size MAX_ARGUMENTS = 16 found in string.h
	char *arguments[MAX_ARGUMENTS];


	strsplit(command_string, WHITESPACE, arguments, &number_of_arguments) ;
f0101bc9:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0101bcc:	50                   	push   %eax
f0101bcd:	8d 45 90             	lea    -0x70(%ebp),%eax
f0101bd0:	50                   	push   %eax
f0101bd1:	68 fb 0b 13 f0       	push   $0xf0130bfb
f0101bd6:	ff 75 08             	pushl  0x8(%ebp)
f0101bd9:	e8 ce de 02 00       	call   f012faac <strsplit>
f0101bde:	83 c4 10             	add    $0x10,%esp
	if (number_of_arguments == 0)
f0101be1:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0101be4:	85 c0                	test   %eax,%eax
f0101be6:	75 0a                	jne    f0101bf2 <execute_command+0x2f>
		return 0;
f0101be8:	b8 00 00 00 00       	mov    $0x0,%eax
f0101bed:	e9 a4 02 00 00       	jmp    f0101e96 <execute_command+0x2d3>

	int ret = process_command(number_of_arguments, arguments);
f0101bf2:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0101bf5:	83 ec 08             	sub    $0x8,%esp
f0101bf8:	8d 55 90             	lea    -0x70(%ebp),%edx
f0101bfb:	52                   	push   %edx
f0101bfc:	50                   	push   %eax
f0101bfd:	e8 e4 03 00 00       	call   f0101fe6 <process_command>
f0101c02:	83 c4 10             	add    $0x10,%esp
f0101c05:	89 45 e0             	mov    %eax,-0x20(%ebp)

	//cprintf("cmd %s, num of args %d, return %d\n", arguments[0], number_of_arguments, ret);

	if (ret == CMD_INVALID)
f0101c08:	83 7d e0 fd          	cmpl   $0xfffffffd,-0x20(%ebp)
f0101c0c:	75 19                	jne    f0101c27 <execute_command+0x64>
	{
		cprintf("Unknown command '%s'\n", arguments[0]);
f0101c0e:	8b 45 90             	mov    -0x70(%ebp),%eax
f0101c11:	83 ec 08             	sub    $0x8,%esp
f0101c14:	50                   	push   %eax
f0101c15:	68 13 0c 13 f0       	push   $0xf0130c13
f0101c1a:	e8 12 f2 ff ff       	call   f0100e31 <cprintf>
f0101c1f:	83 c4 10             	add    $0x10,%esp
f0101c22:	e9 6a 02 00 00       	jmp    f0101e91 <execute_command+0x2ce>
	}
	else if (ret == CMD_INV_NUM_ARGS)
f0101c27:	83 7d e0 fe          	cmpl   $0xfffffffe,-0x20(%ebp)
f0101c2b:	75 4f                	jne    f0101c7c <execute_command+0xb9>
	{
		int numOfFoundCmds = LIST_SIZE(&foundCommands);
f0101c2d:	a1 5c ce 2b f0       	mov    0xf02bce5c,%eax
f0101c32:	89 45 d8             	mov    %eax,-0x28(%ebp)
		if (numOfFoundCmds != 1)
f0101c35:	83 7d d8 01          	cmpl   $0x1,-0x28(%ebp)
f0101c39:	74 17                	je     f0101c52 <execute_command+0x8f>
		{
			panic("command is found but the list is either empty or contains more than one command!");
f0101c3b:	83 ec 04             	sub    $0x4,%esp
f0101c3e:	68 2c 0c 13 f0       	push   $0xf0130c2c
f0101c43:	68 3d 01 00 00       	push   $0x13d
f0101c48:	68 7d 0c 13 f0       	push   $0xf0130c7d
f0101c4d:	e8 5e e5 ff ff       	call   f01001b0 <_panic>
		}
		struct Command * cmd = LIST_FIRST(&foundCommands);
f0101c52:	a1 50 ce 2b f0       	mov    0xf02bce50,%eax
f0101c57:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		cprintf("%s: invalid number of args.\nDescription: %s\n", cmd->name, cmd->description);
f0101c5a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0101c5d:	8b 50 04             	mov    0x4(%eax),%edx
f0101c60:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0101c63:	8b 00                	mov    (%eax),%eax
f0101c65:	83 ec 04             	sub    $0x4,%esp
f0101c68:	52                   	push   %edx
f0101c69:	50                   	push   %eax
f0101c6a:	68 98 0c 13 f0       	push   $0xf0130c98
f0101c6f:	e8 bd f1 ff ff       	call   f0100e31 <cprintf>
f0101c74:	83 c4 10             	add    $0x10,%esp
f0101c77:	e9 15 02 00 00       	jmp    f0101e91 <execute_command+0x2ce>
	}
	else if (ret == CMD_MATCHED)
f0101c7c:	83 7d e0 ff          	cmpl   $0xffffffff,-0x20(%ebp)
f0101c80:	0f 85 e6 01 00 00    	jne    f0101e6c <execute_command+0x2a9>
	{
		int i = 1;
f0101c86:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		int numOfFoundCmds = LIST_SIZE(&foundCommands);
f0101c8d:	a1 5c ce 2b f0       	mov    0xf02bce5c,%eax
f0101c92:	89 45 dc             	mov    %eax,-0x24(%ebp)
		if (numOfFoundCmds == 0)
f0101c95:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0101c99:	75 17                	jne    f0101cb2 <execute_command+0xef>
		{
			panic("command is matched but the list is empty!");
f0101c9b:	83 ec 04             	sub    $0x4,%esp
f0101c9e:	68 c8 0c 13 f0       	push   $0xf0130cc8
f0101ca3:	68 48 01 00 00       	push   $0x148
f0101ca8:	68 7d 0c 13 f0       	push   $0xf0130c7d
f0101cad:	e8 fe e4 ff ff       	call   f01001b0 <_panic>
		}
		struct Command * cmd = NULL;
f0101cb2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		LIST_FOREACH(cmd, &foundCommands)
f0101cb9:	a1 50 ce 2b f0       	mov    0xf02bce50,%eax
f0101cbe:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0101cc1:	eb 28                	jmp    f0101ceb <execute_command+0x128>
		{
			cprintf("[%d] %s\n", i++, cmd->name);
f0101cc3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101cc6:	8b 10                	mov    (%eax),%edx
f0101cc8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101ccb:	8d 48 01             	lea    0x1(%eax),%ecx
f0101cce:	89 4d f4             	mov    %ecx,-0xc(%ebp)
f0101cd1:	83 ec 04             	sub    $0x4,%esp
f0101cd4:	52                   	push   %edx
f0101cd5:	50                   	push   %eax
f0101cd6:	68 f2 0c 13 f0       	push   $0xf0130cf2
f0101cdb:	e8 51 f1 ff ff       	call   f0100e31 <cprintf>
f0101ce0:	83 c4 10             	add    $0x10,%esp
		if (numOfFoundCmds == 0)
		{
			panic("command is matched but the list is empty!");
		}
		struct Command * cmd = NULL;
		LIST_FOREACH(cmd, &foundCommands)
f0101ce3:	a1 58 ce 2b f0       	mov    0xf02bce58,%eax
f0101ce8:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0101ceb:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0101cef:	74 08                	je     f0101cf9 <execute_command+0x136>
f0101cf1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101cf4:	8b 40 10             	mov    0x10(%eax),%eax
f0101cf7:	eb 05                	jmp    f0101cfe <execute_command+0x13b>
f0101cf9:	b8 00 00 00 00       	mov    $0x0,%eax
f0101cfe:	a3 58 ce 2b f0       	mov    %eax,0xf02bce58
f0101d03:	a1 58 ce 2b f0       	mov    0xf02bce58,%eax
f0101d08:	85 c0                	test   %eax,%eax
f0101d0a:	75 b7                	jne    f0101cc3 <execute_command+0x100>
f0101d0c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0101d10:	75 b1                	jne    f0101cc3 <execute_command+0x100>
		{
			cprintf("[%d] %s\n", i++, cmd->name);
		}
		cprintf("Please select the required command [1] to [%d] and press enter? or press any other key to cancel: ", numOfFoundCmds);
f0101d12:	83 ec 08             	sub    $0x8,%esp
f0101d15:	ff 75 dc             	pushl  -0x24(%ebp)
f0101d18:	68 fc 0c 13 f0       	push   $0xf0130cfc
f0101d1d:	e8 0f f1 ff ff       	call   f0100e31 <cprintf>
f0101d22:	83 c4 10             	add    $0x10,%esp
		char Chose = getchar();
f0101d25:	e8 97 f0 ff ff       	call   f0100dc1 <getchar>
f0101d2a:	88 45 ef             	mov    %al,-0x11(%ebp)
		cputchar(Chose);
f0101d2d:	0f be 45 ef          	movsbl -0x11(%ebp),%eax
f0101d31:	83 ec 0c             	sub    $0xc,%esp
f0101d34:	50                   	push   %eax
f0101d35:	e8 70 f0 ff ff       	call   f0100daa <cputchar>
f0101d3a:	83 c4 10             	add    $0x10,%esp
		int selection = 0;
f0101d3d:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
		while (Chose >= '0' && Chose <= '9')
f0101d44:	eb 40                	jmp    f0101d86 <execute_command+0x1c3>
		{
			selection = selection*10 + (Chose - '0') ;
f0101d46:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0101d49:	89 d0                	mov    %edx,%eax
f0101d4b:	c1 e0 02             	shl    $0x2,%eax
f0101d4e:	01 d0                	add    %edx,%eax
f0101d50:	01 c0                	add    %eax,%eax
f0101d52:	89 c2                	mov    %eax,%edx
f0101d54:	0f be 45 ef          	movsbl -0x11(%ebp),%eax
f0101d58:	83 e8 30             	sub    $0x30,%eax
f0101d5b:	01 d0                	add    %edx,%eax
f0101d5d:	89 45 e8             	mov    %eax,-0x18(%ebp)
			if (selection < 1 || selection > numOfFoundCmds)
f0101d60:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0101d64:	7e 2c                	jle    f0101d92 <execute_command+0x1cf>
f0101d66:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0101d69:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f0101d6c:	7f 24                	jg     f0101d92 <execute_command+0x1cf>
				break;

			Chose = getchar();
f0101d6e:	e8 4e f0 ff ff       	call   f0100dc1 <getchar>
f0101d73:	88 45 ef             	mov    %al,-0x11(%ebp)
			cputchar(Chose);
f0101d76:	0f be 45 ef          	movsbl -0x11(%ebp),%eax
f0101d7a:	83 ec 0c             	sub    $0xc,%esp
f0101d7d:	50                   	push   %eax
f0101d7e:	e8 27 f0 ff ff       	call   f0100daa <cputchar>
f0101d83:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("Please select the required command [1] to [%d] and press enter? or press any other key to cancel: ", numOfFoundCmds);
		char Chose = getchar();
		cputchar(Chose);
		int selection = 0;
		while (Chose >= '0' && Chose <= '9')
f0101d86:	80 7d ef 2f          	cmpb   $0x2f,-0x11(%ebp)
f0101d8a:	7e 06                	jle    f0101d92 <execute_command+0x1cf>
f0101d8c:	80 7d ef 39          	cmpb   $0x39,-0x11(%ebp)
f0101d90:	7e b4                	jle    f0101d46 <execute_command+0x183>
				break;

			Chose = getchar();
			cputchar(Chose);
		}
		cputchar('\n');
f0101d92:	83 ec 0c             	sub    $0xc,%esp
f0101d95:	6a 0a                	push   $0xa
f0101d97:	e8 0e f0 ff ff       	call   f0100daa <cputchar>
f0101d9c:	83 c4 10             	add    $0x10,%esp
		if (selection >= 1 && selection <= numOfFoundCmds)
f0101d9f:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0101da3:	0f 8e e8 00 00 00    	jle    f0101e91 <execute_command+0x2ce>
f0101da9:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0101dac:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f0101daf:	0f 8f dc 00 00 00    	jg     f0101e91 <execute_command+0x2ce>
		{
			int c = 1;
f0101db5:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
			LIST_FOREACH(cmd, &foundCommands)
f0101dbc:	a1 50 ce 2b f0       	mov    0xf02bce50,%eax
f0101dc1:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0101dc4:	eb 75                	jmp    f0101e3b <execute_command+0x278>
			{
				if (c++ == selection)
f0101dc6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0101dc9:	8d 50 01             	lea    0x1(%eax),%edx
f0101dcc:	89 55 e4             	mov    %edx,-0x1c(%ebp)
f0101dcf:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0101dd2:	75 5f                	jne    f0101e33 <execute_command+0x270>
				{
					if (cmd->num_of_args == 0)
f0101dd4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101dd7:	8b 40 0c             	mov    0xc(%eax),%eax
f0101dda:	85 c0                	test   %eax,%eax
f0101ddc:	75 31                	jne    f0101e0f <execute_command+0x24c>
					{
						cprintf("FOS> %s\n", cmd->name);
f0101dde:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101de1:	8b 00                	mov    (%eax),%eax
f0101de3:	83 ec 08             	sub    $0x8,%esp
f0101de6:	50                   	push   %eax
f0101de7:	68 5f 0d 13 f0       	push   $0xf0130d5f
f0101dec:	e8 40 f0 ff ff       	call   f0100e31 <cprintf>
f0101df1:	83 c4 10             	add    $0x10,%esp
						return cmd->function_to_execute(number_of_arguments, arguments);
f0101df4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101df7:	8b 40 08             	mov    0x8(%eax),%eax
f0101dfa:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0101dfd:	83 ec 08             	sub    $0x8,%esp
f0101e00:	8d 4d 90             	lea    -0x70(%ebp),%ecx
f0101e03:	51                   	push   %ecx
f0101e04:	52                   	push   %edx
f0101e05:	ff d0                	call   *%eax
f0101e07:	83 c4 10             	add    $0x10,%esp
f0101e0a:	e9 87 00 00 00       	jmp    f0101e96 <execute_command+0x2d3>
					}
					else
					{
						cprintf("%s: %s\n", cmd->name, cmd->description);
f0101e0f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101e12:	8b 50 04             	mov    0x4(%eax),%edx
f0101e15:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101e18:	8b 00                	mov    (%eax),%eax
f0101e1a:	83 ec 04             	sub    $0x4,%esp
f0101e1d:	52                   	push   %edx
f0101e1e:	50                   	push   %eax
f0101e1f:	68 68 0d 13 f0       	push   $0xf0130d68
f0101e24:	e8 08 f0 ff ff       	call   f0100e31 <cprintf>
f0101e29:	83 c4 10             	add    $0x10,%esp
						return 0;
f0101e2c:	b8 00 00 00 00       	mov    $0x0,%eax
f0101e31:	eb 63                	jmp    f0101e96 <execute_command+0x2d3>
		}
		cputchar('\n');
		if (selection >= 1 && selection <= numOfFoundCmds)
		{
			int c = 1;
			LIST_FOREACH(cmd, &foundCommands)
f0101e33:	a1 58 ce 2b f0       	mov    0xf02bce58,%eax
f0101e38:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0101e3b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0101e3f:	74 08                	je     f0101e49 <execute_command+0x286>
f0101e41:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101e44:	8b 40 10             	mov    0x10(%eax),%eax
f0101e47:	eb 05                	jmp    f0101e4e <execute_command+0x28b>
f0101e49:	b8 00 00 00 00       	mov    $0x0,%eax
f0101e4e:	a3 58 ce 2b f0       	mov    %eax,0xf02bce58
f0101e53:	a1 58 ce 2b f0       	mov    0xf02bce58,%eax
f0101e58:	85 c0                	test   %eax,%eax
f0101e5a:	0f 85 66 ff ff ff    	jne    f0101dc6 <execute_command+0x203>
f0101e60:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0101e64:	0f 85 5c ff ff ff    	jne    f0101dc6 <execute_command+0x203>
f0101e6a:	eb 25                	jmp    f0101e91 <execute_command+0x2ce>
			}
		}
	}
	else
	{
		return commands[ret].function_to_execute(number_of_arguments, arguments);
f0101e6c:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0101e6f:	89 d0                	mov    %edx,%eax
f0101e71:	01 c0                	add    %eax,%eax
f0101e73:	01 d0                	add    %edx,%eax
f0101e75:	c1 e0 03             	shl    $0x3,%eax
f0101e78:	05 48 f5 18 f0       	add    $0xf018f548,%eax
f0101e7d:	8b 00                	mov    (%eax),%eax
f0101e7f:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0101e82:	83 ec 08             	sub    $0x8,%esp
f0101e85:	8d 4d 90             	lea    -0x70(%ebp),%ecx
f0101e88:	51                   	push   %ecx
f0101e89:	52                   	push   %edx
f0101e8a:	ff d0                	call   *%eax
f0101e8c:	83 c4 10             	add    $0x10,%esp
f0101e8f:	eb 05                	jmp    f0101e96 <execute_command+0x2d3>
	}
	return 0;
f0101e91:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101e96:	c9                   	leave  
f0101e97:	c3                   	ret    

f0101e98 <subSequence>:
bool subSequence(char* str1, char* substr){
f0101e98:	55                   	push   %ebp
f0101e99:	89 e5                	mov    %esp,%ebp
f0101e9b:	83 ec 28             	sub    $0x28,%esp
	bool res=0;
f0101e9e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int len=strlen(str1);
f0101ea5:	83 ec 0c             	sub    $0xc,%esp
f0101ea8:	ff 75 08             	pushl  0x8(%ebp)
f0101eab:	e8 c8 d5 02 00       	call   f012f478 <strlen>
f0101eb0:	83 c4 10             	add    $0x10,%esp
f0101eb3:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int subl=strlen(substr);
f0101eb6:	83 ec 0c             	sub    $0xc,%esp
f0101eb9:	ff 75 0c             	pushl  0xc(%ebp)
f0101ebc:	e8 b7 d5 02 00       	call   f012f478 <strlen>
f0101ec1:	83 c4 10             	add    $0x10,%esp
f0101ec4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	int subi=0;
f0101ec7:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	for (int i=0;i<len;i++){
f0101ece:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0101ed5:	eb 1e                	jmp    f0101ef5 <subSequence+0x5d>
		if(str1[i]==substr[subi]){
f0101ed7:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0101eda:	8b 45 08             	mov    0x8(%ebp),%eax
f0101edd:	01 d0                	add    %edx,%eax
f0101edf:	8a 10                	mov    (%eax),%dl
f0101ee1:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f0101ee4:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101ee7:	01 c8                	add    %ecx,%eax
f0101ee9:	8a 00                	mov    (%eax),%al
f0101eeb:	38 c2                	cmp    %al,%dl
f0101eed:	75 03                	jne    f0101ef2 <subSequence+0x5a>
			subi++;
f0101eef:	ff 45 f0             	incl   -0x10(%ebp)
bool subSequence(char* str1, char* substr){
	bool res=0;
	int len=strlen(str1);
	int subl=strlen(substr);
	int subi=0;
	for (int i=0;i<len;i++){
f0101ef2:	ff 45 ec             	incl   -0x14(%ebp)
f0101ef5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101ef8:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0101efb:	7c da                	jl     f0101ed7 <subSequence+0x3f>
		if(str1[i]==substr[subi]){
			subi++;
		}
	}
	if(subi==subl){
f0101efd:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101f00:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0101f03:	75 07                	jne    f0101f0c <subSequence+0x74>
		res=1;
f0101f05:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
	}
	return res;
f0101f0c:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0101f0f:	c9                   	leave  
f0101f10:	c3                   	ret    

f0101f11 <erase>:
void erase(){
f0101f11:	55                   	push   %ebp
f0101f12:	89 e5                	mov    %esp,%ebp
f0101f14:	83 ec 18             	sub    $0x18,%esp
	struct Command *command;
	LIST_FOREACH(command,&(foundCommands)){
f0101f17:	a1 50 ce 2b f0       	mov    0xf02bce50,%eax
f0101f1c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0101f1f:	e9 90 00 00 00       	jmp    f0101fb4 <erase+0xa3>
		LIST_REMOVE(&foundCommands,command);
f0101f24:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0101f28:	75 17                	jne    f0101f41 <erase+0x30>
f0101f2a:	83 ec 04             	sub    $0x4,%esp
f0101f2d:	68 70 0d 13 f0       	push   $0xf0130d70
f0101f32:	68 8a 01 00 00       	push   $0x18a
f0101f37:	68 7d 0c 13 f0       	push   $0xf0130c7d
f0101f3c:	e8 6f e2 ff ff       	call   f01001b0 <_panic>
f0101f41:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101f44:	8b 40 10             	mov    0x10(%eax),%eax
f0101f47:	85 c0                	test   %eax,%eax
f0101f49:	74 11                	je     f0101f5c <erase+0x4b>
f0101f4b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101f4e:	8b 40 10             	mov    0x10(%eax),%eax
f0101f51:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0101f54:	8b 52 14             	mov    0x14(%edx),%edx
f0101f57:	89 50 14             	mov    %edx,0x14(%eax)
f0101f5a:	eb 0b                	jmp    f0101f67 <erase+0x56>
f0101f5c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101f5f:	8b 40 14             	mov    0x14(%eax),%eax
f0101f62:	a3 54 ce 2b f0       	mov    %eax,0xf02bce54
f0101f67:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101f6a:	8b 40 14             	mov    0x14(%eax),%eax
f0101f6d:	85 c0                	test   %eax,%eax
f0101f6f:	74 11                	je     f0101f82 <erase+0x71>
f0101f71:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101f74:	8b 40 14             	mov    0x14(%eax),%eax
f0101f77:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0101f7a:	8b 52 10             	mov    0x10(%edx),%edx
f0101f7d:	89 50 10             	mov    %edx,0x10(%eax)
f0101f80:	eb 0b                	jmp    f0101f8d <erase+0x7c>
f0101f82:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101f85:	8b 40 10             	mov    0x10(%eax),%eax
f0101f88:	a3 50 ce 2b f0       	mov    %eax,0xf02bce50
f0101f8d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101f90:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
f0101f97:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101f9a:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f0101fa1:	a1 5c ce 2b f0       	mov    0xf02bce5c,%eax
f0101fa6:	48                   	dec    %eax
f0101fa7:	a3 5c ce 2b f0       	mov    %eax,0xf02bce5c
	}
	return res;
}
void erase(){
	struct Command *command;
	LIST_FOREACH(command,&(foundCommands)){
f0101fac:	a1 58 ce 2b f0       	mov    0xf02bce58,%eax
f0101fb1:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0101fb4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0101fb8:	74 08                	je     f0101fc2 <erase+0xb1>
f0101fba:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101fbd:	8b 40 10             	mov    0x10(%eax),%eax
f0101fc0:	eb 05                	jmp    f0101fc7 <erase+0xb6>
f0101fc2:	b8 00 00 00 00       	mov    $0x0,%eax
f0101fc7:	a3 58 ce 2b f0       	mov    %eax,0xf02bce58
f0101fcc:	a1 58 ce 2b f0       	mov    0xf02bce58,%eax
f0101fd1:	85 c0                	test   %eax,%eax
f0101fd3:	0f 85 4b ff ff ff    	jne    f0101f24 <erase+0x13>
f0101fd9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0101fdd:	0f 85 41 ff ff ff    	jne    f0101f24 <erase+0x13>
		LIST_REMOVE(&foundCommands,command);
	}
}
f0101fe3:	90                   	nop
f0101fe4:	c9                   	leave  
f0101fe5:	c3                   	ret    

f0101fe6 <process_command>:
int process_command(int number_of_arguments, char** arguments)
{
f0101fe6:	55                   	push   %ebp
f0101fe7:	89 e5                	mov    %esp,%ebp
f0101fe9:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT'23.MS1 - #2] [1] PLAY WITH CODE! - process_command
	//Comment the following line before start coding...
	//panic("process_command is not implemented yet");


	int command_found = 0;
f0101fec:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	erase();
f0101ff3:	e8 19 ff ff ff       	call   f0101f11 <erase>
	for (int i = 0; i < NUM_OF_COMMANDS; i++)
f0101ff8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0101fff:	e9 19 02 00 00       	jmp    f010221d <process_command+0x237>
		{
			int strl= strlen(commands[i].name);
f0102004:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0102007:	89 d0                	mov    %edx,%eax
f0102009:	01 c0                	add    %eax,%eax
f010200b:	01 d0                	add    %edx,%eax
f010200d:	c1 e0 03             	shl    $0x3,%eax
f0102010:	05 40 f5 18 f0       	add    $0xf018f540,%eax
f0102015:	8b 00                	mov    (%eax),%eax
f0102017:	83 ec 0c             	sub    $0xc,%esp
f010201a:	50                   	push   %eax
f010201b:	e8 58 d4 02 00       	call   f012f478 <strlen>
f0102020:	83 c4 10             	add    $0x10,%esp
f0102023:	89 45 ec             	mov    %eax,-0x14(%ebp)
			if ((strncmp(arguments[0], commands[i].name,strl)) == 0)
f0102026:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f0102029:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010202c:	89 d0                	mov    %edx,%eax
f010202e:	01 c0                	add    %eax,%eax
f0102030:	01 d0                	add    %edx,%eax
f0102032:	c1 e0 03             	shl    $0x3,%eax
f0102035:	05 40 f5 18 f0       	add    $0xf018f540,%eax
f010203a:	8b 10                	mov    (%eax),%edx
f010203c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010203f:	8b 00                	mov    (%eax),%eax
f0102041:	83 ec 04             	sub    $0x4,%esp
f0102044:	51                   	push   %ecx
f0102045:	52                   	push   %edx
f0102046:	50                   	push   %eax
f0102047:	e8 70 d5 02 00       	call   f012f5bc <strncmp>
f010204c:	83 c4 10             	add    $0x10,%esp
f010204f:	85 c0                	test   %eax,%eax
f0102051:	0f 85 f5 00 00 00    	jne    f010214c <process_command+0x166>
			{
				if((number_of_arguments-1)==commands[i].num_of_args||(number_of_arguments>1&&commands[i].num_of_args==-1)){
f0102057:	8b 45 08             	mov    0x8(%ebp),%eax
f010205a:	8d 48 ff             	lea    -0x1(%eax),%ecx
f010205d:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0102060:	89 d0                	mov    %edx,%eax
f0102062:	01 c0                	add    %eax,%eax
f0102064:	01 d0                	add    %edx,%eax
f0102066:	c1 e0 03             	shl    $0x3,%eax
f0102069:	05 4c f5 18 f0       	add    $0xf018f54c,%eax
f010206e:	8b 00                	mov    (%eax),%eax
f0102070:	39 c1                	cmp    %eax,%ecx
f0102072:	74 1e                	je     f0102092 <process_command+0xac>
f0102074:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f0102078:	7e 27                	jle    f01020a1 <process_command+0xbb>
f010207a:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010207d:	89 d0                	mov    %edx,%eax
f010207f:	01 c0                	add    %eax,%eax
f0102081:	01 d0                	add    %edx,%eax
f0102083:	c1 e0 03             	shl    $0x3,%eax
f0102086:	05 4c f5 18 f0       	add    $0xf018f54c,%eax
f010208b:	8b 00                	mov    (%eax),%eax
f010208d:	83 f8 ff             	cmp    $0xffffffff,%eax
f0102090:	75 0f                	jne    f01020a1 <process_command+0xbb>
					command_found=1;
f0102092:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
					return i;
f0102099:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010209c:	e9 9e 01 00 00       	jmp    f010223f <process_command+0x259>
				}
				else{
					LIST_INSERT_TAIL(&foundCommands,&commands[i]);
f01020a1:	8b 15 54 ce 2b f0    	mov    0xf02bce54,%edx
f01020a7:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f01020aa:	89 c8                	mov    %ecx,%eax
f01020ac:	01 c0                	add    %eax,%eax
f01020ae:	01 c8                	add    %ecx,%eax
f01020b0:	c1 e0 03             	shl    $0x3,%eax
f01020b3:	05 54 f5 18 f0       	add    $0xf018f554,%eax
f01020b8:	89 10                	mov    %edx,(%eax)
f01020ba:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01020bd:	89 d0                	mov    %edx,%eax
f01020bf:	01 c0                	add    %eax,%eax
f01020c1:	01 d0                	add    %edx,%eax
f01020c3:	c1 e0 03             	shl    $0x3,%eax
f01020c6:	05 54 f5 18 f0       	add    $0xf018f554,%eax
f01020cb:	8b 00                	mov    (%eax),%eax
f01020cd:	85 c0                	test   %eax,%eax
f01020cf:	74 1c                	je     f01020ed <process_command+0x107>
f01020d1:	8b 15 54 ce 2b f0    	mov    0xf02bce54,%edx
f01020d7:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f01020da:	89 c8                	mov    %ecx,%eax
f01020dc:	01 c0                	add    %eax,%eax
f01020de:	01 c8                	add    %ecx,%eax
f01020e0:	c1 e0 03             	shl    $0x3,%eax
f01020e3:	05 40 f5 18 f0       	add    $0xf018f540,%eax
f01020e8:	89 42 10             	mov    %eax,0x10(%edx)
f01020eb:	eb 16                	jmp    f0102103 <process_command+0x11d>
f01020ed:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01020f0:	89 d0                	mov    %edx,%eax
f01020f2:	01 c0                	add    %eax,%eax
f01020f4:	01 d0                	add    %edx,%eax
f01020f6:	c1 e0 03             	shl    $0x3,%eax
f01020f9:	05 40 f5 18 f0       	add    $0xf018f540,%eax
f01020fe:	a3 50 ce 2b f0       	mov    %eax,0xf02bce50
f0102103:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0102106:	89 d0                	mov    %edx,%eax
f0102108:	01 c0                	add    %eax,%eax
f010210a:	01 d0                	add    %edx,%eax
f010210c:	c1 e0 03             	shl    $0x3,%eax
f010210f:	05 40 f5 18 f0       	add    $0xf018f540,%eax
f0102114:	a3 54 ce 2b f0       	mov    %eax,0xf02bce54
f0102119:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010211c:	89 d0                	mov    %edx,%eax
f010211e:	01 c0                	add    %eax,%eax
f0102120:	01 d0                	add    %edx,%eax
f0102122:	c1 e0 03             	shl    $0x3,%eax
f0102125:	05 50 f5 18 f0       	add    $0xf018f550,%eax
f010212a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0102130:	a1 5c ce 2b f0       	mov    0xf02bce5c,%eax
f0102135:	40                   	inc    %eax
f0102136:	a3 5c ce 2b f0       	mov    %eax,0xf02bce5c
					command_found=1;
f010213b:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
					return CMD_INV_NUM_ARGS;
f0102142:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
f0102147:	e9 f3 00 00 00       	jmp    f010223f <process_command+0x259>
				}
			}
			else if(subSequence(commands[i].name,arguments[0])){
f010214c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010214f:	8b 10                	mov    (%eax),%edx
f0102151:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f0102154:	89 c8                	mov    %ecx,%eax
f0102156:	01 c0                	add    %eax,%eax
f0102158:	01 c8                	add    %ecx,%eax
f010215a:	c1 e0 03             	shl    $0x3,%eax
f010215d:	05 40 f5 18 f0       	add    $0xf018f540,%eax
f0102162:	8b 00                	mov    (%eax),%eax
f0102164:	83 ec 08             	sub    $0x8,%esp
f0102167:	52                   	push   %edx
f0102168:	50                   	push   %eax
f0102169:	e8 2a fd ff ff       	call   f0101e98 <subSequence>
f010216e:	83 c4 10             	add    $0x10,%esp
f0102171:	85 c0                	test   %eax,%eax
f0102173:	0f 84 a1 00 00 00    	je     f010221a <process_command+0x234>
				command_found=1;
f0102179:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
				LIST_INSERT_TAIL(&foundCommands,&commands[i]);
f0102180:	8b 15 54 ce 2b f0    	mov    0xf02bce54,%edx
f0102186:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f0102189:	89 c8                	mov    %ecx,%eax
f010218b:	01 c0                	add    %eax,%eax
f010218d:	01 c8                	add    %ecx,%eax
f010218f:	c1 e0 03             	shl    $0x3,%eax
f0102192:	05 54 f5 18 f0       	add    $0xf018f554,%eax
f0102197:	89 10                	mov    %edx,(%eax)
f0102199:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010219c:	89 d0                	mov    %edx,%eax
f010219e:	01 c0                	add    %eax,%eax
f01021a0:	01 d0                	add    %edx,%eax
f01021a2:	c1 e0 03             	shl    $0x3,%eax
f01021a5:	05 54 f5 18 f0       	add    $0xf018f554,%eax
f01021aa:	8b 00                	mov    (%eax),%eax
f01021ac:	85 c0                	test   %eax,%eax
f01021ae:	74 1c                	je     f01021cc <process_command+0x1e6>
f01021b0:	8b 15 54 ce 2b f0    	mov    0xf02bce54,%edx
f01021b6:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f01021b9:	89 c8                	mov    %ecx,%eax
f01021bb:	01 c0                	add    %eax,%eax
f01021bd:	01 c8                	add    %ecx,%eax
f01021bf:	c1 e0 03             	shl    $0x3,%eax
f01021c2:	05 40 f5 18 f0       	add    $0xf018f540,%eax
f01021c7:	89 42 10             	mov    %eax,0x10(%edx)
f01021ca:	eb 16                	jmp    f01021e2 <process_command+0x1fc>
f01021cc:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01021cf:	89 d0                	mov    %edx,%eax
f01021d1:	01 c0                	add    %eax,%eax
f01021d3:	01 d0                	add    %edx,%eax
f01021d5:	c1 e0 03             	shl    $0x3,%eax
f01021d8:	05 40 f5 18 f0       	add    $0xf018f540,%eax
f01021dd:	a3 50 ce 2b f0       	mov    %eax,0xf02bce50
f01021e2:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01021e5:	89 d0                	mov    %edx,%eax
f01021e7:	01 c0                	add    %eax,%eax
f01021e9:	01 d0                	add    %edx,%eax
f01021eb:	c1 e0 03             	shl    $0x3,%eax
f01021ee:	05 40 f5 18 f0       	add    $0xf018f540,%eax
f01021f3:	a3 54 ce 2b f0       	mov    %eax,0xf02bce54
f01021f8:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01021fb:	89 d0                	mov    %edx,%eax
f01021fd:	01 c0                	add    %eax,%eax
f01021ff:	01 d0                	add    %edx,%eax
f0102201:	c1 e0 03             	shl    $0x3,%eax
f0102204:	05 50 f5 18 f0       	add    $0xf018f550,%eax
f0102209:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010220f:	a1 5c ce 2b f0       	mov    0xf02bce5c,%eax
f0102214:	40                   	inc    %eax
f0102215:	a3 5c ce 2b f0       	mov    %eax,0xf02bce5c
	//panic("process_command is not implemented yet");


	int command_found = 0;
	erase();
	for (int i = 0; i < NUM_OF_COMMANDS; i++)
f010221a:	ff 45 f0             	incl   -0x10(%ebp)
f010221d:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0102220:	a1 60 f9 18 f0       	mov    0xf018f960,%eax
f0102225:	39 c2                	cmp    %eax,%edx
f0102227:	0f 82 d7 fd ff ff    	jb     f0102004 <process_command+0x1e>
			else if(subSequence(commands[i].name,arguments[0])){
				command_found=1;
				LIST_INSERT_TAIL(&foundCommands,&commands[i]);
			}
		}
	if(command_found==0){
f010222d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102231:	75 07                	jne    f010223a <process_command+0x254>
		return CMD_INVALID;
f0102233:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
f0102238:	eb 05                	jmp    f010223f <process_command+0x259>
	}
	return CMD_MATCHED;
f010223a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
f010223f:	c9                   	leave  
f0102240:	c3                   	ret    

f0102241 <setKHeapPlacementStrategyCONTALLOC>:
#define KHP_PLACE_FIRSTFIT 	0x1
#define KHP_PLACE_BESTFIT 	0x2
#define KHP_PLACE_NEXTFIT 	0x3
#define KHP_PLACE_WORSTFIT 	0x4

static inline void setKHeapPlacementStrategyCONTALLOC(){_KHeapPlacementStrategy = KHP_PLACE_CONTALLOC;}
f0102241:	55                   	push   %ebp
f0102242:	89 e5                	mov    %esp,%ebp
f0102244:	c7 05 18 ce 2b f0 00 	movl   $0x0,0xf02bce18
f010224b:	00 00 00 
f010224e:	90                   	nop
f010224f:	5d                   	pop    %ebp
f0102250:	c3                   	ret    

f0102251 <setKHeapPlacementStrategyFIRSTFIT>:
static inline void setKHeapPlacementStrategyFIRSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_FIRSTFIT;}
f0102251:	55                   	push   %ebp
f0102252:	89 e5                	mov    %esp,%ebp
f0102254:	c7 05 18 ce 2b f0 01 	movl   $0x1,0xf02bce18
f010225b:	00 00 00 
f010225e:	90                   	nop
f010225f:	5d                   	pop    %ebp
f0102260:	c3                   	ret    

f0102261 <setKHeapPlacementStrategyBESTFIT>:
static inline void setKHeapPlacementStrategyBESTFIT(){_KHeapPlacementStrategy = KHP_PLACE_BESTFIT;}
f0102261:	55                   	push   %ebp
f0102262:	89 e5                	mov    %esp,%ebp
f0102264:	c7 05 18 ce 2b f0 02 	movl   $0x2,0xf02bce18
f010226b:	00 00 00 
f010226e:	90                   	nop
f010226f:	5d                   	pop    %ebp
f0102270:	c3                   	ret    

f0102271 <setKHeapPlacementStrategyNEXTFIT>:
static inline void setKHeapPlacementStrategyNEXTFIT(){_KHeapPlacementStrategy = KHP_PLACE_NEXTFIT;}
f0102271:	55                   	push   %ebp
f0102272:	89 e5                	mov    %esp,%ebp
f0102274:	c7 05 18 ce 2b f0 03 	movl   $0x3,0xf02bce18
f010227b:	00 00 00 
f010227e:	90                   	nop
f010227f:	5d                   	pop    %ebp
f0102280:	c3                   	ret    

f0102281 <setKHeapPlacementStrategyWORSTFIT>:
static inline void setKHeapPlacementStrategyWORSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_WORSTFIT;}
f0102281:	55                   	push   %ebp
f0102282:	89 e5                	mov    %esp,%ebp
f0102284:	c7 05 18 ce 2b f0 04 	movl   $0x4,0xf02bce18
f010228b:	00 00 00 
f010228e:	90                   	nop
f010228f:	5d                   	pop    %ebp
f0102290:	c3                   	ret    

f0102291 <isKHeapPlacementStrategyCONTALLOC>:

static inline uint8 isKHeapPlacementStrategyCONTALLOC(){if(_KHeapPlacementStrategy == KHP_PLACE_CONTALLOC) return 1; return 0;}
f0102291:	55                   	push   %ebp
f0102292:	89 e5                	mov    %esp,%ebp
f0102294:	a1 18 ce 2b f0       	mov    0xf02bce18,%eax
f0102299:	85 c0                	test   %eax,%eax
f010229b:	75 04                	jne    f01022a1 <isKHeapPlacementStrategyCONTALLOC+0x10>
f010229d:	b0 01                	mov    $0x1,%al
f010229f:	eb 02                	jmp    f01022a3 <isKHeapPlacementStrategyCONTALLOC+0x12>
f01022a1:	b0 00                	mov    $0x0,%al
f01022a3:	5d                   	pop    %ebp
f01022a4:	c3                   	ret    

f01022a5 <isKHeapPlacementStrategyFIRSTFIT>:
static inline uint8 isKHeapPlacementStrategyFIRSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_FIRSTFIT) return 1; return 0;}
f01022a5:	55                   	push   %ebp
f01022a6:	89 e5                	mov    %esp,%ebp
f01022a8:	a1 18 ce 2b f0       	mov    0xf02bce18,%eax
f01022ad:	83 f8 01             	cmp    $0x1,%eax
f01022b0:	75 04                	jne    f01022b6 <isKHeapPlacementStrategyFIRSTFIT+0x11>
f01022b2:	b0 01                	mov    $0x1,%al
f01022b4:	eb 02                	jmp    f01022b8 <isKHeapPlacementStrategyFIRSTFIT+0x13>
f01022b6:	b0 00                	mov    $0x0,%al
f01022b8:	5d                   	pop    %ebp
f01022b9:	c3                   	ret    

f01022ba <isKHeapPlacementStrategyBESTFIT>:
static inline uint8 isKHeapPlacementStrategyBESTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_BESTFIT) return 1; return 0;}
f01022ba:	55                   	push   %ebp
f01022bb:	89 e5                	mov    %esp,%ebp
f01022bd:	a1 18 ce 2b f0       	mov    0xf02bce18,%eax
f01022c2:	83 f8 02             	cmp    $0x2,%eax
f01022c5:	75 04                	jne    f01022cb <isKHeapPlacementStrategyBESTFIT+0x11>
f01022c7:	b0 01                	mov    $0x1,%al
f01022c9:	eb 02                	jmp    f01022cd <isKHeapPlacementStrategyBESTFIT+0x13>
f01022cb:	b0 00                	mov    $0x0,%al
f01022cd:	5d                   	pop    %ebp
f01022ce:	c3                   	ret    

f01022cf <isKHeapPlacementStrategyNEXTFIT>:
static inline uint8 isKHeapPlacementStrategyNEXTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_NEXTFIT) return 1; return 0;}
f01022cf:	55                   	push   %ebp
f01022d0:	89 e5                	mov    %esp,%ebp
f01022d2:	a1 18 ce 2b f0       	mov    0xf02bce18,%eax
f01022d7:	83 f8 03             	cmp    $0x3,%eax
f01022da:	75 04                	jne    f01022e0 <isKHeapPlacementStrategyNEXTFIT+0x11>
f01022dc:	b0 01                	mov    $0x1,%al
f01022de:	eb 02                	jmp    f01022e2 <isKHeapPlacementStrategyNEXTFIT+0x13>
f01022e0:	b0 00                	mov    $0x0,%al
f01022e2:	5d                   	pop    %ebp
f01022e3:	c3                   	ret    

f01022e4 <isKHeapPlacementStrategyWORSTFIT>:
static inline uint8 isKHeapPlacementStrategyWORSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_WORSTFIT) return 1; return 0;}
f01022e4:	55                   	push   %ebp
f01022e5:	89 e5                	mov    %esp,%ebp
f01022e7:	a1 18 ce 2b f0       	mov    0xf02bce18,%eax
f01022ec:	83 f8 04             	cmp    $0x4,%eax
f01022ef:	75 04                	jne    f01022f5 <isKHeapPlacementStrategyWORSTFIT+0x11>
f01022f1:	b0 01                	mov    $0x1,%al
f01022f3:	eb 02                	jmp    f01022f7 <isKHeapPlacementStrategyWORSTFIT+0x13>
f01022f5:	b0 00                	mov    $0x0,%al
f01022f7:	5d                   	pop    %ebp
f01022f8:	c3                   	ret    

f01022f9 <setUHeapPlacementStrategyFIRSTFIT>:

//***********************************
/*2015*/ //USER HEAP STRATEGIES
uint32 _UHeapPlacementStrategy;

static inline void setUHeapPlacementStrategyFIRSTFIT(){_UHeapPlacementStrategy = UHP_PLACE_FIRSTFIT;}
f01022f9:	55                   	push   %ebp
f01022fa:	89 e5                	mov    %esp,%ebp
f01022fc:	c7 05 ec cd 2b f0 01 	movl   $0x1,0xf02bcdec
f0102303:	00 00 00 
f0102306:	90                   	nop
f0102307:	5d                   	pop    %ebp
f0102308:	c3                   	ret    

f0102309 <setUHeapPlacementStrategyBESTFIT>:
static inline void setUHeapPlacementStrategyBESTFIT(){_UHeapPlacementStrategy = UHP_PLACE_BESTFIT;}
f0102309:	55                   	push   %ebp
f010230a:	89 e5                	mov    %esp,%ebp
f010230c:	c7 05 ec cd 2b f0 02 	movl   $0x2,0xf02bcdec
f0102313:	00 00 00 
f0102316:	90                   	nop
f0102317:	5d                   	pop    %ebp
f0102318:	c3                   	ret    

f0102319 <setUHeapPlacementStrategyNEXTFIT>:
static inline void setUHeapPlacementStrategyNEXTFIT(){_UHeapPlacementStrategy = UHP_PLACE_NEXTFIT;}
f0102319:	55                   	push   %ebp
f010231a:	89 e5                	mov    %esp,%ebp
f010231c:	c7 05 ec cd 2b f0 03 	movl   $0x3,0xf02bcdec
f0102323:	00 00 00 
f0102326:	90                   	nop
f0102327:	5d                   	pop    %ebp
f0102328:	c3                   	ret    

f0102329 <setUHeapPlacementStrategyWORSTFIT>:
static inline void setUHeapPlacementStrategyWORSTFIT(){_UHeapPlacementStrategy = UHP_PLACE_WORSTFIT;}
f0102329:	55                   	push   %ebp
f010232a:	89 e5                	mov    %esp,%ebp
f010232c:	c7 05 ec cd 2b f0 04 	movl   $0x4,0xf02bcdec
f0102333:	00 00 00 
f0102336:	90                   	nop
f0102337:	5d                   	pop    %ebp
f0102338:	c3                   	ret    

f0102339 <isUHeapPlacementStrategyFIRSTFIT>:

static inline uint8 isUHeapPlacementStrategyFIRSTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_FIRSTFIT) return 1; return 0;}
f0102339:	55                   	push   %ebp
f010233a:	89 e5                	mov    %esp,%ebp
f010233c:	a1 ec cd 2b f0       	mov    0xf02bcdec,%eax
f0102341:	83 f8 01             	cmp    $0x1,%eax
f0102344:	75 04                	jne    f010234a <isUHeapPlacementStrategyFIRSTFIT+0x11>
f0102346:	b0 01                	mov    $0x1,%al
f0102348:	eb 02                	jmp    f010234c <isUHeapPlacementStrategyFIRSTFIT+0x13>
f010234a:	b0 00                	mov    $0x0,%al
f010234c:	5d                   	pop    %ebp
f010234d:	c3                   	ret    

f010234e <isUHeapPlacementStrategyBESTFIT>:
static inline uint8 isUHeapPlacementStrategyBESTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_BESTFIT) return 1; return 0;}
f010234e:	55                   	push   %ebp
f010234f:	89 e5                	mov    %esp,%ebp
f0102351:	a1 ec cd 2b f0       	mov    0xf02bcdec,%eax
f0102356:	83 f8 02             	cmp    $0x2,%eax
f0102359:	75 04                	jne    f010235f <isUHeapPlacementStrategyBESTFIT+0x11>
f010235b:	b0 01                	mov    $0x1,%al
f010235d:	eb 02                	jmp    f0102361 <isUHeapPlacementStrategyBESTFIT+0x13>
f010235f:	b0 00                	mov    $0x0,%al
f0102361:	5d                   	pop    %ebp
f0102362:	c3                   	ret    

f0102363 <isUHeapPlacementStrategyNEXTFIT>:
static inline uint8 isUHeapPlacementStrategyNEXTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_NEXTFIT) return 1; return 0;}
f0102363:	55                   	push   %ebp
f0102364:	89 e5                	mov    %esp,%ebp
f0102366:	a1 ec cd 2b f0       	mov    0xf02bcdec,%eax
f010236b:	83 f8 03             	cmp    $0x3,%eax
f010236e:	75 04                	jne    f0102374 <isUHeapPlacementStrategyNEXTFIT+0x11>
f0102370:	b0 01                	mov    $0x1,%al
f0102372:	eb 02                	jmp    f0102376 <isUHeapPlacementStrategyNEXTFIT+0x13>
f0102374:	b0 00                	mov    $0x0,%al
f0102376:	5d                   	pop    %ebp
f0102377:	c3                   	ret    

f0102378 <isUHeapPlacementStrategyWORSTFIT>:
static inline uint8 isUHeapPlacementStrategyWORSTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_WORSTFIT) return 1; return 0;}
f0102378:	55                   	push   %ebp
f0102379:	89 e5                	mov    %esp,%ebp
f010237b:	a1 ec cd 2b f0       	mov    0xf02bcdec,%eax
f0102380:	83 f8 04             	cmp    $0x4,%eax
f0102383:	75 04                	jne    f0102389 <isUHeapPlacementStrategyWORSTFIT+0x11>
f0102385:	b0 01                	mov    $0x1,%al
f0102387:	eb 02                	jmp    f010238b <isUHeapPlacementStrategyWORSTFIT+0x13>
f0102389:	b0 00                	mov    $0x0,%al
f010238b:	5d                   	pop    %ebp
f010238c:	c3                   	ret    

f010238d <to_frame_info>:
{
	return to_frame_number(ptr_frame_info) << PGSHIFT;
}

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f010238d:	55                   	push   %ebp
f010238e:	89 e5                	mov    %esp,%ebp
f0102390:	53                   	push   %ebx
f0102391:	83 ec 04             	sub    $0x4,%esp
	if (PPN(physical_address) >= number_of_frames)
f0102394:	8b 45 08             	mov    0x8(%ebp),%eax
f0102397:	c1 e8 0c             	shr    $0xc,%eax
f010239a:	89 c2                	mov    %eax,%edx
f010239c:	a1 d0 cd 2b f0       	mov    0xf02bcdd0,%eax
f01023a1:	39 c2                	cmp    %eax,%edx
f01023a3:	72 14                	jb     f01023b9 <to_frame_info+0x2c>
		panic("to_frame_info called with invalid pa");
f01023a5:	83 ec 04             	sub    $0x4,%esp
f01023a8:	68 90 0d 13 f0       	push   $0xf0130d90
f01023ad:	6a 55                	push   $0x55
f01023af:	68 b8 0d 13 f0       	push   $0xf0130db8
f01023b4:	e8 f7 dd ff ff       	call   f01001b0 <_panic>
	return &frames_info[PPN(physical_address)];
f01023b9:	8b 0d 10 ce 2b f0    	mov    0xf02bce10,%ecx
f01023bf:	8b 45 08             	mov    0x8(%ebp),%eax
f01023c2:	c1 e8 0c             	shr    $0xc,%eax
f01023c5:	89 c2                	mov    %eax,%edx
f01023c7:	89 d0                	mov    %edx,%eax
f01023c9:	01 c0                	add    %eax,%eax
f01023cb:	01 d0                	add    %edx,%eax
f01023cd:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f01023d4:	01 d8                	add    %ebx,%eax
f01023d6:	01 d0                	add    %edx,%eax
f01023d8:	01 c8                	add    %ecx,%eax
}
f01023da:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01023dd:	c9                   	leave  
f01023de:	c3                   	ret    

f01023df <command_help>:

/***** Implementations of basic kernel command prompt commands *****/

//print name and description of each command
int command_help(int number_of_arguments, char **arguments)
{
f01023df:	55                   	push   %ebp
f01023e0:	89 e5                	mov    %esp,%ebp
f01023e2:	53                   	push   %ebx
f01023e3:	83 ec 14             	sub    $0x14,%esp

	int i;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f01023e6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01023ed:	eb 3b                	jmp    f010242a <command_help+0x4b>
		cprintf("%s - %s\n", commands[i].name, commands[i].description);
f01023ef:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01023f2:	89 d0                	mov    %edx,%eax
f01023f4:	01 c0                	add    %eax,%eax
f01023f6:	01 d0                	add    %edx,%eax
f01023f8:	c1 e0 03             	shl    $0x3,%eax
f01023fb:	05 44 f5 18 f0       	add    $0xf018f544,%eax
f0102400:	8b 10                	mov    (%eax),%edx
f0102402:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0102405:	89 c8                	mov    %ecx,%eax
f0102407:	01 c0                	add    %eax,%eax
f0102409:	01 c8                	add    %ecx,%eax
f010240b:	c1 e0 03             	shl    $0x3,%eax
f010240e:	05 40 f5 18 f0       	add    $0xf018f540,%eax
f0102413:	8b 00                	mov    (%eax),%eax
f0102415:	83 ec 04             	sub    $0x4,%esp
f0102418:	52                   	push   %edx
f0102419:	50                   	push   %eax
f010241a:	68 5f 16 13 f0       	push   $0xf013165f
f010241f:	e8 0d ea ff ff       	call   f0100e31 <cprintf>
f0102424:	83 c4 10             	add    $0x10,%esp
//print name and description of each command
int command_help(int number_of_arguments, char **arguments)
{

	int i;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f0102427:	ff 45 f4             	incl   -0xc(%ebp)
f010242a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010242d:	a1 60 f9 18 f0       	mov    0xf018f960,%eax
f0102432:	39 c2                	cmp    %eax,%edx
f0102434:	72 b9                	jb     f01023ef <command_help+0x10>
		cprintf("%s - %s\n", commands[i].name, commands[i].description);

	cprintf("-------------------\n");
f0102436:	83 ec 0c             	sub    $0xc,%esp
f0102439:	68 68 16 13 f0       	push   $0xf0131668
f010243e:	e8 ee e9 ff ff       	call   f0100e31 <cprintf>
f0102443:	83 c4 10             	add    $0x10,%esp

	for (i = 0; i < NUM_USER_PROGS; i++)
f0102446:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010244d:	eb 42                	jmp    f0102491 <command_help+0xb2>
		cprintf("run %s - %s [User Program]\n", ptr_UserPrograms[i].name, ptr_UserPrograms[i].desc);
f010244f:	8b 0d 68 fa 18 f0    	mov    0xf018fa68,%ecx
f0102455:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0102458:	89 d0                	mov    %edx,%eax
f010245a:	01 c0                	add    %eax,%eax
f010245c:	01 d0                	add    %edx,%eax
f010245e:	c1 e0 02             	shl    $0x2,%eax
f0102461:	01 c8                	add    %ecx,%eax
f0102463:	8b 50 04             	mov    0x4(%eax),%edx
f0102466:	8b 1d 68 fa 18 f0    	mov    0xf018fa68,%ebx
f010246c:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f010246f:	89 c8                	mov    %ecx,%eax
f0102471:	01 c0                	add    %eax,%eax
f0102473:	01 c8                	add    %ecx,%eax
f0102475:	c1 e0 02             	shl    $0x2,%eax
f0102478:	01 d8                	add    %ebx,%eax
f010247a:	8b 00                	mov    (%eax),%eax
f010247c:	83 ec 04             	sub    $0x4,%esp
f010247f:	52                   	push   %edx
f0102480:	50                   	push   %eax
f0102481:	68 7d 16 13 f0       	push   $0xf013167d
f0102486:	e8 a6 e9 ff ff       	call   f0100e31 <cprintf>
f010248b:	83 c4 10             	add    $0x10,%esp
	for (i = 0; i < NUM_OF_COMMANDS; i++)
		cprintf("%s - %s\n", commands[i].name, commands[i].description);

	cprintf("-------------------\n");

	for (i = 0; i < NUM_USER_PROGS; i++)
f010248e:	ff 45 f4             	incl   -0xc(%ebp)
f0102491:	a1 6c fa 18 f0       	mov    0xf018fa6c,%eax
f0102496:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f0102499:	7c b4                	jl     f010244f <command_help+0x70>
		cprintf("run %s - %s [User Program]\n", ptr_UserPrograms[i].name, ptr_UserPrograms[i].desc);
	return 0;
f010249b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01024a0:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01024a3:	c9                   	leave  
f01024a4:	c3                   	ret    

f01024a5 <command_str2lower>:
int command_str2lower(int number_of_arguments,char **arguments){
f01024a5:	55                   	push   %ebp
f01024a6:	89 e5                	mov    %esp,%ebp
f01024a8:	83 ec 18             	sub    $0x18,%esp
	char*s=str2lower(arguments[1],arguments[2]);
f01024ab:	8b 45 0c             	mov    0xc(%ebp),%eax
f01024ae:	83 c0 08             	add    $0x8,%eax
f01024b1:	8b 10                	mov    (%eax),%edx
f01024b3:	8b 45 0c             	mov    0xc(%ebp),%eax
f01024b6:	83 c0 04             	add    $0x4,%eax
f01024b9:	8b 00                	mov    (%eax),%eax
f01024bb:	83 ec 08             	sub    $0x8,%esp
f01024be:	52                   	push   %edx
f01024bf:	50                   	push   %eax
f01024c0:	e8 bb d6 02 00       	call   f012fb80 <str2lower>
f01024c5:	83 c4 10             	add    $0x10,%esp
f01024c8:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("%s\n",s);
f01024cb:	83 ec 08             	sub    $0x8,%esp
f01024ce:	ff 75 f4             	pushl  -0xc(%ebp)
f01024d1:	68 99 16 13 f0       	push   $0xf0131699
f01024d6:	e8 56 e9 ff ff       	call   f0100e31 <cprintf>
f01024db:	83 c4 10             	add    $0x10,%esp
return 0;
f01024de:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01024e3:	c9                   	leave  
f01024e4:	c3                   	ret    

f01024e5 <command_kernel_info>:
//print information about kernel addresses and kernel size
int command_kernel_info(int number_of_arguments, char **arguments )
{
f01024e5:	55                   	push   %ebp
f01024e6:	89 e5                	mov    %esp,%ebp
f01024e8:	83 ec 08             	sub    $0x8,%esp
	extern char start_of_kernel[], end_of_kernel_code_section[], start_of_uninitialized_data_section[], end_of_kernel[];

	cprintf("Special kernel symbols:\n");
f01024eb:	83 ec 0c             	sub    $0xc,%esp
f01024ee:	68 9d 16 13 f0       	push   $0xf013169d
f01024f3:	e8 39 e9 ff ff       	call   f0100e31 <cprintf>
f01024f8:	83 c4 10             	add    $0x10,%esp
	cprintf("  Start Address of the kernel 			%08x (virt)  %08x (phys)\n", start_of_kernel, start_of_kernel - KERNEL_BASE);
f01024fb:	b8 0c 00 10 00       	mov    $0x10000c,%eax
f0102500:	83 ec 04             	sub    $0x4,%esp
f0102503:	50                   	push   %eax
f0102504:	68 0c 00 10 f0       	push   $0xf010000c
f0102509:	68 b8 16 13 f0       	push   $0xf01316b8
f010250e:	e8 1e e9 ff ff       	call   f0100e31 <cprintf>
f0102513:	83 c4 10             	add    $0x10,%esp
	cprintf("  End address of kernel code  			%08x (virt)  %08x (phys)\n", end_of_kernel_code_section, end_of_kernel_code_section - KERNEL_BASE);
f0102516:	b8 29 0a 13 00       	mov    $0x130a29,%eax
f010251b:	83 ec 04             	sub    $0x4,%esp
f010251e:	50                   	push   %eax
f010251f:	68 29 0a 13 f0       	push   $0xf0130a29
f0102524:	68 f4 16 13 f0       	push   $0xf01316f4
f0102529:	e8 03 e9 ff ff       	call   f0100e31 <cprintf>
f010252e:	83 c4 10             	add    $0x10,%esp
	cprintf("  Start addr. of uninitialized data section 	%08x (virt)  %08x (phys)\n", start_of_uninitialized_data_section, start_of_uninitialized_data_section - KERNEL_BASE);
f0102531:	b8 06 3f 25 00       	mov    $0x253f06,%eax
f0102536:	83 ec 04             	sub    $0x4,%esp
f0102539:	50                   	push   %eax
f010253a:	68 06 3f 25 f0       	push   $0xf0253f06
f010253f:	68 30 17 13 f0       	push   $0xf0131730
f0102544:	e8 e8 e8 ff ff       	call   f0100e31 <cprintf>
f0102549:	83 c4 10             	add    $0x10,%esp
	cprintf("  End address of the kernel   			%08x (virt)  %08x (phys)\n", end_of_kernel, end_of_kernel - KERNEL_BASE);
f010254c:	b8 6c f5 2d 00       	mov    $0x2df56c,%eax
f0102551:	83 ec 04             	sub    $0x4,%esp
f0102554:	50                   	push   %eax
f0102555:	68 6c f5 2d f0       	push   $0xf02df56c
f010255a:	68 78 17 13 f0       	push   $0xf0131778
f010255f:	e8 cd e8 ff ff       	call   f0100e31 <cprintf>
f0102564:	83 c4 10             	add    $0x10,%esp
	cprintf("Kernel executable memory footprint: %d KB\n",
			(end_of_kernel-start_of_kernel+1023)/1024);
f0102567:	b8 6c f5 2d f0       	mov    $0xf02df56c,%eax
f010256c:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
f0102572:	b8 0c 00 10 f0       	mov    $0xf010000c,%eax
f0102577:	29 c2                	sub    %eax,%edx
f0102579:	89 d0                	mov    %edx,%eax
	cprintf("Special kernel symbols:\n");
	cprintf("  Start Address of the kernel 			%08x (virt)  %08x (phys)\n", start_of_kernel, start_of_kernel - KERNEL_BASE);
	cprintf("  End address of kernel code  			%08x (virt)  %08x (phys)\n", end_of_kernel_code_section, end_of_kernel_code_section - KERNEL_BASE);
	cprintf("  Start addr. of uninitialized data section 	%08x (virt)  %08x (phys)\n", start_of_uninitialized_data_section, start_of_uninitialized_data_section - KERNEL_BASE);
	cprintf("  End address of the kernel   			%08x (virt)  %08x (phys)\n", end_of_kernel, end_of_kernel - KERNEL_BASE);
	cprintf("Kernel executable memory footprint: %d KB\n",
f010257b:	85 c0                	test   %eax,%eax
f010257d:	79 05                	jns    f0102584 <command_kernel_info+0x9f>
f010257f:	05 ff 03 00 00       	add    $0x3ff,%eax
f0102584:	c1 f8 0a             	sar    $0xa,%eax
f0102587:	83 ec 08             	sub    $0x8,%esp
f010258a:	50                   	push   %eax
f010258b:	68 b4 17 13 f0       	push   $0xf01317b4
f0102590:	e8 9c e8 ff ff       	call   f0100e31 <cprintf>
f0102595:	83 c4 10             	add    $0x10,%esp
			(end_of_kernel-start_of_kernel+1023)/1024);
	return 0;
f0102598:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010259d:	c9                   	leave  
f010259e:	c3                   	ret    

f010259f <command_writeusermem>:

//*****************************************************************************************//
//***************************** PROJECT HELPERS COMMAND ***********************************//
//*****************************************************************************************//
int command_writeusermem(int number_of_arguments, char **arguments)
{
f010259f:	55                   	push   %ebp
f01025a0:	89 e5                	mov    %esp,%ebp
f01025a2:	83 ec 38             	sub    $0x38,%esp
	//deal with the kernel page directory
	if (number_of_arguments == 3)
f01025a5:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f01025a9:	75 37                	jne    f01025e2 <command_writeusermem+0x43>
	{
		unsigned int address = strtol(arguments[1], NULL, 16);
f01025ab:	8b 45 0c             	mov    0xc(%ebp),%eax
f01025ae:	83 c0 04             	add    $0x4,%eax
f01025b1:	8b 00                	mov    (%eax),%eax
f01025b3:	83 ec 04             	sub    $0x4,%esp
f01025b6:	6a 10                	push   $0x10
f01025b8:	6a 00                	push   $0x0
f01025ba:	50                   	push   %eax
f01025bb:	e8 18 d2 02 00       	call   f012f7d8 <strtol>
f01025c0:	83 c4 10             	add    $0x10,%esp
f01025c3:	89 45 dc             	mov    %eax,-0x24(%ebp)
		unsigned char *ptr = (unsigned char *)(address) ;
f01025c6:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01025c9:	89 45 d8             	mov    %eax,-0x28(%ebp)

		*ptr = arguments[2][0];
f01025cc:	8b 45 0c             	mov    0xc(%ebp),%eax
f01025cf:	83 c0 08             	add    $0x8,%eax
f01025d2:	8b 00                	mov    (%eax),%eax
f01025d4:	8a 00                	mov    (%eax),%al
f01025d6:	88 c2                	mov    %al,%dl
f01025d8:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01025db:	88 10                	mov    %dl,(%eax)
f01025dd:	e9 bc 00 00 00       	jmp    f010269e <command_writeusermem+0xff>
	}
	//deal with a page directory of specific environment
	else if (number_of_arguments == 4)
f01025e2:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f01025e6:	0f 85 a2 00 00 00    	jne    f010268e <command_writeusermem+0xef>
	{
		int32 envId = strtol(arguments[1],NULL, 10);
f01025ec:	8b 45 0c             	mov    0xc(%ebp),%eax
f01025ef:	83 c0 04             	add    $0x4,%eax
f01025f2:	8b 00                	mov    (%eax),%eax
f01025f4:	83 ec 04             	sub    $0x4,%esp
f01025f7:	6a 0a                	push   $0xa
f01025f9:	6a 00                	push   $0x0
f01025fb:	50                   	push   %eax
f01025fc:	e8 d7 d1 02 00       	call   f012f7d8 <strtol>
f0102601:	83 c4 10             	add    $0x10,%esp
f0102604:	89 45 f4             	mov    %eax,-0xc(%ebp)
		struct Env* env = NULL;
f0102607:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
		envid2env(envId, &env, 0 );
f010260e:	83 ec 04             	sub    $0x4,%esp
f0102611:	6a 00                	push   $0x0
f0102613:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0102616:	50                   	push   %eax
f0102617:	ff 75 f4             	pushl  -0xc(%ebp)
f010261a:	e8 26 78 00 00       	call   f0109e45 <envid2env>
f010261f:	83 c4 10             	add    $0x10,%esp

		int address = strtol(arguments[2], NULL, 16);
f0102622:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102625:	83 c0 08             	add    $0x8,%eax
f0102628:	8b 00                	mov    (%eax),%eax
f010262a:	83 ec 04             	sub    $0x4,%esp
f010262d:	6a 10                	push   $0x10
f010262f:	6a 00                	push   $0x0
f0102631:	50                   	push   %eax
f0102632:	e8 a1 d1 02 00       	call   f012f7d8 <strtol>
f0102637:	83 c4 10             	add    $0x10,%esp
f010263a:	89 45 f0             	mov    %eax,-0x10(%ebp)

		if(env == NULL) return 0;
f010263d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0102640:	85 c0                	test   %eax,%eax
f0102642:	75 07                	jne    f010264b <command_writeusermem+0xac>
f0102644:	b8 00 00 00 00       	mov    $0x0,%eax
f0102649:	eb 58                	jmp    f01026a3 <command_writeusermem+0x104>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f010264b:	0f 20 d8             	mov    %cr3,%eax
f010264e:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return val;
f0102651:	8b 45 e8             	mov    -0x18(%ebp),%eax

		uint32 oldDir = rcr3();
f0102654:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
		lcr3((uint32) (env->env_cr3));
f0102657:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010265a:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f0102660:	89 45 e0             	mov    %eax,-0x20(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0102663:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0102666:	0f 22 d8             	mov    %eax,%cr3

		unsigned char *ptr = (unsigned char *)(address) ;
f0102669:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010266c:	89 45 e4             	mov    %eax,-0x1c(%ebp)

		//Write the given Character
		*ptr = arguments[3][0];
f010266f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102672:	83 c0 0c             	add    $0xc,%eax
f0102675:	8b 00                	mov    (%eax),%eax
f0102677:	8a 00                	mov    (%eax),%al
f0102679:	88 c2                	mov    %al,%dl
f010267b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010267e:	88 10                	mov    %dl,(%eax)
f0102680:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0102683:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0102686:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0102689:	0f 22 d8             	mov    %eax,%cr3
f010268c:	eb 10                	jmp    f010269e <command_writeusermem+0xff>
		lcr3(oldDir);
	}
	else
	{
		cprintf("wum command: invalid number of arguments\n") ;
f010268e:	83 ec 0c             	sub    $0xc,%esp
f0102691:	68 e0 17 13 f0       	push   $0xf01317e0
f0102696:	e8 96 e7 ff ff       	call   f0100e31 <cprintf>
f010269b:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f010269e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01026a3:	c9                   	leave  
f01026a4:	c3                   	ret    

f01026a5 <command_writemem_k>:

int command_writemem_k(int number_of_arguments, char **arguments)
{
f01026a5:	55                   	push   %ebp
f01026a6:	89 e5                	mov    %esp,%ebp
f01026a8:	83 ec 18             	sub    $0x18,%esp
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
f01026ab:	8b 45 0c             	mov    0xc(%ebp),%eax
f01026ae:	83 c0 04             	add    $0x4,%eax
f01026b1:	8b 00                	mov    (%eax),%eax
f01026b3:	83 ec 04             	sub    $0x4,%esp
f01026b6:	6a 10                	push   $0x10
f01026b8:	6a 00                	push   $0x0
f01026ba:	50                   	push   %eax
f01026bb:	e8 18 d1 02 00       	call   f012f7d8 <strtol>
f01026c0:	83 c4 10             	add    $0x10,%esp
f01026c3:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01026c8:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int c, i=0;
f01026cb:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	int stringLen = strlen(arguments[2]);
f01026d2:	8b 45 0c             	mov    0xc(%ebp),%eax
f01026d5:	83 c0 08             	add    $0x8,%eax
f01026d8:	8b 00                	mov    (%eax),%eax
f01026da:	83 ec 0c             	sub    $0xc,%esp
f01026dd:	50                   	push   %eax
f01026de:	e8 95 cd 02 00       	call   f012f478 <strlen>
f01026e3:	83 c4 10             	add    $0x10,%esp
f01026e6:	89 45 ec             	mov    %eax,-0x14(%ebp)

	for(i=0;i < stringLen; i++)
f01026e9:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01026f0:	eb 1c                	jmp    f010270e <command_writemem_k+0x69>
	{
		*address = arguments[2][i];
f01026f2:	8b 45 0c             	mov    0xc(%ebp),%eax
f01026f5:	83 c0 08             	add    $0x8,%eax
f01026f8:	8b 10                	mov    (%eax),%edx
f01026fa:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01026fd:	01 d0                	add    %edx,%eax
f01026ff:	8a 00                	mov    (%eax),%al
f0102701:	88 c2                	mov    %al,%dl
f0102703:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102706:	88 10                	mov    %dl,(%eax)
		address++;
f0102708:	ff 45 f4             	incl   -0xc(%ebp)
{
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
	int c, i=0;
	int stringLen = strlen(arguments[2]);

	for(i=0;i < stringLen; i++)
f010270b:	ff 45 f0             	incl   -0x10(%ebp)
f010270e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0102711:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0102714:	7c dc                	jl     f01026f2 <command_writemem_k+0x4d>
	{
		*address = arguments[2][i];
		address++;
	}

	return 0;
f0102716:	b8 00 00 00 00       	mov    $0x0,%eax


}
f010271b:	c9                   	leave  
f010271c:	c3                   	ret    

f010271d <command_readusermem>:

int command_readusermem(int number_of_arguments, char **arguments)
{
f010271d:	55                   	push   %ebp
f010271e:	89 e5                	mov    %esp,%ebp
f0102720:	83 ec 38             	sub    $0x38,%esp
	//deal with the kernel page directory
	if (number_of_arguments == 2)
f0102723:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f0102727:	75 42                	jne    f010276b <command_readusermem+0x4e>
	{
		unsigned int address = strtol(arguments[1], NULL, 16);
f0102729:	8b 45 0c             	mov    0xc(%ebp),%eax
f010272c:	83 c0 04             	add    $0x4,%eax
f010272f:	8b 00                	mov    (%eax),%eax
f0102731:	83 ec 04             	sub    $0x4,%esp
f0102734:	6a 10                	push   $0x10
f0102736:	6a 00                	push   $0x0
f0102738:	50                   	push   %eax
f0102739:	e8 9a d0 02 00       	call   f012f7d8 <strtol>
f010273e:	83 c4 10             	add    $0x10,%esp
f0102741:	89 45 dc             	mov    %eax,-0x24(%ebp)
		unsigned char *ptr = (unsigned char *)(address ) ;
f0102744:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0102747:	89 45 d8             	mov    %eax,-0x28(%ebp)

		cprintf("value at address %x = %c\n", ptr, *ptr);
f010274a:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010274d:	8a 00                	mov    (%eax),%al
f010274f:	0f b6 c0             	movzbl %al,%eax
f0102752:	83 ec 04             	sub    $0x4,%esp
f0102755:	50                   	push   %eax
f0102756:	ff 75 d8             	pushl  -0x28(%ebp)
f0102759:	68 0a 18 13 f0       	push   $0xf013180a
f010275e:	e8 ce e6 ff ff       	call   f0100e31 <cprintf>
f0102763:	83 c4 10             	add    $0x10,%esp
f0102766:	e9 c7 00 00 00       	jmp    f0102832 <command_readusermem+0x115>
	}
	//deal with a page directory of specific environment
	else if (number_of_arguments == 3)
f010276b:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f010276f:	0f 85 ad 00 00 00    	jne    f0102822 <command_readusermem+0x105>
	{
		int32 envId = strtol(arguments[1],NULL, 10);
f0102775:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102778:	83 c0 04             	add    $0x4,%eax
f010277b:	8b 00                	mov    (%eax),%eax
f010277d:	83 ec 04             	sub    $0x4,%esp
f0102780:	6a 0a                	push   $0xa
f0102782:	6a 00                	push   $0x0
f0102784:	50                   	push   %eax
f0102785:	e8 4e d0 02 00       	call   f012f7d8 <strtol>
f010278a:	83 c4 10             	add    $0x10,%esp
f010278d:	89 45 f4             	mov    %eax,-0xc(%ebp)
		struct Env* env = NULL;
f0102790:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
		envid2env(envId, &env, 0 );
f0102797:	83 ec 04             	sub    $0x4,%esp
f010279a:	6a 00                	push   $0x0
f010279c:	8d 45 d0             	lea    -0x30(%ebp),%eax
f010279f:	50                   	push   %eax
f01027a0:	ff 75 f4             	pushl  -0xc(%ebp)
f01027a3:	e8 9d 76 00 00       	call   f0109e45 <envid2env>
f01027a8:	83 c4 10             	add    $0x10,%esp

		int address = strtol(arguments[2], NULL, 16);
f01027ab:	8b 45 0c             	mov    0xc(%ebp),%eax
f01027ae:	83 c0 08             	add    $0x8,%eax
f01027b1:	8b 00                	mov    (%eax),%eax
f01027b3:	83 ec 04             	sub    $0x4,%esp
f01027b6:	6a 10                	push   $0x10
f01027b8:	6a 00                	push   $0x0
f01027ba:	50                   	push   %eax
f01027bb:	e8 18 d0 02 00       	call   f012f7d8 <strtol>
f01027c0:	83 c4 10             	add    $0x10,%esp
f01027c3:	89 45 f0             	mov    %eax,-0x10(%ebp)

		if(env == NULL) return 0;
f01027c6:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01027c9:	85 c0                	test   %eax,%eax
f01027cb:	75 07                	jne    f01027d4 <command_readusermem+0xb7>
f01027cd:	b8 00 00 00 00       	mov    $0x0,%eax
f01027d2:	eb 63                	jmp    f0102837 <command_readusermem+0x11a>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f01027d4:	0f 20 d8             	mov    %cr3,%eax
f01027d7:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return val;
f01027da:	8b 45 e8             	mov    -0x18(%ebp),%eax

		uint32 oldDir = rcr3();
f01027dd:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
		lcr3((uint32)( env->env_cr3));
f01027e0:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01027e3:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f01027e9:	89 45 e0             	mov    %eax,-0x20(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f01027ec:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01027ef:	0f 22 d8             	mov    %eax,%cr3

		unsigned char *ptr = (unsigned char *)(address) ;
f01027f2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01027f5:	89 45 e4             	mov    %eax,-0x1c(%ebp)

		//Write the given Character
		cprintf("value at address %x = %c\n", address, *ptr);
f01027f8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01027fb:	8a 00                	mov    (%eax),%al
f01027fd:	0f b6 c0             	movzbl %al,%eax
f0102800:	83 ec 04             	sub    $0x4,%esp
f0102803:	50                   	push   %eax
f0102804:	ff 75 f0             	pushl  -0x10(%ebp)
f0102807:	68 0a 18 13 f0       	push   $0xf013180a
f010280c:	e8 20 e6 ff ff       	call   f0100e31 <cprintf>
f0102811:	83 c4 10             	add    $0x10,%esp
f0102814:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0102817:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f010281a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010281d:	0f 22 d8             	mov    %eax,%cr3
f0102820:	eb 10                	jmp    f0102832 <command_readusermem+0x115>

		lcr3(oldDir);
	}
	else
	{
		cprintf("rum command: invalid number of arguments\n") ;
f0102822:	83 ec 0c             	sub    $0xc,%esp
f0102825:	68 24 18 13 f0       	push   $0xf0131824
f010282a:	e8 02 e6 ff ff       	call   f0100e31 <cprintf>
f010282f:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f0102832:	b8 00 00 00 00       	mov    $0x0,%eax

}
f0102837:	c9                   	leave  
f0102838:	c3                   	ret    

f0102839 <command_readmem_k>:

int command_readmem_k(int number_of_arguments, char **arguments)
{
f0102839:	55                   	push   %ebp
f010283a:	89 e5                	mov    %esp,%ebp
f010283c:	83 ec 18             	sub    $0x18,%esp
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
f010283f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102842:	83 c0 04             	add    $0x4,%eax
f0102845:	8b 00                	mov    (%eax),%eax
f0102847:	83 ec 04             	sub    $0x4,%esp
f010284a:	6a 10                	push   $0x10
f010284c:	6a 00                	push   $0x0
f010284e:	50                   	push   %eax
f010284f:	e8 84 cf 02 00       	call   f012f7d8 <strtol>
f0102854:	83 c4 10             	add    $0x10,%esp
f0102857:	2d 00 00 00 10       	sub    $0x10000000,%eax
f010285c:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int i=0;
f010285f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	cprintf("%c",*address);
f0102866:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102869:	8a 00                	mov    (%eax),%al
f010286b:	0f b6 c0             	movzbl %al,%eax
f010286e:	83 ec 08             	sub    $0x8,%esp
f0102871:	50                   	push   %eax
f0102872:	68 4e 18 13 f0       	push   $0xf013184e
f0102877:	e8 b5 e5 ff ff       	call   f0100e31 <cprintf>
f010287c:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f010287f:	83 ec 0c             	sub    $0xc,%esp
f0102882:	68 51 18 13 f0       	push   $0xf0131851
f0102887:	e8 a5 e5 ff ff       	call   f0100e31 <cprintf>
f010288c:	83 c4 10             	add    $0x10,%esp
	return 0;
f010288f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102894:	c9                   	leave  
f0102895:	c3                   	ret    

f0102896 <command_readuserblock>:


int command_readuserblock(int number_of_arguments, char **arguments)
{
f0102896:	55                   	push   %ebp
f0102897:	89 e5                	mov    %esp,%ebp
f0102899:	83 ec 38             	sub    $0x38,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f010289c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010289f:	83 c0 04             	add    $0x4,%eax
f01028a2:	8b 00                	mov    (%eax),%eax
f01028a4:	83 ec 04             	sub    $0x4,%esp
f01028a7:	6a 0a                	push   $0xa
f01028a9:	6a 00                	push   $0x0
f01028ab:	50                   	push   %eax
f01028ac:	e8 27 cf 02 00       	call   f012f7d8 <strtol>
f01028b1:	83 c4 10             	add    $0x10,%esp
f01028b4:	89 45 ec             	mov    %eax,-0x14(%ebp)
	struct Env* env = NULL;
f01028b7:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
	envid2env(envId, &env, 0 );
f01028be:	83 ec 04             	sub    $0x4,%esp
f01028c1:	6a 00                	push   $0x0
f01028c3:	8d 45 d0             	lea    -0x30(%ebp),%eax
f01028c6:	50                   	push   %eax
f01028c7:	ff 75 ec             	pushl  -0x14(%ebp)
f01028ca:	e8 76 75 00 00       	call   f0109e45 <envid2env>
f01028cf:	83 c4 10             	add    $0x10,%esp

	int address = strtol(arguments[2], NULL, 16);
f01028d2:	8b 45 0c             	mov    0xc(%ebp),%eax
f01028d5:	83 c0 08             	add    $0x8,%eax
f01028d8:	8b 00                	mov    (%eax),%eax
f01028da:	83 ec 04             	sub    $0x4,%esp
f01028dd:	6a 10                	push   $0x10
f01028df:	6a 00                	push   $0x0
f01028e1:	50                   	push   %eax
f01028e2:	e8 f1 ce 02 00       	call   f012f7d8 <strtol>
f01028e7:	83 c4 10             	add    $0x10,%esp
f01028ea:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int nBytes = strtol(arguments[3], NULL, 10);
f01028ed:	8b 45 0c             	mov    0xc(%ebp),%eax
f01028f0:	83 c0 0c             	add    $0xc,%eax
f01028f3:	8b 00                	mov    (%eax),%eax
f01028f5:	83 ec 04             	sub    $0x4,%esp
f01028f8:	6a 0a                	push   $0xa
f01028fa:	6a 00                	push   $0x0
f01028fc:	50                   	push   %eax
f01028fd:	e8 d6 ce 02 00       	call   f012f7d8 <strtol>
f0102902:	83 c4 10             	add    $0x10,%esp
f0102905:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	unsigned char *ptr = (unsigned char *)(address) ;
f0102908:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010290b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//Write the given Character

	if(env == NULL) return 0;
f010290e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0102911:	85 c0                	test   %eax,%eax
f0102913:	75 07                	jne    f010291c <command_readuserblock+0x86>
f0102915:	b8 00 00 00 00       	mov    $0x0,%eax
f010291a:	eb 68                	jmp    f0102984 <command_readuserblock+0xee>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f010291c:	0f 20 d8             	mov    %cr3,%eax
f010291f:	89 45 d8             	mov    %eax,-0x28(%ebp)
	return val;
f0102922:	8b 45 d8             	mov    -0x28(%ebp),%eax

	uint32 oldDir = rcr3();
f0102925:	89 45 dc             	mov    %eax,-0x24(%ebp)
	//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
	lcr3((uint32)( env->env_cr3));
f0102928:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010292b:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f0102931:	89 45 d4             	mov    %eax,-0x2c(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0102934:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0102937:	0f 22 d8             	mov    %eax,%cr3

	int i;
	for(i = 0;i<nBytes; i++)
f010293a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0102941:	eb 28                	jmp    f010296b <command_readuserblock+0xd5>
	{
		cprintf("%08x : %02x  %c\n", ptr, *ptr, *ptr);
f0102943:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102946:	8a 00                	mov    (%eax),%al
f0102948:	0f b6 d0             	movzbl %al,%edx
f010294b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010294e:	8a 00                	mov    (%eax),%al
f0102950:	0f b6 c0             	movzbl %al,%eax
f0102953:	52                   	push   %edx
f0102954:	50                   	push   %eax
f0102955:	ff 75 f4             	pushl  -0xc(%ebp)
f0102958:	68 53 18 13 f0       	push   $0xf0131853
f010295d:	e8 cf e4 ff ff       	call   f0100e31 <cprintf>
f0102962:	83 c4 10             	add    $0x10,%esp
		ptr++;
f0102965:	ff 45 f4             	incl   -0xc(%ebp)
	uint32 oldDir = rcr3();
	//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
	lcr3((uint32)( env->env_cr3));

	int i;
	for(i = 0;i<nBytes; i++)
f0102968:	ff 45 f0             	incl   -0x10(%ebp)
f010296b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010296e:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0102971:	7c d0                	jl     f0102943 <command_readuserblock+0xad>
f0102973:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0102976:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0102979:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010297c:	0f 22 d8             	mov    %eax,%cr3
		cprintf("%08x : %02x  %c\n", ptr, *ptr, *ptr);
		ptr++;
	}
	lcr3(oldDir);

	return 0;
f010297f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102984:	c9                   	leave  
f0102985:	c3                   	ret    

f0102986 <command_remove_table>:

int command_remove_table(int number_of_arguments, char **arguments)
{
f0102986:	55                   	push   %ebp
f0102987:	89 e5                	mov    %esp,%ebp
f0102989:	83 ec 28             	sub    $0x28,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f010298c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010298f:	83 c0 04             	add    $0x4,%eax
f0102992:	8b 00                	mov    (%eax),%eax
f0102994:	83 ec 04             	sub    $0x4,%esp
f0102997:	6a 0a                	push   $0xa
f0102999:	6a 00                	push   $0x0
f010299b:	50                   	push   %eax
f010299c:	e8 37 ce 02 00       	call   f012f7d8 <strtol>
f01029a1:	83 c4 10             	add    $0x10,%esp
f01029a4:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct Env* env = NULL;
f01029a7:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	envid2env(envId, &env, 0 );
f01029ae:	83 ec 04             	sub    $0x4,%esp
f01029b1:	6a 00                	push   $0x0
f01029b3:	8d 45 d8             	lea    -0x28(%ebp),%eax
f01029b6:	50                   	push   %eax
f01029b7:	ff 75 f4             	pushl  -0xc(%ebp)
f01029ba:	e8 86 74 00 00       	call   f0109e45 <envid2env>
f01029bf:	83 c4 10             	add    $0x10,%esp
	if(env == 0) return 0;
f01029c2:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01029c5:	85 c0                	test   %eax,%eax
f01029c7:	75 0a                	jne    f01029d3 <command_remove_table+0x4d>
f01029c9:	b8 00 00 00 00       	mov    $0x0,%eax
f01029ce:	e9 aa 00 00 00       	jmp    f0102a7d <command_remove_table+0xf7>

	uint32 address = strtol(arguments[2], NULL, 16);
f01029d3:	8b 45 0c             	mov    0xc(%ebp),%eax
f01029d6:	83 c0 08             	add    $0x8,%eax
f01029d9:	8b 00                	mov    (%eax),%eax
f01029db:	83 ec 04             	sub    $0x4,%esp
f01029de:	6a 10                	push   $0x10
f01029e0:	6a 00                	push   $0x0
f01029e2:	50                   	push   %eax
f01029e3:	e8 f0 cd 02 00       	call   f012f7d8 <strtol>
f01029e8:	83 c4 10             	add    $0x10,%esp
f01029eb:	89 45 f0             	mov    %eax,-0x10(%ebp)
	unsigned char *va = (unsigned char *)(address) ;
f01029ee:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01029f1:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 table_pa = env->env_page_directory[PDX(address)] & 0xFFFFF000;
f01029f4:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01029f7:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f01029fd:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0102a00:	c1 ea 16             	shr    $0x16,%edx
f0102a03:	c1 e2 02             	shl    $0x2,%edx
f0102a06:	01 d0                	add    %edx,%eax
f0102a08:	8b 00                	mov    (%eax),%eax
f0102a0a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0102a0f:	89 45 e8             	mov    %eax,-0x18(%ebp)
		kfree((void*)kheap_virtual_address(table_pa));
	}
	else
	{
		// get the physical address and FrameInfo of the page table
		struct FrameInfo *table_FrameInfo = to_frame_info(table_pa);
f0102a12:	83 ec 0c             	sub    $0xc,%esp
f0102a15:	ff 75 e8             	pushl  -0x18(%ebp)
f0102a18:	e8 70 f9 ff ff       	call   f010238d <to_frame_info>
f0102a1d:	83 c4 10             	add    $0x10,%esp
f0102a20:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		// set references of the table frame to 0 then free it by adding
		// to the free frame list
		table_FrameInfo->references = 0;
f0102a23:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0102a26:	66 c7 40 08 00 00    	movw   $0x0,0x8(%eax)
		free_frame(table_FrameInfo);
f0102a2c:	83 ec 0c             	sub    $0xc,%esp
f0102a2f:	ff 75 e4             	pushl  -0x1c(%ebp)
f0102a32:	e8 06 4a 00 00       	call   f010743d <free_frame>
f0102a37:	83 c4 10             	add    $0x10,%esp
	}

	// set the corresponding entry in the directory to 0
	uint32 dir_index = PDX(va);
f0102a3a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0102a3d:	c1 e8 16             	shr    $0x16,%eax
f0102a40:	89 45 e0             	mov    %eax,-0x20(%ebp)
	env->env_page_directory[dir_index] &= (~PERM_PRESENT);
f0102a43:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0102a46:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0102a4c:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0102a4f:	c1 e2 02             	shl    $0x2,%edx
f0102a52:	01 c2                	add    %eax,%edx
f0102a54:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0102a57:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0102a5d:	8b 4d e0             	mov    -0x20(%ebp),%ecx
f0102a60:	c1 e1 02             	shl    $0x2,%ecx
f0102a63:	01 c8                	add    %ecx,%eax
f0102a65:	8b 00                	mov    (%eax),%eax
f0102a67:	83 e0 fe             	and    $0xfffffffe,%eax
f0102a6a:	89 02                	mov    %eax,(%edx)

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f0102a6c:	0f 20 d8             	mov    %cr3,%eax
f0102a6f:	89 45 dc             	mov    %eax,-0x24(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f0102a72:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0102a75:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
	return 0;
f0102a78:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102a7d:	c9                   	leave  
f0102a7e:	c3                   	ret    

f0102a7f <command_allocuserpage>:

int command_allocuserpage(int number_of_arguments, char **arguments)
{
f0102a7f:	55                   	push   %ebp
f0102a80:	89 e5                	mov    %esp,%ebp
f0102a82:	83 ec 28             	sub    $0x28,%esp
	if (number_of_arguments < 3 || number_of_arguments > 4)
f0102a85:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f0102a89:	7e 06                	jle    f0102a91 <command_allocuserpage+0x12>
f0102a8b:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f0102a8f:	7e 1a                	jle    f0102aab <command_allocuserpage+0x2c>
	{
		cprintf("aup command: invalid number of arguments\n") ;
f0102a91:	83 ec 0c             	sub    $0xc,%esp
f0102a94:	68 64 18 13 f0       	push   $0xf0131864
f0102a99:	e8 93 e3 ff ff       	call   f0100e31 <cprintf>
f0102a9e:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102aa1:	b8 00 00 00 00       	mov    $0x0,%eax
f0102aa6:	e9 4c 01 00 00       	jmp    f0102bf7 <command_allocuserpage+0x178>
	}
	int32 envId = strtol(arguments[1],NULL, 10);
f0102aab:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102aae:	83 c0 04             	add    $0x4,%eax
f0102ab1:	8b 00                	mov    (%eax),%eax
f0102ab3:	83 ec 04             	sub    $0x4,%esp
f0102ab6:	6a 0a                	push   $0xa
f0102ab8:	6a 00                	push   $0x0
f0102aba:	50                   	push   %eax
f0102abb:	e8 18 cd 02 00       	call   f012f7d8 <strtol>
f0102ac0:	83 c4 10             	add    $0x10,%esp
f0102ac3:	89 45 f0             	mov    %eax,-0x10(%ebp)
	struct Env* env = NULL;
f0102ac6:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	envid2env(envId, &env, 0 );
f0102acd:	83 ec 04             	sub    $0x4,%esp
f0102ad0:	6a 00                	push   $0x0
f0102ad2:	8d 45 e4             	lea    -0x1c(%ebp),%eax
f0102ad5:	50                   	push   %eax
f0102ad6:	ff 75 f0             	pushl  -0x10(%ebp)
f0102ad9:	e8 67 73 00 00       	call   f0109e45 <envid2env>
f0102ade:	83 c4 10             	add    $0x10,%esp
	if(env == 0) return 0;
f0102ae1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0102ae4:	85 c0                	test   %eax,%eax
f0102ae6:	75 0a                	jne    f0102af2 <command_allocuserpage+0x73>
f0102ae8:	b8 00 00 00 00       	mov    $0x0,%eax
f0102aed:	e9 05 01 00 00       	jmp    f0102bf7 <command_allocuserpage+0x178>

	uint32 va = strtol(arguments[2], NULL, 16);
f0102af2:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102af5:	83 c0 08             	add    $0x8,%eax
f0102af8:	8b 00                	mov    (%eax),%eax
f0102afa:	83 ec 04             	sub    $0x4,%esp
f0102afd:	6a 10                	push   $0x10
f0102aff:	6a 00                	push   $0x0
f0102b01:	50                   	push   %eax
f0102b02:	e8 d1 cc 02 00       	call   f012f7d8 <strtol>
f0102b07:	83 c4 10             	add    $0x10,%esp
f0102b0a:	89 45 ec             	mov    %eax,-0x14(%ebp)

	// Allocate a single frame from the free frame list
	struct FrameInfo * ptr_FrameInfo ;
	int ret = allocate_frame(&ptr_FrameInfo);
f0102b0d:	83 ec 0c             	sub    $0xc,%esp
f0102b10:	8d 45 e0             	lea    -0x20(%ebp),%eax
f0102b13:	50                   	push   %eax
f0102b14:	e8 0c 48 00 00       	call   f0107325 <allocate_frame>
f0102b19:	83 c4 10             	add    $0x10,%esp
f0102b1c:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret == E_NO_MEM)
f0102b1f:	83 7d e8 fc          	cmpl   $0xfffffffc,-0x18(%ebp)
f0102b23:	75 1a                	jne    f0102b3f <command_allocuserpage+0xc0>
	{
		cprintf("ERROR: no enough memory\n");
f0102b25:	83 ec 0c             	sub    $0xc,%esp
f0102b28:	68 8e 18 13 f0       	push   $0xf013188e
f0102b2d:	e8 ff e2 ff ff       	call   f0100e31 <cprintf>
f0102b32:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102b35:	b8 00 00 00 00       	mov    $0x0,%eax
f0102b3a:	e9 b8 00 00 00       	jmp    f0102bf7 <command_allocuserpage+0x178>
	}

	if (number_of_arguments == 3)
f0102b3f:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f0102b43:	75 20                	jne    f0102b65 <command_allocuserpage+0xe6>
	{
		// Map this frame to the given user virtual address with PERM_WRITEABLE
		map_frame(env->env_page_directory, ptr_FrameInfo, va, PERM_WRITEABLE | PERM_USER);
f0102b45:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0102b48:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0102b4b:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0102b51:	6a 06                	push   $0x6
f0102b53:	ff 75 ec             	pushl  -0x14(%ebp)
f0102b56:	52                   	push   %edx
f0102b57:	50                   	push   %eax
f0102b58:	e8 63 4b 00 00       	call   f01076c0 <map_frame>
f0102b5d:	83 c4 10             	add    $0x10,%esp
f0102b60:	e9 8d 00 00 00       	jmp    f0102bf2 <command_allocuserpage+0x173>
	}
	else if (number_of_arguments == 4)
f0102b65:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f0102b69:	0f 85 83 00 00 00    	jne    f0102bf2 <command_allocuserpage+0x173>
	{
		// Map this frame to the given user virtual address with the given permission
		uint32 rw ;
		if (arguments[3][0] == 'r' || arguments[3][0] == 'R')
f0102b6f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b72:	83 c0 0c             	add    $0xc,%eax
f0102b75:	8b 00                	mov    (%eax),%eax
f0102b77:	8a 00                	mov    (%eax),%al
f0102b79:	3c 72                	cmp    $0x72,%al
f0102b7b:	74 0e                	je     f0102b8b <command_allocuserpage+0x10c>
f0102b7d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b80:	83 c0 0c             	add    $0xc,%eax
f0102b83:	8b 00                	mov    (%eax),%eax
f0102b85:	8a 00                	mov    (%eax),%al
f0102b87:	3c 52                	cmp    $0x52,%al
f0102b89:	75 09                	jne    f0102b94 <command_allocuserpage+0x115>
			rw = 0 ;
f0102b8b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0102b92:	eb 3c                	jmp    f0102bd0 <command_allocuserpage+0x151>
		else if (arguments[3][0] == 'w' || arguments[3][0] == 'W')
f0102b94:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b97:	83 c0 0c             	add    $0xc,%eax
f0102b9a:	8b 00                	mov    (%eax),%eax
f0102b9c:	8a 00                	mov    (%eax),%al
f0102b9e:	3c 77                	cmp    $0x77,%al
f0102ba0:	74 0e                	je     f0102bb0 <command_allocuserpage+0x131>
f0102ba2:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102ba5:	83 c0 0c             	add    $0xc,%eax
f0102ba8:	8b 00                	mov    (%eax),%eax
f0102baa:	8a 00                	mov    (%eax),%al
f0102bac:	3c 57                	cmp    $0x57,%al
f0102bae:	75 09                	jne    f0102bb9 <command_allocuserpage+0x13a>
			rw = PERM_WRITEABLE ;
f0102bb0:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
f0102bb7:	eb 17                	jmp    f0102bd0 <command_allocuserpage+0x151>
		else
		{
			cprintf("aup command: wrong permission (r/w)... will continue as writable\n") ;
f0102bb9:	83 ec 0c             	sub    $0xc,%esp
f0102bbc:	68 a8 18 13 f0       	push   $0xf01318a8
f0102bc1:	e8 6b e2 ff ff       	call   f0100e31 <cprintf>
f0102bc6:	83 c4 10             	add    $0x10,%esp
			rw = PERM_WRITEABLE ;
f0102bc9:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
		}

		map_frame(env->env_page_directory, ptr_FrameInfo, va, rw | PERM_USER);
f0102bd0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102bd3:	83 c8 04             	or     $0x4,%eax
f0102bd6:	89 c1                	mov    %eax,%ecx
f0102bd8:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0102bdb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0102bde:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0102be4:	51                   	push   %ecx
f0102be5:	ff 75 ec             	pushl  -0x14(%ebp)
f0102be8:	52                   	push   %edx
f0102be9:	50                   	push   %eax
f0102bea:	e8 d1 4a 00 00       	call   f01076c0 <map_frame>
f0102bef:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f0102bf2:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102bf7:	c9                   	leave  
f0102bf8:	c3                   	ret    

f0102bf9 <command_meminfo>:

int command_meminfo(int number_of_arguments, char **arguments)
{
f0102bf9:	55                   	push   %ebp
f0102bfa:	89 e5                	mov    %esp,%ebp
f0102bfc:	56                   	push   %esi
f0102bfd:	53                   	push   %ebx
f0102bfe:	83 ec 10             	sub    $0x10,%esp
	struct freeFramesCounters counters =calculate_available_frames();
f0102c01:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0102c04:	83 ec 0c             	sub    $0xc,%esp
f0102c07:	50                   	push   %eax
f0102c08:	e8 23 4d 00 00       	call   f0107930 <calculate_available_frames>
f0102c0d:	83 c4 0c             	add    $0xc,%esp
	cprintf("Total available frames = %d\nFree Buffered = %d\nFree Not Buffered = %d\nModified = %d\n",
f0102c10:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0102c13:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0102c16:	8b 45 ec             	mov    -0x14(%ebp),%eax
			counters.freeBuffered+ counters.freeNotBuffered+ counters.modified, counters.freeBuffered, counters.freeNotBuffered, counters.modified);
f0102c19:	8b 75 ec             	mov    -0x14(%ebp),%esi
f0102c1c:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0102c1f:	01 de                	add    %ebx,%esi
f0102c21:	8b 5d f4             	mov    -0xc(%ebp),%ebx
}

int command_meminfo(int number_of_arguments, char **arguments)
{
	struct freeFramesCounters counters =calculate_available_frames();
	cprintf("Total available frames = %d\nFree Buffered = %d\nFree Not Buffered = %d\nModified = %d\n",
f0102c24:	01 f3                	add    %esi,%ebx
f0102c26:	83 ec 0c             	sub    $0xc,%esp
f0102c29:	51                   	push   %ecx
f0102c2a:	52                   	push   %edx
f0102c2b:	50                   	push   %eax
f0102c2c:	53                   	push   %ebx
f0102c2d:	68 ec 18 13 f0       	push   $0xf01318ec
f0102c32:	e8 fa e1 ff ff       	call   f0100e31 <cprintf>
f0102c37:	83 c4 20             	add    $0x20,%esp
			counters.freeBuffered+ counters.freeNotBuffered+ counters.modified, counters.freeBuffered, counters.freeNotBuffered, counters.modified);

	cprintf("Num of calls for kheap_virtual_address [in last run] = %d\n", numOfKheapVACalls);
f0102c3a:	a1 28 ce 2b f0       	mov    0xf02bce28,%eax
f0102c3f:	83 ec 08             	sub    $0x8,%esp
f0102c42:	50                   	push   %eax
f0102c43:	68 44 19 13 f0       	push   $0xf0131944
f0102c48:	e8 e4 e1 ff ff       	call   f0100e31 <cprintf>
f0102c4d:	83 c4 10             	add    $0x10,%esp

	return 0;
f0102c50:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102c55:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0102c58:	5b                   	pop    %ebx
f0102c59:	5e                   	pop    %esi
f0102c5a:	5d                   	pop    %ebp
f0102c5b:	c3                   	ret    

f0102c5c <CreateEnv>:

//2020
struct Env * CreateEnv(int number_of_arguments, char **arguments)
{
f0102c5c:	55                   	push   %ebp
f0102c5d:	89 e5                	mov    %esp,%ebp
f0102c5f:	83 ec 18             	sub    $0x18,%esp
	struct Env* env;
	uint32 pageWSSize = __PWS_MAX_SIZE;		//arg#3 default
f0102c62:	c7 45 ec 88 13 00 00 	movl   $0x1388,-0x14(%ebp)
	uint32 LRUSecondListSize = 0;			//arg#4 default
f0102c69:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 percent_WS_pages_to_remove = 0;	//arg#5 default
f0102c70:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		assert(percent_WS_pages_to_remove >= 0 && percent_WS_pages_to_remove <= 100);

	}
#else
	{
		switch (number_of_arguments)
f0102c77:	8b 45 08             	mov    0x8(%ebp),%eax
f0102c7a:	83 f8 02             	cmp    $0x2,%eax
f0102c7d:	74 39                	je     f0102cb8 <CreateEnv+0x5c>
f0102c7f:	83 f8 03             	cmp    $0x3,%eax
f0102c82:	75 1d                	jne    f0102ca1 <CreateEnv+0x45>
		{
		case 3:
			percent_WS_pages_to_remove = strtol(arguments[2], NULL, 10);
f0102c84:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102c87:	83 c0 08             	add    $0x8,%eax
f0102c8a:	8b 00                	mov    (%eax),%eax
f0102c8c:	83 ec 04             	sub    $0x4,%esp
f0102c8f:	6a 0a                	push   $0xa
f0102c91:	6a 00                	push   $0x0
f0102c93:	50                   	push   %eax
f0102c94:	e8 3f cb 02 00       	call   f012f7d8 <strtol>
f0102c99:	83 c4 10             	add    $0x10,%esp
f0102c9c:	89 45 f0             	mov    %eax,-0x10(%ebp)
			break;
f0102c9f:	eb 18                	jmp    f0102cb9 <CreateEnv+0x5d>
		case 2:
			break;
		default:
			cprintf("ERROR: invalid number of args\nUsage: <command> <prog_name> [<DYN_LOC_SCOPE_percent_WS_to_remove>]\naborting...\n");
f0102ca1:	83 ec 0c             	sub    $0xc,%esp
f0102ca4:	68 80 19 13 f0       	push   $0xf0131980
f0102ca9:	e8 83 e1 ff ff       	call   f0100e31 <cprintf>
f0102cae:	83 c4 10             	add    $0x10,%esp
			return NULL;
f0102cb1:	b8 00 00 00 00       	mov    $0x0,%eax
f0102cb6:	eb 58                	jmp    f0102d10 <CreateEnv+0xb4>
		{
		case 3:
			percent_WS_pages_to_remove = strtol(arguments[2], NULL, 10);
			break;
		case 2:
			break;
f0102cb8:	90                   	nop
			cprintf("ERROR: invalid number of args\nUsage: <command> <prog_name> [<DYN_LOC_SCOPE_percent_WS_to_remove>]\naborting...\n");
			return NULL;

			break;
		}
		if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0102cb9:	83 ec 0c             	sub    $0xc,%esp
f0102cbc:	6a 02                	push   $0x2
f0102cbe:	e8 f8 af 00 00       	call   f010dcbb <isPageReplacmentAlgorithmLRU>
f0102cc3:	83 c4 10             	add    $0x10,%esp
f0102cc6:	85 c0                	test   %eax,%eax
f0102cc8:	74 07                	je     f0102cd1 <CreateEnv+0x75>
		{
			LRUSecondListSize = __LRU_SNDLST_SIZE;
f0102cca:	c7 45 f4 f4 01 00 00 	movl   $0x1f4,-0xc(%ebp)
		}
	}
#endif
	assert(percent_WS_pages_to_remove >= 0 && percent_WS_pages_to_remove <= 100);
f0102cd1:	83 7d f0 64          	cmpl   $0x64,-0x10(%ebp)
f0102cd5:	76 19                	jbe    f0102cf0 <CreateEnv+0x94>
f0102cd7:	68 f0 19 13 f0       	push   $0xf01319f0
f0102cdc:	68 35 1a 13 f0       	push   $0xf0131a35
f0102ce1:	68 bb 01 00 00       	push   $0x1bb
f0102ce6:	68 4a 1a 13 f0       	push   $0xf0131a4a
f0102ceb:	e8 c0 d4 ff ff       	call   f01001b0 <_panic>
	env = env_create(arguments[1], pageWSSize, LRUSecondListSize, percent_WS_pages_to_remove);
f0102cf0:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102cf3:	83 c0 04             	add    $0x4,%eax
f0102cf6:	8b 00                	mov    (%eax),%eax
f0102cf8:	ff 75 f0             	pushl  -0x10(%ebp)
f0102cfb:	ff 75 f4             	pushl  -0xc(%ebp)
f0102cfe:	ff 75 ec             	pushl  -0x14(%ebp)
f0102d01:	50                   	push   %eax
f0102d02:	e8 3b 64 00 00       	call   f0109142 <env_create>
f0102d07:	83 c4 10             	add    $0x10,%esp
f0102d0a:	89 45 e8             	mov    %eax,-0x18(%ebp)

	return env;
f0102d0d:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
f0102d10:	c9                   	leave  
f0102d11:	c3                   	ret    

f0102d12 <command_run_program>:

int command_run_program(int number_of_arguments, char **arguments)
{
f0102d12:	55                   	push   %ebp
f0102d13:	89 e5                	mov    %esp,%ebp
f0102d15:	83 ec 18             	sub    $0x18,%esp
	//[1] Create and initialize a new environment for the program to be run
	struct Env *env = CreateEnv(number_of_arguments, arguments);
f0102d18:	83 ec 08             	sub    $0x8,%esp
f0102d1b:	ff 75 0c             	pushl  0xc(%ebp)
f0102d1e:	ff 75 08             	pushl  0x8(%ebp)
f0102d21:	e8 36 ff ff ff       	call   f0102c5c <CreateEnv>
f0102d26:	83 c4 10             	add    $0x10,%esp
f0102d29:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if(env == NULL) return 0;
f0102d2c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102d30:	75 07                	jne    f0102d39 <command_run_program+0x27>
f0102d32:	b8 00 00 00 00       	mov    $0x0,%eax
f0102d37:	eb 46                	jmp    f0102d7f <command_run_program+0x6d>
	cprintf("\nEnvironment Id= %d\n",env->env_id);
f0102d39:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102d3c:	8b 40 4c             	mov    0x4c(%eax),%eax
f0102d3f:	83 ec 08             	sub    $0x8,%esp
f0102d42:	50                   	push   %eax
f0102d43:	68 5e 1a 13 f0       	push   $0xf0131a5e
f0102d48:	e8 e4 e0 ff ff       	call   f0100e31 <cprintf>
f0102d4d:	83 c4 10             	add    $0x10,%esp

	numOfKheapVACalls = 0;
f0102d50:	c7 05 28 ce 2b f0 00 	movl   $0x0,0xf02bce28
f0102d57:	00 00 00 

	//[2] Run the created environment by adding it to the "ready" queue then invoke the scheduler to execute it
	sched_new_env(env);
f0102d5a:	83 ec 0c             	sub    $0xc,%esp
f0102d5d:	ff 75 f4             	pushl  -0xc(%ebp)
f0102d60:	e8 ce 25 00 00       	call   f0105333 <sched_new_env>
f0102d65:	83 c4 10             	add    $0x10,%esp
	sched_run_env(env->env_id);
f0102d68:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102d6b:	8b 40 4c             	mov    0x4c(%eax),%eax
f0102d6e:	83 ec 0c             	sub    $0xc,%esp
f0102d71:	50                   	push   %eax
f0102d72:	e8 d9 25 00 00       	call   f0105350 <sched_run_env>
f0102d77:	83 c4 10             	add    $0x10,%esp

	return 0;
f0102d7a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102d7f:	c9                   	leave  
f0102d80:	c3                   	ret    

f0102d81 <command_kill_program>:

int command_kill_program(int number_of_arguments, char **arguments)
{
f0102d81:	55                   	push   %ebp
f0102d82:	89 e5                	mov    %esp,%ebp
f0102d84:	83 ec 18             	sub    $0x18,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f0102d87:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102d8a:	83 c0 04             	add    $0x4,%eax
f0102d8d:	8b 00                	mov    (%eax),%eax
f0102d8f:	83 ec 04             	sub    $0x4,%esp
f0102d92:	6a 0a                	push   $0xa
f0102d94:	6a 00                	push   $0x0
f0102d96:	50                   	push   %eax
f0102d97:	e8 3c ca 02 00       	call   f012f7d8 <strtol>
f0102d9c:	83 c4 10             	add    $0x10,%esp
f0102d9f:	89 45 f4             	mov    %eax,-0xc(%ebp)

	sched_kill_env(envId);
f0102da2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102da5:	83 ec 0c             	sub    $0xc,%esp
f0102da8:	50                   	push   %eax
f0102da9:	e8 63 28 00 00       	call   f0105611 <sched_kill_env>
f0102dae:	83 c4 10             	add    $0x10,%esp

	return 0;
f0102db1:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102db6:	c9                   	leave  
f0102db7:	c3                   	ret    

f0102db8 <commnad_load_env>:

int commnad_load_env(int number_of_arguments, char **arguments)
{
f0102db8:	55                   	push   %ebp
f0102db9:	89 e5                	mov    %esp,%ebp
f0102dbb:	83 ec 18             	sub    $0x18,%esp
	struct Env *env = CreateEnv(number_of_arguments, arguments);
f0102dbe:	83 ec 08             	sub    $0x8,%esp
f0102dc1:	ff 75 0c             	pushl  0xc(%ebp)
f0102dc4:	ff 75 08             	pushl  0x8(%ebp)
f0102dc7:	e8 90 fe ff ff       	call   f0102c5c <CreateEnv>
f0102dcc:	83 c4 10             	add    $0x10,%esp
f0102dcf:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (env == NULL)
f0102dd2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102dd6:	75 07                	jne    f0102ddf <commnad_load_env+0x27>
		return 0 ;
f0102dd8:	b8 00 00 00 00       	mov    $0x0,%eax
f0102ddd:	eb 2a                	jmp    f0102e09 <commnad_load_env+0x51>

	sched_new_env(env) ;
f0102ddf:	83 ec 0c             	sub    $0xc,%esp
f0102de2:	ff 75 f4             	pushl  -0xc(%ebp)
f0102de5:	e8 49 25 00 00       	call   f0105333 <sched_new_env>
f0102dea:	83 c4 10             	add    $0x10,%esp

	cprintf("\nEnvironment Id= %d\n",env->env_id);
f0102ded:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102df0:	8b 40 4c             	mov    0x4c(%eax),%eax
f0102df3:	83 ec 08             	sub    $0x8,%esp
f0102df6:	50                   	push   %eax
f0102df7:	68 5e 1a 13 f0       	push   $0xf0131a5e
f0102dfc:	e8 30 e0 ff ff       	call   f0100e31 <cprintf>
f0102e01:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102e04:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102e09:	c9                   	leave  
f0102e0a:	c3                   	ret    

f0102e0b <command_run_all>:

int command_run_all(int number_of_arguments, char **arguments)
{
f0102e0b:	55                   	push   %ebp
f0102e0c:	89 e5                	mov    %esp,%ebp
f0102e0e:	83 ec 08             	sub    $0x8,%esp
	numOfKheapVACalls = 0;
f0102e11:	c7 05 28 ce 2b f0 00 	movl   $0x0,0xf02bce28
f0102e18:	00 00 00 
	sched_run_all();
f0102e1b:	e8 ba 2d 00 00       	call   f0105bda <sched_run_all>

	return 0 ;
f0102e20:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102e25:	c9                   	leave  
f0102e26:	c3                   	ret    

f0102e27 <command_print_all>:

int command_print_all(int number_of_arguments, char **arguments)
{
f0102e27:	55                   	push   %ebp
f0102e28:	89 e5                	mov    %esp,%ebp
f0102e2a:	83 ec 08             	sub    $0x8,%esp
	sched_print_all();
f0102e2d:	e8 a6 2b 00 00       	call   f01059d8 <sched_print_all>

	return 0 ;
f0102e32:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102e37:	c9                   	leave  
f0102e38:	c3                   	ret    

f0102e39 <command_kill_all>:

int command_kill_all(int number_of_arguments, char **arguments)
{
f0102e39:	55                   	push   %ebp
f0102e3a:	89 e5                	mov    %esp,%ebp
f0102e3c:	83 ec 08             	sub    $0x8,%esp
	sched_kill_all();
f0102e3f:	e8 09 2e 00 00       	call   f0105c4d <sched_kill_all>

	return 0 ;
f0102e44:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102e49:	c9                   	leave  
f0102e4a:	c3                   	ret    

f0102e4b <command_set_page_rep_LRU>:

int command_set_page_rep_LRU(int number_of_arguments, char **arguments)
{
f0102e4b:	55                   	push   %ebp
f0102e4c:	89 e5                	mov    %esp,%ebp
f0102e4e:	83 ec 18             	sub    $0x18,%esp
	if (number_of_arguments < 2)
f0102e51:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f0102e55:	7f 1a                	jg     f0102e71 <command_set_page_rep_LRU+0x26>
	{
		cprintf("ERROR: please specify the LRU Approx Type (1: TimeStamp Approx, 2: Lists Approx), aborting...\n");
f0102e57:	83 ec 0c             	sub    $0xc,%esp
f0102e5a:	68 74 1a 13 f0       	push   $0xf0131a74
f0102e5f:	e8 cd df ff ff       	call   f0100e31 <cprintf>
f0102e64:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102e67:	b8 00 00 00 00       	mov    $0x0,%eax
f0102e6c:	e9 83 00 00 00       	jmp    f0102ef4 <command_set_page_rep_LRU+0xa9>
	}
	int LRU_TYPE = strtol(arguments[1], NULL, 10) ;
f0102e71:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102e74:	83 c0 04             	add    $0x4,%eax
f0102e77:	8b 00                	mov    (%eax),%eax
f0102e79:	83 ec 04             	sub    $0x4,%esp
f0102e7c:	6a 0a                	push   $0xa
f0102e7e:	6a 00                	push   $0x0
f0102e80:	50                   	push   %eax
f0102e81:	e8 52 c9 02 00       	call   f012f7d8 <strtol>
f0102e86:	83 c4 10             	add    $0x10,%esp
f0102e89:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (LRU_TYPE == PG_REP_LRU_TIME_APPROX)
f0102e8c:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0102e90:	75 20                	jne    f0102eb2 <command_set_page_rep_LRU+0x67>
	{
		setPageReplacmentAlgorithmLRU(LRU_TYPE);
f0102e92:	83 ec 0c             	sub    $0xc,%esp
f0102e95:	ff 75 f4             	pushl  -0xc(%ebp)
f0102e98:	e8 93 ad 00 00       	call   f010dc30 <setPageReplacmentAlgorithmLRU>
f0102e9d:	83 c4 10             	add    $0x10,%esp
		cprintf("Page replacement algorithm is now LRU with TimeStamp approximation\n");
f0102ea0:	83 ec 0c             	sub    $0xc,%esp
f0102ea3:	68 d4 1a 13 f0       	push   $0xf0131ad4
f0102ea8:	e8 84 df ff ff       	call   f0100e31 <cprintf>
f0102ead:	83 c4 10             	add    $0x10,%esp
f0102eb0:	eb 3d                	jmp    f0102eef <command_set_page_rep_LRU+0xa4>
	}
	else if (LRU_TYPE == PG_REP_LRU_LISTS_APPROX)
f0102eb2:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0102eb6:	75 20                	jne    f0102ed8 <command_set_page_rep_LRU+0x8d>
	{
		setPageReplacmentAlgorithmLRU(LRU_TYPE);
f0102eb8:	83 ec 0c             	sub    $0xc,%esp
f0102ebb:	ff 75 f4             	pushl  -0xc(%ebp)
f0102ebe:	e8 6d ad 00 00       	call   f010dc30 <setPageReplacmentAlgorithmLRU>
f0102ec3:	83 c4 10             	add    $0x10,%esp
		cprintf("Page replacement algorithm is now LRU with LISTS approximation\n");
f0102ec6:	83 ec 0c             	sub    $0xc,%esp
f0102ec9:	68 18 1b 13 f0       	push   $0xf0131b18
f0102ece:	e8 5e df ff ff       	call   f0100e31 <cprintf>
f0102ed3:	83 c4 10             	add    $0x10,%esp
f0102ed6:	eb 17                	jmp    f0102eef <command_set_page_rep_LRU+0xa4>
	}
	else
	{
		cprintf("ERROR: Invalid LRU Approx Type (1: TimeStamp Approx, 2: Lists Approx), aborting...\n");
f0102ed8:	83 ec 0c             	sub    $0xc,%esp
f0102edb:	68 58 1b 13 f0       	push   $0xf0131b58
f0102ee0:	e8 4c df ff ff       	call   f0100e31 <cprintf>
f0102ee5:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102ee8:	b8 00 00 00 00       	mov    $0x0,%eax
f0102eed:	eb 05                	jmp    f0102ef4 <command_set_page_rep_LRU+0xa9>
	}
	return 0;
f0102eef:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102ef4:	c9                   	leave  
f0102ef5:	c3                   	ret    

f0102ef6 <command_set_page_rep_nthCLOCK>:
//2021
int command_set_page_rep_nthCLOCK(int number_of_arguments, char **arguments)
{
f0102ef6:	55                   	push   %ebp
f0102ef7:	89 e5                	mov    %esp,%ebp
f0102ef9:	83 ec 18             	sub    $0x18,%esp
	uint32 PageWSMaxSweeps = strtol(arguments[1], NULL, 10);
f0102efc:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102eff:	83 c0 04             	add    $0x4,%eax
f0102f02:	8b 00                	mov    (%eax),%eax
f0102f04:	83 ec 04             	sub    $0x4,%esp
f0102f07:	6a 0a                	push   $0xa
f0102f09:	6a 00                	push   $0x0
f0102f0b:	50                   	push   %eax
f0102f0c:	e8 c7 c8 02 00       	call   f012f7d8 <strtol>
f0102f11:	83 c4 10             	add    $0x10,%esp
f0102f14:	89 45 f4             	mov    %eax,-0xc(%ebp)
	setPageReplacmentAlgorithmNchanceCLOCK(PageWSMaxSweeps);
f0102f17:	83 ec 0c             	sub    $0xc,%esp
f0102f1a:	ff 75 f4             	pushl  -0xc(%ebp)
f0102f1d:	e8 81 ad 00 00       	call   f010dca3 <setPageReplacmentAlgorithmNchanceCLOCK>
f0102f22:	83 c4 10             	add    $0x10,%esp
	cprintf("Page replacement algorithm is now N chance CLOCK\n");
f0102f25:	83 ec 0c             	sub    $0xc,%esp
f0102f28:	68 ac 1b 13 f0       	push   $0xf0131bac
f0102f2d:	e8 ff de ff ff       	call   f0100e31 <cprintf>
f0102f32:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102f35:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102f3a:	c9                   	leave  
f0102f3b:	c3                   	ret    

f0102f3c <command_set_page_rep_CLOCK>:
int command_set_page_rep_CLOCK(int number_of_arguments, char **arguments)
{
f0102f3c:	55                   	push   %ebp
f0102f3d:	89 e5                	mov    %esp,%ebp
f0102f3f:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmCLOCK();
f0102f42:	e8 1c ad 00 00       	call   f010dc63 <setPageReplacmentAlgorithmCLOCK>
	cprintf("Page replacement algorithm is now CLOCK\n");
f0102f47:	83 ec 0c             	sub    $0xc,%esp
f0102f4a:	68 e0 1b 13 f0       	push   $0xf0131be0
f0102f4f:	e8 dd de ff ff       	call   f0100e31 <cprintf>
f0102f54:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102f57:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102f5c:	c9                   	leave  
f0102f5d:	c3                   	ret    

f0102f5e <command_set_page_rep_FIFO>:

int command_set_page_rep_FIFO(int number_of_arguments, char **arguments)
{
f0102f5e:	55                   	push   %ebp
f0102f5f:	89 e5                	mov    %esp,%ebp
f0102f61:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmFIFO();
f0102f64:	e8 0a ad 00 00       	call   f010dc73 <setPageReplacmentAlgorithmFIFO>
	cprintf("Page replacement algorithm is now FIFO\n");
f0102f69:	83 ec 0c             	sub    $0xc,%esp
f0102f6c:	68 0c 1c 13 f0       	push   $0xf0131c0c
f0102f71:	e8 bb de ff ff       	call   f0100e31 <cprintf>
f0102f76:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102f79:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102f7e:	c9                   	leave  
f0102f7f:	c3                   	ret    

f0102f80 <command_set_page_rep_ModifiedCLOCK>:

int command_set_page_rep_ModifiedCLOCK(int number_of_arguments, char **arguments)
{
f0102f80:	55                   	push   %ebp
f0102f81:	89 e5                	mov    %esp,%ebp
f0102f83:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmModifiedCLOCK();
f0102f86:	e8 f8 ac 00 00       	call   f010dc83 <setPageReplacmentAlgorithmModifiedCLOCK>
	cprintf("Page replacement algorithm is now Modified CLOCK\n");
f0102f8b:	83 ec 0c             	sub    $0xc,%esp
f0102f8e:	68 34 1c 13 f0       	push   $0xf0131c34
f0102f93:	e8 99 de ff ff       	call   f0100e31 <cprintf>
f0102f98:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102f9b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102fa0:	c9                   	leave  
f0102fa1:	c3                   	ret    

f0102fa2 <command_sch_RR>:

/*2018*///BEGIN======================================================
int command_sch_RR(int number_of_arguments, char **arguments)
{
f0102fa2:	55                   	push   %ebp
f0102fa3:	89 e5                	mov    %esp,%ebp
f0102fa5:	83 ec 18             	sub    $0x18,%esp
	uint8 quantum = strtol(arguments[1], NULL, 10);
f0102fa8:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102fab:	83 c0 04             	add    $0x4,%eax
f0102fae:	8b 00                	mov    (%eax),%eax
f0102fb0:	83 ec 04             	sub    $0x4,%esp
f0102fb3:	6a 0a                	push   $0xa
f0102fb5:	6a 00                	push   $0x0
f0102fb7:	50                   	push   %eax
f0102fb8:	e8 1b c8 02 00       	call   f012f7d8 <strtol>
f0102fbd:	83 c4 10             	add    $0x10,%esp
f0102fc0:	88 45 f7             	mov    %al,-0x9(%ebp)

	sched_init_RR(quantum);
f0102fc3:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
f0102fc7:	83 ec 0c             	sub    $0xc,%esp
f0102fca:	50                   	push   %eax
f0102fcb:	e8 44 33 00 00       	call   f0106314 <sched_init_RR>
f0102fd0:	83 c4 10             	add    $0x10,%esp
	cprintf("Scheduler is now set to Round Robin with quantum %d ms\n", quantums[0]);
f0102fd3:	a0 e8 cd 2b f0       	mov    0xf02bcde8,%al
f0102fd8:	0f b6 c0             	movzbl %al,%eax
f0102fdb:	83 ec 08             	sub    $0x8,%esp
f0102fde:	50                   	push   %eax
f0102fdf:	68 68 1c 13 f0       	push   $0xf0131c68
f0102fe4:	e8 48 de ff ff       	call   f0100e31 <cprintf>
f0102fe9:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102fec:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102ff1:	c9                   	leave  
f0102ff2:	c3                   	ret    

f0102ff3 <command_sch_MLFQ>:
int command_sch_MLFQ(int number_of_arguments, char **arguments)
{
f0102ff3:	55                   	push   %ebp
f0102ff4:	89 e5                	mov    %esp,%ebp
f0102ff6:	53                   	push   %ebx
f0102ff7:	83 ec 24             	sub    $0x24,%esp
	uint8 numOfLevels = strtol(arguments[1], NULL, 10);
f0102ffa:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102ffd:	83 c0 04             	add    $0x4,%eax
f0103000:	8b 00                	mov    (%eax),%eax
f0103002:	83 ec 04             	sub    $0x4,%esp
f0103005:	6a 0a                	push   $0xa
f0103007:	6a 00                	push   $0x0
f0103009:	50                   	push   %eax
f010300a:	e8 c9 c7 02 00       	call   f012f7d8 <strtol>
f010300f:	83 c4 10             	add    $0x10,%esp
f0103012:	88 45 ef             	mov    %al,-0x11(%ebp)
	uint8 quantumOfEachLevel[MAX_ARGUMENTS - 2] ;
	for (int i = 2 ; i < number_of_arguments ; i++)
f0103015:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
f010301c:	eb 2e                	jmp    f010304c <command_sch_MLFQ+0x59>
	{
		quantumOfEachLevel[i-2] = strtol(arguments[i], NULL, 10);
f010301e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103021:	8d 58 fe             	lea    -0x2(%eax),%ebx
f0103024:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103027:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010302e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103031:	01 d0                	add    %edx,%eax
f0103033:	8b 00                	mov    (%eax),%eax
f0103035:	83 ec 04             	sub    $0x4,%esp
f0103038:	6a 0a                	push   $0xa
f010303a:	6a 00                	push   $0x0
f010303c:	50                   	push   %eax
f010303d:	e8 96 c7 02 00       	call   f012f7d8 <strtol>
f0103042:	83 c4 10             	add    $0x10,%esp
f0103045:	88 44 1d e1          	mov    %al,-0x1f(%ebp,%ebx,1)
}
int command_sch_MLFQ(int number_of_arguments, char **arguments)
{
	uint8 numOfLevels = strtol(arguments[1], NULL, 10);
	uint8 quantumOfEachLevel[MAX_ARGUMENTS - 2] ;
	for (int i = 2 ; i < number_of_arguments ; i++)
f0103049:	ff 45 f4             	incl   -0xc(%ebp)
f010304c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010304f:	3b 45 08             	cmp    0x8(%ebp),%eax
f0103052:	7c ca                	jl     f010301e <command_sch_MLFQ+0x2b>
	{
		quantumOfEachLevel[i-2] = strtol(arguments[i], NULL, 10);
	}

	sched_init_MLFQ(numOfLevels, quantumOfEachLevel);
f0103054:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
f0103058:	83 ec 08             	sub    $0x8,%esp
f010305b:	8d 55 e1             	lea    -0x1f(%ebp),%edx
f010305e:	52                   	push   %edx
f010305f:	50                   	push   %eax
f0103060:	e8 05 33 00 00       	call   f010636a <sched_init_MLFQ>
f0103065:	83 c4 10             	add    $0x10,%esp

	cprintf("Scheduler is now set to MLFQ with quantums: ");
f0103068:	83 ec 0c             	sub    $0xc,%esp
f010306b:	68 a0 1c 13 f0       	push   $0xf0131ca0
f0103070:	e8 bc dd ff ff       	call   f0100e31 <cprintf>
f0103075:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues; i++)
f0103078:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010307f:	eb 21                	jmp    f01030a2 <command_sch_MLFQ+0xaf>
	{
		cprintf("%d   ", quantums[i]) ;
f0103081:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103084:	05 e8 cd 2b f0       	add    $0xf02bcde8,%eax
f0103089:	8a 00                	mov    (%eax),%al
f010308b:	0f b6 c0             	movzbl %al,%eax
f010308e:	83 ec 08             	sub    $0x8,%esp
f0103091:	50                   	push   %eax
f0103092:	68 cd 1c 13 f0       	push   $0xf0131ccd
f0103097:	e8 95 dd ff ff       	call   f0100e31 <cprintf>
f010309c:	83 c4 10             	add    $0x10,%esp
	}

	sched_init_MLFQ(numOfLevels, quantumOfEachLevel);

	cprintf("Scheduler is now set to MLFQ with quantums: ");
	for (int i = 0 ; i < num_of_ready_queues; i++)
f010309f:	ff 45 f0             	incl   -0x10(%ebp)
f01030a2:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f01030a7:	0f b6 c0             	movzbl %al,%eax
f01030aa:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01030ad:	7f d2                	jg     f0103081 <command_sch_MLFQ+0x8e>
	{
		cprintf("%d   ", quantums[i]) ;
	}
	cprintf("\n");
f01030af:	83 ec 0c             	sub    $0xc,%esp
f01030b2:	68 51 18 13 f0       	push   $0xf0131851
f01030b7:	e8 75 dd ff ff       	call   f0100e31 <cprintf>
f01030bc:	83 c4 10             	add    $0x10,%esp
	return 0;
f01030bf:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01030c4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01030c7:	c9                   	leave  
f01030c8:	c3                   	ret    

f01030c9 <command_sch_BSD>:
int command_sch_BSD(int number_of_arguments, char **arguments)
{
f01030c9:	55                   	push   %ebp
f01030ca:	89 e5                	mov    %esp,%ebp
f01030cc:	83 ec 18             	sub    $0x18,%esp
	uint8 numOfLevels = strtol(arguments[1], NULL, 10);
f01030cf:	8b 45 0c             	mov    0xc(%ebp),%eax
f01030d2:	83 c0 04             	add    $0x4,%eax
f01030d5:	8b 00                	mov    (%eax),%eax
f01030d7:	83 ec 04             	sub    $0x4,%esp
f01030da:	6a 0a                	push   $0xa
f01030dc:	6a 00                	push   $0x0
f01030de:	50                   	push   %eax
f01030df:	e8 f4 c6 02 00       	call   f012f7d8 <strtol>
f01030e4:	83 c4 10             	add    $0x10,%esp
f01030e7:	88 45 f7             	mov    %al,-0x9(%ebp)
	uint8 quantum = strtol(arguments[2], NULL, 10);
f01030ea:	8b 45 0c             	mov    0xc(%ebp),%eax
f01030ed:	83 c0 08             	add    $0x8,%eax
f01030f0:	8b 00                	mov    (%eax),%eax
f01030f2:	83 ec 04             	sub    $0x4,%esp
f01030f5:	6a 0a                	push   $0xa
f01030f7:	6a 00                	push   $0x0
f01030f9:	50                   	push   %eax
f01030fa:	e8 d9 c6 02 00       	call   f012f7d8 <strtol>
f01030ff:	83 c4 10             	add    $0x10,%esp
f0103102:	88 45 f6             	mov    %al,-0xa(%ebp)

	sched_init_BSD(numOfLevels, quantum);
f0103105:	0f b6 55 f6          	movzbl -0xa(%ebp),%edx
f0103109:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
f010310d:	83 ec 08             	sub    $0x8,%esp
f0103110:	52                   	push   %edx
f0103111:	50                   	push   %eax
f0103112:	e8 62 32 00 00       	call   f0106379 <sched_init_BSD>
f0103117:	83 c4 10             	add    $0x10,%esp

	cprintf("Scheduler is now set to BSD with %d levels & quantum = %d\n", numOfLevels, quantum);
f010311a:	0f b6 55 f6          	movzbl -0xa(%ebp),%edx
f010311e:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
f0103122:	83 ec 04             	sub    $0x4,%esp
f0103125:	52                   	push   %edx
f0103126:	50                   	push   %eax
f0103127:	68 d4 1c 13 f0       	push   $0xf0131cd4
f010312c:	e8 00 dd ff ff       	call   f0100e31 <cprintf>
f0103131:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f0103134:	83 ec 0c             	sub    $0xc,%esp
f0103137:	68 51 18 13 f0       	push   $0xf0131851
f010313c:	e8 f0 dc ff ff       	call   f0100e31 <cprintf>
f0103141:	83 c4 10             	add    $0x10,%esp
	return 0;
f0103144:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103149:	c9                   	leave  
f010314a:	c3                   	ret    

f010314b <command_print_sch_method>:
int command_print_sch_method(int number_of_arguments, char **arguments)
{
f010314b:	55                   	push   %ebp
f010314c:	89 e5                	mov    %esp,%ebp
f010314e:	83 ec 18             	sub    $0x18,%esp
	if (isSchedMethodMLFQ())
f0103151:	e8 43 30 00 00       	call   f0106199 <isSchedMethodMLFQ>
f0103156:	85 c0                	test   %eax,%eax
f0103158:	74 59                	je     f01031b3 <command_print_sch_method+0x68>
	{
		cprintf("Current scheduler method is MLFQ with quantums: ");
f010315a:	83 ec 0c             	sub    $0xc,%esp
f010315d:	68 10 1d 13 f0       	push   $0xf0131d10
f0103162:	e8 ca dc ff ff       	call   f0100e31 <cprintf>
f0103167:	83 c4 10             	add    $0x10,%esp
		for (int i = 0 ; i < num_of_ready_queues; i++)
f010316a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0103171:	eb 21                	jmp    f0103194 <command_print_sch_method+0x49>
		{
			cprintf("%d   ", quantums[i]) ;
f0103173:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103176:	05 e8 cd 2b f0       	add    $0xf02bcde8,%eax
f010317b:	8a 00                	mov    (%eax),%al
f010317d:	0f b6 c0             	movzbl %al,%eax
f0103180:	83 ec 08             	sub    $0x8,%esp
f0103183:	50                   	push   %eax
f0103184:	68 cd 1c 13 f0       	push   $0xf0131ccd
f0103189:	e8 a3 dc ff ff       	call   f0100e31 <cprintf>
f010318e:	83 c4 10             	add    $0x10,%esp
int command_print_sch_method(int number_of_arguments, char **arguments)
{
	if (isSchedMethodMLFQ())
	{
		cprintf("Current scheduler method is MLFQ with quantums: ");
		for (int i = 0 ; i < num_of_ready_queues; i++)
f0103191:	ff 45 f4             	incl   -0xc(%ebp)
f0103194:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0103199:	0f b6 c0             	movzbl %al,%eax
f010319c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010319f:	7f d2                	jg     f0103173 <command_print_sch_method+0x28>
		{
			cprintf("%d   ", quantums[i]) ;
		}
		cprintf("\n");
f01031a1:	83 ec 0c             	sub    $0xc,%esp
f01031a4:	68 51 18 13 f0       	push   $0xf0131851
f01031a9:	e8 83 dc ff ff       	call   f0100e31 <cprintf>
f01031ae:	83 c4 10             	add    $0x10,%esp
f01031b1:	eb 61                	jmp    f0103214 <command_print_sch_method+0xc9>
	}
	else if (isSchedMethodRR())
f01031b3:	e8 c7 2f 00 00       	call   f010617f <isSchedMethodRR>
f01031b8:	85 c0                	test   %eax,%eax
f01031ba:	74 1b                	je     f01031d7 <command_print_sch_method+0x8c>
	{
		cprintf("Current scheduler method is Round Robin with quantum %d ms\n", quantums[0]);
f01031bc:	a0 e8 cd 2b f0       	mov    0xf02bcde8,%al
f01031c1:	0f b6 c0             	movzbl %al,%eax
f01031c4:	83 ec 08             	sub    $0x8,%esp
f01031c7:	50                   	push   %eax
f01031c8:	68 44 1d 13 f0       	push   $0xf0131d44
f01031cd:	e8 5f dc ff ff       	call   f0100e31 <cprintf>
f01031d2:	83 c4 10             	add    $0x10,%esp
f01031d5:	eb 3d                	jmp    f0103214 <command_print_sch_method+0xc9>
	}
	else if (isSchedMethodBSD())
f01031d7:	e8 d8 2f 00 00       	call   f01061b4 <isSchedMethodBSD>
f01031dc:	85 c0                	test   %eax,%eax
f01031de:	74 24                	je     f0103204 <command_print_sch_method+0xb9>
	{
		cprintf("Scheduler is now set to BSD with %d levels & quantum = %d\n", num_of_ready_queues, quantums[0]);
f01031e0:	a0 e8 cd 2b f0       	mov    0xf02bcde8,%al
f01031e5:	0f b6 d0             	movzbl %al,%edx
f01031e8:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f01031ed:	0f b6 c0             	movzbl %al,%eax
f01031f0:	83 ec 04             	sub    $0x4,%esp
f01031f3:	52                   	push   %edx
f01031f4:	50                   	push   %eax
f01031f5:	68 d4 1c 13 f0       	push   $0xf0131cd4
f01031fa:	e8 32 dc ff ff       	call   f0100e31 <cprintf>
f01031ff:	83 c4 10             	add    $0x10,%esp
f0103202:	eb 10                	jmp    f0103214 <command_print_sch_method+0xc9>
	}
	else
		cprintf("Current scheduler method is UNDEFINED\n");
f0103204:	83 ec 0c             	sub    $0xc,%esp
f0103207:	68 80 1d 13 f0       	push   $0xf0131d80
f010320c:	e8 20 dc ff ff       	call   f0100e31 <cprintf>
f0103211:	83 c4 10             	add    $0x10,%esp

	return 0;
f0103214:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103219:	c9                   	leave  
f010321a:	c3                   	ret    

f010321b <command_sch_test>:
int command_sch_test(int number_of_arguments, char **arguments)
{
f010321b:	55                   	push   %ebp
f010321c:	89 e5                	mov    %esp,%ebp
f010321e:	83 ec 18             	sub    $0x18,%esp
	int status  = strtol(arguments[1], NULL, 10);
f0103221:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103224:	83 c0 04             	add    $0x4,%eax
f0103227:	8b 00                	mov    (%eax),%eax
f0103229:	83 ec 04             	sub    $0x4,%esp
f010322c:	6a 0a                	push   $0xa
f010322e:	6a 00                	push   $0x0
f0103230:	50                   	push   %eax
f0103231:	e8 a2 c5 02 00       	call   f012f7d8 <strtol>
f0103236:	83 c4 10             	add    $0x10,%esp
f0103239:	89 45 f4             	mov    %eax,-0xc(%ebp)
	chksch(status);
f010323c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010323f:	0f b6 c0             	movzbl %al,%eax
f0103242:	83 ec 0c             	sub    $0xc,%esp
f0103245:	50                   	push   %eax
f0103246:	e8 ca b4 02 00       	call   f012e715 <chksch>
f010324b:	83 c4 10             	add    $0x10,%esp
	if (status == 0)
f010324e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103252:	75 12                	jne    f0103266 <command_sch_test+0x4b>
		cprintf("Testing the scheduler is TURNED OFF\n");
f0103254:	83 ec 0c             	sub    $0xc,%esp
f0103257:	68 a8 1d 13 f0       	push   $0xf0131da8
f010325c:	e8 d0 db ff ff       	call   f0100e31 <cprintf>
f0103261:	83 c4 10             	add    $0x10,%esp
f0103264:	eb 16                	jmp    f010327c <command_sch_test+0x61>
	else if (status == 1)
f0103266:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f010326a:	75 10                	jne    f010327c <command_sch_test+0x61>
		cprintf("Testing the scheduler is TURNED ON\n");
f010326c:	83 ec 0c             	sub    $0xc,%esp
f010326f:	68 d0 1d 13 f0       	push   $0xf0131dd0
f0103274:	e8 b8 db ff ff       	call   f0100e31 <cprintf>
f0103279:	83 c4 10             	add    $0x10,%esp
	return 0;
f010327c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103281:	c9                   	leave  
f0103282:	c3                   	ret    

f0103283 <command_print_page_rep>:
/*2018*///END======================================================


/*2015*///BEGIN======================================================
int command_print_page_rep(int number_of_arguments, char **arguments)
{
f0103283:	55                   	push   %ebp
f0103284:	89 e5                	mov    %esp,%ebp
f0103286:	83 ec 08             	sub    $0x8,%esp
	if (isPageReplacmentAlgorithmCLOCK())
f0103289:	e8 43 aa 00 00       	call   f010dcd1 <isPageReplacmentAlgorithmCLOCK>
f010328e:	85 c0                	test   %eax,%eax
f0103290:	74 15                	je     f01032a7 <command_print_page_rep+0x24>
		cprintf("Page replacement algorithm is CLOCK\n");
f0103292:	83 ec 0c             	sub    $0xc,%esp
f0103295:	68 f4 1d 13 f0       	push   $0xf0131df4
f010329a:	e8 92 db ff ff       	call   f0100e31 <cprintf>
f010329f:	83 c4 10             	add    $0x10,%esp
f01032a2:	e9 8c 00 00 00       	jmp    f0103333 <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX))
f01032a7:	83 ec 0c             	sub    $0xc,%esp
f01032aa:	6a 01                	push   $0x1
f01032ac:	e8 0a aa 00 00       	call   f010dcbb <isPageReplacmentAlgorithmLRU>
f01032b1:	83 c4 10             	add    $0x10,%esp
f01032b4:	85 c0                	test   %eax,%eax
f01032b6:	74 12                	je     f01032ca <command_print_page_rep+0x47>
		cprintf("Page replacement algorithm is LRU with TimeStamp approximation\n");
f01032b8:	83 ec 0c             	sub    $0xc,%esp
f01032bb:	68 1c 1e 13 f0       	push   $0xf0131e1c
f01032c0:	e8 6c db ff ff       	call   f0100e31 <cprintf>
f01032c5:	83 c4 10             	add    $0x10,%esp
f01032c8:	eb 69                	jmp    f0103333 <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f01032ca:	83 ec 0c             	sub    $0xc,%esp
f01032cd:	6a 02                	push   $0x2
f01032cf:	e8 e7 a9 00 00       	call   f010dcbb <isPageReplacmentAlgorithmLRU>
f01032d4:	83 c4 10             	add    $0x10,%esp
f01032d7:	85 c0                	test   %eax,%eax
f01032d9:	74 12                	je     f01032ed <command_print_page_rep+0x6a>
		cprintf("Page replacement algorithm is LRU with LISTS approximation\n");
f01032db:	83 ec 0c             	sub    $0xc,%esp
f01032de:	68 5c 1e 13 f0       	push   $0xf0131e5c
f01032e3:	e8 49 db ff ff       	call   f0100e31 <cprintf>
f01032e8:	83 c4 10             	add    $0x10,%esp
f01032eb:	eb 46                	jmp    f0103333 <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmFIFO())
f01032ed:	e8 fa a9 00 00       	call   f010dcec <isPageReplacmentAlgorithmFIFO>
f01032f2:	85 c0                	test   %eax,%eax
f01032f4:	74 12                	je     f0103308 <command_print_page_rep+0x85>
		cprintf("Page replacement algorithm is FIFO\n");
f01032f6:	83 ec 0c             	sub    $0xc,%esp
f01032f9:	68 98 1e 13 f0       	push   $0xf0131e98
f01032fe:	e8 2e db ff ff       	call   f0100e31 <cprintf>
f0103303:	83 c4 10             	add    $0x10,%esp
f0103306:	eb 2b                	jmp    f0103333 <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmModifiedCLOCK())
f0103308:	e8 fa a9 00 00       	call   f010dd07 <isPageReplacmentAlgorithmModifiedCLOCK>
f010330d:	85 c0                	test   %eax,%eax
f010330f:	74 12                	je     f0103323 <command_print_page_rep+0xa0>
		cprintf("Page replacement algorithm is Modified CLOCK\n");
f0103311:	83 ec 0c             	sub    $0xc,%esp
f0103314:	68 bc 1e 13 f0       	push   $0xf0131ebc
f0103319:	e8 13 db ff ff       	call   f0100e31 <cprintf>
f010331e:	83 c4 10             	add    $0x10,%esp
f0103321:	eb 10                	jmp    f0103333 <command_print_page_rep+0xb0>
	else
		cprintf("Page replacement algorithm is UNDEFINED\n");
f0103323:	83 ec 0c             	sub    $0xc,%esp
f0103326:	68 ec 1e 13 f0       	push   $0xf0131eec
f010332b:	e8 01 db ff ff       	call   f0100e31 <cprintf>
f0103330:	83 c4 10             	add    $0x10,%esp

	return 0;
f0103333:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103338:	c9                   	leave  
f0103339:	c3                   	ret    

f010333a <command_set_uheap_plac_FIRSTFIT>:


int command_set_uheap_plac_FIRSTFIT(int number_of_arguments, char **arguments)
{
f010333a:	55                   	push   %ebp
f010333b:	89 e5                	mov    %esp,%ebp
f010333d:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyFIRSTFIT();
f0103340:	e8 b4 ef ff ff       	call   f01022f9 <setUHeapPlacementStrategyFIRSTFIT>
	cprintf("User Heap placement strategy is now FIRST FIT\n");
f0103345:	83 ec 0c             	sub    $0xc,%esp
f0103348:	68 18 1f 13 f0       	push   $0xf0131f18
f010334d:	e8 df da ff ff       	call   f0100e31 <cprintf>
f0103352:	83 c4 10             	add    $0x10,%esp
	return 0;
f0103355:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010335a:	c9                   	leave  
f010335b:	c3                   	ret    

f010335c <command_set_uheap_plac_BESTFIT>:

int command_set_uheap_plac_BESTFIT(int number_of_arguments, char **arguments)
{
f010335c:	55                   	push   %ebp
f010335d:	89 e5                	mov    %esp,%ebp
f010335f:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyBESTFIT();
f0103362:	e8 a2 ef ff ff       	call   f0102309 <setUHeapPlacementStrategyBESTFIT>
	cprintf("User Heap placement strategy is now BEST FIT\n");
f0103367:	83 ec 0c             	sub    $0xc,%esp
f010336a:	68 48 1f 13 f0       	push   $0xf0131f48
f010336f:	e8 bd da ff ff       	call   f0100e31 <cprintf>
f0103374:	83 c4 10             	add    $0x10,%esp
	return 0;
f0103377:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010337c:	c9                   	leave  
f010337d:	c3                   	ret    

f010337e <command_set_uheap_plac_NEXTFIT>:

int command_set_uheap_plac_NEXTFIT(int number_of_arguments, char **arguments)
{
f010337e:	55                   	push   %ebp
f010337f:	89 e5                	mov    %esp,%ebp
f0103381:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyNEXTFIT();
f0103384:	e8 90 ef ff ff       	call   f0102319 <setUHeapPlacementStrategyNEXTFIT>
	cprintf("User Heap placement strategy is now NEXT FIT\n");
f0103389:	83 ec 0c             	sub    $0xc,%esp
f010338c:	68 78 1f 13 f0       	push   $0xf0131f78
f0103391:	e8 9b da ff ff       	call   f0100e31 <cprintf>
f0103396:	83 c4 10             	add    $0x10,%esp
	return 0;
f0103399:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010339e:	c9                   	leave  
f010339f:	c3                   	ret    

f01033a0 <command_set_uheap_plac_WORSTFIT>:
int command_set_uheap_plac_WORSTFIT(int number_of_arguments, char **arguments)
{
f01033a0:	55                   	push   %ebp
f01033a1:	89 e5                	mov    %esp,%ebp
f01033a3:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyWORSTFIT();
f01033a6:	e8 7e ef ff ff       	call   f0102329 <setUHeapPlacementStrategyWORSTFIT>
	cprintf("User Heap placement strategy is now WORST FIT\n");
f01033ab:	83 ec 0c             	sub    $0xc,%esp
f01033ae:	68 a8 1f 13 f0       	push   $0xf0131fa8
f01033b3:	e8 79 da ff ff       	call   f0100e31 <cprintf>
f01033b8:	83 c4 10             	add    $0x10,%esp
	return 0;
f01033bb:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01033c0:	c9                   	leave  
f01033c1:	c3                   	ret    

f01033c2 <command_print_uheap_plac>:

int command_print_uheap_plac(int number_of_arguments, char **arguments)
{
f01033c2:	55                   	push   %ebp
f01033c3:	89 e5                	mov    %esp,%ebp
f01033c5:	83 ec 08             	sub    $0x8,%esp
	if (isUHeapPlacementStrategyFIRSTFIT())
f01033c8:	e8 6c ef ff ff       	call   f0102339 <isUHeapPlacementStrategyFIRSTFIT>
f01033cd:	84 c0                	test   %al,%al
f01033cf:	74 12                	je     f01033e3 <command_print_uheap_plac+0x21>
		cprintf("User Heap placement strategy is FIRST FIT\n");
f01033d1:	83 ec 0c             	sub    $0xc,%esp
f01033d4:	68 d8 1f 13 f0       	push   $0xf0131fd8
f01033d9:	e8 53 da ff ff       	call   f0100e31 <cprintf>
f01033de:	83 c4 10             	add    $0x10,%esp
f01033e1:	eb 61                	jmp    f0103444 <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyBESTFIT())
f01033e3:	e8 66 ef ff ff       	call   f010234e <isUHeapPlacementStrategyBESTFIT>
f01033e8:	84 c0                	test   %al,%al
f01033ea:	74 12                	je     f01033fe <command_print_uheap_plac+0x3c>
		cprintf("User Heap placement strategy is BEST FIT\n");
f01033ec:	83 ec 0c             	sub    $0xc,%esp
f01033ef:	68 04 20 13 f0       	push   $0xf0132004
f01033f4:	e8 38 da ff ff       	call   f0100e31 <cprintf>
f01033f9:	83 c4 10             	add    $0x10,%esp
f01033fc:	eb 46                	jmp    f0103444 <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyNEXTFIT())
f01033fe:	e8 60 ef ff ff       	call   f0102363 <isUHeapPlacementStrategyNEXTFIT>
f0103403:	84 c0                	test   %al,%al
f0103405:	74 12                	je     f0103419 <command_print_uheap_plac+0x57>
		cprintf("User Heap placement strategy is NEXT FIT\n");
f0103407:	83 ec 0c             	sub    $0xc,%esp
f010340a:	68 30 20 13 f0       	push   $0xf0132030
f010340f:	e8 1d da ff ff       	call   f0100e31 <cprintf>
f0103414:	83 c4 10             	add    $0x10,%esp
f0103417:	eb 2b                	jmp    f0103444 <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyWORSTFIT())
f0103419:	e8 5a ef ff ff       	call   f0102378 <isUHeapPlacementStrategyWORSTFIT>
f010341e:	84 c0                	test   %al,%al
f0103420:	74 12                	je     f0103434 <command_print_uheap_plac+0x72>
		cprintf("User Heap placement strategy is WORST FIT\n");
f0103422:	83 ec 0c             	sub    $0xc,%esp
f0103425:	68 5c 20 13 f0       	push   $0xf013205c
f010342a:	e8 02 da ff ff       	call   f0100e31 <cprintf>
f010342f:	83 c4 10             	add    $0x10,%esp
f0103432:	eb 10                	jmp    f0103444 <command_print_uheap_plac+0x82>
	else
		cprintf("User Heap placement strategy is UNDEFINED\n");
f0103434:	83 ec 0c             	sub    $0xc,%esp
f0103437:	68 88 20 13 f0       	push   $0xf0132088
f010343c:	e8 f0 d9 ff ff       	call   f0100e31 <cprintf>
f0103441:	83 c4 10             	add    $0x10,%esp

	return 0;
f0103444:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103449:	c9                   	leave  
f010344a:	c3                   	ret    

f010344b <command_set_kheap_plac_CONTALLOC>:
/*2015*///END======================================================

/*2017*///BEGIN======================================================

int command_set_kheap_plac_CONTALLOC(int number_of_arguments, char **arguments)
{
f010344b:	55                   	push   %ebp
f010344c:	89 e5                	mov    %esp,%ebp
f010344e:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyCONTALLOC();
f0103451:	e8 eb ed ff ff       	call   f0102241 <setKHeapPlacementStrategyCONTALLOC>
	cprintf("Kernel Heap placement strategy is now FIRST FIT\n");
f0103456:	83 ec 0c             	sub    $0xc,%esp
f0103459:	68 b4 20 13 f0       	push   $0xf01320b4
f010345e:	e8 ce d9 ff ff       	call   f0100e31 <cprintf>
f0103463:	83 c4 10             	add    $0x10,%esp
	return 0;
f0103466:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010346b:	c9                   	leave  
f010346c:	c3                   	ret    

f010346d <command_set_kheap_plac_FIRSTFIT>:

int command_set_kheap_plac_FIRSTFIT(int number_of_arguments, char **arguments)
{
f010346d:	55                   	push   %ebp
f010346e:	89 e5                	mov    %esp,%ebp
f0103470:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyFIRSTFIT();
f0103473:	e8 d9 ed ff ff       	call   f0102251 <setKHeapPlacementStrategyFIRSTFIT>
	cprintf("Kernel Heap placement strategy is now FIRST FIT\n");
f0103478:	83 ec 0c             	sub    $0xc,%esp
f010347b:	68 b4 20 13 f0       	push   $0xf01320b4
f0103480:	e8 ac d9 ff ff       	call   f0100e31 <cprintf>
f0103485:	83 c4 10             	add    $0x10,%esp
	return 0;
f0103488:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010348d:	c9                   	leave  
f010348e:	c3                   	ret    

f010348f <command_set_kheap_plac_BESTFIT>:

int command_set_kheap_plac_BESTFIT(int number_of_arguments, char **arguments)
{
f010348f:	55                   	push   %ebp
f0103490:	89 e5                	mov    %esp,%ebp
f0103492:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyBESTFIT();
f0103495:	e8 c7 ed ff ff       	call   f0102261 <setKHeapPlacementStrategyBESTFIT>
	cprintf("Kernel Heap placement strategy is now BEST FIT\n");
f010349a:	83 ec 0c             	sub    $0xc,%esp
f010349d:	68 e8 20 13 f0       	push   $0xf01320e8
f01034a2:	e8 8a d9 ff ff       	call   f0100e31 <cprintf>
f01034a7:	83 c4 10             	add    $0x10,%esp
	return 0;
f01034aa:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01034af:	c9                   	leave  
f01034b0:	c3                   	ret    

f01034b1 <command_set_kheap_plac_NEXTFIT>:

int command_set_kheap_plac_NEXTFIT(int number_of_arguments, char **arguments)
{
f01034b1:	55                   	push   %ebp
f01034b2:	89 e5                	mov    %esp,%ebp
f01034b4:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyNEXTFIT();
f01034b7:	e8 b5 ed ff ff       	call   f0102271 <setKHeapPlacementStrategyNEXTFIT>
	cprintf("Kernel Heap placement strategy is now NEXT FIT\n");
f01034bc:	83 ec 0c             	sub    $0xc,%esp
f01034bf:	68 18 21 13 f0       	push   $0xf0132118
f01034c4:	e8 68 d9 ff ff       	call   f0100e31 <cprintf>
f01034c9:	83 c4 10             	add    $0x10,%esp
	return 0;
f01034cc:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01034d1:	c9                   	leave  
f01034d2:	c3                   	ret    

f01034d3 <command_set_kheap_plac_WORSTFIT>:
int command_set_kheap_plac_WORSTFIT(int number_of_arguments, char **arguments)
{
f01034d3:	55                   	push   %ebp
f01034d4:	89 e5                	mov    %esp,%ebp
f01034d6:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyWORSTFIT();
f01034d9:	e8 a3 ed ff ff       	call   f0102281 <setKHeapPlacementStrategyWORSTFIT>
	cprintf("Kernel Heap placement strategy is now WORST FIT\n");
f01034de:	83 ec 0c             	sub    $0xc,%esp
f01034e1:	68 48 21 13 f0       	push   $0xf0132148
f01034e6:	e8 46 d9 ff ff       	call   f0100e31 <cprintf>
f01034eb:	83 c4 10             	add    $0x10,%esp
	return 0;
f01034ee:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01034f3:	c9                   	leave  
f01034f4:	c3                   	ret    

f01034f5 <command_print_kheap_plac>:

int command_print_kheap_plac(int number_of_arguments, char **arguments)
{
f01034f5:	55                   	push   %ebp
f01034f6:	89 e5                	mov    %esp,%ebp
f01034f8:	83 ec 08             	sub    $0x8,%esp
	if (isKHeapPlacementStrategyCONTALLOC())
f01034fb:	e8 91 ed ff ff       	call   f0102291 <isKHeapPlacementStrategyCONTALLOC>
f0103500:	84 c0                	test   %al,%al
f0103502:	74 12                	je     f0103516 <command_print_kheap_plac+0x21>
		cprintf("Kernel Heap placement strategy is CONTINUOUS ALLOCATION\n");
f0103504:	83 ec 0c             	sub    $0xc,%esp
f0103507:	68 7c 21 13 f0       	push   $0xf013217c
f010350c:	e8 20 d9 ff ff       	call   f0100e31 <cprintf>
f0103511:	83 c4 10             	add    $0x10,%esp
f0103514:	eb 7c                	jmp    f0103592 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyFIRSTFIT())
f0103516:	e8 8a ed ff ff       	call   f01022a5 <isKHeapPlacementStrategyFIRSTFIT>
f010351b:	84 c0                	test   %al,%al
f010351d:	74 12                	je     f0103531 <command_print_kheap_plac+0x3c>
		cprintf("Kernel Heap placement strategy is FIRST FIT\n");
f010351f:	83 ec 0c             	sub    $0xc,%esp
f0103522:	68 b8 21 13 f0       	push   $0xf01321b8
f0103527:	e8 05 d9 ff ff       	call   f0100e31 <cprintf>
f010352c:	83 c4 10             	add    $0x10,%esp
f010352f:	eb 61                	jmp    f0103592 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyBESTFIT())
f0103531:	e8 84 ed ff ff       	call   f01022ba <isKHeapPlacementStrategyBESTFIT>
f0103536:	84 c0                	test   %al,%al
f0103538:	74 12                	je     f010354c <command_print_kheap_plac+0x57>
		cprintf("Kernel Heap placement strategy is BEST FIT\n");
f010353a:	83 ec 0c             	sub    $0xc,%esp
f010353d:	68 e8 21 13 f0       	push   $0xf01321e8
f0103542:	e8 ea d8 ff ff       	call   f0100e31 <cprintf>
f0103547:	83 c4 10             	add    $0x10,%esp
f010354a:	eb 46                	jmp    f0103592 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyNEXTFIT())
f010354c:	e8 7e ed ff ff       	call   f01022cf <isKHeapPlacementStrategyNEXTFIT>
f0103551:	84 c0                	test   %al,%al
f0103553:	74 12                	je     f0103567 <command_print_kheap_plac+0x72>
		cprintf("Kernel Heap placement strategy is NEXT FIT\n");
f0103555:	83 ec 0c             	sub    $0xc,%esp
f0103558:	68 14 22 13 f0       	push   $0xf0132214
f010355d:	e8 cf d8 ff ff       	call   f0100e31 <cprintf>
f0103562:	83 c4 10             	add    $0x10,%esp
f0103565:	eb 2b                	jmp    f0103592 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyWORSTFIT())
f0103567:	e8 78 ed ff ff       	call   f01022e4 <isKHeapPlacementStrategyWORSTFIT>
f010356c:	84 c0                	test   %al,%al
f010356e:	74 12                	je     f0103582 <command_print_kheap_plac+0x8d>
		cprintf("Kernel Heap placement strategy is WORST FIT\n");
f0103570:	83 ec 0c             	sub    $0xc,%esp
f0103573:	68 40 22 13 f0       	push   $0xf0132240
f0103578:	e8 b4 d8 ff ff       	call   f0100e31 <cprintf>
f010357d:	83 c4 10             	add    $0x10,%esp
f0103580:	eb 10                	jmp    f0103592 <command_print_kheap_plac+0x9d>
	else
		cprintf("Kernel Heap placement strategy is UNDEFINED\n");
f0103582:	83 ec 0c             	sub    $0xc,%esp
f0103585:	68 70 22 13 f0       	push   $0xf0132270
f010358a:	e8 a2 d8 ff ff       	call   f0100e31 <cprintf>
f010358f:	83 c4 10             	add    $0x10,%esp

	return 0;
f0103592:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103597:	c9                   	leave  
f0103598:	c3                   	ret    

f0103599 <command_disable_modified_buffer>:

/*2017*///END======================================================

int command_disable_modified_buffer(int number_of_arguments, char **arguments)
{
f0103599:	55                   	push   %ebp
f010359a:	89 e5                	mov    %esp,%ebp
f010359c:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f010359f:	e8 da a7 00 00       	call   f010dd7e <isBufferingEnabled>
f01035a4:	84 c0                	test   %al,%al
f01035a6:	75 12                	jne    f01035ba <command_disable_modified_buffer+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering first.\n");
f01035a8:	83 ec 0c             	sub    $0xc,%esp
f01035ab:	68 a0 22 13 f0       	push   $0xf01322a0
f01035b0:	e8 7c d8 ff ff       	call   f0100e31 <cprintf>
f01035b5:	83 c4 10             	add    $0x10,%esp
f01035b8:	eb 1d                	jmp    f01035d7 <command_disable_modified_buffer+0x3e>
	}
	else
	{
		enableModifiedBuffer(0);
f01035ba:	83 ec 0c             	sub    $0xc,%esp
f01035bd:	6a 00                	push   $0x0
f01035bf:	e8 94 a7 00 00       	call   f010dd58 <enableModifiedBuffer>
f01035c4:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified Buffer is now DISABLED\n");
f01035c7:	83 ec 0c             	sub    $0xc,%esp
f01035ca:	68 dc 22 13 f0       	push   $0xf01322dc
f01035cf:	e8 5d d8 ff ff       	call   f0100e31 <cprintf>
f01035d4:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f01035d7:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01035dc:	c9                   	leave  
f01035dd:	c3                   	ret    

f01035de <command_enable_modified_buffer>:


int command_enable_modified_buffer(int number_of_arguments, char **arguments)
{
f01035de:	55                   	push   %ebp
f01035df:	89 e5                	mov    %esp,%ebp
f01035e1:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f01035e4:	e8 95 a7 00 00       	call   f010dd7e <isBufferingEnabled>
f01035e9:	84 c0                	test   %al,%al
f01035eb:	75 12                	jne    f01035ff <command_enable_modified_buffer+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering first.\n");
f01035ed:	83 ec 0c             	sub    $0xc,%esp
f01035f0:	68 a0 22 13 f0       	push   $0xf01322a0
f01035f5:	e8 37 d8 ff ff       	call   f0100e31 <cprintf>
f01035fa:	83 c4 10             	add    $0x10,%esp
f01035fd:	eb 1d                	jmp    f010361c <command_enable_modified_buffer+0x3e>
	}
	else
	{
		enableModifiedBuffer(1);
f01035ff:	83 ec 0c             	sub    $0xc,%esp
f0103602:	6a 01                	push   $0x1
f0103604:	e8 4f a7 00 00       	call   f010dd58 <enableModifiedBuffer>
f0103609:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified Buffer is now ENABLED\n");
f010360c:	83 ec 0c             	sub    $0xc,%esp
f010360f:	68 00 23 13 f0       	push   $0xf0132300
f0103614:	e8 18 d8 ff ff       	call   f0100e31 <cprintf>
f0103619:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f010361c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103621:	c9                   	leave  
f0103622:	c3                   	ret    

f0103623 <command_disable_buffering>:

/*2016 ============================================================================*/

int command_disable_buffering(int number_of_arguments, char **arguments)
{
f0103623:	55                   	push   %ebp
f0103624:	89 e5                	mov    %esp,%ebp
f0103626:	83 ec 08             	sub    $0x8,%esp
	enableBuffering(0);
f0103629:	83 ec 0c             	sub    $0xc,%esp
f010362c:	6a 00                	push   $0x0
f010362e:	e8 3d a7 00 00       	call   f010dd70 <enableBuffering>
f0103633:	83 c4 10             	add    $0x10,%esp
	enableModifiedBuffer(0);
f0103636:	83 ec 0c             	sub    $0xc,%esp
f0103639:	6a 00                	push   $0x0
f010363b:	e8 18 a7 00 00       	call   f010dd58 <enableModifiedBuffer>
f0103640:	83 c4 10             	add    $0x10,%esp
	cprintf("Buffering is now DISABLED\n");
f0103643:	83 ec 0c             	sub    $0xc,%esp
f0103646:	68 20 23 13 f0       	push   $0xf0132320
f010364b:	e8 e1 d7 ff ff       	call   f0100e31 <cprintf>
f0103650:	83 c4 10             	add    $0x10,%esp
	return 0;
f0103653:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103658:	c9                   	leave  
f0103659:	c3                   	ret    

f010365a <command_enable_buffering>:


int command_enable_buffering(int number_of_arguments, char **arguments)
{
f010365a:	55                   	push   %ebp
f010365b:	89 e5                	mov    %esp,%ebp
f010365d:	83 ec 78             	sub    $0x78,%esp
	enableBuffering(1);
f0103660:	83 ec 0c             	sub    $0xc,%esp
f0103663:	6a 01                	push   $0x1
f0103665:	e8 06 a7 00 00       	call   f010dd70 <enableBuffering>
f010366a:	83 c4 10             	add    $0x10,%esp
	enableModifiedBuffer(1);
f010366d:	83 ec 0c             	sub    $0xc,%esp
f0103670:	6a 01                	push   $0x1
f0103672:	e8 e1 a6 00 00       	call   f010dd58 <enableModifiedBuffer>
f0103677:	83 c4 10             	add    $0x10,%esp
	if(getModifiedBufferLength() == 0)
f010367a:	e8 17 a7 00 00       	call   f010dd96 <getModifiedBufferLength>
f010367f:	85 c0                	test   %eax,%eax
f0103681:	75 59                	jne    f01036dc <command_enable_buffering+0x82>
	{
		cprintf("Modified buffer enabled but with length = 0\n");
f0103683:	83 ec 0c             	sub    $0xc,%esp
f0103686:	68 3c 23 13 f0       	push   $0xf013233c
f010368b:	e8 a1 d7 ff ff       	call   f0100e31 <cprintf>
f0103690:	83 c4 10             	add    $0x10,%esp
		char str[100];
		readline("Please enter the modified buff length = ", str);
f0103693:	83 ec 08             	sub    $0x8,%esp
f0103696:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0103699:	50                   	push   %eax
f010369a:	68 6c 23 13 f0       	push   $0xf013236c
f010369f:	e8 ce bb 02 00       	call   f012f272 <readline>
f01036a4:	83 c4 10             	add    $0x10,%esp
		setModifiedBufferLength(strtol(str, NULL, 10));
f01036a7:	83 ec 04             	sub    $0x4,%esp
f01036aa:	6a 0a                	push   $0xa
f01036ac:	6a 00                	push   $0x0
f01036ae:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01036b1:	50                   	push   %eax
f01036b2:	e8 21 c1 02 00       	call   f012f7d8 <strtol>
f01036b7:	83 c4 10             	add    $0x10,%esp
f01036ba:	83 ec 0c             	sub    $0xc,%esp
f01036bd:	50                   	push   %eax
f01036be:	e8 c5 a6 00 00       	call   f010dd88 <setModifiedBufferLength>
f01036c3:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified buffer length updated = %d\n", getModifiedBufferLength());
f01036c6:	e8 cb a6 00 00       	call   f010dd96 <getModifiedBufferLength>
f01036cb:	83 ec 08             	sub    $0x8,%esp
f01036ce:	50                   	push   %eax
f01036cf:	68 98 23 13 f0       	push   $0xf0132398
f01036d4:	e8 58 d7 ff ff       	call   f0100e31 <cprintf>
f01036d9:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("Buffering is now ENABLED\n");
f01036dc:	83 ec 0c             	sub    $0xc,%esp
f01036df:	68 bd 23 13 f0       	push   $0xf01323bd
f01036e4:	e8 48 d7 ff ff       	call   f0100e31 <cprintf>
f01036e9:	83 c4 10             	add    $0x10,%esp
	return 0;
f01036ec:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01036f1:	c9                   	leave  
f01036f2:	c3                   	ret    

f01036f3 <command_set_modified_buffer_length>:

int command_set_modified_buffer_length(int number_of_arguments, char **arguments)
{
f01036f3:	55                   	push   %ebp
f01036f4:	89 e5                	mov    %esp,%ebp
f01036f6:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f01036f9:	e8 80 a6 00 00       	call   f010dd7e <isBufferingEnabled>
f01036fe:	84 c0                	test   %al,%al
f0103700:	75 12                	jne    f0103714 <command_set_modified_buffer_length+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering to use the modified buffer.\n");
f0103702:	83 ec 0c             	sub    $0xc,%esp
f0103705:	68 d8 23 13 f0       	push   $0xf01323d8
f010370a:	e8 22 d7 ff ff       	call   f0100e31 <cprintf>
f010370f:	83 c4 10             	add    $0x10,%esp
f0103712:	eb 19                	jmp    f010372d <command_set_modified_buffer_length+0x3a>
	}
	else if (!isModifiedBufferEnabled())
f0103714:	e8 4d a6 00 00       	call   f010dd66 <isModifiedBufferEnabled>
f0103719:	84 c0                	test   %al,%al
f010371b:	75 10                	jne    f010372d <command_set_modified_buffer_length+0x3a>
	{
		cprintf("Modified Buffering is not enabled. Please enable modified buffering.\n");
f010371d:	83 ec 0c             	sub    $0xc,%esp
f0103720:	68 28 24 13 f0       	push   $0xf0132428
f0103725:	e8 07 d7 ff ff       	call   f0100e31 <cprintf>
f010372a:	83 c4 10             	add    $0x10,%esp
	}
	setModifiedBufferLength(strtol(arguments[1], NULL, 10));
f010372d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103730:	83 c0 04             	add    $0x4,%eax
f0103733:	8b 00                	mov    (%eax),%eax
f0103735:	83 ec 04             	sub    $0x4,%esp
f0103738:	6a 0a                	push   $0xa
f010373a:	6a 00                	push   $0x0
f010373c:	50                   	push   %eax
f010373d:	e8 96 c0 02 00       	call   f012f7d8 <strtol>
f0103742:	83 c4 10             	add    $0x10,%esp
f0103745:	83 ec 0c             	sub    $0xc,%esp
f0103748:	50                   	push   %eax
f0103749:	e8 3a a6 00 00       	call   f010dd88 <setModifiedBufferLength>
f010374e:	83 c4 10             	add    $0x10,%esp
	cprintf("Modified buffer length updated = %d\n", getModifiedBufferLength());
f0103751:	e8 40 a6 00 00       	call   f010dd96 <getModifiedBufferLength>
f0103756:	83 ec 08             	sub    $0x8,%esp
f0103759:	50                   	push   %eax
f010375a:	68 98 23 13 f0       	push   $0xf0132398
f010375f:	e8 cd d6 ff ff       	call   f0100e31 <cprintf>
f0103764:	83 c4 10             	add    $0x10,%esp
	return 0;
f0103767:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010376c:	c9                   	leave  
f010376d:	c3                   	ret    

f010376e <command_get_modified_buffer_length>:

int command_get_modified_buffer_length(int number_of_arguments, char **arguments)
{
f010376e:	55                   	push   %ebp
f010376f:	89 e5                	mov    %esp,%ebp
f0103771:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f0103774:	e8 05 a6 00 00       	call   f010dd7e <isBufferingEnabled>
f0103779:	84 c0                	test   %al,%al
f010377b:	75 12                	jne    f010378f <command_get_modified_buffer_length+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering to use the modified buffer.\n");
f010377d:	83 ec 0c             	sub    $0xc,%esp
f0103780:	68 d8 23 13 f0       	push   $0xf01323d8
f0103785:	e8 a7 d6 ff ff       	call   f0100e31 <cprintf>
f010378a:	83 c4 10             	add    $0x10,%esp
f010378d:	eb 19                	jmp    f01037a8 <command_get_modified_buffer_length+0x3a>
	}
	else if (!isModifiedBufferEnabled())
f010378f:	e8 d2 a5 00 00       	call   f010dd66 <isModifiedBufferEnabled>
f0103794:	84 c0                	test   %al,%al
f0103796:	75 10                	jne    f01037a8 <command_get_modified_buffer_length+0x3a>
	{
		cprintf("Modified Buffering is not enabled. Please enable modified buffering.\n");
f0103798:	83 ec 0c             	sub    $0xc,%esp
f010379b:	68 28 24 13 f0       	push   $0xf0132428
f01037a0:	e8 8c d6 ff ff       	call   f0100e31 <cprintf>
f01037a5:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("Modified buffer length = %d\n", getModifiedBufferLength());
f01037a8:	e8 e9 a5 00 00       	call   f010dd96 <getModifiedBufferLength>
f01037ad:	83 ec 08             	sub    $0x8,%esp
f01037b0:	50                   	push   %eax
f01037b1:	68 6e 24 13 f0       	push   $0xf013246e
f01037b6:	e8 76 d6 ff ff       	call   f0100e31 <cprintf>
f01037bb:	83 c4 10             	add    $0x10,%esp
	return 0;
f01037be:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01037c3:	c9                   	leave  
f01037c4:	c3                   	ret    

f01037c5 <command_tst>:

int command_tst(int number_of_arguments, char **arguments)
{
f01037c5:	55                   	push   %ebp
f01037c6:	89 e5                	mov    %esp,%ebp
f01037c8:	83 ec 08             	sub    $0x8,%esp
	return tst_handler(number_of_arguments, arguments);
f01037cb:	83 ec 08             	sub    $0x8,%esp
f01037ce:	ff 75 0c             	pushl  0xc(%ebp)
f01037d1:	ff 75 08             	pushl  0x8(%ebp)
f01037d4:	e8 03 aa 00 00       	call   f010e1dc <tst_handler>
f01037d9:	83 c4 10             	add    $0x10,%esp
}
f01037dc:	c9                   	leave  
f01037dd:	c3                   	ret    

f01037de <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f01037de:	55                   	push   %ebp
f01037df:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f01037e1:	8b 45 08             	mov    0x8(%ebp),%eax
f01037e4:	8b 15 10 ce 2b f0    	mov    0xf02bce10,%edx
f01037ea:	29 d0                	sub    %edx,%eax
f01037ec:	c1 f8 02             	sar    $0x2,%eax
f01037ef:	89 c2                	mov    %eax,%edx
f01037f1:	89 d0                	mov    %edx,%eax
f01037f3:	c1 e0 03             	shl    $0x3,%eax
f01037f6:	01 d0                	add    %edx,%eax
f01037f8:	c1 e0 03             	shl    $0x3,%eax
f01037fb:	01 d0                	add    %edx,%eax
f01037fd:	c1 e0 03             	shl    $0x3,%eax
f0103800:	01 d0                	add    %edx,%eax
f0103802:	c1 e0 03             	shl    $0x3,%eax
f0103805:	01 d0                	add    %edx,%eax
f0103807:	89 c1                	mov    %eax,%ecx
f0103809:	c1 e1 0f             	shl    $0xf,%ecx
f010380c:	01 c8                	add    %ecx,%eax
f010380e:	c1 e0 03             	shl    $0x3,%eax
f0103811:	01 d0                	add    %edx,%eax
f0103813:	f7 d8                	neg    %eax
}
f0103815:	5d                   	pop    %ebp
f0103816:	c3                   	ret    

f0103817 <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f0103817:	55                   	push   %ebp
f0103818:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f010381a:	ff 75 08             	pushl  0x8(%ebp)
f010381d:	e8 bc ff ff ff       	call   f01037de <to_frame_number>
f0103822:	83 c4 04             	add    $0x4,%esp
f0103825:	c1 e0 0c             	shl    $0xc,%eax
}
f0103828:	c9                   	leave  
f0103829:	c3                   	ret    

f010382a <to_frame_info>:

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f010382a:	55                   	push   %ebp
f010382b:	89 e5                	mov    %esp,%ebp
f010382d:	53                   	push   %ebx
f010382e:	83 ec 04             	sub    $0x4,%esp
	if (PPN(physical_address) >= number_of_frames)
f0103831:	8b 45 08             	mov    0x8(%ebp),%eax
f0103834:	c1 e8 0c             	shr    $0xc,%eax
f0103837:	89 c2                	mov    %eax,%edx
f0103839:	a1 d0 cd 2b f0       	mov    0xf02bcdd0,%eax
f010383e:	39 c2                	cmp    %eax,%edx
f0103840:	72 14                	jb     f0103856 <to_frame_info+0x2c>
		panic("to_frame_info called with invalid pa");
f0103842:	83 ec 04             	sub    $0x4,%esp
f0103845:	68 8c 24 13 f0       	push   $0xf013248c
f010384a:	6a 55                	push   $0x55
f010384c:	68 b4 24 13 f0       	push   $0xf01324b4
f0103851:	e8 5a c9 ff ff       	call   f01001b0 <_panic>
	return &frames_info[PPN(physical_address)];
f0103856:	8b 0d 10 ce 2b f0    	mov    0xf02bce10,%ecx
f010385c:	8b 45 08             	mov    0x8(%ebp),%eax
f010385f:	c1 e8 0c             	shr    $0xc,%eax
f0103862:	89 c2                	mov    %eax,%edx
f0103864:	89 d0                	mov    %edx,%eax
f0103866:	01 c0                	add    %eax,%eax
f0103868:	01 d0                	add    %edx,%eax
f010386a:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0103871:	01 d8                	add    %ebx,%eax
f0103873:	01 d0                	add    %edx,%eax
f0103875:	01 c8                	add    %ecx,%eax
}
f0103877:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010387a:	c9                   	leave  
f010387b:	c3                   	ret    

f010387c <read_disk_page>:
void __pf_remove_env_all_tables(struct Env* ptr_env);
void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address);


int read_disk_page(uint32 dfn, void* va)
{
f010387c:	55                   	push   %ebp
f010387d:	89 e5                	mov    %esp,%ebp
f010387f:	83 ec 18             	sub    $0x18,%esp
	uint32 df_start_sector = PAGE_FILE_START_SECTOR+dfn*SECTOR_PER_PAGE;
f0103882:	8b 45 08             	mov    0x8(%ebp),%eax
f0103885:	05 00 14 00 00       	add    $0x1400,%eax
f010388a:	c1 e0 03             	shl    $0x3,%eax
f010388d:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_STATMENT( cprintf("reading from disk to mem addr %x at sector %d\n",va,df_start_sector);  );
	int success = ide_read(df_start_sector, (void*)va, SECTOR_PER_PAGE);
f0103890:	83 ec 04             	sub    $0x4,%esp
f0103893:	6a 08                	push   $0x8
f0103895:	ff 75 0c             	pushl  0xc(%ebp)
f0103898:	ff 75 f4             	pushl  -0xc(%ebp)
f010389b:	e8 93 c3 02 00       	call   f012fc33 <ide_read>
f01038a0:	83 c4 10             	add    $0x10,%esp
f01038a3:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//LOG_STATMENT( if(success==0) {cprintf("read from disk successuflly.\n");} else {cprintf("read from disk failed !!\n");} );

	return success;
f01038a6:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f01038a9:	c9                   	leave  
f01038aa:	c3                   	ret    

f01038ab <write_disk_page>:


int write_disk_page(uint32 dfn, void* va)
{
f01038ab:	55                   	push   %ebp
f01038ac:	89 e5                	mov    %esp,%ebp
f01038ae:	83 ec 18             	sub    $0x18,%esp
	//write disk at wanted frame
	uint32 df_start_sector = PAGE_FILE_START_SECTOR+dfn*SECTOR_PER_PAGE;
f01038b1:	8b 45 08             	mov    0x8(%ebp),%eax
f01038b4:	05 00 14 00 00       	add    $0x1400,%eax
f01038b9:	c1 e0 03             	shl    $0x3,%eax
f01038bc:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_STATMENT( cprintf(">>> writing to disk from mem addr %x at sector %d\n",va,df_start_sector);  );
	int success = ide_write(df_start_sector, (void*)va, SECTOR_PER_PAGE);
f01038bf:	83 ec 04             	sub    $0x4,%esp
f01038c2:	6a 08                	push   $0x8
f01038c4:	ff 75 0c             	pushl  0xc(%ebp)
f01038c7:	ff 75 f4             	pushl  -0xc(%ebp)
f01038ca:	e8 a4 c4 02 00       	call   f012fd73 <ide_write>
f01038cf:	83 c4 10             	add    $0x10,%esp
f01038d2:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//LOG_STATMENT( if(success==0) {cprintf(">>> written to disk successfully.\n");} else {cprintf(">>> written to disk failed !!\n");} );

	if(success != 0)
f01038d5:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01038d9:	74 14                	je     f01038ef <write_disk_page+0x44>
		panic("Error writing on disk\n");
f01038db:	83 ec 04             	sub    $0x4,%esp
f01038de:	68 d6 24 13 f0       	push   $0xf01324d6
f01038e3:	6a 2e                	push   $0x2e
f01038e5:	68 ed 24 13 f0       	push   $0xf01324ed
f01038ea:	e8 c1 c8 ff ff       	call   f01001b0 <_panic>
	return success;
f01038ef:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f01038f2:	c9                   	leave  
f01038f3:	c3                   	ret    

f01038f4 <initialize_disk_page_file>:
// After this point, ONLY use the functions below
// to allocate and deallocate physical memory via the disk_free_frame_list,
// and NEVER use boot_allocate_space() or the related boot-time functions above.
//
void initialize_disk_page_file()
{
f01038f4:	55                   	push   %ebp
f01038f5:	89 e5                	mov    %esp,%ebp
f01038f7:	56                   	push   %esi
f01038f8:	53                   	push   %ebx
f01038f9:	83 ec 10             	sub    $0x10,%esp
	int i;
	LIST_INIT(&disk_free_frame_list);
f01038fc:	c7 05 90 b2 2d f0 00 	movl   $0x0,0xf02db290
f0103903:	00 00 00 
f0103906:	c7 05 94 b2 2d f0 00 	movl   $0x0,0xf02db294
f010390d:	00 00 00 
f0103910:	c7 05 9c b2 2d f0 00 	movl   $0x0,0xf02db29c
f0103917:	00 00 00 

	//LOG_STATMENT(cprintf("PAGES_PER_FILE = %d, PAGE_FILE_START_SECTOR = %d\n",PAGES_PER_FILE,PAGE_FILE_START_SECTOR););
	for (i = 1; i < PAGES_PER_FILE; i++)
f010391a:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
f0103921:	e9 20 01 00 00       	jmp    f0103a46 <initialize_disk_page_file+0x152>
	{
		initialize_frame_info(&(disk_frames_info[i]));
f0103926:	8b 0d 50 4a 25 f0    	mov    0xf0254a50,%ecx
f010392c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010392f:	89 d0                	mov    %edx,%eax
f0103931:	01 c0                	add    %eax,%eax
f0103933:	01 d0                	add    %edx,%eax
f0103935:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f010393c:	01 d8                	add    %ebx,%eax
f010393e:	01 d0                	add    %edx,%eax
f0103940:	01 c8                	add    %ecx,%eax
f0103942:	83 ec 0c             	sub    $0xc,%esp
f0103945:	50                   	push   %eax
f0103946:	e8 bf 39 00 00       	call   f010730a <initialize_frame_info>
f010394b:	83 c4 10             	add    $0x10,%esp

		//disk_frames_info[i].references = 0;
		LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[i]);
f010394e:	8b 0d 50 4a 25 f0    	mov    0xf0254a50,%ecx
f0103954:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103957:	89 d0                	mov    %edx,%eax
f0103959:	01 c0                	add    %eax,%eax
f010395b:	01 d0                	add    %edx,%eax
f010395d:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0103964:	01 d8                	add    %ebx,%eax
f0103966:	01 d0                	add    %edx,%eax
f0103968:	01 c8                	add    %ecx,%eax
f010396a:	85 c0                	test   %eax,%eax
f010396c:	75 14                	jne    f0103982 <initialize_disk_page_file+0x8e>
f010396e:	83 ec 04             	sub    $0x4,%esp
f0103971:	68 0c 25 13 f0       	push   $0xf013250c
f0103976:	6a 59                	push   $0x59
f0103978:	68 ed 24 13 f0       	push   $0xf01324ed
f010397d:	e8 2e c8 ff ff       	call   f01001b0 <_panic>
f0103982:	8b 0d 50 4a 25 f0    	mov    0xf0254a50,%ecx
f0103988:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010398b:	89 d0                	mov    %edx,%eax
f010398d:	01 c0                	add    %eax,%eax
f010398f:	01 d0                	add    %edx,%eax
f0103991:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0103998:	01 d8                	add    %ebx,%eax
f010399a:	01 d0                	add    %edx,%eax
f010399c:	01 c8                	add    %ecx,%eax
f010399e:	8b 15 90 b2 2d f0    	mov    0xf02db290,%edx
f01039a4:	89 10                	mov    %edx,(%eax)
f01039a6:	8b 00                	mov    (%eax),%eax
f01039a8:	85 c0                	test   %eax,%eax
f01039aa:	74 27                	je     f01039d3 <initialize_disk_page_file+0xdf>
f01039ac:	8b 0d 90 b2 2d f0    	mov    0xf02db290,%ecx
f01039b2:	8b 1d 50 4a 25 f0    	mov    0xf0254a50,%ebx
f01039b8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01039bb:	89 d0                	mov    %edx,%eax
f01039bd:	01 c0                	add    %eax,%eax
f01039bf:	01 d0                	add    %edx,%eax
f01039c1:	8d 34 c5 00 00 00 00 	lea    0x0(,%eax,8),%esi
f01039c8:	01 f0                	add    %esi,%eax
f01039ca:	01 d0                	add    %edx,%eax
f01039cc:	01 d8                	add    %ebx,%eax
f01039ce:	89 41 04             	mov    %eax,0x4(%ecx)
f01039d1:	eb 21                	jmp    f01039f4 <initialize_disk_page_file+0x100>
f01039d3:	8b 0d 50 4a 25 f0    	mov    0xf0254a50,%ecx
f01039d9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01039dc:	89 d0                	mov    %edx,%eax
f01039de:	01 c0                	add    %eax,%eax
f01039e0:	01 d0                	add    %edx,%eax
f01039e2:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f01039e9:	01 d8                	add    %ebx,%eax
f01039eb:	01 d0                	add    %edx,%eax
f01039ed:	01 c8                	add    %ecx,%eax
f01039ef:	a3 94 b2 2d f0       	mov    %eax,0xf02db294
f01039f4:	8b 0d 50 4a 25 f0    	mov    0xf0254a50,%ecx
f01039fa:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01039fd:	89 d0                	mov    %edx,%eax
f01039ff:	01 c0                	add    %eax,%eax
f0103a01:	01 d0                	add    %edx,%eax
f0103a03:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0103a0a:	01 d8                	add    %ebx,%eax
f0103a0c:	01 d0                	add    %edx,%eax
f0103a0e:	01 c8                	add    %ecx,%eax
f0103a10:	a3 90 b2 2d f0       	mov    %eax,0xf02db290
f0103a15:	8b 0d 50 4a 25 f0    	mov    0xf0254a50,%ecx
f0103a1b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103a1e:	89 d0                	mov    %edx,%eax
f0103a20:	01 c0                	add    %eax,%eax
f0103a22:	01 d0                	add    %edx,%eax
f0103a24:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0103a2b:	01 d8                	add    %ebx,%eax
f0103a2d:	01 d0                	add    %edx,%eax
f0103a2f:	01 c8                	add    %ecx,%eax
f0103a31:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0103a38:	a1 9c b2 2d f0       	mov    0xf02db29c,%eax
f0103a3d:	40                   	inc    %eax
f0103a3e:	a3 9c b2 2d f0       	mov    %eax,0xf02db29c
{
	int i;
	LIST_INIT(&disk_free_frame_list);

	//LOG_STATMENT(cprintf("PAGES_PER_FILE = %d, PAGE_FILE_START_SECTOR = %d\n",PAGES_PER_FILE,PAGE_FILE_START_SECTOR););
	for (i = 1; i < PAGES_PER_FILE; i++)
f0103a43:	ff 45 f4             	incl   -0xc(%ebp)
f0103a46:	81 7d f4 ff 07 02 00 	cmpl   $0x207ff,-0xc(%ebp)
f0103a4d:	0f 8e d3 fe ff ff    	jle    f0103926 <initialize_disk_page_file+0x32>
		initialize_frame_info(&(disk_frames_info[i]));

		//disk_frames_info[i].references = 0;
		LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[i]);
	}
}
f0103a53:	90                   	nop
f0103a54:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0103a57:	5b                   	pop    %ebx
f0103a58:	5e                   	pop    %esi
f0103a59:	5d                   	pop    %ebp
f0103a5a:	c3                   	ret    

f0103a5b <to_disk_frame_number>:
// Initialize a Frame_Info structure.
// The result has null links and 0 references.
// Note that the corresponding physical frame is NOT initialized!
//
static inline uint32 to_disk_frame_number(struct FrameInfo *ptr_frame_info)
{
f0103a5b:	55                   	push   %ebp
f0103a5c:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - disk_frames_info;
f0103a5e:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a61:	8b 15 50 4a 25 f0    	mov    0xf0254a50,%edx
f0103a67:	29 d0                	sub    %edx,%eax
f0103a69:	c1 f8 02             	sar    $0x2,%eax
f0103a6c:	89 c2                	mov    %eax,%edx
f0103a6e:	89 d0                	mov    %edx,%eax
f0103a70:	c1 e0 03             	shl    $0x3,%eax
f0103a73:	01 d0                	add    %edx,%eax
f0103a75:	c1 e0 03             	shl    $0x3,%eax
f0103a78:	01 d0                	add    %edx,%eax
f0103a7a:	c1 e0 03             	shl    $0x3,%eax
f0103a7d:	01 d0                	add    %edx,%eax
f0103a7f:	c1 e0 03             	shl    $0x3,%eax
f0103a82:	01 d0                	add    %edx,%eax
f0103a84:	89 c1                	mov    %eax,%ecx
f0103a86:	c1 e1 0f             	shl    $0xf,%ecx
f0103a89:	01 c8                	add    %ecx,%eax
f0103a8b:	c1 e0 03             	shl    $0x3,%eax
f0103a8e:	01 d0                	add    %edx,%eax
f0103a90:	f7 d8                	neg    %eax
}
f0103a92:	5d                   	pop    %ebp
f0103a93:	c3                   	ret    

f0103a94 <allocate_disk_frame>:
// RETURNS
//   0 -- on success
//   E_NO_PAGE_FILE_SPACE -- otherwise
//
int allocate_disk_frame(uint32 *dfn)
{
f0103a94:	55                   	push   %ebp
f0103a95:	89 e5                	mov    %esp,%ebp
f0103a97:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	struct FrameInfo *ptr_frame_info = LIST_FIRST(&disk_free_frame_list);
f0103a9a:	a1 90 b2 2d f0       	mov    0xf02db290,%eax
f0103a9f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(ptr_frame_info == NULL)
f0103aa2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103aa6:	75 0a                	jne    f0103ab2 <allocate_disk_frame+0x1e>
		return E_NO_PAGE_FILE_SPACE;
f0103aa8:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f0103aad:	e9 a7 00 00 00       	jmp    f0103b59 <allocate_disk_frame+0xc5>

	LIST_REMOVE(&disk_free_frame_list, ptr_frame_info);
f0103ab2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103ab6:	75 14                	jne    f0103acc <allocate_disk_frame+0x38>
f0103ab8:	83 ec 04             	sub    $0x4,%esp
f0103abb:	68 2f 25 13 f0       	push   $0xf013252f
f0103ac0:	6a 78                	push   $0x78
f0103ac2:	68 ed 24 13 f0       	push   $0xf01324ed
f0103ac7:	e8 e4 c6 ff ff       	call   f01001b0 <_panic>
f0103acc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103acf:	8b 00                	mov    (%eax),%eax
f0103ad1:	85 c0                	test   %eax,%eax
f0103ad3:	74 10                	je     f0103ae5 <allocate_disk_frame+0x51>
f0103ad5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103ad8:	8b 00                	mov    (%eax),%eax
f0103ada:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103add:	8b 52 04             	mov    0x4(%edx),%edx
f0103ae0:	89 50 04             	mov    %edx,0x4(%eax)
f0103ae3:	eb 0b                	jmp    f0103af0 <allocate_disk_frame+0x5c>
f0103ae5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103ae8:	8b 40 04             	mov    0x4(%eax),%eax
f0103aeb:	a3 94 b2 2d f0       	mov    %eax,0xf02db294
f0103af0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103af3:	8b 40 04             	mov    0x4(%eax),%eax
f0103af6:	85 c0                	test   %eax,%eax
f0103af8:	74 0f                	je     f0103b09 <allocate_disk_frame+0x75>
f0103afa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103afd:	8b 40 04             	mov    0x4(%eax),%eax
f0103b00:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103b03:	8b 12                	mov    (%edx),%edx
f0103b05:	89 10                	mov    %edx,(%eax)
f0103b07:	eb 0a                	jmp    f0103b13 <allocate_disk_frame+0x7f>
f0103b09:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103b0c:	8b 00                	mov    (%eax),%eax
f0103b0e:	a3 90 b2 2d f0       	mov    %eax,0xf02db290
f0103b13:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103b16:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0103b1c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103b1f:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0103b26:	a1 9c b2 2d f0       	mov    0xf02db29c,%eax
f0103b2b:	48                   	dec    %eax
f0103b2c:	a3 9c b2 2d f0       	mov    %eax,0xf02db29c
	initialize_frame_info(ptr_frame_info);
f0103b31:	83 ec 0c             	sub    $0xc,%esp
f0103b34:	ff 75 f4             	pushl  -0xc(%ebp)
f0103b37:	e8 ce 37 00 00       	call   f010730a <initialize_frame_info>
f0103b3c:	83 c4 10             	add    $0x10,%esp
	*dfn = to_disk_frame_number(ptr_frame_info);
f0103b3f:	83 ec 0c             	sub    $0xc,%esp
f0103b42:	ff 75 f4             	pushl  -0xc(%ebp)
f0103b45:	e8 11 ff ff ff       	call   f0103a5b <to_disk_frame_number>
f0103b4a:	83 c4 10             	add    $0x10,%esp
f0103b4d:	89 c2                	mov    %eax,%edx
f0103b4f:	8b 45 08             	mov    0x8(%ebp),%eax
f0103b52:	89 10                	mov    %edx,(%eax)
	return 0;
f0103b54:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103b59:	c9                   	leave  
f0103b5a:	c3                   	ret    

f0103b5b <free_disk_frame>:

//
// Return a frame to the disk_free_frame_list.
//
inline void free_disk_frame(uint32 dfn)
{
f0103b5b:	55                   	push   %ebp
f0103b5c:	89 e5                	mov    %esp,%ebp
f0103b5e:	56                   	push   %esi
f0103b5f:	53                   	push   %ebx
	// Fill this function in
	if(dfn == 0) return;
f0103b60:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0103b64:	0f 84 fa 00 00 00    	je     f0103c64 <free_disk_frame+0x109>
	LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[dfn]);
f0103b6a:	8b 0d 50 4a 25 f0    	mov    0xf0254a50,%ecx
f0103b70:	8b 55 08             	mov    0x8(%ebp),%edx
f0103b73:	89 d0                	mov    %edx,%eax
f0103b75:	01 c0                	add    %eax,%eax
f0103b77:	01 d0                	add    %edx,%eax
f0103b79:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0103b80:	01 d8                	add    %ebx,%eax
f0103b82:	01 d0                	add    %edx,%eax
f0103b84:	01 c8                	add    %ecx,%eax
f0103b86:	85 c0                	test   %eax,%eax
f0103b88:	75 17                	jne    f0103ba1 <free_disk_frame+0x46>
f0103b8a:	83 ec 04             	sub    $0x4,%esp
f0103b8d:	68 0c 25 13 f0       	push   $0xf013250c
f0103b92:	68 85 00 00 00       	push   $0x85
f0103b97:	68 ed 24 13 f0       	push   $0xf01324ed
f0103b9c:	e8 0f c6 ff ff       	call   f01001b0 <_panic>
f0103ba1:	8b 0d 50 4a 25 f0    	mov    0xf0254a50,%ecx
f0103ba7:	8b 55 08             	mov    0x8(%ebp),%edx
f0103baa:	89 d0                	mov    %edx,%eax
f0103bac:	01 c0                	add    %eax,%eax
f0103bae:	01 d0                	add    %edx,%eax
f0103bb0:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0103bb7:	01 d8                	add    %ebx,%eax
f0103bb9:	01 d0                	add    %edx,%eax
f0103bbb:	01 c8                	add    %ecx,%eax
f0103bbd:	8b 15 90 b2 2d f0    	mov    0xf02db290,%edx
f0103bc3:	89 10                	mov    %edx,(%eax)
f0103bc5:	8b 00                	mov    (%eax),%eax
f0103bc7:	85 c0                	test   %eax,%eax
f0103bc9:	74 27                	je     f0103bf2 <free_disk_frame+0x97>
f0103bcb:	8b 0d 90 b2 2d f0    	mov    0xf02db290,%ecx
f0103bd1:	8b 1d 50 4a 25 f0    	mov    0xf0254a50,%ebx
f0103bd7:	8b 55 08             	mov    0x8(%ebp),%edx
f0103bda:	89 d0                	mov    %edx,%eax
f0103bdc:	01 c0                	add    %eax,%eax
f0103bde:	01 d0                	add    %edx,%eax
f0103be0:	8d 34 c5 00 00 00 00 	lea    0x0(,%eax,8),%esi
f0103be7:	01 f0                	add    %esi,%eax
f0103be9:	01 d0                	add    %edx,%eax
f0103beb:	01 d8                	add    %ebx,%eax
f0103bed:	89 41 04             	mov    %eax,0x4(%ecx)
f0103bf0:	eb 21                	jmp    f0103c13 <free_disk_frame+0xb8>
f0103bf2:	8b 0d 50 4a 25 f0    	mov    0xf0254a50,%ecx
f0103bf8:	8b 55 08             	mov    0x8(%ebp),%edx
f0103bfb:	89 d0                	mov    %edx,%eax
f0103bfd:	01 c0                	add    %eax,%eax
f0103bff:	01 d0                	add    %edx,%eax
f0103c01:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0103c08:	01 d8                	add    %ebx,%eax
f0103c0a:	01 d0                	add    %edx,%eax
f0103c0c:	01 c8                	add    %ecx,%eax
f0103c0e:	a3 94 b2 2d f0       	mov    %eax,0xf02db294
f0103c13:	8b 0d 50 4a 25 f0    	mov    0xf0254a50,%ecx
f0103c19:	8b 55 08             	mov    0x8(%ebp),%edx
f0103c1c:	89 d0                	mov    %edx,%eax
f0103c1e:	01 c0                	add    %eax,%eax
f0103c20:	01 d0                	add    %edx,%eax
f0103c22:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0103c29:	01 d8                	add    %ebx,%eax
f0103c2b:	01 d0                	add    %edx,%eax
f0103c2d:	01 c8                	add    %ecx,%eax
f0103c2f:	a3 90 b2 2d f0       	mov    %eax,0xf02db290
f0103c34:	8b 0d 50 4a 25 f0    	mov    0xf0254a50,%ecx
f0103c3a:	8b 55 08             	mov    0x8(%ebp),%edx
f0103c3d:	89 d0                	mov    %edx,%eax
f0103c3f:	01 c0                	add    %eax,%eax
f0103c41:	01 d0                	add    %edx,%eax
f0103c43:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0103c4a:	01 d8                	add    %ebx,%eax
f0103c4c:	01 d0                	add    %edx,%eax
f0103c4e:	01 c8                	add    %ecx,%eax
f0103c50:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0103c57:	a1 9c b2 2d f0       	mov    0xf02db29c,%eax
f0103c5c:	40                   	inc    %eax
f0103c5d:	a3 9c b2 2d f0       	mov    %eax,0xf02db29c
f0103c62:	eb 01                	jmp    f0103c65 <free_disk_frame+0x10a>
// Return a frame to the disk_free_frame_list.
//
inline void free_disk_frame(uint32 dfn)
{
	// Fill this function in
	if(dfn == 0) return;
f0103c64:	90                   	nop
	LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[dfn]);
}
f0103c65:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0103c68:	5b                   	pop    %ebx
f0103c69:	5e                   	pop    %esi
f0103c6a:	5d                   	pop    %ebp
f0103c6b:	c3                   	ret    

f0103c6c <get_disk_page_table>:

int get_disk_page_table(uint32 *ptr_disk_page_directory, const uint32 virtual_address, int create, uint32 **ptr_disk_page_table)
{
f0103c6c:	55                   	push   %ebp
f0103c6d:	89 e5                	mov    %esp,%ebp
f0103c6f:	83 ec 28             	sub    $0x28,%esp
	// Fill this function in
	uint32 disk_page_directory_entry = ptr_disk_page_directory[PDX(virtual_address)];
f0103c72:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103c75:	c1 e8 16             	shr    $0x16,%eax
f0103c78:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103c7f:	8b 45 08             	mov    0x8(%ebp),%eax
f0103c82:	01 d0                	add    %edx,%eax
f0103c84:	8b 00                	mov    (%eax),%eax
f0103c86:	89 45 f4             	mov    %eax,-0xc(%ebp)
	{
		*ptr_disk_page_table = (uint32*)kheap_virtual_address(EXTRACT_ADDRESS(disk_page_directory_entry));
	}
	else
	{
		*ptr_disk_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(disk_page_directory_entry)) ;
f0103c89:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103c8c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103c91:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0103c94:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103c97:	c1 e8 0c             	shr    $0xc,%eax
f0103c9a:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0103c9d:	a1 d0 cd 2b f0       	mov    0xf02bcdd0,%eax
f0103ca2:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0103ca5:	72 17                	jb     f0103cbe <get_disk_page_table+0x52>
f0103ca7:	ff 75 f0             	pushl  -0x10(%ebp)
f0103caa:	68 50 25 13 f0       	push   $0xf0132550
f0103caf:	68 92 00 00 00       	push   $0x92
f0103cb4:	68 ed 24 13 f0       	push   $0xf01324ed
f0103cb9:	e8 f2 c4 ff ff       	call   f01001b0 <_panic>
f0103cbe:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103cc1:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0103cc6:	89 c2                	mov    %eax,%edx
f0103cc8:	8b 45 14             	mov    0x14(%ebp),%eax
f0103ccb:	89 10                	mov    %edx,(%eax)
	}

	if (disk_page_directory_entry == 0)
f0103ccd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103cd1:	0f 85 b7 00 00 00    	jne    f0103d8e <get_disk_page_table+0x122>
	{
		//LOG_STATMENT(cprintf("get_disk_page_table: disk directory at %x",ptr_disk_page_directory));
		//LOG_STATMENT(cprintf("get_disk_page_table: page table not found "));
		if (create)
f0103cd7:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0103cdb:	0f 84 9d 00 00 00    	je     f0103d7e <get_disk_page_table+0x112>
						,PERM_PRESENT);
			}
#else
			{
				struct FrameInfo* ptr_frame_info;
				allocate_frame(&ptr_frame_info) ;
f0103ce1:	83 ec 0c             	sub    $0xc,%esp
f0103ce4:	8d 45 dc             	lea    -0x24(%ebp),%eax
f0103ce7:	50                   	push   %eax
f0103ce8:	e8 38 36 00 00       	call   f0107325 <allocate_frame>
f0103ced:	83 c4 10             	add    $0x10,%esp

				//LOG_STATMENT(cprintf("created table"));
				uint32 phys_page_table = to_physical_address(ptr_frame_info);
f0103cf0:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0103cf3:	83 ec 0c             	sub    $0xc,%esp
f0103cf6:	50                   	push   %eax
f0103cf7:	e8 1b fb ff ff       	call   f0103817 <to_physical_address>
f0103cfc:	83 c4 10             	add    $0x10,%esp
f0103cff:	89 45 e8             	mov    %eax,-0x18(%ebp)
				*ptr_disk_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(phys_page_table) ;
f0103d02:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103d05:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0103d08:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0103d0b:	c1 e8 0c             	shr    $0xc,%eax
f0103d0e:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0103d11:	a1 d0 cd 2b f0       	mov    0xf02bcdd0,%eax
f0103d16:	39 45 e0             	cmp    %eax,-0x20(%ebp)
f0103d19:	72 17                	jb     f0103d32 <get_disk_page_table+0xc6>
f0103d1b:	ff 75 e4             	pushl  -0x1c(%ebp)
f0103d1e:	68 50 25 13 f0       	push   $0xf0132550
f0103d23:	68 ae 00 00 00       	push   $0xae
f0103d28:	68 ed 24 13 f0       	push   $0xf01324ed
f0103d2d:	e8 7e c4 ff ff       	call   f01001b0 <_panic>
f0103d32:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0103d35:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0103d3a:	89 c2                	mov    %eax,%edx
f0103d3c:	8b 45 14             	mov    0x14(%ebp),%eax
f0103d3f:	89 10                	mov    %edx,(%eax)
				ptr_frame_info->references = 1;
f0103d41:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0103d44:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
				ptr_disk_page_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(phys_page_table,PERM_PRESENT);
f0103d4a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103d4d:	c1 e8 16             	shr    $0x16,%eax
f0103d50:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103d57:	8b 45 08             	mov    0x8(%ebp),%eax
f0103d5a:	01 d0                	add    %edx,%eax
f0103d5c:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0103d5f:	83 ca 01             	or     $0x1,%edx
f0103d62:	89 10                	mov    %edx,(%eax)
			}
#endif
			//initialize new page table by 0's
			memset(*ptr_disk_page_table , 0, PAGE_SIZE);
f0103d64:	8b 45 14             	mov    0x14(%ebp),%eax
f0103d67:	8b 00                	mov    (%eax),%eax
f0103d69:	83 ec 04             	sub    $0x4,%esp
f0103d6c:	68 00 10 00 00       	push   $0x1000
f0103d71:	6a 00                	push   $0x0
f0103d73:	50                   	push   %eax
f0103d74:	e8 ed b8 02 00       	call   f012f666 <memset>
f0103d79:	83 c4 10             	add    $0x10,%esp
f0103d7c:	eb 10                	jmp    f0103d8e <get_disk_page_table+0x122>
			//virtual_address, ptr_disk_page_directory[PDX(virtual_address)]));
		}
		else
		{
			//LOG_STATMENT(cprintf("NOT creating table ..."));
			*ptr_disk_page_table = 0;
f0103d7e:	8b 45 14             	mov    0x14(%ebp),%eax
f0103d81:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			return 0;
f0103d87:	b8 00 00 00 00       	mov    $0x0,%eax
f0103d8c:	eb 05                	jmp    f0103d93 <get_disk_page_table+0x127>
		}
	}
	//LOG_STATMENT(cprintf("found table at %x", *ptr_disk_page_table));
	return 0;
f0103d8e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103d93:	c9                   	leave  
f0103d94:	c3                   	ret    

f0103d95 <pf_add_empty_env_page>:

int pf_add_empty_env_page( struct Env* ptr_env, uint32 virtual_address, uint8 initializeByZero)
{
f0103d95:	55                   	push   %ebp
f0103d96:	89 e5                	mov    %esp,%ebp
f0103d98:	83 ec 28             	sub    $0x28,%esp
f0103d9b:	8b 45 10             	mov    0x10(%ebp),%eax
f0103d9e:	88 45 e4             	mov    %al,-0x1c(%ebp)
	//2016: FIX:
	if (initializeByZero)
f0103da1:	80 7d e4 00          	cmpb   $0x0,-0x1c(%ebp)
f0103da5:	74 75                	je     f0103e1c <pf_add_empty_env_page+0x87>
	{
		//2020
		if (virtual_address > USTACKBOTTOM && virtual_address < USTACKTOP - ptr_env->initNumStackPages * PAGE_SIZE)
f0103da7:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
f0103dae:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103db1:	2d 01 e0 f9 5f       	sub    $0x5ff9e001,%eax
f0103db6:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0103db9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103dbc:	ba 00 00 00 00       	mov    $0x0,%edx
f0103dc1:	f7 75 f4             	divl   -0xc(%ebp)
f0103dc4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103dc7:	29 d0                	sub    %edx,%eax
f0103dc9:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0103dcc:	73 32                	jae    f0103e00 <pf_add_empty_env_page+0x6b>
f0103dce:	8b 45 08             	mov    0x8(%ebp),%eax
f0103dd1:	8b 90 a4 00 00 00    	mov    0xa4(%eax),%edx
f0103dd7:	b8 00 00 00 00       	mov    $0x0,%eax
f0103ddc:	29 d0                	sub    %edx,%eax
f0103dde:	c1 e0 0c             	shl    $0xc,%eax
f0103de1:	2d 00 20 40 11       	sub    $0x11402000,%eax
f0103de6:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0103de9:	76 15                	jbe    f0103e00 <pf_add_empty_env_page+0x6b>
			ptr_env->nNewPageAdded++ ;
f0103deb:	8b 45 08             	mov    0x8(%ebp),%eax
f0103dee:	8b 80 98 da 01 00    	mov    0x1da98(%eax),%eax
f0103df4:	8d 50 01             	lea    0x1(%eax),%edx
f0103df7:	8b 45 08             	mov    0x8(%ebp),%eax
f0103dfa:	89 90 98 da 01 00    	mov    %edx,0x1da98(%eax)
		//======================
		return pf_add_env_page(ptr_env, virtual_address, ptr_zero_page);
f0103e00:	a1 1c ce 2b f0       	mov    0xf02bce1c,%eax
f0103e05:	83 ec 04             	sub    $0x4,%esp
f0103e08:	50                   	push   %eax
f0103e09:	ff 75 0c             	pushl  0xc(%ebp)
f0103e0c:	ff 75 08             	pushl  0x8(%ebp)
f0103e0f:	e8 b7 00 00 00       	call   f0103ecb <pf_add_env_page>
f0103e14:	83 c4 10             	add    $0x10,%esp
f0103e17:	e9 ad 00 00 00       	jmp    f0103ec9 <pf_add_empty_env_page+0x134>
	}

	uint32 *ptr_disk_page_table;
	assert((uint32)virtual_address < KERNEL_BASE);
f0103e1c:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f0103e23:	76 19                	jbe    f0103e3e <pf_add_empty_env_page+0xa9>
f0103e25:	68 80 25 13 f0       	push   $0xf0132580
f0103e2a:	68 a6 25 13 f0       	push   $0xf01325a6
f0103e2f:	68 d1 00 00 00       	push   $0xd1
f0103e34:	68 ed 24 13 f0       	push   $0xf01324ed
f0103e39:	e8 72 c3 ff ff       	call   f01001b0 <_panic>

	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f0103e3e:	8b 45 08             	mov    0x8(%ebp),%eax
f0103e41:	05 a8 00 00 00       	add    $0xa8,%eax
f0103e46:	83 ec 08             	sub    $0x8,%esp
f0103e49:	50                   	push   %eax
f0103e4a:	ff 75 08             	pushl  0x8(%ebp)
f0103e4d:	e8 86 06 00 00       	call   f01044d8 <get_disk_page_directory>
f0103e52:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir,  virtual_address, 1, &ptr_disk_page_table) ;
f0103e55:	8b 45 08             	mov    0x8(%ebp),%eax
f0103e58:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f0103e5e:	8d 55 ec             	lea    -0x14(%ebp),%edx
f0103e61:	52                   	push   %edx
f0103e62:	6a 01                	push   $0x1
f0103e64:	ff 75 0c             	pushl  0xc(%ebp)
f0103e67:	50                   	push   %eax
f0103e68:	e8 ff fd ff ff       	call   f0103c6c <get_disk_page_table>
f0103e6d:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f0103e70:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103e73:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103e76:	c1 ea 0c             	shr    $0xc,%edx
f0103e79:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103e7f:	c1 e2 02             	shl    $0x2,%edx
f0103e82:	01 d0                	add    %edx,%eax
f0103e84:	8b 00                	mov    (%eax),%eax
f0103e86:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if( dfn == 0)
f0103e89:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103e8c:	85 c0                	test   %eax,%eax
f0103e8e:	75 34                	jne    f0103ec4 <pf_add_empty_env_page+0x12f>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f0103e90:	83 ec 0c             	sub    $0xc,%esp
f0103e93:	8d 45 e8             	lea    -0x18(%ebp),%eax
f0103e96:	50                   	push   %eax
f0103e97:	e8 f8 fb ff ff       	call   f0103a94 <allocate_disk_frame>
f0103e9c:	83 c4 10             	add    $0x10,%esp
f0103e9f:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0103ea2:	75 07                	jne    f0103eab <pf_add_empty_env_page+0x116>
f0103ea4:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f0103ea9:	eb 1e                	jmp    f0103ec9 <pf_add_empty_env_page+0x134>
		ptr_disk_page_table[PTX(virtual_address)] = dfn;
f0103eab:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103eae:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103eb1:	c1 ea 0c             	shr    $0xc,%edx
f0103eb4:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103eba:	c1 e2 02             	shl    $0x2,%edx
f0103ebd:	01 c2                	add    %eax,%edx
f0103ebf:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103ec2:	89 02                	mov    %eax,(%edx)
	}

	return 0;
f0103ec4:	b8 00 00 00 00       	mov    $0x0,%eax

}
f0103ec9:	c9                   	leave  
f0103eca:	c3                   	ret    

f0103ecb <pf_add_env_page>:

int pf_add_env_page( struct Env* ptr_env, uint32 virtual_address, void* dataSrc)
{
f0103ecb:	55                   	push   %ebp
f0103ecc:	89 e5                	mov    %esp,%ebp
f0103ece:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("========================== create_env_page");
	uint32 *ptr_disk_page_table;
	assert((uint32)virtual_address < KERNEL_BASE);
f0103ed1:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f0103ed8:	76 19                	jbe    f0103ef3 <pf_add_env_page+0x28>
f0103eda:	68 80 25 13 f0       	push   $0xf0132580
f0103edf:	68 a6 25 13 f0       	push   $0xf01325a6
f0103ee4:	68 e6 00 00 00       	push   $0xe6
f0103ee9:	68 ed 24 13 f0       	push   $0xf01324ed
f0103eee:	e8 bd c2 ff ff       	call   f01001b0 <_panic>

	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f0103ef3:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ef6:	05 a8 00 00 00       	add    $0xa8,%eax
f0103efb:	83 ec 08             	sub    $0x8,%esp
f0103efe:	50                   	push   %eax
f0103eff:	ff 75 08             	pushl  0x8(%ebp)
f0103f02:	e8 d1 05 00 00       	call   f01044d8 <get_disk_page_directory>
f0103f07:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir,  virtual_address, 1, &ptr_disk_page_table) ;
f0103f0a:	8b 45 08             	mov    0x8(%ebp),%eax
f0103f0d:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f0103f13:	8d 55 f0             	lea    -0x10(%ebp),%edx
f0103f16:	52                   	push   %edx
f0103f17:	6a 01                	push   $0x1
f0103f19:	ff 75 0c             	pushl  0xc(%ebp)
f0103f1c:	50                   	push   %eax
f0103f1d:	e8 4a fd ff ff       	call   f0103c6c <get_disk_page_table>
f0103f22:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f0103f25:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103f28:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103f2b:	c1 ea 0c             	shr    $0xc,%edx
f0103f2e:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103f34:	c1 e2 02             	shl    $0x2,%edx
f0103f37:	01 d0                	add    %edx,%eax
f0103f39:	8b 00                	mov    (%eax),%eax
f0103f3b:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if( dfn == 0)
f0103f3e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103f41:	85 c0                	test   %eax,%eax
f0103f43:	75 34                	jne    f0103f79 <pf_add_env_page+0xae>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f0103f45:	83 ec 0c             	sub    $0xc,%esp
f0103f48:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0103f4b:	50                   	push   %eax
f0103f4c:	e8 43 fb ff ff       	call   f0103a94 <allocate_disk_frame>
f0103f51:	83 c4 10             	add    $0x10,%esp
f0103f54:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0103f57:	75 07                	jne    f0103f60 <pf_add_env_page+0x95>
f0103f59:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f0103f5e:	eb 31                	jmp    f0103f91 <pf_add_env_page+0xc6>
		ptr_disk_page_table[PTX(virtual_address)] = dfn;
f0103f60:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103f63:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103f66:	c1 ea 0c             	shr    $0xc,%edx
f0103f69:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103f6f:	c1 e2 02             	shl    $0x2,%edx
f0103f72:	01 c2                	add    %eax,%edx
f0103f74:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103f77:	89 02                	mov    %eax,(%edx)
	//	uint32 oldDir = rcr3();
	//	lcr3(K_PHYSICAL_ADDRESS(ptr_env->env_pgdir));
	//	int ret = write_disk_page(dfn, (void*)dataSrc);
	//	lcr3(oldDir);

	int ret = write_disk_page(dfn, (void*)dataSrc);
f0103f79:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103f7c:	83 ec 08             	sub    $0x8,%esp
f0103f7f:	ff 75 10             	pushl  0x10(%ebp)
f0103f82:	50                   	push   %eax
f0103f83:	e8 23 f9 ff ff       	call   f01038ab <write_disk_page>
f0103f88:	83 c4 10             	add    $0x10,%esp
f0103f8b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	return ret;
f0103f8e:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0103f91:	c9                   	leave  
f0103f92:	c3                   	ret    

f0103f93 <pf_update_env_page>:

int pf_update_env_page(struct Env* ptr_env, uint32 virtual_address, struct FrameInfo* modified_page_frame_info)
{
f0103f93:	55                   	push   %ebp
f0103f94:	89 e5                	mov    %esp,%ebp
f0103f96:	83 ec 38             	sub    $0x38,%esp
	int ret;
	uint32 *ptr_disk_page_table;
	//ROUND DOWN it on 4 KB boundary in order to update the entire page starting from its first address.
	//virtual_address = ROUNDDOWN(virtual_address, PAGE_SIZE);

	assert((uint32)virtual_address < KERNEL_BASE);
f0103f99:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f0103fa0:	76 19                	jbe    f0103fbb <pf_update_env_page+0x28>
f0103fa2:	68 80 25 13 f0       	push   $0xf0132580
f0103fa7:	68 a6 25 13 f0       	push   $0xf01325a6
f0103fac:	68 08 01 00 00       	push   $0x108
f0103fb1:	68 ed 24 13 f0       	push   $0xf01324ed
f0103fb6:	e8 f5 c1 ff ff       	call   f01001b0 <_panic>
	//char c = *((char*)virtual_address);
	//Get/Create the directory table
	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f0103fbb:	8b 45 08             	mov    0x8(%ebp),%eax
f0103fbe:	05 a8 00 00 00       	add    $0xa8,%eax
f0103fc3:	83 ec 08             	sub    $0x8,%esp
f0103fc6:	50                   	push   %eax
f0103fc7:	ff 75 08             	pushl  0x8(%ebp)
f0103fca:	e8 09 05 00 00       	call   f01044d8 <get_disk_page_directory>
f0103fcf:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f0103fd2:	8b 45 08             	mov    0x8(%ebp),%eax
f0103fd5:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f0103fdb:	8d 55 d4             	lea    -0x2c(%ebp),%edx
f0103fde:	52                   	push   %edx
f0103fdf:	6a 00                	push   $0x0
f0103fe1:	ff 75 0c             	pushl  0xc(%ebp)
f0103fe4:	50                   	push   %eax
f0103fe5:	e8 82 fc ff ff       	call   f0103c6c <get_disk_page_table>
f0103fea:	83 c4 10             	add    $0x10,%esp

	//2022
	if(ptr_disk_page_table == NULL || (ptr_disk_page_table != NULL && ptr_disk_page_table[PTX(virtual_address)]== 0))
f0103fed:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0103ff0:	85 c0                	test   %eax,%eax
f0103ff2:	74 29                	je     f010401d <pf_update_env_page+0x8a>
f0103ff4:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0103ff7:	85 c0                	test   %eax,%eax
f0103ff9:	0f 84 46 01 00 00    	je     f0104145 <pf_update_env_page+0x1b2>
f0103fff:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0104002:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104005:	c1 ea 0c             	shr    $0xc,%edx
f0104008:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010400e:	c1 e2 02             	shl    $0x2,%edx
f0104011:	01 d0                	add    %edx,%eax
f0104013:	8b 00                	mov    (%eax),%eax
f0104015:	85 c0                	test   %eax,%eax
f0104017:	0f 85 28 01 00 00    	jne    f0104145 <pf_update_env_page+0x1b2>
	{
		uint32 VA = (uint32)virtual_address ;
f010401d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104020:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if ((VA >= USER_HEAP_START && VA < USER_HEAP_MAX) || (VA >= USTACKBOTTOM && VA < USTACKTOP))
f0104023:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104026:	85 c0                	test   %eax,%eax
f0104028:	79 09                	jns    f0104033 <pf_update_env_page+0xa0>
f010402a:	81 7d f4 ff ff ff 9f 	cmpl   $0x9fffffff,-0xc(%ebp)
f0104031:	76 38                	jbe    f010406b <pf_update_env_page+0xd8>
f0104033:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
f010403a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010403d:	2d 01 e0 f9 5f       	sub    $0x5ff9e001,%eax
f0104042:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0104045:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104048:	ba 00 00 00 00       	mov    $0x0,%edx
f010404d:	f7 75 f0             	divl   -0x10(%ebp)
f0104050:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104053:	29 d0                	sub    %edx,%eax
f0104055:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0104058:	0f 87 d0 00 00 00    	ja     f010412e <pf_update_env_page+0x19b>
f010405e:	81 7d f4 ff df bf ee 	cmpl   $0xeebfdfff,-0xc(%ebp)
f0104065:	0f 87 c3 00 00 00    	ja     f010412e <pf_update_env_page+0x19b>
		{
			uint32 *ptr_table ;
			struct FrameInfo* ptr_fi = get_frame_info(ptr_env->env_page_directory, virtual_address, &ptr_table);
f010406b:	8b 45 08             	mov    0x8(%ebp),%eax
f010406e:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0104074:	83 ec 04             	sub    $0x4,%esp
f0104077:	8d 55 d0             	lea    -0x30(%ebp),%edx
f010407a:	52                   	push   %edx
f010407b:	ff 75 0c             	pushl  0xc(%ebp)
f010407e:	50                   	push   %eax
f010407f:	e8 fb 36 00 00       	call   f010777f <get_frame_info>
f0104084:	83 c4 10             	add    $0x10,%esp
f0104087:	89 45 e8             	mov    %eax,-0x18(%ebp)
			//if VA already mapped on the same modified_page_frame_info, then write it directly from the VA
			if (ptr_fi == modified_page_frame_info)
f010408a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010408d:	3b 45 10             	cmp    0x10(%ebp),%eax
f0104090:	75 52                	jne    f01040e4 <pf_update_env_page+0x151>
			{
				ret = pf_add_env_page(ptr_env, VA, (void*)virtual_address) ;
f0104092:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104095:	83 ec 04             	sub    $0x4,%esp
f0104098:	50                   	push   %eax
f0104099:	ff 75 f4             	pushl  -0xc(%ebp)
f010409c:	ff 75 08             	pushl  0x8(%ebp)
f010409f:	e8 27 fe ff ff       	call   f0103ecb <pf_add_env_page>
f01040a4:	83 c4 10             	add    $0x10,%esp
f01040a7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				if (ret == E_NO_PAGE_FILE_SPACE)
f01040aa:	83 7d e4 f8          	cmpl   $0xfffffff8,-0x1c(%ebp)
f01040ae:	75 17                	jne    f01040c7 <pf_update_env_page+0x134>
				{
					panic("pf_update_env_page: page file out of space!") ;
f01040b0:	83 ec 04             	sub    $0x4,%esp
f01040b3:	68 bc 25 13 f0       	push   $0xf01325bc
f01040b8:	68 1d 01 00 00       	push   $0x11d
f01040bd:	68 ed 24 13 f0       	push   $0xf01324ed
f01040c2:	e8 e9 c0 ff ff       	call   f01001b0 <_panic>
				}
				ptr_env->nNewPageAdded++ ;
f01040c7:	8b 45 08             	mov    0x8(%ebp),%eax
f01040ca:	8b 80 98 da 01 00    	mov    0x1da98(%eax),%eax
f01040d0:	8d 50 01             	lea    0x1(%eax),%edx
f01040d3:	8b 45 08             	mov    0x8(%ebp),%eax
f01040d6:	89 90 98 da 01 00    	mov    %edx,0x1da98(%eax)
				return ret ;
f01040dc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01040df:	e9 02 01 00 00       	jmp    f01041e6 <pf_update_env_page+0x253>
			}
			//Else, just add a new empty page to the page file, then update it with the given modified_page_frame_info in the below code
			else
			{
				ret = pf_add_empty_env_page(ptr_env, VA, 0);
f01040e4:	83 ec 04             	sub    $0x4,%esp
f01040e7:	6a 00                	push   $0x0
f01040e9:	ff 75 f4             	pushl  -0xc(%ebp)
f01040ec:	ff 75 08             	pushl  0x8(%ebp)
f01040ef:	e8 a1 fc ff ff       	call   f0103d95 <pf_add_empty_env_page>
f01040f4:	83 c4 10             	add    $0x10,%esp
f01040f7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				if (ret == E_NO_PAGE_FILE_SPACE)
f01040fa:	83 7d e4 f8          	cmpl   $0xfffffff8,-0x1c(%ebp)
f01040fe:	75 17                	jne    f0104117 <pf_update_env_page+0x184>
				{
					panic("pf_update_env_page: attempt to add a new page, but page file out of space!") ;
f0104100:	83 ec 04             	sub    $0x4,%esp
f0104103:	68 e8 25 13 f0       	push   $0xf01325e8
f0104108:	68 28 01 00 00       	push   $0x128
f010410d:	68 ed 24 13 f0       	push   $0xf01324ed
f0104112:	e8 99 c0 ff ff       	call   f01001b0 <_panic>
				}
				ptr_env->nNewPageAdded++ ;
f0104117:	8b 45 08             	mov    0x8(%ebp),%eax
f010411a:	8b 80 98 da 01 00    	mov    0x1da98(%eax),%eax
f0104120:	8d 50 01             	lea    0x1(%eax),%edx
f0104123:	8b 45 08             	mov    0x8(%ebp),%eax
f0104126:	89 90 98 da 01 00    	mov    %edx,0x1da98(%eax)
	//2022
	if(ptr_disk_page_table == NULL || (ptr_disk_page_table != NULL && ptr_disk_page_table[PTX(virtual_address)]== 0))
	{
		uint32 VA = (uint32)virtual_address ;
		if ((VA >= USER_HEAP_START && VA < USER_HEAP_MAX) || (VA >= USTACKBOTTOM && VA < USTACKTOP))
		{
f010412c:	eb 17                	jmp    f0104145 <pf_update_env_page+0x1b2>
				ptr_env->nNewPageAdded++ ;
			}
		}
		else
		{
			panic("pf_update_env_page: Invalid Access - Attempt to add a new page to page file that's outside the USER HEAP and USER STACK!");
f010412e:	83 ec 04             	sub    $0x4,%esp
f0104131:	68 34 26 13 f0       	push   $0xf0132634
f0104136:	68 2f 01 00 00       	push   $0x12f
f010413b:	68 ed 24 13 f0       	push   $0xf01324ed
f0104140:	e8 6b c0 ff ff       	call   f01001b0 <_panic>
		}
	}
	//2022 END========================================

	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f0104145:	8b 45 08             	mov    0x8(%ebp),%eax
f0104148:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f010414e:	8d 55 d4             	lea    -0x2c(%ebp),%edx
f0104151:	52                   	push   %edx
f0104152:	6a 00                	push   $0x0
f0104154:	ff 75 0c             	pushl  0xc(%ebp)
f0104157:	50                   	push   %eax
f0104158:	e8 0f fb ff ff       	call   f0103c6c <get_disk_page_table>
f010415d:	83 c4 10             	add    $0x10,%esp
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f0104160:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0104163:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104166:	c1 ea 0c             	shr    $0xc,%edx
f0104169:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010416f:	c1 e2 02             	shl    $0x2,%edx
f0104172:	01 d0                	add    %edx,%eax
f0104174:	8b 00                	mov    (%eax),%eax
f0104176:	89 45 e0             	mov    %eax,-0x20(%ebp)

		//cprintf("[%s] updating page\n",ptr_env->prog_name);
	}
#else
	{
		ret = write_disk_page(dfn, STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(modified_page_frame_info)));
f0104179:	83 ec 0c             	sub    $0xc,%esp
f010417c:	ff 75 10             	pushl  0x10(%ebp)
f010417f:	e8 93 f6 ff ff       	call   f0103817 <to_physical_address>
f0104184:	83 c4 10             	add    $0x10,%esp
f0104187:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010418a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010418d:	c1 e8 0c             	shr    $0xc,%eax
f0104190:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0104193:	a1 d0 cd 2b f0       	mov    0xf02bcdd0,%eax
f0104198:	39 45 d8             	cmp    %eax,-0x28(%ebp)
f010419b:	72 17                	jb     f01041b4 <pf_update_env_page+0x221>
f010419d:	ff 75 dc             	pushl  -0x24(%ebp)
f01041a0:	68 50 25 13 f0       	push   $0xf0132550
f01041a5:	68 47 01 00 00       	push   $0x147
f01041aa:	68 ed 24 13 f0       	push   $0xf01324ed
f01041af:	e8 fc bf ff ff       	call   f01001b0 <_panic>
f01041b4:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01041b7:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01041bc:	83 ec 08             	sub    $0x8,%esp
f01041bf:	50                   	push   %eax
f01041c0:	ff 75 e0             	pushl  -0x20(%ebp)
f01041c3:	e8 e3 f6 ff ff       	call   f01038ab <write_disk_page>
f01041c8:	83 c4 10             	add    $0x10,%esp
f01041cb:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		//cprintf("[%s] finished updating page\n",ptr_env->prog_name);
	}
#endif
	//2020
	ptr_env->nPageOut++ ;
f01041ce:	8b 45 08             	mov    0x8(%ebp),%eax
f01041d1:	8b 80 94 da 01 00    	mov    0x1da94(%eax),%eax
f01041d7:	8d 50 01             	lea    0x1(%eax),%edx
f01041da:	8b 45 08             	mov    0x8(%ebp),%eax
f01041dd:	89 90 94 da 01 00    	mov    %edx,0x1da94(%eax)
	//======================

	return ret;
f01041e3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
}
f01041e6:	c9                   	leave  
f01041e7:	c3                   	ret    

f01041e8 <pf_read_env_page>:

	return write_disk_page(dfn, STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(page_modified_frame_info)));
}
 */
int pf_read_env_page(struct Env* ptr_env, void* virtual_address)
{
f01041e8:	55                   	push   %ebp
f01041e9:	89 e5                	mov    %esp,%ebp
f01041eb:	83 ec 18             	sub    $0x18,%esp
	uint32 *ptr_disk_page_table;

	//ROUND DOWN it on 4 KB boundary in order to read the entire page starting from its first address.
	virtual_address = ROUNDDOWN(virtual_address, PAGE_SIZE);
f01041ee:	8b 45 0c             	mov    0xc(%ebp),%eax
f01041f1:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01041f4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01041f7:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01041fc:	89 45 0c             	mov    %eax,0xc(%ebp)

	if( ptr_env->disk_env_pgdir == 0) return E_PAGE_NOT_EXIST_IN_PF;
f01041ff:	8b 45 08             	mov    0x8(%ebp),%eax
f0104202:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f0104208:	85 c0                	test   %eax,%eax
f010420a:	75 0a                	jne    f0104216 <pf_read_env_page+0x2e>
f010420c:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f0104211:	e9 96 00 00 00       	jmp    f01042ac <pf_read_env_page+0xc4>

	get_disk_page_table(ptr_env->disk_env_pgdir, (uint32) virtual_address, 0, &ptr_disk_page_table);
f0104216:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104219:	8b 45 08             	mov    0x8(%ebp),%eax
f010421c:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f0104222:	8d 4d e8             	lea    -0x18(%ebp),%ecx
f0104225:	51                   	push   %ecx
f0104226:	6a 00                	push   $0x0
f0104228:	52                   	push   %edx
f0104229:	50                   	push   %eax
f010422a:	e8 3d fa ff ff       	call   f0103c6c <get_disk_page_table>
f010422f:	83 c4 10             	add    $0x10,%esp
	if(ptr_disk_page_table == 0) return E_PAGE_NOT_EXIST_IN_PF;
f0104232:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0104235:	85 c0                	test   %eax,%eax
f0104237:	75 07                	jne    f0104240 <pf_read_env_page+0x58>
f0104239:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f010423e:	eb 6c                	jmp    f01042ac <pf_read_env_page+0xc4>

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f0104240:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0104243:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104246:	c1 ea 0c             	shr    $0xc,%edx
f0104249:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010424f:	c1 e2 02             	shl    $0x2,%edx
f0104252:	01 d0                	add    %edx,%eax
f0104254:	8b 00                	mov    (%eax),%eax
f0104256:	89 45 f0             	mov    %eax,-0x10(%ebp)

	if( dfn == 0) return E_PAGE_NOT_EXIST_IN_PF;
f0104259:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010425d:	75 07                	jne    f0104266 <pf_read_env_page+0x7e>
f010425f:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f0104264:	eb 46                	jmp    f01042ac <pf_read_env_page+0xc4>

	int disk_read_error = read_disk_page(dfn, virtual_address);
f0104266:	83 ec 08             	sub    $0x8,%esp
f0104269:	ff 75 0c             	pushl  0xc(%ebp)
f010426c:	ff 75 f0             	pushl  -0x10(%ebp)
f010426f:	e8 08 f6 ff ff       	call   f010387c <read_disk_page>
f0104274:	83 c4 10             	add    $0x10,%esp
f0104277:	89 45 ec             	mov    %eax,-0x14(%ebp)

	//reset modified bit to 0: because FOS copies the placed or replaced page from
	//HD to memory, the page modified bit is set to 1, but we want the modified bit to be
	// affected only by "user code" modifications, not our (FOS kernel) modifications
	pt_set_page_permissions(ptr_env->env_page_directory, (uint32)virtual_address, 0, PERM_MODIFIED);
f010427a:	8b 55 0c             	mov    0xc(%ebp),%edx
f010427d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104280:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0104286:	6a 40                	push   $0x40
f0104288:	6a 00                	push   $0x0
f010428a:	52                   	push   %edx
f010428b:	50                   	push   %eax
f010428c:	e8 05 42 00 00       	call   f0108496 <pt_set_page_permissions>
f0104291:	83 c4 10             	add    $0x10,%esp

	//2020
	ptr_env->nPageIn++ ;
f0104294:	8b 45 08             	mov    0x8(%ebp),%eax
f0104297:	8b 80 90 da 01 00    	mov    0x1da90(%eax),%eax
f010429d:	8d 50 01             	lea    0x1(%eax),%edx
f01042a0:	8b 45 08             	mov    0x8(%ebp),%eax
f01042a3:	89 90 90 da 01 00    	mov    %edx,0x1da90(%eax)
	//======================

	return disk_read_error;
f01042a9:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
f01042ac:	c9                   	leave  
f01042ad:	c3                   	ret    

f01042ae <pf_remove_env_page>:

void pf_remove_env_page(struct Env* ptr_env, uint32 virtual_address)
{
f01042ae:	55                   	push   %ebp
f01042af:	89 e5                	mov    %esp,%ebp
f01042b1:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("pf_remove_env_page: 0");
	uint32 *ptr_disk_page_table;

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_pgdir == 0) return;
f01042b4:	8b 45 08             	mov    0x8(%ebp),%eax
f01042b7:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f01042bd:	85 c0                	test   %eax,%eax
f01042bf:	74 65                	je     f0104326 <pf_remove_env_page+0x78>

	//LOG_STRING("pf_remove_env_page: 1");
	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f01042c1:	8b 45 08             	mov    0x8(%ebp),%eax
f01042c4:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f01042ca:	8d 55 f0             	lea    -0x10(%ebp),%edx
f01042cd:	52                   	push   %edx
f01042ce:	6a 00                	push   $0x0
f01042d0:	ff 75 0c             	pushl  0xc(%ebp)
f01042d3:	50                   	push   %eax
f01042d4:	e8 93 f9 ff ff       	call   f0103c6c <get_disk_page_table>
f01042d9:	83 c4 10             	add    $0x10,%esp
	if(ptr_disk_page_table == 0) return;
f01042dc:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01042df:	85 c0                	test   %eax,%eax
f01042e1:	74 46                	je     f0104329 <pf_remove_env_page+0x7b>

	//LOG_STRING("pf_remove_env_page: 2");
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f01042e3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01042e6:	8b 55 0c             	mov    0xc(%ebp),%edx
f01042e9:	c1 ea 0c             	shr    $0xc,%edx
f01042ec:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01042f2:	c1 e2 02             	shl    $0x2,%edx
f01042f5:	01 d0                	add    %edx,%eax
f01042f7:	8b 00                	mov    (%eax),%eax
f01042f9:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_disk_page_table[PTX(virtual_address)] = 0;
f01042fc:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01042ff:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104302:	c1 ea 0c             	shr    $0xc,%edx
f0104305:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010430b:	c1 e2 02             	shl    $0x2,%edx
f010430e:	01 d0                	add    %edx,%eax
f0104310:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	free_disk_frame(dfn);
f0104316:	83 ec 0c             	sub    $0xc,%esp
f0104319:	ff 75 f4             	pushl  -0xc(%ebp)
f010431c:	e8 3a f8 ff ff       	call   f0103b5b <free_disk_frame>
f0104321:	83 c4 10             	add    $0x10,%esp
f0104324:	eb 04                	jmp    f010432a <pf_remove_env_page+0x7c>
{
	//LOG_STRING("pf_remove_env_page: 0");
	uint32 *ptr_disk_page_table;

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_pgdir == 0) return;
f0104326:	90                   	nop
f0104327:	eb 01                	jmp    f010432a <pf_remove_env_page+0x7c>

	//LOG_STRING("pf_remove_env_page: 1");
	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
	if(ptr_disk_page_table == 0) return;
f0104329:	90                   	nop
	//LOG_STRING("pf_remove_env_page: 2");
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
	ptr_disk_page_table[PTX(virtual_address)] = 0;
	free_disk_frame(dfn);
	//LOG_STRING("pf_remove_env_page: 3");
}
f010432a:	c9                   	leave  
f010432b:	c3                   	ret    

f010432c <pf_free_env>:

void pf_free_env(struct Env* ptr_env)
{
f010432c:	55                   	push   %ebp
f010432d:	89 e5                	mov    %esp,%ebp
f010432f:	83 ec 28             	sub    $0x28,%esp
	uint32 pdeno;

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0104332:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0104339:	e9 f7 00 00 00       	jmp    f0104435 <pf_free_env+0x109>
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdeno] & PERM_PRESENT))
f010433e:	8b 45 08             	mov    0x8(%ebp),%eax
f0104341:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f0104347:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010434a:	c1 e2 02             	shl    $0x2,%edx
f010434d:	01 d0                	add    %edx,%eax
f010434f:	8b 00                	mov    (%eax),%eax
f0104351:	83 e0 01             	and    $0x1,%eax
f0104354:	85 c0                	test   %eax,%eax
f0104356:	0f 84 d5 00 00 00    	je     f0104431 <pf_free_env+0x105>
			continue;

		// find the pa and va of the page table
		uint32 pa = EXTRACT_ADDRESS(ptr_env->disk_env_pgdir[pdeno]);
f010435c:	8b 45 08             	mov    0x8(%ebp),%eax
f010435f:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f0104365:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104368:	c1 e2 02             	shl    $0x2,%edx
f010436b:	01 d0                	add    %edx,%eax
f010436d:	8b 00                	mov    (%eax),%eax
f010436f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0104374:	89 45 ec             	mov    %eax,-0x14(%ebp)
		{
			pt = (uint32*) kheap_virtual_address(pa);
		}
#else
		{
			pt = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(pa);
f0104377:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010437a:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010437d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0104380:	c1 e8 0c             	shr    $0xc,%eax
f0104383:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0104386:	a1 d0 cd 2b f0       	mov    0xf02bcdd0,%eax
f010438b:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f010438e:	72 17                	jb     f01043a7 <pf_free_env+0x7b>
f0104390:	ff 75 e8             	pushl  -0x18(%ebp)
f0104393:	68 50 25 13 f0       	push   $0xf0132550
f0104398:	68 a7 01 00 00       	push   $0x1a7
f010439d:	68 ed 24 13 f0       	push   $0xf01324ed
f01043a2:	e8 09 be ff ff       	call   f01001b0 <_panic>
f01043a7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01043aa:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01043af:	89 45 e0             	mov    %eax,-0x20(%ebp)
		}
#endif
		// unmap all PTEs in this page table
		uint32 pteno;
		for (pteno = 0; pteno < 1024; pteno++)
f01043b2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01043b9:	eb 3a                	jmp    f01043f5 <pf_free_env+0xc9>
		{
			// remove the disk page from disk page table
			uint32 dfn=pt[pteno];
f01043bb:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01043be:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01043c5:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01043c8:	01 d0                	add    %edx,%eax
f01043ca:	8b 00                	mov    (%eax),%eax
f01043cc:	89 45 dc             	mov    %eax,-0x24(%ebp)
			pt[pteno] = 0;
f01043cf:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01043d2:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01043d9:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01043dc:	01 d0                	add    %edx,%eax
f01043de:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			// and declare it free
			free_disk_frame(dfn);
f01043e4:	83 ec 0c             	sub    $0xc,%esp
f01043e7:	ff 75 dc             	pushl  -0x24(%ebp)
f01043ea:	e8 6c f7 ff ff       	call   f0103b5b <free_disk_frame>
f01043ef:	83 c4 10             	add    $0x10,%esp
			pt = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(pa);
		}
#endif
		// unmap all PTEs in this page table
		uint32 pteno;
		for (pteno = 0; pteno < 1024; pteno++)
f01043f2:	ff 45 f0             	incl   -0x10(%ebp)
f01043f5:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
f01043fc:	76 bd                	jbe    f01043bb <pf_free_env+0x8f>
			// and declare it free
			free_disk_frame(dfn);
		}

		// free the disk page table itself
		ptr_env->disk_env_pgdir[pdeno] = 0;
f01043fe:	8b 45 08             	mov    0x8(%ebp),%eax
f0104401:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f0104407:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010440a:	c1 e2 02             	shl    $0x2,%edx
f010440d:	01 d0                	add    %edx,%eax
f010440f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		{
			kfree(pt);
		}
#else
		{
			decrement_references(to_frame_info(pa));
f0104415:	83 ec 0c             	sub    $0xc,%esp
f0104418:	ff 75 ec             	pushl  -0x14(%ebp)
f010441b:	e8 0a f4 ff ff       	call   f010382a <to_frame_info>
f0104420:	83 c4 10             	add    $0x10,%esp
f0104423:	83 ec 0c             	sub    $0xc,%esp
f0104426:	50                   	push   %eax
f0104427:	e8 8b 30 00 00       	call   f01074b7 <decrement_references>
f010442c:	83 c4 10             	add    $0x10,%esp
f010442f:	eb 01                	jmp    f0104432 <pf_free_env+0x106>

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdeno] & PERM_PRESENT))
			continue;
f0104431:	90                   	nop

void pf_free_env(struct Env* ptr_env)
{
	uint32 pdeno;

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0104432:	ff 45 f4             	incl   -0xc(%ebp)
f0104435:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f010443c:	0f 86 fc fe ff ff    	jbe    f010433e <pf_free_env+0x12>
	{
		kfree(ptr_env->disk_env_pgdir);
	}
#else
	{
		decrement_references(to_frame_info(ptr_env->disk_env_pgdir_PA));
f0104442:	8b 45 08             	mov    0x8(%ebp),%eax
f0104445:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
f010444b:	83 ec 0c             	sub    $0xc,%esp
f010444e:	50                   	push   %eax
f010444f:	e8 d6 f3 ff ff       	call   f010382a <to_frame_info>
f0104454:	83 c4 10             	add    $0x10,%esp
f0104457:	83 ec 0c             	sub    $0xc,%esp
f010445a:	50                   	push   %eax
f010445b:	e8 57 30 00 00       	call   f01074b7 <decrement_references>
f0104460:	83 c4 10             	add    $0x10,%esp
	}
#endif
	ptr_env->disk_env_pgdir = 0;
f0104463:	8b 45 08             	mov    0x8(%ebp),%eax
f0104466:	c7 80 a8 00 00 00 00 	movl   $0x0,0xa8(%eax)
f010446d:	00 00 00 
	ptr_env->disk_env_pgdir_PA = 0;
f0104470:	8b 45 08             	mov    0x8(%ebp),%eax
f0104473:	c7 80 ac 00 00 00 00 	movl   $0x0,0xac(%eax)
f010447a:	00 00 00 


	// remove all tables and the disk table
	if (ptr_env->disk_env_tabledir == 0)
f010447d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104480:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f0104486:	85 c0                	test   %eax,%eax
f0104488:	74 4b                	je     f01044d5 <pf_free_env+0x1a9>
		return;
	__pf_remove_env_all_tables(ptr_env);
f010448a:	83 ec 0c             	sub    $0xc,%esp
f010448d:	ff 75 08             	pushl  0x8(%ebp)
f0104490:	e8 17 04 00 00       	call   f01048ac <__pf_remove_env_all_tables>
f0104495:	83 c4 10             	add    $0x10,%esp
	{
		kfree(ptr_env->disk_env_tabledir);
	}
#else
	{
		decrement_references(to_frame_info(ptr_env->disk_env_tabledir_PA));
f0104498:	8b 45 08             	mov    0x8(%ebp),%eax
f010449b:	8b 80 b4 00 00 00    	mov    0xb4(%eax),%eax
f01044a1:	83 ec 0c             	sub    $0xc,%esp
f01044a4:	50                   	push   %eax
f01044a5:	e8 80 f3 ff ff       	call   f010382a <to_frame_info>
f01044aa:	83 c4 10             	add    $0x10,%esp
f01044ad:	83 ec 0c             	sub    $0xc,%esp
f01044b0:	50                   	push   %eax
f01044b1:	e8 01 30 00 00       	call   f01074b7 <decrement_references>
f01044b6:	83 c4 10             	add    $0x10,%esp
	}
#endif
	ptr_env->disk_env_tabledir = 0;
f01044b9:	8b 45 08             	mov    0x8(%ebp),%eax
f01044bc:	c7 80 b0 00 00 00 00 	movl   $0x0,0xb0(%eax)
f01044c3:	00 00 00 
	ptr_env->disk_env_tabledir_PA = 0;
f01044c6:	8b 45 08             	mov    0x8(%ebp),%eax
f01044c9:	c7 80 b4 00 00 00 00 	movl   $0x0,0xb4(%eax)
f01044d0:	00 00 00 
f01044d3:	eb 01                	jmp    f01044d6 <pf_free_env+0x1aa>
	ptr_env->disk_env_pgdir_PA = 0;


	// remove all tables and the disk table
	if (ptr_env->disk_env_tabledir == 0)
		return;
f01044d5:	90                   	nop
	}
#endif
	ptr_env->disk_env_tabledir = 0;
	ptr_env->disk_env_tabledir_PA = 0;

}
f01044d6:	c9                   	leave  
f01044d7:	c3                   	ret    

f01044d8 <get_disk_page_directory>:


int get_disk_page_directory(struct Env* ptr_env, uint32** ptr_disk_page_directory)
{
f01044d8:	55                   	push   %ebp
f01044d9:	89 e5                	mov    %esp,%ebp
f01044db:	83 ec 18             	sub    $0x18,%esp
	*ptr_disk_page_directory = ptr_env->disk_env_pgdir;
f01044de:	8b 45 08             	mov    0x8(%ebp),%eax
f01044e1:	8b 90 a8 00 00 00    	mov    0xa8(%eax),%edx
f01044e7:	8b 45 0c             	mov    0xc(%ebp),%eax
f01044ea:	89 10                	mov    %edx,(%eax)
	if(*ptr_disk_page_directory == 0)
f01044ec:	8b 45 0c             	mov    0xc(%ebp),%eax
f01044ef:	8b 00                	mov    (%eax),%eax
f01044f1:	85 c0                	test   %eax,%eax
f01044f3:	0f 85 ad 00 00 00    	jne    f01045a6 <get_disk_page_directory+0xce>
			ptr_env->disk_env_pgdir_PA = kheap_physical_address((unsigned int)*ptr_disk_page_directory);
		}
#else
		{
			int r;
			struct FrameInfo *p = NULL;
f01044f9:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)

			if ((r = allocate_frame(&p)) < 0)
f0104500:	83 ec 0c             	sub    $0xc,%esp
f0104503:	8d 45 e8             	lea    -0x18(%ebp),%eax
f0104506:	50                   	push   %eax
f0104507:	e8 19 2e 00 00       	call   f0107325 <allocate_frame>
f010450c:	83 c4 10             	add    $0x10,%esp
f010450f:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104512:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104516:	79 08                	jns    f0104520 <get_disk_page_directory+0x48>
				return r;
f0104518:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010451b:	e9 8b 00 00 00       	jmp    f01045ab <get_disk_page_directory+0xd3>
			p->references = 1;
f0104520:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0104523:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)

			//[4] initialize the new environment by the virtual address of the page directory
			// Hint: use "initialize_environment" function
			*ptr_disk_page_directory = STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(p));
f0104529:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010452c:	83 ec 0c             	sub    $0xc,%esp
f010452f:	50                   	push   %eax
f0104530:	e8 e2 f2 ff ff       	call   f0103817 <to_physical_address>
f0104535:	83 c4 10             	add    $0x10,%esp
f0104538:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010453b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010453e:	c1 e8 0c             	shr    $0xc,%eax
f0104541:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0104544:	a1 d0 cd 2b f0       	mov    0xf02bcdd0,%eax
f0104549:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f010454c:	72 17                	jb     f0104565 <get_disk_page_directory+0x8d>
f010454e:	ff 75 f0             	pushl  -0x10(%ebp)
f0104551:	68 50 25 13 f0       	push   $0xf0132550
f0104556:	68 ff 01 00 00       	push   $0x1ff
f010455b:	68 ed 24 13 f0       	push   $0xf01324ed
f0104560:	e8 4b bc ff ff       	call   f01001b0 <_panic>
f0104565:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104568:	2d 00 00 00 10       	sub    $0x10000000,%eax
f010456d:	89 c2                	mov    %eax,%edx
f010456f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104572:	89 10                	mov    %edx,(%eax)
			ptr_env->disk_env_pgdir_PA = to_physical_address(p);
f0104574:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0104577:	83 ec 0c             	sub    $0xc,%esp
f010457a:	50                   	push   %eax
f010457b:	e8 97 f2 ff ff       	call   f0103817 <to_physical_address>
f0104580:	83 c4 10             	add    $0x10,%esp
f0104583:	89 c2                	mov    %eax,%edx
f0104585:	8b 45 08             	mov    0x8(%ebp),%eax
f0104588:	89 90 ac 00 00 00    	mov    %edx,0xac(%eax)
		}
#endif
		memset(*ptr_disk_page_directory , 0, PAGE_SIZE);
f010458e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104591:	8b 00                	mov    (%eax),%eax
f0104593:	83 ec 04             	sub    $0x4,%esp
f0104596:	68 00 10 00 00       	push   $0x1000
f010459b:	6a 00                	push   $0x0
f010459d:	50                   	push   %eax
f010459e:	e8 c3 b0 02 00       	call   f012f666 <memset>
f01045a3:	83 c4 10             	add    $0x10,%esp

		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> Disk directory created at %x", *ptr_disk_page_directory));
	}
	return 0;
f01045a6:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01045ab:	c9                   	leave  
f01045ac:	c3                   	ret    

f01045ad <pf_calculate_allocated_pages>:

int pf_calculate_allocated_pages(struct Env* ptr_env)
{
f01045ad:	55                   	push   %ebp
f01045ae:	89 e5                	mov    %esp,%ebp
f01045b0:	83 ec 28             	sub    $0x28,%esp
	uint32 *pt;
	uint32 pdIndex;
	uint32 pa;
	uint32 counter=0;
f01045b3:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
f01045ba:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01045c1:	e9 ac 00 00 00       	jmp    f0104672 <pf_calculate_allocated_pages+0xc5>
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdIndex] & PERM_PRESENT))
f01045c6:	8b 45 08             	mov    0x8(%ebp),%eax
f01045c9:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f01045cf:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01045d2:	c1 e2 02             	shl    $0x2,%edx
f01045d5:	01 d0                	add    %edx,%eax
f01045d7:	8b 00                	mov    (%eax),%eax
f01045d9:	83 e0 01             	and    $0x1,%eax
f01045dc:	85 c0                	test   %eax,%eax
f01045de:	0f 84 8a 00 00 00    	je     f010466e <pf_calculate_allocated_pages+0xc1>
			continue;

		// find the pa and va of the page table
		pa = EXTRACT_ADDRESS(ptr_env->disk_env_pgdir[pdIndex]);
f01045e4:	8b 45 08             	mov    0x8(%ebp),%eax
f01045e7:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f01045ed:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01045f0:	c1 e2 02             	shl    $0x2,%edx
f01045f3:	01 d0                	add    %edx,%eax
f01045f5:	8b 00                	mov    (%eax),%eax
f01045f7:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01045fc:	89 45 e8             	mov    %eax,-0x18(%ebp)
		{
			pt = (uint32*) kheap_virtual_address(pa);
		}
#else
		{
			pt = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(pa);
f01045ff:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0104602:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0104605:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0104608:	c1 e8 0c             	shr    $0xc,%eax
f010460b:	89 45 e0             	mov    %eax,-0x20(%ebp)
f010460e:	a1 d0 cd 2b f0       	mov    0xf02bcdd0,%eax
f0104613:	39 45 e0             	cmp    %eax,-0x20(%ebp)
f0104616:	72 17                	jb     f010462f <pf_calculate_allocated_pages+0x82>
f0104618:	ff 75 e4             	pushl  -0x1c(%ebp)
f010461b:	68 50 25 13 f0       	push   $0xf0132550
f0104620:	68 1f 02 00 00       	push   $0x21f
f0104625:	68 ed 24 13 f0       	push   $0xf01324ed
f010462a:	e8 81 bb ff ff       	call   f01001b0 <_panic>
f010462f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0104632:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0104637:	89 45 dc             	mov    %eax,-0x24(%ebp)
		}
#endif

		// unmap all PTEs in this page table
		uint32 ptIndex;
		for (ptIndex = 0; ptIndex < 1024; ptIndex++)
f010463a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0104641:	eb 20                	jmp    f0104663 <pf_calculate_allocated_pages+0xb6>
		{
			// remove the disk page from disk page table
			uint32 dfn=pt[ptIndex];
f0104643:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104646:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010464d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0104650:	01 d0                	add    %edx,%eax
f0104652:	8b 00                	mov    (%eax),%eax
f0104654:	89 45 d8             	mov    %eax,-0x28(%ebp)
			if(dfn != 0)
f0104657:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
f010465b:	74 03                	je     f0104660 <pf_calculate_allocated_pages+0xb3>
				counter ++;
f010465d:	ff 45 f0             	incl   -0x10(%ebp)
		}
#endif

		// unmap all PTEs in this page table
		uint32 ptIndex;
		for (ptIndex = 0; ptIndex < 1024; ptIndex++)
f0104660:	ff 45 ec             	incl   -0x14(%ebp)
f0104663:	81 7d ec ff 03 00 00 	cmpl   $0x3ff,-0x14(%ebp)
f010466a:	76 d7                	jbe    f0104643 <pf_calculate_allocated_pages+0x96>
f010466c:	eb 01                	jmp    f010466f <pf_calculate_allocated_pages+0xc2>

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdIndex] & PERM_PRESENT))
			continue;
f010466e:	90                   	nop
	uint32 *pt;
	uint32 pdIndex;
	uint32 pa;
	uint32 counter=0;

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
f010466f:	ff 45 f4             	incl   -0xc(%ebp)
f0104672:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f0104679:	0f 86 47 ff ff ff    	jbe    f01045c6 <pf_calculate_allocated_pages+0x19>
			if(dfn != 0)
				counter ++;
		}
	}

	return counter;
f010467f:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0104682:	c9                   	leave  
f0104683:	c3                   	ret    

f0104684 <pf_calculate_free_frames>:

//2016:
//calculate the disk free frames from the disk free frame list
int pf_calculate_free_frames()
{
f0104684:	55                   	push   %ebp
f0104685:	89 e5                	mov    %esp,%ebp
f0104687:	83 ec 10             	sub    $0x10,%esp
	struct FrameInfo *ptr;
	uint32 totalFreeDiskFrames = 0 ;
f010468a:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	LIST_FOREACH(ptr, &disk_free_frame_list)
f0104691:	a1 90 b2 2d f0       	mov    0xf02db290,%eax
f0104696:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0104699:	eb 0b                	jmp    f01046a6 <pf_calculate_free_frames+0x22>
	{
		totalFreeDiskFrames++ ;
f010469b:	ff 45 f8             	incl   -0x8(%ebp)
int pf_calculate_free_frames()
{
	struct FrameInfo *ptr;
	uint32 totalFreeDiskFrames = 0 ;

	LIST_FOREACH(ptr, &disk_free_frame_list)
f010469e:	a1 98 b2 2d f0       	mov    0xf02db298,%eax
f01046a3:	89 45 fc             	mov    %eax,-0x4(%ebp)
f01046a6:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f01046aa:	74 07                	je     f01046b3 <pf_calculate_free_frames+0x2f>
f01046ac:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01046af:	8b 00                	mov    (%eax),%eax
f01046b1:	eb 05                	jmp    f01046b8 <pf_calculate_free_frames+0x34>
f01046b3:	b8 00 00 00 00       	mov    $0x0,%eax
f01046b8:	a3 98 b2 2d f0       	mov    %eax,0xf02db298
f01046bd:	a1 98 b2 2d f0       	mov    0xf02db298,%eax
f01046c2:	85 c0                	test   %eax,%eax
f01046c4:	75 d5                	jne    f010469b <pf_calculate_free_frames+0x17>
f01046c6:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f01046ca:	75 cf                	jne    f010469b <pf_calculate_free_frames+0x17>
	{
		totalFreeDiskFrames++ ;
	}
	return totalFreeDiskFrames;
f01046cc:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f01046cf:	c9                   	leave  
f01046d0:	c3                   	ret    

f01046d1 <get_disk_table_directory>:



/*========================== TABLE FILE MANAGMENT ==============================*/
int get_disk_table_directory(struct Env* ptr_env, uint32** ptr_disk_table_directory)
{
f01046d1:	55                   	push   %ebp
f01046d2:	89 e5                	mov    %esp,%ebp
f01046d4:	83 ec 18             	sub    $0x18,%esp
	*ptr_disk_table_directory = ptr_env->disk_env_tabledir;
f01046d7:	8b 45 08             	mov    0x8(%ebp),%eax
f01046da:	8b 90 b0 00 00 00    	mov    0xb0(%eax),%edx
f01046e0:	8b 45 0c             	mov    0xc(%ebp),%eax
f01046e3:	89 10                	mov    %edx,(%eax)
	if(*ptr_disk_table_directory == 0)
f01046e5:	8b 45 0c             	mov    0xc(%ebp),%eax
f01046e8:	8b 00                	mov    (%eax),%eax
f01046ea:	85 c0                	test   %eax,%eax
f01046ec:	0f 85 ad 00 00 00    	jne    f010479f <get_disk_table_directory+0xce>
			ptr_env->disk_env_tabledir_PA = kheap_physical_address((uint32)*ptr_disk_table_directory);
		}
#else
		{
			int r;
			struct FrameInfo *p = NULL;
f01046f2:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)

			if ((r = allocate_frame(&p)) < 0)
f01046f9:	83 ec 0c             	sub    $0xc,%esp
f01046fc:	8d 45 e8             	lea    -0x18(%ebp),%eax
f01046ff:	50                   	push   %eax
f0104700:	e8 20 2c 00 00       	call   f0107325 <allocate_frame>
f0104705:	83 c4 10             	add    $0x10,%esp
f0104708:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010470b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010470f:	79 08                	jns    f0104719 <get_disk_table_directory+0x48>
				return r;
f0104711:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104714:	e9 8b 00 00 00       	jmp    f01047a4 <get_disk_table_directory+0xd3>
			p->references = 1;
f0104719:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010471c:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)

			//[4] initialize the new environment by the virtual address of the page directory
			// Hint: use "initialize_environment" function
			*ptr_disk_table_directory = STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(p));
f0104722:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0104725:	83 ec 0c             	sub    $0xc,%esp
f0104728:	50                   	push   %eax
f0104729:	e8 e9 f0 ff ff       	call   f0103817 <to_physical_address>
f010472e:	83 c4 10             	add    $0x10,%esp
f0104731:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0104734:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104737:	c1 e8 0c             	shr    $0xc,%eax
f010473a:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010473d:	a1 d0 cd 2b f0       	mov    0xf02bcdd0,%eax
f0104742:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0104745:	72 17                	jb     f010475e <get_disk_table_directory+0x8d>
f0104747:	ff 75 f0             	pushl  -0x10(%ebp)
f010474a:	68 50 25 13 f0       	push   $0xf0132550
f010474f:	68 5d 02 00 00       	push   $0x25d
f0104754:	68 ed 24 13 f0       	push   $0xf01324ed
f0104759:	e8 52 ba ff ff       	call   f01001b0 <_panic>
f010475e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104761:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0104766:	89 c2                	mov    %eax,%edx
f0104768:	8b 45 0c             	mov    0xc(%ebp),%eax
f010476b:	89 10                	mov    %edx,(%eax)
			ptr_env->disk_env_tabledir_PA = to_physical_address(p);
f010476d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0104770:	83 ec 0c             	sub    $0xc,%esp
f0104773:	50                   	push   %eax
f0104774:	e8 9e f0 ff ff       	call   f0103817 <to_physical_address>
f0104779:	83 c4 10             	add    $0x10,%esp
f010477c:	89 c2                	mov    %eax,%edx
f010477e:	8b 45 08             	mov    0x8(%ebp),%eax
f0104781:	89 90 b4 00 00 00    	mov    %edx,0xb4(%eax)
		}
#endif
		memset(*ptr_disk_table_directory , 0, PAGE_SIZE);
f0104787:	8b 45 0c             	mov    0xc(%ebp),%eax
f010478a:	8b 00                	mov    (%eax),%eax
f010478c:	83 ec 04             	sub    $0x4,%esp
f010478f:	68 00 10 00 00       	push   $0x1000
f0104794:	6a 00                	push   $0x0
f0104796:	50                   	push   %eax
f0104797:	e8 ca ae 02 00       	call   f012f666 <memset>
f010479c:	83 c4 10             	add    $0x10,%esp

		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> Disk directory created at %x", *ptr_disk_page_directory));
	}
	return 0;
f010479f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01047a4:	c9                   	leave  
f01047a5:	c3                   	ret    

f01047a6 <__pf_write_env_table>:

int __pf_write_env_table( struct Env* ptr_env, uint32 virtual_address, uint32* tableKVirtualAddress)
{
f01047a6:	55                   	push   %ebp
f01047a7:	89 e5                	mov    %esp,%ebp
f01047a9:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("========================== create_env_page");
	assert((uint32)virtual_address < KERNEL_BASE);
f01047ac:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f01047b3:	76 19                	jbe    f01047ce <__pf_write_env_table+0x28>
f01047b5:	68 80 25 13 f0       	push   $0xf0132580
f01047ba:	68 a6 25 13 f0       	push   $0xf01325a6
f01047bf:	68 6b 02 00 00       	push   $0x26b
f01047c4:	68 ed 24 13 f0       	push   $0xf01324ed
f01047c9:	e8 e2 b9 ff ff       	call   f01001b0 <_panic>

	get_disk_table_directory(ptr_env, &(ptr_env->disk_env_tabledir)) ;
f01047ce:	8b 45 08             	mov    0x8(%ebp),%eax
f01047d1:	05 b0 00 00 00       	add    $0xb0,%eax
f01047d6:	83 ec 08             	sub    $0x8,%esp
f01047d9:	50                   	push   %eax
f01047da:	ff 75 08             	pushl  0x8(%ebp)
f01047dd:	e8 ef fe ff ff       	call   f01046d1 <get_disk_table_directory>
f01047e2:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f01047e5:	8b 45 08             	mov    0x8(%ebp),%eax
f01047e8:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f01047ee:	8b 55 0c             	mov    0xc(%ebp),%edx
f01047f1:	c1 ea 16             	shr    $0x16,%edx
f01047f4:	c1 e2 02             	shl    $0x2,%edx
f01047f7:	01 d0                	add    %edx,%eax
f01047f9:	8b 00                	mov    (%eax),%eax
f01047fb:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if( dfn == 0)
f01047fe:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104801:	85 c0                	test   %eax,%eax
f0104803:	75 34                	jne    f0104839 <__pf_write_env_table+0x93>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f0104805:	83 ec 0c             	sub    $0xc,%esp
f0104808:	8d 45 f0             	lea    -0x10(%ebp),%eax
f010480b:	50                   	push   %eax
f010480c:	e8 83 f2 ff ff       	call   f0103a94 <allocate_disk_frame>
f0104811:	83 c4 10             	add    $0x10,%esp
f0104814:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0104817:	75 07                	jne    f0104820 <__pf_write_env_table+0x7a>
f0104819:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f010481e:	eb 31                	jmp    f0104851 <__pf_write_env_table+0xab>
		ptr_env->disk_env_tabledir[PDX(virtual_address)] = dfn;
f0104820:	8b 45 08             	mov    0x8(%ebp),%eax
f0104823:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f0104829:	8b 55 0c             	mov    0xc(%ebp),%edx
f010482c:	c1 ea 16             	shr    $0x16,%edx
f010482f:	c1 e2 02             	shl    $0x2,%edx
f0104832:	01 c2                	add    %eax,%edx
f0104834:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104837:	89 02                	mov    %eax,(%edx)
	//	lcr3(oldDir);

	//We already read it from the KERNEL mapping instead of the USER mapping

	//cprintf("[%s] writing table\n",ptr_env->prog_name);
	int ret = write_disk_page(dfn, (void*)tableKVirtualAddress);
f0104839:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010483c:	83 ec 08             	sub    $0x8,%esp
f010483f:	ff 75 10             	pushl  0x10(%ebp)
f0104842:	50                   	push   %eax
f0104843:	e8 63 f0 ff ff       	call   f01038ab <write_disk_page>
f0104848:	83 c4 10             	add    $0x10,%esp
f010484b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//cprintf("[%s] finished writing table\n",ptr_env->prog_name);
	return ret;
f010484e:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0104851:	c9                   	leave  
f0104852:	c3                   	ret    

f0104853 <__pf_read_env_table>:

int __pf_read_env_table(struct Env* ptr_env, uint32 virtual_address, uint32* tableKVirtualAddress)
{
f0104853:	55                   	push   %ebp
f0104854:	89 e5                	mov    %esp,%ebp
f0104856:	83 ec 18             	sub    $0x18,%esp
	if( ptr_env->disk_env_tabledir == 0) return E_TABLE_NOT_EXIST_IN_PF;
f0104859:	8b 45 08             	mov    0x8(%ebp),%eax
f010485c:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f0104862:	85 c0                	test   %eax,%eax
f0104864:	75 07                	jne    f010486d <__pf_read_env_table+0x1a>
f0104866:	b8 f6 ff ff ff       	mov    $0xfffffff6,%eax
f010486b:	eb 3d                	jmp    f01048aa <__pf_read_env_table+0x57>

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f010486d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104870:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f0104876:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104879:	c1 ea 16             	shr    $0x16,%edx
f010487c:	c1 e2 02             	shl    $0x2,%edx
f010487f:	01 d0                	add    %edx,%eax
f0104881:	8b 00                	mov    (%eax),%eax
f0104883:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if( dfn == 0) return E_TABLE_NOT_EXIST_IN_PF;
f0104886:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010488a:	75 07                	jne    f0104893 <__pf_read_env_table+0x40>
f010488c:	b8 f6 ff ff ff       	mov    $0xfffffff6,%eax
f0104891:	eb 17                	jmp    f01048aa <__pf_read_env_table+0x57>

	int disk_read_error = read_disk_page(dfn, tableKVirtualAddress);
f0104893:	83 ec 08             	sub    $0x8,%esp
f0104896:	ff 75 10             	pushl  0x10(%ebp)
f0104899:	ff 75 f4             	pushl  -0xc(%ebp)
f010489c:	e8 db ef ff ff       	call   f010387c <read_disk_page>
f01048a1:	83 c4 10             	add    $0x10,%esp
f01048a4:	89 45 f0             	mov    %eax,-0x10(%ebp)

	return disk_read_error;
f01048a7:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f01048aa:	c9                   	leave  
f01048ab:	c3                   	ret    

f01048ac <__pf_remove_env_all_tables>:

void __pf_remove_env_all_tables(struct Env* ptr_env)
{
f01048ac:	55                   	push   %ebp
f01048ad:	89 e5                	mov    %esp,%ebp
f01048af:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("pf_remove_env_page: 0");

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;
f01048b2:	8b 45 08             	mov    0x8(%ebp),%eax
f01048b5:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f01048bb:	85 c0                	test   %eax,%eax
f01048bd:	74 52                	je     f0104911 <__pf_remove_env_all_tables+0x65>

	uint32 pdeno;
	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f01048bf:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01048c6:	eb 3e                	jmp    f0104906 <__pf_remove_env_all_tables+0x5a>
	{
		uint32 dfn=ptr_env->disk_env_tabledir[pdeno];
f01048c8:	8b 45 08             	mov    0x8(%ebp),%eax
f01048cb:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f01048d1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01048d4:	c1 e2 02             	shl    $0x2,%edx
f01048d7:	01 d0                	add    %edx,%eax
f01048d9:	8b 00                	mov    (%eax),%eax
f01048db:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_env->disk_env_tabledir[pdeno] = 0;
f01048de:	8b 45 08             	mov    0x8(%ebp),%eax
f01048e1:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f01048e7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01048ea:	c1 e2 02             	shl    $0x2,%edx
f01048ed:	01 d0                	add    %edx,%eax
f01048ef:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		free_disk_frame(dfn);
f01048f5:	83 ec 0c             	sub    $0xc,%esp
f01048f8:	ff 75 f0             	pushl  -0x10(%ebp)
f01048fb:	e8 5b f2 ff ff       	call   f0103b5b <free_disk_frame>
f0104900:	83 c4 10             	add    $0x10,%esp

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;

	uint32 pdeno;
	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0104903:	ff 45 f4             	incl   -0xc(%ebp)
f0104906:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f010490d:	76 b9                	jbe    f01048c8 <__pf_remove_env_all_tables+0x1c>
f010490f:	eb 01                	jmp    f0104912 <__pf_remove_env_all_tables+0x66>
void __pf_remove_env_all_tables(struct Env* ptr_env)
{
	//LOG_STRING("pf_remove_env_page: 0");

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;
f0104911:	90                   	nop
		uint32 dfn=ptr_env->disk_env_tabledir[pdeno];
		ptr_env->disk_env_tabledir[pdeno] = 0;
		free_disk_frame(dfn);
	}
	//LOG_STRING("pf_remove_env_page: 3");
}
f0104912:	c9                   	leave  
f0104913:	c3                   	ret    

f0104914 <__pf_remove_env_table>:

void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address)
{
f0104914:	55                   	push   %ebp
f0104915:	89 e5                	mov    %esp,%ebp
f0104917:	83 ec 18             	sub    $0x18,%esp
	if (virtual_address == 0)
f010491a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f010491e:	75 10                	jne    f0104930 <__pf_remove_env_table+0x1c>
		cprintf("REMOVING table 0 from page file\n");
f0104920:	83 ec 0c             	sub    $0xc,%esp
f0104923:	68 b0 26 13 f0       	push   $0xf01326b0
f0104928:	e8 04 c5 ff ff       	call   f0100e31 <cprintf>
f010492d:	83 c4 10             	add    $0x10,%esp
	if( ptr_env->disk_env_tabledir == 0) return;
f0104930:	8b 45 08             	mov    0x8(%ebp),%eax
f0104933:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f0104939:	85 c0                	test   %eax,%eax
f010493b:	74 43                	je     f0104980 <__pf_remove_env_table+0x6c>

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f010493d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104940:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f0104946:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104949:	c1 ea 16             	shr    $0x16,%edx
f010494c:	c1 e2 02             	shl    $0x2,%edx
f010494f:	01 d0                	add    %edx,%eax
f0104951:	8b 00                	mov    (%eax),%eax
f0104953:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_env->disk_env_tabledir[PDX(virtual_address)] = 0;
f0104956:	8b 45 08             	mov    0x8(%ebp),%eax
f0104959:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f010495f:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104962:	c1 ea 16             	shr    $0x16,%edx
f0104965:	c1 e2 02             	shl    $0x2,%edx
f0104968:	01 d0                	add    %edx,%eax
f010496a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	free_disk_frame(dfn);
f0104970:	83 ec 0c             	sub    $0xc,%esp
f0104973:	ff 75 f4             	pushl  -0xc(%ebp)
f0104976:	e8 e0 f1 ff ff       	call   f0103b5b <free_disk_frame>
f010497b:	83 c4 10             	add    $0x10,%esp
f010497e:	eb 01                	jmp    f0104981 <__pf_remove_env_table+0x6d>

void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address)
{
	if (virtual_address == 0)
		cprintf("REMOVING table 0 from page file\n");
	if( ptr_env->disk_env_tabledir == 0) return;
f0104980:	90                   	nop

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
	ptr_env->disk_env_tabledir[PDX(virtual_address)] = 0;
	free_disk_frame(dfn);
}
f0104981:	c9                   	leave  
f0104982:	c3                   	ret    

f0104983 <test_disk_01>:
///========================== END OF TABLE FILE MANAGMENT =============================


void test_disk_01(void *virtual_address)
{
f0104983:	55                   	push   %ebp
f0104984:	89 e5                	mov    %esp,%ebp
f0104986:	83 ec 18             	sub    $0x18,%esp
	LOG_STATMENT(cprintf("doing tests for ide_write()\n"));
	int i=90157;
f0104989:	c7 45 f4 2d 60 01 00 	movl   $0x1602d,-0xc(%ebp)
	for(;i<140000;i += 500)
f0104990:	eb 1f                	jmp    f01049b1 <test_disk_01+0x2e>
	{
		if(ide_write(i,(void *)virtual_address,8) != 0)
f0104992:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104995:	83 ec 04             	sub    $0x4,%esp
f0104998:	6a 08                	push   $0x8
f010499a:	ff 75 08             	pushl  0x8(%ebp)
f010499d:	50                   	push   %eax
f010499e:	e8 d0 b3 02 00       	call   f012fd73 <ide_write>
f01049a3:	83 c4 10             	add    $0x10,%esp
f01049a6:	85 c0                	test   %eax,%eax
f01049a8:	75 12                	jne    f01049bc <test_disk_01+0x39>

void test_disk_01(void *virtual_address)
{
	LOG_STATMENT(cprintf("doing tests for ide_write()\n"));
	int i=90157;
	for(;i<140000;i += 500)
f01049aa:	81 45 f4 f4 01 00 00 	addl   $0x1f4,-0xc(%ebp)
f01049b1:	81 7d f4 df 22 02 00 	cmpl   $0x222df,-0xc(%ebp)
f01049b8:	7e d8                	jle    f0104992 <test_disk_01+0xf>
		{
			//LOG_STATMENT(cprintf("written at sector %d\n",i););
		}
	}
	LOG_STATMENT(cprintf("ide_write() test done\n"););
}
f01049ba:	eb 01                	jmp    f01049bd <test_disk_01+0x3a>
	for(;i<140000;i += 500)
	{
		if(ide_write(i,(void *)virtual_address,8) != 0)
		{
			LOG_STATMENT(cprintf("FAILURE to write sector %d\n",i););
			break;
f01049bc:	90                   	nop
		{
			//LOG_STATMENT(cprintf("written at sector %d\n",i););
		}
	}
	LOG_STATMENT(cprintf("ide_write() test done\n"););
}
f01049bd:	90                   	nop
f01049be:	c9                   	leave  
f01049bf:	c3                   	ret    

f01049c0 <mc146818_read>:
#include <kern/cpu/picirq.h>


unsigned
mc146818_read(unsigned reg)
{
f01049c0:	55                   	push   %ebp
f01049c1:	89 e5                	mov    %esp,%ebp
f01049c3:	83 ec 10             	sub    $0x10,%esp
	outb(IO_RTC, reg);
f01049c6:	8b 45 08             	mov    0x8(%ebp),%eax
f01049c9:	0f b6 c0             	movzbl %al,%eax
f01049cc:	c7 45 fc 70 00 00 00 	movl   $0x70,-0x4(%ebp)
f01049d3:	88 45 f6             	mov    %al,-0xa(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01049d6:	8a 45 f6             	mov    -0xa(%ebp),%al
f01049d9:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01049dc:	ee                   	out    %al,(%dx)
f01049dd:	c7 45 f8 71 00 00 00 	movl   $0x71,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01049e4:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01049e7:	89 c2                	mov    %eax,%edx
f01049e9:	ec                   	in     (%dx),%al
f01049ea:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f01049ed:	8a 45 f7             	mov    -0x9(%ebp),%al
	return inb(IO_RTC+1);
f01049f0:	0f b6 c0             	movzbl %al,%eax
}
f01049f3:	c9                   	leave  
f01049f4:	c3                   	ret    

f01049f5 <mc146818_write>:

void
mc146818_write(unsigned reg, unsigned datum)
{
f01049f5:	55                   	push   %ebp
f01049f6:	89 e5                	mov    %esp,%ebp
f01049f8:	83 ec 10             	sub    $0x10,%esp
	outb(IO_RTC, reg);
f01049fb:	8b 45 08             	mov    0x8(%ebp),%eax
f01049fe:	0f b6 c0             	movzbl %al,%eax
f0104a01:	c7 45 fc 70 00 00 00 	movl   $0x70,-0x4(%ebp)
f0104a08:	88 45 f6             	mov    %al,-0xa(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0104a0b:	8a 45 f6             	mov    -0xa(%ebp),%al
f0104a0e:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0104a11:	ee                   	out    %al,(%dx)
	outb(IO_RTC+1, datum);
f0104a12:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104a15:	0f b6 c0             	movzbl %al,%eax
f0104a18:	c7 45 f8 71 00 00 00 	movl   $0x71,-0x8(%ebp)
f0104a1f:	88 45 f7             	mov    %al,-0x9(%ebp)
f0104a22:	8a 45 f7             	mov    -0x9(%ebp),%al
f0104a25:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0104a28:	ee                   	out    %al,(%dx)
}
f0104a29:	90                   	nop
f0104a2a:	c9                   	leave  
f0104a2b:	c3                   	ret    

f0104a2c <kclock_start>:


void
kclock_start(uint8 quantum_in_ms)
{
f0104a2c:	55                   	push   %ebp
f0104a2d:	89 e5                	mov    %esp,%ebp
f0104a2f:	53                   	push   %ebx
f0104a30:	83 ec 24             	sub    $0x24,%esp
f0104a33:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a36:	88 45 e4             	mov    %al,-0x1c(%ebp)
f0104a39:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f0104a40:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f0104a44:	8a 45 ef             	mov    -0x11(%ebp),%al
f0104a47:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104a4a:	ee                   	out    %al,(%dx)
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);

	//2017
//	outb(TIMER_CNTR0, TIMER_DIV((1000/CLOCK_INTERVAL_IN_MS)) % 256);
//	outb(TIMER_CNTR0, TIMER_DIV((1000/CLOCK_INTERVAL_IN_MS)) / 256);
	if (IS_VALID_QUANTUM(quantum_in_ms))
f0104a4b:	80 7d e4 35          	cmpb   $0x35,-0x1c(%ebp)
f0104a4f:	77 48                	ja     f0104a99 <kclock_start+0x6d>
f0104a51:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f0104a58:	c6 45 ee 34          	movb   $0x34,-0x12(%ebp)
f0104a5c:	8a 45 ee             	mov    -0x12(%ebp),%al
f0104a5f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104a62:	ee                   	out    %al,(%dx)
	{
		outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
		kclock_write_cnt0_LSB_first(TIMER_DIV((1000/quantum_in_ms))) ;
f0104a63:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f0104a67:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f0104a6c:	99                   	cltd   
f0104a6d:	f7 fb                	idiv   %ebx
f0104a6f:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f0104a75:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f0104a79:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f0104a7e:	99                   	cltd   
f0104a7f:	f7 fb                	idiv   %ebx
f0104a81:	89 c3                	mov    %eax,%ebx
f0104a83:	89 c8                	mov    %ecx,%eax
f0104a85:	99                   	cltd   
f0104a86:	f7 fb                	idiv   %ebx
f0104a88:	0f b7 c0             	movzwl %ax,%eax
f0104a8b:	83 ec 0c             	sub    $0xc,%esp
f0104a8e:	50                   	push   %eax
f0104a8f:	e8 dd 01 00 00       	call   f0104c71 <kclock_write_cnt0_LSB_first>
f0104a94:	83 c4 10             	add    $0x10,%esp
f0104a97:	eb 13                	jmp    f0104aac <kclock_start+0x80>
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
f0104a99:	6a 35                	push   $0x35
f0104a9b:	68 d4 26 13 f0       	push   $0xf01326d4
f0104aa0:	6a 33                	push   $0x33
f0104aa2:	68 30 27 13 f0       	push   $0xf0132730
f0104aa7:	e8 04 b7 ff ff       	call   f01001b0 <_panic>
//	cprintf("c = %d\n", c) ;

//	uint16 cnt0_after = kclock_read_cnt0() ;

	//cprintf("	Setup timer interrupts via 8259A\n");
	irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
f0104aac:	66 a1 64 f9 18 f0    	mov    0xf018f964,%ax
f0104ab2:	0f b7 c0             	movzwl %ax,%eax
f0104ab5:	25 fe ff 00 00       	and    $0xfffe,%eax
f0104aba:	83 ec 0c             	sub    $0xc,%esp
f0104abd:	50                   	push   %eax
f0104abe:	e8 3a 1c 00 00       	call   f01066fd <irq_setmask_8259A>
f0104ac3:	83 c4 10             	add    $0x10,%esp
	//cprintf("	unmasked timer interrupt\n");

	//cprintf("Timer STARTED: Counter0 Before Lag = %d, After lag = %d\n", cnt0_before, cnt0_after );

}
f0104ac6:	90                   	nop
f0104ac7:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0104aca:	c9                   	leave  
f0104acb:	c3                   	ret    

f0104acc <kclock_stop>:

void
kclock_stop(void)
{
f0104acc:	55                   	push   %ebp
f0104acd:	89 e5                	mov    %esp,%ebp
f0104acf:	83 ec 18             	sub    $0x18,%esp
f0104ad2:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f0104ad9:	c6 45 f3 34          	movb   $0x34,-0xd(%ebp)
f0104add:	8a 45 f3             	mov    -0xd(%ebp),%al
f0104ae0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104ae3:	ee                   	out    %al,(%dx)
//	for (int i = 0 ; i <20; i++)
//	{
//		cnt0 = kclock_read_cnt0();
//		cprintf("STOP AFTER: cnt0 = %d\n",cnt0);
//	}
	irq_setmask_8259A(0xFFFF);
f0104ae4:	83 ec 0c             	sub    $0xc,%esp
f0104ae7:	68 ff ff 00 00       	push   $0xffff
f0104aec:	e8 0c 1c 00 00       	call   f01066fd <irq_setmask_8259A>
f0104af1:	83 c4 10             	add    $0x10,%esp
//	uint16 cnt0 = kclock_read_cnt0() ;
//	cprintf("Timer STOPPED: Counter0 Value = %x\n", cnt0 );
	//cprintf("Timer STOPPED: Status Value = %x\n", status);


}
f0104af4:	90                   	nop
f0104af5:	c9                   	leave  
f0104af6:	c3                   	ret    

f0104af7 <kclock_resume>:

void
kclock_resume(void)
{
f0104af7:	55                   	push   %ebp
f0104af8:	89 e5                	mov    %esp,%ebp
f0104afa:	83 ec 18             	sub    $0x18,%esp
	uint16 cnt0 = kclock_read_cnt0() ;
f0104afd:	e8 b1 01 00 00       	call   f0104cb3 <kclock_read_cnt0>
f0104b02:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
	//2017: if the remaining time is small, then increase it a bit to avoid invoking the CLOCK INT
	//		before returning back to the environment (this cause INT inside INT!!!) el7 :)
	if (cnt0 < 20)
f0104b06:	66 83 7d f6 13       	cmpw   $0x13,-0xa(%ebp)
f0104b0b:	77 06                	ja     f0104b13 <kclock_resume+0x1c>
	{
		cnt0 = 20;
f0104b0d:	66 c7 45 f6 14 00    	movw   $0x14,-0xa(%ebp)
	}

	if (cnt0 % 2 == 1)
f0104b13:	66 8b 45 f6          	mov    -0xa(%ebp),%ax
f0104b17:	83 e0 01             	and    $0x1,%eax
f0104b1a:	66 85 c0             	test   %ax,%ax
f0104b1d:	74 09                	je     f0104b28 <kclock_resume+0x31>
		cnt0++;
f0104b1f:	66 8b 45 f6          	mov    -0xa(%ebp),%ax
f0104b23:	40                   	inc    %eax
f0104b24:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
f0104b28:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f0104b2f:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f0104b33:	8a 45 ef             	mov    -0x11(%ebp),%al
f0104b36:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104b39:	ee                   	out    %al,(%dx)

	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
	kclock_write_cnt0_LSB_first(cnt0) ;
f0104b3a:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
f0104b3e:	83 ec 0c             	sub    $0xc,%esp
f0104b41:	50                   	push   %eax
f0104b42:	e8 2a 01 00 00       	call   f0104c71 <kclock_write_cnt0_LSB_first>
f0104b47:	83 c4 10             	add    $0x10,%esp
//	uint16 cnt0_after = kclock_read_cnt0() ;
//	cprintf("Timer RESUMED: Counter0 Before Lag = %d, After lag = %d\n", cnt0_before, cnt0_after );


	//cprintf("	Setup timer interrupts via 8259A\n");
	irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
f0104b4a:	66 a1 64 f9 18 f0    	mov    0xf018f964,%ax
f0104b50:	0f b7 c0             	movzwl %ax,%eax
f0104b53:	25 fe ff 00 00       	and    $0xfffe,%eax
f0104b58:	83 ec 0c             	sub    $0xc,%esp
f0104b5b:	50                   	push   %eax
f0104b5c:	e8 9c 1b 00 00       	call   f01066fd <irq_setmask_8259A>
f0104b61:	83 c4 10             	add    $0x10,%esp
	//cprintf("	unmasked timer interrupt\n");
}
f0104b64:	90                   	nop
f0104b65:	c9                   	leave  
f0104b66:	c3                   	ret    

f0104b67 <kclock_start_counter>:


//==============

void kclock_start_counter(uint8 cnt0)
{
f0104b67:	55                   	push   %ebp
f0104b68:	89 e5                	mov    %esp,%ebp
f0104b6a:	83 ec 28             	sub    $0x28,%esp
f0104b6d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b70:	88 45 e4             	mov    %al,-0x1c(%ebp)
f0104b73:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f0104b7a:	c6 45 f3 34          	movb   $0x34,-0xd(%ebp)
f0104b7e:	8a 45 f3             	mov    -0xd(%ebp),%al
f0104b81:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104b84:	ee                   	out    %al,(%dx)
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
	kclock_write_cnt0_LSB_first(cnt0) ;
f0104b85:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
f0104b89:	83 ec 0c             	sub    $0xc,%esp
f0104b8c:	50                   	push   %eax
f0104b8d:	e8 df 00 00 00       	call   f0104c71 <kclock_write_cnt0_LSB_first>
f0104b92:	83 c4 10             	add    $0x10,%esp
	irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
f0104b95:	66 a1 64 f9 18 f0    	mov    0xf018f964,%ax
f0104b9b:	0f b7 c0             	movzwl %ax,%eax
f0104b9e:	25 fe ff 00 00       	and    $0xfffe,%eax
f0104ba3:	83 ec 0c             	sub    $0xc,%esp
f0104ba6:	50                   	push   %eax
f0104ba7:	e8 51 1b 00 00       	call   f01066fd <irq_setmask_8259A>
f0104bac:	83 c4 10             	add    $0x10,%esp

}
f0104baf:	90                   	nop
f0104bb0:	c9                   	leave  
f0104bb1:	c3                   	ret    

f0104bb2 <kclock_set_quantum>:
//2018
//Reset the CNT0 to the given quantum value without affecting the interrupt status
void kclock_set_quantum(uint8 quantum_in_ms)
{
f0104bb2:	55                   	push   %ebp
f0104bb3:	89 e5                	mov    %esp,%ebp
f0104bb5:	56                   	push   %esi
f0104bb6:	53                   	push   %ebx
f0104bb7:	83 ec 20             	sub    $0x20,%esp
f0104bba:	8b 45 08             	mov    0x8(%ebp),%eax
f0104bbd:	88 45 e4             	mov    %al,-0x1c(%ebp)
	if (IS_VALID_QUANTUM(quantum_in_ms))
f0104bc0:	80 7d e4 35          	cmpb   $0x35,-0x1c(%ebp)
f0104bc4:	0f 87 8a 00 00 00    	ja     f0104c54 <kclock_set_quantum+0xa2>
	{
		/*2023*/
//		int cnt = TIMER_DIV((1000/quantum_in_ms));
//		if (cnt%2 == 1)
//			cnt++;
		int cnt = NUM_CLKS_PER_QUANTUM(quantum_in_ms);
f0104bca:	0f b6 75 e4          	movzbl -0x1c(%ebp),%esi
f0104bce:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f0104bd3:	99                   	cltd   
f0104bd4:	f7 fe                	idiv   %esi
f0104bd6:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f0104bdc:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f0104be0:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f0104be5:	99                   	cltd   
f0104be6:	f7 fb                	idiv   %ebx
f0104be8:	89 c6                	mov    %eax,%esi
f0104bea:	89 c8                	mov    %ecx,%eax
f0104bec:	99                   	cltd   
f0104bed:	f7 fe                	idiv   %esi
f0104bef:	89 c3                	mov    %eax,%ebx
f0104bf1:	0f b6 4d e4          	movzbl -0x1c(%ebp),%ecx
f0104bf5:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f0104bfa:	99                   	cltd   
f0104bfb:	f7 f9                	idiv   %ecx
f0104bfd:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f0104c03:	0f b6 75 e4          	movzbl -0x1c(%ebp),%esi
f0104c07:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f0104c0c:	99                   	cltd   
f0104c0d:	f7 fe                	idiv   %esi
f0104c0f:	89 c6                	mov    %eax,%esi
f0104c11:	89 c8                	mov    %ecx,%eax
f0104c13:	99                   	cltd   
f0104c14:	f7 fe                	idiv   %esi
f0104c16:	25 01 00 00 80       	and    $0x80000001,%eax
f0104c1b:	85 c0                	test   %eax,%eax
f0104c1d:	79 05                	jns    f0104c24 <kclock_set_quantum+0x72>
f0104c1f:	48                   	dec    %eax
f0104c20:	83 c8 fe             	or     $0xfffffffe,%eax
f0104c23:	40                   	inc    %eax
f0104c24:	01 d8                	add    %ebx,%eax
f0104c26:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104c29:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f0104c30:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f0104c34:	8a 45 ef             	mov    -0x11(%ebp),%al
f0104c37:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104c3a:	ee                   	out    %al,(%dx)


		//cprintf("QUANTUM is set to %d ms (%d)\n", quantum_in_ms, TIMER_DIV((1000/quantum_in_ms)));
		outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
		kclock_write_cnt0_LSB_first(cnt) ;
f0104c3b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104c3e:	0f b7 c0             	movzwl %ax,%eax
f0104c41:	83 ec 0c             	sub    $0xc,%esp
f0104c44:	50                   	push   %eax
f0104c45:	e8 27 00 00 00       	call   f0104c71 <kclock_write_cnt0_LSB_first>
f0104c4a:	83 c4 10             	add    $0x10,%esp
		kclock_stop();
f0104c4d:	e8 7a fe ff ff       	call   f0104acc <kclock_stop>
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
	}
}
f0104c52:	eb 16                	jmp    f0104c6a <kclock_set_quantum+0xb8>
		kclock_stop();
		//uint16 cnt0 = kclock_read_cnt0_latch() ; //read after write to ensure it's set to the desired value
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
f0104c54:	6a 35                	push   $0x35
f0104c56:	68 d4 26 13 f0       	push   $0xf01326d4
f0104c5b:	68 cc 00 00 00       	push   $0xcc
f0104c60:	68 30 27 13 f0       	push   $0xf0132730
f0104c65:	e8 46 b5 ff ff       	call   f01001b0 <_panic>
	}
}
f0104c6a:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0104c6d:	5b                   	pop    %ebx
f0104c6e:	5e                   	pop    %esi
f0104c6f:	5d                   	pop    %ebp
f0104c70:	c3                   	ret    

f0104c71 <kclock_write_cnt0_LSB_first>:


//2017
void
kclock_write_cnt0_LSB_first(uint16 val)
{
f0104c71:	55                   	push   %ebp
f0104c72:	89 e5                	mov    %esp,%ebp
f0104c74:	83 ec 14             	sub    $0x14,%esp
f0104c77:	8b 45 08             	mov    0x8(%ebp),%eax
f0104c7a:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	outb(TIMER_CNTR0, (uint8)(val & 0x00FF));
f0104c7e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104c81:	0f b6 c0             	movzbl %al,%eax
f0104c84:	c7 45 fc 40 00 00 00 	movl   $0x40,-0x4(%ebp)
f0104c8b:	88 45 f6             	mov    %al,-0xa(%ebp)
f0104c8e:	8a 45 f6             	mov    -0xa(%ebp),%al
f0104c91:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0104c94:	ee                   	out    %al,(%dx)
	outb(TIMER_CNTR0, (uint8)((val>>8) & 0x00FF));
f0104c95:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104c98:	66 c1 e8 08          	shr    $0x8,%ax
f0104c9c:	0f b6 c0             	movzbl %al,%eax
f0104c9f:	c7 45 f8 40 00 00 00 	movl   $0x40,-0x8(%ebp)
f0104ca6:	88 45 f7             	mov    %al,-0x9(%ebp)
f0104ca9:	8a 45 f7             	mov    -0x9(%ebp),%al
f0104cac:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0104caf:	ee                   	out    %al,(%dx)
}
f0104cb0:	90                   	nop
f0104cb1:	c9                   	leave  
f0104cb2:	c3                   	ret    

f0104cb3 <kclock_read_cnt0>:
//==============


uint16
kclock_read_cnt0(void)
{
f0104cb3:	55                   	push   %ebp
f0104cb4:	89 e5                	mov    %esp,%ebp
f0104cb6:	83 ec 20             	sub    $0x20,%esp
f0104cb9:	c7 45 f8 40 00 00 00 	movl   $0x40,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0104cc0:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0104cc3:	89 c2                	mov    %eax,%edx
f0104cc5:	ec                   	in     (%dx),%al
f0104cc6:	88 45 ee             	mov    %al,-0x12(%ebp)
	return data;
f0104cc9:	8a 45 ee             	mov    -0x12(%ebp),%al
	uint8 cnt0_lo =  inb(TIMER_CNTR0);
f0104ccc:	88 45 ff             	mov    %al,-0x1(%ebp)
f0104ccf:	c7 45 f0 40 00 00 00 	movl   $0x40,-0x10(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0104cd6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104cd9:	89 c2                	mov    %eax,%edx
f0104cdb:	ec                   	in     (%dx),%al
f0104cdc:	88 45 ef             	mov    %al,-0x11(%ebp)
	return data;
f0104cdf:	8a 45 ef             	mov    -0x11(%ebp),%al
	uint8 cnt0_hi =  inb(TIMER_CNTR0);
f0104ce2:	88 45 f7             	mov    %al,-0x9(%ebp)
	uint16 cnt0 = (cnt0_hi << 8) | cnt0_lo ;
f0104ce5:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
f0104ce9:	c1 e0 08             	shl    $0x8,%eax
f0104cec:	89 c2                	mov    %eax,%edx
f0104cee:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
f0104cf2:	09 d0                	or     %edx,%eax
f0104cf4:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
	return cnt0 ;
f0104cf8:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0104cfb:	c9                   	leave  
f0104cfc:	c3                   	ret    

f0104cfd <kclock_read_cnt0_latch>:


uint16
kclock_read_cnt0_latch(void)
{
f0104cfd:	55                   	push   %ebp
f0104cfe:	89 e5                	mov    %esp,%ebp
f0104d00:	83 ec 30             	sub    $0x30,%esp
f0104d03:	c7 45 f8 43 00 00 00 	movl   $0x43,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0104d0a:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0104d0d:	89 c2                	mov    %eax,%edx
f0104d0f:	ec                   	in     (%dx),%al
f0104d10:	88 45 db             	mov    %al,-0x25(%ebp)
	return data;
f0104d13:	8a 45 db             	mov    -0x25(%ebp),%al
	uint8 old_mode = inb(TIMER_MODE) ;
f0104d16:	88 45 ff             	mov    %al,-0x1(%ebp)
f0104d19:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f0104d20:	c6 45 dc 00          	movb   $0x0,-0x24(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0104d24:	8a 45 dc             	mov    -0x24(%ebp),%al
f0104d27:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104d2a:	ee                   	out    %al,(%dx)
f0104d2b:	c7 45 ec 40 00 00 00 	movl   $0x40,-0x14(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0104d32:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104d35:	89 c2                	mov    %eax,%edx
f0104d37:	ec                   	in     (%dx),%al
f0104d38:	88 45 dd             	mov    %al,-0x23(%ebp)
	return data;
f0104d3b:	8a 45 dd             	mov    -0x23(%ebp),%al
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_LATCH);

	uint8 cnt0_lo =  inb(TIMER_CNTR0);
f0104d3e:	88 45 f3             	mov    %al,-0xd(%ebp)
f0104d41:	c7 45 e4 40 00 00 00 	movl   $0x40,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0104d48:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0104d4b:	89 c2                	mov    %eax,%edx
f0104d4d:	ec                   	in     (%dx),%al
f0104d4e:	88 45 de             	mov    %al,-0x22(%ebp)
	return data;
f0104d51:	8a 45 de             	mov    -0x22(%ebp),%al
	uint8 cnt0_hi =  inb(TIMER_CNTR0);
f0104d54:	88 45 eb             	mov    %al,-0x15(%ebp)
	uint16 cnt0 = (cnt0_hi << 8) | cnt0_lo ;
f0104d57:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
f0104d5b:	c1 e0 08             	shl    $0x8,%eax
f0104d5e:	89 c2                	mov    %eax,%edx
f0104d60:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0104d64:	09 d0                	or     %edx,%eax
f0104d66:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
	outb(TIMER_MODE, old_mode);
f0104d6a:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
f0104d6e:	c7 45 e0 43 00 00 00 	movl   $0x43,-0x20(%ebp)
f0104d75:	88 45 df             	mov    %al,-0x21(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0104d78:	8a 45 df             	mov    -0x21(%ebp),%al
f0104d7b:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0104d7e:	ee                   	out    %al,(%dx)

	return cnt0 ;
f0104d7f:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
f0104d82:	c9                   	leave  
f0104d83:	c3                   	ret    

f0104d84 <init_queue>:

//================================
// [1] Initialize the given queue:
//================================
void init_queue(struct Env_Queue* queue)
{
f0104d84:	55                   	push   %ebp
f0104d85:	89 e5                	mov    %esp,%ebp
	if(queue != NULL)
f0104d87:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104d8b:	74 1d                	je     f0104daa <init_queue+0x26>
	{
		LIST_INIT(queue);
f0104d8d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104d90:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0104d96:	8b 45 08             	mov    0x8(%ebp),%eax
f0104d99:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0104da0:	8b 45 08             	mov    0x8(%ebp),%eax
f0104da3:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
	}
}
f0104daa:	90                   	nop
f0104dab:	5d                   	pop    %ebp
f0104dac:	c3                   	ret    

f0104dad <queue_size>:

//================================
// [2] Get queue size:
//================================
int queue_size(struct Env_Queue* queue)
{
f0104dad:	55                   	push   %ebp
f0104dae:	89 e5                	mov    %esp,%ebp
	if(queue != NULL)
f0104db0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104db4:	74 08                	je     f0104dbe <queue_size+0x11>
	{
		return LIST_SIZE(queue);
f0104db6:	8b 45 08             	mov    0x8(%ebp),%eax
f0104db9:	8b 40 0c             	mov    0xc(%eax),%eax
f0104dbc:	eb 05                	jmp    f0104dc3 <queue_size+0x16>
	}
	else
	{
		return 0;
f0104dbe:	b8 00 00 00 00       	mov    $0x0,%eax
	}
}
f0104dc3:	5d                   	pop    %ebp
f0104dc4:	c3                   	ret    

f0104dc5 <enqueue>:

//====================================
// [3] Enqueue env in the given queue:
//====================================
void enqueue(struct Env_Queue* queue, struct Env* env)
{
f0104dc5:	55                   	push   %ebp
f0104dc6:	89 e5                	mov    %esp,%ebp
f0104dc8:	83 ec 08             	sub    $0x8,%esp
	assert(queue != NULL)	;
f0104dcb:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104dcf:	75 16                	jne    f0104de7 <enqueue+0x22>
f0104dd1:	68 44 27 13 f0       	push   $0xf0132744
f0104dd6:	68 52 27 13 f0       	push   $0xf0132752
f0104ddb:	6a 33                	push   $0x33
f0104ddd:	68 67 27 13 f0       	push   $0xf0132767
f0104de2:	e8 c9 b3 ff ff       	call   f01001b0 <_panic>
	if(env != NULL)
f0104de7:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0104deb:	74 66                	je     f0104e53 <enqueue+0x8e>
	{
		LIST_INSERT_HEAD(queue, env);
f0104ded:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0104df1:	75 14                	jne    f0104e07 <enqueue+0x42>
f0104df3:	83 ec 04             	sub    $0x4,%esp
f0104df6:	68 80 27 13 f0       	push   $0xf0132780
f0104dfb:	6a 36                	push   $0x36
f0104dfd:	68 67 27 13 f0       	push   $0xf0132767
f0104e02:	e8 a9 b3 ff ff       	call   f01001b0 <_panic>
f0104e07:	8b 45 08             	mov    0x8(%ebp),%eax
f0104e0a:	8b 10                	mov    (%eax),%edx
f0104e0c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104e0f:	89 50 44             	mov    %edx,0x44(%eax)
f0104e12:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104e15:	8b 40 44             	mov    0x44(%eax),%eax
f0104e18:	85 c0                	test   %eax,%eax
f0104e1a:	74 0d                	je     f0104e29 <enqueue+0x64>
f0104e1c:	8b 45 08             	mov    0x8(%ebp),%eax
f0104e1f:	8b 00                	mov    (%eax),%eax
f0104e21:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104e24:	89 50 48             	mov    %edx,0x48(%eax)
f0104e27:	eb 09                	jmp    f0104e32 <enqueue+0x6d>
f0104e29:	8b 45 08             	mov    0x8(%ebp),%eax
f0104e2c:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104e2f:	89 50 04             	mov    %edx,0x4(%eax)
f0104e32:	8b 45 08             	mov    0x8(%ebp),%eax
f0104e35:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104e38:	89 10                	mov    %edx,(%eax)
f0104e3a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104e3d:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0104e44:	8b 45 08             	mov    0x8(%ebp),%eax
f0104e47:	8b 40 0c             	mov    0xc(%eax),%eax
f0104e4a:	8d 50 01             	lea    0x1(%eax),%edx
f0104e4d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104e50:	89 50 0c             	mov    %edx,0xc(%eax)
	}
}
f0104e53:	90                   	nop
f0104e54:	c9                   	leave  
f0104e55:	c3                   	ret    

f0104e56 <dequeue>:

//======================================
// [4] Dequeue env from the given queue:
//======================================
struct Env* dequeue(struct Env_Queue* queue)
{
f0104e56:	55                   	push   %ebp
f0104e57:	89 e5                	mov    %esp,%ebp
f0104e59:	83 ec 18             	sub    $0x18,%esp
	if (queue == NULL) return NULL;
f0104e5c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104e60:	75 0a                	jne    f0104e6c <dequeue+0x16>
f0104e62:	b8 00 00 00 00       	mov    $0x0,%eax
f0104e67:	e9 a0 00 00 00       	jmp    f0104f0c <dequeue+0xb6>
	struct Env* envItem = LIST_LAST(queue);
f0104e6c:	8b 45 08             	mov    0x8(%ebp),%eax
f0104e6f:	8b 40 04             	mov    0x4(%eax),%eax
f0104e72:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (envItem != NULL)
f0104e75:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104e79:	0f 84 8a 00 00 00    	je     f0104f09 <dequeue+0xb3>
	{
		LIST_REMOVE(queue, envItem);
f0104e7f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104e83:	75 14                	jne    f0104e99 <dequeue+0x43>
f0104e85:	83 ec 04             	sub    $0x4,%esp
f0104e88:	68 a3 27 13 f0       	push   $0xf01327a3
f0104e8d:	6a 43                	push   $0x43
f0104e8f:	68 67 27 13 f0       	push   $0xf0132767
f0104e94:	e8 17 b3 ff ff       	call   f01001b0 <_panic>
f0104e99:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104e9c:	8b 40 44             	mov    0x44(%eax),%eax
f0104e9f:	85 c0                	test   %eax,%eax
f0104ea1:	74 11                	je     f0104eb4 <dequeue+0x5e>
f0104ea3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104ea6:	8b 40 44             	mov    0x44(%eax),%eax
f0104ea9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104eac:	8b 52 48             	mov    0x48(%edx),%edx
f0104eaf:	89 50 48             	mov    %edx,0x48(%eax)
f0104eb2:	eb 0c                	jmp    f0104ec0 <dequeue+0x6a>
f0104eb4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104eb7:	8b 50 48             	mov    0x48(%eax),%edx
f0104eba:	8b 45 08             	mov    0x8(%ebp),%eax
f0104ebd:	89 50 04             	mov    %edx,0x4(%eax)
f0104ec0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104ec3:	8b 40 48             	mov    0x48(%eax),%eax
f0104ec6:	85 c0                	test   %eax,%eax
f0104ec8:	74 11                	je     f0104edb <dequeue+0x85>
f0104eca:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104ecd:	8b 40 48             	mov    0x48(%eax),%eax
f0104ed0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104ed3:	8b 52 44             	mov    0x44(%edx),%edx
f0104ed6:	89 50 44             	mov    %edx,0x44(%eax)
f0104ed9:	eb 0b                	jmp    f0104ee6 <dequeue+0x90>
f0104edb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104ede:	8b 50 44             	mov    0x44(%eax),%edx
f0104ee1:	8b 45 08             	mov    0x8(%ebp),%eax
f0104ee4:	89 10                	mov    %edx,(%eax)
f0104ee6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104ee9:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0104ef0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104ef3:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0104efa:	8b 45 08             	mov    0x8(%ebp),%eax
f0104efd:	8b 40 0c             	mov    0xc(%eax),%eax
f0104f00:	8d 50 ff             	lea    -0x1(%eax),%edx
f0104f03:	8b 45 08             	mov    0x8(%ebp),%eax
f0104f06:	89 50 0c             	mov    %edx,0xc(%eax)
	}
	return envItem;
f0104f09:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0104f0c:	c9                   	leave  
f0104f0d:	c3                   	ret    

f0104f0e <remove_from_queue>:

//====================================
// [5] Remove env from the given queue:
//====================================
void remove_from_queue(struct Env_Queue* queue, struct Env* e)
{
f0104f0e:	55                   	push   %ebp
f0104f0f:	89 e5                	mov    %esp,%ebp
f0104f11:	83 ec 08             	sub    $0x8,%esp
	assert(queue != NULL)	;
f0104f14:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104f18:	75 16                	jne    f0104f30 <remove_from_queue+0x22>
f0104f1a:	68 44 27 13 f0       	push   $0xf0132744
f0104f1f:	68 52 27 13 f0       	push   $0xf0132752
f0104f24:	6a 4d                	push   $0x4d
f0104f26:	68 67 27 13 f0       	push   $0xf0132767
f0104f2b:	e8 80 b2 ff ff       	call   f01001b0 <_panic>

	if (e != NULL)
f0104f30:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0104f34:	0f 84 8a 00 00 00    	je     f0104fc4 <remove_from_queue+0xb6>
	{
		LIST_REMOVE(queue, e);
f0104f3a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0104f3e:	75 14                	jne    f0104f54 <remove_from_queue+0x46>
f0104f40:	83 ec 04             	sub    $0x4,%esp
f0104f43:	68 a3 27 13 f0       	push   $0xf01327a3
f0104f48:	6a 51                	push   $0x51
f0104f4a:	68 67 27 13 f0       	push   $0xf0132767
f0104f4f:	e8 5c b2 ff ff       	call   f01001b0 <_panic>
f0104f54:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104f57:	8b 40 44             	mov    0x44(%eax),%eax
f0104f5a:	85 c0                	test   %eax,%eax
f0104f5c:	74 11                	je     f0104f6f <remove_from_queue+0x61>
f0104f5e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104f61:	8b 40 44             	mov    0x44(%eax),%eax
f0104f64:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104f67:	8b 52 48             	mov    0x48(%edx),%edx
f0104f6a:	89 50 48             	mov    %edx,0x48(%eax)
f0104f6d:	eb 0c                	jmp    f0104f7b <remove_from_queue+0x6d>
f0104f6f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104f72:	8b 50 48             	mov    0x48(%eax),%edx
f0104f75:	8b 45 08             	mov    0x8(%ebp),%eax
f0104f78:	89 50 04             	mov    %edx,0x4(%eax)
f0104f7b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104f7e:	8b 40 48             	mov    0x48(%eax),%eax
f0104f81:	85 c0                	test   %eax,%eax
f0104f83:	74 11                	je     f0104f96 <remove_from_queue+0x88>
f0104f85:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104f88:	8b 40 48             	mov    0x48(%eax),%eax
f0104f8b:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104f8e:	8b 52 44             	mov    0x44(%edx),%edx
f0104f91:	89 50 44             	mov    %edx,0x44(%eax)
f0104f94:	eb 0b                	jmp    f0104fa1 <remove_from_queue+0x93>
f0104f96:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104f99:	8b 50 44             	mov    0x44(%eax),%edx
f0104f9c:	8b 45 08             	mov    0x8(%ebp),%eax
f0104f9f:	89 10                	mov    %edx,(%eax)
f0104fa1:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104fa4:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0104fab:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104fae:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0104fb5:	8b 45 08             	mov    0x8(%ebp),%eax
f0104fb8:	8b 40 0c             	mov    0xc(%eax),%eax
f0104fbb:	8d 50 ff             	lea    -0x1(%eax),%edx
f0104fbe:	8b 45 08             	mov    0x8(%ebp),%eax
f0104fc1:	89 50 0c             	mov    %edx,0xc(%eax)
	}
}
f0104fc4:	90                   	nop
f0104fc5:	c9                   	leave  
f0104fc6:	c3                   	ret    

f0104fc7 <find_env_in_queue>:

//========================================
// [6] Search by envID in the given queue:
//========================================
struct Env* find_env_in_queue(struct Env_Queue* queue, uint32 envID)
{
f0104fc7:	55                   	push   %ebp
f0104fc8:	89 e5                	mov    %esp,%ebp
f0104fca:	83 ec 10             	sub    $0x10,%esp
	if (queue == NULL) return NULL;
f0104fcd:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104fd1:	75 07                	jne    f0104fda <find_env_in_queue+0x13>
f0104fd3:	b8 00 00 00 00       	mov    $0x0,%eax
f0104fd8:	eb 58                	jmp    f0105032 <find_env_in_queue+0x6b>

	struct Env * ptr_env=NULL;
f0104fda:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	LIST_FOREACH(ptr_env, queue)
f0104fe1:	8b 45 08             	mov    0x8(%ebp),%eax
f0104fe4:	8b 00                	mov    (%eax),%eax
f0104fe6:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0104fe9:	eb 19                	jmp    f0105004 <find_env_in_queue+0x3d>
	{
		if(ptr_env->env_id == envID)
f0104feb:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0104fee:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104ff1:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0104ff4:	75 05                	jne    f0104ffb <find_env_in_queue+0x34>
		{
			return ptr_env;
f0104ff6:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0104ff9:	eb 37                	jmp    f0105032 <find_env_in_queue+0x6b>
struct Env* find_env_in_queue(struct Env_Queue* queue, uint32 envID)
{
	if (queue == NULL) return NULL;

	struct Env * ptr_env=NULL;
	LIST_FOREACH(ptr_env, queue)
f0104ffb:	8b 45 08             	mov    0x8(%ebp),%eax
f0104ffe:	8b 40 08             	mov    0x8(%eax),%eax
f0105001:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0105004:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0105008:	74 08                	je     f0105012 <find_env_in_queue+0x4b>
f010500a:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010500d:	8b 40 44             	mov    0x44(%eax),%eax
f0105010:	eb 05                	jmp    f0105017 <find_env_in_queue+0x50>
f0105012:	b8 00 00 00 00       	mov    $0x0,%eax
f0105017:	8b 55 08             	mov    0x8(%ebp),%edx
f010501a:	89 42 08             	mov    %eax,0x8(%edx)
f010501d:	8b 45 08             	mov    0x8(%ebp),%eax
f0105020:	8b 40 08             	mov    0x8(%eax),%eax
f0105023:	85 c0                	test   %eax,%eax
f0105025:	75 c4                	jne    f0104feb <find_env_in_queue+0x24>
f0105027:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f010502b:	75 be                	jne    f0104feb <find_env_in_queue+0x24>
		if(ptr_env->env_id == envID)
		{
			return ptr_env;
		}
	}
	return NULL;
f010502d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0105032:	c9                   	leave  
f0105033:	c3                   	ret    

f0105034 <sched_delete_ready_queues>:

//========================================
// [1] Delete all ready queues:
//========================================
void sched_delete_ready_queues()
{
f0105034:	55                   	push   %ebp
f0105035:	89 e5                	mov    %esp,%ebp
	if (env_ready_queues != NULL)
		kfree(env_ready_queues);
	if (quantums != NULL)
		kfree(quantums);
#endif
}
f0105037:	90                   	nop
f0105038:	5d                   	pop    %ebp
f0105039:	c3                   	ret    

f010503a <sched_insert_ready0>:

//=================================================
// [2] Insert the given Env in the 1st Ready Queue:
//=================================================
void sched_insert_ready0(struct Env* env)
{
f010503a:	55                   	push   %ebp
f010503b:	89 e5                	mov    %esp,%ebp
f010503d:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0105040:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0105044:	74 1d                	je     f0105063 <sched_insert_ready0+0x29>
	{
		env->env_status = ENV_READY ;
f0105046:	8b 45 08             	mov    0x8(%ebp),%eax
f0105049:	c7 40 54 01 00 00 00 	movl   $0x1,0x54(%eax)
		enqueue(&(env_ready_queues[0]), env);
f0105050:	83 ec 08             	sub    $0x8,%esp
f0105053:	ff 75 08             	pushl  0x8(%ebp)
f0105056:	68 60 4a 25 f0       	push   $0xf0254a60
f010505b:	e8 65 fd ff ff       	call   f0104dc5 <enqueue>
f0105060:	83 c4 10             	add    $0x10,%esp
	}
}
f0105063:	90                   	nop
f0105064:	c9                   	leave  
f0105065:	c3                   	ret    

f0105066 <sched_remove_ready>:

//=================================================
// [3] Remove the given Env from the Ready Queue(s):
//=================================================
void sched_remove_ready(struct Env* env)
{
f0105066:	55                   	push   %ebp
f0105067:	89 e5                	mov    %esp,%ebp
f0105069:	83 ec 18             	sub    $0x18,%esp
	if(env != NULL)
f010506c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0105070:	0f 84 02 01 00 00    	je     f0105178 <sched_remove_ready+0x112>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105076:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010507d:	e9 e5 00 00 00       	jmp    f0105167 <sched_remove_ready+0x101>
		{
			struct Env * ptr_env = find_env_in_queue(&(env_ready_queues[i]), env->env_id);
f0105082:	8b 45 08             	mov    0x8(%ebp),%eax
f0105085:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105088:	89 c2                	mov    %eax,%edx
f010508a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010508d:	c1 e0 04             	shl    $0x4,%eax
f0105090:	05 60 4a 25 f0       	add    $0xf0254a60,%eax
f0105095:	52                   	push   %edx
f0105096:	50                   	push   %eax
f0105097:	e8 2b ff ff ff       	call   f0104fc7 <find_env_in_queue>
f010509c:	83 c4 08             	add    $0x8,%esp
f010509f:	89 45 f0             	mov    %eax,-0x10(%ebp)
			if (ptr_env != NULL)
f01050a2:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01050a6:	0f 84 b8 00 00 00    	je     f0105164 <sched_remove_ready+0xfe>
			{
				LIST_REMOVE(&(env_ready_queues[i]), env);
f01050ac:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01050b0:	75 17                	jne    f01050c9 <sched_remove_ready+0x63>
f01050b2:	83 ec 04             	sub    $0x4,%esp
f01050b5:	68 a3 27 13 f0       	push   $0xf01327a3
f01050ba:	68 90 00 00 00       	push   $0x90
f01050bf:	68 67 27 13 f0       	push   $0xf0132767
f01050c4:	e8 e7 b0 ff ff       	call   f01001b0 <_panic>
f01050c9:	8b 45 08             	mov    0x8(%ebp),%eax
f01050cc:	8b 40 44             	mov    0x44(%eax),%eax
f01050cf:	85 c0                	test   %eax,%eax
f01050d1:	74 11                	je     f01050e4 <sched_remove_ready+0x7e>
f01050d3:	8b 45 08             	mov    0x8(%ebp),%eax
f01050d6:	8b 40 44             	mov    0x44(%eax),%eax
f01050d9:	8b 55 08             	mov    0x8(%ebp),%edx
f01050dc:	8b 52 48             	mov    0x48(%edx),%edx
f01050df:	89 50 48             	mov    %edx,0x48(%eax)
f01050e2:	eb 14                	jmp    f01050f8 <sched_remove_ready+0x92>
f01050e4:	8b 45 08             	mov    0x8(%ebp),%eax
f01050e7:	8b 40 48             	mov    0x48(%eax),%eax
f01050ea:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01050ed:	c1 e2 04             	shl    $0x4,%edx
f01050f0:	81 c2 64 4a 25 f0    	add    $0xf0254a64,%edx
f01050f6:	89 02                	mov    %eax,(%edx)
f01050f8:	8b 45 08             	mov    0x8(%ebp),%eax
f01050fb:	8b 40 48             	mov    0x48(%eax),%eax
f01050fe:	85 c0                	test   %eax,%eax
f0105100:	74 11                	je     f0105113 <sched_remove_ready+0xad>
f0105102:	8b 45 08             	mov    0x8(%ebp),%eax
f0105105:	8b 40 48             	mov    0x48(%eax),%eax
f0105108:	8b 55 08             	mov    0x8(%ebp),%edx
f010510b:	8b 52 44             	mov    0x44(%edx),%edx
f010510e:	89 50 44             	mov    %edx,0x44(%eax)
f0105111:	eb 14                	jmp    f0105127 <sched_remove_ready+0xc1>
f0105113:	8b 45 08             	mov    0x8(%ebp),%eax
f0105116:	8b 40 44             	mov    0x44(%eax),%eax
f0105119:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010511c:	c1 e2 04             	shl    $0x4,%edx
f010511f:	81 c2 60 4a 25 f0    	add    $0xf0254a60,%edx
f0105125:	89 02                	mov    %eax,(%edx)
f0105127:	8b 45 08             	mov    0x8(%ebp),%eax
f010512a:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0105131:	8b 45 08             	mov    0x8(%ebp),%eax
f0105134:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010513b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010513e:	c1 e0 04             	shl    $0x4,%eax
f0105141:	05 6c 4a 25 f0       	add    $0xf0254a6c,%eax
f0105146:	8b 00                	mov    (%eax),%eax
f0105148:	8d 50 ff             	lea    -0x1(%eax),%edx
f010514b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010514e:	c1 e0 04             	shl    $0x4,%eax
f0105151:	05 6c 4a 25 f0       	add    $0xf0254a6c,%eax
f0105156:	89 10                	mov    %edx,(%eax)
				env->env_status = ENV_UNKNOWN;
f0105158:	8b 45 08             	mov    0x8(%ebp),%eax
f010515b:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
				return;
f0105162:	eb 14                	jmp    f0105178 <sched_remove_ready+0x112>
//=================================================
void sched_remove_ready(struct Env* env)
{
	if(env != NULL)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105164:	ff 45 f4             	incl   -0xc(%ebp)
f0105167:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f010516c:	0f b6 c0             	movzbl %al,%eax
f010516f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0105172:	0f 8f 0a ff ff ff    	jg     f0105082 <sched_remove_ready+0x1c>
				env->env_status = ENV_UNKNOWN;
				return;
			}
		}
	}
}
f0105178:	c9                   	leave  
f0105179:	c3                   	ret    

f010517a <sched_insert_new>:

//=================================================
// [4] Insert the given Env in NEW Queue:
//=================================================
void sched_insert_new(struct Env* env)
{
f010517a:	55                   	push   %ebp
f010517b:	89 e5                	mov    %esp,%ebp
f010517d:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0105180:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0105184:	74 1d                	je     f01051a3 <sched_insert_new+0x29>
	{
		env->env_status = ENV_NEW ;
f0105186:	8b 45 08             	mov    0x8(%ebp),%eax
f0105189:	c7 40 54 04 00 00 00 	movl   $0x4,0x54(%eax)
		enqueue(&env_new_queue, env);
f0105190:	83 ec 08             	sub    $0x8,%esp
f0105193:	ff 75 08             	pushl  0x8(%ebp)
f0105196:	68 f8 cd 2b f0       	push   $0xf02bcdf8
f010519b:	e8 25 fc ff ff       	call   f0104dc5 <enqueue>
f01051a0:	83 c4 10             	add    $0x10,%esp
	}
}
f01051a3:	90                   	nop
f01051a4:	c9                   	leave  
f01051a5:	c3                   	ret    

f01051a6 <sched_remove_new>:

//=================================================
// [5] Remove the given Env from NEW Queue:
//=================================================
void sched_remove_new(struct Env* env)
{
f01051a6:	55                   	push   %ebp
f01051a7:	89 e5                	mov    %esp,%ebp
f01051a9:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f01051ac:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01051b0:	0f 84 92 00 00 00    	je     f0105248 <sched_remove_new+0xa2>
	{
		LIST_REMOVE(&env_new_queue, env) ;
f01051b6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01051ba:	75 17                	jne    f01051d3 <sched_remove_new+0x2d>
f01051bc:	83 ec 04             	sub    $0x4,%esp
f01051bf:	68 a3 27 13 f0       	push   $0xf01327a3
f01051c4:	68 ab 00 00 00       	push   $0xab
f01051c9:	68 67 27 13 f0       	push   $0xf0132767
f01051ce:	e8 dd af ff ff       	call   f01001b0 <_panic>
f01051d3:	8b 45 08             	mov    0x8(%ebp),%eax
f01051d6:	8b 40 44             	mov    0x44(%eax),%eax
f01051d9:	85 c0                	test   %eax,%eax
f01051db:	74 11                	je     f01051ee <sched_remove_new+0x48>
f01051dd:	8b 45 08             	mov    0x8(%ebp),%eax
f01051e0:	8b 40 44             	mov    0x44(%eax),%eax
f01051e3:	8b 55 08             	mov    0x8(%ebp),%edx
f01051e6:	8b 52 48             	mov    0x48(%edx),%edx
f01051e9:	89 50 48             	mov    %edx,0x48(%eax)
f01051ec:	eb 0b                	jmp    f01051f9 <sched_remove_new+0x53>
f01051ee:	8b 45 08             	mov    0x8(%ebp),%eax
f01051f1:	8b 40 48             	mov    0x48(%eax),%eax
f01051f4:	a3 fc cd 2b f0       	mov    %eax,0xf02bcdfc
f01051f9:	8b 45 08             	mov    0x8(%ebp),%eax
f01051fc:	8b 40 48             	mov    0x48(%eax),%eax
f01051ff:	85 c0                	test   %eax,%eax
f0105201:	74 11                	je     f0105214 <sched_remove_new+0x6e>
f0105203:	8b 45 08             	mov    0x8(%ebp),%eax
f0105206:	8b 40 48             	mov    0x48(%eax),%eax
f0105209:	8b 55 08             	mov    0x8(%ebp),%edx
f010520c:	8b 52 44             	mov    0x44(%edx),%edx
f010520f:	89 50 44             	mov    %edx,0x44(%eax)
f0105212:	eb 0b                	jmp    f010521f <sched_remove_new+0x79>
f0105214:	8b 45 08             	mov    0x8(%ebp),%eax
f0105217:	8b 40 44             	mov    0x44(%eax),%eax
f010521a:	a3 f8 cd 2b f0       	mov    %eax,0xf02bcdf8
f010521f:	8b 45 08             	mov    0x8(%ebp),%eax
f0105222:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0105229:	8b 45 08             	mov    0x8(%ebp),%eax
f010522c:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0105233:	a1 04 ce 2b f0       	mov    0xf02bce04,%eax
f0105238:	48                   	dec    %eax
f0105239:	a3 04 ce 2b f0       	mov    %eax,0xf02bce04
		env->env_status = ENV_UNKNOWN;
f010523e:	8b 45 08             	mov    0x8(%ebp),%eax
f0105241:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
	}
}
f0105248:	90                   	nop
f0105249:	c9                   	leave  
f010524a:	c3                   	ret    

f010524b <sched_insert_exit>:

//=================================================
// [6] Insert the given Env in EXIT Queue:
//=================================================
void sched_insert_exit(struct Env* env)
{
f010524b:	55                   	push   %ebp
f010524c:	89 e5                	mov    %esp,%ebp
f010524e:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0105251:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0105255:	74 34                	je     f010528b <sched_insert_exit+0x40>
	{
		if(isBufferingEnabled()) {cleanup_buffers(env);}
f0105257:	e8 22 8b 00 00       	call   f010dd7e <isBufferingEnabled>
f010525c:	84 c0                	test   %al,%al
f010525e:	74 0e                	je     f010526e <sched_insert_exit+0x23>
f0105260:	83 ec 0c             	sub    $0xc,%esp
f0105263:	ff 75 08             	pushl  0x8(%ebp)
f0105266:	e8 a9 5f 00 00       	call   f010b214 <cleanup_buffers>
f010526b:	83 c4 10             	add    $0x10,%esp
		env->env_status = ENV_EXIT ;
f010526e:	8b 45 08             	mov    0x8(%ebp),%eax
f0105271:	c7 40 54 05 00 00 00 	movl   $0x5,0x54(%eax)
		enqueue(&env_exit_queue, env);
f0105278:	83 ec 08             	sub    $0x8,%esp
f010527b:	ff 75 08             	pushl  0x8(%ebp)
f010527e:	68 c4 a9 2b f0       	push   $0xf02ba9c4
f0105283:	e8 3d fb ff ff       	call   f0104dc5 <enqueue>
f0105288:	83 c4 10             	add    $0x10,%esp
	}
}
f010528b:	90                   	nop
f010528c:	c9                   	leave  
f010528d:	c3                   	ret    

f010528e <sched_remove_exit>:
//=================================================
// [7] Remove the given Env from EXIT Queue:
//=================================================
void sched_remove_exit(struct Env* env)
{
f010528e:	55                   	push   %ebp
f010528f:	89 e5                	mov    %esp,%ebp
f0105291:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0105294:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0105298:	0f 84 92 00 00 00    	je     f0105330 <sched_remove_exit+0xa2>
	{
		LIST_REMOVE(&env_exit_queue, env) ;
f010529e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01052a2:	75 17                	jne    f01052bb <sched_remove_exit+0x2d>
f01052a4:	83 ec 04             	sub    $0x4,%esp
f01052a7:	68 a3 27 13 f0       	push   $0xf01327a3
f01052ac:	68 c3 00 00 00       	push   $0xc3
f01052b1:	68 67 27 13 f0       	push   $0xf0132767
f01052b6:	e8 f5 ae ff ff       	call   f01001b0 <_panic>
f01052bb:	8b 45 08             	mov    0x8(%ebp),%eax
f01052be:	8b 40 44             	mov    0x44(%eax),%eax
f01052c1:	85 c0                	test   %eax,%eax
f01052c3:	74 11                	je     f01052d6 <sched_remove_exit+0x48>
f01052c5:	8b 45 08             	mov    0x8(%ebp),%eax
f01052c8:	8b 40 44             	mov    0x44(%eax),%eax
f01052cb:	8b 55 08             	mov    0x8(%ebp),%edx
f01052ce:	8b 52 48             	mov    0x48(%edx),%edx
f01052d1:	89 50 48             	mov    %edx,0x48(%eax)
f01052d4:	eb 0b                	jmp    f01052e1 <sched_remove_exit+0x53>
f01052d6:	8b 45 08             	mov    0x8(%ebp),%eax
f01052d9:	8b 40 48             	mov    0x48(%eax),%eax
f01052dc:	a3 c8 a9 2b f0       	mov    %eax,0xf02ba9c8
f01052e1:	8b 45 08             	mov    0x8(%ebp),%eax
f01052e4:	8b 40 48             	mov    0x48(%eax),%eax
f01052e7:	85 c0                	test   %eax,%eax
f01052e9:	74 11                	je     f01052fc <sched_remove_exit+0x6e>
f01052eb:	8b 45 08             	mov    0x8(%ebp),%eax
f01052ee:	8b 40 48             	mov    0x48(%eax),%eax
f01052f1:	8b 55 08             	mov    0x8(%ebp),%edx
f01052f4:	8b 52 44             	mov    0x44(%edx),%edx
f01052f7:	89 50 44             	mov    %edx,0x44(%eax)
f01052fa:	eb 0b                	jmp    f0105307 <sched_remove_exit+0x79>
f01052fc:	8b 45 08             	mov    0x8(%ebp),%eax
f01052ff:	8b 40 44             	mov    0x44(%eax),%eax
f0105302:	a3 c4 a9 2b f0       	mov    %eax,0xf02ba9c4
f0105307:	8b 45 08             	mov    0x8(%ebp),%eax
f010530a:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0105311:	8b 45 08             	mov    0x8(%ebp),%eax
f0105314:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010531b:	a1 d0 a9 2b f0       	mov    0xf02ba9d0,%eax
f0105320:	48                   	dec    %eax
f0105321:	a3 d0 a9 2b f0       	mov    %eax,0xf02ba9d0
		env->env_status = ENV_UNKNOWN;
f0105326:	8b 45 08             	mov    0x8(%ebp),%eax
f0105329:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
	}
}
f0105330:	90                   	nop
f0105331:	c9                   	leave  
f0105332:	c3                   	ret    

f0105333 <sched_new_env>:

//=================================================
// [8] Sched the given Env in NEW Queue:
//=================================================
void sched_new_env(struct Env* e)
{
f0105333:	55                   	push   %ebp
f0105334:	89 e5                	mov    %esp,%ebp
f0105336:	83 ec 08             	sub    $0x8,%esp
	//add the given env to the scheduler NEW queue
	if (e!=NULL)
f0105339:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010533d:	74 0e                	je     f010534d <sched_new_env+0x1a>
	{
		sched_insert_new(e);
f010533f:	83 ec 0c             	sub    $0xc,%esp
f0105342:	ff 75 08             	pushl  0x8(%ebp)
f0105345:	e8 30 fe ff ff       	call   f010517a <sched_insert_new>
f010534a:	83 c4 10             	add    $0x10,%esp
	}
}
f010534d:	90                   	nop
f010534e:	c9                   	leave  
f010534f:	c3                   	ret    

f0105350 <sched_run_env>:

//=================================================
// [9] Run the given EnvID:
//=================================================
void sched_run_env(uint32 envId)
{
f0105350:	55                   	push   %ebp
f0105351:	89 e5                	mov    %esp,%ebp
f0105353:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f0105356:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	LIST_FOREACH(ptr_env, &env_new_queue)
f010535d:	a1 f8 cd 2b f0       	mov    0xf02bcdf8,%eax
f0105362:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105365:	eb 3d                	jmp    f01053a4 <sched_run_env+0x54>
	{
		if(ptr_env->env_id == envId)
f0105367:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010536a:	8b 40 4c             	mov    0x4c(%eax),%eax
f010536d:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105370:	75 2a                	jne    f010539c <sched_run_env+0x4c>
		{
			sched_remove_new(ptr_env);
f0105372:	83 ec 0c             	sub    $0xc,%esp
f0105375:	ff 75 f4             	pushl  -0xc(%ebp)
f0105378:	e8 29 fe ff ff       	call   f01051a6 <sched_remove_new>
f010537d:	83 c4 10             	add    $0x10,%esp
			sched_insert_ready0(ptr_env);
f0105380:	83 ec 0c             	sub    $0xc,%esp
f0105383:	ff 75 f4             	pushl  -0xc(%ebp)
f0105386:	e8 af fc ff ff       	call   f010503a <sched_insert_ready0>
f010538b:	83 c4 10             	add    $0x10,%esp

			/*2015*///if scheduler not run yet, then invoke it!
			if (scheduler_status == SCH_STOPPED)
f010538e:	a1 14 ce 2b f0       	mov    0xf02bce14,%eax
f0105393:	85 c0                	test   %eax,%eax
f0105395:	75 36                	jne    f01053cd <sched_run_env+0x7d>
			{
				fos_scheduler();
f0105397:	e8 7d 0e 00 00       	call   f0106219 <fos_scheduler>
// [9] Run the given EnvID:
//=================================================
void sched_run_env(uint32 envId)
{
	struct Env* ptr_env=NULL;
	LIST_FOREACH(ptr_env, &env_new_queue)
f010539c:	a1 00 ce 2b f0       	mov    0xf02bce00,%eax
f01053a1:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01053a4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01053a8:	74 08                	je     f01053b2 <sched_run_env+0x62>
f01053aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01053ad:	8b 40 44             	mov    0x44(%eax),%eax
f01053b0:	eb 05                	jmp    f01053b7 <sched_run_env+0x67>
f01053b2:	b8 00 00 00 00       	mov    $0x0,%eax
f01053b7:	a3 00 ce 2b f0       	mov    %eax,0xf02bce00
f01053bc:	a1 00 ce 2b f0       	mov    0xf02bce00,%eax
f01053c1:	85 c0                	test   %eax,%eax
f01053c3:	75 a2                	jne    f0105367 <sched_run_env+0x17>
f01053c5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01053c9:	75 9c                	jne    f0105367 <sched_run_env+0x17>
	//	LIST_FOREACH(ptr_env, &env_ready_queue)
	//	{
	//		cprintf("%s - %d\n", ptr_env->prog_name, ptr_env->env_id);
	//	}

}
f01053cb:	eb 01                	jmp    f01053ce <sched_run_env+0x7e>
			/*2015*///if scheduler not run yet, then invoke it!
			if (scheduler_status == SCH_STOPPED)
			{
				fos_scheduler();
			}
			break;
f01053cd:	90                   	nop
	//	LIST_FOREACH(ptr_env, &env_ready_queue)
	//	{
	//		cprintf("%s - %d\n", ptr_env->prog_name, ptr_env->env_id);
	//	}

}
f01053ce:	90                   	nop
f01053cf:	c9                   	leave  
f01053d0:	c3                   	ret    

f01053d1 <sched_exit_env>:

//=================================================
// [10] Exit the given EnvID:
//=================================================
void sched_exit_env(uint32 envId)
{
f01053d1:	55                   	push   %ebp
f01053d2:	89 e5                	mov    %esp,%ebp
f01053d4:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f01053d7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int found = 0;
f01053de:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	if (!found)
f01053e5:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01053e9:	75 59                	jne    f0105444 <sched_exit_env+0x73>
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f01053eb:	a1 f8 cd 2b f0       	mov    0xf02bcdf8,%eax
f01053f0:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01053f3:	eb 28                	jmp    f010541d <sched_exit_env+0x4c>
		{
			if(ptr_env->env_id == envId)
f01053f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01053f8:	8b 40 4c             	mov    0x4c(%eax),%eax
f01053fb:	3b 45 08             	cmp    0x8(%ebp),%eax
f01053fe:	75 15                	jne    f0105415 <sched_exit_env+0x44>
			{
				sched_remove_new(ptr_env);
f0105400:	83 ec 0c             	sub    $0xc,%esp
f0105403:	ff 75 f4             	pushl  -0xc(%ebp)
f0105406:	e8 9b fd ff ff       	call   f01051a6 <sched_remove_new>
f010540b:	83 c4 10             	add    $0x10,%esp
				found = 1;
f010540e:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
{
	struct Env* ptr_env=NULL;
	int found = 0;
	if (!found)
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f0105415:	a1 00 ce 2b f0       	mov    0xf02bce00,%eax
f010541a:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010541d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105421:	74 08                	je     f010542b <sched_exit_env+0x5a>
f0105423:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105426:	8b 40 44             	mov    0x44(%eax),%eax
f0105429:	eb 05                	jmp    f0105430 <sched_exit_env+0x5f>
f010542b:	b8 00 00 00 00       	mov    $0x0,%eax
f0105430:	a3 00 ce 2b f0       	mov    %eax,0xf02bce00
f0105435:	a1 00 ce 2b f0       	mov    0xf02bce00,%eax
f010543a:	85 c0                	test   %eax,%eax
f010543c:	75 b7                	jne    f01053f5 <sched_exit_env+0x24>
f010543e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105442:	75 b1                	jne    f01053f5 <sched_exit_env+0x24>
				found = 1;
				//			return;
			}
		}
	}
	if (!found)
f0105444:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105448:	0f 85 6e 01 00 00    	jne    f01055bc <sched_exit_env+0x1eb>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f010544e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0105455:	e9 4e 01 00 00       	jmp    f01055a8 <sched_exit_env+0x1d7>
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
f010545a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010545d:	c1 e0 04             	shl    $0x4,%eax
f0105460:	05 60 4a 25 f0       	add    $0xf0254a60,%eax
f0105465:	8b 00                	mov    (%eax),%eax
f0105467:	85 c0                	test   %eax,%eax
f0105469:	0f 84 30 01 00 00    	je     f010559f <sched_exit_env+0x1ce>
			{
				ptr_env=NULL;
f010546f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105476:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105479:	c1 e0 04             	shl    $0x4,%eax
f010547c:	05 60 4a 25 f0       	add    $0xf0254a60,%eax
f0105481:	8b 00                	mov    (%eax),%eax
f0105483:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105486:	e9 d4 00 00 00       	jmp    f010555f <sched_exit_env+0x18e>
				{
					if(ptr_env->env_id == envId)
f010548b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010548e:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105491:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105494:	0f 85 b5 00 00 00    	jne    f010554f <sched_exit_env+0x17e>
					{
						LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f010549a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010549e:	75 17                	jne    f01054b7 <sched_exit_env+0xe6>
f01054a0:	83 ec 04             	sub    $0x4,%esp
f01054a3:	68 a3 27 13 f0       	push   $0xf01327a3
f01054a8:	68 10 01 00 00       	push   $0x110
f01054ad:	68 67 27 13 f0       	push   $0xf0132767
f01054b2:	e8 f9 ac ff ff       	call   f01001b0 <_panic>
f01054b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01054ba:	8b 40 44             	mov    0x44(%eax),%eax
f01054bd:	85 c0                	test   %eax,%eax
f01054bf:	74 11                	je     f01054d2 <sched_exit_env+0x101>
f01054c1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01054c4:	8b 40 44             	mov    0x44(%eax),%eax
f01054c7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01054ca:	8b 52 48             	mov    0x48(%edx),%edx
f01054cd:	89 50 48             	mov    %edx,0x48(%eax)
f01054d0:	eb 14                	jmp    f01054e6 <sched_exit_env+0x115>
f01054d2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01054d5:	8b 40 48             	mov    0x48(%eax),%eax
f01054d8:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01054db:	c1 e2 04             	shl    $0x4,%edx
f01054de:	81 c2 64 4a 25 f0    	add    $0xf0254a64,%edx
f01054e4:	89 02                	mov    %eax,(%edx)
f01054e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01054e9:	8b 40 48             	mov    0x48(%eax),%eax
f01054ec:	85 c0                	test   %eax,%eax
f01054ee:	74 11                	je     f0105501 <sched_exit_env+0x130>
f01054f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01054f3:	8b 40 48             	mov    0x48(%eax),%eax
f01054f6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01054f9:	8b 52 44             	mov    0x44(%edx),%edx
f01054fc:	89 50 44             	mov    %edx,0x44(%eax)
f01054ff:	eb 14                	jmp    f0105515 <sched_exit_env+0x144>
f0105501:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105504:	8b 40 44             	mov    0x44(%eax),%eax
f0105507:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010550a:	c1 e2 04             	shl    $0x4,%edx
f010550d:	81 c2 60 4a 25 f0    	add    $0xf0254a60,%edx
f0105513:	89 02                	mov    %eax,(%edx)
f0105515:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105518:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f010551f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105522:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0105529:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010552c:	c1 e0 04             	shl    $0x4,%eax
f010552f:	05 6c 4a 25 f0       	add    $0xf0254a6c,%eax
f0105534:	8b 00                	mov    (%eax),%eax
f0105536:	8d 50 ff             	lea    -0x1(%eax),%edx
f0105539:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010553c:	c1 e0 04             	shl    $0x4,%eax
f010553f:	05 6c 4a 25 f0       	add    $0xf0254a6c,%eax
f0105544:	89 10                	mov    %edx,(%eax)
						found = 1;
f0105546:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
						break;
f010554d:	eb 50                	jmp    f010559f <sched_exit_env+0x1ce>
		for (int i = 0 ; i < num_of_ready_queues ; i++)
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
			{
				ptr_env=NULL;
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f010554f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105552:	c1 e0 04             	shl    $0x4,%eax
f0105555:	05 68 4a 25 f0       	add    $0xf0254a68,%eax
f010555a:	8b 00                	mov    (%eax),%eax
f010555c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010555f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105563:	74 08                	je     f010556d <sched_exit_env+0x19c>
f0105565:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105568:	8b 40 44             	mov    0x44(%eax),%eax
f010556b:	eb 05                	jmp    f0105572 <sched_exit_env+0x1a1>
f010556d:	b8 00 00 00 00       	mov    $0x0,%eax
f0105572:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105575:	c1 e2 04             	shl    $0x4,%edx
f0105578:	81 c2 68 4a 25 f0    	add    $0xf0254a68,%edx
f010557e:	89 02                	mov    %eax,(%edx)
f0105580:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105583:	c1 e0 04             	shl    $0x4,%eax
f0105586:	05 68 4a 25 f0       	add    $0xf0254a68,%eax
f010558b:	8b 00                	mov    (%eax),%eax
f010558d:	85 c0                	test   %eax,%eax
f010558f:	0f 85 f6 fe ff ff    	jne    f010548b <sched_exit_env+0xba>
f0105595:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105599:	0f 85 ec fe ff ff    	jne    f010548b <sched_exit_env+0xba>
						found = 1;
						break;
					}
				}
			}
			if (found)
f010559f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01055a3:	75 16                	jne    f01055bb <sched_exit_env+0x1ea>
			}
		}
	}
	if (!found)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f01055a5:	ff 45 ec             	incl   -0x14(%ebp)
f01055a8:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f01055ad:	0f b6 c0             	movzbl %al,%eax
f01055b0:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01055b3:	0f 8f a1 fe ff ff    	jg     f010545a <sched_exit_env+0x89>
f01055b9:	eb 01                	jmp    f01055bc <sched_exit_env+0x1eb>
						break;
					}
				}
			}
			if (found)
				break;
f01055bb:	90                   	nop
		}
	}
	if (!found)
f01055bc:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01055c0:	75 1c                	jne    f01055de <sched_exit_env+0x20d>
	{
		if (curenv->env_id == envId)
f01055c2:	a1 74 41 25 f0       	mov    0xf0254174,%eax
f01055c7:	8b 40 4c             	mov    0x4c(%eax),%eax
f01055ca:	3b 45 08             	cmp    0x8(%ebp),%eax
f01055cd:	75 0f                	jne    f01055de <sched_exit_env+0x20d>
		{
			ptr_env = curenv;
f01055cf:	a1 74 41 25 f0       	mov    0xf0254174,%eax
f01055d4:	89 45 f4             	mov    %eax,-0xc(%ebp)
			found = 1;
f01055d7:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
		}
	}

	if (found)
f01055de:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01055e2:	74 2a                	je     f010560e <sched_exit_env+0x23d>
	{
		sched_insert_exit(ptr_env);
f01055e4:	83 ec 0c             	sub    $0xc,%esp
f01055e7:	ff 75 f4             	pushl  -0xc(%ebp)
f01055ea:	e8 5c fc ff ff       	call   f010524b <sched_insert_exit>
f01055ef:	83 c4 10             	add    $0x10,%esp

		//If it's the curenv, then reinvoke the scheduler as there's no meaning to return back to an exited env
		if (curenv->env_id == envId)
f01055f2:	a1 74 41 25 f0       	mov    0xf0254174,%eax
f01055f7:	8b 40 4c             	mov    0x4c(%eax),%eax
f01055fa:	3b 45 08             	cmp    0x8(%ebp),%eax
f01055fd:	75 0f                	jne    f010560e <sched_exit_env+0x23d>
		{
			curenv = NULL;
f01055ff:	c7 05 74 41 25 f0 00 	movl   $0x0,0xf0254174
f0105606:	00 00 00 
			fos_scheduler();
f0105609:	e8 0b 0c 00 00       	call   f0106219 <fos_scheduler>
		}
	}
}
f010560e:	90                   	nop
f010560f:	c9                   	leave  
f0105610:	c3                   	ret    

f0105611 <sched_kill_env>:
/*2015*/
//=================================================
// [11] KILL the given EnvID:
//=================================================
void sched_kill_env(uint32 envId)
{
f0105611:	55                   	push   %ebp
f0105612:	89 e5                	mov    %esp,%ebp
f0105614:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f0105617:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int found = 0;
f010561e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	if (!found)
f0105625:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105629:	0f 85 9d 00 00 00    	jne    f01056cc <sched_kill_env+0xbb>
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f010562f:	a1 f8 cd 2b f0       	mov    0xf02bcdf8,%eax
f0105634:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105637:	eb 64                	jmp    f010569d <sched_kill_env+0x8c>
															{
			if(ptr_env->env_id == envId)
f0105639:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010563c:	8b 40 4c             	mov    0x4c(%eax),%eax
f010563f:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105642:	75 51                	jne    f0105695 <sched_kill_env+0x84>
			{
				cprintf("killing[%d] %s from the NEW queue...", ptr_env->env_id, ptr_env->prog_name);
f0105644:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105647:	8d 50 5c             	lea    0x5c(%eax),%edx
f010564a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010564d:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105650:	83 ec 04             	sub    $0x4,%esp
f0105653:	52                   	push   %edx
f0105654:	50                   	push   %eax
f0105655:	68 c4 27 13 f0       	push   $0xf01327c4
f010565a:	e8 d2 b7 ff ff       	call   f0100e31 <cprintf>
f010565f:	83 c4 10             	add    $0x10,%esp
				sched_remove_new(ptr_env);
f0105662:	83 ec 0c             	sub    $0xc,%esp
f0105665:	ff 75 f4             	pushl  -0xc(%ebp)
f0105668:	e8 39 fb ff ff       	call   f01051a6 <sched_remove_new>
f010566d:	83 c4 10             	add    $0x10,%esp
				env_free(ptr_env);
f0105670:	83 ec 0c             	sub    $0xc,%esp
f0105673:	ff 75 f4             	pushl  -0xc(%ebp)
f0105676:	e8 a5 47 00 00       	call   f0109e20 <env_free>
f010567b:	83 c4 10             	add    $0x10,%esp
				cprintf("DONE\n");
f010567e:	83 ec 0c             	sub    $0xc,%esp
f0105681:	68 e9 27 13 f0       	push   $0xf01327e9
f0105686:	e8 a6 b7 ff ff       	call   f0100e31 <cprintf>
f010568b:	83 c4 10             	add    $0x10,%esp
				found = 1;
f010568e:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
{
	struct Env* ptr_env=NULL;
	int found = 0;
	if (!found)
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f0105695:	a1 00 ce 2b f0       	mov    0xf02bce00,%eax
f010569a:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010569d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01056a1:	74 08                	je     f01056ab <sched_kill_env+0x9a>
f01056a3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01056a6:	8b 40 44             	mov    0x44(%eax),%eax
f01056a9:	eb 05                	jmp    f01056b0 <sched_kill_env+0x9f>
f01056ab:	b8 00 00 00 00       	mov    $0x0,%eax
f01056b0:	a3 00 ce 2b f0       	mov    %eax,0xf02bce00
f01056b5:	a1 00 ce 2b f0       	mov    0xf02bce00,%eax
f01056ba:	85 c0                	test   %eax,%eax
f01056bc:	0f 85 77 ff ff ff    	jne    f0105639 <sched_kill_env+0x28>
f01056c2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01056c6:	0f 85 6d ff ff ff    	jne    f0105639 <sched_kill_env+0x28>
				found = 1;
				//			return;
			}
															}
	}
	if (!found)
f01056cc:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01056d0:	0f 85 aa 01 00 00    	jne    f0105880 <sched_kill_env+0x26f>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f01056d6:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f01056dd:	e9 8a 01 00 00       	jmp    f010586c <sched_kill_env+0x25b>
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
f01056e2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01056e5:	c1 e0 04             	shl    $0x4,%eax
f01056e8:	05 60 4a 25 f0       	add    $0xf0254a60,%eax
f01056ed:	8b 00                	mov    (%eax),%eax
f01056ef:	85 c0                	test   %eax,%eax
f01056f1:	0f 84 6c 01 00 00    	je     f0105863 <sched_kill_env+0x252>
			{
				ptr_env=NULL;
f01056f7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f01056fe:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105701:	c1 e0 04             	shl    $0x4,%eax
f0105704:	05 60 4a 25 f0       	add    $0xf0254a60,%eax
f0105709:	8b 00                	mov    (%eax),%eax
f010570b:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010570e:	e9 10 01 00 00       	jmp    f0105823 <sched_kill_env+0x212>
				{
					if(ptr_env->env_id == envId)
f0105713:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105716:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105719:	3b 45 08             	cmp    0x8(%ebp),%eax
f010571c:	0f 85 f1 00 00 00    	jne    f0105813 <sched_kill_env+0x202>
					{
						cprintf("killing[%d] %s from the READY queue #%d...", ptr_env->env_id, ptr_env->prog_name, i);
f0105722:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105725:	8d 50 5c             	lea    0x5c(%eax),%edx
f0105728:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010572b:	8b 40 4c             	mov    0x4c(%eax),%eax
f010572e:	ff 75 ec             	pushl  -0x14(%ebp)
f0105731:	52                   	push   %edx
f0105732:	50                   	push   %eax
f0105733:	68 f0 27 13 f0       	push   $0xf01327f0
f0105738:	e8 f4 b6 ff ff       	call   f0100e31 <cprintf>
f010573d:	83 c4 10             	add    $0x10,%esp
						LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f0105740:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105744:	75 17                	jne    f010575d <sched_kill_env+0x14c>
f0105746:	83 ec 04             	sub    $0x4,%esp
f0105749:	68 a3 27 13 f0       	push   $0xf01327a3
f010574e:	68 54 01 00 00       	push   $0x154
f0105753:	68 67 27 13 f0       	push   $0xf0132767
f0105758:	e8 53 aa ff ff       	call   f01001b0 <_panic>
f010575d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105760:	8b 40 44             	mov    0x44(%eax),%eax
f0105763:	85 c0                	test   %eax,%eax
f0105765:	74 11                	je     f0105778 <sched_kill_env+0x167>
f0105767:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010576a:	8b 40 44             	mov    0x44(%eax),%eax
f010576d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105770:	8b 52 48             	mov    0x48(%edx),%edx
f0105773:	89 50 48             	mov    %edx,0x48(%eax)
f0105776:	eb 14                	jmp    f010578c <sched_kill_env+0x17b>
f0105778:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010577b:	8b 40 48             	mov    0x48(%eax),%eax
f010577e:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105781:	c1 e2 04             	shl    $0x4,%edx
f0105784:	81 c2 64 4a 25 f0    	add    $0xf0254a64,%edx
f010578a:	89 02                	mov    %eax,(%edx)
f010578c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010578f:	8b 40 48             	mov    0x48(%eax),%eax
f0105792:	85 c0                	test   %eax,%eax
f0105794:	74 11                	je     f01057a7 <sched_kill_env+0x196>
f0105796:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105799:	8b 40 48             	mov    0x48(%eax),%eax
f010579c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010579f:	8b 52 44             	mov    0x44(%edx),%edx
f01057a2:	89 50 44             	mov    %edx,0x44(%eax)
f01057a5:	eb 14                	jmp    f01057bb <sched_kill_env+0x1aa>
f01057a7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01057aa:	8b 40 44             	mov    0x44(%eax),%eax
f01057ad:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01057b0:	c1 e2 04             	shl    $0x4,%edx
f01057b3:	81 c2 60 4a 25 f0    	add    $0xf0254a60,%edx
f01057b9:	89 02                	mov    %eax,(%edx)
f01057bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01057be:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f01057c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01057c8:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f01057cf:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01057d2:	c1 e0 04             	shl    $0x4,%eax
f01057d5:	05 6c 4a 25 f0       	add    $0xf0254a6c,%eax
f01057da:	8b 00                	mov    (%eax),%eax
f01057dc:	8d 50 ff             	lea    -0x1(%eax),%edx
f01057df:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01057e2:	c1 e0 04             	shl    $0x4,%eax
f01057e5:	05 6c 4a 25 f0       	add    $0xf0254a6c,%eax
f01057ea:	89 10                	mov    %edx,(%eax)
						env_free(ptr_env);
f01057ec:	83 ec 0c             	sub    $0xc,%esp
f01057ef:	ff 75 f4             	pushl  -0xc(%ebp)
f01057f2:	e8 29 46 00 00       	call   f0109e20 <env_free>
f01057f7:	83 c4 10             	add    $0x10,%esp
						cprintf("DONE\n");
f01057fa:	83 ec 0c             	sub    $0xc,%esp
f01057fd:	68 e9 27 13 f0       	push   $0xf01327e9
f0105802:	e8 2a b6 ff ff       	call   f0100e31 <cprintf>
f0105807:	83 c4 10             	add    $0x10,%esp
						found = 1;
f010580a:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
						break;
f0105811:	eb 50                	jmp    f0105863 <sched_kill_env+0x252>
		for (int i = 0 ; i < num_of_ready_queues ; i++)
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
			{
				ptr_env=NULL;
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105813:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105816:	c1 e0 04             	shl    $0x4,%eax
f0105819:	05 68 4a 25 f0       	add    $0xf0254a68,%eax
f010581e:	8b 00                	mov    (%eax),%eax
f0105820:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105823:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105827:	74 08                	je     f0105831 <sched_kill_env+0x220>
f0105829:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010582c:	8b 40 44             	mov    0x44(%eax),%eax
f010582f:	eb 05                	jmp    f0105836 <sched_kill_env+0x225>
f0105831:	b8 00 00 00 00       	mov    $0x0,%eax
f0105836:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105839:	c1 e2 04             	shl    $0x4,%edx
f010583c:	81 c2 68 4a 25 f0    	add    $0xf0254a68,%edx
f0105842:	89 02                	mov    %eax,(%edx)
f0105844:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105847:	c1 e0 04             	shl    $0x4,%eax
f010584a:	05 68 4a 25 f0       	add    $0xf0254a68,%eax
f010584f:	8b 00                	mov    (%eax),%eax
f0105851:	85 c0                	test   %eax,%eax
f0105853:	0f 85 ba fe ff ff    	jne    f0105713 <sched_kill_env+0x102>
f0105859:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010585d:	0f 85 b0 fe ff ff    	jne    f0105713 <sched_kill_env+0x102>
						break;
						//return;
					}
				}
			}
			if (found)
f0105863:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105867:	75 16                	jne    f010587f <sched_kill_env+0x26e>
			}
															}
	}
	if (!found)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105869:	ff 45 ec             	incl   -0x14(%ebp)
f010586c:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0105871:	0f b6 c0             	movzbl %al,%eax
f0105874:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0105877:	0f 8f 65 fe ff ff    	jg     f01056e2 <sched_kill_env+0xd1>
f010587d:	eb 01                	jmp    f0105880 <sched_kill_env+0x26f>
						//return;
					}
				}
			}
			if (found)
				break;
f010587f:	90                   	nop
		}
	}
	if (!found)
f0105880:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105884:	0f 85 a4 00 00 00    	jne    f010592e <sched_kill_env+0x31d>
	{
		ptr_env=NULL;
f010588a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0105891:	a1 c4 a9 2b f0       	mov    0xf02ba9c4,%eax
f0105896:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105899:	eb 64                	jmp    f01058ff <sched_kill_env+0x2ee>
		{
			if(ptr_env->env_id == envId)
f010589b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010589e:	8b 40 4c             	mov    0x4c(%eax),%eax
f01058a1:	3b 45 08             	cmp    0x8(%ebp),%eax
f01058a4:	75 51                	jne    f01058f7 <sched_kill_env+0x2e6>
			{
				cprintf("killing[%d] %s from the EXIT queue...", ptr_env->env_id, ptr_env->prog_name);
f01058a6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01058a9:	8d 50 5c             	lea    0x5c(%eax),%edx
f01058ac:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01058af:	8b 40 4c             	mov    0x4c(%eax),%eax
f01058b2:	83 ec 04             	sub    $0x4,%esp
f01058b5:	52                   	push   %edx
f01058b6:	50                   	push   %eax
f01058b7:	68 1c 28 13 f0       	push   $0xf013281c
f01058bc:	e8 70 b5 ff ff       	call   f0100e31 <cprintf>
f01058c1:	83 c4 10             	add    $0x10,%esp
				sched_remove_exit(ptr_env);
f01058c4:	83 ec 0c             	sub    $0xc,%esp
f01058c7:	ff 75 f4             	pushl  -0xc(%ebp)
f01058ca:	e8 bf f9 ff ff       	call   f010528e <sched_remove_exit>
f01058cf:	83 c4 10             	add    $0x10,%esp
				env_free(ptr_env);
f01058d2:	83 ec 0c             	sub    $0xc,%esp
f01058d5:	ff 75 f4             	pushl  -0xc(%ebp)
f01058d8:	e8 43 45 00 00       	call   f0109e20 <env_free>
f01058dd:	83 c4 10             	add    $0x10,%esp
				cprintf("DONE\n");
f01058e0:	83 ec 0c             	sub    $0xc,%esp
f01058e3:	68 e9 27 13 f0       	push   $0xf01327e9
f01058e8:	e8 44 b5 ff ff       	call   f0100e31 <cprintf>
f01058ed:	83 c4 10             	add    $0x10,%esp
				found = 1;
f01058f0:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
		}
	}
	if (!found)
	{
		ptr_env=NULL;
		LIST_FOREACH(ptr_env, &env_exit_queue)
f01058f7:	a1 cc a9 2b f0       	mov    0xf02ba9cc,%eax
f01058fc:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01058ff:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105903:	74 08                	je     f010590d <sched_kill_env+0x2fc>
f0105905:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105908:	8b 40 44             	mov    0x44(%eax),%eax
f010590b:	eb 05                	jmp    f0105912 <sched_kill_env+0x301>
f010590d:	b8 00 00 00 00       	mov    $0x0,%eax
f0105912:	a3 cc a9 2b f0       	mov    %eax,0xf02ba9cc
f0105917:	a1 cc a9 2b f0       	mov    0xf02ba9cc,%eax
f010591c:	85 c0                	test   %eax,%eax
f010591e:	0f 85 77 ff ff ff    	jne    f010589b <sched_kill_env+0x28a>
f0105924:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105928:	0f 85 6d ff ff ff    	jne    f010589b <sched_kill_env+0x28a>
				//return;
			}
		}
	}

	if (!found)
f010592e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105932:	0f 85 9d 00 00 00    	jne    f01059d5 <sched_kill_env+0x3c4>
	{
		if (curenv->env_id == envId)
f0105938:	a1 74 41 25 f0       	mov    0xf0254174,%eax
f010593d:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105940:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105943:	0f 85 8c 00 00 00    	jne    f01059d5 <sched_kill_env+0x3c4>
		{
			ptr_env = curenv;
f0105949:	a1 74 41 25 f0       	mov    0xf0254174,%eax
f010594e:	89 45 f4             	mov    %eax,-0xc(%ebp)
			assert(ptr_env->env_status == ENV_RUNNABLE);
f0105951:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105954:	8b 40 54             	mov    0x54(%eax),%eax
f0105957:	83 f8 02             	cmp    $0x2,%eax
f010595a:	74 19                	je     f0105975 <sched_kill_env+0x364>
f010595c:	68 44 28 13 f0       	push   $0xf0132844
f0105961:	68 52 27 13 f0       	push   $0xf0132752
f0105966:	68 77 01 00 00       	push   $0x177
f010596b:	68 67 27 13 f0       	push   $0xf0132767
f0105970:	e8 3b a8 ff ff       	call   f01001b0 <_panic>
			cprintf("killing a RUNNABLE environment [%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0105975:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105978:	8d 50 5c             	lea    0x5c(%eax),%edx
f010597b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010597e:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105981:	83 ec 04             	sub    $0x4,%esp
f0105984:	52                   	push   %edx
f0105985:	50                   	push   %eax
f0105986:	68 68 28 13 f0       	push   $0xf0132868
f010598b:	e8 a1 b4 ff ff       	call   f0100e31 <cprintf>
f0105990:	83 c4 10             	add    $0x10,%esp
			env_free(ptr_env);
f0105993:	83 ec 0c             	sub    $0xc,%esp
f0105996:	ff 75 f4             	pushl  -0xc(%ebp)
f0105999:	e8 82 44 00 00       	call   f0109e20 <env_free>
f010599e:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f01059a1:	83 ec 0c             	sub    $0xc,%esp
f01059a4:	68 e9 27 13 f0       	push   $0xf01327e9
f01059a9:	e8 83 b4 ff ff       	call   f0100e31 <cprintf>
f01059ae:	83 c4 10             	add    $0x10,%esp
			found = 1;
f01059b1:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
			//If it's the curenv, then reset it and reinvoke the scheduler
			//as there's no meaning to return back to a killed env
			//lcr3(K_PHYSICAL_ADDRESS(ptr_page_directory));
			lcr3(phys_page_directory);
f01059b8:	a1 70 ce 2b f0       	mov    0xf02bce70,%eax
f01059bd:	89 45 e8             	mov    %eax,-0x18(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f01059c0:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01059c3:	0f 22 d8             	mov    %eax,%cr3
			curenv = NULL;
f01059c6:	c7 05 74 41 25 f0 00 	movl   $0x0,0xf0254174
f01059cd:	00 00 00 
			fos_scheduler();
f01059d0:	e8 44 08 00 00       	call   f0106219 <fos_scheduler>
		}
	}
}
f01059d5:	90                   	nop
f01059d6:	c9                   	leave  
f01059d7:	c3                   	ret    

f01059d8 <sched_print_all>:

//=================================================
// [12] PRINT ALL Envs from all queues:
//=================================================
void sched_print_all()
{
f01059d8:	55                   	push   %ebp
f01059d9:	89 e5                	mov    %esp,%ebp
f01059db:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
f01059de:	a1 f8 cd 2b f0       	mov    0xf02bcdf8,%eax
f01059e3:	85 c0                	test   %eax,%eax
f01059e5:	74 69                	je     f0105a50 <sched_print_all+0x78>
	{
		cprintf("\nThe processes in NEW queue are:\n");
f01059e7:	83 ec 0c             	sub    $0xc,%esp
f01059ea:	68 94 28 13 f0       	push   $0xf0132894
f01059ef:	e8 3d b4 ff ff       	call   f0100e31 <cprintf>
f01059f4:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_new_queue)
f01059f7:	a1 f8 cd 2b f0       	mov    0xf02bcdf8,%eax
f01059fc:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01059ff:	eb 26                	jmp    f0105a27 <sched_print_all+0x4f>
		{
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f0105a01:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105a04:	8d 50 5c             	lea    0x5c(%eax),%edx
f0105a07:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105a0a:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105a0d:	83 ec 04             	sub    $0x4,%esp
f0105a10:	52                   	push   %edx
f0105a11:	50                   	push   %eax
f0105a12:	68 b6 28 13 f0       	push   $0xf01328b6
f0105a17:	e8 15 b4 ff ff       	call   f0100e31 <cprintf>
f0105a1c:	83 c4 10             	add    $0x10,%esp
{
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
	{
		cprintf("\nThe processes in NEW queue are:\n");
		LIST_FOREACH(ptr_env, &env_new_queue)
f0105a1f:	a1 00 ce 2b f0       	mov    0xf02bce00,%eax
f0105a24:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105a27:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105a2b:	74 08                	je     f0105a35 <sched_print_all+0x5d>
f0105a2d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105a30:	8b 40 44             	mov    0x44(%eax),%eax
f0105a33:	eb 05                	jmp    f0105a3a <sched_print_all+0x62>
f0105a35:	b8 00 00 00 00       	mov    $0x0,%eax
f0105a3a:	a3 00 ce 2b f0       	mov    %eax,0xf02bce00
f0105a3f:	a1 00 ce 2b f0       	mov    0xf02bce00,%eax
f0105a44:	85 c0                	test   %eax,%eax
f0105a46:	75 b9                	jne    f0105a01 <sched_print_all+0x29>
f0105a48:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105a4c:	75 b3                	jne    f0105a01 <sched_print_all+0x29>
f0105a4e:	eb 10                	jmp    f0105a60 <sched_print_all+0x88>
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
		}
	}
	else
	{
		cprintf("\nNo processes in NEW queue\n");
f0105a50:	83 ec 0c             	sub    $0xc,%esp
f0105a53:	68 c0 28 13 f0       	push   $0xf01328c0
f0105a58:	e8 d4 b3 ff ff       	call   f0100e31 <cprintf>
f0105a5d:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("================================================\n");
f0105a60:	83 ec 0c             	sub    $0xc,%esp
f0105a63:	68 dc 28 13 f0       	push   $0xf01328dc
f0105a68:	e8 c4 b3 ff ff       	call   f0100e31 <cprintf>
f0105a6d:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105a70:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0105a77:	e9 c8 00 00 00       	jmp    f0105b44 <sched_print_all+0x16c>
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
f0105a7c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105a7f:	c1 e0 04             	shl    $0x4,%eax
f0105a82:	05 60 4a 25 f0       	add    $0xf0254a60,%eax
f0105a87:	8b 00                	mov    (%eax),%eax
f0105a89:	85 c0                	test   %eax,%eax
f0105a8b:	0f 84 8d 00 00 00    	je     f0105b1e <sched_print_all+0x146>
		{
			cprintf("The processes in READY queue #%d are:\n", i);
f0105a91:	83 ec 08             	sub    $0x8,%esp
f0105a94:	ff 75 f0             	pushl  -0x10(%ebp)
f0105a97:	68 10 29 13 f0       	push   $0xf0132910
f0105a9c:	e8 90 b3 ff ff       	call   f0100e31 <cprintf>
f0105aa1:	83 c4 10             	add    $0x10,%esp
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105aa4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105aa7:	c1 e0 04             	shl    $0x4,%eax
f0105aaa:	05 60 4a 25 f0       	add    $0xf0254a60,%eax
f0105aaf:	8b 00                	mov    (%eax),%eax
f0105ab1:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105ab4:	eb 2e                	jmp    f0105ae4 <sched_print_all+0x10c>
			{
				cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f0105ab6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105ab9:	8d 50 5c             	lea    0x5c(%eax),%edx
f0105abc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105abf:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105ac2:	83 ec 04             	sub    $0x4,%esp
f0105ac5:	52                   	push   %edx
f0105ac6:	50                   	push   %eax
f0105ac7:	68 b6 28 13 f0       	push   $0xf01328b6
f0105acc:	e8 60 b3 ff ff       	call   f0100e31 <cprintf>
f0105ad1:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
		{
			cprintf("The processes in READY queue #%d are:\n", i);
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105ad4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105ad7:	c1 e0 04             	shl    $0x4,%eax
f0105ada:	05 68 4a 25 f0       	add    $0xf0254a68,%eax
f0105adf:	8b 00                	mov    (%eax),%eax
f0105ae1:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105ae4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105ae8:	74 08                	je     f0105af2 <sched_print_all+0x11a>
f0105aea:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105aed:	8b 40 44             	mov    0x44(%eax),%eax
f0105af0:	eb 05                	jmp    f0105af7 <sched_print_all+0x11f>
f0105af2:	b8 00 00 00 00       	mov    $0x0,%eax
f0105af7:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105afa:	c1 e2 04             	shl    $0x4,%edx
f0105afd:	81 c2 68 4a 25 f0    	add    $0xf0254a68,%edx
f0105b03:	89 02                	mov    %eax,(%edx)
f0105b05:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105b08:	c1 e0 04             	shl    $0x4,%eax
f0105b0b:	05 68 4a 25 f0       	add    $0xf0254a68,%eax
f0105b10:	8b 00                	mov    (%eax),%eax
f0105b12:	85 c0                	test   %eax,%eax
f0105b14:	75 a0                	jne    f0105ab6 <sched_print_all+0xde>
f0105b16:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105b1a:	75 9a                	jne    f0105ab6 <sched_print_all+0xde>
f0105b1c:	eb 13                	jmp    f0105b31 <sched_print_all+0x159>
				cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
			}
		}
		else
		{
			cprintf("No processes in READY queue #%d\n", i);
f0105b1e:	83 ec 08             	sub    $0x8,%esp
f0105b21:	ff 75 f0             	pushl  -0x10(%ebp)
f0105b24:	68 38 29 13 f0       	push   $0xf0132938
f0105b29:	e8 03 b3 ff ff       	call   f0100e31 <cprintf>
f0105b2e:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("================================================\n");
f0105b31:	83 ec 0c             	sub    $0xc,%esp
f0105b34:	68 dc 28 13 f0       	push   $0xf01328dc
f0105b39:	e8 f3 b2 ff ff       	call   f0100e31 <cprintf>
f0105b3e:	83 c4 10             	add    $0x10,%esp
	else
	{
		cprintf("\nNo processes in NEW queue\n");
	}
	cprintf("================================================\n");
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105b41:	ff 45 f0             	incl   -0x10(%ebp)
f0105b44:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0105b49:	0f b6 c0             	movzbl %al,%eax
f0105b4c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0105b4f:	0f 8f 27 ff ff ff    	jg     f0105a7c <sched_print_all+0xa4>
		{
			cprintf("No processes in READY queue #%d\n", i);
		}
		cprintf("================================================\n");
	}
	if (!LIST_EMPTY(&env_exit_queue))
f0105b55:	a1 c4 a9 2b f0       	mov    0xf02ba9c4,%eax
f0105b5a:	85 c0                	test   %eax,%eax
f0105b5c:	74 69                	je     f0105bc7 <sched_print_all+0x1ef>
	{
		cprintf("The processes in EXIT queue are:\n");
f0105b5e:	83 ec 0c             	sub    $0xc,%esp
f0105b61:	68 5c 29 13 f0       	push   $0xf013295c
f0105b66:	e8 c6 b2 ff ff       	call   f0100e31 <cprintf>
f0105b6b:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0105b6e:	a1 c4 a9 2b f0       	mov    0xf02ba9c4,%eax
f0105b73:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105b76:	eb 26                	jmp    f0105b9e <sched_print_all+0x1c6>
		{
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f0105b78:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105b7b:	8d 50 5c             	lea    0x5c(%eax),%edx
f0105b7e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105b81:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105b84:	83 ec 04             	sub    $0x4,%esp
f0105b87:	52                   	push   %edx
f0105b88:	50                   	push   %eax
f0105b89:	68 b6 28 13 f0       	push   $0xf01328b6
f0105b8e:	e8 9e b2 ff ff       	call   f0100e31 <cprintf>
f0105b93:	83 c4 10             	add    $0x10,%esp
		cprintf("================================================\n");
	}
	if (!LIST_EMPTY(&env_exit_queue))
	{
		cprintf("The processes in EXIT queue are:\n");
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0105b96:	a1 cc a9 2b f0       	mov    0xf02ba9cc,%eax
f0105b9b:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105b9e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105ba2:	74 08                	je     f0105bac <sched_print_all+0x1d4>
f0105ba4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105ba7:	8b 40 44             	mov    0x44(%eax),%eax
f0105baa:	eb 05                	jmp    f0105bb1 <sched_print_all+0x1d9>
f0105bac:	b8 00 00 00 00       	mov    $0x0,%eax
f0105bb1:	a3 cc a9 2b f0       	mov    %eax,0xf02ba9cc
f0105bb6:	a1 cc a9 2b f0       	mov    0xf02ba9cc,%eax
f0105bbb:	85 c0                	test   %eax,%eax
f0105bbd:	75 b9                	jne    f0105b78 <sched_print_all+0x1a0>
f0105bbf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105bc3:	75 b3                	jne    f0105b78 <sched_print_all+0x1a0>
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
	}
}
f0105bc5:	eb 10                	jmp    f0105bd7 <sched_print_all+0x1ff>
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
		}
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
f0105bc7:	83 ec 0c             	sub    $0xc,%esp
f0105bca:	68 7e 29 13 f0       	push   $0xf013297e
f0105bcf:	e8 5d b2 ff ff       	call   f0100e31 <cprintf>
f0105bd4:	83 c4 10             	add    $0x10,%esp
	}
}
f0105bd7:	90                   	nop
f0105bd8:	c9                   	leave  
f0105bd9:	c3                   	ret    

f0105bda <sched_run_all>:

//=================================================
// [13] MOVE ALL NEW Envs into READY Q:
//=================================================
void sched_run_all()
{
f0105bda:	55                   	push   %ebp
f0105bdb:	89 e5                	mov    %esp,%ebp
f0105bdd:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f0105be0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	LIST_FOREACH(ptr_env, &env_new_queue)
f0105be7:	a1 f8 cd 2b f0       	mov    0xf02bcdf8,%eax
f0105bec:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105bef:	eb 24                	jmp    f0105c15 <sched_run_all+0x3b>
	{
		sched_remove_new(ptr_env);
f0105bf1:	83 ec 0c             	sub    $0xc,%esp
f0105bf4:	ff 75 f4             	pushl  -0xc(%ebp)
f0105bf7:	e8 aa f5 ff ff       	call   f01051a6 <sched_remove_new>
f0105bfc:	83 c4 10             	add    $0x10,%esp
		sched_insert_ready0(ptr_env);
f0105bff:	83 ec 0c             	sub    $0xc,%esp
f0105c02:	ff 75 f4             	pushl  -0xc(%ebp)
f0105c05:	e8 30 f4 ff ff       	call   f010503a <sched_insert_ready0>
f0105c0a:	83 c4 10             	add    $0x10,%esp
// [13] MOVE ALL NEW Envs into READY Q:
//=================================================
void sched_run_all()
{
	struct Env* ptr_env=NULL;
	LIST_FOREACH(ptr_env, &env_new_queue)
f0105c0d:	a1 00 ce 2b f0       	mov    0xf02bce00,%eax
f0105c12:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105c15:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105c19:	74 08                	je     f0105c23 <sched_run_all+0x49>
f0105c1b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105c1e:	8b 40 44             	mov    0x44(%eax),%eax
f0105c21:	eb 05                	jmp    f0105c28 <sched_run_all+0x4e>
f0105c23:	b8 00 00 00 00       	mov    $0x0,%eax
f0105c28:	a3 00 ce 2b f0       	mov    %eax,0xf02bce00
f0105c2d:	a1 00 ce 2b f0       	mov    0xf02bce00,%eax
f0105c32:	85 c0                	test   %eax,%eax
f0105c34:	75 bb                	jne    f0105bf1 <sched_run_all+0x17>
f0105c36:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105c3a:	75 b5                	jne    f0105bf1 <sched_run_all+0x17>
	{
		sched_remove_new(ptr_env);
		sched_insert_ready0(ptr_env);
	}
	/*2015*///if scheduler not run yet, then invoke it!
	if (scheduler_status == SCH_STOPPED)
f0105c3c:	a1 14 ce 2b f0       	mov    0xf02bce14,%eax
f0105c41:	85 c0                	test   %eax,%eax
f0105c43:	75 05                	jne    f0105c4a <sched_run_all+0x70>
		fos_scheduler();
f0105c45:	e8 cf 05 00 00       	call   f0106219 <fos_scheduler>
}
f0105c4a:	90                   	nop
f0105c4b:	c9                   	leave  
f0105c4c:	c3                   	ret    

f0105c4d <sched_kill_all>:

//=================================================
// [14] KILL ALL Envs in the System:
//=================================================
void sched_kill_all()
{
f0105c4d:	55                   	push   %ebp
f0105c4e:	89 e5                	mov    %esp,%ebp
f0105c50:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
f0105c53:	a1 f8 cd 2b f0       	mov    0xf02bcdf8,%eax
f0105c58:	85 c0                	test   %eax,%eax
f0105c5a:	0f 84 95 00 00 00    	je     f0105cf5 <sched_kill_all+0xa8>
	{
		cprintf("\nKILLING the processes in the NEW queue...\n");
f0105c60:	83 ec 0c             	sub    $0xc,%esp
f0105c63:	68 9c 29 13 f0       	push   $0xf013299c
f0105c68:	e8 c4 b1 ff ff       	call   f0100e31 <cprintf>
f0105c6d:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_new_queue)
f0105c70:	a1 f8 cd 2b f0       	mov    0xf02bcdf8,%eax
f0105c75:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105c78:	eb 52                	jmp    f0105ccc <sched_kill_all+0x7f>
		{
			cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0105c7a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105c7d:	8d 50 5c             	lea    0x5c(%eax),%edx
f0105c80:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105c83:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105c86:	83 ec 04             	sub    $0x4,%esp
f0105c89:	52                   	push   %edx
f0105c8a:	50                   	push   %eax
f0105c8b:	68 c8 29 13 f0       	push   $0xf01329c8
f0105c90:	e8 9c b1 ff ff       	call   f0100e31 <cprintf>
f0105c95:	83 c4 10             	add    $0x10,%esp
			sched_remove_new(ptr_env);
f0105c98:	83 ec 0c             	sub    $0xc,%esp
f0105c9b:	ff 75 f4             	pushl  -0xc(%ebp)
f0105c9e:	e8 03 f5 ff ff       	call   f01051a6 <sched_remove_new>
f0105ca3:	83 c4 10             	add    $0x10,%esp
			env_free(ptr_env);
f0105ca6:	83 ec 0c             	sub    $0xc,%esp
f0105ca9:	ff 75 f4             	pushl  -0xc(%ebp)
f0105cac:	e8 6f 41 00 00       	call   f0109e20 <env_free>
f0105cb1:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f0105cb4:	83 ec 0c             	sub    $0xc,%esp
f0105cb7:	68 e9 27 13 f0       	push   $0xf01327e9
f0105cbc:	e8 70 b1 ff ff       	call   f0100e31 <cprintf>
f0105cc1:	83 c4 10             	add    $0x10,%esp
{
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
	{
		cprintf("\nKILLING the processes in the NEW queue...\n");
		LIST_FOREACH(ptr_env, &env_new_queue)
f0105cc4:	a1 00 ce 2b f0       	mov    0xf02bce00,%eax
f0105cc9:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105ccc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105cd0:	74 08                	je     f0105cda <sched_kill_all+0x8d>
f0105cd2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105cd5:	8b 40 44             	mov    0x44(%eax),%eax
f0105cd8:	eb 05                	jmp    f0105cdf <sched_kill_all+0x92>
f0105cda:	b8 00 00 00 00       	mov    $0x0,%eax
f0105cdf:	a3 00 ce 2b f0       	mov    %eax,0xf02bce00
f0105ce4:	a1 00 ce 2b f0       	mov    0xf02bce00,%eax
f0105ce9:	85 c0                	test   %eax,%eax
f0105ceb:	75 8d                	jne    f0105c7a <sched_kill_all+0x2d>
f0105ced:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105cf1:	75 87                	jne    f0105c7a <sched_kill_all+0x2d>
f0105cf3:	eb 10                	jmp    f0105d05 <sched_kill_all+0xb8>
			cprintf("DONE\n");
		}
	}
	else
	{
		cprintf("No processes in NEW queue\n");
f0105cf5:	83 ec 0c             	sub    $0xc,%esp
f0105cf8:	68 db 29 13 f0       	push   $0xf01329db
f0105cfd:	e8 2f b1 ff ff       	call   f0100e31 <cprintf>
f0105d02:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("================================================\n");
f0105d05:	83 ec 0c             	sub    $0xc,%esp
f0105d08:	68 dc 28 13 f0       	push   $0xf01328dc
f0105d0d:	e8 1f b1 ff ff       	call   f0100e31 <cprintf>
f0105d12:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105d15:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0105d1c:	e9 9d 01 00 00       	jmp    f0105ebe <sched_kill_all+0x271>
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
f0105d21:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105d24:	c1 e0 04             	shl    $0x4,%eax
f0105d27:	05 60 4a 25 f0       	add    $0xf0254a60,%eax
f0105d2c:	8b 00                	mov    (%eax),%eax
f0105d2e:	85 c0                	test   %eax,%eax
f0105d30:	0f 84 62 01 00 00    	je     f0105e98 <sched_kill_all+0x24b>
		{
			cprintf("KILLING the processes in the READY queue #%d...\n", i);
f0105d36:	83 ec 08             	sub    $0x8,%esp
f0105d39:	ff 75 f0             	pushl  -0x10(%ebp)
f0105d3c:	68 f8 29 13 f0       	push   $0xf01329f8
f0105d41:	e8 eb b0 ff ff       	call   f0100e31 <cprintf>
f0105d46:	83 c4 10             	add    $0x10,%esp
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105d49:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105d4c:	c1 e0 04             	shl    $0x4,%eax
f0105d4f:	05 60 4a 25 f0       	add    $0xf0254a60,%eax
f0105d54:	8b 00                	mov    (%eax),%eax
f0105d56:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105d59:	e9 f8 00 00 00       	jmp    f0105e56 <sched_kill_all+0x209>
			{
				cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0105d5e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105d61:	8d 50 5c             	lea    0x5c(%eax),%edx
f0105d64:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105d67:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105d6a:	83 ec 04             	sub    $0x4,%esp
f0105d6d:	52                   	push   %edx
f0105d6e:	50                   	push   %eax
f0105d6f:	68 c8 29 13 f0       	push   $0xf01329c8
f0105d74:	e8 b8 b0 ff ff       	call   f0100e31 <cprintf>
f0105d79:	83 c4 10             	add    $0x10,%esp
				LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f0105d7c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105d80:	75 17                	jne    f0105d99 <sched_kill_all+0x14c>
f0105d82:	83 ec 04             	sub    $0x4,%esp
f0105d85:	68 a3 27 13 f0       	push   $0xf01327a3
f0105d8a:	68 e5 01 00 00       	push   $0x1e5
f0105d8f:	68 67 27 13 f0       	push   $0xf0132767
f0105d94:	e8 17 a4 ff ff       	call   f01001b0 <_panic>
f0105d99:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105d9c:	8b 40 44             	mov    0x44(%eax),%eax
f0105d9f:	85 c0                	test   %eax,%eax
f0105da1:	74 11                	je     f0105db4 <sched_kill_all+0x167>
f0105da3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105da6:	8b 40 44             	mov    0x44(%eax),%eax
f0105da9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105dac:	8b 52 48             	mov    0x48(%edx),%edx
f0105daf:	89 50 48             	mov    %edx,0x48(%eax)
f0105db2:	eb 14                	jmp    f0105dc8 <sched_kill_all+0x17b>
f0105db4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105db7:	8b 40 48             	mov    0x48(%eax),%eax
f0105dba:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105dbd:	c1 e2 04             	shl    $0x4,%edx
f0105dc0:	81 c2 64 4a 25 f0    	add    $0xf0254a64,%edx
f0105dc6:	89 02                	mov    %eax,(%edx)
f0105dc8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105dcb:	8b 40 48             	mov    0x48(%eax),%eax
f0105dce:	85 c0                	test   %eax,%eax
f0105dd0:	74 11                	je     f0105de3 <sched_kill_all+0x196>
f0105dd2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105dd5:	8b 40 48             	mov    0x48(%eax),%eax
f0105dd8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105ddb:	8b 52 44             	mov    0x44(%edx),%edx
f0105dde:	89 50 44             	mov    %edx,0x44(%eax)
f0105de1:	eb 14                	jmp    f0105df7 <sched_kill_all+0x1aa>
f0105de3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105de6:	8b 40 44             	mov    0x44(%eax),%eax
f0105de9:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105dec:	c1 e2 04             	shl    $0x4,%edx
f0105def:	81 c2 60 4a 25 f0    	add    $0xf0254a60,%edx
f0105df5:	89 02                	mov    %eax,(%edx)
f0105df7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105dfa:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0105e01:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105e04:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0105e0b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105e0e:	c1 e0 04             	shl    $0x4,%eax
f0105e11:	05 6c 4a 25 f0       	add    $0xf0254a6c,%eax
f0105e16:	8b 00                	mov    (%eax),%eax
f0105e18:	8d 50 ff             	lea    -0x1(%eax),%edx
f0105e1b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105e1e:	c1 e0 04             	shl    $0x4,%eax
f0105e21:	05 6c 4a 25 f0       	add    $0xf0254a6c,%eax
f0105e26:	89 10                	mov    %edx,(%eax)
				env_free(ptr_env);
f0105e28:	83 ec 0c             	sub    $0xc,%esp
f0105e2b:	ff 75 f4             	pushl  -0xc(%ebp)
f0105e2e:	e8 ed 3f 00 00       	call   f0109e20 <env_free>
f0105e33:	83 c4 10             	add    $0x10,%esp
				cprintf("DONE\n");
f0105e36:	83 ec 0c             	sub    $0xc,%esp
f0105e39:	68 e9 27 13 f0       	push   $0xf01327e9
f0105e3e:	e8 ee af ff ff       	call   f0100e31 <cprintf>
f0105e43:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
		{
			cprintf("KILLING the processes in the READY queue #%d...\n", i);
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105e46:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105e49:	c1 e0 04             	shl    $0x4,%eax
f0105e4c:	05 68 4a 25 f0       	add    $0xf0254a68,%eax
f0105e51:	8b 00                	mov    (%eax),%eax
f0105e53:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105e56:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105e5a:	74 08                	je     f0105e64 <sched_kill_all+0x217>
f0105e5c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105e5f:	8b 40 44             	mov    0x44(%eax),%eax
f0105e62:	eb 05                	jmp    f0105e69 <sched_kill_all+0x21c>
f0105e64:	b8 00 00 00 00       	mov    $0x0,%eax
f0105e69:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105e6c:	c1 e2 04             	shl    $0x4,%edx
f0105e6f:	81 c2 68 4a 25 f0    	add    $0xf0254a68,%edx
f0105e75:	89 02                	mov    %eax,(%edx)
f0105e77:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105e7a:	c1 e0 04             	shl    $0x4,%eax
f0105e7d:	05 68 4a 25 f0       	add    $0xf0254a68,%eax
f0105e82:	8b 00                	mov    (%eax),%eax
f0105e84:	85 c0                	test   %eax,%eax
f0105e86:	0f 85 d2 fe ff ff    	jne    f0105d5e <sched_kill_all+0x111>
f0105e8c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105e90:	0f 85 c8 fe ff ff    	jne    f0105d5e <sched_kill_all+0x111>
f0105e96:	eb 13                	jmp    f0105eab <sched_kill_all+0x25e>
				cprintf("DONE\n");
			}
		}
		else
		{
			cprintf("No processes in READY queue #%d\n",i);
f0105e98:	83 ec 08             	sub    $0x8,%esp
f0105e9b:	ff 75 f0             	pushl  -0x10(%ebp)
f0105e9e:	68 38 29 13 f0       	push   $0xf0132938
f0105ea3:	e8 89 af ff ff       	call   f0100e31 <cprintf>
f0105ea8:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("================================================\n");
f0105eab:	83 ec 0c             	sub    $0xc,%esp
f0105eae:	68 dc 28 13 f0       	push   $0xf01328dc
f0105eb3:	e8 79 af ff ff       	call   f0100e31 <cprintf>
f0105eb8:	83 c4 10             	add    $0x10,%esp
	else
	{
		cprintf("No processes in NEW queue\n");
	}
	cprintf("================================================\n");
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105ebb:	ff 45 f0             	incl   -0x10(%ebp)
f0105ebe:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0105ec3:	0f b6 c0             	movzbl %al,%eax
f0105ec6:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0105ec9:	0f 8f 52 fe ff ff    	jg     f0105d21 <sched_kill_all+0xd4>
			cprintf("No processes in READY queue #%d\n",i);
		}
		cprintf("================================================\n");
	}

	if (!LIST_EMPTY(&env_exit_queue))
f0105ecf:	a1 c4 a9 2b f0       	mov    0xf02ba9c4,%eax
f0105ed4:	85 c0                	test   %eax,%eax
f0105ed6:	0f 84 95 00 00 00    	je     f0105f71 <sched_kill_all+0x324>
	{
		cprintf("KILLING the processes in the EXIT queue...\n");
f0105edc:	83 ec 0c             	sub    $0xc,%esp
f0105edf:	68 2c 2a 13 f0       	push   $0xf0132a2c
f0105ee4:	e8 48 af ff ff       	call   f0100e31 <cprintf>
f0105ee9:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0105eec:	a1 c4 a9 2b f0       	mov    0xf02ba9c4,%eax
f0105ef1:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105ef4:	eb 52                	jmp    f0105f48 <sched_kill_all+0x2fb>
		{
			cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0105ef6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105ef9:	8d 50 5c             	lea    0x5c(%eax),%edx
f0105efc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105eff:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105f02:	83 ec 04             	sub    $0x4,%esp
f0105f05:	52                   	push   %edx
f0105f06:	50                   	push   %eax
f0105f07:	68 c8 29 13 f0       	push   $0xf01329c8
f0105f0c:	e8 20 af ff ff       	call   f0100e31 <cprintf>
f0105f11:	83 c4 10             	add    $0x10,%esp
			sched_remove_exit(ptr_env);
f0105f14:	83 ec 0c             	sub    $0xc,%esp
f0105f17:	ff 75 f4             	pushl  -0xc(%ebp)
f0105f1a:	e8 6f f3 ff ff       	call   f010528e <sched_remove_exit>
f0105f1f:	83 c4 10             	add    $0x10,%esp
			env_free(ptr_env);
f0105f22:	83 ec 0c             	sub    $0xc,%esp
f0105f25:	ff 75 f4             	pushl  -0xc(%ebp)
f0105f28:	e8 f3 3e 00 00       	call   f0109e20 <env_free>
f0105f2d:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f0105f30:	83 ec 0c             	sub    $0xc,%esp
f0105f33:	68 e9 27 13 f0       	push   $0xf01327e9
f0105f38:	e8 f4 ae ff ff       	call   f0100e31 <cprintf>
f0105f3d:	83 c4 10             	add    $0x10,%esp
	}

	if (!LIST_EMPTY(&env_exit_queue))
	{
		cprintf("KILLING the processes in the EXIT queue...\n");
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0105f40:	a1 cc a9 2b f0       	mov    0xf02ba9cc,%eax
f0105f45:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105f48:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105f4c:	74 08                	je     f0105f56 <sched_kill_all+0x309>
f0105f4e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105f51:	8b 40 44             	mov    0x44(%eax),%eax
f0105f54:	eb 05                	jmp    f0105f5b <sched_kill_all+0x30e>
f0105f56:	b8 00 00 00 00       	mov    $0x0,%eax
f0105f5b:	a3 cc a9 2b f0       	mov    %eax,0xf02ba9cc
f0105f60:	a1 cc a9 2b f0       	mov    0xf02ba9cc,%eax
f0105f65:	85 c0                	test   %eax,%eax
f0105f67:	75 8d                	jne    f0105ef6 <sched_kill_all+0x2a9>
f0105f69:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105f6d:	75 87                	jne    f0105ef6 <sched_kill_all+0x2a9>
f0105f6f:	eb 10                	jmp    f0105f81 <sched_kill_all+0x334>
			cprintf("DONE\n");
		}
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
f0105f71:	83 ec 0c             	sub    $0xc,%esp
f0105f74:	68 7e 29 13 f0       	push   $0xf013297e
f0105f79:	e8 b3 ae ff ff       	call   f0100e31 <cprintf>
f0105f7e:	83 c4 10             	add    $0x10,%esp
	}

	//reinvoke the scheduler since there're no env to return back to it
	curenv = NULL;
f0105f81:	c7 05 74 41 25 f0 00 	movl   $0x0,0xf0254174
f0105f88:	00 00 00 
	fos_scheduler();
f0105f8b:	e8 89 02 00 00       	call   f0106219 <fos_scheduler>

f0105f90 <sched_exit_all_ready_envs>:
/*2018*/
//=================================================
// [14] EXIT ALL Ready Envs:
//=================================================
void sched_exit_all_ready_envs()
{
f0105f90:	55                   	push   %ebp
f0105f91:	89 e5                	mov    %esp,%ebp
f0105f93:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f0105f96:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105f9d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0105fa4:	e9 3e 01 00 00       	jmp    f01060e7 <sched_exit_all_ready_envs+0x157>
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
f0105fa9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105fac:	c1 e0 04             	shl    $0x4,%eax
f0105faf:	05 60 4a 25 f0       	add    $0xf0254a60,%eax
f0105fb4:	8b 00                	mov    (%eax),%eax
f0105fb6:	85 c0                	test   %eax,%eax
f0105fb8:	0f 84 26 01 00 00    	je     f01060e4 <sched_exit_all_ready_envs+0x154>
		{
			ptr_env=NULL;
f0105fbe:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105fc5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105fc8:	c1 e0 04             	shl    $0x4,%eax
f0105fcb:	05 60 4a 25 f0       	add    $0xf0254a60,%eax
f0105fd0:	8b 00                	mov    (%eax),%eax
f0105fd2:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105fd5:	e9 ca 00 00 00       	jmp    f01060a4 <sched_exit_all_ready_envs+0x114>
			{
				LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f0105fda:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105fde:	75 17                	jne    f0105ff7 <sched_exit_all_ready_envs+0x67>
f0105fe0:	83 ec 04             	sub    $0x4,%esp
f0105fe3:	68 a3 27 13 f0       	push   $0xf01327a3
f0105fe8:	68 14 02 00 00       	push   $0x214
f0105fed:	68 67 27 13 f0       	push   $0xf0132767
f0105ff2:	e8 b9 a1 ff ff       	call   f01001b0 <_panic>
f0105ff7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105ffa:	8b 40 44             	mov    0x44(%eax),%eax
f0105ffd:	85 c0                	test   %eax,%eax
f0105fff:	74 11                	je     f0106012 <sched_exit_all_ready_envs+0x82>
f0106001:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106004:	8b 40 44             	mov    0x44(%eax),%eax
f0106007:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010600a:	8b 52 48             	mov    0x48(%edx),%edx
f010600d:	89 50 48             	mov    %edx,0x48(%eax)
f0106010:	eb 14                	jmp    f0106026 <sched_exit_all_ready_envs+0x96>
f0106012:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106015:	8b 40 48             	mov    0x48(%eax),%eax
f0106018:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010601b:	c1 e2 04             	shl    $0x4,%edx
f010601e:	81 c2 64 4a 25 f0    	add    $0xf0254a64,%edx
f0106024:	89 02                	mov    %eax,(%edx)
f0106026:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106029:	8b 40 48             	mov    0x48(%eax),%eax
f010602c:	85 c0                	test   %eax,%eax
f010602e:	74 11                	je     f0106041 <sched_exit_all_ready_envs+0xb1>
f0106030:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106033:	8b 40 48             	mov    0x48(%eax),%eax
f0106036:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106039:	8b 52 44             	mov    0x44(%edx),%edx
f010603c:	89 50 44             	mov    %edx,0x44(%eax)
f010603f:	eb 14                	jmp    f0106055 <sched_exit_all_ready_envs+0xc5>
f0106041:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106044:	8b 40 44             	mov    0x44(%eax),%eax
f0106047:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010604a:	c1 e2 04             	shl    $0x4,%edx
f010604d:	81 c2 60 4a 25 f0    	add    $0xf0254a60,%edx
f0106053:	89 02                	mov    %eax,(%edx)
f0106055:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106058:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f010605f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106062:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0106069:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010606c:	c1 e0 04             	shl    $0x4,%eax
f010606f:	05 6c 4a 25 f0       	add    $0xf0254a6c,%eax
f0106074:	8b 00                	mov    (%eax),%eax
f0106076:	8d 50 ff             	lea    -0x1(%eax),%edx
f0106079:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010607c:	c1 e0 04             	shl    $0x4,%eax
f010607f:	05 6c 4a 25 f0       	add    $0xf0254a6c,%eax
f0106084:	89 10                	mov    %edx,(%eax)
				sched_insert_exit(ptr_env);
f0106086:	83 ec 0c             	sub    $0xc,%esp
f0106089:	ff 75 f4             	pushl  -0xc(%ebp)
f010608c:	e8 ba f1 ff ff       	call   f010524b <sched_insert_exit>
f0106091:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
		{
			ptr_env=NULL;
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0106094:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106097:	c1 e0 04             	shl    $0x4,%eax
f010609a:	05 68 4a 25 f0       	add    $0xf0254a68,%eax
f010609f:	8b 00                	mov    (%eax),%eax
f01060a1:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01060a4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01060a8:	74 08                	je     f01060b2 <sched_exit_all_ready_envs+0x122>
f01060aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01060ad:	8b 40 44             	mov    0x44(%eax),%eax
f01060b0:	eb 05                	jmp    f01060b7 <sched_exit_all_ready_envs+0x127>
f01060b2:	b8 00 00 00 00       	mov    $0x0,%eax
f01060b7:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01060ba:	c1 e2 04             	shl    $0x4,%edx
f01060bd:	81 c2 68 4a 25 f0    	add    $0xf0254a68,%edx
f01060c3:	89 02                	mov    %eax,(%edx)
f01060c5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01060c8:	c1 e0 04             	shl    $0x4,%eax
f01060cb:	05 68 4a 25 f0       	add    $0xf0254a68,%eax
f01060d0:	8b 00                	mov    (%eax),%eax
f01060d2:	85 c0                	test   %eax,%eax
f01060d4:	0f 85 00 ff ff ff    	jne    f0105fda <sched_exit_all_ready_envs+0x4a>
f01060da:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01060de:	0f 85 f6 fe ff ff    	jne    f0105fda <sched_exit_all_ready_envs+0x4a>
// [14] EXIT ALL Ready Envs:
//=================================================
void sched_exit_all_ready_envs()
{
	struct Env* ptr_env=NULL;
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f01060e4:	ff 45 f0             	incl   -0x10(%ebp)
f01060e7:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f01060ec:	0f b6 c0             	movzbl %al,%eax
f01060ef:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01060f2:	0f 8f b1 fe ff ff    	jg     f0105fa9 <sched_exit_all_ready_envs+0x19>
				LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
				sched_insert_exit(ptr_env);
			}
		}
	}
}
f01060f8:	90                   	nop
f01060f9:	c9                   	leave  
f01060fa:	c3                   	ret    

f01060fb <timer_ticks>:

/*2023*/
/********* for BSD Priority Scheduler *************/
int64 timer_ticks()
{
f01060fb:	55                   	push   %ebp
f01060fc:	89 e5                	mov    %esp,%ebp
	return ticks;
f01060fe:	a1 20 ce 2b f0       	mov    0xf02bce20,%eax
f0106103:	8b 15 24 ce 2b f0    	mov    0xf02bce24,%edx
}
f0106109:	5d                   	pop    %ebp
f010610a:	c3                   	ret    

f010610b <env_get_nice>:
int env_get_nice(struct Env* e)
{
f010610b:	55                   	push   %ebp
f010610c:	89 e5                	mov    %esp,%ebp
f010610e:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'23.MS3 - #3] [2] BSD SCHEDULER - env_get_nice
	//Your code is here
	//Comment the following line
	panic("Not implemented yet");
f0106111:	83 ec 04             	sub    $0x4,%esp
f0106114:	68 58 2a 13 f0       	push   $0xf0132a58
f0106119:	68 26 02 00 00       	push   $0x226
f010611e:	68 67 27 13 f0       	push   $0xf0132767
f0106123:	e8 88 a0 ff ff       	call   f01001b0 <_panic>

f0106128 <env_set_nice>:
	return 0;
}
void env_set_nice(struct Env* e, int nice_value)
{
f0106128:	55                   	push   %ebp
f0106129:	89 e5                	mov    %esp,%ebp
f010612b:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'23.MS3 - #3] [2] BSD SCHEDULER - env_set_nice
	//Your code is here
	//Comment the following line
	panic("Not implemented yet");
f010612e:	83 ec 04             	sub    $0x4,%esp
f0106131:	68 58 2a 13 f0       	push   $0xf0132a58
f0106136:	68 2e 02 00 00       	push   $0x22e
f010613b:	68 67 27 13 f0       	push   $0xf0132767
f0106140:	e8 6b a0 ff ff       	call   f01001b0 <_panic>

f0106145 <env_get_recent_cpu>:
}
int env_get_recent_cpu(struct Env* e)
{
f0106145:	55                   	push   %ebp
f0106146:	89 e5                	mov    %esp,%ebp
f0106148:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'23.MS3 - #3] [2] BSD SCHEDULER - env_get_recent_cpu
	//Your code is here
	//Comment the following line
	panic("Not implemented yet");
f010614b:	83 ec 04             	sub    $0x4,%esp
f010614e:	68 58 2a 13 f0       	push   $0xf0132a58
f0106153:	68 35 02 00 00       	push   $0x235
f0106158:	68 67 27 13 f0       	push   $0xf0132767
f010615d:	e8 4e a0 ff ff       	call   f01001b0 <_panic>

f0106162 <get_load_average>:
	return 0;
}
int get_load_average()
{
f0106162:	55                   	push   %ebp
f0106163:	89 e5                	mov    %esp,%ebp
f0106165:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'23.MS3 - #3] [2] BSD SCHEDULER - get_load_average
	//Your code is here
	//Comment the following line
	panic("Not implemented yet");
f0106168:	83 ec 04             	sub    $0x4,%esp
f010616b:	68 58 2a 13 f0       	push   $0xf0132a58
f0106170:	68 3d 02 00 00       	push   $0x23d
f0106175:	68 67 27 13 f0       	push   $0xf0132767
f010617a:	e8 31 a0 ff ff       	call   f01001b0 <_panic>

f010617f <isSchedMethodRR>:
#include <kern/mem/memory_manager.h>
#include <kern/tests/utilities.h>
#include <kern/cmd/command_prompt.h>


uint32 isSchedMethodRR(){if(scheduler_method == SCH_RR) return 1; return 0;}
f010617f:	55                   	push   %ebp
f0106180:	89 e5                	mov    %esp,%ebp
f0106182:	a1 08 ce 2b f0       	mov    0xf02bce08,%eax
f0106187:	85 c0                	test   %eax,%eax
f0106189:	75 07                	jne    f0106192 <isSchedMethodRR+0x13>
f010618b:	b8 01 00 00 00       	mov    $0x1,%eax
f0106190:	eb 05                	jmp    f0106197 <isSchedMethodRR+0x18>
f0106192:	b8 00 00 00 00       	mov    $0x0,%eax
f0106197:	5d                   	pop    %ebp
f0106198:	c3                   	ret    

f0106199 <isSchedMethodMLFQ>:
uint32 isSchedMethodMLFQ(){if(scheduler_method == SCH_MLFQ) return 1; return 0;}
f0106199:	55                   	push   %ebp
f010619a:	89 e5                	mov    %esp,%ebp
f010619c:	a1 08 ce 2b f0       	mov    0xf02bce08,%eax
f01061a1:	83 f8 01             	cmp    $0x1,%eax
f01061a4:	75 07                	jne    f01061ad <isSchedMethodMLFQ+0x14>
f01061a6:	b8 01 00 00 00       	mov    $0x1,%eax
f01061ab:	eb 05                	jmp    f01061b2 <isSchedMethodMLFQ+0x19>
f01061ad:	b8 00 00 00 00       	mov    $0x0,%eax
f01061b2:	5d                   	pop    %ebp
f01061b3:	c3                   	ret    

f01061b4 <isSchedMethodBSD>:
uint32 isSchedMethodBSD(){if(scheduler_method == SCH_BSD) return 1; return 0;}
f01061b4:	55                   	push   %ebp
f01061b5:	89 e5                	mov    %esp,%ebp
f01061b7:	a1 08 ce 2b f0       	mov    0xf02bce08,%eax
f01061bc:	83 f8 02             	cmp    $0x2,%eax
f01061bf:	75 07                	jne    f01061c8 <isSchedMethodBSD+0x14>
f01061c1:	b8 01 00 00 00       	mov    $0x1,%eax
f01061c6:	eb 05                	jmp    f01061cd <isSchedMethodBSD+0x19>
f01061c8:	b8 00 00 00 00       	mov    $0x0,%eax
f01061cd:	5d                   	pop    %ebp
f01061ce:	c3                   	ret    

f01061cf <sched_init>:

//===================================
// [1] Default Scheduler Initializer:
//===================================
void sched_init()
{
f01061cf:	55                   	push   %ebp
f01061d0:	89 e5                	mov    %esp,%ebp
f01061d2:	83 ec 08             	sub    $0x8,%esp
	old_pf_counter = 0;
f01061d5:	c7 05 d4 a9 2b f0 00 	movl   $0x0,0xf02ba9d4
f01061dc:	00 00 00 

	sched_init_RR(INIT_QUANTUM_IN_MS);
f01061df:	83 ec 0c             	sub    $0xc,%esp
f01061e2:	6a 0a                	push   $0xa
f01061e4:	e8 2b 01 00 00       	call   f0106314 <sched_init_RR>
f01061e9:	83 c4 10             	add    $0x10,%esp

	init_queue(&env_new_queue);
f01061ec:	83 ec 0c             	sub    $0xc,%esp
f01061ef:	68 f8 cd 2b f0       	push   $0xf02bcdf8
f01061f4:	e8 8b eb ff ff       	call   f0104d84 <init_queue>
f01061f9:	83 c4 10             	add    $0x10,%esp
	init_queue(&env_exit_queue);
f01061fc:	83 ec 0c             	sub    $0xc,%esp
f01061ff:	68 c4 a9 2b f0       	push   $0xf02ba9c4
f0106204:	e8 7b eb ff ff       	call   f0104d84 <init_queue>
f0106209:	83 c4 10             	add    $0x10,%esp
	scheduler_status = SCH_STOPPED;
f010620c:	c7 05 14 ce 2b f0 00 	movl   $0x0,0xf02bce14
f0106213:	00 00 00 
}
f0106216:	90                   	nop
f0106217:	c9                   	leave  
f0106218:	c3                   	ret    

f0106219 <fos_scheduler>:
//=========================
// [2] Main FOS Scheduler:
//=========================
void
fos_scheduler(void)
{
f0106219:	55                   	push   %ebp
f010621a:	89 e5                	mov    %esp,%ebp
f010621c:	83 ec 18             	sub    $0x18,%esp
	//	cprintf("inside scheduler\n");

	chk1();
f010621f:	e8 2a 85 02 00       	call   f012e74e <chk1>
	scheduler_status = SCH_STARTED;
f0106224:	c7 05 14 ce 2b f0 01 	movl   $0x1,0xf02bce14
f010622b:	00 00 00 

	//This variable should be set to the next environment to be run (if any)
	struct Env* next_env = NULL;
f010622e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	if (scheduler_method == SCH_RR)
f0106235:	a1 08 ce 2b f0       	mov    0xf02bce08,%eax
f010623a:	85 c0                	test   %eax,%eax
f010623c:	75 48                	jne    f0106286 <fos_scheduler+0x6d>
		// and switch to such environment if found.
		// It's OK to choose the previously running env if no other env
		// is runnable.

		//If the curenv is still exist, then insert it again in the ready queue
		if (curenv != NULL)
f010623e:	a1 74 41 25 f0       	mov    0xf0254174,%eax
f0106243:	85 c0                	test   %eax,%eax
f0106245:	74 16                	je     f010625d <fos_scheduler+0x44>
		{
			enqueue(&(env_ready_queues[0]), curenv);
f0106247:	a1 74 41 25 f0       	mov    0xf0254174,%eax
f010624c:	83 ec 08             	sub    $0x8,%esp
f010624f:	50                   	push   %eax
f0106250:	68 60 4a 25 f0       	push   $0xf0254a60
f0106255:	e8 6b eb ff ff       	call   f0104dc5 <enqueue>
f010625a:	83 c4 10             	add    $0x10,%esp
		}

		//Pick the next environment from the ready queue
		next_env = dequeue(&(env_ready_queues[0]));
f010625d:	83 ec 0c             	sub    $0xc,%esp
f0106260:	68 60 4a 25 f0       	push   $0xf0254a60
f0106265:	e8 ec eb ff ff       	call   f0104e56 <dequeue>
f010626a:	83 c4 10             	add    $0x10,%esp
f010626d:	89 45 f4             	mov    %eax,-0xc(%ebp)

		//Reset the quantum
		//2017: Reset the value of CNT0 for the next clock interval
		kclock_set_quantum(quantums[0]);
f0106270:	a0 e8 cd 2b f0       	mov    0xf02bcde8,%al
f0106275:	0f b6 c0             	movzbl %al,%eax
f0106278:	83 ec 0c             	sub    $0xc,%esp
f010627b:	50                   	push   %eax
f010627c:	e8 31 e9 ff ff       	call   f0104bb2 <kclock_set_quantum>
f0106281:	83 c4 10             	add    $0x10,%esp
f0106284:	eb 26                	jmp    f01062ac <fos_scheduler+0x93>
		//uint16 cnt0 = kclock_read_cnt0_latch() ;
		//cprintf("CLOCK INTERRUPT AFTER RESET: Counter0 Value = %d\n", cnt0 );

	}
	else if (scheduler_method == SCH_MLFQ)
f0106286:	a1 08 ce 2b f0       	mov    0xf02bce08,%eax
f010628b:	83 f8 01             	cmp    $0x1,%eax
f010628e:	75 0a                	jne    f010629a <fos_scheduler+0x81>
	{
		next_env = fos_scheduler_MLFQ();
f0106290:	e8 f9 00 00 00       	call   f010638e <fos_scheduler_MLFQ>
f0106295:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0106298:	eb 12                	jmp    f01062ac <fos_scheduler+0x93>
	}
	else if (scheduler_method == SCH_BSD)
f010629a:	a1 08 ce 2b f0       	mov    0xf02bce08,%eax
f010629f:	83 f8 02             	cmp    $0x2,%eax
f01062a2:	75 08                	jne    f01062ac <fos_scheduler+0x93>
	{
		next_env = fos_scheduler_BSD();
f01062a4:	e8 02 01 00 00       	call   f01063ab <fos_scheduler_BSD>
f01062a9:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}
	//temporarily set the curenv by the next env JUST for checking the scheduler
	//Then: reset it again
	struct Env* old_curenv = curenv;
f01062ac:	a1 74 41 25 f0       	mov    0xf0254174,%eax
f01062b1:	89 45 f0             	mov    %eax,-0x10(%ebp)
	curenv = next_env ;
f01062b4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01062b7:	a3 74 41 25 f0       	mov    %eax,0xf0254174
	chk2(next_env) ;
f01062bc:	83 ec 0c             	sub    $0xc,%esp
f01062bf:	ff 75 f4             	pushl  -0xc(%ebp)
f01062c2:	e8 c4 84 02 00       	call   f012e78b <chk2>
f01062c7:	83 c4 10             	add    $0x10,%esp
	curenv = old_curenv;
f01062ca:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01062cd:	a3 74 41 25 f0       	mov    %eax,0xf0254174

	//sched_print_all();

	if(next_env != NULL)
f01062d2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01062d6:	74 0b                	je     f01062e3 <fos_scheduler+0xca>
	{
		//		cprintf("\nScheduler select program '%s' [%d]... counter = %d\n", next_env->prog_name, next_env->env_id, kclock_read_cnt0());
		//		cprintf("Q0 = %d, Q1 = %d, Q2 = %d, Q3 = %d\n", queue_size(&(env_ready_queues[0])), queue_size(&(env_ready_queues[1])), queue_size(&(env_ready_queues[2])), queue_size(&(env_ready_queues[3])));
		env_run(next_env);
f01062d8:	83 ec 0c             	sub    $0xc,%esp
f01062db:	ff 75 f4             	pushl  -0xc(%ebp)
f01062de:	e8 e0 3a 00 00       	call   f0109dc3 <env_run>
	}
	else
	{
		/*2015*///No more envs... curenv doesn't exist any more! return back to command prompt
		curenv = NULL;
f01062e3:	c7 05 74 41 25 f0 00 	movl   $0x0,0xf0254174
f01062ea:	00 00 00 
		//lcr3(K_PHYSICAL_ADDRESS(ptr_page_directory));
		lcr3(phys_page_directory);
f01062ed:	a1 70 ce 2b f0       	mov    0xf02bce70,%eax
f01062f2:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01062f5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01062f8:	0f 22 d8             	mov    %eax,%cr3

		//cprintf("SP = %x\n", read_esp());

		scheduler_status = SCH_STOPPED;
f01062fb:	c7 05 14 ce 2b f0 00 	movl   $0x0,0xf02bce14
f0106302:	00 00 00 
		//cprintf("[sched] no envs - nothing more to do!\n");
		while (1)
			run_command_prompt(NULL);
f0106305:	83 ec 0c             	sub    $0xc,%esp
f0106308:	6a 00                	push   $0x0
f010630a:	e8 41 b8 ff ff       	call   f0101b50 <run_command_prompt>
f010630f:	83 c4 10             	add    $0x10,%esp
f0106312:	eb f1                	jmp    f0106305 <fos_scheduler+0xec>

f0106314 <sched_init_RR>:

//=============================
// [3] Initialize RR Scheduler:
//=============================
void sched_init_RR(uint8 quantum)
{
f0106314:	55                   	push   %ebp
f0106315:	89 e5                	mov    %esp,%ebp
f0106317:	83 ec 18             	sub    $0x18,%esp
f010631a:	8b 45 08             	mov    0x8(%ebp),%eax
f010631d:	88 45 f4             	mov    %al,-0xc(%ebp)

	// Create 1 ready queue for the RR
	num_of_ready_queues = 1;
f0106320:	c6 05 44 ce 2b f0 01 	movb   $0x1,0xf02bce44
#if USE_KHEAP
	sched_delete_ready_queues();
	env_ready_queues = kmalloc(sizeof(struct Env_Queue));
	quantums = kmalloc(num_of_ready_queues * sizeof(uint8)) ;
#endif
	quantums[0] = quantum;
f0106327:	8a 45 f4             	mov    -0xc(%ebp),%al
f010632a:	a2 e8 cd 2b f0       	mov    %al,0xf02bcde8
	kclock_set_quantum(quantums[0]);
f010632f:	a0 e8 cd 2b f0       	mov    0xf02bcde8,%al
f0106334:	0f b6 c0             	movzbl %al,%eax
f0106337:	83 ec 0c             	sub    $0xc,%esp
f010633a:	50                   	push   %eax
f010633b:	e8 72 e8 ff ff       	call   f0104bb2 <kclock_set_quantum>
f0106340:	83 c4 10             	add    $0x10,%esp
	init_queue(&(env_ready_queues[0]));
f0106343:	83 ec 0c             	sub    $0xc,%esp
f0106346:	68 60 4a 25 f0       	push   $0xf0254a60
f010634b:	e8 34 ea ff ff       	call   f0104d84 <init_queue>
f0106350:	83 c4 10             	add    $0x10,%esp

	//=========================================
	//DON'T CHANGE THESE LINES=================
	scheduler_status = SCH_STOPPED;
f0106353:	c7 05 14 ce 2b f0 00 	movl   $0x0,0xf02bce14
f010635a:	00 00 00 
	scheduler_method = SCH_RR;
f010635d:	c7 05 08 ce 2b f0 00 	movl   $0x0,0xf02bce08
f0106364:	00 00 00 
	//=========================================
	//=========================================
}
f0106367:	90                   	nop
f0106368:	c9                   	leave  
f0106369:	c3                   	ret    

f010636a <sched_init_MLFQ>:

//===============================
// [4] Initialize MLFQ Scheduler:
//===============================
void sched_init_MLFQ(uint8 numOfLevels, uint8 *quantumOfEachLevel)
{
f010636a:	55                   	push   %ebp
f010636b:	89 e5                	mov    %esp,%ebp
f010636d:	83 ec 04             	sub    $0x4,%esp
f0106370:	8b 45 08             	mov    0x8(%ebp),%eax
f0106373:	88 45 fc             	mov    %al,-0x4(%ebp)
	scheduler_status = SCH_STOPPED;
	scheduler_method = SCH_MLFQ;
	//=========================================
	//=========================================
#endif
}
f0106376:	90                   	nop
f0106377:	c9                   	leave  
f0106378:	c3                   	ret    

f0106379 <sched_init_BSD>:

//===============================
// [5] Initialize BSD Scheduler:
//===============================
void sched_init_BSD(uint8 numOfLevels, uint8 quantum)
{
f0106379:	55                   	push   %ebp
f010637a:	89 e5                	mov    %esp,%ebp
f010637c:	83 ec 08             	sub    $0x8,%esp
f010637f:	8b 55 08             	mov    0x8(%ebp),%edx
f0106382:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106385:	88 55 fc             	mov    %dl,-0x4(%ebp)
f0106388:	88 45 f8             	mov    %al,-0x8(%ebp)
	scheduler_status = SCH_STOPPED;
	scheduler_method = SCH_BSD;
	//=========================================
	//=========================================
#endif
}
f010638b:	90                   	nop
f010638c:	c9                   	leave  
f010638d:	c3                   	ret    

f010638e <fos_scheduler_MLFQ>:

//=========================
// [6] MLFQ Scheduler:
//=========================
struct Env* fos_scheduler_MLFQ()
{
f010638e:	55                   	push   %ebp
f010638f:	89 e5                	mov    %esp,%ebp
f0106391:	83 ec 08             	sub    $0x8,%esp
	panic("not implemented");
f0106394:	83 ec 04             	sub    $0x4,%esp
f0106397:	68 6c 2a 13 f0       	push   $0xf0132a6c
f010639c:	68 b9 00 00 00       	push   $0xb9
f01063a1:	68 7c 2a 13 f0       	push   $0xf0132a7c
f01063a6:	e8 05 9e ff ff       	call   f01001b0 <_panic>

f01063ab <fos_scheduler_BSD>:

//=========================
// [7] BSD Scheduler:
//=========================
struct Env* fos_scheduler_BSD()
{
f01063ab:	55                   	push   %ebp
f01063ac:	89 e5                	mov    %esp,%ebp
f01063ae:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'23.MS3 - #5] [2] BSD SCHEDULER - fos_scheduler_BSD
	//Your code is here
	//Comment the following line
	panic("Not implemented yet");
f01063b1:	83 ec 04             	sub    $0x4,%esp
f01063b4:	68 8d 2a 13 f0       	push   $0xf0132a8d
f01063b9:	68 c5 00 00 00       	push   $0xc5
f01063be:	68 7c 2a 13 f0       	push   $0xf0132a7c
f01063c3:	e8 e8 9d ff ff       	call   f01001b0 <_panic>

f01063c8 <clock_interrupt_handler>:
//========================================
// [8] Clock Interrupt Handler
//	  (Automatically Called Every Quantum)
//========================================
void clock_interrupt_handler()
{
f01063c8:	55                   	push   %ebp
f01063c9:	89 e5                	mov    %esp,%ebp
f01063cb:	83 ec 08             	sub    $0x8,%esp

	}


	/********DON'T CHANGE THIS LINE***********/
	ticks++ ;
f01063ce:	a1 20 ce 2b f0       	mov    0xf02bce20,%eax
f01063d3:	8b 15 24 ce 2b f0    	mov    0xf02bce24,%edx
f01063d9:	83 c0 01             	add    $0x1,%eax
f01063dc:	83 d2 00             	adc    $0x0,%edx
f01063df:	a3 20 ce 2b f0       	mov    %eax,0xf02bce20
f01063e4:	89 15 24 ce 2b f0    	mov    %edx,0xf02bce24
	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX))
f01063ea:	83 ec 0c             	sub    $0xc,%esp
f01063ed:	6a 01                	push   $0x1
f01063ef:	e8 c7 78 00 00       	call   f010dcbb <isPageReplacmentAlgorithmLRU>
f01063f4:	83 c4 10             	add    $0x10,%esp
f01063f7:	85 c0                	test   %eax,%eax
f01063f9:	74 05                	je     f0106400 <clock_interrupt_handler+0x38>
	{
		update_WS_time_stamps();
f01063fb:	e8 05 00 00 00       	call   f0106405 <update_WS_time_stamps>
	}
	//cprintf("Clock Handler\n") ;
	fos_scheduler();
f0106400:	e8 14 fe ff ff       	call   f0106219 <fos_scheduler>

f0106405 <update_WS_time_stamps>:
//===================================================================
// [9] Update LRU Timestamp of WS Elements
//	  (Automatically Called Every Quantum in case of LRU Time Approx)
//===================================================================
void update_WS_time_stamps()
{
f0106405:	55                   	push   %ebp
f0106406:	89 e5                	mov    %esp,%ebp
f0106408:	53                   	push   %ebx
f0106409:	83 ec 34             	sub    $0x34,%esp
	struct Env *curr_env_ptr = curenv;
f010640c:	a1 74 41 25 f0       	mov    0xf0254174,%eax
f0106411:	89 45 ec             	mov    %eax,-0x14(%ebp)

	if(curr_env_ptr != NULL)
f0106414:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0106418:	0f 84 a9 01 00 00    	je     f01065c7 <update_WS_time_stamps+0x1c2>
			int i ;
#if USE_KHEAP
			LIST_FOREACH(wse, &(curr_env_ptr->page_WS_list))
			{
#else
			for (i = 0 ; i < (curr_env_ptr->page_WS_max_size); i++)
f010641e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0106425:	e9 9f 00 00 00       	jmp    f01064c9 <update_WS_time_stamps+0xc4>
			{
				wse = &(curr_env_ptr->ptr_pageWorkingSet[i]);
f010642a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010642d:	89 d0                	mov    %edx,%eax
f010642f:	01 c0                	add    %eax,%eax
f0106431:	01 d0                	add    %edx,%eax
f0106433:	c1 e0 03             	shl    $0x3,%eax
f0106436:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
f010643c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010643f:	01 d0                	add    %edx,%eax
f0106441:	83 c0 08             	add    $0x8,%eax
f0106444:	89 45 e8             	mov    %eax,-0x18(%ebp)
				if( wse->empty == 1)
f0106447:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010644a:	8a 40 04             	mov    0x4(%eax),%al
f010644d:	3c 01                	cmp    $0x1,%al
f010644f:	74 74                	je     f01064c5 <update_WS_time_stamps+0xc0>
					continue;
#endif
				//update the time if the page was referenced
				uint32 page_va = wse->virtual_address ;
f0106451:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106454:	8b 00                	mov    (%eax),%eax
f0106456:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				uint32 perm = pt_get_page_permissions(curr_env_ptr->env_page_directory, page_va) ;
f0106459:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010645c:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0106462:	83 ec 08             	sub    $0x8,%esp
f0106465:	ff 75 e4             	pushl  -0x1c(%ebp)
f0106468:	50                   	push   %eax
f0106469:	e8 ec 20 00 00       	call   f010855a <pt_get_page_permissions>
f010646e:	83 c4 10             	add    $0x10,%esp
f0106471:	89 45 e0             	mov    %eax,-0x20(%ebp)
				uint32 oldTimeStamp = wse->time_stamp;
f0106474:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106477:	8b 40 08             	mov    0x8(%eax),%eax
f010647a:	89 45 dc             	mov    %eax,-0x24(%ebp)

				if (perm & PERM_USED)
f010647d:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106480:	83 e0 20             	and    $0x20,%eax
f0106483:	85 c0                	test   %eax,%eax
f0106485:	74 2e                	je     f01064b5 <update_WS_time_stamps+0xb0>
				{
					wse->time_stamp = (oldTimeStamp>>2) | 0x80000000;
f0106487:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010648a:	c1 e8 02             	shr    $0x2,%eax
f010648d:	0d 00 00 00 80       	or     $0x80000000,%eax
f0106492:	89 c2                	mov    %eax,%edx
f0106494:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106497:	89 50 08             	mov    %edx,0x8(%eax)
					pt_set_page_permissions(curr_env_ptr->env_page_directory, page_va, 0 , PERM_USED) ;
f010649a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010649d:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f01064a3:	6a 20                	push   $0x20
f01064a5:	6a 00                	push   $0x0
f01064a7:	ff 75 e4             	pushl  -0x1c(%ebp)
f01064aa:	50                   	push   %eax
f01064ab:	e8 e6 1f 00 00       	call   f0108496 <pt_set_page_permissions>
f01064b0:	83 c4 10             	add    $0x10,%esp
f01064b3:	eb 11                	jmp    f01064c6 <update_WS_time_stamps+0xc1>
				}
				else
				{
					wse->time_stamp = (oldTimeStamp>>2);
f01064b5:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01064b8:	c1 e8 02             	shr    $0x2,%eax
f01064bb:	89 c2                	mov    %eax,%edx
f01064bd:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01064c0:	89 50 08             	mov    %edx,0x8(%eax)
f01064c3:	eb 01                	jmp    f01064c6 <update_WS_time_stamps+0xc1>
#else
			for (i = 0 ; i < (curr_env_ptr->page_WS_max_size); i++)
			{
				wse = &(curr_env_ptr->ptr_pageWorkingSet[i]);
				if( wse->empty == 1)
					continue;
f01064c5:	90                   	nop
			int i ;
#if USE_KHEAP
			LIST_FOREACH(wse, &(curr_env_ptr->page_WS_list))
			{
#else
			for (i = 0 ; i < (curr_env_ptr->page_WS_max_size); i++)
f01064c6:	ff 45 f4             	incl   -0xc(%ebp)
f01064c9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01064cc:	8b 90 7c d5 01 00    	mov    0x1d57c(%eax),%edx
f01064d2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01064d5:	39 c2                	cmp    %eax,%edx
f01064d7:	0f 87 4d ff ff ff    	ja     f010642a <update_WS_time_stamps+0x25>
			}
		}

		{
			int t ;
			for (t = 0 ; t < __TWS_MAX_SIZE; t++)
f01064dd:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01064e4:	e9 d4 00 00 00       	jmp    f01065bd <update_WS_time_stamps+0x1b8>
			{
				if( curr_env_ptr->__ptr_tws[t].empty != 1)
f01064e9:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f01064ec:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01064ef:	89 d0                	mov    %edx,%eax
f01064f1:	01 c0                	add    %eax,%eax
f01064f3:	01 d0                	add    %edx,%eax
f01064f5:	c1 e0 03             	shl    $0x3,%eax
f01064f8:	01 c8                	add    %ecx,%eax
f01064fa:	05 84 d5 01 00       	add    $0x1d584,%eax
f01064ff:	8a 00                	mov    (%eax),%al
f0106501:	3c 01                	cmp    $0x1,%al
f0106503:	0f 84 b1 00 00 00    	je     f01065ba <update_WS_time_stamps+0x1b5>
				{
					//update the time if the page was referenced
					uint32 table_va = curr_env_ptr->__ptr_tws[t].virtual_address;
f0106509:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f010650c:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010650f:	89 d0                	mov    %edx,%eax
f0106511:	01 c0                	add    %eax,%eax
f0106513:	01 d0                	add    %edx,%eax
f0106515:	c1 e0 03             	shl    $0x3,%eax
f0106518:	01 c8                	add    %ecx,%eax
f010651a:	05 80 d5 01 00       	add    $0x1d580,%eax
f010651f:	8b 00                	mov    (%eax),%eax
f0106521:	89 45 d8             	mov    %eax,-0x28(%ebp)
					uint32 oldTimeStamp = curr_env_ptr->__ptr_tws[t].time_stamp;
f0106524:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f0106527:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010652a:	89 d0                	mov    %edx,%eax
f010652c:	01 c0                	add    %eax,%eax
f010652e:	01 d0                	add    %edx,%eax
f0106530:	c1 e0 03             	shl    $0x3,%eax
f0106533:	01 c8                	add    %ecx,%eax
f0106535:	05 88 d5 01 00       	add    $0x1d588,%eax
f010653a:	8b 00                	mov    (%eax),%eax
f010653c:	89 45 d4             	mov    %eax,-0x2c(%ebp)

					if (pd_is_table_used(curr_env_ptr->env_page_directory, table_va))
f010653f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106542:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0106548:	83 ec 08             	sub    $0x8,%esp
f010654b:	ff 75 d8             	pushl  -0x28(%ebp)
f010654e:	50                   	push   %eax
f010654f:	e8 e2 20 00 00       	call   f0108636 <pd_is_table_used>
f0106554:	83 c4 10             	add    $0x10,%esp
f0106557:	85 c0                	test   %eax,%eax
f0106559:	74 3f                	je     f010659a <update_WS_time_stamps+0x195>
					{
						curr_env_ptr->__ptr_tws[t].time_stamp = (oldTimeStamp>>2) | 0x80000000;
f010655b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010655e:	c1 e8 02             	shr    $0x2,%eax
f0106561:	0d 00 00 00 80       	or     $0x80000000,%eax
f0106566:	89 c1                	mov    %eax,%ecx
f0106568:	8b 5d ec             	mov    -0x14(%ebp),%ebx
f010656b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010656e:	89 d0                	mov    %edx,%eax
f0106570:	01 c0                	add    %eax,%eax
f0106572:	01 d0                	add    %edx,%eax
f0106574:	c1 e0 03             	shl    $0x3,%eax
f0106577:	01 d8                	add    %ebx,%eax
f0106579:	05 88 d5 01 00       	add    $0x1d588,%eax
f010657e:	89 08                	mov    %ecx,(%eax)
						pd_set_table_unused(curr_env_ptr->env_page_directory, table_va);
f0106580:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106583:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0106589:	83 ec 08             	sub    $0x8,%esp
f010658c:	ff 75 d8             	pushl  -0x28(%ebp)
f010658f:	50                   	push   %eax
f0106590:	e8 c5 20 00 00       	call   f010865a <pd_set_table_unused>
f0106595:	83 c4 10             	add    $0x10,%esp
f0106598:	eb 20                	jmp    f01065ba <update_WS_time_stamps+0x1b5>
					}
					else
					{
						curr_env_ptr->__ptr_tws[t].time_stamp = (oldTimeStamp>>2);
f010659a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010659d:	c1 e8 02             	shr    $0x2,%eax
f01065a0:	89 c1                	mov    %eax,%ecx
f01065a2:	8b 5d ec             	mov    -0x14(%ebp),%ebx
f01065a5:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01065a8:	89 d0                	mov    %edx,%eax
f01065aa:	01 c0                	add    %eax,%eax
f01065ac:	01 d0                	add    %edx,%eax
f01065ae:	c1 e0 03             	shl    $0x3,%eax
f01065b1:	01 d8                	add    %ebx,%eax
f01065b3:	05 88 d5 01 00       	add    $0x1d588,%eax
f01065b8:	89 08                	mov    %ecx,(%eax)
			}
		}

		{
			int t ;
			for (t = 0 ; t < __TWS_MAX_SIZE; t++)
f01065ba:	ff 45 f0             	incl   -0x10(%ebp)
f01065bd:	83 7d f0 31          	cmpl   $0x31,-0x10(%ebp)
f01065c1:	0f 8e 22 ff ff ff    	jle    f01064e9 <update_WS_time_stamps+0xe4>
					}
				}
			}
		}
	}
}
f01065c7:	90                   	nop
f01065c8:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01065cb:	c9                   	leave  
f01065cc:	c3                   	ret    

f01065cd <pic_init>:
static bool didinit;

/* Initialize the 8259A interrupt controllers. */
void
pic_init(void)
{
f01065cd:	55                   	push   %ebp
f01065ce:	89 e5                	mov    %esp,%ebp
f01065d0:	83 ec 58             	sub    $0x58,%esp
	didinit = 1;
f01065d3:	c7 05 6c 41 25 f0 01 	movl   $0x1,0xf025416c
f01065da:	00 00 00 
f01065dd:	c7 45 f4 21 00 00 00 	movl   $0x21,-0xc(%ebp)
f01065e4:	c6 45 b2 ff          	movb   $0xff,-0x4e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01065e8:	8a 45 b2             	mov    -0x4e(%ebp),%al
f01065eb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01065ee:	ee                   	out    %al,(%dx)
f01065ef:	c7 45 f0 a1 00 00 00 	movl   $0xa1,-0x10(%ebp)
f01065f6:	c6 45 b3 ff          	movb   $0xff,-0x4d(%ebp)
f01065fa:	8a 45 b3             	mov    -0x4d(%ebp),%al
f01065fd:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106600:	ee                   	out    %al,(%dx)
f0106601:	c7 45 ec 20 00 00 00 	movl   $0x20,-0x14(%ebp)
f0106608:	c6 45 b4 11          	movb   $0x11,-0x4c(%ebp)
f010660c:	8a 45 b4             	mov    -0x4c(%ebp),%al
f010660f:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0106612:	ee                   	out    %al,(%dx)
f0106613:	c7 45 e8 21 00 00 00 	movl   $0x21,-0x18(%ebp)
f010661a:	c6 45 b5 20          	movb   $0x20,-0x4b(%ebp)
f010661e:	8a 45 b5             	mov    -0x4b(%ebp),%al
f0106621:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0106624:	ee                   	out    %al,(%dx)
f0106625:	c7 45 e4 21 00 00 00 	movl   $0x21,-0x1c(%ebp)
f010662c:	c6 45 b6 04          	movb   $0x4,-0x4a(%ebp)
f0106630:	8a 45 b6             	mov    -0x4a(%ebp),%al
f0106633:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0106636:	ee                   	out    %al,(%dx)
f0106637:	c7 45 e0 21 00 00 00 	movl   $0x21,-0x20(%ebp)
f010663e:	c6 45 b7 03          	movb   $0x3,-0x49(%ebp)
f0106642:	8a 45 b7             	mov    -0x49(%ebp),%al
f0106645:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0106648:	ee                   	out    %al,(%dx)
f0106649:	c7 45 dc a0 00 00 00 	movl   $0xa0,-0x24(%ebp)
f0106650:	c6 45 b8 11          	movb   $0x11,-0x48(%ebp)
f0106654:	8a 45 b8             	mov    -0x48(%ebp),%al
f0106657:	8b 55 dc             	mov    -0x24(%ebp),%edx
f010665a:	ee                   	out    %al,(%dx)
f010665b:	c7 45 d8 a1 00 00 00 	movl   $0xa1,-0x28(%ebp)
f0106662:	c6 45 b9 28          	movb   $0x28,-0x47(%ebp)
f0106666:	8a 45 b9             	mov    -0x47(%ebp),%al
f0106669:	8b 55 d8             	mov    -0x28(%ebp),%edx
f010666c:	ee                   	out    %al,(%dx)
f010666d:	c7 45 d4 a1 00 00 00 	movl   $0xa1,-0x2c(%ebp)
f0106674:	c6 45 ba 02          	movb   $0x2,-0x46(%ebp)
f0106678:	8a 45 ba             	mov    -0x46(%ebp),%al
f010667b:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f010667e:	ee                   	out    %al,(%dx)
f010667f:	c7 45 d0 a1 00 00 00 	movl   $0xa1,-0x30(%ebp)
f0106686:	c6 45 bb 01          	movb   $0x1,-0x45(%ebp)
f010668a:	8a 45 bb             	mov    -0x45(%ebp),%al
f010668d:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0106690:	ee                   	out    %al,(%dx)
f0106691:	c7 45 cc 20 00 00 00 	movl   $0x20,-0x34(%ebp)
f0106698:	c6 45 bc 68          	movb   $0x68,-0x44(%ebp)
f010669c:	8a 45 bc             	mov    -0x44(%ebp),%al
f010669f:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01066a2:	ee                   	out    %al,(%dx)
f01066a3:	c7 45 c8 20 00 00 00 	movl   $0x20,-0x38(%ebp)
f01066aa:	c6 45 bd 0a          	movb   $0xa,-0x43(%ebp)
f01066ae:	8a 45 bd             	mov    -0x43(%ebp),%al
f01066b1:	8b 55 c8             	mov    -0x38(%ebp),%edx
f01066b4:	ee                   	out    %al,(%dx)
f01066b5:	c7 45 c4 a0 00 00 00 	movl   $0xa0,-0x3c(%ebp)
f01066bc:	c6 45 be 68          	movb   $0x68,-0x42(%ebp)
f01066c0:	8a 45 be             	mov    -0x42(%ebp),%al
f01066c3:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01066c6:	ee                   	out    %al,(%dx)
f01066c7:	c7 45 c0 a0 00 00 00 	movl   $0xa0,-0x40(%ebp)
f01066ce:	c6 45 bf 0a          	movb   $0xa,-0x41(%ebp)
f01066d2:	8a 45 bf             	mov    -0x41(%ebp),%al
f01066d5:	8b 55 c0             	mov    -0x40(%ebp),%edx
f01066d8:	ee                   	out    %al,(%dx)
	outb(IO_PIC1, 0x0a);             /* read IRR by default */

	outb(IO_PIC2, 0x68);               /* OCW3 */
	outb(IO_PIC2, 0x0a);               /* OCW3 */

	if (irq_mask_8259A != 0xFFFF)
f01066d9:	66 a1 64 f9 18 f0    	mov    0xf018f964,%ax
f01066df:	66 83 f8 ff          	cmp    $0xffff,%ax
f01066e3:	74 15                	je     f01066fa <pic_init+0x12d>
		irq_setmask_8259A(irq_mask_8259A);
f01066e5:	66 a1 64 f9 18 f0    	mov    0xf018f964,%ax
f01066eb:	0f b7 c0             	movzwl %ax,%eax
f01066ee:	83 ec 0c             	sub    $0xc,%esp
f01066f1:	50                   	push   %eax
f01066f2:	e8 06 00 00 00       	call   f01066fd <irq_setmask_8259A>
f01066f7:	83 c4 10             	add    $0x10,%esp
}
f01066fa:	90                   	nop
f01066fb:	c9                   	leave  
f01066fc:	c3                   	ret    

f01066fd <irq_setmask_8259A>:

void
irq_setmask_8259A(uint16 mask)
{
f01066fd:	55                   	push   %ebp
f01066fe:	89 e5                	mov    %esp,%ebp
f0106700:	83 ec 14             	sub    $0x14,%esp
f0106703:	8b 45 08             	mov    0x8(%ebp),%eax
f0106706:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	int i;
	irq_mask_8259A = mask;
f010670a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010670d:	66 a3 64 f9 18 f0    	mov    %ax,0xf018f964
	if (!didinit)
f0106713:	a1 6c 41 25 f0       	mov    0xf025416c,%eax
f0106718:	85 c0                	test   %eax,%eax
f010671a:	74 34                	je     f0106750 <irq_setmask_8259A+0x53>
		return;
	outb(IO_PIC1+1, (char)mask);
f010671c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010671f:	0f b6 c0             	movzbl %al,%eax
f0106722:	c7 45 fc 21 00 00 00 	movl   $0x21,-0x4(%ebp)
f0106729:	88 45 f6             	mov    %al,-0xa(%ebp)
f010672c:	8a 45 f6             	mov    -0xa(%ebp),%al
f010672f:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0106732:	ee                   	out    %al,(%dx)
	outb(IO_PIC2+1, (char)(mask >> 8));
f0106733:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106736:	66 c1 e8 08          	shr    $0x8,%ax
f010673a:	0f b6 c0             	movzbl %al,%eax
f010673d:	c7 45 f8 a1 00 00 00 	movl   $0xa1,-0x8(%ebp)
f0106744:	88 45 f7             	mov    %al,-0x9(%ebp)
f0106747:	8a 45 f7             	mov    -0x9(%ebp),%al
f010674a:	8b 55 f8             	mov    -0x8(%ebp),%edx
f010674d:	ee                   	out    %al,(%dx)
f010674e:	eb 01                	jmp    f0106751 <irq_setmask_8259A+0x54>
irq_setmask_8259A(uint16 mask)
{
	int i;
	irq_mask_8259A = mask;
	if (!didinit)
		return;
f0106750:	90                   	nop
	//cprintf("enabled interrupts:");
	//for (i = 0; i < 16; i++)
		//if (~mask & (1<<i))
			//cprintf(" %d", i);
	//cprintf("\n");
}
f0106751:	c9                   	leave  
f0106752:	c3                   	ret    

f0106753 <initialize_kernel_VM>:
//
// From USER_TOP to USER_LIMIT, the user is allowed to read but not write.
// Above USER_LIMIT the user cannot read (or write).

void initialize_kernel_VM()
{
f0106753:	55                   	push   %ebp
f0106754:	89 e5                	mov    %esp,%ebp
f0106756:	83 ec 38             	sub    $0x38,%esp
	//panic("initialize_kernel_VM: This function is not finished\n");

	//////////////////////////////////////////////////////////////////////
	// create initial page directory.

	ptr_page_directory = boot_allocate_space(PAGE_SIZE, PAGE_SIZE);
f0106759:	83 ec 08             	sub    $0x8,%esp
f010675c:	68 00 10 00 00       	push   $0x1000
f0106761:	68 00 10 00 00       	push   $0x1000
f0106766:	e8 0a 02 00 00       	call   f0106975 <boot_allocate_space>
f010676b:	83 c4 10             	add    $0x10,%esp
f010676e:	a3 30 ce 2b f0       	mov    %eax,0xf02bce30
	/*2023: this line is moved to the boot_allocate_space()*/ //memset(ptr_page_directory, 0, PAGE_SIZE);
	phys_page_directory = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory);
f0106773:	a1 30 ce 2b f0       	mov    0xf02bce30,%eax
f0106778:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010677b:	81 7d e8 ff ff ff ef 	cmpl   $0xefffffff,-0x18(%ebp)
f0106782:	77 14                	ja     f0106798 <initialize_kernel_VM+0x45>
f0106784:	ff 75 e8             	pushl  -0x18(%ebp)
f0106787:	68 a4 2a 13 f0       	push   $0xf0132aa4
f010678c:	6a 45                	push   $0x45
f010678e:	68 d8 2a 13 f0       	push   $0xf0132ad8
f0106793:	e8 18 9a ff ff       	call   f01001b0 <_panic>
f0106798:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010679b:	05 00 00 00 10       	add    $0x10000000,%eax
f01067a0:	a3 70 ce 2b f0       	mov    %eax,0xf02bce70
	// Map the kernel stack with VA range :
	//  [KERNEL_STACK_TOP-KERNEL_STACK_SIZE, KERNEL_STACK_TOP),
	// to physical address : "phys_stack_bottom".
	//     Permissions: kernel RW, user NONE
	// Your code goes here:
	boot_map_range(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE, KERNEL_STACK_SIZE, STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom), PERM_WRITEABLE) ;
f01067a5:	c7 45 e4 00 70 18 f0 	movl   $0xf0187000,-0x1c(%ebp)
f01067ac:	81 7d e4 ff ff ff ef 	cmpl   $0xefffffff,-0x1c(%ebp)
f01067b3:	77 14                	ja     f01067c9 <initialize_kernel_VM+0x76>
f01067b5:	ff 75 e4             	pushl  -0x1c(%ebp)
f01067b8:	68 a4 2a 13 f0       	push   $0xf0132aa4
f01067bd:	6a 4d                	push   $0x4d
f01067bf:	68 d8 2a 13 f0       	push   $0xf0132ad8
f01067c4:	e8 e7 99 ff ff       	call   f01001b0 <_panic>
f01067c9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01067cc:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edx
f01067d2:	a1 30 ce 2b f0       	mov    0xf02bce30,%eax
f01067d7:	83 ec 0c             	sub    $0xc,%esp
f01067da:	6a 02                	push   $0x2
f01067dc:	52                   	push   %edx
f01067dd:	68 00 80 00 00       	push   $0x8000
f01067e2:	68 00 80 bf ef       	push   $0xefbf8000
f01067e7:	50                   	push   %eax
f01067e8:	e8 fc 01 00 00       	call   f01069e9 <boot_map_range>
f01067ed:	83 c4 20             	add    $0x20,%esp
	// Permissions: kernel RW, user NONE
	// Your code goes here:

	//2016:
	//boot tables
	unsigned long long sva = KERNEL_BASE;
f01067f0:	c7 45 f0 00 00 00 f0 	movl   $0xf0000000,-0x10(%ebp)
f01067f7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	unsigned int nTables=0;
f01067fe:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	for (;sva < 0xFFFFFFFF;  sva += PTSIZE)
f0106805:	eb 25                	jmp    f010682c <initialize_kernel_VM+0xd9>
	{
		++nTables;
f0106807:	ff 45 ec             	incl   -0x14(%ebp)
		boot_get_page_table(ptr_page_directory, (uint32)sva, 1);
f010680a:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010680d:	a1 30 ce 2b f0       	mov    0xf02bce30,%eax
f0106812:	83 ec 04             	sub    $0x4,%esp
f0106815:	6a 01                	push   $0x1
f0106817:	52                   	push   %edx
f0106818:	50                   	push   %eax
f0106819:	e8 3f 02 00 00       	call   f0106a5d <boot_get_page_table>
f010681e:	83 c4 10             	add    $0x10,%esp

	//2016:
	//boot tables
	unsigned long long sva = KERNEL_BASE;
	unsigned int nTables=0;
	for (;sva < 0xFFFFFFFF;  sva += PTSIZE)
f0106821:	81 45 f0 00 00 40 00 	addl   $0x400000,-0x10(%ebp)
f0106828:	83 55 f4 00          	adcl   $0x0,-0xc(%ebp)
f010682c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0106830:	72 d5                	jb     f0106807 <initialize_kernel_VM+0xb4>
f0106832:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0106836:	77 06                	ja     f010683e <initialize_kernel_VM+0xeb>
f0106838:	83 7d f0 fe          	cmpl   $0xfffffffe,-0x10(%ebp)
f010683c:	76 c9                	jbe    f0106807 <initialize_kernel_VM+0xb4>
	//    - frames_info -- kernel RW, user NONE
	//    - the image mapped at READ_ONLY_FRAMES_INFO  -- kernel R, user R
	// Your code goes here:
	//cprintf("size of WorkingSetPage = %d\n",sizeof(struct WorkingSetPage));
	uint32 array_size;
	array_size = number_of_frames * sizeof(struct FrameInfo) ;
f010683e:	8b 15 d0 cd 2b f0    	mov    0xf02bcdd0,%edx
f0106844:	89 d0                	mov    %edx,%eax
f0106846:	01 c0                	add    %eax,%eax
f0106848:	01 d0                	add    %edx,%eax
f010684a:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f0106851:	01 c8                	add    %ecx,%eax
f0106853:	01 d0                	add    %edx,%eax
f0106855:	89 45 e0             	mov    %eax,-0x20(%ebp)
	frames_info = boot_allocate_space(array_size, PAGE_SIZE);
f0106858:	83 ec 08             	sub    $0x8,%esp
f010685b:	68 00 10 00 00       	push   $0x1000
f0106860:	ff 75 e0             	pushl  -0x20(%ebp)
f0106863:	e8 0d 01 00 00       	call   f0106975 <boot_allocate_space>
f0106868:	83 c4 10             	add    $0x10,%esp
f010686b:	a3 10 ce 2b f0       	mov    %eax,0xf02bce10
	//2016: Not valid any more since the RAM size exceed the 64 MB limit. This lead to the
	// 		size of "frames_info" can exceed the 4 MB space for "READ_ONLY_FRAMES_INFO"
	//boot_map_range(ptr_page_directory, READ_ONLY_FRAMES_INFO, array_size, STATIC_KERNEL_PHYSICAL_ADDRESS(frames_info),PERM_USER) ;


	uint32 disk_array_size = PAGES_PER_FILE * sizeof(struct FrameInfo);
f0106870:	c7 45 dc 00 e0 38 00 	movl   $0x38e000,-0x24(%ebp)
	disk_frames_info = boot_allocate_space(disk_array_size , PAGE_SIZE);
f0106877:	83 ec 08             	sub    $0x8,%esp
f010687a:	68 00 10 00 00       	push   $0x1000
f010687f:	ff 75 dc             	pushl  -0x24(%ebp)
f0106882:	e8 ee 00 00 00       	call   f0106975 <boot_allocate_space>
f0106887:	83 c4 10             	add    $0x10,%esp
f010688a:	a3 50 4a 25 f0       	mov    %eax,0xf0254a50
	/*2023: this line is moved to the boot_allocate_space()*/ //memset(disk_frames_info , 0, disk_array_size);

	// This allows the kernel & user to access any page table entry using a
	// specified VA for each: VPT for kernel and UVPT for User.
	setup_listing_to_all_page_tables_entries();
f010688f:	e8 fe 04 00 00       	call   f0106d92 <setup_listing_to_all_page_tables_entries>
	// Permissions:
	//    - envs itself -- kernel RW, user NONE
	//    - the image of envs mapped at UENVS  -- kernel R, user R

	// LAB 3: Your code here.
	cprintf("Max Envs = %d, Nearest Pow of 2 = %d\n",NENV, NEARPOW2NENV);
f0106894:	83 ec 0c             	sub    $0xc,%esp
f0106897:	6a 08                	push   $0x8
f0106899:	e8 65 79 02 00       	call   f012e203 <nearest_pow2_ceil>
f010689e:	83 c4 10             	add    $0x10,%esp
f01068a1:	83 ec 04             	sub    $0x4,%esp
f01068a4:	50                   	push   %eax
f01068a5:	6a 08                	push   $0x8
f01068a7:	68 f8 2a 13 f0       	push   $0xf0132af8
f01068ac:	e8 80 a5 ff ff       	call   f0100e31 <cprintf>
f01068b1:	83 c4 10             	add    $0x10,%esp
	int envs_size = NENV * sizeof(struct Env) ;
f01068b4:	c7 45 d8 00 d5 0e 00 	movl   $0xed500,-0x28(%ebp)

	//allocate space for "envs" array aligned on 4KB boundary
	envs = boot_allocate_space(envs_size, PAGE_SIZE);
f01068bb:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01068be:	83 ec 08             	sub    $0x8,%esp
f01068c1:	68 00 10 00 00       	push   $0x1000
f01068c6:	50                   	push   %eax
f01068c7:	e8 a9 00 00 00       	call   f0106975 <boot_allocate_space>
f01068cc:	83 c4 10             	add    $0x10,%esp
f01068cf:	a3 70 41 25 f0       	mov    %eax,0xf0254170
	/*2023: this line is moved to the boot_allocate_space()*/ //memset(envs , 0, envs_size);

	//make the user to access this array by mapping it to UPAGES linear address (UPAGES is in User/Kernel space)
	boot_map_range(ptr_page_directory, UENVS, envs_size, STATIC_KERNEL_PHYSICAL_ADDRESS(envs), PERM_USER) ;
f01068d4:	a1 70 41 25 f0       	mov    0xf0254170,%eax
f01068d9:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f01068dc:	81 7d d4 ff ff ff ef 	cmpl   $0xefffffff,-0x2c(%ebp)
f01068e3:	77 17                	ja     f01068fc <initialize_kernel_VM+0x1a9>
f01068e5:	ff 75 d4             	pushl  -0x2c(%ebp)
f01068e8:	68 a4 2a 13 f0       	push   $0xf0132aa4
f01068ed:	68 96 00 00 00       	push   $0x96
f01068f2:	68 d8 2a 13 f0       	push   $0xf0132ad8
f01068f7:	e8 b4 98 ff ff       	call   f01001b0 <_panic>
f01068fc:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01068ff:	8d 88 00 00 00 10    	lea    0x10000000(%eax),%ecx
f0106905:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0106908:	a1 30 ce 2b f0       	mov    0xf02bce30,%eax
f010690d:	83 ec 0c             	sub    $0xc,%esp
f0106910:	6a 04                	push   $0x4
f0106912:	51                   	push   %ecx
f0106913:	52                   	push   %edx
f0106914:	68 00 00 c0 ee       	push   $0xeec00000
f0106919:	50                   	push   %eax
f010691a:	e8 ca 00 00 00       	call   f01069e9 <boot_map_range>
f010691f:	83 c4 20             	add    $0x20,%esp

	//update permissions of the corresponding entry in page directory to make it USER with PERMISSION read only
	ptr_page_directory[PDX(UENVS)] = ptr_page_directory[PDX(UENVS)]|(PERM_USER|(PERM_PRESENT & (~PERM_WRITEABLE)));
f0106922:	a1 30 ce 2b f0       	mov    0xf02bce30,%eax
f0106927:	05 ec 0e 00 00       	add    $0xeec,%eax
f010692c:	8b 15 30 ce 2b f0    	mov    0xf02bce30,%edx
f0106932:	81 c2 ec 0e 00 00    	add    $0xeec,%edx
f0106938:	8b 12                	mov    (%edx),%edx
f010693a:	83 ca 05             	or     $0x5,%edx
f010693d:	89 10                	mov    %edx,(%eax)
		// map all used pages so far for the kernel
		boot_map_range(ptr_page_directory, KERNEL_BASE, (uint32)ptr_free_mem - KERNEL_BASE, 0, PERM_WRITEABLE) ;
	}
#else
	{
		boot_map_range(ptr_page_directory, KERNEL_BASE, 0xFFFFFFFF - KERNEL_BASE, 0, PERM_WRITEABLE) ;
f010693f:	a1 30 ce 2b f0       	mov    0xf02bce30,%eax
f0106944:	83 ec 0c             	sub    $0xc,%esp
f0106947:	6a 02                	push   $0x2
f0106949:	6a 00                	push   $0x0
f010694b:	68 ff ff ff 0f       	push   $0xfffffff
f0106950:	68 00 00 00 f0       	push   $0xf0000000
f0106955:	50                   	push   %eax
f0106956:	e8 8e 00 00 00       	call   f01069e9 <boot_map_range>
f010695b:	83 c4 20             	add    $0x20,%esp
	}
#endif
	// Check that the initial page directory has been set up correctly.
	check_boot_pgdir();
f010695e:	e8 77 80 02 00       	call   f012e9da <check_boot_pgdir>

	memory_scarce_threshold_percentage = DEFAULT_MEM_SCARCE_PERCENTAGE;	// Memory remains plentiful till % of free frames gets below 25% of the memory space
f0106963:	c7 05 c0 a9 2b f0 19 	movl   $0x19,0xf02ba9c0
f010696a:	00 00 00 

	/*
	NOW: Turn off the segmentation by setting the segments' base to 0, and
	turn on the paging by setting the corresponding flags in control register 0 (cr0)
	 */
	turn_on_paging() ;
f010696d:	e8 20 03 00 00       	call   f0106c92 <turn_on_paging>
}
f0106972:	90                   	nop
f0106973:	c9                   	leave  
f0106974:	c3                   	ret    

f0106975 <boot_allocate_space>:
// It's too early to run out of memory.
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
void* boot_allocate_space(uint32 size, uint32 align)
{
f0106975:	55                   	push   %ebp
f0106976:	89 e5                	mov    %esp,%ebp
f0106978:	83 ec 18             	sub    $0x18,%esp
	// Initialize ptr_free_mem if this is the first time.
	// 'end_of_kernel' is a symbol automatically generated by the linker,
	// which points to the end of the kernel-
	// i.e., the first virtual address that the linker
	// did not assign to any kernel code or global variables.
	if (ptr_free_mem == 0)
f010697b:	a1 2c ce 2b f0       	mov    0xf02bce2c,%eax
f0106980:	85 c0                	test   %eax,%eax
f0106982:	75 0a                	jne    f010698e <boot_allocate_space+0x19>
		ptr_free_mem = end_of_kernel;
f0106984:	c7 05 2c ce 2b f0 6c 	movl   $0xf02df56c,0xf02bce2c
f010698b:	f5 2d f0 

	// Your code here:
	//	Step 1: round ptr_free_mem up to be aligned properly
	ptr_free_mem = ROUNDUP(ptr_free_mem, align) ;
f010698e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106991:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0106994:	a1 2c ce 2b f0       	mov    0xf02bce2c,%eax
f0106999:	89 c2                	mov    %eax,%edx
f010699b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010699e:	01 d0                	add    %edx,%eax
f01069a0:	48                   	dec    %eax
f01069a1:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01069a4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01069a7:	ba 00 00 00 00       	mov    $0x0,%edx
f01069ac:	f7 75 f4             	divl   -0xc(%ebp)
f01069af:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01069b2:	29 d0                	sub    %edx,%eax
f01069b4:	a3 2c ce 2b f0       	mov    %eax,0xf02bce2c

	//	Step 2: save current value of ptr_free_mem as allocated space
	void *ptr_allocated_mem;
	ptr_allocated_mem = ptr_free_mem ;
f01069b9:	a1 2c ce 2b f0       	mov    0xf02bce2c,%eax
f01069be:	89 45 ec             	mov    %eax,-0x14(%ebp)

	//	Step 3: increase ptr_free_mem to record allocation
	ptr_free_mem += size ;
f01069c1:	8b 15 2c ce 2b f0    	mov    0xf02bce2c,%edx
f01069c7:	8b 45 08             	mov    0x8(%ebp),%eax
f01069ca:	01 d0                	add    %edx,%eax
f01069cc:	a3 2c ce 2b f0       	mov    %eax,0xf02bce2c

	//// 2016: Step 3.5: initialize allocated space by ZEROOOOOOOOOOOOOO
	/*2023*/ /*THIS LINE IS UNCOMMENTED To Ensure that any boot allocations ARE SET TO ZERO
	 * This is mainly to ensure that any restart will be fresh and no grabage data will be exist
	 */
	memset(ptr_allocated_mem, 0, size);
f01069d1:	83 ec 04             	sub    $0x4,%esp
f01069d4:	ff 75 08             	pushl  0x8(%ebp)
f01069d7:	6a 00                	push   $0x0
f01069d9:	ff 75 ec             	pushl  -0x14(%ebp)
f01069dc:	e8 85 8c 02 00       	call   f012f666 <memset>
f01069e1:	83 c4 10             	add    $0x10,%esp

	//	Step 4: return allocated space
	return ptr_allocated_mem ;
f01069e4:	8b 45 ec             	mov    -0x14(%ebp),%eax

}
f01069e7:	c9                   	leave  
f01069e8:	c3                   	ret    

f01069e9 <boot_map_range>:
//
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
void boot_map_range(uint32 *ptr_page_directory, uint32 virtual_address, uint32 size, uint32 physical_address, int perm)
{
f01069e9:	55                   	push   %ebp
f01069ea:	89 e5                	mov    %esp,%ebp
f01069ec:	83 ec 18             	sub    $0x18,%esp
	int i = 0 ;
f01069ef:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	//physical_address = ROUNDUP(physical_address, PAGE_SIZE) ;
	///we assume here that all addresses are given divisible by 4 KB, look at boot_allocate_space ...

	for (i = 0 ; i < size ; i += PAGE_SIZE)
f01069f6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01069fd:	eb 53                	jmp    f0106a52 <boot_map_range+0x69>
	{
		uint32 *ptr_page_table = boot_get_page_table(ptr_page_directory, virtual_address, 1) ;
f01069ff:	83 ec 04             	sub    $0x4,%esp
f0106a02:	6a 01                	push   $0x1
f0106a04:	ff 75 0c             	pushl  0xc(%ebp)
f0106a07:	ff 75 08             	pushl  0x8(%ebp)
f0106a0a:	e8 4e 00 00 00       	call   f0106a5d <boot_get_page_table>
f0106a0f:	83 c4 10             	add    $0x10,%esp
f0106a12:	89 45 f0             	mov    %eax,-0x10(%ebp)
		uint32 index_page_table = PTX(virtual_address);
f0106a15:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106a18:	c1 e8 0c             	shr    $0xc,%eax
f0106a1b:	25 ff 03 00 00       	and    $0x3ff,%eax
f0106a20:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//LOG_VARS("\nCONSTRUCT_ENTRY = %x",physical_address);
		ptr_page_table[index_page_table] = CONSTRUCT_ENTRY(physical_address, perm | PERM_PRESENT) ;
f0106a23:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106a26:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106a2d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106a30:	01 c2                	add    %eax,%edx
f0106a32:	8b 45 18             	mov    0x18(%ebp),%eax
f0106a35:	0b 45 14             	or     0x14(%ebp),%eax
f0106a38:	83 c8 01             	or     $0x1,%eax
f0106a3b:	89 02                	mov    %eax,(%edx)

		physical_address += PAGE_SIZE ;
f0106a3d:	81 45 14 00 10 00 00 	addl   $0x1000,0x14(%ebp)
		virtual_address += PAGE_SIZE ;
f0106a44:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
{
	int i = 0 ;
	//physical_address = ROUNDUP(physical_address, PAGE_SIZE) ;
	///we assume here that all addresses are given divisible by 4 KB, look at boot_allocate_space ...

	for (i = 0 ; i < size ; i += PAGE_SIZE)
f0106a4b:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0106a52:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106a55:	3b 45 10             	cmp    0x10(%ebp),%eax
f0106a58:	72 a5                	jb     f01069ff <boot_map_range+0x16>
		ptr_page_table[index_page_table] = CONSTRUCT_ENTRY(physical_address, perm | PERM_PRESENT) ;

		physical_address += PAGE_SIZE ;
		virtual_address += PAGE_SIZE ;
	}
}
f0106a5a:	90                   	nop
f0106a5b:	c9                   	leave  
f0106a5c:	c3                   	ret    

f0106a5d <boot_get_page_table>:
// boot_get_page_table cannot fail.  It's too early to fail.
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
uint32* boot_get_page_table(uint32 *ptr_page_directory, uint32 virtual_address, int create)
{
f0106a5d:	55                   	push   %ebp
f0106a5e:	89 e5                	mov    %esp,%ebp
f0106a60:	83 ec 28             	sub    $0x28,%esp
	uint32 index_page_directory = PDX(virtual_address);
f0106a63:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106a66:	c1 e8 16             	shr    $0x16,%eax
f0106a69:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 page_directory_entry = ptr_page_directory[index_page_directory];
f0106a6c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106a6f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106a76:	8b 45 08             	mov    0x8(%ebp),%eax
f0106a79:	01 d0                	add    %edx,%eax
f0106a7b:	8b 00                	mov    (%eax),%eax
f0106a7d:	89 45 f0             	mov    %eax,-0x10(%ebp)

	//cprintf("boot d ind = %d, entry = %x\n",index_page_directory, page_directory_entry);
	uint32 phys_page_table = EXTRACT_ADDRESS(page_directory_entry);
f0106a80:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106a83:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106a88:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 *ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(phys_page_table);
f0106a8b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106a8e:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0106a91:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106a94:	c1 e8 0c             	shr    $0xc,%eax
f0106a97:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0106a9a:	a1 d0 cd 2b f0       	mov    0xf02bcdd0,%eax
f0106a9f:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f0106aa2:	72 17                	jb     f0106abb <boot_get_page_table+0x5e>
f0106aa4:	ff 75 e8             	pushl  -0x18(%ebp)
f0106aa7:	68 20 2b 13 f0       	push   $0xf0132b20
f0106aac:	68 18 01 00 00       	push   $0x118
f0106ab1:	68 d8 2a 13 f0       	push   $0xf0132ad8
f0106ab6:	e8 f5 96 ff ff       	call   f01001b0 <_panic>
f0106abb:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106abe:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0106ac3:	89 45 e0             	mov    %eax,-0x20(%ebp)
	if (phys_page_table == 0)
f0106ac6:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0106aca:	75 72                	jne    f0106b3e <boot_get_page_table+0xe1>
	{
		if (create)
f0106acc:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0106ad0:	74 65                	je     f0106b37 <boot_get_page_table+0xda>
		{
			ptr_page_table = boot_allocate_space(PAGE_SIZE, PAGE_SIZE) ;
f0106ad2:	83 ec 08             	sub    $0x8,%esp
f0106ad5:	68 00 10 00 00       	push   $0x1000
f0106ada:	68 00 10 00 00       	push   $0x1000
f0106adf:	e8 91 fe ff ff       	call   f0106975 <boot_allocate_space>
f0106ae4:	83 c4 10             	add    $0x10,%esp
f0106ae7:	89 45 e0             	mov    %eax,-0x20(%ebp)
			phys_page_table = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_table);
f0106aea:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106aed:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0106af0:	81 7d dc ff ff ff ef 	cmpl   $0xefffffff,-0x24(%ebp)
f0106af7:	77 17                	ja     f0106b10 <boot_get_page_table+0xb3>
f0106af9:	ff 75 dc             	pushl  -0x24(%ebp)
f0106afc:	68 a4 2a 13 f0       	push   $0xf0132aa4
f0106b01:	68 1e 01 00 00       	push   $0x11e
f0106b06:	68 d8 2a 13 f0       	push   $0xf0132ad8
f0106b0b:	e8 a0 96 ff ff       	call   f01001b0 <_panic>
f0106b10:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0106b13:	05 00 00 00 10       	add    $0x10000000,%eax
f0106b18:	89 45 ec             	mov    %eax,-0x14(%ebp)
			ptr_page_directory[index_page_directory] = CONSTRUCT_ENTRY(phys_page_table, PERM_PRESENT | PERM_WRITEABLE);
f0106b1b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106b1e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106b25:	8b 45 08             	mov    0x8(%ebp),%eax
f0106b28:	01 d0                	add    %edx,%eax
f0106b2a:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0106b2d:	83 ca 03             	or     $0x3,%edx
f0106b30:	89 10                	mov    %edx,(%eax)
			return ptr_page_table ;
f0106b32:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106b35:	eb 0a                	jmp    f0106b41 <boot_get_page_table+0xe4>
		}
		else
			return 0 ;
f0106b37:	b8 00 00 00 00       	mov    $0x0,%eax
f0106b3c:	eb 03                	jmp    f0106b41 <boot_get_page_table+0xe4>
	}
	return ptr_page_table ;
f0106b3e:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
f0106b41:	c9                   	leave  
f0106b42:	c3                   	ret    

f0106b43 <nvram_read>:


int nvram_read(int r)
{
f0106b43:	55                   	push   %ebp
f0106b44:	89 e5                	mov    %esp,%ebp
f0106b46:	53                   	push   %ebx
f0106b47:	83 ec 04             	sub    $0x4,%esp
	return mc146818_read(r) | (mc146818_read(r + 1) << 8);
f0106b4a:	8b 45 08             	mov    0x8(%ebp),%eax
f0106b4d:	83 ec 0c             	sub    $0xc,%esp
f0106b50:	50                   	push   %eax
f0106b51:	e8 6a de ff ff       	call   f01049c0 <mc146818_read>
f0106b56:	83 c4 10             	add    $0x10,%esp
f0106b59:	89 c3                	mov    %eax,%ebx
f0106b5b:	8b 45 08             	mov    0x8(%ebp),%eax
f0106b5e:	40                   	inc    %eax
f0106b5f:	83 ec 0c             	sub    $0xc,%esp
f0106b62:	50                   	push   %eax
f0106b63:	e8 58 de ff ff       	call   f01049c0 <mc146818_read>
f0106b68:	83 c4 10             	add    $0x10,%esp
f0106b6b:	c1 e0 08             	shl    $0x8,%eax
f0106b6e:	09 d8                	or     %ebx,%eax
}
f0106b70:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0106b73:	c9                   	leave  
f0106b74:	c3                   	ret    

f0106b75 <detect_memory>:

void detect_memory()
{
f0106b75:	55                   	push   %ebp
f0106b76:	89 e5                	mov    %esp,%ebp
f0106b78:	83 ec 28             	sub    $0x28,%esp
	uint32 maxpa;	// Maximum physical address
	uint32 size_of_base_mem;		// Amount of base memory (in bytes)
	uint32 size_of_extended_mem;		// Amount of extended memory (in bytes)

	// CMOS tells us how many kilobytes there are
	size_of_base_mem = ROUNDDOWN(nvram_read(NVRAM_BASELO)*1024, PAGE_SIZE);
f0106b7b:	83 ec 0c             	sub    $0xc,%esp
f0106b7e:	6a 15                	push   $0x15
f0106b80:	e8 be ff ff ff       	call   f0106b43 <nvram_read>
f0106b85:	83 c4 10             	add    $0x10,%esp
f0106b88:	c1 e0 0a             	shl    $0xa,%eax
f0106b8b:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0106b8e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106b91:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106b96:	89 45 e8             	mov    %eax,-0x18(%ebp)
	size_of_extended_mem = ROUNDDOWN(nvram_read(NVRAM_EXTLO)*1024, PAGE_SIZE);
f0106b99:	83 ec 0c             	sub    $0xc,%esp
f0106b9c:	6a 17                	push   $0x17
f0106b9e:	e8 a0 ff ff ff       	call   f0106b43 <nvram_read>
f0106ba3:	83 c4 10             	add    $0x10,%esp
f0106ba6:	c1 e0 0a             	shl    $0xa,%eax
f0106ba9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0106bac:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0106baf:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106bb4:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//2016
	//For physical memory larger than 16MB, we needed to read total memory size
	// from a different register of the MC chip, see here:
	// http://bochs.sourceforge.net/techspec/CMOS-reference.txt
	// "CMOS 34h - AMI -"
	uint32 size_of_other_mem = ROUNDDOWN(nvram_read(0x34)*1024*64, PAGE_SIZE);
f0106bb7:	83 ec 0c             	sub    $0xc,%esp
f0106bba:	6a 34                	push   $0x34
f0106bbc:	e8 82 ff ff ff       	call   f0106b43 <nvram_read>
f0106bc1:	83 c4 10             	add    $0x10,%esp
f0106bc4:	c1 e0 10             	shl    $0x10,%eax
f0106bc7:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0106bca:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106bcd:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106bd2:	89 45 dc             	mov    %eax,-0x24(%ebp)
	//cprintf("other mem = %dK\n", size_of_other_mem/1024);

	// Calculate the maximum physical address based on whether
	// or not there is any extended memory.  See comment in ../inc/mmu.h.
	//2016
	if(size_of_other_mem > 0)
f0106bd5:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0106bd9:	74 18                	je     f0106bf3 <detect_memory+0x7e>
	{
		maxpa = size_of_other_mem + 16*1024*1024;
f0106bdb:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0106bde:	05 00 00 00 01       	add    $0x1000000,%eax
f0106be3:	89 45 f4             	mov    %eax,-0xc(%ebp)
		size_of_extended_mem = maxpa - PHYS_EXTENDED_MEM;
f0106be6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106be9:	2d 00 00 10 00       	sub    $0x100000,%eax
f0106bee:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0106bf1:	eb 19                	jmp    f0106c0c <detect_memory+0x97>
	}
	else
	{
		if (size_of_extended_mem)
f0106bf3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0106bf7:	74 0d                	je     f0106c06 <detect_memory+0x91>
			maxpa = PHYS_EXTENDED_MEM + size_of_extended_mem;
f0106bf9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106bfc:	05 00 00 10 00       	add    $0x100000,%eax
f0106c01:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0106c04:	eb 06                	jmp    f0106c0c <detect_memory+0x97>
		else
			maxpa = size_of_extended_mem;
f0106c06:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106c09:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}

	uint32 kernel_virtual_area = ((0xFFFFFFFF-KERNEL_BASE)+1);
f0106c0c:	c7 45 d8 00 00 00 10 	movl   $0x10000000,-0x28(%ebp)
	if(USE_KHEAP == 0 && maxpa > kernel_virtual_area)
f0106c13:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106c16:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0106c19:	76 32                	jbe    f0106c4d <detect_memory+0xd8>
	{
		cprintf("Error!: Physical memory = %dK larger than kernel virtual area (%dK)\n", maxpa/1024, kernel_virtual_area/1024);
f0106c1b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0106c1e:	c1 e8 0a             	shr    $0xa,%eax
f0106c21:	89 c2                	mov    %eax,%edx
f0106c23:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106c26:	c1 e8 0a             	shr    $0xa,%eax
f0106c29:	83 ec 04             	sub    $0x4,%esp
f0106c2c:	52                   	push   %edx
f0106c2d:	50                   	push   %eax
f0106c2e:	68 50 2b 13 f0       	push   $0xf0132b50
f0106c33:	e8 f9 a1 ff ff       	call   f0100e31 <cprintf>
f0106c38:	83 c4 10             	add    $0x10,%esp
		cprintf("Cannot use physical memory larger than kernel virtual area\nTo enable physical memory larger than virtual kernel area, set USE_KHEAP = 1 in FOS code");
f0106c3b:	83 ec 0c             	sub    $0xc,%esp
f0106c3e:	68 98 2b 13 f0       	push   $0xf0132b98
f0106c43:	e8 e9 a1 ff ff       	call   f0100e31 <cprintf>
f0106c48:	83 c4 10             	add    $0x10,%esp
		while(1);
f0106c4b:	eb fe                	jmp    f0106c4b <detect_memory+0xd6>
	}
	number_of_frames = maxpa / PAGE_SIZE;
f0106c4d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106c50:	c1 e8 0c             	shr    $0xc,%eax
f0106c53:	a3 d0 cd 2b f0       	mov    %eax,0xf02bcdd0

	cprintf("Physical memory: %dK available, ", (int)(maxpa/1024));
f0106c58:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106c5b:	c1 e8 0a             	shr    $0xa,%eax
f0106c5e:	83 ec 08             	sub    $0x8,%esp
f0106c61:	50                   	push   %eax
f0106c62:	68 2c 2c 13 f0       	push   $0xf0132c2c
f0106c67:	e8 c5 a1 ff ff       	call   f0100e31 <cprintf>
f0106c6c:	83 c4 10             	add    $0x10,%esp
	cprintf("base = %dK, extended = %dK\n", (int)(size_of_base_mem/1024), (int)(size_of_extended_mem/1024));
f0106c6f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106c72:	c1 e8 0a             	shr    $0xa,%eax
f0106c75:	89 c2                	mov    %eax,%edx
f0106c77:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106c7a:	c1 e8 0a             	shr    $0xa,%eax
f0106c7d:	83 ec 04             	sub    $0x4,%esp
f0106c80:	52                   	push   %edx
f0106c81:	50                   	push   %eax
f0106c82:	68 4d 2c 13 f0       	push   $0xf0132c4d
f0106c87:	e8 a5 a1 ff ff       	call   f0100e31 <cprintf>
f0106c8c:	83 c4 10             	add    $0x10,%esp
}
f0106c8f:	90                   	nop
f0106c90:	c9                   	leave  
f0106c91:	c3                   	ret    

f0106c92 <turn_on_paging>:
// --------------------------------------------------------------
// Set up initial memory mappings and turn on MMU.
// --------------------------------------------------------------

void turn_on_paging()
{
f0106c92:	55                   	push   %ebp
f0106c93:	89 e5                	mov    %esp,%ebp
f0106c95:	83 ec 30             	sub    $0x30,%esp
	// (Limits our kernel to <4MB)

	//2016
	//ptr_page_directory[0] = ptr_page_directory[PDX(KERNEL_BASE)];
	{
		int i = PDX(KERNEL_BASE);
f0106c98:	c7 45 fc c0 03 00 00 	movl   $0x3c0,-0x4(%ebp)
		int j = 0;
f0106c9f:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f0106ca6:	eb 24                	jmp    f0106ccc <turn_on_paging+0x3a>
		{
			ptr_page_directory[j] = ptr_page_directory[i];
f0106ca8:	a1 30 ce 2b f0       	mov    0xf02bce30,%eax
f0106cad:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0106cb0:	c1 e2 02             	shl    $0x2,%edx
f0106cb3:	01 c2                	add    %eax,%edx
f0106cb5:	a1 30 ce 2b f0       	mov    0xf02bce30,%eax
f0106cba:	8b 4d fc             	mov    -0x4(%ebp),%ecx
f0106cbd:	c1 e1 02             	shl    $0x2,%ecx
f0106cc0:	01 c8                	add    %ecx,%eax
f0106cc2:	8b 00                	mov    (%eax),%eax
f0106cc4:	89 02                	mov    %eax,(%edx)
	//2016
	//ptr_page_directory[0] = ptr_page_directory[PDX(KERNEL_BASE)];
	{
		int i = PDX(KERNEL_BASE);
		int j = 0;
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f0106cc6:	ff 45 fc             	incl   -0x4(%ebp)
f0106cc9:	ff 45 f8             	incl   -0x8(%ebp)
f0106ccc:	a1 2c ce 2b f0       	mov    0xf02bce2c,%eax
f0106cd1:	c1 e8 16             	shr    $0x16,%eax
f0106cd4:	89 c2                	mov    %eax,%edx
f0106cd6:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0106cd9:	39 c2                	cmp    %eax,%edx
f0106cdb:	77 cb                	ja     f0106ca8 <turn_on_paging+0x16>
			ptr_page_directory[j] = ptr_page_directory[i];
		}
	}

	// Install page table.
	lcr3(phys_page_directory);
f0106cdd:	a1 70 ce 2b f0       	mov    0xf02bce70,%eax
f0106ce2:	89 45 e8             	mov    %eax,-0x18(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0106ce5:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106ce8:	0f 22 d8             	mov    %eax,%cr3

static __inline uint32
rcr0(void)
{
	uint32 val;
	__asm __volatile("movl %%cr0,%0" : "=r" (val));
f0106ceb:	0f 20 c0             	mov    %cr0,%eax
f0106cee:	89 45 e0             	mov    %eax,-0x20(%ebp)
	return val;
f0106cf1:	8b 45 e0             	mov    -0x20(%ebp),%eax

	// Turn on paging.
	uint32 cr0;
	cr0 = rcr0();
f0106cf4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	cr0 |= CR0_PE|CR0_PG|CR0_AM|CR0_WP|CR0_NE|CR0_TS|CR0_EM|CR0_MP;
f0106cf7:	81 4d e4 2f 00 05 80 	orl    $0x8005002f,-0x1c(%ebp)
	cr0 &= ~(CR0_TS|CR0_EM);
f0106cfe:	83 65 e4 f3          	andl   $0xfffffff3,-0x1c(%ebp)
f0106d02:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0106d05:	89 45 dc             	mov    %eax,-0x24(%ebp)
}

static __inline void
lcr0(uint32 val)
{
	__asm __volatile("movl %0,%%cr0" : : "r" (val));
f0106d08:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0106d0b:	0f 22 c0             	mov    %eax,%cr0

	// Current mapping: KERNEL_BASE+x => x => x.
	// (x < 4MB so uses paging ptr_page_directory[0])

	// Reload all segment registers.
	asm volatile("lgdt gdt_pd");
f0106d0e:	0f 01 15 b0 f9 18 f0 	lgdtl  0xf018f9b0
	asm volatile("movw %%ax,%%gs" :: "a" (GD_UD|3));
f0106d15:	b8 23 00 00 00       	mov    $0x23,%eax
f0106d1a:	8e e8                	mov    %eax,%gs
	asm volatile("movw %%ax,%%fs" :: "a" (GD_UD|3));
f0106d1c:	b8 23 00 00 00       	mov    $0x23,%eax
f0106d21:	8e e0                	mov    %eax,%fs
	asm volatile("movw %%ax,%%es" :: "a" (GD_KD));
f0106d23:	b8 10 00 00 00       	mov    $0x10,%eax
f0106d28:	8e c0                	mov    %eax,%es
	asm volatile("movw %%ax,%%ds" :: "a" (GD_KD));
f0106d2a:	b8 10 00 00 00       	mov    $0x10,%eax
f0106d2f:	8e d8                	mov    %eax,%ds
	asm volatile("movw %%ax,%%ss" :: "a" (GD_KD));
f0106d31:	b8 10 00 00 00       	mov    $0x10,%eax
f0106d36:	8e d0                	mov    %eax,%ss
	asm volatile("ljmp %0,$1f\n 1:\n" :: "i" (GD_KT));  // reload cs
f0106d38:	ea 3f 6d 10 f0 08 00 	ljmp   $0x8,$0xf0106d3f
	asm volatile("lldt %%ax" :: "a" (0));
f0106d3f:	b8 00 00 00 00       	mov    $0x0,%eax
f0106d44:	0f 00 d0             	lldt   %ax
	// This mapping was only used after paging was turned on but
	// before the segment registers were reloaded.
	//2016
	//ptr_page_directory[0] = 0;
	{
		int i = PDX(KERNEL_BASE);
f0106d47:	c7 45 f4 c0 03 00 00 	movl   $0x3c0,-0xc(%ebp)
		int j = 0;
f0106d4e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f0106d55:	eb 19                	jmp    f0106d70 <turn_on_paging+0xde>
		{
			ptr_page_directory[j] = 0;
f0106d57:	a1 30 ce 2b f0       	mov    0xf02bce30,%eax
f0106d5c:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106d5f:	c1 e2 02             	shl    $0x2,%edx
f0106d62:	01 d0                	add    %edx,%eax
f0106d64:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	//2016
	//ptr_page_directory[0] = 0;
	{
		int i = PDX(KERNEL_BASE);
		int j = 0;
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f0106d6a:	ff 45 f4             	incl   -0xc(%ebp)
f0106d6d:	ff 45 f0             	incl   -0x10(%ebp)
f0106d70:	a1 2c ce 2b f0       	mov    0xf02bce2c,%eax
f0106d75:	c1 e8 16             	shr    $0x16,%eax
f0106d78:	89 c2                	mov    %eax,%edx
f0106d7a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106d7d:	39 c2                	cmp    %eax,%edx
f0106d7f:	77 d6                	ja     f0106d57 <turn_on_paging+0xc5>
		{
			ptr_page_directory[j] = 0;
		}
	}
	// Flush the TLB for good measure, to kill the ptr_page_directory[0] mapping.
	lcr3(phys_page_directory);
f0106d81:	a1 70 ce 2b f0       	mov    0xf02bce70,%eax
f0106d86:	89 45 ec             	mov    %eax,-0x14(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0106d89:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106d8c:	0f 22 d8             	mov    %eax,%cr3
}
f0106d8f:	90                   	nop
f0106d90:	c9                   	leave  
f0106d91:	c3                   	ret    

f0106d92 <setup_listing_to_all_page_tables_entries>:

void setup_listing_to_all_page_tables_entries()
{
f0106d92:	55                   	push   %ebp
f0106d93:	89 e5                	mov    %esp,%ebp
f0106d95:	83 ec 18             	sub    $0x18,%esp
	//////////////////////////////////////////////////////////////////////
	// Recursively insert PD in itself as a page table, to form
	// a virtual page table at virtual address VPT.

	// Permissions: kernel RW, user NONE
	uint32 phys_frame_address = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory);
f0106d98:	a1 30 ce 2b f0       	mov    0xf02bce30,%eax
f0106d9d:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0106da0:	81 7d f4 ff ff ff ef 	cmpl   $0xefffffff,-0xc(%ebp)
f0106da7:	77 17                	ja     f0106dc0 <setup_listing_to_all_page_tables_entries+0x2e>
f0106da9:	ff 75 f4             	pushl  -0xc(%ebp)
f0106dac:	68 a4 2a 13 f0       	push   $0xf0132aa4
f0106db1:	68 ae 01 00 00       	push   $0x1ae
f0106db6:	68 d8 2a 13 f0       	push   $0xf0132ad8
f0106dbb:	e8 f0 93 ff ff       	call   f01001b0 <_panic>
f0106dc0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106dc3:	05 00 00 00 10       	add    $0x10000000,%eax
f0106dc8:	89 45 f0             	mov    %eax,-0x10(%ebp)
	ptr_page_directory[PDX(VPT)] = CONSTRUCT_ENTRY(phys_frame_address , PERM_PRESENT | PERM_WRITEABLE);
f0106dcb:	a1 30 ce 2b f0       	mov    0xf02bce30,%eax
f0106dd0:	05 fc 0e 00 00       	add    $0xefc,%eax
f0106dd5:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106dd8:	83 ca 03             	or     $0x3,%edx
f0106ddb:	89 10                	mov    %edx,(%eax)

	// same for UVPT
	//Permissions: kernel R, user R
	ptr_page_directory[PDX(UVPT)] = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory)|PERM_USER|PERM_PRESENT;
f0106ddd:	a1 30 ce 2b f0       	mov    0xf02bce30,%eax
f0106de2:	8d 90 f4 0e 00 00    	lea    0xef4(%eax),%edx
f0106de8:	a1 30 ce 2b f0       	mov    0xf02bce30,%eax
f0106ded:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0106df0:	81 7d ec ff ff ff ef 	cmpl   $0xefffffff,-0x14(%ebp)
f0106df7:	77 17                	ja     f0106e10 <setup_listing_to_all_page_tables_entries+0x7e>
f0106df9:	ff 75 ec             	pushl  -0x14(%ebp)
f0106dfc:	68 a4 2a 13 f0       	push   $0xf0132aa4
f0106e01:	68 b3 01 00 00       	push   $0x1b3
f0106e06:	68 d8 2a 13 f0       	push   $0xf0132ad8
f0106e0b:	e8 a0 93 ff ff       	call   f01001b0 <_panic>
f0106e10:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106e13:	05 00 00 00 10       	add    $0x10000000,%eax
f0106e18:	83 c8 05             	or     $0x5,%eax
f0106e1b:	89 02                	mov    %eax,(%edx)

}
f0106e1d:	90                   	nop
f0106e1e:	c9                   	leave  
f0106e1f:	c3                   	ret    

f0106e20 <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f0106e20:	55                   	push   %ebp
f0106e21:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f0106e23:	8b 45 08             	mov    0x8(%ebp),%eax
f0106e26:	8b 15 10 ce 2b f0    	mov    0xf02bce10,%edx
f0106e2c:	29 d0                	sub    %edx,%eax
f0106e2e:	c1 f8 02             	sar    $0x2,%eax
f0106e31:	89 c2                	mov    %eax,%edx
f0106e33:	89 d0                	mov    %edx,%eax
f0106e35:	c1 e0 03             	shl    $0x3,%eax
f0106e38:	01 d0                	add    %edx,%eax
f0106e3a:	c1 e0 03             	shl    $0x3,%eax
f0106e3d:	01 d0                	add    %edx,%eax
f0106e3f:	c1 e0 03             	shl    $0x3,%eax
f0106e42:	01 d0                	add    %edx,%eax
f0106e44:	c1 e0 03             	shl    $0x3,%eax
f0106e47:	01 d0                	add    %edx,%eax
f0106e49:	89 c1                	mov    %eax,%ecx
f0106e4b:	c1 e1 0f             	shl    $0xf,%ecx
f0106e4e:	01 c8                	add    %ecx,%eax
f0106e50:	c1 e0 03             	shl    $0x3,%eax
f0106e53:	01 d0                	add    %edx,%eax
f0106e55:	f7 d8                	neg    %eax
}
f0106e57:	5d                   	pop    %ebp
f0106e58:	c3                   	ret    

f0106e59 <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f0106e59:	55                   	push   %ebp
f0106e5a:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f0106e5c:	ff 75 08             	pushl  0x8(%ebp)
f0106e5f:	e8 bc ff ff ff       	call   f0106e20 <to_frame_number>
f0106e64:	83 c4 04             	add    $0x4,%esp
f0106e67:	c1 e0 0c             	shl    $0xc,%eax
}
f0106e6a:	c9                   	leave  
f0106e6b:	c3                   	ret    

f0106e6c <to_frame_info>:

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f0106e6c:	55                   	push   %ebp
f0106e6d:	89 e5                	mov    %esp,%ebp
f0106e6f:	53                   	push   %ebx
f0106e70:	83 ec 04             	sub    $0x4,%esp
	if (PPN(physical_address) >= number_of_frames)
f0106e73:	8b 45 08             	mov    0x8(%ebp),%eax
f0106e76:	c1 e8 0c             	shr    $0xc,%eax
f0106e79:	89 c2                	mov    %eax,%edx
f0106e7b:	a1 d0 cd 2b f0       	mov    0xf02bcdd0,%eax
f0106e80:	39 c2                	cmp    %eax,%edx
f0106e82:	72 14                	jb     f0106e98 <to_frame_info+0x2c>
		panic("to_frame_info called with invalid pa");
f0106e84:	83 ec 04             	sub    $0x4,%esp
f0106e87:	68 6c 2c 13 f0       	push   $0xf0132c6c
f0106e8c:	6a 55                	push   $0x55
f0106e8e:	68 91 2c 13 f0       	push   $0xf0132c91
f0106e93:	e8 18 93 ff ff       	call   f01001b0 <_panic>
	return &frames_info[PPN(physical_address)];
f0106e98:	8b 0d 10 ce 2b f0    	mov    0xf02bce10,%ecx
f0106e9e:	8b 45 08             	mov    0x8(%ebp),%eax
f0106ea1:	c1 e8 0c             	shr    $0xc,%eax
f0106ea4:	89 c2                	mov    %eax,%edx
f0106ea6:	89 d0                	mov    %edx,%eax
f0106ea8:	01 c0                	add    %eax,%eax
f0106eaa:	01 d0                	add    %edx,%eax
f0106eac:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0106eb3:	01 d8                	add    %ebx,%eax
f0106eb5:	01 d0                	add    %edx,%eax
f0106eb7:	01 c8                	add    %ecx,%eax
}
f0106eb9:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0106ebc:	c9                   	leave  
f0106ebd:	c3                   	ret    

f0106ebe <tlb_invalidate>:




void tlb_invalidate(uint32 *ptr_page_directory, void *virtual_address)
{
f0106ebe:	55                   	push   %ebp
f0106ebf:	89 e5                	mov    %esp,%ebp
f0106ec1:	83 ec 10             	sub    $0x10,%esp
f0106ec4:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106ec7:	89 45 fc             	mov    %eax,-0x4(%ebp)
}

static __inline void 
invlpg(void *addr)
{ 
	__asm __volatile("invlpg (%0)" : : "r" (addr) : "memory");
f0106eca:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0106ecd:	0f 01 38             	invlpg (%eax)
	// Flush the entry only if we're modifying the current address space.
	// For now, there is only one address space, so always invalidate.
	invlpg(virtual_address);
}
f0106ed0:	90                   	nop
f0106ed1:	c9                   	leave  
f0106ed2:	c3                   	ret    

f0106ed3 <initialize_paging>:
// and NEVER use boot_allocate_space() or the related boot-time functions above.
//

extern void initialize_disk_page_file();
void initialize_paging()
{
f0106ed3:	55                   	push   %ebp
f0106ed4:	89 e5                	mov    %esp,%ebp
f0106ed6:	56                   	push   %esi
f0106ed7:	53                   	push   %ebx
f0106ed8:	83 ec 20             	sub    $0x20,%esp
	//     Some of it is in use, some is free. Where is the kernel?
	//     Which frames are used for page tables and other data structures?
	//
	// Change the code to reflect this.
	int i;
	LIST_INIT(&free_frame_list);
f0106edb:	c7 05 d8 cd 2b f0 00 	movl   $0x0,0xf02bcdd8
f0106ee2:	00 00 00 
f0106ee5:	c7 05 dc cd 2b f0 00 	movl   $0x0,0xf02bcddc
f0106eec:	00 00 00 
f0106eef:	c7 05 e4 cd 2b f0 00 	movl   $0x0,0xf02bcde4
f0106ef6:	00 00 00 
	LIST_INIT(&modified_frame_list);
f0106ef9:	c7 05 40 4a 25 f0 00 	movl   $0x0,0xf0254a40
f0106f00:	00 00 00 
f0106f03:	c7 05 44 4a 25 f0 00 	movl   $0x0,0xf0254a44
f0106f0a:	00 00 00 
f0106f0d:	c7 05 4c 4a 25 f0 00 	movl   $0x0,0xf0254a4c
f0106f14:	00 00 00 

	frames_info[0].references = 1;
f0106f17:	a1 10 ce 2b f0       	mov    0xf02bce10,%eax
f0106f1c:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	frames_info[1].references = 1;
f0106f22:	a1 10 ce 2b f0       	mov    0xf02bce10,%eax
f0106f27:	83 c0 1c             	add    $0x1c,%eax
f0106f2a:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	frames_info[2].references = 1;
f0106f30:	a1 10 ce 2b f0       	mov    0xf02bce10,%eax
f0106f35:	83 c0 38             	add    $0x38,%eax
f0106f38:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	ptr_zero_page = (uint8*) KERNEL_BASE+PAGE_SIZE;
f0106f3e:	c7 05 1c ce 2b f0 00 	movl   $0xf0001000,0xf02bce1c
f0106f45:	10 00 f0 
	ptr_temp_page = (uint8*) KERNEL_BASE+2*PAGE_SIZE;
f0106f48:	c7 05 48 ce 2b f0 00 	movl   $0xf0002000,0xf02bce48
f0106f4f:	20 00 f0 
	i =0;
f0106f52:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;i<1024; i++)
f0106f59:	eb 1f                	jmp    f0106f7a <initialize_paging+0xa7>
	{
		ptr_zero_page[i]=0;
f0106f5b:	8b 15 1c ce 2b f0    	mov    0xf02bce1c,%edx
f0106f61:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106f64:	01 d0                	add    %edx,%eax
f0106f66:	c6 00 00             	movb   $0x0,(%eax)
		ptr_temp_page[i]=0;
f0106f69:	8b 15 48 ce 2b f0    	mov    0xf02bce48,%edx
f0106f6f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106f72:	01 d0                	add    %edx,%eax
f0106f74:	c6 00 00             	movb   $0x0,(%eax)
	frames_info[1].references = 1;
	frames_info[2].references = 1;
	ptr_zero_page = (uint8*) KERNEL_BASE+PAGE_SIZE;
	ptr_temp_page = (uint8*) KERNEL_BASE+2*PAGE_SIZE;
	i =0;
	for(;i<1024; i++)
f0106f77:	ff 45 f4             	incl   -0xc(%ebp)
f0106f7a:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f0106f81:	7e d8                	jle    f0106f5b <initialize_paging+0x88>
	{
		ptr_zero_page[i]=0;
		ptr_temp_page[i]=0;
	}

	int range_end = ROUNDUP(PHYS_IO_MEM,PAGE_SIZE);
f0106f83:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
f0106f8a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106f8d:	05 ff ff 09 00       	add    $0x9ffff,%eax
f0106f92:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0106f95:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106f98:	ba 00 00 00 00       	mov    $0x0,%edx
f0106f9d:	f7 75 f0             	divl   -0x10(%ebp)
f0106fa0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106fa3:	29 d0                	sub    %edx,%eax
f0106fa5:	89 45 e8             	mov    %eax,-0x18(%ebp)

	for (i = 3; i < range_end/PAGE_SIZE; i++)
f0106fa8:	c7 45 f4 03 00 00 00 	movl   $0x3,-0xc(%ebp)
f0106faf:	e9 20 01 00 00       	jmp    f01070d4 <initialize_paging+0x201>
	{

		initialize_frame_info(&(frames_info[i]));
f0106fb4:	8b 0d 10 ce 2b f0    	mov    0xf02bce10,%ecx
f0106fba:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106fbd:	89 d0                	mov    %edx,%eax
f0106fbf:	01 c0                	add    %eax,%eax
f0106fc1:	01 d0                	add    %edx,%eax
f0106fc3:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0106fca:	01 d8                	add    %ebx,%eax
f0106fcc:	01 d0                	add    %edx,%eax
f0106fce:	01 c8                	add    %ecx,%eax
f0106fd0:	83 ec 0c             	sub    $0xc,%esp
f0106fd3:	50                   	push   %eax
f0106fd4:	e8 31 03 00 00       	call   f010730a <initialize_frame_info>
f0106fd9:	83 c4 10             	add    $0x10,%esp
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
f0106fdc:	8b 0d 10 ce 2b f0    	mov    0xf02bce10,%ecx
f0106fe2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106fe5:	89 d0                	mov    %edx,%eax
f0106fe7:	01 c0                	add    %eax,%eax
f0106fe9:	01 d0                	add    %edx,%eax
f0106feb:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0106ff2:	01 d8                	add    %ebx,%eax
f0106ff4:	01 d0                	add    %edx,%eax
f0106ff6:	01 c8                	add    %ecx,%eax
f0106ff8:	85 c0                	test   %eax,%eax
f0106ffa:	75 14                	jne    f0107010 <initialize_paging+0x13d>
f0106ffc:	83 ec 04             	sub    $0x4,%esp
f0106fff:	68 ac 2c 13 f0       	push   $0xf0132cac
f0107004:	6a 5c                	push   $0x5c
f0107006:	68 cf 2c 13 f0       	push   $0xf0132ccf
f010700b:	e8 a0 91 ff ff       	call   f01001b0 <_panic>
f0107010:	8b 0d 10 ce 2b f0    	mov    0xf02bce10,%ecx
f0107016:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107019:	89 d0                	mov    %edx,%eax
f010701b:	01 c0                	add    %eax,%eax
f010701d:	01 d0                	add    %edx,%eax
f010701f:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0107026:	01 d8                	add    %ebx,%eax
f0107028:	01 d0                	add    %edx,%eax
f010702a:	01 c8                	add    %ecx,%eax
f010702c:	8b 15 d8 cd 2b f0    	mov    0xf02bcdd8,%edx
f0107032:	89 10                	mov    %edx,(%eax)
f0107034:	8b 00                	mov    (%eax),%eax
f0107036:	85 c0                	test   %eax,%eax
f0107038:	74 27                	je     f0107061 <initialize_paging+0x18e>
f010703a:	8b 0d d8 cd 2b f0    	mov    0xf02bcdd8,%ecx
f0107040:	8b 1d 10 ce 2b f0    	mov    0xf02bce10,%ebx
f0107046:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107049:	89 d0                	mov    %edx,%eax
f010704b:	01 c0                	add    %eax,%eax
f010704d:	01 d0                	add    %edx,%eax
f010704f:	8d 34 c5 00 00 00 00 	lea    0x0(,%eax,8),%esi
f0107056:	01 f0                	add    %esi,%eax
f0107058:	01 d0                	add    %edx,%eax
f010705a:	01 d8                	add    %ebx,%eax
f010705c:	89 41 04             	mov    %eax,0x4(%ecx)
f010705f:	eb 21                	jmp    f0107082 <initialize_paging+0x1af>
f0107061:	8b 0d 10 ce 2b f0    	mov    0xf02bce10,%ecx
f0107067:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010706a:	89 d0                	mov    %edx,%eax
f010706c:	01 c0                	add    %eax,%eax
f010706e:	01 d0                	add    %edx,%eax
f0107070:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0107077:	01 d8                	add    %ebx,%eax
f0107079:	01 d0                	add    %edx,%eax
f010707b:	01 c8                	add    %ecx,%eax
f010707d:	a3 dc cd 2b f0       	mov    %eax,0xf02bcddc
f0107082:	8b 0d 10 ce 2b f0    	mov    0xf02bce10,%ecx
f0107088:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010708b:	89 d0                	mov    %edx,%eax
f010708d:	01 c0                	add    %eax,%eax
f010708f:	01 d0                	add    %edx,%eax
f0107091:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0107098:	01 d8                	add    %ebx,%eax
f010709a:	01 d0                	add    %edx,%eax
f010709c:	01 c8                	add    %ecx,%eax
f010709e:	a3 d8 cd 2b f0       	mov    %eax,0xf02bcdd8
f01070a3:	8b 0d 10 ce 2b f0    	mov    0xf02bce10,%ecx
f01070a9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01070ac:	89 d0                	mov    %edx,%eax
f01070ae:	01 c0                	add    %eax,%eax
f01070b0:	01 d0                	add    %edx,%eax
f01070b2:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f01070b9:	01 d8                	add    %ebx,%eax
f01070bb:	01 d0                	add    %edx,%eax
f01070bd:	01 c8                	add    %ecx,%eax
f01070bf:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01070c6:	a1 e4 cd 2b f0       	mov    0xf02bcde4,%eax
f01070cb:	40                   	inc    %eax
f01070cc:	a3 e4 cd 2b f0       	mov    %eax,0xf02bcde4
		ptr_temp_page[i]=0;
	}

	int range_end = ROUNDUP(PHYS_IO_MEM,PAGE_SIZE);

	for (i = 3; i < range_end/PAGE_SIZE; i++)
f01070d1:	ff 45 f4             	incl   -0xc(%ebp)
f01070d4:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01070d7:	85 c0                	test   %eax,%eax
f01070d9:	79 05                	jns    f01070e0 <initialize_paging+0x20d>
f01070db:	05 ff 0f 00 00       	add    $0xfff,%eax
f01070e0:	c1 f8 0c             	sar    $0xc,%eax
f01070e3:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01070e6:	0f 8f c8 fe ff ff    	jg     f0106fb4 <initialize_paging+0xe1>
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
	}

	for (i = PHYS_IO_MEM/PAGE_SIZE ; i < PHYS_EXTENDED_MEM/PAGE_SIZE; i++)
f01070ec:	c7 45 f4 a0 00 00 00 	movl   $0xa0,-0xc(%ebp)
f01070f3:	eb 25                	jmp    f010711a <initialize_paging+0x247>
	{
		frames_info[i].references = 1;
f01070f5:	8b 0d 10 ce 2b f0    	mov    0xf02bce10,%ecx
f01070fb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01070fe:	89 d0                	mov    %edx,%eax
f0107100:	01 c0                	add    %eax,%eax
f0107102:	01 d0                	add    %edx,%eax
f0107104:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f010710b:	01 d8                	add    %ebx,%eax
f010710d:	01 d0                	add    %edx,%eax
f010710f:	01 c8                	add    %ecx,%eax
f0107111:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
	}

	for (i = PHYS_IO_MEM/PAGE_SIZE ; i < PHYS_EXTENDED_MEM/PAGE_SIZE; i++)
f0107117:	ff 45 f4             	incl   -0xc(%ebp)
f010711a:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
f0107121:	7e d2                	jle    f01070f5 <initialize_paging+0x222>
	{
		frames_info[i].references = 1;
	}

	range_end = ROUNDUP(STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_free_mem), PAGE_SIZE);
f0107123:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f010712a:	a1 2c ce 2b f0       	mov    0xf02bce2c,%eax
f010712f:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0107132:	81 7d e0 ff ff ff ef 	cmpl   $0xefffffff,-0x20(%ebp)
f0107139:	77 14                	ja     f010714f <initialize_paging+0x27c>
f010713b:	ff 75 e0             	pushl  -0x20(%ebp)
f010713e:	68 ec 2c 13 f0       	push   $0xf0132cec
f0107143:	6a 64                	push   $0x64
f0107145:	68 cf 2c 13 f0       	push   $0xf0132ccf
f010714a:	e8 61 90 ff ff       	call   f01001b0 <_panic>
f010714f:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0107152:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edx
f0107158:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010715b:	01 d0                	add    %edx,%eax
f010715d:	48                   	dec    %eax
f010715e:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0107161:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0107164:	ba 00 00 00 00       	mov    $0x0,%edx
f0107169:	f7 75 e4             	divl   -0x1c(%ebp)
f010716c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010716f:	29 d0                	sub    %edx,%eax
f0107171:	89 45 e8             	mov    %eax,-0x18(%ebp)

	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
f0107174:	c7 45 f4 00 01 00 00 	movl   $0x100,-0xc(%ebp)
f010717b:	eb 25                	jmp    f01071a2 <initialize_paging+0x2cf>
	{
		frames_info[i].references = 1;
f010717d:	8b 0d 10 ce 2b f0    	mov    0xf02bce10,%ecx
f0107183:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107186:	89 d0                	mov    %edx,%eax
f0107188:	01 c0                	add    %eax,%eax
f010718a:	01 d0                	add    %edx,%eax
f010718c:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0107193:	01 d8                	add    %ebx,%eax
f0107195:	01 d0                	add    %edx,%eax
f0107197:	01 c8                	add    %ecx,%eax
f0107199:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
		frames_info[i].references = 1;
	}

	range_end = ROUNDUP(STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_free_mem), PAGE_SIZE);

	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
f010719f:	ff 45 f4             	incl   -0xc(%ebp)
f01071a2:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01071a5:	85 c0                	test   %eax,%eax
f01071a7:	79 05                	jns    f01071ae <initialize_paging+0x2db>
f01071a9:	05 ff 0f 00 00       	add    $0xfff,%eax
f01071ae:	c1 f8 0c             	sar    $0xc,%eax
f01071b1:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01071b4:	7f c7                	jg     f010717d <initialize_paging+0x2aa>
	{
		frames_info[i].references = 1;
	}

	for (i = range_end/PAGE_SIZE ; i < number_of_frames; i++)
f01071b6:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01071b9:	85 c0                	test   %eax,%eax
f01071bb:	79 05                	jns    f01071c2 <initialize_paging+0x2ef>
f01071bd:	05 ff 0f 00 00       	add    $0xfff,%eax
f01071c2:	c1 f8 0c             	sar    $0xc,%eax
f01071c5:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01071c8:	e9 20 01 00 00       	jmp    f01072ed <initialize_paging+0x41a>
	{
		initialize_frame_info(&(frames_info[i]));
f01071cd:	8b 0d 10 ce 2b f0    	mov    0xf02bce10,%ecx
f01071d3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01071d6:	89 d0                	mov    %edx,%eax
f01071d8:	01 c0                	add    %eax,%eax
f01071da:	01 d0                	add    %edx,%eax
f01071dc:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f01071e3:	01 d8                	add    %ebx,%eax
f01071e5:	01 d0                	add    %edx,%eax
f01071e7:	01 c8                	add    %ecx,%eax
f01071e9:	83 ec 0c             	sub    $0xc,%esp
f01071ec:	50                   	push   %eax
f01071ed:	e8 18 01 00 00       	call   f010730a <initialize_frame_info>
f01071f2:	83 c4 10             	add    $0x10,%esp

		//frames_info[i].references = 0;
		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
f01071f5:	8b 0d 10 ce 2b f0    	mov    0xf02bce10,%ecx
f01071fb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01071fe:	89 d0                	mov    %edx,%eax
f0107200:	01 c0                	add    %eax,%eax
f0107202:	01 d0                	add    %edx,%eax
f0107204:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f010720b:	01 d8                	add    %ebx,%eax
f010720d:	01 d0                	add    %edx,%eax
f010720f:	01 c8                	add    %ecx,%eax
f0107211:	85 c0                	test   %eax,%eax
f0107213:	75 14                	jne    f0107229 <initialize_paging+0x356>
f0107215:	83 ec 04             	sub    $0x4,%esp
f0107218:	68 ac 2c 13 f0       	push   $0xf0132cac
f010721d:	6a 70                	push   $0x70
f010721f:	68 cf 2c 13 f0       	push   $0xf0132ccf
f0107224:	e8 87 8f ff ff       	call   f01001b0 <_panic>
f0107229:	8b 0d 10 ce 2b f0    	mov    0xf02bce10,%ecx
f010722f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107232:	89 d0                	mov    %edx,%eax
f0107234:	01 c0                	add    %eax,%eax
f0107236:	01 d0                	add    %edx,%eax
f0107238:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f010723f:	01 d8                	add    %ebx,%eax
f0107241:	01 d0                	add    %edx,%eax
f0107243:	01 c8                	add    %ecx,%eax
f0107245:	8b 15 d8 cd 2b f0    	mov    0xf02bcdd8,%edx
f010724b:	89 10                	mov    %edx,(%eax)
f010724d:	8b 00                	mov    (%eax),%eax
f010724f:	85 c0                	test   %eax,%eax
f0107251:	74 27                	je     f010727a <initialize_paging+0x3a7>
f0107253:	8b 0d d8 cd 2b f0    	mov    0xf02bcdd8,%ecx
f0107259:	8b 1d 10 ce 2b f0    	mov    0xf02bce10,%ebx
f010725f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107262:	89 d0                	mov    %edx,%eax
f0107264:	01 c0                	add    %eax,%eax
f0107266:	01 d0                	add    %edx,%eax
f0107268:	8d 34 c5 00 00 00 00 	lea    0x0(,%eax,8),%esi
f010726f:	01 f0                	add    %esi,%eax
f0107271:	01 d0                	add    %edx,%eax
f0107273:	01 d8                	add    %ebx,%eax
f0107275:	89 41 04             	mov    %eax,0x4(%ecx)
f0107278:	eb 21                	jmp    f010729b <initialize_paging+0x3c8>
f010727a:	8b 0d 10 ce 2b f0    	mov    0xf02bce10,%ecx
f0107280:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107283:	89 d0                	mov    %edx,%eax
f0107285:	01 c0                	add    %eax,%eax
f0107287:	01 d0                	add    %edx,%eax
f0107289:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0107290:	01 d8                	add    %ebx,%eax
f0107292:	01 d0                	add    %edx,%eax
f0107294:	01 c8                	add    %ecx,%eax
f0107296:	a3 dc cd 2b f0       	mov    %eax,0xf02bcddc
f010729b:	8b 0d 10 ce 2b f0    	mov    0xf02bce10,%ecx
f01072a1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01072a4:	89 d0                	mov    %edx,%eax
f01072a6:	01 c0                	add    %eax,%eax
f01072a8:	01 d0                	add    %edx,%eax
f01072aa:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f01072b1:	01 d8                	add    %ebx,%eax
f01072b3:	01 d0                	add    %edx,%eax
f01072b5:	01 c8                	add    %ecx,%eax
f01072b7:	a3 d8 cd 2b f0       	mov    %eax,0xf02bcdd8
f01072bc:	8b 0d 10 ce 2b f0    	mov    0xf02bce10,%ecx
f01072c2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01072c5:	89 d0                	mov    %edx,%eax
f01072c7:	01 c0                	add    %eax,%eax
f01072c9:	01 d0                	add    %edx,%eax
f01072cb:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f01072d2:	01 d8                	add    %ebx,%eax
f01072d4:	01 d0                	add    %edx,%eax
f01072d6:	01 c8                	add    %ecx,%eax
f01072d8:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01072df:	a1 e4 cd 2b f0       	mov    0xf02bcde4,%eax
f01072e4:	40                   	inc    %eax
f01072e5:	a3 e4 cd 2b f0       	mov    %eax,0xf02bcde4
	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
	{
		frames_info[i].references = 1;
	}

	for (i = range_end/PAGE_SIZE ; i < number_of_frames; i++)
f01072ea:	ff 45 f4             	incl   -0xc(%ebp)
f01072ed:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01072f0:	a1 d0 cd 2b f0       	mov    0xf02bcdd0,%eax
f01072f5:	39 c2                	cmp    %eax,%edx
f01072f7:	0f 82 d0 fe ff ff    	jb     f01071cd <initialize_paging+0x2fa>

		//frames_info[i].references = 0;
		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
	}

	initialize_disk_page_file();
f01072fd:	e8 f2 c5 ff ff       	call   f01038f4 <initialize_disk_page_file>
}
f0107302:	90                   	nop
f0107303:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0107306:	5b                   	pop    %ebx
f0107307:	5e                   	pop    %esi
f0107308:	5d                   	pop    %ebp
f0107309:	c3                   	ret    

f010730a <initialize_frame_info>:
// Initialize a Frame_Info structure.
// The result has null links and 0 references.
// Note that the corresponding physical frame is NOT initialized!
//
void initialize_frame_info(struct FrameInfo *ptr_frame_info)
{
f010730a:	55                   	push   %ebp
f010730b:	89 e5                	mov    %esp,%ebp
f010730d:	83 ec 08             	sub    $0x8,%esp
	memset(ptr_frame_info, 0, sizeof(*ptr_frame_info));
f0107310:	83 ec 04             	sub    $0x4,%esp
f0107313:	6a 1c                	push   $0x1c
f0107315:	6a 00                	push   $0x0
f0107317:	ff 75 08             	pushl  0x8(%ebp)
f010731a:	e8 47 83 02 00       	call   f012f666 <memset>
f010731f:	83 c4 10             	add    $0x10,%esp
}
f0107322:	90                   	nop
f0107323:	c9                   	leave  
f0107324:	c3                   	ret    

f0107325 <allocate_frame>:
// Hint: references should not be incremented

//extern void env_free(struct Env *e);

int allocate_frame(struct FrameInfo **ptr_frame_info)
{
f0107325:	55                   	push   %ebp
f0107326:	89 e5                	mov    %esp,%ebp
f0107328:	83 ec 18             	sub    $0x18,%esp
	*ptr_frame_info = LIST_FIRST(&free_frame_list);
f010732b:	8b 15 d8 cd 2b f0    	mov    0xf02bcdd8,%edx
f0107331:	8b 45 08             	mov    0x8(%ebp),%eax
f0107334:	89 10                	mov    %edx,(%eax)
	int c = 0;
f0107336:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	if (*ptr_frame_info == NULL)
f010733d:	8b 45 08             	mov    0x8(%ebp),%eax
f0107340:	8b 00                	mov    (%eax),%eax
f0107342:	85 c0                	test   %eax,%eax
f0107344:	75 17                	jne    f010735d <allocate_frame+0x38>
	{
		//TODO: [PROJECT'23.MS3 - BONUS] Free RAM when it's FULL
		panic("ERROR: Kernel run out of memory... allocate_frame cannot find a free frame.\n");
f0107346:	83 ec 04             	sub    $0x4,%esp
f0107349:	68 20 2d 13 f0       	push   $0xf0132d20
f010734e:	68 98 00 00 00       	push   $0x98
f0107353:	68 cf 2c 13 f0       	push   $0xf0132ccf
f0107358:	e8 53 8e ff ff       	call   f01001b0 <_panic>
		// When allocating new frame, if there's no free frame, then you should:
		//	1-	If any process has exited (those with status ENV_EXIT), then remove one or more of these exited processes from the main memory
		//	2-	otherwise, free at least 1 frame from the user working set by applying the FIFO algorithm
	}

	LIST_REMOVE(&free_frame_list,*ptr_frame_info);
f010735d:	8b 45 08             	mov    0x8(%ebp),%eax
f0107360:	8b 00                	mov    (%eax),%eax
f0107362:	85 c0                	test   %eax,%eax
f0107364:	75 17                	jne    f010737d <allocate_frame+0x58>
f0107366:	83 ec 04             	sub    $0x4,%esp
f0107369:	68 6d 2d 13 f0       	push   $0xf0132d6d
f010736e:	68 9e 00 00 00       	push   $0x9e
f0107373:	68 cf 2c 13 f0       	push   $0xf0132ccf
f0107378:	e8 33 8e ff ff       	call   f01001b0 <_panic>
f010737d:	8b 45 08             	mov    0x8(%ebp),%eax
f0107380:	8b 00                	mov    (%eax),%eax
f0107382:	8b 00                	mov    (%eax),%eax
f0107384:	85 c0                	test   %eax,%eax
f0107386:	74 14                	je     f010739c <allocate_frame+0x77>
f0107388:	8b 45 08             	mov    0x8(%ebp),%eax
f010738b:	8b 00                	mov    (%eax),%eax
f010738d:	8b 00                	mov    (%eax),%eax
f010738f:	8b 55 08             	mov    0x8(%ebp),%edx
f0107392:	8b 12                	mov    (%edx),%edx
f0107394:	8b 52 04             	mov    0x4(%edx),%edx
f0107397:	89 50 04             	mov    %edx,0x4(%eax)
f010739a:	eb 0d                	jmp    f01073a9 <allocate_frame+0x84>
f010739c:	8b 45 08             	mov    0x8(%ebp),%eax
f010739f:	8b 00                	mov    (%eax),%eax
f01073a1:	8b 40 04             	mov    0x4(%eax),%eax
f01073a4:	a3 dc cd 2b f0       	mov    %eax,0xf02bcddc
f01073a9:	8b 45 08             	mov    0x8(%ebp),%eax
f01073ac:	8b 00                	mov    (%eax),%eax
f01073ae:	8b 40 04             	mov    0x4(%eax),%eax
f01073b1:	85 c0                	test   %eax,%eax
f01073b3:	74 13                	je     f01073c8 <allocate_frame+0xa3>
f01073b5:	8b 45 08             	mov    0x8(%ebp),%eax
f01073b8:	8b 00                	mov    (%eax),%eax
f01073ba:	8b 40 04             	mov    0x4(%eax),%eax
f01073bd:	8b 55 08             	mov    0x8(%ebp),%edx
f01073c0:	8b 12                	mov    (%edx),%edx
f01073c2:	8b 12                	mov    (%edx),%edx
f01073c4:	89 10                	mov    %edx,(%eax)
f01073c6:	eb 0c                	jmp    f01073d4 <allocate_frame+0xaf>
f01073c8:	8b 45 08             	mov    0x8(%ebp),%eax
f01073cb:	8b 00                	mov    (%eax),%eax
f01073cd:	8b 00                	mov    (%eax),%eax
f01073cf:	a3 d8 cd 2b f0       	mov    %eax,0xf02bcdd8
f01073d4:	8b 45 08             	mov    0x8(%ebp),%eax
f01073d7:	8b 00                	mov    (%eax),%eax
f01073d9:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01073df:	8b 45 08             	mov    0x8(%ebp),%eax
f01073e2:	8b 00                	mov    (%eax),%eax
f01073e4:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01073eb:	a1 e4 cd 2b f0       	mov    0xf02bcde4,%eax
f01073f0:	48                   	dec    %eax
f01073f1:	a3 e4 cd 2b f0       	mov    %eax,0xf02bcde4

	/******************* PAGE BUFFERING CODE *******************
	 ***********************************************************/

	if((*ptr_frame_info)->isBuffered)
f01073f6:	8b 45 08             	mov    0x8(%ebp),%eax
f01073f9:	8b 00                	mov    (%eax),%eax
f01073fb:	8a 40 14             	mov    0x14(%eax),%al
f01073fe:	84 c0                	test   %al,%al
f0107400:	74 23                	je     f0107425 <allocate_frame+0x100>
	{
		pt_clear_page_table_entry((*ptr_frame_info)->environment->env_page_directory,(*ptr_frame_info)->va);
f0107402:	8b 45 08             	mov    0x8(%ebp),%eax
f0107405:	8b 00                	mov    (%eax),%eax
f0107407:	8b 50 0c             	mov    0xc(%eax),%edx
f010740a:	8b 45 08             	mov    0x8(%ebp),%eax
f010740d:	8b 00                	mov    (%eax),%eax
f010740f:	8b 40 10             	mov    0x10(%eax),%eax
f0107412:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0107418:	83 ec 08             	sub    $0x8,%esp
f010741b:	52                   	push   %edx
f010741c:	50                   	push   %eax
f010741d:	e8 81 11 00 00       	call   f01085a3 <pt_clear_page_table_entry>
f0107422:	83 c4 10             	add    $0x10,%esp
	}

	/**********************************************************
	 ***********************************************************/

	initialize_frame_info(*ptr_frame_info);
f0107425:	8b 45 08             	mov    0x8(%ebp),%eax
f0107428:	8b 00                	mov    (%eax),%eax
f010742a:	83 ec 0c             	sub    $0xc,%esp
f010742d:	50                   	push   %eax
f010742e:	e8 d7 fe ff ff       	call   f010730a <initialize_frame_info>
f0107433:	83 c4 10             	add    $0x10,%esp
	return 0;
f0107436:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010743b:	c9                   	leave  
f010743c:	c3                   	ret    

f010743d <free_frame>:
//
// Return a frame to the free_frame_list.
// (This function should only be called when ptr_frame_info->references reaches 0.)
//
void free_frame(struct FrameInfo *ptr_frame_info)
{
f010743d:	55                   	push   %ebp
f010743e:	89 e5                	mov    %esp,%ebp
f0107440:	83 ec 08             	sub    $0x8,%esp
	/*2012: clear it to ensure that its members (env, isBuffered, ...) become NULL*/
	initialize_frame_info(ptr_frame_info);
f0107443:	83 ec 0c             	sub    $0xc,%esp
f0107446:	ff 75 08             	pushl  0x8(%ebp)
f0107449:	e8 bc fe ff ff       	call   f010730a <initialize_frame_info>
f010744e:	83 c4 10             	add    $0x10,%esp
	/*=============================================================================*/

	// Fill this function in
	LIST_INSERT_HEAD(&free_frame_list, ptr_frame_info);
f0107451:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0107455:	75 17                	jne    f010746e <free_frame+0x31>
f0107457:	83 ec 04             	sub    $0x4,%esp
f010745a:	68 ac 2c 13 f0       	push   $0xf0132cac
f010745f:	68 bb 00 00 00       	push   $0xbb
f0107464:	68 cf 2c 13 f0       	push   $0xf0132ccf
f0107469:	e8 42 8d ff ff       	call   f01001b0 <_panic>
f010746e:	8b 15 d8 cd 2b f0    	mov    0xf02bcdd8,%edx
f0107474:	8b 45 08             	mov    0x8(%ebp),%eax
f0107477:	89 10                	mov    %edx,(%eax)
f0107479:	8b 45 08             	mov    0x8(%ebp),%eax
f010747c:	8b 00                	mov    (%eax),%eax
f010747e:	85 c0                	test   %eax,%eax
f0107480:	74 0d                	je     f010748f <free_frame+0x52>
f0107482:	a1 d8 cd 2b f0       	mov    0xf02bcdd8,%eax
f0107487:	8b 55 08             	mov    0x8(%ebp),%edx
f010748a:	89 50 04             	mov    %edx,0x4(%eax)
f010748d:	eb 08                	jmp    f0107497 <free_frame+0x5a>
f010748f:	8b 45 08             	mov    0x8(%ebp),%eax
f0107492:	a3 dc cd 2b f0       	mov    %eax,0xf02bcddc
f0107497:	8b 45 08             	mov    0x8(%ebp),%eax
f010749a:	a3 d8 cd 2b f0       	mov    %eax,0xf02bcdd8
f010749f:	8b 45 08             	mov    0x8(%ebp),%eax
f01074a2:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01074a9:	a1 e4 cd 2b f0       	mov    0xf02bcde4,%eax
f01074ae:	40                   	inc    %eax
f01074af:	a3 e4 cd 2b f0       	mov    %eax,0xf02bcde4
	//LOG_STATMENT(cprintf("FN # %d FREED",to_frame_number(ptr_frame_info)));
}
f01074b4:	90                   	nop
f01074b5:	c9                   	leave  
f01074b6:	c3                   	ret    

f01074b7 <decrement_references>:
//
// Decrement the reference count on a frame
// freeing it if there are no more references.
//
void decrement_references(struct FrameInfo* ptr_frame_info)
{
f01074b7:	55                   	push   %ebp
f01074b8:	89 e5                	mov    %esp,%ebp
f01074ba:	83 ec 08             	sub    $0x8,%esp
	if (--(ptr_frame_info->references) == 0)
f01074bd:	8b 45 08             	mov    0x8(%ebp),%eax
f01074c0:	8b 40 08             	mov    0x8(%eax),%eax
f01074c3:	48                   	dec    %eax
f01074c4:	8b 55 08             	mov    0x8(%ebp),%edx
f01074c7:	66 89 42 08          	mov    %ax,0x8(%edx)
f01074cb:	8b 45 08             	mov    0x8(%ebp),%eax
f01074ce:	8b 40 08             	mov    0x8(%eax),%eax
f01074d1:	66 85 c0             	test   %ax,%ax
f01074d4:	75 0e                	jne    f01074e4 <decrement_references+0x2d>
		free_frame(ptr_frame_info);
f01074d6:	83 ec 0c             	sub    $0xc,%esp
f01074d9:	ff 75 08             	pushl  0x8(%ebp)
f01074dc:	e8 5c ff ff ff       	call   f010743d <free_frame>
f01074e1:	83 c4 10             	add    $0x10,%esp
}
f01074e4:	90                   	nop
f01074e5:	c9                   	leave  
f01074e6:	c3                   	ret    

f01074e7 <get_page_table>:
//  TABLE_IN_MEMORY : if page table exists in main memory
//	TABLE_NOT_EXIST : if page table doesn't exist,
//

int get_page_table(uint32 *ptr_page_directory, const uint32 virtual_address, uint32 **ptr_page_table)
{
f01074e7:	55                   	push   %ebp
f01074e8:	89 e5                	mov    %esp,%ebp
f01074ea:	83 ec 28             	sub    $0x28,%esp
	//	cprintf("gpt .05\n");
	uint32 page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f01074ed:	8b 45 0c             	mov    0xc(%ebp),%eax
f01074f0:	c1 e8 16             	shr    $0x16,%eax
f01074f3:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01074fa:	8b 45 08             	mov    0x8(%ebp),%eax
f01074fd:	01 d0                	add    %edx,%eax
f01074ff:	8b 00                	mov    (%eax),%eax
f0107501:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//2022: check PERM_PRESENT of the table first before calculating its PA
	if ( (page_directory_entry & PERM_PRESENT) == PERM_PRESENT)
f0107504:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107507:	83 e0 01             	and    $0x1,%eax
f010750a:	85 c0                	test   %eax,%eax
f010750c:	74 4e                	je     f010755c <get_page_table+0x75>
			*ptr_page_table = (void *)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
			//cprintf("===>get_page_table: page_dir_entry = %x ptr_page_table = %x\n", page_directory_entry,*ptr_page_table);
		}
		else
		{
			*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f010750e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107511:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0107516:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0107519:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010751c:	c1 e8 0c             	shr    $0xc,%eax
f010751f:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0107522:	a1 d0 cd 2b f0       	mov    0xf02bcdd0,%eax
f0107527:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f010752a:	72 17                	jb     f0107543 <get_page_table+0x5c>
f010752c:	ff 75 f0             	pushl  -0x10(%ebp)
f010752f:	68 8c 2d 13 f0       	push   $0xf0132d8c
f0107534:	68 e2 00 00 00       	push   $0xe2
f0107539:	68 cf 2c 13 f0       	push   $0xf0132ccf
f010753e:	e8 6d 8c ff ff       	call   f01001b0 <_panic>
f0107543:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107546:	2d 00 00 00 10       	sub    $0x10000000,%eax
f010754b:	89 c2                	mov    %eax,%edx
f010754d:	8b 45 10             	mov    0x10(%ebp),%eax
f0107550:	89 10                	mov    %edx,(%eax)
		}
		return TABLE_IN_MEMORY;
f0107552:	b8 00 00 00 00       	mov    $0x0,%eax
f0107557:	e9 8f 00 00 00       	jmp    f01075eb <get_page_table+0x104>
	}
	else if (page_directory_entry != 0) //the table exists but not in main mem, so it must be in sec mem
f010755c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0107560:	74 7b                	je     f01075dd <get_page_table+0xf6>
f0107562:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107565:	89 45 e0             	mov    %eax,-0x20(%ebp)

//Ahmed 2010:
static __inline void
lcr2(uint32 val)
{
	__asm __volatile("movl %0,%%cr2" : : "r" (val));
f0107568:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010756b:	0f 22 d0             	mov    %eax,%cr2
		// Call the fault_handler() to load the table in memory for us ...
		//		cprintf("gpt .1\n, %x page_directory_entry\n", page_directory_entry);
		lcr2((uint32)virtual_address) ;

		//		cprintf("gpt .12\n");
		fault_handler(NULL);
f010756e:	83 ec 0c             	sub    $0xc,%esp
f0107571:	6a 00                	push   $0x0
f0107573:	e8 e7 53 00 00       	call   f010c95f <fault_handler>
f0107578:	83 c4 10             	add    $0x10,%esp

		//		cprintf("gpt .15\n");
		// now the page_fault_handler() should have returned successfully and updated the
		// directory with the new table frame number in memory
		page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f010757b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010757e:	c1 e8 16             	shr    $0x16,%eax
f0107581:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0107588:	8b 45 08             	mov    0x8(%ebp),%eax
f010758b:	01 d0                	add    %edx,%eax
f010758d:	8b 00                	mov    (%eax),%eax
f010758f:	89 45 f4             	mov    %eax,-0xc(%ebp)
		{
			*ptr_page_table = (void *)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
		}
		else
		{
			*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f0107592:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107595:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010759a:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010759d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01075a0:	c1 e8 0c             	shr    $0xc,%eax
f01075a3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01075a6:	a1 d0 cd 2b f0       	mov    0xf02bcdd0,%eax
f01075ab:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f01075ae:	72 17                	jb     f01075c7 <get_page_table+0xe0>
f01075b0:	ff 75 e8             	pushl  -0x18(%ebp)
f01075b3:	68 8c 2d 13 f0       	push   $0xf0132d8c
f01075b8:	68 fa 00 00 00       	push   $0xfa
f01075bd:	68 cf 2c 13 f0       	push   $0xf0132ccf
f01075c2:	e8 e9 8b ff ff       	call   f01001b0 <_panic>
f01075c7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01075ca:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01075cf:	89 c2                	mov    %eax,%edx
f01075d1:	8b 45 10             	mov    0x10(%ebp),%eax
f01075d4:	89 10                	mov    %edx,(%eax)
		}

		return TABLE_IN_MEMORY;
f01075d6:	b8 00 00 00 00       	mov    $0x0,%eax
f01075db:	eb 0e                	jmp    f01075eb <get_page_table+0x104>
	}
	else // there is no table for this va anywhere. This is a new table required, so check if the user want creation
	{
		//		cprintf("gpt .2\n");
		*ptr_page_table = 0;
f01075dd:	8b 45 10             	mov    0x10(%ebp),%eax
f01075e0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return TABLE_NOT_EXIST;
f01075e6:	b8 01 00 00 00       	mov    $0x1,%eax
	}
}
f01075eb:	c9                   	leave  
f01075ec:	c3                   	ret    

f01075ed <create_page_table>:

void * create_page_table(uint32 *ptr_directory, const uint32 virtual_address)
{
f01075ed:	55                   	push   %ebp
f01075ee:	89 e5                	mov    %esp,%ebp
f01075f0:	83 ec 18             	sub    $0x18,%esp
	memset(ptr_page_table , 0, PAGE_SIZE);
	tlbflush();

#else
	uint32 * ptr_page_table ;
	__static_cpt(ptr_directory, virtual_address, &ptr_page_table) ;
f01075f3:	83 ec 04             	sub    $0x4,%esp
f01075f6:	8d 45 f4             	lea    -0xc(%ebp),%eax
f01075f9:	50                   	push   %eax
f01075fa:	ff 75 0c             	pushl  0xc(%ebp)
f01075fd:	ff 75 08             	pushl  0x8(%ebp)
f0107600:	e8 08 00 00 00       	call   f010760d <__static_cpt>
f0107605:	83 c4 10             	add    $0x10,%esp
#endif

	return ptr_page_table;
f0107608:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010760b:	c9                   	leave  
f010760c:	c3                   	ret    

f010760d <__static_cpt>:

void __static_cpt(uint32 *ptr_directory, const uint32 virtual_address, uint32 **ptr_page_table)
{
f010760d:	55                   	push   %ebp
f010760e:	89 e5                	mov    %esp,%ebp
f0107610:	83 ec 28             	sub    $0x28,%esp
	struct FrameInfo* ptr_new_frame_info;
	int err = allocate_frame(&ptr_new_frame_info) ;
f0107613:	83 ec 0c             	sub    $0xc,%esp
f0107616:	8d 45 e0             	lea    -0x20(%ebp),%eax
f0107619:	50                   	push   %eax
f010761a:	e8 06 fd ff ff       	call   f0107325 <allocate_frame>
f010761f:	83 c4 10             	add    $0x10,%esp
f0107622:	89 45 f4             	mov    %eax,-0xc(%ebp)

	uint32 phys_page_table = to_physical_address(ptr_new_frame_info);
f0107625:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0107628:	83 ec 0c             	sub    $0xc,%esp
f010762b:	50                   	push   %eax
f010762c:	e8 28 f8 ff ff       	call   f0106e59 <to_physical_address>
f0107631:	83 c4 10             	add    $0x10,%esp
f0107634:	89 45 f0             	mov    %eax,-0x10(%ebp)
	*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(phys_page_table) ;
f0107637:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010763a:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010763d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107640:	c1 e8 0c             	shr    $0xc,%eax
f0107643:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0107646:	a1 d0 cd 2b f0       	mov    0xf02bcdd0,%eax
f010764b:	39 45 e8             	cmp    %eax,-0x18(%ebp)
f010764e:	72 17                	jb     f0107667 <__static_cpt+0x5a>
f0107650:	ff 75 ec             	pushl  -0x14(%ebp)
f0107653:	68 8c 2d 13 f0       	push   $0xf0132d8c
f0107658:	68 2f 01 00 00       	push   $0x12f
f010765d:	68 cf 2c 13 f0       	push   $0xf0132ccf
f0107662:	e8 49 8b ff ff       	call   f01001b0 <_panic>
f0107667:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010766a:	2d 00 00 00 10       	sub    $0x10000000,%eax
f010766f:	89 c2                	mov    %eax,%edx
f0107671:	8b 45 10             	mov    0x10(%ebp),%eax
f0107674:	89 10                	mov    %edx,(%eax)
	ptr_new_frame_info->references = 1;
f0107676:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0107679:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	ptr_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(phys_page_table, PERM_PRESENT | PERM_USER | PERM_WRITEABLE);
f010767f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107682:	c1 e8 16             	shr    $0x16,%eax
f0107685:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010768c:	8b 45 08             	mov    0x8(%ebp),%eax
f010768f:	01 d0                	add    %edx,%eax
f0107691:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0107694:	83 ca 07             	or     $0x7,%edx
f0107697:	89 10                	mov    %edx,(%eax)
	//initialize new page table by 0's
	memset(*ptr_page_table , 0, PAGE_SIZE);
f0107699:	8b 45 10             	mov    0x10(%ebp),%eax
f010769c:	8b 00                	mov    (%eax),%eax
f010769e:	83 ec 04             	sub    $0x4,%esp
f01076a1:	68 00 10 00 00       	push   $0x1000
f01076a6:	6a 00                	push   $0x0
f01076a8:	50                   	push   %eax
f01076a9:	e8 b8 7f 02 00       	call   f012f666 <memset>
f01076ae:	83 c4 10             	add    $0x10,%esp

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f01076b1:	0f 20 d8             	mov    %cr3,%eax
f01076b4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f01076b7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01076ba:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
}
f01076bd:	90                   	nop
f01076be:	c9                   	leave  
f01076bf:	c3                   	ret    

f01076c0 <map_frame>:
//   0 on success
//
// Hint: implement using get_page_table() and unmap_frame().
//
int map_frame(uint32 *ptr_page_directory, struct FrameInfo *ptr_frame_info, uint32 virtual_address, int perm)
{
f01076c0:	55                   	push   %ebp
f01076c1:	89 e5                	mov    %esp,%ebp
f01076c3:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	uint32 physical_address = to_physical_address(ptr_frame_info);
f01076c6:	ff 75 0c             	pushl  0xc(%ebp)
f01076c9:	e8 8b f7 ff ff       	call   f0106e59 <to_physical_address>
f01076ce:	83 c4 04             	add    $0x4,%esp
f01076d1:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 *ptr_page_table;
	if( get_page_table(ptr_page_directory, virtual_address, &ptr_page_table) == TABLE_NOT_EXIST)
f01076d4:	83 ec 04             	sub    $0x4,%esp
f01076d7:	8d 45 ec             	lea    -0x14(%ebp),%eax
f01076da:	50                   	push   %eax
f01076db:	ff 75 10             	pushl  0x10(%ebp)
f01076de:	ff 75 08             	pushl  0x8(%ebp)
f01076e1:	e8 01 fe ff ff       	call   f01074e7 <get_page_table>
f01076e6:	83 c4 10             	add    $0x10,%esp
f01076e9:	83 f8 01             	cmp    $0x1,%eax
f01076ec:	75 15                	jne    f0107703 <map_frame+0x43>
			uint32* ptr_page_table2 =NULL;
			//cprintf("======> After the table created at %x\n\n", get_page_table(ptr_page_directory, virtual_address,&ptr_page_table2));
		}
#else
		{
			__static_cpt(ptr_page_directory, (uint32)virtual_address, &ptr_page_table);
f01076ee:	83 ec 04             	sub    $0x4,%esp
f01076f1:	8d 45 ec             	lea    -0x14(%ebp),%eax
f01076f4:	50                   	push   %eax
f01076f5:	ff 75 10             	pushl  0x10(%ebp)
f01076f8:	ff 75 08             	pushl  0x8(%ebp)
f01076fb:	e8 0d ff ff ff       	call   f010760d <__static_cpt>
f0107700:	83 c4 10             	add    $0x10,%esp
#endif

	}

	//cprintf("NOW .. map add = %x ptr_page_table = %x PTX(virtual_address) = %d\n", virtual_address, ptr_page_table,PTX(virtual_address));
	uint32 page_table_entry = ptr_page_table[PTX(virtual_address)];
f0107703:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107706:	8b 55 10             	mov    0x10(%ebp),%edx
f0107709:	c1 ea 0c             	shr    $0xc,%edx
f010770c:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0107712:	c1 e2 02             	shl    $0x2,%edx
f0107715:	01 d0                	add    %edx,%eax
f0107717:	8b 00                	mov    (%eax),%eax
f0107719:	89 45 f0             	mov    %eax,-0x10(%ebp)

	}*/

	/*NEW'15 CORRECT SOLUTION*/
	//If already mapped
	if ((page_table_entry & PERM_PRESENT) == PERM_PRESENT)
f010771c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010771f:	83 e0 01             	and    $0x1,%eax
f0107722:	85 c0                	test   %eax,%eax
f0107724:	74 25                	je     f010774b <map_frame+0x8b>
	{
		//on this pa, then do nothing
		if (EXTRACT_ADDRESS(page_table_entry) == physical_address)
f0107726:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107729:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010772e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0107731:	75 07                	jne    f010773a <map_frame+0x7a>
			return 0;
f0107733:	b8 00 00 00 00       	mov    $0x0,%eax
f0107738:	eb 43                	jmp    f010777d <map_frame+0xbd>
		//on another pa, then unmap it
		else
			unmap_frame(ptr_page_directory , virtual_address);
f010773a:	83 ec 08             	sub    $0x8,%esp
f010773d:	ff 75 10             	pushl  0x10(%ebp)
f0107740:	ff 75 08             	pushl  0x8(%ebp)
f0107743:	e8 a7 00 00 00       	call   f01077ef <unmap_frame>
f0107748:	83 c4 10             	add    $0x10,%esp
	}
	ptr_frame_info->references++;
f010774b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010774e:	8b 40 08             	mov    0x8(%eax),%eax
f0107751:	40                   	inc    %eax
f0107752:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107755:	66 89 42 08          	mov    %ax,0x8(%edx)
	ptr_page_table[PTX(virtual_address)] = CONSTRUCT_ENTRY(physical_address , perm | PERM_PRESENT);
f0107759:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010775c:	8b 55 10             	mov    0x10(%ebp),%edx
f010775f:	c1 ea 0c             	shr    $0xc,%edx
f0107762:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0107768:	c1 e2 02             	shl    $0x2,%edx
f010776b:	01 c2                	add    %eax,%edx
f010776d:	8b 45 14             	mov    0x14(%ebp),%eax
f0107770:	0b 45 f4             	or     -0xc(%ebp),%eax
f0107773:	83 c8 01             	or     $0x1,%eax
f0107776:	89 02                	mov    %eax,(%edx)

	return 0;
f0107778:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010777d:	c9                   	leave  
f010777e:	c3                   	ret    

f010777f <get_frame_info>:
// Return 0 if there is no frame mapped at virtual_address.
//
// Hint: implement using get_page_table() and get_frame_info().
//
struct FrameInfo * get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table)
{
f010777f:	55                   	push   %ebp
f0107780:	89 e5                	mov    %esp,%ebp
f0107782:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	//cprintf(".gfi .1\n %x, %x, %x, \n", ptr_page_directory, virtual_address, ptr_page_table);
	uint32 ret =  get_page_table(ptr_page_directory, virtual_address, ptr_page_table) ;
f0107785:	83 ec 04             	sub    $0x4,%esp
f0107788:	ff 75 10             	pushl  0x10(%ebp)
f010778b:	ff 75 0c             	pushl  0xc(%ebp)
f010778e:	ff 75 08             	pushl  0x8(%ebp)
f0107791:	e8 51 fd ff ff       	call   f01074e7 <get_page_table>
f0107796:	83 c4 10             	add    $0x10,%esp
f0107799:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//cprintf(".gfi .15\n");
	if((*ptr_page_table) != 0)
f010779c:	8b 45 10             	mov    0x10(%ebp),%eax
f010779f:	8b 00                	mov    (%eax),%eax
f01077a1:	85 c0                	test   %eax,%eax
f01077a3:	74 43                	je     f01077e8 <get_frame_info+0x69>
	{
		uint32 index_page_table = PTX(virtual_address);
f01077a5:	8b 45 0c             	mov    0xc(%ebp),%eax
f01077a8:	c1 e8 0c             	shr    $0xc,%eax
f01077ab:	25 ff 03 00 00       	and    $0x3ff,%eax
f01077b0:	89 45 f0             	mov    %eax,-0x10(%ebp)
		//cprintf(".gfi .2\n");
		uint32 page_table_entry = (*ptr_page_table)[index_page_table];
f01077b3:	8b 45 10             	mov    0x10(%ebp),%eax
f01077b6:	8b 00                	mov    (%eax),%eax
f01077b8:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01077bb:	c1 e2 02             	shl    $0x2,%edx
f01077be:	01 d0                	add    %edx,%eax
f01077c0:	8b 00                	mov    (%eax),%eax
f01077c2:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if( page_table_entry != 0)
f01077c5:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01077c9:	74 16                	je     f01077e1 <get_frame_info+0x62>
		{
			//cprintf(".gfi .3\n");
			return to_frame_info( EXTRACT_ADDRESS ( page_table_entry ) );
f01077cb:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01077ce:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01077d3:	83 ec 0c             	sub    $0xc,%esp
f01077d6:	50                   	push   %eax
f01077d7:	e8 90 f6 ff ff       	call   f0106e6c <to_frame_info>
f01077dc:	83 c4 10             	add    $0x10,%esp
f01077df:	eb 0c                	jmp    f01077ed <get_frame_info+0x6e>
		}
		return 0;
f01077e1:	b8 00 00 00 00       	mov    $0x0,%eax
f01077e6:	eb 05                	jmp    f01077ed <get_frame_info+0x6e>
	}
	return 0;
f01077e8:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01077ed:	c9                   	leave  
f01077ee:	c3                   	ret    

f01077ef <unmap_frame>:
//
// Hint: implement using get_frame_info(),
// 	tlb_invalidate(), and decrement_references().
//
void unmap_frame(uint32 *ptr_page_directory, uint32 virtual_address)
{
f01077ef:	55                   	push   %ebp
f01077f0:	89 e5                	mov    %esp,%ebp
f01077f2:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	uint32 *ptr_page_table;
	struct FrameInfo* ptr_frame_info = get_frame_info(ptr_page_directory, virtual_address, &ptr_page_table);
f01077f5:	83 ec 04             	sub    $0x4,%esp
f01077f8:	8d 45 f0             	lea    -0x10(%ebp),%eax
f01077fb:	50                   	push   %eax
f01077fc:	ff 75 0c             	pushl  0xc(%ebp)
f01077ff:	ff 75 08             	pushl  0x8(%ebp)
f0107802:	e8 78 ff ff ff       	call   f010777f <get_frame_info>
f0107807:	83 c4 10             	add    $0x10,%esp
f010780a:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if( ptr_frame_info != 0 )
f010780d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0107811:	74 60                	je     f0107873 <unmap_frame+0x84>
	{
		if (ptr_frame_info->isBuffered && !CHECK_IF_KERNEL_ADDRESS((uint32)virtual_address))
f0107813:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107816:	8a 40 14             	mov    0x14(%eax),%al
f0107819:	84 c0                	test   %al,%al
f010781b:	74 1c                	je     f0107839 <unmap_frame+0x4a>
f010781d:	81 7d 0c ff ff bf ee 	cmpl   $0xeebfffff,0xc(%ebp)
f0107824:	77 13                	ja     f0107839 <unmap_frame+0x4a>
			cprintf("Freeing BUFFERED frame at va %x!!!\n", virtual_address) ;
f0107826:	83 ec 08             	sub    $0x8,%esp
f0107829:	ff 75 0c             	pushl  0xc(%ebp)
f010782c:	68 bc 2d 13 f0       	push   $0xf0132dbc
f0107831:	e8 fb 95 ff ff       	call   f0100e31 <cprintf>
f0107836:	83 c4 10             	add    $0x10,%esp
		decrement_references(ptr_frame_info);
f0107839:	83 ec 0c             	sub    $0xc,%esp
f010783c:	ff 75 f4             	pushl  -0xc(%ebp)
f010783f:	e8 73 fc ff ff       	call   f01074b7 <decrement_references>
f0107844:	83 c4 10             	add    $0x10,%esp
		ptr_page_table[PTX(virtual_address)] = 0;
f0107847:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010784a:	8b 55 0c             	mov    0xc(%ebp),%edx
f010784d:	c1 ea 0c             	shr    $0xc,%edx
f0107850:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0107856:	c1 e2 02             	shl    $0x2,%edx
f0107859:	01 d0                	add    %edx,%eax
f010785b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		tlb_invalidate(ptr_page_directory, (void *)virtual_address);
f0107861:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107864:	83 ec 08             	sub    $0x8,%esp
f0107867:	50                   	push   %eax
f0107868:	ff 75 08             	pushl  0x8(%ebp)
f010786b:	e8 4e f6 ff ff       	call   f0106ebe <tlb_invalidate>
f0107870:	83 c4 10             	add    $0x10,%esp
	}
}
f0107873:	90                   	nop
f0107874:	c9                   	leave  
f0107875:	c3                   	ret    

f0107876 <loadtime_map_frame>:
// RETURNS:
//   0 on success
//
//
int loadtime_map_frame(uint32 *ptr_page_directory, struct FrameInfo *ptr_frame_info, uint32 virtual_address, int perm)
{
f0107876:	55                   	push   %ebp
f0107877:	89 e5                	mov    %esp,%ebp
f0107879:	83 ec 28             	sub    $0x28,%esp
	uint32 physical_address = to_physical_address(ptr_frame_info);
f010787c:	ff 75 0c             	pushl  0xc(%ebp)
f010787f:	e8 d5 f5 ff ff       	call   f0106e59 <to_physical_address>
f0107884:	83 c4 04             	add    $0x4,%esp
f0107887:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 *ptr_page_table;

	uint32 page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f010788a:	8b 45 10             	mov    0x10(%ebp),%eax
f010788d:	c1 e8 16             	shr    $0x16,%eax
f0107890:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0107897:	8b 45 08             	mov    0x8(%ebp),%eax
f010789a:	01 d0                	add    %edx,%eax
f010789c:	8b 00                	mov    (%eax),%eax
f010789e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	{
		ptr_page_table = (uint32*)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
	}
	else
	{
		ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f01078a1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01078a4:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01078a9:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01078ac:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01078af:	c1 e8 0c             	shr    $0xc,%eax
f01078b2:	89 45 e8             	mov    %eax,-0x18(%ebp)
f01078b5:	a1 d0 cd 2b f0       	mov    0xf02bcdd0,%eax
f01078ba:	39 45 e8             	cmp    %eax,-0x18(%ebp)
f01078bd:	72 17                	jb     f01078d6 <loadtime_map_frame+0x60>
f01078bf:	ff 75 ec             	pushl  -0x14(%ebp)
f01078c2:	68 8c 2d 13 f0       	push   $0xf0132d8c
f01078c7:	68 e5 01 00 00       	push   $0x1e5
f01078cc:	68 cf 2c 13 f0       	push   $0xf0132ccf
f01078d1:	e8 da 88 ff ff       	call   f01001b0 <_panic>
f01078d6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01078d9:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01078de:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	}

	//if page table not exist, create it in memory and link it with the directory
	if (page_directory_entry == 0)
f01078e1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01078e5:	75 15                	jne    f01078fc <loadtime_map_frame+0x86>
		{
			ptr_page_table = create_page_table(ptr_page_directory, virtual_address);
		}
#else
		{
			__static_cpt(ptr_page_directory, virtual_address, &ptr_page_table);
f01078e7:	83 ec 04             	sub    $0x4,%esp
f01078ea:	8d 45 e4             	lea    -0x1c(%ebp),%eax
f01078ed:	50                   	push   %eax
f01078ee:	ff 75 10             	pushl  0x10(%ebp)
f01078f1:	ff 75 08             	pushl  0x8(%ebp)
f01078f4:	e8 14 fd ff ff       	call   f010760d <__static_cpt>
f01078f9:	83 c4 10             	add    $0x10,%esp
		}
#endif
	}

	ptr_frame_info->references++;
f01078fc:	8b 45 0c             	mov    0xc(%ebp),%eax
f01078ff:	8b 40 08             	mov    0x8(%eax),%eax
f0107902:	40                   	inc    %eax
f0107903:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107906:	66 89 42 08          	mov    %ax,0x8(%edx)
	ptr_page_table[PTX(virtual_address)] = CONSTRUCT_ENTRY(physical_address , perm | PERM_PRESENT);
f010790a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010790d:	8b 55 10             	mov    0x10(%ebp),%edx
f0107910:	c1 ea 0c             	shr    $0xc,%edx
f0107913:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0107919:	c1 e2 02             	shl    $0x2,%edx
f010791c:	01 c2                	add    %eax,%edx
f010791e:	8b 45 14             	mov    0x14(%ebp),%eax
f0107921:	0b 45 f4             	or     -0xc(%ebp),%eax
f0107924:	83 c8 01             	or     $0x1,%eax
f0107927:	89 02                	mov    %eax,(%edx)

	return 0;
f0107929:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010792e:	c9                   	leave  
f010792f:	c3                   	ret    

f0107930 <calculate_available_frames>:



// calculate_available_frames:
struct freeFramesCounters calculate_available_frames()
{
f0107930:	55                   	push   %ebp
f0107931:	89 e5                	mov    %esp,%ebp
f0107933:	57                   	push   %edi
f0107934:	56                   	push   %esi
f0107935:	53                   	push   %ebx
f0107936:	83 ec 20             	sub    $0x20,%esp

	//calculate the free frames from the free frame list
	struct FrameInfo *ptr;
	uint32 totalFreeUnBuffered = 0 ;
f0107939:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	uint32 totalFreeBuffered = 0 ;
f0107940:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	uint32 totalModified = 0 ;
f0107947:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	LIST_FOREACH(ptr, &free_frame_list)
f010794e:	a1 d8 cd 2b f0       	mov    0xf02bcdd8,%eax
f0107953:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0107956:	eb 1a                	jmp    f0107972 <calculate_available_frames+0x42>
	{
		if (ptr->isBuffered)
f0107958:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010795b:	8a 40 14             	mov    0x14(%eax),%al
f010795e:	84 c0                	test   %al,%al
f0107960:	74 05                	je     f0107967 <calculate_available_frames+0x37>
			totalFreeBuffered++ ;
f0107962:	ff 45 e8             	incl   -0x18(%ebp)
f0107965:	eb 03                	jmp    f010796a <calculate_available_frames+0x3a>
		else
			totalFreeUnBuffered++ ;
f0107967:	ff 45 ec             	incl   -0x14(%ebp)
	struct FrameInfo *ptr;
	uint32 totalFreeUnBuffered = 0 ;
	uint32 totalFreeBuffered = 0 ;
	uint32 totalModified = 0 ;

	LIST_FOREACH(ptr, &free_frame_list)
f010796a:	a1 e0 cd 2b f0       	mov    0xf02bcde0,%eax
f010796f:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0107972:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0107976:	74 07                	je     f010797f <calculate_available_frames+0x4f>
f0107978:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010797b:	8b 00                	mov    (%eax),%eax
f010797d:	eb 05                	jmp    f0107984 <calculate_available_frames+0x54>
f010797f:	b8 00 00 00 00       	mov    $0x0,%eax
f0107984:	a3 e0 cd 2b f0       	mov    %eax,0xf02bcde0
f0107989:	a1 e0 cd 2b f0       	mov    0xf02bcde0,%eax
f010798e:	85 c0                	test   %eax,%eax
f0107990:	75 c6                	jne    f0107958 <calculate_available_frames+0x28>
f0107992:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0107996:	75 c0                	jne    f0107958 <calculate_available_frames+0x28>
			totalFreeBuffered++ ;
		else
			totalFreeUnBuffered++ ;
	}

	LIST_FOREACH(ptr, &modified_frame_list)
f0107998:	a1 40 4a 25 f0       	mov    0xf0254a40,%eax
f010799d:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01079a0:	eb 0b                	jmp    f01079ad <calculate_available_frames+0x7d>
	{
		totalModified++ ;
f01079a2:	ff 45 e4             	incl   -0x1c(%ebp)
			totalFreeBuffered++ ;
		else
			totalFreeUnBuffered++ ;
	}

	LIST_FOREACH(ptr, &modified_frame_list)
f01079a5:	a1 48 4a 25 f0       	mov    0xf0254a48,%eax
f01079aa:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01079ad:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01079b1:	74 07                	je     f01079ba <calculate_available_frames+0x8a>
f01079b3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01079b6:	8b 00                	mov    (%eax),%eax
f01079b8:	eb 05                	jmp    f01079bf <calculate_available_frames+0x8f>
f01079ba:	b8 00 00 00 00       	mov    $0x0,%eax
f01079bf:	a3 48 4a 25 f0       	mov    %eax,0xf0254a48
f01079c4:	a1 48 4a 25 f0       	mov    0xf0254a48,%eax
f01079c9:	85 c0                	test   %eax,%eax
f01079cb:	75 d5                	jne    f01079a2 <calculate_available_frames+0x72>
f01079cd:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01079d1:	75 cf                	jne    f01079a2 <calculate_available_frames+0x72>
	{
		totalModified++ ;
	}

	struct freeFramesCounters counters ;
	counters.freeBuffered = totalFreeBuffered ;
f01079d3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01079d6:	89 45 d8             	mov    %eax,-0x28(%ebp)
	counters.freeNotBuffered = totalFreeUnBuffered ;
f01079d9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01079dc:	89 45 dc             	mov    %eax,-0x24(%ebp)
	counters.modified = totalModified;
f01079df:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01079e2:	89 45 e0             	mov    %eax,-0x20(%ebp)
	return counters;
f01079e5:	8b 45 08             	mov    0x8(%ebp),%eax
f01079e8:	89 c3                	mov    %eax,%ebx
f01079ea:	8d 45 d8             	lea    -0x28(%ebp),%eax
f01079ed:	ba 03 00 00 00       	mov    $0x3,%edx
f01079f2:	89 df                	mov    %ebx,%edi
f01079f4:	89 c6                	mov    %eax,%esi
f01079f6:	89 d1                	mov    %edx,%ecx
f01079f8:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
}
f01079fa:	8b 45 08             	mov    0x8(%ebp),%eax
f01079fd:	83 c4 20             	add    $0x20,%esp
f0107a00:	5b                   	pop    %ebx
f0107a01:	5e                   	pop    %esi
f0107a02:	5f                   	pop    %edi
f0107a03:	5d                   	pop    %ebp
f0107a04:	c2 04 00             	ret    $0x4

f0107a07 <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f0107a07:	55                   	push   %ebp
f0107a08:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f0107a0a:	8b 45 08             	mov    0x8(%ebp),%eax
f0107a0d:	8b 15 10 ce 2b f0    	mov    0xf02bce10,%edx
f0107a13:	29 d0                	sub    %edx,%eax
f0107a15:	c1 f8 02             	sar    $0x2,%eax
f0107a18:	89 c2                	mov    %eax,%edx
f0107a1a:	89 d0                	mov    %edx,%eax
f0107a1c:	c1 e0 03             	shl    $0x3,%eax
f0107a1f:	01 d0                	add    %edx,%eax
f0107a21:	c1 e0 03             	shl    $0x3,%eax
f0107a24:	01 d0                	add    %edx,%eax
f0107a26:	c1 e0 03             	shl    $0x3,%eax
f0107a29:	01 d0                	add    %edx,%eax
f0107a2b:	c1 e0 03             	shl    $0x3,%eax
f0107a2e:	01 d0                	add    %edx,%eax
f0107a30:	89 c1                	mov    %eax,%ecx
f0107a32:	c1 e1 0f             	shl    $0xf,%ecx
f0107a35:	01 c8                	add    %ecx,%eax
f0107a37:	c1 e0 03             	shl    $0x3,%eax
f0107a3a:	01 d0                	add    %edx,%eax
f0107a3c:	f7 d8                	neg    %eax
}
f0107a3e:	5d                   	pop    %ebp
f0107a3f:	c3                   	ret    

f0107a40 <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f0107a40:	55                   	push   %ebp
f0107a41:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f0107a43:	ff 75 08             	pushl  0x8(%ebp)
f0107a46:	e8 bc ff ff ff       	call   f0107a07 <to_frame_number>
f0107a4b:	83 c4 04             	add    $0x4,%esp
f0107a4e:	c1 e0 0c             	shl    $0xc,%eax
}
f0107a51:	c9                   	leave  
f0107a52:	c3                   	ret    

f0107a53 <to_frame_info>:

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f0107a53:	55                   	push   %ebp
f0107a54:	89 e5                	mov    %esp,%ebp
f0107a56:	53                   	push   %ebx
f0107a57:	83 ec 04             	sub    $0x4,%esp
	if (PPN(physical_address) >= number_of_frames)
f0107a5a:	8b 45 08             	mov    0x8(%ebp),%eax
f0107a5d:	c1 e8 0c             	shr    $0xc,%eax
f0107a60:	89 c2                	mov    %eax,%edx
f0107a62:	a1 d0 cd 2b f0       	mov    0xf02bcdd0,%eax
f0107a67:	39 c2                	cmp    %eax,%edx
f0107a69:	72 14                	jb     f0107a7f <to_frame_info+0x2c>
		panic("to_frame_info called with invalid pa");
f0107a6b:	83 ec 04             	sub    $0x4,%esp
f0107a6e:	68 e0 2d 13 f0       	push   $0xf0132de0
f0107a73:	6a 55                	push   $0x55
f0107a75:	68 05 2e 13 f0       	push   $0xf0132e05
f0107a7a:	e8 31 87 ff ff       	call   f01001b0 <_panic>
	return &frames_info[PPN(physical_address)];
f0107a7f:	8b 0d 10 ce 2b f0    	mov    0xf02bce10,%ecx
f0107a85:	8b 45 08             	mov    0x8(%ebp),%eax
f0107a88:	c1 e8 0c             	shr    $0xc,%eax
f0107a8b:	89 c2                	mov    %eax,%edx
f0107a8d:	89 d0                	mov    %edx,%eax
f0107a8f:	01 c0                	add    %eax,%eax
f0107a91:	01 d0                	add    %edx,%eax
f0107a93:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0107a9a:	01 d8                	add    %ebx,%eax
f0107a9c:	01 d0                	add    %edx,%eax
f0107a9e:	01 c8                	add    %ecx,%eax
}
f0107aa0:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0107aa3:	c9                   	leave  
f0107aa4:	c3                   	ret    

f0107aa5 <create_shares_array>:
// [1] Create "shares" array:
//===========================
//Dynamically allocate the array of shared objects
//initialize the array of shared objects by 0's and empty = 1
void create_shares_array(uint32 numOfElements)
{
f0107aa5:	55                   	push   %ebp
f0107aa6:	89 e5                	mov    %esp,%ebp
f0107aa8:	83 ec 18             	sub    $0x18,%esp
	if (shares == NULL)
	{
		panic("Kernel runs out of memory\nCan't create the array of shared objects.");
	}
#endif
	for (int i = 0; i < MAX_SHARES; ++i)
f0107aab:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0107ab2:	eb 5f                	jmp    f0107b13 <create_shares_array+0x6e>
	{
		memset(&(shares[i]), 0, sizeof(struct Share));
f0107ab4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107ab7:	89 d0                	mov    %edx,%eax
f0107ab9:	01 c0                	add    %eax,%eax
f0107abb:	01 d0                	add    %edx,%eax
f0107abd:	01 c0                	add    %eax,%eax
f0107abf:	01 d0                	add    %edx,%eax
f0107ac1:	c1 e0 02             	shl    $0x2,%eax
f0107ac4:	01 d0                	add    %edx,%eax
f0107ac6:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0107acd:	01 d0                	add    %edx,%eax
f0107acf:	c1 e0 04             	shl    $0x4,%eax
f0107ad2:	05 80 4a 25 f0       	add    $0xf0254a80,%eax
f0107ad7:	83 ec 04             	sub    $0x4,%esp
f0107ada:	68 50 10 00 00       	push   $0x1050
f0107adf:	6a 00                	push   $0x0
f0107ae1:	50                   	push   %eax
f0107ae2:	e8 7f 7b 02 00       	call   f012f666 <memset>
f0107ae7:	83 c4 10             	add    $0x10,%esp
		shares[i].empty = 1;
f0107aea:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107aed:	89 d0                	mov    %edx,%eax
f0107aef:	01 c0                	add    %eax,%eax
f0107af1:	01 d0                	add    %edx,%eax
f0107af3:	01 c0                	add    %eax,%eax
f0107af5:	01 d0                	add    %edx,%eax
f0107af7:	c1 e0 02             	shl    $0x2,%eax
f0107afa:	01 d0                	add    %edx,%eax
f0107afc:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0107b03:	01 d0                	add    %edx,%eax
f0107b05:	c1 e0 04             	shl    $0x4,%eax
f0107b08:	05 cd 4a 25 f0       	add    $0xf0254acd,%eax
f0107b0d:	c6 00 01             	movb   $0x1,(%eax)
	if (shares == NULL)
	{
		panic("Kernel runs out of memory\nCan't create the array of shared objects.");
	}
#endif
	for (int i = 0; i < MAX_SHARES; ++i)
f0107b10:	ff 45 f4             	incl   -0xc(%ebp)
f0107b13:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
f0107b17:	7e 9b                	jle    f0107ab4 <create_shares_array+0xf>
	{
		memset(&(shares[i]), 0, sizeof(struct Share));
		shares[i].empty = 1;
	}
}
f0107b19:	90                   	nop
f0107b1a:	c9                   	leave  
f0107b1b:	c3                   	ret    

f0107b1c <allocate_share_object>:
//	a) if succeed:
//		1. allocatedObject (pointer to struct Share) passed by reference
//		2. sharedObjectID (its index in the array) as a return parameter
//	b) E_NO_SHARE if the the array of shares is full (i.e. reaches "MAX_SHARES")
int allocate_share_object(struct Share **allocatedObject)
{
f0107b1c:	55                   	push   %ebp
f0107b1d:	89 e5                	mov    %esp,%ebp
f0107b1f:	83 ec 18             	sub    $0x18,%esp
	int32 sharedObjectID = -1 ;
f0107b22:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
	for (int i = 0; i < MAX_SHARES; ++i)
f0107b29:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0107b30:	eb 34                	jmp    f0107b66 <allocate_share_object+0x4a>
	{
		if (shares[i].empty)
f0107b32:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0107b35:	89 d0                	mov    %edx,%eax
f0107b37:	01 c0                	add    %eax,%eax
f0107b39:	01 d0                	add    %edx,%eax
f0107b3b:	01 c0                	add    %eax,%eax
f0107b3d:	01 d0                	add    %edx,%eax
f0107b3f:	c1 e0 02             	shl    $0x2,%eax
f0107b42:	01 d0                	add    %edx,%eax
f0107b44:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0107b4b:	01 d0                	add    %edx,%eax
f0107b4d:	c1 e0 04             	shl    $0x4,%eax
f0107b50:	05 cd 4a 25 f0       	add    $0xf0254acd,%eax
f0107b55:	8a 00                	mov    (%eax),%al
f0107b57:	84 c0                	test   %al,%al
f0107b59:	74 08                	je     f0107b63 <allocate_share_object+0x47>
		{
			sharedObjectID = i;
f0107b5b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107b5e:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f0107b61:	eb 09                	jmp    f0107b6c <allocate_share_object+0x50>
//		2. sharedObjectID (its index in the array) as a return parameter
//	b) E_NO_SHARE if the the array of shares is full (i.e. reaches "MAX_SHARES")
int allocate_share_object(struct Share **allocatedObject)
{
	int32 sharedObjectID = -1 ;
	for (int i = 0; i < MAX_SHARES; ++i)
f0107b63:	ff 45 f0             	incl   -0x10(%ebp)
f0107b66:	83 7d f0 63          	cmpl   $0x63,-0x10(%ebp)
f0107b6a:	7e c6                	jle    f0107b32 <allocate_share_object+0x16>
			sharedObjectID = i;
			break;
		}
	}

	if (sharedObjectID == -1)
f0107b6c:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f0107b70:	75 0a                	jne    f0107b7c <allocate_share_object+0x60>
	{
		return E_NO_SHARE ;
f0107b72:	b8 f2 ff ff ff       	mov    $0xfffffff2,%eax
f0107b77:	e9 8b 00 00 00       	jmp    f0107c07 <allocate_share_object+0xeb>
//			return E_NO_SHARE;
//		}
//#endif
	}

	*allocatedObject = &(shares[sharedObjectID]);
f0107b7c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107b7f:	89 d0                	mov    %edx,%eax
f0107b81:	01 c0                	add    %eax,%eax
f0107b83:	01 d0                	add    %edx,%eax
f0107b85:	01 c0                	add    %eax,%eax
f0107b87:	01 d0                	add    %edx,%eax
f0107b89:	c1 e0 02             	shl    $0x2,%eax
f0107b8c:	01 d0                	add    %edx,%eax
f0107b8e:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0107b95:	01 d0                	add    %edx,%eax
f0107b97:	c1 e0 04             	shl    $0x4,%eax
f0107b9a:	8d 90 80 4a 25 f0    	lea    -0xfdab580(%eax),%edx
f0107ba0:	8b 45 08             	mov    0x8(%ebp),%eax
f0107ba3:	89 10                	mov    %edx,(%eax)
	shares[sharedObjectID].empty = 0;
f0107ba5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107ba8:	89 d0                	mov    %edx,%eax
f0107baa:	01 c0                	add    %eax,%eax
f0107bac:	01 d0                	add    %edx,%eax
f0107bae:	01 c0                	add    %eax,%eax
f0107bb0:	01 d0                	add    %edx,%eax
f0107bb2:	c1 e0 02             	shl    $0x2,%eax
f0107bb5:	01 d0                	add    %edx,%eax
f0107bb7:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0107bbe:	01 d0                	add    %edx,%eax
f0107bc0:	c1 e0 04             	shl    $0x4,%eax
f0107bc3:	05 cd 4a 25 f0       	add    $0xf0254acd,%eax
f0107bc8:	c6 00 00             	movb   $0x0,(%eax)
#if USE_KHEAP
	{
		shares[sharedObjectID].framesStorage = create_frames_storage();
	}
#endif
	memset(shares[sharedObjectID].framesStorage, 0, PAGE_SIZE);
f0107bcb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107bce:	89 d0                	mov    %edx,%eax
f0107bd0:	01 c0                	add    %eax,%eax
f0107bd2:	01 d0                	add    %edx,%eax
f0107bd4:	01 c0                	add    %eax,%eax
f0107bd6:	01 d0                	add    %edx,%eax
f0107bd8:	c1 e0 02             	shl    $0x2,%eax
f0107bdb:	01 d0                	add    %edx,%eax
f0107bdd:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0107be4:	01 d0                	add    %edx,%eax
f0107be6:	c1 e0 04             	shl    $0x4,%eax
f0107be9:	83 c0 50             	add    $0x50,%eax
f0107bec:	05 80 4a 25 f0       	add    $0xf0254a80,%eax
f0107bf1:	83 ec 04             	sub    $0x4,%esp
f0107bf4:	68 00 10 00 00       	push   $0x1000
f0107bf9:	6a 00                	push   $0x0
f0107bfb:	50                   	push   %eax
f0107bfc:	e8 65 7a 02 00       	call   f012f666 <memset>
f0107c01:	83 c4 10             	add    $0x10,%esp

	return sharedObjectID;
f0107c04:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0107c07:	c9                   	leave  
f0107c08:	c3                   	ret    

f0107c09 <get_share_object_ID>:
//Search for the given shared object in the "shares" array
//Return:
//	a) if found: SharedObjectID (index of the shared object in the array)
//	b) else: E_SHARED_MEM_NOT_EXISTS
int get_share_object_ID(int32 ownerID, char* name)
{
f0107c09:	55                   	push   %ebp
f0107c0a:	89 e5                	mov    %esp,%ebp
f0107c0c:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f0107c0f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	for(; i< MAX_SHARES; ++i)
f0107c16:	e9 95 00 00 00       	jmp    f0107cb0 <get_share_object_ID+0xa7>
	{
		if (shares[i].empty)
f0107c1b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107c1e:	89 d0                	mov    %edx,%eax
f0107c20:	01 c0                	add    %eax,%eax
f0107c22:	01 d0                	add    %edx,%eax
f0107c24:	01 c0                	add    %eax,%eax
f0107c26:	01 d0                	add    %edx,%eax
f0107c28:	c1 e0 02             	shl    $0x2,%eax
f0107c2b:	01 d0                	add    %edx,%eax
f0107c2d:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0107c34:	01 d0                	add    %edx,%eax
f0107c36:	c1 e0 04             	shl    $0x4,%eax
f0107c39:	05 cd 4a 25 f0       	add    $0xf0254acd,%eax
f0107c3e:	8a 00                	mov    (%eax),%al
f0107c40:	84 c0                	test   %al,%al
f0107c42:	75 68                	jne    f0107cac <get_share_object_ID+0xa3>
			continue;

		//cprintf("shared var name = %s compared with %s\n", name, shares[i].name);
		if(shares[i].ownerID == ownerID && strcmp(name, shares[i].name)==0)
f0107c44:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107c47:	89 d0                	mov    %edx,%eax
f0107c49:	01 c0                	add    %eax,%eax
f0107c4b:	01 d0                	add    %edx,%eax
f0107c4d:	01 c0                	add    %eax,%eax
f0107c4f:	01 d0                	add    %edx,%eax
f0107c51:	c1 e0 02             	shl    $0x2,%eax
f0107c54:	01 d0                	add    %edx,%eax
f0107c56:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0107c5d:	01 d0                	add    %edx,%eax
f0107c5f:	c1 e0 04             	shl    $0x4,%eax
f0107c62:	05 80 4a 25 f0       	add    $0xf0254a80,%eax
f0107c67:	8b 00                	mov    (%eax),%eax
f0107c69:	3b 45 08             	cmp    0x8(%ebp),%eax
f0107c6c:	75 3f                	jne    f0107cad <get_share_object_ID+0xa4>
f0107c6e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107c71:	89 d0                	mov    %edx,%eax
f0107c73:	01 c0                	add    %eax,%eax
f0107c75:	01 d0                	add    %edx,%eax
f0107c77:	01 c0                	add    %eax,%eax
f0107c79:	01 d0                	add    %edx,%eax
f0107c7b:	c1 e0 02             	shl    $0x2,%eax
f0107c7e:	01 d0                	add    %edx,%eax
f0107c80:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0107c87:	01 d0                	add    %edx,%eax
f0107c89:	c1 e0 04             	shl    $0x4,%eax
f0107c8c:	05 80 4a 25 f0       	add    $0xf0254a80,%eax
f0107c91:	83 c0 04             	add    $0x4,%eax
f0107c94:	83 ec 08             	sub    $0x8,%esp
f0107c97:	50                   	push   %eax
f0107c98:	ff 75 0c             	pushl  0xc(%ebp)
f0107c9b:	e8 e4 78 02 00       	call   f012f584 <strcmp>
f0107ca0:	83 c4 10             	add    $0x10,%esp
f0107ca3:	85 c0                	test   %eax,%eax
f0107ca5:	75 06                	jne    f0107cad <get_share_object_ID+0xa4>
		{
			//cprintf("%s found\n", name);
			return i;
f0107ca7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107caa:	eb 13                	jmp    f0107cbf <get_share_object_ID+0xb6>
	int i=0;

	for(; i< MAX_SHARES; ++i)
	{
		if (shares[i].empty)
			continue;
f0107cac:	90                   	nop
//	b) else: E_SHARED_MEM_NOT_EXISTS
int get_share_object_ID(int32 ownerID, char* name)
{
	int i=0;

	for(; i< MAX_SHARES; ++i)
f0107cad:	ff 45 f4             	incl   -0xc(%ebp)
f0107cb0:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
f0107cb4:	0f 8e 61 ff ff ff    	jle    f0107c1b <get_share_object_ID+0x12>
		{
			//cprintf("%s found\n", name);
			return i;
		}
	}
	return E_SHARED_MEM_NOT_EXISTS;
f0107cba:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
}
f0107cbf:	c9                   	leave  
f0107cc0:	c3                   	ret    

f0107cc1 <free_share_object>:
//delete the given sharedObjectID from the "shares" array
//Return:
//	a) 0 if succeed
//	b) E_SHARED_MEM_NOT_EXISTS if the shared object is not exists
int free_share_object(uint32 sharedObjectID)
{
f0107cc1:	55                   	push   %ebp
f0107cc2:	89 e5                	mov    %esp,%ebp
f0107cc4:	83 ec 08             	sub    $0x8,%esp
	if (sharedObjectID >= MAX_SHARES)
f0107cc7:	83 7d 08 63          	cmpl   $0x63,0x8(%ebp)
f0107ccb:	76 0a                	jbe    f0107cd7 <free_share_object+0x16>
		return E_SHARED_MEM_NOT_EXISTS;
f0107ccd:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
f0107cd2:	e9 93 00 00 00       	jmp    f0107d6a <free_share_object+0xa9>

	//panic("deleteSharedObject: not implemented yet");
	clear_frames_storage(shares[sharedObjectID].framesStorage);
f0107cd7:	8b 55 08             	mov    0x8(%ebp),%edx
f0107cda:	89 d0                	mov    %edx,%eax
f0107cdc:	01 c0                	add    %eax,%eax
f0107cde:	01 d0                	add    %edx,%eax
f0107ce0:	01 c0                	add    %eax,%eax
f0107ce2:	01 d0                	add    %edx,%eax
f0107ce4:	c1 e0 02             	shl    $0x2,%eax
f0107ce7:	01 d0                	add    %edx,%eax
f0107ce9:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0107cf0:	01 d0                	add    %edx,%eax
f0107cf2:	c1 e0 04             	shl    $0x4,%eax
f0107cf5:	83 c0 50             	add    $0x50,%eax
f0107cf8:	05 80 4a 25 f0       	add    $0xf0254a80,%eax
f0107cfd:	83 ec 0c             	sub    $0xc,%esp
f0107d00:	50                   	push   %eax
f0107d01:	e8 3e 01 00 00       	call   f0107e44 <clear_frames_storage>
f0107d06:	83 c4 10             	add    $0x10,%esp
#if USE_KHEAP
	kfree(shares[sharedObjectID].framesStorage);
#endif
	memset(&(shares[sharedObjectID]), 0, sizeof(struct Share));
f0107d09:	8b 55 08             	mov    0x8(%ebp),%edx
f0107d0c:	89 d0                	mov    %edx,%eax
f0107d0e:	01 c0                	add    %eax,%eax
f0107d10:	01 d0                	add    %edx,%eax
f0107d12:	01 c0                	add    %eax,%eax
f0107d14:	01 d0                	add    %edx,%eax
f0107d16:	c1 e0 02             	shl    $0x2,%eax
f0107d19:	01 d0                	add    %edx,%eax
f0107d1b:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0107d22:	01 d0                	add    %edx,%eax
f0107d24:	c1 e0 04             	shl    $0x4,%eax
f0107d27:	05 80 4a 25 f0       	add    $0xf0254a80,%eax
f0107d2c:	83 ec 04             	sub    $0x4,%esp
f0107d2f:	68 50 10 00 00       	push   $0x1050
f0107d34:	6a 00                	push   $0x0
f0107d36:	50                   	push   %eax
f0107d37:	e8 2a 79 02 00       	call   f012f666 <memset>
f0107d3c:	83 c4 10             	add    $0x10,%esp
	shares[sharedObjectID].empty = 1;
f0107d3f:	8b 55 08             	mov    0x8(%ebp),%edx
f0107d42:	89 d0                	mov    %edx,%eax
f0107d44:	01 c0                	add    %eax,%eax
f0107d46:	01 d0                	add    %edx,%eax
f0107d48:	01 c0                	add    %eax,%eax
f0107d4a:	01 d0                	add    %edx,%eax
f0107d4c:	c1 e0 02             	shl    $0x2,%eax
f0107d4f:	01 d0                	add    %edx,%eax
f0107d51:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0107d58:	01 d0                	add    %edx,%eax
f0107d5a:	c1 e0 04             	shl    $0x4,%eax
f0107d5d:	05 cd 4a 25 f0       	add    $0xf0254acd,%eax
f0107d62:	c6 00 01             	movb   $0x1,(%eax)

	return 0;
f0107d65:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0107d6a:	c9                   	leave  
f0107d6b:	c3                   	ret    

f0107d6c <create_frames_storage>:
//===========================
// [5] Create frames_storage:
//===========================
// if KHEAP = 1: Create the frames_storage by allocating a PAGE for its directory
inline uint32* create_frames_storage()
{
f0107d6c:	55                   	push   %ebp
f0107d6d:	89 e5                	mov    %esp,%ebp
f0107d6f:	83 ec 18             	sub    $0x18,%esp
	uint32* frames_storage = kmalloc(PAGE_SIZE);
f0107d72:	83 ec 0c             	sub    $0xc,%esp
f0107d75:	68 00 10 00 00       	push   $0x1000
f0107d7a:	e8 d4 04 00 00       	call   f0108253 <kmalloc>
f0107d7f:	83 c4 10             	add    $0x10,%esp
f0107d82:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(frames_storage == NULL)
f0107d85:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0107d89:	75 17                	jne    f0107da2 <create_frames_storage+0x36>
	{
		panic("NOT ENOUGH KERNEL HEAP SPACE");
f0107d8b:	83 ec 04             	sub    $0x4,%esp
f0107d8e:	68 1f 2e 13 f0       	push   $0xf0132e1f
f0107d93:	68 a6 00 00 00       	push   $0xa6
f0107d98:	68 3c 2e 13 f0       	push   $0xf0132e3c
f0107d9d:	e8 0e 84 ff ff       	call   f01001b0 <_panic>
	}
	return frames_storage;
f0107da2:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0107da5:	c9                   	leave  
f0107da6:	c3                   	ret    

f0107da7 <add_frame_to_storage>:
//===========================
// [6] Add frame to storage:
//===========================
// Add a frame info to the storage of frames at the given index
inline void add_frame_to_storage(uint32* frames_storage, struct FrameInfo* ptr_frame_info, uint32 index)
{
f0107da7:	55                   	push   %ebp
f0107da8:	89 e5                	mov    %esp,%ebp
f0107daa:	53                   	push   %ebx
f0107dab:	83 ec 14             	sub    $0x14,%esp
	uint32 va = index * PAGE_SIZE ;
f0107dae:	8b 45 10             	mov    0x10(%ebp),%eax
f0107db1:	c1 e0 0c             	shl    $0xc,%eax
f0107db4:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 *ptr_page_table;
	int r = get_page_table(frames_storage,  va, &ptr_page_table);
f0107db7:	83 ec 04             	sub    $0x4,%esp
f0107dba:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0107dbd:	50                   	push   %eax
f0107dbe:	ff 75 f4             	pushl  -0xc(%ebp)
f0107dc1:	ff 75 08             	pushl  0x8(%ebp)
f0107dc4:	e8 1e f7 ff ff       	call   f01074e7 <get_page_table>
f0107dc9:	83 c4 10             	add    $0x10,%esp
f0107dcc:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if(r == TABLE_NOT_EXIST)
f0107dcf:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f0107dd3:	75 15                	jne    f0107dea <add_frame_to_storage+0x43>
		{
			ptr_page_table = create_page_table(frames_storage, (uint32)va);
		}
#else
		{
			__static_cpt(frames_storage, (uint32)va, &ptr_page_table);
f0107dd5:	83 ec 04             	sub    $0x4,%esp
f0107dd8:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0107ddb:	50                   	push   %eax
f0107ddc:	ff 75 f4             	pushl  -0xc(%ebp)
f0107ddf:	ff 75 08             	pushl  0x8(%ebp)
f0107de2:	e8 26 f8 ff ff       	call   f010760d <__static_cpt>
f0107de7:	83 c4 10             	add    $0x10,%esp

		}
#endif
	}
	ptr_page_table[PTX(va)] = CONSTRUCT_ENTRY(to_physical_address(ptr_frame_info), 0 | PERM_PRESENT);
f0107dea:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107ded:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107df0:	c1 ea 0c             	shr    $0xc,%edx
f0107df3:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0107df9:	c1 e2 02             	shl    $0x2,%edx
f0107dfc:	8d 1c 10             	lea    (%eax,%edx,1),%ebx
f0107dff:	83 ec 0c             	sub    $0xc,%esp
f0107e02:	ff 75 0c             	pushl  0xc(%ebp)
f0107e05:	e8 36 fc ff ff       	call   f0107a40 <to_physical_address>
f0107e0a:	83 c4 10             	add    $0x10,%esp
f0107e0d:	83 c8 01             	or     $0x1,%eax
f0107e10:	89 03                	mov    %eax,(%ebx)
}
f0107e12:	90                   	nop
f0107e13:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0107e16:	c9                   	leave  
f0107e17:	c3                   	ret    

f0107e18 <get_frame_from_storage>:
//===========================
// [7] Get frame from storage:
//===========================
// Get a frame info from the storage of frames at the given index
inline struct FrameInfo* get_frame_from_storage(uint32* frames_storage, uint32 index)
{
f0107e18:	55                   	push   %ebp
f0107e19:	89 e5                	mov    %esp,%ebp
f0107e1b:	83 ec 18             	sub    $0x18,%esp
	struct FrameInfo* ptr_frame_info;
	uint32 *ptr_page_table ;
	uint32 va = index * PAGE_SIZE ;
f0107e1e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107e21:	c1 e0 0c             	shl    $0xc,%eax
f0107e24:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_frame_info = get_frame_info(frames_storage,  va, &ptr_page_table);
f0107e27:	83 ec 04             	sub    $0x4,%esp
f0107e2a:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0107e2d:	50                   	push   %eax
f0107e2e:	ff 75 f4             	pushl  -0xc(%ebp)
f0107e31:	ff 75 08             	pushl  0x8(%ebp)
f0107e34:	e8 46 f9 ff ff       	call   f010777f <get_frame_info>
f0107e39:	83 c4 10             	add    $0x10,%esp
f0107e3c:	89 45 f0             	mov    %eax,-0x10(%ebp)
	return ptr_frame_info;
f0107e3f:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0107e42:	c9                   	leave  
f0107e43:	c3                   	ret    

f0107e44 <clear_frames_storage>:

//===========================
// [8] Clear the frames_storage:
//===========================
inline void clear_frames_storage(uint32* frames_storage)
{
f0107e44:	55                   	push   %ebp
f0107e45:	89 e5                	mov    %esp,%ebp
f0107e47:	83 ec 18             	sub    $0x18,%esp
	int fourMega = 1024 * PAGE_SIZE ;
f0107e4a:	c7 45 f0 00 00 40 00 	movl   $0x400000,-0x10(%ebp)
	int i ;
	for (i = 0 ; i < 1024 ; i++)
f0107e51:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0107e58:	eb 5b                	jmp    f0107eb5 <clear_frames_storage+0x71>
	{
		if (frames_storage[i] != 0)
f0107e5a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107e5d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0107e64:	8b 45 08             	mov    0x8(%ebp),%eax
f0107e67:	01 d0                	add    %edx,%eax
f0107e69:	8b 00                	mov    (%eax),%eax
f0107e6b:	85 c0                	test   %eax,%eax
f0107e6d:	74 43                	je     f0107eb2 <clear_frames_storage+0x6e>
			{
				kfree((void*)kheap_virtual_address(EXTRACT_ADDRESS(frames_storage[i])));
			}
#else
			{
				free_frame(to_frame_info(EXTRACT_ADDRESS(frames_storage[i])));
f0107e6f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107e72:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0107e79:	8b 45 08             	mov    0x8(%ebp),%eax
f0107e7c:	01 d0                	add    %edx,%eax
f0107e7e:	8b 00                	mov    (%eax),%eax
f0107e80:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0107e85:	83 ec 0c             	sub    $0xc,%esp
f0107e88:	50                   	push   %eax
f0107e89:	e8 c5 fb ff ff       	call   f0107a53 <to_frame_info>
f0107e8e:	83 c4 10             	add    $0x10,%esp
f0107e91:	83 ec 0c             	sub    $0xc,%esp
f0107e94:	50                   	push   %eax
f0107e95:	e8 a3 f5 ff ff       	call   f010743d <free_frame>
f0107e9a:	83 c4 10             	add    $0x10,%esp
			}
#endif
			frames_storage[i] = 0;
f0107e9d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107ea0:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0107ea7:	8b 45 08             	mov    0x8(%ebp),%eax
f0107eaa:	01 d0                	add    %edx,%eax
f0107eac:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
//===========================
inline void clear_frames_storage(uint32* frames_storage)
{
	int fourMega = 1024 * PAGE_SIZE ;
	int i ;
	for (i = 0 ; i < 1024 ; i++)
f0107eb2:	ff 45 f4             	incl   -0xc(%ebp)
f0107eb5:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f0107ebc:	7e 9c                	jle    f0107e5a <clear_frames_storage+0x16>
			}
#endif
			frames_storage[i] = 0;
		}
	}
}
f0107ebe:	90                   	nop
f0107ebf:	c9                   	leave  
f0107ec0:	c3                   	ret    

f0107ec1 <createSharedObject>:

//=========================
// [1] Create Share Object:
//=========================
int createSharedObject(int32 ownerID, char* shareName, uint32 size, uint8 isWritable, void* virtual_address)
{
f0107ec1:	55                   	push   %ebp
f0107ec2:	89 e5                	mov    %esp,%ebp
f0107ec4:	83 ec 18             	sub    $0x18,%esp
f0107ec7:	8b 45 14             	mov    0x14(%ebp),%eax
f0107eca:	88 45 f4             	mov    %al,-0xc(%ebp)
	panic("createSharedObject() is not implemented yet...!!");
f0107ecd:	83 ec 04             	sub    $0x4,%esp
f0107ed0:	68 60 2e 13 f0       	push   $0xf0132e60
f0107ed5:	68 f6 00 00 00       	push   $0xf6
f0107eda:	68 3c 2e 13 f0       	push   $0xf0132e3c
f0107edf:	e8 cc 82 ff ff       	call   f01001b0 <_panic>

f0107ee4 <getSizeOfSharedObject>:

//==============================
// [2] Get Size of Share Object:
//==============================
int getSizeOfSharedObject(int32 ownerID, char* shareName)
{
f0107ee4:	55                   	push   %ebp
f0107ee5:	89 e5                	mov    %esp,%ebp
f0107ee7:	83 ec 08             	sub    $0x8,%esp
	panic("getSizeOfSharedObject() is not implemented yet...!!");
f0107eea:	83 ec 04             	sub    $0x4,%esp
f0107eed:	68 94 2e 13 f0       	push   $0xf0132e94
f0107ef2:	68 02 01 00 00       	push   $0x102
f0107ef7:	68 3c 2e 13 f0       	push   $0xf0132e3c
f0107efc:	e8 af 82 ff ff       	call   f01001b0 <_panic>

f0107f01 <getSharedObject>:

//======================
// [3] Get Share Object:
//======================
int getSharedObject(int32 ownerID, char* shareName, void* virtual_address)
{
f0107f01:	55                   	push   %ebp
f0107f02:	89 e5                	mov    %esp,%ebp
f0107f04:	83 ec 08             	sub    $0x8,%esp
	panic("getSharedObject() is not implemented yet...!!");
f0107f07:	83 ec 04             	sub    $0x4,%esp
f0107f0a:	68 c8 2e 13 f0       	push   $0xf0132ec8
f0107f0f:	68 0c 01 00 00       	push   $0x10c
f0107f14:	68 3c 2e 13 f0       	push   $0xf0132e3c
f0107f19:	e8 92 82 ff ff       	call   f01001b0 <_panic>

f0107f1e <freeSharedObject>:

//===================
// Free Share Object:
//===================
int freeSharedObject(int32 sharedObjectID, void *startVA)
{
f0107f1e:	55                   	push   %ebp
f0107f1f:	89 e5                	mov    %esp,%ebp
f0107f21:	83 ec 08             	sub    $0x8,%esp
	panic("freeSharedObject() is not implemented yet...!!");
f0107f24:	83 ec 04             	sub    $0x4,%esp
f0107f27:	68 f8 2e 13 f0       	push   $0xf0132ef8
f0107f2c:	68 1b 01 00 00       	push   $0x11b
f0107f31:	68 3c 2e 13 f0       	push   $0xf0132e3c
f0107f36:	e8 75 82 ff ff       	call   f01001b0 <_panic>

f0107f3b <isKHeapPlacementStrategyFIRSTFIT>:
static inline void setKHeapPlacementStrategyBESTFIT(){_KHeapPlacementStrategy = KHP_PLACE_BESTFIT;}
static inline void setKHeapPlacementStrategyNEXTFIT(){_KHeapPlacementStrategy = KHP_PLACE_NEXTFIT;}
static inline void setKHeapPlacementStrategyWORSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_WORSTFIT;}

static inline uint8 isKHeapPlacementStrategyCONTALLOC(){if(_KHeapPlacementStrategy == KHP_PLACE_CONTALLOC) return 1; return 0;}
static inline uint8 isKHeapPlacementStrategyFIRSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_FIRSTFIT) return 1; return 0;}
f0107f3b:	55                   	push   %ebp
f0107f3c:	89 e5                	mov    %esp,%ebp
f0107f3e:	a1 18 ce 2b f0       	mov    0xf02bce18,%eax
f0107f43:	83 f8 01             	cmp    $0x1,%eax
f0107f46:	75 04                	jne    f0107f4c <isKHeapPlacementStrategyFIRSTFIT+0x11>
f0107f48:	b0 01                	mov    $0x1,%al
f0107f4a:	eb 02                	jmp    f0107f4e <isKHeapPlacementStrategyFIRSTFIT+0x13>
f0107f4c:	b0 00                	mov    $0x0,%al
f0107f4e:	5d                   	pop    %ebp
f0107f4f:	c3                   	ret    

f0107f50 <isKHeapPlacementStrategyBESTFIT>:
static inline uint8 isKHeapPlacementStrategyBESTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_BESTFIT) return 1; return 0;}
f0107f50:	55                   	push   %ebp
f0107f51:	89 e5                	mov    %esp,%ebp
f0107f53:	a1 18 ce 2b f0       	mov    0xf02bce18,%eax
f0107f58:	83 f8 02             	cmp    $0x2,%eax
f0107f5b:	75 04                	jne    f0107f61 <isKHeapPlacementStrategyBESTFIT+0x11>
f0107f5d:	b0 01                	mov    $0x1,%al
f0107f5f:	eb 02                	jmp    f0107f63 <isKHeapPlacementStrategyBESTFIT+0x13>
f0107f61:	b0 00                	mov    $0x0,%al
f0107f63:	5d                   	pop    %ebp
f0107f64:	c3                   	ret    

f0107f65 <to_frame_info>:
{
	return to_frame_number(ptr_frame_info) << PGSHIFT;
}

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f0107f65:	55                   	push   %ebp
f0107f66:	89 e5                	mov    %esp,%ebp
f0107f68:	53                   	push   %ebx
f0107f69:	83 ec 04             	sub    $0x4,%esp
	if (PPN(physical_address) >= number_of_frames)
f0107f6c:	8b 45 08             	mov    0x8(%ebp),%eax
f0107f6f:	c1 e8 0c             	shr    $0xc,%eax
f0107f72:	89 c2                	mov    %eax,%edx
f0107f74:	a1 d0 cd 2b f0       	mov    0xf02bcdd0,%eax
f0107f79:	39 c2                	cmp    %eax,%edx
f0107f7b:	72 14                	jb     f0107f91 <to_frame_info+0x2c>
		panic("to_frame_info called with invalid pa");
f0107f7d:	83 ec 04             	sub    $0x4,%esp
f0107f80:	68 28 2f 13 f0       	push   $0xf0132f28
f0107f85:	6a 55                	push   $0x55
f0107f87:	68 4d 2f 13 f0       	push   $0xf0132f4d
f0107f8c:	e8 1f 82 ff ff       	call   f01001b0 <_panic>
	return &frames_info[PPN(physical_address)];
f0107f91:	8b 0d 10 ce 2b f0    	mov    0xf02bce10,%ecx
f0107f97:	8b 45 08             	mov    0x8(%ebp),%eax
f0107f9a:	c1 e8 0c             	shr    $0xc,%eax
f0107f9d:	89 c2                	mov    %eax,%edx
f0107f9f:	89 d0                	mov    %edx,%eax
f0107fa1:	01 c0                	add    %eax,%eax
f0107fa3:	01 d0                	add    %edx,%eax
f0107fa5:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0107fac:	01 d8                	add    %ebx,%eax
f0107fae:	01 d0                	add    %edx,%eax
f0107fb0:	01 c8                	add    %ecx,%eax
}
f0107fb2:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0107fb5:	c9                   	leave  
f0107fb6:	c3                   	ret    

f0107fb7 <initialize_kheap_dynamic_allocator>:
#define DYNAMIC_ALLOCATOR_DS 0 //ROUNDUP(NUM_OF_KHEAP_PAGES * sizeof(struct MemBlock), PAGE_SIZE)
#define INITIAL_KHEAP_ALLOCATIONS (DYNAMIC_ALLOCATOR_DS + KERNEL_SHARES_ARR_INIT_SIZE + KERNEL_SEMAPHORES_ARR_INIT_SIZE)
#define ACTUAL_START ((KERNEL_HEAP_START + DYN_ALLOC_MAX_SIZE + PAGE_SIZE) + INITIAL_KHEAP_ALLOCATIONS)

int initialize_kheap_dynamic_allocator(uint32 daStart, uint32 initSizeToAllocate, uint32 daLimit)
{
f0107fb7:	55                   	push   %ebp
f0107fb8:	89 e5                	mov    %esp,%ebp
f0107fba:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT'23.MS2 - #01] [1] KERNEL HEAP - initialize_kheap_dynamic_allocator()
	//Initialize the dynamic allocator of kernel heap with the given start address, size & limit
	kheap_start = daStart;
f0107fbd:	8b 45 08             	mov    0x8(%ebp),%eax
f0107fc0:	a3 88 b2 2d f0       	mov    %eax,0xf02db288
	kheap_segment_break =  (daStart + initSizeToAllocate);
f0107fc5:	8b 55 08             	mov    0x8(%ebp),%edx
f0107fc8:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107fcb:	01 d0                	add    %edx,%eax
f0107fcd:	a3 80 b2 2d f0       	mov    %eax,0xf02db280
	kheap_hard_limit =  daLimit;
f0107fd2:	8b 45 10             	mov    0x10(%ebp),%eax
f0107fd5:	a3 84 b2 2d f0       	mov    %eax,0xf02db284
	if(kheap_segment_break>kheap_hard_limit)
f0107fda:	8b 15 80 b2 2d f0    	mov    0xf02db280,%edx
f0107fe0:	a1 84 b2 2d f0       	mov    0xf02db284,%eax
f0107fe5:	39 c2                	cmp    %eax,%edx
f0107fe7:	76 07                	jbe    f0107ff0 <initialize_kheap_dynamic_allocator+0x39>
	{
		return E_NO_MEM;
f0107fe9:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
f0107fee:	eb 69                	jmp    f0108059 <initialize_kheap_dynamic_allocator+0xa2>
	}
	//All pages in the given range should be allocated
	uint32 iterator = kheap_start;
f0107ff0:	a1 88 b2 2d f0       	mov    0xf02db288,%eax
f0107ff5:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct FrameInfo *ptr_frame_info;
	while(iterator!=kheap_segment_break)
f0107ff8:	eb 3f                	jmp    f0108039 <initialize_kheap_dynamic_allocator+0x82>
	{
		int ret = allocate_frame(&ptr_frame_info) ;
f0107ffa:	83 ec 0c             	sub    $0xc,%esp
f0107ffd:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0108000:	50                   	push   %eax
f0108001:	e8 1f f3 ff ff       	call   f0107325 <allocate_frame>
f0108006:	83 c4 10             	add    $0x10,%esp
f0108009:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if(ret==0)
f010800c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0108010:	75 19                	jne    f010802b <initialize_kheap_dynamic_allocator+0x74>
		{
			map_frame(ptr_page_directory,ptr_frame_info,iterator,PERM_PRESENT);
f0108012:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0108015:	a1 30 ce 2b f0       	mov    0xf02bce30,%eax
f010801a:	6a 01                	push   $0x1
f010801c:	ff 75 f4             	pushl  -0xc(%ebp)
f010801f:	52                   	push   %edx
f0108020:	50                   	push   %eax
f0108021:	e8 9a f6 ff ff       	call   f01076c0 <map_frame>
f0108026:	83 c4 10             	add    $0x10,%esp
f0108029:	eb 07                	jmp    f0108032 <initialize_kheap_dynamic_allocator+0x7b>
		}
		else{
			return E_NO_MEM;
f010802b:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
f0108030:	eb 27                	jmp    f0108059 <initialize_kheap_dynamic_allocator+0xa2>
		}
		iterator+=PAGE_SIZE;
f0108032:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
		return E_NO_MEM;
	}
	//All pages in the given range should be allocated
	uint32 iterator = kheap_start;
	struct FrameInfo *ptr_frame_info;
	while(iterator!=kheap_segment_break)
f0108039:	a1 80 b2 2d f0       	mov    0xf02db280,%eax
f010803e:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f0108041:	75 b7                	jne    f0107ffa <initialize_kheap_dynamic_allocator+0x43>
		}
		iterator+=PAGE_SIZE;
	}

	//Remember: call the initialize_dynamic_allocator(..) to complete the initialization
	initialize_dynamic_allocator(daStart,initSizeToAllocate);
f0108043:	83 ec 08             	sub    $0x8,%esp
f0108046:	ff 75 0c             	pushl  0xc(%ebp)
f0108049:	ff 75 08             	pushl  0x8(%ebp)
f010804c:	e8 a8 7f 02 00       	call   f012fff9 <initialize_dynamic_allocator>
f0108051:	83 c4 10             	add    $0x10,%esp
	//	On success: 0
	//	Otherwise (if no memory OR initial size exceed the given limit): E_NO_MEM

	//Comment the following line(s) before start coding...
	//panic("not implemented yet");
	return 0;
f0108054:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0108059:	c9                   	leave  
f010805a:	c3                   	ret    

f010805b <sbrk>:


void* sbrk(int increment)
{
f010805b:	55                   	push   %ebp
f010805c:	89 e5                	mov    %esp,%ebp
f010805e:	83 ec 38             	sub    $0x38,%esp
	 */

	//MS2: COMMENT THIS LINE BEFORE START CODING====
/*	return (void*)-1 ;
	panic("not implemented yet");*/
	uint32 *lastBreak=(uint32*)kheap_segment_break;
f0108061:	a1 80 b2 2d f0       	mov    0xf02db280,%eax
f0108066:	89 45 e8             	mov    %eax,-0x18(%ebp)
    cprintf("inc %d  brk %d  limit %d  inc+brk %d\n ",increment,kheap_segment_break,kheap_hard_limit,(kheap_segment_break+increment));
f0108069:	8b 15 80 b2 2d f0    	mov    0xf02db280,%edx
f010806f:	8b 45 08             	mov    0x8(%ebp),%eax
f0108072:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
f0108075:	8b 15 84 b2 2d f0    	mov    0xf02db284,%edx
f010807b:	a1 80 b2 2d f0       	mov    0xf02db280,%eax
f0108080:	83 ec 0c             	sub    $0xc,%esp
f0108083:	51                   	push   %ecx
f0108084:	52                   	push   %edx
f0108085:	50                   	push   %eax
f0108086:	ff 75 08             	pushl  0x8(%ebp)
f0108089:	68 68 2f 13 f0       	push   $0xf0132f68
f010808e:	e8 9e 8d ff ff       	call   f0100e31 <cprintf>
f0108093:	83 c4 20             	add    $0x20,%esp
	if(kheap_segment_break+increment>kheap_hard_limit ){
f0108096:	8b 15 80 b2 2d f0    	mov    0xf02db280,%edx
f010809c:	8b 45 08             	mov    0x8(%ebp),%eax
f010809f:	01 c2                	add    %eax,%edx
f01080a1:	a1 84 b2 2d f0       	mov    0xf02db284,%eax
f01080a6:	39 c2                	cmp    %eax,%edx
f01080a8:	76 0a                	jbe    f01080b4 <sbrk+0x59>

			return (void*)-1 ;
f01080aa:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f01080af:	e9 9d 01 00 00       	jmp    f0108251 <sbrk+0x1f6>
	}
	if(increment==0){
f01080b4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01080b8:	75 08                	jne    f01080c2 <sbrk+0x67>

			return lastBreak;
f01080ba:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01080bd:	e9 8f 01 00 00       	jmp    f0108251 <sbrk+0x1f6>
		}
	else if(increment>0){
f01080c2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01080c6:	0f 8e bf 00 00 00    	jle    f010818b <sbrk+0x130>

		int inc=ROUNDUP(increment,PAGE_SIZE);
f01080cc:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f01080d3:	8b 55 08             	mov    0x8(%ebp),%edx
f01080d6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01080d9:	01 d0                	add    %edx,%eax
f01080db:	48                   	dec    %eax
f01080dc:	89 45 e0             	mov    %eax,-0x20(%ebp)
f01080df:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01080e2:	ba 00 00 00 00       	mov    $0x0,%edx
f01080e7:	f7 75 e4             	divl   -0x1c(%ebp)
f01080ea:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01080ed:	29 d0                	sub    %edx,%eax
f01080ef:	89 45 dc             	mov    %eax,-0x24(%ebp)
		inc/=PAGE_SIZE;
f01080f2:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01080f5:	85 c0                	test   %eax,%eax
f01080f7:	79 05                	jns    f01080fe <sbrk+0xa3>
f01080f9:	05 ff 0f 00 00       	add    $0xfff,%eax
f01080fe:	c1 f8 0c             	sar    $0xc,%eax
f0108101:	89 45 dc             	mov    %eax,-0x24(%ebp)
		kheap_segment_break=(uint32)((uint32)lastBreak+inc);
f0108104:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0108107:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010810a:	01 d0                	add    %edx,%eax
f010810c:	a3 80 b2 2d f0       	mov    %eax,0xf02db280
		uint32 iterator=(uint32)lastBreak;
f0108111:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0108114:	89 45 f4             	mov    %eax,-0xc(%ebp)

		 for(int i=0;i<inc/PAGE_SIZE;i++){
f0108117:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010811e:	eb 4f                	jmp    f010816f <sbrk+0x114>
			 struct FrameInfo *ptr_frame_info;
			 int ret=allocate_frame(&ptr_frame_info) ;
f0108120:	83 ec 0c             	sub    $0xc,%esp
f0108123:	8d 45 c8             	lea    -0x38(%ebp),%eax
f0108126:	50                   	push   %eax
f0108127:	e8 f9 f1 ff ff       	call   f0107325 <allocate_frame>
f010812c:	83 c4 10             	add    $0x10,%esp
f010812f:	89 45 d8             	mov    %eax,-0x28(%ebp)
			 if(ret==0){
f0108132:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
f0108136:	75 19                	jne    f0108151 <sbrk+0xf6>
				 map_frame(ptr_page_directory,ptr_frame_info,iterator,PERM_PRESENT);
f0108138:	8b 55 c8             	mov    -0x38(%ebp),%edx
f010813b:	a1 30 ce 2b f0       	mov    0xf02bce30,%eax
f0108140:	6a 01                	push   $0x1
f0108142:	ff 75 f4             	pushl  -0xc(%ebp)
f0108145:	52                   	push   %edx
f0108146:	50                   	push   %eax
f0108147:	e8 74 f5 ff ff       	call   f01076c0 <map_frame>
f010814c:	83 c4 10             	add    $0x10,%esp
f010814f:	eb 14                	jmp    f0108165 <sbrk+0x10a>

			 }
			 else{
				 panic("no space");
f0108151:	83 ec 04             	sub    $0x4,%esp
f0108154:	68 8f 2f 13 f0       	push   $0xf0132f8f
f0108159:	6a 61                	push   $0x61
f010815b:	68 98 2f 13 f0       	push   $0xf0132f98
f0108160:	e8 4b 80 ff ff       	call   f01001b0 <_panic>

			 }
				iterator+=PAGE_SIZE;
f0108165:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
		int inc=ROUNDUP(increment,PAGE_SIZE);
		inc/=PAGE_SIZE;
		kheap_segment_break=(uint32)((uint32)lastBreak+inc);
		uint32 iterator=(uint32)lastBreak;

		 for(int i=0;i<inc/PAGE_SIZE;i++){
f010816c:	ff 45 f0             	incl   -0x10(%ebp)
f010816f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0108172:	85 c0                	test   %eax,%eax
f0108174:	79 05                	jns    f010817b <sbrk+0x120>
f0108176:	05 ff 0f 00 00       	add    $0xfff,%eax
f010817b:	c1 f8 0c             	sar    $0xc,%eax
f010817e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0108181:	7f 9d                	jg     f0108120 <sbrk+0xc5>

			 }
				iterator+=PAGE_SIZE;
		 }

		return lastBreak;
f0108183:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0108186:	e9 c6 00 00 00       	jmp    f0108251 <sbrk+0x1f6>
	}
	else{

		int dec = ROUNDDOWN(increment,PAGE_SIZE);
f010818b:	8b 45 08             	mov    0x8(%ebp),%eax
f010818e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0108191:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0108194:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108199:	89 45 d0             	mov    %eax,-0x30(%ebp)
		dec/=PAGE_SIZE;
f010819c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010819f:	85 c0                	test   %eax,%eax
f01081a1:	79 05                	jns    f01081a8 <sbrk+0x14d>
f01081a3:	05 ff 0f 00 00       	add    $0xfff,%eax
f01081a8:	c1 f8 0c             	sar    $0xc,%eax
f01081ab:	89 45 d0             	mov    %eax,-0x30(%ebp)
		 for(int i=1;i<=dec/PAGE_SIZE;i++)
f01081ae:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f01081b5:	eb 4e                	jmp    f0108205 <sbrk+0x1aa>
		 {
	      struct FrameInfo *frameToBeDeleted= to_frame_info(kheap_segment_break-(i*PAGE_SIZE));/*(struct FrameInfo *) (kheap_segment_break-(i*PAGE_SIZE));*/
f01081b7:	a1 80 b2 2d f0       	mov    0xf02db280,%eax
f01081bc:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01081bf:	c1 e2 0c             	shl    $0xc,%edx
f01081c2:	29 d0                	sub    %edx,%eax
f01081c4:	83 ec 0c             	sub    $0xc,%esp
f01081c7:	50                   	push   %eax
f01081c8:	e8 98 fd ff ff       	call   f0107f65 <to_frame_info>
f01081cd:	83 c4 10             	add    $0x10,%esp
f01081d0:	89 45 cc             	mov    %eax,-0x34(%ebp)
	      free_frame(frameToBeDeleted);
f01081d3:	83 ec 0c             	sub    $0xc,%esp
f01081d6:	ff 75 cc             	pushl  -0x34(%ebp)
f01081d9:	e8 5f f2 ff ff       	call   f010743d <free_frame>
f01081de:	83 c4 10             	add    $0x10,%esp
	      unmap_frame(ptr_page_directory,kheap_segment_break-(i*PAGE_SIZE));
f01081e1:	a1 80 b2 2d f0       	mov    0xf02db280,%eax
f01081e6:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01081e9:	c1 e2 0c             	shl    $0xc,%edx
f01081ec:	29 d0                	sub    %edx,%eax
f01081ee:	89 c2                	mov    %eax,%edx
f01081f0:	a1 30 ce 2b f0       	mov    0xf02bce30,%eax
f01081f5:	83 ec 08             	sub    $0x8,%esp
f01081f8:	52                   	push   %edx
f01081f9:	50                   	push   %eax
f01081fa:	e8 f0 f5 ff ff       	call   f01077ef <unmap_frame>
f01081ff:	83 c4 10             	add    $0x10,%esp
	}
	else{

		int dec = ROUNDDOWN(increment,PAGE_SIZE);
		dec/=PAGE_SIZE;
		 for(int i=1;i<=dec/PAGE_SIZE;i++)
f0108202:	ff 45 ec             	incl   -0x14(%ebp)
f0108205:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0108208:	85 c0                	test   %eax,%eax
f010820a:	79 05                	jns    f0108211 <sbrk+0x1b6>
f010820c:	05 ff 0f 00 00       	add    $0xfff,%eax
f0108211:	c1 f8 0c             	sar    $0xc,%eax
f0108214:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0108217:	7d 9e                	jge    f01081b7 <sbrk+0x15c>
		 {
	      struct FrameInfo *frameToBeDeleted= to_frame_info(kheap_segment_break-(i*PAGE_SIZE));/*(struct FrameInfo *) (kheap_segment_break-(i*PAGE_SIZE));*/
	      free_frame(frameToBeDeleted);
	      unmap_frame(ptr_page_directory,kheap_segment_break-(i*PAGE_SIZE));
		 }
		 lastBreak= (uint32*)((uint32)lastBreak-dec);
f0108219:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010821c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010821f:	29 c2                	sub    %eax,%edx
f0108221:	89 d0                	mov    %edx,%eax
f0108223:	89 45 e8             	mov    %eax,-0x18(%ebp)
		 if(lastBreak>=(uint32*)kheap_start){
f0108226:	a1 88 b2 2d f0       	mov    0xf02db288,%eax
f010822b:	39 45 e8             	cmp    %eax,-0x18(%ebp)
f010822e:	72 0d                	jb     f010823d <sbrk+0x1e2>
			 kheap_segment_break=(uint32)lastBreak;
f0108230:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0108233:	a3 80 b2 2d f0       	mov    %eax,0xf02db280

			 return lastBreak;
f0108238:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010823b:	eb 14                	jmp    f0108251 <sbrk+0x1f6>
		 }
		 else{
			 panic("break lower than start");
f010823d:	83 ec 04             	sub    $0x4,%esp
f0108240:	68 a9 2f 13 f0       	push   $0xf0132fa9
f0108245:	6a 7a                	push   $0x7a
f0108247:	68 98 2f 13 f0       	push   $0xf0132f98
f010824c:	e8 5f 7f ff ff       	call   f01001b0 <_panic>
		 }
	}
}
f0108251:	c9                   	leave  
f0108252:	c3                   	ret    

f0108253 <kmalloc>:


uint32 start=ACTUAL_START;

void* kmalloc(unsigned int size)
{
f0108253:	55                   	push   %ebp
f0108254:	89 e5                	mov    %esp,%ebp
f0108256:	83 ec 38             	sub    $0x38,%esp
		// use "isKHeapPlacementStrategyFIRSTFIT() ..." functions to check the current strategy

		//change this "return" according to your answer
		//kpanic_into_prompt("kmalloc() is not implemented yet...!!");
		//return NULL;
		if(size<=DYN_ALLOC_MAX_BLOCK_SIZE){
f0108259:	81 7d 08 00 08 00 00 	cmpl   $0x800,0x8(%ebp)
f0108260:	77 48                	ja     f01082aa <kmalloc+0x57>

			if(isKHeapPlacementStrategyFIRSTFIT()){
f0108262:	e8 d4 fc ff ff       	call   f0107f3b <isKHeapPlacementStrategyFIRSTFIT>
f0108267:	84 c0                	test   %al,%al
f0108269:	74 23                	je     f010828e <kmalloc+0x3b>
			cprintf("calling block allocator\n");
f010826b:	83 ec 0c             	sub    $0xc,%esp
f010826e:	68 c0 2f 13 f0       	push   $0xf0132fc0
f0108273:	e8 b9 8b ff ff       	call   f0100e31 <cprintf>
f0108278:	83 c4 10             	add    $0x10,%esp
			return alloc_block_FF(size);
f010827b:	83 ec 0c             	sub    $0xc,%esp
f010827e:	ff 75 08             	pushl  0x8(%ebp)
f0108281:	e8 09 7e 02 00       	call   f013008f <alloc_block_FF>
f0108286:	83 c4 10             	add    $0x10,%esp
f0108289:	e9 4e 01 00 00       	jmp    f01083dc <kmalloc+0x189>
			}
			if(isKHeapPlacementStrategyBESTFIT()){
f010828e:	e8 bd fc ff ff       	call   f0107f50 <isKHeapPlacementStrategyBESTFIT>
f0108293:	84 c0                	test   %al,%al
f0108295:	74 13                	je     f01082aa <kmalloc+0x57>
				return alloc_block_BF(size);
f0108297:	83 ec 0c             	sub    $0xc,%esp
f010829a:	ff 75 08             	pushl  0x8(%ebp)
f010829d:	e8 e1 7f 02 00       	call   f0130283 <alloc_block_BF>
f01082a2:	83 c4 10             	add    $0x10,%esp
f01082a5:	e9 32 01 00 00       	jmp    f01083dc <kmalloc+0x189>
			}
		}
		int pagesToAllocate= ROUNDUP(size,PAGE_SIZE);
f01082aa:	c7 45 e0 00 10 00 00 	movl   $0x1000,-0x20(%ebp)
f01082b1:	8b 55 08             	mov    0x8(%ebp),%edx
f01082b4:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01082b7:	01 d0                	add    %edx,%eax
f01082b9:	48                   	dec    %eax
f01082ba:	89 45 dc             	mov    %eax,-0x24(%ebp)
f01082bd:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01082c0:	ba 00 00 00 00       	mov    $0x0,%edx
f01082c5:	f7 75 e0             	divl   -0x20(%ebp)
f01082c8:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01082cb:	29 d0                	sub    %edx,%eax
f01082cd:	89 45 f4             	mov    %eax,-0xc(%ebp)
		pagesToAllocate/=PAGE_SIZE;
f01082d0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01082d3:	85 c0                	test   %eax,%eax
f01082d5:	79 05                	jns    f01082dc <kmalloc+0x89>
f01082d7:	05 ff 0f 00 00       	add    $0xfff,%eax
f01082dc:	c1 f8 0c             	sar    $0xc,%eax
f01082df:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if(size>=KERNEL_HEAP_MAX - ACTUAL_START + 1)
f01082e2:	81 7d 08 00 a0 ff 07 	cmpl   $0x7ffa000,0x8(%ebp)
f01082e9:	76 0a                	jbe    f01082f5 <kmalloc+0xa2>
		{
			return NULL;
f01082eb:	b8 00 00 00 00       	mov    $0x0,%eax
f01082f0:	e9 e7 00 00 00       	jmp    f01083dc <kmalloc+0x189>
	    }

		uint32 iterator = start;
f01082f5:	a1 b8 f9 18 f0       	mov    0xf018f9b8,%eax
f01082fa:	89 45 f0             	mov    %eax,-0x10(%ebp)
		uint32 accum=0;
f01082fd:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
		uint32 *firstAddress;
		bool first=0;
f0108304:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	/* cprintf("it: %d",iterator);*/
		while(iterator!=KERNEL_HEAP_MAX&&pagesToAllocate!=0){
f010830b:	e9 8e 00 00 00       	jmp    f010839e <kmalloc+0x14b>
			 struct FrameInfo *ptr_frame_info;
			 if(free_frame_list.size<pagesToAllocate){
f0108310:	8b 15 e4 cd 2b f0    	mov    0xf02bcde4,%edx
f0108316:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108319:	39 c2                	cmp    %eax,%edx
f010831b:	73 1a                	jae    f0108337 <kmalloc+0xe4>
				 cprintf("insufficient size");
f010831d:	83 ec 0c             	sub    $0xc,%esp
f0108320:	68 d9 2f 13 f0       	push   $0xf0132fd9
f0108325:	e8 07 8b ff ff       	call   f0100e31 <cprintf>
f010832a:	83 c4 10             	add    $0x10,%esp
				 return NULL;
f010832d:	b8 00 00 00 00       	mov    $0x0,%eax
f0108332:	e9 a5 00 00 00       	jmp    f01083dc <kmalloc+0x189>
			 }

			 int ret=allocate_frame(&ptr_frame_info) ;
f0108337:	83 ec 0c             	sub    $0xc,%esp
f010833a:	8d 45 d4             	lea    -0x2c(%ebp),%eax
f010833d:	50                   	push   %eax
f010833e:	e8 e2 ef ff ff       	call   f0107325 <allocate_frame>
f0108343:	83 c4 10             	add    $0x10,%esp
f0108346:	89 45 d8             	mov    %eax,-0x28(%ebp)
				 if(ptr_frame_info->references!=0){
f0108349:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010834c:	8b 40 08             	mov    0x8(%eax),%eax
f010834f:	66 85 c0             	test   %ax,%ax
f0108352:	74 09                	je     f010835d <kmalloc+0x10a>
						 iterator+= PAGE_SIZE;
f0108354:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
f010835b:	eb 41                	jmp    f010839e <kmalloc+0x14b>
						 continue;
					 }

			if(ret==0){
f010835d:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
f0108361:	75 2d                	jne    f0108390 <kmalloc+0x13d>
				pagesToAllocate--;
f0108363:	ff 4d f4             	decl   -0xc(%ebp)
				map_frame(ptr_page_directory,ptr_frame_info,iterator,PERM_PRESENT);
f0108366:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0108369:	a1 30 ce 2b f0       	mov    0xf02bce30,%eax
f010836e:	6a 01                	push   $0x1
f0108370:	ff 75 f0             	pushl  -0x10(%ebp)
f0108373:	52                   	push   %edx
f0108374:	50                   	push   %eax
f0108375:	e8 46 f3 ff ff       	call   f01076c0 <map_frame>
f010837a:	83 c4 10             	add    $0x10,%esp

				if(!first){
f010837d:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0108381:	75 0d                	jne    f0108390 <kmalloc+0x13d>
					first=1;
f0108383:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)

					 firstAddress=(uint32*)iterator;
f010838a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010838d:	89 45 e8             	mov    %eax,-0x18(%ebp)
				}

			}

			iterator+=PAGE_SIZE;
f0108390:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
			accum+= PAGE_SIZE;
f0108397:	81 45 ec 00 10 00 00 	addl   $0x1000,-0x14(%ebp)
		uint32 iterator = start;
		uint32 accum=0;
		uint32 *firstAddress;
		bool first=0;
	/* cprintf("it: %d",iterator);*/
		while(iterator!=KERNEL_HEAP_MAX&&pagesToAllocate!=0){
f010839e:	81 7d f0 00 f0 ff ff 	cmpl   $0xfffff000,-0x10(%ebp)
f01083a5:	74 0a                	je     f01083b1 <kmalloc+0x15e>
f01083a7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01083ab:	0f 85 5f ff ff ff    	jne    f0108310 <kmalloc+0xbd>

			iterator+=PAGE_SIZE;
			accum+= PAGE_SIZE;
		}

	cprintf("actual:%d first: %d \n",ACTUAL_START,firstAddress);
f01083b1:	83 ec 04             	sub    $0x4,%esp
f01083b4:	ff 75 e8             	pushl  -0x18(%ebp)
f01083b7:	68 00 50 00 f8       	push   $0xf8005000
f01083bc:	68 eb 2f 13 f0       	push   $0xf0132feb
f01083c1:	e8 6b 8a ff ff       	call   f0100e31 <cprintf>
f01083c6:	83 c4 10             	add    $0x10,%esp
	start+=accum;
f01083c9:	8b 15 b8 f9 18 f0    	mov    0xf018f9b8,%edx
f01083cf:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01083d2:	01 d0                	add    %edx,%eax
f01083d4:	a3 b8 f9 18 f0       	mov    %eax,0xf018f9b8
		return firstAddress;
f01083d9:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
f01083dc:	c9                   	leave  
f01083dd:	c3                   	ret    

f01083de <kfree>:

void kfree(void* virtual_address)
{
f01083de:	55                   	push   %ebp
f01083df:	89 e5                	mov    %esp,%ebp
f01083e1:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'23.MS2 - #04] [1] KERNEL HEAP - kfree()
	//refer to the project presentation and documentation for details
	// Write your code here, remove the panic and write your code
	panic("kfree() is not implemented yet...!!");
f01083e4:	83 ec 04             	sub    $0x4,%esp
f01083e7:	68 04 30 13 f0       	push   $0xf0133004
f01083ec:	68 c9 00 00 00       	push   $0xc9
f01083f1:	68 98 2f 13 f0       	push   $0xf0132f98
f01083f6:	e8 b5 7d ff ff       	call   f01001b0 <_panic>

f01083fb <kheap_virtual_address>:
}

unsigned int kheap_virtual_address(unsigned int physical_address)
{
f01083fb:	55                   	push   %ebp
f01083fc:	89 e5                	mov    %esp,%ebp
f01083fe:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'23.MS2 - #05] [1] KERNEL HEAP - kheap_virtual_address()
	//refer to the project presentation and documentation for details
	// Write your code here, remove the panic and write your code
	panic("kheap_virtual_address() is not implemented yet...!!");
f0108401:	83 ec 04             	sub    $0x4,%esp
f0108404:	68 28 30 13 f0       	push   $0xf0133028
f0108409:	68 d1 00 00 00       	push   $0xd1
f010840e:	68 98 2f 13 f0       	push   $0xf0132f98
f0108413:	e8 98 7d ff ff       	call   f01001b0 <_panic>

f0108418 <kheap_physical_address>:
	//change this "return" according to your answer
	return 0;
}

unsigned int kheap_physical_address(unsigned int virtual_address)
{
f0108418:	55                   	push   %ebp
f0108419:	89 e5                	mov    %esp,%ebp
f010841b:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'23.MS2 - #06] [1] KERNEL HEAP - kheap_physical_address()
	//refer to the project presentation and documentation for details
	// Write your code here, remove the panic and write your code
	panic("kheap_physical_address() is not implemented yet...!!");
f010841e:	83 ec 04             	sub    $0x4,%esp
f0108421:	68 5c 30 13 f0       	push   $0xf013305c
f0108426:	68 de 00 00 00       	push   $0xde
f010842b:	68 98 2f 13 f0       	push   $0xf0132f98
f0108430:	e8 7b 7d ff ff       	call   f01001b0 <_panic>

f0108435 <kfreeall>:
	return 0;
}


void kfreeall()
{
f0108435:	55                   	push   %ebp
f0108436:	89 e5                	mov    %esp,%ebp
f0108438:	83 ec 08             	sub    $0x8,%esp
	panic("Not implemented!");
f010843b:	83 ec 04             	sub    $0x4,%esp
f010843e:	68 91 30 13 f0       	push   $0xf0133091
f0108443:	68 e7 00 00 00       	push   $0xe7
f0108448:	68 98 2f 13 f0       	push   $0xf0132f98
f010844d:	e8 5e 7d ff ff       	call   f01001b0 <_panic>

f0108452 <kshrink>:

}

void kshrink(uint32 newSize)
{
f0108452:	55                   	push   %ebp
f0108453:	89 e5                	mov    %esp,%ebp
f0108455:	83 ec 08             	sub    $0x8,%esp
	panic("Not implemented!");
f0108458:	83 ec 04             	sub    $0x4,%esp
f010845b:	68 91 30 13 f0       	push   $0xf0133091
f0108460:	68 ed 00 00 00       	push   $0xed
f0108465:	68 98 2f 13 f0       	push   $0xf0132f98
f010846a:	e8 41 7d ff ff       	call   f01001b0 <_panic>

f010846f <kexpand>:
}

void kexpand(uint32 newSize)
{
f010846f:	55                   	push   %ebp
f0108470:	89 e5                	mov    %esp,%ebp
f0108472:	83 ec 08             	sub    $0x8,%esp
	panic("Not implemented!");
f0108475:	83 ec 04             	sub    $0x4,%esp
f0108478:	68 91 30 13 f0       	push   $0xf0133091
f010847d:	68 f2 00 00 00       	push   $0xf2
f0108482:	68 98 2f 13 f0       	push   $0xf0132f98
f0108487:	e8 24 7d ff ff       	call   f01001b0 <_panic>

f010848c <krealloc>:

//	A call with virtual_address = null is equivalent to kmalloc().
//	A call with new_size = zero is equivalent to kfree().

void *krealloc(void *virtual_address, uint32 new_size)
{
f010848c:	55                   	push   %ebp
f010848d:	89 e5                	mov    %esp,%ebp
	//TODO: [PROJECT'23.MS2 - BONUS] [1] KERNEL HEAP - krealloc()
	// Write your code here, remove the panic and write your code
	return NULL;
f010848f:	b8 00 00 00 00       	mov    $0x0,%eax
	panic("krealloc() is not implemented yet...!!");
}
f0108494:	5d                   	pop    %ebp
f0108495:	c3                   	ret    

f0108496 <pt_set_page_permissions>:
 */
#include "memory_manager.h"

/*[2.1] PAGE TABLE ENTRIES MANIPULATION */
inline void pt_set_page_permissions(uint32* page_directory, uint32 virtual_address, uint32 permissions_to_set, uint32 permissions_to_clear)
{
f0108496:	55                   	push   %ebp
f0108497:	89 e5                	mov    %esp,%ebp
f0108499:	83 ec 18             	sub    $0x18,%esp
	//[1] Get the table
	uint32* ptr_page_table ;
	int ret = get_page_table(page_directory, virtual_address, &ptr_page_table);
f010849c:	83 ec 04             	sub    $0x4,%esp
f010849f:	8d 45 f0             	lea    -0x10(%ebp),%eax
f01084a2:	50                   	push   %eax
f01084a3:	ff 75 0c             	pushl  0xc(%ebp)
f01084a6:	ff 75 08             	pushl  0x8(%ebp)
f01084a9:	e8 39 f0 ff ff       	call   f01074e7 <get_page_table>
f01084ae:	83 c4 10             	add    $0x10,%esp
f01084b1:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//[2] If exists, update permissions
	if (ptr_page_table != NULL)
f01084b4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01084b7:	85 c0                	test   %eax,%eax
f01084b9:	74 64                	je     f010851f <pt_set_page_permissions+0x89>
	{
		ptr_page_table[PTX(virtual_address)] |= (permissions_to_set);
f01084bb:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01084be:	8b 55 0c             	mov    0xc(%ebp),%edx
f01084c1:	c1 ea 0c             	shr    $0xc,%edx
f01084c4:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01084ca:	c1 e2 02             	shl    $0x2,%edx
f01084cd:	01 c2                	add    %eax,%edx
f01084cf:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01084d2:	8b 4d 0c             	mov    0xc(%ebp),%ecx
f01084d5:	c1 e9 0c             	shr    $0xc,%ecx
f01084d8:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
f01084de:	c1 e1 02             	shl    $0x2,%ecx
f01084e1:	01 c8                	add    %ecx,%eax
f01084e3:	8b 00                	mov    (%eax),%eax
f01084e5:	0b 45 10             	or     0x10(%ebp),%eax
f01084e8:	89 02                	mov    %eax,(%edx)
		ptr_page_table[PTX(virtual_address)] &= (~permissions_to_clear);
f01084ea:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01084ed:	8b 55 0c             	mov    0xc(%ebp),%edx
f01084f0:	c1 ea 0c             	shr    $0xc,%edx
f01084f3:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01084f9:	c1 e2 02             	shl    $0x2,%edx
f01084fc:	01 d0                	add    %edx,%eax
f01084fe:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0108501:	8b 4d 0c             	mov    0xc(%ebp),%ecx
f0108504:	c1 e9 0c             	shr    $0xc,%ecx
f0108507:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
f010850d:	c1 e1 02             	shl    $0x2,%ecx
f0108510:	01 ca                	add    %ecx,%edx
f0108512:	8b 12                	mov    (%edx),%edx
f0108514:	8b 4d 14             	mov    0x14(%ebp),%ecx
f0108517:	f7 d1                	not    %ecx
f0108519:	21 ca                	and    %ecx,%edx
f010851b:	89 10                	mov    %edx,(%eax)
f010851d:	eb 27                	jmp    f0108546 <pt_set_page_permissions+0xb0>

	}
	//[3] Else, should "panic" since the table should be exist
	else
	{
		cprintf("va=%x not exist and has no page table\n", virtual_address);
f010851f:	83 ec 08             	sub    $0x8,%esp
f0108522:	ff 75 0c             	pushl  0xc(%ebp)
f0108525:	68 a4 30 13 f0       	push   $0xf01330a4
f010852a:	e8 02 89 ff ff       	call   f0100e31 <cprintf>
f010852f:	83 c4 10             	add    $0x10,%esp
		//cprintf("[%s] va = %x\n", ptr_env->prog_name, virtual_address) ;
		panic("function pt_set_page_permissions() called with invalid virtual address. The corresponding page table doesn't exist\n") ;
f0108532:	83 ec 04             	sub    $0x4,%esp
f0108535:	68 cc 30 13 f0       	push   $0xf01330cc
f010853a:	6a 1c                	push   $0x1c
f010853c:	68 40 31 13 f0       	push   $0xf0133140
f0108541:	e8 6a 7c ff ff       	call   f01001b0 <_panic>
	}

	//[4] Invalidate the cache memory (TLB) [call tlb_invalidate(..)]
	tlb_invalidate((void *)NULL, (void *)virtual_address);
f0108546:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108549:	83 ec 08             	sub    $0x8,%esp
f010854c:	50                   	push   %eax
f010854d:	6a 00                	push   $0x0
f010854f:	e8 6a e9 ff ff       	call   f0106ebe <tlb_invalidate>
f0108554:	83 c4 10             	add    $0x10,%esp
}
f0108557:	90                   	nop
f0108558:	c9                   	leave  
f0108559:	c3                   	ret    

f010855a <pt_get_page_permissions>:

inline int pt_get_page_permissions(uint32* page_directory, uint32 virtual_address )
{
f010855a:	55                   	push   %ebp
f010855b:	89 e5                	mov    %esp,%ebp
f010855d:	83 ec 18             	sub    $0x18,%esp
	//[1] Get the table
	uint32* ptr_page_table ;
	int ret = get_page_table(page_directory, virtual_address, &ptr_page_table);
f0108560:	83 ec 04             	sub    $0x4,%esp
f0108563:	8d 45 f0             	lea    -0x10(%ebp),%eax
f0108566:	50                   	push   %eax
f0108567:	ff 75 0c             	pushl  0xc(%ebp)
f010856a:	ff 75 08             	pushl  0x8(%ebp)
f010856d:	e8 75 ef ff ff       	call   f01074e7 <get_page_table>
f0108572:	83 c4 10             	add    $0x10,%esp
f0108575:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//[2] If exists, return the permissions
	if (ptr_page_table != NULL)
f0108578:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010857b:	85 c0                	test   %eax,%eax
f010857d:	74 1d                	je     f010859c <pt_get_page_permissions+0x42>
	{
		//cprintf("va=%x perm = %x\n", virtual_address, ptr_page_table[PTX(virtual_address)] & 0x00000FFF);
		return (ptr_page_table[PTX(virtual_address)] & 0x00000FFF);
f010857f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108582:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108585:	c1 ea 0c             	shr    $0xc,%edx
f0108588:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010858e:	c1 e2 02             	shl    $0x2,%edx
f0108591:	01 d0                	add    %edx,%eax
f0108593:	8b 00                	mov    (%eax),%eax
f0108595:	25 ff 0f 00 00       	and    $0xfff,%eax
f010859a:	eb 05                	jmp    f01085a1 <pt_get_page_permissions+0x47>
	}
	//[3] Else, return -1
	else
	{
		//cprintf("va=%x not exist and has no page table\n", virtual_address);
		return -1;
f010859c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
	}
}
f01085a1:	c9                   	leave  
f01085a2:	c3                   	ret    

f01085a3 <pt_clear_page_table_entry>:

inline void pt_clear_page_table_entry(uint32* page_directory, uint32 virtual_address)
{
f01085a3:	55                   	push   %ebp
f01085a4:	89 e5                	mov    %esp,%ebp
f01085a6:	83 ec 18             	sub    $0x18,%esp
	//[1] Get the table
	uint32* ptr_page_table ;
	int ret = get_page_table(page_directory, virtual_address, &ptr_page_table);
f01085a9:	83 ec 04             	sub    $0x4,%esp
f01085ac:	8d 45 f0             	lea    -0x10(%ebp),%eax
f01085af:	50                   	push   %eax
f01085b0:	ff 75 0c             	pushl  0xc(%ebp)
f01085b3:	ff 75 08             	pushl  0x8(%ebp)
f01085b6:	e8 2c ef ff ff       	call   f01074e7 <get_page_table>
f01085bb:	83 c4 10             	add    $0x10,%esp
f01085be:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//[2] If exists, update permissions
	if (ptr_page_table != NULL)
f01085c1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01085c4:	85 c0                	test   %eax,%eax
f01085c6:	74 46                	je     f010860e <pt_clear_page_table_entry+0x6b>
	{
		cprintf("va=%x before clearing has perm = %x\n", virtual_address, ptr_page_table[PTX(virtual_address)]);
f01085c8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01085cb:	8b 55 0c             	mov    0xc(%ebp),%edx
f01085ce:	c1 ea 0c             	shr    $0xc,%edx
f01085d1:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01085d7:	c1 e2 02             	shl    $0x2,%edx
f01085da:	01 d0                	add    %edx,%eax
f01085dc:	8b 00                	mov    (%eax),%eax
f01085de:	83 ec 04             	sub    $0x4,%esp
f01085e1:	50                   	push   %eax
f01085e2:	ff 75 0c             	pushl  0xc(%ebp)
f01085e5:	68 5c 31 13 f0       	push   $0xf013315c
f01085ea:	e8 42 88 ff ff       	call   f0100e31 <cprintf>
f01085ef:	83 c4 10             	add    $0x10,%esp
		ptr_page_table[PTX(virtual_address)] = 0;
f01085f2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01085f5:	8b 55 0c             	mov    0xc(%ebp),%edx
f01085f8:	c1 ea 0c             	shr    $0xc,%edx
f01085fb:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0108601:	c1 e2 02             	shl    $0x2,%edx
f0108604:	01 d0                	add    %edx,%eax
f0108606:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010860c:	eb 14                	jmp    f0108622 <pt_clear_page_table_entry+0x7f>
	}
	//[3] Else, should "panic" since the table should be exist
	else
	{
		//cprintf("[%s] va = %x\n", ptr_env->prog_name, virtual_address) ;
		panic("function pt_clear_page_table_entry() called with invalid virtual address. The corresponding page table doesn't exist\n") ;
f010860e:	83 ec 04             	sub    $0x4,%esp
f0108611:	68 84 31 13 f0       	push   $0xf0133184
f0108616:	6a 47                	push   $0x47
f0108618:	68 40 31 13 f0       	push   $0xf0133140
f010861d:	e8 8e 7b ff ff       	call   f01001b0 <_panic>
	}

	//[4] Invalidate the cache memory (TLB) [call tlb_invalidate(..)]
	tlb_invalidate((void *)NULL, (void *)virtual_address);
f0108622:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108625:	83 ec 08             	sub    $0x8,%esp
f0108628:	50                   	push   %eax
f0108629:	6a 00                	push   $0x0
f010862b:	e8 8e e8 ff ff       	call   f0106ebe <tlb_invalidate>
f0108630:	83 c4 10             	add    $0x10,%esp
}
f0108633:	90                   	nop
f0108634:	c9                   	leave  
f0108635:	c3                   	ret    

f0108636 <pd_is_table_used>:

///============================================================================================
/// Dealing with page directory entry flags

inline uint32 pd_is_table_used(uint32* page_directory, uint32 virtual_address)
{
f0108636:	55                   	push   %ebp
f0108637:	89 e5                	mov    %esp,%ebp
	return ( (page_directory[PDX(virtual_address)] & PERM_USED) == PERM_USED ? 1 : 0);
f0108639:	8b 45 0c             	mov    0xc(%ebp),%eax
f010863c:	c1 e8 16             	shr    $0x16,%eax
f010863f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0108646:	8b 45 08             	mov    0x8(%ebp),%eax
f0108649:	01 d0                	add    %edx,%eax
f010864b:	8b 00                	mov    (%eax),%eax
f010864d:	83 e0 20             	and    $0x20,%eax
f0108650:	85 c0                	test   %eax,%eax
f0108652:	0f 95 c0             	setne  %al
f0108655:	0f b6 c0             	movzbl %al,%eax
}
f0108658:	5d                   	pop    %ebp
f0108659:	c3                   	ret    

f010865a <pd_set_table_unused>:

inline void pd_set_table_unused(uint32* page_directory, uint32 virtual_address)
{
f010865a:	55                   	push   %ebp
f010865b:	89 e5                	mov    %esp,%ebp
f010865d:	83 ec 08             	sub    $0x8,%esp
	page_directory[PDX(virtual_address)] &= (~PERM_USED);
f0108660:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108663:	c1 e8 16             	shr    $0x16,%eax
f0108666:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010866d:	8b 45 08             	mov    0x8(%ebp),%eax
f0108670:	01 d0                	add    %edx,%eax
f0108672:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108675:	c1 ea 16             	shr    $0x16,%edx
f0108678:	8d 0c 95 00 00 00 00 	lea    0x0(,%edx,4),%ecx
f010867f:	8b 55 08             	mov    0x8(%ebp),%edx
f0108682:	01 ca                	add    %ecx,%edx
f0108684:	8b 12                	mov    (%edx),%edx
f0108686:	83 e2 df             	and    $0xffffffdf,%edx
f0108689:	89 10                	mov    %edx,(%eax)
	tlb_invalidate((void *)NULL, (void *)virtual_address);
f010868b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010868e:	83 ec 08             	sub    $0x8,%esp
f0108691:	50                   	push   %eax
f0108692:	6a 00                	push   $0x0
f0108694:	e8 25 e8 ff ff       	call   f0106ebe <tlb_invalidate>
f0108699:	83 c4 10             	add    $0x10,%esp
}
f010869c:	90                   	nop
f010869d:	c9                   	leave  
f010869e:	c3                   	ret    

f010869f <pd_clear_page_dir_entry>:

inline void pd_clear_page_dir_entry(uint32* page_directory, uint32 virtual_address)
{
f010869f:	55                   	push   %ebp
f01086a0:	89 e5                	mov    %esp,%ebp
f01086a2:	83 ec 10             	sub    $0x10,%esp
	page_directory[PDX(virtual_address)] = 0 ;
f01086a5:	8b 45 0c             	mov    0xc(%ebp),%eax
f01086a8:	c1 e8 16             	shr    $0x16,%eax
f01086ab:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01086b2:	8b 45 08             	mov    0x8(%ebp),%eax
f01086b5:	01 d0                	add    %edx,%eax
f01086b7:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f01086bd:	0f 20 d8             	mov    %cr3,%eax
f01086c0:	89 45 fc             	mov    %eax,-0x4(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f01086c3:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01086c6:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
}
f01086c9:	90                   	nop
f01086ca:	c9                   	leave  
f01086cb:	c3                   	ret    

f01086cc <env_page_ws_get_size>:
		}
	}
}
#else
inline uint32 env_page_ws_get_size(struct Env *e)
{
f01086cc:	55                   	push   %ebp
f01086cd:	89 e5                	mov    %esp,%ebp
f01086cf:	83 ec 10             	sub    $0x10,%esp
	int i=0, counter=0;
f01086d2:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f01086d9:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for(;i<e->page_WS_max_size; i++) if(e->ptr_pageWorkingSet[i].empty == 0) counter++;
f01086e0:	eb 22                	jmp    f0108704 <env_page_ws_get_size+0x38>
f01086e2:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01086e5:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01086e8:	89 d0                	mov    %edx,%eax
f01086ea:	01 c0                	add    %eax,%eax
f01086ec:	01 d0                	add    %edx,%eax
f01086ee:	c1 e0 03             	shl    $0x3,%eax
f01086f1:	01 c8                	add    %ecx,%eax
f01086f3:	05 bc 00 00 00       	add    $0xbc,%eax
f01086f8:	8a 00                	mov    (%eax),%al
f01086fa:	84 c0                	test   %al,%al
f01086fc:	75 03                	jne    f0108701 <env_page_ws_get_size+0x35>
f01086fe:	ff 45 f8             	incl   -0x8(%ebp)
f0108701:	ff 45 fc             	incl   -0x4(%ebp)
f0108704:	8b 45 08             	mov    0x8(%ebp),%eax
f0108707:	8b 90 7c d5 01 00    	mov    0x1d57c(%eax),%edx
f010870d:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0108710:	39 c2                	cmp    %eax,%edx
f0108712:	77 ce                	ja     f01086e2 <env_page_ws_get_size+0x16>
	return counter;
f0108714:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f0108717:	c9                   	leave  
f0108718:	c3                   	ret    

f0108719 <env_page_ws_invalidate>:

inline void env_page_ws_invalidate(struct Env* e, uint32 virtual_address)
{
f0108719:	55                   	push   %ebp
f010871a:	89 e5                	mov    %esp,%ebp
f010871c:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f010871f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;i<e->page_WS_max_size; i++)
f0108726:	eb 4e                	jmp    f0108776 <env_page_ws_invalidate+0x5d>
	{
		if(ROUNDDOWN(e->ptr_pageWorkingSet[i].virtual_address,PAGE_SIZE) == ROUNDDOWN(virtual_address,PAGE_SIZE))
f0108728:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010872b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010872e:	89 d0                	mov    %edx,%eax
f0108730:	01 c0                	add    %eax,%eax
f0108732:	01 d0                	add    %edx,%eax
f0108734:	c1 e0 03             	shl    $0x3,%eax
f0108737:	01 c8                	add    %ecx,%eax
f0108739:	05 b8 00 00 00       	add    $0xb8,%eax
f010873e:	8b 00                	mov    (%eax),%eax
f0108740:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0108743:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108746:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010874b:	89 c2                	mov    %eax,%edx
f010874d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108750:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0108753:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0108756:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010875b:	39 c2                	cmp    %eax,%edx
f010875d:	75 14                	jne    f0108773 <env_page_ws_invalidate+0x5a>
		{
			env_page_ws_clear_entry(e, i);
f010875f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108762:	83 ec 08             	sub    $0x8,%esp
f0108765:	50                   	push   %eax
f0108766:	ff 75 08             	pushl  0x8(%ebp)
f0108769:	e8 c8 00 00 00       	call   f0108836 <env_page_ws_clear_entry>
f010876e:	83 c4 10             	add    $0x10,%esp
			break;
f0108771:	eb 13                	jmp    f0108786 <env_page_ws_invalidate+0x6d>
}

inline void env_page_ws_invalidate(struct Env* e, uint32 virtual_address)
{
	int i=0;
	for(;i<e->page_WS_max_size; i++)
f0108773:	ff 45 f4             	incl   -0xc(%ebp)
f0108776:	8b 45 08             	mov    0x8(%ebp),%eax
f0108779:	8b 90 7c d5 01 00    	mov    0x1d57c(%eax),%edx
f010877f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108782:	39 c2                	cmp    %eax,%edx
f0108784:	77 a2                	ja     f0108728 <env_page_ws_invalidate+0xf>
		{
			env_page_ws_clear_entry(e, i);
			break;
		}
	}
}
f0108786:	90                   	nop
f0108787:	c9                   	leave  
f0108788:	c3                   	ret    

f0108789 <env_page_ws_set_entry>:

inline void env_page_ws_set_entry(struct Env* e, uint32 entry_index, uint32 virtual_address)
{
f0108789:	55                   	push   %ebp
f010878a:	89 e5                	mov    %esp,%ebp
f010878c:	53                   	push   %ebx
f010878d:	83 ec 14             	sub    $0x14,%esp
	assert(entry_index >= 0 && entry_index < e->page_WS_max_size);
f0108790:	8b 45 08             	mov    0x8(%ebp),%eax
f0108793:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0108799:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010879c:	77 16                	ja     f01087b4 <env_page_ws_set_entry+0x2b>
f010879e:	68 fc 31 13 f0       	push   $0xf01331fc
f01087a3:	68 32 32 13 f0       	push   $0xf0133232
f01087a8:	6a 77                	push   $0x77
f01087aa:	68 48 32 13 f0       	push   $0xf0133248
f01087af:	e8 fc 79 ff ff       	call   f01001b0 <_panic>
	assert(virtual_address >= 0 && virtual_address < USER_TOP);
f01087b4:	81 7d 10 ff ff bf ee 	cmpl   $0xeebfffff,0x10(%ebp)
f01087bb:	76 16                	jbe    f01087d3 <env_page_ws_set_entry+0x4a>
f01087bd:	68 68 32 13 f0       	push   $0xf0133268
f01087c2:	68 32 32 13 f0       	push   $0xf0133232
f01087c7:	6a 78                	push   $0x78
f01087c9:	68 48 32 13 f0       	push   $0xf0133248
f01087ce:	e8 dd 79 ff ff       	call   f01001b0 <_panic>
	e->ptr_pageWorkingSet[entry_index].virtual_address = ROUNDDOWN(virtual_address,PAGE_SIZE);
f01087d3:	8b 45 10             	mov    0x10(%ebp),%eax
f01087d6:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01087d9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01087dc:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01087e1:	89 c1                	mov    %eax,%ecx
f01087e3:	8b 5d 08             	mov    0x8(%ebp),%ebx
f01087e6:	8b 55 0c             	mov    0xc(%ebp),%edx
f01087e9:	89 d0                	mov    %edx,%eax
f01087eb:	01 c0                	add    %eax,%eax
f01087ed:	01 d0                	add    %edx,%eax
f01087ef:	c1 e0 03             	shl    $0x3,%eax
f01087f2:	01 d8                	add    %ebx,%eax
f01087f4:	05 b8 00 00 00       	add    $0xb8,%eax
f01087f9:	89 08                	mov    %ecx,(%eax)
	e->ptr_pageWorkingSet[entry_index].empty = 0;
f01087fb:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01087fe:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108801:	89 d0                	mov    %edx,%eax
f0108803:	01 c0                	add    %eax,%eax
f0108805:	01 d0                	add    %edx,%eax
f0108807:	c1 e0 03             	shl    $0x3,%eax
f010880a:	01 c8                	add    %ecx,%eax
f010880c:	05 bc 00 00 00       	add    $0xbc,%eax
f0108811:	c6 00 00             	movb   $0x0,(%eax)

	e->ptr_pageWorkingSet[entry_index].time_stamp = 0x80000000;
f0108814:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108817:	8b 55 0c             	mov    0xc(%ebp),%edx
f010881a:	89 d0                	mov    %edx,%eax
f010881c:	01 c0                	add    %eax,%eax
f010881e:	01 d0                	add    %edx,%eax
f0108820:	c1 e0 03             	shl    $0x3,%eax
f0108823:	01 c8                	add    %ecx,%eax
f0108825:	05 c0 00 00 00       	add    $0xc0,%eax
f010882a:	c7 00 00 00 00 80    	movl   $0x80000000,(%eax)
	//e->ptr_pageWorkingSet[entry_index].time_stamp = time;
	return;
f0108830:	90                   	nop
}
f0108831:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0108834:	c9                   	leave  
f0108835:	c3                   	ret    

f0108836 <env_page_ws_clear_entry>:

inline void env_page_ws_clear_entry(struct Env* e, uint32 entry_index)
{
f0108836:	55                   	push   %ebp
f0108837:	89 e5                	mov    %esp,%ebp
f0108839:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f010883c:	8b 45 08             	mov    0x8(%ebp),%eax
f010883f:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0108845:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0108848:	77 19                	ja     f0108863 <env_page_ws_clear_entry+0x2d>
f010884a:	68 9c 32 13 f0       	push   $0xf013329c
f010884f:	68 32 32 13 f0       	push   $0xf0133232
f0108854:	68 83 00 00 00       	push   $0x83
f0108859:	68 48 32 13 f0       	push   $0xf0133248
f010885e:	e8 4d 79 ff ff       	call   f01001b0 <_panic>
	e->ptr_pageWorkingSet[entry_index].virtual_address = 0;
f0108863:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108866:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108869:	89 d0                	mov    %edx,%eax
f010886b:	01 c0                	add    %eax,%eax
f010886d:	01 d0                	add    %edx,%eax
f010886f:	c1 e0 03             	shl    $0x3,%eax
f0108872:	01 c8                	add    %ecx,%eax
f0108874:	05 b8 00 00 00       	add    $0xb8,%eax
f0108879:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	e->ptr_pageWorkingSet[entry_index].empty = 1;
f010887f:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108882:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108885:	89 d0                	mov    %edx,%eax
f0108887:	01 c0                	add    %eax,%eax
f0108889:	01 d0                	add    %edx,%eax
f010888b:	c1 e0 03             	shl    $0x3,%eax
f010888e:	01 c8                	add    %ecx,%eax
f0108890:	05 bc 00 00 00       	add    $0xbc,%eax
f0108895:	c6 00 01             	movb   $0x1,(%eax)
	e->ptr_pageWorkingSet[entry_index].time_stamp = 0;
f0108898:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010889b:	8b 55 0c             	mov    0xc(%ebp),%edx
f010889e:	89 d0                	mov    %edx,%eax
f01088a0:	01 c0                	add    %eax,%eax
f01088a2:	01 d0                	add    %edx,%eax
f01088a4:	c1 e0 03             	shl    $0x3,%eax
f01088a7:	01 c8                	add    %ecx,%eax
f01088a9:	05 c0 00 00 00       	add    $0xc0,%eax
f01088ae:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
f01088b4:	90                   	nop
f01088b5:	c9                   	leave  
f01088b6:	c3                   	ret    

f01088b7 <env_page_ws_get_virtual_address>:

inline uint32 env_page_ws_get_virtual_address(struct Env* e, uint32 entry_index)
{
f01088b7:	55                   	push   %ebp
f01088b8:	89 e5                	mov    %esp,%ebp
f01088ba:	83 ec 18             	sub    $0x18,%esp
	assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f01088bd:	8b 45 08             	mov    0x8(%ebp),%eax
f01088c0:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f01088c6:	3b 45 0c             	cmp    0xc(%ebp),%eax
f01088c9:	77 19                	ja     f01088e4 <env_page_ws_get_virtual_address+0x2d>
f01088cb:	68 9c 32 13 f0       	push   $0xf013329c
f01088d0:	68 32 32 13 f0       	push   $0xf0133232
f01088d5:	68 8b 00 00 00       	push   $0x8b
f01088da:	68 48 32 13 f0       	push   $0xf0133248
f01088df:	e8 cc 78 ff ff       	call   f01001b0 <_panic>
	return ROUNDDOWN(e->ptr_pageWorkingSet[entry_index].virtual_address,PAGE_SIZE);
f01088e4:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01088e7:	8b 55 0c             	mov    0xc(%ebp),%edx
f01088ea:	89 d0                	mov    %edx,%eax
f01088ec:	01 c0                	add    %eax,%eax
f01088ee:	01 d0                	add    %edx,%eax
f01088f0:	c1 e0 03             	shl    $0x3,%eax
f01088f3:	01 c8                	add    %ecx,%eax
f01088f5:	05 b8 00 00 00       	add    $0xb8,%eax
f01088fa:	8b 00                	mov    (%eax),%eax
f01088fc:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01088ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108902:	25 00 f0 ff ff       	and    $0xfffff000,%eax
}
f0108907:	c9                   	leave  
f0108908:	c3                   	ret    

f0108909 <env_page_ws_get_time_stamp>:

inline uint32 env_page_ws_get_time_stamp(struct Env* e, uint32 entry_index)
{
f0108909:	55                   	push   %ebp
f010890a:	89 e5                	mov    %esp,%ebp
f010890c:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f010890f:	8b 45 08             	mov    0x8(%ebp),%eax
f0108912:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0108918:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010891b:	77 19                	ja     f0108936 <env_page_ws_get_time_stamp+0x2d>
f010891d:	68 9c 32 13 f0       	push   $0xf013329c
f0108922:	68 32 32 13 f0       	push   $0xf0133232
f0108927:	68 91 00 00 00       	push   $0x91
f010892c:	68 48 32 13 f0       	push   $0xf0133248
f0108931:	e8 7a 78 ff ff       	call   f01001b0 <_panic>
	return e->ptr_pageWorkingSet[entry_index].time_stamp;
f0108936:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108939:	8b 55 0c             	mov    0xc(%ebp),%edx
f010893c:	89 d0                	mov    %edx,%eax
f010893e:	01 c0                	add    %eax,%eax
f0108940:	01 d0                	add    %edx,%eax
f0108942:	c1 e0 03             	shl    $0x3,%eax
f0108945:	01 c8                	add    %ecx,%eax
f0108947:	05 c0 00 00 00       	add    $0xc0,%eax
f010894c:	8b 00                	mov    (%eax),%eax
}
f010894e:	c9                   	leave  
f010894f:	c3                   	ret    

f0108950 <env_page_ws_is_entry_empty>:

inline uint32 env_page_ws_is_entry_empty(struct Env* e, uint32 entry_index)
{
f0108950:	55                   	push   %ebp
f0108951:	89 e5                	mov    %esp,%ebp
	return e->ptr_pageWorkingSet[entry_index].empty;
f0108953:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108956:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108959:	89 d0                	mov    %edx,%eax
f010895b:	01 c0                	add    %eax,%eax
f010895d:	01 d0                	add    %edx,%eax
f010895f:	c1 e0 03             	shl    $0x3,%eax
f0108962:	01 c8                	add    %ecx,%eax
f0108964:	05 bc 00 00 00       	add    $0xbc,%eax
f0108969:	8a 00                	mov    (%eax),%al
f010896b:	0f b6 c0             	movzbl %al,%eax
}
f010896e:	5d                   	pop    %ebp
f010896f:	c3                   	ret    

f0108970 <env_page_ws_print>:

void env_page_ws_print(struct Env *e)
{
f0108970:	55                   	push   %ebp
f0108971:	89 e5                	mov    %esp,%ebp
f0108973:	53                   	push   %ebx
f0108974:	83 ec 24             	sub    $0x24,%esp
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0108977:	83 ec 0c             	sub    $0xc,%esp
f010897a:	6a 02                	push   $0x2
f010897c:	e8 3a 53 00 00       	call   f010dcbb <isPageReplacmentAlgorithmLRU>
f0108981:	83 c4 10             	add    $0x10,%esp
f0108984:	85 c0                	test   %eax,%eax
f0108986:	0f 84 fe 00 00 00    	je     f0108a8a <env_page_ws_print+0x11a>
	{
		int i = 0;
f010898c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		cprintf("ActiveList:\n============\n") ;
f0108993:	83 ec 0c             	sub    $0xc,%esp
f0108996:	68 d4 32 13 f0       	push   $0xf01332d4
f010899b:	e8 91 84 ff ff       	call   f0100e31 <cprintf>
f01089a0:	83 c4 10             	add    $0x10,%esp
		struct WorkingSetElement * ptr_WS_element ;
		LIST_FOREACH(ptr_WS_element, &(e->ActiveList))
f01089a3:	8b 45 08             	mov    0x8(%ebp),%eax
f01089a6:	8b 80 44 da 01 00    	mov    0x1da44(%eax),%eax
f01089ac:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01089af:	eb 2c                	jmp    f01089dd <env_page_ws_print+0x6d>
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
f01089b1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01089b4:	8b 10                	mov    (%eax),%edx
f01089b6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01089b9:	8d 48 01             	lea    0x1(%eax),%ecx
f01089bc:	89 4d f4             	mov    %ecx,-0xc(%ebp)
f01089bf:	83 ec 04             	sub    $0x4,%esp
f01089c2:	52                   	push   %edx
f01089c3:	50                   	push   %eax
f01089c4:	68 ee 32 13 f0       	push   $0xf01332ee
f01089c9:	e8 63 84 ff ff       	call   f0100e31 <cprintf>
f01089ce:	83 c4 10             	add    $0x10,%esp
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
	{
		int i = 0;
		cprintf("ActiveList:\n============\n") ;
		struct WorkingSetElement * ptr_WS_element ;
		LIST_FOREACH(ptr_WS_element, &(e->ActiveList))
f01089d1:	8b 45 08             	mov    0x8(%ebp),%eax
f01089d4:	8b 80 4c da 01 00    	mov    0x1da4c(%eax),%eax
f01089da:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01089dd:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01089e1:	74 08                	je     f01089eb <env_page_ws_print+0x7b>
f01089e3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01089e6:	8b 40 10             	mov    0x10(%eax),%eax
f01089e9:	eb 05                	jmp    f01089f0 <env_page_ws_print+0x80>
f01089eb:	b8 00 00 00 00       	mov    $0x0,%eax
f01089f0:	8b 55 08             	mov    0x8(%ebp),%edx
f01089f3:	89 82 4c da 01 00    	mov    %eax,0x1da4c(%edx)
f01089f9:	8b 45 08             	mov    0x8(%ebp),%eax
f01089fc:	8b 80 4c da 01 00    	mov    0x1da4c(%eax),%eax
f0108a02:	85 c0                	test   %eax,%eax
f0108a04:	75 ab                	jne    f01089b1 <env_page_ws_print+0x41>
f0108a06:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0108a0a:	75 a5                	jne    f01089b1 <env_page_ws_print+0x41>
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
		}
		cprintf("\nSecondList:\n============\n") ;
f0108a0c:	83 ec 0c             	sub    $0xc,%esp
f0108a0f:	68 f6 32 13 f0       	push   $0xf01332f6
f0108a14:	e8 18 84 ff ff       	call   f0100e31 <cprintf>
f0108a19:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_WS_element, &(e->SecondList))
f0108a1c:	8b 45 08             	mov    0x8(%ebp),%eax
f0108a1f:	8b 80 54 da 01 00    	mov    0x1da54(%eax),%eax
f0108a25:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0108a28:	eb 2c                	jmp    f0108a56 <env_page_ws_print+0xe6>
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
f0108a2a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108a2d:	8b 10                	mov    (%eax),%edx
f0108a2f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108a32:	8d 48 01             	lea    0x1(%eax),%ecx
f0108a35:	89 4d f4             	mov    %ecx,-0xc(%ebp)
f0108a38:	83 ec 04             	sub    $0x4,%esp
f0108a3b:	52                   	push   %edx
f0108a3c:	50                   	push   %eax
f0108a3d:	68 ee 32 13 f0       	push   $0xf01332ee
f0108a42:	e8 ea 83 ff ff       	call   f0100e31 <cprintf>
f0108a47:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_WS_element, &(e->ActiveList))
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
		}
		cprintf("\nSecondList:\n============\n") ;
		LIST_FOREACH(ptr_WS_element, &(e->SecondList))
f0108a4a:	8b 45 08             	mov    0x8(%ebp),%eax
f0108a4d:	8b 80 5c da 01 00    	mov    0x1da5c(%eax),%eax
f0108a53:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0108a56:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0108a5a:	74 08                	je     f0108a64 <env_page_ws_print+0xf4>
f0108a5c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108a5f:	8b 40 10             	mov    0x10(%eax),%eax
f0108a62:	eb 05                	jmp    f0108a69 <env_page_ws_print+0xf9>
f0108a64:	b8 00 00 00 00       	mov    $0x0,%eax
f0108a69:	8b 55 08             	mov    0x8(%ebp),%edx
f0108a6c:	89 82 5c da 01 00    	mov    %eax,0x1da5c(%edx)
f0108a72:	8b 45 08             	mov    0x8(%ebp),%eax
f0108a75:	8b 80 5c da 01 00    	mov    0x1da5c(%eax),%eax
f0108a7b:	85 c0                	test   %eax,%eax
f0108a7d:	75 ab                	jne    f0108a2a <env_page_ws_print+0xba>
f0108a7f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0108a83:	75 a5                	jne    f0108a2a <env_page_ws_print+0xba>
				cprintf(" <--");
			}
			cprintf("\n");
		}
	}
}
f0108a85:	e9 a2 01 00 00       	jmp    f0108c2c <env_page_ws_print+0x2bc>
		}
	}
	else
	{
		uint32 i;
		cprintf("PAGE WS:\n");
f0108a8a:	83 ec 0c             	sub    $0xc,%esp
f0108a8d:	68 11 33 13 f0       	push   $0xf0133311
f0108a92:	e8 9a 83 ff ff       	call   f0100e31 <cprintf>
f0108a97:	83 c4 10             	add    $0x10,%esp
		for(i=0; i< (e->page_WS_max_size); i++ )
f0108a9a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0108aa1:	e9 74 01 00 00       	jmp    f0108c1a <env_page_ws_print+0x2aa>
		{
			if (e->ptr_pageWorkingSet[i].empty)
f0108aa6:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108aa9:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0108aac:	89 d0                	mov    %edx,%eax
f0108aae:	01 c0                	add    %eax,%eax
f0108ab0:	01 d0                	add    %edx,%eax
f0108ab2:	c1 e0 03             	shl    $0x3,%eax
f0108ab5:	01 c8                	add    %ecx,%eax
f0108ab7:	05 bc 00 00 00       	add    $0xbc,%eax
f0108abc:	8a 00                	mov    (%eax),%al
f0108abe:	84 c0                	test   %al,%al
f0108ac0:	74 43                	je     f0108b05 <env_page_ws_print+0x195>
			{
				cprintf("EMPTY LOCATION");
f0108ac2:	83 ec 0c             	sub    $0xc,%esp
f0108ac5:	68 1b 33 13 f0       	push   $0xf013331b
f0108aca:	e8 62 83 ff ff       	call   f0100e31 <cprintf>
f0108acf:	83 c4 10             	add    $0x10,%esp
				if(i==e->page_last_WS_index )
f0108ad2:	8b 45 08             	mov    0x8(%ebp),%eax
f0108ad5:	8b 80 78 d5 01 00    	mov    0x1d578(%eax),%eax
f0108adb:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0108ade:	75 10                	jne    f0108af0 <env_page_ws_print+0x180>
				{
					cprintf("		<--");
f0108ae0:	83 ec 0c             	sub    $0xc,%esp
f0108ae3:	68 2a 33 13 f0       	push   $0xf013332a
f0108ae8:	e8 44 83 ff ff       	call   f0100e31 <cprintf>
f0108aed:	83 c4 10             	add    $0x10,%esp
				}
				cprintf("\n");
f0108af0:	83 ec 0c             	sub    $0xc,%esp
f0108af3:	68 30 33 13 f0       	push   $0xf0133330
f0108af8:	e8 34 83 ff ff       	call   f0100e31 <cprintf>
f0108afd:	83 c4 10             	add    $0x10,%esp
				continue;
f0108b00:	e9 12 01 00 00       	jmp    f0108c17 <env_page_ws_print+0x2a7>
			}
			uint32 virtual_address = e->ptr_pageWorkingSet[i].virtual_address;
f0108b05:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108b08:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0108b0b:	89 d0                	mov    %edx,%eax
f0108b0d:	01 c0                	add    %eax,%eax
f0108b0f:	01 d0                	add    %edx,%eax
f0108b11:	c1 e0 03             	shl    $0x3,%eax
f0108b14:	01 c8                	add    %ecx,%eax
f0108b16:	05 b8 00 00 00       	add    $0xb8,%eax
f0108b1b:	8b 00                	mov    (%eax),%eax
f0108b1d:	89 45 e8             	mov    %eax,-0x18(%ebp)
			uint32 time_stamp = e->ptr_pageWorkingSet[i].time_stamp;
f0108b20:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108b23:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0108b26:	89 d0                	mov    %edx,%eax
f0108b28:	01 c0                	add    %eax,%eax
f0108b2a:	01 d0                	add    %edx,%eax
f0108b2c:	c1 e0 03             	shl    $0x3,%eax
f0108b2f:	01 c8                	add    %ecx,%eax
f0108b31:	05 c0 00 00 00       	add    $0xc0,%eax
f0108b36:	8b 00                	mov    (%eax),%eax
f0108b38:	89 45 e4             	mov    %eax,-0x1c(%ebp)

			uint32 perm = pt_get_page_permissions(e->env_page_directory, virtual_address) ;
f0108b3b:	8b 45 08             	mov    0x8(%ebp),%eax
f0108b3e:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0108b44:	83 ec 08             	sub    $0x8,%esp
f0108b47:	ff 75 e8             	pushl  -0x18(%ebp)
f0108b4a:	50                   	push   %eax
f0108b4b:	e8 0a fa ff ff       	call   f010855a <pt_get_page_permissions>
f0108b50:	83 c4 10             	add    $0x10,%esp
f0108b53:	89 45 e0             	mov    %eax,-0x20(%ebp)
			char isModified = ((perm&PERM_MODIFIED) ? 1 : 0);
f0108b56:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0108b59:	83 e0 40             	and    $0x40,%eax
f0108b5c:	85 c0                	test   %eax,%eax
f0108b5e:	0f 95 c0             	setne  %al
f0108b61:	88 45 df             	mov    %al,-0x21(%ebp)
			char isUsed= ((perm&PERM_USED) ? 1 : 0);
f0108b64:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0108b67:	83 e0 20             	and    $0x20,%eax
f0108b6a:	85 c0                	test   %eax,%eax
f0108b6c:	0f 95 c0             	setne  %al
f0108b6f:	88 45 de             	mov    %al,-0x22(%ebp)
			char isBuffered= ((perm&PERM_BUFFERED) ? 1 : 0);
f0108b72:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0108b75:	25 00 02 00 00       	and    $0x200,%eax
f0108b7a:	85 c0                	test   %eax,%eax
f0108b7c:	0f 95 c0             	setne  %al
f0108b7f:	88 45 dd             	mov    %al,-0x23(%ebp)


			cprintf("address @ %d = %x",i, e->ptr_pageWorkingSet[i].virtual_address);
f0108b82:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108b85:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0108b88:	89 d0                	mov    %edx,%eax
f0108b8a:	01 c0                	add    %eax,%eax
f0108b8c:	01 d0                	add    %edx,%eax
f0108b8e:	c1 e0 03             	shl    $0x3,%eax
f0108b91:	01 c8                	add    %ecx,%eax
f0108b93:	05 b8 00 00 00       	add    $0xb8,%eax
f0108b98:	8b 00                	mov    (%eax),%eax
f0108b9a:	83 ec 04             	sub    $0x4,%esp
f0108b9d:	50                   	push   %eax
f0108b9e:	ff 75 ec             	pushl  -0x14(%ebp)
f0108ba1:	68 32 33 13 f0       	push   $0xf0133332
f0108ba6:	e8 86 82 ff ff       	call   f0100e31 <cprintf>
f0108bab:	83 c4 10             	add    $0x10,%esp

			//2021
			cprintf(", used= %d, modified= %d, buffered= %d, time stamp= %x, sweeps_cnt= %d", isUsed, isModified, isBuffered, time_stamp, e->ptr_pageWorkingSet[i].sweeps_counter) ;
f0108bae:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108bb1:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0108bb4:	89 d0                	mov    %edx,%eax
f0108bb6:	01 c0                	add    %eax,%eax
f0108bb8:	01 d0                	add    %edx,%eax
f0108bba:	c1 e0 03             	shl    $0x3,%eax
f0108bbd:	01 c8                	add    %ecx,%eax
f0108bbf:	05 c4 00 00 00       	add    $0xc4,%eax
f0108bc4:	8b 18                	mov    (%eax),%ebx
f0108bc6:	0f be 4d dd          	movsbl -0x23(%ebp),%ecx
f0108bca:	0f be 55 df          	movsbl -0x21(%ebp),%edx
f0108bce:	0f be 45 de          	movsbl -0x22(%ebp),%eax
f0108bd2:	83 ec 08             	sub    $0x8,%esp
f0108bd5:	53                   	push   %ebx
f0108bd6:	ff 75 e4             	pushl  -0x1c(%ebp)
f0108bd9:	51                   	push   %ecx
f0108bda:	52                   	push   %edx
f0108bdb:	50                   	push   %eax
f0108bdc:	68 44 33 13 f0       	push   $0xf0133344
f0108be1:	e8 4b 82 ff ff       	call   f0100e31 <cprintf>
f0108be6:	83 c4 20             	add    $0x20,%esp

			if(i==e->page_last_WS_index )
f0108be9:	8b 45 08             	mov    0x8(%ebp),%eax
f0108bec:	8b 80 78 d5 01 00    	mov    0x1d578(%eax),%eax
f0108bf2:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0108bf5:	75 10                	jne    f0108c07 <env_page_ws_print+0x297>
			{
				cprintf(" <--");
f0108bf7:	83 ec 0c             	sub    $0xc,%esp
f0108bfa:	68 8b 33 13 f0       	push   $0xf013338b
f0108bff:	e8 2d 82 ff ff       	call   f0100e31 <cprintf>
f0108c04:	83 c4 10             	add    $0x10,%esp
			}
			cprintf("\n");
f0108c07:	83 ec 0c             	sub    $0xc,%esp
f0108c0a:	68 30 33 13 f0       	push   $0xf0133330
f0108c0f:	e8 1d 82 ff ff       	call   f0100e31 <cprintf>
f0108c14:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		uint32 i;
		cprintf("PAGE WS:\n");
		for(i=0; i< (e->page_WS_max_size); i++ )
f0108c17:	ff 45 ec             	incl   -0x14(%ebp)
f0108c1a:	8b 45 08             	mov    0x8(%ebp),%eax
f0108c1d:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0108c23:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0108c26:	0f 87 7a fe ff ff    	ja     f0108aa6 <env_page_ws_print+0x136>
				cprintf(" <--");
			}
			cprintf("\n");
		}
	}
}
f0108c2c:	90                   	nop
f0108c2d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0108c30:	c9                   	leave  
f0108c31:	c3                   	ret    

f0108c32 <env_table_ws_print>:
#endif
// Table Working Set =========================================================

void env_table_ws_print(struct Env *e)
{
f0108c32:	55                   	push   %ebp
f0108c33:	89 e5                	mov    %esp,%ebp
f0108c35:	53                   	push   %ebx
f0108c36:	83 ec 14             	sub    $0x14,%esp
	uint32 i;
	cprintf("---------------------------------------------------\n");
f0108c39:	83 ec 0c             	sub    $0xc,%esp
f0108c3c:	68 90 33 13 f0       	push   $0xf0133390
f0108c41:	e8 eb 81 ff ff       	call   f0100e31 <cprintf>
f0108c46:	83 c4 10             	add    $0x10,%esp
	cprintf("TABLE WS:\n");
f0108c49:	83 ec 0c             	sub    $0xc,%esp
f0108c4c:	68 c5 33 13 f0       	push   $0xf01333c5
f0108c51:	e8 db 81 ff ff       	call   f0100e31 <cprintf>
f0108c56:	83 c4 10             	add    $0x10,%esp
	for(i=0; i< __TWS_MAX_SIZE; i++ )
f0108c59:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0108c60:	e9 19 01 00 00       	jmp    f0108d7e <env_table_ws_print+0x14c>
	{
		if (e->__ptr_tws[i].empty)
f0108c65:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108c68:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108c6b:	89 d0                	mov    %edx,%eax
f0108c6d:	01 c0                	add    %eax,%eax
f0108c6f:	01 d0                	add    %edx,%eax
f0108c71:	c1 e0 03             	shl    $0x3,%eax
f0108c74:	01 c8                	add    %ecx,%eax
f0108c76:	05 84 d5 01 00       	add    $0x1d584,%eax
f0108c7b:	8a 00                	mov    (%eax),%al
f0108c7d:	84 c0                	test   %al,%al
f0108c7f:	74 43                	je     f0108cc4 <env_table_ws_print+0x92>
		{
			cprintf("EMPTY LOCATION");
f0108c81:	83 ec 0c             	sub    $0xc,%esp
f0108c84:	68 1b 33 13 f0       	push   $0xf013331b
f0108c89:	e8 a3 81 ff ff       	call   f0100e31 <cprintf>
f0108c8e:	83 c4 10             	add    $0x10,%esp
			if(i==e->table_last_WS_index )
f0108c91:	8b 45 08             	mov    0x8(%ebp),%eax
f0108c94:	8b 80 30 da 01 00    	mov    0x1da30(%eax),%eax
f0108c9a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0108c9d:	75 10                	jne    f0108caf <env_table_ws_print+0x7d>
			{
				cprintf("		<--");
f0108c9f:	83 ec 0c             	sub    $0xc,%esp
f0108ca2:	68 2a 33 13 f0       	push   $0xf013332a
f0108ca7:	e8 85 81 ff ff       	call   f0100e31 <cprintf>
f0108cac:	83 c4 10             	add    $0x10,%esp
			}
			cprintf("\n");
f0108caf:	83 ec 0c             	sub    $0xc,%esp
f0108cb2:	68 30 33 13 f0       	push   $0xf0133330
f0108cb7:	e8 75 81 ff ff       	call   f0100e31 <cprintf>
f0108cbc:	83 c4 10             	add    $0x10,%esp
			continue;
f0108cbf:	e9 b7 00 00 00       	jmp    f0108d7b <env_table_ws_print+0x149>
		}
		uint32 virtual_address = e->__ptr_tws[i].virtual_address;
f0108cc4:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108cc7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108cca:	89 d0                	mov    %edx,%eax
f0108ccc:	01 c0                	add    %eax,%eax
f0108cce:	01 d0                	add    %edx,%eax
f0108cd0:	c1 e0 03             	shl    $0x3,%eax
f0108cd3:	01 c8                	add    %ecx,%eax
f0108cd5:	05 80 d5 01 00       	add    $0x1d580,%eax
f0108cda:	8b 00                	mov    (%eax),%eax
f0108cdc:	89 45 f0             	mov    %eax,-0x10(%ebp)
		cprintf("env address at %d = %x",i, e->__ptr_tws[i].virtual_address);
f0108cdf:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108ce2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108ce5:	89 d0                	mov    %edx,%eax
f0108ce7:	01 c0                	add    %eax,%eax
f0108ce9:	01 d0                	add    %edx,%eax
f0108ceb:	c1 e0 03             	shl    $0x3,%eax
f0108cee:	01 c8                	add    %ecx,%eax
f0108cf0:	05 80 d5 01 00       	add    $0x1d580,%eax
f0108cf5:	8b 00                	mov    (%eax),%eax
f0108cf7:	83 ec 04             	sub    $0x4,%esp
f0108cfa:	50                   	push   %eax
f0108cfb:	ff 75 f4             	pushl  -0xc(%ebp)
f0108cfe:	68 d0 33 13 f0       	push   $0xf01333d0
f0108d03:	e8 29 81 ff ff       	call   f0100e31 <cprintf>
f0108d08:	83 c4 10             	add    $0x10,%esp

		cprintf(", used bit = %d, time stamp = %d", pd_is_table_used(e->env_page_directory, virtual_address), e->__ptr_tws[i].time_stamp);
f0108d0b:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108d0e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108d11:	89 d0                	mov    %edx,%eax
f0108d13:	01 c0                	add    %eax,%eax
f0108d15:	01 d0                	add    %edx,%eax
f0108d17:	c1 e0 03             	shl    $0x3,%eax
f0108d1a:	01 c8                	add    %ecx,%eax
f0108d1c:	05 88 d5 01 00       	add    $0x1d588,%eax
f0108d21:	8b 18                	mov    (%eax),%ebx
f0108d23:	8b 45 08             	mov    0x8(%ebp),%eax
f0108d26:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0108d2c:	83 ec 08             	sub    $0x8,%esp
f0108d2f:	ff 75 f0             	pushl  -0x10(%ebp)
f0108d32:	50                   	push   %eax
f0108d33:	e8 fe f8 ff ff       	call   f0108636 <pd_is_table_used>
f0108d38:	83 c4 10             	add    $0x10,%esp
f0108d3b:	83 ec 04             	sub    $0x4,%esp
f0108d3e:	53                   	push   %ebx
f0108d3f:	50                   	push   %eax
f0108d40:	68 e8 33 13 f0       	push   $0xf01333e8
f0108d45:	e8 e7 80 ff ff       	call   f0100e31 <cprintf>
f0108d4a:	83 c4 10             	add    $0x10,%esp
		if(i==e->table_last_WS_index )
f0108d4d:	8b 45 08             	mov    0x8(%ebp),%eax
f0108d50:	8b 80 30 da 01 00    	mov    0x1da30(%eax),%eax
f0108d56:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0108d59:	75 10                	jne    f0108d6b <env_table_ws_print+0x139>
		{
			cprintf(" <--");
f0108d5b:	83 ec 0c             	sub    $0xc,%esp
f0108d5e:	68 8b 33 13 f0       	push   $0xf013338b
f0108d63:	e8 c9 80 ff ff       	call   f0100e31 <cprintf>
f0108d68:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("\n");
f0108d6b:	83 ec 0c             	sub    $0xc,%esp
f0108d6e:	68 30 33 13 f0       	push   $0xf0133330
f0108d73:	e8 b9 80 ff ff       	call   f0100e31 <cprintf>
f0108d78:	83 c4 10             	add    $0x10,%esp
void env_table_ws_print(struct Env *e)
{
	uint32 i;
	cprintf("---------------------------------------------------\n");
	cprintf("TABLE WS:\n");
	for(i=0; i< __TWS_MAX_SIZE; i++ )
f0108d7b:	ff 45 f4             	incl   -0xc(%ebp)
f0108d7e:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f0108d82:	0f 86 dd fe ff ff    	jbe    f0108c65 <env_table_ws_print+0x33>
		{
			cprintf(" <--");
		}
		cprintf("\n");
	}
}
f0108d88:	90                   	nop
f0108d89:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0108d8c:	c9                   	leave  
f0108d8d:	c3                   	ret    

f0108d8e <env_table_ws_get_size>:

inline uint32 env_table_ws_get_size(struct Env *e)
{
f0108d8e:	55                   	push   %ebp
f0108d8f:	89 e5                	mov    %esp,%ebp
f0108d91:	83 ec 10             	sub    $0x10,%esp
	int i=0, counter=0;
f0108d94:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0108d9b:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for(;i<__TWS_MAX_SIZE; i++) if(e->__ptr_tws[i].empty == 0) counter++;
f0108da2:	eb 22                	jmp    f0108dc6 <env_table_ws_get_size+0x38>
f0108da4:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108da7:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0108daa:	89 d0                	mov    %edx,%eax
f0108dac:	01 c0                	add    %eax,%eax
f0108dae:	01 d0                	add    %edx,%eax
f0108db0:	c1 e0 03             	shl    $0x3,%eax
f0108db3:	01 c8                	add    %ecx,%eax
f0108db5:	05 84 d5 01 00       	add    $0x1d584,%eax
f0108dba:	8a 00                	mov    (%eax),%al
f0108dbc:	84 c0                	test   %al,%al
f0108dbe:	75 03                	jne    f0108dc3 <env_table_ws_get_size+0x35>
f0108dc0:	ff 45 f8             	incl   -0x8(%ebp)
f0108dc3:	ff 45 fc             	incl   -0x4(%ebp)
f0108dc6:	83 7d fc 31          	cmpl   $0x31,-0x4(%ebp)
f0108dca:	7e d8                	jle    f0108da4 <env_table_ws_get_size+0x16>
	return counter;
f0108dcc:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f0108dcf:	c9                   	leave  
f0108dd0:	c3                   	ret    

f0108dd1 <env_table_ws_invalidate>:

inline void env_table_ws_invalidate(struct Env* e, uint32 virtual_address)
{
f0108dd1:	55                   	push   %ebp
f0108dd2:	89 e5                	mov    %esp,%ebp
f0108dd4:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f0108dd7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;i<__TWS_MAX_SIZE; i++)
f0108dde:	eb 4e                	jmp    f0108e2e <env_table_ws_invalidate+0x5d>
	{
		if(ROUNDDOWN(e->__ptr_tws[i].virtual_address,PAGE_SIZE*1024) == ROUNDDOWN(virtual_address,PAGE_SIZE*1024))
f0108de0:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108de3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108de6:	89 d0                	mov    %edx,%eax
f0108de8:	01 c0                	add    %eax,%eax
f0108dea:	01 d0                	add    %edx,%eax
f0108dec:	c1 e0 03             	shl    $0x3,%eax
f0108def:	01 c8                	add    %ecx,%eax
f0108df1:	05 80 d5 01 00       	add    $0x1d580,%eax
f0108df6:	8b 00                	mov    (%eax),%eax
f0108df8:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0108dfb:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108dfe:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f0108e03:	89 c2                	mov    %eax,%edx
f0108e05:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108e08:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0108e0b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0108e0e:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f0108e13:	39 c2                	cmp    %eax,%edx
f0108e15:	75 14                	jne    f0108e2b <env_table_ws_invalidate+0x5a>
		{
			env_table_ws_clear_entry(e, i);
f0108e17:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108e1a:	83 ec 08             	sub    $0x8,%esp
f0108e1d:	50                   	push   %eax
f0108e1e:	ff 75 08             	pushl  0x8(%ebp)
f0108e21:	e8 bc 00 00 00       	call   f0108ee2 <env_table_ws_clear_entry>
f0108e26:	83 c4 10             	add    $0x10,%esp
			break;
f0108e29:	eb 09                	jmp    f0108e34 <env_table_ws_invalidate+0x63>
}

inline void env_table_ws_invalidate(struct Env* e, uint32 virtual_address)
{
	int i=0;
	for(;i<__TWS_MAX_SIZE; i++)
f0108e2b:	ff 45 f4             	incl   -0xc(%ebp)
f0108e2e:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f0108e32:	7e ac                	jle    f0108de0 <env_table_ws_invalidate+0xf>
		{
			env_table_ws_clear_entry(e, i);
			break;
		}
	}
}
f0108e34:	90                   	nop
f0108e35:	c9                   	leave  
f0108e36:	c3                   	ret    

f0108e37 <env_table_ws_set_entry>:

inline void env_table_ws_set_entry(struct Env* e, uint32 entry_index, uint32 virtual_address)
{
f0108e37:	55                   	push   %ebp
f0108e38:	89 e5                	mov    %esp,%ebp
f0108e3a:	53                   	push   %ebx
f0108e3b:	83 ec 14             	sub    $0x14,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f0108e3e:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f0108e42:	76 19                	jbe    f0108e5d <env_table_ws_set_entry+0x26>
f0108e44:	68 0c 34 13 f0       	push   $0xf013340c
f0108e49:	68 32 32 13 f0       	push   $0xf0133232
f0108e4e:	68 07 01 00 00       	push   $0x107
f0108e53:	68 48 32 13 f0       	push   $0xf0133248
f0108e58:	e8 53 73 ff ff       	call   f01001b0 <_panic>
	assert(virtual_address >= 0 && virtual_address < USER_TOP);
f0108e5d:	81 7d 10 ff ff bf ee 	cmpl   $0xeebfffff,0x10(%ebp)
f0108e64:	76 19                	jbe    f0108e7f <env_table_ws_set_entry+0x48>
f0108e66:	68 68 32 13 f0       	push   $0xf0133268
f0108e6b:	68 32 32 13 f0       	push   $0xf0133232
f0108e70:	68 08 01 00 00       	push   $0x108
f0108e75:	68 48 32 13 f0       	push   $0xf0133248
f0108e7a:	e8 31 73 ff ff       	call   f01001b0 <_panic>
	e->__ptr_tws[entry_index].virtual_address = ROUNDDOWN(virtual_address,PAGE_SIZE*1024);
f0108e7f:	8b 45 10             	mov    0x10(%ebp),%eax
f0108e82:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0108e85:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108e88:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f0108e8d:	89 c1                	mov    %eax,%ecx
f0108e8f:	8b 5d 08             	mov    0x8(%ebp),%ebx
f0108e92:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108e95:	89 d0                	mov    %edx,%eax
f0108e97:	01 c0                	add    %eax,%eax
f0108e99:	01 d0                	add    %edx,%eax
f0108e9b:	c1 e0 03             	shl    $0x3,%eax
f0108e9e:	01 d8                	add    %ebx,%eax
f0108ea0:	05 80 d5 01 00       	add    $0x1d580,%eax
f0108ea5:	89 08                	mov    %ecx,(%eax)
	e->__ptr_tws[entry_index].empty = 0;
f0108ea7:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108eaa:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108ead:	89 d0                	mov    %edx,%eax
f0108eaf:	01 c0                	add    %eax,%eax
f0108eb1:	01 d0                	add    %edx,%eax
f0108eb3:	c1 e0 03             	shl    $0x3,%eax
f0108eb6:	01 c8                	add    %ecx,%eax
f0108eb8:	05 84 d5 01 00       	add    $0x1d584,%eax
f0108ebd:	c6 00 00             	movb   $0x0,(%eax)

	//e->__ptr_tws[entry_index].time_stamp = time;
	e->__ptr_tws[entry_index].time_stamp = 0x80000000;
f0108ec0:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108ec3:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108ec6:	89 d0                	mov    %edx,%eax
f0108ec8:	01 c0                	add    %eax,%eax
f0108eca:	01 d0                	add    %edx,%eax
f0108ecc:	c1 e0 03             	shl    $0x3,%eax
f0108ecf:	01 c8                	add    %ecx,%eax
f0108ed1:	05 88 d5 01 00       	add    $0x1d588,%eax
f0108ed6:	c7 00 00 00 00 80    	movl   $0x80000000,(%eax)
	return;
f0108edc:	90                   	nop
}
f0108edd:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0108ee0:	c9                   	leave  
f0108ee1:	c3                   	ret    

f0108ee2 <env_table_ws_clear_entry>:

inline void env_table_ws_clear_entry(struct Env* e, uint32 entry_index)
{
f0108ee2:	55                   	push   %ebp
f0108ee3:	89 e5                	mov    %esp,%ebp
f0108ee5:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f0108ee8:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f0108eec:	76 19                	jbe    f0108f07 <env_table_ws_clear_entry+0x25>
f0108eee:	68 0c 34 13 f0       	push   $0xf013340c
f0108ef3:	68 32 32 13 f0       	push   $0xf0133232
f0108ef8:	68 13 01 00 00       	push   $0x113
f0108efd:	68 48 32 13 f0       	push   $0xf0133248
f0108f02:	e8 a9 72 ff ff       	call   f01001b0 <_panic>
	e->__ptr_tws[entry_index].virtual_address = 0;
f0108f07:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108f0a:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108f0d:	89 d0                	mov    %edx,%eax
f0108f0f:	01 c0                	add    %eax,%eax
f0108f11:	01 d0                	add    %edx,%eax
f0108f13:	c1 e0 03             	shl    $0x3,%eax
f0108f16:	01 c8                	add    %ecx,%eax
f0108f18:	05 80 d5 01 00       	add    $0x1d580,%eax
f0108f1d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	e->__ptr_tws[entry_index].empty = 1;
f0108f23:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108f26:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108f29:	89 d0                	mov    %edx,%eax
f0108f2b:	01 c0                	add    %eax,%eax
f0108f2d:	01 d0                	add    %edx,%eax
f0108f2f:	c1 e0 03             	shl    $0x3,%eax
f0108f32:	01 c8                	add    %ecx,%eax
f0108f34:	05 84 d5 01 00       	add    $0x1d584,%eax
f0108f39:	c6 00 01             	movb   $0x1,(%eax)
	e->__ptr_tws[entry_index].time_stamp = 0;
f0108f3c:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108f3f:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108f42:	89 d0                	mov    %edx,%eax
f0108f44:	01 c0                	add    %eax,%eax
f0108f46:	01 d0                	add    %edx,%eax
f0108f48:	c1 e0 03             	shl    $0x3,%eax
f0108f4b:	01 c8                	add    %ecx,%eax
f0108f4d:	05 88 d5 01 00       	add    $0x1d588,%eax
f0108f52:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
f0108f58:	90                   	nop
f0108f59:	c9                   	leave  
f0108f5a:	c3                   	ret    

f0108f5b <env_table_ws_get_virtual_address>:

inline uint32 env_table_ws_get_virtual_address(struct Env* e, uint32 entry_index)
{
f0108f5b:	55                   	push   %ebp
f0108f5c:	89 e5                	mov    %esp,%ebp
f0108f5e:	83 ec 18             	sub    $0x18,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f0108f61:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f0108f65:	76 19                	jbe    f0108f80 <env_table_ws_get_virtual_address+0x25>
f0108f67:	68 0c 34 13 f0       	push   $0xf013340c
f0108f6c:	68 32 32 13 f0       	push   $0xf0133232
f0108f71:	68 1b 01 00 00       	push   $0x11b
f0108f76:	68 48 32 13 f0       	push   $0xf0133248
f0108f7b:	e8 30 72 ff ff       	call   f01001b0 <_panic>
	return ROUNDDOWN(e->__ptr_tws[entry_index].virtual_address,PAGE_SIZE*1024);
f0108f80:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108f83:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108f86:	89 d0                	mov    %edx,%eax
f0108f88:	01 c0                	add    %eax,%eax
f0108f8a:	01 d0                	add    %edx,%eax
f0108f8c:	c1 e0 03             	shl    $0x3,%eax
f0108f8f:	01 c8                	add    %ecx,%eax
f0108f91:	05 80 d5 01 00       	add    $0x1d580,%eax
f0108f96:	8b 00                	mov    (%eax),%eax
f0108f98:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0108f9b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108f9e:	25 00 00 c0 ff       	and    $0xffc00000,%eax
}
f0108fa3:	c9                   	leave  
f0108fa4:	c3                   	ret    

f0108fa5 <env_table_ws_get_time_stamp>:


inline uint32 env_table_ws_get_time_stamp(struct Env* e, uint32 entry_index)
{
f0108fa5:	55                   	push   %ebp
f0108fa6:	89 e5                	mov    %esp,%ebp
f0108fa8:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f0108fab:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f0108faf:	76 19                	jbe    f0108fca <env_table_ws_get_time_stamp+0x25>
f0108fb1:	68 0c 34 13 f0       	push   $0xf013340c
f0108fb6:	68 32 32 13 f0       	push   $0xf0133232
f0108fbb:	68 22 01 00 00       	push   $0x122
f0108fc0:	68 48 32 13 f0       	push   $0xf0133248
f0108fc5:	e8 e6 71 ff ff       	call   f01001b0 <_panic>
	return e->__ptr_tws[entry_index].time_stamp;
f0108fca:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108fcd:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108fd0:	89 d0                	mov    %edx,%eax
f0108fd2:	01 c0                	add    %eax,%eax
f0108fd4:	01 d0                	add    %edx,%eax
f0108fd6:	c1 e0 03             	shl    $0x3,%eax
f0108fd9:	01 c8                	add    %ecx,%eax
f0108fdb:	05 88 d5 01 00       	add    $0x1d588,%eax
f0108fe0:	8b 00                	mov    (%eax),%eax
}
f0108fe2:	c9                   	leave  
f0108fe3:	c3                   	ret    

f0108fe4 <env_table_ws_is_entry_empty>:

inline uint32 env_table_ws_is_entry_empty(struct Env* e, uint32 entry_index)
{
f0108fe4:	55                   	push   %ebp
f0108fe5:	89 e5                	mov    %esp,%ebp
	return e->__ptr_tws[entry_index].empty;
f0108fe7:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108fea:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108fed:	89 d0                	mov    %edx,%eax
f0108fef:	01 c0                	add    %eax,%eax
f0108ff1:	01 d0                	add    %edx,%eax
f0108ff3:	c1 e0 03             	shl    $0x3,%eax
f0108ff6:	01 c8                	add    %ecx,%eax
f0108ff8:	05 84 d5 01 00       	add    $0x1d584,%eax
f0108ffd:	8a 00                	mov    (%eax),%al
f0108fff:	0f b6 c0             	movzbl %al,%eax
}
f0109002:	5d                   	pop    %ebp
f0109003:	c3                   	ret    

f0109004 <cut_paste_pages>:
//	If the page table at any destination page in the range is not exist, it should create it
//	If ANY of the destination pages exists, deny the entire process and return -1. Otherwise, cut-paste the number of pages and return 0
//	ALL 12 permission bits of the destination should be TYPICAL to those of the source
//	The given addresses may be not aligned on 4 KB
int cut_paste_pages(uint32* page_directory, uint32 source_va, uint32 dest_va, uint32 num_of_pages)
{
f0109004:	55                   	push   %ebp
f0109005:	89 e5                	mov    %esp,%ebp
f0109007:	83 ec 08             	sub    $0x8,%esp
	panic("cut_paste_pages() is not implemented yet...!!");
f010900a:	83 ec 04             	sub    $0x4,%esp
f010900d:	68 40 34 13 f0       	push   $0xf0133440
f0109012:	6a 1f                	push   $0x1f
f0109014:	68 6e 34 13 f0       	push   $0xf013346e
f0109019:	e8 92 71 ff ff       	call   f01001b0 <_panic>

f010901e <copy_paste_chunk>:
//	Otherwise, just copy!
//		1. WRITABLE permission
//		2. USER/SUPERVISOR permission must be SAME as the one of the source
//	The given range(s) may be not aligned on 4 KB
int copy_paste_chunk(uint32* page_directory, uint32 source_va, uint32 dest_va, uint32 size)
{
f010901e:	55                   	push   %ebp
f010901f:	89 e5                	mov    %esp,%ebp
f0109021:	83 ec 08             	sub    $0x8,%esp
	panic("copy_paste_chunk() is not implemented yet...!!");
f0109024:	83 ec 04             	sub    $0x4,%esp
f0109027:	68 8c 34 13 f0       	push   $0xf013348c
f010902c:	6a 32                	push   $0x32
f010902e:	68 6e 34 13 f0       	push   $0xf013346e
f0109033:	e8 78 71 ff ff       	call   f01001b0 <_panic>

f0109038 <share_chunk>:
//	It should set the permissions of the second range by the given perms
//	If ANY of the destination pages exists, deny the entire process and return -1. Otherwise, share the required range and return 0
//	If the page table at any destination page in the range is not exist, it should create it
//	The given range(s) may be not aligned on 4 KB
int share_chunk(uint32* page_directory, uint32 source_va,uint32 dest_va, uint32 size, uint32 perms)
{
f0109038:	55                   	push   %ebp
f0109039:	89 e5                	mov    %esp,%ebp
f010903b:	83 ec 08             	sub    $0x8,%esp
	panic("share_chunk() is not implemented yet...!!");
f010903e:	83 ec 04             	sub    $0x4,%esp
f0109041:	68 bc 34 13 f0       	push   $0xf01334bc
f0109046:	6a 41                	push   $0x41
f0109048:	68 6e 34 13 f0       	push   $0xf013346e
f010904d:	e8 5e 71 ff ff       	call   f01001b0 <_panic>

f0109052 <allocate_chunk>:
//This function should allocate the given virtual range [<va>, <va> + <size>) in the given address space  <page_directory> with the given permissions <perms>.
//	If ANY of the destination pages exists, deny the entire process and return -1. Otherwise, allocate the required range and return 0
//	If the page table at any destination page in the range is not exist, it should create it
//	Allocation should be aligned on page boundary. However, the given range may be not aligned.
int allocate_chunk(uint32* page_directory, uint32 va, uint32 size, uint32 perms)
{
f0109052:	55                   	push   %ebp
f0109053:	89 e5                	mov    %esp,%ebp
f0109055:	83 ec 08             	sub    $0x8,%esp
	panic("allocate_chunk() is not implemented yet...!!");
f0109058:	83 ec 04             	sub    $0x4,%esp
f010905b:	68 e8 34 13 f0       	push   $0xf01334e8
f0109060:	6a 4e                	push   $0x4e
f0109062:	68 6e 34 13 f0       	push   $0xf013346e
f0109067:	e8 44 71 ff ff       	call   f01001b0 <_panic>

f010906c <calculate_allocated_space>:

//=====================================
// 5) CALCULATE ALLOCATED SPACE IN RAM:
//=====================================
void calculate_allocated_space(uint32* page_directory, uint32 sva, uint32 eva, uint32 *num_tables, uint32 *num_pages)
{
f010906c:	55                   	push   %ebp
f010906d:	89 e5                	mov    %esp,%ebp
f010906f:	83 ec 08             	sub    $0x8,%esp
	panic("calculate_allocated_space() is not implemented yet...!!");
f0109072:	83 ec 04             	sub    $0x4,%esp
f0109075:	68 18 35 13 f0       	push   $0xf0133518
f010907a:	6a 57                	push   $0x57
f010907c:	68 6e 34 13 f0       	push   $0xf013346e
f0109081:	e8 2a 71 ff ff       	call   f01001b0 <_panic>

f0109086 <calculate_required_frames>:
//=====================================
//This function should calculate the required number of pages for allocating and mapping the given range [start va, start va + size) (either for the pages themselves or for the page tables required for mapping)
//	Pages and/or page tables that are already exist in the range SHOULD NOT be counted.
//	The given range(s) may be not aligned on 4 KB
uint32 calculate_required_frames(uint32* page_directory, uint32 sva, uint32 size)
{
f0109086:	55                   	push   %ebp
f0109087:	89 e5                	mov    %esp,%ebp
f0109089:	83 ec 08             	sub    $0x8,%esp
	panic("calculate_required_frames() is not implemented yet...!!");
f010908c:	83 ec 04             	sub    $0x4,%esp
f010908f:	68 50 35 13 f0       	push   $0xf0133550
f0109094:	6a 63                	push   $0x63
f0109096:	68 6e 34 13 f0       	push   $0xf013346e
f010909b:	e8 10 71 ff ff       	call   f01001b0 <_panic>

f01090a0 <allocate_user_mem>:

//=====================================
// 1) ALLOCATE USER MEMORY:
//=====================================
void allocate_user_mem(struct Env* e, uint32 virtual_address, uint32 size)
{
f01090a0:	55                   	push   %ebp
f01090a1:	89 e5                	mov    %esp,%ebp
f01090a3:	83 ec 08             	sub    $0x8,%esp
	/*====================================*/
	/*Remove this line before start coding*/
	inctst();
f01090a6:	e8 21 50 02 00       	call   f012e0cc <inctst>
	return;
f01090ab:	90                   	nop
	/*====================================*/

	//TODO: [PROJECT'23.MS2 - #10] [2] USER HEAP - allocate_user_mem() [Kernel Side]
	// Write your code here, remove the panic and write your code
	panic("allocate_user_mem() is not implemented yet...!!");
}
f01090ac:	c9                   	leave  
f01090ad:	c3                   	ret    

f01090ae <free_user_mem>:

//=====================================
// 2) FREE USER MEMORY:
//=====================================
void free_user_mem(struct Env* e, uint32 virtual_address, uint32 size)
{
f01090ae:	55                   	push   %ebp
f01090af:	89 e5                	mov    %esp,%ebp
f01090b1:	83 ec 08             	sub    $0x8,%esp
	/*====================================*/
	/*Remove this line before start coding*/
	inctst();
f01090b4:	e8 13 50 02 00       	call   f012e0cc <inctst>
	return;
f01090b9:	90                   	nop
	/*====================================*/

	//TODO: [PROJECT'23.MS2 - #12] [2] USER HEAP - free_user_mem() [Kernel Side]
	// Write your code here, remove the panic and write your code
	panic("free_user_mem() is not implemented yet...!!");
}
f01090ba:	c9                   	leave  
f01090bb:	c3                   	ret    

f01090bc <__free_user_mem_with_buffering>:

//=====================================
// 2) FREE USER MEMORY (BUFFERING):
//=====================================
void __free_user_mem_with_buffering(struct Env* e, uint32 virtual_address, uint32 size)
{
f01090bc:	55                   	push   %ebp
f01090bd:	89 e5                	mov    %esp,%ebp
f01090bf:	83 ec 08             	sub    $0x8,%esp
	// your code is here, remove the panic and write your code
	panic("__free_user_mem_with_buffering() is not implemented yet...!!");
f01090c2:	83 ec 04             	sub    $0x4,%esp
f01090c5:	68 88 35 13 f0       	push   $0xf0133588
f01090ca:	68 99 00 00 00       	push   $0x99
f01090cf:	68 6e 34 13 f0       	push   $0xf013346e
f01090d4:	e8 d7 70 ff ff       	call   f01001b0 <_panic>

f01090d9 <move_user_mem>:

//=====================================
// 3) MOVE USER MEMORY:
//=====================================
void move_user_mem(struct Env* e, uint32 src_virtual_address, uint32 dst_virtual_address, uint32 size)
{
f01090d9:	55                   	push   %ebp
f01090da:	89 e5                	mov    %esp,%ebp
f01090dc:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'23.MS2 - BONUS] [2] USER HEAP - move_user_mem() [Kernel Side]
	//your code is here, remove the panic and write your code
	panic("move_user_mem() is not implemented yet...!!");
f01090df:	83 ec 04             	sub    $0x4,%esp
f01090e2:	68 c8 35 13 f0       	push   $0xf01335c8
f01090e7:	68 a3 00 00 00       	push   $0xa3
f01090ec:	68 6e 34 13 f0       	push   $0xf013346e
f01090f1:	e8 ba 70 ff ff       	call   f01001b0 <_panic>

f01090f6 <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f01090f6:	55                   	push   %ebp
f01090f7:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f01090f9:	8b 45 08             	mov    0x8(%ebp),%eax
f01090fc:	8b 15 10 ce 2b f0    	mov    0xf02bce10,%edx
f0109102:	29 d0                	sub    %edx,%eax
f0109104:	c1 f8 02             	sar    $0x2,%eax
f0109107:	89 c2                	mov    %eax,%edx
f0109109:	89 d0                	mov    %edx,%eax
f010910b:	c1 e0 03             	shl    $0x3,%eax
f010910e:	01 d0                	add    %edx,%eax
f0109110:	c1 e0 03             	shl    $0x3,%eax
f0109113:	01 d0                	add    %edx,%eax
f0109115:	c1 e0 03             	shl    $0x3,%eax
f0109118:	01 d0                	add    %edx,%eax
f010911a:	c1 e0 03             	shl    $0x3,%eax
f010911d:	01 d0                	add    %edx,%eax
f010911f:	89 c1                	mov    %eax,%ecx
f0109121:	c1 e1 0f             	shl    $0xf,%ecx
f0109124:	01 c8                	add    %ecx,%eax
f0109126:	c1 e0 03             	shl    $0x3,%eax
f0109129:	01 d0                	add    %edx,%eax
f010912b:	f7 d8                	neg    %eax
}
f010912d:	5d                   	pop    %ebp
f010912e:	c3                   	ret    

f010912f <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f010912f:	55                   	push   %ebp
f0109130:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f0109132:	ff 75 08             	pushl  0x8(%ebp)
f0109135:	e8 bc ff ff ff       	call   f01090f6 <to_frame_number>
f010913a:	83 c4 04             	add    $0x4,%esp
f010913d:	c1 e0 0c             	shl    $0xc,%eax
}
f0109140:	c9                   	leave  
f0109141:	c3                   	ret    

f0109142 <env_create>:
//===============================
// 1) CREATE NEW ENV & LOAD IT:
//===============================
// Allocates a new env and loads the named user program into it.
struct Env* env_create(char* user_program_name, unsigned int page_WS_size, unsigned int LRU_second_list_size, unsigned int percent_WS_pages_to_remove)
{
f0109142:	55                   	push   %ebp
f0109143:	89 e5                	mov    %esp,%ebp
f0109145:	57                   	push   %edi
f0109146:	56                   	push   %esi
f0109147:	53                   	push   %ebx
f0109148:	81 ec fc 00 00 00    	sub    $0xfc,%esp
	//[1] get pointer to the start of the "user_program_name" program in memory
	// Hint: use "get_user_program_info" function,
	// you should set the following "ptr_program_start" by the start address of the user program
	uint8* ptr_program_start = 0;
f010914e:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)

	struct UserProgramInfo* ptr_user_program_info = get_user_program_info(user_program_name);
f0109155:	83 ec 0c             	sub    $0xc,%esp
f0109158:	ff 75 08             	pushl  0x8(%ebp)
f010915b:	e8 df 21 00 00       	call   f010b33f <get_user_program_info>
f0109160:	83 c4 10             	add    $0x10,%esp
f0109163:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if(ptr_user_program_info == 0) return NULL;
f0109166:	83 7d b4 00          	cmpl   $0x0,-0x4c(%ebp)
f010916a:	75 0a                	jne    f0109176 <env_create+0x34>
f010916c:	b8 00 00 00 00       	mov    $0x0,%eax
f0109171:	e9 45 0c 00 00       	jmp    f0109dbb <env_create+0xc79>
	ptr_program_start = ptr_user_program_info->ptr_start ;
f0109176:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0109179:	8b 40 08             	mov    0x8(%eax),%eax
f010917c:	89 45 b8             	mov    %eax,-0x48(%ebp)


	//[2] allocate new environment, (from the free environment list)
	//if there's no one, return NULL
	// Hint: use "allocate_environment" function
	struct Env* e = NULL;
f010917f:	c7 85 40 ff ff ff 00 	movl   $0x0,-0xc0(%ebp)
f0109186:	00 00 00 
	if(allocate_environment(&e) < 0)
f0109189:	83 ec 0c             	sub    $0xc,%esp
f010918c:	8d 85 40 ff ff ff    	lea    -0xc0(%ebp),%eax
f0109192:	50                   	push   %eax
f0109193:	e8 aa 0f 00 00       	call   f010a142 <allocate_environment>
f0109198:	83 c4 10             	add    $0x10,%esp
f010919b:	85 c0                	test   %eax,%eax
f010919d:	79 0a                	jns    f01091a9 <env_create+0x67>
	{
		return 0;
f010919f:	b8 00 00 00 00       	mov    $0x0,%eax
f01091a4:	e9 12 0c 00 00       	jmp    f0109dbb <env_create+0xc79>
	}

	//[2.5 - 2012] Set program name inside the environment
	//e->prog_name = ptr_user_program_info->name ;
	//2017: changed to fixed size array to be abale to access it from user side
	if (strlen(ptr_user_program_info->name) < PROGNAMELEN)
f01091a9:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01091ac:	8b 00                	mov    (%eax),%eax
f01091ae:	83 ec 0c             	sub    $0xc,%esp
f01091b1:	50                   	push   %eax
f01091b2:	e8 c1 62 02 00       	call   f012f478 <strlen>
f01091b7:	83 c4 10             	add    $0x10,%esp
f01091ba:	83 f8 3f             	cmp    $0x3f,%eax
f01091bd:	7f 1d                	jg     f01091dc <env_create+0x9a>
		strcpy(e->prog_name, ptr_user_program_info->name);
f01091bf:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01091c2:	8b 00                	mov    (%eax),%eax
f01091c4:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f01091ca:	83 c2 5c             	add    $0x5c,%edx
f01091cd:	83 ec 08             	sub    $0x8,%esp
f01091d0:	50                   	push   %eax
f01091d1:	52                   	push   %edx
f01091d2:	e8 f0 62 02 00       	call   f012f4c7 <strcpy>
f01091d7:	83 c4 10             	add    $0x10,%esp
f01091da:	eb 1d                	jmp    f01091f9 <env_create+0xb7>
	else
		strncpy(e->prog_name, ptr_user_program_info->name, PROGNAMELEN-1);
f01091dc:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01091df:	8b 00                	mov    (%eax),%eax
f01091e1:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f01091e7:	83 c2 5c             	add    $0x5c,%edx
f01091ea:	83 ec 04             	sub    $0x4,%esp
f01091ed:	6a 3f                	push   $0x3f
f01091ef:	50                   	push   %eax
f01091f0:	52                   	push   %edx
f01091f1:	e8 ff 62 02 00       	call   f012f4f5 <strncpy>
f01091f6:	83 c4 10             	add    $0x10,%esp
		phys_user_page_directory = kheap_physical_address((uint32)ptr_user_page_directory);
	}
#else
	{
		int r;
		struct FrameInfo *p = NULL;
f01091f9:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0109200:	00 00 00 

		allocate_frame(&p) ;
f0109203:	83 ec 0c             	sub    $0xc,%esp
f0109206:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f010920c:	50                   	push   %eax
f010920d:	e8 13 e1 ff ff       	call   f0107325 <allocate_frame>
f0109212:	83 c4 10             	add    $0x10,%esp
		p->references = 1;
f0109215:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f010921b:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)

		ptr_user_page_directory = STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(p));
f0109221:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0109227:	83 ec 0c             	sub    $0xc,%esp
f010922a:	50                   	push   %eax
f010922b:	e8 ff fe ff ff       	call   f010912f <to_physical_address>
f0109230:	83 c4 10             	add    $0x10,%esp
f0109233:	89 45 b0             	mov    %eax,-0x50(%ebp)
f0109236:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0109239:	c1 e8 0c             	shr    $0xc,%eax
f010923c:	89 45 ac             	mov    %eax,-0x54(%ebp)
f010923f:	a1 d0 cd 2b f0       	mov    0xf02bcdd0,%eax
f0109244:	39 45 ac             	cmp    %eax,-0x54(%ebp)
f0109247:	72 17                	jb     f0109260 <env_create+0x11e>
f0109249:	ff 75 b0             	pushl  -0x50(%ebp)
f010924c:	68 f4 35 13 f0       	push   $0xf01335f4
f0109251:	68 8a 00 00 00       	push   $0x8a
f0109256:	68 23 36 13 f0       	push   $0xf0133623
f010925b:	e8 50 6f ff ff       	call   f01001b0 <_panic>
f0109260:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0109263:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0109268:	89 45 a8             	mov    %eax,-0x58(%ebp)
		phys_user_page_directory = to_physical_address(p);
f010926b:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0109271:	83 ec 0c             	sub    $0xc,%esp
f0109274:	50                   	push   %eax
f0109275:	e8 b5 fe ff ff       	call   f010912f <to_physical_address>
f010927a:	83 c4 10             	add    $0x10,%esp
f010927d:	89 45 a4             	mov    %eax,-0x5c(%ebp)
#endif
	//[4] initialize the new environment by the virtual address of the page directory
	// Hint: use "initialize_environment" function

	//2016
	e->page_WS_max_size = page_WS_size;
f0109280:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109286:	8b 55 0c             	mov    0xc(%ebp),%edx
f0109289:	89 90 7c d5 01 00    	mov    %edx,0x1d57c(%eax)

	//2020
	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f010928f:	83 ec 0c             	sub    $0xc,%esp
f0109292:	6a 02                	push   $0x2
f0109294:	e8 22 4a 00 00       	call   f010dcbb <isPageReplacmentAlgorithmLRU>
f0109299:	83 c4 10             	add    $0x10,%esp
f010929c:	85 c0                	test   %eax,%eax
f010929e:	74 21                	je     f01092c1 <env_create+0x17f>
	{
		e->SecondListSize = LRU_second_list_size;
f01092a0:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01092a6:	8b 55 10             	mov    0x10(%ebp),%edx
f01092a9:	89 90 68 da 01 00    	mov    %edx,0x1da68(%eax)
		e->ActiveListSize = page_WS_size - LRU_second_list_size;
f01092af:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01092b5:	8b 55 0c             	mov    0xc(%ebp),%edx
f01092b8:	2b 55 10             	sub    0x10(%ebp),%edx
f01092bb:	89 90 64 da 01 00    	mov    %edx,0x1da64(%eax)
	}

	//2018
	if (percent_WS_pages_to_remove == 0)	// If not entered as input, 0 as default value
f01092c1:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
f01092c5:	75 12                	jne    f01092d9 <env_create+0x197>
		e->percentage_of_WS_pages_to_be_removed = DEFAULT_PERCENT_OF_PAGE_WS_TO_REMOVE;
f01092c7:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01092cd:	c7 80 70 da 01 00 0a 	movl   $0xa,0x1da70(%eax)
f01092d4:	00 00 00 
f01092d7:	eb 0f                	jmp    f01092e8 <env_create+0x1a6>
	else
		e->percentage_of_WS_pages_to_be_removed = percent_WS_pages_to_remove;
f01092d9:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01092df:	8b 55 14             	mov    0x14(%ebp),%edx
f01092e2:	89 90 70 da 01 00    	mov    %edx,0x1da70(%eax)

	initialize_environment(e, ptr_user_page_directory, phys_user_page_directory);
f01092e8:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01092ee:	83 ec 04             	sub    $0x4,%esp
f01092f1:	ff 75 a4             	pushl  -0x5c(%ebp)
f01092f4:	ff 75 a8             	pushl  -0x58(%ebp)
f01092f7:	50                   	push   %eax
f01092f8:	e8 95 16 00 00       	call   f010a992 <initialize_environment>
f01092fd:	83 c4 10             	add    $0x10,%esp

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f0109300:	0f 20 d8             	mov    %cr3,%eax
f0109303:	89 45 98             	mov    %eax,-0x68(%ebp)
	return val;
f0109306:	8b 45 98             	mov    -0x68(%ebp),%eax
	// 	usually size_in_file < or = size_in_memory
	//	4- uint8 *virtual_address: start virtual address that this segment should be copied to it

	//[6] switch to user page directory
	// Hint: use rcr3() and lcr3()
	uint32 kern_phys_pgdir = rcr3() ;
f0109309:	89 45 9c             	mov    %eax,-0x64(%ebp)
	lcr3(e->env_cr3) ;
f010930c:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109312:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f0109318:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f010931e:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0109324:	0f 22 d8             	mov    %eax,%cr3

	//[7] load each program segment into user virtual space
	struct ProgramSegment* seg = NULL;  //use inside PROGRAM_SEGMENT_FOREACH as current segment information
f0109327:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	int segment_counter=0;
f010932e:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	uint32 remaining_ws_pages = (e->page_WS_max_size)-1; // we are reserving 1 page of WS for the stack that will be allocated just before the end of this function
f0109335:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010933b:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0109341:	48                   	dec    %eax
f0109342:	89 45 dc             	mov    %eax,-0x24(%ebp)
	uint32 lastTableNumber=0xffffffff;
f0109345:	c7 85 3c ff ff ff ff 	movl   $0xffffffff,-0xc4(%ebp)
f010934c:	ff ff ff 

	PROGRAM_SEGMENT_FOREACH(seg, ptr_program_start)
f010934f:	8d 85 f8 fe ff ff    	lea    -0x108(%ebp),%eax
f0109355:	83 ec 08             	sub    $0x8,%esp
f0109358:	ff 75 b8             	pushl  -0x48(%ebp)
f010935b:	50                   	push   %eax
f010935c:	e8 9a 1d 00 00       	call   f010b0fb <PROGRAM_SEGMENT_FIRST>
f0109361:	83 c4 0c             	add    $0xc,%esp
f0109364:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f010936a:	8d 95 f8 fe ff ff    	lea    -0x108(%ebp),%edx
f0109370:	b9 05 00 00 00       	mov    $0x5,%ecx
f0109375:	89 c7                	mov    %eax,%edi
f0109377:	89 d6                	mov    %edx,%esi
f0109379:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f010937b:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f0109381:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0109384:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0109387:	8b 40 10             	mov    0x10(%eax),%eax
f010938a:	83 f8 ff             	cmp    $0xffffffff,%eax
f010938d:	75 07                	jne    f0109396 <env_create+0x254>
f010938f:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f0109396:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0109399:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010939c:	e9 24 03 00 00       	jmp    f01096c5 <env_create+0x583>
	{
		segment_counter++;
f01093a1:	ff 45 e0             	incl   -0x20(%ebp)
		LOG_STRING("===============================================================================");
		LOG_STATMENT(cprintf("SEGMENT #%d, size_in_file = %d, size_in_memory= %d, dest va = %x",segment_counter,seg->size_in_file,
				seg->size_in_memory, seg->virtual_address));
		LOG_STRING("===============================================================================");

		uint32 allocated_pages=0;
f01093a4:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01093ab:	00 00 00 
		program_segment_alloc_map_copy_workingset(e, seg, &allocated_pages, remaining_ws_pages, &lastTableNumber);
f01093ae:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01093b4:	83 ec 0c             	sub    $0xc,%esp
f01093b7:	8d 95 3c ff ff ff    	lea    -0xc4(%ebp),%edx
f01093bd:	52                   	push   %edx
f01093be:	ff 75 dc             	pushl  -0x24(%ebp)
f01093c1:	8d 95 20 ff ff ff    	lea    -0xe0(%ebp),%edx
f01093c7:	52                   	push   %edx
f01093c8:	ff 75 e4             	pushl  -0x1c(%ebp)
f01093cb:	50                   	push   %eax
f01093cc:	e8 2f 0e 00 00       	call   f010a200 <program_segment_alloc_map_copy_workingset>
f01093d1:	83 c4 20             	add    $0x20,%esp

		remaining_ws_pages -= allocated_pages;
f01093d4:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01093da:	29 45 dc             	sub    %eax,-0x24(%ebp)
		LOG_STATMENT(cprintf("SEGMENT: allocated pages in WS = %d",allocated_pages));
		LOG_STATMENT(cprintf("SEGMENT: remaining WS pages after allocation = %d",remaining_ws_pages));


		///[1] temporary initialize 1st page in memory then writing it on page file
		uint32 dataSrc_va = (uint32) seg->ptr_start;
f01093dd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01093e0:	8b 00                	mov    (%eax),%eax
f01093e2:	89 45 94             	mov    %eax,-0x6c(%ebp)
		uint32 seg_va = (uint32) seg->virtual_address ;
f01093e5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01093e8:	8b 40 0c             	mov    0xc(%eax),%eax
f01093eb:	89 45 90             	mov    %eax,-0x70(%ebp)

		uint32 start_first_page = ROUNDDOWN(seg_va , PAGE_SIZE);
f01093ee:	8b 45 90             	mov    -0x70(%ebp),%eax
f01093f1:	89 45 8c             	mov    %eax,-0x74(%ebp)
f01093f4:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01093f7:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01093fc:	89 45 88             	mov    %eax,-0x78(%ebp)
		uint32 end_first_page = ROUNDUP(seg_va , PAGE_SIZE);
f01093ff:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f0109406:	8b 55 90             	mov    -0x70(%ebp),%edx
f0109409:	8b 45 84             	mov    -0x7c(%ebp),%eax
f010940c:	01 d0                	add    %edx,%eax
f010940e:	48                   	dec    %eax
f010940f:	89 45 80             	mov    %eax,-0x80(%ebp)
f0109412:	8b 45 80             	mov    -0x80(%ebp),%eax
f0109415:	ba 00 00 00 00       	mov    $0x0,%edx
f010941a:	f7 75 84             	divl   -0x7c(%ebp)
f010941d:	8b 45 80             	mov    -0x80(%ebp),%eax
f0109420:	29 d0                	sub    %edx,%eax
f0109422:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
		uint32 offset_first_page = seg_va  - start_first_page ;
f0109428:	8b 45 90             	mov    -0x70(%ebp),%eax
f010942b:	2b 45 88             	sub    -0x78(%ebp),%eax
f010942e:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)

		memset(ptr_temp_page , 0, PAGE_SIZE);
f0109434:	a1 48 ce 2b f0       	mov    0xf02bce48,%eax
f0109439:	83 ec 04             	sub    $0x4,%esp
f010943c:	68 00 10 00 00       	push   $0x1000
f0109441:	6a 00                	push   $0x0
f0109443:	50                   	push   %eax
f0109444:	e8 1d 62 02 00       	call   f012f666 <memset>
f0109449:	83 c4 10             	add    $0x10,%esp
		uint8 *src_ptr =  (uint8*) dataSrc_va;
f010944c:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010944f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		uint8 *dst_ptr =  (uint8*) (ptr_temp_page + offset_first_page);
f0109452:	8b 15 48 ce 2b f0    	mov    0xf02bce48,%edx
f0109458:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f010945e:	01 d0                	add    %edx,%eax
f0109460:	89 45 d0             	mov    %eax,-0x30(%ebp)
		int i;
		for (i = seg_va ; i < end_first_page ; i++, src_ptr++,dst_ptr++ )
f0109463:	8b 45 90             	mov    -0x70(%ebp),%eax
f0109466:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0109469:	eb 13                	jmp    f010947e <env_create+0x33c>
		{
			*dst_ptr = *src_ptr ;
f010946b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010946e:	8a 10                	mov    (%eax),%dl
f0109470:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0109473:	88 10                	mov    %dl,(%eax)

		memset(ptr_temp_page , 0, PAGE_SIZE);
		uint8 *src_ptr =  (uint8*) dataSrc_va;
		uint8 *dst_ptr =  (uint8*) (ptr_temp_page + offset_first_page);
		int i;
		for (i = seg_va ; i < end_first_page ; i++, src_ptr++,dst_ptr++ )
f0109475:	ff 45 cc             	incl   -0x34(%ebp)
f0109478:	ff 45 d4             	incl   -0x2c(%ebp)
f010947b:	ff 45 d0             	incl   -0x30(%ebp)
f010947e:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0109481:	3b 85 7c ff ff ff    	cmp    -0x84(%ebp),%eax
f0109487:	72 e2                	jb     f010946b <env_create+0x329>
		{
			*dst_ptr = *src_ptr ;
		}

		if (pf_add_env_page(e, start_first_page, ptr_temp_page) == E_NO_PAGE_FILE_SPACE)
f0109489:	8b 15 48 ce 2b f0    	mov    0xf02bce48,%edx
f010948f:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109495:	83 ec 04             	sub    $0x4,%esp
f0109498:	52                   	push   %edx
f0109499:	ff 75 88             	pushl  -0x78(%ebp)
f010949c:	50                   	push   %eax
f010949d:	e8 29 aa ff ff       	call   f0103ecb <pf_add_env_page>
f01094a2:	83 c4 10             	add    $0x10,%esp
f01094a5:	83 f8 f8             	cmp    $0xfffffff8,%eax
f01094a8:	75 17                	jne    f01094c1 <env_create+0x37f>
			panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f01094aa:	83 ec 04             	sub    $0x4,%esp
f01094ad:	68 40 36 13 f0       	push   $0xf0133640
f01094b2:	68 de 00 00 00       	push   $0xde
f01094b7:	68 23 36 13 f0       	push   $0xf0133623
f01094bc:	e8 ef 6c ff ff       	call   f01001b0 <_panic>
		//LOG_STRING(" -------------------- PAGE FILE: 1st page is written");


		///[2] Start writing the segment ,from 2nd page until before last page, to page file ...

		uint32 start_last_page = ROUNDDOWN(seg_va  + seg->size_in_file, PAGE_SIZE) ;
f01094c1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01094c4:	8b 50 04             	mov    0x4(%eax),%edx
f01094c7:	8b 45 90             	mov    -0x70(%ebp),%eax
f01094ca:	01 d0                	add    %edx,%eax
f01094cc:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f01094d2:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01094d8:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01094dd:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
		uint32 end_last_page = seg_va  + seg->size_in_file;
f01094e3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01094e6:	8b 50 04             	mov    0x4(%eax),%edx
f01094e9:	8b 45 90             	mov    -0x70(%ebp),%eax
f01094ec:	01 d0                	add    %edx,%eax
f01094ee:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)

		for (i = end_first_page ; i < start_last_page ; i+= PAGE_SIZE, src_ptr+= PAGE_SIZE)
f01094f4:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01094fa:	89 45 cc             	mov    %eax,-0x34(%ebp)
f01094fd:	eb 43                	jmp    f0109542 <env_create+0x400>
		{
			if (pf_add_env_page(e, i, src_ptr) == E_NO_PAGE_FILE_SPACE)
f01094ff:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0109502:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109508:	83 ec 04             	sub    $0x4,%esp
f010950b:	ff 75 d4             	pushl  -0x2c(%ebp)
f010950e:	52                   	push   %edx
f010950f:	50                   	push   %eax
f0109510:	e8 b6 a9 ff ff       	call   f0103ecb <pf_add_env_page>
f0109515:	83 c4 10             	add    $0x10,%esp
f0109518:	83 f8 f8             	cmp    $0xfffffff8,%eax
f010951b:	75 17                	jne    f0109534 <env_create+0x3f2>
				panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f010951d:	83 ec 04             	sub    $0x4,%esp
f0109520:	68 40 36 13 f0       	push   $0xf0133640
f0109525:	68 eb 00 00 00       	push   $0xeb
f010952a:	68 23 36 13 f0       	push   $0xf0133623
f010952f:	e8 7c 6c ff ff       	call   f01001b0 <_panic>
		///[2] Start writing the segment ,from 2nd page until before last page, to page file ...

		uint32 start_last_page = ROUNDDOWN(seg_va  + seg->size_in_file, PAGE_SIZE) ;
		uint32 end_last_page = seg_va  + seg->size_in_file;

		for (i = end_first_page ; i < start_last_page ; i+= PAGE_SIZE, src_ptr+= PAGE_SIZE)
f0109534:	81 45 cc 00 10 00 00 	addl   $0x1000,-0x34(%ebp)
f010953b:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
f0109542:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0109545:	3b 85 70 ff ff ff    	cmp    -0x90(%ebp),%eax
f010954b:	72 b2                	jb     f01094ff <env_create+0x3bd>
		}
		//LOG_STRING(" -------------------- PAGE FILE: 2nd page --> before last page are written");

		///[3] temporary initialize last page in memory then writing it on page file

		dst_ptr =  (uint8*) ptr_temp_page;
f010954d:	a1 48 ce 2b f0       	mov    0xf02bce48,%eax
f0109552:	89 45 d0             	mov    %eax,-0x30(%ebp)
		memset(dst_ptr, 0, PAGE_SIZE);
f0109555:	83 ec 04             	sub    $0x4,%esp
f0109558:	68 00 10 00 00       	push   $0x1000
f010955d:	6a 00                	push   $0x0
f010955f:	ff 75 d0             	pushl  -0x30(%ebp)
f0109562:	e8 ff 60 02 00       	call   f012f666 <memset>
f0109567:	83 c4 10             	add    $0x10,%esp

		for (i = start_last_page ; i < end_last_page ; i++, src_ptr++,dst_ptr++ )
f010956a:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0109570:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0109573:	eb 13                	jmp    f0109588 <env_create+0x446>
		{
			*dst_ptr = *src_ptr;
f0109575:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0109578:	8a 10                	mov    (%eax),%dl
f010957a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010957d:	88 10                	mov    %dl,(%eax)
		///[3] temporary initialize last page in memory then writing it on page file

		dst_ptr =  (uint8*) ptr_temp_page;
		memset(dst_ptr, 0, PAGE_SIZE);

		for (i = start_last_page ; i < end_last_page ; i++, src_ptr++,dst_ptr++ )
f010957f:	ff 45 cc             	incl   -0x34(%ebp)
f0109582:	ff 45 d4             	incl   -0x2c(%ebp)
f0109585:	ff 45 d0             	incl   -0x30(%ebp)
f0109588:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010958b:	3b 85 6c ff ff ff    	cmp    -0x94(%ebp),%eax
f0109591:	72 e2                	jb     f0109575 <env_create+0x433>
		{
			*dst_ptr = *src_ptr;
		}
		if (pf_add_env_page(e, start_last_page, ptr_temp_page) == E_NO_PAGE_FILE_SPACE)
f0109593:	8b 15 48 ce 2b f0    	mov    0xf02bce48,%edx
f0109599:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010959f:	83 ec 04             	sub    $0x4,%esp
f01095a2:	52                   	push   %edx
f01095a3:	ff b5 70 ff ff ff    	pushl  -0x90(%ebp)
f01095a9:	50                   	push   %eax
f01095aa:	e8 1c a9 ff ff       	call   f0103ecb <pf_add_env_page>
f01095af:	83 c4 10             	add    $0x10,%esp
f01095b2:	83 f8 f8             	cmp    $0xfffffff8,%eax
f01095b5:	75 17                	jne    f01095ce <env_create+0x48c>
			panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f01095b7:	83 ec 04             	sub    $0x4,%esp
f01095ba:	68 40 36 13 f0       	push   $0xf0133640
f01095bf:	68 fa 00 00 00       	push   $0xfa
f01095c4:	68 23 36 13 f0       	push   $0xf0133623
f01095c9:	e8 e2 6b ff ff       	call   f01001b0 <_panic>

		//LOG_STRING(" -------------------- PAGE FILE: last page is written");

		///[4] writing the remaining seg->size_in_memory pages to disk

		uint32 start_remaining_area = ROUNDUP(seg_va + seg->size_in_file,PAGE_SIZE) ;
f01095ce:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f01095d5:	10 00 00 
f01095d8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01095db:	8b 50 04             	mov    0x4(%eax),%edx
f01095de:	8b 45 90             	mov    -0x70(%ebp),%eax
f01095e1:	01 c2                	add    %eax,%edx
f01095e3:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01095e9:	01 d0                	add    %edx,%eax
f01095eb:	48                   	dec    %eax
f01095ec:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f01095f2:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01095f8:	ba 00 00 00 00       	mov    $0x0,%edx
f01095fd:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0109603:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0109609:	29 d0                	sub    %edx,%eax
f010960b:	89 45 c8             	mov    %eax,-0x38(%ebp)
		uint32 remainingLength = (seg_va + seg->size_in_memory) - start_remaining_area ;
f010960e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109611:	8b 50 08             	mov    0x8(%eax),%edx
f0109614:	8b 45 90             	mov    -0x70(%ebp),%eax
f0109617:	01 d0                	add    %edx,%eax
f0109619:	2b 45 c8             	sub    -0x38(%ebp),%eax
f010961c:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)

		for (i=0 ; i < ROUNDUP(remainingLength,PAGE_SIZE) ;i+= PAGE_SIZE, start_remaining_area += PAGE_SIZE)
f0109622:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f0109629:	eb 41                	jmp    f010966c <env_create+0x52a>
		{
			if (pf_add_empty_env_page(e, start_remaining_area, 1) == E_NO_PAGE_FILE_SPACE)
f010962b:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109631:	83 ec 04             	sub    $0x4,%esp
f0109634:	6a 01                	push   $0x1
f0109636:	ff 75 c8             	pushl  -0x38(%ebp)
f0109639:	50                   	push   %eax
f010963a:	e8 56 a7 ff ff       	call   f0103d95 <pf_add_empty_env_page>
f010963f:	83 c4 10             	add    $0x10,%esp
f0109642:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0109645:	75 17                	jne    f010965e <env_create+0x51c>
				panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f0109647:	83 ec 04             	sub    $0x4,%esp
f010964a:	68 40 36 13 f0       	push   $0xf0133640
f010964f:	68 07 01 00 00       	push   $0x107
f0109654:	68 23 36 13 f0       	push   $0xf0133623
f0109659:	e8 52 6b ff ff       	call   f01001b0 <_panic>
		///[4] writing the remaining seg->size_in_memory pages to disk

		uint32 start_remaining_area = ROUNDUP(seg_va + seg->size_in_file,PAGE_SIZE) ;
		uint32 remainingLength = (seg_va + seg->size_in_memory) - start_remaining_area ;

		for (i=0 ; i < ROUNDUP(remainingLength,PAGE_SIZE) ;i+= PAGE_SIZE, start_remaining_area += PAGE_SIZE)
f010965e:	81 45 cc 00 10 00 00 	addl   $0x1000,-0x34(%ebp)
f0109665:	81 45 c8 00 10 00 00 	addl   $0x1000,-0x38(%ebp)
f010966c:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f0109673:	10 00 00 
f0109676:	8b 95 60 ff ff ff    	mov    -0xa0(%ebp),%edx
f010967c:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0109682:	01 d0                	add    %edx,%eax
f0109684:	48                   	dec    %eax
f0109685:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f010968b:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0109691:	ba 00 00 00 00       	mov    $0x0,%edx
f0109696:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f010969c:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f01096a2:	29 d0                	sub    %edx,%eax
f01096a4:	89 c2                	mov    %eax,%edx
f01096a6:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01096a9:	39 c2                	cmp    %eax,%edx
f01096ab:	0f 87 7a ff ff ff    	ja     f010962b <env_create+0x4e9>
	struct ProgramSegment* seg = NULL;  //use inside PROGRAM_SEGMENT_FOREACH as current segment information
	int segment_counter=0;
	uint32 remaining_ws_pages = (e->page_WS_max_size)-1; // we are reserving 1 page of WS for the stack that will be allocated just before the end of this function
	uint32 lastTableNumber=0xffffffff;

	PROGRAM_SEGMENT_FOREACH(seg, ptr_program_start)
f01096b1:	83 ec 08             	sub    $0x8,%esp
f01096b4:	ff 75 b8             	pushl  -0x48(%ebp)
f01096b7:	ff 75 e4             	pushl  -0x1c(%ebp)
f01096ba:	e8 31 19 00 00       	call   f010aff0 <PROGRAM_SEGMENT_NEXT>
f01096bf:	83 c4 10             	add    $0x10,%esp
f01096c2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01096c5:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f01096c9:	0f 85 d2 fc ff ff    	jne    f01093a1 <env_create+0x25f>
		//So, get_page_table should return the existing table
		get_page_table(e->env_page_directory, virtual_address, &ptr_page_table);
		ptr_page_table[PTX(virtual_address)] &= (~PERM_MODIFIED);
	}
#else
	int i=0;
f01096cf:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
	for(;i<(e->page_WS_max_size); i++)
f01096d6:	e9 a7 00 00 00       	jmp    f0109782 <env_create+0x640>
	{
		if(e->ptr_pageWorkingSet[i].empty == 0)
f01096db:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f01096e1:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01096e4:	89 d0                	mov    %edx,%eax
f01096e6:	01 c0                	add    %eax,%eax
f01096e8:	01 d0                	add    %edx,%eax
f01096ea:	c1 e0 03             	shl    $0x3,%eax
f01096ed:	01 c8                	add    %ecx,%eax
f01096ef:	05 bc 00 00 00       	add    $0xbc,%eax
f01096f4:	8a 00                	mov    (%eax),%al
f01096f6:	84 c0                	test   %al,%al
f01096f8:	0f 85 81 00 00 00    	jne    f010977f <env_create+0x63d>
		{
			uint32 virtual_address = e->ptr_pageWorkingSet[i].virtual_address;
f01096fe:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f0109704:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0109707:	89 d0                	mov    %edx,%eax
f0109709:	01 c0                	add    %eax,%eax
f010970b:	01 d0                	add    %edx,%eax
f010970d:	c1 e0 03             	shl    $0x3,%eax
f0109710:	01 c8                	add    %ecx,%eax
f0109712:	05 b8 00 00 00       	add    $0xb8,%eax
f0109717:	8b 00                	mov    (%eax),%eax
f0109719:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
			uint32* ptr_page_table;

			//Here, page tables of all working set pages should be exist in memory
			//So, get_page_table should return the existing table
			get_page_table(e->env_page_directory, virtual_address, &ptr_page_table);
f010971f:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109725:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010972b:	83 ec 04             	sub    $0x4,%esp
f010972e:	8d 95 1c ff ff ff    	lea    -0xe4(%ebp),%edx
f0109734:	52                   	push   %edx
f0109735:	ff b5 54 ff ff ff    	pushl  -0xac(%ebp)
f010973b:	50                   	push   %eax
f010973c:	e8 a6 dd ff ff       	call   f01074e7 <get_page_table>
f0109741:	83 c4 10             	add    $0x10,%esp
			ptr_page_table[PTX(virtual_address)] &= (~PERM_MODIFIED);
f0109744:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f010974a:	8b 95 54 ff ff ff    	mov    -0xac(%ebp),%edx
f0109750:	c1 ea 0c             	shr    $0xc,%edx
f0109753:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0109759:	c1 e2 02             	shl    $0x2,%edx
f010975c:	01 d0                	add    %edx,%eax
f010975e:	8b 95 1c ff ff ff    	mov    -0xe4(%ebp),%edx
f0109764:	8b 8d 54 ff ff ff    	mov    -0xac(%ebp),%ecx
f010976a:	c1 e9 0c             	shr    $0xc,%ecx
f010976d:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
f0109773:	c1 e1 02             	shl    $0x2,%ecx
f0109776:	01 ca                	add    %ecx,%edx
f0109778:	8b 12                	mov    (%edx),%edx
f010977a:	83 e2 bf             	and    $0xffffffbf,%edx
f010977d:	89 10                	mov    %edx,(%eax)
		get_page_table(e->env_page_directory, virtual_address, &ptr_page_table);
		ptr_page_table[PTX(virtual_address)] &= (~PERM_MODIFIED);
	}
#else
	int i=0;
	for(;i<(e->page_WS_max_size); i++)
f010977f:	ff 45 c4             	incl   -0x3c(%ebp)
f0109782:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109788:	8b 90 7c d5 01 00    	mov    0x1d57c(%eax),%edx
f010978e:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0109791:	39 c2                	cmp    %eax,%edx
f0109793:	0f 87 42 ff ff ff    	ja     f01096db <env_create+0x599>
	//unsigned int * ptr = (unsigned int * )0x801084;
	//LOG_STATMENT(cprintf("contents at address %x=%x",0x801084, *ptr));

	//[8] now set the entry point of the environment
	//Hint: use set_environment_entry_point()
	set_environment_entry_point(e, ptr_user_program_info->ptr_start);
f0109799:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f010979c:	8b 50 08             	mov    0x8(%eax),%edx
f010979f:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01097a5:	83 ec 08             	sub    $0x8,%esp
f01097a8:	52                   	push   %edx
f01097a9:	50                   	push   %eax
f01097aa:	e8 01 18 00 00       	call   f010afb0 <set_environment_entry_point>
f01097af:	83 c4 10             	add    $0x10,%esp

	//[9] Allocate and map one page for the program's initial stack
	// at virtual address USTACKTOP - PAGE_SIZE.
	// we assume that the stack is counted in the environment working set

	e->initNumStackPages = 1;
f01097b2:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01097b8:	c7 80 a4 00 00 00 01 	movl   $0x1,0xa4(%eax)
f01097bf:	00 00 00 

	// map the allocated page
	uint32 ptr_user_stack_bottom = (USTACKTOP - 1*PAGE_SIZE);
f01097c2:	c7 85 50 ff ff ff 00 	movl   $0xeebfd000,-0xb0(%ebp)
f01097c9:	d0 bf ee 

	uint32 stackVa = USTACKTOP - PAGE_SIZE;
f01097cc:	c7 45 c0 00 d0 bf ee 	movl   $0xeebfd000,-0x40(%ebp)
	for(;stackVa >= ptr_user_stack_bottom; stackVa -= PAGE_SIZE)
f01097d3:	e9 3c 05 00 00       	jmp    f0109d14 <env_create+0xbd2>
	{
		struct FrameInfo *pp = NULL;
f01097d8:	c7 85 18 ff ff ff 00 	movl   $0x0,-0xe8(%ebp)
f01097df:	00 00 00 
		allocate_frame(&pp);
f01097e2:	83 ec 0c             	sub    $0xc,%esp
f01097e5:	8d 85 18 ff ff ff    	lea    -0xe8(%ebp),%eax
f01097eb:	50                   	push   %eax
f01097ec:	e8 34 db ff ff       	call   f0107325 <allocate_frame>
f01097f1:	83 c4 10             	add    $0x10,%esp

		loadtime_map_frame(e->env_page_directory, pp, stackVa, PERM_USER | PERM_WRITEABLE);
f01097f4:	8b 95 18 ff ff ff    	mov    -0xe8(%ebp),%edx
f01097fa:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109800:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0109806:	6a 06                	push   $0x6
f0109808:	ff 75 c0             	pushl  -0x40(%ebp)
f010980b:	52                   	push   %edx
f010980c:	50                   	push   %eax
f010980d:	e8 64 e0 ff ff       	call   f0107876 <loadtime_map_frame>
f0109812:	83 c4 10             	add    $0x10,%esp

		//initialize new page by 0's
		memset((void*)stackVa, 0, PAGE_SIZE);
f0109815:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0109818:	83 ec 04             	sub    $0x4,%esp
f010981b:	68 00 10 00 00       	push   $0x1000
f0109820:	6a 00                	push   $0x0
f0109822:	50                   	push   %eax
f0109823:	e8 3e 5e 02 00       	call   f012f666 <memset>
f0109828:	83 c4 10             	add    $0x10,%esp
			else
			{
				e->page_last_WS_element = NULL;
			}
#else
			env_page_ws_set_entry(e, e->page_last_WS_index, (uint32) stackVa) ;
f010982b:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109831:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f0109837:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010983d:	83 ec 04             	sub    $0x4,%esp
f0109840:	ff 75 c0             	pushl  -0x40(%ebp)
f0109843:	52                   	push   %edx
f0109844:	50                   	push   %eax
f0109845:	e8 3f ef ff ff       	call   f0108789 <env_page_ws_set_entry>
f010984a:	83 c4 10             	add    $0x10,%esp
			uint32 lastWSIndex = e->page_last_WS_index ++;
f010984d:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f0109853:	8b 82 78 d5 01 00    	mov    0x1d578(%edx),%eax
f0109859:	8d 48 01             	lea    0x1(%eax),%ecx
f010985c:	89 8a 78 d5 01 00    	mov    %ecx,0x1d578(%edx)
f0109862:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
			e->page_last_WS_index %= (e->page_WS_max_size);
f0109868:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f010986e:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109874:	8b 80 78 d5 01 00    	mov    0x1d578(%eax),%eax
f010987a:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f0109880:	8b 9a 7c d5 01 00    	mov    0x1d57c(%edx),%ebx
f0109886:	ba 00 00 00 00       	mov    $0x0,%edx
f010988b:	f7 f3                	div    %ebx
f010988d:	89 d0                	mov    %edx,%eax
f010988f:	89 81 78 d5 01 00    	mov    %eax,0x1d578(%ecx)
#endif
			//2020
			if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0109895:	83 ec 0c             	sub    $0xc,%esp
f0109898:	6a 02                	push   $0x2
f010989a:	e8 1c 44 00 00       	call   f010dcbb <isPageReplacmentAlgorithmLRU>
f010989f:	83 c4 10             	add    $0x10,%esp
f01098a2:	85 c0                	test   %eax,%eax
f01098a4:	0f 84 46 04 00 00    	je     f0109cf0 <env_create+0xbae>
				else
				{
					LIST_INSERT_HEAD(&(e->SecondList), wse);
				}
#else
				LIST_REMOVE(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[lastWSIndex]));
f01098aa:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f01098b0:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f01098b6:	89 d0                	mov    %edx,%eax
f01098b8:	01 c0                	add    %eax,%eax
f01098ba:	01 d0                	add    %edx,%eax
f01098bc:	c1 e0 03             	shl    $0x3,%eax
f01098bf:	05 b0 00 00 00       	add    $0xb0,%eax
f01098c4:	01 c8                	add    %ecx,%eax
f01098c6:	83 c0 08             	add    $0x8,%eax
f01098c9:	85 c0                	test   %eax,%eax
f01098cb:	75 17                	jne    f01098e4 <env_create+0x7a2>
f01098cd:	83 ec 04             	sub    $0x4,%esp
f01098d0:	68 85 36 13 f0       	push   $0xf0133685
f01098d5:	68 67 01 00 00       	push   $0x167
f01098da:	68 23 36 13 f0       	push   $0xf0133623
f01098df:	e8 cc 68 ff ff       	call   f01001b0 <_panic>
f01098e4:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f01098ea:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f01098f0:	89 d0                	mov    %edx,%eax
f01098f2:	01 c0                	add    %eax,%eax
f01098f4:	01 d0                	add    %edx,%eax
f01098f6:	c1 e0 03             	shl    $0x3,%eax
f01098f9:	01 c8                	add    %ecx,%eax
f01098fb:	05 c8 00 00 00       	add    $0xc8,%eax
f0109900:	8b 00                	mov    (%eax),%eax
f0109902:	85 c0                	test   %eax,%eax
f0109904:	74 41                	je     f0109947 <env_create+0x805>
f0109906:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f010990c:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109912:	89 d0                	mov    %edx,%eax
f0109914:	01 c0                	add    %eax,%eax
f0109916:	01 d0                	add    %edx,%eax
f0109918:	c1 e0 03             	shl    $0x3,%eax
f010991b:	01 c8                	add    %ecx,%eax
f010991d:	05 c8 00 00 00       	add    $0xc8,%eax
f0109922:	8b 10                	mov    (%eax),%edx
f0109924:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f010992a:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f0109930:	89 c8                	mov    %ecx,%eax
f0109932:	01 c0                	add    %eax,%eax
f0109934:	01 c8                	add    %ecx,%eax
f0109936:	c1 e0 03             	shl    $0x3,%eax
f0109939:	01 d8                	add    %ebx,%eax
f010993b:	05 cc 00 00 00       	add    $0xcc,%eax
f0109940:	8b 00                	mov    (%eax),%eax
f0109942:	89 42 14             	mov    %eax,0x14(%edx)
f0109945:	eb 2a                	jmp    f0109971 <env_create+0x82f>
f0109947:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f010994d:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f0109953:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f0109959:	89 c8                	mov    %ecx,%eax
f010995b:	01 c0                	add    %eax,%eax
f010995d:	01 c8                	add    %ecx,%eax
f010995f:	c1 e0 03             	shl    $0x3,%eax
f0109962:	01 d8                	add    %ebx,%eax
f0109964:	05 cc 00 00 00       	add    $0xcc,%eax
f0109969:	8b 00                	mov    (%eax),%eax
f010996b:	89 82 38 da 01 00    	mov    %eax,0x1da38(%edx)
f0109971:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f0109977:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f010997d:	89 d0                	mov    %edx,%eax
f010997f:	01 c0                	add    %eax,%eax
f0109981:	01 d0                	add    %edx,%eax
f0109983:	c1 e0 03             	shl    $0x3,%eax
f0109986:	01 c8                	add    %ecx,%eax
f0109988:	05 cc 00 00 00       	add    $0xcc,%eax
f010998d:	8b 00                	mov    (%eax),%eax
f010998f:	85 c0                	test   %eax,%eax
f0109991:	74 41                	je     f01099d4 <env_create+0x892>
f0109993:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f0109999:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f010999f:	89 d0                	mov    %edx,%eax
f01099a1:	01 c0                	add    %eax,%eax
f01099a3:	01 d0                	add    %edx,%eax
f01099a5:	c1 e0 03             	shl    $0x3,%eax
f01099a8:	01 c8                	add    %ecx,%eax
f01099aa:	05 cc 00 00 00       	add    $0xcc,%eax
f01099af:	8b 10                	mov    (%eax),%edx
f01099b1:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f01099b7:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f01099bd:	89 c8                	mov    %ecx,%eax
f01099bf:	01 c0                	add    %eax,%eax
f01099c1:	01 c8                	add    %ecx,%eax
f01099c3:	c1 e0 03             	shl    $0x3,%eax
f01099c6:	01 d8                	add    %ebx,%eax
f01099c8:	05 c8 00 00 00       	add    $0xc8,%eax
f01099cd:	8b 00                	mov    (%eax),%eax
f01099cf:	89 42 10             	mov    %eax,0x10(%edx)
f01099d2:	eb 2a                	jmp    f01099fe <env_create+0x8bc>
f01099d4:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f01099da:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f01099e0:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f01099e6:	89 c8                	mov    %ecx,%eax
f01099e8:	01 c0                	add    %eax,%eax
f01099ea:	01 c8                	add    %ecx,%eax
f01099ec:	c1 e0 03             	shl    $0x3,%eax
f01099ef:	01 d8                	add    %ebx,%eax
f01099f1:	05 c8 00 00 00       	add    $0xc8,%eax
f01099f6:	8b 00                	mov    (%eax),%eax
f01099f8:	89 82 34 da 01 00    	mov    %eax,0x1da34(%edx)
f01099fe:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f0109a04:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109a0a:	89 d0                	mov    %edx,%eax
f0109a0c:	01 c0                	add    %eax,%eax
f0109a0e:	01 d0                	add    %edx,%eax
f0109a10:	c1 e0 03             	shl    $0x3,%eax
f0109a13:	01 c8                	add    %ecx,%eax
f0109a15:	05 c8 00 00 00       	add    $0xc8,%eax
f0109a1a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0109a20:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f0109a26:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109a2c:	89 d0                	mov    %edx,%eax
f0109a2e:	01 c0                	add    %eax,%eax
f0109a30:	01 d0                	add    %edx,%eax
f0109a32:	c1 e0 03             	shl    $0x3,%eax
f0109a35:	01 c8                	add    %ecx,%eax
f0109a37:	05 cc 00 00 00       	add    $0xcc,%eax
f0109a3c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0109a42:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109a48:	8b 90 40 da 01 00    	mov    0x1da40(%eax),%edx
f0109a4e:	4a                   	dec    %edx
f0109a4f:	89 90 40 da 01 00    	mov    %edx,0x1da40(%eax)
				//Now: we are sure that at least the top page in the stack will be added to Active list
				//Since we left 1 empty location in the Active list when we loaded the program segments
				if (LIST_SIZE(&(e->ActiveList)) < e->ActiveListSize)
f0109a55:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109a5b:	8b 90 50 da 01 00    	mov    0x1da50(%eax),%edx
f0109a61:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109a67:	8b 80 64 da 01 00    	mov    0x1da64(%eax),%eax
f0109a6d:	39 c2                	cmp    %eax,%edx
f0109a6f:	0f 83 40 01 00 00    	jae    f0109bb5 <env_create+0xa73>
				{
					LIST_INSERT_HEAD(&(e->ActiveList), &(e->ptr_pageWorkingSet[lastWSIndex]));
f0109a75:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f0109a7b:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109a81:	89 d0                	mov    %edx,%eax
f0109a83:	01 c0                	add    %eax,%eax
f0109a85:	01 d0                	add    %edx,%eax
f0109a87:	c1 e0 03             	shl    $0x3,%eax
f0109a8a:	05 b0 00 00 00       	add    $0xb0,%eax
f0109a8f:	01 c8                	add    %ecx,%eax
f0109a91:	83 c0 08             	add    $0x8,%eax
f0109a94:	85 c0                	test   %eax,%eax
f0109a96:	75 17                	jne    f0109aaf <env_create+0x96d>
f0109a98:	83 ec 04             	sub    $0x4,%esp
f0109a9b:	68 a4 36 13 f0       	push   $0xf01336a4
f0109aa0:	68 6c 01 00 00       	push   $0x16c
f0109aa5:	68 23 36 13 f0       	push   $0xf0133623
f0109aaa:	e8 01 67 ff ff       	call   f01001b0 <_panic>
f0109aaf:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f0109ab5:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109abb:	8b 88 44 da 01 00    	mov    0x1da44(%eax),%ecx
f0109ac1:	8b 9d 4c ff ff ff    	mov    -0xb4(%ebp),%ebx
f0109ac7:	89 d8                	mov    %ebx,%eax
f0109ac9:	01 c0                	add    %eax,%eax
f0109acb:	01 d8                	add    %ebx,%eax
f0109acd:	c1 e0 03             	shl    $0x3,%eax
f0109ad0:	01 d0                	add    %edx,%eax
f0109ad2:	05 c8 00 00 00       	add    $0xc8,%eax
f0109ad7:	89 08                	mov    %ecx,(%eax)
f0109ad9:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f0109adf:	89 c8                	mov    %ecx,%eax
f0109ae1:	01 c0                	add    %eax,%eax
f0109ae3:	01 c8                	add    %ecx,%eax
f0109ae5:	c1 e0 03             	shl    $0x3,%eax
f0109ae8:	01 d0                	add    %edx,%eax
f0109aea:	05 c8 00 00 00       	add    $0xc8,%eax
f0109aef:	8b 00                	mov    (%eax),%eax
f0109af1:	85 c0                	test   %eax,%eax
f0109af3:	74 30                	je     f0109b25 <env_create+0x9e3>
f0109af5:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109afb:	8b 90 44 da 01 00    	mov    0x1da44(%eax),%edx
f0109b01:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f0109b07:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f0109b0d:	89 c8                	mov    %ecx,%eax
f0109b0f:	01 c0                	add    %eax,%eax
f0109b11:	01 c8                	add    %ecx,%eax
f0109b13:	c1 e0 03             	shl    $0x3,%eax
f0109b16:	05 b0 00 00 00       	add    $0xb0,%eax
f0109b1b:	01 d8                	add    %ebx,%eax
f0109b1d:	83 c0 08             	add    $0x8,%eax
f0109b20:	89 42 14             	mov    %eax,0x14(%edx)
f0109b23:	eb 2b                	jmp    f0109b50 <env_create+0xa0e>
f0109b25:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f0109b2b:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f0109b31:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f0109b37:	89 c8                	mov    %ecx,%eax
f0109b39:	01 c0                	add    %eax,%eax
f0109b3b:	01 c8                	add    %ecx,%eax
f0109b3d:	c1 e0 03             	shl    $0x3,%eax
f0109b40:	05 b0 00 00 00       	add    $0xb0,%eax
f0109b45:	01 d8                	add    %ebx,%eax
f0109b47:	83 c0 08             	add    $0x8,%eax
f0109b4a:	89 82 48 da 01 00    	mov    %eax,0x1da48(%edx)
f0109b50:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f0109b56:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f0109b5c:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f0109b62:	89 c8                	mov    %ecx,%eax
f0109b64:	01 c0                	add    %eax,%eax
f0109b66:	01 c8                	add    %ecx,%eax
f0109b68:	c1 e0 03             	shl    $0x3,%eax
f0109b6b:	05 b0 00 00 00       	add    $0xb0,%eax
f0109b70:	01 d8                	add    %ebx,%eax
f0109b72:	83 c0 08             	add    $0x8,%eax
f0109b75:	89 82 44 da 01 00    	mov    %eax,0x1da44(%edx)
f0109b7b:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f0109b81:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109b87:	89 d0                	mov    %edx,%eax
f0109b89:	01 c0                	add    %eax,%eax
f0109b8b:	01 d0                	add    %edx,%eax
f0109b8d:	c1 e0 03             	shl    $0x3,%eax
f0109b90:	01 c8                	add    %ecx,%eax
f0109b92:	05 cc 00 00 00       	add    $0xcc,%eax
f0109b97:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0109b9d:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109ba3:	8b 90 50 da 01 00    	mov    0x1da50(%eax),%edx
f0109ba9:	42                   	inc    %edx
f0109baa:	89 90 50 da 01 00    	mov    %edx,0x1da50(%eax)
f0109bb0:	e9 3b 01 00 00       	jmp    f0109cf0 <env_create+0xbae>
				}
				else
				{
					LIST_INSERT_HEAD(&(e->SecondList), &(e->ptr_pageWorkingSet[lastWSIndex]));
f0109bb5:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f0109bbb:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109bc1:	89 d0                	mov    %edx,%eax
f0109bc3:	01 c0                	add    %eax,%eax
f0109bc5:	01 d0                	add    %edx,%eax
f0109bc7:	c1 e0 03             	shl    $0x3,%eax
f0109bca:	05 b0 00 00 00       	add    $0xb0,%eax
f0109bcf:	01 c8                	add    %ecx,%eax
f0109bd1:	83 c0 08             	add    $0x8,%eax
f0109bd4:	85 c0                	test   %eax,%eax
f0109bd6:	75 17                	jne    f0109bef <env_create+0xaad>
f0109bd8:	83 ec 04             	sub    $0x4,%esp
f0109bdb:	68 a4 36 13 f0       	push   $0xf01336a4
f0109be0:	68 70 01 00 00       	push   $0x170
f0109be5:	68 23 36 13 f0       	push   $0xf0133623
f0109bea:	e8 c1 65 ff ff       	call   f01001b0 <_panic>
f0109bef:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f0109bf5:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109bfb:	8b 88 54 da 01 00    	mov    0x1da54(%eax),%ecx
f0109c01:	8b 9d 4c ff ff ff    	mov    -0xb4(%ebp),%ebx
f0109c07:	89 d8                	mov    %ebx,%eax
f0109c09:	01 c0                	add    %eax,%eax
f0109c0b:	01 d8                	add    %ebx,%eax
f0109c0d:	c1 e0 03             	shl    $0x3,%eax
f0109c10:	01 d0                	add    %edx,%eax
f0109c12:	05 c8 00 00 00       	add    $0xc8,%eax
f0109c17:	89 08                	mov    %ecx,(%eax)
f0109c19:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f0109c1f:	89 c8                	mov    %ecx,%eax
f0109c21:	01 c0                	add    %eax,%eax
f0109c23:	01 c8                	add    %ecx,%eax
f0109c25:	c1 e0 03             	shl    $0x3,%eax
f0109c28:	01 d0                	add    %edx,%eax
f0109c2a:	05 c8 00 00 00       	add    $0xc8,%eax
f0109c2f:	8b 00                	mov    (%eax),%eax
f0109c31:	85 c0                	test   %eax,%eax
f0109c33:	74 30                	je     f0109c65 <env_create+0xb23>
f0109c35:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109c3b:	8b 90 54 da 01 00    	mov    0x1da54(%eax),%edx
f0109c41:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f0109c47:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f0109c4d:	89 c8                	mov    %ecx,%eax
f0109c4f:	01 c0                	add    %eax,%eax
f0109c51:	01 c8                	add    %ecx,%eax
f0109c53:	c1 e0 03             	shl    $0x3,%eax
f0109c56:	05 b0 00 00 00       	add    $0xb0,%eax
f0109c5b:	01 d8                	add    %ebx,%eax
f0109c5d:	83 c0 08             	add    $0x8,%eax
f0109c60:	89 42 14             	mov    %eax,0x14(%edx)
f0109c63:	eb 2b                	jmp    f0109c90 <env_create+0xb4e>
f0109c65:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f0109c6b:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f0109c71:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f0109c77:	89 c8                	mov    %ecx,%eax
f0109c79:	01 c0                	add    %eax,%eax
f0109c7b:	01 c8                	add    %ecx,%eax
f0109c7d:	c1 e0 03             	shl    $0x3,%eax
f0109c80:	05 b0 00 00 00       	add    $0xb0,%eax
f0109c85:	01 d8                	add    %ebx,%eax
f0109c87:	83 c0 08             	add    $0x8,%eax
f0109c8a:	89 82 58 da 01 00    	mov    %eax,0x1da58(%edx)
f0109c90:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f0109c96:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f0109c9c:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f0109ca2:	89 c8                	mov    %ecx,%eax
f0109ca4:	01 c0                	add    %eax,%eax
f0109ca6:	01 c8                	add    %ecx,%eax
f0109ca8:	c1 e0 03             	shl    $0x3,%eax
f0109cab:	05 b0 00 00 00       	add    $0xb0,%eax
f0109cb0:	01 d8                	add    %ebx,%eax
f0109cb2:	83 c0 08             	add    $0x8,%eax
f0109cb5:	89 82 54 da 01 00    	mov    %eax,0x1da54(%edx)
f0109cbb:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f0109cc1:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109cc7:	89 d0                	mov    %edx,%eax
f0109cc9:	01 c0                	add    %eax,%eax
f0109ccb:	01 d0                	add    %edx,%eax
f0109ccd:	c1 e0 03             	shl    $0x3,%eax
f0109cd0:	01 c8                	add    %ecx,%eax
f0109cd2:	05 cc 00 00 00       	add    $0xcc,%eax
f0109cd7:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0109cdd:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109ce3:	8b 90 60 da 01 00    	mov    0x1da60(%eax),%edx
f0109ce9:	42                   	inc    %edx
f0109cea:	89 90 60 da 01 00    	mov    %edx,0x1da60(%eax)


			//addTableToTableWorkingSet(e, ROUNDDOWN((uint32)stackVa, PAGE_SIZE*1024));

			//ADD this page to the page file
			int success = pf_add_empty_env_page(e, (uint32)stackVa, 1);
f0109cf0:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109cf6:	83 ec 04             	sub    $0x4,%esp
f0109cf9:	6a 01                	push   $0x1
f0109cfb:	ff 75 c0             	pushl  -0x40(%ebp)
f0109cfe:	50                   	push   %eax
f0109cff:	e8 91 a0 ff ff       	call   f0103d95 <pf_add_empty_env_page>
f0109d04:	83 c4 10             	add    $0x10,%esp
f0109d07:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)

	// map the allocated page
	uint32 ptr_user_stack_bottom = (USTACKTOP - 1*PAGE_SIZE);

	uint32 stackVa = USTACKTOP - PAGE_SIZE;
	for(;stackVa >= ptr_user_stack_bottom; stackVa -= PAGE_SIZE)
f0109d0d:	81 6d c0 00 10 00 00 	subl   $0x1000,-0x40(%ebp)
f0109d14:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0109d17:	3b 85 50 ff ff ff    	cmp    -0xb0(%ebp),%eax
f0109d1d:	0f 83 b5 fa ff ff    	jae    f01097d8 <env_create+0x696>

	}

	//2020
	//LRU Lists: Reset PRESENT bit of all pages in Second List
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0109d23:	83 ec 0c             	sub    $0xc,%esp
f0109d26:	6a 02                	push   $0x2
f0109d28:	e8 8e 3f 00 00       	call   f010dcbb <isPageReplacmentAlgorithmLRU>
f0109d2d:	83 c4 10             	add    $0x10,%esp
f0109d30:	85 c0                	test   %eax,%eax
f0109d32:	74 75                	je     f0109da9 <env_create+0xc67>
	{
		struct WorkingSetElement * elm = NULL;
f0109d34:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
		LIST_FOREACH(elm, &(e->SecondList))
f0109d3b:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109d41:	8b 80 54 da 01 00    	mov    0x1da54(%eax),%eax
f0109d47:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0109d4a:	eb 2e                	jmp    f0109d7a <env_create+0xc38>
		{
			//set it's PRESENT bit to 0
			pt_set_page_permissions(e->env_page_directory, elm->virtual_address, 0, PERM_PRESENT);
f0109d4c:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0109d4f:	8b 10                	mov    (%eax),%edx
f0109d51:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109d57:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0109d5d:	6a 01                	push   $0x1
f0109d5f:	6a 00                	push   $0x0
f0109d61:	52                   	push   %edx
f0109d62:	50                   	push   %eax
f0109d63:	e8 2e e7 ff ff       	call   f0108496 <pt_set_page_permissions>
f0109d68:	83 c4 10             	add    $0x10,%esp
	//2020
	//LRU Lists: Reset PRESENT bit of all pages in Second List
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
	{
		struct WorkingSetElement * elm = NULL;
		LIST_FOREACH(elm, &(e->SecondList))
f0109d6b:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109d71:	8b 80 5c da 01 00    	mov    0x1da5c(%eax),%eax
f0109d77:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0109d7a:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109d80:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f0109d84:	74 08                	je     f0109d8e <env_create+0xc4c>
f0109d86:	8b 55 bc             	mov    -0x44(%ebp),%edx
f0109d89:	8b 52 10             	mov    0x10(%edx),%edx
f0109d8c:	eb 05                	jmp    f0109d93 <env_create+0xc51>
f0109d8e:	ba 00 00 00 00       	mov    $0x0,%edx
f0109d93:	89 90 5c da 01 00    	mov    %edx,0x1da5c(%eax)
f0109d99:	8b 80 5c da 01 00    	mov    0x1da5c(%eax),%eax
f0109d9f:	85 c0                	test   %eax,%eax
f0109da1:	75 a9                	jne    f0109d4c <env_create+0xc0a>
f0109da3:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f0109da7:	75 a3                	jne    f0109d4c <env_create+0xc0a>
f0109da9:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0109dac:	89 45 a0             	mov    %eax,-0x60(%ebp)
f0109daf:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0109db2:	0f 22 d8             	mov    %eax,%cr3
	lcr3(kern_phys_pgdir) ;

	//[11] 2012, add the new env we have just created to the scheduler NEW queue
	//	   2015: moved to the scheduler! since env_create() is responsible for creating the env only

	return e;
f0109db5:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
}
f0109dbb:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0109dbe:	5b                   	pop    %ebx
f0109dbf:	5e                   	pop    %esi
f0109dc0:	5f                   	pop    %edi
f0109dc1:	5d                   	pop    %ebp
f0109dc2:	c3                   	ret    

f0109dc3 <env_run>:
// Used to run the given environment "e", simply by
// context switch from curenv to env e.
//  (This function does not return.)
//
void env_run(struct Env *e)
{
f0109dc3:	55                   	push   %ebp
f0109dc4:	89 e5                	mov    %esp,%ebp
f0109dc6:	83 ec 18             	sub    $0x18,%esp
	if(curenv != e)
f0109dc9:	a1 74 41 25 f0       	mov    0xf0254174,%eax
f0109dce:	3b 45 08             	cmp    0x8(%ebp),%eax
f0109dd1:	74 2e                	je     f0109e01 <env_run+0x3e>
	{
		curenv = e ;
f0109dd3:	8b 45 08             	mov    0x8(%ebp),%eax
f0109dd6:	a3 74 41 25 f0       	mov    %eax,0xf0254174
		curenv->env_runs++ ;
f0109ddb:	a1 74 41 25 f0       	mov    0xf0254174,%eax
f0109de0:	8b 90 8c da 01 00    	mov    0x1da8c(%eax),%edx
f0109de6:	42                   	inc    %edx
f0109de7:	89 90 8c da 01 00    	mov    %edx,0x1da8c(%eax)
		lcr3(curenv->env_cr3) ;
f0109ded:	a1 74 41 25 f0       	mov    0xf0254174,%eax
f0109df2:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f0109df8:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0109dfb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109dfe:	0f 22 d8             	mov    %eax,%cr3
	}
	curenv->env_status = ENV_RUNNABLE;
f0109e01:	a1 74 41 25 f0       	mov    0xf0254174,%eax
f0109e06:	c7 40 54 02 00 00 00 	movl   $0x2,0x54(%eax)
	//uint16 cnt0 = kclock_read_cnt0();
	//cprintf("env_run %s [%d]: Cnt BEFORE RESUME = %d\n", curenv->prog_name,curenv->env_id, cnt0);
	//kclock_start();

	kclock_resume();
f0109e0d:	e8 e5 ac ff ff       	call   f0104af7 <kclock_resume>

	//cprintf("env_run %s [%d]: Cnt AFTER RESUME = %d\n", curenv->prog_name,curenv->env_id, cnt0);
	env_pop_tf(&(curenv->env_tf));
f0109e12:	a1 74 41 25 f0       	mov    0xf0254174,%eax
f0109e17:	83 ec 0c             	sub    $0xc,%esp
f0109e1a:	50                   	push   %eax
f0109e1b:	e8 f5 00 00 00       	call   f0109f15 <env_pop_tf>

f0109e20 <env_free>:
// 3) FREE ENV FROM THE SYSTEM:
//===============================
// Frees environment "e" and all memory it uses.
//
void env_free(struct Env *e)
{
f0109e20:	55                   	push   %ebp
f0109e21:	89 e5                	mov    %esp,%ebp
	/*REMOVE THIS LINE BEFORE START CODING*/
	return;
f0109e23:	90                   	nop
	// [10] free the environment (return it back to the free environment list)
	/*(ALREADY DONE for you)*/
	free_environment(e); /*(ALREADY DONE for you)*/ // (frees the environment (returns it back to the free environment list))
	/*========================*/

}
f0109e24:	5d                   	pop    %ebp
f0109e25:	c3                   	ret    

f0109e26 <env_exit>:
//============================
// 4) PLACE ENV IN EXIT QUEUE:
//============================
/*2015*///Just add the "curenv" to the EXIT list, then reinvoke the scheduler
void env_exit()
{
f0109e26:	55                   	push   %ebp
f0109e27:	89 e5                	mov    %esp,%ebp
f0109e29:	83 ec 08             	sub    $0x8,%esp
	sched_exit_env(curenv->env_id);
f0109e2c:	a1 74 41 25 f0       	mov    0xf0254174,%eax
f0109e31:	8b 40 4c             	mov    0x4c(%eax),%eax
f0109e34:	83 ec 0c             	sub    $0xc,%esp
f0109e37:	50                   	push   %eax
f0109e38:	e8 94 b5 ff ff       	call   f01053d1 <sched_exit_env>
f0109e3d:	83 c4 10             	add    $0x10,%esp
	fos_scheduler();
f0109e40:	e8 d4 c3 ff ff       	call   f0106219 <fos_scheduler>

f0109e45 <envid2env>:
//   0 on success, -E_BAD_ENV on error.
//   On success, sets *penv to the environment.
//   On error, sets *penv to NULL.
//
int envid2env(int32  envid, struct Env **env_store, bool checkperm)
{
f0109e45:	55                   	push   %ebp
f0109e46:	89 e5                	mov    %esp,%ebp
f0109e48:	53                   	push   %ebx
f0109e49:	83 ec 14             	sub    $0x14,%esp
	struct Env *e;

	// If envid is zero, return the current environment.
	if (envid == 0) {
f0109e4c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0109e50:	75 15                	jne    f0109e67 <envid2env+0x22>
		*env_store = curenv;
f0109e52:	8b 15 74 41 25 f0    	mov    0xf0254174,%edx
f0109e58:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109e5b:	89 10                	mov    %edx,(%eax)
		return 0;
f0109e5d:	b8 00 00 00 00       	mov    $0x0,%eax
f0109e62:	e9 a9 00 00 00       	jmp    f0109f10 <envid2env+0xcb>
	// Look up the Env structure via the index part of the envid,
	// then check the env_id field in that struct Env
	// to ensure that the envid is not stale
	// (i.e., does not refer to a _previous_ environment
	// that used the same slot in the envs[] array).
	e = &envs[ENVX(envid)];
f0109e67:	8b 1d 70 41 25 f0    	mov    0xf0254170,%ebx
f0109e6d:	83 ec 0c             	sub    $0xc,%esp
f0109e70:	6a 08                	push   $0x8
f0109e72:	e8 8c 43 02 00       	call   f012e203 <nearest_pow2_ceil>
f0109e77:	83 c4 10             	add    $0x10,%esp
f0109e7a:	8d 50 ff             	lea    -0x1(%eax),%edx
f0109e7d:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e80:	21 c2                	and    %eax,%edx
f0109e82:	89 d0                	mov    %edx,%eax
f0109e84:	01 c0                	add    %eax,%eax
f0109e86:	01 d0                	add    %edx,%eax
f0109e88:	01 c0                	add    %eax,%eax
f0109e8a:	01 d0                	add    %edx,%eax
f0109e8c:	c1 e0 02             	shl    $0x2,%eax
f0109e8f:	01 d0                	add    %edx,%eax
f0109e91:	01 c0                	add    %eax,%eax
f0109e93:	01 d0                	add    %edx,%eax
f0109e95:	c1 e0 02             	shl    $0x2,%eax
f0109e98:	01 d0                	add    %edx,%eax
f0109e9a:	c1 e0 02             	shl    $0x2,%eax
f0109e9d:	01 d0                	add    %edx,%eax
f0109e9f:	c1 e0 02             	shl    $0x2,%eax
f0109ea2:	01 d0                	add    %edx,%eax
f0109ea4:	c1 e0 05             	shl    $0x5,%eax
f0109ea7:	01 d8                	add    %ebx,%eax
f0109ea9:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (e->env_status == ENV_FREE || e->env_id != envid) {
f0109eac:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109eaf:	8b 40 54             	mov    0x54(%eax),%eax
f0109eb2:	85 c0                	test   %eax,%eax
f0109eb4:	74 0b                	je     f0109ec1 <envid2env+0x7c>
f0109eb6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109eb9:	8b 40 4c             	mov    0x4c(%eax),%eax
f0109ebc:	3b 45 08             	cmp    0x8(%ebp),%eax
f0109ebf:	74 10                	je     f0109ed1 <envid2env+0x8c>
		*env_store = 0;
f0109ec1:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109ec4:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return E_BAD_ENV;
f0109eca:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
f0109ecf:	eb 3f                	jmp    f0109f10 <envid2env+0xcb>
	// Check that the calling environment has legitimate permission
	// to manipulate the specified environment.
	// If checkperm is set, the specified environment
	// must be either the current environment
	// or an immediate child of the current environment.
	if (checkperm && e != curenv && e->env_parent_id != curenv->env_id) {
f0109ed1:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0109ed5:	74 2c                	je     f0109f03 <envid2env+0xbe>
f0109ed7:	a1 74 41 25 f0       	mov    0xf0254174,%eax
f0109edc:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f0109edf:	74 22                	je     f0109f03 <envid2env+0xbe>
f0109ee1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109ee4:	8b 50 50             	mov    0x50(%eax),%edx
f0109ee7:	a1 74 41 25 f0       	mov    0xf0254174,%eax
f0109eec:	8b 40 4c             	mov    0x4c(%eax),%eax
f0109eef:	39 c2                	cmp    %eax,%edx
f0109ef1:	74 10                	je     f0109f03 <envid2env+0xbe>
		*env_store = 0;
f0109ef3:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109ef6:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return E_BAD_ENV;
f0109efc:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
f0109f01:	eb 0d                	jmp    f0109f10 <envid2env+0xcb>
	}

	*env_store = e;
f0109f03:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109f06:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109f09:	89 10                	mov    %edx,(%eax)
	return 0;
f0109f0b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0109f10:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0109f13:	c9                   	leave  
f0109f14:	c3                   	ret    

f0109f15 <env_pop_tf>:
// This exits the kernel and starts executing some environment's code.
// This function does not return.
//
void
env_pop_tf(struct Trapframe *tf)
{
f0109f15:	55                   	push   %ebp
f0109f16:	89 e5                	mov    %esp,%ebp
f0109f18:	83 ec 08             	sub    $0x8,%esp
	__asm __volatile("movl %0,%%esp\n"
f0109f1b:	8b 65 08             	mov    0x8(%ebp),%esp
f0109f1e:	61                   	popa   
f0109f1f:	07                   	pop    %es
f0109f20:	1f                   	pop    %ds
f0109f21:	83 c4 08             	add    $0x8,%esp
f0109f24:	cf                   	iret   
			"\tpopl %%es\n"
			"\tpopl %%ds\n"
			"\taddl $0x8,%%esp\n" /* skip tf_trapno and tf_errcode */
			"\tiret"
			: : "g" (tf) : "memory");
	panic("iret failed");  /* mostly to placate the compiler */
f0109f25:	83 ec 04             	sub    $0x4,%esp
f0109f28:	68 c7 36 13 f0       	push   $0xf01336c7
f0109f2d:	68 23 02 00 00       	push   $0x223
f0109f32:	68 23 36 13 f0       	push   $0xf0133623
f0109f37:	e8 74 62 ff ff       	call   f01001b0 <_panic>

f0109f3c <env_init>:
// Insert in reverse order, so that the first call to allocate_environment()
// returns envs[0].
//

void env_init(void)
{
f0109f3c:	55                   	push   %ebp
f0109f3d:	89 e5                	mov    %esp,%ebp
f0109f3f:	53                   	push   %ebx
f0109f40:	83 ec 14             	sub    $0x14,%esp
	int iEnv = NENV-1;
f0109f43:	c7 45 f4 07 00 00 00 	movl   $0x7,-0xc(%ebp)
	for(; iEnv >= 0; iEnv--)
f0109f4a:	e9 e3 01 00 00       	jmp    f010a132 <env_init+0x1f6>
	{
		envs[iEnv].env_status = ENV_FREE;
f0109f4f:	8b 0d 70 41 25 f0    	mov    0xf0254170,%ecx
f0109f55:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109f58:	89 d0                	mov    %edx,%eax
f0109f5a:	01 c0                	add    %eax,%eax
f0109f5c:	01 d0                	add    %edx,%eax
f0109f5e:	01 c0                	add    %eax,%eax
f0109f60:	01 d0                	add    %edx,%eax
f0109f62:	c1 e0 02             	shl    $0x2,%eax
f0109f65:	01 d0                	add    %edx,%eax
f0109f67:	01 c0                	add    %eax,%eax
f0109f69:	01 d0                	add    %edx,%eax
f0109f6b:	c1 e0 02             	shl    $0x2,%eax
f0109f6e:	01 d0                	add    %edx,%eax
f0109f70:	c1 e0 02             	shl    $0x2,%eax
f0109f73:	01 d0                	add    %edx,%eax
f0109f75:	c1 e0 02             	shl    $0x2,%eax
f0109f78:	01 d0                	add    %edx,%eax
f0109f7a:	c1 e0 05             	shl    $0x5,%eax
f0109f7d:	01 c8                	add    %ecx,%eax
f0109f7f:	c7 40 54 00 00 00 00 	movl   $0x0,0x54(%eax)
		envs[iEnv].env_id = 0;
f0109f86:	8b 0d 70 41 25 f0    	mov    0xf0254170,%ecx
f0109f8c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109f8f:	89 d0                	mov    %edx,%eax
f0109f91:	01 c0                	add    %eax,%eax
f0109f93:	01 d0                	add    %edx,%eax
f0109f95:	01 c0                	add    %eax,%eax
f0109f97:	01 d0                	add    %edx,%eax
f0109f99:	c1 e0 02             	shl    $0x2,%eax
f0109f9c:	01 d0                	add    %edx,%eax
f0109f9e:	01 c0                	add    %eax,%eax
f0109fa0:	01 d0                	add    %edx,%eax
f0109fa2:	c1 e0 02             	shl    $0x2,%eax
f0109fa5:	01 d0                	add    %edx,%eax
f0109fa7:	c1 e0 02             	shl    $0x2,%eax
f0109faa:	01 d0                	add    %edx,%eax
f0109fac:	c1 e0 02             	shl    $0x2,%eax
f0109faf:	01 d0                	add    %edx,%eax
f0109fb1:	c1 e0 05             	shl    $0x5,%eax
f0109fb4:	01 c8                	add    %ecx,%eax
f0109fb6:	c7 40 4c 00 00 00 00 	movl   $0x0,0x4c(%eax)
		LIST_INSERT_HEAD(&env_free_list, &envs[iEnv]);
f0109fbd:	8b 0d 70 41 25 f0    	mov    0xf0254170,%ecx
f0109fc3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109fc6:	89 d0                	mov    %edx,%eax
f0109fc8:	01 c0                	add    %eax,%eax
f0109fca:	01 d0                	add    %edx,%eax
f0109fcc:	01 c0                	add    %eax,%eax
f0109fce:	01 d0                	add    %edx,%eax
f0109fd0:	c1 e0 02             	shl    $0x2,%eax
f0109fd3:	01 d0                	add    %edx,%eax
f0109fd5:	01 c0                	add    %eax,%eax
f0109fd7:	01 d0                	add    %edx,%eax
f0109fd9:	c1 e0 02             	shl    $0x2,%eax
f0109fdc:	01 d0                	add    %edx,%eax
f0109fde:	c1 e0 02             	shl    $0x2,%eax
f0109fe1:	01 d0                	add    %edx,%eax
f0109fe3:	c1 e0 02             	shl    $0x2,%eax
f0109fe6:	01 d0                	add    %edx,%eax
f0109fe8:	c1 e0 05             	shl    $0x5,%eax
f0109feb:	01 c8                	add    %ecx,%eax
f0109fed:	85 c0                	test   %eax,%eax
f0109fef:	75 17                	jne    f010a008 <env_init+0xcc>
f0109ff1:	83 ec 04             	sub    $0x4,%esp
f0109ff4:	68 a4 36 13 f0       	push   $0xf01336a4
f0109ff9:	68 3f 02 00 00       	push   $0x23f
f0109ffe:	68 23 36 13 f0       	push   $0xf0133623
f010a003:	e8 a8 61 ff ff       	call   f01001b0 <_panic>
f010a008:	8b 0d 70 41 25 f0    	mov    0xf0254170,%ecx
f010a00e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a011:	89 d0                	mov    %edx,%eax
f010a013:	01 c0                	add    %eax,%eax
f010a015:	01 d0                	add    %edx,%eax
f010a017:	01 c0                	add    %eax,%eax
f010a019:	01 d0                	add    %edx,%eax
f010a01b:	c1 e0 02             	shl    $0x2,%eax
f010a01e:	01 d0                	add    %edx,%eax
f010a020:	01 c0                	add    %eax,%eax
f010a022:	01 d0                	add    %edx,%eax
f010a024:	c1 e0 02             	shl    $0x2,%eax
f010a027:	01 d0                	add    %edx,%eax
f010a029:	c1 e0 02             	shl    $0x2,%eax
f010a02c:	01 d0                	add    %edx,%eax
f010a02e:	c1 e0 02             	shl    $0x2,%eax
f010a031:	01 d0                	add    %edx,%eax
f010a033:	c1 e0 05             	shl    $0x5,%eax
f010a036:	01 c8                	add    %ecx,%eax
f010a038:	8b 15 78 41 25 f0    	mov    0xf0254178,%edx
f010a03e:	89 50 44             	mov    %edx,0x44(%eax)
f010a041:	8b 40 44             	mov    0x44(%eax),%eax
f010a044:	85 c0                	test   %eax,%eax
f010a046:	74 3b                	je     f010a083 <env_init+0x147>
f010a048:	8b 0d 78 41 25 f0    	mov    0xf0254178,%ecx
f010a04e:	8b 1d 70 41 25 f0    	mov    0xf0254170,%ebx
f010a054:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a057:	89 d0                	mov    %edx,%eax
f010a059:	01 c0                	add    %eax,%eax
f010a05b:	01 d0                	add    %edx,%eax
f010a05d:	01 c0                	add    %eax,%eax
f010a05f:	01 d0                	add    %edx,%eax
f010a061:	c1 e0 02             	shl    $0x2,%eax
f010a064:	01 d0                	add    %edx,%eax
f010a066:	01 c0                	add    %eax,%eax
f010a068:	01 d0                	add    %edx,%eax
f010a06a:	c1 e0 02             	shl    $0x2,%eax
f010a06d:	01 d0                	add    %edx,%eax
f010a06f:	c1 e0 02             	shl    $0x2,%eax
f010a072:	01 d0                	add    %edx,%eax
f010a074:	c1 e0 02             	shl    $0x2,%eax
f010a077:	01 d0                	add    %edx,%eax
f010a079:	c1 e0 05             	shl    $0x5,%eax
f010a07c:	01 d8                	add    %ebx,%eax
f010a07e:	89 41 48             	mov    %eax,0x48(%ecx)
f010a081:	eb 35                	jmp    f010a0b8 <env_init+0x17c>
f010a083:	8b 0d 70 41 25 f0    	mov    0xf0254170,%ecx
f010a089:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a08c:	89 d0                	mov    %edx,%eax
f010a08e:	01 c0                	add    %eax,%eax
f010a090:	01 d0                	add    %edx,%eax
f010a092:	01 c0                	add    %eax,%eax
f010a094:	01 d0                	add    %edx,%eax
f010a096:	c1 e0 02             	shl    $0x2,%eax
f010a099:	01 d0                	add    %edx,%eax
f010a09b:	01 c0                	add    %eax,%eax
f010a09d:	01 d0                	add    %edx,%eax
f010a09f:	c1 e0 02             	shl    $0x2,%eax
f010a0a2:	01 d0                	add    %edx,%eax
f010a0a4:	c1 e0 02             	shl    $0x2,%eax
f010a0a7:	01 d0                	add    %edx,%eax
f010a0a9:	c1 e0 02             	shl    $0x2,%eax
f010a0ac:	01 d0                	add    %edx,%eax
f010a0ae:	c1 e0 05             	shl    $0x5,%eax
f010a0b1:	01 c8                	add    %ecx,%eax
f010a0b3:	a3 7c 41 25 f0       	mov    %eax,0xf025417c
f010a0b8:	8b 0d 70 41 25 f0    	mov    0xf0254170,%ecx
f010a0be:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a0c1:	89 d0                	mov    %edx,%eax
f010a0c3:	01 c0                	add    %eax,%eax
f010a0c5:	01 d0                	add    %edx,%eax
f010a0c7:	01 c0                	add    %eax,%eax
f010a0c9:	01 d0                	add    %edx,%eax
f010a0cb:	c1 e0 02             	shl    $0x2,%eax
f010a0ce:	01 d0                	add    %edx,%eax
f010a0d0:	01 c0                	add    %eax,%eax
f010a0d2:	01 d0                	add    %edx,%eax
f010a0d4:	c1 e0 02             	shl    $0x2,%eax
f010a0d7:	01 d0                	add    %edx,%eax
f010a0d9:	c1 e0 02             	shl    $0x2,%eax
f010a0dc:	01 d0                	add    %edx,%eax
f010a0de:	c1 e0 02             	shl    $0x2,%eax
f010a0e1:	01 d0                	add    %edx,%eax
f010a0e3:	c1 e0 05             	shl    $0x5,%eax
f010a0e6:	01 c8                	add    %ecx,%eax
f010a0e8:	a3 78 41 25 f0       	mov    %eax,0xf0254178
f010a0ed:	8b 0d 70 41 25 f0    	mov    0xf0254170,%ecx
f010a0f3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a0f6:	89 d0                	mov    %edx,%eax
f010a0f8:	01 c0                	add    %eax,%eax
f010a0fa:	01 d0                	add    %edx,%eax
f010a0fc:	01 c0                	add    %eax,%eax
f010a0fe:	01 d0                	add    %edx,%eax
f010a100:	c1 e0 02             	shl    $0x2,%eax
f010a103:	01 d0                	add    %edx,%eax
f010a105:	01 c0                	add    %eax,%eax
f010a107:	01 d0                	add    %edx,%eax
f010a109:	c1 e0 02             	shl    $0x2,%eax
f010a10c:	01 d0                	add    %edx,%eax
f010a10e:	c1 e0 02             	shl    $0x2,%eax
f010a111:	01 d0                	add    %edx,%eax
f010a113:	c1 e0 02             	shl    $0x2,%eax
f010a116:	01 d0                	add    %edx,%eax
f010a118:	c1 e0 05             	shl    $0x5,%eax
f010a11b:	01 c8                	add    %ecx,%eax
f010a11d:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010a124:	a1 84 41 25 f0       	mov    0xf0254184,%eax
f010a129:	40                   	inc    %eax
f010a12a:	a3 84 41 25 f0       	mov    %eax,0xf0254184
//

void env_init(void)
{
	int iEnv = NENV-1;
	for(; iEnv >= 0; iEnv--)
f010a12f:	ff 4d f4             	decl   -0xc(%ebp)
f010a132:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010a136:	0f 89 13 fe ff ff    	jns    f0109f4f <env_init+0x13>
	{
		envs[iEnv].env_status = ENV_FREE;
		envs[iEnv].env_id = 0;
		LIST_INSERT_HEAD(&env_free_list, &envs[iEnv]);
	}
}
f010a13c:	90                   	nop
f010a13d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010a140:	c9                   	leave  
f010a141:	c3                   	ret    

f010a142 <allocate_environment>:
//
// Returns 0 on success, < 0 on failure.  Errors include:
//	E_NO_FREE_ENV if all NENVS environments are allocated
//
int allocate_environment(struct Env** e)
{
f010a142:	55                   	push   %ebp
f010a143:	89 e5                	mov    %esp,%ebp
	if (!(*e = LIST_FIRST(&env_free_list)))
f010a145:	8b 15 78 41 25 f0    	mov    0xf0254178,%edx
f010a14b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a14e:	89 10                	mov    %edx,(%eax)
f010a150:	8b 45 08             	mov    0x8(%ebp),%eax
f010a153:	8b 00                	mov    (%eax),%eax
f010a155:	85 c0                	test   %eax,%eax
f010a157:	75 07                	jne    f010a160 <allocate_environment+0x1e>
		return E_NO_FREE_ENV;
f010a159:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
f010a15e:	eb 11                	jmp    f010a171 <allocate_environment+0x2f>
	(*e)->env_status = ENV_UNKNOWN;
f010a160:	8b 45 08             	mov    0x8(%ebp),%eax
f010a163:	8b 00                	mov    (%eax),%eax
f010a165:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
	return 0;
f010a16c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010a171:	5d                   	pop    %ebp
f010a172:	c3                   	ret    

f010a173 <free_environment>:
//===============================
// 3) FREE ENV STRUCT:
//===============================
// Free the given environment "e", simply by adding it to the free environment list.
void free_environment(struct Env* e)
{
f010a173:	55                   	push   %ebp
f010a174:	89 e5                	mov    %esp,%ebp
f010a176:	83 ec 08             	sub    $0x8,%esp
	memset(e, 0, sizeof(*e));
f010a179:	83 ec 04             	sub    $0x4,%esp
f010a17c:	68 a0 da 01 00       	push   $0x1daa0
f010a181:	6a 00                	push   $0x0
f010a183:	ff 75 08             	pushl  0x8(%ebp)
f010a186:	e8 db 54 02 00       	call   f012f666 <memset>
f010a18b:	83 c4 10             	add    $0x10,%esp
	e->env_status = ENV_FREE;
f010a18e:	8b 45 08             	mov    0x8(%ebp),%eax
f010a191:	c7 40 54 00 00 00 00 	movl   $0x0,0x54(%eax)
	LIST_INSERT_HEAD(&env_free_list, e);
f010a198:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010a19c:	75 17                	jne    f010a1b5 <free_environment+0x42>
f010a19e:	83 ec 04             	sub    $0x4,%esp
f010a1a1:	68 a4 36 13 f0       	push   $0xf01336a4
f010a1a6:	68 5c 02 00 00       	push   $0x25c
f010a1ab:	68 23 36 13 f0       	push   $0xf0133623
f010a1b0:	e8 fb 5f ff ff       	call   f01001b0 <_panic>
f010a1b5:	8b 15 78 41 25 f0    	mov    0xf0254178,%edx
f010a1bb:	8b 45 08             	mov    0x8(%ebp),%eax
f010a1be:	89 50 44             	mov    %edx,0x44(%eax)
f010a1c1:	8b 45 08             	mov    0x8(%ebp),%eax
f010a1c4:	8b 40 44             	mov    0x44(%eax),%eax
f010a1c7:	85 c0                	test   %eax,%eax
f010a1c9:	74 0d                	je     f010a1d8 <free_environment+0x65>
f010a1cb:	a1 78 41 25 f0       	mov    0xf0254178,%eax
f010a1d0:	8b 55 08             	mov    0x8(%ebp),%edx
f010a1d3:	89 50 48             	mov    %edx,0x48(%eax)
f010a1d6:	eb 08                	jmp    f010a1e0 <free_environment+0x6d>
f010a1d8:	8b 45 08             	mov    0x8(%ebp),%eax
f010a1db:	a3 7c 41 25 f0       	mov    %eax,0xf025417c
f010a1e0:	8b 45 08             	mov    0x8(%ebp),%eax
f010a1e3:	a3 78 41 25 f0       	mov    %eax,0xf0254178
f010a1e8:	8b 45 08             	mov    0x8(%ebp),%eax
f010a1eb:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010a1f2:	a1 84 41 25 f0       	mov    0xf0254184,%eax
f010a1f7:	40                   	inc    %eax
f010a1f8:	a3 84 41 25 f0       	mov    %eax,0xf0254184
}
f010a1fd:	90                   	nop
f010a1fe:	c9                   	leave  
f010a1ff:	c3                   	ret    

f010a200 <program_segment_alloc_map_copy_workingset>:
//
// The allocation shouldn't failed
// return 0
//
static int program_segment_alloc_map_copy_workingset(struct Env *e, struct ProgramSegment* seg, uint32* allocated_pages, uint32 remaining_ws_pages, uint32* lastTableNumber)
{
f010a200:	55                   	push   %ebp
f010a201:	89 e5                	mov    %esp,%ebp
f010a203:	53                   	push   %ebx
f010a204:	83 ec 44             	sub    $0x44,%esp
	void *vaddr = seg->virtual_address;
f010a207:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a20a:	8b 40 0c             	mov    0xc(%eax),%eax
f010a20d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	uint32 length = seg->size_in_memory;
f010a210:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a213:	8b 40 08             	mov    0x8(%eax),%eax
f010a216:	89 45 e0             	mov    %eax,-0x20(%ebp)

	uint32 end_vaddr = ROUNDUP((uint32)vaddr + length,PAGE_SIZE) ;
f010a219:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f010a220:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010a223:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010a226:	01 c2                	add    %eax,%edx
f010a228:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010a22b:	01 d0                	add    %edx,%eax
f010a22d:	48                   	dec    %eax
f010a22e:	89 45 d8             	mov    %eax,-0x28(%ebp)
f010a231:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010a234:	ba 00 00 00 00       	mov    $0x0,%edx
f010a239:	f7 75 dc             	divl   -0x24(%ebp)
f010a23c:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010a23f:	29 d0                	sub    %edx,%eax
f010a241:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	uint32 iVA = ROUNDDOWN((uint32)vaddr,PAGE_SIZE) ;
f010a244:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010a247:	89 45 d0             	mov    %eax,-0x30(%ebp)
f010a24a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010a24d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010a252:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int r ;
	uint32 i = 0 ;
f010a255:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	struct FrameInfo *p = NULL;
f010a25c:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)

	*allocated_pages = 0;
f010a263:	8b 45 10             	mov    0x10(%ebp),%eax
f010a266:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	/*2015*/// Load max of 6 pages only for the segment that start with va = 200000 [EXCEPT tpp]
	if (iVA == 0x200000 && strcmp(e->prog_name, "tpp")!=0)
f010a26c:	81 7d f4 00 00 20 00 	cmpl   $0x200000,-0xc(%ebp)
f010a273:	0f 85 38 06 00 00    	jne    f010a8b1 <program_segment_alloc_map_copy_workingset+0x6b1>
f010a279:	8b 45 08             	mov    0x8(%ebp),%eax
f010a27c:	83 c0 5c             	add    $0x5c,%eax
f010a27f:	83 ec 08             	sub    $0x8,%esp
f010a282:	68 d3 36 13 f0       	push   $0xf01336d3
f010a287:	50                   	push   %eax
f010a288:	e8 f7 52 02 00       	call   f012f584 <strcmp>
f010a28d:	83 c4 10             	add    $0x10,%esp
f010a290:	85 c0                	test   %eax,%eax
f010a292:	0f 84 19 06 00 00    	je     f010a8b1 <program_segment_alloc_map_copy_workingset+0x6b1>
		remaining_ws_pages = remaining_ws_pages < 6 ? remaining_ws_pages:6 ;
f010a298:	8b 45 14             	mov    0x14(%ebp),%eax
f010a29b:	83 f8 06             	cmp    $0x6,%eax
f010a29e:	76 05                	jbe    f010a2a5 <program_segment_alloc_map_copy_workingset+0xa5>
f010a2a0:	b8 06 00 00 00       	mov    $0x6,%eax
f010a2a5:	89 45 14             	mov    %eax,0x14(%ebp)
	/*==========================================================================================*/
	for (; iVA < end_vaddr && i<remaining_ws_pages; i++, iVA += PAGE_SIZE)
f010a2a8:	e9 04 06 00 00       	jmp    f010a8b1 <program_segment_alloc_map_copy_workingset+0x6b1>
	{
		// Allocate a page
		allocate_frame(&p) ;
f010a2ad:	83 ec 0c             	sub    $0xc,%esp
f010a2b0:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010a2b3:	50                   	push   %eax
f010a2b4:	e8 6c d0 ff ff       	call   f0107325 <allocate_frame>
f010a2b9:	83 c4 10             	add    $0x10,%esp

		LOG_STRING("segment page allocated");
		loadtime_map_frame(e->env_page_directory, p, iVA, PERM_USER | PERM_WRITEABLE);
f010a2bc:	8b 55 c0             	mov    -0x40(%ebp),%edx
f010a2bf:	8b 45 08             	mov    0x8(%ebp),%eax
f010a2c2:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010a2c8:	6a 06                	push   $0x6
f010a2ca:	ff 75 f4             	pushl  -0xc(%ebp)
f010a2cd:	52                   	push   %edx
f010a2ce:	50                   	push   %eax
f010a2cf:	e8 a2 d5 ff ff       	call   f0107876 <loadtime_map_frame>
f010a2d4:	83 c4 10             	add    $0x10,%esp
		struct WorkingSetElement* wse = env_page_ws_list_create_element(e, iVA);
		wse->time_stamp = 0;
		LIST_INSERT_TAIL(&(e->page_WS_list), wse);
#else
		LOG_STATMENT(cprintf("Updating working set entry # %d",e->page_last_WS_index));
		e->ptr_pageWorkingSet[e->page_last_WS_index].virtual_address = iVA;
f010a2d7:	8b 45 08             	mov    0x8(%ebp),%eax
f010a2da:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f010a2e0:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a2e3:	89 d0                	mov    %edx,%eax
f010a2e5:	01 c0                	add    %eax,%eax
f010a2e7:	01 d0                	add    %edx,%eax
f010a2e9:	c1 e0 03             	shl    $0x3,%eax
f010a2ec:	01 c8                	add    %ecx,%eax
f010a2ee:	8d 90 b8 00 00 00    	lea    0xb8(%eax),%edx
f010a2f4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a2f7:	89 02                	mov    %eax,(%edx)
		e->ptr_pageWorkingSet[e->page_last_WS_index].empty = 0;
f010a2f9:	8b 45 08             	mov    0x8(%ebp),%eax
f010a2fc:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f010a302:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a305:	89 d0                	mov    %edx,%eax
f010a307:	01 c0                	add    %eax,%eax
f010a309:	01 d0                	add    %edx,%eax
f010a30b:	c1 e0 03             	shl    $0x3,%eax
f010a30e:	01 c8                	add    %ecx,%eax
f010a310:	05 bc 00 00 00       	add    $0xbc,%eax
f010a315:	c6 00 00             	movb   $0x0,(%eax)
		e->ptr_pageWorkingSet[e->page_last_WS_index].time_stamp = 0;
f010a318:	8b 45 08             	mov    0x8(%ebp),%eax
f010a31b:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f010a321:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a324:	89 d0                	mov    %edx,%eax
f010a326:	01 c0                	add    %eax,%eax
f010a328:	01 d0                	add    %edx,%eax
f010a32a:	c1 e0 03             	shl    $0x3,%eax
f010a32d:	01 c8                	add    %ecx,%eax
f010a32f:	05 c0 00 00 00       	add    $0xc0,%eax
f010a334:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
#endif
		//2020
		if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f010a33a:	83 ec 0c             	sub    $0xc,%esp
f010a33d:	6a 02                	push   $0x2
f010a33f:	e8 77 39 00 00       	call   f010dcbb <isPageReplacmentAlgorithmLRU>
f010a344:	83 c4 10             	add    $0x10,%esp
f010a347:	85 c0                	test   %eax,%eax
f010a349:	0f 84 2c 04 00 00    	je     f010a77b <program_segment_alloc_map_copy_workingset+0x57b>
				//Add to LRU Second list
				LIST_INSERT_HEAD(&(e->SecondList), wse);
			}
#else

			LIST_REMOVE(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f010a34f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a352:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f010a358:	89 d0                	mov    %edx,%eax
f010a35a:	01 c0                	add    %eax,%eax
f010a35c:	01 d0                	add    %edx,%eax
f010a35e:	c1 e0 03             	shl    $0x3,%eax
f010a361:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
f010a367:	8b 45 08             	mov    0x8(%ebp),%eax
f010a36a:	01 d0                	add    %edx,%eax
f010a36c:	83 c0 08             	add    $0x8,%eax
f010a36f:	85 c0                	test   %eax,%eax
f010a371:	75 17                	jne    f010a38a <program_segment_alloc_map_copy_workingset+0x18a>
f010a373:	83 ec 04             	sub    $0x4,%esp
f010a376:	68 85 36 13 f0       	push   $0xf0133685
f010a37b:	68 9f 02 00 00       	push   $0x29f
f010a380:	68 23 36 13 f0       	push   $0xf0133623
f010a385:	e8 26 5e ff ff       	call   f01001b0 <_panic>
f010a38a:	8b 45 08             	mov    0x8(%ebp),%eax
f010a38d:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f010a393:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a396:	89 d0                	mov    %edx,%eax
f010a398:	01 c0                	add    %eax,%eax
f010a39a:	01 d0                	add    %edx,%eax
f010a39c:	c1 e0 03             	shl    $0x3,%eax
f010a39f:	01 c8                	add    %ecx,%eax
f010a3a1:	05 c8 00 00 00       	add    $0xc8,%eax
f010a3a6:	8b 00                	mov    (%eax),%eax
f010a3a8:	85 c0                	test   %eax,%eax
f010a3aa:	74 41                	je     f010a3ed <program_segment_alloc_map_copy_workingset+0x1ed>
f010a3ac:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3af:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f010a3b5:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a3b8:	89 d0                	mov    %edx,%eax
f010a3ba:	01 c0                	add    %eax,%eax
f010a3bc:	01 d0                	add    %edx,%eax
f010a3be:	c1 e0 03             	shl    $0x3,%eax
f010a3c1:	01 c8                	add    %ecx,%eax
f010a3c3:	05 c8 00 00 00       	add    $0xc8,%eax
f010a3c8:	8b 10                	mov    (%eax),%edx
f010a3ca:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3cd:	8b 88 78 d5 01 00    	mov    0x1d578(%eax),%ecx
f010a3d3:	8b 5d 08             	mov    0x8(%ebp),%ebx
f010a3d6:	89 c8                	mov    %ecx,%eax
f010a3d8:	01 c0                	add    %eax,%eax
f010a3da:	01 c8                	add    %ecx,%eax
f010a3dc:	c1 e0 03             	shl    $0x3,%eax
f010a3df:	01 d8                	add    %ebx,%eax
f010a3e1:	05 cc 00 00 00       	add    $0xcc,%eax
f010a3e6:	8b 00                	mov    (%eax),%eax
f010a3e8:	89 42 14             	mov    %eax,0x14(%edx)
f010a3eb:	eb 27                	jmp    f010a414 <program_segment_alloc_map_copy_workingset+0x214>
f010a3ed:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3f0:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f010a3f6:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a3f9:	89 d0                	mov    %edx,%eax
f010a3fb:	01 c0                	add    %eax,%eax
f010a3fd:	01 d0                	add    %edx,%eax
f010a3ff:	c1 e0 03             	shl    $0x3,%eax
f010a402:	01 c8                	add    %ecx,%eax
f010a404:	05 cc 00 00 00       	add    $0xcc,%eax
f010a409:	8b 10                	mov    (%eax),%edx
f010a40b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a40e:	89 90 38 da 01 00    	mov    %edx,0x1da38(%eax)
f010a414:	8b 45 08             	mov    0x8(%ebp),%eax
f010a417:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f010a41d:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a420:	89 d0                	mov    %edx,%eax
f010a422:	01 c0                	add    %eax,%eax
f010a424:	01 d0                	add    %edx,%eax
f010a426:	c1 e0 03             	shl    $0x3,%eax
f010a429:	01 c8                	add    %ecx,%eax
f010a42b:	05 cc 00 00 00       	add    $0xcc,%eax
f010a430:	8b 00                	mov    (%eax),%eax
f010a432:	85 c0                	test   %eax,%eax
f010a434:	74 41                	je     f010a477 <program_segment_alloc_map_copy_workingset+0x277>
f010a436:	8b 45 08             	mov    0x8(%ebp),%eax
f010a439:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f010a43f:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a442:	89 d0                	mov    %edx,%eax
f010a444:	01 c0                	add    %eax,%eax
f010a446:	01 d0                	add    %edx,%eax
f010a448:	c1 e0 03             	shl    $0x3,%eax
f010a44b:	01 c8                	add    %ecx,%eax
f010a44d:	05 cc 00 00 00       	add    $0xcc,%eax
f010a452:	8b 10                	mov    (%eax),%edx
f010a454:	8b 45 08             	mov    0x8(%ebp),%eax
f010a457:	8b 88 78 d5 01 00    	mov    0x1d578(%eax),%ecx
f010a45d:	8b 5d 08             	mov    0x8(%ebp),%ebx
f010a460:	89 c8                	mov    %ecx,%eax
f010a462:	01 c0                	add    %eax,%eax
f010a464:	01 c8                	add    %ecx,%eax
f010a466:	c1 e0 03             	shl    $0x3,%eax
f010a469:	01 d8                	add    %ebx,%eax
f010a46b:	05 c8 00 00 00       	add    $0xc8,%eax
f010a470:	8b 00                	mov    (%eax),%eax
f010a472:	89 42 10             	mov    %eax,0x10(%edx)
f010a475:	eb 27                	jmp    f010a49e <program_segment_alloc_map_copy_workingset+0x29e>
f010a477:	8b 45 08             	mov    0x8(%ebp),%eax
f010a47a:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f010a480:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a483:	89 d0                	mov    %edx,%eax
f010a485:	01 c0                	add    %eax,%eax
f010a487:	01 d0                	add    %edx,%eax
f010a489:	c1 e0 03             	shl    $0x3,%eax
f010a48c:	01 c8                	add    %ecx,%eax
f010a48e:	05 c8 00 00 00       	add    $0xc8,%eax
f010a493:	8b 10                	mov    (%eax),%edx
f010a495:	8b 45 08             	mov    0x8(%ebp),%eax
f010a498:	89 90 34 da 01 00    	mov    %edx,0x1da34(%eax)
f010a49e:	8b 45 08             	mov    0x8(%ebp),%eax
f010a4a1:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f010a4a7:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a4aa:	89 d0                	mov    %edx,%eax
f010a4ac:	01 c0                	add    %eax,%eax
f010a4ae:	01 d0                	add    %edx,%eax
f010a4b0:	c1 e0 03             	shl    $0x3,%eax
f010a4b3:	01 c8                	add    %ecx,%eax
f010a4b5:	05 c8 00 00 00       	add    $0xc8,%eax
f010a4ba:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010a4c0:	8b 45 08             	mov    0x8(%ebp),%eax
f010a4c3:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f010a4c9:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a4cc:	89 d0                	mov    %edx,%eax
f010a4ce:	01 c0                	add    %eax,%eax
f010a4d0:	01 d0                	add    %edx,%eax
f010a4d2:	c1 e0 03             	shl    $0x3,%eax
f010a4d5:	01 c8                	add    %ecx,%eax
f010a4d7:	05 cc 00 00 00       	add    $0xcc,%eax
f010a4dc:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010a4e2:	8b 45 08             	mov    0x8(%ebp),%eax
f010a4e5:	8b 80 40 da 01 00    	mov    0x1da40(%eax),%eax
f010a4eb:	8d 50 ff             	lea    -0x1(%eax),%edx
f010a4ee:	8b 45 08             	mov    0x8(%ebp),%eax
f010a4f1:	89 90 40 da 01 00    	mov    %edx,0x1da40(%eax)
			//Always leave 1 page in Active list for the stack
			if (LIST_SIZE(&(e->ActiveList)) < e->ActiveListSize - 1)
f010a4f7:	8b 45 08             	mov    0x8(%ebp),%eax
f010a4fa:	8b 90 50 da 01 00    	mov    0x1da50(%eax),%edx
f010a500:	8b 45 08             	mov    0x8(%ebp),%eax
f010a503:	8b 80 64 da 01 00    	mov    0x1da64(%eax),%eax
f010a509:	48                   	dec    %eax
f010a50a:	39 c2                	cmp    %eax,%edx
f010a50c:	0f 83 37 01 00 00    	jae    f010a649 <program_segment_alloc_map_copy_workingset+0x449>
			{
				LIST_INSERT_HEAD(&(e->ActiveList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f010a512:	8b 45 08             	mov    0x8(%ebp),%eax
f010a515:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f010a51b:	89 d0                	mov    %edx,%eax
f010a51d:	01 c0                	add    %eax,%eax
f010a51f:	01 d0                	add    %edx,%eax
f010a521:	c1 e0 03             	shl    $0x3,%eax
f010a524:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
f010a52a:	8b 45 08             	mov    0x8(%ebp),%eax
f010a52d:	01 d0                	add    %edx,%eax
f010a52f:	83 c0 08             	add    $0x8,%eax
f010a532:	85 c0                	test   %eax,%eax
f010a534:	75 17                	jne    f010a54d <program_segment_alloc_map_copy_workingset+0x34d>
f010a536:	83 ec 04             	sub    $0x4,%esp
f010a539:	68 a4 36 13 f0       	push   $0xf01336a4
f010a53e:	68 a3 02 00 00       	push   $0x2a3
f010a543:	68 23 36 13 f0       	push   $0xf0133623
f010a548:	e8 63 5c ff ff       	call   f01001b0 <_panic>
f010a54d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a550:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f010a556:	8b 45 08             	mov    0x8(%ebp),%eax
f010a559:	8b 88 44 da 01 00    	mov    0x1da44(%eax),%ecx
f010a55f:	8b 5d 08             	mov    0x8(%ebp),%ebx
f010a562:	89 d0                	mov    %edx,%eax
f010a564:	01 c0                	add    %eax,%eax
f010a566:	01 d0                	add    %edx,%eax
f010a568:	c1 e0 03             	shl    $0x3,%eax
f010a56b:	01 d8                	add    %ebx,%eax
f010a56d:	05 c8 00 00 00       	add    $0xc8,%eax
f010a572:	89 08                	mov    %ecx,(%eax)
f010a574:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a577:	89 d0                	mov    %edx,%eax
f010a579:	01 c0                	add    %eax,%eax
f010a57b:	01 d0                	add    %edx,%eax
f010a57d:	c1 e0 03             	shl    $0x3,%eax
f010a580:	01 c8                	add    %ecx,%eax
f010a582:	05 c8 00 00 00       	add    $0xc8,%eax
f010a587:	8b 00                	mov    (%eax),%eax
f010a589:	85 c0                	test   %eax,%eax
f010a58b:	74 2e                	je     f010a5bb <program_segment_alloc_map_copy_workingset+0x3bb>
f010a58d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a590:	8b 90 44 da 01 00    	mov    0x1da44(%eax),%edx
f010a596:	8b 45 08             	mov    0x8(%ebp),%eax
f010a599:	8b 88 78 d5 01 00    	mov    0x1d578(%eax),%ecx
f010a59f:	89 c8                	mov    %ecx,%eax
f010a5a1:	01 c0                	add    %eax,%eax
f010a5a3:	01 c8                	add    %ecx,%eax
f010a5a5:	c1 e0 03             	shl    $0x3,%eax
f010a5a8:	8d 88 b0 00 00 00    	lea    0xb0(%eax),%ecx
f010a5ae:	8b 45 08             	mov    0x8(%ebp),%eax
f010a5b1:	01 c8                	add    %ecx,%eax
f010a5b3:	83 c0 08             	add    $0x8,%eax
f010a5b6:	89 42 14             	mov    %eax,0x14(%edx)
f010a5b9:	eb 29                	jmp    f010a5e4 <program_segment_alloc_map_copy_workingset+0x3e4>
f010a5bb:	8b 45 08             	mov    0x8(%ebp),%eax
f010a5be:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f010a5c4:	89 d0                	mov    %edx,%eax
f010a5c6:	01 c0                	add    %eax,%eax
f010a5c8:	01 d0                	add    %edx,%eax
f010a5ca:	c1 e0 03             	shl    $0x3,%eax
f010a5cd:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
f010a5d3:	8b 45 08             	mov    0x8(%ebp),%eax
f010a5d6:	01 d0                	add    %edx,%eax
f010a5d8:	8d 50 08             	lea    0x8(%eax),%edx
f010a5db:	8b 45 08             	mov    0x8(%ebp),%eax
f010a5de:	89 90 48 da 01 00    	mov    %edx,0x1da48(%eax)
f010a5e4:	8b 45 08             	mov    0x8(%ebp),%eax
f010a5e7:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f010a5ed:	89 d0                	mov    %edx,%eax
f010a5ef:	01 c0                	add    %eax,%eax
f010a5f1:	01 d0                	add    %edx,%eax
f010a5f3:	c1 e0 03             	shl    $0x3,%eax
f010a5f6:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
f010a5fc:	8b 45 08             	mov    0x8(%ebp),%eax
f010a5ff:	01 d0                	add    %edx,%eax
f010a601:	8d 50 08             	lea    0x8(%eax),%edx
f010a604:	8b 45 08             	mov    0x8(%ebp),%eax
f010a607:	89 90 44 da 01 00    	mov    %edx,0x1da44(%eax)
f010a60d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a610:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f010a616:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a619:	89 d0                	mov    %edx,%eax
f010a61b:	01 c0                	add    %eax,%eax
f010a61d:	01 d0                	add    %edx,%eax
f010a61f:	c1 e0 03             	shl    $0x3,%eax
f010a622:	01 c8                	add    %ecx,%eax
f010a624:	05 cc 00 00 00       	add    $0xcc,%eax
f010a629:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010a62f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a632:	8b 80 50 da 01 00    	mov    0x1da50(%eax),%eax
f010a638:	8d 50 01             	lea    0x1(%eax),%edx
f010a63b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a63e:	89 90 50 da 01 00    	mov    %edx,0x1da50(%eax)
f010a644:	e9 32 01 00 00       	jmp    f010a77b <program_segment_alloc_map_copy_workingset+0x57b>
			}
			else
			{
				//Add to LRU Second list
				LIST_INSERT_HEAD(&(e->SecondList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f010a649:	8b 45 08             	mov    0x8(%ebp),%eax
f010a64c:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f010a652:	89 d0                	mov    %edx,%eax
f010a654:	01 c0                	add    %eax,%eax
f010a656:	01 d0                	add    %edx,%eax
f010a658:	c1 e0 03             	shl    $0x3,%eax
f010a65b:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
f010a661:	8b 45 08             	mov    0x8(%ebp),%eax
f010a664:	01 d0                	add    %edx,%eax
f010a666:	83 c0 08             	add    $0x8,%eax
f010a669:	85 c0                	test   %eax,%eax
f010a66b:	75 17                	jne    f010a684 <program_segment_alloc_map_copy_workingset+0x484>
f010a66d:	83 ec 04             	sub    $0x4,%esp
f010a670:	68 a4 36 13 f0       	push   $0xf01336a4
f010a675:	68 a8 02 00 00       	push   $0x2a8
f010a67a:	68 23 36 13 f0       	push   $0xf0133623
f010a67f:	e8 2c 5b ff ff       	call   f01001b0 <_panic>
f010a684:	8b 45 08             	mov    0x8(%ebp),%eax
f010a687:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f010a68d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a690:	8b 88 54 da 01 00    	mov    0x1da54(%eax),%ecx
f010a696:	8b 5d 08             	mov    0x8(%ebp),%ebx
f010a699:	89 d0                	mov    %edx,%eax
f010a69b:	01 c0                	add    %eax,%eax
f010a69d:	01 d0                	add    %edx,%eax
f010a69f:	c1 e0 03             	shl    $0x3,%eax
f010a6a2:	01 d8                	add    %ebx,%eax
f010a6a4:	05 c8 00 00 00       	add    $0xc8,%eax
f010a6a9:	89 08                	mov    %ecx,(%eax)
f010a6ab:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a6ae:	89 d0                	mov    %edx,%eax
f010a6b0:	01 c0                	add    %eax,%eax
f010a6b2:	01 d0                	add    %edx,%eax
f010a6b4:	c1 e0 03             	shl    $0x3,%eax
f010a6b7:	01 c8                	add    %ecx,%eax
f010a6b9:	05 c8 00 00 00       	add    $0xc8,%eax
f010a6be:	8b 00                	mov    (%eax),%eax
f010a6c0:	85 c0                	test   %eax,%eax
f010a6c2:	74 2e                	je     f010a6f2 <program_segment_alloc_map_copy_workingset+0x4f2>
f010a6c4:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6c7:	8b 90 54 da 01 00    	mov    0x1da54(%eax),%edx
f010a6cd:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6d0:	8b 88 78 d5 01 00    	mov    0x1d578(%eax),%ecx
f010a6d6:	89 c8                	mov    %ecx,%eax
f010a6d8:	01 c0                	add    %eax,%eax
f010a6da:	01 c8                	add    %ecx,%eax
f010a6dc:	c1 e0 03             	shl    $0x3,%eax
f010a6df:	8d 88 b0 00 00 00    	lea    0xb0(%eax),%ecx
f010a6e5:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6e8:	01 c8                	add    %ecx,%eax
f010a6ea:	83 c0 08             	add    $0x8,%eax
f010a6ed:	89 42 14             	mov    %eax,0x14(%edx)
f010a6f0:	eb 29                	jmp    f010a71b <program_segment_alloc_map_copy_workingset+0x51b>
f010a6f2:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6f5:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f010a6fb:	89 d0                	mov    %edx,%eax
f010a6fd:	01 c0                	add    %eax,%eax
f010a6ff:	01 d0                	add    %edx,%eax
f010a701:	c1 e0 03             	shl    $0x3,%eax
f010a704:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
f010a70a:	8b 45 08             	mov    0x8(%ebp),%eax
f010a70d:	01 d0                	add    %edx,%eax
f010a70f:	8d 50 08             	lea    0x8(%eax),%edx
f010a712:	8b 45 08             	mov    0x8(%ebp),%eax
f010a715:	89 90 58 da 01 00    	mov    %edx,0x1da58(%eax)
f010a71b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a71e:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f010a724:	89 d0                	mov    %edx,%eax
f010a726:	01 c0                	add    %eax,%eax
f010a728:	01 d0                	add    %edx,%eax
f010a72a:	c1 e0 03             	shl    $0x3,%eax
f010a72d:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
f010a733:	8b 45 08             	mov    0x8(%ebp),%eax
f010a736:	01 d0                	add    %edx,%eax
f010a738:	8d 50 08             	lea    0x8(%eax),%edx
f010a73b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a73e:	89 90 54 da 01 00    	mov    %edx,0x1da54(%eax)
f010a744:	8b 45 08             	mov    0x8(%ebp),%eax
f010a747:	8b 90 78 d5 01 00    	mov    0x1d578(%eax),%edx
f010a74d:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a750:	89 d0                	mov    %edx,%eax
f010a752:	01 c0                	add    %eax,%eax
f010a754:	01 d0                	add    %edx,%eax
f010a756:	c1 e0 03             	shl    $0x3,%eax
f010a759:	01 c8                	add    %ecx,%eax
f010a75b:	05 cc 00 00 00       	add    $0xcc,%eax
f010a760:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010a766:	8b 45 08             	mov    0x8(%ebp),%eax
f010a769:	8b 80 60 da 01 00    	mov    0x1da60(%eax),%eax
f010a76f:	8d 50 01             	lea    0x1(%eax),%edx
f010a772:	8b 45 08             	mov    0x8(%ebp),%eax
f010a775:	89 90 60 da 01 00    	mov    %edx,0x1da60(%eax)
		else
		{
			e->page_last_WS_element = NULL;
		}
#else
		e->page_last_WS_index ++;
f010a77b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a77e:	8b 80 78 d5 01 00    	mov    0x1d578(%eax),%eax
f010a784:	8d 50 01             	lea    0x1(%eax),%edx
f010a787:	8b 45 08             	mov    0x8(%ebp),%eax
f010a78a:	89 90 78 d5 01 00    	mov    %edx,0x1d578(%eax)
		e->page_last_WS_index %= (e->page_WS_max_size);
f010a790:	8b 45 08             	mov    0x8(%ebp),%eax
f010a793:	8b 80 78 d5 01 00    	mov    0x1d578(%eax),%eax
f010a799:	8b 55 08             	mov    0x8(%ebp),%edx
f010a79c:	8b 8a 7c d5 01 00    	mov    0x1d57c(%edx),%ecx
f010a7a2:	ba 00 00 00 00       	mov    $0x0,%edx
f010a7a7:	f7 f1                	div    %ecx
f010a7a9:	8b 45 08             	mov    0x8(%ebp),%eax
f010a7ac:	89 90 78 d5 01 00    	mov    %edx,0x1d578(%eax)
#endif
		//if a new table is created during the mapping, add it to the table working set
		if(PDX(iVA) != (*lastTableNumber))
f010a7b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a7b5:	c1 e8 16             	shr    $0x16,%eax
f010a7b8:	89 c2                	mov    %eax,%edx
f010a7ba:	8b 45 18             	mov    0x18(%ebp),%eax
f010a7bd:	8b 00                	mov    (%eax),%eax
f010a7bf:	39 c2                	cmp    %eax,%edx
f010a7c1:	0f 84 d3 00 00 00    	je     f010a89a <program_segment_alloc_map_copy_workingset+0x69a>
		{
			e->__ptr_tws[e->table_last_WS_index].virtual_address = ROUNDDOWN(iVA, PAGE_SIZE*1024);;
f010a7c7:	8b 45 08             	mov    0x8(%ebp),%eax
f010a7ca:	8b 90 30 da 01 00    	mov    0x1da30(%eax),%edx
f010a7d0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a7d3:	89 45 cc             	mov    %eax,-0x34(%ebp)
f010a7d6:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010a7d9:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f010a7de:	89 c1                	mov    %eax,%ecx
f010a7e0:	8b 5d 08             	mov    0x8(%ebp),%ebx
f010a7e3:	89 d0                	mov    %edx,%eax
f010a7e5:	01 c0                	add    %eax,%eax
f010a7e7:	01 d0                	add    %edx,%eax
f010a7e9:	c1 e0 03             	shl    $0x3,%eax
f010a7ec:	01 d8                	add    %ebx,%eax
f010a7ee:	05 80 d5 01 00       	add    $0x1d580,%eax
f010a7f3:	89 08                	mov    %ecx,(%eax)
			e->__ptr_tws[e->table_last_WS_index].empty = 0;
f010a7f5:	8b 45 08             	mov    0x8(%ebp),%eax
f010a7f8:	8b 90 30 da 01 00    	mov    0x1da30(%eax),%edx
f010a7fe:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a801:	89 d0                	mov    %edx,%eax
f010a803:	01 c0                	add    %eax,%eax
f010a805:	01 d0                	add    %edx,%eax
f010a807:	c1 e0 03             	shl    $0x3,%eax
f010a80a:	01 c8                	add    %ecx,%eax
f010a80c:	05 84 d5 01 00       	add    $0x1d584,%eax
f010a811:	c6 00 00             	movb   $0x0,(%eax)
			e->__ptr_tws[e->table_last_WS_index].time_stamp = 0x00000000;
f010a814:	8b 45 08             	mov    0x8(%ebp),%eax
f010a817:	8b 90 30 da 01 00    	mov    0x1da30(%eax),%edx
f010a81d:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a820:	89 d0                	mov    %edx,%eax
f010a822:	01 c0                	add    %eax,%eax
f010a824:	01 d0                	add    %edx,%eax
f010a826:	c1 e0 03             	shl    $0x3,%eax
f010a829:	01 c8                	add    %ecx,%eax
f010a82b:	05 88 d5 01 00       	add    $0x1d588,%eax
f010a830:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			e->table_last_WS_index ++;
f010a836:	8b 45 08             	mov    0x8(%ebp),%eax
f010a839:	8b 80 30 da 01 00    	mov    0x1da30(%eax),%eax
f010a83f:	8d 50 01             	lea    0x1(%eax),%edx
f010a842:	8b 45 08             	mov    0x8(%ebp),%eax
f010a845:	89 90 30 da 01 00    	mov    %edx,0x1da30(%eax)
			e->table_last_WS_index %= __TWS_MAX_SIZE;
f010a84b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a84e:	8b 80 30 da 01 00    	mov    0x1da30(%eax),%eax
f010a854:	b9 32 00 00 00       	mov    $0x32,%ecx
f010a859:	ba 00 00 00 00       	mov    $0x0,%edx
f010a85e:	f7 f1                	div    %ecx
f010a860:	8b 45 08             	mov    0x8(%ebp),%eax
f010a863:	89 90 30 da 01 00    	mov    %edx,0x1da30(%eax)
			if (e->table_last_WS_index == 0)
f010a869:	8b 45 08             	mov    0x8(%ebp),%eax
f010a86c:	8b 80 30 da 01 00    	mov    0x1da30(%eax),%eax
f010a872:	85 c0                	test   %eax,%eax
f010a874:	75 17                	jne    f010a88d <program_segment_alloc_map_copy_workingset+0x68d>
				panic("\nenv_create: Table working set become FULL during the application loading. Please increase the table working set size to be able to load the program successfully\n");
f010a876:	83 ec 04             	sub    $0x4,%esp
f010a879:	68 d8 36 13 f0       	push   $0xf01336d8
f010a87e:	68 c3 02 00 00       	push   $0x2c3
f010a883:	68 23 36 13 f0       	push   $0xf0133623
f010a888:	e8 23 59 ff ff       	call   f01001b0 <_panic>
			(*lastTableNumber) = PDX(iVA);
f010a88d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a890:	c1 e8 16             	shr    $0x16,%eax
f010a893:	89 c2                	mov    %eax,%edx
f010a895:	8b 45 18             	mov    0x18(%ebp),%eax
f010a898:	89 10                	mov    %edx,(%eax)
		}

		/// TAKE CARE !!!! this was an destructive error
		/// DON'T MAKE IT " *allocated_pages ++ " EVER !
		(*allocated_pages) ++;
f010a89a:	8b 45 10             	mov    0x10(%ebp),%eax
f010a89d:	8b 00                	mov    (%eax),%eax
f010a89f:	8d 50 01             	lea    0x1(%eax),%edx
f010a8a2:	8b 45 10             	mov    0x10(%ebp),%eax
f010a8a5:	89 10                	mov    %edx,(%eax)
	*allocated_pages = 0;
	/*2015*/// Load max of 6 pages only for the segment that start with va = 200000 [EXCEPT tpp]
	if (iVA == 0x200000 && strcmp(e->prog_name, "tpp")!=0)
		remaining_ws_pages = remaining_ws_pages < 6 ? remaining_ws_pages:6 ;
	/*==========================================================================================*/
	for (; iVA < end_vaddr && i<remaining_ws_pages; i++, iVA += PAGE_SIZE)
f010a8a7:	ff 45 f0             	incl   -0x10(%ebp)
f010a8aa:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f010a8b1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a8b4:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f010a8b7:	73 0c                	jae    f010a8c5 <program_segment_alloc_map_copy_workingset+0x6c5>
f010a8b9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010a8bc:	3b 45 14             	cmp    0x14(%ebp),%eax
f010a8bf:	0f 82 e8 f9 ff ff    	jb     f010a2ad <program_segment_alloc_map_copy_workingset+0xad>
		/// TAKE CARE !!!! this was an destructive error
		/// DON'T MAKE IT " *allocated_pages ++ " EVER !
		(*allocated_pages) ++;
	}

	uint8 *src_ptr = (uint8 *)(seg->ptr_start) ;
f010a8c5:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a8c8:	8b 00                	mov    (%eax),%eax
f010a8ca:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;
f010a8cd:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a8d0:	8b 40 0c             	mov    0xc(%eax),%eax
f010a8d3:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f010a8d6:	eb 10                	jmp    f010a8e8 <program_segment_alloc_map_copy_workingset+0x6e8>
			((uint32)dst_ptr< ((uint32)vaddr+ seg->size_in_file)) )
	{
		*dst_ptr = *src_ptr ;
f010a8d8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010a8db:	8a 10                	mov    (%eax),%dl
f010a8dd:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010a8e0:	88 10                	mov    %dl,(%eax)
		dst_ptr++ ;
f010a8e2:	ff 45 e8             	incl   -0x18(%ebp)
		src_ptr++ ;
f010a8e5:	ff 45 ec             	incl   -0x14(%ebp)
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f010a8e8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010a8eb:	89 45 c8             	mov    %eax,-0x38(%ebp)
f010a8ee:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010a8f1:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010a8f6:	89 c2                	mov    %eax,%edx
f010a8f8:	8b 45 10             	mov    0x10(%ebp),%eax
f010a8fb:	8b 00                	mov    (%eax),%eax
f010a8fd:	c1 e0 0c             	shl    $0xc,%eax
f010a900:	01 c2                	add    %eax,%edx
f010a902:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010a905:	39 c2                	cmp    %eax,%edx
f010a907:	76 1d                	jbe    f010a926 <program_segment_alloc_map_copy_workingset+0x726>
			((uint32)dst_ptr< ((uint32)vaddr+ seg->size_in_file)) )
f010a909:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a90c:	8b 50 04             	mov    0x4(%eax),%edx
f010a90f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010a912:	01 c2                	add    %eax,%edx
f010a914:	8b 45 e8             	mov    -0x18(%ebp),%eax
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f010a917:	39 c2                	cmp    %eax,%edx
f010a919:	77 bd                	ja     f010a8d8 <program_segment_alloc_map_copy_workingset+0x6d8>
		*dst_ptr = *src_ptr ;
		dst_ptr++ ;
		src_ptr++ ;
	}
	LOG_STRING("zeroing remaining page space");
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) )
f010a91b:	eb 09                	jmp    f010a926 <program_segment_alloc_map_copy_workingset+0x726>
	{
		*dst_ptr = 0;
f010a91d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010a920:	c6 00 00             	movb   $0x0,(%eax)
		dst_ptr++ ;
f010a923:	ff 45 e8             	incl   -0x18(%ebp)
		*dst_ptr = *src_ptr ;
		dst_ptr++ ;
		src_ptr++ ;
	}
	LOG_STRING("zeroing remaining page space");
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) )
f010a926:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010a929:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f010a92c:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010a92f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010a934:	89 c2                	mov    %eax,%edx
f010a936:	8b 45 10             	mov    0x10(%ebp),%eax
f010a939:	8b 00                	mov    (%eax),%eax
f010a93b:	c1 e0 0c             	shl    $0xc,%eax
f010a93e:	01 c2                	add    %eax,%edx
f010a940:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010a943:	39 c2                	cmp    %eax,%edx
f010a945:	77 d6                	ja     f010a91d <program_segment_alloc_map_copy_workingset+0x71d>
	//	{
	//		uint32 *ptr_page_table;
	//		get_page_table(e->env_pgdir, iVA, 1, &ptr_page_table);
	//	}
	//	LOG_STRING("page tables created successfully");
	return 0;
f010a947:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010a94c:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010a94f:	c9                   	leave  
f010a950:	c3                   	ret    

f010a951 <create_user_directory>:

//==================================================
// 6) DYNAMICALLY ALLOCATE SPACE FOR USER DIRECTORY:
//==================================================
void * create_user_directory()
{
f010a951:	55                   	push   %ebp
f010a952:	89 e5                	mov    %esp,%ebp
f010a954:	83 ec 18             	sub    $0x18,%esp
	//panic("create_user_directory() is not implemented yet...!!");

	//Use kmalloc() to allocate a new directory

	//change this "return" according to your answer
	uint32* ptr_user_page_directory = kmalloc(PAGE_SIZE);
f010a957:	83 ec 0c             	sub    $0xc,%esp
f010a95a:	68 00 10 00 00       	push   $0x1000
f010a95f:	e8 ef d8 ff ff       	call   f0108253 <kmalloc>
f010a964:	83 c4 10             	add    $0x10,%esp
f010a967:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(ptr_user_page_directory == NULL)
f010a96a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010a96e:	75 17                	jne    f010a987 <create_user_directory+0x36>
	{
		panic("NOT ENOUGH KERNEL HEAP SPACE");
f010a970:	83 ec 04             	sub    $0x4,%esp
f010a973:	68 7b 37 13 f0       	push   $0xf013377b
f010a978:	68 ff 02 00 00       	push   $0x2ff
f010a97d:	68 23 36 13 f0       	push   $0xf0133623
f010a982:	e8 29 58 ff ff       	call   f01001b0 <_panic>
	}
	return ptr_user_page_directory;
f010a987:	8b 45 f4             	mov    -0xc(%ebp),%eax
	//return 0;
}
f010a98a:	c9                   	leave  
f010a98b:	c3                   	ret    

f010a98c <initialize_uheap_dynamic_allocator>:

//===============================================
// 7) INITIALIZE DYNAMIC ALLOCATOR OF UHEAP:
//===============================================
void initialize_uheap_dynamic_allocator(struct Env* e, uint32 daStart, uint32 daLimit)
{
f010a98c:	55                   	push   %ebp
f010a98d:	89 e5                	mov    %esp,%ebp
	//TODO: [PROJECT'23.MS2 - #07] [2] USER HEAP - initialize_uheap_dynamic_allocator()
	//Remember:
	//	1) there's no initial allocations for the dynamic allocator of the user heap (=0)
	//	2) call the initialize_dynamic_allocator(..) to complete the initialization
	//panic("not implemented yet");
}
f010a98f:	90                   	nop
f010a990:	5d                   	pop    %ebp
f010a991:	c3                   	ret    

f010a992 <initialize_environment>:
// and initialize the kernel portion of the new environment's address space.
// Do NOT (yet) map anything into the user portion
// of the environment's virtual address space.
//
void initialize_environment(struct Env* e, uint32* ptr_user_page_directory, unsigned int phys_user_page_directory)
{
f010a992:	55                   	push   %ebp
f010a993:	89 e5                	mov    %esp,%ebp
f010a995:	53                   	push   %ebx
f010a996:	83 ec 14             	sub    $0x14,%esp
	//panic("initialize_environment function is not completed yet") ;
	// [1] initialize the kernel portion of the new environment's address space.
	// [2] set e->env_pgdir and e->env_cr3 accordingly,
	int i;
	e->env_page_directory = ptr_user_page_directory;
f010a999:	8b 45 08             	mov    0x8(%ebp),%eax
f010a99c:	8b 55 0c             	mov    0xc(%ebp),%edx
f010a99f:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
	e->env_cr3 = phys_user_page_directory;
f010a9a5:	8b 45 08             	mov    0x8(%ebp),%eax
f010a9a8:	8b 55 10             	mov    0x10(%ebp),%edx
f010a9ab:	89 90 a0 00 00 00    	mov    %edx,0xa0(%eax)

	//[TODODONE]: copy the kernel area only (to avoid copying the currently shared objects)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
f010a9b1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010a9b8:	eb 1a                	jmp    f010a9d4 <initialize_environment+0x42>
	{
		e->env_page_directory[i] = 0 ;
f010a9ba:	8b 45 08             	mov    0x8(%ebp),%eax
f010a9bd:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010a9c3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a9c6:	c1 e2 02             	shl    $0x2,%edx
f010a9c9:	01 d0                	add    %edx,%eax
f010a9cb:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	int i;
	e->env_page_directory = ptr_user_page_directory;
	e->env_cr3 = phys_user_page_directory;

	//[TODODONE]: copy the kernel area only (to avoid copying the currently shared objects)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
f010a9d1:	ff 45 f4             	incl   -0xc(%ebp)
f010a9d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a9d7:	3d ba 03 00 00       	cmp    $0x3ba,%eax
f010a9dc:	76 dc                	jbe    f010a9ba <initialize_environment+0x28>
	{
		e->env_page_directory[i] = 0 ;
	}

	for (i = PDX(USER_TOP) ; i < 1024 ; i++)
f010a9de:	c7 45 f4 bb 03 00 00 	movl   $0x3bb,-0xc(%ebp)
f010a9e5:	eb 25                	jmp    f010aa0c <initialize_environment+0x7a>
	{
		e->env_page_directory[i] = ptr_page_directory[i] ;
f010a9e7:	8b 45 08             	mov    0x8(%ebp),%eax
f010a9ea:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010a9f0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a9f3:	c1 e2 02             	shl    $0x2,%edx
f010a9f6:	01 c2                	add    %eax,%edx
f010a9f8:	a1 30 ce 2b f0       	mov    0xf02bce30,%eax
f010a9fd:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f010aa00:	c1 e1 02             	shl    $0x2,%ecx
f010aa03:	01 c8                	add    %ecx,%eax
f010aa05:	8b 00                	mov    (%eax),%eax
f010aa07:	89 02                	mov    %eax,(%edx)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
	{
		e->env_page_directory[i] = 0 ;
	}

	for (i = PDX(USER_TOP) ; i < 1024 ; i++)
f010aa09:	ff 45 f4             	incl   -0xc(%ebp)
f010aa0c:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f010aa13:	7e d2                	jle    f010a9e7 <initialize_environment+0x55>
		LIST_INIT(&(e->page_WS_list));
		//share_pws_at_user_space(e);
	}
#else
	{
		uint32 env_index = (uint32)(e-envs);
f010aa15:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa18:	8b 15 70 41 25 f0    	mov    0xf0254170,%edx
f010aa1e:	29 d0                	sub    %edx,%eax
f010aa20:	c1 f8 05             	sar    $0x5,%eax
f010aa23:	89 c2                	mov    %eax,%edx
f010aa25:	89 d0                	mov    %edx,%eax
f010aa27:	c1 e0 03             	shl    $0x3,%eax
f010aa2a:	01 d0                	add    %edx,%eax
f010aa2c:	01 c0                	add    %eax,%eax
f010aa2e:	01 d0                	add    %edx,%eax
f010aa30:	c1 e0 06             	shl    $0x6,%eax
f010aa33:	01 d0                	add    %edx,%eax
f010aa35:	89 c1                	mov    %eax,%ecx
f010aa37:	c1 e1 04             	shl    $0x4,%ecx
f010aa3a:	01 c8                	add    %ecx,%eax
f010aa3c:	c1 e0 03             	shl    $0x3,%eax
f010aa3f:	01 d0                	add    %edx,%eax
f010aa41:	01 c0                	add    %eax,%eax
f010aa43:	01 d0                	add    %edx,%eax
f010aa45:	89 c1                	mov    %eax,%ecx
f010aa47:	c1 e1 04             	shl    $0x4,%ecx
f010aa4a:	01 c8                	add    %ecx,%eax
f010aa4c:	c1 e0 03             	shl    $0x3,%eax
f010aa4f:	01 d0                	add    %edx,%eax
f010aa51:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010aa58:	01 d0                	add    %edx,%eax
f010aa5a:	89 45 ec             	mov    %eax,-0x14(%ebp)
		e->__uptr_pws = (struct WorkingSetElement*) ( ((struct Env*)(UENVS+sizeof(struct Env)*env_index))->ptr_pageWorkingSet );
f010aa5d:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010aa60:	89 d0                	mov    %edx,%eax
f010aa62:	01 c0                	add    %eax,%eax
f010aa64:	01 d0                	add    %edx,%eax
f010aa66:	01 c0                	add    %eax,%eax
f010aa68:	01 d0                	add    %edx,%eax
f010aa6a:	c1 e0 02             	shl    $0x2,%eax
f010aa6d:	01 d0                	add    %edx,%eax
f010aa6f:	01 c0                	add    %eax,%eax
f010aa71:	01 d0                	add    %edx,%eax
f010aa73:	c1 e0 02             	shl    $0x2,%eax
f010aa76:	01 d0                	add    %edx,%eax
f010aa78:	c1 e0 02             	shl    $0x2,%eax
f010aa7b:	01 d0                	add    %edx,%eax
f010aa7d:	c1 e0 02             	shl    $0x2,%eax
f010aa80:	01 d0                	add    %edx,%eax
f010aa82:	c1 e0 05             	shl    $0x5,%eax
f010aa85:	2d 00 00 40 11       	sub    $0x11400000,%eax
f010aa8a:	8d 90 b8 00 00 00    	lea    0xb8(%eax),%edx
f010aa90:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa93:	89 90 6c da 01 00    	mov    %edx,0x1da6c(%eax)
#endif


	//2020
	// Add its elements to the "e->PageWorkingSetList"
	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f010aa99:	83 ec 0c             	sub    $0xc,%esp
f010aa9c:	6a 02                	push   $0x2
f010aa9e:	e8 18 32 00 00       	call   f010dcbb <isPageReplacmentAlgorithmLRU>
f010aaa3:	83 c4 10             	add    $0x10,%esp
f010aaa6:	85 c0                	test   %eax,%eax
f010aaa8:	0f 84 34 01 00 00    	je     f010abe2 <initialize_environment+0x250>
	{
#if USE_KHEAP == 1
		//panic("not handled yet");
#else
		for (int i = 0; i < e->page_WS_max_size; ++i)
f010aaae:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010aab5:	e9 14 01 00 00       	jmp    f010abce <initialize_environment+0x23c>
		{
			LIST_INSERT_HEAD(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[i]));
f010aaba:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010aabd:	89 d0                	mov    %edx,%eax
f010aabf:	01 c0                	add    %eax,%eax
f010aac1:	01 d0                	add    %edx,%eax
f010aac3:	c1 e0 03             	shl    $0x3,%eax
f010aac6:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
f010aacc:	8b 45 08             	mov    0x8(%ebp),%eax
f010aacf:	01 d0                	add    %edx,%eax
f010aad1:	83 c0 08             	add    $0x8,%eax
f010aad4:	85 c0                	test   %eax,%eax
f010aad6:	75 17                	jne    f010aaef <initialize_environment+0x15d>
f010aad8:	83 ec 04             	sub    $0x4,%esp
f010aadb:	68 a4 36 13 f0       	push   $0xf01336a4
f010aae0:	68 45 03 00 00       	push   $0x345
f010aae5:	68 23 36 13 f0       	push   $0xf0133623
f010aaea:	e8 c1 56 ff ff       	call   f01001b0 <_panic>
f010aaef:	8b 45 08             	mov    0x8(%ebp),%eax
f010aaf2:	8b 90 34 da 01 00    	mov    0x1da34(%eax),%edx
f010aaf8:	8b 5d 08             	mov    0x8(%ebp),%ebx
f010aafb:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f010aafe:	89 c8                	mov    %ecx,%eax
f010ab00:	01 c0                	add    %eax,%eax
f010ab02:	01 c8                	add    %ecx,%eax
f010ab04:	c1 e0 03             	shl    $0x3,%eax
f010ab07:	01 d8                	add    %ebx,%eax
f010ab09:	05 c8 00 00 00       	add    $0xc8,%eax
f010ab0e:	89 10                	mov    %edx,(%eax)
f010ab10:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010ab13:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010ab16:	89 d0                	mov    %edx,%eax
f010ab18:	01 c0                	add    %eax,%eax
f010ab1a:	01 d0                	add    %edx,%eax
f010ab1c:	c1 e0 03             	shl    $0x3,%eax
f010ab1f:	01 c8                	add    %ecx,%eax
f010ab21:	05 c8 00 00 00       	add    $0xc8,%eax
f010ab26:	8b 00                	mov    (%eax),%eax
f010ab28:	85 c0                	test   %eax,%eax
f010ab2a:	74 28                	je     f010ab54 <initialize_environment+0x1c2>
f010ab2c:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab2f:	8b 90 34 da 01 00    	mov    0x1da34(%eax),%edx
f010ab35:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f010ab38:	89 c8                	mov    %ecx,%eax
f010ab3a:	01 c0                	add    %eax,%eax
f010ab3c:	01 c8                	add    %ecx,%eax
f010ab3e:	c1 e0 03             	shl    $0x3,%eax
f010ab41:	8d 88 b0 00 00 00    	lea    0xb0(%eax),%ecx
f010ab47:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab4a:	01 c8                	add    %ecx,%eax
f010ab4c:	83 c0 08             	add    $0x8,%eax
f010ab4f:	89 42 14             	mov    %eax,0x14(%edx)
f010ab52:	eb 23                	jmp    f010ab77 <initialize_environment+0x1e5>
f010ab54:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010ab57:	89 d0                	mov    %edx,%eax
f010ab59:	01 c0                	add    %eax,%eax
f010ab5b:	01 d0                	add    %edx,%eax
f010ab5d:	c1 e0 03             	shl    $0x3,%eax
f010ab60:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
f010ab66:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab69:	01 d0                	add    %edx,%eax
f010ab6b:	8d 50 08             	lea    0x8(%eax),%edx
f010ab6e:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab71:	89 90 38 da 01 00    	mov    %edx,0x1da38(%eax)
f010ab77:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010ab7a:	89 d0                	mov    %edx,%eax
f010ab7c:	01 c0                	add    %eax,%eax
f010ab7e:	01 d0                	add    %edx,%eax
f010ab80:	c1 e0 03             	shl    $0x3,%eax
f010ab83:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
f010ab89:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab8c:	01 d0                	add    %edx,%eax
f010ab8e:	8d 50 08             	lea    0x8(%eax),%edx
f010ab91:	8b 45 08             	mov    0x8(%ebp),%eax
f010ab94:	89 90 34 da 01 00    	mov    %edx,0x1da34(%eax)
f010ab9a:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010ab9d:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010aba0:	89 d0                	mov    %edx,%eax
f010aba2:	01 c0                	add    %eax,%eax
f010aba4:	01 d0                	add    %edx,%eax
f010aba6:	c1 e0 03             	shl    $0x3,%eax
f010aba9:	01 c8                	add    %ecx,%eax
f010abab:	05 cc 00 00 00       	add    $0xcc,%eax
f010abb0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010abb6:	8b 45 08             	mov    0x8(%ebp),%eax
f010abb9:	8b 80 40 da 01 00    	mov    0x1da40(%eax),%eax
f010abbf:	8d 50 01             	lea    0x1(%eax),%edx
f010abc2:	8b 45 08             	mov    0x8(%ebp),%eax
f010abc5:	89 90 40 da 01 00    	mov    %edx,0x1da40(%eax)
	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
	{
#if USE_KHEAP == 1
		//panic("not handled yet");
#else
		for (int i = 0; i < e->page_WS_max_size; ++i)
f010abcb:	ff 45 f0             	incl   -0x10(%ebp)
f010abce:	8b 45 08             	mov    0x8(%ebp),%eax
f010abd1:	8b 90 7c d5 01 00    	mov    0x1d57c(%eax),%edx
f010abd7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010abda:	39 c2                	cmp    %eax,%edx
f010abdc:	0f 87 d8 fe ff ff    	ja     f010aaba <initialize_environment+0x128>
	}

	//initialize environment working set
#if USE_KHEAP
#else
	for(i=0; i< (e->page_WS_max_size); i++)
f010abe2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010abe9:	eb 54                	jmp    f010ac3f <initialize_environment+0x2ad>
	{
		e->ptr_pageWorkingSet[i].virtual_address = 0;
f010abeb:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010abee:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010abf1:	89 d0                	mov    %edx,%eax
f010abf3:	01 c0                	add    %eax,%eax
f010abf5:	01 d0                	add    %edx,%eax
f010abf7:	c1 e0 03             	shl    $0x3,%eax
f010abfa:	01 c8                	add    %ecx,%eax
f010abfc:	05 b8 00 00 00       	add    $0xb8,%eax
f010ac01:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->ptr_pageWorkingSet[i].empty = 1;
f010ac07:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010ac0a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ac0d:	89 d0                	mov    %edx,%eax
f010ac0f:	01 c0                	add    %eax,%eax
f010ac11:	01 d0                	add    %edx,%eax
f010ac13:	c1 e0 03             	shl    $0x3,%eax
f010ac16:	01 c8                	add    %ecx,%eax
f010ac18:	05 bc 00 00 00       	add    $0xbc,%eax
f010ac1d:	c6 00 01             	movb   $0x1,(%eax)
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
f010ac20:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010ac23:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ac26:	89 d0                	mov    %edx,%eax
f010ac28:	01 c0                	add    %eax,%eax
f010ac2a:	01 d0                	add    %edx,%eax
f010ac2c:	c1 e0 03             	shl    $0x3,%eax
f010ac2f:	01 c8                	add    %ecx,%eax
f010ac31:	05 c0 00 00 00       	add    $0xc0,%eax
f010ac36:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	}

	//initialize environment working set
#if USE_KHEAP
#else
	for(i=0; i< (e->page_WS_max_size); i++)
f010ac3c:	ff 45 f4             	incl   -0xc(%ebp)
f010ac3f:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac42:	8b 90 7c d5 01 00    	mov    0x1d57c(%eax),%edx
f010ac48:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ac4b:	39 c2                	cmp    %eax,%edx
f010ac4d:	77 9c                	ja     f010abeb <initialize_environment+0x259>
	{
		e->ptr_pageWorkingSet[i].virtual_address = 0;
		e->ptr_pageWorkingSet[i].empty = 1;
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
	}
	e->page_last_WS_index = 0;
f010ac4f:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac52:	c7 80 78 d5 01 00 00 	movl   $0x0,0x1d578(%eax)
f010ac59:	00 00 00 
#endif

	for(i=0; i< __TWS_MAX_SIZE; i++)
f010ac5c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010ac63:	eb 54                	jmp    f010acb9 <initialize_environment+0x327>
	{
		e->__ptr_tws[i].virtual_address = 0;
f010ac65:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010ac68:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ac6b:	89 d0                	mov    %edx,%eax
f010ac6d:	01 c0                	add    %eax,%eax
f010ac6f:	01 d0                	add    %edx,%eax
f010ac71:	c1 e0 03             	shl    $0x3,%eax
f010ac74:	01 c8                	add    %ecx,%eax
f010ac76:	05 80 d5 01 00       	add    $0x1d580,%eax
f010ac7b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->__ptr_tws[i].empty = 1;
f010ac81:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010ac84:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ac87:	89 d0                	mov    %edx,%eax
f010ac89:	01 c0                	add    %eax,%eax
f010ac8b:	01 d0                	add    %edx,%eax
f010ac8d:	c1 e0 03             	shl    $0x3,%eax
f010ac90:	01 c8                	add    %ecx,%eax
f010ac92:	05 84 d5 01 00       	add    $0x1d584,%eax
f010ac97:	c6 00 01             	movb   $0x1,(%eax)
		e->__ptr_tws[i].time_stamp = 0 ;
f010ac9a:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010ac9d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010aca0:	89 d0                	mov    %edx,%eax
f010aca2:	01 c0                	add    %eax,%eax
f010aca4:	01 d0                	add    %edx,%eax
f010aca6:	c1 e0 03             	shl    $0x3,%eax
f010aca9:	01 c8                	add    %ecx,%eax
f010acab:	05 88 d5 01 00       	add    $0x1d588,%eax
f010acb0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
	}
	e->page_last_WS_index = 0;
#endif

	for(i=0; i< __TWS_MAX_SIZE; i++)
f010acb6:	ff 45 f4             	incl   -0xc(%ebp)
f010acb9:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f010acbd:	7e a6                	jle    f010ac65 <initialize_environment+0x2d3>
		e->__ptr_tws[i].virtual_address = 0;
		e->__ptr_tws[i].empty = 1;
		e->__ptr_tws[i].time_stamp = 0 ;
	}

	e->table_last_WS_index = 0;
f010acbf:	8b 45 08             	mov    0x8(%ebp),%eax
f010acc2:	c7 80 30 da 01 00 00 	movl   $0x0,0x1da30(%eax)
f010acc9:	00 00 00 

	e->pageFaultsCounter=0;
f010accc:	8b 45 08             	mov    0x8(%ebp),%eax
f010accf:	c7 80 74 da 01 00 00 	movl   $0x0,0x1da74(%eax)
f010acd6:	00 00 00 
	e->tableFaultsCounter=0;
f010acd9:	8b 45 08             	mov    0x8(%ebp),%eax
f010acdc:	c7 80 78 da 01 00 00 	movl   $0x0,0x1da78(%eax)
f010ace3:	00 00 00 

	e->freeingFullWSCounter = 0;
f010ace6:	8b 45 08             	mov    0x8(%ebp),%eax
f010ace9:	c7 80 7c da 01 00 00 	movl   $0x0,0x1da7c(%eax)
f010acf0:	00 00 00 
	e->freeingScarceMemCounter = 0;
f010acf3:	8b 45 08             	mov    0x8(%ebp),%eax
f010acf6:	c7 80 80 da 01 00 00 	movl   $0x0,0x1da80(%eax)
f010acfd:	00 00 00 

	e->nModifiedPages=0;
f010ad00:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad03:	c7 80 84 da 01 00 00 	movl   $0x0,0x1da84(%eax)
f010ad0a:	00 00 00 
	e->nNotModifiedPages=0;
f010ad0d:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad10:	c7 80 88 da 01 00 00 	movl   $0x0,0x1da88(%eax)
f010ad17:	00 00 00 
	e->nClocks = 0;
f010ad1a:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad1d:	c7 80 9c da 01 00 00 	movl   $0x0,0x1da9c(%eax)
f010ad24:	00 00 00 

	//2020
	e->nPageIn = 0;
f010ad27:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad2a:	c7 80 90 da 01 00 00 	movl   $0x0,0x1da90(%eax)
f010ad31:	00 00 00 
	e->nPageOut = 0;
f010ad34:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad37:	c7 80 94 da 01 00 00 	movl   $0x0,0x1da94(%eax)
f010ad3e:	00 00 00 
	e->nNewPageAdded = 0;
f010ad41:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad44:	c7 80 98 da 01 00 00 	movl   $0x0,0x1da98(%eax)
f010ad4b:	00 00 00 

	//e->shared_free_address = USER_SHARED_MEM_START;

	/*2024*/
	//[PROJECT'23.DONE] call initialize_uheap_dynamic_allocator(...)
	initialize_uheap_dynamic_allocator(e, USER_HEAP_START, USER_HEAP_START + DYN_ALLOC_MAX_SIZE);
f010ad4e:	83 ec 04             	sub    $0x4,%esp
f010ad51:	68 00 00 00 82       	push   $0x82000000
f010ad56:	68 00 00 00 80       	push   $0x80000000
f010ad5b:	ff 75 08             	pushl  0x8(%ebp)
f010ad5e:	e8 29 fc ff ff       	call   f010a98c <initialize_uheap_dynamic_allocator>
f010ad63:	83 c4 10             	add    $0x10,%esp

	//Completes other environment initializations, (envID, status and most of registers)
	complete_environment_initialization(e);
f010ad66:	83 ec 0c             	sub    $0xc,%esp
f010ad69:	ff 75 08             	pushl  0x8(%ebp)
f010ad6c:	e8 09 00 00 00       	call   f010ad7a <complete_environment_initialization>
f010ad71:	83 c4 10             	add    $0x10,%esp
}
f010ad74:	90                   	nop
f010ad75:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010ad78:	c9                   	leave  
f010ad79:	c3                   	ret    

f010ad7a <complete_environment_initialization>:

//========================================================
// 9) COMPLETE INITIALIZATION [OTHERS: ID, REGS, STATUS...):
//========================================================
void complete_environment_initialization(struct Env* e)
{
f010ad7a:	55                   	push   %ebp
f010ad7b:	89 e5                	mov    %esp,%ebp
f010ad7d:	53                   	push   %ebx
f010ad7e:	83 ec 14             	sub    $0x14,%esp
	//VPT and UVPT map the env's own page table, with
	//different permissions.
	e->env_page_directory[PDX(VPT)]  = e->env_cr3 | PERM_PRESENT | PERM_WRITEABLE;
f010ad81:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad84:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010ad8a:	8d 90 fc 0e 00 00    	lea    0xefc(%eax),%edx
f010ad90:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad93:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f010ad99:	83 c8 03             	or     $0x3,%eax
f010ad9c:	89 02                	mov    %eax,(%edx)
	e->env_page_directory[PDX(UVPT)] = e->env_cr3 | PERM_PRESENT | PERM_USER;
f010ad9e:	8b 45 08             	mov    0x8(%ebp),%eax
f010ada1:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010ada7:	8d 90 f4 0e 00 00    	lea    0xef4(%eax),%edx
f010adad:	8b 45 08             	mov    0x8(%ebp),%eax
f010adb0:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f010adb6:	83 c8 05             	or     $0x5,%eax
f010adb9:	89 02                	mov    %eax,(%edx)

	// page file directory initialization
	e->disk_env_pgdir= 0;
f010adbb:	8b 45 08             	mov    0x8(%ebp),%eax
f010adbe:	c7 80 a8 00 00 00 00 	movl   $0x0,0xa8(%eax)
f010adc5:	00 00 00 
	e->disk_env_pgdir_PA= 0;
f010adc8:	8b 45 08             	mov    0x8(%ebp),%eax
f010adcb:	c7 80 ac 00 00 00 00 	movl   $0x0,0xac(%eax)
f010add2:	00 00 00 
	e->disk_env_tabledir = 0;
f010add5:	8b 45 08             	mov    0x8(%ebp),%eax
f010add8:	c7 80 b0 00 00 00 00 	movl   $0x0,0xb0(%eax)
f010addf:	00 00 00 
	e->disk_env_tabledir_PA = 0;
f010ade2:	8b 45 08             	mov    0x8(%ebp),%eax
f010ade5:	c7 80 b4 00 00 00 00 	movl   $0x0,0xb4(%eax)
f010adec:	00 00 00 

	int32 generation;
	// Generate an env_id for this environment.
	/*2022: UPDATED*/generation = (e->env_id + (1 << ENVGENSHIFT)) & ~(NEARPOW2NENV - 1);
f010adef:	8b 45 08             	mov    0x8(%ebp),%eax
f010adf2:	8b 58 4c             	mov    0x4c(%eax),%ebx
f010adf5:	83 ec 0c             	sub    $0xc,%esp
f010adf8:	6a 08                	push   $0x8
f010adfa:	e8 39 34 02 00       	call   f012e238 <log2_ceil>
f010adff:	83 c4 10             	add    $0x10,%esp
f010ae02:	ba 01 00 00 00       	mov    $0x1,%edx
f010ae07:	88 c1                	mov    %al,%cl
f010ae09:	d3 e2                	shl    %cl,%edx
f010ae0b:	89 d0                	mov    %edx,%eax
f010ae0d:	01 d8                	add    %ebx,%eax
f010ae0f:	89 c3                	mov    %eax,%ebx
f010ae11:	83 ec 0c             	sub    $0xc,%esp
f010ae14:	6a 08                	push   $0x8
f010ae16:	e8 e8 33 02 00       	call   f012e203 <nearest_pow2_ceil>
f010ae1b:	83 c4 10             	add    $0x10,%esp
f010ae1e:	f7 d8                	neg    %eax
f010ae20:	21 d8                	and    %ebx,%eax
f010ae22:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (generation <= 0)	// Don't create a negative env_id.
f010ae25:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010ae29:	7f 1b                	jg     f010ae46 <complete_environment_initialization+0xcc>
		generation = 1 << ENVGENSHIFT;
f010ae2b:	83 ec 0c             	sub    $0xc,%esp
f010ae2e:	6a 08                	push   $0x8
f010ae30:	e8 03 34 02 00       	call   f012e238 <log2_ceil>
f010ae35:	83 c4 10             	add    $0x10,%esp
f010ae38:	ba 01 00 00 00       	mov    $0x1,%edx
f010ae3d:	88 c1                	mov    %al,%cl
f010ae3f:	d3 e2                	shl    %cl,%edx
f010ae41:	89 d0                	mov    %edx,%eax
f010ae43:	89 45 f4             	mov    %eax,-0xc(%ebp)
	e->env_id = generation | (e - envs);
f010ae46:	8b 45 08             	mov    0x8(%ebp),%eax
f010ae49:	8b 15 70 41 25 f0    	mov    0xf0254170,%edx
f010ae4f:	29 d0                	sub    %edx,%eax
f010ae51:	c1 f8 05             	sar    $0x5,%eax
f010ae54:	89 c2                	mov    %eax,%edx
f010ae56:	89 d0                	mov    %edx,%eax
f010ae58:	c1 e0 03             	shl    $0x3,%eax
f010ae5b:	01 d0                	add    %edx,%eax
f010ae5d:	01 c0                	add    %eax,%eax
f010ae5f:	01 d0                	add    %edx,%eax
f010ae61:	c1 e0 06             	shl    $0x6,%eax
f010ae64:	01 d0                	add    %edx,%eax
f010ae66:	89 c1                	mov    %eax,%ecx
f010ae68:	c1 e1 04             	shl    $0x4,%ecx
f010ae6b:	01 c8                	add    %ecx,%eax
f010ae6d:	c1 e0 03             	shl    $0x3,%eax
f010ae70:	01 d0                	add    %edx,%eax
f010ae72:	01 c0                	add    %eax,%eax
f010ae74:	01 d0                	add    %edx,%eax
f010ae76:	89 c1                	mov    %eax,%ecx
f010ae78:	c1 e1 04             	shl    $0x4,%ecx
f010ae7b:	01 c8                	add    %ecx,%eax
f010ae7d:	c1 e0 03             	shl    $0x3,%eax
f010ae80:	01 d0                	add    %edx,%eax
f010ae82:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010ae89:	01 d0                	add    %edx,%eax
f010ae8b:	0b 45 f4             	or     -0xc(%ebp),%eax
f010ae8e:	89 c2                	mov    %eax,%edx
f010ae90:	8b 45 08             	mov    0x8(%ebp),%eax
f010ae93:	89 50 4c             	mov    %edx,0x4c(%eax)

	//cprintf("ENV_CREATE: envID = %d, orig index in envs = %d, calc index using ENVX = %d\n", e->env_id, (e - envs), ENVX(e->env_id));

	// Set the basic status variables.
	//2017====================================================
	if (curenv == NULL)
f010ae96:	a1 74 41 25 f0       	mov    0xf0254174,%eax
f010ae9b:	85 c0                	test   %eax,%eax
f010ae9d:	75 0c                	jne    f010aeab <complete_environment_initialization+0x131>
		e->env_parent_id = 0;//no parent;
f010ae9f:	8b 45 08             	mov    0x8(%ebp),%eax
f010aea2:	c7 40 50 00 00 00 00 	movl   $0x0,0x50(%eax)
f010aea9:	eb 0e                	jmp    f010aeb9 <complete_environment_initialization+0x13f>
	else
		e->env_parent_id = curenv->env_id;//curenv is the parent;
f010aeab:	a1 74 41 25 f0       	mov    0xf0254174,%eax
f010aeb0:	8b 50 4c             	mov    0x4c(%eax),%edx
f010aeb3:	8b 45 08             	mov    0x8(%ebp),%eax
f010aeb6:	89 50 50             	mov    %edx,0x50(%eax)
	//========================================================
	e->env_status = ENV_NEW;
f010aeb9:	8b 45 08             	mov    0x8(%ebp),%eax
f010aebc:	c7 40 54 04 00 00 00 	movl   $0x4,0x54(%eax)
	e->env_runs = 0;
f010aec3:	8b 45 08             	mov    0x8(%ebp),%eax
f010aec6:	c7 80 8c da 01 00 00 	movl   $0x0,0x1da8c(%eax)
f010aecd:	00 00 00 

	// Clear out all the saved register state,
	// to prevent the register values
	// of a prior environment inhabiting this Env structure
	// from "leaking" into our new environment.
	memset(&e->env_tf, 0, sizeof(e->env_tf));
f010aed0:	8b 45 08             	mov    0x8(%ebp),%eax
f010aed3:	83 ec 04             	sub    $0x4,%esp
f010aed6:	6a 44                	push   $0x44
f010aed8:	6a 00                	push   $0x0
f010aeda:	50                   	push   %eax
f010aedb:	e8 86 47 02 00       	call   f012f666 <memset>
f010aee0:	83 c4 10             	add    $0x10,%esp
	// GD_UD is the user data segment selector in the GDT, and
	// GD_UT is the user text segment selector (see inc/memlayout.h).
	// The low 2 bits of each segment register contains the
	// Requester Privilege Level (RPL); 3 means user mode.

	e->env_tf.tf_ds = GD_UD | 3;
f010aee3:	8b 45 08             	mov    0x8(%ebp),%eax
f010aee6:	66 c7 40 24 23 00    	movw   $0x23,0x24(%eax)
	e->env_tf.tf_es = GD_UD | 3;
f010aeec:	8b 45 08             	mov    0x8(%ebp),%eax
f010aeef:	66 c7 40 20 23 00    	movw   $0x23,0x20(%eax)
	e->env_tf.tf_ss = GD_UD | 3;
f010aef5:	8b 45 08             	mov    0x8(%ebp),%eax
f010aef8:	66 c7 40 40 23 00    	movw   $0x23,0x40(%eax)
	e->env_tf.tf_esp = (uint32*)USTACKTOP;
f010aefe:	8b 45 08             	mov    0x8(%ebp),%eax
f010af01:	c7 40 3c 00 e0 bf ee 	movl   $0xeebfe000,0x3c(%eax)
	e->env_tf.tf_cs = GD_UT | 3;
f010af08:	8b 45 08             	mov    0x8(%ebp),%eax
f010af0b:	66 c7 40 34 1b 00    	movw   $0x1b,0x34(%eax)
	e->env_tf.tf_eflags |= FL_IF;
f010af11:	8b 45 08             	mov    0x8(%ebp),%eax
f010af14:	8b 40 38             	mov    0x38(%eax),%eax
f010af17:	80 cc 02             	or     $0x2,%ah
f010af1a:	89 c2                	mov    %eax,%edx
f010af1c:	8b 45 08             	mov    0x8(%ebp),%eax
f010af1f:	89 50 38             	mov    %edx,0x38(%eax)

	// You will set e->env_tf.tf_eip later.

	// commit the allocation
	LIST_REMOVE(&env_free_list ,e);
f010af22:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010af26:	75 17                	jne    f010af3f <complete_environment_initialization+0x1c5>
f010af28:	83 ec 04             	sub    $0x4,%esp
f010af2b:	68 85 36 13 f0       	push   $0xf0133685
f010af30:	68 b1 03 00 00       	push   $0x3b1
f010af35:	68 23 36 13 f0       	push   $0xf0133623
f010af3a:	e8 71 52 ff ff       	call   f01001b0 <_panic>
f010af3f:	8b 45 08             	mov    0x8(%ebp),%eax
f010af42:	8b 40 44             	mov    0x44(%eax),%eax
f010af45:	85 c0                	test   %eax,%eax
f010af47:	74 11                	je     f010af5a <complete_environment_initialization+0x1e0>
f010af49:	8b 45 08             	mov    0x8(%ebp),%eax
f010af4c:	8b 40 44             	mov    0x44(%eax),%eax
f010af4f:	8b 55 08             	mov    0x8(%ebp),%edx
f010af52:	8b 52 48             	mov    0x48(%edx),%edx
f010af55:	89 50 48             	mov    %edx,0x48(%eax)
f010af58:	eb 0b                	jmp    f010af65 <complete_environment_initialization+0x1eb>
f010af5a:	8b 45 08             	mov    0x8(%ebp),%eax
f010af5d:	8b 40 48             	mov    0x48(%eax),%eax
f010af60:	a3 7c 41 25 f0       	mov    %eax,0xf025417c
f010af65:	8b 45 08             	mov    0x8(%ebp),%eax
f010af68:	8b 40 48             	mov    0x48(%eax),%eax
f010af6b:	85 c0                	test   %eax,%eax
f010af6d:	74 11                	je     f010af80 <complete_environment_initialization+0x206>
f010af6f:	8b 45 08             	mov    0x8(%ebp),%eax
f010af72:	8b 40 48             	mov    0x48(%eax),%eax
f010af75:	8b 55 08             	mov    0x8(%ebp),%edx
f010af78:	8b 52 44             	mov    0x44(%edx),%edx
f010af7b:	89 50 44             	mov    %edx,0x44(%eax)
f010af7e:	eb 0b                	jmp    f010af8b <complete_environment_initialization+0x211>
f010af80:	8b 45 08             	mov    0x8(%ebp),%eax
f010af83:	8b 40 44             	mov    0x44(%eax),%eax
f010af86:	a3 78 41 25 f0       	mov    %eax,0xf0254178
f010af8b:	8b 45 08             	mov    0x8(%ebp),%eax
f010af8e:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f010af95:	8b 45 08             	mov    0x8(%ebp),%eax
f010af98:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010af9f:	a1 84 41 25 f0       	mov    0xf0254184,%eax
f010afa4:	48                   	dec    %eax
f010afa5:	a3 84 41 25 f0       	mov    %eax,0xf0254184
	return ;
f010afaa:	90                   	nop
}
f010afab:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010afae:	c9                   	leave  
f010afaf:	c3                   	ret    

f010afb0 <set_environment_entry_point>:

//===============================================
// 10) SET EIP REG VALUE BY ENV ENTRY POINT:
//===============================================
void set_environment_entry_point(struct Env* e, uint8* ptr_program_start)
{
f010afb0:	55                   	push   %ebp
f010afb1:	89 e5                	mov    %esp,%ebp
f010afb3:	83 ec 18             	sub    $0x18,%esp
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f010afb6:	8b 45 0c             	mov    0xc(%ebp),%eax
f010afb9:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f010afbc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010afbf:	8b 00                	mov    (%eax),%eax
f010afc1:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f010afc6:	74 17                	je     f010afdf <set_environment_entry_point+0x2f>
		panic("Matafa2nash 3ala Keda");
f010afc8:	83 ec 04             	sub    $0x4,%esp
f010afcb:	68 98 37 13 f0       	push   $0xf0133798
f010afd0:	68 bd 03 00 00       	push   $0x3bd
f010afd5:	68 23 36 13 f0       	push   $0xf0133623
f010afda:	e8 d1 51 ff ff       	call   f01001b0 <_panic>
	e->env_tf.tf_eip = (uint32*)pELFHDR->e_entry ;
f010afdf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010afe2:	8b 40 18             	mov    0x18(%eax),%eax
f010afe5:	89 c2                	mov    %eax,%edx
f010afe7:	8b 45 08             	mov    0x8(%ebp),%eax
f010afea:	89 50 30             	mov    %edx,0x30(%eax)
}
f010afed:	90                   	nop
f010afee:	c9                   	leave  
f010afef:	c3                   	ret    

f010aff0 <PROGRAM_SEGMENT_NEXT>:

//===============================================
// 13) SEG NEXT [TO BE USED IN PROG_SEG_FOREACH]:
//===============================================
struct ProgramSegment* PROGRAM_SEGMENT_NEXT(struct ProgramSegment* seg, uint8* ptr_program_start)
{
f010aff0:	55                   	push   %ebp
f010aff1:	89 e5                	mov    %esp,%ebp
f010aff3:	83 ec 18             	sub    $0x18,%esp
	int index = (*seg).segment_id++;
f010aff6:	8b 45 08             	mov    0x8(%ebp),%eax
f010aff9:	8b 40 10             	mov    0x10(%eax),%eax
f010affc:	8d 48 01             	lea    0x1(%eax),%ecx
f010afff:	8b 55 08             	mov    0x8(%ebp),%edx
f010b002:	89 4a 10             	mov    %ecx,0x10(%edx)
f010b005:	89 45 f4             	mov    %eax,-0xc(%ebp)

	struct Proghdr *ph, *eph;
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f010b008:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b00b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f010b00e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010b011:	8b 00                	mov    (%eax),%eax
f010b013:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f010b018:	74 17                	je     f010b031 <PROGRAM_SEGMENT_NEXT+0x41>
		panic("Matafa2nash 3ala Keda");
f010b01a:	83 ec 04             	sub    $0x4,%esp
f010b01d:	68 98 37 13 f0       	push   $0xf0133798
f010b022:	68 cc 03 00 00       	push   $0x3cc
f010b027:	68 23 36 13 f0       	push   $0xf0133623
f010b02c:	e8 7f 51 ff ff       	call   f01001b0 <_panic>
	ph = (struct Proghdr *) ( ((uint8 *) ptr_program_start) + pELFHDR->e_phoff);
f010b031:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010b034:	8b 50 1c             	mov    0x1c(%eax),%edx
f010b037:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b03a:	01 d0                	add    %edx,%eax
f010b03c:	89 45 ec             	mov    %eax,-0x14(%ebp)

	while (ph[(*seg).segment_id].p_type != ELF_PROG_LOAD && ((*seg).segment_id < pELFHDR->e_phnum)) (*seg).segment_id++;
f010b03f:	eb 0f                	jmp    f010b050 <PROGRAM_SEGMENT_NEXT+0x60>
f010b041:	8b 45 08             	mov    0x8(%ebp),%eax
f010b044:	8b 40 10             	mov    0x10(%eax),%eax
f010b047:	8d 50 01             	lea    0x1(%eax),%edx
f010b04a:	8b 45 08             	mov    0x8(%ebp),%eax
f010b04d:	89 50 10             	mov    %edx,0x10(%eax)
f010b050:	8b 45 08             	mov    0x8(%ebp),%eax
f010b053:	8b 40 10             	mov    0x10(%eax),%eax
f010b056:	c1 e0 05             	shl    $0x5,%eax
f010b059:	89 c2                	mov    %eax,%edx
f010b05b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010b05e:	01 d0                	add    %edx,%eax
f010b060:	8b 00                	mov    (%eax),%eax
f010b062:	83 f8 01             	cmp    $0x1,%eax
f010b065:	74 13                	je     f010b07a <PROGRAM_SEGMENT_NEXT+0x8a>
f010b067:	8b 45 08             	mov    0x8(%ebp),%eax
f010b06a:	8b 50 10             	mov    0x10(%eax),%edx
f010b06d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010b070:	8b 40 2c             	mov    0x2c(%eax),%eax
f010b073:	0f b7 c0             	movzwl %ax,%eax
f010b076:	39 c2                	cmp    %eax,%edx
f010b078:	72 c7                	jb     f010b041 <PROGRAM_SEGMENT_NEXT+0x51>
	index = (*seg).segment_id;
f010b07a:	8b 45 08             	mov    0x8(%ebp),%eax
f010b07d:	8b 40 10             	mov    0x10(%eax),%eax
f010b080:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if(index < pELFHDR->e_phnum)
f010b083:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010b086:	8b 40 2c             	mov    0x2c(%eax),%eax
f010b089:	0f b7 c0             	movzwl %ax,%eax
f010b08c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010b08f:	7e 63                	jle    f010b0f4 <PROGRAM_SEGMENT_NEXT+0x104>
	{
		(*seg).ptr_start = (uint8 *) ptr_program_start + ph[index].p_offset;
f010b091:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b094:	c1 e0 05             	shl    $0x5,%eax
f010b097:	89 c2                	mov    %eax,%edx
f010b099:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010b09c:	01 d0                	add    %edx,%eax
f010b09e:	8b 50 04             	mov    0x4(%eax),%edx
f010b0a1:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b0a4:	01 c2                	add    %eax,%edx
f010b0a6:	8b 45 08             	mov    0x8(%ebp),%eax
f010b0a9:	89 10                	mov    %edx,(%eax)
		(*seg).size_in_memory =  ph[index].p_memsz;
f010b0ab:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b0ae:	c1 e0 05             	shl    $0x5,%eax
f010b0b1:	89 c2                	mov    %eax,%edx
f010b0b3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010b0b6:	01 d0                	add    %edx,%eax
f010b0b8:	8b 50 14             	mov    0x14(%eax),%edx
f010b0bb:	8b 45 08             	mov    0x8(%ebp),%eax
f010b0be:	89 50 08             	mov    %edx,0x8(%eax)
		(*seg).size_in_file = ph[index].p_filesz;
f010b0c1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b0c4:	c1 e0 05             	shl    $0x5,%eax
f010b0c7:	89 c2                	mov    %eax,%edx
f010b0c9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010b0cc:	01 d0                	add    %edx,%eax
f010b0ce:	8b 50 10             	mov    0x10(%eax),%edx
f010b0d1:	8b 45 08             	mov    0x8(%ebp),%eax
f010b0d4:	89 50 04             	mov    %edx,0x4(%eax)
		(*seg).virtual_address = (uint8*)ph[index].p_va;
f010b0d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b0da:	c1 e0 05             	shl    $0x5,%eax
f010b0dd:	89 c2                	mov    %eax,%edx
f010b0df:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010b0e2:	01 d0                	add    %edx,%eax
f010b0e4:	8b 40 08             	mov    0x8(%eax),%eax
f010b0e7:	89 c2                	mov    %eax,%edx
f010b0e9:	8b 45 08             	mov    0x8(%ebp),%eax
f010b0ec:	89 50 0c             	mov    %edx,0xc(%eax)
		return seg;
f010b0ef:	8b 45 08             	mov    0x8(%ebp),%eax
f010b0f2:	eb 05                	jmp    f010b0f9 <PROGRAM_SEGMENT_NEXT+0x109>
	}
	return 0;
f010b0f4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010b0f9:	c9                   	leave  
f010b0fa:	c3                   	ret    

f010b0fb <PROGRAM_SEGMENT_FIRST>:

//===============================================
// 14) SEG FIRST [TO BE USED IN PROG_SEG_FOREACH]:
//===============================================
struct ProgramSegment PROGRAM_SEGMENT_FIRST( uint8* ptr_program_start)
{
f010b0fb:	55                   	push   %ebp
f010b0fc:	89 e5                	mov    %esp,%ebp
f010b0fe:	57                   	push   %edi
f010b0ff:	56                   	push   %esi
f010b100:	53                   	push   %ebx
f010b101:	83 ec 2c             	sub    $0x2c,%esp
	struct ProgramSegment seg;
	seg.segment_id = 0;
f010b104:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)

	struct Proghdr *ph, *eph;
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f010b10b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b10e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f010b111:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010b114:	8b 00                	mov    (%eax),%eax
f010b116:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f010b11b:	74 17                	je     f010b134 <PROGRAM_SEGMENT_FIRST+0x39>
		panic("Matafa2nash 3ala Keda");
f010b11d:	83 ec 04             	sub    $0x4,%esp
f010b120:	68 98 37 13 f0       	push   $0xf0133798
f010b125:	68 e8 03 00 00       	push   $0x3e8
f010b12a:	68 23 36 13 f0       	push   $0xf0133623
f010b12f:	e8 7c 50 ff ff       	call   f01001b0 <_panic>
	ph = (struct Proghdr *) ( ((uint8 *) ptr_program_start) + pELFHDR->e_phoff);
f010b134:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010b137:	8b 50 1c             	mov    0x1c(%eax),%edx
f010b13a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b13d:	01 d0                	add    %edx,%eax
f010b13f:	89 45 e0             	mov    %eax,-0x20(%ebp)
	while (ph[(seg).segment_id].p_type != ELF_PROG_LOAD && ((seg).segment_id < pELFHDR->e_phnum)) (seg).segment_id++;
f010b142:	eb 07                	jmp    f010b14b <PROGRAM_SEGMENT_FIRST+0x50>
f010b144:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010b147:	40                   	inc    %eax
f010b148:	89 45 d8             	mov    %eax,-0x28(%ebp)
f010b14b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010b14e:	c1 e0 05             	shl    $0x5,%eax
f010b151:	89 c2                	mov    %eax,%edx
f010b153:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010b156:	01 d0                	add    %edx,%eax
f010b158:	8b 00                	mov    (%eax),%eax
f010b15a:	83 f8 01             	cmp    $0x1,%eax
f010b15d:	74 10                	je     f010b16f <PROGRAM_SEGMENT_FIRST+0x74>
f010b15f:	8b 55 d8             	mov    -0x28(%ebp),%edx
f010b162:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010b165:	8b 40 2c             	mov    0x2c(%eax),%eax
f010b168:	0f b7 c0             	movzwl %ax,%eax
f010b16b:	39 c2                	cmp    %eax,%edx
f010b16d:	72 d5                	jb     f010b144 <PROGRAM_SEGMENT_FIRST+0x49>
	int index = (seg).segment_id;
f010b16f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010b172:	89 45 dc             	mov    %eax,-0x24(%ebp)

	if(index < pELFHDR->e_phnum)
f010b175:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010b178:	8b 40 2c             	mov    0x2c(%eax),%eax
f010b17b:	0f b7 c0             	movzwl %ax,%eax
f010b17e:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f010b181:	7e 68                	jle    f010b1eb <PROGRAM_SEGMENT_FIRST+0xf0>
	{
		(seg).ptr_start = (uint8 *) ptr_program_start + ph[index].p_offset;
f010b183:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010b186:	c1 e0 05             	shl    $0x5,%eax
f010b189:	89 c2                	mov    %eax,%edx
f010b18b:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010b18e:	01 d0                	add    %edx,%eax
f010b190:	8b 50 04             	mov    0x4(%eax),%edx
f010b193:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b196:	01 d0                	add    %edx,%eax
f010b198:	89 45 c8             	mov    %eax,-0x38(%ebp)
		(seg).size_in_memory =  ph[index].p_memsz;
f010b19b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010b19e:	c1 e0 05             	shl    $0x5,%eax
f010b1a1:	89 c2                	mov    %eax,%edx
f010b1a3:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010b1a6:	01 d0                	add    %edx,%eax
f010b1a8:	8b 40 14             	mov    0x14(%eax),%eax
f010b1ab:	89 45 d0             	mov    %eax,-0x30(%ebp)
		(seg).size_in_file = ph[index].p_filesz;
f010b1ae:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010b1b1:	c1 e0 05             	shl    $0x5,%eax
f010b1b4:	89 c2                	mov    %eax,%edx
f010b1b6:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010b1b9:	01 d0                	add    %edx,%eax
f010b1bb:	8b 40 10             	mov    0x10(%eax),%eax
f010b1be:	89 45 cc             	mov    %eax,-0x34(%ebp)
		(seg).virtual_address = (uint8*)ph[index].p_va;
f010b1c1:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010b1c4:	c1 e0 05             	shl    $0x5,%eax
f010b1c7:	89 c2                	mov    %eax,%edx
f010b1c9:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010b1cc:	01 d0                	add    %edx,%eax
f010b1ce:	8b 40 08             	mov    0x8(%eax),%eax
f010b1d1:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		return seg;
f010b1d4:	8b 45 08             	mov    0x8(%ebp),%eax
f010b1d7:	89 c3                	mov    %eax,%ebx
f010b1d9:	8d 45 c8             	lea    -0x38(%ebp),%eax
f010b1dc:	ba 05 00 00 00       	mov    $0x5,%edx
f010b1e1:	89 df                	mov    %ebx,%edi
f010b1e3:	89 c6                	mov    %eax,%esi
f010b1e5:	89 d1                	mov    %edx,%ecx
f010b1e7:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f010b1e9:	eb 1c                	jmp    f010b207 <PROGRAM_SEGMENT_FIRST+0x10c>
	}
	seg.segment_id = -1;
f010b1eb:	c7 45 d8 ff ff ff ff 	movl   $0xffffffff,-0x28(%ebp)
	return seg;
f010b1f2:	8b 45 08             	mov    0x8(%ebp),%eax
f010b1f5:	89 c3                	mov    %eax,%ebx
f010b1f7:	8d 45 c8             	lea    -0x38(%ebp),%eax
f010b1fa:	ba 05 00 00 00       	mov    $0x5,%edx
f010b1ff:	89 df                	mov    %ebx,%edi
f010b201:	89 c6                	mov    %eax,%esi
f010b203:	89 d1                	mov    %edx,%ecx
f010b205:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
}
f010b207:	8b 45 08             	mov    0x8(%ebp),%eax
f010b20a:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010b20d:	5b                   	pop    %ebx
f010b20e:	5e                   	pop    %esi
f010b20f:	5f                   	pop    %edi
f010b210:	5d                   	pop    %ebp
f010b211:	c2 04 00             	ret    $0x4

f010b214 <cleanup_buffers>:

//===============================================================================
// 15) CLEANUP MODIFIED BUFFER [TO BE USED AS LAST STEP WHEN ADD ENV TO EXIT Q]:
//===============================================================================
void cleanup_buffers(struct Env* e)
{
f010b214:	55                   	push   %ebp
f010b215:	89 e5                	mov    %esp,%ebp
f010b217:	83 ec 18             	sub    $0x18,%esp
	//NEW !! 2016, remove remaining pages in the modified list
	struct FrameInfo *ptr_fi=NULL ;
f010b21a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	//	cprintf("[%s] deleting modified at end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc = calculate_available_frames();
	//	cprintf("[%s] bef, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc.modified, ffc.freeBuffered, ffc.freeNotBuffered);

	LIST_FOREACH(ptr_fi, &modified_frame_list)
f010b221:	a1 40 4a 25 f0       	mov    0xf0254a40,%eax
f010b226:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010b229:	e9 c6 00 00 00       	jmp    f010b2f4 <cleanup_buffers+0xe0>
	{
		if(ptr_fi->environment == e)
f010b22e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b231:	8b 40 10             	mov    0x10(%eax),%eax
f010b234:	3b 45 08             	cmp    0x8(%ebp),%eax
f010b237:	0f 85 af 00 00 00    	jne    f010b2ec <cleanup_buffers+0xd8>
		{
			pt_clear_page_table_entry(ptr_fi->environment->env_page_directory,ptr_fi->va);
f010b23d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b240:	8b 50 0c             	mov    0xc(%eax),%edx
f010b243:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b246:	8b 40 10             	mov    0x10(%eax),%eax
f010b249:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010b24f:	83 ec 08             	sub    $0x8,%esp
f010b252:	52                   	push   %edx
f010b253:	50                   	push   %eax
f010b254:	e8 4a d3 ff ff       	call   f01085a3 <pt_clear_page_table_entry>
f010b259:	83 c4 10             	add    $0x10,%esp

			//cprintf("==================\n");
			//cprintf("[%s] ptr_fi = %x, ptr_fi next = %x \n",curenv->prog_name, ptr_fi, LIST_NEXT(ptr_fi));
			LIST_REMOVE(&modified_frame_list, ptr_fi);
f010b25c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010b260:	75 17                	jne    f010b279 <cleanup_buffers+0x65>
f010b262:	83 ec 04             	sub    $0x4,%esp
f010b265:	68 85 36 13 f0       	push   $0xf0133685
f010b26a:	68 0f 04 00 00       	push   $0x40f
f010b26f:	68 23 36 13 f0       	push   $0xf0133623
f010b274:	e8 37 4f ff ff       	call   f01001b0 <_panic>
f010b279:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b27c:	8b 00                	mov    (%eax),%eax
f010b27e:	85 c0                	test   %eax,%eax
f010b280:	74 10                	je     f010b292 <cleanup_buffers+0x7e>
f010b282:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b285:	8b 00                	mov    (%eax),%eax
f010b287:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b28a:	8b 52 04             	mov    0x4(%edx),%edx
f010b28d:	89 50 04             	mov    %edx,0x4(%eax)
f010b290:	eb 0b                	jmp    f010b29d <cleanup_buffers+0x89>
f010b292:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b295:	8b 40 04             	mov    0x4(%eax),%eax
f010b298:	a3 44 4a 25 f0       	mov    %eax,0xf0254a44
f010b29d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b2a0:	8b 40 04             	mov    0x4(%eax),%eax
f010b2a3:	85 c0                	test   %eax,%eax
f010b2a5:	74 0f                	je     f010b2b6 <cleanup_buffers+0xa2>
f010b2a7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b2aa:	8b 40 04             	mov    0x4(%eax),%eax
f010b2ad:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b2b0:	8b 12                	mov    (%edx),%edx
f010b2b2:	89 10                	mov    %edx,(%eax)
f010b2b4:	eb 0a                	jmp    f010b2c0 <cleanup_buffers+0xac>
f010b2b6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b2b9:	8b 00                	mov    (%eax),%eax
f010b2bb:	a3 40 4a 25 f0       	mov    %eax,0xf0254a40
f010b2c0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b2c3:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010b2c9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b2cc:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f010b2d3:	a1 4c 4a 25 f0       	mov    0xf0254a4c,%eax
f010b2d8:	48                   	dec    %eax
f010b2d9:	a3 4c 4a 25 f0       	mov    %eax,0xf0254a4c

			free_frame(ptr_fi);
f010b2de:	83 ec 0c             	sub    $0xc,%esp
f010b2e1:	ff 75 f4             	pushl  -0xc(%ebp)
f010b2e4:	e8 54 c1 ff ff       	call   f010743d <free_frame>
f010b2e9:	83 c4 10             	add    $0x10,%esp

	//	cprintf("[%s] deleting modified at end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc = calculate_available_frames();
	//	cprintf("[%s] bef, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc.modified, ffc.freeBuffered, ffc.freeNotBuffered);

	LIST_FOREACH(ptr_fi, &modified_frame_list)
f010b2ec:	a1 48 4a 25 f0       	mov    0xf0254a48,%eax
f010b2f1:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010b2f4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010b2f8:	74 07                	je     f010b301 <cleanup_buffers+0xed>
f010b2fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b2fd:	8b 00                	mov    (%eax),%eax
f010b2ff:	eb 05                	jmp    f010b306 <cleanup_buffers+0xf2>
f010b301:	b8 00 00 00 00       	mov    $0x0,%eax
f010b306:	a3 48 4a 25 f0       	mov    %eax,0xf0254a48
f010b30b:	a1 48 4a 25 f0       	mov    0xf0254a48,%eax
f010b310:	85 c0                	test   %eax,%eax
f010b312:	0f 85 16 ff ff ff    	jne    f010b22e <cleanup_buffers+0x1a>
f010b318:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010b31c:	0f 85 0c ff ff ff    	jne    f010b22e <cleanup_buffers+0x1a>
	}

	//	cprintf("[%s] finished deleting modified frames at the end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc2 = calculate_available_frames();
	//	cprintf("[%s] aft, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc2.modified, ffc2.freeBuffered, ffc2.freeNotBuffered);
}
f010b322:	90                   	nop
f010b323:	c9                   	leave  
f010b324:	c3                   	ret    

f010b325 <set_program_priority>:
#include "../disk/pagefile_manager.h"
#include "../mem/kheap.h"
#include "../mem/memory_manager.h"

void set_program_priority(struct Env* env, int priority)
{
f010b325:	55                   	push   %ebp
f010b326:	89 e5                	mov    %esp,%ebp
f010b328:	83 ec 08             	sub    $0x8,%esp
	panic("Not implemented");
f010b32b:	83 ec 04             	sub    $0x4,%esp
f010b32e:	68 ae 37 13 f0       	push   $0xf01337ae
f010b333:	6a 0b                	push   $0xb
f010b335:	68 be 37 13 f0       	push   $0xf01337be
f010b33a:	e8 71 4e ff ff       	call   f01001b0 <_panic>

f010b33f <get_user_program_info>:

// Number of user programs in the program table
int NUM_USER_PROGS = (sizeof(userPrograms)/sizeof(userPrograms[0]));

struct UserProgramInfo* get_user_program_info(char* user_program_name)
{
f010b33f:	55                   	push   %ebp
f010b340:	89 e5                	mov    %esp,%ebp
f010b342:	83 ec 18             	sub    $0x18,%esp
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010b345:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010b34c:	eb 29                	jmp    f010b377 <get_user_program_info+0x38>
		if (strcmp(user_program_name, userPrograms[i].name) == 0)
f010b34e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b351:	89 d0                	mov    %edx,%eax
f010b353:	01 c0                	add    %eax,%eax
f010b355:	01 d0                	add    %edx,%eax
f010b357:	c1 e0 02             	shl    $0x2,%eax
f010b35a:	05 c0 f9 18 f0       	add    $0xf018f9c0,%eax
f010b35f:	8b 00                	mov    (%eax),%eax
f010b361:	83 ec 08             	sub    $0x8,%esp
f010b364:	50                   	push   %eax
f010b365:	ff 75 08             	pushl  0x8(%ebp)
f010b368:	e8 17 42 02 00       	call   f012f584 <strcmp>
f010b36d:	83 c4 10             	add    $0x10,%esp
f010b370:	85 c0                	test   %eax,%eax
f010b372:	74 0f                	je     f010b383 <get_user_program_info+0x44>
int NUM_USER_PROGS = (sizeof(userPrograms)/sizeof(userPrograms[0]));

struct UserProgramInfo* get_user_program_info(char* user_program_name)
{
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010b374:	ff 45 f4             	incl   -0xc(%ebp)
f010b377:	a1 6c fa 18 f0       	mov    0xf018fa6c,%eax
f010b37c:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010b37f:	7c cd                	jl     f010b34e <get_user_program_info+0xf>
f010b381:	eb 01                	jmp    f010b384 <get_user_program_info+0x45>
		if (strcmp(user_program_name, userPrograms[i].name) == 0)
			break;
f010b383:	90                   	nop
	}
	if(i==NUM_USER_PROGS)
f010b384:	a1 6c fa 18 f0       	mov    0xf018fa6c,%eax
f010b389:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010b38c:	75 1a                	jne    f010b3a8 <get_user_program_info+0x69>
	{
		cprintf("Unknown user program '%s'\n", user_program_name);
f010b38e:	83 ec 08             	sub    $0x8,%esp
f010b391:	ff 75 08             	pushl  0x8(%ebp)
f010b394:	68 4a 39 13 f0       	push   $0xf013394a
f010b399:	e8 93 5a ff ff       	call   f0100e31 <cprintf>
f010b39e:	83 c4 10             	add    $0x10,%esp
		return 0;
f010b3a1:	b8 00 00 00 00       	mov    $0x0,%eax
f010b3a6:	eb 11                	jmp    f010b3b9 <get_user_program_info+0x7a>
	}

	return &userPrograms[i];
f010b3a8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b3ab:	89 d0                	mov    %edx,%eax
f010b3ad:	01 c0                	add    %eax,%eax
f010b3af:	01 d0                	add    %edx,%eax
f010b3b1:	c1 e0 02             	shl    $0x2,%eax
f010b3b4:	05 c0 f9 18 f0       	add    $0xf018f9c0,%eax
}
f010b3b9:	c9                   	leave  
f010b3ba:	c3                   	ret    

f010b3bb <get_user_program_info_by_env>:

struct UserProgramInfo* get_user_program_info_by_env(struct Env* e)
{
f010b3bb:	55                   	push   %ebp
f010b3bc:	89 e5                	mov    %esp,%ebp
f010b3be:	83 ec 18             	sub    $0x18,%esp
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010b3c1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010b3c8:	eb 2d                	jmp    f010b3f7 <get_user_program_info_by_env+0x3c>
		if ( strcmp( e->prog_name , userPrograms[i].name) ==0)
f010b3ca:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b3cd:	89 d0                	mov    %edx,%eax
f010b3cf:	01 c0                	add    %eax,%eax
f010b3d1:	01 d0                	add    %edx,%eax
f010b3d3:	c1 e0 02             	shl    $0x2,%eax
f010b3d6:	05 c0 f9 18 f0       	add    $0xf018f9c0,%eax
f010b3db:	8b 00                	mov    (%eax),%eax
f010b3dd:	8b 55 08             	mov    0x8(%ebp),%edx
f010b3e0:	83 c2 5c             	add    $0x5c,%edx
f010b3e3:	83 ec 08             	sub    $0x8,%esp
f010b3e6:	50                   	push   %eax
f010b3e7:	52                   	push   %edx
f010b3e8:	e8 97 41 02 00       	call   f012f584 <strcmp>
f010b3ed:	83 c4 10             	add    $0x10,%esp
f010b3f0:	85 c0                	test   %eax,%eax
f010b3f2:	74 0f                	je     f010b403 <get_user_program_info_by_env+0x48>
}

struct UserProgramInfo* get_user_program_info_by_env(struct Env* e)
{
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010b3f4:	ff 45 f4             	incl   -0xc(%ebp)
f010b3f7:	a1 6c fa 18 f0       	mov    0xf018fa6c,%eax
f010b3fc:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010b3ff:	7c c9                	jl     f010b3ca <get_user_program_info_by_env+0xf>
f010b401:	eb 01                	jmp    f010b404 <get_user_program_info_by_env+0x49>
		if ( strcmp( e->prog_name , userPrograms[i].name) ==0)
			break;
f010b403:	90                   	nop
	}
	if(i==NUM_USER_PROGS)
f010b404:	a1 6c fa 18 f0       	mov    0xf018fa6c,%eax
f010b409:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010b40c:	75 17                	jne    f010b425 <get_user_program_info_by_env+0x6a>
	{
		cprintf("Unknown user program \n");
f010b40e:	83 ec 0c             	sub    $0xc,%esp
f010b411:	68 65 39 13 f0       	push   $0xf0133965
f010b416:	e8 16 5a ff ff       	call   f0100e31 <cprintf>
f010b41b:	83 c4 10             	add    $0x10,%esp
		return 0;
f010b41e:	b8 00 00 00 00       	mov    $0x0,%eax
f010b423:	eb 11                	jmp    f010b436 <get_user_program_info_by_env+0x7b>
	}

	return &userPrograms[i];
f010b425:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b428:	89 d0                	mov    %edx,%eax
f010b42a:	01 c0                	add    %eax,%eax
f010b42c:	01 d0                	add    %edx,%eax
f010b42e:	c1 e0 02             	shl    $0x2,%eax
f010b431:	05 c0 f9 18 f0       	add    $0xf018f9c0,%eax
}
f010b436:	c9                   	leave  
f010b437:	c3                   	ret    

f010b438 <trapname>:
extern  void (*ALL_FAULTS47)();



static const char *trapname(int trapno)
{
f010b438:	55                   	push   %ebp
f010b439:	89 e5                	mov    %esp,%ebp
			"Alignment Check",
			"Machine-Check",
			"SIMD Floating-Point Exception"
	};

	if (trapno < sizeof(excnames)/sizeof(excnames[0]))
f010b43b:	8b 45 08             	mov    0x8(%ebp),%eax
f010b43e:	83 f8 13             	cmp    $0x13,%eax
f010b441:	77 0c                	ja     f010b44f <trapname+0x17>
		return excnames[trapno];
f010b443:	8b 45 08             	mov    0x8(%ebp),%eax
f010b446:	8b 04 85 a0 3d 13 f0 	mov    -0xfecc260(,%eax,4),%eax
f010b44d:	eb 12                	jmp    f010b461 <trapname+0x29>
	if (trapno == T_SYSCALL)
f010b44f:	83 7d 08 30          	cmpl   $0x30,0x8(%ebp)
f010b453:	75 07                	jne    f010b45c <trapname+0x24>
		return "System call";
f010b455:	b8 80 39 13 f0       	mov    $0xf0133980,%eax
f010b45a:	eb 05                	jmp    f010b461 <trapname+0x29>
	return "(unknown trap)";
f010b45c:	b8 8c 39 13 f0       	mov    $0xf013398c,%eax
}
f010b461:	5d                   	pop    %ebp
f010b462:	c3                   	ret    

f010b463 <idt_init>:


void
idt_init(void)
{
f010b463:	55                   	push   %ebp
f010b464:	89 e5                	mov    %esp,%ebp
f010b466:	83 ec 10             	sub    $0x10,%esp
	extern struct Segdesc gdt[];

	// LAB 3: Your code here.
	//initialize idt
	SETGATE(idt[T_PGFLT], 0, GD_KT , &PAGE_FAULT, 0) ;
f010b469:	b8 fe ca 10 f0       	mov    $0xf010cafe,%eax
f010b46e:	66 a3 10 42 25 f0    	mov    %ax,0xf0254210
f010b474:	66 c7 05 12 42 25 f0 	movw   $0x8,0xf0254212
f010b47b:	08 00 
f010b47d:	a0 14 42 25 f0       	mov    0xf0254214,%al
f010b482:	83 e0 e0             	and    $0xffffffe0,%eax
f010b485:	a2 14 42 25 f0       	mov    %al,0xf0254214
f010b48a:	a0 14 42 25 f0       	mov    0xf0254214,%al
f010b48f:	83 e0 1f             	and    $0x1f,%eax
f010b492:	a2 14 42 25 f0       	mov    %al,0xf0254214
f010b497:	a0 15 42 25 f0       	mov    0xf0254215,%al
f010b49c:	83 e0 f0             	and    $0xfffffff0,%eax
f010b49f:	83 c8 0e             	or     $0xe,%eax
f010b4a2:	a2 15 42 25 f0       	mov    %al,0xf0254215
f010b4a7:	a0 15 42 25 f0       	mov    0xf0254215,%al
f010b4ac:	83 e0 ef             	and    $0xffffffef,%eax
f010b4af:	a2 15 42 25 f0       	mov    %al,0xf0254215
f010b4b4:	a0 15 42 25 f0       	mov    0xf0254215,%al
f010b4b9:	83 e0 9f             	and    $0xffffff9f,%eax
f010b4bc:	a2 15 42 25 f0       	mov    %al,0xf0254215
f010b4c1:	a0 15 42 25 f0       	mov    0xf0254215,%al
f010b4c6:	83 c8 80             	or     $0xffffff80,%eax
f010b4c9:	a2 15 42 25 f0       	mov    %al,0xf0254215
f010b4ce:	b8 fe ca 10 f0       	mov    $0xf010cafe,%eax
f010b4d3:	c1 e8 10             	shr    $0x10,%eax
f010b4d6:	66 a3 16 42 25 f0    	mov    %ax,0xf0254216
	SETGATE(idt[T_SYSCALL], 0, GD_KT , &SYSCALL_HANDLER, 3) ;
f010b4dc:	b8 06 cb 10 f0       	mov    $0xf010cb06,%eax
f010b4e1:	66 a3 20 43 25 f0    	mov    %ax,0xf0254320
f010b4e7:	66 c7 05 22 43 25 f0 	movw   $0x8,0xf0254322
f010b4ee:	08 00 
f010b4f0:	a0 24 43 25 f0       	mov    0xf0254324,%al
f010b4f5:	83 e0 e0             	and    $0xffffffe0,%eax
f010b4f8:	a2 24 43 25 f0       	mov    %al,0xf0254324
f010b4fd:	a0 24 43 25 f0       	mov    0xf0254324,%al
f010b502:	83 e0 1f             	and    $0x1f,%eax
f010b505:	a2 24 43 25 f0       	mov    %al,0xf0254324
f010b50a:	a0 25 43 25 f0       	mov    0xf0254325,%al
f010b50f:	83 e0 f0             	and    $0xfffffff0,%eax
f010b512:	83 c8 0e             	or     $0xe,%eax
f010b515:	a2 25 43 25 f0       	mov    %al,0xf0254325
f010b51a:	a0 25 43 25 f0       	mov    0xf0254325,%al
f010b51f:	83 e0 ef             	and    $0xffffffef,%eax
f010b522:	a2 25 43 25 f0       	mov    %al,0xf0254325
f010b527:	a0 25 43 25 f0       	mov    0xf0254325,%al
f010b52c:	83 c8 60             	or     $0x60,%eax
f010b52f:	a2 25 43 25 f0       	mov    %al,0xf0254325
f010b534:	a0 25 43 25 f0       	mov    0xf0254325,%al
f010b539:	83 c8 80             	or     $0xffffff80,%eax
f010b53c:	a2 25 43 25 f0       	mov    %al,0xf0254325
f010b541:	b8 06 cb 10 f0       	mov    $0xf010cb06,%eax
f010b546:	c1 e8 10             	shr    $0x10,%eax
f010b549:	66 a3 26 43 25 f0    	mov    %ax,0xf0254326
	SETGATE(idt[T_DBLFLT], 0, GD_KT , &DBL_FAULT, 0) ;
f010b54f:	b8 10 cb 10 f0       	mov    $0xf010cb10,%eax
f010b554:	66 a3 e0 41 25 f0    	mov    %ax,0xf02541e0
f010b55a:	66 c7 05 e2 41 25 f0 	movw   $0x8,0xf02541e2
f010b561:	08 00 
f010b563:	a0 e4 41 25 f0       	mov    0xf02541e4,%al
f010b568:	83 e0 e0             	and    $0xffffffe0,%eax
f010b56b:	a2 e4 41 25 f0       	mov    %al,0xf02541e4
f010b570:	a0 e4 41 25 f0       	mov    0xf02541e4,%al
f010b575:	83 e0 1f             	and    $0x1f,%eax
f010b578:	a2 e4 41 25 f0       	mov    %al,0xf02541e4
f010b57d:	a0 e5 41 25 f0       	mov    0xf02541e5,%al
f010b582:	83 e0 f0             	and    $0xfffffff0,%eax
f010b585:	83 c8 0e             	or     $0xe,%eax
f010b588:	a2 e5 41 25 f0       	mov    %al,0xf02541e5
f010b58d:	a0 e5 41 25 f0       	mov    0xf02541e5,%al
f010b592:	83 e0 ef             	and    $0xffffffef,%eax
f010b595:	a2 e5 41 25 f0       	mov    %al,0xf02541e5
f010b59a:	a0 e5 41 25 f0       	mov    0xf02541e5,%al
f010b59f:	83 e0 9f             	and    $0xffffff9f,%eax
f010b5a2:	a2 e5 41 25 f0       	mov    %al,0xf02541e5
f010b5a7:	a0 e5 41 25 f0       	mov    0xf02541e5,%al
f010b5ac:	83 c8 80             	or     $0xffffff80,%eax
f010b5af:	a2 e5 41 25 f0       	mov    %al,0xf02541e5
f010b5b4:	b8 10 cb 10 f0       	mov    $0xf010cb10,%eax
f010b5b9:	c1 e8 10             	shr    $0x10,%eax
f010b5bc:	66 a3 e6 41 25 f0    	mov    %ax,0xf02541e6


	SETGATE(idt[T_DIVIDE   ], 0, GD_KT , &ALL_FAULTS0, 3) ;
f010b5c2:	b8 18 cb 10 f0       	mov    $0xf010cb18,%eax
f010b5c7:	66 a3 a0 41 25 f0    	mov    %ax,0xf02541a0
f010b5cd:	66 c7 05 a2 41 25 f0 	movw   $0x8,0xf02541a2
f010b5d4:	08 00 
f010b5d6:	a0 a4 41 25 f0       	mov    0xf02541a4,%al
f010b5db:	83 e0 e0             	and    $0xffffffe0,%eax
f010b5de:	a2 a4 41 25 f0       	mov    %al,0xf02541a4
f010b5e3:	a0 a4 41 25 f0       	mov    0xf02541a4,%al
f010b5e8:	83 e0 1f             	and    $0x1f,%eax
f010b5eb:	a2 a4 41 25 f0       	mov    %al,0xf02541a4
f010b5f0:	a0 a5 41 25 f0       	mov    0xf02541a5,%al
f010b5f5:	83 e0 f0             	and    $0xfffffff0,%eax
f010b5f8:	83 c8 0e             	or     $0xe,%eax
f010b5fb:	a2 a5 41 25 f0       	mov    %al,0xf02541a5
f010b600:	a0 a5 41 25 f0       	mov    0xf02541a5,%al
f010b605:	83 e0 ef             	and    $0xffffffef,%eax
f010b608:	a2 a5 41 25 f0       	mov    %al,0xf02541a5
f010b60d:	a0 a5 41 25 f0       	mov    0xf02541a5,%al
f010b612:	83 c8 60             	or     $0x60,%eax
f010b615:	a2 a5 41 25 f0       	mov    %al,0xf02541a5
f010b61a:	a0 a5 41 25 f0       	mov    0xf02541a5,%al
f010b61f:	83 c8 80             	or     $0xffffff80,%eax
f010b622:	a2 a5 41 25 f0       	mov    %al,0xf02541a5
f010b627:	b8 18 cb 10 f0       	mov    $0xf010cb18,%eax
f010b62c:	c1 e8 10             	shr    $0x10,%eax
f010b62f:	66 a3 a6 41 25 f0    	mov    %ax,0xf02541a6
	SETGATE(idt[T_DEBUG    ], 1, GD_KT , &ALL_FAULTS1, 3) ;
f010b635:	b8 22 cb 10 f0       	mov    $0xf010cb22,%eax
f010b63a:	66 a3 a8 41 25 f0    	mov    %ax,0xf02541a8
f010b640:	66 c7 05 aa 41 25 f0 	movw   $0x8,0xf02541aa
f010b647:	08 00 
f010b649:	a0 ac 41 25 f0       	mov    0xf02541ac,%al
f010b64e:	83 e0 e0             	and    $0xffffffe0,%eax
f010b651:	a2 ac 41 25 f0       	mov    %al,0xf02541ac
f010b656:	a0 ac 41 25 f0       	mov    0xf02541ac,%al
f010b65b:	83 e0 1f             	and    $0x1f,%eax
f010b65e:	a2 ac 41 25 f0       	mov    %al,0xf02541ac
f010b663:	a0 ad 41 25 f0       	mov    0xf02541ad,%al
f010b668:	83 c8 0f             	or     $0xf,%eax
f010b66b:	a2 ad 41 25 f0       	mov    %al,0xf02541ad
f010b670:	a0 ad 41 25 f0       	mov    0xf02541ad,%al
f010b675:	83 e0 ef             	and    $0xffffffef,%eax
f010b678:	a2 ad 41 25 f0       	mov    %al,0xf02541ad
f010b67d:	a0 ad 41 25 f0       	mov    0xf02541ad,%al
f010b682:	83 c8 60             	or     $0x60,%eax
f010b685:	a2 ad 41 25 f0       	mov    %al,0xf02541ad
f010b68a:	a0 ad 41 25 f0       	mov    0xf02541ad,%al
f010b68f:	83 c8 80             	or     $0xffffff80,%eax
f010b692:	a2 ad 41 25 f0       	mov    %al,0xf02541ad
f010b697:	b8 22 cb 10 f0       	mov    $0xf010cb22,%eax
f010b69c:	c1 e8 10             	shr    $0x10,%eax
f010b69f:	66 a3 ae 41 25 f0    	mov    %ax,0xf02541ae
	SETGATE(idt[T_NMI      ], 0, GD_KT , &ALL_FAULTS2, 3) ;
f010b6a5:	b8 2c cb 10 f0       	mov    $0xf010cb2c,%eax
f010b6aa:	66 a3 b0 41 25 f0    	mov    %ax,0xf02541b0
f010b6b0:	66 c7 05 b2 41 25 f0 	movw   $0x8,0xf02541b2
f010b6b7:	08 00 
f010b6b9:	a0 b4 41 25 f0       	mov    0xf02541b4,%al
f010b6be:	83 e0 e0             	and    $0xffffffe0,%eax
f010b6c1:	a2 b4 41 25 f0       	mov    %al,0xf02541b4
f010b6c6:	a0 b4 41 25 f0       	mov    0xf02541b4,%al
f010b6cb:	83 e0 1f             	and    $0x1f,%eax
f010b6ce:	a2 b4 41 25 f0       	mov    %al,0xf02541b4
f010b6d3:	a0 b5 41 25 f0       	mov    0xf02541b5,%al
f010b6d8:	83 e0 f0             	and    $0xfffffff0,%eax
f010b6db:	83 c8 0e             	or     $0xe,%eax
f010b6de:	a2 b5 41 25 f0       	mov    %al,0xf02541b5
f010b6e3:	a0 b5 41 25 f0       	mov    0xf02541b5,%al
f010b6e8:	83 e0 ef             	and    $0xffffffef,%eax
f010b6eb:	a2 b5 41 25 f0       	mov    %al,0xf02541b5
f010b6f0:	a0 b5 41 25 f0       	mov    0xf02541b5,%al
f010b6f5:	83 c8 60             	or     $0x60,%eax
f010b6f8:	a2 b5 41 25 f0       	mov    %al,0xf02541b5
f010b6fd:	a0 b5 41 25 f0       	mov    0xf02541b5,%al
f010b702:	83 c8 80             	or     $0xffffff80,%eax
f010b705:	a2 b5 41 25 f0       	mov    %al,0xf02541b5
f010b70a:	b8 2c cb 10 f0       	mov    $0xf010cb2c,%eax
f010b70f:	c1 e8 10             	shr    $0x10,%eax
f010b712:	66 a3 b6 41 25 f0    	mov    %ax,0xf02541b6
	SETGATE(idt[T_BRKPT    ], 1, GD_KT , &ALL_FAULTS3, 3) ;
f010b718:	b8 36 cb 10 f0       	mov    $0xf010cb36,%eax
f010b71d:	66 a3 b8 41 25 f0    	mov    %ax,0xf02541b8
f010b723:	66 c7 05 ba 41 25 f0 	movw   $0x8,0xf02541ba
f010b72a:	08 00 
f010b72c:	a0 bc 41 25 f0       	mov    0xf02541bc,%al
f010b731:	83 e0 e0             	and    $0xffffffe0,%eax
f010b734:	a2 bc 41 25 f0       	mov    %al,0xf02541bc
f010b739:	a0 bc 41 25 f0       	mov    0xf02541bc,%al
f010b73e:	83 e0 1f             	and    $0x1f,%eax
f010b741:	a2 bc 41 25 f0       	mov    %al,0xf02541bc
f010b746:	a0 bd 41 25 f0       	mov    0xf02541bd,%al
f010b74b:	83 c8 0f             	or     $0xf,%eax
f010b74e:	a2 bd 41 25 f0       	mov    %al,0xf02541bd
f010b753:	a0 bd 41 25 f0       	mov    0xf02541bd,%al
f010b758:	83 e0 ef             	and    $0xffffffef,%eax
f010b75b:	a2 bd 41 25 f0       	mov    %al,0xf02541bd
f010b760:	a0 bd 41 25 f0       	mov    0xf02541bd,%al
f010b765:	83 c8 60             	or     $0x60,%eax
f010b768:	a2 bd 41 25 f0       	mov    %al,0xf02541bd
f010b76d:	a0 bd 41 25 f0       	mov    0xf02541bd,%al
f010b772:	83 c8 80             	or     $0xffffff80,%eax
f010b775:	a2 bd 41 25 f0       	mov    %al,0xf02541bd
f010b77a:	b8 36 cb 10 f0       	mov    $0xf010cb36,%eax
f010b77f:	c1 e8 10             	shr    $0x10,%eax
f010b782:	66 a3 be 41 25 f0    	mov    %ax,0xf02541be
	SETGATE(idt[T_OFLOW    ], 1, GD_KT , &ALL_FAULTS4, 3) ;
f010b788:	b8 40 cb 10 f0       	mov    $0xf010cb40,%eax
f010b78d:	66 a3 c0 41 25 f0    	mov    %ax,0xf02541c0
f010b793:	66 c7 05 c2 41 25 f0 	movw   $0x8,0xf02541c2
f010b79a:	08 00 
f010b79c:	a0 c4 41 25 f0       	mov    0xf02541c4,%al
f010b7a1:	83 e0 e0             	and    $0xffffffe0,%eax
f010b7a4:	a2 c4 41 25 f0       	mov    %al,0xf02541c4
f010b7a9:	a0 c4 41 25 f0       	mov    0xf02541c4,%al
f010b7ae:	83 e0 1f             	and    $0x1f,%eax
f010b7b1:	a2 c4 41 25 f0       	mov    %al,0xf02541c4
f010b7b6:	a0 c5 41 25 f0       	mov    0xf02541c5,%al
f010b7bb:	83 c8 0f             	or     $0xf,%eax
f010b7be:	a2 c5 41 25 f0       	mov    %al,0xf02541c5
f010b7c3:	a0 c5 41 25 f0       	mov    0xf02541c5,%al
f010b7c8:	83 e0 ef             	and    $0xffffffef,%eax
f010b7cb:	a2 c5 41 25 f0       	mov    %al,0xf02541c5
f010b7d0:	a0 c5 41 25 f0       	mov    0xf02541c5,%al
f010b7d5:	83 c8 60             	or     $0x60,%eax
f010b7d8:	a2 c5 41 25 f0       	mov    %al,0xf02541c5
f010b7dd:	a0 c5 41 25 f0       	mov    0xf02541c5,%al
f010b7e2:	83 c8 80             	or     $0xffffff80,%eax
f010b7e5:	a2 c5 41 25 f0       	mov    %al,0xf02541c5
f010b7ea:	b8 40 cb 10 f0       	mov    $0xf010cb40,%eax
f010b7ef:	c1 e8 10             	shr    $0x10,%eax
f010b7f2:	66 a3 c6 41 25 f0    	mov    %ax,0xf02541c6
	SETGATE(idt[T_BOUND    ], 0, GD_KT , &ALL_FAULTS5, 3) ;
f010b7f8:	b8 4a cb 10 f0       	mov    $0xf010cb4a,%eax
f010b7fd:	66 a3 c8 41 25 f0    	mov    %ax,0xf02541c8
f010b803:	66 c7 05 ca 41 25 f0 	movw   $0x8,0xf02541ca
f010b80a:	08 00 
f010b80c:	a0 cc 41 25 f0       	mov    0xf02541cc,%al
f010b811:	83 e0 e0             	and    $0xffffffe0,%eax
f010b814:	a2 cc 41 25 f0       	mov    %al,0xf02541cc
f010b819:	a0 cc 41 25 f0       	mov    0xf02541cc,%al
f010b81e:	83 e0 1f             	and    $0x1f,%eax
f010b821:	a2 cc 41 25 f0       	mov    %al,0xf02541cc
f010b826:	a0 cd 41 25 f0       	mov    0xf02541cd,%al
f010b82b:	83 e0 f0             	and    $0xfffffff0,%eax
f010b82e:	83 c8 0e             	or     $0xe,%eax
f010b831:	a2 cd 41 25 f0       	mov    %al,0xf02541cd
f010b836:	a0 cd 41 25 f0       	mov    0xf02541cd,%al
f010b83b:	83 e0 ef             	and    $0xffffffef,%eax
f010b83e:	a2 cd 41 25 f0       	mov    %al,0xf02541cd
f010b843:	a0 cd 41 25 f0       	mov    0xf02541cd,%al
f010b848:	83 c8 60             	or     $0x60,%eax
f010b84b:	a2 cd 41 25 f0       	mov    %al,0xf02541cd
f010b850:	a0 cd 41 25 f0       	mov    0xf02541cd,%al
f010b855:	83 c8 80             	or     $0xffffff80,%eax
f010b858:	a2 cd 41 25 f0       	mov    %al,0xf02541cd
f010b85d:	b8 4a cb 10 f0       	mov    $0xf010cb4a,%eax
f010b862:	c1 e8 10             	shr    $0x10,%eax
f010b865:	66 a3 ce 41 25 f0    	mov    %ax,0xf02541ce
	SETGATE(idt[T_ILLOP    ], 0, GD_KT , &ALL_FAULTS6, 3) ;
f010b86b:	b8 54 cb 10 f0       	mov    $0xf010cb54,%eax
f010b870:	66 a3 d0 41 25 f0    	mov    %ax,0xf02541d0
f010b876:	66 c7 05 d2 41 25 f0 	movw   $0x8,0xf02541d2
f010b87d:	08 00 
f010b87f:	a0 d4 41 25 f0       	mov    0xf02541d4,%al
f010b884:	83 e0 e0             	and    $0xffffffe0,%eax
f010b887:	a2 d4 41 25 f0       	mov    %al,0xf02541d4
f010b88c:	a0 d4 41 25 f0       	mov    0xf02541d4,%al
f010b891:	83 e0 1f             	and    $0x1f,%eax
f010b894:	a2 d4 41 25 f0       	mov    %al,0xf02541d4
f010b899:	a0 d5 41 25 f0       	mov    0xf02541d5,%al
f010b89e:	83 e0 f0             	and    $0xfffffff0,%eax
f010b8a1:	83 c8 0e             	or     $0xe,%eax
f010b8a4:	a2 d5 41 25 f0       	mov    %al,0xf02541d5
f010b8a9:	a0 d5 41 25 f0       	mov    0xf02541d5,%al
f010b8ae:	83 e0 ef             	and    $0xffffffef,%eax
f010b8b1:	a2 d5 41 25 f0       	mov    %al,0xf02541d5
f010b8b6:	a0 d5 41 25 f0       	mov    0xf02541d5,%al
f010b8bb:	83 c8 60             	or     $0x60,%eax
f010b8be:	a2 d5 41 25 f0       	mov    %al,0xf02541d5
f010b8c3:	a0 d5 41 25 f0       	mov    0xf02541d5,%al
f010b8c8:	83 c8 80             	or     $0xffffff80,%eax
f010b8cb:	a2 d5 41 25 f0       	mov    %al,0xf02541d5
f010b8d0:	b8 54 cb 10 f0       	mov    $0xf010cb54,%eax
f010b8d5:	c1 e8 10             	shr    $0x10,%eax
f010b8d8:	66 a3 d6 41 25 f0    	mov    %ax,0xf02541d6
	SETGATE(idt[T_DEVICE   ], 0, GD_KT , &ALL_FAULTS7, 3) ;
f010b8de:	b8 5e cb 10 f0       	mov    $0xf010cb5e,%eax
f010b8e3:	66 a3 d8 41 25 f0    	mov    %ax,0xf02541d8
f010b8e9:	66 c7 05 da 41 25 f0 	movw   $0x8,0xf02541da
f010b8f0:	08 00 
f010b8f2:	a0 dc 41 25 f0       	mov    0xf02541dc,%al
f010b8f7:	83 e0 e0             	and    $0xffffffe0,%eax
f010b8fa:	a2 dc 41 25 f0       	mov    %al,0xf02541dc
f010b8ff:	a0 dc 41 25 f0       	mov    0xf02541dc,%al
f010b904:	83 e0 1f             	and    $0x1f,%eax
f010b907:	a2 dc 41 25 f0       	mov    %al,0xf02541dc
f010b90c:	a0 dd 41 25 f0       	mov    0xf02541dd,%al
f010b911:	83 e0 f0             	and    $0xfffffff0,%eax
f010b914:	83 c8 0e             	or     $0xe,%eax
f010b917:	a2 dd 41 25 f0       	mov    %al,0xf02541dd
f010b91c:	a0 dd 41 25 f0       	mov    0xf02541dd,%al
f010b921:	83 e0 ef             	and    $0xffffffef,%eax
f010b924:	a2 dd 41 25 f0       	mov    %al,0xf02541dd
f010b929:	a0 dd 41 25 f0       	mov    0xf02541dd,%al
f010b92e:	83 c8 60             	or     $0x60,%eax
f010b931:	a2 dd 41 25 f0       	mov    %al,0xf02541dd
f010b936:	a0 dd 41 25 f0       	mov    0xf02541dd,%al
f010b93b:	83 c8 80             	or     $0xffffff80,%eax
f010b93e:	a2 dd 41 25 f0       	mov    %al,0xf02541dd
f010b943:	b8 5e cb 10 f0       	mov    $0xf010cb5e,%eax
f010b948:	c1 e8 10             	shr    $0x10,%eax
f010b94b:	66 a3 de 41 25 f0    	mov    %ax,0xf02541de
	//SETGATE(idt[T_DBLFLT   ], 0, GD_KT , &ALL_FAULTS, 3) ;
	//SETGATE(idt[], 0, GD_KT , &ALL_FAULTS, 3) ;
	SETGATE(idt[T_TSS      ], 0, GD_KT , &ALL_FAULTS10, 3) ;
f010b951:	b8 68 cb 10 f0       	mov    $0xf010cb68,%eax
f010b956:	66 a3 f0 41 25 f0    	mov    %ax,0xf02541f0
f010b95c:	66 c7 05 f2 41 25 f0 	movw   $0x8,0xf02541f2
f010b963:	08 00 
f010b965:	a0 f4 41 25 f0       	mov    0xf02541f4,%al
f010b96a:	83 e0 e0             	and    $0xffffffe0,%eax
f010b96d:	a2 f4 41 25 f0       	mov    %al,0xf02541f4
f010b972:	a0 f4 41 25 f0       	mov    0xf02541f4,%al
f010b977:	83 e0 1f             	and    $0x1f,%eax
f010b97a:	a2 f4 41 25 f0       	mov    %al,0xf02541f4
f010b97f:	a0 f5 41 25 f0       	mov    0xf02541f5,%al
f010b984:	83 e0 f0             	and    $0xfffffff0,%eax
f010b987:	83 c8 0e             	or     $0xe,%eax
f010b98a:	a2 f5 41 25 f0       	mov    %al,0xf02541f5
f010b98f:	a0 f5 41 25 f0       	mov    0xf02541f5,%al
f010b994:	83 e0 ef             	and    $0xffffffef,%eax
f010b997:	a2 f5 41 25 f0       	mov    %al,0xf02541f5
f010b99c:	a0 f5 41 25 f0       	mov    0xf02541f5,%al
f010b9a1:	83 c8 60             	or     $0x60,%eax
f010b9a4:	a2 f5 41 25 f0       	mov    %al,0xf02541f5
f010b9a9:	a0 f5 41 25 f0       	mov    0xf02541f5,%al
f010b9ae:	83 c8 80             	or     $0xffffff80,%eax
f010b9b1:	a2 f5 41 25 f0       	mov    %al,0xf02541f5
f010b9b6:	b8 68 cb 10 f0       	mov    $0xf010cb68,%eax
f010b9bb:	c1 e8 10             	shr    $0x10,%eax
f010b9be:	66 a3 f6 41 25 f0    	mov    %ax,0xf02541f6
	SETGATE(idt[T_SEGNP    ], 0, GD_KT , &ALL_FAULTS11, 3) ;
f010b9c4:	b8 70 cb 10 f0       	mov    $0xf010cb70,%eax
f010b9c9:	66 a3 f8 41 25 f0    	mov    %ax,0xf02541f8
f010b9cf:	66 c7 05 fa 41 25 f0 	movw   $0x8,0xf02541fa
f010b9d6:	08 00 
f010b9d8:	a0 fc 41 25 f0       	mov    0xf02541fc,%al
f010b9dd:	83 e0 e0             	and    $0xffffffe0,%eax
f010b9e0:	a2 fc 41 25 f0       	mov    %al,0xf02541fc
f010b9e5:	a0 fc 41 25 f0       	mov    0xf02541fc,%al
f010b9ea:	83 e0 1f             	and    $0x1f,%eax
f010b9ed:	a2 fc 41 25 f0       	mov    %al,0xf02541fc
f010b9f2:	a0 fd 41 25 f0       	mov    0xf02541fd,%al
f010b9f7:	83 e0 f0             	and    $0xfffffff0,%eax
f010b9fa:	83 c8 0e             	or     $0xe,%eax
f010b9fd:	a2 fd 41 25 f0       	mov    %al,0xf02541fd
f010ba02:	a0 fd 41 25 f0       	mov    0xf02541fd,%al
f010ba07:	83 e0 ef             	and    $0xffffffef,%eax
f010ba0a:	a2 fd 41 25 f0       	mov    %al,0xf02541fd
f010ba0f:	a0 fd 41 25 f0       	mov    0xf02541fd,%al
f010ba14:	83 c8 60             	or     $0x60,%eax
f010ba17:	a2 fd 41 25 f0       	mov    %al,0xf02541fd
f010ba1c:	a0 fd 41 25 f0       	mov    0xf02541fd,%al
f010ba21:	83 c8 80             	or     $0xffffff80,%eax
f010ba24:	a2 fd 41 25 f0       	mov    %al,0xf02541fd
f010ba29:	b8 70 cb 10 f0       	mov    $0xf010cb70,%eax
f010ba2e:	c1 e8 10             	shr    $0x10,%eax
f010ba31:	66 a3 fe 41 25 f0    	mov    %ax,0xf02541fe
	SETGATE(idt[T_STACK    ], 0, GD_KT , &ALL_FAULTS12, 3) ;
f010ba37:	b8 74 cb 10 f0       	mov    $0xf010cb74,%eax
f010ba3c:	66 a3 00 42 25 f0    	mov    %ax,0xf0254200
f010ba42:	66 c7 05 02 42 25 f0 	movw   $0x8,0xf0254202
f010ba49:	08 00 
f010ba4b:	a0 04 42 25 f0       	mov    0xf0254204,%al
f010ba50:	83 e0 e0             	and    $0xffffffe0,%eax
f010ba53:	a2 04 42 25 f0       	mov    %al,0xf0254204
f010ba58:	a0 04 42 25 f0       	mov    0xf0254204,%al
f010ba5d:	83 e0 1f             	and    $0x1f,%eax
f010ba60:	a2 04 42 25 f0       	mov    %al,0xf0254204
f010ba65:	a0 05 42 25 f0       	mov    0xf0254205,%al
f010ba6a:	83 e0 f0             	and    $0xfffffff0,%eax
f010ba6d:	83 c8 0e             	or     $0xe,%eax
f010ba70:	a2 05 42 25 f0       	mov    %al,0xf0254205
f010ba75:	a0 05 42 25 f0       	mov    0xf0254205,%al
f010ba7a:	83 e0 ef             	and    $0xffffffef,%eax
f010ba7d:	a2 05 42 25 f0       	mov    %al,0xf0254205
f010ba82:	a0 05 42 25 f0       	mov    0xf0254205,%al
f010ba87:	83 c8 60             	or     $0x60,%eax
f010ba8a:	a2 05 42 25 f0       	mov    %al,0xf0254205
f010ba8f:	a0 05 42 25 f0       	mov    0xf0254205,%al
f010ba94:	83 c8 80             	or     $0xffffff80,%eax
f010ba97:	a2 05 42 25 f0       	mov    %al,0xf0254205
f010ba9c:	b8 74 cb 10 f0       	mov    $0xf010cb74,%eax
f010baa1:	c1 e8 10             	shr    $0x10,%eax
f010baa4:	66 a3 06 42 25 f0    	mov    %ax,0xf0254206
	SETGATE(idt[T_GPFLT    ], 0, GD_KT , &ALL_FAULTS13, 3) ;
f010baaa:	b8 78 cb 10 f0       	mov    $0xf010cb78,%eax
f010baaf:	66 a3 08 42 25 f0    	mov    %ax,0xf0254208
f010bab5:	66 c7 05 0a 42 25 f0 	movw   $0x8,0xf025420a
f010babc:	08 00 
f010babe:	a0 0c 42 25 f0       	mov    0xf025420c,%al
f010bac3:	83 e0 e0             	and    $0xffffffe0,%eax
f010bac6:	a2 0c 42 25 f0       	mov    %al,0xf025420c
f010bacb:	a0 0c 42 25 f0       	mov    0xf025420c,%al
f010bad0:	83 e0 1f             	and    $0x1f,%eax
f010bad3:	a2 0c 42 25 f0       	mov    %al,0xf025420c
f010bad8:	a0 0d 42 25 f0       	mov    0xf025420d,%al
f010badd:	83 e0 f0             	and    $0xfffffff0,%eax
f010bae0:	83 c8 0e             	or     $0xe,%eax
f010bae3:	a2 0d 42 25 f0       	mov    %al,0xf025420d
f010bae8:	a0 0d 42 25 f0       	mov    0xf025420d,%al
f010baed:	83 e0 ef             	and    $0xffffffef,%eax
f010baf0:	a2 0d 42 25 f0       	mov    %al,0xf025420d
f010baf5:	a0 0d 42 25 f0       	mov    0xf025420d,%al
f010bafa:	83 c8 60             	or     $0x60,%eax
f010bafd:	a2 0d 42 25 f0       	mov    %al,0xf025420d
f010bb02:	a0 0d 42 25 f0       	mov    0xf025420d,%al
f010bb07:	83 c8 80             	or     $0xffffff80,%eax
f010bb0a:	a2 0d 42 25 f0       	mov    %al,0xf025420d
f010bb0f:	b8 78 cb 10 f0       	mov    $0xf010cb78,%eax
f010bb14:	c1 e8 10             	shr    $0x10,%eax
f010bb17:	66 a3 0e 42 25 f0    	mov    %ax,0xf025420e
	//SETGATE(idt[T_PGFLT    ], 0, GD_KT , &ALL_FAULTS, 3) ;
	//SETGATE(idt[ne T_RES   ], 0, GD_KT , &ALL_FAULTS, 3) ;
	SETGATE(idt[T_FPERR    ], 0, GD_KT , &ALL_FAULTS16, 3) ;
f010bb1d:	b8 7c cb 10 f0       	mov    $0xf010cb7c,%eax
f010bb22:	66 a3 20 42 25 f0    	mov    %ax,0xf0254220
f010bb28:	66 c7 05 22 42 25 f0 	movw   $0x8,0xf0254222
f010bb2f:	08 00 
f010bb31:	a0 24 42 25 f0       	mov    0xf0254224,%al
f010bb36:	83 e0 e0             	and    $0xffffffe0,%eax
f010bb39:	a2 24 42 25 f0       	mov    %al,0xf0254224
f010bb3e:	a0 24 42 25 f0       	mov    0xf0254224,%al
f010bb43:	83 e0 1f             	and    $0x1f,%eax
f010bb46:	a2 24 42 25 f0       	mov    %al,0xf0254224
f010bb4b:	a0 25 42 25 f0       	mov    0xf0254225,%al
f010bb50:	83 e0 f0             	and    $0xfffffff0,%eax
f010bb53:	83 c8 0e             	or     $0xe,%eax
f010bb56:	a2 25 42 25 f0       	mov    %al,0xf0254225
f010bb5b:	a0 25 42 25 f0       	mov    0xf0254225,%al
f010bb60:	83 e0 ef             	and    $0xffffffef,%eax
f010bb63:	a2 25 42 25 f0       	mov    %al,0xf0254225
f010bb68:	a0 25 42 25 f0       	mov    0xf0254225,%al
f010bb6d:	83 c8 60             	or     $0x60,%eax
f010bb70:	a2 25 42 25 f0       	mov    %al,0xf0254225
f010bb75:	a0 25 42 25 f0       	mov    0xf0254225,%al
f010bb7a:	83 c8 80             	or     $0xffffff80,%eax
f010bb7d:	a2 25 42 25 f0       	mov    %al,0xf0254225
f010bb82:	b8 7c cb 10 f0       	mov    $0xf010cb7c,%eax
f010bb87:	c1 e8 10             	shr    $0x10,%eax
f010bb8a:	66 a3 26 42 25 f0    	mov    %ax,0xf0254226
	SETGATE(idt[T_ALIGN    ], 0, GD_KT , &ALL_FAULTS17, 3) ;
f010bb90:	b8 82 cb 10 f0       	mov    $0xf010cb82,%eax
f010bb95:	66 a3 28 42 25 f0    	mov    %ax,0xf0254228
f010bb9b:	66 c7 05 2a 42 25 f0 	movw   $0x8,0xf025422a
f010bba2:	08 00 
f010bba4:	a0 2c 42 25 f0       	mov    0xf025422c,%al
f010bba9:	83 e0 e0             	and    $0xffffffe0,%eax
f010bbac:	a2 2c 42 25 f0       	mov    %al,0xf025422c
f010bbb1:	a0 2c 42 25 f0       	mov    0xf025422c,%al
f010bbb6:	83 e0 1f             	and    $0x1f,%eax
f010bbb9:	a2 2c 42 25 f0       	mov    %al,0xf025422c
f010bbbe:	a0 2d 42 25 f0       	mov    0xf025422d,%al
f010bbc3:	83 e0 f0             	and    $0xfffffff0,%eax
f010bbc6:	83 c8 0e             	or     $0xe,%eax
f010bbc9:	a2 2d 42 25 f0       	mov    %al,0xf025422d
f010bbce:	a0 2d 42 25 f0       	mov    0xf025422d,%al
f010bbd3:	83 e0 ef             	and    $0xffffffef,%eax
f010bbd6:	a2 2d 42 25 f0       	mov    %al,0xf025422d
f010bbdb:	a0 2d 42 25 f0       	mov    0xf025422d,%al
f010bbe0:	83 c8 60             	or     $0x60,%eax
f010bbe3:	a2 2d 42 25 f0       	mov    %al,0xf025422d
f010bbe8:	a0 2d 42 25 f0       	mov    0xf025422d,%al
f010bbed:	83 c8 80             	or     $0xffffff80,%eax
f010bbf0:	a2 2d 42 25 f0       	mov    %al,0xf025422d
f010bbf5:	b8 82 cb 10 f0       	mov    $0xf010cb82,%eax
f010bbfa:	c1 e8 10             	shr    $0x10,%eax
f010bbfd:	66 a3 2e 42 25 f0    	mov    %ax,0xf025422e
	SETGATE(idt[T_MCHK     ], 0, GD_KT , &ALL_FAULTS18, 3) ;
f010bc03:	b8 86 cb 10 f0       	mov    $0xf010cb86,%eax
f010bc08:	66 a3 30 42 25 f0    	mov    %ax,0xf0254230
f010bc0e:	66 c7 05 32 42 25 f0 	movw   $0x8,0xf0254232
f010bc15:	08 00 
f010bc17:	a0 34 42 25 f0       	mov    0xf0254234,%al
f010bc1c:	83 e0 e0             	and    $0xffffffe0,%eax
f010bc1f:	a2 34 42 25 f0       	mov    %al,0xf0254234
f010bc24:	a0 34 42 25 f0       	mov    0xf0254234,%al
f010bc29:	83 e0 1f             	and    $0x1f,%eax
f010bc2c:	a2 34 42 25 f0       	mov    %al,0xf0254234
f010bc31:	a0 35 42 25 f0       	mov    0xf0254235,%al
f010bc36:	83 e0 f0             	and    $0xfffffff0,%eax
f010bc39:	83 c8 0e             	or     $0xe,%eax
f010bc3c:	a2 35 42 25 f0       	mov    %al,0xf0254235
f010bc41:	a0 35 42 25 f0       	mov    0xf0254235,%al
f010bc46:	83 e0 ef             	and    $0xffffffef,%eax
f010bc49:	a2 35 42 25 f0       	mov    %al,0xf0254235
f010bc4e:	a0 35 42 25 f0       	mov    0xf0254235,%al
f010bc53:	83 c8 60             	or     $0x60,%eax
f010bc56:	a2 35 42 25 f0       	mov    %al,0xf0254235
f010bc5b:	a0 35 42 25 f0       	mov    0xf0254235,%al
f010bc60:	83 c8 80             	or     $0xffffff80,%eax
f010bc63:	a2 35 42 25 f0       	mov    %al,0xf0254235
f010bc68:	b8 86 cb 10 f0       	mov    $0xf010cb86,%eax
f010bc6d:	c1 e8 10             	shr    $0x10,%eax
f010bc70:	66 a3 36 42 25 f0    	mov    %ax,0xf0254236
	SETGATE(idt[T_SIMDERR  ], 0, GD_KT , &ALL_FAULTS19, 3) ;
f010bc76:	b8 8c cb 10 f0       	mov    $0xf010cb8c,%eax
f010bc7b:	66 a3 38 42 25 f0    	mov    %ax,0xf0254238
f010bc81:	66 c7 05 3a 42 25 f0 	movw   $0x8,0xf025423a
f010bc88:	08 00 
f010bc8a:	a0 3c 42 25 f0       	mov    0xf025423c,%al
f010bc8f:	83 e0 e0             	and    $0xffffffe0,%eax
f010bc92:	a2 3c 42 25 f0       	mov    %al,0xf025423c
f010bc97:	a0 3c 42 25 f0       	mov    0xf025423c,%al
f010bc9c:	83 e0 1f             	and    $0x1f,%eax
f010bc9f:	a2 3c 42 25 f0       	mov    %al,0xf025423c
f010bca4:	a0 3d 42 25 f0       	mov    0xf025423d,%al
f010bca9:	83 e0 f0             	and    $0xfffffff0,%eax
f010bcac:	83 c8 0e             	or     $0xe,%eax
f010bcaf:	a2 3d 42 25 f0       	mov    %al,0xf025423d
f010bcb4:	a0 3d 42 25 f0       	mov    0xf025423d,%al
f010bcb9:	83 e0 ef             	and    $0xffffffef,%eax
f010bcbc:	a2 3d 42 25 f0       	mov    %al,0xf025423d
f010bcc1:	a0 3d 42 25 f0       	mov    0xf025423d,%al
f010bcc6:	83 c8 60             	or     $0x60,%eax
f010bcc9:	a2 3d 42 25 f0       	mov    %al,0xf025423d
f010bcce:	a0 3d 42 25 f0       	mov    0xf025423d,%al
f010bcd3:	83 c8 80             	or     $0xffffff80,%eax
f010bcd6:	a2 3d 42 25 f0       	mov    %al,0xf025423d
f010bcdb:	b8 8c cb 10 f0       	mov    $0xf010cb8c,%eax
f010bce0:	c1 e8 10             	shr    $0x10,%eax
f010bce3:	66 a3 3e 42 25 f0    	mov    %ax,0xf025423e


	SETGATE(idt[IRQ0_Clock], 0, GD_KT , &ALL_FAULTS32, 3) ;
f010bce9:	b8 92 cb 10 f0       	mov    $0xf010cb92,%eax
f010bcee:	66 a3 a0 42 25 f0    	mov    %ax,0xf02542a0
f010bcf4:	66 c7 05 a2 42 25 f0 	movw   $0x8,0xf02542a2
f010bcfb:	08 00 
f010bcfd:	a0 a4 42 25 f0       	mov    0xf02542a4,%al
f010bd02:	83 e0 e0             	and    $0xffffffe0,%eax
f010bd05:	a2 a4 42 25 f0       	mov    %al,0xf02542a4
f010bd0a:	a0 a4 42 25 f0       	mov    0xf02542a4,%al
f010bd0f:	83 e0 1f             	and    $0x1f,%eax
f010bd12:	a2 a4 42 25 f0       	mov    %al,0xf02542a4
f010bd17:	a0 a5 42 25 f0       	mov    0xf02542a5,%al
f010bd1c:	83 e0 f0             	and    $0xfffffff0,%eax
f010bd1f:	83 c8 0e             	or     $0xe,%eax
f010bd22:	a2 a5 42 25 f0       	mov    %al,0xf02542a5
f010bd27:	a0 a5 42 25 f0       	mov    0xf02542a5,%al
f010bd2c:	83 e0 ef             	and    $0xffffffef,%eax
f010bd2f:	a2 a5 42 25 f0       	mov    %al,0xf02542a5
f010bd34:	a0 a5 42 25 f0       	mov    0xf02542a5,%al
f010bd39:	83 c8 60             	or     $0x60,%eax
f010bd3c:	a2 a5 42 25 f0       	mov    %al,0xf02542a5
f010bd41:	a0 a5 42 25 f0       	mov    0xf02542a5,%al
f010bd46:	83 c8 80             	or     $0xffffff80,%eax
f010bd49:	a2 a5 42 25 f0       	mov    %al,0xf02542a5
f010bd4e:	b8 92 cb 10 f0       	mov    $0xf010cb92,%eax
f010bd53:	c1 e8 10             	shr    $0x10,%eax
f010bd56:	66 a3 a6 42 25 f0    	mov    %ax,0xf02542a6
	SETGATE(idt[33], 0, GD_KT , &ALL_FAULTS33, 3) ;
f010bd5c:	b8 98 cb 10 f0       	mov    $0xf010cb98,%eax
f010bd61:	66 a3 a8 42 25 f0    	mov    %ax,0xf02542a8
f010bd67:	66 c7 05 aa 42 25 f0 	movw   $0x8,0xf02542aa
f010bd6e:	08 00 
f010bd70:	a0 ac 42 25 f0       	mov    0xf02542ac,%al
f010bd75:	83 e0 e0             	and    $0xffffffe0,%eax
f010bd78:	a2 ac 42 25 f0       	mov    %al,0xf02542ac
f010bd7d:	a0 ac 42 25 f0       	mov    0xf02542ac,%al
f010bd82:	83 e0 1f             	and    $0x1f,%eax
f010bd85:	a2 ac 42 25 f0       	mov    %al,0xf02542ac
f010bd8a:	a0 ad 42 25 f0       	mov    0xf02542ad,%al
f010bd8f:	83 e0 f0             	and    $0xfffffff0,%eax
f010bd92:	83 c8 0e             	or     $0xe,%eax
f010bd95:	a2 ad 42 25 f0       	mov    %al,0xf02542ad
f010bd9a:	a0 ad 42 25 f0       	mov    0xf02542ad,%al
f010bd9f:	83 e0 ef             	and    $0xffffffef,%eax
f010bda2:	a2 ad 42 25 f0       	mov    %al,0xf02542ad
f010bda7:	a0 ad 42 25 f0       	mov    0xf02542ad,%al
f010bdac:	83 c8 60             	or     $0x60,%eax
f010bdaf:	a2 ad 42 25 f0       	mov    %al,0xf02542ad
f010bdb4:	a0 ad 42 25 f0       	mov    0xf02542ad,%al
f010bdb9:	83 c8 80             	or     $0xffffff80,%eax
f010bdbc:	a2 ad 42 25 f0       	mov    %al,0xf02542ad
f010bdc1:	b8 98 cb 10 f0       	mov    $0xf010cb98,%eax
f010bdc6:	c1 e8 10             	shr    $0x10,%eax
f010bdc9:	66 a3 ae 42 25 f0    	mov    %ax,0xf02542ae
	SETGATE(idt[34], 0, GD_KT , &ALL_FAULTS34, 3) ;
f010bdcf:	b8 9e cb 10 f0       	mov    $0xf010cb9e,%eax
f010bdd4:	66 a3 b0 42 25 f0    	mov    %ax,0xf02542b0
f010bdda:	66 c7 05 b2 42 25 f0 	movw   $0x8,0xf02542b2
f010bde1:	08 00 
f010bde3:	a0 b4 42 25 f0       	mov    0xf02542b4,%al
f010bde8:	83 e0 e0             	and    $0xffffffe0,%eax
f010bdeb:	a2 b4 42 25 f0       	mov    %al,0xf02542b4
f010bdf0:	a0 b4 42 25 f0       	mov    0xf02542b4,%al
f010bdf5:	83 e0 1f             	and    $0x1f,%eax
f010bdf8:	a2 b4 42 25 f0       	mov    %al,0xf02542b4
f010bdfd:	a0 b5 42 25 f0       	mov    0xf02542b5,%al
f010be02:	83 e0 f0             	and    $0xfffffff0,%eax
f010be05:	83 c8 0e             	or     $0xe,%eax
f010be08:	a2 b5 42 25 f0       	mov    %al,0xf02542b5
f010be0d:	a0 b5 42 25 f0       	mov    0xf02542b5,%al
f010be12:	83 e0 ef             	and    $0xffffffef,%eax
f010be15:	a2 b5 42 25 f0       	mov    %al,0xf02542b5
f010be1a:	a0 b5 42 25 f0       	mov    0xf02542b5,%al
f010be1f:	83 c8 60             	or     $0x60,%eax
f010be22:	a2 b5 42 25 f0       	mov    %al,0xf02542b5
f010be27:	a0 b5 42 25 f0       	mov    0xf02542b5,%al
f010be2c:	83 c8 80             	or     $0xffffff80,%eax
f010be2f:	a2 b5 42 25 f0       	mov    %al,0xf02542b5
f010be34:	b8 9e cb 10 f0       	mov    $0xf010cb9e,%eax
f010be39:	c1 e8 10             	shr    $0x10,%eax
f010be3c:	66 a3 b6 42 25 f0    	mov    %ax,0xf02542b6
	SETGATE(idt[35], 0, GD_KT , &ALL_FAULTS35, 3) ;
f010be42:	b8 a4 cb 10 f0       	mov    $0xf010cba4,%eax
f010be47:	66 a3 b8 42 25 f0    	mov    %ax,0xf02542b8
f010be4d:	66 c7 05 ba 42 25 f0 	movw   $0x8,0xf02542ba
f010be54:	08 00 
f010be56:	a0 bc 42 25 f0       	mov    0xf02542bc,%al
f010be5b:	83 e0 e0             	and    $0xffffffe0,%eax
f010be5e:	a2 bc 42 25 f0       	mov    %al,0xf02542bc
f010be63:	a0 bc 42 25 f0       	mov    0xf02542bc,%al
f010be68:	83 e0 1f             	and    $0x1f,%eax
f010be6b:	a2 bc 42 25 f0       	mov    %al,0xf02542bc
f010be70:	a0 bd 42 25 f0       	mov    0xf02542bd,%al
f010be75:	83 e0 f0             	and    $0xfffffff0,%eax
f010be78:	83 c8 0e             	or     $0xe,%eax
f010be7b:	a2 bd 42 25 f0       	mov    %al,0xf02542bd
f010be80:	a0 bd 42 25 f0       	mov    0xf02542bd,%al
f010be85:	83 e0 ef             	and    $0xffffffef,%eax
f010be88:	a2 bd 42 25 f0       	mov    %al,0xf02542bd
f010be8d:	a0 bd 42 25 f0       	mov    0xf02542bd,%al
f010be92:	83 c8 60             	or     $0x60,%eax
f010be95:	a2 bd 42 25 f0       	mov    %al,0xf02542bd
f010be9a:	a0 bd 42 25 f0       	mov    0xf02542bd,%al
f010be9f:	83 c8 80             	or     $0xffffff80,%eax
f010bea2:	a2 bd 42 25 f0       	mov    %al,0xf02542bd
f010bea7:	b8 a4 cb 10 f0       	mov    $0xf010cba4,%eax
f010beac:	c1 e8 10             	shr    $0x10,%eax
f010beaf:	66 a3 be 42 25 f0    	mov    %ax,0xf02542be
	SETGATE(idt[36], 0, GD_KT , &ALL_FAULTS36, 3) ;
f010beb5:	b8 aa cb 10 f0       	mov    $0xf010cbaa,%eax
f010beba:	66 a3 c0 42 25 f0    	mov    %ax,0xf02542c0
f010bec0:	66 c7 05 c2 42 25 f0 	movw   $0x8,0xf02542c2
f010bec7:	08 00 
f010bec9:	a0 c4 42 25 f0       	mov    0xf02542c4,%al
f010bece:	83 e0 e0             	and    $0xffffffe0,%eax
f010bed1:	a2 c4 42 25 f0       	mov    %al,0xf02542c4
f010bed6:	a0 c4 42 25 f0       	mov    0xf02542c4,%al
f010bedb:	83 e0 1f             	and    $0x1f,%eax
f010bede:	a2 c4 42 25 f0       	mov    %al,0xf02542c4
f010bee3:	a0 c5 42 25 f0       	mov    0xf02542c5,%al
f010bee8:	83 e0 f0             	and    $0xfffffff0,%eax
f010beeb:	83 c8 0e             	or     $0xe,%eax
f010beee:	a2 c5 42 25 f0       	mov    %al,0xf02542c5
f010bef3:	a0 c5 42 25 f0       	mov    0xf02542c5,%al
f010bef8:	83 e0 ef             	and    $0xffffffef,%eax
f010befb:	a2 c5 42 25 f0       	mov    %al,0xf02542c5
f010bf00:	a0 c5 42 25 f0       	mov    0xf02542c5,%al
f010bf05:	83 c8 60             	or     $0x60,%eax
f010bf08:	a2 c5 42 25 f0       	mov    %al,0xf02542c5
f010bf0d:	a0 c5 42 25 f0       	mov    0xf02542c5,%al
f010bf12:	83 c8 80             	or     $0xffffff80,%eax
f010bf15:	a2 c5 42 25 f0       	mov    %al,0xf02542c5
f010bf1a:	b8 aa cb 10 f0       	mov    $0xf010cbaa,%eax
f010bf1f:	c1 e8 10             	shr    $0x10,%eax
f010bf22:	66 a3 c6 42 25 f0    	mov    %ax,0xf02542c6
	SETGATE(idt[37], 0, GD_KT , &ALL_FAULTS37, 3) ;
f010bf28:	b8 b0 cb 10 f0       	mov    $0xf010cbb0,%eax
f010bf2d:	66 a3 c8 42 25 f0    	mov    %ax,0xf02542c8
f010bf33:	66 c7 05 ca 42 25 f0 	movw   $0x8,0xf02542ca
f010bf3a:	08 00 
f010bf3c:	a0 cc 42 25 f0       	mov    0xf02542cc,%al
f010bf41:	83 e0 e0             	and    $0xffffffe0,%eax
f010bf44:	a2 cc 42 25 f0       	mov    %al,0xf02542cc
f010bf49:	a0 cc 42 25 f0       	mov    0xf02542cc,%al
f010bf4e:	83 e0 1f             	and    $0x1f,%eax
f010bf51:	a2 cc 42 25 f0       	mov    %al,0xf02542cc
f010bf56:	a0 cd 42 25 f0       	mov    0xf02542cd,%al
f010bf5b:	83 e0 f0             	and    $0xfffffff0,%eax
f010bf5e:	83 c8 0e             	or     $0xe,%eax
f010bf61:	a2 cd 42 25 f0       	mov    %al,0xf02542cd
f010bf66:	a0 cd 42 25 f0       	mov    0xf02542cd,%al
f010bf6b:	83 e0 ef             	and    $0xffffffef,%eax
f010bf6e:	a2 cd 42 25 f0       	mov    %al,0xf02542cd
f010bf73:	a0 cd 42 25 f0       	mov    0xf02542cd,%al
f010bf78:	83 c8 60             	or     $0x60,%eax
f010bf7b:	a2 cd 42 25 f0       	mov    %al,0xf02542cd
f010bf80:	a0 cd 42 25 f0       	mov    0xf02542cd,%al
f010bf85:	83 c8 80             	or     $0xffffff80,%eax
f010bf88:	a2 cd 42 25 f0       	mov    %al,0xf02542cd
f010bf8d:	b8 b0 cb 10 f0       	mov    $0xf010cbb0,%eax
f010bf92:	c1 e8 10             	shr    $0x10,%eax
f010bf95:	66 a3 ce 42 25 f0    	mov    %ax,0xf02542ce
	SETGATE(idt[38], 0, GD_KT , &ALL_FAULTS38, 3) ;
f010bf9b:	b8 b6 cb 10 f0       	mov    $0xf010cbb6,%eax
f010bfa0:	66 a3 d0 42 25 f0    	mov    %ax,0xf02542d0
f010bfa6:	66 c7 05 d2 42 25 f0 	movw   $0x8,0xf02542d2
f010bfad:	08 00 
f010bfaf:	a0 d4 42 25 f0       	mov    0xf02542d4,%al
f010bfb4:	83 e0 e0             	and    $0xffffffe0,%eax
f010bfb7:	a2 d4 42 25 f0       	mov    %al,0xf02542d4
f010bfbc:	a0 d4 42 25 f0       	mov    0xf02542d4,%al
f010bfc1:	83 e0 1f             	and    $0x1f,%eax
f010bfc4:	a2 d4 42 25 f0       	mov    %al,0xf02542d4
f010bfc9:	a0 d5 42 25 f0       	mov    0xf02542d5,%al
f010bfce:	83 e0 f0             	and    $0xfffffff0,%eax
f010bfd1:	83 c8 0e             	or     $0xe,%eax
f010bfd4:	a2 d5 42 25 f0       	mov    %al,0xf02542d5
f010bfd9:	a0 d5 42 25 f0       	mov    0xf02542d5,%al
f010bfde:	83 e0 ef             	and    $0xffffffef,%eax
f010bfe1:	a2 d5 42 25 f0       	mov    %al,0xf02542d5
f010bfe6:	a0 d5 42 25 f0       	mov    0xf02542d5,%al
f010bfeb:	83 c8 60             	or     $0x60,%eax
f010bfee:	a2 d5 42 25 f0       	mov    %al,0xf02542d5
f010bff3:	a0 d5 42 25 f0       	mov    0xf02542d5,%al
f010bff8:	83 c8 80             	or     $0xffffff80,%eax
f010bffb:	a2 d5 42 25 f0       	mov    %al,0xf02542d5
f010c000:	b8 b6 cb 10 f0       	mov    $0xf010cbb6,%eax
f010c005:	c1 e8 10             	shr    $0x10,%eax
f010c008:	66 a3 d6 42 25 f0    	mov    %ax,0xf02542d6
	SETGATE(idt[39], 0, GD_KT , &ALL_FAULTS39, 3) ;
f010c00e:	b8 bc cb 10 f0       	mov    $0xf010cbbc,%eax
f010c013:	66 a3 d8 42 25 f0    	mov    %ax,0xf02542d8
f010c019:	66 c7 05 da 42 25 f0 	movw   $0x8,0xf02542da
f010c020:	08 00 
f010c022:	a0 dc 42 25 f0       	mov    0xf02542dc,%al
f010c027:	83 e0 e0             	and    $0xffffffe0,%eax
f010c02a:	a2 dc 42 25 f0       	mov    %al,0xf02542dc
f010c02f:	a0 dc 42 25 f0       	mov    0xf02542dc,%al
f010c034:	83 e0 1f             	and    $0x1f,%eax
f010c037:	a2 dc 42 25 f0       	mov    %al,0xf02542dc
f010c03c:	a0 dd 42 25 f0       	mov    0xf02542dd,%al
f010c041:	83 e0 f0             	and    $0xfffffff0,%eax
f010c044:	83 c8 0e             	or     $0xe,%eax
f010c047:	a2 dd 42 25 f0       	mov    %al,0xf02542dd
f010c04c:	a0 dd 42 25 f0       	mov    0xf02542dd,%al
f010c051:	83 e0 ef             	and    $0xffffffef,%eax
f010c054:	a2 dd 42 25 f0       	mov    %al,0xf02542dd
f010c059:	a0 dd 42 25 f0       	mov    0xf02542dd,%al
f010c05e:	83 c8 60             	or     $0x60,%eax
f010c061:	a2 dd 42 25 f0       	mov    %al,0xf02542dd
f010c066:	a0 dd 42 25 f0       	mov    0xf02542dd,%al
f010c06b:	83 c8 80             	or     $0xffffff80,%eax
f010c06e:	a2 dd 42 25 f0       	mov    %al,0xf02542dd
f010c073:	b8 bc cb 10 f0       	mov    $0xf010cbbc,%eax
f010c078:	c1 e8 10             	shr    $0x10,%eax
f010c07b:	66 a3 de 42 25 f0    	mov    %ax,0xf02542de
	SETGATE(idt[40], 0, GD_KT , &ALL_FAULTS40, 3) ;
f010c081:	b8 c2 cb 10 f0       	mov    $0xf010cbc2,%eax
f010c086:	66 a3 e0 42 25 f0    	mov    %ax,0xf02542e0
f010c08c:	66 c7 05 e2 42 25 f0 	movw   $0x8,0xf02542e2
f010c093:	08 00 
f010c095:	a0 e4 42 25 f0       	mov    0xf02542e4,%al
f010c09a:	83 e0 e0             	and    $0xffffffe0,%eax
f010c09d:	a2 e4 42 25 f0       	mov    %al,0xf02542e4
f010c0a2:	a0 e4 42 25 f0       	mov    0xf02542e4,%al
f010c0a7:	83 e0 1f             	and    $0x1f,%eax
f010c0aa:	a2 e4 42 25 f0       	mov    %al,0xf02542e4
f010c0af:	a0 e5 42 25 f0       	mov    0xf02542e5,%al
f010c0b4:	83 e0 f0             	and    $0xfffffff0,%eax
f010c0b7:	83 c8 0e             	or     $0xe,%eax
f010c0ba:	a2 e5 42 25 f0       	mov    %al,0xf02542e5
f010c0bf:	a0 e5 42 25 f0       	mov    0xf02542e5,%al
f010c0c4:	83 e0 ef             	and    $0xffffffef,%eax
f010c0c7:	a2 e5 42 25 f0       	mov    %al,0xf02542e5
f010c0cc:	a0 e5 42 25 f0       	mov    0xf02542e5,%al
f010c0d1:	83 c8 60             	or     $0x60,%eax
f010c0d4:	a2 e5 42 25 f0       	mov    %al,0xf02542e5
f010c0d9:	a0 e5 42 25 f0       	mov    0xf02542e5,%al
f010c0de:	83 c8 80             	or     $0xffffff80,%eax
f010c0e1:	a2 e5 42 25 f0       	mov    %al,0xf02542e5
f010c0e6:	b8 c2 cb 10 f0       	mov    $0xf010cbc2,%eax
f010c0eb:	c1 e8 10             	shr    $0x10,%eax
f010c0ee:	66 a3 e6 42 25 f0    	mov    %ax,0xf02542e6
	SETGATE(idt[41], 0, GD_KT , &ALL_FAULTS41, 3) ;
f010c0f4:	b8 c8 cb 10 f0       	mov    $0xf010cbc8,%eax
f010c0f9:	66 a3 e8 42 25 f0    	mov    %ax,0xf02542e8
f010c0ff:	66 c7 05 ea 42 25 f0 	movw   $0x8,0xf02542ea
f010c106:	08 00 
f010c108:	a0 ec 42 25 f0       	mov    0xf02542ec,%al
f010c10d:	83 e0 e0             	and    $0xffffffe0,%eax
f010c110:	a2 ec 42 25 f0       	mov    %al,0xf02542ec
f010c115:	a0 ec 42 25 f0       	mov    0xf02542ec,%al
f010c11a:	83 e0 1f             	and    $0x1f,%eax
f010c11d:	a2 ec 42 25 f0       	mov    %al,0xf02542ec
f010c122:	a0 ed 42 25 f0       	mov    0xf02542ed,%al
f010c127:	83 e0 f0             	and    $0xfffffff0,%eax
f010c12a:	83 c8 0e             	or     $0xe,%eax
f010c12d:	a2 ed 42 25 f0       	mov    %al,0xf02542ed
f010c132:	a0 ed 42 25 f0       	mov    0xf02542ed,%al
f010c137:	83 e0 ef             	and    $0xffffffef,%eax
f010c13a:	a2 ed 42 25 f0       	mov    %al,0xf02542ed
f010c13f:	a0 ed 42 25 f0       	mov    0xf02542ed,%al
f010c144:	83 c8 60             	or     $0x60,%eax
f010c147:	a2 ed 42 25 f0       	mov    %al,0xf02542ed
f010c14c:	a0 ed 42 25 f0       	mov    0xf02542ed,%al
f010c151:	83 c8 80             	or     $0xffffff80,%eax
f010c154:	a2 ed 42 25 f0       	mov    %al,0xf02542ed
f010c159:	b8 c8 cb 10 f0       	mov    $0xf010cbc8,%eax
f010c15e:	c1 e8 10             	shr    $0x10,%eax
f010c161:	66 a3 ee 42 25 f0    	mov    %ax,0xf02542ee
	SETGATE(idt[42], 0, GD_KT , &ALL_FAULTS42, 3) ;
f010c167:	b8 ce cb 10 f0       	mov    $0xf010cbce,%eax
f010c16c:	66 a3 f0 42 25 f0    	mov    %ax,0xf02542f0
f010c172:	66 c7 05 f2 42 25 f0 	movw   $0x8,0xf02542f2
f010c179:	08 00 
f010c17b:	a0 f4 42 25 f0       	mov    0xf02542f4,%al
f010c180:	83 e0 e0             	and    $0xffffffe0,%eax
f010c183:	a2 f4 42 25 f0       	mov    %al,0xf02542f4
f010c188:	a0 f4 42 25 f0       	mov    0xf02542f4,%al
f010c18d:	83 e0 1f             	and    $0x1f,%eax
f010c190:	a2 f4 42 25 f0       	mov    %al,0xf02542f4
f010c195:	a0 f5 42 25 f0       	mov    0xf02542f5,%al
f010c19a:	83 e0 f0             	and    $0xfffffff0,%eax
f010c19d:	83 c8 0e             	or     $0xe,%eax
f010c1a0:	a2 f5 42 25 f0       	mov    %al,0xf02542f5
f010c1a5:	a0 f5 42 25 f0       	mov    0xf02542f5,%al
f010c1aa:	83 e0 ef             	and    $0xffffffef,%eax
f010c1ad:	a2 f5 42 25 f0       	mov    %al,0xf02542f5
f010c1b2:	a0 f5 42 25 f0       	mov    0xf02542f5,%al
f010c1b7:	83 c8 60             	or     $0x60,%eax
f010c1ba:	a2 f5 42 25 f0       	mov    %al,0xf02542f5
f010c1bf:	a0 f5 42 25 f0       	mov    0xf02542f5,%al
f010c1c4:	83 c8 80             	or     $0xffffff80,%eax
f010c1c7:	a2 f5 42 25 f0       	mov    %al,0xf02542f5
f010c1cc:	b8 ce cb 10 f0       	mov    $0xf010cbce,%eax
f010c1d1:	c1 e8 10             	shr    $0x10,%eax
f010c1d4:	66 a3 f6 42 25 f0    	mov    %ax,0xf02542f6
	SETGATE(idt[43], 0, GD_KT , &ALL_FAULTS43, 3) ;
f010c1da:	b8 d4 cb 10 f0       	mov    $0xf010cbd4,%eax
f010c1df:	66 a3 f8 42 25 f0    	mov    %ax,0xf02542f8
f010c1e5:	66 c7 05 fa 42 25 f0 	movw   $0x8,0xf02542fa
f010c1ec:	08 00 
f010c1ee:	a0 fc 42 25 f0       	mov    0xf02542fc,%al
f010c1f3:	83 e0 e0             	and    $0xffffffe0,%eax
f010c1f6:	a2 fc 42 25 f0       	mov    %al,0xf02542fc
f010c1fb:	a0 fc 42 25 f0       	mov    0xf02542fc,%al
f010c200:	83 e0 1f             	and    $0x1f,%eax
f010c203:	a2 fc 42 25 f0       	mov    %al,0xf02542fc
f010c208:	a0 fd 42 25 f0       	mov    0xf02542fd,%al
f010c20d:	83 e0 f0             	and    $0xfffffff0,%eax
f010c210:	83 c8 0e             	or     $0xe,%eax
f010c213:	a2 fd 42 25 f0       	mov    %al,0xf02542fd
f010c218:	a0 fd 42 25 f0       	mov    0xf02542fd,%al
f010c21d:	83 e0 ef             	and    $0xffffffef,%eax
f010c220:	a2 fd 42 25 f0       	mov    %al,0xf02542fd
f010c225:	a0 fd 42 25 f0       	mov    0xf02542fd,%al
f010c22a:	83 c8 60             	or     $0x60,%eax
f010c22d:	a2 fd 42 25 f0       	mov    %al,0xf02542fd
f010c232:	a0 fd 42 25 f0       	mov    0xf02542fd,%al
f010c237:	83 c8 80             	or     $0xffffff80,%eax
f010c23a:	a2 fd 42 25 f0       	mov    %al,0xf02542fd
f010c23f:	b8 d4 cb 10 f0       	mov    $0xf010cbd4,%eax
f010c244:	c1 e8 10             	shr    $0x10,%eax
f010c247:	66 a3 fe 42 25 f0    	mov    %ax,0xf02542fe
	SETGATE(idt[44], 0, GD_KT , &ALL_FAULTS44, 3) ;
f010c24d:	b8 da cb 10 f0       	mov    $0xf010cbda,%eax
f010c252:	66 a3 00 43 25 f0    	mov    %ax,0xf0254300
f010c258:	66 c7 05 02 43 25 f0 	movw   $0x8,0xf0254302
f010c25f:	08 00 
f010c261:	a0 04 43 25 f0       	mov    0xf0254304,%al
f010c266:	83 e0 e0             	and    $0xffffffe0,%eax
f010c269:	a2 04 43 25 f0       	mov    %al,0xf0254304
f010c26e:	a0 04 43 25 f0       	mov    0xf0254304,%al
f010c273:	83 e0 1f             	and    $0x1f,%eax
f010c276:	a2 04 43 25 f0       	mov    %al,0xf0254304
f010c27b:	a0 05 43 25 f0       	mov    0xf0254305,%al
f010c280:	83 e0 f0             	and    $0xfffffff0,%eax
f010c283:	83 c8 0e             	or     $0xe,%eax
f010c286:	a2 05 43 25 f0       	mov    %al,0xf0254305
f010c28b:	a0 05 43 25 f0       	mov    0xf0254305,%al
f010c290:	83 e0 ef             	and    $0xffffffef,%eax
f010c293:	a2 05 43 25 f0       	mov    %al,0xf0254305
f010c298:	a0 05 43 25 f0       	mov    0xf0254305,%al
f010c29d:	83 c8 60             	or     $0x60,%eax
f010c2a0:	a2 05 43 25 f0       	mov    %al,0xf0254305
f010c2a5:	a0 05 43 25 f0       	mov    0xf0254305,%al
f010c2aa:	83 c8 80             	or     $0xffffff80,%eax
f010c2ad:	a2 05 43 25 f0       	mov    %al,0xf0254305
f010c2b2:	b8 da cb 10 f0       	mov    $0xf010cbda,%eax
f010c2b7:	c1 e8 10             	shr    $0x10,%eax
f010c2ba:	66 a3 06 43 25 f0    	mov    %ax,0xf0254306
	SETGATE(idt[45], 0, GD_KT , &ALL_FAULTS45, 3) ;
f010c2c0:	b8 e0 cb 10 f0       	mov    $0xf010cbe0,%eax
f010c2c5:	66 a3 08 43 25 f0    	mov    %ax,0xf0254308
f010c2cb:	66 c7 05 0a 43 25 f0 	movw   $0x8,0xf025430a
f010c2d2:	08 00 
f010c2d4:	a0 0c 43 25 f0       	mov    0xf025430c,%al
f010c2d9:	83 e0 e0             	and    $0xffffffe0,%eax
f010c2dc:	a2 0c 43 25 f0       	mov    %al,0xf025430c
f010c2e1:	a0 0c 43 25 f0       	mov    0xf025430c,%al
f010c2e6:	83 e0 1f             	and    $0x1f,%eax
f010c2e9:	a2 0c 43 25 f0       	mov    %al,0xf025430c
f010c2ee:	a0 0d 43 25 f0       	mov    0xf025430d,%al
f010c2f3:	83 e0 f0             	and    $0xfffffff0,%eax
f010c2f6:	83 c8 0e             	or     $0xe,%eax
f010c2f9:	a2 0d 43 25 f0       	mov    %al,0xf025430d
f010c2fe:	a0 0d 43 25 f0       	mov    0xf025430d,%al
f010c303:	83 e0 ef             	and    $0xffffffef,%eax
f010c306:	a2 0d 43 25 f0       	mov    %al,0xf025430d
f010c30b:	a0 0d 43 25 f0       	mov    0xf025430d,%al
f010c310:	83 c8 60             	or     $0x60,%eax
f010c313:	a2 0d 43 25 f0       	mov    %al,0xf025430d
f010c318:	a0 0d 43 25 f0       	mov    0xf025430d,%al
f010c31d:	83 c8 80             	or     $0xffffff80,%eax
f010c320:	a2 0d 43 25 f0       	mov    %al,0xf025430d
f010c325:	b8 e0 cb 10 f0       	mov    $0xf010cbe0,%eax
f010c32a:	c1 e8 10             	shr    $0x10,%eax
f010c32d:	66 a3 0e 43 25 f0    	mov    %ax,0xf025430e
	SETGATE(idt[46], 0, GD_KT , &ALL_FAULTS46, 3) ;
f010c333:	b8 e6 cb 10 f0       	mov    $0xf010cbe6,%eax
f010c338:	66 a3 10 43 25 f0    	mov    %ax,0xf0254310
f010c33e:	66 c7 05 12 43 25 f0 	movw   $0x8,0xf0254312
f010c345:	08 00 
f010c347:	a0 14 43 25 f0       	mov    0xf0254314,%al
f010c34c:	83 e0 e0             	and    $0xffffffe0,%eax
f010c34f:	a2 14 43 25 f0       	mov    %al,0xf0254314
f010c354:	a0 14 43 25 f0       	mov    0xf0254314,%al
f010c359:	83 e0 1f             	and    $0x1f,%eax
f010c35c:	a2 14 43 25 f0       	mov    %al,0xf0254314
f010c361:	a0 15 43 25 f0       	mov    0xf0254315,%al
f010c366:	83 e0 f0             	and    $0xfffffff0,%eax
f010c369:	83 c8 0e             	or     $0xe,%eax
f010c36c:	a2 15 43 25 f0       	mov    %al,0xf0254315
f010c371:	a0 15 43 25 f0       	mov    0xf0254315,%al
f010c376:	83 e0 ef             	and    $0xffffffef,%eax
f010c379:	a2 15 43 25 f0       	mov    %al,0xf0254315
f010c37e:	a0 15 43 25 f0       	mov    0xf0254315,%al
f010c383:	83 c8 60             	or     $0x60,%eax
f010c386:	a2 15 43 25 f0       	mov    %al,0xf0254315
f010c38b:	a0 15 43 25 f0       	mov    0xf0254315,%al
f010c390:	83 c8 80             	or     $0xffffff80,%eax
f010c393:	a2 15 43 25 f0       	mov    %al,0xf0254315
f010c398:	b8 e6 cb 10 f0       	mov    $0xf010cbe6,%eax
f010c39d:	c1 e8 10             	shr    $0x10,%eax
f010c3a0:	66 a3 16 43 25 f0    	mov    %ax,0xf0254316
	SETGATE(idt[47], 0, GD_KT , &ALL_FAULTS47, 3) ;
f010c3a6:	b8 ec cb 10 f0       	mov    $0xf010cbec,%eax
f010c3ab:	66 a3 18 43 25 f0    	mov    %ax,0xf0254318
f010c3b1:	66 c7 05 1a 43 25 f0 	movw   $0x8,0xf025431a
f010c3b8:	08 00 
f010c3ba:	a0 1c 43 25 f0       	mov    0xf025431c,%al
f010c3bf:	83 e0 e0             	and    $0xffffffe0,%eax
f010c3c2:	a2 1c 43 25 f0       	mov    %al,0xf025431c
f010c3c7:	a0 1c 43 25 f0       	mov    0xf025431c,%al
f010c3cc:	83 e0 1f             	and    $0x1f,%eax
f010c3cf:	a2 1c 43 25 f0       	mov    %al,0xf025431c
f010c3d4:	a0 1d 43 25 f0       	mov    0xf025431d,%al
f010c3d9:	83 e0 f0             	and    $0xfffffff0,%eax
f010c3dc:	83 c8 0e             	or     $0xe,%eax
f010c3df:	a2 1d 43 25 f0       	mov    %al,0xf025431d
f010c3e4:	a0 1d 43 25 f0       	mov    0xf025431d,%al
f010c3e9:	83 e0 ef             	and    $0xffffffef,%eax
f010c3ec:	a2 1d 43 25 f0       	mov    %al,0xf025431d
f010c3f1:	a0 1d 43 25 f0       	mov    0xf025431d,%al
f010c3f6:	83 c8 60             	or     $0x60,%eax
f010c3f9:	a2 1d 43 25 f0       	mov    %al,0xf025431d
f010c3fe:	a0 1d 43 25 f0       	mov    0xf025431d,%al
f010c403:	83 c8 80             	or     $0xffffff80,%eax
f010c406:	a2 1d 43 25 f0       	mov    %al,0xf025431d
f010c40b:	b8 ec cb 10 f0       	mov    $0xf010cbec,%eax
f010c410:	c1 e8 10             	shr    $0x10,%eax
f010c413:	66 a3 1e 43 25 f0    	mov    %ax,0xf025431e



	// Setup a TSS so that we get the right stack
	// when we trap to the kernel.
	ts.ts_esp0 = KERNEL_STACK_TOP;
f010c419:	c7 05 c4 49 25 f0 00 	movl   $0xefc00000,0xf02549c4
f010c420:	00 c0 ef 
	ts.ts_ss0 = GD_KD;
f010c423:	66 c7 05 c8 49 25 f0 	movw   $0x10,0xf02549c8
f010c42a:	10 00 

	// Initialize the TSS field of the gdt.
	gdt[GD_TSS >> 3] = SEG16(STS_T32A, (uint32) (&ts),
f010c42c:	66 c7 05 a8 f9 18 f0 	movw   $0x68,0xf018f9a8
f010c433:	68 00 
f010c435:	b8 c0 49 25 f0       	mov    $0xf02549c0,%eax
f010c43a:	66 a3 aa f9 18 f0    	mov    %ax,0xf018f9aa
f010c440:	b8 c0 49 25 f0       	mov    $0xf02549c0,%eax
f010c445:	c1 e8 10             	shr    $0x10,%eax
f010c448:	a2 ac f9 18 f0       	mov    %al,0xf018f9ac
f010c44d:	a0 ad f9 18 f0       	mov    0xf018f9ad,%al
f010c452:	83 e0 f0             	and    $0xfffffff0,%eax
f010c455:	83 c8 09             	or     $0x9,%eax
f010c458:	a2 ad f9 18 f0       	mov    %al,0xf018f9ad
f010c45d:	a0 ad f9 18 f0       	mov    0xf018f9ad,%al
f010c462:	83 c8 10             	or     $0x10,%eax
f010c465:	a2 ad f9 18 f0       	mov    %al,0xf018f9ad
f010c46a:	a0 ad f9 18 f0       	mov    0xf018f9ad,%al
f010c46f:	83 e0 9f             	and    $0xffffff9f,%eax
f010c472:	a2 ad f9 18 f0       	mov    %al,0xf018f9ad
f010c477:	a0 ad f9 18 f0       	mov    0xf018f9ad,%al
f010c47c:	83 c8 80             	or     $0xffffff80,%eax
f010c47f:	a2 ad f9 18 f0       	mov    %al,0xf018f9ad
f010c484:	a0 ae f9 18 f0       	mov    0xf018f9ae,%al
f010c489:	83 e0 f0             	and    $0xfffffff0,%eax
f010c48c:	a2 ae f9 18 f0       	mov    %al,0xf018f9ae
f010c491:	a0 ae f9 18 f0       	mov    0xf018f9ae,%al
f010c496:	83 e0 ef             	and    $0xffffffef,%eax
f010c499:	a2 ae f9 18 f0       	mov    %al,0xf018f9ae
f010c49e:	a0 ae f9 18 f0       	mov    0xf018f9ae,%al
f010c4a3:	83 e0 df             	and    $0xffffffdf,%eax
f010c4a6:	a2 ae f9 18 f0       	mov    %al,0xf018f9ae
f010c4ab:	a0 ae f9 18 f0       	mov    0xf018f9ae,%al
f010c4b0:	83 c8 40             	or     $0x40,%eax
f010c4b3:	a2 ae f9 18 f0       	mov    %al,0xf018f9ae
f010c4b8:	a0 ae f9 18 f0       	mov    0xf018f9ae,%al
f010c4bd:	83 e0 7f             	and    $0x7f,%eax
f010c4c0:	a2 ae f9 18 f0       	mov    %al,0xf018f9ae
f010c4c5:	b8 c0 49 25 f0       	mov    $0xf02549c0,%eax
f010c4ca:	c1 e8 18             	shr    $0x18,%eax
f010c4cd:	a2 af f9 18 f0       	mov    %al,0xf018f9af
			sizeof(struct Taskstate), 0);
	gdt[GD_TSS >> 3].sd_s = 0;
f010c4d2:	a0 ad f9 18 f0       	mov    0xf018f9ad,%al
f010c4d7:	83 e0 ef             	and    $0xffffffef,%eax
f010c4da:	a2 ad f9 18 f0       	mov    %al,0xf018f9ad
f010c4df:	66 c7 45 fe 28 00    	movw   $0x28,-0x2(%ebp)
}

static __inline void
ltr(uint16 sel)
{
	__asm __volatile("ltr %0" : : "r" (sel));
f010c4e5:	66 8b 45 fe          	mov    -0x2(%ebp),%ax
f010c4e9:	0f 00 d8             	ltr    %ax

	// Load the TSS
	ltr(GD_TSS);

	// Load the IDT
	asm volatile("lidt idt_pd");
f010c4ec:	0f 01 1d 70 fa 18 f0 	lidtl  0xf018fa70
}
f010c4f3:	90                   	nop
f010c4f4:	c9                   	leave  
f010c4f5:	c3                   	ret    

f010c4f6 <print_trapframe>:

void print_trapframe(struct Trapframe *tf)
{
f010c4f6:	55                   	push   %ebp
f010c4f7:	89 e5                	mov    %esp,%ebp
f010c4f9:	53                   	push   %ebx
f010c4fa:	83 ec 04             	sub    $0x4,%esp
	cprintf("TRAP frame at %p\n", tf);
f010c4fd:	83 ec 08             	sub    $0x8,%esp
f010c500:	ff 75 08             	pushl  0x8(%ebp)
f010c503:	68 9b 39 13 f0       	push   $0xf013399b
f010c508:	e8 24 49 ff ff       	call   f0100e31 <cprintf>
f010c50d:	83 c4 10             	add    $0x10,%esp
	print_regs(&tf->tf_regs);
f010c510:	8b 45 08             	mov    0x8(%ebp),%eax
f010c513:	83 ec 0c             	sub    $0xc,%esp
f010c516:	50                   	push   %eax
f010c517:	e8 fd 00 00 00       	call   f010c619 <print_regs>
f010c51c:	83 c4 10             	add    $0x10,%esp
	cprintf("  es   0x----%04x\n", tf->tf_es);
f010c51f:	8b 45 08             	mov    0x8(%ebp),%eax
f010c522:	8b 40 20             	mov    0x20(%eax),%eax
f010c525:	0f b7 c0             	movzwl %ax,%eax
f010c528:	83 ec 08             	sub    $0x8,%esp
f010c52b:	50                   	push   %eax
f010c52c:	68 ad 39 13 f0       	push   $0xf01339ad
f010c531:	e8 fb 48 ff ff       	call   f0100e31 <cprintf>
f010c536:	83 c4 10             	add    $0x10,%esp
	cprintf("  ds   0x----%04x\n", tf->tf_ds);
f010c539:	8b 45 08             	mov    0x8(%ebp),%eax
f010c53c:	8b 40 24             	mov    0x24(%eax),%eax
f010c53f:	0f b7 c0             	movzwl %ax,%eax
f010c542:	83 ec 08             	sub    $0x8,%esp
f010c545:	50                   	push   %eax
f010c546:	68 c0 39 13 f0       	push   $0xf01339c0
f010c54b:	e8 e1 48 ff ff       	call   f0100e31 <cprintf>
f010c550:	83 c4 10             	add    $0x10,%esp
	cprintf("  trap 0x%08x %s - %d\n", tf->tf_trapno, trapname(tf->tf_trapno), tf->tf_trapno);
f010c553:	8b 45 08             	mov    0x8(%ebp),%eax
f010c556:	8b 58 28             	mov    0x28(%eax),%ebx
f010c559:	8b 45 08             	mov    0x8(%ebp),%eax
f010c55c:	8b 40 28             	mov    0x28(%eax),%eax
f010c55f:	83 ec 0c             	sub    $0xc,%esp
f010c562:	50                   	push   %eax
f010c563:	e8 d0 ee ff ff       	call   f010b438 <trapname>
f010c568:	83 c4 10             	add    $0x10,%esp
f010c56b:	89 c2                	mov    %eax,%edx
f010c56d:	8b 45 08             	mov    0x8(%ebp),%eax
f010c570:	8b 40 28             	mov    0x28(%eax),%eax
f010c573:	53                   	push   %ebx
f010c574:	52                   	push   %edx
f010c575:	50                   	push   %eax
f010c576:	68 d3 39 13 f0       	push   $0xf01339d3
f010c57b:	e8 b1 48 ff ff       	call   f0100e31 <cprintf>
f010c580:	83 c4 10             	add    $0x10,%esp
	cprintf("  err  0x%08x\n", tf->tf_err);
f010c583:	8b 45 08             	mov    0x8(%ebp),%eax
f010c586:	8b 40 2c             	mov    0x2c(%eax),%eax
f010c589:	83 ec 08             	sub    $0x8,%esp
f010c58c:	50                   	push   %eax
f010c58d:	68 ea 39 13 f0       	push   $0xf01339ea
f010c592:	e8 9a 48 ff ff       	call   f0100e31 <cprintf>
f010c597:	83 c4 10             	add    $0x10,%esp
	cprintf("  eip  0x%08x\n", tf->tf_eip);
f010c59a:	8b 45 08             	mov    0x8(%ebp),%eax
f010c59d:	8b 40 30             	mov    0x30(%eax),%eax
f010c5a0:	83 ec 08             	sub    $0x8,%esp
f010c5a3:	50                   	push   %eax
f010c5a4:	68 f9 39 13 f0       	push   $0xf01339f9
f010c5a9:	e8 83 48 ff ff       	call   f0100e31 <cprintf>
f010c5ae:	83 c4 10             	add    $0x10,%esp
	cprintf("  cs   0x----%04x\n", tf->tf_cs);
f010c5b1:	8b 45 08             	mov    0x8(%ebp),%eax
f010c5b4:	8b 40 34             	mov    0x34(%eax),%eax
f010c5b7:	0f b7 c0             	movzwl %ax,%eax
f010c5ba:	83 ec 08             	sub    $0x8,%esp
f010c5bd:	50                   	push   %eax
f010c5be:	68 08 3a 13 f0       	push   $0xf0133a08
f010c5c3:	e8 69 48 ff ff       	call   f0100e31 <cprintf>
f010c5c8:	83 c4 10             	add    $0x10,%esp
	cprintf("  flag 0x%08x\n", tf->tf_eflags);
f010c5cb:	8b 45 08             	mov    0x8(%ebp),%eax
f010c5ce:	8b 40 38             	mov    0x38(%eax),%eax
f010c5d1:	83 ec 08             	sub    $0x8,%esp
f010c5d4:	50                   	push   %eax
f010c5d5:	68 1b 3a 13 f0       	push   $0xf0133a1b
f010c5da:	e8 52 48 ff ff       	call   f0100e31 <cprintf>
f010c5df:	83 c4 10             	add    $0x10,%esp
	cprintf("  esp  0x%08x\n", tf->tf_esp);
f010c5e2:	8b 45 08             	mov    0x8(%ebp),%eax
f010c5e5:	8b 40 3c             	mov    0x3c(%eax),%eax
f010c5e8:	83 ec 08             	sub    $0x8,%esp
f010c5eb:	50                   	push   %eax
f010c5ec:	68 2a 3a 13 f0       	push   $0xf0133a2a
f010c5f1:	e8 3b 48 ff ff       	call   f0100e31 <cprintf>
f010c5f6:	83 c4 10             	add    $0x10,%esp
	cprintf("  ss   0x----%04x\n", tf->tf_ss);
f010c5f9:	8b 45 08             	mov    0x8(%ebp),%eax
f010c5fc:	8b 40 40             	mov    0x40(%eax),%eax
f010c5ff:	0f b7 c0             	movzwl %ax,%eax
f010c602:	83 ec 08             	sub    $0x8,%esp
f010c605:	50                   	push   %eax
f010c606:	68 39 3a 13 f0       	push   $0xf0133a39
f010c60b:	e8 21 48 ff ff       	call   f0100e31 <cprintf>
f010c610:	83 c4 10             	add    $0x10,%esp
}
f010c613:	90                   	nop
f010c614:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010c617:	c9                   	leave  
f010c618:	c3                   	ret    

f010c619 <print_regs>:

void print_regs(struct PushRegs *regs)
{
f010c619:	55                   	push   %ebp
f010c61a:	89 e5                	mov    %esp,%ebp
f010c61c:	83 ec 08             	sub    $0x8,%esp
	cprintf("  edi  0x%08x\n", regs->reg_edi);
f010c61f:	8b 45 08             	mov    0x8(%ebp),%eax
f010c622:	8b 00                	mov    (%eax),%eax
f010c624:	83 ec 08             	sub    $0x8,%esp
f010c627:	50                   	push   %eax
f010c628:	68 4c 3a 13 f0       	push   $0xf0133a4c
f010c62d:	e8 ff 47 ff ff       	call   f0100e31 <cprintf>
f010c632:	83 c4 10             	add    $0x10,%esp
	cprintf("  esi  0x%08x\n", regs->reg_esi);
f010c635:	8b 45 08             	mov    0x8(%ebp),%eax
f010c638:	8b 40 04             	mov    0x4(%eax),%eax
f010c63b:	83 ec 08             	sub    $0x8,%esp
f010c63e:	50                   	push   %eax
f010c63f:	68 5b 3a 13 f0       	push   $0xf0133a5b
f010c644:	e8 e8 47 ff ff       	call   f0100e31 <cprintf>
f010c649:	83 c4 10             	add    $0x10,%esp
	cprintf("  ebp  0x%08x\n", regs->reg_ebp);
f010c64c:	8b 45 08             	mov    0x8(%ebp),%eax
f010c64f:	8b 40 08             	mov    0x8(%eax),%eax
f010c652:	83 ec 08             	sub    $0x8,%esp
f010c655:	50                   	push   %eax
f010c656:	68 6a 3a 13 f0       	push   $0xf0133a6a
f010c65b:	e8 d1 47 ff ff       	call   f0100e31 <cprintf>
f010c660:	83 c4 10             	add    $0x10,%esp
	cprintf("  oesp 0x%08x\n", regs->reg_oesp);
f010c663:	8b 45 08             	mov    0x8(%ebp),%eax
f010c666:	8b 40 0c             	mov    0xc(%eax),%eax
f010c669:	83 ec 08             	sub    $0x8,%esp
f010c66c:	50                   	push   %eax
f010c66d:	68 79 3a 13 f0       	push   $0xf0133a79
f010c672:	e8 ba 47 ff ff       	call   f0100e31 <cprintf>
f010c677:	83 c4 10             	add    $0x10,%esp
	cprintf("  ebx  0x%08x\n", regs->reg_ebx);
f010c67a:	8b 45 08             	mov    0x8(%ebp),%eax
f010c67d:	8b 40 10             	mov    0x10(%eax),%eax
f010c680:	83 ec 08             	sub    $0x8,%esp
f010c683:	50                   	push   %eax
f010c684:	68 88 3a 13 f0       	push   $0xf0133a88
f010c689:	e8 a3 47 ff ff       	call   f0100e31 <cprintf>
f010c68e:	83 c4 10             	add    $0x10,%esp
	cprintf("  edx  0x%08x\n", regs->reg_edx);
f010c691:	8b 45 08             	mov    0x8(%ebp),%eax
f010c694:	8b 40 14             	mov    0x14(%eax),%eax
f010c697:	83 ec 08             	sub    $0x8,%esp
f010c69a:	50                   	push   %eax
f010c69b:	68 97 3a 13 f0       	push   $0xf0133a97
f010c6a0:	e8 8c 47 ff ff       	call   f0100e31 <cprintf>
f010c6a5:	83 c4 10             	add    $0x10,%esp
	cprintf("  ecx  0x%08x\n", regs->reg_ecx);
f010c6a8:	8b 45 08             	mov    0x8(%ebp),%eax
f010c6ab:	8b 40 18             	mov    0x18(%eax),%eax
f010c6ae:	83 ec 08             	sub    $0x8,%esp
f010c6b1:	50                   	push   %eax
f010c6b2:	68 a6 3a 13 f0       	push   $0xf0133aa6
f010c6b7:	e8 75 47 ff ff       	call   f0100e31 <cprintf>
f010c6bc:	83 c4 10             	add    $0x10,%esp
	cprintf("  eax  0x%08x\n", regs->reg_eax);
f010c6bf:	8b 45 08             	mov    0x8(%ebp),%eax
f010c6c2:	8b 40 1c             	mov    0x1c(%eax),%eax
f010c6c5:	83 ec 08             	sub    $0x8,%esp
f010c6c8:	50                   	push   %eax
f010c6c9:	68 b5 3a 13 f0       	push   $0xf0133ab5
f010c6ce:	e8 5e 47 ff ff       	call   f0100e31 <cprintf>
f010c6d3:	83 c4 10             	add    $0x10,%esp
}
f010c6d6:	90                   	nop
f010c6d7:	c9                   	leave  
f010c6d8:	c3                   	ret    

f010c6d9 <trap_dispatch>:

static void trap_dispatch(struct Trapframe *tf)
{
f010c6d9:	55                   	push   %ebp
f010c6da:	89 e5                	mov    %esp,%ebp
f010c6dc:	57                   	push   %edi
f010c6dd:	56                   	push   %esi
f010c6de:	53                   	push   %ebx
f010c6df:	83 ec 1c             	sub    $0x1c,%esp
	// Handle processor exceptions.
	// LAB 3: Your code here.

	if(tf->tf_trapno == T_PGFLT)
f010c6e2:	8b 45 08             	mov    0x8(%ebp),%eax
f010c6e5:	8b 40 28             	mov    0x28(%eax),%eax
f010c6e8:	83 f8 0e             	cmp    $0xe,%eax
f010c6eb:	75 29                	jne    f010c716 <trap_dispatch+0x3d>
	{
		//print_trapframe(tf);
		if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX))
f010c6ed:	83 ec 0c             	sub    $0xc,%esp
f010c6f0:	6a 01                	push   $0x1
f010c6f2:	e8 c4 15 00 00       	call   f010dcbb <isPageReplacmentAlgorithmLRU>
f010c6f7:	83 c4 10             	add    $0x10,%esp
f010c6fa:	85 c0                	test   %eax,%eax
f010c6fc:	74 05                	je     f010c703 <trap_dispatch+0x2a>
		{
			//cprintf("===========Table WS before updating time stamp========\n");
			//env_table_ws_print(curenv) ;
			update_WS_time_stamps();
f010c6fe:	e8 02 9d ff ff       	call   f0106405 <update_WS_time_stamps>
		}
		fault_handler(tf);
f010c703:	83 ec 0c             	sub    $0xc,%esp
f010c706:	ff 75 08             	pushl  0x8(%ebp)
f010c709:	e8 51 02 00 00       	call   f010c95f <fault_handler>
f010c70e:	83 c4 10             	add    $0x10,%esp
			panic("unhandled trap in user program");

			return;
		}
	}
	return;
f010c711:	e9 bb 00 00 00       	jmp    f010c7d1 <trap_dispatch+0xf8>
			//env_table_ws_print(curenv) ;
			update_WS_time_stamps();
		}
		fault_handler(tf);
	}
	else if (tf->tf_trapno == T_SYSCALL)
f010c716:	8b 45 08             	mov    0x8(%ebp),%eax
f010c719:	8b 40 28             	mov    0x28(%eax),%eax
f010c71c:	83 f8 30             	cmp    $0x30,%eax
f010c71f:	75 42                	jne    f010c763 <trap_dispatch+0x8a>
	{
		uint32 ret = syscall(tf->tf_regs.reg_eax
f010c721:	8b 45 08             	mov    0x8(%ebp),%eax
f010c724:	8b 78 04             	mov    0x4(%eax),%edi
f010c727:	8b 45 08             	mov    0x8(%ebp),%eax
f010c72a:	8b 30                	mov    (%eax),%esi
f010c72c:	8b 45 08             	mov    0x8(%ebp),%eax
f010c72f:	8b 58 10             	mov    0x10(%eax),%ebx
f010c732:	8b 45 08             	mov    0x8(%ebp),%eax
f010c735:	8b 48 18             	mov    0x18(%eax),%ecx
f010c738:	8b 45 08             	mov    0x8(%ebp),%eax
f010c73b:	8b 50 14             	mov    0x14(%eax),%edx
f010c73e:	8b 45 08             	mov    0x8(%ebp),%eax
f010c741:	8b 40 1c             	mov    0x1c(%eax),%eax
f010c744:	83 ec 08             	sub    $0x8,%esp
f010c747:	57                   	push   %edi
f010c748:	56                   	push   %esi
f010c749:	53                   	push   %ebx
f010c74a:	51                   	push   %ecx
f010c74b:	52                   	push   %edx
f010c74c:	50                   	push   %eax
f010c74d:	e8 a8 0b 00 00       	call   f010d2fa <syscall>
f010c752:	83 c4 20             	add    $0x20,%esp
f010c755:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				,tf->tf_regs.reg_edx
				,tf->tf_regs.reg_ecx
				,tf->tf_regs.reg_ebx
				,tf->tf_regs.reg_edi
				,tf->tf_regs.reg_esi);
		tf->tf_regs.reg_eax = ret;
f010c758:	8b 45 08             	mov    0x8(%ebp),%eax
f010c75b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010c75e:	89 50 1c             	mov    %edx,0x1c(%eax)
			panic("unhandled trap in user program");

			return;
		}
	}
	return;
f010c761:	eb 6e                	jmp    f010c7d1 <trap_dispatch+0xf8>
				,tf->tf_regs.reg_ebx
				,tf->tf_regs.reg_edi
				,tf->tf_regs.reg_esi);
		tf->tf_regs.reg_eax = ret;
	}
	else if(tf->tf_trapno == T_DBLFLT)
f010c763:	8b 45 08             	mov    0x8(%ebp),%eax
f010c766:	8b 40 28             	mov    0x28(%eax),%eax
f010c769:	83 f8 08             	cmp    $0x8,%eax
f010c76c:	75 17                	jne    f010c785 <trap_dispatch+0xac>
	{
		panic("double fault!!");
f010c76e:	83 ec 04             	sub    $0x4,%esp
f010c771:	68 c4 3a 13 f0       	push   $0xf0133ac4
f010c776:	68 e7 00 00 00       	push   $0xe7
f010c77b:	68 d3 3a 13 f0       	push   $0xf0133ad3
f010c780:	e8 2b 3a ff ff       	call   f01001b0 <_panic>
	}
	else if (tf->tf_trapno == IRQ0_Clock)
f010c785:	8b 45 08             	mov    0x8(%ebp),%eax
f010c788:	8b 40 28             	mov    0x28(%eax),%eax
f010c78b:	83 f8 20             	cmp    $0x20,%eax
f010c78e:	75 07                	jne    f010c797 <trap_dispatch+0xbe>
	{
		clock_interrupt_handler() ;
f010c790:	e8 33 9c ff ff       	call   f01063c8 <clock_interrupt_handler>
			panic("unhandled trap in user program");

			return;
		}
	}
	return;
f010c795:	eb 3a                	jmp    f010c7d1 <trap_dispatch+0xf8>

	else
	{
		// Unexpected trap: The user process or the kernel has a bug.
		//print_trapframe(tf);
		if (tf->tf_cs == GD_KT)
f010c797:	8b 45 08             	mov    0x8(%ebp),%eax
f010c79a:	8b 40 34             	mov    0x34(%eax),%eax
f010c79d:	66 83 f8 08          	cmp    $0x8,%ax
f010c7a1:	75 17                	jne    f010c7ba <trap_dispatch+0xe1>
		{
			panic("unhandled trap in kernel");
f010c7a3:	83 ec 04             	sub    $0x4,%esp
f010c7a6:	68 e4 3a 13 f0       	push   $0xf0133ae4
f010c7ab:	68 f4 00 00 00       	push   $0xf4
f010c7b0:	68 d3 3a 13 f0       	push   $0xf0133ad3
f010c7b5:	e8 f6 39 ff ff       	call   f01001b0 <_panic>
		}
		else {
			//env_destroy(curenv);
			panic("unhandled trap in user program");
f010c7ba:	83 ec 04             	sub    $0x4,%esp
f010c7bd:	68 00 3b 13 f0       	push   $0xf0133b00
f010c7c2:	68 f8 00 00 00       	push   $0xf8
f010c7c7:	68 d3 3a 13 f0       	push   $0xf0133ad3
f010c7cc:	e8 df 39 ff ff       	call   f01001b0 <_panic>

			return;
		}
	}
	return;
}
f010c7d1:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010c7d4:	5b                   	pop    %ebx
f010c7d5:	5e                   	pop    %esi
f010c7d6:	5f                   	pop    %edi
f010c7d7:	5d                   	pop    %ebp
f010c7d8:	c3                   	ret    

f010c7d9 <trap>:

void trap(struct Trapframe *tf)
{
f010c7d9:	55                   	push   %ebp
f010c7da:	89 e5                	mov    %esp,%ebp
f010c7dc:	57                   	push   %edi
f010c7dd:	56                   	push   %esi
f010c7de:	53                   	push   %ebx
f010c7df:	83 ec 1c             	sub    $0x1c,%esp
	kclock_stop();
f010c7e2:	e8 e5 82 ff ff       	call   f0104acc <kclock_stop>

	int userTrap = 0;
f010c7e7:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	if ((tf->tf_cs & 3) == 3) {
f010c7ee:	8b 45 08             	mov    0x8(%ebp),%eax
f010c7f1:	8b 40 34             	mov    0x34(%eax),%eax
f010c7f4:	0f b7 c0             	movzwl %ax,%eax
f010c7f7:	83 e0 03             	and    $0x3,%eax
f010c7fa:	83 f8 03             	cmp    $0x3,%eax
f010c7fd:	75 49                	jne    f010c848 <trap+0x6f>
		assert(curenv);
f010c7ff:	a1 74 41 25 f0       	mov    0xf0254174,%eax
f010c804:	85 c0                	test   %eax,%eax
f010c806:	75 19                	jne    f010c821 <trap+0x48>
f010c808:	68 1f 3b 13 f0       	push   $0xf0133b1f
f010c80d:	68 26 3b 13 f0       	push   $0xf0133b26
f010c812:	68 06 01 00 00       	push   $0x106
f010c817:	68 d3 3a 13 f0       	push   $0xf0133ad3
f010c81c:	e8 8f 39 ff ff       	call   f01001b0 <_panic>
		curenv->env_tf = *tf;
f010c821:	8b 15 74 41 25 f0    	mov    0xf0254174,%edx
f010c827:	8b 45 08             	mov    0x8(%ebp),%eax
f010c82a:	89 c3                	mov    %eax,%ebx
f010c82c:	b8 11 00 00 00       	mov    $0x11,%eax
f010c831:	89 d7                	mov    %edx,%edi
f010c833:	89 de                	mov    %ebx,%esi
f010c835:	89 c1                	mov    %eax,%ecx
f010c837:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
		tf = &(curenv->env_tf);
f010c839:	a1 74 41 25 f0       	mov    0xf0254174,%eax
f010c83e:	89 45 08             	mov    %eax,0x8(%ebp)
		userTrap = 1;
f010c841:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
	}
	if(tf->tf_trapno == IRQ0_Clock)
f010c848:	8b 45 08             	mov    0x8(%ebp),%eax
f010c84b:	8b 40 28             	mov    0x28(%eax),%eax
f010c84e:	83 f8 20             	cmp    $0x20,%eax
f010c851:	75 40                	jne    f010c893 <trap+0xba>
	{
		//		uint16 cnt0 = kclock_read_cnt0() ;
		//		cprintf("CLOCK INTERRUPT: Counter0 Value = %d\n", cnt0 );

		if (userTrap)
f010c853:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010c857:	0f 84 a6 00 00 00    	je     f010c903 <trap+0x12a>
		{
			assert(curenv);
f010c85d:	a1 74 41 25 f0       	mov    0xf0254174,%eax
f010c862:	85 c0                	test   %eax,%eax
f010c864:	75 19                	jne    f010c87f <trap+0xa6>
f010c866:	68 1f 3b 13 f0       	push   $0xf0133b1f
f010c86b:	68 26 3b 13 f0       	push   $0xf0133b26
f010c870:	68 12 01 00 00       	push   $0x112
f010c875:	68 d3 3a 13 f0       	push   $0xf0133ad3
f010c87a:	e8 31 39 ff ff       	call   f01001b0 <_panic>
			curenv->nClocks++ ;
f010c87f:	a1 74 41 25 f0       	mov    0xf0254174,%eax
f010c884:	8b 90 9c da 01 00    	mov    0x1da9c(%eax),%edx
f010c88a:	42                   	inc    %edx
f010c88b:	89 90 9c da 01 00    	mov    %edx,0x1da9c(%eax)
f010c891:	eb 70                	jmp    f010c903 <trap+0x12a>
		}
	}
	else if (tf->tf_trapno == T_PGFLT){
f010c893:	8b 45 08             	mov    0x8(%ebp),%eax
f010c896:	8b 40 28             	mov    0x28(%eax),%eax
f010c899:	83 f8 0e             	cmp    $0xe,%eax
f010c89c:	75 65                	jne    f010c903 <trap+0x12a>
		//2016: Bypass the faulted instruction
		if (bypassInstrLength != 0){
f010c89e:	a0 28 4a 25 f0       	mov    0xf0254a28,%al
f010c8a3:	84 c0                	test   %al,%al
f010c8a5:	74 5c                	je     f010c903 <trap+0x12a>
			if (userTrap){
f010c8a7:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010c8ab:	74 2c                	je     f010c8d9 <trap+0x100>
				curenv->env_tf.tf_eip = (uint32*)((uint32)(curenv->env_tf.tf_eip) + bypassInstrLength);
f010c8ad:	a1 74 41 25 f0       	mov    0xf0254174,%eax
f010c8b2:	8b 15 74 41 25 f0    	mov    0xf0254174,%edx
f010c8b8:	8b 52 30             	mov    0x30(%edx),%edx
f010c8bb:	89 d1                	mov    %edx,%ecx
f010c8bd:	8a 15 28 4a 25 f0    	mov    0xf0254a28,%dl
f010c8c3:	0f b6 d2             	movzbl %dl,%edx
f010c8c6:	01 ca                	add    %ecx,%edx
f010c8c8:	89 50 30             	mov    %edx,0x30(%eax)
				env_run(curenv);
f010c8cb:	a1 74 41 25 f0       	mov    0xf0254174,%eax
f010c8d0:	83 ec 0c             	sub    $0xc,%esp
f010c8d3:	50                   	push   %eax
f010c8d4:	e8 ea d4 ff ff       	call   f0109dc3 <env_run>
			}
			else{
				tf->tf_eip = (uint32*)((uint32)(tf->tf_eip) + bypassInstrLength);
f010c8d9:	8b 45 08             	mov    0x8(%ebp),%eax
f010c8dc:	8b 40 30             	mov    0x30(%eax),%eax
f010c8df:	89 c2                	mov    %eax,%edx
f010c8e1:	a0 28 4a 25 f0       	mov    0xf0254a28,%al
f010c8e6:	0f b6 c0             	movzbl %al,%eax
f010c8e9:	01 d0                	add    %edx,%eax
f010c8eb:	89 c2                	mov    %eax,%edx
f010c8ed:	8b 45 08             	mov    0x8(%ebp),%eax
f010c8f0:	89 50 30             	mov    %edx,0x30(%eax)
				kclock_resume();
f010c8f3:	e8 ff 81 ff ff       	call   f0104af7 <kclock_resume>
				env_pop_tf(tf);
f010c8f8:	83 ec 0c             	sub    $0xc,%esp
f010c8fb:	ff 75 08             	pushl  0x8(%ebp)
f010c8fe:	e8 12 d6 ff ff       	call   f0109f15 <env_pop_tf>
			}
		}
	}
	trap_dispatch(tf);
f010c903:	83 ec 0c             	sub    $0xc,%esp
f010c906:	ff 75 08             	pushl  0x8(%ebp)
f010c909:	e8 cb fd ff ff       	call   f010c6d9 <trap_dispatch>
f010c90e:	83 c4 10             	add    $0x10,%esp
	if (userTrap)
f010c911:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010c915:	74 3d                	je     f010c954 <trap+0x17b>
	{
		assert(curenv && curenv->env_status == ENV_RUNNABLE);
f010c917:	a1 74 41 25 f0       	mov    0xf0254174,%eax
f010c91c:	85 c0                	test   %eax,%eax
f010c91e:	74 0d                	je     f010c92d <trap+0x154>
f010c920:	a1 74 41 25 f0       	mov    0xf0254174,%eax
f010c925:	8b 40 54             	mov    0x54(%eax),%eax
f010c928:	83 f8 02             	cmp    $0x2,%eax
f010c92b:	74 19                	je     f010c946 <trap+0x16d>
f010c92d:	68 3c 3b 13 f0       	push   $0xf0133b3c
f010c932:	68 26 3b 13 f0       	push   $0xf0133b26
f010c937:	68 27 01 00 00       	push   $0x127
f010c93c:	68 d3 3a 13 f0       	push   $0xf0133ad3
f010c941:	e8 6a 38 ff ff       	call   f01001b0 <_panic>
		env_run(curenv);
f010c946:	a1 74 41 25 f0       	mov    0xf0254174,%eax
f010c94b:	83 ec 0c             	sub    $0xc,%esp
f010c94e:	50                   	push   %eax
f010c94f:	e8 6f d4 ff ff       	call   f0109dc3 <env_run>
	/* 2019
	 * If trap from kernel, then return to the called kernel function using the passed param "tf" not the user one that's stored in curenv
	 */
	else
	{
		env_pop_tf((tf));
f010c954:	83 ec 0c             	sub    $0xc,%esp
f010c957:	ff 75 08             	pushl  0x8(%ebp)
f010c95a:	e8 b6 d5 ff ff       	call   f0109f15 <env_pop_tf>

f010c95f <fault_handler>:

/*2022*/
uint32 last_fault_va = 0;
int8 num_repeated_fault  = 0;
void fault_handler(struct Trapframe *tf)
{
f010c95f:	55                   	push   %ebp
f010c960:	89 e5                	mov    %esp,%ebp
f010c962:	83 ec 28             	sub    $0x28,%esp
	int userTrap = 0;
f010c965:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	if ((tf->tf_cs & 3) == 3) {
f010c96c:	8b 45 08             	mov    0x8(%ebp),%eax
f010c96f:	8b 40 34             	mov    0x34(%eax),%eax
f010c972:	0f b7 c0             	movzwl %ax,%eax
f010c975:	83 e0 03             	and    $0x3,%eax
f010c978:	83 f8 03             	cmp    $0x3,%eax
f010c97b:	75 07                	jne    f010c984 <fault_handler+0x25>
		userTrap = 1;
f010c97d:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)

static __inline uint32
rcr2(void)
{
	uint32 val;
	__asm __volatile("movl %%cr2,%0" : "=r" (val));
f010c984:	0f 20 d0             	mov    %cr2,%eax
f010c987:	89 45 e0             	mov    %eax,-0x20(%ebp)
	return val;
f010c98a:	8b 45 e0             	mov    -0x20(%ebp),%eax
	}
	uint32 fault_va;

	// Read processor's CR2 register to find the faulting address
	fault_va = rcr2();
f010c98d:	89 45 ec             	mov    %eax,-0x14(%ebp)
	//	cprintf("Faulted VA = %x\n", fault_va);
	//	print_trapframe(tf);

	/******************************************************/
	/*2022*///If same fault va for 3 times, then panic
	if (last_fault_va == fault_va)
f010c990:	a1 a0 49 25 f0       	mov    0xf02549a0,%eax
f010c995:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010c998:	75 2b                	jne    f010c9c5 <fault_handler+0x66>
	{
		num_repeated_fault++ ;
f010c99a:	a0 a4 49 25 f0       	mov    0xf02549a4,%al
f010c99f:	40                   	inc    %eax
f010c9a0:	a2 a4 49 25 f0       	mov    %al,0xf02549a4
		if (num_repeated_fault == 3)
f010c9a5:	a0 a4 49 25 f0       	mov    0xf02549a4,%al
f010c9aa:	3c 03                	cmp    $0x3,%al
f010c9ac:	75 1e                	jne    f010c9cc <fault_handler+0x6d>
			panic("Failed to handle fault at va=%x: same va is faulted for 3 successive times\n", fault_va);
f010c9ae:	ff 75 ec             	pushl  -0x14(%ebp)
f010c9b1:	68 6c 3b 13 f0       	push   $0xf0133b6c
f010c9b6:	68 4a 01 00 00       	push   $0x14a
f010c9bb:	68 d3 3a 13 f0       	push   $0xf0133ad3
f010c9c0:	e8 eb 37 ff ff       	call   f01001b0 <_panic>
	}
	else
	{
		num_repeated_fault = 0;
f010c9c5:	c6 05 a4 49 25 f0 00 	movb   $0x0,0xf02549a4
	}
	last_fault_va = fault_va ;
f010c9cc:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010c9cf:	a3 a0 49 25 f0       	mov    %eax,0xf02549a0
	/******************************************************/
	//2017: Check stack overflow for Kernel
	if (!userTrap)
f010c9d4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010c9d8:	75 29                	jne    f010ca03 <fault_handler+0xa4>
	{
		if (fault_va < KERNEL_STACK_TOP - KERNEL_STACK_SIZE && fault_va >= USER_LIMIT)
f010c9da:	81 7d ec ff 7f bf ef 	cmpl   $0xefbf7fff,-0x14(%ebp)
f010c9e1:	77 40                	ja     f010ca23 <fault_handler+0xc4>
f010c9e3:	81 7d ec ff ff 7f ef 	cmpl   $0xef7fffff,-0x14(%ebp)
f010c9ea:	76 37                	jbe    f010ca23 <fault_handler+0xc4>
			panic("Kernel: stack overflow exception!");
f010c9ec:	83 ec 04             	sub    $0x4,%esp
f010c9ef:	68 b8 3b 13 f0       	push   $0xf0133bb8
f010c9f4:	68 56 01 00 00       	push   $0x156
f010c9f9:	68 d3 3a 13 f0       	push   $0xf0133ad3
f010c9fe:	e8 ad 37 ff ff       	call   f01001b0 <_panic>
	}
	//2017: Check stack underflow for User
	else
	{
		if (fault_va >= USTACKTOP)
f010ca03:	81 7d ec ff df bf ee 	cmpl   $0xeebfdfff,-0x14(%ebp)
f010ca0a:	76 17                	jbe    f010ca23 <fault_handler+0xc4>
			panic("User: stack underflow exception!");
f010ca0c:	83 ec 04             	sub    $0x4,%esp
f010ca0f:	68 dc 3b 13 f0       	push   $0xf0133bdc
f010ca14:	68 5c 01 00 00       	push   $0x15c
f010ca19:	68 d3 3a 13 f0       	push   $0xf0133ad3
f010ca1e:	e8 8d 37 ff ff       	call   f01001b0 <_panic>
	}

	//get a pointer to the environment that caused the fault at runtime
	struct Env* faulted_env = curenv;
f010ca23:	a1 74 41 25 f0       	mov    0xf0254174,%eax
f010ca28:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//check the faulted address, is it a table or not ?
	//If the directory entry of the faulted address is NOT PRESENT then
	if ( (faulted_env->env_page_directory[PDX(fault_va)] & PERM_PRESENT) != PERM_PRESENT)
f010ca2b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010ca2e:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010ca34:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010ca37:	c1 ea 16             	shr    $0x16,%edx
f010ca3a:	c1 e2 02             	shl    $0x2,%edx
f010ca3d:	01 d0                	add    %edx,%eax
f010ca3f:	8b 00                	mov    (%eax),%eax
f010ca41:	83 e0 01             	and    $0x1,%eax
f010ca44:	85 c0                	test   %eax,%eax
f010ca46:	75 28                	jne    f010ca70 <fault_handler+0x111>
	{
		// we have a table fault =============================================================
		//cprintf("[%s] user TABLE fault va %08x\n", curenv->prog_name, fault_va);
		faulted_env->tableFaultsCounter ++ ;
f010ca48:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010ca4b:	8b 80 78 da 01 00    	mov    0x1da78(%eax),%eax
f010ca51:	8d 50 01             	lea    0x1(%eax),%edx
f010ca54:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010ca57:	89 90 78 da 01 00    	mov    %edx,0x1da78(%eax)

		table_fault_handler(faulted_env, fault_va);
f010ca5d:	83 ec 08             	sub    $0x8,%esp
f010ca60:	ff 75 ec             	pushl  -0x14(%ebp)
f010ca63:	ff 75 e8             	pushl  -0x18(%ebp)
f010ca66:	e8 35 13 00 00       	call   f010dda0 <table_fault_handler>
f010ca6b:	83 c4 10             	add    $0x10,%esp
f010ca6e:	eb 7e                	jmp    f010caee <fault_handler+0x18f>

			/*============================================================================================*/
		}

		/*2022: Check if fault due to Access Rights */
		int perms = pt_get_page_permissions(faulted_env->env_page_directory, fault_va);
f010ca70:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010ca73:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010ca79:	83 ec 08             	sub    $0x8,%esp
f010ca7c:	ff 75 ec             	pushl  -0x14(%ebp)
f010ca7f:	50                   	push   %eax
f010ca80:	e8 d5 ba ff ff       	call   f010855a <pt_get_page_permissions>
f010ca85:	83 c4 10             	add    $0x10,%esp
f010ca88:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		if (perms & PERM_PRESENT)
f010ca8b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ca8e:	83 e0 01             	and    $0x1,%eax
f010ca91:	85 c0                	test   %eax,%eax
f010ca93:	74 17                	je     f010caac <fault_handler+0x14d>
			panic("Page @va=%x is exist! page fault due to violation of ACCESS RIGHTS\n", fault_va) ;
f010ca95:	ff 75 ec             	pushl  -0x14(%ebp)
f010ca98:	68 00 3c 13 f0       	push   $0xf0133c00
f010ca9d:	68 7b 01 00 00       	push   $0x17b
f010caa2:	68 d3 3a 13 f0       	push   $0xf0133ad3
f010caa7:	e8 04 37 ff ff       	call   f01001b0 <_panic>


		// we have normal page fault =============================================================
		faulted_env->pageFaultsCounter ++ ;
f010caac:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010caaf:	8b 80 74 da 01 00    	mov    0x1da74(%eax),%eax
f010cab5:	8d 50 01             	lea    0x1(%eax),%edx
f010cab8:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010cabb:	89 90 74 da 01 00    	mov    %edx,0x1da74(%eax)

		//		cprintf("[%08s] user PAGE fault va %08x\n", curenv->prog_name, fault_va);
		//		cprintf("\nPage working set BEFORE fault handler...\n");
		//		env_page_ws_print(curenv);

		if(isBufferingEnabled())
f010cac1:	e8 b8 12 00 00       	call   f010dd7e <isBufferingEnabled>
f010cac6:	84 c0                	test   %al,%al
f010cac8:	74 13                	je     f010cadd <fault_handler+0x17e>
		{
			__page_fault_handler_with_buffering(faulted_env, fault_va);
f010caca:	83 ec 08             	sub    $0x8,%esp
f010cacd:	ff 75 ec             	pushl  -0x14(%ebp)
f010cad0:	ff 75 e8             	pushl  -0x18(%ebp)
f010cad3:	e8 6b 13 00 00       	call   f010de43 <__page_fault_handler_with_buffering>
f010cad8:	83 c4 10             	add    $0x10,%esp
f010cadb:	eb 11                	jmp    f010caee <fault_handler+0x18f>
		}
		else
		{
			//page_fault_handler(faulted_env, fault_va);
			page_fault_handler(faulted_env, fault_va);
f010cadd:	83 ec 08             	sub    $0x8,%esp
f010cae0:	ff 75 ec             	pushl  -0x14(%ebp)
f010cae3:	ff 75 e8             	pushl  -0x18(%ebp)
f010cae6:	e8 da 12 00 00       	call   f010ddc5 <page_fault_handler>
f010caeb:	83 c4 10             	add    $0x10,%esp

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f010caee:	0f 20 d8             	mov    %cr3,%eax
f010caf1:	89 45 f0             	mov    %eax,-0x10(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f010caf4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010caf7:	0f 22 d8             	mov    %eax,%cr3
	/*************************************************************/
	//Refresh the TLB cache
	tlbflush();
	/*************************************************************/

}
f010cafa:	90                   	nop
f010cafb:	c9                   	leave  
f010cafc:	c3                   	ret    
f010cafd:	90                   	nop

f010cafe <PAGE_FAULT>:

/*
 * Lab 3: Your code here for generating entry points for the different traps.
 */

TRAPHANDLER(PAGE_FAULT, T_PGFLT)
f010cafe:	6a 0e                	push   $0xe
f010cb00:	e9 ed 00 00 00       	jmp    f010cbf2 <_alltraps>
f010cb05:	90                   	nop

f010cb06 <SYSCALL_HANDLER>:

TRAPHANDLER_NOEC(SYSCALL_HANDLER, T_SYSCALL)
f010cb06:	6a 00                	push   $0x0
f010cb08:	6a 30                	push   $0x30
f010cb0a:	e9 e3 00 00 00       	jmp    f010cbf2 <_alltraps>
f010cb0f:	90                   	nop

f010cb10 <DBL_FAULT>:

// FOS 2010
//TRAPHANDLER(GP_FAULT, T_GPFLT)
TRAPHANDLER(DBL_FAULT, T_DBLFLT)
f010cb10:	6a 08                	push   $0x8
f010cb12:	e9 db 00 00 00       	jmp    f010cbf2 <_alltraps>
f010cb17:	90                   	nop

f010cb18 <ALL_FAULTS0>:

TRAPHANDLER_NOEC(ALL_FAULTS0, T_DIVIDE)//     0		// divide error
f010cb18:	6a 00                	push   $0x0
f010cb1a:	6a 00                	push   $0x0
f010cb1c:	e9 d1 00 00 00       	jmp    f010cbf2 <_alltraps>
f010cb21:	90                   	nop

f010cb22 <ALL_FAULTS1>:
TRAPHANDLER_NOEC(ALL_FAULTS1, T_DEBUG   )//   1		// debug exception
f010cb22:	6a 00                	push   $0x0
f010cb24:	6a 01                	push   $0x1
f010cb26:	e9 c7 00 00 00       	jmp    f010cbf2 <_alltraps>
f010cb2b:	90                   	nop

f010cb2c <ALL_FAULTS2>:
TRAPHANDLER_NOEC(ALL_FAULTS2,  T_NMI       )// 2		// non-maskable interrupt
f010cb2c:	6a 00                	push   $0x0
f010cb2e:	6a 02                	push   $0x2
f010cb30:	e9 bd 00 00 00       	jmp    f010cbf2 <_alltraps>
f010cb35:	90                   	nop

f010cb36 <ALL_FAULTS3>:
TRAPHANDLER_NOEC(ALL_FAULTS3,  T_BRKPT      )//3		// breakpoint
f010cb36:	6a 00                	push   $0x0
f010cb38:	6a 03                	push   $0x3
f010cb3a:	e9 b3 00 00 00       	jmp    f010cbf2 <_alltraps>
f010cb3f:	90                   	nop

f010cb40 <ALL_FAULTS4>:
TRAPHANDLER_NOEC(ALL_FAULTS4,  T_OFLOW      )//4		// overflow
f010cb40:	6a 00                	push   $0x0
f010cb42:	6a 04                	push   $0x4
f010cb44:	e9 a9 00 00 00       	jmp    f010cbf2 <_alltraps>
f010cb49:	90                   	nop

f010cb4a <ALL_FAULTS5>:
TRAPHANDLER_NOEC(ALL_FAULTS5,  T_BOUND      )//5		// bounds check
f010cb4a:	6a 00                	push   $0x0
f010cb4c:	6a 05                	push   $0x5
f010cb4e:	e9 9f 00 00 00       	jmp    f010cbf2 <_alltraps>
f010cb53:	90                   	nop

f010cb54 <ALL_FAULTS6>:
TRAPHANDLER_NOEC(ALL_FAULTS6,  T_ILLOP      )//6		// illegal opcode
f010cb54:	6a 00                	push   $0x0
f010cb56:	6a 06                	push   $0x6
f010cb58:	e9 95 00 00 00       	jmp    f010cbf2 <_alltraps>
f010cb5d:	90                   	nop

f010cb5e <ALL_FAULTS7>:
TRAPHANDLER_NOEC(ALL_FAULTS7,  T_DEVICE     )//7		// device not available
f010cb5e:	6a 00                	push   $0x0
f010cb60:	6a 07                	push   $0x7
f010cb62:	e9 8b 00 00 00       	jmp    f010cbf2 <_alltraps>
f010cb67:	90                   	nop

f010cb68 <ALL_FAULTS10>:
//TRAPHANDLER(ALL_FAULTS,  T_DBLFLT     8		// double fault
//TRAPHANDLER_NOEC(ALL_FAULTS,  9   )//9	// reserved (not generated by recent processors)
TRAPHANDLER(ALL_FAULTS10,  T_TSS       )//10		// invalid task switch segment
f010cb68:	6a 0a                	push   $0xa
f010cb6a:	e9 83 00 00 00       	jmp    f010cbf2 <_alltraps>
f010cb6f:	90                   	nop

f010cb70 <ALL_FAULTS11>:
TRAPHANDLER(ALL_FAULTS11,  T_SEGNP     )//11		// segment not present
f010cb70:	6a 0b                	push   $0xb
f010cb72:	eb 7e                	jmp    f010cbf2 <_alltraps>

f010cb74 <ALL_FAULTS12>:
TRAPHANDLER(ALL_FAULTS12,  T_STACK     )//12		// stack exception
f010cb74:	6a 0c                	push   $0xc
f010cb76:	eb 7a                	jmp    f010cbf2 <_alltraps>

f010cb78 <ALL_FAULTS13>:
TRAPHANDLER(ALL_FAULTS13,  T_GPFLT     )//13		// General protection fault
f010cb78:	6a 0d                	push   $0xd
f010cb7a:	eb 76                	jmp    f010cbf2 <_alltraps>

f010cb7c <ALL_FAULTS16>:
//TRAPHANDLER(ALL_FAULTS,  T_PGFLT     14		// page fault
//TRAPHANDLER(ALL_FAULTS,  15    )	//15 	// reserved
TRAPHANDLER_NOEC(ALL_FAULTS16,  T_FPERR     )//16		// floating point error
f010cb7c:	6a 00                	push   $0x0
f010cb7e:	6a 10                	push   $0x10
f010cb80:	eb 70                	jmp    f010cbf2 <_alltraps>

f010cb82 <ALL_FAULTS17>:
TRAPHANDLER(ALL_FAULTS17,  T_ALIGN     )//17		// Alignment check
f010cb82:	6a 11                	push   $0x11
f010cb84:	eb 6c                	jmp    f010cbf2 <_alltraps>

f010cb86 <ALL_FAULTS18>:
TRAPHANDLER_NOEC(ALL_FAULTS18,  T_MCHK      )//18		// machine check
f010cb86:	6a 00                	push   $0x0
f010cb88:	6a 12                	push   $0x12
f010cb8a:	eb 66                	jmp    f010cbf2 <_alltraps>

f010cb8c <ALL_FAULTS19>:
TRAPHANDLER_NOEC(ALL_FAULTS19,  19      )//19		// the last one
f010cb8c:	6a 00                	push   $0x0
f010cb8e:	6a 13                	push   $0x13
f010cb90:	eb 60                	jmp    f010cbf2 <_alltraps>

f010cb92 <ALL_FAULTS32>:

TRAPHANDLER_NOEC(ALL_FAULTS32,		IRQ0_Clock      )//32 the first IRQ
f010cb92:	6a 00                	push   $0x0
f010cb94:	6a 20                	push   $0x20
f010cb96:	eb 5a                	jmp    f010cbf2 <_alltraps>

f010cb98 <ALL_FAULTS33>:
TRAPHANDLER_NOEC(ALL_FAULTS33,		33		)//33
f010cb98:	6a 00                	push   $0x0
f010cb9a:	6a 21                	push   $0x21
f010cb9c:	eb 54                	jmp    f010cbf2 <_alltraps>

f010cb9e <ALL_FAULTS34>:
TRAPHANDLER_NOEC(ALL_FAULTS34,      34		)//34
f010cb9e:	6a 00                	push   $0x0
f010cba0:	6a 22                	push   $0x22
f010cba2:	eb 4e                	jmp    f010cbf2 <_alltraps>

f010cba4 <ALL_FAULTS35>:
TRAPHANDLER_NOEC(ALL_FAULTS35,		35		)//35
f010cba4:	6a 00                	push   $0x0
f010cba6:	6a 23                	push   $0x23
f010cba8:	eb 48                	jmp    f010cbf2 <_alltraps>

f010cbaa <ALL_FAULTS36>:
TRAPHANDLER_NOEC(ALL_FAULTS36,      36      )//36
f010cbaa:	6a 00                	push   $0x0
f010cbac:	6a 24                	push   $0x24
f010cbae:	eb 42                	jmp    f010cbf2 <_alltraps>

f010cbb0 <ALL_FAULTS37>:
TRAPHANDLER_NOEC(ALL_FAULTS37,      37      )//37
f010cbb0:	6a 00                	push   $0x0
f010cbb2:	6a 25                	push   $0x25
f010cbb4:	eb 3c                	jmp    f010cbf2 <_alltraps>

f010cbb6 <ALL_FAULTS38>:
TRAPHANDLER_NOEC(ALL_FAULTS38,      38		)//38
f010cbb6:	6a 00                	push   $0x0
f010cbb8:	6a 26                	push   $0x26
f010cbba:	eb 36                	jmp    f010cbf2 <_alltraps>

f010cbbc <ALL_FAULTS39>:
TRAPHANDLER_NOEC(ALL_FAULTS39,      39		)//39
f010cbbc:	6a 00                	push   $0x0
f010cbbe:	6a 27                	push   $0x27
f010cbc0:	eb 30                	jmp    f010cbf2 <_alltraps>

f010cbc2 <ALL_FAULTS40>:
TRAPHANDLER_NOEC(ALL_FAULTS40,      40		)//40
f010cbc2:	6a 00                	push   $0x0
f010cbc4:	6a 28                	push   $0x28
f010cbc6:	eb 2a                	jmp    f010cbf2 <_alltraps>

f010cbc8 <ALL_FAULTS41>:
TRAPHANDLER_NOEC(ALL_FAULTS41,      41		)//41
f010cbc8:	6a 00                	push   $0x0
f010cbca:	6a 29                	push   $0x29
f010cbcc:	eb 24                	jmp    f010cbf2 <_alltraps>

f010cbce <ALL_FAULTS42>:
TRAPHANDLER_NOEC(ALL_FAULTS42,      42		)//42
f010cbce:	6a 00                	push   $0x0
f010cbd0:	6a 2a                	push   $0x2a
f010cbd2:	eb 1e                	jmp    f010cbf2 <_alltraps>

f010cbd4 <ALL_FAULTS43>:
TRAPHANDLER_NOEC(ALL_FAULTS43,      43		)//43
f010cbd4:	6a 00                	push   $0x0
f010cbd6:	6a 2b                	push   $0x2b
f010cbd8:	eb 18                	jmp    f010cbf2 <_alltraps>

f010cbda <ALL_FAULTS44>:
TRAPHANDLER_NOEC(ALL_FAULTS44,      44		)//44
f010cbda:	6a 00                	push   $0x0
f010cbdc:	6a 2c                	push   $0x2c
f010cbde:	eb 12                	jmp    f010cbf2 <_alltraps>

f010cbe0 <ALL_FAULTS45>:
TRAPHANDLER_NOEC(ALL_FAULTS45,      45		)//45
f010cbe0:	6a 00                	push   $0x0
f010cbe2:	6a 2d                	push   $0x2d
f010cbe4:	eb 0c                	jmp    f010cbf2 <_alltraps>

f010cbe6 <ALL_FAULTS46>:
TRAPHANDLER_NOEC(ALL_FAULTS46,      46		)//46
f010cbe6:	6a 00                	push   $0x0
f010cbe8:	6a 2e                	push   $0x2e
f010cbea:	eb 06                	jmp    f010cbf2 <_alltraps>

f010cbec <ALL_FAULTS47>:
TRAPHANDLER_NOEC(ALL_FAULTS47,      47		)//47 the last IRQ
f010cbec:	6a 00                	push   $0x0
f010cbee:	6a 2f                	push   $0x2f
f010cbf0:	eb 00                	jmp    f010cbf2 <_alltraps>

f010cbf2 <_alltraps>:
/*
 * Lab 3: Your code here for _alltraps
 */
_alltraps:

push %ds
f010cbf2:	1e                   	push   %ds
push %es
f010cbf3:	06                   	push   %es
pushal
f010cbf4:	60                   	pusha  

mov $(GD_KD), %ax
f010cbf5:	66 b8 10 00          	mov    $0x10,%ax
mov %ax,%ds
f010cbf9:	8e d8                	mov    %eax,%ds
mov %ax,%es
f010cbfb:	8e c0                	mov    %eax,%es

push %esp
f010cbfd:	54                   	push   %esp

call trap
f010cbfe:	e8 d6 fb ff ff       	call   f010c7d9 <trap>

pop %ecx /* poping the pointer to the tf from the stack so that the stack top is at
f010cc03:	59                   	pop    %ecx
			# the beginning values of the registers pushed by pusha*/
popal
f010cc04:	61                   	popa   
pop %es
f010cc05:	07                   	pop    %es
pop %ds
f010cc06:	1f                   	pop    %ds

/*skipping the trap_no and the error code so that the stack top is at the old eip value*/
add $(8),%esp
f010cc07:	83 c4 08             	add    $0x8,%esp

iret
f010cc0a:	cf                   	iret   

f010cc0b <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f010cc0b:	55                   	push   %ebp
f010cc0c:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f010cc0e:	8b 45 08             	mov    0x8(%ebp),%eax
f010cc11:	8b 15 10 ce 2b f0    	mov    0xf02bce10,%edx
f010cc17:	29 d0                	sub    %edx,%eax
f010cc19:	c1 f8 02             	sar    $0x2,%eax
f010cc1c:	89 c2                	mov    %eax,%edx
f010cc1e:	89 d0                	mov    %edx,%eax
f010cc20:	c1 e0 03             	shl    $0x3,%eax
f010cc23:	01 d0                	add    %edx,%eax
f010cc25:	c1 e0 03             	shl    $0x3,%eax
f010cc28:	01 d0                	add    %edx,%eax
f010cc2a:	c1 e0 03             	shl    $0x3,%eax
f010cc2d:	01 d0                	add    %edx,%eax
f010cc2f:	c1 e0 03             	shl    $0x3,%eax
f010cc32:	01 d0                	add    %edx,%eax
f010cc34:	89 c1                	mov    %eax,%ecx
f010cc36:	c1 e1 0f             	shl    $0xf,%ecx
f010cc39:	01 c8                	add    %ecx,%eax
f010cc3b:	c1 e0 03             	shl    $0x3,%eax
f010cc3e:	01 d0                	add    %edx,%eax
f010cc40:	f7 d8                	neg    %eax
}
f010cc42:	5d                   	pop    %ebp
f010cc43:	c3                   	ret    

f010cc44 <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f010cc44:	55                   	push   %ebp
f010cc45:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f010cc47:	ff 75 08             	pushl  0x8(%ebp)
f010cc4a:	e8 bc ff ff ff       	call   f010cc0b <to_frame_number>
f010cc4f:	83 c4 04             	add    $0x4,%esp
f010cc52:	c1 e0 0c             	shl    $0xc,%eax
}
f010cc55:	c9                   	leave  
f010cc56:	c3                   	ret    

f010cc57 <sys_cputs>:

// Print a string to the system console.
// The string is exactly 'len' characters long.
// Destroys the environment on memory errors.
static void sys_cputs(const char *s, uint32 len, uint8 printProgName)
{
f010cc57:	55                   	push   %ebp
f010cc58:	89 e5                	mov    %esp,%ebp
f010cc5a:	83 ec 18             	sub    $0x18,%esp
f010cc5d:	8b 45 10             	mov    0x10(%ebp),%eax
f010cc60:	88 45 f4             	mov    %al,-0xc(%ebp)
	// Destroy the environment if not.

	// LAB 3: Your code here.

	// Print the string supplied by the user.
	if (printProgName)
f010cc63:	80 7d f4 00          	cmpb   $0x0,-0xc(%ebp)
f010cc67:	74 23                	je     f010cc8c <sys_cputs+0x35>
		cprintf("[%s %d] ",curenv->prog_name, curenv->env_id);
f010cc69:	a1 74 41 25 f0       	mov    0xf0254174,%eax
f010cc6e:	8b 40 4c             	mov    0x4c(%eax),%eax
f010cc71:	8b 15 74 41 25 f0    	mov    0xf0254174,%edx
f010cc77:	83 c2 5c             	add    $0x5c,%edx
f010cc7a:	83 ec 04             	sub    $0x4,%esp
f010cc7d:	50                   	push   %eax
f010cc7e:	52                   	push   %edx
f010cc7f:	68 f0 3d 13 f0       	push   $0xf0133df0
f010cc84:	e8 a8 41 ff ff       	call   f0100e31 <cprintf>
f010cc89:	83 c4 10             	add    $0x10,%esp
	cprintf("%.*s",len, s);
f010cc8c:	83 ec 04             	sub    $0x4,%esp
f010cc8f:	ff 75 08             	pushl  0x8(%ebp)
f010cc92:	ff 75 0c             	pushl  0xc(%ebp)
f010cc95:	68 f9 3d 13 f0       	push   $0xf0133df9
f010cc9a:	e8 92 41 ff ff       	call   f0100e31 <cprintf>
f010cc9f:	83 c4 10             	add    $0x10,%esp
	//cprintf("%.*s", len, s);
}
f010cca2:	90                   	nop
f010cca3:	c9                   	leave  
f010cca4:	c3                   	ret    

f010cca5 <sys_cputc>:


// Print a char to the system console.
static void sys_cputc(const char c)
{
f010cca5:	55                   	push   %ebp
f010cca6:	89 e5                	mov    %esp,%ebp
f010cca8:	83 ec 18             	sub    $0x18,%esp
f010ccab:	8b 45 08             	mov    0x8(%ebp),%eax
f010ccae:	88 45 f4             	mov    %al,-0xc(%ebp)
	// Print the char supplied by the user.
	cprintf("%c",c);
f010ccb1:	0f be 45 f4          	movsbl -0xc(%ebp),%eax
f010ccb5:	83 ec 08             	sub    $0x8,%esp
f010ccb8:	50                   	push   %eax
f010ccb9:	68 fe 3d 13 f0       	push   $0xf0133dfe
f010ccbe:	e8 6e 41 ff ff       	call   f0100e31 <cprintf>
f010ccc3:	83 c4 10             	add    $0x10,%esp
}
f010ccc6:	90                   	nop
f010ccc7:	c9                   	leave  
f010ccc8:	c3                   	ret    

f010ccc9 <sys_cgetc>:

// Read a character from the system console.
// Returns the character.
static int
sys_cgetc(void)
{
f010ccc9:	55                   	push   %ebp
f010ccca:	89 e5                	mov    %esp,%ebp
f010cccc:	83 ec 18             	sub    $0x18,%esp
	//while ((c = cons_getc()) == 0)
	//2013: instead of busywaiting inside kernel code , we moved the waiting to user code,
	// this allows any other running user programs to run beacause the clock interrupt works in user mode
	// (the kernel system call by default disables the interrupts, so any loops inside the kernel while
	// handling an interrupt will cause the clock interrupt to be disabled)
	c = cons_getc2();
f010cccf:	e8 93 3f ff ff       	call   f0100c67 <cons_getc2>
f010ccd4:	89 45 f4             	mov    %eax,-0xc(%ebp)
	/* do nothing */;

	return c;
f010ccd7:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010ccda:	c9                   	leave  
f010ccdb:	c3                   	ret    

f010ccdc <__sys_allocate_page>:
//	E_INVAL if va >= UTOP, or va is not page-aligned.
//	E_INVAL if perm is inappropriate (see above).
//	E_NO_MEM if there's no memory to allocate the new page,
//		or to allocate any necessary page tables.
static int __sys_allocate_page(void *va, int perm)
{
f010ccdc:	55                   	push   %ebp
f010ccdd:	89 e5                	mov    %esp,%ebp
f010ccdf:	83 ec 28             	sub    $0x28,%esp
	//   parameters for correctness.
	//   If page_insert() fails, remember to free the page you
	//   allocated!

	int r;
	struct Env *e = curenv;
f010cce2:	a1 74 41 25 f0       	mov    0xf0254174,%eax
f010cce7:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//if ((r = envid2env(envid, &e, 1)) < 0)
	//return r;

	struct FrameInfo *ptr_frame_info ;
	r = allocate_frame(&ptr_frame_info) ;
f010ccea:	83 ec 0c             	sub    $0xc,%esp
f010cced:	8d 45 e0             	lea    -0x20(%ebp),%eax
f010ccf0:	50                   	push   %eax
f010ccf1:	e8 2f a6 ff ff       	call   f0107325 <allocate_frame>
f010ccf6:	83 c4 10             	add    $0x10,%esp
f010ccf9:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (r == E_NO_MEM)
f010ccfc:	83 7d f0 fc          	cmpl   $0xfffffffc,-0x10(%ebp)
f010cd00:	75 08                	jne    f010cd0a <__sys_allocate_page+0x2e>
		return r ;
f010cd02:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010cd05:	e9 d3 00 00 00       	jmp    f010cddd <__sys_allocate_page+0x101>

	//check virtual address to be paged_aligned and < USER_TOP
	if ((uint32)va >= USER_TOP || (uint32)va % PAGE_SIZE != 0)
f010cd0a:	8b 45 08             	mov    0x8(%ebp),%eax
f010cd0d:	3d ff ff bf ee       	cmp    $0xeebfffff,%eax
f010cd12:	77 0c                	ja     f010cd20 <__sys_allocate_page+0x44>
f010cd14:	8b 45 08             	mov    0x8(%ebp),%eax
f010cd17:	25 ff 0f 00 00       	and    $0xfff,%eax
f010cd1c:	85 c0                	test   %eax,%eax
f010cd1e:	74 0a                	je     f010cd2a <__sys_allocate_page+0x4e>
		return E_INVAL;
f010cd20:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
f010cd25:	e9 b3 00 00 00       	jmp    f010cddd <__sys_allocate_page+0x101>

	//check permissions to be appropriate
	if ((perm & (~PERM_AVAILABLE & ~PERM_WRITEABLE)) != (PERM_USER))
f010cd2a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cd2d:	25 fd f1 ff ff       	and    $0xfffff1fd,%eax
f010cd32:	83 f8 04             	cmp    $0x4,%eax
f010cd35:	74 0a                	je     f010cd41 <__sys_allocate_page+0x65>
		return E_INVAL;
f010cd37:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
f010cd3c:	e9 9c 00 00 00       	jmp    f010cddd <__sys_allocate_page+0x101>


	uint32 physical_address = to_physical_address(ptr_frame_info) ;
f010cd41:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010cd44:	83 ec 0c             	sub    $0xc,%esp
f010cd47:	50                   	push   %eax
f010cd48:	e8 f7 fe ff ff       	call   f010cc44 <to_physical_address>
f010cd4d:	83 c4 10             	add    $0x10,%esp
f010cd50:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//return it to the original status
		ptr_frame_info->references -= 1;
	}
#else
	{
		memset(STATIC_KERNEL_VIRTUAL_ADDRESS(physical_address), 0, PAGE_SIZE);
f010cd53:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010cd56:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010cd59:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010cd5c:	c1 e8 0c             	shr    $0xc,%eax
f010cd5f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010cd62:	a1 d0 cd 2b f0       	mov    0xf02bcdd0,%eax
f010cd67:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f010cd6a:	72 17                	jb     f010cd83 <__sys_allocate_page+0xa7>
f010cd6c:	ff 75 e8             	pushl  -0x18(%ebp)
f010cd6f:	68 04 3e 13 f0       	push   $0xf0133e04
f010cd74:	68 8d 00 00 00       	push   $0x8d
f010cd79:	68 33 3e 13 f0       	push   $0xf0133e33
f010cd7e:	e8 2d 34 ff ff       	call   f01001b0 <_panic>
f010cd83:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010cd86:	2d 00 00 00 10       	sub    $0x10000000,%eax
f010cd8b:	83 ec 04             	sub    $0x4,%esp
f010cd8e:	68 00 10 00 00       	push   $0x1000
f010cd93:	6a 00                	push   $0x0
f010cd95:	50                   	push   %eax
f010cd96:	e8 cb 28 02 00       	call   f012f666 <memset>
f010cd9b:	83 c4 10             	add    $0x10,%esp
	}
#endif
	r = map_frame(e->env_page_directory, ptr_frame_info, (uint32)va, perm) ;
f010cd9e:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010cda1:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010cda4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010cda7:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010cdad:	ff 75 0c             	pushl  0xc(%ebp)
f010cdb0:	51                   	push   %ecx
f010cdb1:	52                   	push   %edx
f010cdb2:	50                   	push   %eax
f010cdb3:	e8 08 a9 ff ff       	call   f01076c0 <map_frame>
f010cdb8:	83 c4 10             	add    $0x10,%esp
f010cdbb:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (r == E_NO_MEM)
f010cdbe:	83 7d f0 fc          	cmpl   $0xfffffffc,-0x10(%ebp)
f010cdc2:	75 14                	jne    f010cdd8 <__sys_allocate_page+0xfc>
	{
		decrement_references(ptr_frame_info);
f010cdc4:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010cdc7:	83 ec 0c             	sub    $0xc,%esp
f010cdca:	50                   	push   %eax
f010cdcb:	e8 e7 a6 ff ff       	call   f01074b7 <decrement_references>
f010cdd0:	83 c4 10             	add    $0x10,%esp
		return r;
f010cdd3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010cdd6:	eb 05                	jmp    f010cddd <__sys_allocate_page+0x101>
	}
	return 0 ;
f010cdd8:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010cddd:	c9                   	leave  
f010cdde:	c3                   	ret    

f010cddf <__sys_map_frame>:
//	-E_INVAL if (perm & PTE_W), but srcva is read-only in srcenvid's
//		address space.
//	-E_NO_MEM if there's no memory to allocate the new page,
//		or to allocate any necessary page tables.
static int __sys_map_frame(int32 srcenvid, void *srcva, int32 dstenvid, void *dstva, int perm)
{
f010cddf:	55                   	push   %ebp
f010cde0:	89 e5                	mov    %esp,%ebp
f010cde2:	83 ec 08             	sub    $0x8,%esp
	//   parameters for correctness.
	//   Use the third argument to page_lookup() to
	//   check the current permissions on the page.

	// LAB 4: Your code here.
	panic("sys_map_frame not implemented");
f010cde5:	83 ec 04             	sub    $0x4,%esp
f010cde8:	68 47 3e 13 f0       	push   $0xf0133e47
f010cded:	68 b4 00 00 00       	push   $0xb4
f010cdf2:	68 33 3e 13 f0       	push   $0xf0133e33
f010cdf7:	e8 b4 33 ff ff       	call   f01001b0 <_panic>

f010cdfc <__sys_unmap_frame>:
// Return 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
//	-E_INVAL if va >= UTOP, or va is not page-aligned.
static int __sys_unmap_frame(int32 envid, void *va)
{
f010cdfc:	55                   	push   %ebp
f010cdfd:	89 e5                	mov    %esp,%ebp
f010cdff:	83 ec 08             	sub    $0x8,%esp
	// Hint: This function is a wrapper around page_remove().

	// LAB 4: Your code here.
	panic("sys_page_unmap not implemented");
f010ce02:	83 ec 04             	sub    $0x4,%esp
f010ce05:	68 68 3e 13 f0       	push   $0xf0133e68
f010ce0a:	68 c5 00 00 00       	push   $0xc5
f010ce0f:	68 33 3e 13 f0       	push   $0xf0133e33
f010ce14:	e8 97 33 ff ff       	call   f01001b0 <_panic>

f010ce19 <sys_calculate_required_frames>:
	return 0;
}

uint32 sys_calculate_required_frames(uint32 start_virtual_address, uint32 size)
{
f010ce19:	55                   	push   %ebp
f010ce1a:	89 e5                	mov    %esp,%ebp
f010ce1c:	83 ec 08             	sub    $0x8,%esp
	return calculate_required_frames(curenv->env_page_directory, start_virtual_address, size);
f010ce1f:	a1 74 41 25 f0       	mov    0xf0254174,%eax
f010ce24:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010ce2a:	83 ec 04             	sub    $0x4,%esp
f010ce2d:	ff 75 0c             	pushl  0xc(%ebp)
f010ce30:	ff 75 08             	pushl  0x8(%ebp)
f010ce33:	50                   	push   %eax
f010ce34:	e8 4d c2 ff ff       	call   f0109086 <calculate_required_frames>
f010ce39:	83 c4 10             	add    $0x10,%esp
}
f010ce3c:	c9                   	leave  
f010ce3d:	c3                   	ret    

f010ce3e <sys_calculate_free_frames>:

uint32 sys_calculate_free_frames()
{
f010ce3e:	55                   	push   %ebp
f010ce3f:	89 e5                	mov    %esp,%ebp
f010ce41:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010ce44:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010ce47:	83 ec 0c             	sub    $0xc,%esp
f010ce4a:	50                   	push   %eax
f010ce4b:	e8 e0 aa ff ff       	call   f0107930 <calculate_available_frames>
f010ce50:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("Free Frames = %d : Buffered = %d, Not Buffered = %d\n", counters.freeBuffered + counters.freeNotBuffered, counters.freeBuffered ,counters.freeNotBuffered);
	return counters.freeBuffered + counters.freeNotBuffered;
f010ce53:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010ce56:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ce59:	01 d0                	add    %edx,%eax
}
f010ce5b:	c9                   	leave  
f010ce5c:	c3                   	ret    

f010ce5d <sys_calculate_modified_frames>:
uint32 sys_calculate_modified_frames()
{
f010ce5d:	55                   	push   %ebp
f010ce5e:	89 e5                	mov    %esp,%ebp
f010ce60:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010ce63:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010ce66:	83 ec 0c             	sub    $0xc,%esp
f010ce69:	50                   	push   %eax
f010ce6a:	e8 c1 aa ff ff       	call   f0107930 <calculate_available_frames>
f010ce6f:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("================ Modified Frames = %d\n", counters.modified) ;
	return counters.modified;
f010ce72:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010ce75:	c9                   	leave  
f010ce76:	c3                   	ret    

f010ce77 <sys_calculate_notmod_frames>:

uint32 sys_calculate_notmod_frames()
{
f010ce77:	55                   	push   %ebp
f010ce78:	89 e5                	mov    %esp,%ebp
f010ce7a:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010ce7d:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010ce80:	83 ec 0c             	sub    $0xc,%esp
f010ce83:	50                   	push   %eax
f010ce84:	e8 a7 aa ff ff       	call   f0107930 <calculate_available_frames>
f010ce89:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("================ Not Modified Frames = %d\n", counters.freeBuffered) ;
	return counters.freeBuffered;
f010ce8c:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
f010ce8f:	c9                   	leave  
f010ce90:	c3                   	ret    

f010ce91 <sys_calculate_pages_tobe_removed_ready_exit>:

int sys_calculate_pages_tobe_removed_ready_exit(uint32 WS_or_MEMORY_flag)
{
f010ce91:	55                   	push   %ebp
f010ce92:	89 e5                	mov    %esp,%ebp
f010ce94:	83 ec 08             	sub    $0x8,%esp
	return calc_no_pages_tobe_removed_from_ready_exit_queues(WS_or_MEMORY_flag);
f010ce97:	83 ec 0c             	sub    $0xc,%esp
f010ce9a:	ff 75 08             	pushl  0x8(%ebp)
f010ce9d:	e8 fa 14 02 00       	call   f012e39c <calc_no_pages_tobe_removed_from_ready_exit_queues>
f010cea2:	83 c4 10             	add    $0x10,%esp
}
f010cea5:	c9                   	leave  
f010cea6:	c3                   	ret    

f010cea7 <sys_scarce_memory>:

void sys_scarce_memory(void)
{
f010cea7:	55                   	push   %ebp
f010cea8:	89 e5                	mov    %esp,%ebp
f010ceaa:	83 ec 08             	sub    $0x8,%esp
	scarce_memory();
f010cead:	e8 42 14 02 00       	call   f012e2f4 <scarce_memory>
}
f010ceb2:	90                   	nop
f010ceb3:	c9                   	leave  
f010ceb4:	c3                   	ret    

f010ceb5 <sys_clearFFL>:

void sys_clearFFL()
{
f010ceb5:	55                   	push   %ebp
f010ceb6:	89 e5                	mov    %esp,%ebp
f010ceb8:	83 ec 18             	sub    $0x18,%esp
	int size = LIST_SIZE(&free_frame_list) ;
f010cebb:	a1 e4 cd 2b f0       	mov    0xf02bcde4,%eax
f010cec0:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int i = 0 ;
f010cec3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	struct FrameInfo* ptr_tmp_FI ;
	for (; i < size ; i++)
f010ceca:	eb 12                	jmp    f010cede <sys_clearFFL+0x29>
	{
		allocate_frame(&ptr_tmp_FI) ;
f010cecc:	83 ec 0c             	sub    $0xc,%esp
f010cecf:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010ced2:	50                   	push   %eax
f010ced3:	e8 4d a4 ff ff       	call   f0107325 <allocate_frame>
f010ced8:	83 c4 10             	add    $0x10,%esp
void sys_clearFFL()
{
	int size = LIST_SIZE(&free_frame_list) ;
	int i = 0 ;
	struct FrameInfo* ptr_tmp_FI ;
	for (; i < size ; i++)
f010cedb:	ff 45 f4             	incl   -0xc(%ebp)
f010cede:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010cee1:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010cee4:	7c e6                	jl     f010cecc <sys_clearFFL+0x17>
	{
		allocate_frame(&ptr_tmp_FI) ;
	}
}
f010cee6:	90                   	nop
f010cee7:	c9                   	leave  
f010cee8:	c3                   	ret    

f010cee9 <sys_pf_calculate_allocated_pages>:

/*******************************/
/* PAGE FILE SYSTEM CALLS */
/*******************************/
int sys_pf_calculate_allocated_pages(void)
{
f010cee9:	55                   	push   %ebp
f010ceea:	89 e5                	mov    %esp,%ebp
f010ceec:	83 ec 08             	sub    $0x8,%esp
	return pf_calculate_allocated_pages(curenv);
f010ceef:	a1 74 41 25 f0       	mov    0xf0254174,%eax
f010cef4:	83 ec 0c             	sub    $0xc,%esp
f010cef7:	50                   	push   %eax
f010cef8:	e8 b0 76 ff ff       	call   f01045ad <pf_calculate_allocated_pages>
f010cefd:	83 c4 10             	add    $0x10,%esp
}
f010cf00:	c9                   	leave  
f010cf01:	c3                   	ret    

f010cf02 <sys_free_user_mem>:

/*******************************/
/* USER HEAP SYSTEM CALLS */
/*******************************/
void sys_free_user_mem(uint32 virtual_address, uint32 size)
{
f010cf02:	55                   	push   %ebp
f010cf03:	89 e5                	mov    %esp,%ebp
f010cf05:	83 ec 08             	sub    $0x8,%esp
	if(isBufferingEnabled())
f010cf08:	e8 71 0e 00 00       	call   f010dd7e <isBufferingEnabled>
f010cf0d:	84 c0                	test   %al,%al
f010cf0f:	74 19                	je     f010cf2a <sys_free_user_mem+0x28>
	{
		__free_user_mem_with_buffering(curenv, virtual_address, size);
f010cf11:	a1 74 41 25 f0       	mov    0xf0254174,%eax
f010cf16:	83 ec 04             	sub    $0x4,%esp
f010cf19:	ff 75 0c             	pushl  0xc(%ebp)
f010cf1c:	ff 75 08             	pushl  0x8(%ebp)
f010cf1f:	50                   	push   %eax
f010cf20:	e8 97 c1 ff ff       	call   f01090bc <__free_user_mem_with_buffering>
f010cf25:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		free_user_mem(curenv, virtual_address, size);
	}
	return;
f010cf28:	eb 18                	jmp    f010cf42 <sys_free_user_mem+0x40>
	{
		__free_user_mem_with_buffering(curenv, virtual_address, size);
	}
	else
	{
		free_user_mem(curenv, virtual_address, size);
f010cf2a:	a1 74 41 25 f0       	mov    0xf0254174,%eax
f010cf2f:	83 ec 04             	sub    $0x4,%esp
f010cf32:	ff 75 0c             	pushl  0xc(%ebp)
f010cf35:	ff 75 08             	pushl  0x8(%ebp)
f010cf38:	50                   	push   %eax
f010cf39:	e8 70 c1 ff ff       	call   f01090ae <free_user_mem>
f010cf3e:	83 c4 10             	add    $0x10,%esp
	}
	return;
f010cf41:	90                   	nop
}
f010cf42:	c9                   	leave  
f010cf43:	c3                   	ret    

f010cf44 <sys_allocate_user_mem>:

void sys_allocate_user_mem(uint32 virtual_address, uint32 size)
{
f010cf44:	55                   	push   %ebp
f010cf45:	89 e5                	mov    %esp,%ebp
f010cf47:	83 ec 08             	sub    $0x8,%esp
	allocate_user_mem(curenv, virtual_address, size);
f010cf4a:	a1 74 41 25 f0       	mov    0xf0254174,%eax
f010cf4f:	83 ec 04             	sub    $0x4,%esp
f010cf52:	ff 75 0c             	pushl  0xc(%ebp)
f010cf55:	ff 75 08             	pushl  0x8(%ebp)
f010cf58:	50                   	push   %eax
f010cf59:	e8 42 c1 ff ff       	call   f01090a0 <allocate_user_mem>
f010cf5e:	83 c4 10             	add    $0x10,%esp
	return;
f010cf61:	90                   	nop
}
f010cf62:	c9                   	leave  
f010cf63:	c3                   	ret    

f010cf64 <sys_allocate_chunk>:

void sys_allocate_chunk(uint32 virtual_address, uint32 size, uint32 perms)
{
f010cf64:	55                   	push   %ebp
f010cf65:	89 e5                	mov    %esp,%ebp
f010cf67:	83 ec 08             	sub    $0x8,%esp
	allocate_chunk(curenv->env_page_directory, virtual_address, size, perms);
f010cf6a:	a1 74 41 25 f0       	mov    0xf0254174,%eax
f010cf6f:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010cf75:	ff 75 10             	pushl  0x10(%ebp)
f010cf78:	ff 75 0c             	pushl  0xc(%ebp)
f010cf7b:	ff 75 08             	pushl  0x8(%ebp)
f010cf7e:	50                   	push   %eax
f010cf7f:	e8 ce c0 ff ff       	call   f0109052 <allocate_chunk>
f010cf84:	83 c4 10             	add    $0x10,%esp
	return;
f010cf87:	90                   	nop
}
f010cf88:	c9                   	leave  
f010cf89:	c3                   	ret    

f010cf8a <sys_move_user_mem>:

//2014
void sys_move_user_mem(uint32 src_virtual_address, uint32 dst_virtual_address, uint32 size)
{
f010cf8a:	55                   	push   %ebp
f010cf8b:	89 e5                	mov    %esp,%ebp
f010cf8d:	83 ec 08             	sub    $0x8,%esp
	move_user_mem(curenv, src_virtual_address, dst_virtual_address, size);
f010cf90:	a1 74 41 25 f0       	mov    0xf0254174,%eax
f010cf95:	ff 75 10             	pushl  0x10(%ebp)
f010cf98:	ff 75 0c             	pushl  0xc(%ebp)
f010cf9b:	ff 75 08             	pushl  0x8(%ebp)
f010cf9e:	50                   	push   %eax
f010cf9f:	e8 35 c1 ff ff       	call   f01090d9 <move_user_mem>
f010cfa4:	83 c4 10             	add    $0x10,%esp
	return;
f010cfa7:	90                   	nop
}
f010cfa8:	c9                   	leave  
f010cfa9:	c3                   	ret    

f010cfaa <sys_get_heap_strategy>:

//2015
uint32 sys_get_heap_strategy()
{
f010cfaa:	55                   	push   %ebp
f010cfab:	89 e5                	mov    %esp,%ebp
	return _UHeapPlacementStrategy ;
f010cfad:	a1 ec cd 2b f0       	mov    0xf02bcdec,%eax
}
f010cfb2:	5d                   	pop    %ebp
f010cfb3:	c3                   	ret    

f010cfb4 <sys_set_uheap_strategy>:
void sys_set_uheap_strategy(uint32 heapStrategy)
{
f010cfb4:	55                   	push   %ebp
f010cfb5:	89 e5                	mov    %esp,%ebp
	_UHeapPlacementStrategy = heapStrategy;
f010cfb7:	8b 45 08             	mov    0x8(%ebp),%eax
f010cfba:	a3 ec cd 2b f0       	mov    %eax,0xf02bcdec
}
f010cfbf:	90                   	nop
f010cfc0:	5d                   	pop    %ebp
f010cfc1:	c3                   	ret    

f010cfc2 <sys_disable_interrupt>:
/*******************************/
/* INTERRUPTS SYSTEM CALLS */
/*******************************/
//NEW!! 2012...
void sys_disable_interrupt()
{
f010cfc2:	55                   	push   %ebp
f010cfc3:	89 e5                	mov    %esp,%ebp
	curenv->env_tf.tf_eflags &= ~FL_IF ;
f010cfc5:	a1 74 41 25 f0       	mov    0xf0254174,%eax
f010cfca:	8b 15 74 41 25 f0    	mov    0xf0254174,%edx
f010cfd0:	8b 52 38             	mov    0x38(%edx),%edx
f010cfd3:	80 e6 fd             	and    $0xfd,%dh
f010cfd6:	89 50 38             	mov    %edx,0x38(%eax)
}
f010cfd9:	90                   	nop
f010cfda:	5d                   	pop    %ebp
f010cfdb:	c3                   	ret    

f010cfdc <sys_enable_interrupt>:
void sys_enable_interrupt()
{
f010cfdc:	55                   	push   %ebp
f010cfdd:	89 e5                	mov    %esp,%ebp
	curenv->env_tf.tf_eflags |= FL_IF ;
f010cfdf:	a1 74 41 25 f0       	mov    0xf0254174,%eax
f010cfe4:	8b 15 74 41 25 f0    	mov    0xf0254174,%edx
f010cfea:	8b 52 38             	mov    0x38(%edx),%edx
f010cfed:	80 ce 02             	or     $0x2,%dh
f010cff0:	89 50 38             	mov    %edx,0x38(%eax)
}
f010cff3:	90                   	nop
f010cff4:	5d                   	pop    %ebp
f010cff5:	c3                   	ret    

f010cff6 <sys_createSemaphore>:

/*******************************/
/* SEMAPHORES SYSTEM CALLS */
/*******************************/
int sys_createSemaphore(char* semaphoreName, uint32 initialValue)
{
f010cff6:	55                   	push   %ebp
f010cff7:	89 e5                	mov    %esp,%ebp
f010cff9:	83 ec 08             	sub    $0x8,%esp
	return createSemaphore(curenv->env_id, semaphoreName, initialValue);
f010cffc:	a1 74 41 25 f0       	mov    0xf0254174,%eax
f010d001:	8b 40 4c             	mov    0x4c(%eax),%eax
f010d004:	83 ec 04             	sub    $0x4,%esp
f010d007:	ff 75 0c             	pushl  0xc(%ebp)
f010d00a:	ff 75 08             	pushl  0x8(%ebp)
f010d00d:	50                   	push   %eax
f010d00e:	e8 03 11 00 00       	call   f010e116 <createSemaphore>
f010d013:	83 c4 10             	add    $0x10,%esp
}
f010d016:	c9                   	leave  
f010d017:	c3                   	ret    

f010d018 <sys_waitSemaphore>:

void sys_waitSemaphore(int32 ownerEnvID, char* semaphoreName)
{
f010d018:	55                   	push   %ebp
f010d019:	89 e5                	mov    %esp,%ebp
f010d01b:	83 ec 08             	sub    $0x8,%esp
	waitSemaphore(ownerEnvID, semaphoreName);
f010d01e:	83 ec 08             	sub    $0x8,%esp
f010d021:	ff 75 0c             	pushl  0xc(%ebp)
f010d024:	ff 75 08             	pushl  0x8(%ebp)
f010d027:	e8 07 11 00 00       	call   f010e133 <waitSemaphore>
f010d02c:	83 c4 10             	add    $0x10,%esp
}
f010d02f:	90                   	nop
f010d030:	c9                   	leave  
f010d031:	c3                   	ret    

f010d032 <sys_signalSemaphore>:

void sys_signalSemaphore(int32 ownerEnvID, char* semaphoreName)
{
f010d032:	55                   	push   %ebp
f010d033:	89 e5                	mov    %esp,%ebp
f010d035:	83 ec 08             	sub    $0x8,%esp
	signalSemaphore(ownerEnvID, semaphoreName);
f010d038:	83 ec 08             	sub    $0x8,%esp
f010d03b:	ff 75 0c             	pushl  0xc(%ebp)
f010d03e:	ff 75 08             	pushl  0x8(%ebp)
f010d041:	e8 0a 11 00 00       	call   f010e150 <signalSemaphore>
f010d046:	83 c4 10             	add    $0x10,%esp
}
f010d049:	90                   	nop
f010d04a:	c9                   	leave  
f010d04b:	c3                   	ret    

f010d04c <sys_getSemaphoreValue>:

int sys_getSemaphoreValue(int32 ownerEnvID, char* semaphoreName)
{
f010d04c:	55                   	push   %ebp
f010d04d:	89 e5                	mov    %esp,%ebp
f010d04f:	83 ec 18             	sub    $0x18,%esp
	int semID = get_semaphore_object_ID(ownerEnvID, semaphoreName);
f010d052:	83 ec 08             	sub    $0x8,%esp
f010d055:	ff 75 0c             	pushl  0xc(%ebp)
f010d058:	ff 75 08             	pushl  0x8(%ebp)
f010d05b:	e8 5c 0f 00 00       	call   f010dfbc <get_semaphore_object_ID>
f010d060:	83 c4 10             	add    $0x10,%esp
f010d063:	89 45 f4             	mov    %eax,-0xc(%ebp)
	assert(semID >= 0 && semID < MAX_SEMAPHORES) ;
f010d066:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d06a:	78 06                	js     f010d072 <sys_getSemaphoreValue+0x26>
f010d06c:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
f010d070:	7e 19                	jle    f010d08b <sys_getSemaphoreValue+0x3f>
f010d072:	68 88 3e 13 f0       	push   $0xf0133e88
f010d077:	68 ad 3e 13 f0       	push   $0xf0133ead
f010d07c:	68 4d 01 00 00       	push   $0x14d
f010d081:	68 33 3e 13 f0       	push   $0xf0133e33
f010d086:	e8 25 31 ff ff       	call   f01001b0 <_panic>

	return semaphores[semID].value ;
f010d08b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d08e:	89 d0                	mov    %edx,%eax
f010d090:	c1 e0 02             	shl    $0x2,%eax
f010d093:	01 d0                	add    %edx,%eax
f010d095:	01 c0                	add    %eax,%eax
f010d097:	01 d0                	add    %edx,%eax
f010d099:	01 c0                	add    %eax,%eax
f010d09b:	01 d0                	add    %edx,%eax
f010d09d:	c1 e0 02             	shl    $0x2,%eax
f010d0a0:	05 34 aa 2b f0       	add    $0xf02baa34,%eax
f010d0a5:	8b 00                	mov    (%eax),%eax
}
f010d0a7:	c9                   	leave  
f010d0a8:	c3                   	ret    

f010d0a9 <sys_createSharedObject>:

/*******************************/
/* SHARED MEMORY SYSTEM CALLS */
/*******************************/
int sys_createSharedObject(char* shareName, uint32 size, uint8 isWritable, void* virtual_address)
{
f010d0a9:	55                   	push   %ebp
f010d0aa:	89 e5                	mov    %esp,%ebp
f010d0ac:	83 ec 18             	sub    $0x18,%esp
f010d0af:	8b 45 10             	mov    0x10(%ebp),%eax
f010d0b2:	88 45 f4             	mov    %al,-0xc(%ebp)
	return createSharedObject(curenv->env_id, shareName, size, isWritable, virtual_address);
f010d0b5:	0f b6 55 f4          	movzbl -0xc(%ebp),%edx
f010d0b9:	a1 74 41 25 f0       	mov    0xf0254174,%eax
f010d0be:	8b 40 4c             	mov    0x4c(%eax),%eax
f010d0c1:	83 ec 0c             	sub    $0xc,%esp
f010d0c4:	ff 75 14             	pushl  0x14(%ebp)
f010d0c7:	52                   	push   %edx
f010d0c8:	ff 75 0c             	pushl  0xc(%ebp)
f010d0cb:	ff 75 08             	pushl  0x8(%ebp)
f010d0ce:	50                   	push   %eax
f010d0cf:	e8 ed ad ff ff       	call   f0107ec1 <createSharedObject>
f010d0d4:	83 c4 20             	add    $0x20,%esp
}
f010d0d7:	c9                   	leave  
f010d0d8:	c3                   	ret    

f010d0d9 <sys_getSizeOfSharedObject>:

int sys_getSizeOfSharedObject(int32 ownerID, char* shareName)
{
f010d0d9:	55                   	push   %ebp
f010d0da:	89 e5                	mov    %esp,%ebp
f010d0dc:	83 ec 08             	sub    $0x8,%esp
	return getSizeOfSharedObject(ownerID, shareName);
f010d0df:	83 ec 08             	sub    $0x8,%esp
f010d0e2:	ff 75 0c             	pushl  0xc(%ebp)
f010d0e5:	ff 75 08             	pushl  0x8(%ebp)
f010d0e8:	e8 f7 ad ff ff       	call   f0107ee4 <getSizeOfSharedObject>
f010d0ed:	83 c4 10             	add    $0x10,%esp
}
f010d0f0:	c9                   	leave  
f010d0f1:	c3                   	ret    

f010d0f2 <sys_getSharedObject>:

int sys_getSharedObject(int32 ownerID, char* shareName, void* virtual_address)
{
f010d0f2:	55                   	push   %ebp
f010d0f3:	89 e5                	mov    %esp,%ebp
f010d0f5:	83 ec 08             	sub    $0x8,%esp
	return getSharedObject(ownerID, shareName, virtual_address);
f010d0f8:	83 ec 04             	sub    $0x4,%esp
f010d0fb:	ff 75 10             	pushl  0x10(%ebp)
f010d0fe:	ff 75 0c             	pushl  0xc(%ebp)
f010d101:	ff 75 08             	pushl  0x8(%ebp)
f010d104:	e8 f8 ad ff ff       	call   f0107f01 <getSharedObject>
f010d109:	83 c4 10             	add    $0x10,%esp
}
f010d10c:	c9                   	leave  
f010d10d:	c3                   	ret    

f010d10e <sys_freeSharedObject>:

int sys_freeSharedObject(int32 sharedObjectID, void *startVA)
{
f010d10e:	55                   	push   %ebp
f010d10f:	89 e5                	mov    %esp,%ebp
f010d111:	83 ec 08             	sub    $0x8,%esp
	return freeSharedObject(sharedObjectID, startVA);
f010d114:	83 ec 08             	sub    $0x8,%esp
f010d117:	ff 75 0c             	pushl  0xc(%ebp)
f010d11a:	ff 75 08             	pushl  0x8(%ebp)
f010d11d:	e8 fc ad ff ff       	call   f0107f1e <freeSharedObject>
f010d122:	83 c4 10             	add    $0x10,%esp
}
f010d125:	c9                   	leave  
f010d126:	c3                   	ret    

f010d127 <sys_getMaxShares>:

uint32 sys_getMaxShares()
{
f010d127:	55                   	push   %ebp
f010d128:	89 e5                	mov    %esp,%ebp
	return MAX_SHARES;
f010d12a:	b8 64 00 00 00       	mov    $0x64,%eax
}
f010d12f:	5d                   	pop    %ebp
f010d130:	c3                   	ret    

f010d131 <sys_getenvid>:
/* USER ENVIRONMENT SYSTEM CALLS */
/*********************************/
// Returns the current environment's envid.
//2017
static int32 sys_getenvid(void)
{
f010d131:	55                   	push   %ebp
f010d132:	89 e5                	mov    %esp,%ebp
	return curenv->env_id;
f010d134:	a1 74 41 25 f0       	mov    0xf0254174,%eax
f010d139:	8b 40 4c             	mov    0x4c(%eax),%eax
}
f010d13c:	5d                   	pop    %ebp
f010d13d:	c3                   	ret    

f010d13e <sys_getenvindex>:

//2017
static int32 sys_getenvindex(void)
{
f010d13e:	55                   	push   %ebp
f010d13f:	89 e5                	mov    %esp,%ebp
	//return curenv->env_id;
	return (curenv - envs) ;
f010d141:	a1 74 41 25 f0       	mov    0xf0254174,%eax
f010d146:	89 c2                	mov    %eax,%edx
f010d148:	a1 70 41 25 f0       	mov    0xf0254170,%eax
f010d14d:	29 c2                	sub    %eax,%edx
f010d14f:	89 d0                	mov    %edx,%eax
f010d151:	c1 f8 05             	sar    $0x5,%eax
f010d154:	89 c2                	mov    %eax,%edx
f010d156:	89 d0                	mov    %edx,%eax
f010d158:	c1 e0 03             	shl    $0x3,%eax
f010d15b:	01 d0                	add    %edx,%eax
f010d15d:	01 c0                	add    %eax,%eax
f010d15f:	01 d0                	add    %edx,%eax
f010d161:	c1 e0 06             	shl    $0x6,%eax
f010d164:	01 d0                	add    %edx,%eax
f010d166:	89 c1                	mov    %eax,%ecx
f010d168:	c1 e1 04             	shl    $0x4,%ecx
f010d16b:	01 c8                	add    %ecx,%eax
f010d16d:	c1 e0 03             	shl    $0x3,%eax
f010d170:	01 d0                	add    %edx,%eax
f010d172:	01 c0                	add    %eax,%eax
f010d174:	01 d0                	add    %edx,%eax
f010d176:	89 c1                	mov    %eax,%ecx
f010d178:	c1 e1 04             	shl    $0x4,%ecx
f010d17b:	01 c8                	add    %ecx,%eax
f010d17d:	c1 e0 03             	shl    $0x3,%eax
f010d180:	01 d0                	add    %edx,%eax
f010d182:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010d189:	01 d0                	add    %edx,%eax
}
f010d18b:	5d                   	pop    %ebp
f010d18c:	c3                   	ret    

f010d18d <sys_getparentenvid>:

//2017
static int32 sys_getparentenvid(void)
{
f010d18d:	55                   	push   %ebp
f010d18e:	89 e5                	mov    %esp,%ebp
	return curenv->env_parent_id;
f010d190:	a1 74 41 25 f0       	mov    0xf0254174,%eax
f010d195:	8b 40 50             	mov    0x50(%eax),%eax
}
f010d198:	5d                   	pop    %ebp
f010d199:	c3                   	ret    

f010d19a <sys_destroy_env>:
//
// Returns 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
static int sys_destroy_env(int32 envid)
{
f010d19a:	55                   	push   %ebp
f010d19b:	89 e5                	mov    %esp,%ebp
f010d19d:	83 ec 18             	sub    $0x18,%esp
	int r;
	struct Env *e;
	if (envid == 0)
f010d1a0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010d1a4:	75 0a                	jne    f010d1b0 <sys_destroy_env+0x16>
	{
		e = curenv ;
f010d1a6:	a1 74 41 25 f0       	mov    0xf0254174,%eax
f010d1ab:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010d1ae:	eb 22                	jmp    f010d1d2 <sys_destroy_env+0x38>
	}
	else if ((r = envid2env(envid, &e, 0)) < 0)
f010d1b0:	83 ec 04             	sub    $0x4,%esp
f010d1b3:	6a 00                	push   $0x0
f010d1b5:	8d 45 f0             	lea    -0x10(%ebp),%eax
f010d1b8:	50                   	push   %eax
f010d1b9:	ff 75 08             	pushl  0x8(%ebp)
f010d1bc:	e8 84 cc ff ff       	call   f0109e45 <envid2env>
f010d1c1:	83 c4 10             	add    $0x10,%esp
f010d1c4:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010d1c7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d1cb:	79 05                	jns    f010d1d2 <sys_destroy_env+0x38>
	{
		return r;
f010d1cd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d1d0:	eb 5e                	jmp    f010d230 <sys_destroy_env+0x96>
	}

	if (e == curenv)
f010d1d2:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010d1d5:	a1 74 41 25 f0       	mov    0xf0254174,%eax
f010d1da:	39 c2                	cmp    %eax,%edx
f010d1dc:	75 1b                	jne    f010d1f9 <sys_destroy_env+0x5f>
	{
		cprintf("[%08x] exiting gracefully\n", curenv->env_id);
f010d1de:	a1 74 41 25 f0       	mov    0xf0254174,%eax
f010d1e3:	8b 40 4c             	mov    0x4c(%eax),%eax
f010d1e6:	83 ec 08             	sub    $0x8,%esp
f010d1e9:	50                   	push   %eax
f010d1ea:	68 c2 3e 13 f0       	push   $0xf0133ec2
f010d1ef:	e8 3d 3c ff ff       	call   f0100e31 <cprintf>
f010d1f4:	83 c4 10             	add    $0x10,%esp
f010d1f7:	eb 20                	jmp    f010d219 <sys_destroy_env+0x7f>
	}
	else
	{
		cprintf("[%08x] destroying %08x\n", curenv->env_id, e->env_id);
f010d1f9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d1fc:	8b 50 4c             	mov    0x4c(%eax),%edx
f010d1ff:	a1 74 41 25 f0       	mov    0xf0254174,%eax
f010d204:	8b 40 4c             	mov    0x4c(%eax),%eax
f010d207:	83 ec 04             	sub    $0x4,%esp
f010d20a:	52                   	push   %edx
f010d20b:	50                   	push   %eax
f010d20c:	68 dd 3e 13 f0       	push   $0xf0133edd
f010d211:	e8 1b 3c ff ff       	call   f0100e31 <cprintf>
f010d216:	83 c4 10             	add    $0x10,%esp
	}
	//2015
	sched_kill_env(e->env_id);
f010d219:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d21c:	8b 40 4c             	mov    0x4c(%eax),%eax
f010d21f:	83 ec 0c             	sub    $0xc,%esp
f010d222:	50                   	push   %eax
f010d223:	e8 e9 83 ff ff       	call   f0105611 <sched_kill_env>
f010d228:	83 c4 10             	add    $0x10,%esp

	return 0;
f010d22b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010d230:	c9                   	leave  
f010d231:	c3                   	ret    

f010d232 <sys_exit_env>:

//Just place the current env into the EXIT queue & schedule the next one
static void sys_exit_env()
{
f010d232:	55                   	push   %ebp
f010d233:	89 e5                	mov    %esp,%ebp
f010d235:	83 ec 08             	sub    $0x8,%esp
	//2015
	env_exit();
f010d238:	e8 e9 cb ff ff       	call   f0109e26 <env_exit>
	//env_run_cmd_prmpt();
}
f010d23d:	90                   	nop
f010d23e:	c9                   	leave  
f010d23f:	c3                   	ret    

f010d240 <sys_create_env>:

//New update in 2020
//Create a new env & add it to the NEW queue
int sys_create_env(char* programName, unsigned int page_WS_size,unsigned int LRU_second_list_size, unsigned int percent_WS_pages_to_remove)
{
f010d240:	55                   	push   %ebp
f010d241:	89 e5                	mov    %esp,%ebp
f010d243:	83 ec 18             	sub    $0x18,%esp
	struct Env* env =  env_create(programName, page_WS_size, LRU_second_list_size, percent_WS_pages_to_remove);
f010d246:	ff 75 14             	pushl  0x14(%ebp)
f010d249:	ff 75 10             	pushl  0x10(%ebp)
f010d24c:	ff 75 0c             	pushl  0xc(%ebp)
f010d24f:	ff 75 08             	pushl  0x8(%ebp)
f010d252:	e8 eb be ff ff       	call   f0109142 <env_create>
f010d257:	83 c4 10             	add    $0x10,%esp
f010d25a:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(env == NULL)
f010d25d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d261:	75 07                	jne    f010d26a <sys_create_env+0x2a>
	{
		return E_ENV_CREATION_ERROR;
f010d263:	b8 ef ff ff ff       	mov    $0xffffffef,%eax
f010d268:	eb 14                	jmp    f010d27e <sys_create_env+0x3e>
	}

	//2015
	sched_new_env(env);
f010d26a:	83 ec 0c             	sub    $0xc,%esp
f010d26d:	ff 75 f4             	pushl  -0xc(%ebp)
f010d270:	e8 be 80 ff ff       	call   f0105333 <sched_new_env>
f010d275:	83 c4 10             	add    $0x10,%esp

	return env->env_id;
f010d278:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d27b:	8b 40 4c             	mov    0x4c(%eax),%eax
}
f010d27e:	c9                   	leave  
f010d27f:	c3                   	ret    

f010d280 <sys_run_env>:

//Place a new env into the READY queue
void sys_run_env(int32 envId)
{
f010d280:	55                   	push   %ebp
f010d281:	89 e5                	mov    %esp,%ebp
f010d283:	83 ec 08             	sub    $0x8,%esp
	sched_run_env(envId);
f010d286:	8b 45 08             	mov    0x8(%ebp),%eax
f010d289:	83 ec 0c             	sub    $0xc,%esp
f010d28c:	50                   	push   %eax
f010d28d:	e8 be 80 ff ff       	call   f0105350 <sched_run_env>
f010d292:	83 c4 10             	add    $0x10,%esp
}
f010d295:	90                   	nop
f010d296:	c9                   	leave  
f010d297:	c3                   	ret    

f010d298 <sys_get_virtual_time>:
/*******************************/
/* ETC... SYSTEM CALLS */
/*******************************/

struct uint64 sys_get_virtual_time()
{
f010d298:	55                   	push   %ebp
f010d299:	89 e5                	mov    %esp,%ebp
f010d29b:	83 ec 10             	sub    $0x10,%esp
	//	lcr4(0);


	struct uint64 result;

	__asm __volatile("rdtsc\n"
f010d29e:	0f 31                	rdtsc  
f010d2a0:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010d2a3:	89 55 f4             	mov    %edx,-0xc(%ebp)
	//ptr[3]=0;
	//cprintf("as str = %s\n", ptr);
	cprintf("ax = %x, bx = %x, cx = %x, dx = %x\n", eaxp,ebxp,ecxp,edxp);
	*/

	return result;
f010d2a6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d2a9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d2ac:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010d2af:	89 55 fc             	mov    %edx,-0x4(%ebp)
	struct uint64 t = get_virtual_time();
	return t;
f010d2b2:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010d2b5:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010d2b8:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010d2bb:	89 01                	mov    %eax,(%ecx)
f010d2bd:	89 51 04             	mov    %edx,0x4(%ecx)
}
f010d2c0:	8b 45 08             	mov    0x8(%ebp),%eax
f010d2c3:	c9                   	leave  
f010d2c4:	c2 04 00             	ret    $0x4

f010d2c7 <sys_rcr2>:

uint32 sys_rcr2()
{
f010d2c7:	55                   	push   %ebp
f010d2c8:	89 e5                	mov    %esp,%ebp
f010d2ca:	83 ec 10             	sub    $0x10,%esp

static __inline uint32
rcr2(void)
{
	uint32 val;
	__asm __volatile("movl %%cr2,%0" : "=r" (val));
f010d2cd:	0f 20 d0             	mov    %cr2,%eax
f010d2d0:	89 45 fc             	mov    %eax,-0x4(%ebp)
	return val;
f010d2d3:	8b 45 fc             	mov    -0x4(%ebp),%eax
	return rcr2();
f010d2d6:	90                   	nop
}
f010d2d7:	c9                   	leave  
f010d2d8:	c3                   	ret    

f010d2d9 <sys_bypassPageFault>:
void sys_bypassPageFault(uint8 instrLength)
{
f010d2d9:	55                   	push   %ebp
f010d2da:	89 e5                	mov    %esp,%ebp
f010d2dc:	83 ec 04             	sub    $0x4,%esp
f010d2df:	8b 45 08             	mov    0x8(%ebp),%eax
f010d2e2:	88 45 fc             	mov    %al,-0x4(%ebp)
	bypassInstrLength = instrLength;
f010d2e5:	8a 45 fc             	mov    -0x4(%ebp),%al
f010d2e8:	a2 28 4a 25 f0       	mov    %al,0xf0254a28
}
f010d2ed:	90                   	nop
f010d2ee:	c9                   	leave  
f010d2ef:	c3                   	ret    

f010d2f0 <sys_sbrk>:
/**********************************/
/* DYNAMIC ALLOCATOR SYSTEM CALLS */
/**********************************/
/*2024*/
void* sys_sbrk(int increment)
{
f010d2f0:	55                   	push   %ebp
f010d2f1:	89 e5                	mov    %esp,%ebp
	//TODO: [PROJECT'23.MS2 - #08] [2] USER HEAP - Block Allocator - sys_sbrk() [Kernel Side]
	//MS2: COMMENT THIS LINE BEFORE START CODING====
	return (void*)-1 ;
f010d2f3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
	 * 		You might have to undo any operations you have done so far in this case.
	 */
	struct Env* env = curenv; //the current running Environment to adjust its break limit


}
f010d2f8:	5d                   	pop    %ebp
f010d2f9:	c3                   	ret    

f010d2fa <syscall>:
/**************************************************************************/
/************************* SYSTEM CALLS HANDLER ***************************/
/**************************************************************************/
// Dispatches to the correct kernel function, passing the arguments.
uint32 syscall(uint32 syscallno, uint32 a1, uint32 a2, uint32 a3, uint32 a4, uint32 a5)
{
f010d2fa:	55                   	push   %ebp
f010d2fb:	89 e5                	mov    %esp,%ebp
f010d2fd:	56                   	push   %esi
f010d2fe:	53                   	push   %ebx
f010d2ff:	83 ec 10             	sub    $0x10,%esp

	// Call the function corresponding to the 'syscallno' parameter.
	// Return any appropriate return value.
	switch(syscallno)
f010d302:	83 7d 08 32          	cmpl   $0x32,0x8(%ebp)
f010d306:	0f 87 1a 05 00 00    	ja     f010d826 <syscall+0x52c>
f010d30c:	8b 45 08             	mov    0x8(%ebp),%eax
f010d30f:	c1 e0 02             	shl    $0x2,%eax
f010d312:	05 f8 3e 13 f0       	add    $0xf0133ef8,%eax
f010d317:	8b 00                	mov    (%eax),%eax
f010d319:	ff e0                	jmp    *%eax
	{
	/*2023*/
	//TODO: [PROJECT'23.MS1 - #4] [2] SYSTEM CALLS - Add suitable code here
	case SYS_sbrk:
	        return (uint32)sys_sbrk(a1);
f010d31b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d31e:	50                   	push   %eax
f010d31f:	e8 cc ff ff ff       	call   f010d2f0 <sys_sbrk>
f010d324:	83 c4 04             	add    $0x4,%esp
f010d327:	e9 ff 04 00 00       	jmp    f010d82b <syscall+0x531>
	        //return 0;
	        break;
	    case SYS_free_user_mem:
	    	if((uint32*)a1==NULL||(uint32*)a1==NULL){
f010d32c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d32f:	85 c0                	test   %eax,%eax
f010d331:	74 07                	je     f010d33a <syscall+0x40>
f010d333:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d336:	85 c0                	test   %eax,%eax
f010d338:	75 16                	jne    f010d350 <syscall+0x56>
	    		sched_kill_env(curenv->env_id);
f010d33a:	a1 74 41 25 f0       	mov    0xf0254174,%eax
f010d33f:	8b 40 4c             	mov    0x4c(%eax),%eax
f010d342:	83 ec 0c             	sub    $0xc,%esp
f010d345:	50                   	push   %eax
f010d346:	e8 c6 82 ff ff       	call   f0105611 <sched_kill_env>
f010d34b:	83 c4 10             	add    $0x10,%esp
f010d34e:	eb 43                	jmp    f010d393 <syscall+0x99>
	    	}
	    	else if(a1>=USER_LIMIT||a2>=PAGE_SIZE){
f010d350:	81 7d 0c ff ff 7f ef 	cmpl   $0xef7fffff,0xc(%ebp)
f010d357:	77 09                	ja     f010d362 <syscall+0x68>
f010d359:	81 7d 10 ff 0f 00 00 	cmpl   $0xfff,0x10(%ebp)
f010d360:	76 16                	jbe    f010d378 <syscall+0x7e>
	    		    		sched_kill_env(curenv->env_id);
f010d362:	a1 74 41 25 f0       	mov    0xf0254174,%eax
f010d367:	8b 40 4c             	mov    0x4c(%eax),%eax
f010d36a:	83 ec 0c             	sub    $0xc,%esp
f010d36d:	50                   	push   %eax
f010d36e:	e8 9e 82 ff ff       	call   f0105611 <sched_kill_env>
f010d373:	83 c4 10             	add    $0x10,%esp
f010d376:	eb 1b                	jmp    f010d393 <syscall+0x99>
	    	else if(a1<0||a2<0){
	    		sched_kill_env(curenv->env_id);
	    	}

	    	else{
	        sys_free_user_mem(a1,a2);
f010d378:	83 ec 08             	sub    $0x8,%esp
f010d37b:	ff 75 10             	pushl  0x10(%ebp)
f010d37e:	ff 75 0c             	pushl  0xc(%ebp)
f010d381:	e8 7c fb ff ff       	call   f010cf02 <sys_free_user_mem>
f010d386:	83 c4 10             	add    $0x10,%esp
	        return 0;
f010d389:	b8 00 00 00 00       	mov    $0x0,%eax
f010d38e:	e9 98 04 00 00       	jmp    f010d82b <syscall+0x531>
	    	}
	        break;
f010d393:	e9 8e 04 00 00       	jmp    f010d826 <syscall+0x52c>
	    case SYS_allocate_user_mem:
	    	if((uint32*)a1==NULL||(uint32*)a1==NULL){
f010d398:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d39b:	85 c0                	test   %eax,%eax
f010d39d:	74 07                	je     f010d3a6 <syscall+0xac>
f010d39f:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d3a2:	85 c0                	test   %eax,%eax
f010d3a4:	75 16                	jne    f010d3bc <syscall+0xc2>
	    		sched_kill_env(curenv->env_id);
f010d3a6:	a1 74 41 25 f0       	mov    0xf0254174,%eax
f010d3ab:	8b 40 4c             	mov    0x4c(%eax),%eax
f010d3ae:	83 ec 0c             	sub    $0xc,%esp
f010d3b1:	50                   	push   %eax
f010d3b2:	e8 5a 82 ff ff       	call   f0105611 <sched_kill_env>
f010d3b7:	83 c4 10             	add    $0x10,%esp
f010d3ba:	eb 65                	jmp    f010d421 <syscall+0x127>
	    	}
	    	else if(a1>=USER_LIMIT||a2>=USER_LIMIT-1024){
f010d3bc:	81 7d 0c ff ff 7f ef 	cmpl   $0xef7fffff,0xc(%ebp)
f010d3c3:	77 09                	ja     f010d3ce <syscall+0xd4>
f010d3c5:	81 7d 10 ff fb 7f ef 	cmpl   $0xef7ffbff,0x10(%ebp)
f010d3cc:	76 16                	jbe    f010d3e4 <syscall+0xea>
	    		    		sched_kill_env(curenv->env_id);
f010d3ce:	a1 74 41 25 f0       	mov    0xf0254174,%eax
f010d3d3:	8b 40 4c             	mov    0x4c(%eax),%eax
f010d3d6:	83 ec 0c             	sub    $0xc,%esp
f010d3d9:	50                   	push   %eax
f010d3da:	e8 32 82 ff ff       	call   f0105611 <sched_kill_env>
f010d3df:	83 c4 10             	add    $0x10,%esp
f010d3e2:	eb 3d                	jmp    f010d421 <syscall+0x127>
	    		    	}
	    	else if(a1<=0||a2<=0){
f010d3e4:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f010d3e8:	74 06                	je     f010d3f0 <syscall+0xf6>
f010d3ea:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f010d3ee:	75 16                	jne    f010d406 <syscall+0x10c>
	    		sched_kill_env(curenv->env_id);
f010d3f0:	a1 74 41 25 f0       	mov    0xf0254174,%eax
f010d3f5:	8b 40 4c             	mov    0x4c(%eax),%eax
f010d3f8:	83 ec 0c             	sub    $0xc,%esp
f010d3fb:	50                   	push   %eax
f010d3fc:	e8 10 82 ff ff       	call   f0105611 <sched_kill_env>
f010d401:	83 c4 10             	add    $0x10,%esp
f010d404:	eb 1b                	jmp    f010d421 <syscall+0x127>
	    	}

	    	else{
	        sys_allocate_user_mem(a1,a2);
f010d406:	83 ec 08             	sub    $0x8,%esp
f010d409:	ff 75 10             	pushl  0x10(%ebp)
f010d40c:	ff 75 0c             	pushl  0xc(%ebp)
f010d40f:	e8 30 fb ff ff       	call   f010cf44 <sys_allocate_user_mem>
f010d414:	83 c4 10             	add    $0x10,%esp
	        return 0;
f010d417:	b8 00 00 00 00       	mov    $0x0,%eax
f010d41c:	e9 0a 04 00 00       	jmp    f010d82b <syscall+0x531>
	    	}
	        break;
f010d421:	e9 00 04 00 00       	jmp    f010d826 <syscall+0x52c>
	//=====================================================================
	case SYS_cputs:
		sys_cputs((const char*)a1,a2,(uint8)a3);
f010d426:	8b 45 14             	mov    0x14(%ebp),%eax
f010d429:	0f b6 d0             	movzbl %al,%edx
f010d42c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d42f:	83 ec 04             	sub    $0x4,%esp
f010d432:	52                   	push   %edx
f010d433:	ff 75 10             	pushl  0x10(%ebp)
f010d436:	50                   	push   %eax
f010d437:	e8 1b f8 ff ff       	call   f010cc57 <sys_cputs>
f010d43c:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d43f:	b8 00 00 00 00       	mov    $0x0,%eax
f010d444:	e9 e2 03 00 00       	jmp    f010d82b <syscall+0x531>
		break;
	case SYS_cgetc:
		return sys_cgetc();
f010d449:	e8 7b f8 ff ff       	call   f010ccc9 <sys_cgetc>
f010d44e:	e9 d8 03 00 00       	jmp    f010d82b <syscall+0x531>
		break;
	case SYS_calc_req_frames:
		return sys_calculate_required_frames(a1, a2);
f010d453:	83 ec 08             	sub    $0x8,%esp
f010d456:	ff 75 10             	pushl  0x10(%ebp)
f010d459:	ff 75 0c             	pushl  0xc(%ebp)
f010d45c:	e8 b8 f9 ff ff       	call   f010ce19 <sys_calculate_required_frames>
f010d461:	83 c4 10             	add    $0x10,%esp
f010d464:	e9 c2 03 00 00       	jmp    f010d82b <syscall+0x531>
		break;
	case SYS_calc_free_frames:
		return sys_calculate_free_frames();
f010d469:	e8 d0 f9 ff ff       	call   f010ce3e <sys_calculate_free_frames>
f010d46e:	e9 b8 03 00 00       	jmp    f010d82b <syscall+0x531>
		break;
	case SYS_calc_modified_frames:
		return sys_calculate_modified_frames();
f010d473:	e8 e5 f9 ff ff       	call   f010ce5d <sys_calculate_modified_frames>
f010d478:	e9 ae 03 00 00       	jmp    f010d82b <syscall+0x531>
		break;
	case SYS_calc_notmod_frames:
		return sys_calculate_notmod_frames();
f010d47d:	e8 f5 f9 ff ff       	call   f010ce77 <sys_calculate_notmod_frames>
f010d482:	e9 a4 03 00 00       	jmp    f010d82b <syscall+0x531>
		break;

	case SYS_pf_calc_allocated_pages:
		return sys_pf_calculate_allocated_pages();
f010d487:	e8 5d fa ff ff       	call   f010cee9 <sys_pf_calculate_allocated_pages>
f010d48c:	e9 9a 03 00 00       	jmp    f010d82b <syscall+0x531>
		break;
	case SYS_calculate_pages_tobe_removed_ready_exit:
		return sys_calculate_pages_tobe_removed_ready_exit(a1);
f010d491:	83 ec 0c             	sub    $0xc,%esp
f010d494:	ff 75 0c             	pushl  0xc(%ebp)
f010d497:	e8 f5 f9 ff ff       	call   f010ce91 <sys_calculate_pages_tobe_removed_ready_exit>
f010d49c:	83 c4 10             	add    $0x10,%esp
f010d49f:	e9 87 03 00 00       	jmp    f010d82b <syscall+0x531>
		break;
	case SYS_scarce_memory:
		sys_scarce_memory();
f010d4a4:	e8 fe f9 ff ff       	call   f010cea7 <sys_scarce_memory>
		return 0;
f010d4a9:	b8 00 00 00 00       	mov    $0x0,%eax
f010d4ae:	e9 78 03 00 00       	jmp    f010d82b <syscall+0x531>
		break;
	case SYS_allocate_chunk_in_mem:
		sys_allocate_chunk(a1, (uint32)a2, a3);
f010d4b3:	83 ec 04             	sub    $0x4,%esp
f010d4b6:	ff 75 14             	pushl  0x14(%ebp)
f010d4b9:	ff 75 10             	pushl  0x10(%ebp)
f010d4bc:	ff 75 0c             	pushl  0xc(%ebp)
f010d4bf:	e8 a0 fa ff ff       	call   f010cf64 <sys_allocate_chunk>
f010d4c4:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d4c7:	b8 00 00 00 00       	mov    $0x0,%eax
f010d4cc:	e9 5a 03 00 00       	jmp    f010d82b <syscall+0x531>
		break;

		//======================
	case SYS_allocate_page:
		__sys_allocate_page((void*)a1, a2);
f010d4d1:	8b 55 10             	mov    0x10(%ebp),%edx
f010d4d4:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d4d7:	83 ec 08             	sub    $0x8,%esp
f010d4da:	52                   	push   %edx
f010d4db:	50                   	push   %eax
f010d4dc:	e8 fb f7 ff ff       	call   f010ccdc <__sys_allocate_page>
f010d4e1:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d4e4:	b8 00 00 00 00       	mov    $0x0,%eax
f010d4e9:	e9 3d 03 00 00       	jmp    f010d82b <syscall+0x531>
		break;
	case SYS_map_frame:
		__sys_map_frame(a1, (void*)a2, a3, (void*)a4, a5);
f010d4ee:	8b 75 1c             	mov    0x1c(%ebp),%esi
f010d4f1:	8b 5d 18             	mov    0x18(%ebp),%ebx
f010d4f4:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010d4f7:	8b 55 10             	mov    0x10(%ebp),%edx
f010d4fa:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d4fd:	83 ec 0c             	sub    $0xc,%esp
f010d500:	56                   	push   %esi
f010d501:	53                   	push   %ebx
f010d502:	51                   	push   %ecx
f010d503:	52                   	push   %edx
f010d504:	50                   	push   %eax
f010d505:	e8 d5 f8 ff ff       	call   f010cddf <__sys_map_frame>
f010d50a:	83 c4 20             	add    $0x20,%esp
		return 0;
f010d50d:	b8 00 00 00 00       	mov    $0x0,%eax
f010d512:	e9 14 03 00 00       	jmp    f010d82b <syscall+0x531>
		break;
	case SYS_unmap_frame:
		__sys_unmap_frame(a1, (void*)a2);
f010d517:	8b 55 10             	mov    0x10(%ebp),%edx
f010d51a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d51d:	83 ec 08             	sub    $0x8,%esp
f010d520:	52                   	push   %edx
f010d521:	50                   	push   %eax
f010d522:	e8 d5 f8 ff ff       	call   f010cdfc <__sys_unmap_frame>
f010d527:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d52a:	b8 00 00 00 00       	mov    $0x0,%eax
f010d52f:	e9 f7 02 00 00       	jmp    f010d82b <syscall+0x531>
		//		return 0;
		//		break;
		//2022

	case SYS_disableINTR:
		sys_disable_interrupt();
f010d534:	e8 89 fa ff ff       	call   f010cfc2 <sys_disable_interrupt>
		return 0;
f010d539:	b8 00 00 00 00       	mov    $0x0,%eax
f010d53e:	e9 e8 02 00 00       	jmp    f010d82b <syscall+0x531>
		break;

	case SYS_enableINTR:
		sys_enable_interrupt();
f010d543:	e8 94 fa ff ff       	call   f010cfdc <sys_enable_interrupt>
		return 0;
f010d548:	b8 00 00 00 00       	mov    $0x0,%eax
f010d54d:	e9 d9 02 00 00       	jmp    f010d82b <syscall+0x531>
		break;

	case SYS_cputc:
		sys_cputc((const char)a1);
f010d552:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d555:	0f be c0             	movsbl %al,%eax
f010d558:	83 ec 0c             	sub    $0xc,%esp
f010d55b:	50                   	push   %eax
f010d55c:	e8 44 f7 ff ff       	call   f010cca5 <sys_cputc>
f010d561:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d564:	b8 00 00 00 00       	mov    $0x0,%eax
f010d569:	e9 bd 02 00 00       	jmp    f010d82b <syscall+0x531>
		break;

	case SYS_clearFFL:
		sys_clearFFL((const char)a1);
f010d56e:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d571:	0f be c0             	movsbl %al,%eax
f010d574:	83 ec 0c             	sub    $0xc,%esp
f010d577:	50                   	push   %eax
f010d578:	e8 38 f9 ff ff       	call   f010ceb5 <sys_clearFFL>
f010d57d:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d580:	b8 00 00 00 00       	mov    $0x0,%eax
f010d585:	e9 a1 02 00 00       	jmp    f010d82b <syscall+0x531>
		break;

	case SYS_create_semaphore:
		return sys_createSemaphore((char*)a1, a2);
f010d58a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d58d:	83 ec 08             	sub    $0x8,%esp
f010d590:	ff 75 10             	pushl  0x10(%ebp)
f010d593:	50                   	push   %eax
f010d594:	e8 5d fa ff ff       	call   f010cff6 <sys_createSemaphore>
f010d599:	83 c4 10             	add    $0x10,%esp
f010d59c:	e9 8a 02 00 00       	jmp    f010d82b <syscall+0x531>
		break;

	case SYS_wait_semaphore:
		sys_waitSemaphore((int32)a1, (char*)a2);
f010d5a1:	8b 55 10             	mov    0x10(%ebp),%edx
f010d5a4:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d5a7:	83 ec 08             	sub    $0x8,%esp
f010d5aa:	52                   	push   %edx
f010d5ab:	50                   	push   %eax
f010d5ac:	e8 67 fa ff ff       	call   f010d018 <sys_waitSemaphore>
f010d5b1:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d5b4:	b8 00 00 00 00       	mov    $0x0,%eax
f010d5b9:	e9 6d 02 00 00       	jmp    f010d82b <syscall+0x531>
		break;

	case SYS_signal_semaphore:
		sys_signalSemaphore((int32)a1, (char*)a2);
f010d5be:	8b 55 10             	mov    0x10(%ebp),%edx
f010d5c1:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d5c4:	83 ec 08             	sub    $0x8,%esp
f010d5c7:	52                   	push   %edx
f010d5c8:	50                   	push   %eax
f010d5c9:	e8 64 fa ff ff       	call   f010d032 <sys_signalSemaphore>
f010d5ce:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d5d1:	b8 00 00 00 00       	mov    $0x0,%eax
f010d5d6:	e9 50 02 00 00       	jmp    f010d82b <syscall+0x531>
		break;

	case SYS_get_semaphore_value:
		return sys_getSemaphoreValue((int32)a1, (char*)a2);
f010d5db:	8b 55 10             	mov    0x10(%ebp),%edx
f010d5de:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d5e1:	83 ec 08             	sub    $0x8,%esp
f010d5e4:	52                   	push   %edx
f010d5e5:	50                   	push   %eax
f010d5e6:	e8 61 fa ff ff       	call   f010d04c <sys_getSemaphoreValue>
f010d5eb:	83 c4 10             	add    $0x10,%esp
f010d5ee:	e9 38 02 00 00       	jmp    f010d82b <syscall+0x531>
		break;

	case SYS_create_shared_object:
		return sys_createSharedObject((char*)a1, a2, a3, (void*)a4);
f010d5f3:	8b 4d 18             	mov    0x18(%ebp),%ecx
f010d5f6:	8b 45 14             	mov    0x14(%ebp),%eax
f010d5f9:	0f b6 d0             	movzbl %al,%edx
f010d5fc:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d5ff:	51                   	push   %ecx
f010d600:	52                   	push   %edx
f010d601:	ff 75 10             	pushl  0x10(%ebp)
f010d604:	50                   	push   %eax
f010d605:	e8 9f fa ff ff       	call   f010d0a9 <sys_createSharedObject>
f010d60a:	83 c4 10             	add    $0x10,%esp
f010d60d:	e9 19 02 00 00       	jmp    f010d82b <syscall+0x531>
		break;

	case SYS_get_shared_object:
		return sys_getSharedObject((int32)a1, (char*)a2, (void*)a3);
f010d612:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010d615:	8b 55 10             	mov    0x10(%ebp),%edx
f010d618:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d61b:	83 ec 04             	sub    $0x4,%esp
f010d61e:	51                   	push   %ecx
f010d61f:	52                   	push   %edx
f010d620:	50                   	push   %eax
f010d621:	e8 cc fa ff ff       	call   f010d0f2 <sys_getSharedObject>
f010d626:	83 c4 10             	add    $0x10,%esp
f010d629:	e9 fd 01 00 00       	jmp    f010d82b <syscall+0x531>
		break;

	case SYS_free_shared_object:
		return sys_freeSharedObject((int32)a1, (void *)a2);
f010d62e:	8b 55 10             	mov    0x10(%ebp),%edx
f010d631:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d634:	83 ec 08             	sub    $0x8,%esp
f010d637:	52                   	push   %edx
f010d638:	50                   	push   %eax
f010d639:	e8 d0 fa ff ff       	call   f010d10e <sys_freeSharedObject>
f010d63e:	83 c4 10             	add    $0x10,%esp
f010d641:	e9 e5 01 00 00       	jmp    f010d82b <syscall+0x531>
		break;

	case SYS_get_size_of_shared_object:
		return sys_getSizeOfSharedObject((int32)a1, (char*)a2);
f010d646:	8b 55 10             	mov    0x10(%ebp),%edx
f010d649:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d64c:	83 ec 08             	sub    $0x8,%esp
f010d64f:	52                   	push   %edx
f010d650:	50                   	push   %eax
f010d651:	e8 83 fa ff ff       	call   f010d0d9 <sys_getSizeOfSharedObject>
f010d656:	83 c4 10             	add    $0x10,%esp
f010d659:	e9 cd 01 00 00       	jmp    f010d82b <syscall+0x531>
		break;

	case SYS_get_max_shares:
		return sys_getMaxShares();
f010d65e:	e8 c4 fa ff ff       	call   f010d127 <sys_getMaxShares>
f010d663:	e9 c3 01 00 00       	jmp    f010d82b <syscall+0x531>
		break;

	case SYS_create_env:
		return sys_create_env((char*)a1, (uint32)a2, (uint32)a3, (uint32)a4);
f010d668:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d66b:	ff 75 18             	pushl  0x18(%ebp)
f010d66e:	ff 75 14             	pushl  0x14(%ebp)
f010d671:	ff 75 10             	pushl  0x10(%ebp)
f010d674:	50                   	push   %eax
f010d675:	e8 c6 fb ff ff       	call   f010d240 <sys_create_env>
f010d67a:	83 c4 10             	add    $0x10,%esp
f010d67d:	e9 a9 01 00 00       	jmp    f010d82b <syscall+0x531>
		break;

	case SYS_run_env:
		sys_run_env((int32)a1);
f010d682:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d685:	83 ec 0c             	sub    $0xc,%esp
f010d688:	50                   	push   %eax
f010d689:	e8 f2 fb ff ff       	call   f010d280 <sys_run_env>
f010d68e:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d691:	b8 00 00 00 00       	mov    $0x0,%eax
f010d696:	e9 90 01 00 00       	jmp    f010d82b <syscall+0x531>
		break;
	case SYS_getenvindex:
		return sys_getenvindex();
f010d69b:	e8 9e fa ff ff       	call   f010d13e <sys_getenvindex>
f010d6a0:	e9 86 01 00 00       	jmp    f010d82b <syscall+0x531>
		break;
	case SYS_getenvid:
		return sys_getenvid();
f010d6a5:	e8 87 fa ff ff       	call   f010d131 <sys_getenvid>
f010d6aa:	e9 7c 01 00 00       	jmp    f010d82b <syscall+0x531>
		break;
	case SYS_getparentenvid:
		return sys_getparentenvid();
f010d6af:	e8 d9 fa ff ff       	call   f010d18d <sys_getparentenvid>
f010d6b4:	e9 72 01 00 00       	jmp    f010d82b <syscall+0x531>
		break;
	case SYS_destroy_env:
		return sys_destroy_env(a1);
f010d6b9:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d6bc:	83 ec 0c             	sub    $0xc,%esp
f010d6bf:	50                   	push   %eax
f010d6c0:	e8 d5 fa ff ff       	call   f010d19a <sys_destroy_env>
f010d6c5:	83 c4 10             	add    $0x10,%esp
f010d6c8:	e9 5e 01 00 00       	jmp    f010d82b <syscall+0x531>
		break;
	case SYS_exit_env:
		sys_exit_env();
f010d6cd:	e8 60 fb ff ff       	call   f010d232 <sys_exit_env>
		return 0;
f010d6d2:	b8 00 00 00 00       	mov    $0x0,%eax
f010d6d7:	e9 4f 01 00 00       	jmp    f010d82b <syscall+0x531>
		break;
	case SYS_get_virtual_time:
	{
		struct uint64 res = sys_get_virtual_time();
f010d6dc:	8d 45 e8             	lea    -0x18(%ebp),%eax
f010d6df:	83 ec 0c             	sub    $0xc,%esp
f010d6e2:	50                   	push   %eax
f010d6e3:	e8 b0 fb ff ff       	call   f010d298 <sys_get_virtual_time>
f010d6e8:	83 c4 0c             	add    $0xc,%esp
		uint32* ptrlow = ((uint32*)a1);
f010d6eb:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d6ee:	89 45 f4             	mov    %eax,-0xc(%ebp)
		uint32* ptrhi = ((uint32*)a2);
f010d6f1:	8b 45 10             	mov    0x10(%ebp),%eax
f010d6f4:	89 45 f0             	mov    %eax,-0x10(%ebp)
		*ptrlow = res.low;
f010d6f7:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010d6fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d6fd:	89 10                	mov    %edx,(%eax)
		*ptrhi = res.hi;
f010d6ff:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010d702:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d705:	89 10                	mov    %edx,(%eax)
		return 0;
f010d707:	b8 00 00 00 00       	mov    $0x0,%eax
f010d70c:	e9 1a 01 00 00       	jmp    f010d82b <syscall+0x531>
		break;
	}
	case SYS_move_user_mem:
		sys_move_user_mem(a1, a2, a3);
f010d711:	83 ec 04             	sub    $0x4,%esp
f010d714:	ff 75 14             	pushl  0x14(%ebp)
f010d717:	ff 75 10             	pushl  0x10(%ebp)
f010d71a:	ff 75 0c             	pushl  0xc(%ebp)
f010d71d:	e8 68 f8 ff ff       	call   f010cf8a <sys_move_user_mem>
f010d722:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d725:	b8 00 00 00 00       	mov    $0x0,%eax
f010d72a:	e9 fc 00 00 00       	jmp    f010d82b <syscall+0x531>
		break;
	case SYS_rcr2:
		return sys_rcr2();
f010d72f:	e8 93 fb ff ff       	call   f010d2c7 <sys_rcr2>
f010d734:	e9 f2 00 00 00       	jmp    f010d82b <syscall+0x531>
		break;
	case SYS_bypassPageFault:
		sys_bypassPageFault(a1);
f010d739:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d73c:	0f b6 c0             	movzbl %al,%eax
f010d73f:	83 ec 0c             	sub    $0xc,%esp
f010d742:	50                   	push   %eax
f010d743:	e8 91 fb ff ff       	call   f010d2d9 <sys_bypassPageFault>
f010d748:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d74b:	b8 00 00 00 00       	mov    $0x0,%eax
f010d750:	e9 d6 00 00 00       	jmp    f010d82b <syscall+0x531>

	case SYS_rsttst:
		rsttst();
f010d755:	e8 62 09 02 00       	call   f012e0bc <rsttst>
		return 0;
f010d75a:	b8 00 00 00 00       	mov    $0x0,%eax
f010d75f:	e9 c7 00 00 00       	jmp    f010d82b <syscall+0x531>
	case SYS_inctst:
		inctst();
f010d764:	e8 63 09 02 00       	call   f012e0cc <inctst>
		return 0;
f010d769:	b8 00 00 00 00       	mov    $0x0,%eax
f010d76e:	e9 b8 00 00 00       	jmp    f010d82b <syscall+0x531>
	case SYS_chktst:
		chktst(a1);
f010d773:	83 ec 0c             	sub    $0xc,%esp
f010d776:	ff 75 0c             	pushl  0xc(%ebp)
f010d779:	e8 4d 0a 02 00       	call   f012e1cb <chktst>
f010d77e:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d781:	b8 00 00 00 00       	mov    $0x0,%eax
f010d786:	e9 a0 00 00 00       	jmp    f010d82b <syscall+0x531>
	case SYS_gettst:
		return gettst();
f010d78b:	e8 4d 09 02 00       	call   f012e0dd <gettst>
f010d790:	e9 96 00 00 00       	jmp    f010d82b <syscall+0x531>
	case SYS_testNum:
		tst(a1, a2, a3, (char)a4, a5);
f010d795:	8b 55 1c             	mov    0x1c(%ebp),%edx
f010d798:	8b 45 18             	mov    0x18(%ebp),%eax
f010d79b:	0f be c0             	movsbl %al,%eax
f010d79e:	83 ec 0c             	sub    $0xc,%esp
f010d7a1:	52                   	push   %edx
f010d7a2:	50                   	push   %eax
f010d7a3:	ff 75 14             	pushl  0x14(%ebp)
f010d7a6:	ff 75 10             	pushl  0x10(%ebp)
f010d7a9:	ff 75 0c             	pushl  0xc(%ebp)
f010d7ac:	e8 36 09 02 00       	call   f012e0e7 <tst>
f010d7b1:	83 c4 20             	add    $0x20,%esp
		return 0;
f010d7b4:	b8 00 00 00 00       	mov    $0x0,%eax
f010d7b9:	eb 70                	jmp    f010d82b <syscall+0x531>

	case SYS_get_heap_strategy:
		return sys_get_heap_strategy();
f010d7bb:	e8 ea f7 ff ff       	call   f010cfaa <sys_get_heap_strategy>
f010d7c0:	eb 69                	jmp    f010d82b <syscall+0x531>

	case SYS_set_heap_strategy:
		sys_set_uheap_strategy(a1);
f010d7c2:	83 ec 0c             	sub    $0xc,%esp
f010d7c5:	ff 75 0c             	pushl  0xc(%ebp)
f010d7c8:	e8 e7 f7 ff ff       	call   f010cfb4 <sys_set_uheap_strategy>
f010d7cd:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d7d0:	b8 00 00 00 00       	mov    $0x0,%eax
f010d7d5:	eb 54                	jmp    f010d82b <syscall+0x531>

	case SYS_check_LRU_lists:
		return sys_check_LRU_lists((uint32*)a1, (uint32*)a2, (int)a3, (int)a4);
f010d7d7:	8b 5d 18             	mov    0x18(%ebp),%ebx
f010d7da:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010d7dd:	8b 55 10             	mov    0x10(%ebp),%edx
f010d7e0:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d7e3:	53                   	push   %ebx
f010d7e4:	51                   	push   %ecx
f010d7e5:	52                   	push   %edx
f010d7e6:	50                   	push   %eax
f010d7e7:	e8 a2 47 00 00       	call   f0111f8e <sys_check_LRU_lists>
f010d7ec:	83 c4 10             	add    $0x10,%esp
f010d7ef:	eb 3a                	jmp    f010d82b <syscall+0x531>

	case SYS_check_LRU_lists_free:
		return sys_check_LRU_lists_free((uint32*)a1, (int)a2);
f010d7f1:	8b 55 10             	mov    0x10(%ebp),%edx
f010d7f4:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d7f7:	83 ec 08             	sub    $0x8,%esp
f010d7fa:	52                   	push   %edx
f010d7fb:	50                   	push   %eax
f010d7fc:	e8 0f 49 00 00       	call   f0112110 <sys_check_LRU_lists_free>
f010d801:	83 c4 10             	add    $0x10,%esp
f010d804:	eb 25                	jmp    f010d82b <syscall+0x531>

	case SYS_check_WS_list:
		return sys_check_WS_list((uint32*)a1, (int)a2, (uint32)a3, (bool)a4);
f010d806:	8b 4d 18             	mov    0x18(%ebp),%ecx
f010d809:	8b 55 10             	mov    0x10(%ebp),%edx
f010d80c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d80f:	51                   	push   %ecx
f010d810:	ff 75 14             	pushl  0x14(%ebp)
f010d813:	52                   	push   %edx
f010d814:	50                   	push   %eax
f010d815:	e8 61 4a 00 00       	call   f011227b <sys_check_WS_list>
f010d81a:	83 c4 10             	add    $0x10,%esp
f010d81d:	eb 0c                	jmp    f010d82b <syscall+0x531>

	case NSYSCALLS:
		return 	-E_INVAL;
f010d81f:	b8 03 00 00 00       	mov    $0x3,%eax
f010d824:	eb 05                	jmp    f010d82b <syscall+0x531>
		break;
	}
	//panic("syscall not implemented");
	return -E_INVAL;
f010d826:	b8 03 00 00 00       	mov    $0x3,%eax
}
f010d82b:	8d 65 f8             	lea    -0x8(%ebp),%esp
f010d82e:	5b                   	pop    %ebx
f010d82f:	5e                   	pop    %esi
f010d830:	5d                   	pop    %ebp
f010d831:	c3                   	ret    

f010d832 <stab_binsearch>:
//	will exit setting left = 118, right = 554.
//
static void
stab_binsearch(const struct Stab *stabs, int *region_left, int *region_right,
	       int type, uint32*  addr)
{
f010d832:	55                   	push   %ebp
f010d833:	89 e5                	mov    %esp,%ebp
f010d835:	83 ec 20             	sub    $0x20,%esp
	int l = *region_left, r = *region_right, any_matches = 0;
f010d838:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d83b:	8b 00                	mov    (%eax),%eax
f010d83d:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010d840:	8b 45 10             	mov    0x10(%ebp),%eax
f010d843:	8b 00                	mov    (%eax),%eax
f010d845:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010d848:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	while (l <= r) {
f010d84f:	e9 ca 00 00 00       	jmp    f010d91e <stab_binsearch+0xec>
		int true_m = (l + r) / 2, m = true_m;
f010d854:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010d857:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010d85a:	01 d0                	add    %edx,%eax
f010d85c:	89 c2                	mov    %eax,%edx
f010d85e:	c1 ea 1f             	shr    $0x1f,%edx
f010d861:	01 d0                	add    %edx,%eax
f010d863:	d1 f8                	sar    %eax
f010d865:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010d868:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d86b:	89 45 f0             	mov    %eax,-0x10(%ebp)

		// search for earliest stab with right type
		while (m >= l && stabs[m].n_type != type)
f010d86e:	eb 03                	jmp    f010d873 <stab_binsearch+0x41>
			m--;
f010d870:	ff 4d f0             	decl   -0x10(%ebp)

	while (l <= r) {
		int true_m = (l + r) / 2, m = true_m;

		// search for earliest stab with right type
		while (m >= l && stabs[m].n_type != type)
f010d873:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d876:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010d879:	7c 1e                	jl     f010d899 <stab_binsearch+0x67>
f010d87b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010d87e:	89 d0                	mov    %edx,%eax
f010d880:	01 c0                	add    %eax,%eax
f010d882:	01 d0                	add    %edx,%eax
f010d884:	c1 e0 02             	shl    $0x2,%eax
f010d887:	89 c2                	mov    %eax,%edx
f010d889:	8b 45 08             	mov    0x8(%ebp),%eax
f010d88c:	01 d0                	add    %edx,%eax
f010d88e:	8a 40 04             	mov    0x4(%eax),%al
f010d891:	0f b6 c0             	movzbl %al,%eax
f010d894:	3b 45 14             	cmp    0x14(%ebp),%eax
f010d897:	75 d7                	jne    f010d870 <stab_binsearch+0x3e>
			m--;
		if (m < l) {	// no match in [l, m]
f010d899:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d89c:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010d89f:	7d 09                	jge    f010d8aa <stab_binsearch+0x78>
			l = true_m + 1;
f010d8a1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d8a4:	40                   	inc    %eax
f010d8a5:	89 45 fc             	mov    %eax,-0x4(%ebp)
			continue;
f010d8a8:	eb 74                	jmp    f010d91e <stab_binsearch+0xec>
		}

		// actual binary search
		any_matches = 1;
f010d8aa:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		if (stabs[m].n_value < addr) {
f010d8b1:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010d8b4:	89 d0                	mov    %edx,%eax
f010d8b6:	01 c0                	add    %eax,%eax
f010d8b8:	01 d0                	add    %edx,%eax
f010d8ba:	c1 e0 02             	shl    $0x2,%eax
f010d8bd:	89 c2                	mov    %eax,%edx
f010d8bf:	8b 45 08             	mov    0x8(%ebp),%eax
f010d8c2:	01 d0                	add    %edx,%eax
f010d8c4:	8b 40 08             	mov    0x8(%eax),%eax
f010d8c7:	3b 45 18             	cmp    0x18(%ebp),%eax
f010d8ca:	73 11                	jae    f010d8dd <stab_binsearch+0xab>
			*region_left = m;
f010d8cc:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d8cf:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010d8d2:	89 10                	mov    %edx,(%eax)
			l = true_m + 1;
f010d8d4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d8d7:	40                   	inc    %eax
f010d8d8:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010d8db:	eb 41                	jmp    f010d91e <stab_binsearch+0xec>
		} else if (stabs[m].n_value > addr) {
f010d8dd:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010d8e0:	89 d0                	mov    %edx,%eax
f010d8e2:	01 c0                	add    %eax,%eax
f010d8e4:	01 d0                	add    %edx,%eax
f010d8e6:	c1 e0 02             	shl    $0x2,%eax
f010d8e9:	89 c2                	mov    %eax,%edx
f010d8eb:	8b 45 08             	mov    0x8(%ebp),%eax
f010d8ee:	01 d0                	add    %edx,%eax
f010d8f0:	8b 40 08             	mov    0x8(%eax),%eax
f010d8f3:	3b 45 18             	cmp    0x18(%ebp),%eax
f010d8f6:	76 14                	jbe    f010d90c <stab_binsearch+0xda>
			*region_right = m - 1;
f010d8f8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d8fb:	8d 50 ff             	lea    -0x1(%eax),%edx
f010d8fe:	8b 45 10             	mov    0x10(%ebp),%eax
f010d901:	89 10                	mov    %edx,(%eax)
			r = m - 1;
f010d903:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d906:	48                   	dec    %eax
f010d907:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010d90a:	eb 12                	jmp    f010d91e <stab_binsearch+0xec>
		} else {
			// exact match for 'addr', but continue loop to find
			// *region_right
			*region_left = m;
f010d90c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d90f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010d912:	89 10                	mov    %edx,(%eax)
			l = m;
f010d914:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d917:	89 45 fc             	mov    %eax,-0x4(%ebp)
			addr++;
f010d91a:	83 45 18 04          	addl   $0x4,0x18(%ebp)
stab_binsearch(const struct Stab *stabs, int *region_left, int *region_right,
	       int type, uint32*  addr)
{
	int l = *region_left, r = *region_right, any_matches = 0;

	while (l <= r) {
f010d91e:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010d921:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f010d924:	0f 8e 2a ff ff ff    	jle    f010d854 <stab_binsearch+0x22>
			l = m;
			addr++;
		}
	}

	if (!any_matches)
f010d92a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d92e:	75 0f                	jne    f010d93f <stab_binsearch+0x10d>
		*region_right = *region_left - 1;
f010d930:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d933:	8b 00                	mov    (%eax),%eax
f010d935:	8d 50 ff             	lea    -0x1(%eax),%edx
f010d938:	8b 45 10             	mov    0x10(%ebp),%eax
f010d93b:	89 10                	mov    %edx,(%eax)
		     l > *region_left && stabs[l].n_type != type;
		     l--)
			/* do nothing */;
		*region_left = l;
	}
}
f010d93d:	eb 3d                	jmp    f010d97c <stab_binsearch+0x14a>

	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
f010d93f:	8b 45 10             	mov    0x10(%ebp),%eax
f010d942:	8b 00                	mov    (%eax),%eax
f010d944:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010d947:	eb 03                	jmp    f010d94c <stab_binsearch+0x11a>
		     l > *region_left && stabs[l].n_type != type;
		     l--)
f010d949:	ff 4d fc             	decl   -0x4(%ebp)
	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
		     l > *region_left && stabs[l].n_type != type;
f010d94c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d94f:	8b 00                	mov    (%eax),%eax

	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
f010d951:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010d954:	7d 1e                	jge    f010d974 <stab_binsearch+0x142>
		     l > *region_left && stabs[l].n_type != type;
f010d956:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010d959:	89 d0                	mov    %edx,%eax
f010d95b:	01 c0                	add    %eax,%eax
f010d95d:	01 d0                	add    %edx,%eax
f010d95f:	c1 e0 02             	shl    $0x2,%eax
f010d962:	89 c2                	mov    %eax,%edx
f010d964:	8b 45 08             	mov    0x8(%ebp),%eax
f010d967:	01 d0                	add    %edx,%eax
f010d969:	8a 40 04             	mov    0x4(%eax),%al
f010d96c:	0f b6 c0             	movzbl %al,%eax
f010d96f:	3b 45 14             	cmp    0x14(%ebp),%eax
f010d972:	75 d5                	jne    f010d949 <stab_binsearch+0x117>
		     l--)
			/* do nothing */;
		*region_left = l;
f010d974:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d977:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010d97a:	89 10                	mov    %edx,(%eax)
	}
}
f010d97c:	90                   	nop
f010d97d:	c9                   	leave  
f010d97e:	c3                   	ret    

f010d97f <debuginfo_eip>:
//	negative if not.  But even if it returns negative it has stored some
//	information into '*info'.
//
int
debuginfo_eip(uint32*  addr, struct Eipdebuginfo *info)
{
f010d97f:	55                   	push   %ebp
f010d980:	89 e5                	mov    %esp,%ebp
f010d982:	83 ec 38             	sub    $0x38,%esp
	const struct Stab *stabs, *stab_end;
	const char *stabstr, *stabstr_end;
	int lfile, rfile, lfun, rfun, lline, rline;

	// Initialize *info
	info->eip_file = "<unknown>";
f010d985:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d988:	c7 00 c4 3f 13 f0    	movl   $0xf0133fc4,(%eax)
	info->eip_line = 0;
f010d98e:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d991:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
	info->eip_fn_name = "<unknown>";
f010d998:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d99b:	c7 40 08 c4 3f 13 f0 	movl   $0xf0133fc4,0x8(%eax)
	info->eip_fn_namelen = 9;
f010d9a2:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d9a5:	c7 40 0c 09 00 00 00 	movl   $0x9,0xc(%eax)
	info->eip_fn_addr = addr;
f010d9ac:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d9af:	8b 55 08             	mov    0x8(%ebp),%edx
f010d9b2:	89 50 10             	mov    %edx,0x10(%eax)
	info->eip_fn_narg = 0;
f010d9b5:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d9b8:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)

	// Find the relevant set of stabs
	if ((uint32)addr >= USER_LIMIT) {
f010d9bf:	8b 45 08             	mov    0x8(%ebp),%eax
f010d9c2:	3d ff ff 7f ef       	cmp    $0xef7fffff,%eax
f010d9c7:	76 1e                	jbe    f010d9e7 <debuginfo_eip+0x68>
		stabs = __STAB_BEGIN__;
f010d9c9:	c7 45 f4 ac c0 13 f0 	movl   $0xf013c0ac,-0xc(%ebp)
		stab_end = __STAB_END__;
f010d9d0:	c7 45 f0 64 92 17 f0 	movl   $0xf0179264,-0x10(%ebp)
		stabstr = __STABSTR_BEGIN__;
f010d9d7:	c7 45 ec 65 92 17 f0 	movl   $0xf0179265,-0x14(%ebp)
		stabstr_end = __STABSTR_END__;
f010d9de:	c7 45 e8 55 67 18 f0 	movl   $0xf0186755,-0x18(%ebp)
f010d9e5:	eb 2a                	jmp    f010da11 <debuginfo_eip+0x92>
		// The user-application linker script, user/user.ld,
		// puts information about the application's stabs (equivalent
		// to __STAB_BEGIN__, __STAB_END__, __STABSTR_BEGIN__, and
		// __STABSTR_END__) in a structure located at virtual address
		// USTABDATA.
		const struct UserStabData *usd = (const struct UserStabData *) USTABDATA;
f010d9e7:	c7 45 e0 00 00 20 00 	movl   $0x200000,-0x20(%ebp)

		// Make sure this memory is valid.
		// Return -1 if it is not.  Hint: Call user_mem_check.
		// LAB 3: Your code here.

		stabs = usd->stabs;
f010d9ee:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010d9f1:	8b 00                	mov    (%eax),%eax
f010d9f3:	89 45 f4             	mov    %eax,-0xc(%ebp)
		stab_end = usd->stab_end;
f010d9f6:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010d9f9:	8b 40 04             	mov    0x4(%eax),%eax
f010d9fc:	89 45 f0             	mov    %eax,-0x10(%ebp)
		stabstr = usd->stabstr;
f010d9ff:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010da02:	8b 40 08             	mov    0x8(%eax),%eax
f010da05:	89 45 ec             	mov    %eax,-0x14(%ebp)
		stabstr_end = usd->stabstr_end;
f010da08:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010da0b:	8b 40 0c             	mov    0xc(%eax),%eax
f010da0e:	89 45 e8             	mov    %eax,-0x18(%ebp)
		// Make sure the STABS and string table memory is valid.
		// LAB 3: Your code here.
	}

	// String table validity checks
	if (stabstr_end <= stabstr || stabstr_end[-1] != 0)
f010da11:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010da14:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010da17:	76 0a                	jbe    f010da23 <debuginfo_eip+0xa4>
f010da19:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010da1c:	48                   	dec    %eax
f010da1d:	8a 00                	mov    (%eax),%al
f010da1f:	84 c0                	test   %al,%al
f010da21:	74 0a                	je     f010da2d <debuginfo_eip+0xae>
		return -1;
f010da23:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f010da28:	e9 01 02 00 00       	jmp    f010dc2e <debuginfo_eip+0x2af>
	// 'eip'.  First, we find the basic source file containing 'eip'.
	// Then, we look in that source file for the function.  Then we look
	// for the line number.

	// Search the entire set of stabs for the source file (type N_SO).
	lfile = 0;
f010da2d:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	rfile = (stab_end - stabs) - 1;
f010da34:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010da37:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010da3a:	29 c2                	sub    %eax,%edx
f010da3c:	89 d0                	mov    %edx,%eax
f010da3e:	c1 f8 02             	sar    $0x2,%eax
f010da41:	89 c2                	mov    %eax,%edx
f010da43:	89 d0                	mov    %edx,%eax
f010da45:	c1 e0 02             	shl    $0x2,%eax
f010da48:	01 d0                	add    %edx,%eax
f010da4a:	c1 e0 02             	shl    $0x2,%eax
f010da4d:	01 d0                	add    %edx,%eax
f010da4f:	c1 e0 02             	shl    $0x2,%eax
f010da52:	01 d0                	add    %edx,%eax
f010da54:	89 c1                	mov    %eax,%ecx
f010da56:	c1 e1 08             	shl    $0x8,%ecx
f010da59:	01 c8                	add    %ecx,%eax
f010da5b:	89 c1                	mov    %eax,%ecx
f010da5d:	c1 e1 10             	shl    $0x10,%ecx
f010da60:	01 c8                	add    %ecx,%eax
f010da62:	01 c0                	add    %eax,%eax
f010da64:	01 d0                	add    %edx,%eax
f010da66:	48                   	dec    %eax
f010da67:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	stab_binsearch(stabs, &lfile, &rfile, N_SO, addr);
f010da6a:	ff 75 08             	pushl  0x8(%ebp)
f010da6d:	6a 64                	push   $0x64
f010da6f:	8d 45 d4             	lea    -0x2c(%ebp),%eax
f010da72:	50                   	push   %eax
f010da73:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010da76:	50                   	push   %eax
f010da77:	ff 75 f4             	pushl  -0xc(%ebp)
f010da7a:	e8 b3 fd ff ff       	call   f010d832 <stab_binsearch>
f010da7f:	83 c4 14             	add    $0x14,%esp
	if (lfile == 0)
f010da82:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010da85:	85 c0                	test   %eax,%eax
f010da87:	75 0a                	jne    f010da93 <debuginfo_eip+0x114>
		return -1;
f010da89:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f010da8e:	e9 9b 01 00 00       	jmp    f010dc2e <debuginfo_eip+0x2af>

	// Search within that file's stabs for the function definition
	// (N_FUN).
	lfun = lfile;
f010da93:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010da96:	89 45 d0             	mov    %eax,-0x30(%ebp)
	rfun = rfile;
f010da99:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010da9c:	89 45 cc             	mov    %eax,-0x34(%ebp)
	stab_binsearch(stabs, &lfun, &rfun, N_FUN, addr);
f010da9f:	ff 75 08             	pushl  0x8(%ebp)
f010daa2:	6a 24                	push   $0x24
f010daa4:	8d 45 cc             	lea    -0x34(%ebp),%eax
f010daa7:	50                   	push   %eax
f010daa8:	8d 45 d0             	lea    -0x30(%ebp),%eax
f010daab:	50                   	push   %eax
f010daac:	ff 75 f4             	pushl  -0xc(%ebp)
f010daaf:	e8 7e fd ff ff       	call   f010d832 <stab_binsearch>
f010dab4:	83 c4 14             	add    $0x14,%esp

	if (lfun <= rfun) {
f010dab7:	8b 55 d0             	mov    -0x30(%ebp),%edx
f010daba:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010dabd:	39 c2                	cmp    %eax,%edx
f010dabf:	0f 8f 86 00 00 00    	jg     f010db4b <debuginfo_eip+0x1cc>
		// stabs[lfun] points to the function name
		// in the string table, but check bounds just in case.
		if (stabs[lfun].n_strx < stabstr_end - stabstr)
f010dac5:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010dac8:	89 c2                	mov    %eax,%edx
f010daca:	89 d0                	mov    %edx,%eax
f010dacc:	01 c0                	add    %eax,%eax
f010dace:	01 d0                	add    %edx,%eax
f010dad0:	c1 e0 02             	shl    $0x2,%eax
f010dad3:	89 c2                	mov    %eax,%edx
f010dad5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010dad8:	01 d0                	add    %edx,%eax
f010dada:	8b 00                	mov    (%eax),%eax
f010dadc:	8b 4d e8             	mov    -0x18(%ebp),%ecx
f010dadf:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010dae2:	29 d1                	sub    %edx,%ecx
f010dae4:	89 ca                	mov    %ecx,%edx
f010dae6:	39 d0                	cmp    %edx,%eax
f010dae8:	73 22                	jae    f010db0c <debuginfo_eip+0x18d>
			info->eip_fn_name = stabstr + stabs[lfun].n_strx;
f010daea:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010daed:	89 c2                	mov    %eax,%edx
f010daef:	89 d0                	mov    %edx,%eax
f010daf1:	01 c0                	add    %eax,%eax
f010daf3:	01 d0                	add    %edx,%eax
f010daf5:	c1 e0 02             	shl    $0x2,%eax
f010daf8:	89 c2                	mov    %eax,%edx
f010dafa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010dafd:	01 d0                	add    %edx,%eax
f010daff:	8b 10                	mov    (%eax),%edx
f010db01:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010db04:	01 c2                	add    %eax,%edx
f010db06:	8b 45 0c             	mov    0xc(%ebp),%eax
f010db09:	89 50 08             	mov    %edx,0x8(%eax)
		info->eip_fn_addr = (uint32*) stabs[lfun].n_value;
f010db0c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010db0f:	89 c2                	mov    %eax,%edx
f010db11:	89 d0                	mov    %edx,%eax
f010db13:	01 c0                	add    %eax,%eax
f010db15:	01 d0                	add    %edx,%eax
f010db17:	c1 e0 02             	shl    $0x2,%eax
f010db1a:	89 c2                	mov    %eax,%edx
f010db1c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010db1f:	01 d0                	add    %edx,%eax
f010db21:	8b 50 08             	mov    0x8(%eax),%edx
f010db24:	8b 45 0c             	mov    0xc(%ebp),%eax
f010db27:	89 50 10             	mov    %edx,0x10(%eax)
		addr = (uint32*)(addr - (info->eip_fn_addr));
f010db2a:	8b 55 08             	mov    0x8(%ebp),%edx
f010db2d:	8b 45 0c             	mov    0xc(%ebp),%eax
f010db30:	8b 40 10             	mov    0x10(%eax),%eax
f010db33:	29 c2                	sub    %eax,%edx
f010db35:	89 d0                	mov    %edx,%eax
f010db37:	c1 f8 02             	sar    $0x2,%eax
f010db3a:	89 45 08             	mov    %eax,0x8(%ebp)
		// Search within the function definition for the line number.
		lline = lfun;
f010db3d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010db40:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		rline = rfun;
f010db43:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010db46:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010db49:	eb 15                	jmp    f010db60 <debuginfo_eip+0x1e1>
	} else {
		// Couldn't find function stab!  Maybe we're in an assembly
		// file.  Search the whole file for the line number.
		info->eip_fn_addr = addr;
f010db4b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010db4e:	8b 55 08             	mov    0x8(%ebp),%edx
f010db51:	89 50 10             	mov    %edx,0x10(%eax)
		lline = lfile;
f010db54:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010db57:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		rline = rfile;
f010db5a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010db5d:	89 45 dc             	mov    %eax,-0x24(%ebp)
	}
	// Ignore stuff after the colon.
	info->eip_fn_namelen = strfind(info->eip_fn_name, ':') - info->eip_fn_name;
f010db60:	8b 45 0c             	mov    0xc(%ebp),%eax
f010db63:	8b 40 08             	mov    0x8(%eax),%eax
f010db66:	83 ec 08             	sub    $0x8,%esp
f010db69:	6a 3a                	push   $0x3a
f010db6b:	50                   	push   %eax
f010db6c:	e8 c9 1a 02 00       	call   f012f63a <strfind>
f010db71:	83 c4 10             	add    $0x10,%esp
f010db74:	89 c2                	mov    %eax,%edx
f010db76:	8b 45 0c             	mov    0xc(%ebp),%eax
f010db79:	8b 40 08             	mov    0x8(%eax),%eax
f010db7c:	29 c2                	sub    %eax,%edx
f010db7e:	8b 45 0c             	mov    0xc(%ebp),%eax
f010db81:	89 50 0c             	mov    %edx,0xc(%eax)
	// Search backwards from the line number for the relevant filename
	// stab.
	// We can't just use the "lfile" stab because inlined functions
	// can interpolate code from a different file!
	// Such included source files use the N_SOL stab type.
	while (lline >= lfile
f010db84:	eb 03                	jmp    f010db89 <debuginfo_eip+0x20a>
	       && stabs[lline].n_type != N_SOL
	       && (stabs[lline].n_type != N_SO || !stabs[lline].n_value))
		lline--;
f010db86:	ff 4d e4             	decl   -0x1c(%ebp)
	// Search backwards from the line number for the relevant filename
	// stab.
	// We can't just use the "lfile" stab because inlined functions
	// can interpolate code from a different file!
	// Such included source files use the N_SOL stab type.
	while (lline >= lfile
f010db89:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010db8c:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f010db8f:	7c 4e                	jl     f010dbdf <debuginfo_eip+0x260>
	       && stabs[lline].n_type != N_SOL
f010db91:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010db94:	89 d0                	mov    %edx,%eax
f010db96:	01 c0                	add    %eax,%eax
f010db98:	01 d0                	add    %edx,%eax
f010db9a:	c1 e0 02             	shl    $0x2,%eax
f010db9d:	89 c2                	mov    %eax,%edx
f010db9f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010dba2:	01 d0                	add    %edx,%eax
f010dba4:	8a 40 04             	mov    0x4(%eax),%al
f010dba7:	3c 84                	cmp    $0x84,%al
f010dba9:	74 34                	je     f010dbdf <debuginfo_eip+0x260>
	       && (stabs[lline].n_type != N_SO || !stabs[lline].n_value))
f010dbab:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010dbae:	89 d0                	mov    %edx,%eax
f010dbb0:	01 c0                	add    %eax,%eax
f010dbb2:	01 d0                	add    %edx,%eax
f010dbb4:	c1 e0 02             	shl    $0x2,%eax
f010dbb7:	89 c2                	mov    %eax,%edx
f010dbb9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010dbbc:	01 d0                	add    %edx,%eax
f010dbbe:	8a 40 04             	mov    0x4(%eax),%al
f010dbc1:	3c 64                	cmp    $0x64,%al
f010dbc3:	75 c1                	jne    f010db86 <debuginfo_eip+0x207>
f010dbc5:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010dbc8:	89 d0                	mov    %edx,%eax
f010dbca:	01 c0                	add    %eax,%eax
f010dbcc:	01 d0                	add    %edx,%eax
f010dbce:	c1 e0 02             	shl    $0x2,%eax
f010dbd1:	89 c2                	mov    %eax,%edx
f010dbd3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010dbd6:	01 d0                	add    %edx,%eax
f010dbd8:	8b 40 08             	mov    0x8(%eax),%eax
f010dbdb:	85 c0                	test   %eax,%eax
f010dbdd:	74 a7                	je     f010db86 <debuginfo_eip+0x207>
		lline--;
	if (lline >= lfile && stabs[lline].n_strx < stabstr_end - stabstr)
f010dbdf:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010dbe2:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f010dbe5:	7c 42                	jl     f010dc29 <debuginfo_eip+0x2aa>
f010dbe7:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010dbea:	89 d0                	mov    %edx,%eax
f010dbec:	01 c0                	add    %eax,%eax
f010dbee:	01 d0                	add    %edx,%eax
f010dbf0:	c1 e0 02             	shl    $0x2,%eax
f010dbf3:	89 c2                	mov    %eax,%edx
f010dbf5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010dbf8:	01 d0                	add    %edx,%eax
f010dbfa:	8b 00                	mov    (%eax),%eax
f010dbfc:	8b 4d e8             	mov    -0x18(%ebp),%ecx
f010dbff:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010dc02:	29 d1                	sub    %edx,%ecx
f010dc04:	89 ca                	mov    %ecx,%edx
f010dc06:	39 d0                	cmp    %edx,%eax
f010dc08:	73 1f                	jae    f010dc29 <debuginfo_eip+0x2aa>
		info->eip_file = stabstr + stabs[lline].n_strx;
f010dc0a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010dc0d:	89 d0                	mov    %edx,%eax
f010dc0f:	01 c0                	add    %eax,%eax
f010dc11:	01 d0                	add    %edx,%eax
f010dc13:	c1 e0 02             	shl    $0x2,%eax
f010dc16:	89 c2                	mov    %eax,%edx
f010dc18:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010dc1b:	01 d0                	add    %edx,%eax
f010dc1d:	8b 10                	mov    (%eax),%edx
f010dc1f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010dc22:	01 c2                	add    %eax,%edx
f010dc24:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dc27:	89 10                	mov    %edx,(%eax)
	// Set eip_fn_narg to the number of arguments taken by the function,
	// or 0 if there was no containing function.
	// Your code here.


	return 0;
f010dc29:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010dc2e:	c9                   	leave  
f010dc2f:	c3                   	ret    

f010dc30 <setPageReplacmentAlgorithmLRU>:
//===============================
// REPLACEMENT STRATEGIES
//===============================
//2020
void setPageReplacmentAlgorithmLRU(int LRU_TYPE)
{
f010dc30:	55                   	push   %ebp
f010dc31:	89 e5                	mov    %esp,%ebp
f010dc33:	83 ec 08             	sub    $0x8,%esp
	assert(LRU_TYPE == PG_REP_LRU_TIME_APPROX || LRU_TYPE == PG_REP_LRU_LISTS_APPROX);
f010dc36:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f010dc3a:	74 1c                	je     f010dc58 <setPageReplacmentAlgorithmLRU+0x28>
f010dc3c:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010dc40:	74 16                	je     f010dc58 <setPageReplacmentAlgorithmLRU+0x28>
f010dc42:	68 d0 3f 13 f0       	push   $0xf0133fd0
f010dc47:	68 1a 40 13 f0       	push   $0xf013401a
f010dc4c:	6a 18                	push   $0x18
f010dc4e:	68 2f 40 13 f0       	push   $0xf013402f
f010dc53:	e8 58 25 ff ff       	call   f01001b0 <_panic>
	_PageRepAlgoType = LRU_TYPE ;
f010dc58:	8b 45 08             	mov    0x8(%ebp),%eax
f010dc5b:	a3 4c ce 2b f0       	mov    %eax,0xf02bce4c
}
f010dc60:	90                   	nop
f010dc61:	c9                   	leave  
f010dc62:	c3                   	ret    

f010dc63 <setPageReplacmentAlgorithmCLOCK>:
void setPageReplacmentAlgorithmCLOCK(){_PageRepAlgoType = PG_REP_CLOCK;}
f010dc63:	55                   	push   %ebp
f010dc64:	89 e5                	mov    %esp,%ebp
f010dc66:	c7 05 4c ce 2b f0 03 	movl   $0x3,0xf02bce4c
f010dc6d:	00 00 00 
f010dc70:	90                   	nop
f010dc71:	5d                   	pop    %ebp
f010dc72:	c3                   	ret    

f010dc73 <setPageReplacmentAlgorithmFIFO>:
void setPageReplacmentAlgorithmFIFO(){_PageRepAlgoType = PG_REP_FIFO;}
f010dc73:	55                   	push   %ebp
f010dc74:	89 e5                	mov    %esp,%ebp
f010dc76:	c7 05 4c ce 2b f0 04 	movl   $0x4,0xf02bce4c
f010dc7d:	00 00 00 
f010dc80:	90                   	nop
f010dc81:	5d                   	pop    %ebp
f010dc82:	c3                   	ret    

f010dc83 <setPageReplacmentAlgorithmModifiedCLOCK>:
void setPageReplacmentAlgorithmModifiedCLOCK(){_PageRepAlgoType = PG_REP_MODIFIEDCLOCK;}
f010dc83:	55                   	push   %ebp
f010dc84:	89 e5                	mov    %esp,%ebp
f010dc86:	c7 05 4c ce 2b f0 05 	movl   $0x5,0xf02bce4c
f010dc8d:	00 00 00 
f010dc90:	90                   	nop
f010dc91:	5d                   	pop    %ebp
f010dc92:	c3                   	ret    

f010dc93 <setPageReplacmentAlgorithmDynamicLocal>:
/*2018*/ void setPageReplacmentAlgorithmDynamicLocal(){_PageRepAlgoType = PG_REP_DYNAMIC_LOCAL;}
f010dc93:	55                   	push   %ebp
f010dc94:	89 e5                	mov    %esp,%ebp
f010dc96:	c7 05 4c ce 2b f0 07 	movl   $0x7,0xf02bce4c
f010dc9d:	00 00 00 
f010dca0:	90                   	nop
f010dca1:	5d                   	pop    %ebp
f010dca2:	c3                   	ret    

f010dca3 <setPageReplacmentAlgorithmNchanceCLOCK>:
/*2021*/ void setPageReplacmentAlgorithmNchanceCLOCK(int PageWSMaxSweeps){_PageRepAlgoType = PG_REP_NchanceCLOCK;  page_WS_max_sweeps = PageWSMaxSweeps;}
f010dca3:	55                   	push   %ebp
f010dca4:	89 e5                	mov    %esp,%ebp
f010dca6:	c7 05 4c ce 2b f0 06 	movl   $0x6,0xf02bce4c
f010dcad:	00 00 00 
f010dcb0:	8b 45 08             	mov    0x8(%ebp),%eax
f010dcb3:	a3 5c 4a 25 f0       	mov    %eax,0xf0254a5c
f010dcb8:	90                   	nop
f010dcb9:	5d                   	pop    %ebp
f010dcba:	c3                   	ret    

f010dcbb <isPageReplacmentAlgorithmLRU>:

//2020
uint32 isPageReplacmentAlgorithmLRU(int LRU_TYPE){return _PageRepAlgoType == LRU_TYPE ? 1 : 0;}
f010dcbb:	55                   	push   %ebp
f010dcbc:	89 e5                	mov    %esp,%ebp
f010dcbe:	8b 15 4c ce 2b f0    	mov    0xf02bce4c,%edx
f010dcc4:	8b 45 08             	mov    0x8(%ebp),%eax
f010dcc7:	39 c2                	cmp    %eax,%edx
f010dcc9:	0f 94 c0             	sete   %al
f010dccc:	0f b6 c0             	movzbl %al,%eax
f010dccf:	5d                   	pop    %ebp
f010dcd0:	c3                   	ret    

f010dcd1 <isPageReplacmentAlgorithmCLOCK>:
uint32 isPageReplacmentAlgorithmCLOCK(){if(_PageRepAlgoType == PG_REP_CLOCK) return 1; return 0;}
f010dcd1:	55                   	push   %ebp
f010dcd2:	89 e5                	mov    %esp,%ebp
f010dcd4:	a1 4c ce 2b f0       	mov    0xf02bce4c,%eax
f010dcd9:	83 f8 03             	cmp    $0x3,%eax
f010dcdc:	75 07                	jne    f010dce5 <isPageReplacmentAlgorithmCLOCK+0x14>
f010dcde:	b8 01 00 00 00       	mov    $0x1,%eax
f010dce3:	eb 05                	jmp    f010dcea <isPageReplacmentAlgorithmCLOCK+0x19>
f010dce5:	b8 00 00 00 00       	mov    $0x0,%eax
f010dcea:	5d                   	pop    %ebp
f010dceb:	c3                   	ret    

f010dcec <isPageReplacmentAlgorithmFIFO>:
uint32 isPageReplacmentAlgorithmFIFO(){if(_PageRepAlgoType == PG_REP_FIFO) return 1; return 0;}
f010dcec:	55                   	push   %ebp
f010dced:	89 e5                	mov    %esp,%ebp
f010dcef:	a1 4c ce 2b f0       	mov    0xf02bce4c,%eax
f010dcf4:	83 f8 04             	cmp    $0x4,%eax
f010dcf7:	75 07                	jne    f010dd00 <isPageReplacmentAlgorithmFIFO+0x14>
f010dcf9:	b8 01 00 00 00       	mov    $0x1,%eax
f010dcfe:	eb 05                	jmp    f010dd05 <isPageReplacmentAlgorithmFIFO+0x19>
f010dd00:	b8 00 00 00 00       	mov    $0x0,%eax
f010dd05:	5d                   	pop    %ebp
f010dd06:	c3                   	ret    

f010dd07 <isPageReplacmentAlgorithmModifiedCLOCK>:
uint32 isPageReplacmentAlgorithmModifiedCLOCK(){if(_PageRepAlgoType == PG_REP_MODIFIEDCLOCK) return 1; return 0;}
f010dd07:	55                   	push   %ebp
f010dd08:	89 e5                	mov    %esp,%ebp
f010dd0a:	a1 4c ce 2b f0       	mov    0xf02bce4c,%eax
f010dd0f:	83 f8 05             	cmp    $0x5,%eax
f010dd12:	75 07                	jne    f010dd1b <isPageReplacmentAlgorithmModifiedCLOCK+0x14>
f010dd14:	b8 01 00 00 00       	mov    $0x1,%eax
f010dd19:	eb 05                	jmp    f010dd20 <isPageReplacmentAlgorithmModifiedCLOCK+0x19>
f010dd1b:	b8 00 00 00 00       	mov    $0x0,%eax
f010dd20:	5d                   	pop    %ebp
f010dd21:	c3                   	ret    

f010dd22 <isPageReplacmentAlgorithmDynamicLocal>:
/*2018*/ uint32 isPageReplacmentAlgorithmDynamicLocal(){if(_PageRepAlgoType == PG_REP_DYNAMIC_LOCAL) return 1; return 0;}
f010dd22:	55                   	push   %ebp
f010dd23:	89 e5                	mov    %esp,%ebp
f010dd25:	a1 4c ce 2b f0       	mov    0xf02bce4c,%eax
f010dd2a:	83 f8 07             	cmp    $0x7,%eax
f010dd2d:	75 07                	jne    f010dd36 <isPageReplacmentAlgorithmDynamicLocal+0x14>
f010dd2f:	b8 01 00 00 00       	mov    $0x1,%eax
f010dd34:	eb 05                	jmp    f010dd3b <isPageReplacmentAlgorithmDynamicLocal+0x19>
f010dd36:	b8 00 00 00 00       	mov    $0x0,%eax
f010dd3b:	5d                   	pop    %ebp
f010dd3c:	c3                   	ret    

f010dd3d <isPageReplacmentAlgorithmNchanceCLOCK>:
/*2021*/ uint32 isPageReplacmentAlgorithmNchanceCLOCK(){if(_PageRepAlgoType == PG_REP_NchanceCLOCK) return 1; return 0;}
f010dd3d:	55                   	push   %ebp
f010dd3e:	89 e5                	mov    %esp,%ebp
f010dd40:	a1 4c ce 2b f0       	mov    0xf02bce4c,%eax
f010dd45:	83 f8 06             	cmp    $0x6,%eax
f010dd48:	75 07                	jne    f010dd51 <isPageReplacmentAlgorithmNchanceCLOCK+0x14>
f010dd4a:	b8 01 00 00 00       	mov    $0x1,%eax
f010dd4f:	eb 05                	jmp    f010dd56 <isPageReplacmentAlgorithmNchanceCLOCK+0x19>
f010dd51:	b8 00 00 00 00       	mov    $0x0,%eax
f010dd56:	5d                   	pop    %ebp
f010dd57:	c3                   	ret    

f010dd58 <enableModifiedBuffer>:

//===============================
// PAGE BUFFERING
//===============================
void enableModifiedBuffer(uint32 enableIt){_EnableModifiedBuffer = enableIt;}
f010dd58:	55                   	push   %ebp
f010dd59:	89 e5                	mov    %esp,%ebp
f010dd5b:	8b 45 08             	mov    0x8(%ebp),%eax
f010dd5e:	a3 0c ce 2b f0       	mov    %eax,0xf02bce0c
f010dd63:	90                   	nop
f010dd64:	5d                   	pop    %ebp
f010dd65:	c3                   	ret    

f010dd66 <isModifiedBufferEnabled>:
uint8 isModifiedBufferEnabled(){  return _EnableModifiedBuffer ; }
f010dd66:	55                   	push   %ebp
f010dd67:	89 e5                	mov    %esp,%ebp
f010dd69:	a1 0c ce 2b f0       	mov    0xf02bce0c,%eax
f010dd6e:	5d                   	pop    %ebp
f010dd6f:	c3                   	ret    

f010dd70 <enableBuffering>:

void enableBuffering(uint32 enableIt){_EnableBuffering = enableIt;}
f010dd70:	55                   	push   %ebp
f010dd71:	89 e5                	mov    %esp,%ebp
f010dd73:	8b 45 08             	mov    0x8(%ebp),%eax
f010dd76:	a3 64 ce 2b f0       	mov    %eax,0xf02bce64
f010dd7b:	90                   	nop
f010dd7c:	5d                   	pop    %ebp
f010dd7d:	c3                   	ret    

f010dd7e <isBufferingEnabled>:
uint8 isBufferingEnabled(){  return _EnableBuffering ; }
f010dd7e:	55                   	push   %ebp
f010dd7f:	89 e5                	mov    %esp,%ebp
f010dd81:	a1 64 ce 2b f0       	mov    0xf02bce64,%eax
f010dd86:	5d                   	pop    %ebp
f010dd87:	c3                   	ret    

f010dd88 <setModifiedBufferLength>:

void setModifiedBufferLength(uint32 length) { _ModifiedBufferLength = length;}
f010dd88:	55                   	push   %ebp
f010dd89:	89 e5                	mov    %esp,%ebp
f010dd8b:	8b 45 08             	mov    0x8(%ebp),%eax
f010dd8e:	a3 74 ce 2b f0       	mov    %eax,0xf02bce74
f010dd93:	90                   	nop
f010dd94:	5d                   	pop    %ebp
f010dd95:	c3                   	ret    

f010dd96 <getModifiedBufferLength>:
uint32 getModifiedBufferLength() { return _ModifiedBufferLength;}
f010dd96:	55                   	push   %ebp
f010dd97:	89 e5                	mov    %esp,%ebp
f010dd99:	a1 74 ce 2b f0       	mov    0xf02bce74,%eax
f010dd9e:	5d                   	pop    %ebp
f010dd9f:	c3                   	ret    

f010dda0 <table_fault_handler>:
// FAULT HANDLERS
//===============================

//Handle the table fault
void table_fault_handler(struct Env * curenv, uint32 fault_va)
{
f010dda0:	55                   	push   %ebp
f010dda1:	89 e5                	mov    %esp,%ebp
f010dda3:	83 ec 18             	sub    $0x18,%esp
	{
		ptr_table = create_page_table(curenv->env_page_directory, (uint32)fault_va);
	}
#else
	{
		__static_cpt(curenv->env_page_directory, (uint32)fault_va, &ptr_table);
f010dda6:	8b 45 08             	mov    0x8(%ebp),%eax
f010dda9:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f010ddaf:	83 ec 04             	sub    $0x4,%esp
f010ddb2:	8d 55 f4             	lea    -0xc(%ebp),%edx
f010ddb5:	52                   	push   %edx
f010ddb6:	ff 75 0c             	pushl  0xc(%ebp)
f010ddb9:	50                   	push   %eax
f010ddba:	e8 4e 98 ff ff       	call   f010760d <__static_cpt>
f010ddbf:	83 c4 10             	add    $0x10,%esp
	}
#endif
}
f010ddc2:	90                   	nop
f010ddc3:	c9                   	leave  
f010ddc4:	c3                   	ret    

f010ddc5 <page_fault_handler>:

//Handle the page fault

void page_fault_handler(struct Env * curenv, uint32 fault_va)
{
f010ddc5:	55                   	push   %ebp
f010ddc6:	89 e5                	mov    %esp,%ebp
f010ddc8:	83 ec 18             	sub    $0x18,%esp
	uint32 wsSize = env_page_ws_get_size(curenv);
f010ddcb:	83 ec 0c             	sub    $0xc,%esp
f010ddce:	ff 75 08             	pushl  0x8(%ebp)
f010ddd1:	e8 f6 a8 ff ff       	call   f01086cc <env_page_ws_get_size>
f010ddd6:	83 c4 10             	add    $0x10,%esp
f010ddd9:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if(wsSize < (curenv->page_WS_max_size))
f010dddc:	8b 45 08             	mov    0x8(%ebp),%eax
f010dddf:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f010dde5:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010dde8:	76 14                	jbe    f010ddfe <page_fault_handler+0x39>
	{
		//cprintf("PLACEMENT=========================WS Size = %d\n", wsSize );
		//TODO: [PROJECT'23.MS2 - #15] [3] PAGE FAULT HANDLER - Placement
		// Write your code here, remove the panic and write your code
		panic("page_fault_handler().PLACEMENT is not implemented yet...!!");
f010ddea:	83 ec 04             	sub    $0x4,%esp
f010dded:	68 4c 40 13 f0       	push   $0xf013404c
f010ddf2:	6a 55                	push   $0x55
f010ddf4:	68 2f 40 13 f0       	push   $0xf013402f
f010ddf9:	e8 b2 23 ff ff       	call   f01001b0 <_panic>
	}
	else
	{
		//cprintf("REPLACEMENT=========================WS Size = %d\n", wsSize );
		//refer to the project presentation and documentation for details
		if(isPageReplacmentAlgorithmFIFO())
f010ddfe:	e8 e9 fe ff ff       	call   f010dcec <isPageReplacmentAlgorithmFIFO>
f010de03:	85 c0                	test   %eax,%eax
f010de05:	74 14                	je     f010de1b <page_fault_handler+0x56>
		{
			//TODO: [PROJECT'23.MS3 - #1] [1] PAGE FAULT HANDLER - FIFO Replacement
			// Write your code here, remove the panic and write your code
			panic("page_fault_handler() FIFO Replacement is not implemented yet...!!");
f010de07:	83 ec 04             	sub    $0x4,%esp
f010de0a:	68 88 40 13 f0       	push   $0xf0134088
f010de0f:	6a 61                	push   $0x61
f010de11:	68 2f 40 13 f0       	push   $0xf013402f
f010de16:	e8 95 23 ff ff       	call   f01001b0 <_panic>
		}
		if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f010de1b:	83 ec 0c             	sub    $0xc,%esp
f010de1e:	6a 02                	push   $0x2
f010de20:	e8 96 fe ff ff       	call   f010dcbb <isPageReplacmentAlgorithmLRU>
f010de25:	83 c4 10             	add    $0x10,%esp
f010de28:	85 c0                	test   %eax,%eax
f010de2a:	74 14                	je     f010de40 <page_fault_handler+0x7b>
		{
			//TODO: [PROJECT'23.MS3 - #2] [1] PAGE FAULT HANDLER - LRU Replacement
			// Write your code here, remove the panic and write your code
			panic("page_fault_handler() LRU Replacement is not implemented yet...!!");
f010de2c:	83 ec 04             	sub    $0x4,%esp
f010de2f:	68 cc 40 13 f0       	push   $0xf01340cc
f010de34:	6a 67                	push   $0x67
f010de36:	68 2f 40 13 f0       	push   $0xf013402f
f010de3b:	e8 70 23 ff ff       	call   f01001b0 <_panic>

			//TODO: [PROJECT'23.MS3 - BONUS] [1] PAGE FAULT HANDLER - O(1) implementation of LRU replacement
		}
	}
}
f010de40:	90                   	nop
f010de41:	c9                   	leave  
f010de42:	c3                   	ret    

f010de43 <__page_fault_handler_with_buffering>:

void __page_fault_handler_with_buffering(struct Env * curenv, uint32 fault_va)
{
f010de43:	55                   	push   %ebp
f010de44:	89 e5                	mov    %esp,%ebp
f010de46:	83 ec 08             	sub    $0x8,%esp
	panic("this function is not required...!!");
f010de49:	83 ec 04             	sub    $0x4,%esp
f010de4c:	68 10 41 13 f0       	push   $0xf0134110
f010de51:	6a 70                	push   $0x70
f010de53:	68 2f 40 13 f0       	push   $0xf013402f
f010de58:	e8 53 23 ff ff       	call   f01001b0 <_panic>

f010de5d <create_semaphores_array>:
// [1] Create "semaphores" array:
//===============================
//Dynamically allocate the "semaphores" array
//initialize the "semaphores" array by 0's and empty = 1
void create_semaphores_array(uint32 numOfSemaphores)
{
f010de5d:	55                   	push   %ebp
f010de5e:	89 e5                	mov    %esp,%ebp
f010de60:	83 ec 18             	sub    $0x18,%esp
	if (semaphores == NULL)
	{
		panic("Kernel runs out of memory\nCan't create the array of semaphores.");
	}
#endif
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010de63:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010de6a:	e9 aa 00 00 00       	jmp    f010df19 <create_semaphores_array+0xbc>
	{
		memset(&(semaphores[i]), 0, sizeof(struct Semaphore));
f010de6f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010de72:	89 d0                	mov    %edx,%eax
f010de74:	c1 e0 02             	shl    $0x2,%eax
f010de77:	01 d0                	add    %edx,%eax
f010de79:	01 c0                	add    %eax,%eax
f010de7b:	01 d0                	add    %edx,%eax
f010de7d:	01 c0                	add    %eax,%eax
f010de7f:	01 d0                	add    %edx,%eax
f010de81:	c1 e0 02             	shl    $0x2,%eax
f010de84:	05 e0 a9 2b f0       	add    $0xf02ba9e0,%eax
f010de89:	83 ec 04             	sub    $0x4,%esp
f010de8c:	6a 5c                	push   $0x5c
f010de8e:	6a 00                	push   $0x0
f010de90:	50                   	push   %eax
f010de91:	e8 d0 17 02 00       	call   f012f666 <memset>
f010de96:	83 c4 10             	add    $0x10,%esp
		semaphores[i].empty = 1;
f010de99:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010de9c:	89 d0                	mov    %edx,%eax
f010de9e:	c1 e0 02             	shl    $0x2,%eax
f010dea1:	01 d0                	add    %edx,%eax
f010dea3:	01 c0                	add    %eax,%eax
f010dea5:	01 d0                	add    %edx,%eax
f010dea7:	01 c0                	add    %eax,%eax
f010dea9:	01 d0                	add    %edx,%eax
f010deab:	c1 e0 02             	shl    $0x2,%eax
f010deae:	05 38 aa 2b f0       	add    $0xf02baa38,%eax
f010deb3:	c6 00 01             	movb   $0x1,(%eax)
		LIST_INIT(&(semaphores[i].env_queue));
f010deb6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010deb9:	89 d0                	mov    %edx,%eax
f010debb:	c1 e0 02             	shl    $0x2,%eax
f010debe:	01 d0                	add    %edx,%eax
f010dec0:	01 c0                	add    %eax,%eax
f010dec2:	01 d0                	add    %edx,%eax
f010dec4:	01 c0                	add    %eax,%eax
f010dec6:	01 d0                	add    %edx,%eax
f010dec8:	c1 e0 02             	shl    $0x2,%eax
f010decb:	05 24 aa 2b f0       	add    $0xf02baa24,%eax
f010ded0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010ded6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ded9:	89 d0                	mov    %edx,%eax
f010dedb:	c1 e0 02             	shl    $0x2,%eax
f010dede:	01 d0                	add    %edx,%eax
f010dee0:	01 c0                	add    %eax,%eax
f010dee2:	01 d0                	add    %edx,%eax
f010dee4:	01 c0                	add    %eax,%eax
f010dee6:	01 d0                	add    %edx,%eax
f010dee8:	c1 e0 02             	shl    $0x2,%eax
f010deeb:	05 28 aa 2b f0       	add    $0xf02baa28,%eax
f010def0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010def6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010def9:	89 d0                	mov    %edx,%eax
f010defb:	c1 e0 02             	shl    $0x2,%eax
f010defe:	01 d0                	add    %edx,%eax
f010df00:	01 c0                	add    %eax,%eax
f010df02:	01 d0                	add    %edx,%eax
f010df04:	01 c0                	add    %eax,%eax
f010df06:	01 d0                	add    %edx,%eax
f010df08:	c1 e0 02             	shl    $0x2,%eax
f010df0b:	05 30 aa 2b f0       	add    $0xf02baa30,%eax
f010df10:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	if (semaphores == NULL)
	{
		panic("Kernel runs out of memory\nCan't create the array of semaphores.");
	}
#endif
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010df16:	ff 45 f4             	incl   -0xc(%ebp)
f010df19:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
f010df1d:	0f 8e 4c ff ff ff    	jle    f010de6f <create_semaphores_array+0x12>
		memset(&(semaphores[i]), 0, sizeof(struct Semaphore));
		semaphores[i].empty = 1;
		LIST_INIT(&(semaphores[i].env_queue));
	}

}
f010df23:	90                   	nop
f010df24:	c9                   	leave  
f010df25:	c3                   	ret    

f010df26 <allocate_semaphore_object>:
//	a) if succeed:
//		1. allocatedSemaphore (pointer to struct Semaphore) passed by reference
//		2. SempahoreObjectID (its index in the array) as a return parameter
//	b) E_NO_SEMAPHORE if the the array of semaphores is full (i.e. reaches "MAX_SEMAPHORES")
int allocate_semaphore_object(struct Semaphore **allocatedObject)
{
f010df26:	55                   	push   %ebp
f010df27:	89 e5                	mov    %esp,%ebp
f010df29:	83 ec 10             	sub    $0x10,%esp
	int32 semaphoreObjectID = -1 ;
f010df2c:	c7 45 fc ff ff ff ff 	movl   $0xffffffff,-0x4(%ebp)
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010df33:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
f010df3a:	eb 2b                	jmp    f010df67 <allocate_semaphore_object+0x41>
	{
		if (semaphores[i].empty)
f010df3c:	8b 55 f8             	mov    -0x8(%ebp),%edx
f010df3f:	89 d0                	mov    %edx,%eax
f010df41:	c1 e0 02             	shl    $0x2,%eax
f010df44:	01 d0                	add    %edx,%eax
f010df46:	01 c0                	add    %eax,%eax
f010df48:	01 d0                	add    %edx,%eax
f010df4a:	01 c0                	add    %eax,%eax
f010df4c:	01 d0                	add    %edx,%eax
f010df4e:	c1 e0 02             	shl    $0x2,%eax
f010df51:	05 38 aa 2b f0       	add    $0xf02baa38,%eax
f010df56:	8a 00                	mov    (%eax),%al
f010df58:	84 c0                	test   %al,%al
f010df5a:	74 08                	je     f010df64 <allocate_semaphore_object+0x3e>
		{
			semaphoreObjectID = i;
f010df5c:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010df5f:	89 45 fc             	mov    %eax,-0x4(%ebp)
			break;
f010df62:	eb 09                	jmp    f010df6d <allocate_semaphore_object+0x47>
//		2. SempahoreObjectID (its index in the array) as a return parameter
//	b) E_NO_SEMAPHORE if the the array of semaphores is full (i.e. reaches "MAX_SEMAPHORES")
int allocate_semaphore_object(struct Semaphore **allocatedObject)
{
	int32 semaphoreObjectID = -1 ;
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010df64:	ff 45 f8             	incl   -0x8(%ebp)
f010df67:	83 7d f8 63          	cmpl   $0x63,-0x8(%ebp)
f010df6b:	7e cf                	jle    f010df3c <allocate_semaphore_object+0x16>
			semaphoreObjectID = i;
			break;
		}
	}

	if (semaphoreObjectID == -1)
f010df6d:	83 7d fc ff          	cmpl   $0xffffffff,-0x4(%ebp)
f010df71:	75 07                	jne    f010df7a <allocate_semaphore_object+0x54>
	{
		return E_NO_SEMAPHORE ;
f010df73:	b8 f5 ff ff ff       	mov    $0xfffffff5,%eax
f010df78:	eb 40                	jmp    f010dfba <allocate_semaphore_object+0x94>
//			return E_NO_SEMAPHORE;
//		}
//#endif
	}

	*allocatedObject = &(semaphores[semaphoreObjectID]);
f010df7a:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010df7d:	89 d0                	mov    %edx,%eax
f010df7f:	c1 e0 02             	shl    $0x2,%eax
f010df82:	01 d0                	add    %edx,%eax
f010df84:	01 c0                	add    %eax,%eax
f010df86:	01 d0                	add    %edx,%eax
f010df88:	01 c0                	add    %eax,%eax
f010df8a:	01 d0                	add    %edx,%eax
f010df8c:	c1 e0 02             	shl    $0x2,%eax
f010df8f:	8d 90 e0 a9 2b f0    	lea    -0xfd45620(%eax),%edx
f010df95:	8b 45 08             	mov    0x8(%ebp),%eax
f010df98:	89 10                	mov    %edx,(%eax)
	semaphores[semaphoreObjectID].empty = 0;
f010df9a:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010df9d:	89 d0                	mov    %edx,%eax
f010df9f:	c1 e0 02             	shl    $0x2,%eax
f010dfa2:	01 d0                	add    %edx,%eax
f010dfa4:	01 c0                	add    %eax,%eax
f010dfa6:	01 d0                	add    %edx,%eax
f010dfa8:	01 c0                	add    %eax,%eax
f010dfaa:	01 d0                	add    %edx,%eax
f010dfac:	c1 e0 02             	shl    $0x2,%eax
f010dfaf:	05 38 aa 2b f0       	add    $0xf02baa38,%eax
f010dfb4:	c6 00 00             	movb   $0x0,(%eax)

	return semaphoreObjectID;
f010dfb7:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f010dfba:	c9                   	leave  
f010dfbb:	c3                   	ret    

f010dfbc <get_semaphore_object_ID>:
//Search for the given semaphore object in the "semaphores" array
//Return:
//	a) if found: SemaphoreObjectID (index of the semaphore object in the array)
//	b) else: E_SEMAPHORE_NOT_EXISTS
int get_semaphore_object_ID(int32 ownerID, char* name)
{
f010dfbc:	55                   	push   %ebp
f010dfbd:	89 e5                	mov    %esp,%ebp
f010dfbf:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f010dfc2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(; i < MAX_SEMAPHORES; ++i)
f010dfc9:	eb 7a                	jmp    f010e045 <get_semaphore_object_ID+0x89>
	{
		if (semaphores[i].empty)
f010dfcb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010dfce:	89 d0                	mov    %edx,%eax
f010dfd0:	c1 e0 02             	shl    $0x2,%eax
f010dfd3:	01 d0                	add    %edx,%eax
f010dfd5:	01 c0                	add    %eax,%eax
f010dfd7:	01 d0                	add    %edx,%eax
f010dfd9:	01 c0                	add    %eax,%eax
f010dfdb:	01 d0                	add    %edx,%eax
f010dfdd:	c1 e0 02             	shl    $0x2,%eax
f010dfe0:	05 38 aa 2b f0       	add    $0xf02baa38,%eax
f010dfe5:	8a 00                	mov    (%eax),%al
f010dfe7:	84 c0                	test   %al,%al
f010dfe9:	75 56                	jne    f010e041 <get_semaphore_object_ID+0x85>
			continue;

		if(semaphores[i].ownerID == ownerID && strcmp(name, semaphores[i].name)==0)
f010dfeb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010dfee:	89 d0                	mov    %edx,%eax
f010dff0:	c1 e0 02             	shl    $0x2,%eax
f010dff3:	01 d0                	add    %edx,%eax
f010dff5:	01 c0                	add    %eax,%eax
f010dff7:	01 d0                	add    %edx,%eax
f010dff9:	01 c0                	add    %eax,%eax
f010dffb:	01 d0                	add    %edx,%eax
f010dffd:	c1 e0 02             	shl    $0x2,%eax
f010e000:	05 e0 a9 2b f0       	add    $0xf02ba9e0,%eax
f010e005:	8b 00                	mov    (%eax),%eax
f010e007:	3b 45 08             	cmp    0x8(%ebp),%eax
f010e00a:	75 36                	jne    f010e042 <get_semaphore_object_ID+0x86>
f010e00c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e00f:	89 d0                	mov    %edx,%eax
f010e011:	c1 e0 02             	shl    $0x2,%eax
f010e014:	01 d0                	add    %edx,%eax
f010e016:	01 c0                	add    %eax,%eax
f010e018:	01 d0                	add    %edx,%eax
f010e01a:	01 c0                	add    %eax,%eax
f010e01c:	01 d0                	add    %edx,%eax
f010e01e:	c1 e0 02             	shl    $0x2,%eax
f010e021:	05 e0 a9 2b f0       	add    $0xf02ba9e0,%eax
f010e026:	83 c0 04             	add    $0x4,%eax
f010e029:	83 ec 08             	sub    $0x8,%esp
f010e02c:	50                   	push   %eax
f010e02d:	ff 75 0c             	pushl  0xc(%ebp)
f010e030:	e8 4f 15 02 00       	call   f012f584 <strcmp>
f010e035:	83 c4 10             	add    $0x10,%esp
f010e038:	85 c0                	test   %eax,%eax
f010e03a:	75 06                	jne    f010e042 <get_semaphore_object_ID+0x86>
		{
			return i;
f010e03c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e03f:	eb 0f                	jmp    f010e050 <get_semaphore_object_ID+0x94>
{
	int i=0;
	for(; i < MAX_SEMAPHORES; ++i)
	{
		if (semaphores[i].empty)
			continue;
f010e041:	90                   	nop
//	a) if found: SemaphoreObjectID (index of the semaphore object in the array)
//	b) else: E_SEMAPHORE_NOT_EXISTS
int get_semaphore_object_ID(int32 ownerID, char* name)
{
	int i=0;
	for(; i < MAX_SEMAPHORES; ++i)
f010e042:	ff 45 f4             	incl   -0xc(%ebp)
f010e045:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
f010e049:	7e 80                	jle    f010dfcb <get_semaphore_object_ID+0xf>
		if(semaphores[i].ownerID == ownerID && strcmp(name, semaphores[i].name)==0)
		{
			return i;
		}
	}
	return E_SEMAPHORE_NOT_EXISTS;
f010e04b:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
}
f010e050:	c9                   	leave  
f010e051:	c3                   	ret    

f010e052 <free_semaphore_object>:
//delete the semaphore with the given ID from the "semaphores" array
//Return:
//	a) 0 if succeed
//	b) E_SEMAPHORE_NOT_EXISTS if the semaphore is not exists
int free_semaphore_object(uint32 semaphoreObjectID)
{
f010e052:	55                   	push   %ebp
f010e053:	89 e5                	mov    %esp,%ebp
f010e055:	83 ec 08             	sub    $0x8,%esp
	if (semaphoreObjectID >= MAX_SEMAPHORES)
f010e058:	83 7d 08 63          	cmpl   $0x63,0x8(%ebp)
f010e05c:	76 0a                	jbe    f010e068 <free_semaphore_object+0x16>
		return E_SEMAPHORE_NOT_EXISTS;
f010e05e:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
f010e063:	e9 ac 00 00 00       	jmp    f010e114 <free_semaphore_object+0xc2>

	memset(&(semaphores[semaphoreObjectID]), 0, sizeof(struct Semaphore));
f010e068:	8b 55 08             	mov    0x8(%ebp),%edx
f010e06b:	89 d0                	mov    %edx,%eax
f010e06d:	c1 e0 02             	shl    $0x2,%eax
f010e070:	01 d0                	add    %edx,%eax
f010e072:	01 c0                	add    %eax,%eax
f010e074:	01 d0                	add    %edx,%eax
f010e076:	01 c0                	add    %eax,%eax
f010e078:	01 d0                	add    %edx,%eax
f010e07a:	c1 e0 02             	shl    $0x2,%eax
f010e07d:	05 e0 a9 2b f0       	add    $0xf02ba9e0,%eax
f010e082:	83 ec 04             	sub    $0x4,%esp
f010e085:	6a 5c                	push   $0x5c
f010e087:	6a 00                	push   $0x0
f010e089:	50                   	push   %eax
f010e08a:	e8 d7 15 02 00       	call   f012f666 <memset>
f010e08f:	83 c4 10             	add    $0x10,%esp
	semaphores[semaphoreObjectID].empty = 1;
f010e092:	8b 55 08             	mov    0x8(%ebp),%edx
f010e095:	89 d0                	mov    %edx,%eax
f010e097:	c1 e0 02             	shl    $0x2,%eax
f010e09a:	01 d0                	add    %edx,%eax
f010e09c:	01 c0                	add    %eax,%eax
f010e09e:	01 d0                	add    %edx,%eax
f010e0a0:	01 c0                	add    %eax,%eax
f010e0a2:	01 d0                	add    %edx,%eax
f010e0a4:	c1 e0 02             	shl    $0x2,%eax
f010e0a7:	05 38 aa 2b f0       	add    $0xf02baa38,%eax
f010e0ac:	c6 00 01             	movb   $0x1,(%eax)
	LIST_INIT(&(semaphores[semaphoreObjectID].env_queue));
f010e0af:	8b 55 08             	mov    0x8(%ebp),%edx
f010e0b2:	89 d0                	mov    %edx,%eax
f010e0b4:	c1 e0 02             	shl    $0x2,%eax
f010e0b7:	01 d0                	add    %edx,%eax
f010e0b9:	01 c0                	add    %eax,%eax
f010e0bb:	01 d0                	add    %edx,%eax
f010e0bd:	01 c0                	add    %eax,%eax
f010e0bf:	01 d0                	add    %edx,%eax
f010e0c1:	c1 e0 02             	shl    $0x2,%eax
f010e0c4:	05 24 aa 2b f0       	add    $0xf02baa24,%eax
f010e0c9:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010e0cf:	8b 55 08             	mov    0x8(%ebp),%edx
f010e0d2:	89 d0                	mov    %edx,%eax
f010e0d4:	c1 e0 02             	shl    $0x2,%eax
f010e0d7:	01 d0                	add    %edx,%eax
f010e0d9:	01 c0                	add    %eax,%eax
f010e0db:	01 d0                	add    %edx,%eax
f010e0dd:	01 c0                	add    %eax,%eax
f010e0df:	01 d0                	add    %edx,%eax
f010e0e1:	c1 e0 02             	shl    $0x2,%eax
f010e0e4:	05 28 aa 2b f0       	add    $0xf02baa28,%eax
f010e0e9:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010e0ef:	8b 55 08             	mov    0x8(%ebp),%edx
f010e0f2:	89 d0                	mov    %edx,%eax
f010e0f4:	c1 e0 02             	shl    $0x2,%eax
f010e0f7:	01 d0                	add    %edx,%eax
f010e0f9:	01 c0                	add    %eax,%eax
f010e0fb:	01 d0                	add    %edx,%eax
f010e0fd:	01 c0                	add    %eax,%eax
f010e0ff:	01 d0                	add    %edx,%eax
f010e101:	c1 e0 02             	shl    $0x2,%eax
f010e104:	05 30 aa 2b f0       	add    $0xf02baa30,%eax
f010e109:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

	return 0;
f010e10f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010e114:	c9                   	leave  
f010e115:	c3                   	ret    

f010e116 <createSemaphore>:

//======================
// [1] Create Semaphore:
//======================
int createSemaphore(int32 ownerEnvID, char* semaphoreName, uint32 initialValue)
{
f010e116:	55                   	push   %ebp
f010e117:	89 e5                	mov    %esp,%ebp
f010e119:	83 ec 08             	sub    $0x8,%esp
	panic("createSemaphore() is not implemented yet...!!");
f010e11c:	83 ec 04             	sub    $0x4,%esp
f010e11f:	68 34 41 13 f0       	push   $0xf0134134
f010e124:	68 95 00 00 00       	push   $0x95
f010e129:	68 62 41 13 f0       	push   $0xf0134162
f010e12e:	e8 7d 20 ff ff       	call   f01001b0 <_panic>

f010e133 <waitSemaphore>:

//============
// [2] Wait():
//============
void waitSemaphore(int32 ownerEnvID, char* semaphoreName)
{
f010e133:	55                   	push   %ebp
f010e134:	89 e5                	mov    %esp,%ebp
f010e136:	83 ec 08             	sub    $0x8,%esp
	panic("waitSemaphore() is not implemented yet...!!");
f010e139:	83 ec 04             	sub    $0x4,%esp
f010e13c:	68 80 41 13 f0       	push   $0xf0134180
f010e141:	68 9e 00 00 00       	push   $0x9e
f010e146:	68 62 41 13 f0       	push   $0xf0134162
f010e14b:	e8 60 20 ff ff       	call   f01001b0 <_panic>

f010e150 <signalSemaphore>:

//==============
// [3] Signal():
//==============
void signalSemaphore(int ownerEnvID, char* semaphoreName)
{
f010e150:	55                   	push   %ebp
f010e151:	89 e5                	mov    %esp,%ebp
f010e153:	83 ec 08             	sub    $0x8,%esp
	panic("signalSemaphore() is not implemented yet...!!");
f010e156:	83 ec 04             	sub    $0x4,%esp
f010e159:	68 ac 41 13 f0       	push   $0xf01341ac
f010e15e:	68 a6 00 00 00       	push   $0xa6
f010e163:	68 62 41 13 f0       	push   $0xf0134162
f010e168:	e8 43 20 ff ff       	call   f01001b0 <_panic>

f010e16d <setKHeapPlacementStrategyFIRSTFIT>:
#define KHP_PLACE_BESTFIT 	0x2
#define KHP_PLACE_NEXTFIT 	0x3
#define KHP_PLACE_WORSTFIT 	0x4

static inline void setKHeapPlacementStrategyCONTALLOC(){_KHeapPlacementStrategy = KHP_PLACE_CONTALLOC;}
static inline void setKHeapPlacementStrategyFIRSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_FIRSTFIT;}
f010e16d:	55                   	push   %ebp
f010e16e:	89 e5                	mov    %esp,%ebp
f010e170:	c7 05 18 ce 2b f0 01 	movl   $0x1,0xf02bce18
f010e177:	00 00 00 
f010e17a:	90                   	nop
f010e17b:	5d                   	pop    %ebp
f010e17c:	c3                   	ret    

f010e17d <setKHeapPlacementStrategyBESTFIT>:
static inline void setKHeapPlacementStrategyBESTFIT(){_KHeapPlacementStrategy = KHP_PLACE_BESTFIT;}
f010e17d:	55                   	push   %ebp
f010e17e:	89 e5                	mov    %esp,%ebp
f010e180:	c7 05 18 ce 2b f0 02 	movl   $0x2,0xf02bce18
f010e187:	00 00 00 
f010e18a:	90                   	nop
f010e18b:	5d                   	pop    %ebp
f010e18c:	c3                   	ret    

f010e18d <setKHeapPlacementStrategyNEXTFIT>:
static inline void setKHeapPlacementStrategyNEXTFIT(){_KHeapPlacementStrategy = KHP_PLACE_NEXTFIT;}
f010e18d:	55                   	push   %ebp
f010e18e:	89 e5                	mov    %esp,%ebp
f010e190:	c7 05 18 ce 2b f0 03 	movl   $0x3,0xf02bce18
f010e197:	00 00 00 
f010e19a:	90                   	nop
f010e19b:	5d                   	pop    %ebp
f010e19c:	c3                   	ret    

f010e19d <isKHeapPlacementStrategyFIRSTFIT>:
static inline void setKHeapPlacementStrategyWORSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_WORSTFIT;}

static inline uint8 isKHeapPlacementStrategyCONTALLOC(){if(_KHeapPlacementStrategy == KHP_PLACE_CONTALLOC) return 1; return 0;}
static inline uint8 isKHeapPlacementStrategyFIRSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_FIRSTFIT) return 1; return 0;}
f010e19d:	55                   	push   %ebp
f010e19e:	89 e5                	mov    %esp,%ebp
f010e1a0:	a1 18 ce 2b f0       	mov    0xf02bce18,%eax
f010e1a5:	83 f8 01             	cmp    $0x1,%eax
f010e1a8:	75 04                	jne    f010e1ae <isKHeapPlacementStrategyFIRSTFIT+0x11>
f010e1aa:	b0 01                	mov    $0x1,%al
f010e1ac:	eb 02                	jmp    f010e1b0 <isKHeapPlacementStrategyFIRSTFIT+0x13>
f010e1ae:	b0 00                	mov    $0x0,%al
f010e1b0:	5d                   	pop    %ebp
f010e1b1:	c3                   	ret    

f010e1b2 <isKHeapPlacementStrategyBESTFIT>:
static inline uint8 isKHeapPlacementStrategyBESTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_BESTFIT) return 1; return 0;}
f010e1b2:	55                   	push   %ebp
f010e1b3:	89 e5                	mov    %esp,%ebp
f010e1b5:	a1 18 ce 2b f0       	mov    0xf02bce18,%eax
f010e1ba:	83 f8 02             	cmp    $0x2,%eax
f010e1bd:	75 04                	jne    f010e1c3 <isKHeapPlacementStrategyBESTFIT+0x11>
f010e1bf:	b0 01                	mov    $0x1,%al
f010e1c1:	eb 02                	jmp    f010e1c5 <isKHeapPlacementStrategyBESTFIT+0x13>
f010e1c3:	b0 00                	mov    $0x0,%al
f010e1c5:	5d                   	pop    %ebp
f010e1c6:	c3                   	ret    

f010e1c7 <isKHeapPlacementStrategyNEXTFIT>:
static inline uint8 isKHeapPlacementStrategyNEXTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_NEXTFIT) return 1; return 0;}
f010e1c7:	55                   	push   %ebp
f010e1c8:	89 e5                	mov    %esp,%ebp
f010e1ca:	a1 18 ce 2b f0       	mov    0xf02bce18,%eax
f010e1cf:	83 f8 03             	cmp    $0x3,%eax
f010e1d2:	75 04                	jne    f010e1d8 <isKHeapPlacementStrategyNEXTFIT+0x11>
f010e1d4:	b0 01                	mov    $0x1,%al
f010e1d6:	eb 02                	jmp    f010e1da <isKHeapPlacementStrategyNEXTFIT+0x13>
f010e1d8:	b0 00                	mov    $0x0,%al
f010e1da:	5d                   	pop    %ebp
f010e1db:	c3                   	ret    

f010e1dc <tst_handler>:

//=================//
/*Test MAIN Handler*/
//=================//
int tst_handler(int number_of_arguments, char **arguments)
{
f010e1dc:	55                   	push   %ebp
f010e1dd:	89 e5                	mov    %esp,%ebp
f010e1df:	83 ec 18             	sub    $0x18,%esp
	//Remove "tst" from arguments
	for (int a = 0; a < number_of_arguments - 1; ++a)
f010e1e2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010e1e9:	eb 26                	jmp    f010e211 <tst_handler+0x35>
	{
		arguments[a] = arguments[a+1] ;
f010e1eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e1ee:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010e1f5:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e1f8:	01 c2                	add    %eax,%edx
f010e1fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e1fd:	40                   	inc    %eax
f010e1fe:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010e205:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e208:	01 c8                	add    %ecx,%eax
f010e20a:	8b 00                	mov    (%eax),%eax
f010e20c:	89 02                	mov    %eax,(%edx)
/*Test MAIN Handler*/
//=================//
int tst_handler(int number_of_arguments, char **arguments)
{
	//Remove "tst" from arguments
	for (int a = 0; a < number_of_arguments - 1; ++a)
f010e20e:	ff 45 f4             	incl   -0xc(%ebp)
f010e211:	8b 45 08             	mov    0x8(%ebp),%eax
f010e214:	48                   	dec    %eax
f010e215:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010e218:	7f d1                	jg     f010e1eb <tst_handler+0xf>
	{
		arguments[a] = arguments[a+1] ;
	}
	number_of_arguments--;
f010e21a:	ff 4d 08             	decl   0x8(%ebp)

	//Check name of the given test and execute its corresponding function
	int test_found = 0;
f010e21d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	int i ;
	for (i = 0; i < NUM_OF_TESTS; i++)
f010e224:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f010e22b:	eb 35                	jmp    f010e262 <tst_handler+0x86>
	{
		if (strcmp(arguments[0], tests[i].name) == 0)
f010e22d:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010e230:	89 d0                	mov    %edx,%eax
f010e232:	01 c0                	add    %eax,%eax
f010e234:	01 d0                	add    %edx,%eax
f010e236:	c1 e0 02             	shl    $0x2,%eax
f010e239:	05 80 fa 18 f0       	add    $0xf018fa80,%eax
f010e23e:	8b 10                	mov    (%eax),%edx
f010e240:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e243:	8b 00                	mov    (%eax),%eax
f010e245:	83 ec 08             	sub    $0x8,%esp
f010e248:	52                   	push   %edx
f010e249:	50                   	push   %eax
f010e24a:	e8 35 13 02 00       	call   f012f584 <strcmp>
f010e24f:	83 c4 10             	add    $0x10,%esp
f010e252:	85 c0                	test   %eax,%eax
f010e254:	75 09                	jne    f010e25f <tst_handler+0x83>
		{
			test_found = 1;
f010e256:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
			break;
f010e25d:	eb 0f                	jmp    f010e26e <tst_handler+0x92>
	number_of_arguments--;

	//Check name of the given test and execute its corresponding function
	int test_found = 0;
	int i ;
	for (i = 0; i < NUM_OF_TESTS; i++)
f010e25f:	ff 45 ec             	incl   -0x14(%ebp)
f010e262:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010e265:	a1 1c fb 18 f0       	mov    0xf018fb1c,%eax
f010e26a:	39 c2                	cmp    %eax,%edx
f010e26c:	72 bf                	jb     f010e22d <tst_handler+0x51>
			test_found = 1;
			break;
		}
	}

	if(test_found)
f010e26e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010e272:	74 29                	je     f010e29d <tst_handler+0xc1>
	{
		int return_value;
		return_value = tests[i].function_to_execute(number_of_arguments, arguments);
f010e274:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010e277:	89 d0                	mov    %edx,%eax
f010e279:	01 c0                	add    %eax,%eax
f010e27b:	01 d0                	add    %edx,%eax
f010e27d:	c1 e0 02             	shl    $0x2,%eax
f010e280:	05 88 fa 18 f0       	add    $0xf018fa88,%eax
f010e285:	8b 00                	mov    (%eax),%eax
f010e287:	83 ec 08             	sub    $0x8,%esp
f010e28a:	ff 75 0c             	pushl  0xc(%ebp)
f010e28d:	ff 75 08             	pushl  0x8(%ebp)
f010e290:	ff d0                	call   *%eax
f010e292:	83 c4 10             	add    $0x10,%esp
f010e295:	89 45 e8             	mov    %eax,-0x18(%ebp)
		return return_value;
f010e298:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010e29b:	eb 1b                	jmp    f010e2b8 <tst_handler+0xdc>
	}
	else
	{
		cprintf("Unknown test '%s'\n", arguments[0]);
f010e29d:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e2a0:	8b 00                	mov    (%eax),%eax
f010e2a2:	83 ec 08             	sub    $0x8,%esp
f010e2a5:	50                   	push   %eax
f010e2a6:	68 60 44 13 f0       	push   $0xf0134460
f010e2ab:	e8 81 2b ff ff       	call   f0100e31 <cprintf>
f010e2b0:	83 c4 10             	add    $0x10,%esp
		return 0;
f010e2b3:	b8 00 00 00 00       	mov    $0x0,%eax
	}
}
f010e2b8:	c9                   	leave  
f010e2b9:	c3                   	ret    

f010e2ba <tst_three_creation_functions>:

//=================//
/*TESTING Functions*/
//=================//
int tst_three_creation_functions(int number_of_arguments, char **arguments)
{
f010e2ba:	55                   	push   %ebp
f010e2bb:	89 e5                	mov    %esp,%ebp
f010e2bd:	83 ec 08             	sub    $0x8,%esp
	test_three_creation_functions();
f010e2c0:	e8 3c 71 01 00       	call   f0125401 <test_three_creation_functions>
	return 0;
f010e2c5:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010e2ca:	c9                   	leave  
f010e2cb:	c3                   	ret    

f010e2cc <tst_priority1>:

int tst_priority1(int number_of_arguments, char **arguments)
{
f010e2cc:	55                   	push   %ebp
f010e2cd:	89 e5                	mov    %esp,%ebp
f010e2cf:	83 ec 08             	sub    $0x8,%esp
	test_priority_normal_and_higher();
f010e2d2:	e8 fe 92 00 00       	call   f01175d5 <test_priority_normal_and_higher>
	return 0;
f010e2d7:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010e2dc:	c9                   	leave  
f010e2dd:	c3                   	ret    

f010e2de <tst_priority2>:

int tst_priority2(int number_of_arguments, char **arguments)
{
f010e2de:	55                   	push   %ebp
f010e2df:	89 e5                	mov    %esp,%ebp
f010e2e1:	83 ec 08             	sub    $0x8,%esp
	test_priority_normal_and_lower();
f010e2e4:	e8 56 9d 00 00       	call   f011803f <test_priority_normal_and_lower>
	return 0;
f010e2e9:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010e2ee:	c9                   	leave  
f010e2ef:	c3                   	ret    

f010e2f0 <tst_kfreeall>:

int tst_kfreeall(int number_of_arguments, char **arguments)
{
f010e2f0:	55                   	push   %ebp
f010e2f1:	89 e5                	mov    %esp,%ebp
f010e2f3:	83 ec 08             	sub    $0x8,%esp
	test_kfreeall();
f010e2f6:	e8 1a 73 01 00       	call   f0125615 <test_kfreeall>
	return 0;
f010e2fb:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010e300:	c9                   	leave  
f010e301:	c3                   	ret    

f010e302 <tst_kexpand>:

int tst_kexpand(int number_of_arguments, char **arguments)
{
f010e302:	55                   	push   %ebp
f010e303:	89 e5                	mov    %esp,%ebp
f010e305:	83 ec 08             	sub    $0x8,%esp
	test_kexpand();
f010e308:	e8 a2 87 01 00       	call   f0126aaf <test_kexpand>
	return 0;
f010e30d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010e312:	c9                   	leave  
f010e313:	c3                   	ret    

f010e314 <tst_kshrink>:

int tst_kshrink(int number_of_arguments, char **arguments)
{
f010e314:	55                   	push   %ebp
f010e315:	89 e5                	mov    %esp,%ebp
f010e317:	83 ec 08             	sub    $0x8,%esp
	test_kshrink();
f010e31a:	e8 61 93 01 00       	call   f0127680 <test_kshrink>
	return 0;
f010e31f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010e324:	c9                   	leave  
f010e325:	c3                   	ret    

f010e326 <tst_kfreelast>:

int tst_kfreelast(int number_of_arguments, char **arguments)
{
f010e326:	55                   	push   %ebp
f010e327:	89 e5                	mov    %esp,%ebp
f010e329:	83 ec 08             	sub    $0x8,%esp
	test_kfreelast();
f010e32c:	e8 56 a0 01 00       	call   f0128387 <test_kfreelast>
	return 0;
f010e331:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010e336:	c9                   	leave  
f010e337:	c3                   	ret    

f010e338 <tst_sc_MLFQ>:

int tst_sc_MLFQ(int number_of_arguments, char **arguments)
{
f010e338:	55                   	push   %ebp
f010e339:	89 e5                	mov    %esp,%ebp
f010e33b:	83 ec 18             	sub    $0x18,%esp
	int numOfSlave2 = strtol(arguments[1], NULL, 10);
f010e33e:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e341:	83 c0 04             	add    $0x4,%eax
f010e344:	8b 00                	mov    (%eax),%eax
f010e346:	83 ec 04             	sub    $0x4,%esp
f010e349:	6a 0a                	push   $0xa
f010e34b:	6a 00                	push   $0x0
f010e34d:	50                   	push   %eax
f010e34e:	e8 85 14 02 00       	call   f012f7d8 <strtol>
f010e353:	83 c4 10             	add    $0x10,%esp
f010e356:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int cnt = 0 ;
f010e359:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int firstTime = 1;
f010e360:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	struct Env *e ;
	LIST_FOREACH(e, &env_exit_queue)
f010e367:	a1 c4 a9 2b f0       	mov    0xf02ba9c4,%eax
f010e36c:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010e36f:	eb 3b                	jmp    f010e3ac <tst_sc_MLFQ+0x74>
	{
		if (strcmp(e->prog_name, "tmlfq_2") == 0)
f010e371:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010e374:	83 c0 5c             	add    $0x5c,%eax
f010e377:	83 ec 08             	sub    $0x8,%esp
f010e37a:	68 73 44 13 f0       	push   $0xf0134473
f010e37f:	50                   	push   %eax
f010e380:	e8 ff 11 02 00       	call   f012f584 <strcmp>
f010e385:	83 c4 10             	add    $0x10,%esp
f010e388:	85 c0                	test   %eax,%eax
f010e38a:	75 12                	jne    f010e39e <tst_sc_MLFQ+0x66>
		{
			if (firstTime)
f010e38c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010e390:	74 07                	je     f010e399 <tst_sc_MLFQ+0x61>
				firstTime = 0;
f010e392:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cnt++ ;
f010e399:	ff 45 f4             	incl   -0xc(%ebp)
f010e39c:	eb 06                	jmp    f010e3a4 <tst_sc_MLFQ+0x6c>
		}
		else if (!firstTime)
f010e39e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010e3a2:	74 31                	je     f010e3d5 <tst_sc_MLFQ+0x9d>
{
	int numOfSlave2 = strtol(arguments[1], NULL, 10);
	int cnt = 0 ;
	int firstTime = 1;
	struct Env *e ;
	LIST_FOREACH(e, &env_exit_queue)
f010e3a4:	a1 cc a9 2b f0       	mov    0xf02ba9cc,%eax
f010e3a9:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010e3ac:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f010e3b0:	74 08                	je     f010e3ba <tst_sc_MLFQ+0x82>
f010e3b2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010e3b5:	8b 40 44             	mov    0x44(%eax),%eax
f010e3b8:	eb 05                	jmp    f010e3bf <tst_sc_MLFQ+0x87>
f010e3ba:	b8 00 00 00 00       	mov    $0x0,%eax
f010e3bf:	a3 cc a9 2b f0       	mov    %eax,0xf02ba9cc
f010e3c4:	a1 cc a9 2b f0       	mov    0xf02ba9cc,%eax
f010e3c9:	85 c0                	test   %eax,%eax
f010e3cb:	75 a4                	jne    f010e371 <tst_sc_MLFQ+0x39>
f010e3cd:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f010e3d1:	75 9e                	jne    f010e371 <tst_sc_MLFQ+0x39>
f010e3d3:	eb 01                	jmp    f010e3d6 <tst_sc_MLFQ+0x9e>
			if (firstTime)
				firstTime = 0;
			cnt++ ;
		}
		else if (!firstTime)
			break;
f010e3d5:	90                   	nop
	}
	if(cnt == numOfSlave2)
f010e3d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e3d9:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f010e3dc:	75 12                	jne    f010e3f0 <tst_sc_MLFQ+0xb8>
	{
		cprintf("Congratulations... MLFQScenario# completed successfully\n");
f010e3de:	83 ec 0c             	sub    $0xc,%esp
f010e3e1:	68 7c 44 13 f0       	push   $0xf013447c
f010e3e6:	e8 46 2a ff ff       	call   f0100e31 <cprintf>
f010e3eb:	83 c4 10             	add    $0x10,%esp
f010e3ee:	eb 17                	jmp    f010e407 <tst_sc_MLFQ+0xcf>
	}
	else
	{
		panic("MLFQScenario# failed\n");
f010e3f0:	83 ec 04             	sub    $0x4,%esp
f010e3f3:	68 b5 44 13 f0       	push   $0xf01344b5
f010e3f8:	68 94 00 00 00       	push   $0x94
f010e3fd:	68 cb 44 13 f0       	push   $0xf01344cb
f010e402:	e8 a9 1d ff ff       	call   f01001b0 <_panic>
	}
	return 0;
f010e407:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010e40c:	c9                   	leave  
f010e40d:	c3                   	ret    

f010e40e <tst_autocomplete>:


/*2022*/
int tst_autocomplete(int number_of_arguments, char **arguments)
{
f010e40e:	55                   	push   %ebp
f010e40f:	89 e5                	mov    %esp,%ebp
f010e411:	83 ec 18             	sub    $0x18,%esp
	int x = TestAutoCompleteCommand();
f010e414:	e8 7f 3e 00 00       	call   f0112298 <TestAutoCompleteCommand>
f010e419:	89 45 f4             	mov    %eax,-0xc(%ebp)
	return 0;
f010e41c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010e421:	c9                   	leave  
f010e422:	c3                   	ret    

f010e423 <tst_dyn_alloc>:
int tst_dyn_alloc(int number_of_arguments, char **arguments)
{
f010e423:	55                   	push   %ebp
f010e424:	89 e5                	mov    %esp,%ebp
f010e426:	83 ec 08             	sub    $0x8,%esp
	if (number_of_arguments != 2)
f010e429:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010e42d:	74 1a                	je     f010e449 <tst_dyn_alloc+0x26>
	{
		cprintf("Invalid number of arguments! USAGE: tst dynalloc <testname>\n") ;
f010e42f:	83 ec 0c             	sub    $0xc,%esp
f010e432:	68 e4 44 13 f0       	push   $0xf01344e4
f010e437:	e8 f5 29 ff ff       	call   f0100e31 <cprintf>
f010e43c:	83 c4 10             	add    $0x10,%esp
		return 0;
f010e43f:	b8 00 00 00 00       	mov    $0x0,%eax
f010e444:	e9 2f 01 00 00       	jmp    f010e578 <tst_dyn_alloc+0x155>
	}
	//str2lower(arguments[1]);
	// Test 1 Example for initialize_MemBlocksList: tstdynalloc init
	if(strcmp(arguments[1], "init") == 0)
f010e449:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e44c:	83 c0 04             	add    $0x4,%eax
f010e44f:	8b 00                	mov    (%eax),%eax
f010e451:	83 ec 08             	sub    $0x8,%esp
f010e454:	68 21 45 13 f0       	push   $0xf0134521
f010e459:	50                   	push   %eax
f010e45a:	e8 25 11 02 00       	call   f012f584 <strcmp>
f010e45f:	83 c4 10             	add    $0x10,%esp
f010e462:	85 c0                	test   %eax,%eax
f010e464:	75 0a                	jne    f010e470 <tst_dyn_alloc+0x4d>
	{
		test_initialize_dynamic_allocator();
f010e466:	e8 80 06 00 00       	call   f010eaeb <test_initialize_dynamic_allocator>
f010e46b:	e9 03 01 00 00       	jmp    f010e573 <tst_dyn_alloc+0x150>
	}
	// Test 2 Example for alloc_block_FF: tstdynalloc allocFF
	else if(strcmp(arguments[1], "allocff") == 0)
f010e470:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e473:	83 c0 04             	add    $0x4,%eax
f010e476:	8b 00                	mov    (%eax),%eax
f010e478:	83 ec 08             	sub    $0x8,%esp
f010e47b:	68 26 45 13 f0       	push   $0xf0134526
f010e480:	50                   	push   %eax
f010e481:	e8 fe 10 02 00       	call   f012f584 <strcmp>
f010e486:	83 c4 10             	add    $0x10,%esp
f010e489:	85 c0                	test   %eax,%eax
f010e48b:	75 0a                	jne    f010e497 <tst_dyn_alloc+0x74>
	{
		test_alloc_block_FF();
f010e48d:	e8 a1 0a 00 00       	call   f010ef33 <test_alloc_block_FF>
f010e492:	e9 dc 00 00 00       	jmp    f010e573 <tst_dyn_alloc+0x150>
	}
	// Test 3 Example for alloc_block_BF: tstdynalloc allocBF
	else if(strcmp(arguments[1], "allocbf") == 0)
f010e497:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e49a:	83 c0 04             	add    $0x4,%eax
f010e49d:	8b 00                	mov    (%eax),%eax
f010e49f:	83 ec 08             	sub    $0x8,%esp
f010e4a2:	68 2e 45 13 f0       	push   $0xf013452e
f010e4a7:	50                   	push   %eax
f010e4a8:	e8 d7 10 02 00       	call   f012f584 <strcmp>
f010e4ad:	83 c4 10             	add    $0x10,%esp
f010e4b0:	85 c0                	test   %eax,%eax
f010e4b2:	75 0a                	jne    f010e4be <tst_dyn_alloc+0x9b>
	{
		test_alloc_block_BF();
f010e4b4:	e8 84 0e 00 00       	call   f010f33d <test_alloc_block_BF>
f010e4b9:	e9 b5 00 00 00       	jmp    f010e573 <tst_dyn_alloc+0x150>
	}
	// Test 4 Example for alloc_block_NF: tstdynalloc allocNF
	else if(strcmp(arguments[1], "allocnf") == 0)
f010e4be:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e4c1:	83 c0 04             	add    $0x4,%eax
f010e4c4:	8b 00                	mov    (%eax),%eax
f010e4c6:	83 ec 08             	sub    $0x8,%esp
f010e4c9:	68 36 45 13 f0       	push   $0xf0134536
f010e4ce:	50                   	push   %eax
f010e4cf:	e8 b0 10 02 00       	call   f012f584 <strcmp>
f010e4d4:	83 c4 10             	add    $0x10,%esp
f010e4d7:	85 c0                	test   %eax,%eax
f010e4d9:	75 0a                	jne    f010e4e5 <tst_dyn_alloc+0xc2>
	{
		test_alloc_block_NF();
f010e4db:	e8 b3 12 00 00       	call   f010f793 <test_alloc_block_NF>
f010e4e0:	e9 8e 00 00 00       	jmp    f010e573 <tst_dyn_alloc+0x150>
	}
	// Test 5 Example for free_block: tstdynalloc freeFF
	else if(strcmp(arguments[1], "freeff") == 0)
f010e4e5:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e4e8:	83 c0 04             	add    $0x4,%eax
f010e4eb:	8b 00                	mov    (%eax),%eax
f010e4ed:	83 ec 08             	sub    $0x8,%esp
f010e4f0:	68 3e 45 13 f0       	push   $0xf013453e
f010e4f5:	50                   	push   %eax
f010e4f6:	e8 89 10 02 00       	call   f012f584 <strcmp>
f010e4fb:	83 c4 10             	add    $0x10,%esp
f010e4fe:	85 c0                	test   %eax,%eax
f010e500:	75 07                	jne    f010e509 <tst_dyn_alloc+0xe6>
	{
		test_free_block_FF();
f010e502:	e8 92 12 00 00       	call   f010f799 <test_free_block_FF>
f010e507:	eb 6a                	jmp    f010e573 <tst_dyn_alloc+0x150>
	}
	// Test 6 Example for free_block: tstdynalloc freeBF
	else if(strcmp(arguments[1], "freebf") == 0)
f010e509:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e50c:	83 c0 04             	add    $0x4,%eax
f010e50f:	8b 00                	mov    (%eax),%eax
f010e511:	83 ec 08             	sub    $0x8,%esp
f010e514:	68 45 45 13 f0       	push   $0xf0134545
f010e519:	50                   	push   %eax
f010e51a:	e8 65 10 02 00       	call   f012f584 <strcmp>
f010e51f:	83 c4 10             	add    $0x10,%esp
f010e522:	85 c0                	test   %eax,%eax
f010e524:	75 07                	jne    f010e52d <tst_dyn_alloc+0x10a>
	{
		test_free_block_BF();
f010e526:	e8 d3 20 00 00       	call   f01105fe <test_free_block_BF>
f010e52b:	eb 46                	jmp    f010e573 <tst_dyn_alloc+0x150>
	}
	// Test 7 Example for free_block: tstdynalloc freeNF
	else if(strcmp(arguments[1], "freenf") == 0)
f010e52d:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e530:	83 c0 04             	add    $0x4,%eax
f010e533:	8b 00                	mov    (%eax),%eax
f010e535:	83 ec 08             	sub    $0x8,%esp
f010e538:	68 4c 45 13 f0       	push   $0xf013454c
f010e53d:	50                   	push   %eax
f010e53e:	e8 41 10 02 00       	call   f012f584 <strcmp>
f010e543:	83 c4 10             	add    $0x10,%esp
f010e546:	85 c0                	test   %eax,%eax
f010e548:	75 07                	jne    f010e551 <tst_dyn_alloc+0x12e>
	{
		test_free_block_NF();
f010e54a:	e8 c1 2e 00 00       	call   f0111410 <test_free_block_NF>
f010e54f:	eb 22                	jmp    f010e573 <tst_dyn_alloc+0x150>
	}
	// Test 8 Example for realloc_block_ff: tstdynalloc reallocFF
	else if(strcmp(arguments[1], "reallocff") == 0)
f010e551:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e554:	83 c0 04             	add    $0x4,%eax
f010e557:	8b 00                	mov    (%eax),%eax
f010e559:	83 ec 08             	sub    $0x8,%esp
f010e55c:	68 53 45 13 f0       	push   $0xf0134553
f010e561:	50                   	push   %eax
f010e562:	e8 1d 10 02 00       	call   f012f584 <strcmp>
f010e567:	83 c4 10             	add    $0x10,%esp
f010e56a:	85 c0                	test   %eax,%eax
f010e56c:	75 05                	jne    f010e573 <tst_dyn_alloc+0x150>
	{
		test_realloc_block_FF();
f010e56e:	e8 a6 2f 00 00       	call   f0111519 <test_realloc_block_FF>
		//test_realloc_block_FF();
	}
	return 0;
f010e573:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010e578:	c9                   	leave  
f010e579:	c3                   	ret    

f010e57a <tst_chunks>:

int tst_chunks(int number_of_arguments, char **arguments)
{
f010e57a:	55                   	push   %ebp
f010e57b:	89 e5                	mov    %esp,%ebp
f010e57d:	83 ec 08             	sub    $0x8,%esp
	if (number_of_arguments != 2)
f010e580:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010e584:	74 1a                	je     f010e5a0 <tst_chunks+0x26>
	{
		cprintf("Invalid number of arguments! USAGE: tstchunk <testname>\n") ;
f010e586:	83 ec 0c             	sub    $0xc,%esp
f010e589:	68 60 45 13 f0       	push   $0xf0134560
f010e58e:	e8 9e 28 ff ff       	call   f0100e31 <cprintf>
f010e593:	83 c4 10             	add    $0x10,%esp
		return 0;
f010e596:	b8 00 00 00 00       	mov    $0x0,%eax
f010e59b:	e9 e1 00 00 00       	jmp    f010e681 <tst_chunks+0x107>
	}
	// CUT-PASTE Test
	if(strcmp(arguments[1], "cutpaste") == 0)
f010e5a0:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e5a3:	83 c0 04             	add    $0x4,%eax
f010e5a6:	8b 00                	mov    (%eax),%eax
f010e5a8:	83 ec 08             	sub    $0x8,%esp
f010e5ab:	68 99 45 13 f0       	push   $0xf0134599
f010e5b0:	50                   	push   %eax
f010e5b1:	e8 ce 0f 02 00       	call   f012f584 <strcmp>
f010e5b6:	83 c4 10             	add    $0x10,%esp
f010e5b9:	85 c0                	test   %eax,%eax
f010e5bb:	75 0a                	jne    f010e5c7 <tst_chunks+0x4d>
	{
		test_cut_paste_pages();
f010e5bd:	e8 dc 43 00 00       	call   f011299e <test_cut_paste_pages>
f010e5c2:	e9 b5 00 00 00       	jmp    f010e67c <tst_chunks+0x102>
	}
	// COPY-PASTE Test
	else if(strcmp(arguments[1], "copypaste") == 0)
f010e5c7:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e5ca:	83 c0 04             	add    $0x4,%eax
f010e5cd:	8b 00                	mov    (%eax),%eax
f010e5cf:	83 ec 08             	sub    $0x8,%esp
f010e5d2:	68 a2 45 13 f0       	push   $0xf01345a2
f010e5d7:	50                   	push   %eax
f010e5d8:	e8 a7 0f 02 00       	call   f012f584 <strcmp>
f010e5dd:	83 c4 10             	add    $0x10,%esp
f010e5e0:	85 c0                	test   %eax,%eax
f010e5e2:	75 0a                	jne    f010e5ee <tst_chunks+0x74>
	{
		test_copy_paste_chunk();
f010e5e4:	e8 06 4e 00 00       	call   f01133ef <test_copy_paste_chunk>
f010e5e9:	e9 8e 00 00 00       	jmp    f010e67c <tst_chunks+0x102>
	}
	// SHARE Test
	else if(strcmp(arguments[1], "share") == 0)
f010e5ee:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e5f1:	83 c0 04             	add    $0x4,%eax
f010e5f4:	8b 00                	mov    (%eax),%eax
f010e5f6:	83 ec 08             	sub    $0x8,%esp
f010e5f9:	68 ac 45 13 f0       	push   $0xf01345ac
f010e5fe:	50                   	push   %eax
f010e5ff:	e8 80 0f 02 00       	call   f012f584 <strcmp>
f010e604:	83 c4 10             	add    $0x10,%esp
f010e607:	85 c0                	test   %eax,%eax
f010e609:	75 07                	jne    f010e612 <tst_chunks+0x98>
	{
		test_share_chunk();
f010e60b:	e8 e3 5e 00 00       	call   f01144f3 <test_share_chunk>
f010e610:	eb 6a                	jmp    f010e67c <tst_chunks+0x102>
	}
	// ALLOCATE Test
	else if(strcmp(arguments[1], "allocate") == 0)
f010e612:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e615:	83 c0 04             	add    $0x4,%eax
f010e618:	8b 00                	mov    (%eax),%eax
f010e61a:	83 ec 08             	sub    $0x8,%esp
f010e61d:	68 b2 45 13 f0       	push   $0xf01345b2
f010e622:	50                   	push   %eax
f010e623:	e8 5c 0f 02 00       	call   f012f584 <strcmp>
f010e628:	83 c4 10             	add    $0x10,%esp
f010e62b:	85 c0                	test   %eax,%eax
f010e62d:	75 07                	jne    f010e636 <tst_chunks+0xbc>
	{
		test_allocate_chunk();
f010e62f:	e8 ed 68 00 00       	call   f0114f21 <test_allocate_chunk>
f010e634:	eb 46                	jmp    f010e67c <tst_chunks+0x102>
	}
	// REQUIRED SPACE Test
	else if(strcmp(arguments[1], "required_space") == 0)
f010e636:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e639:	83 c0 04             	add    $0x4,%eax
f010e63c:	8b 00                	mov    (%eax),%eax
f010e63e:	83 ec 08             	sub    $0x8,%esp
f010e641:	68 bb 45 13 f0       	push   $0xf01345bb
f010e646:	50                   	push   %eax
f010e647:	e8 38 0f 02 00       	call   f012f584 <strcmp>
f010e64c:	83 c4 10             	add    $0x10,%esp
f010e64f:	85 c0                	test   %eax,%eax
f010e651:	75 07                	jne    f010e65a <tst_chunks+0xe0>
	{
		test_calculate_required_frames();
f010e653:	e8 d6 71 00 00       	call   f011582e <test_calculate_required_frames>
f010e658:	eb 22                	jmp    f010e67c <tst_chunks+0x102>
	}
	// ALLOCATED SPACE Test
	else if(strcmp(arguments[1], "allocated_space") == 0)
f010e65a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e65d:	83 c0 04             	add    $0x4,%eax
f010e660:	8b 00                	mov    (%eax),%eax
f010e662:	83 ec 08             	sub    $0x8,%esp
f010e665:	68 ca 45 13 f0       	push   $0xf01345ca
f010e66a:	50                   	push   %eax
f010e66b:	e8 14 0f 02 00       	call   f012f584 <strcmp>
f010e670:	83 c4 10             	add    $0x10,%esp
f010e673:	85 c0                	test   %eax,%eax
f010e675:	75 05                	jne    f010e67c <tst_chunks+0x102>
	{
		test_calculate_allocated_space();
f010e677:	e8 2c 7a 00 00       	call   f01160a8 <test_calculate_allocated_space>
	}
	return 0;
f010e67c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010e681:	c9                   	leave  
f010e682:	c3                   	ret    

f010e683 <tst_paging_manipulation>:

int tst_paging_manipulation(int number_of_arguments, char **arguments)
{
f010e683:	55                   	push   %ebp
f010e684:	89 e5                	mov    %esp,%ebp
f010e686:	83 ec 08             	sub    $0x8,%esp
	if (number_of_arguments != 2)
f010e689:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010e68d:	74 1a                	je     f010e6a9 <tst_paging_manipulation+0x26>
	{
		cprintf("Invalid number of arguments! USAGE: tstpg <testname>\n") ;
f010e68f:	83 ec 0c             	sub    $0xc,%esp
f010e692:	68 dc 45 13 f0       	push   $0xf01345dc
f010e697:	e8 95 27 ff ff       	call   f0100e31 <cprintf>
f010e69c:	83 c4 10             	add    $0x10,%esp
		return 0;
f010e69f:	b8 00 00 00 00       	mov    $0x0,%eax
f010e6a4:	e9 ba 00 00 00       	jmp    f010e763 <tst_paging_manipulation+0xe0>
	}
	// Test 1.1-Set/Clear permissions: tstpg scperm1
	if(strcmp(arguments[1], "scperm1") == 0)
f010e6a9:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e6ac:	83 c0 04             	add    $0x4,%eax
f010e6af:	8b 00                	mov    (%eax),%eax
f010e6b1:	83 ec 08             	sub    $0x8,%esp
f010e6b4:	68 12 46 13 f0       	push   $0xf0134612
f010e6b9:	50                   	push   %eax
f010e6ba:	e8 c5 0e 02 00       	call   f012f584 <strcmp>
f010e6bf:	83 c4 10             	add    $0x10,%esp
f010e6c2:	85 c0                	test   %eax,%eax
f010e6c4:	75 0a                	jne    f010e6d0 <tst_paging_manipulation+0x4d>
	{
		test_pt_set_page_permissions();
f010e6c6:	e8 52 3d 00 00       	call   f011241d <test_pt_set_page_permissions>
f010e6cb:	e9 8e 00 00 00       	jmp    f010e75e <tst_paging_manipulation+0xdb>
	}
	// Test 1.2-Set/Clear permissions: tstpg scperm2
	else if(strcmp(arguments[1], "scperm2") == 0)
f010e6d0:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e6d3:	83 c0 04             	add    $0x4,%eax
f010e6d6:	8b 00                	mov    (%eax),%eax
f010e6d8:	83 ec 08             	sub    $0x8,%esp
f010e6db:	68 1a 46 13 f0       	push   $0xf013461a
f010e6e0:	50                   	push   %eax
f010e6e1:	e8 9e 0e 02 00       	call   f012f584 <strcmp>
f010e6e6:	83 c4 10             	add    $0x10,%esp
f010e6e9:	85 c0                	test   %eax,%eax
f010e6eb:	75 07                	jne    f010e6f4 <tst_paging_manipulation+0x71>
	{
		test_pt_set_page_permissions_invalid_va();
f010e6ed:	e8 8e 3f 00 00       	call   f0112680 <test_pt_set_page_permissions_invalid_va>
f010e6f2:	eb 6a                	jmp    f010e75e <tst_paging_manipulation+0xdb>
	}
	// Test 2-Get permissions: tstpg getperm
	else if(strcmp(arguments[1], "getperm") == 0)
f010e6f4:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e6f7:	83 c0 04             	add    $0x4,%eax
f010e6fa:	8b 00                	mov    (%eax),%eax
f010e6fc:	83 ec 08             	sub    $0x8,%esp
f010e6ff:	68 22 46 13 f0       	push   $0xf0134622
f010e704:	50                   	push   %eax
f010e705:	e8 7a 0e 02 00       	call   f012f584 <strcmp>
f010e70a:	83 c4 10             	add    $0x10,%esp
f010e70d:	85 c0                	test   %eax,%eax
f010e70f:	75 07                	jne    f010e718 <tst_paging_manipulation+0x95>
	{
		test_pt_get_page_permissions();
f010e711:	e8 b3 3f 00 00       	call   f01126c9 <test_pt_get_page_permissions>
f010e716:	eb 46                	jmp    f010e75e <tst_paging_manipulation+0xdb>
	}
	// Test 3.1-Clear entry: tstpg clear1
	else if(strcmp(arguments[1], "clear1") == 0)
f010e718:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e71b:	83 c0 04             	add    $0x4,%eax
f010e71e:	8b 00                	mov    (%eax),%eax
f010e720:	83 ec 08             	sub    $0x8,%esp
f010e723:	68 2a 46 13 f0       	push   $0xf013462a
f010e728:	50                   	push   %eax
f010e729:	e8 56 0e 02 00       	call   f012f584 <strcmp>
f010e72e:	83 c4 10             	add    $0x10,%esp
f010e731:	85 c0                	test   %eax,%eax
f010e733:	75 07                	jne    f010e73c <tst_paging_manipulation+0xb9>
	{
		test_pt_clear_page_table_entry();
f010e735:	e8 d3 40 00 00       	call   f011280d <test_pt_clear_page_table_entry>
f010e73a:	eb 22                	jmp    f010e75e <tst_paging_manipulation+0xdb>
	}
	// Test 3.2-Clear entry: tstpg clear2
	else if(strcmp(arguments[1], "clear2") == 0)
f010e73c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e73f:	83 c0 04             	add    $0x4,%eax
f010e742:	8b 00                	mov    (%eax),%eax
f010e744:	83 ec 08             	sub    $0x8,%esp
f010e747:	68 31 46 13 f0       	push   $0xf0134631
f010e74c:	50                   	push   %eax
f010e74d:	e8 32 0e 02 00       	call   f012f584 <strcmp>
f010e752:	83 c4 10             	add    $0x10,%esp
f010e755:	85 c0                	test   %eax,%eax
f010e757:	75 05                	jne    f010e75e <tst_paging_manipulation+0xdb>
	{
		test_pt_clear_page_table_entry_invalid_va();
f010e759:	e8 08 42 00 00       	call   f0112966 <test_pt_clear_page_table_entry_invalid_va>
	}

	return 0;
f010e75e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010e763:	c9                   	leave  
f010e764:	c3                   	ret    

f010e765 <tst_kheap>:

int tst_kheap(int number_of_arguments, char **arguments)
{
f010e765:	55                   	push   %ebp
f010e766:	89 e5                	mov    %esp,%ebp
f010e768:	83 ec 18             	sub    $0x18,%esp
	// Parameters Validation Checking
	if (strcmp(arguments[2], "kmalloc") == 0 && number_of_arguments != 4)
f010e76b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e76e:	83 c0 08             	add    $0x8,%eax
f010e771:	8b 00                	mov    (%eax),%eax
f010e773:	83 ec 08             	sub    $0x8,%esp
f010e776:	68 38 46 13 f0       	push   $0xf0134638
f010e77b:	50                   	push   %eax
f010e77c:	e8 03 0e 02 00       	call   f012f584 <strcmp>
f010e781:	83 c4 10             	add    $0x10,%esp
f010e784:	85 c0                	test   %eax,%eax
f010e786:	75 20                	jne    f010e7a8 <tst_kheap+0x43>
f010e788:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f010e78c:	74 1a                	je     f010e7a8 <tst_kheap+0x43>
	{
		cprintf("Invalid number of arguments! USAGE: tst kheap <Strategy> kmalloc <1 or 2 or 3>\n") ;
f010e78e:	83 ec 0c             	sub    $0xc,%esp
f010e791:	68 40 46 13 f0       	push   $0xf0134640
f010e796:	e8 96 26 ff ff       	call   f0100e31 <cprintf>
f010e79b:	83 c4 10             	add    $0x10,%esp
		return 0;
f010e79e:	b8 00 00 00 00       	mov    $0x0,%eax
f010e7a3:	e9 41 03 00 00       	jmp    f010eae9 <tst_kheap+0x384>
	}
	if (strcmp(arguments[2], "kmalloc") != 0 && number_of_arguments != 3)
f010e7a8:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e7ab:	83 c0 08             	add    $0x8,%eax
f010e7ae:	8b 00                	mov    (%eax),%eax
f010e7b0:	83 ec 08             	sub    $0x8,%esp
f010e7b3:	68 38 46 13 f0       	push   $0xf0134638
f010e7b8:	50                   	push   %eax
f010e7b9:	e8 c6 0d 02 00       	call   f012f584 <strcmp>
f010e7be:	83 c4 10             	add    $0x10,%esp
f010e7c1:	85 c0                	test   %eax,%eax
f010e7c3:	74 20                	je     f010e7e5 <tst_kheap+0x80>
f010e7c5:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f010e7c9:	74 1a                	je     f010e7e5 <tst_kheap+0x80>
	{
		cprintf("Invalid number of arguments! USAGE: tst kheap <Strategy> <testname>\n") ;
f010e7cb:	83 ec 0c             	sub    $0xc,%esp
f010e7ce:	68 90 46 13 f0       	push   $0xf0134690
f010e7d3:	e8 59 26 ff ff       	call   f0100e31 <cprintf>
f010e7d8:	83 c4 10             	add    $0x10,%esp
		return 0;
f010e7db:	b8 00 00 00 00       	mov    $0x0,%eax
f010e7e0:	e9 04 03 00 00       	jmp    f010eae9 <tst_kheap+0x384>
	}

	// Setting Strategy
	if(strcmp(arguments[1], "FF") == 0 || strcmp(arguments[1], "ff") == 0)
f010e7e5:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e7e8:	83 c0 04             	add    $0x4,%eax
f010e7eb:	8b 00                	mov    (%eax),%eax
f010e7ed:	83 ec 08             	sub    $0x8,%esp
f010e7f0:	68 d5 46 13 f0       	push   $0xf01346d5
f010e7f5:	50                   	push   %eax
f010e7f6:	e8 89 0d 02 00       	call   f012f584 <strcmp>
f010e7fb:	83 c4 10             	add    $0x10,%esp
f010e7fe:	85 c0                	test   %eax,%eax
f010e800:	74 1d                	je     f010e81f <tst_kheap+0xba>
f010e802:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e805:	83 c0 04             	add    $0x4,%eax
f010e808:	8b 00                	mov    (%eax),%eax
f010e80a:	83 ec 08             	sub    $0x8,%esp
f010e80d:	68 d8 46 13 f0       	push   $0xf01346d8
f010e812:	50                   	push   %eax
f010e813:	e8 6c 0d 02 00       	call   f012f584 <strcmp>
f010e818:	83 c4 10             	add    $0x10,%esp
f010e81b:	85 c0                	test   %eax,%eax
f010e81d:	75 1a                	jne    f010e839 <tst_kheap+0xd4>
	{
		setKHeapPlacementStrategyFIRSTFIT();
f010e81f:	e8 49 f9 ff ff       	call   f010e16d <setKHeapPlacementStrategyFIRSTFIT>
		cprintf("Kernel Heap placement strategy is FIRST FIT\n");
f010e824:	83 ec 0c             	sub    $0xc,%esp
f010e827:	68 dc 46 13 f0       	push   $0xf01346dc
f010e82c:	e8 00 26 ff ff       	call   f0100e31 <cprintf>
f010e831:	83 c4 10             	add    $0x10,%esp
f010e834:	e9 a0 00 00 00       	jmp    f010e8d9 <tst_kheap+0x174>
	}
	else if(strcmp(arguments[1], "BF") == 0 || strcmp(arguments[1], "bf") == 0)
f010e839:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e83c:	83 c0 04             	add    $0x4,%eax
f010e83f:	8b 00                	mov    (%eax),%eax
f010e841:	83 ec 08             	sub    $0x8,%esp
f010e844:	68 09 47 13 f0       	push   $0xf0134709
f010e849:	50                   	push   %eax
f010e84a:	e8 35 0d 02 00       	call   f012f584 <strcmp>
f010e84f:	83 c4 10             	add    $0x10,%esp
f010e852:	85 c0                	test   %eax,%eax
f010e854:	74 1d                	je     f010e873 <tst_kheap+0x10e>
f010e856:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e859:	83 c0 04             	add    $0x4,%eax
f010e85c:	8b 00                	mov    (%eax),%eax
f010e85e:	83 ec 08             	sub    $0x8,%esp
f010e861:	68 0c 47 13 f0       	push   $0xf013470c
f010e866:	50                   	push   %eax
f010e867:	e8 18 0d 02 00       	call   f012f584 <strcmp>
f010e86c:	83 c4 10             	add    $0x10,%esp
f010e86f:	85 c0                	test   %eax,%eax
f010e871:	75 17                	jne    f010e88a <tst_kheap+0x125>
	{
		setKHeapPlacementStrategyBESTFIT();
f010e873:	e8 05 f9 ff ff       	call   f010e17d <setKHeapPlacementStrategyBESTFIT>
		cprintf("Kernel Heap placement strategy is BEST FIT\n");
f010e878:	83 ec 0c             	sub    $0xc,%esp
f010e87b:	68 10 47 13 f0       	push   $0xf0134710
f010e880:	e8 ac 25 ff ff       	call   f0100e31 <cprintf>
f010e885:	83 c4 10             	add    $0x10,%esp
f010e888:	eb 4f                	jmp    f010e8d9 <tst_kheap+0x174>
	}
	else if(strcmp(arguments[1], "NF") == 0 || strcmp(arguments[1], "nf") == 0)
f010e88a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e88d:	83 c0 04             	add    $0x4,%eax
f010e890:	8b 00                	mov    (%eax),%eax
f010e892:	83 ec 08             	sub    $0x8,%esp
f010e895:	68 3c 47 13 f0       	push   $0xf013473c
f010e89a:	50                   	push   %eax
f010e89b:	e8 e4 0c 02 00       	call   f012f584 <strcmp>
f010e8a0:	83 c4 10             	add    $0x10,%esp
f010e8a3:	85 c0                	test   %eax,%eax
f010e8a5:	74 1d                	je     f010e8c4 <tst_kheap+0x15f>
f010e8a7:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e8aa:	83 c0 04             	add    $0x4,%eax
f010e8ad:	8b 00                	mov    (%eax),%eax
f010e8af:	83 ec 08             	sub    $0x8,%esp
f010e8b2:	68 3f 47 13 f0       	push   $0xf013473f
f010e8b7:	50                   	push   %eax
f010e8b8:	e8 c7 0c 02 00       	call   f012f584 <strcmp>
f010e8bd:	83 c4 10             	add    $0x10,%esp
f010e8c0:	85 c0                	test   %eax,%eax
f010e8c2:	75 15                	jne    f010e8d9 <tst_kheap+0x174>
	{
		setKHeapPlacementStrategyNEXTFIT();
f010e8c4:	e8 c4 f8 ff ff       	call   f010e18d <setKHeapPlacementStrategyNEXTFIT>
		cprintf("Kernel Heap placement strategy is NEXT FIT\n");
f010e8c9:	83 ec 0c             	sub    $0xc,%esp
f010e8cc:	68 44 47 13 f0       	push   $0xf0134744
f010e8d1:	e8 5b 25 ff ff       	call   f0100e31 <cprintf>
f010e8d6:	83 c4 10             	add    $0x10,%esp
	}

	// Test 1-kmalloc: tstkheap FF kmalloc 1
	if(strcmp(arguments[2], "kmalloc") == 0)
f010e8d9:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e8dc:	83 c0 08             	add    $0x8,%eax
f010e8df:	8b 00                	mov    (%eax),%eax
f010e8e1:	83 ec 08             	sub    $0x8,%esp
f010e8e4:	68 38 46 13 f0       	push   $0xf0134638
f010e8e9:	50                   	push   %eax
f010e8ea:	e8 95 0c 02 00       	call   f012f584 <strcmp>
f010e8ef:	83 c4 10             	add    $0x10,%esp
f010e8f2:	85 c0                	test   %eax,%eax
f010e8f4:	0f 85 13 01 00 00    	jne    f010ea0d <tst_kheap+0x2a8>
	{
		uint32 testNum = strtol(arguments[3], NULL, 10);
f010e8fa:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e8fd:	83 c0 0c             	add    $0xc,%eax
f010e900:	8b 00                	mov    (%eax),%eax
f010e902:	83 ec 04             	sub    $0x4,%esp
f010e905:	6a 0a                	push   $0xa
f010e907:	6a 00                	push   $0x0
f010e909:	50                   	push   %eax
f010e90a:	e8 c9 0e 02 00       	call   f012f7d8 <strtol>
f010e90f:	83 c4 10             	add    $0x10,%esp
f010e912:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if(isKHeapPlacementStrategyFIRSTFIT())
f010e915:	e8 83 f8 ff ff       	call   f010e19d <isKHeapPlacementStrategyFIRSTFIT>
f010e91a:	84 c0                	test   %al,%al
f010e91c:	74 54                	je     f010e972 <tst_kheap+0x20d>
		{
			if (testNum == 0)
f010e91e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010e922:	75 1a                	jne    f010e93e <tst_kheap+0x1d9>
			{
				cprintf("Error: [Kernel.FirstFit] must specify the test number (1 or 2) as an argument\n");
f010e924:	83 ec 0c             	sub    $0xc,%esp
f010e927:	68 70 47 13 f0       	push   $0xf0134770
f010e92c:	e8 00 25 ff ff       	call   f0100e31 <cprintf>
f010e931:	83 c4 10             	add    $0x10,%esp
				return 0;
f010e934:	b8 00 00 00 00       	mov    $0x0,%eax
f010e939:	e9 ab 01 00 00       	jmp    f010eae9 <tst_kheap+0x384>
			}
			//Test FIRST FIT allocation
			if (testNum == 1)
f010e93e:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f010e942:	75 0a                	jne    f010e94e <tst_kheap+0x1e9>
				test_kmalloc();
f010e944:	e8 58 a1 00 00       	call   f0118aa1 <test_kmalloc>
f010e949:	e9 b5 00 00 00       	jmp    f010ea03 <tst_kheap+0x29e>
			else if (testNum == 2)
f010e94e:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f010e952:	75 0a                	jne    f010e95e <tst_kheap+0x1f9>
				test_kmalloc_firstfit1();
f010e954:	e8 95 e3 00 00       	call   f011ccee <test_kmalloc_firstfit1>
f010e959:	e9 a5 00 00 00       	jmp    f010ea03 <tst_kheap+0x29e>
			else if (testNum == 3)
f010e95e:	83 7d f4 03          	cmpl   $0x3,-0xc(%ebp)
f010e962:	0f 85 9b 00 00 00    	jne    f010ea03 <tst_kheap+0x29e>
				test_kmalloc_firstfit2();
f010e968:	e8 2f f4 00 00       	call   f011dd9c <test_kmalloc_firstfit2>
f010e96d:	e9 91 00 00 00       	jmp    f010ea03 <tst_kheap+0x29e>
		}
		else if(isKHeapPlacementStrategyBESTFIT())
f010e972:	e8 3b f8 ff ff       	call   f010e1b2 <isKHeapPlacementStrategyBESTFIT>
f010e977:	84 c0                	test   %al,%al
f010e979:	74 47                	je     f010e9c2 <tst_kheap+0x25d>
		{
			if (testNum == 0)
f010e97b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010e97f:	75 1a                	jne    f010e99b <tst_kheap+0x236>
			{
				cprintf("Error: [Kernel.BestFit] must specify the test number (1, 2, 3) as an argument\n");
f010e981:	83 ec 0c             	sub    $0xc,%esp
f010e984:	68 c0 47 13 f0       	push   $0xf01347c0
f010e989:	e8 a3 24 ff ff       	call   f0100e31 <cprintf>
f010e98e:	83 c4 10             	add    $0x10,%esp
				return 0;
f010e991:	b8 00 00 00 00       	mov    $0x0,%eax
f010e996:	e9 4e 01 00 00       	jmp    f010eae9 <tst_kheap+0x384>
			}
			if (testNum == 1)
f010e99b:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f010e99f:	75 07                	jne    f010e9a8 <tst_kheap+0x243>
				test_kmalloc();
f010e9a1:	e8 fb a0 00 00       	call   f0118aa1 <test_kmalloc>
f010e9a6:	eb 5b                	jmp    f010ea03 <tst_kheap+0x29e>
			else if (testNum == 2)
f010e9a8:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f010e9ac:	75 07                	jne    f010e9b5 <tst_kheap+0x250>
				test_kmalloc_bestfit1();
f010e9ae:	e8 b7 c3 00 00       	call   f011ad6a <test_kmalloc_bestfit1>
f010e9b3:	eb 4e                	jmp    f010ea03 <tst_kheap+0x29e>
			else if (testNum == 3)
f010e9b5:	83 7d f4 03          	cmpl   $0x3,-0xc(%ebp)
f010e9b9:	75 48                	jne    f010ea03 <tst_kheap+0x29e>
				test_kmalloc_bestfit2();
f010e9bb:	e8 42 d3 00 00       	call   f011bd02 <test_kmalloc_bestfit2>
f010e9c0:	eb 41                	jmp    f010ea03 <tst_kheap+0x29e>
		}
		else if(isKHeapPlacementStrategyNEXTFIT())
f010e9c2:	e8 00 f8 ff ff       	call   f010e1c7 <isKHeapPlacementStrategyNEXTFIT>
f010e9c7:	84 c0                	test   %al,%al
f010e9c9:	74 38                	je     f010ea03 <tst_kheap+0x29e>
		{
			if (testNum == 0)
f010e9cb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010e9cf:	75 1a                	jne    f010e9eb <tst_kheap+0x286>
			{
				cprintf("Error: [Kernel.NextFit] must specify the test number (1 or 2) as an argument\n");
f010e9d1:	83 ec 0c             	sub    $0xc,%esp
f010e9d4:	68 10 48 13 f0       	push   $0xf0134810
f010e9d9:	e8 53 24 ff ff       	call   f0100e31 <cprintf>
f010e9de:	83 c4 10             	add    $0x10,%esp
				return 0;
f010e9e1:	b8 00 00 00 00       	mov    $0x0,%eax
f010e9e6:	e9 fe 00 00 00       	jmp    f010eae9 <tst_kheap+0x384>
			}
			//Test cont. allocation
			if (testNum == 1)
f010e9eb:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f010e9ef:	75 07                	jne    f010e9f8 <tst_kheap+0x293>
				test_kmalloc();
f010e9f1:	e8 ab a0 00 00       	call   f0118aa1 <test_kmalloc>
f010e9f6:	eb 0b                	jmp    f010ea03 <tst_kheap+0x29e>
			//Test nextfit strategy
			else if (testNum == 2)
f010e9f8:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f010e9fc:	75 05                	jne    f010ea03 <tst_kheap+0x29e>
				test_kmalloc_nextfit();
f010e9fe:	e8 aa b0 00 00       	call   f0119aad <test_kmalloc_nextfit>
		}
		return 0;
f010ea03:	b8 00 00 00 00       	mov    $0x0,%eax
f010ea08:	e9 dc 00 00 00       	jmp    f010eae9 <tst_kheap+0x384>
	}
	// Test 2-kfree: tstkheap FF kfree
	else if(strcmp(arguments[2], "kfree") == 0)
f010ea0d:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ea10:	83 c0 08             	add    $0x8,%eax
f010ea13:	8b 00                	mov    (%eax),%eax
f010ea15:	83 ec 08             	sub    $0x8,%esp
f010ea18:	68 5e 48 13 f0       	push   $0xf013485e
f010ea1d:	50                   	push   %eax
f010ea1e:	e8 61 0b 02 00       	call   f012f584 <strcmp>
f010ea23:	83 c4 10             	add    $0x10,%esp
f010ea26:	85 c0                	test   %eax,%eax
f010ea28:	75 28                	jne    f010ea52 <tst_kheap+0x2ed>
	{
		if (isKHeapPlacementStrategyBESTFIT() || isKHeapPlacementStrategyFIRSTFIT())
f010ea2a:	e8 83 f7 ff ff       	call   f010e1b2 <isKHeapPlacementStrategyBESTFIT>
f010ea2f:	84 c0                	test   %al,%al
f010ea31:	75 09                	jne    f010ea3c <tst_kheap+0x2d7>
f010ea33:	e8 65 f7 ff ff       	call   f010e19d <isKHeapPlacementStrategyFIRSTFIT>
f010ea38:	84 c0                	test   %al,%al
f010ea3a:	74 07                	je     f010ea43 <tst_kheap+0x2de>
		{
			test_kfree_bestfirstfit();
f010ea3c:	e8 14 30 01 00       	call   f0121a55 <test_kfree_bestfirstfit>
f010ea41:	eb 05                	jmp    f010ea48 <tst_kheap+0x2e3>
		}
		else //NEXT & CONT
		{
			test_kfree();
f010ea43:	e8 1b 12 01 00       	call   f011fc63 <test_kfree>
		}
		return 0;
f010ea48:	b8 00 00 00 00       	mov    $0x0,%eax
f010ea4d:	e9 97 00 00 00       	jmp    f010eae9 <tst_kheap+0x384>
	}
	// Test 3-kphysaddr: tstkheap FF kphysaddr
	else if(strcmp(arguments[2], "kphysaddr") == 0)
f010ea52:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ea55:	83 c0 08             	add    $0x8,%eax
f010ea58:	8b 00                	mov    (%eax),%eax
f010ea5a:	83 ec 08             	sub    $0x8,%esp
f010ea5d:	68 64 48 13 f0       	push   $0xf0134864
f010ea62:	50                   	push   %eax
f010ea63:	e8 1c 0b 02 00       	call   f012f584 <strcmp>
f010ea68:	83 c4 10             	add    $0x10,%esp
f010ea6b:	85 c0                	test   %eax,%eax
f010ea6d:	75 0c                	jne    f010ea7b <tst_kheap+0x316>
	{
		test_kheap_phys_addr();
f010ea6f:	e8 8b 47 01 00       	call   f01231ff <test_kheap_phys_addr>
		return 0;
f010ea74:	b8 00 00 00 00       	mov    $0x0,%eax
f010ea79:	eb 6e                	jmp    f010eae9 <tst_kheap+0x384>
	}
	// Test 4-kvirtaddr: tstkheap FF kvirtaddr
	else if(strcmp(arguments[2], "kvirtaddr") == 0)
f010ea7b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ea7e:	83 c0 08             	add    $0x8,%eax
f010ea81:	8b 00                	mov    (%eax),%eax
f010ea83:	83 ec 08             	sub    $0x8,%esp
f010ea86:	68 6e 48 13 f0       	push   $0xf013486e
f010ea8b:	50                   	push   %eax
f010ea8c:	e8 f3 0a 02 00       	call   f012f584 <strcmp>
f010ea91:	83 c4 10             	add    $0x10,%esp
f010ea94:	85 c0                	test   %eax,%eax
f010ea96:	75 0c                	jne    f010eaa4 <tst_kheap+0x33f>
	{
		test_kheap_virt_addr();
f010ea98:	e8 a0 58 01 00       	call   f012433d <test_kheap_virt_addr>
		return 0;
f010ea9d:	b8 00 00 00 00       	mov    $0x0,%eax
f010eaa2:	eb 45                	jmp    f010eae9 <tst_kheap+0x384>
	}
	// Test 5-krealloc: tstkheap BF krealloc
	else if(strcmp(arguments[2], "krealloc") == 0)
f010eaa4:	8b 45 0c             	mov    0xc(%ebp),%eax
f010eaa7:	83 c0 08             	add    $0x8,%eax
f010eaaa:	8b 00                	mov    (%eax),%eax
f010eaac:	83 ec 08             	sub    $0x8,%esp
f010eaaf:	68 78 48 13 f0       	push   $0xf0134878
f010eab4:	50                   	push   %eax
f010eab5:	e8 ca 0a 02 00       	call   f012f584 <strcmp>
f010eaba:	83 c4 10             	add    $0x10,%esp
f010eabd:	85 c0                	test   %eax,%eax
f010eabf:	75 23                	jne    f010eae4 <tst_kheap+0x37f>
	{
		if (isKHeapPlacementStrategyNEXTFIT())
f010eac1:	e8 01 f7 ff ff       	call   f010e1c7 <isKHeapPlacementStrategyNEXTFIT>
f010eac6:	84 c0                	test   %al,%al
f010eac8:	74 05                	je     f010eacf <tst_kheap+0x36a>
		{
			test_krealloc();
f010eaca:	e8 11 ba 01 00       	call   f012a4e0 <test_krealloc>
		}
		if (isKHeapPlacementStrategyBESTFIT())
f010eacf:	e8 de f6 ff ff       	call   f010e1b2 <isKHeapPlacementStrategyBESTFIT>
f010ead4:	84 c0                	test   %al,%al
f010ead6:	74 05                	je     f010eadd <tst_kheap+0x378>
		{
			test_krealloc_BF();
f010ead8:	e8 97 d7 01 00       	call   f012c274 <test_krealloc_BF>
		}
		return 0;
f010eadd:	b8 00 00 00 00       	mov    $0x0,%eax
f010eae2:	eb 05                	jmp    f010eae9 <tst_kheap+0x384>
	}
	return 0;
f010eae4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010eae9:	c9                   	leave  
f010eaea:	c3                   	ret    

f010eaeb <test_initialize_dynamic_allocator>:

#define Mega  (1024*1024)
#define kilo (1024)

void test_initialize_dynamic_allocator()
{
f010eaeb:	55                   	push   %ebp
f010eaec:	89 e5                	mov    %esp,%ebp
f010eaee:	83 ec 18             	sub    $0x18,%esp
	return;
#endif


	//write initial data at the start (for checking)
	int* tmp_ptr = (int*)KERNEL_HEAP_START;
f010eaf1:	c7 45 f4 00 00 00 f6 	movl   $0xf6000000,-0xc(%ebp)
	*tmp_ptr = -1 ;
f010eaf8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010eafb:	c7 00 ff ff ff ff    	movl   $0xffffffff,(%eax)
	*(tmp_ptr+1) = 1 ;
f010eb01:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010eb04:	83 c0 04             	add    $0x4,%eax
f010eb07:	c7 00 01 00 00 00    	movl   $0x1,(%eax)

	uint32 initAllocatedSpace = 2*Mega;
f010eb0d:	c7 45 f0 00 00 20 00 	movl   $0x200000,-0x10(%ebp)
	initialize_dynamic_allocator(KERNEL_HEAP_START, initAllocatedSpace);
f010eb14:	83 ec 08             	sub    $0x8,%esp
f010eb17:	ff 75 f0             	pushl  -0x10(%ebp)
f010eb1a:	68 00 00 00 f6       	push   $0xf6000000
f010eb1f:	e8 d5 14 02 00       	call   f012fff9 <initialize_dynamic_allocator>
f010eb24:	83 c4 10             	add    $0x10,%esp


	//Check#1: Metadata
	struct BlockMetaData *metaDataBegin = (struct BlockMetaData *) KERNEL_HEAP_START ;
f010eb27:	c7 45 ec 00 00 00 f6 	movl   $0xf6000000,-0x14(%ebp)
	if (metaDataBegin->is_free != 1 || metaDataBegin->size != initAllocatedSpace)
f010eb2e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010eb31:	8a 40 04             	mov    0x4(%eax),%al
f010eb34:	3c 01                	cmp    $0x1,%al
f010eb36:	75 0a                	jne    f010eb42 <test_initialize_dynamic_allocator+0x57>
f010eb38:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010eb3b:	8b 00                	mov    (%eax),%eax
f010eb3d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010eb40:	74 14                	je     f010eb56 <test_initialize_dynamic_allocator+0x6b>
	{
		panic("Content of Meta data are not set correctly");
f010eb42:	83 ec 04             	sub    $0x4,%esp
f010eb45:	68 84 48 13 f0       	push   $0xf0134884
f010eb4a:	6a 29                	push   $0x29
f010eb4c:	68 b0 48 13 f0       	push   $0xf01348b0
f010eb51:	e8 5a 16 ff ff       	call   f01001b0 <_panic>
	}

	cprintf("Congratulations!! test initialize_dynamic_allocator completed successfully.\n");
f010eb56:	83 ec 0c             	sub    $0xc,%esp
f010eb59:	68 d4 48 13 f0       	push   $0xf01348d4
f010eb5e:	e8 ce 22 ff ff       	call   f0100e31 <cprintf>
f010eb63:	83 c4 10             	add    $0x10,%esp
}
f010eb66:	90                   	nop
f010eb67:	c9                   	leave  
f010eb68:	c3                   	ret    

f010eb69 <test_initial_alloc>:
short* startVAs[numOfAllocs*allocCntPerSize+1] ;
short* midVAs[numOfAllocs*allocCntPerSize+1] ;
short* endVAs[numOfAllocs*allocCntPerSize+1] ;

int test_initial_alloc(int ALLOC_STRATEGY)
{
f010eb69:	55                   	push   %ebp
f010eb6a:	89 e5                	mov    %esp,%ebp
f010eb6c:	83 ec 48             	sub    $0x48,%esp
#if USE_KHEAP
	panic("test_initial_alloc: the kernel heap should be disabled. make sure USE_KHEAP = 0");
	return 0;
#endif

	int eval = 0;
f010eb6f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	bool is_correct = 1;
f010eb76:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	int initAllocatedSpace = 3*Mega;
f010eb7d:	c7 45 d0 00 00 30 00 	movl   $0x300000,-0x30(%ebp)
	initialize_dynamic_allocator(KERNEL_HEAP_START, initAllocatedSpace);
f010eb84:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010eb87:	83 ec 08             	sub    $0x8,%esp
f010eb8a:	50                   	push   %eax
f010eb8b:	68 00 00 00 f6       	push   $0xf6000000
f010eb90:	e8 64 14 02 00       	call   f012fff9 <initialize_dynamic_allocator>
f010eb95:	83 c4 10             	add    $0x10,%esp

	void * va ;
	//====================================================================//
	/*INITIAL ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	cprintf("	1: Try to allocate large block [not fit in any space]\n\n") ;
f010eb98:	83 ec 0c             	sub    $0xc,%esp
f010eb9b:	68 24 49 13 f0       	push   $0xf0134924
f010eba0:	e8 8c 22 ff ff       	call   f0100e31 <cprintf>
f010eba5:	83 c4 10             	add    $0x10,%esp

	is_correct = 1;
f010eba8:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	va = alloc_block(3*initAllocatedSpace, ALLOC_STRATEGY);
f010ebaf:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010ebb2:	89 c2                	mov    %eax,%edx
f010ebb4:	01 d2                	add    %edx,%edx
f010ebb6:	01 d0                	add    %edx,%eax
f010ebb8:	83 ec 08             	sub    $0x8,%esp
f010ebbb:	ff 75 08             	pushl  0x8(%ebp)
f010ebbe:	50                   	push   %eax
f010ebbf:	e8 1c 13 02 00       	call   f012fee0 <alloc_block>
f010ebc4:	83 c4 10             	add    $0x10,%esp
f010ebc7:	89 45 cc             	mov    %eax,-0x34(%ebp)

	//Check returned va
	if(va != NULL)
f010ebca:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
f010ebce:	74 17                	je     f010ebe7 <test_initial_alloc+0x7e>
	{
		is_correct = 0;
f010ebd0:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("alloc_block_xx #1: WRONG ALLOC - alloc_block_xx didn't call sbrk while it shall do.\n");
f010ebd7:	83 ec 0c             	sub    $0xc,%esp
f010ebda:	68 60 49 13 f0       	push   $0xf0134960
f010ebdf:	e8 4d 22 ff ff       	call   f0100e31 <cprintf>
f010ebe4:	83 c4 10             	add    $0x10,%esp
	}
	va = alloc_block(initAllocatedSpace, ALLOC_STRATEGY);
f010ebe7:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010ebea:	83 ec 08             	sub    $0x8,%esp
f010ebed:	ff 75 08             	pushl  0x8(%ebp)
f010ebf0:	50                   	push   %eax
f010ebf1:	e8 ea 12 02 00       	call   f012fee0 <alloc_block>
f010ebf6:	83 c4 10             	add    $0x10,%esp
f010ebf9:	89 45 cc             	mov    %eax,-0x34(%ebp)

	//Check returned va
	if(va != NULL)
f010ebfc:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
f010ec00:	74 17                	je     f010ec19 <test_initial_alloc+0xb0>
	{
		is_correct = 0;
f010ec02:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("alloc_block_xx #2: WRONG ALLOC - alloc_block_xx didn't call sbrk while it shall do.\n");
f010ec09:	83 ec 0c             	sub    $0xc,%esp
f010ec0c:	68 b8 49 13 f0       	push   $0xf01349b8
f010ec11:	e8 1b 22 ff ff       	call   f0100e31 <cprintf>
f010ec16:	83 c4 10             	add    $0x10,%esp
	}

	if (is_correct)
f010ec19:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010ec1d:	74 04                	je     f010ec23 <test_initial_alloc+0xba>
	{
		eval += 5;
f010ec1f:	83 45 f4 05          	addl   $0x5,-0xc(%ebp)
	}
	//====================================================================//
	/*INITIAL ALLOC Scenario 2: Try to allocate set of blocks with different sizes*/
	cprintf("	2: Try to allocate set of blocks with different sizes [all should fit]\n\n") ;
f010ec23:	83 ec 0c             	sub    $0xc,%esp
f010ec26:	68 10 4a 13 f0       	push   $0xf0134a10
f010ec2b:	e8 01 22 ff ff       	call   f0100e31 <cprintf>
f010ec30:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010ec33:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)

	int totalSizes = 0;
f010ec3a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	for (int i = 0; i < numOfAllocs; ++i)
f010ec41:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f010ec48:	eb 2a                	jmp    f010ec74 <test_initial_alloc+0x10b>
	{
		totalSizes += allocSizes[i] * allocCntPerSize ;
f010ec4a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010ec4d:	8b 14 85 20 fb 18 f0 	mov    -0xfe704e0(,%eax,4),%edx
f010ec54:	89 d0                	mov    %edx,%eax
f010ec56:	c1 e0 02             	shl    $0x2,%eax
f010ec59:	01 d0                	add    %edx,%eax
f010ec5b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010ec62:	01 d0                	add    %edx,%eax
f010ec64:	c1 e0 03             	shl    $0x3,%eax
f010ec67:	89 c2                	mov    %eax,%edx
f010ec69:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ec6c:	01 d0                	add    %edx,%eax
f010ec6e:	89 45 ec             	mov    %eax,-0x14(%ebp)
	/*INITIAL ALLOC Scenario 2: Try to allocate set of blocks with different sizes*/
	cprintf("	2: Try to allocate set of blocks with different sizes [all should fit]\n\n") ;
	is_correct = 1;

	int totalSizes = 0;
	for (int i = 0; i < numOfAllocs; ++i)
f010ec71:	ff 45 e8             	incl   -0x18(%ebp)
f010ec74:	83 7d e8 06          	cmpl   $0x6,-0x18(%ebp)
f010ec78:	7e d0                	jle    f010ec4a <test_initial_alloc+0xe1>
	{
		totalSizes += allocSizes[i] * allocCntPerSize ;
	}
	int remainSize = initAllocatedSpace - totalSizes ;
f010ec7a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010ec7d:	2b 45 ec             	sub    -0x14(%ebp),%eax
f010ec80:	89 45 c8             	mov    %eax,-0x38(%ebp)
	//cprintf("\n********* Remaining size = %d\n", remainSize);
	if (remainSize <= 0)
f010ec83:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f010ec87:	7f 17                	jg     f010eca0 <test_initial_alloc+0x137>
	{
		is_correct = 0;
f010ec89:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("alloc_block_xx test is not configured correctly. Consider updating the initial allocated space OR the required allocations\n");
f010ec90:	83 ec 0c             	sub    $0xc,%esp
f010ec93:	68 5c 4a 13 f0       	push   $0xf0134a5c
f010ec98:	e8 94 21 ff ff       	call   f0100e31 <cprintf>
f010ec9d:	83 c4 10             	add    $0x10,%esp
	}
	int idx = 0;
f010eca0:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	void* curVA = (void*) KERNEL_HEAP_START ;
f010eca7:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
f010ecae:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f010ecb5:	e9 fc 00 00 00       	jmp    f010edb6 <test_initial_alloc+0x24d>
	{
		for (int j = 0; j < allocCntPerSize; ++j)
f010ecba:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f010ecc1:	e9 e0 00 00 00       	jmp    f010eda6 <test_initial_alloc+0x23d>
		{
			actualSize = allocSizes[i] - sizeOfMetaData();
f010ecc6:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ecc9:	8b 04 85 20 fb 18 f0 	mov    -0xfe704e0(,%eax,4),%eax
f010ecd0:	83 e8 10             	sub    $0x10,%eax
f010ecd3:	89 45 c4             	mov    %eax,-0x3c(%ebp)
			va = startVAs[idx] = alloc_block(actualSize, ALLOC_STRATEGY);
f010ecd6:	83 ec 08             	sub    $0x8,%esp
f010ecd9:	ff 75 08             	pushl  0x8(%ebp)
f010ecdc:	ff 75 c4             	pushl  -0x3c(%ebp)
f010ecdf:	e8 fc 11 02 00       	call   f012fee0 <alloc_block>
f010ece4:	83 c4 10             	add    $0x10,%esp
f010ece7:	89 c2                	mov    %eax,%edx
f010ece9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ecec:	89 14 85 80 b3 2d f0 	mov    %edx,-0xfd24c80(,%eax,4)
f010ecf3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ecf6:	8b 04 85 80 b3 2d f0 	mov    -0xfd24c80(,%eax,4),%eax
f010ecfd:	89 45 cc             	mov    %eax,-0x34(%ebp)
			midVAs[idx] = va + actualSize/2 ;
f010ed00:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010ed03:	d1 e8                	shr    %eax
f010ed05:	89 c2                	mov    %eax,%edx
f010ed07:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010ed0a:	01 c2                	add    %eax,%edx
f010ed0c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ed0f:	89 14 85 80 df 2d f0 	mov    %edx,-0xfd22080(,%eax,4)
			endVAs[idx] = va + actualSize - sizeof(short);
f010ed16:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010ed19:	8d 50 fe             	lea    -0x2(%eax),%edx
f010ed1c:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010ed1f:	01 c2                	add    %eax,%edx
f010ed21:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ed24:	89 14 85 80 c9 2d f0 	mov    %edx,-0xfd23680(,%eax,4)
			//Check returned va
			if(va == NULL || (va != (curVA + sizeOfMetaData())))
f010ed2b:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
f010ed2f:	74 0b                	je     f010ed3c <test_initial_alloc+0x1d3>
f010ed31:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010ed34:	83 c0 10             	add    $0x10,%eax
f010ed37:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f010ed3a:	74 27                	je     f010ed63 <test_initial_alloc+0x1fa>
			{
				if (is_correct)
f010ed3c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010ed40:	74 21                	je     f010ed63 <test_initial_alloc+0x1fa>
				{
					is_correct = 0;
f010ed42:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
					cprintf("alloc_block_xx #3.%d: WRONG ALLOC - alloc_block_xx return wrong address. Expected %x, Actual %x\n", idx, curVA + sizeOfMetaData() ,va);
f010ed49:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010ed4c:	83 c0 10             	add    $0x10,%eax
f010ed4f:	ff 75 cc             	pushl  -0x34(%ebp)
f010ed52:	50                   	push   %eax
f010ed53:	ff 75 e4             	pushl  -0x1c(%ebp)
f010ed56:	68 d8 4a 13 f0       	push   $0xf0134ad8
f010ed5b:	e8 d1 20 ff ff       	call   f0100e31 <cprintf>
f010ed60:	83 c4 10             	add    $0x10,%esp
				}
			}
			curVA += allocSizes[i] ;
f010ed63:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ed66:	8b 04 85 20 fb 18 f0 	mov    -0xfe704e0(,%eax,4),%eax
f010ed6d:	01 45 e0             	add    %eax,-0x20(%ebp)
			*(startVAs[idx]) = idx ;
f010ed70:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ed73:	8b 14 85 80 b3 2d f0 	mov    -0xfd24c80(,%eax,4),%edx
f010ed7a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ed7d:	66 89 02             	mov    %ax,(%edx)
			*(midVAs[idx]) = idx ;
f010ed80:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ed83:	8b 14 85 80 df 2d f0 	mov    -0xfd22080(,%eax,4),%edx
f010ed8a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ed8d:	66 89 02             	mov    %ax,(%edx)
			*(endVAs[idx]) = idx ;
f010ed90:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ed93:	8b 14 85 80 c9 2d f0 	mov    -0xfd23680(,%eax,4),%edx
f010ed9a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ed9d:	66 89 02             	mov    %ax,(%edx)
			idx++;
f010eda0:	ff 45 e4             	incl   -0x1c(%ebp)
	int idx = 0;
	void* curVA = (void*) KERNEL_HEAP_START ;
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
	{
		for (int j = 0; j < allocCntPerSize; ++j)
f010eda3:	ff 45 d8             	incl   -0x28(%ebp)
f010eda6:	81 7d d8 c7 00 00 00 	cmpl   $0xc7,-0x28(%ebp)
f010edad:	0f 8e 13 ff ff ff    	jle    f010ecc6 <test_initial_alloc+0x15d>
		cprintf("alloc_block_xx test is not configured correctly. Consider updating the initial allocated space OR the required allocations\n");
	}
	int idx = 0;
	void* curVA = (void*) KERNEL_HEAP_START ;
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
f010edb3:	ff 45 dc             	incl   -0x24(%ebp)
f010edb6:	83 7d dc 06          	cmpl   $0x6,-0x24(%ebp)
f010edba:	0f 8e fa fe ff ff    	jle    f010ecba <test_initial_alloc+0x151>
			idx++;
		}
		//if (is_correct == 0)
		//break;
	}
	if (is_correct)
f010edc0:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010edc4:	74 04                	je     f010edca <test_initial_alloc+0x261>
	{
		eval += 20;
f010edc6:	83 45 f4 14          	addl   $0x14,-0xc(%ebp)
	}
	//====================================================================//
	/*INITIAL ALLOC Scenario 3: Try to allocate a block with a size equal to the size of the first existing free block*/
	cprintf("	3: Try to allocate a block with equal to the first existing free block\n\n") ;
f010edca:	83 ec 0c             	sub    $0xc,%esp
f010edcd:	68 3c 4b 13 f0       	push   $0xf0134b3c
f010edd2:	e8 5a 20 ff ff       	call   f0100e31 <cprintf>
f010edd7:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010edda:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)

	actualSize = remainSize - sizeOfMetaData();
f010ede1:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010ede4:	83 e8 10             	sub    $0x10,%eax
f010ede7:	89 45 c4             	mov    %eax,-0x3c(%ebp)
	va = startVAs[idx] = alloc_block(actualSize, ALLOC_STRATEGY);
f010edea:	83 ec 08             	sub    $0x8,%esp
f010eded:	ff 75 08             	pushl  0x8(%ebp)
f010edf0:	ff 75 c4             	pushl  -0x3c(%ebp)
f010edf3:	e8 e8 10 02 00       	call   f012fee0 <alloc_block>
f010edf8:	83 c4 10             	add    $0x10,%esp
f010edfb:	89 c2                	mov    %eax,%edx
f010edfd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ee00:	89 14 85 80 b3 2d f0 	mov    %edx,-0xfd24c80(,%eax,4)
f010ee07:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ee0a:	8b 04 85 80 b3 2d f0 	mov    -0xfd24c80(,%eax,4),%eax
f010ee11:	89 45 cc             	mov    %eax,-0x34(%ebp)
	midVAs[idx] = va + actualSize/2 ;
f010ee14:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010ee17:	d1 e8                	shr    %eax
f010ee19:	89 c2                	mov    %eax,%edx
f010ee1b:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010ee1e:	01 c2                	add    %eax,%edx
f010ee20:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ee23:	89 14 85 80 df 2d f0 	mov    %edx,-0xfd22080(,%eax,4)
	endVAs[idx] = va + actualSize - sizeof(short);
f010ee2a:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010ee2d:	8d 50 fe             	lea    -0x2(%eax),%edx
f010ee30:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010ee33:	01 c2                	add    %eax,%edx
f010ee35:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ee38:	89 14 85 80 c9 2d f0 	mov    %edx,-0xfd23680(,%eax,4)
	//Check returned va
	if(va == NULL || (va != (curVA + sizeOfMetaData())))
f010ee3f:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
f010ee43:	74 0b                	je     f010ee50 <test_initial_alloc+0x2e7>
f010ee45:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010ee48:	83 c0 10             	add    $0x10,%eax
f010ee4b:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f010ee4e:	74 17                	je     f010ee67 <test_initial_alloc+0x2fe>
	{
		is_correct = 0;
f010ee50:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("alloc_block_xx #4: WRONG ALLOC - alloc_block_xx return wrong address.\n");
f010ee57:	83 ec 0c             	sub    $0xc,%esp
f010ee5a:	68 88 4b 13 f0       	push   $0xf0134b88
f010ee5f:	e8 cd 1f ff ff       	call   f0100e31 <cprintf>
f010ee64:	83 c4 10             	add    $0x10,%esp
	}
	*(startVAs[idx]) = idx ;
f010ee67:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ee6a:	8b 14 85 80 b3 2d f0 	mov    -0xfd24c80(,%eax,4),%edx
f010ee71:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ee74:	66 89 02             	mov    %ax,(%edx)
	*(midVAs[idx]) = idx ;
f010ee77:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ee7a:	8b 14 85 80 df 2d f0 	mov    -0xfd22080(,%eax,4),%edx
f010ee81:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ee84:	66 89 02             	mov    %ax,(%edx)
	*(endVAs[idx]) = idx ;
f010ee87:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ee8a:	8b 14 85 80 c9 2d f0 	mov    -0xfd23680(,%eax,4),%edx
f010ee91:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ee94:	66 89 02             	mov    %ax,(%edx)
	if (is_correct)
f010ee97:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010ee9b:	74 04                	je     f010eea1 <test_initial_alloc+0x338>
	{
		eval += 5;
f010ee9d:	83 45 f4 05          	addl   $0x5,-0xc(%ebp)
	}
	//====================================================================//
	/*INITIAL ALLOC Scenario 4: Check stored data inside each allocated block*/
	cprintf("	4: Check stored data inside each allocated block\n\n") ;
f010eea1:	83 ec 0c             	sub    $0xc,%esp
f010eea4:	68 d0 4b 13 f0       	push   $0xf0134bd0
f010eea9:	e8 83 1f ff ff       	call   f0100e31 <cprintf>
f010eeae:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010eeb1:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)

	for (int i = 0; i < idx; ++i)
f010eeb8:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f010eebf:	eb 5b                	jmp    f010ef1c <test_initial_alloc+0x3b3>
	{
		if (*(startVAs[i]) != i || *(midVAs[i]) != i ||	*(endVAs[i]) != i)
f010eec1:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010eec4:	8b 04 85 80 b3 2d f0 	mov    -0xfd24c80(,%eax,4),%eax
f010eecb:	66 8b 00             	mov    (%eax),%ax
f010eece:	98                   	cwtl   
f010eecf:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f010eed2:	75 26                	jne    f010eefa <test_initial_alloc+0x391>
f010eed4:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010eed7:	8b 04 85 80 df 2d f0 	mov    -0xfd22080(,%eax,4),%eax
f010eede:	66 8b 00             	mov    (%eax),%ax
f010eee1:	98                   	cwtl   
f010eee2:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f010eee5:	75 13                	jne    f010eefa <test_initial_alloc+0x391>
f010eee7:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010eeea:	8b 04 85 80 c9 2d f0 	mov    -0xfd23680(,%eax,4),%eax
f010eef1:	66 8b 00             	mov    (%eax),%ax
f010eef4:	98                   	cwtl   
f010eef5:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f010eef8:	74 1f                	je     f010ef19 <test_initial_alloc+0x3b0>
		{
			is_correct = 0;
f010eefa:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("alloc_block_xx #4.%d: WRONG! content of the block is not correct. Expected %d\n",i, i);
f010ef01:	83 ec 04             	sub    $0x4,%esp
f010ef04:	ff 75 d4             	pushl  -0x2c(%ebp)
f010ef07:	ff 75 d4             	pushl  -0x2c(%ebp)
f010ef0a:	68 04 4c 13 f0       	push   $0xf0134c04
f010ef0f:	e8 1d 1f ff ff       	call   f0100e31 <cprintf>
f010ef14:	83 c4 10             	add    $0x10,%esp
			break;
f010ef17:	eb 0b                	jmp    f010ef24 <test_initial_alloc+0x3bb>
	//====================================================================//
	/*INITIAL ALLOC Scenario 4: Check stored data inside each allocated block*/
	cprintf("	4: Check stored data inside each allocated block\n\n") ;
	is_correct = 1;

	for (int i = 0; i < idx; ++i)
f010ef19:	ff 45 d4             	incl   -0x2c(%ebp)
f010ef1c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010ef1f:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f010ef22:	7c 9d                	jl     f010eec1 <test_initial_alloc+0x358>
			is_correct = 0;
			cprintf("alloc_block_xx #4.%d: WRONG! content of the block is not correct. Expected %d\n",i, i);
			break;
		}
	}
	if (is_correct)
f010ef24:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010ef28:	74 04                	je     f010ef2e <test_initial_alloc+0x3c5>
	{
		eval += 10;
f010ef2a:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)
	}
	return eval;
f010ef2e:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010ef31:	c9                   	leave  
f010ef32:	c3                   	ret    

f010ef33 <test_alloc_block_FF>:

void test_alloc_block_FF()
{
f010ef33:	55                   	push   %ebp
f010ef34:	89 e5                	mov    %esp,%ebp
f010ef36:	57                   	push   %edi
f010ef37:	56                   	push   %esi
f010ef38:	53                   	push   %ebx
f010ef39:	81 ec 8c 00 00 00    	sub    $0x8c,%esp
#if USE_KHEAP
	panic("test_alloc_block_FF: the kernel heap should be disabled. make sure USE_KHEAP = 0");
	return;
#endif

	int eval = 0;
f010ef3f:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	bool is_correct;
	void* va = NULL;
f010ef46:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	uint32 actualSize = 0;
f010ef4d:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)

	cprintf("=======================================================\n") ;
f010ef54:	83 ec 0c             	sub    $0xc,%esp
f010ef57:	68 54 4c 13 f0       	push   $0xf0134c54
f010ef5c:	e8 d0 1e ff ff       	call   f0100e31 <cprintf>
f010ef61:	83 c4 10             	add    $0x10,%esp
	cprintf("FIRST: Tests depend on the Allocate Function ONLY [40%]\n") ;
f010ef64:	83 ec 0c             	sub    $0xc,%esp
f010ef67:	68 90 4c 13 f0       	push   $0xf0134c90
f010ef6c:	e8 c0 1e ff ff       	call   f0100e31 <cprintf>
f010ef71:	83 c4 10             	add    $0x10,%esp
	cprintf("=======================================================\n") ;
f010ef74:	83 ec 0c             	sub    $0xc,%esp
f010ef77:	68 54 4c 13 f0       	push   $0xf0134c54
f010ef7c:	e8 b0 1e ff ff       	call   f0100e31 <cprintf>
f010ef81:	83 c4 10             	add    $0x10,%esp
	eval = test_initial_alloc(DA_FF);
f010ef84:	83 ec 0c             	sub    $0xc,%esp
f010ef87:	6a 01                	push   $0x1
f010ef89:	e8 db fb ff ff       	call   f010eb69 <test_initial_alloc>
f010ef8e:	83 c4 10             	add    $0x10,%esp
f010ef91:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	cprintf("====================================================\n") ;
f010ef94:	83 ec 0c             	sub    $0xc,%esp
f010ef97:	68 cc 4c 13 f0       	push   $0xf0134ccc
f010ef9c:	e8 90 1e ff ff       	call   f0100e31 <cprintf>
f010efa1:	83 c4 10             	add    $0x10,%esp
	cprintf("SECOND: Tests depend on BOTH Allocate and Free [60%] \n") ;
f010efa4:	83 ec 0c             	sub    $0xc,%esp
f010efa7:	68 04 4d 13 f0       	push   $0xf0134d04
f010efac:	e8 80 1e ff ff       	call   f0100e31 <cprintf>
f010efb1:	83 c4 10             	add    $0x10,%esp
	cprintf("====================================================\n") ;
f010efb4:	83 ec 0c             	sub    $0xc,%esp
f010efb7:	68 cc 4c 13 f0       	push   $0xf0134ccc
f010efbc:	e8 70 1e ff ff       	call   f0100e31 <cprintf>
f010efc1:	83 c4 10             	add    $0x10,%esp

	//Free set of blocks with different sizes (first block of each size)
	for (int i = 0; i < numOfAllocs; ++i)
f010efc4:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f010efcb:	eb 2c                	jmp    f010eff9 <test_alloc_block_FF+0xc6>
	{
		free_block(startVAs[i*allocCntPerSize]);
f010efcd:	8b 55 dc             	mov    -0x24(%ebp),%edx
f010efd0:	89 d0                	mov    %edx,%eax
f010efd2:	c1 e0 02             	shl    $0x2,%eax
f010efd5:	01 d0                	add    %edx,%eax
f010efd7:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010efde:	01 d0                	add    %edx,%eax
f010efe0:	c1 e0 03             	shl    $0x3,%eax
f010efe3:	8b 04 85 80 b3 2d f0 	mov    -0xfd24c80(,%eax,4),%eax
f010efea:	83 ec 0c             	sub    $0xc,%esp
f010efed:	50                   	push   %eax
f010efee:	e8 8b 14 02 00       	call   f013047e <free_block>
f010eff3:	83 c4 10             	add    $0x10,%esp
	cprintf("====================================================\n") ;
	cprintf("SECOND: Tests depend on BOTH Allocate and Free [60%] \n") ;
	cprintf("====================================================\n") ;

	//Free set of blocks with different sizes (first block of each size)
	for (int i = 0; i < numOfAllocs; ++i)
f010eff6:	ff 45 dc             	incl   -0x24(%ebp)
f010eff9:	83 7d dc 06          	cmpl   $0x6,-0x24(%ebp)
f010effd:	7e ce                	jle    f010efcd <test_alloc_block_FF+0x9a>
		free_block(startVAs[i*allocCntPerSize]);
	}

	//====================================================================//
	/*FF ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	cprintf("	1: Try to allocate large block [not fit in any space]\n\n") ;
f010efff:	83 ec 0c             	sub    $0xc,%esp
f010f002:	68 24 49 13 f0       	push   $0xf0134924
f010f007:	e8 25 1e ff ff       	call   f0100e31 <cprintf>
f010f00c:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010f00f:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	uint32 maxSize = 0 ;
f010f016:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	for (int i = 0; i < numOfAllocs; ++i)
f010f01d:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f010f024:	eb 1f                	jmp    f010f045 <test_alloc_block_FF+0x112>
	{
		if (allocSizes[i] > maxSize)
f010f026:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010f029:	8b 04 85 20 fb 18 f0 	mov    -0xfe704e0(,%eax,4),%eax
f010f030:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010f033:	76 0d                	jbe    f010f042 <test_alloc_block_FF+0x10f>
			maxSize = allocSizes[i] ;
f010f035:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010f038:	8b 04 85 20 fb 18 f0 	mov    -0xfe704e0(,%eax,4),%eax
f010f03f:	89 45 d8             	mov    %eax,-0x28(%ebp)
	/*FF ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	cprintf("	1: Try to allocate large block [not fit in any space]\n\n") ;
	is_correct = 1;

	uint32 maxSize = 0 ;
	for (int i = 0; i < numOfAllocs; ++i)
f010f042:	ff 45 d4             	incl   -0x2c(%ebp)
f010f045:	83 7d d4 06          	cmpl   $0x6,-0x2c(%ebp)
f010f049:	7e db                	jle    f010f026 <test_alloc_block_FF+0xf3>
	{
		if (allocSizes[i] > maxSize)
			maxSize = allocSizes[i] ;
	}
	va = alloc_block(maxSize, DA_FF);
f010f04b:	83 ec 08             	sub    $0x8,%esp
f010f04e:	6a 01                	push   $0x1
f010f050:	ff 75 d8             	pushl  -0x28(%ebp)
f010f053:	e8 88 0e 02 00       	call   f012fee0 <alloc_block>
f010f058:	83 c4 10             	add    $0x10,%esp
f010f05b:	89 45 c8             	mov    %eax,-0x38(%ebp)

	//Check returned va
	if(va != NULL)
f010f05e:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f010f062:	74 17                	je     f010f07b <test_alloc_block_FF+0x148>
	{
		is_correct = 0;
f010f064:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		cprintf("alloc_block_FF #5: WRONG FF ALLOC - alloc_block_FF find a block instead no existing free blocks with the given size.\n");
f010f06b:	83 ec 0c             	sub    $0xc,%esp
f010f06e:	68 3c 4d 13 f0       	push   $0xf0134d3c
f010f073:	e8 b9 1d ff ff       	call   f0100e31 <cprintf>
f010f078:	83 c4 10             	add    $0x10,%esp
	}

	if (is_correct)
f010f07b:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f010f07f:	74 04                	je     f010f085 <test_alloc_block_FF+0x152>
	{
		eval += 10;
f010f081:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	}
	//====================================================================//
	/*FF ALLOC Scenario 2: Try to allocate blocks with sizes smaller than existing free blocks*/
	cprintf("	2: Try to allocate set of blocks with different sizes smaller than existing free blocks\n\n") ;
f010f085:	83 ec 0c             	sub    $0xc,%esp
f010f088:	68 b4 4d 13 f0       	push   $0xf0134db4
f010f08d:	e8 9f 1d ff ff       	call   f0100e31 <cprintf>
f010f092:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010f095:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

#define numOfFFTests 3
	uint32 testSizes[numOfFFTests] = {1*kilo + kilo/2, 3*kilo, kilo/2} ;
f010f09c:	8d 45 b0             	lea    -0x50(%ebp),%eax
f010f09f:	bb 74 4f 13 f0       	mov    $0xf0134f74,%ebx
f010f0a4:	ba 03 00 00 00       	mov    $0x3,%edx
f010f0a9:	89 c7                	mov    %eax,%edi
f010f0ab:	89 de                	mov    %ebx,%esi
f010f0ad:	89 d1                	mov    %edx,%ecx
f010f0af:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	uint32 startOf1st7KB = (uint32)startVAs[6*allocCntPerSize];
f010f0b1:	a1 40 c6 2d f0       	mov    0xf02dc640,%eax
f010f0b6:	89 45 c0             	mov    %eax,-0x40(%ebp)
	uint32 expectedVAs[numOfFFTests] = { KERNEL_HEAP_START + sizeOfMetaData(), startOf1st7KB, KERNEL_HEAP_START + testSizes[0] + sizeOfMetaData()};
f010f0b9:	c7 45 a4 10 00 00 f6 	movl   $0xf6000010,-0x5c(%ebp)
f010f0c0:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010f0c3:	89 45 a8             	mov    %eax,-0x58(%ebp)
f010f0c6:	8b 45 b0             	mov    -0x50(%ebp),%eax
f010f0c9:	2d f0 ff ff 09       	sub    $0x9fffff0,%eax
f010f0ce:	89 45 ac             	mov    %eax,-0x54(%ebp)
	short* tstStartVAs[numOfFFTests+1] ;
	short* tstMidVAs[numOfFFTests+1] ;
	short* tstEndVAs[numOfFFTests+1] ;
	for (int i = 0; i < numOfFFTests; ++i)
f010f0d1:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
f010f0d8:	e9 c6 00 00 00       	jmp    f010f1a3 <test_alloc_block_FF+0x270>
	{
		actualSize = testSizes[i] - sizeOfMetaData();
f010f0dd:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010f0e0:	8b 44 85 b0          	mov    -0x50(%ebp,%eax,4),%eax
f010f0e4:	83 e8 10             	sub    $0x10,%eax
f010f0e7:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		va = tstStartVAs[i] = alloc_block(actualSize, DA_FF);
f010f0ea:	83 ec 08             	sub    $0x8,%esp
f010f0ed:	6a 01                	push   $0x1
f010f0ef:	ff 75 c4             	pushl  -0x3c(%ebp)
f010f0f2:	e8 e9 0d 02 00       	call   f012fee0 <alloc_block>
f010f0f7:	83 c4 10             	add    $0x10,%esp
f010f0fa:	89 c2                	mov    %eax,%edx
f010f0fc:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010f0ff:	89 54 85 94          	mov    %edx,-0x6c(%ebp,%eax,4)
f010f103:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010f106:	8b 44 85 94          	mov    -0x6c(%ebp,%eax,4),%eax
f010f10a:	89 45 c8             	mov    %eax,-0x38(%ebp)
		tstMidVAs[i] = va + actualSize/2 ;
f010f10d:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010f110:	d1 e8                	shr    %eax
f010f112:	89 c2                	mov    %eax,%edx
f010f114:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010f117:	01 c2                	add    %eax,%edx
f010f119:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010f11c:	89 54 85 84          	mov    %edx,-0x7c(%ebp,%eax,4)
		tstEndVAs[i] = va + actualSize - sizeof(short);
f010f120:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010f123:	8d 50 fe             	lea    -0x2(%eax),%edx
f010f126:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010f129:	01 c2                	add    %eax,%edx
f010f12b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010f12e:	89 94 85 74 ff ff ff 	mov    %edx,-0x8c(%ebp,%eax,4)
		//Check returned va
		if(tstStartVAs[i] == NULL || (tstStartVAs[i] != (short*)expectedVAs[i]))
f010f135:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010f138:	8b 44 85 94          	mov    -0x6c(%ebp,%eax,4),%eax
f010f13c:	85 c0                	test   %eax,%eax
f010f13e:	74 12                	je     f010f152 <test_alloc_block_FF+0x21f>
f010f140:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010f143:	8b 54 85 94          	mov    -0x6c(%ebp,%eax,4),%edx
f010f147:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010f14a:	8b 44 85 a4          	mov    -0x5c(%ebp,%eax,4),%eax
f010f14e:	39 c2                	cmp    %eax,%edx
f010f150:	74 27                	je     f010f179 <test_alloc_block_FF+0x246>
		{
			is_correct = 0;
f010f152:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("alloc_block_FF #6.%d: WRONG FF ALLOC - alloc_block_FF return wrong address. Expected %x, Actual %x\n", i, expectedVAs[i] ,tstStartVAs[i]);
f010f159:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010f15c:	8b 54 85 94          	mov    -0x6c(%ebp,%eax,4),%edx
f010f160:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010f163:	8b 44 85 a4          	mov    -0x5c(%ebp,%eax,4),%eax
f010f167:	52                   	push   %edx
f010f168:	50                   	push   %eax
f010f169:	ff 75 d0             	pushl  -0x30(%ebp)
f010f16c:	68 10 4e 13 f0       	push   $0xf0134e10
f010f171:	e8 bb 1c ff ff       	call   f0100e31 <cprintf>
f010f176:	83 c4 10             	add    $0x10,%esp
			//break;
		}
		*(tstStartVAs[i]) = 353;
f010f179:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010f17c:	8b 44 85 94          	mov    -0x6c(%ebp,%eax,4),%eax
f010f180:	66 c7 00 61 01       	movw   $0x161,(%eax)
		*(tstMidVAs[i]) = 353;
f010f185:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010f188:	8b 44 85 84          	mov    -0x7c(%ebp,%eax,4),%eax
f010f18c:	66 c7 00 61 01       	movw   $0x161,(%eax)
		*(tstEndVAs[i]) = 353;
f010f191:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010f194:	8b 84 85 74 ff ff ff 	mov    -0x8c(%ebp,%eax,4),%eax
f010f19b:	66 c7 00 61 01       	movw   $0x161,(%eax)
	uint32 startOf1st7KB = (uint32)startVAs[6*allocCntPerSize];
	uint32 expectedVAs[numOfFFTests] = { KERNEL_HEAP_START + sizeOfMetaData(), startOf1st7KB, KERNEL_HEAP_START + testSizes[0] + sizeOfMetaData()};
	short* tstStartVAs[numOfFFTests+1] ;
	short* tstMidVAs[numOfFFTests+1] ;
	short* tstEndVAs[numOfFFTests+1] ;
	for (int i = 0; i < numOfFFTests; ++i)
f010f1a0:	ff 45 d0             	incl   -0x30(%ebp)
f010f1a3:	83 7d d0 02          	cmpl   $0x2,-0x30(%ebp)
f010f1a7:	0f 8e 30 ff ff ff    	jle    f010f0dd <test_alloc_block_FF+0x1aa>
		}
		*(tstStartVAs[i]) = 353;
		*(tstMidVAs[i]) = 353;
		*(tstEndVAs[i]) = 353;
	}
	if (is_correct)
f010f1ad:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f010f1b1:	74 04                	je     f010f1b7 <test_alloc_block_FF+0x284>
	{
		eval += 15;
f010f1b3:	83 45 e4 0f          	addl   $0xf,-0x1c(%ebp)
	}
	//====================================================================//
	/*FF ALLOC Scenario 3: Try to allocate a block with a size equal to the size of the first existing free block*/
	cprintf("	3: Try to allocate a block with equal to the first existing free block\n\n") ;
f010f1b7:	83 ec 0c             	sub    $0xc,%esp
f010f1ba:	68 3c 4b 13 f0       	push   $0xf0134b3c
f010f1bf:	e8 6d 1c ff ff       	call   f0100e31 <cprintf>
f010f1c4:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010f1c7:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	actualSize = 2*kilo - sizeOfMetaData();
f010f1ce:	c7 45 c4 f0 07 00 00 	movl   $0x7f0,-0x3c(%ebp)
	va = tstStartVAs[numOfFFTests] = alloc_block(actualSize, DA_FF);
f010f1d5:	83 ec 08             	sub    $0x8,%esp
f010f1d8:	6a 01                	push   $0x1
f010f1da:	ff 75 c4             	pushl  -0x3c(%ebp)
f010f1dd:	e8 fe 0c 02 00       	call   f012fee0 <alloc_block>
f010f1e2:	83 c4 10             	add    $0x10,%esp
f010f1e5:	89 45 a0             	mov    %eax,-0x60(%ebp)
f010f1e8:	8b 45 a0             	mov    -0x60(%ebp),%eax
f010f1eb:	89 45 c8             	mov    %eax,-0x38(%ebp)
	tstMidVAs[numOfFFTests] = va + actualSize/2 ;
f010f1ee:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010f1f1:	d1 e8                	shr    %eax
f010f1f3:	89 c2                	mov    %eax,%edx
f010f1f5:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010f1f8:	01 d0                	add    %edx,%eax
f010f1fa:	89 45 90             	mov    %eax,-0x70(%ebp)
	tstEndVAs[numOfFFTests] = va + actualSize - sizeof(short);
f010f1fd:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010f200:	8d 50 fe             	lea    -0x2(%eax),%edx
f010f203:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010f206:	01 d0                	add    %edx,%eax
f010f208:	89 45 80             	mov    %eax,-0x80(%ebp)
	//Check returned va
	void* expected = (void*)(KERNEL_HEAP_START + testSizes[0] + testSizes[2] + sizeOfMetaData()) ;
f010f20b:	8b 55 b0             	mov    -0x50(%ebp),%edx
f010f20e:	8b 45 b8             	mov    -0x48(%ebp),%eax
f010f211:	01 d0                	add    %edx,%eax
f010f213:	2d f0 ff ff 09       	sub    $0x9fffff0,%eax
f010f218:	89 45 bc             	mov    %eax,-0x44(%ebp)
	if(va == NULL || (va != expected))
f010f21b:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f010f21f:	74 08                	je     f010f229 <test_alloc_block_FF+0x2f6>
f010f221:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010f224:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f010f227:	74 1d                	je     f010f246 <test_alloc_block_FF+0x313>
	{
		is_correct = 0;
f010f229:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		cprintf("alloc_block_FF #7: WRONG FF ALLOC - alloc_block_FF return wrong address.expected %x, actual %x\n", expected, va);
f010f230:	83 ec 04             	sub    $0x4,%esp
f010f233:	ff 75 c8             	pushl  -0x38(%ebp)
f010f236:	ff 75 bc             	pushl  -0x44(%ebp)
f010f239:	68 74 4e 13 f0       	push   $0xf0134e74
f010f23e:	e8 ee 1b ff ff       	call   f0100e31 <cprintf>
f010f243:	83 c4 10             	add    $0x10,%esp
	}
	*(tstStartVAs[numOfFFTests]) = 353 ;
f010f246:	8b 45 a0             	mov    -0x60(%ebp),%eax
f010f249:	66 c7 00 61 01       	movw   $0x161,(%eax)
	*(tstMidVAs[numOfFFTests]) = 353 ;
f010f24e:	8b 45 90             	mov    -0x70(%ebp),%eax
f010f251:	66 c7 00 61 01       	movw   $0x161,(%eax)
	*(tstEndVAs[numOfFFTests]) = 353 ;
f010f256:	8b 45 80             	mov    -0x80(%ebp),%eax
f010f259:	66 c7 00 61 01       	movw   $0x161,(%eax)

	if (is_correct)
f010f25e:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f010f262:	74 04                	je     f010f268 <test_alloc_block_FF+0x335>
	{
		eval += 15;
f010f264:	83 45 e4 0f          	addl   $0xf,-0x1c(%ebp)
	}
	//====================================================================//
	/*FF ALLOC Scenario 4: Check stored data inside each allocated block*/
	cprintf("	4: Check stored data inside each allocated block\n\n") ;
f010f268:	83 ec 0c             	sub    $0xc,%esp
f010f26b:	68 d0 4b 13 f0       	push   $0xf0134bd0
f010f270:	e8 bc 1b ff ff       	call   f0100e31 <cprintf>
f010f275:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010f278:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	for (int i = 0; i <= numOfFFTests; ++i)
f010f27f:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f010f286:	e9 82 00 00 00       	jmp    f010f30d <test_alloc_block_FF+0x3da>
	{
		//cprintf("startVA = %x, mid = %x, last = %x\n", tstStartVAs[i], tstMidVAs[i], tstEndVAs[i]);
		if (*(tstStartVAs[i]) != 353 || *(tstMidVAs[i]) != 353 || *(tstEndVAs[i]) != 353)
f010f28b:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010f28e:	8b 44 85 94          	mov    -0x6c(%ebp,%eax,4),%eax
f010f292:	66 8b 00             	mov    (%eax),%ax
f010f295:	66 3d 61 01          	cmp    $0x161,%ax
f010f299:	75 23                	jne    f010f2be <test_alloc_block_FF+0x38b>
f010f29b:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010f29e:	8b 44 85 84          	mov    -0x7c(%ebp,%eax,4),%eax
f010f2a2:	66 8b 00             	mov    (%eax),%ax
f010f2a5:	66 3d 61 01          	cmp    $0x161,%ax
f010f2a9:	75 13                	jne    f010f2be <test_alloc_block_FF+0x38b>
f010f2ab:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010f2ae:	8b 84 85 74 ff ff ff 	mov    -0x8c(%ebp,%eax,4),%eax
f010f2b5:	66 8b 00             	mov    (%eax),%ax
f010f2b8:	66 3d 61 01          	cmp    $0x161,%ax
f010f2bc:	74 4c                	je     f010f30a <test_alloc_block_FF+0x3d7>
		{
			is_correct = 0;
f010f2be:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("alloc_block_FF #8.%d: WRONG! content of the block is not correct. Expected=%d, val1=%d, val2=%d, val3=%d\n",i, 353, *(tstStartVAs[i]), *(tstMidVAs[i]), *(tstEndVAs[i]));
f010f2c5:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010f2c8:	8b 84 85 74 ff ff ff 	mov    -0x8c(%ebp,%eax,4),%eax
f010f2cf:	66 8b 00             	mov    (%eax),%ax
f010f2d2:	0f bf c8             	movswl %ax,%ecx
f010f2d5:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010f2d8:	8b 44 85 84          	mov    -0x7c(%ebp,%eax,4),%eax
f010f2dc:	66 8b 00             	mov    (%eax),%ax
f010f2df:	0f bf d0             	movswl %ax,%edx
f010f2e2:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010f2e5:	8b 44 85 94          	mov    -0x6c(%ebp,%eax,4),%eax
f010f2e9:	66 8b 00             	mov    (%eax),%ax
f010f2ec:	98                   	cwtl   
f010f2ed:	83 ec 08             	sub    $0x8,%esp
f010f2f0:	51                   	push   %ecx
f010f2f1:	52                   	push   %edx
f010f2f2:	50                   	push   %eax
f010f2f3:	68 61 01 00 00       	push   $0x161
f010f2f8:	ff 75 cc             	pushl  -0x34(%ebp)
f010f2fb:	68 d4 4e 13 f0       	push   $0xf0134ed4
f010f300:	e8 2c 1b ff ff       	call   f0100e31 <cprintf>
f010f305:	83 c4 20             	add    $0x20,%esp
			break;
f010f308:	eb 0d                	jmp    f010f317 <test_alloc_block_FF+0x3e4>
	//====================================================================//
	/*FF ALLOC Scenario 4: Check stored data inside each allocated block*/
	cprintf("	4: Check stored data inside each allocated block\n\n") ;
	is_correct = 1;

	for (int i = 0; i <= numOfFFTests; ++i)
f010f30a:	ff 45 cc             	incl   -0x34(%ebp)
f010f30d:	83 7d cc 03          	cmpl   $0x3,-0x34(%ebp)
f010f311:	0f 8e 74 ff ff ff    	jle    f010f28b <test_alloc_block_FF+0x358>
			cprintf("alloc_block_FF #8.%d: WRONG! content of the block is not correct. Expected=%d, val1=%d, val2=%d, val3=%d\n",i, 353, *(tstStartVAs[i]), *(tstMidVAs[i]), *(tstEndVAs[i]));
			break;
		}
	}

	if (is_correct)
f010f317:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f010f31b:	74 04                	je     f010f321 <test_alloc_block_FF+0x3ee>
	{
		eval += 20;
f010f31d:	83 45 e4 14          	addl   $0x14,-0x1c(%ebp)
	}
	cprintf("test alloc_block_FF completed. Evaluation = %d%\n", eval);
f010f321:	83 ec 08             	sub    $0x8,%esp
f010f324:	ff 75 e4             	pushl  -0x1c(%ebp)
f010f327:	68 40 4f 13 f0       	push   $0xf0134f40
f010f32c:	e8 00 1b ff ff       	call   f0100e31 <cprintf>
f010f331:	83 c4 10             	add    $0x10,%esp
}
f010f334:	90                   	nop
f010f335:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010f338:	5b                   	pop    %ebx
f010f339:	5e                   	pop    %esi
f010f33a:	5f                   	pop    %edi
f010f33b:	5d                   	pop    %ebp
f010f33c:	c3                   	ret    

f010f33d <test_alloc_block_BF>:

void test_alloc_block_BF()
{
f010f33d:	55                   	push   %ebp
f010f33e:	89 e5                	mov    %esp,%ebp
f010f340:	57                   	push   %edi
f010f341:	56                   	push   %esi
f010f342:	53                   	push   %ebx
f010f343:	81 ec bc 00 00 00    	sub    $0xbc,%esp
#if USE_KHEAP
	panic("test_alloc_block_BF: the kernel heap should be disabled. make sure USE_KHEAP = 0");
	return;
#endif

	int eval = 0;
f010f349:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	bool is_correct;
	void* va = NULL;
f010f350:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	uint32 actualSize = 0;
f010f357:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)

	cprintf("=================================================\n") ;
f010f35e:	83 ec 0c             	sub    $0xc,%esp
f010f361:	68 80 4f 13 f0       	push   $0xf0134f80
f010f366:	e8 c6 1a ff ff       	call   f0100e31 <cprintf>
f010f36b:	83 c4 10             	add    $0x10,%esp
	cprintf("FIRST: Tests depend on the Allocate Function ONLY\n") ;
f010f36e:	83 ec 0c             	sub    $0xc,%esp
f010f371:	68 b4 4f 13 f0       	push   $0xf0134fb4
f010f376:	e8 b6 1a ff ff       	call   f0100e31 <cprintf>
f010f37b:	83 c4 10             	add    $0x10,%esp
	cprintf("=================================================\n") ;
f010f37e:	83 ec 0c             	sub    $0xc,%esp
f010f381:	68 80 4f 13 f0       	push   $0xf0134f80
f010f386:	e8 a6 1a ff ff       	call   f0100e31 <cprintf>
f010f38b:	83 c4 10             	add    $0x10,%esp
	eval = test_initial_alloc(DA_BF);
f010f38e:	83 ec 0c             	sub    $0xc,%esp
f010f391:	6a 03                	push   $0x3
f010f393:	e8 d1 f7 ff ff       	call   f010eb69 <test_initial_alloc>
f010f398:	83 c4 10             	add    $0x10,%esp
f010f39b:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	cprintf("=================================================\n") ;
f010f39e:	83 ec 0c             	sub    $0xc,%esp
f010f3a1:	68 80 4f 13 f0       	push   $0xf0134f80
f010f3a6:	e8 86 1a ff ff       	call   f0100e31 <cprintf>
f010f3ab:	83 c4 10             	add    $0x10,%esp
	cprintf("SECOND: Tests depend on BOTH Allocate and Free \n") ;
f010f3ae:	83 ec 0c             	sub    $0xc,%esp
f010f3b1:	68 e8 4f 13 f0       	push   $0xf0134fe8
f010f3b6:	e8 76 1a ff ff       	call   f0100e31 <cprintf>
f010f3bb:	83 c4 10             	add    $0x10,%esp
	cprintf("=================================================\n") ;
f010f3be:	83 ec 0c             	sub    $0xc,%esp
f010f3c1:	68 80 4f 13 f0       	push   $0xf0134f80
f010f3c6:	e8 66 1a ff ff       	call   f0100e31 <cprintf>
f010f3cb:	83 c4 10             	add    $0x10,%esp

	//Free set of blocks with different sizes (first block of each size)
	for (int i = 0; i < numOfAllocs; ++i)
f010f3ce:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f010f3d5:	eb 2c                	jmp    f010f403 <test_alloc_block_BF+0xc6>
	{
		free_block(startVAs[i*allocCntPerSize]);
f010f3d7:	8b 55 dc             	mov    -0x24(%ebp),%edx
f010f3da:	89 d0                	mov    %edx,%eax
f010f3dc:	c1 e0 02             	shl    $0x2,%eax
f010f3df:	01 d0                	add    %edx,%eax
f010f3e1:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010f3e8:	01 d0                	add    %edx,%eax
f010f3ea:	c1 e0 03             	shl    $0x3,%eax
f010f3ed:	8b 04 85 80 b3 2d f0 	mov    -0xfd24c80(,%eax,4),%eax
f010f3f4:	83 ec 0c             	sub    $0xc,%esp
f010f3f7:	50                   	push   %eax
f010f3f8:	e8 81 10 02 00       	call   f013047e <free_block>
f010f3fd:	83 c4 10             	add    $0x10,%esp
	cprintf("=================================================\n") ;
	cprintf("SECOND: Tests depend on BOTH Allocate and Free \n") ;
	cprintf("=================================================\n") ;

	//Free set of blocks with different sizes (first block of each size)
	for (int i = 0; i < numOfAllocs; ++i)
f010f400:	ff 45 dc             	incl   -0x24(%ebp)
f010f403:	83 7d dc 06          	cmpl   $0x6,-0x24(%ebp)
f010f407:	7e ce                	jle    f010f3d7 <test_alloc_block_BF+0x9a>
		free_block(startVAs[i*allocCntPerSize]);
	}

	//====================================================================//
	/*BF ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	cprintf("	1: Try to allocate large block [not fit in any space]\n\n") ;
f010f409:	83 ec 0c             	sub    $0xc,%esp
f010f40c:	68 24 49 13 f0       	push   $0xf0134924
f010f411:	e8 1b 1a ff ff       	call   f0100e31 <cprintf>
f010f416:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010f419:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	uint32 maxSize = 0 ;
f010f420:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	for (int i = 0; i < numOfAllocs; ++i)
f010f427:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f010f42e:	eb 1f                	jmp    f010f44f <test_alloc_block_BF+0x112>
	{
		if (allocSizes[i] > maxSize)
f010f430:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010f433:	8b 04 85 20 fb 18 f0 	mov    -0xfe704e0(,%eax,4),%eax
f010f43a:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010f43d:	76 0d                	jbe    f010f44c <test_alloc_block_BF+0x10f>
			maxSize = allocSizes[i] ;
f010f43f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010f442:	8b 04 85 20 fb 18 f0 	mov    -0xfe704e0(,%eax,4),%eax
f010f449:	89 45 d8             	mov    %eax,-0x28(%ebp)
	/*BF ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	cprintf("	1: Try to allocate large block [not fit in any space]\n\n") ;
	is_correct = 1;

	uint32 maxSize = 0 ;
	for (int i = 0; i < numOfAllocs; ++i)
f010f44c:	ff 45 d4             	incl   -0x2c(%ebp)
f010f44f:	83 7d d4 06          	cmpl   $0x6,-0x2c(%ebp)
f010f453:	7e db                	jle    f010f430 <test_alloc_block_BF+0xf3>
	{
		if (allocSizes[i] > maxSize)
			maxSize = allocSizes[i] ;
	}
	va = alloc_block(maxSize, DA_BF);
f010f455:	83 ec 08             	sub    $0x8,%esp
f010f458:	6a 03                	push   $0x3
f010f45a:	ff 75 d8             	pushl  -0x28(%ebp)
f010f45d:	e8 7e 0a 02 00       	call   f012fee0 <alloc_block>
f010f462:	83 c4 10             	add    $0x10,%esp
f010f465:	89 45 c8             	mov    %eax,-0x38(%ebp)

	//Check returned va
	if(va != NULL)
f010f468:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f010f46c:	74 17                	je     f010f485 <test_alloc_block_BF+0x148>
	{
		is_correct = 0;
f010f46e:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		cprintf("alloc_block_BF #5: WRONG BF ALLOC - alloc_block_BF find a block instead no existing free blocks with the given size.\n");
f010f475:	83 ec 0c             	sub    $0xc,%esp
f010f478:	68 1c 50 13 f0       	push   $0xf013501c
f010f47d:	e8 af 19 ff ff       	call   f0100e31 <cprintf>
f010f482:	83 c4 10             	add    $0x10,%esp
	}
	if (is_correct)
f010f485:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f010f489:	74 04                	je     f010f48f <test_alloc_block_BF+0x152>
	{
		eval += 10;
f010f48b:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	}
	//====================================================================//
	/*BF ALLOC Scenario 2: Try to allocate blocks with sizes smaller than existing free blocks*/
	cprintf("	2: Try to allocate set of blocks with different sizes smaller than existing free blocks\n\n") ;
f010f48f:	83 ec 0c             	sub    $0xc,%esp
f010f492:	68 b4 4d 13 f0       	push   $0xf0134db4
f010f497:	e8 95 19 ff ff       	call   f0100e31 <cprintf>
f010f49c:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010f49f:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

#define numOfBFTests 5
	uint32 testSizes[numOfBFTests] = {/*only 1 can fit*/4*kilo + kilo/2, /*many can fit*/ 1*kilo + kilo/4, 4*sizeof(short) + sizeOfMetaData(), kilo/2, /*only 1 can fit (@head)*/3*kilo } ;
f010f4a6:	8d 45 a0             	lea    -0x60(%ebp),%eax
f010f4a9:	bb 40 52 13 f0       	mov    $0xf0135240,%ebx
f010f4ae:	ba 05 00 00 00       	mov    $0x5,%edx
f010f4b3:	89 c7                	mov    %eax,%edi
f010f4b5:	89 de                	mov    %ebx,%esi
f010f4b7:	89 d1                	mov    %edx,%ecx
f010f4b9:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	uint32 startOf1st12B = (uint32)startVAs[3*allocCntPerSize];
f010f4bb:	a1 e0 bc 2d f0       	mov    0xf02dbce0,%eax
f010f4c0:	89 45 c0             	mov    %eax,-0x40(%ebp)
	uint32 startOf1st2KB = (uint32)startVAs[4*allocCntPerSize];
f010f4c3:	a1 00 c0 2d f0       	mov    0xf02dc000,%eax
f010f4c8:	89 45 bc             	mov    %eax,-0x44(%ebp)
	uint32 startOf1st7KB = (uint32)startVAs[6*allocCntPerSize];
f010f4cb:	a1 40 c6 2d f0       	mov    0xf02dc640,%eax
f010f4d0:	89 45 b8             	mov    %eax,-0x48(%ebp)

	uint32 expectedVAs[numOfBFTests] = {startOf1st7KB, startOf1st2KB, startOf1st12B, startOf1st2KB + testSizes[1], KERNEL_HEAP_START + sizeOfMetaData()};
f010f4d3:	8b 45 b8             	mov    -0x48(%ebp),%eax
f010f4d6:	89 45 8c             	mov    %eax,-0x74(%ebp)
f010f4d9:	8b 45 bc             	mov    -0x44(%ebp),%eax
f010f4dc:	89 45 90             	mov    %eax,-0x70(%ebp)
f010f4df:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010f4e2:	89 45 94             	mov    %eax,-0x6c(%ebp)
f010f4e5:	8b 55 a4             	mov    -0x5c(%ebp),%edx
f010f4e8:	8b 45 bc             	mov    -0x44(%ebp),%eax
f010f4eb:	01 d0                	add    %edx,%eax
f010f4ed:	89 45 98             	mov    %eax,-0x68(%ebp)
f010f4f0:	c7 45 9c 10 00 00 f6 	movl   $0xf6000010,-0x64(%ebp)
	short* tstStartVAs[numOfBFTests+1] ;
	short* tstMidVAs[numOfBFTests+1] ;
	short* tstEndVAs[numOfBFTests+1] ;
	for (int i = 0; i < numOfBFTests; ++i)
f010f4f7:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
f010f4fe:	e9 de 00 00 00       	jmp    f010f5e1 <test_alloc_block_BF+0x2a4>
	{
		actualSize = testSizes[i] - sizeOfMetaData();
f010f503:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010f506:	8b 44 85 a0          	mov    -0x60(%ebp,%eax,4),%eax
f010f50a:	83 e8 10             	sub    $0x10,%eax
f010f50d:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		va = tstStartVAs[i] = alloc_block(actualSize, DA_BF);
f010f510:	83 ec 08             	sub    $0x8,%esp
f010f513:	6a 03                	push   $0x3
f010f515:	ff 75 c4             	pushl  -0x3c(%ebp)
f010f518:	e8 c3 09 02 00       	call   f012fee0 <alloc_block>
f010f51d:	83 c4 10             	add    $0x10,%esp
f010f520:	89 c2                	mov    %eax,%edx
f010f522:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010f525:	89 94 85 74 ff ff ff 	mov    %edx,-0x8c(%ebp,%eax,4)
f010f52c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010f52f:	8b 84 85 74 ff ff ff 	mov    -0x8c(%ebp,%eax,4),%eax
f010f536:	89 45 c8             	mov    %eax,-0x38(%ebp)
		tstMidVAs[i] = va + actualSize/2 ;
f010f539:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010f53c:	d1 e8                	shr    %eax
f010f53e:	89 c2                	mov    %eax,%edx
f010f540:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010f543:	01 c2                	add    %eax,%edx
f010f545:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010f548:	89 94 85 5c ff ff ff 	mov    %edx,-0xa4(%ebp,%eax,4)
		tstEndVAs[i] = va + actualSize - sizeof(short);
f010f54f:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010f552:	8d 50 fe             	lea    -0x2(%eax),%edx
f010f555:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010f558:	01 c2                	add    %eax,%edx
f010f55a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010f55d:	89 94 85 44 ff ff ff 	mov    %edx,-0xbc(%ebp,%eax,4)
		//Check returned va
		if(tstStartVAs[i] == NULL || (tstStartVAs[i] != (short*)expectedVAs[i]))
f010f564:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010f567:	8b 84 85 74 ff ff ff 	mov    -0x8c(%ebp,%eax,4),%eax
f010f56e:	85 c0                	test   %eax,%eax
f010f570:	74 15                	je     f010f587 <test_alloc_block_BF+0x24a>
f010f572:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010f575:	8b 94 85 74 ff ff ff 	mov    -0x8c(%ebp,%eax,4),%edx
f010f57c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010f57f:	8b 44 85 8c          	mov    -0x74(%ebp,%eax,4),%eax
f010f583:	39 c2                	cmp    %eax,%edx
f010f585:	74 2a                	je     f010f5b1 <test_alloc_block_BF+0x274>
		{
			is_correct = 0;
f010f587:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("alloc_block_BF #6.%d: WRONG BF ALLOC - alloc_block_BF return wrong address. Expected %x, Actual %x\n", i, expectedVAs[i] ,tstStartVAs[i]);
f010f58e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010f591:	8b 94 85 74 ff ff ff 	mov    -0x8c(%ebp,%eax,4),%edx
f010f598:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010f59b:	8b 44 85 8c          	mov    -0x74(%ebp,%eax,4),%eax
f010f59f:	52                   	push   %edx
f010f5a0:	50                   	push   %eax
f010f5a1:	ff 75 d0             	pushl  -0x30(%ebp)
f010f5a4:	68 94 50 13 f0       	push   $0xf0135094
f010f5a9:	e8 83 18 ff ff       	call   f0100e31 <cprintf>
f010f5ae:	83 c4 10             	add    $0x10,%esp
			//break;
		}
		*(tstStartVAs[i]) = 353;
f010f5b1:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010f5b4:	8b 84 85 74 ff ff ff 	mov    -0x8c(%ebp,%eax,4),%eax
f010f5bb:	66 c7 00 61 01       	movw   $0x161,(%eax)
		*(tstMidVAs[i]) = 353;
f010f5c0:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010f5c3:	8b 84 85 5c ff ff ff 	mov    -0xa4(%ebp,%eax,4),%eax
f010f5ca:	66 c7 00 61 01       	movw   $0x161,(%eax)
		*(tstEndVAs[i]) = 353;
f010f5cf:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010f5d2:	8b 84 85 44 ff ff ff 	mov    -0xbc(%ebp,%eax,4),%eax
f010f5d9:	66 c7 00 61 01       	movw   $0x161,(%eax)

	uint32 expectedVAs[numOfBFTests] = {startOf1st7KB, startOf1st2KB, startOf1st12B, startOf1st2KB + testSizes[1], KERNEL_HEAP_START + sizeOfMetaData()};
	short* tstStartVAs[numOfBFTests+1] ;
	short* tstMidVAs[numOfBFTests+1] ;
	short* tstEndVAs[numOfBFTests+1] ;
	for (int i = 0; i < numOfBFTests; ++i)
f010f5de:	ff 45 d0             	incl   -0x30(%ebp)
f010f5e1:	83 7d d0 04          	cmpl   $0x4,-0x30(%ebp)
f010f5e5:	0f 8e 18 ff ff ff    	jle    f010f503 <test_alloc_block_BF+0x1c6>
		*(tstStartVAs[i]) = 353;
		*(tstMidVAs[i]) = 353;
		*(tstEndVAs[i]) = 353;
	}

	if (is_correct)
f010f5eb:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f010f5ef:	74 04                	je     f010f5f5 <test_alloc_block_BF+0x2b8>
	{
		eval += 15;
f010f5f1:	83 45 e4 0f          	addl   $0xf,-0x1c(%ebp)
	}
	//====================================================================//
	/*BF ALLOC Scenario 3: Try to allocate a block with a size equal to the size of an existing free block*/
	cprintf("	3: Try to allocate a block with equal to an existing free block\n\n") ;
f010f5f5:	83 ec 0c             	sub    $0xc,%esp
f010f5f8:	68 f8 50 13 f0       	push   $0xf01350f8
f010f5fd:	e8 2f 18 ff ff       	call   f0100e31 <cprintf>
f010f602:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010f605:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	actualSize = kilo/4 - sizeOfMetaData();
f010f60c:	c7 45 c4 f0 00 00 00 	movl   $0xf0,-0x3c(%ebp)
	va = tstStartVAs[numOfBFTests] = alloc_block(actualSize, DA_BF);
f010f613:	83 ec 08             	sub    $0x8,%esp
f010f616:	6a 03                	push   $0x3
f010f618:	ff 75 c4             	pushl  -0x3c(%ebp)
f010f61b:	e8 c0 08 02 00       	call   f012fee0 <alloc_block>
f010f620:	83 c4 10             	add    $0x10,%esp
f010f623:	89 45 88             	mov    %eax,-0x78(%ebp)
f010f626:	8b 45 88             	mov    -0x78(%ebp),%eax
f010f629:	89 45 c8             	mov    %eax,-0x38(%ebp)
	tstMidVAs[numOfBFTests] = va + actualSize/2 ;
f010f62c:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010f62f:	d1 e8                	shr    %eax
f010f631:	89 c2                	mov    %eax,%edx
f010f633:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010f636:	01 d0                	add    %edx,%eax
f010f638:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
	tstEndVAs[numOfBFTests] = va + actualSize - sizeof(short);
f010f63e:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010f641:	8d 50 fe             	lea    -0x2(%eax),%edx
f010f644:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010f647:	01 d0                	add    %edx,%eax
f010f649:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
	//Check returned va
	void* expected = (void*)(startOf1st2KB + testSizes[1] + testSizes[3]) ;
f010f64f:	8b 55 a4             	mov    -0x5c(%ebp),%edx
f010f652:	8b 45 bc             	mov    -0x44(%ebp),%eax
f010f655:	01 c2                	add    %eax,%edx
f010f657:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010f65a:	01 d0                	add    %edx,%eax
f010f65c:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if(va == NULL || (va != expected))
f010f65f:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f010f663:	74 08                	je     f010f66d <test_alloc_block_BF+0x330>
f010f665:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010f668:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f010f66b:	74 1d                	je     f010f68a <test_alloc_block_BF+0x34d>
	{
		is_correct = 0;
f010f66d:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		cprintf("alloc_block_BF #7: WRONG BF ALLOC - alloc_block_BF return wrong address. expected %x, actual %x\n", expected, va);
f010f674:	83 ec 04             	sub    $0x4,%esp
f010f677:	ff 75 c8             	pushl  -0x38(%ebp)
f010f67a:	ff 75 b4             	pushl  -0x4c(%ebp)
f010f67d:	68 3c 51 13 f0       	push   $0xf013513c
f010f682:	e8 aa 17 ff ff       	call   f0100e31 <cprintf>
f010f687:	83 c4 10             	add    $0x10,%esp
	}
	*(tstStartVAs[numOfBFTests]) = 353 ;
f010f68a:	8b 45 88             	mov    -0x78(%ebp),%eax
f010f68d:	66 c7 00 61 01       	movw   $0x161,(%eax)
	*(tstMidVAs[numOfBFTests]) = 353 ;
f010f692:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f010f698:	66 c7 00 61 01       	movw   $0x161,(%eax)
	*(tstEndVAs[numOfBFTests]) = 353 ;
f010f69d:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f010f6a3:	66 c7 00 61 01       	movw   $0x161,(%eax)

	if (is_correct)
f010f6a8:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f010f6ac:	74 04                	je     f010f6b2 <test_alloc_block_BF+0x375>
	{
		eval += 15;
f010f6ae:	83 45 e4 0f          	addl   $0xf,-0x1c(%ebp)
	}
	//====================================================================//
	/*BF ALLOC Scenario 4: Check stored data inside each allocated block*/
	cprintf("	4: Check stored data inside each allocated block\n\n") ;
f010f6b2:	83 ec 0c             	sub    $0xc,%esp
f010f6b5:	68 d0 4b 13 f0       	push   $0xf0134bd0
f010f6ba:	e8 72 17 ff ff       	call   f0100e31 <cprintf>
f010f6bf:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010f6c2:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	for (int i = 0; i <= numOfBFTests; ++i)
f010f6c9:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f010f6d0:	e9 8e 00 00 00       	jmp    f010f763 <test_alloc_block_BF+0x426>
	{
		//cprintf("startVA = %x, mid = %x, last = %x\n", tstStartVAs[i], tstMidVAs[i], tstEndVAs[i]);
		if (*(tstStartVAs[i]) != 353 || *(tstMidVAs[i]) != 353 || *(tstEndVAs[i]) != 353)
f010f6d5:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010f6d8:	8b 84 85 74 ff ff ff 	mov    -0x8c(%ebp,%eax,4),%eax
f010f6df:	66 8b 00             	mov    (%eax),%ax
f010f6e2:	66 3d 61 01          	cmp    $0x161,%ax
f010f6e6:	75 26                	jne    f010f70e <test_alloc_block_BF+0x3d1>
f010f6e8:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010f6eb:	8b 84 85 5c ff ff ff 	mov    -0xa4(%ebp,%eax,4),%eax
f010f6f2:	66 8b 00             	mov    (%eax),%ax
f010f6f5:	66 3d 61 01          	cmp    $0x161,%ax
f010f6f9:	75 13                	jne    f010f70e <test_alloc_block_BF+0x3d1>
f010f6fb:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010f6fe:	8b 84 85 44 ff ff ff 	mov    -0xbc(%ebp,%eax,4),%eax
f010f705:	66 8b 00             	mov    (%eax),%ax
f010f708:	66 3d 61 01          	cmp    $0x161,%ax
f010f70c:	74 52                	je     f010f760 <test_alloc_block_BF+0x423>
		{
			//cprintf("start VA = %x, mid VA = %x, end VA = %x\n", tstStartVAs[i], tstMidVAs[i], tstEndVAs[i]);
			is_correct = 0;
f010f70e:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("alloc_block_BF #8.%d: WRONG! content of the block is not correct. Expected=%d, val1=%d, val2=%d, val3=%d\n",i, 353, *(tstStartVAs[i]), *(tstMidVAs[i]), *(tstEndVAs[i]));
f010f715:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010f718:	8b 84 85 44 ff ff ff 	mov    -0xbc(%ebp,%eax,4),%eax
f010f71f:	66 8b 00             	mov    (%eax),%ax
f010f722:	0f bf c8             	movswl %ax,%ecx
f010f725:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010f728:	8b 84 85 5c ff ff ff 	mov    -0xa4(%ebp,%eax,4),%eax
f010f72f:	66 8b 00             	mov    (%eax),%ax
f010f732:	0f bf d0             	movswl %ax,%edx
f010f735:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010f738:	8b 84 85 74 ff ff ff 	mov    -0x8c(%ebp,%eax,4),%eax
f010f73f:	66 8b 00             	mov    (%eax),%ax
f010f742:	98                   	cwtl   
f010f743:	83 ec 08             	sub    $0x8,%esp
f010f746:	51                   	push   %ecx
f010f747:	52                   	push   %edx
f010f748:	50                   	push   %eax
f010f749:	68 61 01 00 00       	push   $0x161
f010f74e:	ff 75 cc             	pushl  -0x34(%ebp)
f010f751:	68 a0 51 13 f0       	push   $0xf01351a0
f010f756:	e8 d6 16 ff ff       	call   f0100e31 <cprintf>
f010f75b:	83 c4 20             	add    $0x20,%esp
			break;
f010f75e:	eb 0d                	jmp    f010f76d <test_alloc_block_BF+0x430>
	//====================================================================//
	/*BF ALLOC Scenario 4: Check stored data inside each allocated block*/
	cprintf("	4: Check stored data inside each allocated block\n\n") ;
	is_correct = 1;

	for (int i = 0; i <= numOfBFTests; ++i)
f010f760:	ff 45 cc             	incl   -0x34(%ebp)
f010f763:	83 7d cc 05          	cmpl   $0x5,-0x34(%ebp)
f010f767:	0f 8e 68 ff ff ff    	jle    f010f6d5 <test_alloc_block_BF+0x398>
			cprintf("alloc_block_BF #8.%d: WRONG! content of the block is not correct. Expected=%d, val1=%d, val2=%d, val3=%d\n",i, 353, *(tstStartVAs[i]), *(tstMidVAs[i]), *(tstEndVAs[i]));
			break;
		}
	}

	if (is_correct)
f010f76d:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f010f771:	74 04                	je     f010f777 <test_alloc_block_BF+0x43a>
	{
		eval += 20;
f010f773:	83 45 e4 14          	addl   $0x14,-0x1c(%ebp)
	}
	cprintf("test alloc_block_BF completed. Evaluation = %d%\n", eval);
f010f777:	83 ec 08             	sub    $0x8,%esp
f010f77a:	ff 75 e4             	pushl  -0x1c(%ebp)
f010f77d:	68 0c 52 13 f0       	push   $0xf013520c
f010f782:	e8 aa 16 ff ff       	call   f0100e31 <cprintf>
f010f787:	83 c4 10             	add    $0x10,%esp
}
f010f78a:	90                   	nop
f010f78b:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010f78e:	5b                   	pop    %ebx
f010f78f:	5e                   	pop    %esi
f010f790:	5f                   	pop    %edi
f010f791:	5d                   	pop    %ebp
f010f792:	c3                   	ret    

f010f793 <test_alloc_block_NF>:

void test_alloc_block_NF()
{
f010f793:	55                   	push   %ebp
f010f794:	89 e5                	mov    %esp,%ebp
	//====================================================================//
	/*NF ALLOC Scenario 7: Try to allocate a block with a size smaller than the existing blocks .. To try to update head not to remove it*/

	//cprintf("Congratulations!! test alloc_block_NF completed successfully.\n");

}
f010f796:	90                   	nop
f010f797:	5d                   	pop    %ebp
f010f798:	c3                   	ret    

f010f799 <test_free_block_FF>:

void test_free_block_FF()
{
f010f799:	55                   	push   %ebp
f010f79a:	89 e5                	mov    %esp,%ebp
f010f79c:	83 ec 58             	sub    $0x58,%esp
#if USE_KHEAP
	panic("test_free_block: the kernel heap should be disabled. make sure USE_KHEAP = 0");
	return;
#endif

	cprintf("===========================================================\n") ;
f010f79f:	83 ec 0c             	sub    $0xc,%esp
f010f7a2:	68 54 52 13 f0       	push   $0xf0135254
f010f7a7:	e8 85 16 ff ff       	call   f0100e31 <cprintf>
f010f7ac:	83 c4 10             	add    $0x10,%esp
	cprintf("NOTE: THIS TEST IS DEPEND ON BOTH ALLOCATE & FREE FUNCTIONS\n") ;
f010f7af:	83 ec 0c             	sub    $0xc,%esp
f010f7b2:	68 94 52 13 f0       	push   $0xf0135294
f010f7b7:	e8 75 16 ff ff       	call   f0100e31 <cprintf>
f010f7bc:	83 c4 10             	add    $0x10,%esp
	cprintf("===========================================================\n") ;
f010f7bf:	83 ec 0c             	sub    $0xc,%esp
f010f7c2:	68 54 52 13 f0       	push   $0xf0135254
f010f7c7:	e8 65 16 ff ff       	call   f0100e31 <cprintf>
f010f7cc:	83 c4 10             	add    $0x10,%esp

	int eval = 0;
f010f7cf:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	bool is_correct;
	int initAllocatedSpace = 3*Mega;
f010f7d6:	c7 45 cc 00 00 30 00 	movl   $0x300000,-0x34(%ebp)
	initialize_dynamic_allocator(KERNEL_HEAP_START, initAllocatedSpace);
f010f7dd:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010f7e0:	83 ec 08             	sub    $0x8,%esp
f010f7e3:	50                   	push   %eax
f010f7e4:	68 00 00 00 f6       	push   $0xf6000000
f010f7e9:	e8 0b 08 02 00       	call   f012fff9 <initialize_dynamic_allocator>
f010f7ee:	83 c4 10             	add    $0x10,%esp

	void * va ;
	//====================================================================//
	/* Try to allocate set of blocks with different sizes*/
	cprintf("	1: Try to allocate set of blocks with different sizes to fill-up the allocated space\n\n") ;
f010f7f1:	83 ec 0c             	sub    $0xc,%esp
f010f7f4:	68 d4 52 13 f0       	push   $0xf01352d4
f010f7f9:	e8 33 16 ff ff       	call   f0100e31 <cprintf>
f010f7fe:	83 c4 10             	add    $0x10,%esp

	int totalSizes = 0;
f010f801:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	for (int i = 0; i < numOfAllocs; ++i)
f010f808:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f010f80f:	eb 2a                	jmp    f010f83b <test_free_block_FF+0xa2>
	{
		totalSizes += allocSizes[i] * allocCntPerSize ;
f010f811:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010f814:	8b 14 85 20 fb 18 f0 	mov    -0xfe704e0(,%eax,4),%edx
f010f81b:	89 d0                	mov    %edx,%eax
f010f81d:	c1 e0 02             	shl    $0x2,%eax
f010f820:	01 d0                	add    %edx,%eax
f010f822:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010f829:	01 d0                	add    %edx,%eax
f010f82b:	c1 e0 03             	shl    $0x3,%eax
f010f82e:	89 c2                	mov    %eax,%edx
f010f830:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f833:	01 d0                	add    %edx,%eax
f010f835:	89 45 ec             	mov    %eax,-0x14(%ebp)
	//====================================================================//
	/* Try to allocate set of blocks with different sizes*/
	cprintf("	1: Try to allocate set of blocks with different sizes to fill-up the allocated space\n\n") ;

	int totalSizes = 0;
	for (int i = 0; i < numOfAllocs; ++i)
f010f838:	ff 45 e8             	incl   -0x18(%ebp)
f010f83b:	83 7d e8 06          	cmpl   $0x6,-0x18(%ebp)
f010f83f:	7e d0                	jle    f010f811 <test_free_block_FF+0x78>
	{
		totalSizes += allocSizes[i] * allocCntPerSize ;
	}
	int remainSize = initAllocatedSpace - totalSizes ;
f010f841:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010f844:	2b 45 ec             	sub    -0x14(%ebp),%eax
f010f847:	89 45 c8             	mov    %eax,-0x38(%ebp)
	if (remainSize <= 0)
f010f84a:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f010f84e:	7f 17                	jg     f010f867 <test_free_block_FF+0xce>
		panic("test_free_block is not configured correctly. Consider updating the initial allocated space OR the required allocations");
f010f850:	83 ec 04             	sub    $0x4,%esp
f010f853:	68 2c 53 13 f0       	push   $0xf013532c
f010f858:	68 fe 01 00 00       	push   $0x1fe
f010f85d:	68 b0 48 13 f0       	push   $0xf01348b0
f010f862:	e8 49 09 ff ff       	call   f01001b0 <_panic>

	int idx = 0;
f010f867:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	void* curVA = (void*) KERNEL_HEAP_START ;
f010f86e:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
f010f875:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f010f87c:	e9 f8 00 00 00       	jmp    f010f979 <test_free_block_FF+0x1e0>
	{
		for (int j = 0; j < allocCntPerSize; ++j)
f010f881:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f010f888:	e9 dc 00 00 00       	jmp    f010f969 <test_free_block_FF+0x1d0>
		{
			actualSize = allocSizes[i] - sizeOfMetaData();
f010f88d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f890:	8b 04 85 20 fb 18 f0 	mov    -0xfe704e0(,%eax,4),%eax
f010f897:	83 e8 10             	sub    $0x10,%eax
f010f89a:	89 45 c4             	mov    %eax,-0x3c(%ebp)
			va = startVAs[idx] = alloc_block(actualSize, DA_FF);
f010f89d:	83 ec 08             	sub    $0x8,%esp
f010f8a0:	6a 01                	push   $0x1
f010f8a2:	ff 75 c4             	pushl  -0x3c(%ebp)
f010f8a5:	e8 36 06 02 00       	call   f012fee0 <alloc_block>
f010f8aa:	83 c4 10             	add    $0x10,%esp
f010f8ad:	89 c2                	mov    %eax,%edx
f010f8af:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f8b2:	89 14 85 80 b3 2d f0 	mov    %edx,-0xfd24c80(,%eax,4)
f010f8b9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f8bc:	8b 04 85 80 b3 2d f0 	mov    -0xfd24c80(,%eax,4),%eax
f010f8c3:	89 45 c0             	mov    %eax,-0x40(%ebp)
			midVAs[idx] = va + actualSize/2 ;
f010f8c6:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010f8c9:	d1 e8                	shr    %eax
f010f8cb:	89 c2                	mov    %eax,%edx
f010f8cd:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010f8d0:	01 c2                	add    %eax,%edx
f010f8d2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f8d5:	89 14 85 80 df 2d f0 	mov    %edx,-0xfd22080(,%eax,4)
			endVAs[idx] = va + actualSize - sizeof(short);
f010f8dc:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010f8df:	8d 50 fe             	lea    -0x2(%eax),%edx
f010f8e2:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010f8e5:	01 c2                	add    %eax,%edx
f010f8e7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f8ea:	89 14 85 80 c9 2d f0 	mov    %edx,-0xfd23680(,%eax,4)
			//Check returned va
			if(va == NULL || (va != (curVA + sizeOfMetaData())))
f010f8f1:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
f010f8f5:	74 0b                	je     f010f902 <test_free_block_FF+0x169>
f010f8f7:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010f8fa:	83 c0 10             	add    $0x10,%eax
f010f8fd:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f010f900:	74 24                	je     f010f926 <test_free_block_FF+0x18d>
				panic("test_free_block #1.%d: WRONG ALLOC - alloc_block_FF return wrong address. Expected %x, Actual %x", idx, curVA + sizeOfMetaData() ,va);
f010f902:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010f905:	83 c0 10             	add    $0x10,%eax
f010f908:	83 ec 08             	sub    $0x8,%esp
f010f90b:	ff 75 c0             	pushl  -0x40(%ebp)
f010f90e:	50                   	push   %eax
f010f90f:	ff 75 e4             	pushl  -0x1c(%ebp)
f010f912:	68 a4 53 13 f0       	push   $0xf01353a4
f010f917:	68 0d 02 00 00       	push   $0x20d
f010f91c:	68 b0 48 13 f0       	push   $0xf01348b0
f010f921:	e8 8a 08 ff ff       	call   f01001b0 <_panic>
			curVA += allocSizes[i] ;
f010f926:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f929:	8b 04 85 20 fb 18 f0 	mov    -0xfe704e0(,%eax,4),%eax
f010f930:	01 45 e0             	add    %eax,-0x20(%ebp)
			*(startVAs[idx]) = idx ;
f010f933:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f936:	8b 14 85 80 b3 2d f0 	mov    -0xfd24c80(,%eax,4),%edx
f010f93d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f940:	66 89 02             	mov    %ax,(%edx)
			*(midVAs[idx]) = idx ;
f010f943:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f946:	8b 14 85 80 df 2d f0 	mov    -0xfd22080(,%eax,4),%edx
f010f94d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f950:	66 89 02             	mov    %ax,(%edx)
			*(endVAs[idx]) = idx ;
f010f953:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f956:	8b 14 85 80 c9 2d f0 	mov    -0xfd23680(,%eax,4),%edx
f010f95d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f960:	66 89 02             	mov    %ax,(%edx)
			idx++;
f010f963:	ff 45 e4             	incl   -0x1c(%ebp)
	int idx = 0;
	void* curVA = (void*) KERNEL_HEAP_START ;
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
	{
		for (int j = 0; j < allocCntPerSize; ++j)
f010f966:	ff 45 d8             	incl   -0x28(%ebp)
f010f969:	81 7d d8 c7 00 00 00 	cmpl   $0xc7,-0x28(%ebp)
f010f970:	0f 8e 17 ff ff ff    	jle    f010f88d <test_free_block_FF+0xf4>
		panic("test_free_block is not configured correctly. Consider updating the initial allocated space OR the required allocations");

	int idx = 0;
	void* curVA = (void*) KERNEL_HEAP_START ;
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
f010f976:	ff 45 dc             	incl   -0x24(%ebp)
f010f979:	83 7d dc 06          	cmpl   $0x6,-0x24(%ebp)
f010f97d:	0f 8e fe fe ff ff    	jle    f010f881 <test_free_block_FF+0xe8>
		}
	}

	//====================================================================//
	/* Try to allocate a block with a size equal to the size of the first existing free block*/
	actualSize = remainSize - sizeOfMetaData();
f010f983:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010f986:	83 e8 10             	sub    $0x10,%eax
f010f989:	89 45 c4             	mov    %eax,-0x3c(%ebp)
	va = startVAs[idx] = alloc_block(actualSize, DA_FF);
f010f98c:	83 ec 08             	sub    $0x8,%esp
f010f98f:	6a 01                	push   $0x1
f010f991:	ff 75 c4             	pushl  -0x3c(%ebp)
f010f994:	e8 47 05 02 00       	call   f012fee0 <alloc_block>
f010f999:	83 c4 10             	add    $0x10,%esp
f010f99c:	89 c2                	mov    %eax,%edx
f010f99e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f9a1:	89 14 85 80 b3 2d f0 	mov    %edx,-0xfd24c80(,%eax,4)
f010f9a8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f9ab:	8b 04 85 80 b3 2d f0 	mov    -0xfd24c80(,%eax,4),%eax
f010f9b2:	89 45 c0             	mov    %eax,-0x40(%ebp)
	midVAs[idx] = va + actualSize/2 ;
f010f9b5:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010f9b8:	d1 e8                	shr    %eax
f010f9ba:	89 c2                	mov    %eax,%edx
f010f9bc:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010f9bf:	01 c2                	add    %eax,%edx
f010f9c1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f9c4:	89 14 85 80 df 2d f0 	mov    %edx,-0xfd22080(,%eax,4)
	endVAs[idx] = va + actualSize - sizeof(short);
f010f9cb:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010f9ce:	8d 50 fe             	lea    -0x2(%eax),%edx
f010f9d1:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010f9d4:	01 c2                	add    %eax,%edx
f010f9d6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f9d9:	89 14 85 80 c9 2d f0 	mov    %edx,-0xfd23680(,%eax,4)
	//Check returned va
	if(va == NULL || (va != (curVA + sizeOfMetaData())))
f010f9e0:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
f010f9e4:	74 0b                	je     f010f9f1 <test_free_block_FF+0x258>
f010f9e6:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010f9e9:	83 c0 10             	add    $0x10,%eax
f010f9ec:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f010f9ef:	74 17                	je     f010fa08 <test_free_block_FF+0x26f>
		panic("test_free_block #2: WRONG ALLOC - alloc_block_FF return wrong address.");
f010f9f1:	83 ec 04             	sub    $0x4,%esp
f010f9f4:	68 08 54 13 f0       	push   $0xf0135408
f010f9f9:	68 1e 02 00 00       	push   $0x21e
f010f9fe:	68 b0 48 13 f0       	push   $0xf01348b0
f010fa03:	e8 a8 07 ff ff       	call   f01001b0 <_panic>
	*(startVAs[idx]) = idx ;
f010fa08:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fa0b:	8b 14 85 80 b3 2d f0 	mov    -0xfd24c80(,%eax,4),%edx
f010fa12:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fa15:	66 89 02             	mov    %ax,(%edx)
	*(midVAs[idx]) = idx ;
f010fa18:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fa1b:	8b 14 85 80 df 2d f0 	mov    -0xfd22080(,%eax,4),%edx
f010fa22:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fa25:	66 89 02             	mov    %ax,(%edx)
	*(endVAs[idx]) = idx ;
f010fa28:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fa2b:	8b 14 85 80 c9 2d f0 	mov    -0xfd23680(,%eax,4),%edx
f010fa32:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fa35:	66 89 02             	mov    %ax,(%edx)

	//====================================================================//
	/* Check stored data inside each allocated block*/
	cprintf("	2: Check stored data inside each allocated block\n\n") ;
f010fa38:	83 ec 0c             	sub    $0xc,%esp
f010fa3b:	68 50 54 13 f0       	push   $0xf0135450
f010fa40:	e8 ec 13 ff ff       	call   f0100e31 <cprintf>
f010fa45:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010fa48:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)

	for (int i = 0; i < idx; ++i)
f010fa4f:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f010fa56:	eb 5b                	jmp    f010fab3 <test_free_block_FF+0x31a>
	{
		if (*(startVAs[i]) != i || *(midVAs[i]) != i ||	*(endVAs[i]) != i)
f010fa58:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010fa5b:	8b 04 85 80 b3 2d f0 	mov    -0xfd24c80(,%eax,4),%eax
f010fa62:	66 8b 00             	mov    (%eax),%ax
f010fa65:	98                   	cwtl   
f010fa66:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f010fa69:	75 26                	jne    f010fa91 <test_free_block_FF+0x2f8>
f010fa6b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010fa6e:	8b 04 85 80 df 2d f0 	mov    -0xfd22080(,%eax,4),%eax
f010fa75:	66 8b 00             	mov    (%eax),%ax
f010fa78:	98                   	cwtl   
f010fa79:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f010fa7c:	75 13                	jne    f010fa91 <test_free_block_FF+0x2f8>
f010fa7e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010fa81:	8b 04 85 80 c9 2d f0 	mov    -0xfd23680(,%eax,4),%eax
f010fa88:	66 8b 00             	mov    (%eax),%ax
f010fa8b:	98                   	cwtl   
f010fa8c:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f010fa8f:	74 1f                	je     f010fab0 <test_free_block_FF+0x317>
		{
			is_correct = 0;
f010fa91:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_free_block #3.%d: WRONG! content of the block is not correct. Expected %d\n",i, i);
f010fa98:	83 ec 04             	sub    $0x4,%esp
f010fa9b:	ff 75 d4             	pushl  -0x2c(%ebp)
f010fa9e:	ff 75 d4             	pushl  -0x2c(%ebp)
f010faa1:	68 84 54 13 f0       	push   $0xf0135484
f010faa6:	e8 86 13 ff ff       	call   f0100e31 <cprintf>
f010faab:	83 c4 10             	add    $0x10,%esp
			break;
f010faae:	eb 0b                	jmp    f010fabb <test_free_block_FF+0x322>
	//====================================================================//
	/* Check stored data inside each allocated block*/
	cprintf("	2: Check stored data inside each allocated block\n\n") ;
	is_correct = 1;

	for (int i = 0; i < idx; ++i)
f010fab0:	ff 45 d4             	incl   -0x2c(%ebp)
f010fab3:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010fab6:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f010fab9:	7c 9d                	jl     f010fa58 <test_free_block_FF+0x2bf>
		}
	}

	//====================================================================//
	/* free_block Scenario 1: Free some allocated blocks [no coalesce]*/
	cprintf("	3: Free some allocated block [no coalesce]\n\n") ;
f010fabb:	83 ec 0c             	sub    $0xc,%esp
f010fabe:	68 d4 54 13 f0       	push   $0xf01354d4
f010fac3:	e8 69 13 ff ff       	call   f0100e31 <cprintf>
f010fac8:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010facb:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)

	//Free set of blocks with different sizes (first block of each size)
	for (int i = 0; i < numOfAllocs; ++i)
f010fad2:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
f010fad9:	e9 e4 00 00 00       	jmp    f010fbc2 <test_free_block_FF+0x429>
	{
		free_block(startVAs[i*allocCntPerSize]);
f010fade:	8b 55 d0             	mov    -0x30(%ebp),%edx
f010fae1:	89 d0                	mov    %edx,%eax
f010fae3:	c1 e0 02             	shl    $0x2,%eax
f010fae6:	01 d0                	add    %edx,%eax
f010fae8:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010faef:	01 d0                	add    %edx,%eax
f010faf1:	c1 e0 03             	shl    $0x3,%eax
f010faf4:	8b 04 85 80 b3 2d f0 	mov    -0xfd24c80(,%eax,4),%eax
f010fafb:	83 ec 0c             	sub    $0xc,%esp
f010fafe:	50                   	push   %eax
f010faff:	e8 7a 09 02 00       	call   f013047e <free_block>
f010fb04:	83 c4 10             	add    $0x10,%esp
		uint32 block_size = get_block_size(startVAs[i*allocCntPerSize]) ;
f010fb07:	8b 55 d0             	mov    -0x30(%ebp),%edx
f010fb0a:	89 d0                	mov    %edx,%eax
f010fb0c:	c1 e0 02             	shl    $0x2,%eax
f010fb0f:	01 d0                	add    %edx,%eax
f010fb11:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010fb18:	01 d0                	add    %edx,%eax
f010fb1a:	c1 e0 03             	shl    $0x3,%eax
f010fb1d:	8b 04 85 80 b3 2d f0 	mov    -0xfd24c80(,%eax,4),%eax
f010fb24:	83 ec 0c             	sub    $0xc,%esp
f010fb27:	50                   	push   %eax
f010fb28:	e8 86 03 02 00       	call   f012feb3 <get_block_size>
f010fb2d:	83 c4 10             	add    $0x10,%esp
f010fb30:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if (block_size != allocSizes[i])
f010fb33:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010fb36:	8b 04 85 20 fb 18 f0 	mov    -0xfe704e0(,%eax,4),%eax
f010fb3d:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f010fb40:	74 2b                	je     f010fb6d <test_free_block_FF+0x3d4>
		{
			if (is_correct)
f010fb42:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010fb46:	74 25                	je     f010fb6d <test_free_block_FF+0x3d4>
			{
				is_correct = 0;
f010fb48:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
				cprintf("test_free_block #4.%d: WRONG FREE! block size after free is not correct. Expected %d, Actual %d\n",i, allocSizes[i],block_size);
f010fb4f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010fb52:	8b 04 85 20 fb 18 f0 	mov    -0xfe704e0(,%eax,4),%eax
f010fb59:	ff 75 bc             	pushl  -0x44(%ebp)
f010fb5c:	50                   	push   %eax
f010fb5d:	ff 75 d0             	pushl  -0x30(%ebp)
f010fb60:	68 04 55 13 f0       	push   $0xf0135504
f010fb65:	e8 c7 12 ff ff       	call   f0100e31 <cprintf>
f010fb6a:	83 c4 10             	add    $0x10,%esp
			}
		}
		int8 block_status = is_free_block(startVAs[i*allocCntPerSize]) ;
f010fb6d:	8b 55 d0             	mov    -0x30(%ebp),%edx
f010fb70:	89 d0                	mov    %edx,%eax
f010fb72:	c1 e0 02             	shl    $0x2,%eax
f010fb75:	01 d0                	add    %edx,%eax
f010fb77:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010fb7e:	01 d0                	add    %edx,%eax
f010fb80:	c1 e0 03             	shl    $0x3,%eax
f010fb83:	8b 04 85 80 b3 2d f0 	mov    -0xfd24c80(,%eax,4),%eax
f010fb8a:	83 ec 0c             	sub    $0xc,%esp
f010fb8d:	50                   	push   %eax
f010fb8e:	e8 36 03 02 00       	call   f012fec9 <is_free_block>
f010fb93:	83 c4 10             	add    $0x10,%esp
f010fb96:	88 45 bb             	mov    %al,-0x45(%ebp)
		if (block_status != 1)
f010fb99:	80 7d bb 01          	cmpb   $0x1,-0x45(%ebp)
f010fb9d:	74 20                	je     f010fbbf <test_free_block_FF+0x426>
		{
			if (is_correct)
f010fb9f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010fba3:	74 1a                	je     f010fbbf <test_free_block_FF+0x426>
			{
				is_correct = 0;
f010fba5:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
				cprintf("test_free_block #5.%d: WRONG FREE! block status (is_free) not equal 1 after freeing.\n", i);
f010fbac:	83 ec 08             	sub    $0x8,%esp
f010fbaf:	ff 75 d0             	pushl  -0x30(%ebp)
f010fbb2:	68 68 55 13 f0       	push   $0xf0135568
f010fbb7:	e8 75 12 ff ff       	call   f0100e31 <cprintf>
f010fbbc:	83 c4 10             	add    $0x10,%esp
	/* free_block Scenario 1: Free some allocated blocks [no coalesce]*/
	cprintf("	3: Free some allocated block [no coalesce]\n\n") ;
	is_correct = 1;

	//Free set of blocks with different sizes (first block of each size)
	for (int i = 0; i < numOfAllocs; ++i)
f010fbbf:	ff 45 d0             	incl   -0x30(%ebp)
f010fbc2:	83 7d d0 06          	cmpl   $0x6,-0x30(%ebp)
f010fbc6:	0f 8e 12 ff ff ff    	jle    f010fade <test_free_block_FF+0x345>
				is_correct = 0;
				cprintf("test_free_block #5.%d: WRONG FREE! block status (is_free) not equal 1 after freeing.\n", i);
			}
		}
	}
	if (is_correct)
f010fbcc:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010fbd0:	74 04                	je     f010fbd6 <test_free_block_FF+0x43d>
	{
		eval += 10;
f010fbd2:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)
	}

	is_correct = 1;
f010fbd6:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	//Free last block
	free_block(startVAs[numOfAllocs*allocCntPerSize]);
f010fbdd:	a1 60 c9 2d f0       	mov    0xf02dc960,%eax
f010fbe2:	83 ec 0c             	sub    $0xc,%esp
f010fbe5:	50                   	push   %eax
f010fbe6:	e8 93 08 02 00       	call   f013047e <free_block>
f010fbeb:	83 c4 10             	add    $0x10,%esp
	uint32 block_size = get_block_size(startVAs[numOfAllocs*allocCntPerSize]) ;
f010fbee:	a1 60 c9 2d f0       	mov    0xf02dc960,%eax
f010fbf3:	83 ec 0c             	sub    $0xc,%esp
f010fbf6:	50                   	push   %eax
f010fbf7:	e8 b7 02 02 00       	call   f012feb3 <get_block_size>
f010fbfc:	83 c4 10             	add    $0x10,%esp
f010fbff:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if (block_size != remainSize)
f010fc02:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010fc05:	39 45 b4             	cmp    %eax,-0x4c(%ebp)
f010fc08:	74 1d                	je     f010fc27 <test_free_block_FF+0x48e>
	{
		is_correct = 0;
f010fc0a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #6.1: WRONG FREE! block size after free is not correct. Expected %d, Actual %d\n",remainSize,block_size);
f010fc11:	83 ec 04             	sub    $0x4,%esp
f010fc14:	ff 75 b4             	pushl  -0x4c(%ebp)
f010fc17:	ff 75 c8             	pushl  -0x38(%ebp)
f010fc1a:	68 c0 55 13 f0       	push   $0xf01355c0
f010fc1f:	e8 0d 12 ff ff       	call   f0100e31 <cprintf>
f010fc24:	83 c4 10             	add    $0x10,%esp
	}
	int8 block_status = is_free_block(startVAs[numOfAllocs*allocCntPerSize]) ;
f010fc27:	a1 60 c9 2d f0       	mov    0xf02dc960,%eax
f010fc2c:	83 ec 0c             	sub    $0xc,%esp
f010fc2f:	50                   	push   %eax
f010fc30:	e8 94 02 02 00       	call   f012fec9 <is_free_block>
f010fc35:	83 c4 10             	add    $0x10,%esp
f010fc38:	88 45 b3             	mov    %al,-0x4d(%ebp)
	if (block_status != 1)
f010fc3b:	80 7d b3 01          	cmpb   $0x1,-0x4d(%ebp)
f010fc3f:	74 17                	je     f010fc58 <test_free_block_FF+0x4bf>
	{
		is_correct = 0;
f010fc41:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #6.2: WRONG FREE! block status (is_free) not equal 1 after freeing.\n");
f010fc48:	83 ec 0c             	sub    $0xc,%esp
f010fc4b:	68 20 56 13 f0       	push   $0xf0135620
f010fc50:	e8 dc 11 ff ff       	call   f0100e31 <cprintf>
f010fc55:	83 c4 10             	add    $0x10,%esp
	}

	//Reallocate last block
	actualSize = remainSize - sizeOfMetaData();
f010fc58:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010fc5b:	83 e8 10             	sub    $0x10,%eax
f010fc5e:	89 45 c4             	mov    %eax,-0x3c(%ebp)
	va = alloc_block(actualSize, DA_FF);
f010fc61:	83 ec 08             	sub    $0x8,%esp
f010fc64:	6a 01                	push   $0x1
f010fc66:	ff 75 c4             	pushl  -0x3c(%ebp)
f010fc69:	e8 72 02 02 00       	call   f012fee0 <alloc_block>
f010fc6e:	83 c4 10             	add    $0x10,%esp
f010fc71:	89 45 c0             	mov    %eax,-0x40(%ebp)
	//Check returned va
	if(va == NULL || (va != (curVA + sizeOfMetaData())))
f010fc74:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
f010fc78:	74 0b                	je     f010fc85 <test_free_block_FF+0x4ec>
f010fc7a:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010fc7d:	83 c0 10             	add    $0x10,%eax
f010fc80:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f010fc83:	74 17                	je     f010fc9c <test_free_block_FF+0x503>
	{
		is_correct = 0;
f010fc85:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #6.3: WRONG ALLOC - alloc_block_FF return wrong address.\n");
f010fc8c:	83 ec 0c             	sub    $0xc,%esp
f010fc8f:	68 78 56 13 f0       	push   $0xf0135678
f010fc94:	e8 98 11 ff ff       	call   f0100e31 <cprintf>
f010fc99:	83 c4 10             	add    $0x10,%esp
	}
	//Free block before last
	free_block(startVAs[numOfAllocs*allocCntPerSize - 1]);
f010fc9c:	a1 5c c9 2d f0       	mov    0xf02dc95c,%eax
f010fca1:	83 ec 0c             	sub    $0xc,%esp
f010fca4:	50                   	push   %eax
f010fca5:	e8 d4 07 02 00       	call   f013047e <free_block>
f010fcaa:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[numOfAllocs*allocCntPerSize - 1]) ;
f010fcad:	a1 5c c9 2d f0       	mov    0xf02dc95c,%eax
f010fcb2:	83 ec 0c             	sub    $0xc,%esp
f010fcb5:	50                   	push   %eax
f010fcb6:	e8 f8 01 02 00       	call   f012feb3 <get_block_size>
f010fcbb:	83 c4 10             	add    $0x10,%esp
f010fcbe:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if (block_size != allocSizes[numOfAllocs-1])
f010fcc1:	a1 38 fb 18 f0       	mov    0xf018fb38,%eax
f010fcc6:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f010fcc9:	74 20                	je     f010fceb <test_free_block_FF+0x552>
	{
		is_correct = 0;
f010fccb:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #6.4: WRONG FREE! block size after free is not correct. Expected %d, Actual %d\n",allocSizes[numOfAllocs-1],block_size);
f010fcd2:	a1 38 fb 18 f0       	mov    0xf018fb38,%eax
f010fcd7:	83 ec 04             	sub    $0x4,%esp
f010fcda:	ff 75 b4             	pushl  -0x4c(%ebp)
f010fcdd:	50                   	push   %eax
f010fcde:	68 c4 56 13 f0       	push   $0xf01356c4
f010fce3:	e8 49 11 ff ff       	call   f0100e31 <cprintf>
f010fce8:	83 c4 10             	add    $0x10,%esp
	}
	block_status = is_free_block(startVAs[numOfAllocs*allocCntPerSize-1]) ;
f010fceb:	a1 5c c9 2d f0       	mov    0xf02dc95c,%eax
f010fcf0:	83 ec 0c             	sub    $0xc,%esp
f010fcf3:	50                   	push   %eax
f010fcf4:	e8 d0 01 02 00       	call   f012fec9 <is_free_block>
f010fcf9:	83 c4 10             	add    $0x10,%esp
f010fcfc:	88 45 b3             	mov    %al,-0x4d(%ebp)
	if (block_status != 1)
f010fcff:	80 7d b3 01          	cmpb   $0x1,-0x4d(%ebp)
f010fd03:	74 17                	je     f010fd1c <test_free_block_FF+0x583>
	{
		is_correct = 0;
f010fd05:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #6.5: WRONG FREE! block status (is_free) not equal 1 after freeing.\n");
f010fd0c:	83 ec 0c             	sub    $0xc,%esp
f010fd0f:	68 24 57 13 f0       	push   $0xf0135724
f010fd14:	e8 18 11 ff ff       	call   f0100e31 <cprintf>
f010fd19:	83 c4 10             	add    $0x10,%esp
	}
	//Reallocate first block
	actualSize = allocSizes[0] - sizeOfMetaData();
f010fd1c:	a1 20 fb 18 f0       	mov    0xf018fb20,%eax
f010fd21:	83 e8 10             	sub    $0x10,%eax
f010fd24:	89 45 c4             	mov    %eax,-0x3c(%ebp)
	va = alloc_block(actualSize, DA_FF);
f010fd27:	83 ec 08             	sub    $0x8,%esp
f010fd2a:	6a 01                	push   $0x1
f010fd2c:	ff 75 c4             	pushl  -0x3c(%ebp)
f010fd2f:	e8 ac 01 02 00       	call   f012fee0 <alloc_block>
f010fd34:	83 c4 10             	add    $0x10,%esp
f010fd37:	89 45 c0             	mov    %eax,-0x40(%ebp)
	//Check returned va
	if(va == NULL || (va != (void*)(KERNEL_HEAP_START + sizeOfMetaData())))
f010fd3a:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
f010fd3e:	74 09                	je     f010fd49 <test_free_block_FF+0x5b0>
f010fd40:	81 7d c0 10 00 00 f6 	cmpl   $0xf6000010,-0x40(%ebp)
f010fd47:	74 17                	je     f010fd60 <test_free_block_FF+0x5c7>
	{
		is_correct = 0;
f010fd49:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #7.1: WRONG ALLOC - alloc_block_FF return wrong address.\n");
f010fd50:	83 ec 0c             	sub    $0xc,%esp
f010fd53:	68 7c 57 13 f0       	push   $0xf013577c
f010fd58:	e8 d4 10 ff ff       	call   f0100e31 <cprintf>
f010fd5d:	83 c4 10             	add    $0x10,%esp
	}
	//Free 2nd block
	free_block(startVAs[1]);
f010fd60:	a1 84 b3 2d f0       	mov    0xf02db384,%eax
f010fd65:	83 ec 0c             	sub    $0xc,%esp
f010fd68:	50                   	push   %eax
f010fd69:	e8 10 07 02 00       	call   f013047e <free_block>
f010fd6e:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[1]) ;
f010fd71:	a1 84 b3 2d f0       	mov    0xf02db384,%eax
f010fd76:	83 ec 0c             	sub    $0xc,%esp
f010fd79:	50                   	push   %eax
f010fd7a:	e8 34 01 02 00       	call   f012feb3 <get_block_size>
f010fd7f:	83 c4 10             	add    $0x10,%esp
f010fd82:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if (block_size != allocSizes[0])
f010fd85:	a1 20 fb 18 f0       	mov    0xf018fb20,%eax
f010fd8a:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f010fd8d:	74 20                	je     f010fdaf <test_free_block_FF+0x616>
	{
		is_correct = 0;
f010fd8f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #7.2: WRONG FREE! block size after free is not correct. Expected %d, Actual %d\n",allocSizes[0],block_size);
f010fd96:	a1 20 fb 18 f0       	mov    0xf018fb20,%eax
f010fd9b:	83 ec 04             	sub    $0x4,%esp
f010fd9e:	ff 75 b4             	pushl  -0x4c(%ebp)
f010fda1:	50                   	push   %eax
f010fda2:	68 c8 57 13 f0       	push   $0xf01357c8
f010fda7:	e8 85 10 ff ff       	call   f0100e31 <cprintf>
f010fdac:	83 c4 10             	add    $0x10,%esp
	}
	block_status = is_free_block(startVAs[1]) ;
f010fdaf:	a1 84 b3 2d f0       	mov    0xf02db384,%eax
f010fdb4:	83 ec 0c             	sub    $0xc,%esp
f010fdb7:	50                   	push   %eax
f010fdb8:	e8 0c 01 02 00       	call   f012fec9 <is_free_block>
f010fdbd:	83 c4 10             	add    $0x10,%esp
f010fdc0:	88 45 b3             	mov    %al,-0x4d(%ebp)
	if (block_status != 1)
f010fdc3:	80 7d b3 01          	cmpb   $0x1,-0x4d(%ebp)
f010fdc7:	74 17                	je     f010fde0 <test_free_block_FF+0x647>
	{
		is_correct = 0;
f010fdc9:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #7.3: WRONG FREE! block status (is_free) not equal 1 after freeing.\n");
f010fdd0:	83 ec 0c             	sub    $0xc,%esp
f010fdd3:	68 28 58 13 f0       	push   $0xf0135828
f010fdd8:	e8 54 10 ff ff       	call   f0100e31 <cprintf>
f010fddd:	83 c4 10             	add    $0x10,%esp
	}

	if (is_correct)
f010fde0:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010fde4:	74 04                	je     f010fdea <test_free_block_FF+0x651>
	{
		eval += 10;
f010fde6:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)
	}

	//====================================================================//
	/*free_block Scenario 2: Merge with previous ONLY (AT the tail)*/
	cprintf("	4: Free some allocated blocks [Merge with previous ONLY]\n\n") ;
f010fdea:	83 ec 0c             	sub    $0xc,%esp
f010fded:	68 80 58 13 f0       	push   $0xf0135880
f010fdf2:	e8 3a 10 ff ff       	call   f0100e31 <cprintf>
f010fdf7:	83 c4 10             	add    $0x10,%esp
	cprintf("		4.1: at the tail\n\n") ;
f010fdfa:	83 ec 0c             	sub    $0xc,%esp
f010fdfd:	68 bc 58 13 f0       	push   $0xf01358bc
f010fe02:	e8 2a 10 ff ff       	call   f0100e31 <cprintf>
f010fe07:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010fe0a:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	//Free last block (coalesce with previous)
	uint32 blockIndex = numOfAllocs*allocCntPerSize;
f010fe11:	c7 45 ac 78 05 00 00 	movl   $0x578,-0x54(%ebp)
	free_block(startVAs[blockIndex]);
f010fe18:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fe1b:	8b 04 85 80 b3 2d f0 	mov    -0xfd24c80(,%eax,4),%eax
f010fe22:	83 ec 0c             	sub    $0xc,%esp
f010fe25:	50                   	push   %eax
f010fe26:	e8 53 06 02 00       	call   f013047e <free_block>
f010fe2b:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[blockIndex-1]) ;
f010fe2e:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fe31:	48                   	dec    %eax
f010fe32:	8b 04 85 80 b3 2d f0 	mov    -0xfd24c80(,%eax,4),%eax
f010fe39:	83 ec 0c             	sub    $0xc,%esp
f010fe3c:	50                   	push   %eax
f010fe3d:	e8 71 00 02 00       	call   f012feb3 <get_block_size>
f010fe42:	83 c4 10             	add    $0x10,%esp
f010fe45:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if (block_size != remainSize + allocSizes[numOfAllocs-1])
f010fe48:	8b 15 38 fb 18 f0    	mov    0xf018fb38,%edx
f010fe4e:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010fe51:	01 d0                	add    %edx,%eax
f010fe53:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f010fe56:	74 26                	je     f010fe7e <test_free_block_FF+0x6e5>
	{
		is_correct = 0;
f010fe58:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #8.1: WRONG FREE! block size after free is not correct. Expected %d, Actual %d\n",remainSize + allocSizes[numOfAllocs-1],block_size);
f010fe5f:	8b 15 38 fb 18 f0    	mov    0xf018fb38,%edx
f010fe65:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010fe68:	01 d0                	add    %edx,%eax
f010fe6a:	83 ec 04             	sub    $0x4,%esp
f010fe6d:	ff 75 b4             	pushl  -0x4c(%ebp)
f010fe70:	50                   	push   %eax
f010fe71:	68 d4 58 13 f0       	push   $0xf01358d4
f010fe76:	e8 b6 0f ff ff       	call   f0100e31 <cprintf>
f010fe7b:	83 c4 10             	add    $0x10,%esp
	}
	block_status = is_free_block(startVAs[blockIndex-1]) ;
f010fe7e:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fe81:	48                   	dec    %eax
f010fe82:	8b 04 85 80 b3 2d f0 	mov    -0xfd24c80(,%eax,4),%eax
f010fe89:	83 ec 0c             	sub    $0xc,%esp
f010fe8c:	50                   	push   %eax
f010fe8d:	e8 37 00 02 00       	call   f012fec9 <is_free_block>
f010fe92:	83 c4 10             	add    $0x10,%esp
f010fe95:	88 45 b3             	mov    %al,-0x4d(%ebp)
	if (block_status != 1)
f010fe98:	80 7d b3 01          	cmpb   $0x1,-0x4d(%ebp)
f010fe9c:	74 17                	je     f010feb5 <test_free_block_FF+0x71c>
	{
		is_correct = 0;
f010fe9e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #8.2: WRONG FREE! block status (is_free) not equal 1 after freeing.\n");
f010fea5:	83 ec 0c             	sub    $0xc,%esp
f010fea8:	68 34 59 13 f0       	push   $0xf0135934
f010fead:	e8 7f 0f ff ff       	call   f0100e31 <cprintf>
f010feb2:	83 c4 10             	add    $0x10,%esp
	}

	if (get_block_size(startVAs[blockIndex]) != 0 || is_free_block(startVAs[blockIndex]) != 0)
f010feb5:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010feb8:	8b 04 85 80 b3 2d f0 	mov    -0xfd24c80(,%eax,4),%eax
f010febf:	83 ec 0c             	sub    $0xc,%esp
f010fec2:	50                   	push   %eax
f010fec3:	e8 eb ff 01 00       	call   f012feb3 <get_block_size>
f010fec8:	83 c4 10             	add    $0x10,%esp
f010fecb:	85 c0                	test   %eax,%eax
f010fecd:	75 1a                	jne    f010fee9 <test_free_block_FF+0x750>
f010fecf:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fed2:	8b 04 85 80 b3 2d f0 	mov    -0xfd24c80(,%eax,4),%eax
f010fed9:	83 ec 0c             	sub    $0xc,%esp
f010fedc:	50                   	push   %eax
f010fedd:	e8 e7 ff 01 00       	call   f012fec9 <is_free_block>
f010fee2:	83 c4 10             	add    $0x10,%esp
f010fee5:	84 c0                	test   %al,%al
f010fee7:	74 17                	je     f010ff00 <test_free_block_FF+0x767>
	{
		is_correct = 0;
f010fee9:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #8.3: WRONG FREE! make sure to ZEROing the size & is_free values of the vanishing block.\n");
f010fef0:	83 ec 0c             	sub    $0xc,%esp
f010fef3:	68 8c 59 13 f0       	push   $0xf013598c
f010fef8:	e8 34 0f ff ff       	call   f0100e31 <cprintf>
f010fefd:	83 c4 10             	add    $0x10,%esp
	}

	//====================================================================//
	/*free_block Scenario 3: Merge with previous ONLY (between 2 blocks)*/
	cprintf("		4.2: between 2 blocks\n\n") ;
f010ff00:	83 ec 0c             	sub    $0xc,%esp
f010ff03:	68 f6 59 13 f0       	push   $0xf01359f6
f010ff08:	e8 24 0f ff ff       	call   f0100e31 <cprintf>
f010ff0d:	83 c4 10             	add    $0x10,%esp
	blockIndex = 2*allocCntPerSize+1 ;
f010ff10:	c7 45 ac 91 01 00 00 	movl   $0x191,-0x54(%ebp)
	free_block(startVAs[blockIndex]);
f010ff17:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010ff1a:	8b 04 85 80 b3 2d f0 	mov    -0xfd24c80(,%eax,4),%eax
f010ff21:	83 ec 0c             	sub    $0xc,%esp
f010ff24:	50                   	push   %eax
f010ff25:	e8 54 05 02 00       	call   f013047e <free_block>
f010ff2a:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[blockIndex-1]) ;
f010ff2d:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010ff30:	48                   	dec    %eax
f010ff31:	8b 04 85 80 b3 2d f0 	mov    -0xfd24c80(,%eax,4),%eax
f010ff38:	83 ec 0c             	sub    $0xc,%esp
f010ff3b:	50                   	push   %eax
f010ff3c:	e8 72 ff 01 00       	call   f012feb3 <get_block_size>
f010ff41:	83 c4 10             	add    $0x10,%esp
f010ff44:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if (block_size != allocSizes[2]+allocSizes[2])
f010ff47:	8b 15 28 fb 18 f0    	mov    0xf018fb28,%edx
f010ff4d:	a1 28 fb 18 f0       	mov    0xf018fb28,%eax
f010ff52:	01 d0                	add    %edx,%eax
f010ff54:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f010ff57:	74 28                	je     f010ff81 <test_free_block_FF+0x7e8>
	{
		is_correct = 0;
f010ff59:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf	("test_free_block #9.1: WRONG FREE! block size after free is not correct. Expected %d, Actual %d\n",allocSizes[2] + allocSizes[2],block_size);
f010ff60:	8b 15 28 fb 18 f0    	mov    0xf018fb28,%edx
f010ff66:	a1 28 fb 18 f0       	mov    0xf018fb28,%eax
f010ff6b:	01 d0                	add    %edx,%eax
f010ff6d:	83 ec 04             	sub    $0x4,%esp
f010ff70:	ff 75 b4             	pushl  -0x4c(%ebp)
f010ff73:	50                   	push   %eax
f010ff74:	68 10 5a 13 f0       	push   $0xf0135a10
f010ff79:	e8 b3 0e ff ff       	call   f0100e31 <cprintf>
f010ff7e:	83 c4 10             	add    $0x10,%esp
	}
	block_status = is_free_block(startVAs[blockIndex-1]) ;
f010ff81:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010ff84:	48                   	dec    %eax
f010ff85:	8b 04 85 80 b3 2d f0 	mov    -0xfd24c80(,%eax,4),%eax
f010ff8c:	83 ec 0c             	sub    $0xc,%esp
f010ff8f:	50                   	push   %eax
f010ff90:	e8 34 ff 01 00       	call   f012fec9 <is_free_block>
f010ff95:	83 c4 10             	add    $0x10,%esp
f010ff98:	88 45 b3             	mov    %al,-0x4d(%ebp)
	if (block_status != 1)
f010ff9b:	80 7d b3 01          	cmpb   $0x1,-0x4d(%ebp)
f010ff9f:	74 17                	je     f010ffb8 <test_free_block_FF+0x81f>
	{
		is_correct = 0;
f010ffa1:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #9.2: WRONG FREE! block status (is_free) not equal 1 after freeing.\n");
f010ffa8:	83 ec 0c             	sub    $0xc,%esp
f010ffab:	68 70 5a 13 f0       	push   $0xf0135a70
f010ffb0:	e8 7c 0e ff ff       	call   f0100e31 <cprintf>
f010ffb5:	83 c4 10             	add    $0x10,%esp
	}

	if (get_block_size(startVAs[blockIndex]) != 0 || is_free_block(startVAs[blockIndex]) != 0)
f010ffb8:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010ffbb:	8b 04 85 80 b3 2d f0 	mov    -0xfd24c80(,%eax,4),%eax
f010ffc2:	83 ec 0c             	sub    $0xc,%esp
f010ffc5:	50                   	push   %eax
f010ffc6:	e8 e8 fe 01 00       	call   f012feb3 <get_block_size>
f010ffcb:	83 c4 10             	add    $0x10,%esp
f010ffce:	85 c0                	test   %eax,%eax
f010ffd0:	75 1a                	jne    f010ffec <test_free_block_FF+0x853>
f010ffd2:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010ffd5:	8b 04 85 80 b3 2d f0 	mov    -0xfd24c80(,%eax,4),%eax
f010ffdc:	83 ec 0c             	sub    $0xc,%esp
f010ffdf:	50                   	push   %eax
f010ffe0:	e8 e4 fe 01 00       	call   f012fec9 <is_free_block>
f010ffe5:	83 c4 10             	add    $0x10,%esp
f010ffe8:	84 c0                	test   %al,%al
f010ffea:	74 17                	je     f0110003 <test_free_block_FF+0x86a>
	{
		is_correct = 0;
f010ffec:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #9.3: WRONG FREE! make sure to ZEROing the size & is_free values of the vanishing block.\n");
f010fff3:	83 ec 0c             	sub    $0xc,%esp
f010fff6:	68 c8 5a 13 f0       	push   $0xf0135ac8
f010fffb:	e8 31 0e ff ff       	call   f0100e31 <cprintf>
f0110000:	83 c4 10             	add    $0x10,%esp
	}

	if (is_correct)
f0110003:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0110007:	74 04                	je     f011000d <test_free_block_FF+0x874>
	{
		eval += 15;
f0110009:	83 45 f4 0f          	addl   $0xf,-0xc(%ebp)
	}

	//====================================================================//
	/*free_block Scenario 4: Merge with next ONLY (AT the head)*/
	cprintf("	5: Free some allocated blocks [Merge with next ONLY]\n\n") ;
f011000d:	83 ec 0c             	sub    $0xc,%esp
f0110010:	68 34 5b 13 f0       	push   $0xf0135b34
f0110015:	e8 17 0e ff ff       	call   f0100e31 <cprintf>
f011001a:	83 c4 10             	add    $0x10,%esp
	cprintf("		5.1: at the head\n\n") ;
f011001d:	83 ec 0c             	sub    $0xc,%esp
f0110020:	68 6c 5b 13 f0       	push   $0xf0135b6c
f0110025:	e8 07 0e ff ff       	call   f0100e31 <cprintf>
f011002a:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f011002d:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	blockIndex = 0 ;
f0110034:	c7 45 ac 00 00 00 00 	movl   $0x0,-0x54(%ebp)
	free_block(startVAs[blockIndex]);
f011003b:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011003e:	8b 04 85 80 b3 2d f0 	mov    -0xfd24c80(,%eax,4),%eax
f0110045:	83 ec 0c             	sub    $0xc,%esp
f0110048:	50                   	push   %eax
f0110049:	e8 30 04 02 00       	call   f013047e <free_block>
f011004e:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[blockIndex]) ;
f0110051:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0110054:	8b 04 85 80 b3 2d f0 	mov    -0xfd24c80(,%eax,4),%eax
f011005b:	83 ec 0c             	sub    $0xc,%esp
f011005e:	50                   	push   %eax
f011005f:	e8 4f fe 01 00       	call   f012feb3 <get_block_size>
f0110064:	83 c4 10             	add    $0x10,%esp
f0110067:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if (block_size != allocSizes[0]+allocSizes[0])
f011006a:	8b 15 20 fb 18 f0    	mov    0xf018fb20,%edx
f0110070:	a1 20 fb 18 f0       	mov    0xf018fb20,%eax
f0110075:	01 d0                	add    %edx,%eax
f0110077:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f011007a:	74 28                	je     f01100a4 <test_free_block_FF+0x90b>
	{
		is_correct = 0;
f011007c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #9.1: WRONG FREE! block size after free is not correct. Expected %d, Actual %d\n",allocSizes[0] + allocSizes[0],block_size);
f0110083:	8b 15 20 fb 18 f0    	mov    0xf018fb20,%edx
f0110089:	a1 20 fb 18 f0       	mov    0xf018fb20,%eax
f011008e:	01 d0                	add    %edx,%eax
f0110090:	83 ec 04             	sub    $0x4,%esp
f0110093:	ff 75 b4             	pushl  -0x4c(%ebp)
f0110096:	50                   	push   %eax
f0110097:	68 10 5a 13 f0       	push   $0xf0135a10
f011009c:	e8 90 0d ff ff       	call   f0100e31 <cprintf>
f01100a1:	83 c4 10             	add    $0x10,%esp
	}
	block_status = is_free_block(startVAs[blockIndex]) ;
f01100a4:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01100a7:	8b 04 85 80 b3 2d f0 	mov    -0xfd24c80(,%eax,4),%eax
f01100ae:	83 ec 0c             	sub    $0xc,%esp
f01100b1:	50                   	push   %eax
f01100b2:	e8 12 fe 01 00       	call   f012fec9 <is_free_block>
f01100b7:	83 c4 10             	add    $0x10,%esp
f01100ba:	88 45 b3             	mov    %al,-0x4d(%ebp)
	if (block_status != 1)
f01100bd:	80 7d b3 01          	cmpb   $0x1,-0x4d(%ebp)
f01100c1:	74 17                	je     f01100da <test_free_block_FF+0x941>
	{
		is_correct = 0;
f01100c3:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #9.2: WRONG FREE! block status (is_free) not equal 1 after freeing.\n");
f01100ca:	83 ec 0c             	sub    $0xc,%esp
f01100cd:	68 70 5a 13 f0       	push   $0xf0135a70
f01100d2:	e8 5a 0d ff ff       	call   f0100e31 <cprintf>
f01100d7:	83 c4 10             	add    $0x10,%esp
	}
	if (get_block_size(startVAs[blockIndex+1]) != 0 || is_free_block(startVAs[blockIndex+1]) != 0)
f01100da:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01100dd:	40                   	inc    %eax
f01100de:	8b 04 85 80 b3 2d f0 	mov    -0xfd24c80(,%eax,4),%eax
f01100e5:	83 ec 0c             	sub    $0xc,%esp
f01100e8:	50                   	push   %eax
f01100e9:	e8 c5 fd 01 00       	call   f012feb3 <get_block_size>
f01100ee:	83 c4 10             	add    $0x10,%esp
f01100f1:	85 c0                	test   %eax,%eax
f01100f3:	75 1b                	jne    f0110110 <test_free_block_FF+0x977>
f01100f5:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01100f8:	40                   	inc    %eax
f01100f9:	8b 04 85 80 b3 2d f0 	mov    -0xfd24c80(,%eax,4),%eax
f0110100:	83 ec 0c             	sub    $0xc,%esp
f0110103:	50                   	push   %eax
f0110104:	e8 c0 fd 01 00       	call   f012fec9 <is_free_block>
f0110109:	83 c4 10             	add    $0x10,%esp
f011010c:	84 c0                	test   %al,%al
f011010e:	74 17                	je     f0110127 <test_free_block_FF+0x98e>
	{
		is_correct = 0;
f0110110:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #9.3: WRONG FREE! make sure to ZEROing the size & is_free values of the vanishing block.\n");
f0110117:	83 ec 0c             	sub    $0xc,%esp
f011011a:	68 c8 5a 13 f0       	push   $0xf0135ac8
f011011f:	e8 0d 0d ff ff       	call   f0100e31 <cprintf>
f0110124:	83 c4 10             	add    $0x10,%esp
	}

	//====================================================================//
	/*free_block Scenario 5: Merge with next ONLY (between 2 blocks)*/
	cprintf("		5.2: between 2 blocks\n\n") ;
f0110127:	83 ec 0c             	sub    $0xc,%esp
f011012a:	68 81 5b 13 f0       	push   $0xf0135b81
f011012f:	e8 fd 0c ff ff       	call   f0100e31 <cprintf>
f0110134:	83 c4 10             	add    $0x10,%esp
	blockIndex = 1*allocCntPerSize - 1 ;
f0110137:	c7 45 ac c7 00 00 00 	movl   $0xc7,-0x54(%ebp)
	free_block(startVAs[blockIndex]);
f011013e:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0110141:	8b 04 85 80 b3 2d f0 	mov    -0xfd24c80(,%eax,4),%eax
f0110148:	83 ec 0c             	sub    $0xc,%esp
f011014b:	50                   	push   %eax
f011014c:	e8 2d 03 02 00       	call   f013047e <free_block>
f0110151:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[blockIndex]) ;
f0110154:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0110157:	8b 04 85 80 b3 2d f0 	mov    -0xfd24c80(,%eax,4),%eax
f011015e:	83 ec 0c             	sub    $0xc,%esp
f0110161:	50                   	push   %eax
f0110162:	e8 4c fd 01 00       	call   f012feb3 <get_block_size>
f0110167:	83 c4 10             	add    $0x10,%esp
f011016a:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if (block_size != allocSizes[0]+allocSizes[1])
f011016d:	8b 15 20 fb 18 f0    	mov    0xf018fb20,%edx
f0110173:	a1 24 fb 18 f0       	mov    0xf018fb24,%eax
f0110178:	01 d0                	add    %edx,%eax
f011017a:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f011017d:	74 28                	je     f01101a7 <test_free_block_FF+0xa0e>
	{
		is_correct = 0;
f011017f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #10.1: WRONG FREE! block size after free is not correct. Expected %d, Actual %d\n",allocSizes[0] + allocSizes[1],block_size);
f0110186:	8b 15 20 fb 18 f0    	mov    0xf018fb20,%edx
f011018c:	a1 24 fb 18 f0       	mov    0xf018fb24,%eax
f0110191:	01 d0                	add    %edx,%eax
f0110193:	83 ec 04             	sub    $0x4,%esp
f0110196:	ff 75 b4             	pushl  -0x4c(%ebp)
f0110199:	50                   	push   %eax
f011019a:	68 9c 5b 13 f0       	push   $0xf0135b9c
f011019f:	e8 8d 0c ff ff       	call   f0100e31 <cprintf>
f01101a4:	83 c4 10             	add    $0x10,%esp
	}
	block_status = is_free_block(startVAs[blockIndex]) ;
f01101a7:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01101aa:	8b 04 85 80 b3 2d f0 	mov    -0xfd24c80(,%eax,4),%eax
f01101b1:	83 ec 0c             	sub    $0xc,%esp
f01101b4:	50                   	push   %eax
f01101b5:	e8 0f fd 01 00       	call   f012fec9 <is_free_block>
f01101ba:	83 c4 10             	add    $0x10,%esp
f01101bd:	88 45 b3             	mov    %al,-0x4d(%ebp)
	if (block_status != 1)
f01101c0:	80 7d b3 01          	cmpb   $0x1,-0x4d(%ebp)
f01101c4:	74 17                	je     f01101dd <test_free_block_FF+0xa44>
	{
		is_correct = 0;
f01101c6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #10.2: WRONG FREE! block status (is_free) not equal 1 after freeing.\n");
f01101cd:	83 ec 0c             	sub    $0xc,%esp
f01101d0:	68 00 5c 13 f0       	push   $0xf0135c00
f01101d5:	e8 57 0c ff ff       	call   f0100e31 <cprintf>
f01101da:	83 c4 10             	add    $0x10,%esp
	}
	if (get_block_size(startVAs[blockIndex+1]) != 0 || is_free_block(startVAs[blockIndex+1]) != 0)
f01101dd:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01101e0:	40                   	inc    %eax
f01101e1:	8b 04 85 80 b3 2d f0 	mov    -0xfd24c80(,%eax,4),%eax
f01101e8:	83 ec 0c             	sub    $0xc,%esp
f01101eb:	50                   	push   %eax
f01101ec:	e8 c2 fc 01 00       	call   f012feb3 <get_block_size>
f01101f1:	83 c4 10             	add    $0x10,%esp
f01101f4:	85 c0                	test   %eax,%eax
f01101f6:	75 1b                	jne    f0110213 <test_free_block_FF+0xa7a>
f01101f8:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01101fb:	40                   	inc    %eax
f01101fc:	8b 04 85 80 b3 2d f0 	mov    -0xfd24c80(,%eax,4),%eax
f0110203:	83 ec 0c             	sub    $0xc,%esp
f0110206:	50                   	push   %eax
f0110207:	e8 bd fc 01 00       	call   f012fec9 <is_free_block>
f011020c:	83 c4 10             	add    $0x10,%esp
f011020f:	84 c0                	test   %al,%al
f0110211:	74 17                	je     f011022a <test_free_block_FF+0xa91>
	{
		is_correct = 0;
f0110213:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #10.3: WRONG FREE! make sure to ZEROing the size & is_free values of the vanishing block.\n");
f011021a:	83 ec 0c             	sub    $0xc,%esp
f011021d:	68 58 5c 13 f0       	push   $0xf0135c58
f0110222:	e8 0a 0c ff ff       	call   f0100e31 <cprintf>
f0110227:	83 c4 10             	add    $0x10,%esp
	}
	if (is_correct)
f011022a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f011022e:	74 04                	je     f0110234 <test_free_block_FF+0xa9b>
	{
		eval += 15;
f0110230:	83 45 f4 0f          	addl   $0xf,-0xc(%ebp)
	}

	//====================================================================//
	/*free_block Scenario 6: Merge with prev & next */
	cprintf("	6: Free some allocated blocks [Merge with previous & next]\n\n") ;
f0110234:	83 ec 0c             	sub    $0xc,%esp
f0110237:	68 c4 5c 13 f0       	push   $0xf0135cc4
f011023c:	e8 f0 0b ff ff       	call   f0100e31 <cprintf>
f0110241:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f0110244:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	blockIndex = 4*allocCntPerSize - 2 ;
f011024b:	c7 45 ac 1e 03 00 00 	movl   $0x31e,-0x54(%ebp)
	free_block(startVAs[blockIndex]);
f0110252:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0110255:	8b 04 85 80 b3 2d f0 	mov    -0xfd24c80(,%eax,4),%eax
f011025c:	83 ec 0c             	sub    $0xc,%esp
f011025f:	50                   	push   %eax
f0110260:	e8 19 02 02 00       	call   f013047e <free_block>
f0110265:	83 c4 10             	add    $0x10,%esp

	blockIndex = 4*allocCntPerSize - 1 ;
f0110268:	c7 45 ac 1f 03 00 00 	movl   $0x31f,-0x54(%ebp)
	free_block(startVAs[blockIndex]);
f011026f:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0110272:	8b 04 85 80 b3 2d f0 	mov    -0xfd24c80(,%eax,4),%eax
f0110279:	83 ec 0c             	sub    $0xc,%esp
f011027c:	50                   	push   %eax
f011027d:	e8 fc 01 02 00       	call   f013047e <free_block>
f0110282:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[blockIndex-1]) ;
f0110285:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0110288:	48                   	dec    %eax
f0110289:	8b 04 85 80 b3 2d f0 	mov    -0xfd24c80(,%eax,4),%eax
f0110290:	83 ec 0c             	sub    $0xc,%esp
f0110293:	50                   	push   %eax
f0110294:	e8 1a fc 01 00       	call   f012feb3 <get_block_size>
f0110299:	83 c4 10             	add    $0x10,%esp
f011029c:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if (block_size != allocSizes[3]+allocSizes[3]+allocSizes[4])
f011029f:	8b 15 2c fb 18 f0    	mov    0xf018fb2c,%edx
f01102a5:	a1 2c fb 18 f0       	mov    0xf018fb2c,%eax
f01102aa:	01 c2                	add    %eax,%edx
f01102ac:	a1 30 fb 18 f0       	mov    0xf018fb30,%eax
f01102b1:	01 d0                	add    %edx,%eax
f01102b3:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f01102b6:	74 2f                	je     f01102e7 <test_free_block_FF+0xb4e>
	{
		is_correct = 0;
f01102b8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #11.1: WRONG FREE! block size after free is not correct. Expected %d, Actual %d\n",allocSizes[3]+allocSizes[3]+allocSizes[4],block_size);
f01102bf:	8b 15 2c fb 18 f0    	mov    0xf018fb2c,%edx
f01102c5:	a1 2c fb 18 f0       	mov    0xf018fb2c,%eax
f01102ca:	01 c2                	add    %eax,%edx
f01102cc:	a1 30 fb 18 f0       	mov    0xf018fb30,%eax
f01102d1:	01 d0                	add    %edx,%eax
f01102d3:	83 ec 04             	sub    $0x4,%esp
f01102d6:	ff 75 b4             	pushl  -0x4c(%ebp)
f01102d9:	50                   	push   %eax
f01102da:	68 04 5d 13 f0       	push   $0xf0135d04
f01102df:	e8 4d 0b ff ff       	call   f0100e31 <cprintf>
f01102e4:	83 c4 10             	add    $0x10,%esp
	}
	block_status = is_free_block(startVAs[blockIndex-1]) ;
f01102e7:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01102ea:	48                   	dec    %eax
f01102eb:	8b 04 85 80 b3 2d f0 	mov    -0xfd24c80(,%eax,4),%eax
f01102f2:	83 ec 0c             	sub    $0xc,%esp
f01102f5:	50                   	push   %eax
f01102f6:	e8 ce fb 01 00       	call   f012fec9 <is_free_block>
f01102fb:	83 c4 10             	add    $0x10,%esp
f01102fe:	88 45 b3             	mov    %al,-0x4d(%ebp)
	if (block_status != 1)
f0110301:	80 7d b3 01          	cmpb   $0x1,-0x4d(%ebp)
f0110305:	74 17                	je     f011031e <test_free_block_FF+0xb85>
	{
		is_correct = 0;
f0110307:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #11.2: WRONG FREE! block status (is_free) not equal 1 after freeing.\n");
f011030e:	83 ec 0c             	sub    $0xc,%esp
f0110311:	68 68 5d 13 f0       	push   $0xf0135d68
f0110316:	e8 16 0b ff ff       	call   f0100e31 <cprintf>
f011031b:	83 c4 10             	add    $0x10,%esp
	}
	if (get_block_size(startVAs[blockIndex]) != 0 || is_free_block(startVAs[blockIndex]) != 0 ||
f011031e:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0110321:	8b 04 85 80 b3 2d f0 	mov    -0xfd24c80(,%eax,4),%eax
f0110328:	83 ec 0c             	sub    $0xc,%esp
f011032b:	50                   	push   %eax
f011032c:	e8 82 fb 01 00       	call   f012feb3 <get_block_size>
f0110331:	83 c4 10             	add    $0x10,%esp
f0110334:	85 c0                	test   %eax,%eax
f0110336:	75 50                	jne    f0110388 <test_free_block_FF+0xbef>
f0110338:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011033b:	8b 04 85 80 b3 2d f0 	mov    -0xfd24c80(,%eax,4),%eax
f0110342:	83 ec 0c             	sub    $0xc,%esp
f0110345:	50                   	push   %eax
f0110346:	e8 7e fb 01 00       	call   f012fec9 <is_free_block>
f011034b:	83 c4 10             	add    $0x10,%esp
f011034e:	84 c0                	test   %al,%al
f0110350:	75 36                	jne    f0110388 <test_free_block_FF+0xbef>
			get_block_size(startVAs[blockIndex+1]) != 0 || is_free_block(startVAs[blockIndex+1]) != 0)
f0110352:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0110355:	40                   	inc    %eax
f0110356:	8b 04 85 80 b3 2d f0 	mov    -0xfd24c80(,%eax,4),%eax
f011035d:	83 ec 0c             	sub    $0xc,%esp
f0110360:	50                   	push   %eax
f0110361:	e8 4d fb 01 00       	call   f012feb3 <get_block_size>
f0110366:	83 c4 10             	add    $0x10,%esp
	if (block_status != 1)
	{
		is_correct = 0;
		cprintf("test_free_block #11.2: WRONG FREE! block status (is_free) not equal 1 after freeing.\n");
	}
	if (get_block_size(startVAs[blockIndex]) != 0 || is_free_block(startVAs[blockIndex]) != 0 ||
f0110369:	85 c0                	test   %eax,%eax
f011036b:	75 1b                	jne    f0110388 <test_free_block_FF+0xbef>
			get_block_size(startVAs[blockIndex+1]) != 0 || is_free_block(startVAs[blockIndex+1]) != 0)
f011036d:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0110370:	40                   	inc    %eax
f0110371:	8b 04 85 80 b3 2d f0 	mov    -0xfd24c80(,%eax,4),%eax
f0110378:	83 ec 0c             	sub    $0xc,%esp
f011037b:	50                   	push   %eax
f011037c:	e8 48 fb 01 00       	call   f012fec9 <is_free_block>
f0110381:	83 c4 10             	add    $0x10,%esp
f0110384:	84 c0                	test   %al,%al
f0110386:	74 17                	je     f011039f <test_free_block_FF+0xc06>
	{
		is_correct = 0;
f0110388:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #11.3: WRONG FREE! make sure to ZEROing the size & is_free values of the vanishing block.\n");
f011038f:	83 ec 0c             	sub    $0xc,%esp
f0110392:	68 c0 5d 13 f0       	push   $0xf0135dc0
f0110397:	e8 95 0a ff ff       	call   f0100e31 <cprintf>
f011039c:	83 c4 10             	add    $0x10,%esp
	}
	if (is_correct)
f011039f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01103a3:	74 04                	je     f01103a9 <test_free_block_FF+0xc10>
	{
		eval += 20;
f01103a5:	83 45 f4 14          	addl   $0x14,-0xc(%ebp)
	}

	//====================================================================//
	/*Allocate After Free Scenarios */
	cprintf("	7: Allocate After Free [should be placed in coalesced blocks]\n\n") ;
f01103a9:	83 ec 0c             	sub    $0xc,%esp
f01103ac:	68 2c 5e 13 f0       	push   $0xf0135e2c
f01103b1:	e8 7b 0a ff ff       	call   f0100e31 <cprintf>
f01103b6:	83 c4 10             	add    $0x10,%esp

	cprintf("		7.1: in block coalesces with NEXT\n\n") ;
f01103b9:	83 ec 0c             	sub    $0xc,%esp
f01103bc:	68 70 5e 13 f0       	push   $0xf0135e70
f01103c1:	e8 6b 0a ff ff       	call   f0100e31 <cprintf>
f01103c6:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f01103c9:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	actualSize = 5*kilo - sizeOfMetaData();
f01103d0:	c7 45 c4 f0 13 00 00 	movl   $0x13f0,-0x3c(%ebp)
	va = alloc_block(actualSize, DA_FF);
f01103d7:	83 ec 08             	sub    $0x8,%esp
f01103da:	6a 01                	push   $0x1
f01103dc:	ff 75 c4             	pushl  -0x3c(%ebp)
f01103df:	e8 fc fa 01 00       	call   f012fee0 <alloc_block>
f01103e4:	83 c4 10             	add    $0x10,%esp
f01103e7:	89 45 c0             	mov    %eax,-0x40(%ebp)
	//Check returned va
	void* expected = (void*)(KERNEL_HEAP_START + sizeOfMetaData());
f01103ea:	c7 45 a8 10 00 00 f6 	movl   $0xf6000010,-0x58(%ebp)
	if(va == NULL || (va != expected))
f01103f1:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
f01103f5:	74 08                	je     f01103ff <test_free_block_FF+0xc66>
f01103f7:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01103fa:	3b 45 a8             	cmp    -0x58(%ebp),%eax
f01103fd:	74 1d                	je     f011041c <test_free_block_FF+0xc83>
	{
		is_correct = 0;
f01103ff:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #12.1: WRONG ALLOC - alloc_block_FF return wrong address. Expected %x, Actual %x\n", expected, va);
f0110406:	83 ec 04             	sub    $0x4,%esp
f0110409:	ff 75 c0             	pushl  -0x40(%ebp)
f011040c:	ff 75 a8             	pushl  -0x58(%ebp)
f011040f:	68 98 5e 13 f0       	push   $0xf0135e98
f0110414:	e8 18 0a ff ff       	call   f0100e31 <cprintf>
f0110419:	83 c4 10             	add    $0x10,%esp
	}
	actualSize = 3*kilo - sizeOfMetaData();
f011041c:	c7 45 c4 f0 0b 00 00 	movl   $0xbf0,-0x3c(%ebp)
	va = alloc_block(actualSize, DA_FF);
f0110423:	83 ec 08             	sub    $0x8,%esp
f0110426:	6a 01                	push   $0x1
f0110428:	ff 75 c4             	pushl  -0x3c(%ebp)
f011042b:	e8 b0 fa 01 00       	call   f012fee0 <alloc_block>
f0110430:	83 c4 10             	add    $0x10,%esp
f0110433:	89 45 c0             	mov    %eax,-0x40(%ebp)
	//Check returned va
	expected = (void*)(KERNEL_HEAP_START + 5*kilo + sizeOfMetaData());
f0110436:	c7 45 a8 10 14 00 f6 	movl   $0xf6001410,-0x58(%ebp)
	if(va == NULL || (va != expected))
f011043d:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
f0110441:	74 08                	je     f011044b <test_free_block_FF+0xcb2>
f0110443:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0110446:	3b 45 a8             	cmp    -0x58(%ebp),%eax
f0110449:	74 1d                	je     f0110468 <test_free_block_FF+0xccf>
	{
		is_correct = 0;
f011044b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #12.2: WRONG ALLOC - alloc_block_FF return wrong address. Expected %x, Actual %x\n", expected, va);
f0110452:	83 ec 04             	sub    $0x4,%esp
f0110455:	ff 75 c0             	pushl  -0x40(%ebp)
f0110458:	ff 75 a8             	pushl  -0x58(%ebp)
f011045b:	68 fc 5e 13 f0       	push   $0xf0135efc
f0110460:	e8 cc 09 ff ff       	call   f0100e31 <cprintf>
f0110465:	83 c4 10             	add    $0x10,%esp
	}
	actualSize = 4*kilo + 10;
f0110468:	c7 45 c4 0a 10 00 00 	movl   $0x100a,-0x3c(%ebp)
	va = alloc_block(actualSize, DA_FF);
f011046f:	83 ec 08             	sub    $0x8,%esp
f0110472:	6a 01                	push   $0x1
f0110474:	ff 75 c4             	pushl  -0x3c(%ebp)
f0110477:	e8 64 fa 01 00       	call   f012fee0 <alloc_block>
f011047c:	83 c4 10             	add    $0x10,%esp
f011047f:	89 45 c0             	mov    %eax,-0x40(%ebp)
	//Check returned va
	expected = startVAs[1*allocCntPerSize - 1];
f0110482:	a1 9c b6 2d f0       	mov    0xf02db69c,%eax
f0110487:	89 45 a8             	mov    %eax,-0x58(%ebp)
	if(va == NULL || (va != expected))
f011048a:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
f011048e:	74 08                	je     f0110498 <test_free_block_FF+0xcff>
f0110490:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0110493:	3b 45 a8             	cmp    -0x58(%ebp),%eax
f0110496:	74 1d                	je     f01104b5 <test_free_block_FF+0xd1c>
	{
		is_correct = 0;
f0110498:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #12.3: WRONG ALLOC - alloc_block_FF return wrong address. Expected %x, Actual %x\n", expected, va);
f011049f:	83 ec 04             	sub    $0x4,%esp
f01104a2:	ff 75 c0             	pushl  -0x40(%ebp)
f01104a5:	ff 75 a8             	pushl  -0x58(%ebp)
f01104a8:	68 60 5f 13 f0       	push   $0xf0135f60
f01104ad:	e8 7f 09 ff ff       	call   f0100e31 <cprintf>
f01104b2:	83 c4 10             	add    $0x10,%esp
	}
	if (is_correct)
f01104b5:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01104b9:	74 04                	je     f01104bf <test_free_block_FF+0xd26>
	{
		eval += 10;
f01104bb:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)
	}

	cprintf("		7.2: in block coalesces with PREV & NEXT\n\n") ;
f01104bf:	83 ec 0c             	sub    $0xc,%esp
f01104c2:	68 c4 5f 13 f0       	push   $0xf0135fc4
f01104c7:	e8 65 09 ff ff       	call   f0100e31 <cprintf>
f01104cc:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f01104cf:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	actualSize = 2*kilo + 1;
f01104d6:	c7 45 c4 01 08 00 00 	movl   $0x801,-0x3c(%ebp)
	va = alloc_block(actualSize, DA_FF);
f01104dd:	83 ec 08             	sub    $0x8,%esp
f01104e0:	6a 01                	push   $0x1
f01104e2:	ff 75 c4             	pushl  -0x3c(%ebp)
f01104e5:	e8 f6 f9 01 00       	call   f012fee0 <alloc_block>
f01104ea:	83 c4 10             	add    $0x10,%esp
f01104ed:	89 45 c0             	mov    %eax,-0x40(%ebp)
	//Check returned va
	expected = startVAs[4*allocCntPerSize - 2];
f01104f0:	a1 f8 bf 2d f0       	mov    0xf02dbff8,%eax
f01104f5:	89 45 a8             	mov    %eax,-0x58(%ebp)
	if(va == NULL || (va != expected))
f01104f8:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
f01104fc:	74 08                	je     f0110506 <test_free_block_FF+0xd6d>
f01104fe:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0110501:	3b 45 a8             	cmp    -0x58(%ebp),%eax
f0110504:	74 1d                	je     f0110523 <test_free_block_FF+0xd8a>
	{
		is_correct = 0;
f0110506:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #12.4: WRONG ALLOC - alloc_block_FF return wrong address. Expected %x, Actual %x\n", expected, va);
f011050d:	83 ec 04             	sub    $0x4,%esp
f0110510:	ff 75 c0             	pushl  -0x40(%ebp)
f0110513:	ff 75 a8             	pushl  -0x58(%ebp)
f0110516:	68 f4 5f 13 f0       	push   $0xf0135ff4
f011051b:	e8 11 09 ff ff       	call   f0100e31 <cprintf>
f0110520:	83 c4 10             	add    $0x10,%esp
	}
	if (is_correct)
f0110523:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0110527:	74 04                	je     f011052d <test_free_block_FF+0xd94>
	{
		eval += 10;
f0110529:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)
	}

	cprintf("		7.3: in block coalesces with PREV\n\n") ;
f011052d:	83 ec 0c             	sub    $0xc,%esp
f0110530:	68 58 60 13 f0       	push   $0xf0136058
f0110535:	e8 f7 08 ff ff       	call   f0100e31 <cprintf>
f011053a:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f011053d:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	actualSize = 2*kilo - sizeOfMetaData();
f0110544:	c7 45 c4 f0 07 00 00 	movl   $0x7f0,-0x3c(%ebp)
	va = alloc_block(actualSize, DA_FF);
f011054b:	83 ec 08             	sub    $0x8,%esp
f011054e:	6a 01                	push   $0x1
f0110550:	ff 75 c4             	pushl  -0x3c(%ebp)
f0110553:	e8 88 f9 01 00       	call   f012fee0 <alloc_block>
f0110558:	83 c4 10             	add    $0x10,%esp
f011055b:	89 45 c0             	mov    %eax,-0x40(%ebp)
	//Check returned va
	expected = startVAs[2*allocCntPerSize];
f011055e:	a1 c0 b9 2d f0       	mov    0xf02db9c0,%eax
f0110563:	89 45 a8             	mov    %eax,-0x58(%ebp)
	if(va == NULL || (va != expected))
f0110566:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
f011056a:	74 08                	je     f0110574 <test_free_block_FF+0xddb>
f011056c:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011056f:	3b 45 a8             	cmp    -0x58(%ebp),%eax
f0110572:	74 1d                	je     f0110591 <test_free_block_FF+0xdf8>
	{
		is_correct = 0;
f0110574:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #12.4: WRONG ALLOC - alloc_block_FF return wrong address. Expected %x, Actual %x\n", expected, va);
f011057b:	83 ec 04             	sub    $0x4,%esp
f011057e:	ff 75 c0             	pushl  -0x40(%ebp)
f0110581:	ff 75 a8             	pushl  -0x58(%ebp)
f0110584:	68 f4 5f 13 f0       	push   $0xf0135ff4
f0110589:	e8 a3 08 ff ff       	call   f0100e31 <cprintf>
f011058e:	83 c4 10             	add    $0x10,%esp
	}
	actualSize = 8*kilo - sizeOfMetaData();
f0110591:	c7 45 c4 f0 1f 00 00 	movl   $0x1ff0,-0x3c(%ebp)
	va = alloc_block(actualSize, DA_FF);
f0110598:	83 ec 08             	sub    $0x8,%esp
f011059b:	6a 01                	push   $0x1
f011059d:	ff 75 c4             	pushl  -0x3c(%ebp)
f01105a0:	e8 3b f9 01 00       	call   f012fee0 <alloc_block>
f01105a5:	83 c4 10             	add    $0x10,%esp
f01105a8:	89 45 c0             	mov    %eax,-0x40(%ebp)
	//Check returned va
	expected = startVAs[numOfAllocs*allocCntPerSize-1];
f01105ab:	a1 5c c9 2d f0       	mov    0xf02dc95c,%eax
f01105b0:	89 45 a8             	mov    %eax,-0x58(%ebp)
	if(va == NULL || (va != expected))
f01105b3:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
f01105b7:	74 08                	je     f01105c1 <test_free_block_FF+0xe28>
f01105b9:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01105bc:	3b 45 a8             	cmp    -0x58(%ebp),%eax
f01105bf:	74 1d                	je     f01105de <test_free_block_FF+0xe45>
	{
		is_correct = 0;
f01105c1:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #12.5: WRONG ALLOC - alloc_block_FF return wrong address. Expected %x, Actual %x\n", expected, va);
f01105c8:	83 ec 04             	sub    $0x4,%esp
f01105cb:	ff 75 c0             	pushl  -0x40(%ebp)
f01105ce:	ff 75 a8             	pushl  -0x58(%ebp)
f01105d1:	68 80 60 13 f0       	push   $0xf0136080
f01105d6:	e8 56 08 ff ff       	call   f0100e31 <cprintf>
f01105db:	83 c4 10             	add    $0x10,%esp
	}
	if (is_correct)
f01105de:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01105e2:	74 04                	je     f01105e8 <test_free_block_FF+0xe4f>
	{
		eval += 10;
f01105e4:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)
	}

	cprintf("test free_block with FIRST FIT completed. Evaluation = %d%\n", eval);
f01105e8:	83 ec 08             	sub    $0x8,%esp
f01105eb:	ff 75 f4             	pushl  -0xc(%ebp)
f01105ee:	68 e4 60 13 f0       	push   $0xf01360e4
f01105f3:	e8 39 08 ff ff       	call   f0100e31 <cprintf>
f01105f8:	83 c4 10             	add    $0x10,%esp

}
f01105fb:	90                   	nop
f01105fc:	c9                   	leave  
f01105fd:	c3                   	ret    

f01105fe <test_free_block_BF>:

void test_free_block_BF()
{
f01105fe:	55                   	push   %ebp
f01105ff:	89 e5                	mov    %esp,%ebp
f0110601:	83 ec 58             	sub    $0x58,%esp
#if USE_KHEAP
	panic("test_free_block: the kernel heap should be disabled. make sure USE_KHEAP = 0");
	return;
#endif

	cprintf("===========================================================\n") ;
f0110604:	83 ec 0c             	sub    $0xc,%esp
f0110607:	68 54 52 13 f0       	push   $0xf0135254
f011060c:	e8 20 08 ff ff       	call   f0100e31 <cprintf>
f0110611:	83 c4 10             	add    $0x10,%esp
	cprintf("NOTE: THIS TEST IS DEPEND ON BOTH ALLOCATE & FREE FUNCTIONS\n") ;
f0110614:	83 ec 0c             	sub    $0xc,%esp
f0110617:	68 94 52 13 f0       	push   $0xf0135294
f011061c:	e8 10 08 ff ff       	call   f0100e31 <cprintf>
f0110621:	83 c4 10             	add    $0x10,%esp
	cprintf("===========================================================\n") ;
f0110624:	83 ec 0c             	sub    $0xc,%esp
f0110627:	68 54 52 13 f0       	push   $0xf0135254
f011062c:	e8 00 08 ff ff       	call   f0100e31 <cprintf>
f0110631:	83 c4 10             	add    $0x10,%esp

	int initAllocatedSpace = 3*Mega;
f0110634:	c7 45 d4 00 00 30 00 	movl   $0x300000,-0x2c(%ebp)
	initialize_dynamic_allocator(KERNEL_HEAP_START, initAllocatedSpace);
f011063b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011063e:	83 ec 08             	sub    $0x8,%esp
f0110641:	50                   	push   %eax
f0110642:	68 00 00 00 f6       	push   $0xf6000000
f0110647:	e8 ad f9 01 00       	call   f012fff9 <initialize_dynamic_allocator>
f011064c:	83 c4 10             	add    $0x10,%esp

	void * va ;
	//====================================================================//
	/* Try to allocate set of blocks with different sizes*/
	cprintf("	1: Try to allocate set of blocks with different sizes to fill-up the allocated space\n\n") ;
f011064f:	83 ec 0c             	sub    $0xc,%esp
f0110652:	68 d4 52 13 f0       	push   $0xf01352d4
f0110657:	e8 d5 07 ff ff       	call   f0100e31 <cprintf>
f011065c:	83 c4 10             	add    $0x10,%esp

	int totalSizes = 0;
f011065f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for (int i = 0; i < numOfAllocs; ++i)
f0110666:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011066d:	eb 2a                	jmp    f0110699 <test_free_block_BF+0x9b>
	{
		totalSizes += allocSizes[i] * allocCntPerSize ;
f011066f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0110672:	8b 14 85 20 fb 18 f0 	mov    -0xfe704e0(,%eax,4),%edx
f0110679:	89 d0                	mov    %edx,%eax
f011067b:	c1 e0 02             	shl    $0x2,%eax
f011067e:	01 d0                	add    %edx,%eax
f0110680:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0110687:	01 d0                	add    %edx,%eax
f0110689:	c1 e0 03             	shl    $0x3,%eax
f011068c:	89 c2                	mov    %eax,%edx
f011068e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0110691:	01 d0                	add    %edx,%eax
f0110693:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//====================================================================//
	/* Try to allocate set of blocks with different sizes*/
	cprintf("	1: Try to allocate set of blocks with different sizes to fill-up the allocated space\n\n") ;

	int totalSizes = 0;
	for (int i = 0; i < numOfAllocs; ++i)
f0110696:	ff 45 f0             	incl   -0x10(%ebp)
f0110699:	83 7d f0 06          	cmpl   $0x6,-0x10(%ebp)
f011069d:	7e d0                	jle    f011066f <test_free_block_BF+0x71>
	{
		totalSizes += allocSizes[i] * allocCntPerSize ;
	}
	int remainSize = initAllocatedSpace - totalSizes ;
f011069f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01106a2:	2b 45 f4             	sub    -0xc(%ebp),%eax
f01106a5:	89 45 d0             	mov    %eax,-0x30(%ebp)
	if (remainSize <= 0)
f01106a8:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
f01106ac:	7f 17                	jg     f01106c5 <test_free_block_BF+0xc7>
		panic("test_free_block is not configured correctly. Consider updating the initial allocated space OR the required allocations");
f01106ae:	83 ec 04             	sub    $0x4,%esp
f01106b1:	68 2c 53 13 f0       	push   $0xf013532c
f01106b6:	68 90 03 00 00       	push   $0x390
f01106bb:	68 b0 48 13 f0       	push   $0xf01348b0
f01106c0:	e8 eb fa fe ff       	call   f01001b0 <_panic>

	int idx = 0;
f01106c5:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	void* curVA = (void*) KERNEL_HEAP_START ;
f01106cc:	c7 45 e8 00 00 00 f6 	movl   $0xf6000000,-0x18(%ebp)
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
f01106d3:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f01106da:	e9 f8 00 00 00       	jmp    f01107d7 <test_free_block_BF+0x1d9>
	{
		for (int j = 0; j < allocCntPerSize; ++j)
f01106df:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f01106e6:	e9 dc 00 00 00       	jmp    f01107c7 <test_free_block_BF+0x1c9>
		{
			actualSize = allocSizes[i] - sizeOfMetaData();
f01106eb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01106ee:	8b 04 85 20 fb 18 f0 	mov    -0xfe704e0(,%eax,4),%eax
f01106f5:	83 e8 10             	sub    $0x10,%eax
f01106f8:	89 45 cc             	mov    %eax,-0x34(%ebp)
			va = startVAs[idx] = alloc_block(actualSize, DA_BF);
f01106fb:	83 ec 08             	sub    $0x8,%esp
f01106fe:	6a 03                	push   $0x3
f0110700:	ff 75 cc             	pushl  -0x34(%ebp)
f0110703:	e8 d8 f7 01 00       	call   f012fee0 <alloc_block>
f0110708:	83 c4 10             	add    $0x10,%esp
f011070b:	89 c2                	mov    %eax,%edx
f011070d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110710:	89 14 85 80 b3 2d f0 	mov    %edx,-0xfd24c80(,%eax,4)
f0110717:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011071a:	8b 04 85 80 b3 2d f0 	mov    -0xfd24c80(,%eax,4),%eax
f0110721:	89 45 c8             	mov    %eax,-0x38(%ebp)
			midVAs[idx] = va + actualSize/2 ;
f0110724:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0110727:	d1 e8                	shr    %eax
f0110729:	89 c2                	mov    %eax,%edx
f011072b:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011072e:	01 c2                	add    %eax,%edx
f0110730:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110733:	89 14 85 80 df 2d f0 	mov    %edx,-0xfd22080(,%eax,4)
			endVAs[idx] = va + actualSize - sizeof(short);
f011073a:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011073d:	8d 50 fe             	lea    -0x2(%eax),%edx
f0110740:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0110743:	01 c2                	add    %eax,%edx
f0110745:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110748:	89 14 85 80 c9 2d f0 	mov    %edx,-0xfd23680(,%eax,4)
			//Check returned va
			if(va == NULL || (va != (curVA + sizeOfMetaData())))
f011074f:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f0110753:	74 0b                	je     f0110760 <test_free_block_BF+0x162>
f0110755:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0110758:	83 c0 10             	add    $0x10,%eax
f011075b:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f011075e:	74 24                	je     f0110784 <test_free_block_BF+0x186>
				panic("test_free_block #1.%d: WRONG ALLOC - alloc_block_BF return wrong address. Expected %x, Actual %x", idx, curVA + sizeOfMetaData() ,va);
f0110760:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0110763:	83 c0 10             	add    $0x10,%eax
f0110766:	83 ec 08             	sub    $0x8,%esp
f0110769:	ff 75 c8             	pushl  -0x38(%ebp)
f011076c:	50                   	push   %eax
f011076d:	ff 75 ec             	pushl  -0x14(%ebp)
f0110770:	68 20 61 13 f0       	push   $0xf0136120
f0110775:	68 9f 03 00 00       	push   $0x39f
f011077a:	68 b0 48 13 f0       	push   $0xf01348b0
f011077f:	e8 2c fa fe ff       	call   f01001b0 <_panic>
			curVA += allocSizes[i] ;
f0110784:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110787:	8b 04 85 20 fb 18 f0 	mov    -0xfe704e0(,%eax,4),%eax
f011078e:	01 45 e8             	add    %eax,-0x18(%ebp)
			*(startVAs[idx]) = idx ;
f0110791:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110794:	8b 14 85 80 b3 2d f0 	mov    -0xfd24c80(,%eax,4),%edx
f011079b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011079e:	66 89 02             	mov    %ax,(%edx)
			*(midVAs[idx]) = idx ;
f01107a1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01107a4:	8b 14 85 80 df 2d f0 	mov    -0xfd22080(,%eax,4),%edx
f01107ab:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01107ae:	66 89 02             	mov    %ax,(%edx)
			*(endVAs[idx]) = idx ;
f01107b1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01107b4:	8b 14 85 80 c9 2d f0 	mov    -0xfd23680(,%eax,4),%edx
f01107bb:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01107be:	66 89 02             	mov    %ax,(%edx)
			idx++;
f01107c1:	ff 45 ec             	incl   -0x14(%ebp)
	int idx = 0;
	void* curVA = (void*) KERNEL_HEAP_START ;
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
	{
		for (int j = 0; j < allocCntPerSize; ++j)
f01107c4:	ff 45 e0             	incl   -0x20(%ebp)
f01107c7:	81 7d e0 c7 00 00 00 	cmpl   $0xc7,-0x20(%ebp)
f01107ce:	0f 8e 17 ff ff ff    	jle    f01106eb <test_free_block_BF+0xed>
		panic("test_free_block is not configured correctly. Consider updating the initial allocated space OR the required allocations");

	int idx = 0;
	void* curVA = (void*) KERNEL_HEAP_START ;
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
f01107d4:	ff 45 e4             	incl   -0x1c(%ebp)
f01107d7:	83 7d e4 06          	cmpl   $0x6,-0x1c(%ebp)
f01107db:	0f 8e fe fe ff ff    	jle    f01106df <test_free_block_BF+0xe1>
		}
	}

	//====================================================================//
	/* Try to allocate a block with a size equal to the size of the first existing free block*/
	actualSize = remainSize - sizeOfMetaData();
f01107e1:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01107e4:	83 e8 10             	sub    $0x10,%eax
f01107e7:	89 45 cc             	mov    %eax,-0x34(%ebp)
	va = startVAs[idx] = alloc_block(actualSize, DA_BF);
f01107ea:	83 ec 08             	sub    $0x8,%esp
f01107ed:	6a 03                	push   $0x3
f01107ef:	ff 75 cc             	pushl  -0x34(%ebp)
f01107f2:	e8 e9 f6 01 00       	call   f012fee0 <alloc_block>
f01107f7:	83 c4 10             	add    $0x10,%esp
f01107fa:	89 c2                	mov    %eax,%edx
f01107fc:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01107ff:	89 14 85 80 b3 2d f0 	mov    %edx,-0xfd24c80(,%eax,4)
f0110806:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110809:	8b 04 85 80 b3 2d f0 	mov    -0xfd24c80(,%eax,4),%eax
f0110810:	89 45 c8             	mov    %eax,-0x38(%ebp)
	midVAs[idx] = va + actualSize/2 ;
f0110813:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0110816:	d1 e8                	shr    %eax
f0110818:	89 c2                	mov    %eax,%edx
f011081a:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011081d:	01 c2                	add    %eax,%edx
f011081f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110822:	89 14 85 80 df 2d f0 	mov    %edx,-0xfd22080(,%eax,4)
	endVAs[idx] = va + actualSize - sizeof(short);
f0110829:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011082c:	8d 50 fe             	lea    -0x2(%eax),%edx
f011082f:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0110832:	01 c2                	add    %eax,%edx
f0110834:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110837:	89 14 85 80 c9 2d f0 	mov    %edx,-0xfd23680(,%eax,4)
	//Check returned va
	if(va == NULL || (va != (curVA + sizeOfMetaData())))
f011083e:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f0110842:	74 0b                	je     f011084f <test_free_block_BF+0x251>
f0110844:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0110847:	83 c0 10             	add    $0x10,%eax
f011084a:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f011084d:	74 17                	je     f0110866 <test_free_block_BF+0x268>
		panic("test_free_block #2: WRONG ALLOC - alloc_block_BF return wrong address.");
f011084f:	83 ec 04             	sub    $0x4,%esp
f0110852:	68 84 61 13 f0       	push   $0xf0136184
f0110857:	68 b0 03 00 00       	push   $0x3b0
f011085c:	68 b0 48 13 f0       	push   $0xf01348b0
f0110861:	e8 4a f9 fe ff       	call   f01001b0 <_panic>
	*(startVAs[idx]) = idx ;
f0110866:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110869:	8b 14 85 80 b3 2d f0 	mov    -0xfd24c80(,%eax,4),%edx
f0110870:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110873:	66 89 02             	mov    %ax,(%edx)
	*(midVAs[idx]) = idx ;
f0110876:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110879:	8b 14 85 80 df 2d f0 	mov    -0xfd22080(,%eax,4),%edx
f0110880:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110883:	66 89 02             	mov    %ax,(%edx)
	*(endVAs[idx]) = idx ;
f0110886:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110889:	8b 14 85 80 c9 2d f0 	mov    -0xfd23680(,%eax,4),%edx
f0110890:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110893:	66 89 02             	mov    %ax,(%edx)

	//====================================================================//
	/* Check stored data inside each allocated block*/
	cprintf("	2: Check stored data inside each allocated block\n\n") ;
f0110896:	83 ec 0c             	sub    $0xc,%esp
f0110899:	68 50 54 13 f0       	push   $0xf0135450
f011089e:	e8 8e 05 ff ff       	call   f0100e31 <cprintf>
f01108a3:	83 c4 10             	add    $0x10,%esp

	for (int i = 0; i < idx; ++i)
f01108a6:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f01108ad:	eb 59                	jmp    f0110908 <test_free_block_BF+0x30a>
	{
		if (*(startVAs[i]) != i || *(midVAs[i]) != i ||	*(endVAs[i]) != i)
f01108af:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01108b2:	8b 04 85 80 b3 2d f0 	mov    -0xfd24c80(,%eax,4),%eax
f01108b9:	66 8b 00             	mov    (%eax),%ax
f01108bc:	98                   	cwtl   
f01108bd:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f01108c0:	75 26                	jne    f01108e8 <test_free_block_BF+0x2ea>
f01108c2:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01108c5:	8b 04 85 80 df 2d f0 	mov    -0xfd22080(,%eax,4),%eax
f01108cc:	66 8b 00             	mov    (%eax),%ax
f01108cf:	98                   	cwtl   
f01108d0:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f01108d3:	75 13                	jne    f01108e8 <test_free_block_BF+0x2ea>
f01108d5:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01108d8:	8b 04 85 80 c9 2d f0 	mov    -0xfd23680(,%eax,4),%eax
f01108df:	66 8b 00             	mov    (%eax),%ax
f01108e2:	98                   	cwtl   
f01108e3:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f01108e6:	74 1d                	je     f0110905 <test_free_block_BF+0x307>
			panic("test_free_block #3.%d: WRONG! content of the block is not correct. Expected %d",i, i);
f01108e8:	83 ec 0c             	sub    $0xc,%esp
f01108eb:	ff 75 dc             	pushl  -0x24(%ebp)
f01108ee:	ff 75 dc             	pushl  -0x24(%ebp)
f01108f1:	68 cc 61 13 f0       	push   $0xf01361cc
f01108f6:	68 bc 03 00 00       	push   $0x3bc
f01108fb:	68 b0 48 13 f0       	push   $0xf01348b0
f0110900:	e8 ab f8 fe ff       	call   f01001b0 <_panic>

	//====================================================================//
	/* Check stored data inside each allocated block*/
	cprintf("	2: Check stored data inside each allocated block\n\n") ;

	for (int i = 0; i < idx; ++i)
f0110905:	ff 45 dc             	incl   -0x24(%ebp)
f0110908:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011090b:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011090e:	7c 9f                	jl     f01108af <test_free_block_BF+0x2b1>
			panic("test_free_block #3.%d: WRONG! content of the block is not correct. Expected %d",i, i);
	}

	//====================================================================//
	/* free_block Scenario 1: Free some allocated blocks [no coalesce]*/
	cprintf("	3: Free some allocated block [no coalesce]\n\n") ;
f0110910:	83 ec 0c             	sub    $0xc,%esp
f0110913:	68 d4 54 13 f0       	push   $0xf01354d4
f0110918:	e8 14 05 ff ff       	call   f0100e31 <cprintf>
f011091d:	83 c4 10             	add    $0x10,%esp

	//Free set of blocks with different sizes (first block of each size)
	for (int i = 0; i < numOfAllocs; ++i)
f0110920:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f0110927:	e9 d8 00 00 00       	jmp    f0110a04 <test_free_block_BF+0x406>
	{
		free_block(startVAs[i*allocCntPerSize]);
f011092c:	8b 55 d8             	mov    -0x28(%ebp),%edx
f011092f:	89 d0                	mov    %edx,%eax
f0110931:	c1 e0 02             	shl    $0x2,%eax
f0110934:	01 d0                	add    %edx,%eax
f0110936:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011093d:	01 d0                	add    %edx,%eax
f011093f:	c1 e0 03             	shl    $0x3,%eax
f0110942:	8b 04 85 80 b3 2d f0 	mov    -0xfd24c80(,%eax,4),%eax
f0110949:	83 ec 0c             	sub    $0xc,%esp
f011094c:	50                   	push   %eax
f011094d:	e8 2c fb 01 00       	call   f013047e <free_block>
f0110952:	83 c4 10             	add    $0x10,%esp
		uint32 block_size = get_block_size(startVAs[i*allocCntPerSize]) ;
f0110955:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0110958:	89 d0                	mov    %edx,%eax
f011095a:	c1 e0 02             	shl    $0x2,%eax
f011095d:	01 d0                	add    %edx,%eax
f011095f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0110966:	01 d0                	add    %edx,%eax
f0110968:	c1 e0 03             	shl    $0x3,%eax
f011096b:	8b 04 85 80 b3 2d f0 	mov    -0xfd24c80(,%eax,4),%eax
f0110972:	83 ec 0c             	sub    $0xc,%esp
f0110975:	50                   	push   %eax
f0110976:	e8 38 f5 01 00       	call   f012feb3 <get_block_size>
f011097b:	83 c4 10             	add    $0x10,%esp
f011097e:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		if (block_size != allocSizes[i])
f0110981:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0110984:	8b 04 85 20 fb 18 f0 	mov    -0xfe704e0(,%eax,4),%eax
f011098b:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011098e:	74 28                	je     f01109b8 <test_free_block_BF+0x3ba>
			panic("test_free_block #4.%d: WRONG FREE! block size after free is not correct. Expected %d, Actual %d",i, allocSizes[i],block_size);
f0110990:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0110993:	8b 04 85 20 fb 18 f0 	mov    -0xfe704e0(,%eax,4),%eax
f011099a:	83 ec 08             	sub    $0x8,%esp
f011099d:	ff 75 c4             	pushl  -0x3c(%ebp)
f01109a0:	50                   	push   %eax
f01109a1:	ff 75 d8             	pushl  -0x28(%ebp)
f01109a4:	68 1c 62 13 f0       	push   $0xf013621c
f01109a9:	68 c9 03 00 00       	push   $0x3c9
f01109ae:	68 b0 48 13 f0       	push   $0xf01348b0
f01109b3:	e8 f8 f7 fe ff       	call   f01001b0 <_panic>
		int8 block_status = is_free_block(startVAs[i*allocCntPerSize]) ;
f01109b8:	8b 55 d8             	mov    -0x28(%ebp),%edx
f01109bb:	89 d0                	mov    %edx,%eax
f01109bd:	c1 e0 02             	shl    $0x2,%eax
f01109c0:	01 d0                	add    %edx,%eax
f01109c2:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01109c9:	01 d0                	add    %edx,%eax
f01109cb:	c1 e0 03             	shl    $0x3,%eax
f01109ce:	8b 04 85 80 b3 2d f0 	mov    -0xfd24c80(,%eax,4),%eax
f01109d5:	83 ec 0c             	sub    $0xc,%esp
f01109d8:	50                   	push   %eax
f01109d9:	e8 eb f4 01 00       	call   f012fec9 <is_free_block>
f01109de:	83 c4 10             	add    $0x10,%esp
f01109e1:	88 45 c3             	mov    %al,-0x3d(%ebp)
		if (block_status != 1)
f01109e4:	80 7d c3 01          	cmpb   $0x1,-0x3d(%ebp)
f01109e8:	74 17                	je     f0110a01 <test_free_block_BF+0x403>
			panic("test_free_block #5.%d: WRONG FREE! block status (is_free) not equal 1 after freeing.", i);
f01109ea:	ff 75 d8             	pushl  -0x28(%ebp)
f01109ed:	68 7c 62 13 f0       	push   $0xf013627c
f01109f2:	68 cc 03 00 00       	push   $0x3cc
f01109f7:	68 b0 48 13 f0       	push   $0xf01348b0
f01109fc:	e8 af f7 fe ff       	call   f01001b0 <_panic>
	//====================================================================//
	/* free_block Scenario 1: Free some allocated blocks [no coalesce]*/
	cprintf("	3: Free some allocated block [no coalesce]\n\n") ;

	//Free set of blocks with different sizes (first block of each size)
	for (int i = 0; i < numOfAllocs; ++i)
f0110a01:	ff 45 d8             	incl   -0x28(%ebp)
f0110a04:	83 7d d8 06          	cmpl   $0x6,-0x28(%ebp)
f0110a08:	0f 8e 1e ff ff ff    	jle    f011092c <test_free_block_BF+0x32e>
		if (block_status != 1)
			panic("test_free_block #5.%d: WRONG FREE! block status (is_free) not equal 1 after freeing.", i);
	}

	//Free last block
	free_block(startVAs[numOfAllocs*allocCntPerSize]);
f0110a0e:	a1 60 c9 2d f0       	mov    0xf02dc960,%eax
f0110a13:	83 ec 0c             	sub    $0xc,%esp
f0110a16:	50                   	push   %eax
f0110a17:	e8 62 fa 01 00       	call   f013047e <free_block>
f0110a1c:	83 c4 10             	add    $0x10,%esp
	uint32 block_size = get_block_size(startVAs[numOfAllocs*allocCntPerSize]) ;
f0110a1f:	a1 60 c9 2d f0       	mov    0xf02dc960,%eax
f0110a24:	83 ec 0c             	sub    $0xc,%esp
f0110a27:	50                   	push   %eax
f0110a28:	e8 86 f4 01 00       	call   f012feb3 <get_block_size>
f0110a2d:	83 c4 10             	add    $0x10,%esp
f0110a30:	89 45 bc             	mov    %eax,-0x44(%ebp)
	if (block_size != remainSize)
f0110a33:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0110a36:	39 45 bc             	cmp    %eax,-0x44(%ebp)
f0110a39:	74 1d                	je     f0110a58 <test_free_block_BF+0x45a>
		panic("test_free_block #6.1: WRONG FREE! block size after free is not correct. Expected %d, Actual %d",remainSize,block_size);
f0110a3b:	83 ec 0c             	sub    $0xc,%esp
f0110a3e:	ff 75 bc             	pushl  -0x44(%ebp)
f0110a41:	ff 75 d0             	pushl  -0x30(%ebp)
f0110a44:	68 d4 62 13 f0       	push   $0xf01362d4
f0110a49:	68 d3 03 00 00       	push   $0x3d3
f0110a4e:	68 b0 48 13 f0       	push   $0xf01348b0
f0110a53:	e8 58 f7 fe ff       	call   f01001b0 <_panic>
	int8 block_status = is_free_block(startVAs[numOfAllocs*allocCntPerSize]) ;
f0110a58:	a1 60 c9 2d f0       	mov    0xf02dc960,%eax
f0110a5d:	83 ec 0c             	sub    $0xc,%esp
f0110a60:	50                   	push   %eax
f0110a61:	e8 63 f4 01 00       	call   f012fec9 <is_free_block>
f0110a66:	83 c4 10             	add    $0x10,%esp
f0110a69:	88 45 bb             	mov    %al,-0x45(%ebp)
	if (block_status != 1)
f0110a6c:	80 7d bb 01          	cmpb   $0x1,-0x45(%ebp)
f0110a70:	74 17                	je     f0110a89 <test_free_block_BF+0x48b>
		panic("test_free_block #6.2: WRONG FREE! block status (is_free) not equal 1 after freeing.");
f0110a72:	83 ec 04             	sub    $0x4,%esp
f0110a75:	68 34 63 13 f0       	push   $0xf0136334
f0110a7a:	68 d6 03 00 00       	push   $0x3d6
f0110a7f:	68 b0 48 13 f0       	push   $0xf01348b0
f0110a84:	e8 27 f7 fe ff       	call   f01001b0 <_panic>

	//Reallocate last block
	actualSize = remainSize - sizeOfMetaData();
f0110a89:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0110a8c:	83 e8 10             	sub    $0x10,%eax
f0110a8f:	89 45 cc             	mov    %eax,-0x34(%ebp)
	va = alloc_block(actualSize, DA_BF);
f0110a92:	83 ec 08             	sub    $0x8,%esp
f0110a95:	6a 03                	push   $0x3
f0110a97:	ff 75 cc             	pushl  -0x34(%ebp)
f0110a9a:	e8 41 f4 01 00       	call   f012fee0 <alloc_block>
f0110a9f:	83 c4 10             	add    $0x10,%esp
f0110aa2:	89 45 c8             	mov    %eax,-0x38(%ebp)
	//Check returned va
	if(va == NULL || (va != (curVA + sizeOfMetaData())))
f0110aa5:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f0110aa9:	74 0b                	je     f0110ab6 <test_free_block_BF+0x4b8>
f0110aab:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0110aae:	83 c0 10             	add    $0x10,%eax
f0110ab1:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0110ab4:	74 17                	je     f0110acd <test_free_block_BF+0x4cf>
		panic("test_free_block #6.3: WRONG ALLOC - alloc_block_BF return wrong address.");
f0110ab6:	83 ec 04             	sub    $0x4,%esp
f0110ab9:	68 88 63 13 f0       	push   $0xf0136388
f0110abe:	68 dd 03 00 00       	push   $0x3dd
f0110ac3:	68 b0 48 13 f0       	push   $0xf01348b0
f0110ac8:	e8 e3 f6 fe ff       	call   f01001b0 <_panic>

	//Free block before last
	free_block(startVAs[numOfAllocs*allocCntPerSize - 1]);
f0110acd:	a1 5c c9 2d f0       	mov    0xf02dc95c,%eax
f0110ad2:	83 ec 0c             	sub    $0xc,%esp
f0110ad5:	50                   	push   %eax
f0110ad6:	e8 a3 f9 01 00       	call   f013047e <free_block>
f0110adb:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[numOfAllocs*allocCntPerSize - 1]) ;
f0110ade:	a1 5c c9 2d f0       	mov    0xf02dc95c,%eax
f0110ae3:	83 ec 0c             	sub    $0xc,%esp
f0110ae6:	50                   	push   %eax
f0110ae7:	e8 c7 f3 01 00       	call   f012feb3 <get_block_size>
f0110aec:	83 c4 10             	add    $0x10,%esp
f0110aef:	89 45 bc             	mov    %eax,-0x44(%ebp)
	if (block_size != allocSizes[numOfAllocs-1])
f0110af2:	a1 38 fb 18 f0       	mov    0xf018fb38,%eax
f0110af7:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0110afa:	74 20                	je     f0110b1c <test_free_block_BF+0x51e>
		panic("test_free_block #6.4: WRONG FREE! block size after free is not correct. Expected %d, Actual %d",allocSizes[numOfAllocs-1],block_size);
f0110afc:	a1 38 fb 18 f0       	mov    0xf018fb38,%eax
f0110b01:	83 ec 0c             	sub    $0xc,%esp
f0110b04:	ff 75 bc             	pushl  -0x44(%ebp)
f0110b07:	50                   	push   %eax
f0110b08:	68 d4 63 13 f0       	push   $0xf01363d4
f0110b0d:	68 e3 03 00 00       	push   $0x3e3
f0110b12:	68 b0 48 13 f0       	push   $0xf01348b0
f0110b17:	e8 94 f6 fe ff       	call   f01001b0 <_panic>
	block_status = is_free_block(startVAs[numOfAllocs*allocCntPerSize-1]) ;
f0110b1c:	a1 5c c9 2d f0       	mov    0xf02dc95c,%eax
f0110b21:	83 ec 0c             	sub    $0xc,%esp
f0110b24:	50                   	push   %eax
f0110b25:	e8 9f f3 01 00       	call   f012fec9 <is_free_block>
f0110b2a:	83 c4 10             	add    $0x10,%esp
f0110b2d:	88 45 bb             	mov    %al,-0x45(%ebp)
	if (block_status != 1)
f0110b30:	80 7d bb 01          	cmpb   $0x1,-0x45(%ebp)
f0110b34:	74 17                	je     f0110b4d <test_free_block_BF+0x54f>
		panic("test_free_block #6.5: WRONG FREE! block status (is_free) not equal 1 after freeing.");
f0110b36:	83 ec 04             	sub    $0x4,%esp
f0110b39:	68 34 64 13 f0       	push   $0xf0136434
f0110b3e:	68 e6 03 00 00       	push   $0x3e6
f0110b43:	68 b0 48 13 f0       	push   $0xf01348b0
f0110b48:	e8 63 f6 fe ff       	call   f01001b0 <_panic>

	//Reallocate first block
	actualSize = allocSizes[0] - sizeOfMetaData();
f0110b4d:	a1 20 fb 18 f0       	mov    0xf018fb20,%eax
f0110b52:	83 e8 10             	sub    $0x10,%eax
f0110b55:	89 45 cc             	mov    %eax,-0x34(%ebp)
	va = alloc_block(actualSize, DA_BF);
f0110b58:	83 ec 08             	sub    $0x8,%esp
f0110b5b:	6a 03                	push   $0x3
f0110b5d:	ff 75 cc             	pushl  -0x34(%ebp)
f0110b60:	e8 7b f3 01 00       	call   f012fee0 <alloc_block>
f0110b65:	83 c4 10             	add    $0x10,%esp
f0110b68:	89 45 c8             	mov    %eax,-0x38(%ebp)
	//Check returned va
	if(va == NULL || (va != (void*)(KERNEL_HEAP_START + sizeOfMetaData())))
f0110b6b:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f0110b6f:	74 09                	je     f0110b7a <test_free_block_BF+0x57c>
f0110b71:	81 7d c8 10 00 00 f6 	cmpl   $0xf6000010,-0x38(%ebp)
f0110b78:	74 17                	je     f0110b91 <test_free_block_BF+0x593>
		panic("test_free_block #7.1: WRONG ALLOC - alloc_block_BF return wrong address.");
f0110b7a:	83 ec 04             	sub    $0x4,%esp
f0110b7d:	68 88 64 13 f0       	push   $0xf0136488
f0110b82:	68 ed 03 00 00       	push   $0x3ed
f0110b87:	68 b0 48 13 f0       	push   $0xf01348b0
f0110b8c:	e8 1f f6 fe ff       	call   f01001b0 <_panic>

	//Free 2nd block
	free_block(startVAs[1]);
f0110b91:	a1 84 b3 2d f0       	mov    0xf02db384,%eax
f0110b96:	83 ec 0c             	sub    $0xc,%esp
f0110b99:	50                   	push   %eax
f0110b9a:	e8 df f8 01 00       	call   f013047e <free_block>
f0110b9f:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[1]) ;
f0110ba2:	a1 84 b3 2d f0       	mov    0xf02db384,%eax
f0110ba7:	83 ec 0c             	sub    $0xc,%esp
f0110baa:	50                   	push   %eax
f0110bab:	e8 03 f3 01 00       	call   f012feb3 <get_block_size>
f0110bb0:	83 c4 10             	add    $0x10,%esp
f0110bb3:	89 45 bc             	mov    %eax,-0x44(%ebp)
	if (block_size != allocSizes[0])
f0110bb6:	a1 20 fb 18 f0       	mov    0xf018fb20,%eax
f0110bbb:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0110bbe:	74 20                	je     f0110be0 <test_free_block_BF+0x5e2>
		panic("test_free_block #7.2: WRONG FREE! block size after free is not correct. Expected %d, Actual %d",allocSizes[0],block_size);
f0110bc0:	a1 20 fb 18 f0       	mov    0xf018fb20,%eax
f0110bc5:	83 ec 0c             	sub    $0xc,%esp
f0110bc8:	ff 75 bc             	pushl  -0x44(%ebp)
f0110bcb:	50                   	push   %eax
f0110bcc:	68 d4 64 13 f0       	push   $0xf01364d4
f0110bd1:	68 f3 03 00 00       	push   $0x3f3
f0110bd6:	68 b0 48 13 f0       	push   $0xf01348b0
f0110bdb:	e8 d0 f5 fe ff       	call   f01001b0 <_panic>
	block_status = is_free_block(startVAs[1]) ;
f0110be0:	a1 84 b3 2d f0       	mov    0xf02db384,%eax
f0110be5:	83 ec 0c             	sub    $0xc,%esp
f0110be8:	50                   	push   %eax
f0110be9:	e8 db f2 01 00       	call   f012fec9 <is_free_block>
f0110bee:	83 c4 10             	add    $0x10,%esp
f0110bf1:	88 45 bb             	mov    %al,-0x45(%ebp)
	if (block_status != 1)
f0110bf4:	80 7d bb 01          	cmpb   $0x1,-0x45(%ebp)
f0110bf8:	74 17                	je     f0110c11 <test_free_block_BF+0x613>
		panic("test_free_block #7.3: WRONG FREE! block status (is_free) not equal 1 after freeing.");
f0110bfa:	83 ec 04             	sub    $0x4,%esp
f0110bfd:	68 34 65 13 f0       	push   $0xf0136534
f0110c02:	68 f6 03 00 00       	push   $0x3f6
f0110c07:	68 b0 48 13 f0       	push   $0xf01348b0
f0110c0c:	e8 9f f5 fe ff       	call   f01001b0 <_panic>

	//====================================================================//
	/*free_block Scenario 2: Merge with previous ONLY (AT the tail)*/
	cprintf("	4: Free some allocated blocks [Merge with previous ONLY]\n\n") ;
f0110c11:	83 ec 0c             	sub    $0xc,%esp
f0110c14:	68 80 58 13 f0       	push   $0xf0135880
f0110c19:	e8 13 02 ff ff       	call   f0100e31 <cprintf>
f0110c1e:	83 c4 10             	add    $0x10,%esp
	cprintf("		4.1: at the tail\n\n") ;
f0110c21:	83 ec 0c             	sub    $0xc,%esp
f0110c24:	68 bc 58 13 f0       	push   $0xf01358bc
f0110c29:	e8 03 02 ff ff       	call   f0100e31 <cprintf>
f0110c2e:	83 c4 10             	add    $0x10,%esp
	//Free last block (coalesce with previous)
	uint32 blockIndex = numOfAllocs*allocCntPerSize;
f0110c31:	c7 45 b4 78 05 00 00 	movl   $0x578,-0x4c(%ebp)
	free_block(startVAs[blockIndex]);
f0110c38:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110c3b:	8b 04 85 80 b3 2d f0 	mov    -0xfd24c80(,%eax,4),%eax
f0110c42:	83 ec 0c             	sub    $0xc,%esp
f0110c45:	50                   	push   %eax
f0110c46:	e8 33 f8 01 00       	call   f013047e <free_block>
f0110c4b:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[blockIndex-1]) ;
f0110c4e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110c51:	48                   	dec    %eax
f0110c52:	8b 04 85 80 b3 2d f0 	mov    -0xfd24c80(,%eax,4),%eax
f0110c59:	83 ec 0c             	sub    $0xc,%esp
f0110c5c:	50                   	push   %eax
f0110c5d:	e8 51 f2 01 00       	call   f012feb3 <get_block_size>
f0110c62:	83 c4 10             	add    $0x10,%esp
f0110c65:	89 45 bc             	mov    %eax,-0x44(%ebp)
	if (block_size != remainSize + allocSizes[numOfAllocs-1])
f0110c68:	8b 15 38 fb 18 f0    	mov    0xf018fb38,%edx
f0110c6e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0110c71:	01 d0                	add    %edx,%eax
f0110c73:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0110c76:	74 26                	je     f0110c9e <test_free_block_BF+0x6a0>
		panic("test_free_block #8.1: WRONG FREE! block size after free is not correct. Expected %d, Actual %d",remainSize + allocSizes[numOfAllocs-1],block_size);
f0110c78:	8b 15 38 fb 18 f0    	mov    0xf018fb38,%edx
f0110c7e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0110c81:	01 d0                	add    %edx,%eax
f0110c83:	83 ec 0c             	sub    $0xc,%esp
f0110c86:	ff 75 bc             	pushl  -0x44(%ebp)
f0110c89:	50                   	push   %eax
f0110c8a:	68 88 65 13 f0       	push   $0xf0136588
f0110c8f:	68 01 04 00 00       	push   $0x401
f0110c94:	68 b0 48 13 f0       	push   $0xf01348b0
f0110c99:	e8 12 f5 fe ff       	call   f01001b0 <_panic>
	block_status = is_free_block(startVAs[blockIndex-1]) ;
f0110c9e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110ca1:	48                   	dec    %eax
f0110ca2:	8b 04 85 80 b3 2d f0 	mov    -0xfd24c80(,%eax,4),%eax
f0110ca9:	83 ec 0c             	sub    $0xc,%esp
f0110cac:	50                   	push   %eax
f0110cad:	e8 17 f2 01 00       	call   f012fec9 <is_free_block>
f0110cb2:	83 c4 10             	add    $0x10,%esp
f0110cb5:	88 45 bb             	mov    %al,-0x45(%ebp)
	if (block_status != 1)
f0110cb8:	80 7d bb 01          	cmpb   $0x1,-0x45(%ebp)
f0110cbc:	74 17                	je     f0110cd5 <test_free_block_BF+0x6d7>
		panic("test_free_block #8.2: WRONG FREE! block status (is_free) not equal 1 after freeing.");
f0110cbe:	83 ec 04             	sub    $0x4,%esp
f0110cc1:	68 e8 65 13 f0       	push   $0xf01365e8
f0110cc6:	68 04 04 00 00       	push   $0x404
f0110ccb:	68 b0 48 13 f0       	push   $0xf01348b0
f0110cd0:	e8 db f4 fe ff       	call   f01001b0 <_panic>

	if (get_block_size(startVAs[blockIndex]) != 0 || is_free_block(startVAs[blockIndex]) != 0)
f0110cd5:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110cd8:	8b 04 85 80 b3 2d f0 	mov    -0xfd24c80(,%eax,4),%eax
f0110cdf:	83 ec 0c             	sub    $0xc,%esp
f0110ce2:	50                   	push   %eax
f0110ce3:	e8 cb f1 01 00       	call   f012feb3 <get_block_size>
f0110ce8:	83 c4 10             	add    $0x10,%esp
f0110ceb:	85 c0                	test   %eax,%eax
f0110ced:	75 1a                	jne    f0110d09 <test_free_block_BF+0x70b>
f0110cef:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110cf2:	8b 04 85 80 b3 2d f0 	mov    -0xfd24c80(,%eax,4),%eax
f0110cf9:	83 ec 0c             	sub    $0xc,%esp
f0110cfc:	50                   	push   %eax
f0110cfd:	e8 c7 f1 01 00       	call   f012fec9 <is_free_block>
f0110d02:	83 c4 10             	add    $0x10,%esp
f0110d05:	84 c0                	test   %al,%al
f0110d07:	74 17                	je     f0110d20 <test_free_block_BF+0x722>
		panic("test_free_block #8.3: WRONG FREE! make sure to ZEROing the size & is_free values of the vanishing block.");
f0110d09:	83 ec 04             	sub    $0x4,%esp
f0110d0c:	68 3c 66 13 f0       	push   $0xf013663c
f0110d11:	68 07 04 00 00       	push   $0x407
f0110d16:	68 b0 48 13 f0       	push   $0xf01348b0
f0110d1b:	e8 90 f4 fe ff       	call   f01001b0 <_panic>

	//====================================================================//
	/*free_block Scenario 3: Merge with previous ONLY (between 2 blocks)*/
	cprintf("		4.2: between 2 blocks\n\n") ;
f0110d20:	83 ec 0c             	sub    $0xc,%esp
f0110d23:	68 f6 59 13 f0       	push   $0xf01359f6
f0110d28:	e8 04 01 ff ff       	call   f0100e31 <cprintf>
f0110d2d:	83 c4 10             	add    $0x10,%esp
	blockIndex = 2*allocCntPerSize+1 ;
f0110d30:	c7 45 b4 91 01 00 00 	movl   $0x191,-0x4c(%ebp)
	free_block(startVAs[blockIndex]);
f0110d37:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110d3a:	8b 04 85 80 b3 2d f0 	mov    -0xfd24c80(,%eax,4),%eax
f0110d41:	83 ec 0c             	sub    $0xc,%esp
f0110d44:	50                   	push   %eax
f0110d45:	e8 34 f7 01 00       	call   f013047e <free_block>
f0110d4a:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[blockIndex-1]) ;
f0110d4d:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110d50:	48                   	dec    %eax
f0110d51:	8b 04 85 80 b3 2d f0 	mov    -0xfd24c80(,%eax,4),%eax
f0110d58:	83 ec 0c             	sub    $0xc,%esp
f0110d5b:	50                   	push   %eax
f0110d5c:	e8 52 f1 01 00       	call   f012feb3 <get_block_size>
f0110d61:	83 c4 10             	add    $0x10,%esp
f0110d64:	89 45 bc             	mov    %eax,-0x44(%ebp)
	if (block_size != allocSizes[2]+allocSizes[2])
f0110d67:	8b 15 28 fb 18 f0    	mov    0xf018fb28,%edx
f0110d6d:	a1 28 fb 18 f0       	mov    0xf018fb28,%eax
f0110d72:	01 d0                	add    %edx,%eax
f0110d74:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0110d77:	74 28                	je     f0110da1 <test_free_block_BF+0x7a3>
		panic("test_free_block #9.1: WRONG FREE! block size after free is not correct. Expected %d, Actual %d",allocSizes[2] + allocSizes[2],block_size);
f0110d79:	8b 15 28 fb 18 f0    	mov    0xf018fb28,%edx
f0110d7f:	a1 28 fb 18 f0       	mov    0xf018fb28,%eax
f0110d84:	01 d0                	add    %edx,%eax
f0110d86:	83 ec 0c             	sub    $0xc,%esp
f0110d89:	ff 75 bc             	pushl  -0x44(%ebp)
f0110d8c:	50                   	push   %eax
f0110d8d:	68 a8 66 13 f0       	push   $0xf01366a8
f0110d92:	68 10 04 00 00       	push   $0x410
f0110d97:	68 b0 48 13 f0       	push   $0xf01348b0
f0110d9c:	e8 0f f4 fe ff       	call   f01001b0 <_panic>
	block_status = is_free_block(startVAs[blockIndex-1]) ;
f0110da1:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110da4:	48                   	dec    %eax
f0110da5:	8b 04 85 80 b3 2d f0 	mov    -0xfd24c80(,%eax,4),%eax
f0110dac:	83 ec 0c             	sub    $0xc,%esp
f0110daf:	50                   	push   %eax
f0110db0:	e8 14 f1 01 00       	call   f012fec9 <is_free_block>
f0110db5:	83 c4 10             	add    $0x10,%esp
f0110db8:	88 45 bb             	mov    %al,-0x45(%ebp)
	if (block_status != 1)
f0110dbb:	80 7d bb 01          	cmpb   $0x1,-0x45(%ebp)
f0110dbf:	74 17                	je     f0110dd8 <test_free_block_BF+0x7da>
		panic("test_free_block #9.2: WRONG FREE! block status (is_free) not equal 1 after freeing.");
f0110dc1:	83 ec 04             	sub    $0x4,%esp
f0110dc4:	68 08 67 13 f0       	push   $0xf0136708
f0110dc9:	68 13 04 00 00       	push   $0x413
f0110dce:	68 b0 48 13 f0       	push   $0xf01348b0
f0110dd3:	e8 d8 f3 fe ff       	call   f01001b0 <_panic>

	if (get_block_size(startVAs[blockIndex]) != 0 || is_free_block(startVAs[blockIndex]) != 0)
f0110dd8:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110ddb:	8b 04 85 80 b3 2d f0 	mov    -0xfd24c80(,%eax,4),%eax
f0110de2:	83 ec 0c             	sub    $0xc,%esp
f0110de5:	50                   	push   %eax
f0110de6:	e8 c8 f0 01 00       	call   f012feb3 <get_block_size>
f0110deb:	83 c4 10             	add    $0x10,%esp
f0110dee:	85 c0                	test   %eax,%eax
f0110df0:	75 1a                	jne    f0110e0c <test_free_block_BF+0x80e>
f0110df2:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110df5:	8b 04 85 80 b3 2d f0 	mov    -0xfd24c80(,%eax,4),%eax
f0110dfc:	83 ec 0c             	sub    $0xc,%esp
f0110dff:	50                   	push   %eax
f0110e00:	e8 c4 f0 01 00       	call   f012fec9 <is_free_block>
f0110e05:	83 c4 10             	add    $0x10,%esp
f0110e08:	84 c0                	test   %al,%al
f0110e0a:	74 17                	je     f0110e23 <test_free_block_BF+0x825>
		panic("test_free_block #9.3: WRONG FREE! make sure to ZEROing the size & is_free values of the vanishing block.");
f0110e0c:	83 ec 04             	sub    $0x4,%esp
f0110e0f:	68 5c 67 13 f0       	push   $0xf013675c
f0110e14:	68 16 04 00 00       	push   $0x416
f0110e19:	68 b0 48 13 f0       	push   $0xf01348b0
f0110e1e:	e8 8d f3 fe ff       	call   f01001b0 <_panic>

	//====================================================================//
	/*free_block Scenario 4: Merge with next ONLY (AT the head)*/
	cprintf("	5: Free some allocated blocks [Merge with next ONLY]\n\n") ;
f0110e23:	83 ec 0c             	sub    $0xc,%esp
f0110e26:	68 34 5b 13 f0       	push   $0xf0135b34
f0110e2b:	e8 01 00 ff ff       	call   f0100e31 <cprintf>
f0110e30:	83 c4 10             	add    $0x10,%esp
	cprintf("		5.1: at the head\n\n") ;
f0110e33:	83 ec 0c             	sub    $0xc,%esp
f0110e36:	68 6c 5b 13 f0       	push   $0xf0135b6c
f0110e3b:	e8 f1 ff fe ff       	call   f0100e31 <cprintf>
f0110e40:	83 c4 10             	add    $0x10,%esp
	blockIndex = 0 ;
f0110e43:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%ebp)
	free_block(startVAs[blockIndex]);
f0110e4a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110e4d:	8b 04 85 80 b3 2d f0 	mov    -0xfd24c80(,%eax,4),%eax
f0110e54:	83 ec 0c             	sub    $0xc,%esp
f0110e57:	50                   	push   %eax
f0110e58:	e8 21 f6 01 00       	call   f013047e <free_block>
f0110e5d:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[blockIndex]) ;
f0110e60:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110e63:	8b 04 85 80 b3 2d f0 	mov    -0xfd24c80(,%eax,4),%eax
f0110e6a:	83 ec 0c             	sub    $0xc,%esp
f0110e6d:	50                   	push   %eax
f0110e6e:	e8 40 f0 01 00       	call   f012feb3 <get_block_size>
f0110e73:	83 c4 10             	add    $0x10,%esp
f0110e76:	89 45 bc             	mov    %eax,-0x44(%ebp)
	if (block_size != allocSizes[0]+allocSizes[0])
f0110e79:	8b 15 20 fb 18 f0    	mov    0xf018fb20,%edx
f0110e7f:	a1 20 fb 18 f0       	mov    0xf018fb20,%eax
f0110e84:	01 d0                	add    %edx,%eax
f0110e86:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0110e89:	74 28                	je     f0110eb3 <test_free_block_BF+0x8b5>
		panic("test_free_block #9.1: WRONG FREE! block size after free is not correct. Expected %d, Actual %d",allocSizes[0] + allocSizes[0],block_size);
f0110e8b:	8b 15 20 fb 18 f0    	mov    0xf018fb20,%edx
f0110e91:	a1 20 fb 18 f0       	mov    0xf018fb20,%eax
f0110e96:	01 d0                	add    %edx,%eax
f0110e98:	83 ec 0c             	sub    $0xc,%esp
f0110e9b:	ff 75 bc             	pushl  -0x44(%ebp)
f0110e9e:	50                   	push   %eax
f0110e9f:	68 a8 66 13 f0       	push   $0xf01366a8
f0110ea4:	68 20 04 00 00       	push   $0x420
f0110ea9:	68 b0 48 13 f0       	push   $0xf01348b0
f0110eae:	e8 fd f2 fe ff       	call   f01001b0 <_panic>
	block_status = is_free_block(startVAs[blockIndex]) ;
f0110eb3:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110eb6:	8b 04 85 80 b3 2d f0 	mov    -0xfd24c80(,%eax,4),%eax
f0110ebd:	83 ec 0c             	sub    $0xc,%esp
f0110ec0:	50                   	push   %eax
f0110ec1:	e8 03 f0 01 00       	call   f012fec9 <is_free_block>
f0110ec6:	83 c4 10             	add    $0x10,%esp
f0110ec9:	88 45 bb             	mov    %al,-0x45(%ebp)
	if (block_status != 1)
f0110ecc:	80 7d bb 01          	cmpb   $0x1,-0x45(%ebp)
f0110ed0:	74 17                	je     f0110ee9 <test_free_block_BF+0x8eb>
		panic("test_free_block #9.2: WRONG FREE! block status (is_free) not equal 1 after freeing.");
f0110ed2:	83 ec 04             	sub    $0x4,%esp
f0110ed5:	68 08 67 13 f0       	push   $0xf0136708
f0110eda:	68 23 04 00 00       	push   $0x423
f0110edf:	68 b0 48 13 f0       	push   $0xf01348b0
f0110ee4:	e8 c7 f2 fe ff       	call   f01001b0 <_panic>

	if (get_block_size(startVAs[blockIndex+1]) != 0 || is_free_block(startVAs[blockIndex+1]) != 0)
f0110ee9:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110eec:	40                   	inc    %eax
f0110eed:	8b 04 85 80 b3 2d f0 	mov    -0xfd24c80(,%eax,4),%eax
f0110ef4:	83 ec 0c             	sub    $0xc,%esp
f0110ef7:	50                   	push   %eax
f0110ef8:	e8 b6 ef 01 00       	call   f012feb3 <get_block_size>
f0110efd:	83 c4 10             	add    $0x10,%esp
f0110f00:	85 c0                	test   %eax,%eax
f0110f02:	75 1b                	jne    f0110f1f <test_free_block_BF+0x921>
f0110f04:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110f07:	40                   	inc    %eax
f0110f08:	8b 04 85 80 b3 2d f0 	mov    -0xfd24c80(,%eax,4),%eax
f0110f0f:	83 ec 0c             	sub    $0xc,%esp
f0110f12:	50                   	push   %eax
f0110f13:	e8 b1 ef 01 00       	call   f012fec9 <is_free_block>
f0110f18:	83 c4 10             	add    $0x10,%esp
f0110f1b:	84 c0                	test   %al,%al
f0110f1d:	74 17                	je     f0110f36 <test_free_block_BF+0x938>
		panic("test_free_block #9.3: WRONG FREE! make sure to ZEROing the size & is_free values of the vanishing block.");
f0110f1f:	83 ec 04             	sub    $0x4,%esp
f0110f22:	68 5c 67 13 f0       	push   $0xf013675c
f0110f27:	68 26 04 00 00       	push   $0x426
f0110f2c:	68 b0 48 13 f0       	push   $0xf01348b0
f0110f31:	e8 7a f2 fe ff       	call   f01001b0 <_panic>

	//====================================================================//
	/*free_block Scenario 5: Merge with next ONLY (between 2 blocks)*/
	cprintf("		5.2: between 2 blocks\n\n") ;
f0110f36:	83 ec 0c             	sub    $0xc,%esp
f0110f39:	68 81 5b 13 f0       	push   $0xf0135b81
f0110f3e:	e8 ee fe fe ff       	call   f0100e31 <cprintf>
f0110f43:	83 c4 10             	add    $0x10,%esp
	blockIndex = 1*allocCntPerSize - 1 ;
f0110f46:	c7 45 b4 c7 00 00 00 	movl   $0xc7,-0x4c(%ebp)
	free_block(startVAs[blockIndex]);
f0110f4d:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110f50:	8b 04 85 80 b3 2d f0 	mov    -0xfd24c80(,%eax,4),%eax
f0110f57:	83 ec 0c             	sub    $0xc,%esp
f0110f5a:	50                   	push   %eax
f0110f5b:	e8 1e f5 01 00       	call   f013047e <free_block>
f0110f60:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[blockIndex]) ;
f0110f63:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110f66:	8b 04 85 80 b3 2d f0 	mov    -0xfd24c80(,%eax,4),%eax
f0110f6d:	83 ec 0c             	sub    $0xc,%esp
f0110f70:	50                   	push   %eax
f0110f71:	e8 3d ef 01 00       	call   f012feb3 <get_block_size>
f0110f76:	83 c4 10             	add    $0x10,%esp
f0110f79:	89 45 bc             	mov    %eax,-0x44(%ebp)
	if (block_size != allocSizes[0]+allocSizes[1])
f0110f7c:	8b 15 20 fb 18 f0    	mov    0xf018fb20,%edx
f0110f82:	a1 24 fb 18 f0       	mov    0xf018fb24,%eax
f0110f87:	01 d0                	add    %edx,%eax
f0110f89:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0110f8c:	74 28                	je     f0110fb6 <test_free_block_BF+0x9b8>
		panic("test_free_block #10.1: WRONG FREE! block size after free is not correct. Expected %d, Actual %d",allocSizes[0] + allocSizes[1],block_size);
f0110f8e:	8b 15 20 fb 18 f0    	mov    0xf018fb20,%edx
f0110f94:	a1 24 fb 18 f0       	mov    0xf018fb24,%eax
f0110f99:	01 d0                	add    %edx,%eax
f0110f9b:	83 ec 0c             	sub    $0xc,%esp
f0110f9e:	ff 75 bc             	pushl  -0x44(%ebp)
f0110fa1:	50                   	push   %eax
f0110fa2:	68 c8 67 13 f0       	push   $0xf01367c8
f0110fa7:	68 2f 04 00 00       	push   $0x42f
f0110fac:	68 b0 48 13 f0       	push   $0xf01348b0
f0110fb1:	e8 fa f1 fe ff       	call   f01001b0 <_panic>
	block_status = is_free_block(startVAs[blockIndex]) ;
f0110fb6:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110fb9:	8b 04 85 80 b3 2d f0 	mov    -0xfd24c80(,%eax,4),%eax
f0110fc0:	83 ec 0c             	sub    $0xc,%esp
f0110fc3:	50                   	push   %eax
f0110fc4:	e8 00 ef 01 00       	call   f012fec9 <is_free_block>
f0110fc9:	83 c4 10             	add    $0x10,%esp
f0110fcc:	88 45 bb             	mov    %al,-0x45(%ebp)
	if (block_status != 1)
f0110fcf:	80 7d bb 01          	cmpb   $0x1,-0x45(%ebp)
f0110fd3:	74 17                	je     f0110fec <test_free_block_BF+0x9ee>
		panic("test_free_block #10.2: WRONG FREE! block status (is_free) not equal 1 after freeing.");
f0110fd5:	83 ec 04             	sub    $0x4,%esp
f0110fd8:	68 28 68 13 f0       	push   $0xf0136828
f0110fdd:	68 32 04 00 00       	push   $0x432
f0110fe2:	68 b0 48 13 f0       	push   $0xf01348b0
f0110fe7:	e8 c4 f1 fe ff       	call   f01001b0 <_panic>

	if (get_block_size(startVAs[blockIndex+1]) != 0 || is_free_block(startVAs[blockIndex+1]) != 0)
f0110fec:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110fef:	40                   	inc    %eax
f0110ff0:	8b 04 85 80 b3 2d f0 	mov    -0xfd24c80(,%eax,4),%eax
f0110ff7:	83 ec 0c             	sub    $0xc,%esp
f0110ffa:	50                   	push   %eax
f0110ffb:	e8 b3 ee 01 00       	call   f012feb3 <get_block_size>
f0111000:	83 c4 10             	add    $0x10,%esp
f0111003:	85 c0                	test   %eax,%eax
f0111005:	75 1b                	jne    f0111022 <test_free_block_BF+0xa24>
f0111007:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011100a:	40                   	inc    %eax
f011100b:	8b 04 85 80 b3 2d f0 	mov    -0xfd24c80(,%eax,4),%eax
f0111012:	83 ec 0c             	sub    $0xc,%esp
f0111015:	50                   	push   %eax
f0111016:	e8 ae ee 01 00       	call   f012fec9 <is_free_block>
f011101b:	83 c4 10             	add    $0x10,%esp
f011101e:	84 c0                	test   %al,%al
f0111020:	74 17                	je     f0111039 <test_free_block_BF+0xa3b>
		panic("test_free_block #10.3: WRONG FREE! make sure to ZEROing the size & is_free values of the vanishing block.");
f0111022:	83 ec 04             	sub    $0x4,%esp
f0111025:	68 80 68 13 f0       	push   $0xf0136880
f011102a:	68 35 04 00 00       	push   $0x435
f011102f:	68 b0 48 13 f0       	push   $0xf01348b0
f0111034:	e8 77 f1 fe ff       	call   f01001b0 <_panic>

	//====================================================================//
	/*free_block Scenario 6: Merge with prev & next */
	cprintf("	6: Free some allocated blocks [Merge with previous & next]\n\n") ;
f0111039:	83 ec 0c             	sub    $0xc,%esp
f011103c:	68 c4 5c 13 f0       	push   $0xf0135cc4
f0111041:	e8 eb fd fe ff       	call   f0100e31 <cprintf>
f0111046:	83 c4 10             	add    $0x10,%esp
	blockIndex = 4*allocCntPerSize - 2 ;
f0111049:	c7 45 b4 1e 03 00 00 	movl   $0x31e,-0x4c(%ebp)
	free_block(startVAs[blockIndex]);
f0111050:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0111053:	8b 04 85 80 b3 2d f0 	mov    -0xfd24c80(,%eax,4),%eax
f011105a:	83 ec 0c             	sub    $0xc,%esp
f011105d:	50                   	push   %eax
f011105e:	e8 1b f4 01 00       	call   f013047e <free_block>
f0111063:	83 c4 10             	add    $0x10,%esp

	blockIndex = 4*allocCntPerSize - 1 ;
f0111066:	c7 45 b4 1f 03 00 00 	movl   $0x31f,-0x4c(%ebp)
	free_block(startVAs[blockIndex]);
f011106d:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0111070:	8b 04 85 80 b3 2d f0 	mov    -0xfd24c80(,%eax,4),%eax
f0111077:	83 ec 0c             	sub    $0xc,%esp
f011107a:	50                   	push   %eax
f011107b:	e8 fe f3 01 00       	call   f013047e <free_block>
f0111080:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[blockIndex-1]) ;
f0111083:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0111086:	48                   	dec    %eax
f0111087:	8b 04 85 80 b3 2d f0 	mov    -0xfd24c80(,%eax,4),%eax
f011108e:	83 ec 0c             	sub    $0xc,%esp
f0111091:	50                   	push   %eax
f0111092:	e8 1c ee 01 00       	call   f012feb3 <get_block_size>
f0111097:	83 c4 10             	add    $0x10,%esp
f011109a:	89 45 bc             	mov    %eax,-0x44(%ebp)
	if (block_size != allocSizes[3]+allocSizes[3]+allocSizes[4])
f011109d:	8b 15 2c fb 18 f0    	mov    0xf018fb2c,%edx
f01110a3:	a1 2c fb 18 f0       	mov    0xf018fb2c,%eax
f01110a8:	01 c2                	add    %eax,%edx
f01110aa:	a1 30 fb 18 f0       	mov    0xf018fb30,%eax
f01110af:	01 d0                	add    %edx,%eax
f01110b1:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f01110b4:	74 2f                	je     f01110e5 <test_free_block_BF+0xae7>
		panic("test_free_block #11.1: WRONG FREE! block size after free is not correct. Expected %d, Actual %d",allocSizes[3]+allocSizes[3]+allocSizes[4],block_size);
f01110b6:	8b 15 2c fb 18 f0    	mov    0xf018fb2c,%edx
f01110bc:	a1 2c fb 18 f0       	mov    0xf018fb2c,%eax
f01110c1:	01 c2                	add    %eax,%edx
f01110c3:	a1 30 fb 18 f0       	mov    0xf018fb30,%eax
f01110c8:	01 d0                	add    %edx,%eax
f01110ca:	83 ec 0c             	sub    $0xc,%esp
f01110cd:	ff 75 bc             	pushl  -0x44(%ebp)
f01110d0:	50                   	push   %eax
f01110d1:	68 ec 68 13 f0       	push   $0xf01368ec
f01110d6:	68 41 04 00 00       	push   $0x441
f01110db:	68 b0 48 13 f0       	push   $0xf01348b0
f01110e0:	e8 cb f0 fe ff       	call   f01001b0 <_panic>
	block_status = is_free_block(startVAs[blockIndex-1]) ;
f01110e5:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01110e8:	48                   	dec    %eax
f01110e9:	8b 04 85 80 b3 2d f0 	mov    -0xfd24c80(,%eax,4),%eax
f01110f0:	83 ec 0c             	sub    $0xc,%esp
f01110f3:	50                   	push   %eax
f01110f4:	e8 d0 ed 01 00       	call   f012fec9 <is_free_block>
f01110f9:	83 c4 10             	add    $0x10,%esp
f01110fc:	88 45 bb             	mov    %al,-0x45(%ebp)
	if (block_status != 1)
f01110ff:	80 7d bb 01          	cmpb   $0x1,-0x45(%ebp)
f0111103:	74 17                	je     f011111c <test_free_block_BF+0xb1e>
		panic("test_free_block #11.2: WRONG FREE! block status (is_free) not equal 1 after freeing.");
f0111105:	83 ec 04             	sub    $0x4,%esp
f0111108:	68 4c 69 13 f0       	push   $0xf013694c
f011110d:	68 44 04 00 00       	push   $0x444
f0111112:	68 b0 48 13 f0       	push   $0xf01348b0
f0111117:	e8 94 f0 fe ff       	call   f01001b0 <_panic>

	if (get_block_size(startVAs[blockIndex]) != 0 || is_free_block(startVAs[blockIndex]) != 0 ||
f011111c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011111f:	8b 04 85 80 b3 2d f0 	mov    -0xfd24c80(,%eax,4),%eax
f0111126:	83 ec 0c             	sub    $0xc,%esp
f0111129:	50                   	push   %eax
f011112a:	e8 84 ed 01 00       	call   f012feb3 <get_block_size>
f011112f:	83 c4 10             	add    $0x10,%esp
f0111132:	85 c0                	test   %eax,%eax
f0111134:	75 50                	jne    f0111186 <test_free_block_BF+0xb88>
f0111136:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0111139:	8b 04 85 80 b3 2d f0 	mov    -0xfd24c80(,%eax,4),%eax
f0111140:	83 ec 0c             	sub    $0xc,%esp
f0111143:	50                   	push   %eax
f0111144:	e8 80 ed 01 00       	call   f012fec9 <is_free_block>
f0111149:	83 c4 10             	add    $0x10,%esp
f011114c:	84 c0                	test   %al,%al
f011114e:	75 36                	jne    f0111186 <test_free_block_BF+0xb88>
			get_block_size(startVAs[blockIndex+1]) != 0 || is_free_block(startVAs[blockIndex+1]) != 0)
f0111150:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0111153:	40                   	inc    %eax
f0111154:	8b 04 85 80 b3 2d f0 	mov    -0xfd24c80(,%eax,4),%eax
f011115b:	83 ec 0c             	sub    $0xc,%esp
f011115e:	50                   	push   %eax
f011115f:	e8 4f ed 01 00       	call   f012feb3 <get_block_size>
f0111164:	83 c4 10             	add    $0x10,%esp
		panic("test_free_block #11.1: WRONG FREE! block size after free is not correct. Expected %d, Actual %d",allocSizes[3]+allocSizes[3]+allocSizes[4],block_size);
	block_status = is_free_block(startVAs[blockIndex-1]) ;
	if (block_status != 1)
		panic("test_free_block #11.2: WRONG FREE! block status (is_free) not equal 1 after freeing.");

	if (get_block_size(startVAs[blockIndex]) != 0 || is_free_block(startVAs[blockIndex]) != 0 ||
f0111167:	85 c0                	test   %eax,%eax
f0111169:	75 1b                	jne    f0111186 <test_free_block_BF+0xb88>
			get_block_size(startVAs[blockIndex+1]) != 0 || is_free_block(startVAs[blockIndex+1]) != 0)
f011116b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011116e:	40                   	inc    %eax
f011116f:	8b 04 85 80 b3 2d f0 	mov    -0xfd24c80(,%eax,4),%eax
f0111176:	83 ec 0c             	sub    $0xc,%esp
f0111179:	50                   	push   %eax
f011117a:	e8 4a ed 01 00       	call   f012fec9 <is_free_block>
f011117f:	83 c4 10             	add    $0x10,%esp
f0111182:	84 c0                	test   %al,%al
f0111184:	74 17                	je     f011119d <test_free_block_BF+0xb9f>
		panic("test_free_block #11.3: WRONG FREE! make sure to ZEROing the size & is_free values of the vanishing block.");
f0111186:	83 ec 04             	sub    $0x4,%esp
f0111189:	68 a4 69 13 f0       	push   $0xf01369a4
f011118e:	68 48 04 00 00       	push   $0x448
f0111193:	68 b0 48 13 f0       	push   $0xf01348b0
f0111198:	e8 13 f0 fe ff       	call   f01001b0 <_panic>

	//====================================================================//
	/*Allocate After Free Scenarios */
	void* expected = NULL;
f011119d:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%ebp)

	{
		//Consume 1st 7KB Block
		actualSize = 7*kilo - sizeOfMetaData() ;
f01111a4:	c7 45 cc f0 1b 00 00 	movl   $0x1bf0,-0x34(%ebp)
		va = alloc_block(actualSize, DA_BF);
f01111ab:	83 ec 08             	sub    $0x8,%esp
f01111ae:	6a 03                	push   $0x3
f01111b0:	ff 75 cc             	pushl  -0x34(%ebp)
f01111b3:	e8 28 ed 01 00       	call   f012fee0 <alloc_block>
f01111b8:	83 c4 10             	add    $0x10,%esp
f01111bb:	89 45 c8             	mov    %eax,-0x38(%ebp)
		//Check returned va
		expected = (void*)(startVAs[6*allocCntPerSize]);
f01111be:	a1 40 c6 2d f0       	mov    0xf02dc640,%eax
f01111c3:	89 45 b0             	mov    %eax,-0x50(%ebp)
		if(va == NULL || (va != expected))
f01111c6:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f01111ca:	74 08                	je     f01111d4 <test_free_block_BF+0xbd6>
f01111cc:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01111cf:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f01111d2:	74 1d                	je     f01111f1 <test_free_block_BF+0xbf3>
			panic("test_free_block #12.0: WRONG ALLOC - alloc_block_BF return wrong address. Expected %x, Actual %x", expected, va);
f01111d4:	83 ec 0c             	sub    $0xc,%esp
f01111d7:	ff 75 c8             	pushl  -0x38(%ebp)
f01111da:	ff 75 b0             	pushl  -0x50(%ebp)
f01111dd:	68 10 6a 13 f0       	push   $0xf0136a10
f01111e2:	68 55 04 00 00       	push   $0x455
f01111e7:	68 b0 48 13 f0       	push   $0xf01348b0
f01111ec:	e8 bf ef fe ff       	call   f01001b0 <_panic>
	}

	cprintf("	7: Allocate After Free [should be placed in coalesced blocks]\n\n") ;
f01111f1:	83 ec 0c             	sub    $0xc,%esp
f01111f4:	68 2c 5e 13 f0       	push   $0xf0135e2c
f01111f9:	e8 33 fc fe ff       	call   f0100e31 <cprintf>
f01111fe:	83 c4 10             	add    $0x10,%esp

	cprintf("		7.1: in block coalesces with PREV\n\n") ;
f0111201:	83 ec 0c             	sub    $0xc,%esp
f0111204:	68 74 6a 13 f0       	push   $0xf0136a74
f0111209:	e8 23 fc fe ff       	call   f0100e31 <cprintf>
f011120e:	83 c4 10             	add    $0x10,%esp
	actualSize = 2*kilo - sizeOfMetaData();
f0111211:	c7 45 cc f0 07 00 00 	movl   $0x7f0,-0x34(%ebp)
	va = alloc_block(actualSize, DA_BF);
f0111218:	83 ec 08             	sub    $0x8,%esp
f011121b:	6a 03                	push   $0x3
f011121d:	ff 75 cc             	pushl  -0x34(%ebp)
f0111220:	e8 bb ec 01 00       	call   f012fee0 <alloc_block>
f0111225:	83 c4 10             	add    $0x10,%esp
f0111228:	89 45 c8             	mov    %eax,-0x38(%ebp)
	//Check returned va
	expected = startVAs[2*allocCntPerSize];
f011122b:	a1 c0 b9 2d f0       	mov    0xf02db9c0,%eax
f0111230:	89 45 b0             	mov    %eax,-0x50(%ebp)
	if(va == NULL || (va != expected))
f0111233:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f0111237:	74 08                	je     f0111241 <test_free_block_BF+0xc43>
f0111239:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011123c:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f011123f:	74 1d                	je     f011125e <test_free_block_BF+0xc60>
		panic("test_free_block #12.1: WRONG ALLOC - alloc_block_BF return wrong address. Expected %x, Actual %x", expected, va);
f0111241:	83 ec 0c             	sub    $0xc,%esp
f0111244:	ff 75 c8             	pushl  -0x38(%ebp)
f0111247:	ff 75 b0             	pushl  -0x50(%ebp)
f011124a:	68 9c 6a 13 f0       	push   $0xf0136a9c
f011124f:	68 60 04 00 00       	push   $0x460
f0111254:	68 b0 48 13 f0       	push   $0xf01348b0
f0111259:	e8 52 ef fe ff       	call   f01001b0 <_panic>

	actualSize = 8*kilo;
f011125e:	c7 45 cc 00 20 00 00 	movl   $0x2000,-0x34(%ebp)
	va = alloc_block(actualSize, DA_BF);
f0111265:	83 ec 08             	sub    $0x8,%esp
f0111268:	6a 03                	push   $0x3
f011126a:	ff 75 cc             	pushl  -0x34(%ebp)
f011126d:	e8 6e ec 01 00       	call   f012fee0 <alloc_block>
f0111272:	83 c4 10             	add    $0x10,%esp
f0111275:	89 45 c8             	mov    %eax,-0x38(%ebp)
	//Check returned va
	expected = startVAs[numOfAllocs*allocCntPerSize-1];
f0111278:	a1 5c c9 2d f0       	mov    0xf02dc95c,%eax
f011127d:	89 45 b0             	mov    %eax,-0x50(%ebp)
	if(va == NULL || (va != expected))
f0111280:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f0111284:	74 08                	je     f011128e <test_free_block_BF+0xc90>
f0111286:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0111289:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f011128c:	74 1d                	je     f01112ab <test_free_block_BF+0xcad>
		panic("test_free_block #12.2: WRONG ALLOC - alloc_block_BF return wrong address. Expected %x, Actual %x", expected, va);
f011128e:	83 ec 0c             	sub    $0xc,%esp
f0111291:	ff 75 c8             	pushl  -0x38(%ebp)
f0111294:	ff 75 b0             	pushl  -0x50(%ebp)
f0111297:	68 00 6b 13 f0       	push   $0xf0136b00
f011129c:	68 67 04 00 00       	push   $0x467
f01112a1:	68 b0 48 13 f0       	push   $0xf01348b0
f01112a6:	e8 05 ef fe ff       	call   f01001b0 <_panic>

	cprintf("		7.2: in block coalesces with PREV & NEXT\n\n") ;
f01112ab:	83 ec 0c             	sub    $0xc,%esp
f01112ae:	68 c4 5f 13 f0       	push   $0xf0135fc4
f01112b3:	e8 79 fb fe ff       	call   f0100e31 <cprintf>
f01112b8:	83 c4 10             	add    $0x10,%esp
	actualSize = 2*kilo + 1;
f01112bb:	c7 45 cc 01 08 00 00 	movl   $0x801,-0x34(%ebp)
	va = alloc_block(actualSize, DA_BF);
f01112c2:	83 ec 08             	sub    $0x8,%esp
f01112c5:	6a 03                	push   $0x3
f01112c7:	ff 75 cc             	pushl  -0x34(%ebp)
f01112ca:	e8 11 ec 01 00       	call   f012fee0 <alloc_block>
f01112cf:	83 c4 10             	add    $0x10,%esp
f01112d2:	89 45 c8             	mov    %eax,-0x38(%ebp)
	//Check returned va
	expected = startVAs[4*allocCntPerSize - 2];
f01112d5:	a1 f8 bf 2d f0       	mov    0xf02dbff8,%eax
f01112da:	89 45 b0             	mov    %eax,-0x50(%ebp)
	if(va == NULL || (va != expected))
f01112dd:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f01112e1:	74 08                	je     f01112eb <test_free_block_BF+0xced>
f01112e3:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01112e6:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f01112e9:	74 1d                	je     f0111308 <test_free_block_BF+0xd0a>
		panic("test_free_block #12.3: WRONG ALLOC - alloc_block_BF return wrong address. Expected %x, Actual %x", expected, va);
f01112eb:	83 ec 0c             	sub    $0xc,%esp
f01112ee:	ff 75 c8             	pushl  -0x38(%ebp)
f01112f1:	ff 75 b0             	pushl  -0x50(%ebp)
f01112f4:	68 64 6b 13 f0       	push   $0xf0136b64
f01112f9:	68 6f 04 00 00       	push   $0x46f
f01112fe:	68 b0 48 13 f0       	push   $0xf01348b0
f0111303:	e8 a8 ee fe ff       	call   f01001b0 <_panic>

	cprintf("		7.3: in block coalesces with NEXT\n\n") ;
f0111308:	83 ec 0c             	sub    $0xc,%esp
f011130b:	68 c8 6b 13 f0       	push   $0xf0136bc8
f0111310:	e8 1c fb fe ff       	call   f0100e31 <cprintf>
f0111315:	83 c4 10             	add    $0x10,%esp
	actualSize = 4*kilo + 10;
f0111318:	c7 45 cc 0a 10 00 00 	movl   $0x100a,-0x34(%ebp)
	va = alloc_block(actualSize, DA_BF);
f011131f:	83 ec 08             	sub    $0x8,%esp
f0111322:	6a 03                	push   $0x3
f0111324:	ff 75 cc             	pushl  -0x34(%ebp)
f0111327:	e8 b4 eb 01 00       	call   f012fee0 <alloc_block>
f011132c:	83 c4 10             	add    $0x10,%esp
f011132f:	89 45 c8             	mov    %eax,-0x38(%ebp)
	//Check returned va
	expected = startVAs[1*allocCntPerSize - 1];
f0111332:	a1 9c b6 2d f0       	mov    0xf02db69c,%eax
f0111337:	89 45 b0             	mov    %eax,-0x50(%ebp)
	if(va == NULL || (va != expected))
f011133a:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f011133e:	74 08                	je     f0111348 <test_free_block_BF+0xd4a>
f0111340:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0111343:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0111346:	74 1d                	je     f0111365 <test_free_block_BF+0xd67>
		panic("test_free_block #12.4: WRONG ALLOC - alloc_block_BF return wrong address. Expected %x, Actual %x", expected, va);
f0111348:	83 ec 0c             	sub    $0xc,%esp
f011134b:	ff 75 c8             	pushl  -0x38(%ebp)
f011134e:	ff 75 b0             	pushl  -0x50(%ebp)
f0111351:	68 f0 6b 13 f0       	push   $0xf0136bf0
f0111356:	68 77 04 00 00       	push   $0x477
f011135b:	68 b0 48 13 f0       	push   $0xf01348b0
f0111360:	e8 4b ee fe ff       	call   f01001b0 <_panic>

	actualSize = 5*kilo - sizeOfMetaData();
f0111365:	c7 45 cc f0 13 00 00 	movl   $0x13f0,-0x34(%ebp)
	va = alloc_block(actualSize, DA_BF);
f011136c:	83 ec 08             	sub    $0x8,%esp
f011136f:	6a 03                	push   $0x3
f0111371:	ff 75 cc             	pushl  -0x34(%ebp)
f0111374:	e8 67 eb 01 00       	call   f012fee0 <alloc_block>
f0111379:	83 c4 10             	add    $0x10,%esp
f011137c:	89 45 c8             	mov    %eax,-0x38(%ebp)
	//Check returned va
	expected = (void*)(KERNEL_HEAP_START + sizeOfMetaData());
f011137f:	c7 45 b0 10 00 00 f6 	movl   $0xf6000010,-0x50(%ebp)
	if(va == NULL || (va != expected))
f0111386:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f011138a:	74 08                	je     f0111394 <test_free_block_BF+0xd96>
f011138c:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011138f:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0111392:	74 1d                	je     f01113b1 <test_free_block_BF+0xdb3>
		panic("test_free_block #12.5: WRONG ALLOC - alloc_block_BF return wrong address. Expected %x, Actual %x", expected, va);
f0111394:	83 ec 0c             	sub    $0xc,%esp
f0111397:	ff 75 c8             	pushl  -0x38(%ebp)
f011139a:	ff 75 b0             	pushl  -0x50(%ebp)
f011139d:	68 54 6c 13 f0       	push   $0xf0136c54
f01113a2:	68 7e 04 00 00       	push   $0x47e
f01113a7:	68 b0 48 13 f0       	push   $0xf01348b0
f01113ac:	e8 ff ed fe ff       	call   f01001b0 <_panic>

	actualSize = 3*kilo - sizeOfMetaData();
f01113b1:	c7 45 cc f0 0b 00 00 	movl   $0xbf0,-0x34(%ebp)
	va = alloc_block(actualSize, DA_BF);
f01113b8:	83 ec 08             	sub    $0x8,%esp
f01113bb:	6a 03                	push   $0x3
f01113bd:	ff 75 cc             	pushl  -0x34(%ebp)
f01113c0:	e8 1b eb 01 00       	call   f012fee0 <alloc_block>
f01113c5:	83 c4 10             	add    $0x10,%esp
f01113c8:	89 45 c8             	mov    %eax,-0x38(%ebp)
	//Check returned va
	expected = (void*)(KERNEL_HEAP_START + 5*kilo + sizeOfMetaData());
f01113cb:	c7 45 b0 10 14 00 f6 	movl   $0xf6001410,-0x50(%ebp)
	if(va == NULL || (va != expected))
f01113d2:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f01113d6:	74 08                	je     f01113e0 <test_free_block_BF+0xde2>
f01113d8:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01113db:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f01113de:	74 1d                	je     f01113fd <test_free_block_BF+0xdff>
		panic("test_free_block #12.6: WRONG ALLOC - alloc_block_BF return wrong address. Expected %x, Actual %x", expected, va);
f01113e0:	83 ec 0c             	sub    $0xc,%esp
f01113e3:	ff 75 c8             	pushl  -0x38(%ebp)
f01113e6:	ff 75 b0             	pushl  -0x50(%ebp)
f01113e9:	68 b8 6c 13 f0       	push   $0xf0136cb8
f01113ee:	68 85 04 00 00       	push   $0x485
f01113f3:	68 b0 48 13 f0       	push   $0xf01348b0
f01113f8:	e8 b3 ed fe ff       	call   f01001b0 <_panic>


	cprintf("Congratulations!! test free_block with BEST FIT completed successfully.\n");
f01113fd:	83 ec 0c             	sub    $0xc,%esp
f0111400:	68 1c 6d 13 f0       	push   $0xf0136d1c
f0111405:	e8 27 fa fe ff       	call   f0100e31 <cprintf>
f011140a:	83 c4 10             	add    $0x10,%esp

}
f011140d:	90                   	nop
f011140e:	c9                   	leave  
f011140f:	c3                   	ret    

f0111410 <test_free_block_NF>:

void test_free_block_NF()
{
f0111410:	55                   	push   %ebp
f0111411:	89 e5                	mov    %esp,%ebp
f0111413:	83 ec 08             	sub    $0x8,%esp
	panic("not implemented");
f0111416:	83 ec 04             	sub    $0x4,%esp
f0111419:	68 65 6d 13 f0       	push   $0xf0136d65
f011141e:	68 8e 04 00 00       	push   $0x48e
f0111423:	68 b0 48 13 f0       	push   $0xf01348b0
f0111428:	e8 83 ed fe ff       	call   f01001b0 <_panic>

f011142d <findFreeBlockff>:
}
//my functions
//returns the address of the first freeblock
void *findFreeBlockff(){
f011142d:	55                   	push   %ebp
f011142e:	89 e5                	mov    %esp,%ebp
f0111430:	83 ec 18             	sub    $0x18,%esp
 struct BlockMetaData* iterator;
	LIST_FOREACH(iterator,&Heap_MetaBlock){
f0111433:	a1 34 ce 2b f0       	mov    0xf02bce34,%eax
f0111438:	89 45 f4             	mov    %eax,-0xc(%ebp)
f011143b:	eb 39                	jmp    f0111476 <findFreeBlockff+0x49>
		if(iterator->is_free){
f011143d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0111440:	8a 40 04             	mov    0x4(%eax),%al
f0111443:	84 c0                	test   %al,%al
f0111445:	74 27                	je     f011146e <findFreeBlockff+0x41>
			 struct BlockMetaData* address=(struct BlockMetaData*)((uint32)iterator+sizeOfMetaData());
f0111447:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011144a:	83 c0 10             	add    $0x10,%eax
f011144d:	89 45 f0             	mov    %eax,-0x10(%ebp)
			cprintf("found empty block at %x with size %x \n",address,iterator->size);
f0111450:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0111453:	8b 00                	mov    (%eax),%eax
f0111455:	83 ec 04             	sub    $0x4,%esp
f0111458:	50                   	push   %eax
f0111459:	ff 75 f0             	pushl  -0x10(%ebp)
f011145c:	68 78 6d 13 f0       	push   $0xf0136d78
f0111461:	e8 cb f9 fe ff       	call   f0100e31 <cprintf>
f0111466:	83 c4 10             	add    $0x10,%esp
			 return address;
f0111469:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011146c:	eb 44                	jmp    f01114b2 <findFreeBlockff+0x85>
}
//my functions
//returns the address of the first freeblock
void *findFreeBlockff(){
 struct BlockMetaData* iterator;
	LIST_FOREACH(iterator,&Heap_MetaBlock){
f011146e:	a1 3c ce 2b f0       	mov    0xf02bce3c,%eax
f0111473:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0111476:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f011147a:	74 08                	je     f0111484 <findFreeBlockff+0x57>
f011147c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011147f:	8b 40 08             	mov    0x8(%eax),%eax
f0111482:	eb 05                	jmp    f0111489 <findFreeBlockff+0x5c>
f0111484:	b8 00 00 00 00       	mov    $0x0,%eax
f0111489:	a3 3c ce 2b f0       	mov    %eax,0xf02bce3c
f011148e:	a1 3c ce 2b f0       	mov    0xf02bce3c,%eax
f0111493:	85 c0                	test   %eax,%eax
f0111495:	75 a6                	jne    f011143d <findFreeBlockff+0x10>
f0111497:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f011149b:	75 a0                	jne    f011143d <findFreeBlockff+0x10>
			 struct BlockMetaData* address=(struct BlockMetaData*)((uint32)iterator+sizeOfMetaData());
			cprintf("found empty block at %x with size %x \n",address,iterator->size);
			 return address;
		}
	}
	cprintf("memory is full");
f011149d:	83 ec 0c             	sub    $0xc,%esp
f01114a0:	68 9f 6d 13 f0       	push   $0xf0136d9f
f01114a5:	e8 87 f9 fe ff       	call   f0100e31 <cprintf>
f01114aa:	83 c4 10             	add    $0x10,%esp
	return NULL;
f01114ad:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01114b2:	c9                   	leave  
f01114b3:	c3                   	ret    

f01114b4 <listFreeBlocks>:
void listFreeBlocks(){
f01114b4:	55                   	push   %ebp
f01114b5:	89 e5                	mov    %esp,%ebp
f01114b7:	83 ec 18             	sub    $0x18,%esp
	struct BlockMetaData* iterator;
	LIST_FOREACH(iterator,&Heap_MetaBlock){
f01114ba:	a1 34 ce 2b f0       	mov    0xf02bce34,%eax
f01114bf:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01114c2:	eb 2b                	jmp    f01114ef <listFreeBlocks+0x3b>
		if(iterator->is_free){
f01114c4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01114c7:	8a 40 04             	mov    0x4(%eax),%al
f01114ca:	84 c0                	test   %al,%al
f01114cc:	74 19                	je     f01114e7 <listFreeBlocks+0x33>
	cprintf("empty block at address %x with size %x \n",iterator,iterator->size);
f01114ce:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01114d1:	8b 00                	mov    (%eax),%eax
f01114d3:	83 ec 04             	sub    $0x4,%esp
f01114d6:	50                   	push   %eax
f01114d7:	ff 75 f4             	pushl  -0xc(%ebp)
f01114da:	68 b0 6d 13 f0       	push   $0xf0136db0
f01114df:	e8 4d f9 fe ff       	call   f0100e31 <cprintf>
f01114e4:	83 c4 10             	add    $0x10,%esp
	cprintf("memory is full");
	return NULL;
}
void listFreeBlocks(){
	struct BlockMetaData* iterator;
	LIST_FOREACH(iterator,&Heap_MetaBlock){
f01114e7:	a1 3c ce 2b f0       	mov    0xf02bce3c,%eax
f01114ec:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01114ef:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01114f3:	74 08                	je     f01114fd <listFreeBlocks+0x49>
f01114f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01114f8:	8b 40 08             	mov    0x8(%eax),%eax
f01114fb:	eb 05                	jmp    f0111502 <listFreeBlocks+0x4e>
f01114fd:	b8 00 00 00 00       	mov    $0x0,%eax
f0111502:	a3 3c ce 2b f0       	mov    %eax,0xf02bce3c
f0111507:	a1 3c ce 2b f0       	mov    0xf02bce3c,%eax
f011150c:	85 c0                	test   %eax,%eax
f011150e:	75 b4                	jne    f01114c4 <listFreeBlocks+0x10>
f0111510:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0111514:	75 ae                	jne    f01114c4 <listFreeBlocks+0x10>
		if(iterator->is_free){
	cprintf("empty block at address %x with size %x \n",iterator,iterator->size);
		}
		}
}
f0111516:	90                   	nop
f0111517:	c9                   	leave  
f0111518:	c3                   	ret    

f0111519 <test_realloc_block_FF>:
void test_realloc_block_FF()
{
f0111519:	55                   	push   %ebp
f011151a:	89 e5                	mov    %esp,%ebp
f011151c:	83 ec 78             	sub    $0x78,%esp
#if USE_KHEAP
	panic("test_free_block: the kernel heap should be disabled. make sure USE_KHEAP = 0");
	return;
#endif

	cprintf("===================================================\n");
f011151f:	83 ec 0c             	sub    $0xc,%esp
f0111522:	68 dc 6d 13 f0       	push   $0xf0136ddc
f0111527:	e8 05 f9 fe ff       	call   f0100e31 <cprintf>
f011152c:	83 c4 10             	add    $0x10,%esp
	cprintf("*****NOTE: THIS IS A PARTIAL TEST FOR REALLOC******\n") ;
f011152f:	83 ec 0c             	sub    $0xc,%esp
f0111532:	68 14 6e 13 f0       	push   $0xf0136e14
f0111537:	e8 f5 f8 fe ff       	call   f0100e31 <cprintf>
f011153c:	83 c4 10             	add    $0x10,%esp
	cprintf("You need to pick-up the missing tests and test them\n") ;
f011153f:	83 ec 0c             	sub    $0xc,%esp
f0111542:	68 4c 6e 13 f0       	push   $0xf0136e4c
f0111547:	e8 e5 f8 fe ff       	call   f0100e31 <cprintf>
f011154c:	83 c4 10             	add    $0x10,%esp
	cprintf("===================================================\n");
f011154f:	83 ec 0c             	sub    $0xc,%esp
f0111552:	68 dc 6d 13 f0       	push   $0xf0136ddc
f0111557:	e8 d5 f8 fe ff       	call   f0100e31 <cprintf>
f011155c:	83 c4 10             	add    $0x10,%esp

	//TODO: [PROJECT'23.MS1 - #9] [3] DYNAMIC ALLOCATOR - test_realloc_block_FF()
	//CHECK MISSING CASES AND TRY TO TEST THEM !

	int eval = 0;
f011155f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	bool is_correct;

	int initAllocatedSpace = 3*Mega;
f0111566:	c7 45 c8 00 00 30 00 	movl   $0x300000,-0x38(%ebp)
	initialize_dynamic_allocator(KERNEL_HEAP_START, initAllocatedSpace);
f011156d:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0111570:	83 ec 08             	sub    $0x8,%esp
f0111573:	50                   	push   %eax
f0111574:	68 00 00 00 f6       	push   $0xf6000000
f0111579:	e8 7b ea 01 00       	call   f012fff9 <initialize_dynamic_allocator>
f011157e:	83 c4 10             	add    $0x10,%esp
	void * va ;
	//====================================================================//
	//[1] Test calling realloc with VA = NULL. It should call malloc
	//====================================================================//
	/* Try to allocate set of blocks with different sizes*/
	cprintf("1: Test calling realloc with VA = NULL.[10%]\n\n") ;
f0111581:	83 ec 0c             	sub    $0xc,%esp
f0111584:	68 84 6e 13 f0       	push   $0xf0136e84
f0111589:	e8 a3 f8 fe ff       	call   f0100e31 <cprintf>
f011158e:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f0111591:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	int totalSizes = 0;
f0111598:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	for (int i = 0; i < numOfAllocs; ++i)
f011159f:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f01115a6:	eb 2a                	jmp    f01115d2 <test_realloc_block_FF+0xb9>
	{
		totalSizes += allocSizes[i] * allocCntPerSize ;
f01115a8:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01115ab:	8b 14 85 20 fb 18 f0 	mov    -0xfe704e0(,%eax,4),%edx
f01115b2:	89 d0                	mov    %edx,%eax
f01115b4:	c1 e0 02             	shl    $0x2,%eax
f01115b7:	01 d0                	add    %edx,%eax
f01115b9:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01115c0:	01 d0                	add    %edx,%eax
f01115c2:	c1 e0 03             	shl    $0x3,%eax
f01115c5:	89 c2                	mov    %eax,%edx
f01115c7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01115ca:	01 d0                	add    %edx,%eax
f01115cc:	89 45 ec             	mov    %eax,-0x14(%ebp)
	//====================================================================//
	/* Try to allocate set of blocks with different sizes*/
	cprintf("1: Test calling realloc with VA = NULL.[10%]\n\n") ;
	is_correct = 1;
	int totalSizes = 0;
	for (int i = 0; i < numOfAllocs; ++i)
f01115cf:	ff 45 e8             	incl   -0x18(%ebp)
f01115d2:	83 7d e8 06          	cmpl   $0x6,-0x18(%ebp)
f01115d6:	7e d0                	jle    f01115a8 <test_realloc_block_FF+0x8f>
	{
		totalSizes += allocSizes[i] * allocCntPerSize ;
	}
	int remainSize = initAllocatedSpace - totalSizes ;
f01115d8:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01115db:	2b 45 ec             	sub    -0x14(%ebp),%eax
f01115de:	89 45 c4             	mov    %eax,-0x3c(%ebp)
	if (remainSize <= 0)
f01115e1:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
f01115e5:	7f 17                	jg     f01115fe <test_realloc_block_FF+0xe5>
		panic("test_realloc_block_FF is not configured correctly. Consider updating the initial allocated space OR the required allocations");
f01115e7:	83 ec 04             	sub    $0x4,%esp
f01115ea:	68 b4 6e 13 f0       	push   $0xf0136eb4
f01115ef:	68 c9 04 00 00       	push   $0x4c9
f01115f4:	68 b0 48 13 f0       	push   $0xf01348b0
f01115f9:	e8 b2 eb fe ff       	call   f01001b0 <_panic>

	int idx = 0;
f01115fe:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	void* curVA = (void*) KERNEL_HEAP_START ;
f0111605:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
f011160c:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f0111613:	e9 f8 00 00 00       	jmp    f0111710 <test_realloc_block_FF+0x1f7>
	{
		for (int j = 0; j < allocCntPerSize; ++j)
f0111618:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f011161f:	e9 dc 00 00 00       	jmp    f0111700 <test_realloc_block_FF+0x1e7>
		{
			actualSize = allocSizes[i] - sizeOfMetaData();
f0111624:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0111627:	8b 04 85 20 fb 18 f0 	mov    -0xfe704e0(,%eax,4),%eax
f011162e:	83 e8 10             	sub    $0x10,%eax
f0111631:	89 45 c0             	mov    %eax,-0x40(%ebp)
			va = startVAs[idx] = realloc_block_FF(NULL, actualSize);
f0111634:	83 ec 08             	sub    $0x8,%esp
f0111637:	ff 75 c0             	pushl  -0x40(%ebp)
f011163a:	6a 00                	push   $0x0
f011163c:	e8 df ee 01 00       	call   f0130520 <realloc_block_FF>
f0111641:	83 c4 10             	add    $0x10,%esp
f0111644:	89 c2                	mov    %eax,%edx
f0111646:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0111649:	89 14 85 80 b3 2d f0 	mov    %edx,-0xfd24c80(,%eax,4)
f0111650:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0111653:	8b 04 85 80 b3 2d f0 	mov    -0xfd24c80(,%eax,4),%eax
f011165a:	89 45 bc             	mov    %eax,-0x44(%ebp)
			midVAs[idx] = va + actualSize/2 ;
f011165d:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0111660:	d1 e8                	shr    %eax
f0111662:	89 c2                	mov    %eax,%edx
f0111664:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0111667:	01 c2                	add    %eax,%edx
f0111669:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011166c:	89 14 85 80 df 2d f0 	mov    %edx,-0xfd22080(,%eax,4)
			endVAs[idx] = va + actualSize - sizeof(short);
f0111673:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0111676:	8d 50 fe             	lea    -0x2(%eax),%edx
f0111679:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011167c:	01 c2                	add    %eax,%edx
f011167e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0111681:	89 14 85 80 c9 2d f0 	mov    %edx,-0xfd23680(,%eax,4)
			//Check returned va
			if(va == NULL || (va != (curVA + sizeOfMetaData())))
f0111688:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f011168c:	74 0b                	je     f0111699 <test_realloc_block_FF+0x180>
f011168e:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0111691:	83 c0 10             	add    $0x10,%eax
f0111694:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0111697:	74 24                	je     f01116bd <test_realloc_block_FF+0x1a4>
				panic("test_realloc_block_FF #1.%d: WRONG ALLOC - it return wrong address. Expected %x, Actual %x", idx, curVA + sizeOfMetaData() ,va);
f0111699:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011169c:	83 c0 10             	add    $0x10,%eax
f011169f:	83 ec 08             	sub    $0x8,%esp
f01116a2:	ff 75 bc             	pushl  -0x44(%ebp)
f01116a5:	50                   	push   %eax
f01116a6:	ff 75 e4             	pushl  -0x1c(%ebp)
f01116a9:	68 34 6f 13 f0       	push   $0xf0136f34
f01116ae:	68 d8 04 00 00       	push   $0x4d8
f01116b3:	68 b0 48 13 f0       	push   $0xf01348b0
f01116b8:	e8 f3 ea fe ff       	call   f01001b0 <_panic>
			curVA += allocSizes[i] ;
f01116bd:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01116c0:	8b 04 85 20 fb 18 f0 	mov    -0xfe704e0(,%eax,4),%eax
f01116c7:	01 45 e0             	add    %eax,-0x20(%ebp)
			*(startVAs[idx]) = idx ;
f01116ca:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01116cd:	8b 14 85 80 b3 2d f0 	mov    -0xfd24c80(,%eax,4),%edx
f01116d4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01116d7:	66 89 02             	mov    %ax,(%edx)
			*(midVAs[idx]) = idx ;
f01116da:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01116dd:	8b 14 85 80 df 2d f0 	mov    -0xfd22080(,%eax,4),%edx
f01116e4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01116e7:	66 89 02             	mov    %ax,(%edx)
			*(endVAs[idx]) = idx ;
f01116ea:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01116ed:	8b 14 85 80 c9 2d f0 	mov    -0xfd23680(,%eax,4),%edx
f01116f4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01116f7:	66 89 02             	mov    %ax,(%edx)
			idx++;
f01116fa:	ff 45 e4             	incl   -0x1c(%ebp)
	int idx = 0;
	void* curVA = (void*) KERNEL_HEAP_START ;
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
	{
		for (int j = 0; j < allocCntPerSize; ++j)
f01116fd:	ff 45 d8             	incl   -0x28(%ebp)
f0111700:	81 7d d8 c7 00 00 00 	cmpl   $0xc7,-0x28(%ebp)
f0111707:	0f 8e 17 ff ff ff    	jle    f0111624 <test_realloc_block_FF+0x10b>
		panic("test_realloc_block_FF is not configured correctly. Consider updating the initial allocated space OR the required allocations");

	int idx = 0;
	void* curVA = (void*) KERNEL_HEAP_START ;
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
f011170d:	ff 45 dc             	incl   -0x24(%ebp)
f0111710:	83 7d dc 06          	cmpl   $0x6,-0x24(%ebp)
f0111714:	0f 8e fe fe ff ff    	jle    f0111618 <test_realloc_block_FF+0xff>
		}
	}

	//====================================================================//
	/* Try to allocate a block with a size equal to the size of the first existing free block*/
	actualSize = remainSize - sizeOfMetaData();
f011171a:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011171d:	83 e8 10             	sub    $0x10,%eax
f0111720:	89 45 c0             	mov    %eax,-0x40(%ebp)
	va = startVAs[idx] = realloc_block_FF(NULL, actualSize);
f0111723:	83 ec 08             	sub    $0x8,%esp
f0111726:	ff 75 c0             	pushl  -0x40(%ebp)
f0111729:	6a 00                	push   $0x0
f011172b:	e8 f0 ed 01 00       	call   f0130520 <realloc_block_FF>
f0111730:	83 c4 10             	add    $0x10,%esp
f0111733:	89 c2                	mov    %eax,%edx
f0111735:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0111738:	89 14 85 80 b3 2d f0 	mov    %edx,-0xfd24c80(,%eax,4)
f011173f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0111742:	8b 04 85 80 b3 2d f0 	mov    -0xfd24c80(,%eax,4),%eax
f0111749:	89 45 bc             	mov    %eax,-0x44(%ebp)
	midVAs[idx] = va + actualSize/2 ;
f011174c:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011174f:	d1 e8                	shr    %eax
f0111751:	89 c2                	mov    %eax,%edx
f0111753:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0111756:	01 c2                	add    %eax,%edx
f0111758:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011175b:	89 14 85 80 df 2d f0 	mov    %edx,-0xfd22080(,%eax,4)
	endVAs[idx] = va + actualSize - sizeof(short);
f0111762:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0111765:	8d 50 fe             	lea    -0x2(%eax),%edx
f0111768:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011176b:	01 c2                	add    %eax,%edx
f011176d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0111770:	89 14 85 80 c9 2d f0 	mov    %edx,-0xfd23680(,%eax,4)
	//Check returned va
	if(va == NULL || (va != (curVA + sizeOfMetaData())))
f0111777:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f011177b:	74 0b                	je     f0111788 <test_realloc_block_FF+0x26f>
f011177d:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0111780:	83 c0 10             	add    $0x10,%eax
f0111783:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0111786:	74 17                	je     f011179f <test_realloc_block_FF+0x286>
		panic("test_realloc_block_FF #2: WRONG ALLOC - it return wrong address.");
f0111788:	83 ec 04             	sub    $0x4,%esp
f011178b:	68 90 6f 13 f0       	push   $0xf0136f90
f0111790:	68 e9 04 00 00       	push   $0x4e9
f0111795:	68 b0 48 13 f0       	push   $0xf01348b0
f011179a:	e8 11 ea fe ff       	call   f01001b0 <_panic>
	*(startVAs[idx]) = idx ;
f011179f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01117a2:	8b 14 85 80 b3 2d f0 	mov    -0xfd24c80(,%eax,4),%edx
f01117a9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01117ac:	66 89 02             	mov    %ax,(%edx)
	*(midVAs[idx]) = idx ;
f01117af:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01117b2:	8b 14 85 80 df 2d f0 	mov    -0xfd22080(,%eax,4),%edx
f01117b9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01117bc:	66 89 02             	mov    %ax,(%edx)
	*(endVAs[idx]) = idx ;
f01117bf:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01117c2:	8b 14 85 80 c9 2d f0 	mov    -0xfd23680(,%eax,4),%edx
f01117c9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01117cc:	66 89 02             	mov    %ax,(%edx)

	//====================================================================//
	/* Check stored data inside each allocated block*/
	for (int i = 0; i < idx; ++i)
f01117cf:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f01117d6:	eb 59                	jmp    f0111831 <test_realloc_block_FF+0x318>
	{
		if (*(startVAs[i]) != i || *(midVAs[i]) != i ||	*(endVAs[i]) != i)
f01117d8:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01117db:	8b 04 85 80 b3 2d f0 	mov    -0xfd24c80(,%eax,4),%eax
f01117e2:	66 8b 00             	mov    (%eax),%ax
f01117e5:	98                   	cwtl   
f01117e6:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f01117e9:	75 26                	jne    f0111811 <test_realloc_block_FF+0x2f8>
f01117eb:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01117ee:	8b 04 85 80 df 2d f0 	mov    -0xfd22080(,%eax,4),%eax
f01117f5:	66 8b 00             	mov    (%eax),%ax
f01117f8:	98                   	cwtl   
f01117f9:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f01117fc:	75 13                	jne    f0111811 <test_realloc_block_FF+0x2f8>
f01117fe:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0111801:	8b 04 85 80 c9 2d f0 	mov    -0xfd23680(,%eax,4),%eax
f0111808:	66 8b 00             	mov    (%eax),%ax
f011180b:	98                   	cwtl   
f011180c:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f011180f:	74 1d                	je     f011182e <test_realloc_block_FF+0x315>
			panic("test_realloc_block_FF #3.%d: WRONG! content of the block is not correct. Expected %d",i, i);
f0111811:	83 ec 0c             	sub    $0xc,%esp
f0111814:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111817:	ff 75 d4             	pushl  -0x2c(%ebp)
f011181a:	68 d4 6f 13 f0       	push   $0xf0136fd4
f011181f:	68 f3 04 00 00       	push   $0x4f3
f0111824:	68 b0 48 13 f0       	push   $0xf01348b0
f0111829:	e8 82 e9 fe ff       	call   f01001b0 <_panic>
	*(midVAs[idx]) = idx ;
	*(endVAs[idx]) = idx ;

	//====================================================================//
	/* Check stored data inside each allocated block*/
	for (int i = 0; i < idx; ++i)
f011182e:	ff 45 d4             	incl   -0x2c(%ebp)
f0111831:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0111834:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0111837:	7c 9f                	jl     f01117d8 <test_realloc_block_FF+0x2bf>
	{
		if (*(startVAs[i]) != i || *(midVAs[i]) != i ||	*(endVAs[i]) != i)
			panic("test_realloc_block_FF #3.%d: WRONG! content of the block is not correct. Expected %d",i, i);
	}

	if (is_correct)
f0111839:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f011183d:	74 04                	je     f0111843 <test_realloc_block_FF+0x32a>
	{
		eval += 10;
f011183f:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)
	}

	//====================================================================//
	//[2] Test krealloc by passing size = 0. It should call free
	//====================================================================//
	cprintf("2: Test calling realloc with SIZE = 0.[10%]\n\n") ;
f0111843:	83 ec 0c             	sub    $0xc,%esp
f0111846:	68 2c 70 13 f0       	push   $0xf013702c
f011184b:	e8 e1 f5 fe ff       	call   f0100e31 <cprintf>
f0111850:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f0111853:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)

	//Free set of blocks with different sizes (first block of each size)
	for (int i = 0; i < numOfAllocs; ++i)
f011185a:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
f0111861:	e9 fa 00 00 00       	jmp    f0111960 <test_realloc_block_FF+0x447>
	{
		va = realloc_block_FF(startVAs[i*allocCntPerSize], 0);
f0111866:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0111869:	89 d0                	mov    %edx,%eax
f011186b:	c1 e0 02             	shl    $0x2,%eax
f011186e:	01 d0                	add    %edx,%eax
f0111870:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0111877:	01 d0                	add    %edx,%eax
f0111879:	c1 e0 03             	shl    $0x3,%eax
f011187c:	8b 04 85 80 b3 2d f0 	mov    -0xfd24c80(,%eax,4),%eax
f0111883:	83 ec 08             	sub    $0x8,%esp
f0111886:	6a 00                	push   $0x0
f0111888:	50                   	push   %eax
f0111889:	e8 92 ec 01 00       	call   f0130520 <realloc_block_FF>
f011188e:	83 c4 10             	add    $0x10,%esp
f0111891:	89 45 bc             	mov    %eax,-0x44(%ebp)
		uint32 block_size = get_block_size(startVAs[i*allocCntPerSize]) ;
f0111894:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0111897:	89 d0                	mov    %edx,%eax
f0111899:	c1 e0 02             	shl    $0x2,%eax
f011189c:	01 d0                	add    %edx,%eax
f011189e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01118a5:	01 d0                	add    %edx,%eax
f01118a7:	c1 e0 03             	shl    $0x3,%eax
f01118aa:	8b 04 85 80 b3 2d f0 	mov    -0xfd24c80(,%eax,4),%eax
f01118b1:	83 ec 0c             	sub    $0xc,%esp
f01118b4:	50                   	push   %eax
f01118b5:	e8 f9 e5 01 00       	call   f012feb3 <get_block_size>
f01118ba:	83 c4 10             	add    $0x10,%esp
f01118bd:	89 45 b8             	mov    %eax,-0x48(%ebp)
		if (block_size != allocSizes[i])
f01118c0:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01118c3:	8b 04 85 20 fb 18 f0 	mov    -0xfe704e0(,%eax,4),%eax
f01118ca:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f01118cd:	74 28                	je     f01118f7 <test_realloc_block_FF+0x3de>
			panic("test_realloc_block_FF #4.%d: WRONG FREE! block size after free is not correct. Expected %d, Actual %d",i, allocSizes[i],block_size);
f01118cf:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01118d2:	8b 04 85 20 fb 18 f0 	mov    -0xfe704e0(,%eax,4),%eax
f01118d9:	83 ec 08             	sub    $0x8,%esp
f01118dc:	ff 75 b8             	pushl  -0x48(%ebp)
f01118df:	50                   	push   %eax
f01118e0:	ff 75 d0             	pushl  -0x30(%ebp)
f01118e3:	68 5c 70 13 f0       	push   $0xf013705c
f01118e8:	68 07 05 00 00       	push   $0x507
f01118ed:	68 b0 48 13 f0       	push   $0xf01348b0
f01118f2:	e8 b9 e8 fe ff       	call   f01001b0 <_panic>
		int8 block_status = is_free_block(startVAs[i*allocCntPerSize]) ;
f01118f7:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01118fa:	89 d0                	mov    %edx,%eax
f01118fc:	c1 e0 02             	shl    $0x2,%eax
f01118ff:	01 d0                	add    %edx,%eax
f0111901:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0111908:	01 d0                	add    %edx,%eax
f011190a:	c1 e0 03             	shl    $0x3,%eax
f011190d:	8b 04 85 80 b3 2d f0 	mov    -0xfd24c80(,%eax,4),%eax
f0111914:	83 ec 0c             	sub    $0xc,%esp
f0111917:	50                   	push   %eax
f0111918:	e8 ac e5 01 00       	call   f012fec9 <is_free_block>
f011191d:	83 c4 10             	add    $0x10,%esp
f0111920:	88 45 b7             	mov    %al,-0x49(%ebp)
		if (block_status != 1)
f0111923:	80 7d b7 01          	cmpb   $0x1,-0x49(%ebp)
f0111927:	74 17                	je     f0111940 <test_realloc_block_FF+0x427>
			panic("test_realloc_block_FF #5.%d: WRONG FREE! block status (is_free) not equal 1 after freeing.", i);
f0111929:	ff 75 d0             	pushl  -0x30(%ebp)
f011192c:	68 c4 70 13 f0       	push   $0xf01370c4
f0111931:	68 0a 05 00 00       	push   $0x50a
f0111936:	68 b0 48 13 f0       	push   $0xf01348b0
f011193b:	e8 70 e8 fe ff       	call   f01001b0 <_panic>
		if(va != NULL)
f0111940:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f0111944:	74 17                	je     f011195d <test_realloc_block_FF+0x444>
			panic("test_realloc_block_FF #6.%d: it should return NULL.", i);
f0111946:	ff 75 d0             	pushl  -0x30(%ebp)
f0111949:	68 20 71 13 f0       	push   $0xf0137120
f011194e:	68 0c 05 00 00       	push   $0x50c
f0111953:	68 b0 48 13 f0       	push   $0xf01348b0
f0111958:	e8 53 e8 fe ff       	call   f01001b0 <_panic>
	//====================================================================//
	cprintf("2: Test calling realloc with SIZE = 0.[10%]\n\n") ;
	is_correct = 1;

	//Free set of blocks with different sizes (first block of each size)
	for (int i = 0; i < numOfAllocs; ++i)
f011195d:	ff 45 d0             	incl   -0x30(%ebp)
f0111960:	83 7d d0 06          	cmpl   $0x6,-0x30(%ebp)
f0111964:	0f 8e fc fe ff ff    	jle    f0111866 <test_realloc_block_FF+0x34d>
		if(va != NULL)
			panic("test_realloc_block_FF #6.%d: it should return NULL.", i);
	}

	//test calling it with NULL & ZERO
	va = realloc_block_FF(NULL, 0);
f011196a:	83 ec 08             	sub    $0x8,%esp
f011196d:	6a 00                	push   $0x0
f011196f:	6a 00                	push   $0x0
f0111971:	e8 aa eb 01 00       	call   f0130520 <realloc_block_FF>
f0111976:	83 c4 10             	add    $0x10,%esp
f0111979:	89 45 bc             	mov    %eax,-0x44(%ebp)
	if(va != NULL)
f011197c:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f0111980:	74 17                	je     f0111999 <test_realloc_block_FF+0x480>
		panic("test_realloc_block_FF #7: it should return NULL.");
f0111982:	83 ec 04             	sub    $0x4,%esp
f0111985:	68 54 71 13 f0       	push   $0xf0137154
f011198a:	68 12 05 00 00       	push   $0x512
f011198f:	68 b0 48 13 f0       	push   $0xf01348b0
f0111994:	e8 17 e8 fe ff       	call   f01001b0 <_panic>
	//====================================================================//
	/* Check stored data inside each allocated block*/
	for (int i = 0; i < idx; ++i)
f0111999:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f01119a0:	eb 6b                	jmp    f0111a0d <test_realloc_block_FF+0x4f4>
	{

		if (i % allocCntPerSize == 0)
f01119a2:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01119a5:	b9 c8 00 00 00       	mov    $0xc8,%ecx
f01119aa:	99                   	cltd   
f01119ab:	f7 f9                	idiv   %ecx
f01119ad:	89 d0                	mov    %edx,%eax
f01119af:	85 c0                	test   %eax,%eax
f01119b1:	74 56                	je     f0111a09 <test_realloc_block_FF+0x4f0>
			continue;
		if (*(startVAs[i]) != i || *(midVAs[i]) != i ||	*(endVAs[i]) != i)
f01119b3:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01119b6:	8b 04 85 80 b3 2d f0 	mov    -0xfd24c80(,%eax,4),%eax
f01119bd:	66 8b 00             	mov    (%eax),%ax
f01119c0:	98                   	cwtl   
f01119c1:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01119c4:	75 26                	jne    f01119ec <test_realloc_block_FF+0x4d3>
f01119c6:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01119c9:	8b 04 85 80 df 2d f0 	mov    -0xfd22080(,%eax,4),%eax
f01119d0:	66 8b 00             	mov    (%eax),%ax
f01119d3:	98                   	cwtl   
f01119d4:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01119d7:	75 13                	jne    f01119ec <test_realloc_block_FF+0x4d3>
f01119d9:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01119dc:	8b 04 85 80 c9 2d f0 	mov    -0xfd23680(,%eax,4),%eax
f01119e3:	66 8b 00             	mov    (%eax),%ax
f01119e6:	98                   	cwtl   
f01119e7:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01119ea:	74 1e                	je     f0111a0a <test_realloc_block_FF+0x4f1>
			panic("test_realloc_block_FF #8.%d: WRONG! content of the block is not correct. Expected %d",i, i);
f01119ec:	83 ec 0c             	sub    $0xc,%esp
f01119ef:	ff 75 cc             	pushl  -0x34(%ebp)
f01119f2:	ff 75 cc             	pushl  -0x34(%ebp)
f01119f5:	68 88 71 13 f0       	push   $0xf0137188
f01119fa:	68 1b 05 00 00       	push   $0x51b
f01119ff:	68 b0 48 13 f0       	push   $0xf01348b0
f0111a04:	e8 a7 e7 fe ff       	call   f01001b0 <_panic>
	/* Check stored data inside each allocated block*/
	for (int i = 0; i < idx; ++i)
	{

		if (i % allocCntPerSize == 0)
			continue;
f0111a09:	90                   	nop
	va = realloc_block_FF(NULL, 0);
	if(va != NULL)
		panic("test_realloc_block_FF #7: it should return NULL.");
	//====================================================================//
	/* Check stored data inside each allocated block*/
	for (int i = 0; i < idx; ++i)
f0111a0a:	ff 45 cc             	incl   -0x34(%ebp)
f0111a0d:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0111a10:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0111a13:	7c 8d                	jl     f01119a2 <test_realloc_block_FF+0x489>
			continue;
		if (*(startVAs[i]) != i || *(midVAs[i]) != i ||	*(endVAs[i]) != i)
			panic("test_realloc_block_FF #8.%d: WRONG! content of the block is not correct. Expected %d",i, i);
	}

	if (is_correct)
f0111a15:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0111a19:	74 04                	je     f0111a1f <test_realloc_block_FF+0x506>
	{
		eval += 10;
f0111a1b:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)
	}

	//====================================================================//
	//[3] Test realloc with increased sizes
	//====================================================================//
	cprintf("3: Test calling realloc with increased sizes [50%].\n\n") ;
f0111a1f:	83 ec 0c             	sub    $0xc,%esp
f0111a22:	68 e0 71 13 f0       	push   $0xf01371e0
f0111a27:	e8 05 f4 fe ff       	call   f0100e31 <cprintf>
f0111a2c:	83 c4 10             	add    $0x10,%esp
	int blockIndex, block_size, block_status, old_size, new_size, expected_size, newBlockIndex;
	void* expected_va = NULL;
f0111a2f:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%ebp)
	//[3.1] reallocate in same place (NO relocate - split)
	cprintf("	3.1: reallocate in same place (NO relocate - split)\n\n") ;
f0111a36:	83 ec 0c             	sub    $0xc,%esp
f0111a39:	68 18 72 13 f0       	push   $0xf0137218
f0111a3e:	e8 ee f3 fe ff       	call   f0100e31 <cprintf>
f0111a43:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f0111a46:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	{


		blockIndex = 4*allocCntPerSize - 1 ;
f0111a4d:	c7 45 ac 1f 03 00 00 	movl   $0x31f,-0x54(%ebp)
		new_size = allocSizes[3] /*12+16 B*/ + allocSizes[4]/2 /*2KB/2*/ - sizeOfMetaData();
f0111a54:	a1 2c fb 18 f0       	mov    0xf018fb2c,%eax
f0111a59:	8b 15 30 fb 18 f0    	mov    0xf018fb30,%edx
f0111a5f:	d1 ea                	shr    %edx
f0111a61:	01 d0                	add    %edx,%eax
f0111a63:	83 e8 10             	sub    $0x10,%eax
f0111a66:	89 45 a8             	mov    %eax,-0x58(%ebp)
		va = realloc_block_FF(startVAs[blockIndex], new_size);
f0111a69:	8b 55 a8             	mov    -0x58(%ebp),%edx
f0111a6c:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111a6f:	8b 04 85 80 b3 2d f0 	mov    -0xfd24c80(,%eax,4),%eax
f0111a76:	83 ec 08             	sub    $0x8,%esp
f0111a79:	52                   	push   %edx
f0111a7a:	50                   	push   %eax
f0111a7b:	e8 a0 ea 01 00       	call   f0130520 <realloc_block_FF>
f0111a80:	83 c4 10             	add    $0x10,%esp
f0111a83:	89 45 bc             	mov    %eax,-0x44(%ebp)


		//check return address
		if(va == NULL || (va != startVAs[blockIndex]))
f0111a86:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f0111a8a:	74 0f                	je     f0111a9b <test_realloc_block_FF+0x582>
f0111a8c:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111a8f:	8b 04 85 80 b3 2d f0 	mov    -0xfd24c80(,%eax,4),%eax
f0111a96:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0111a99:	74 25                	je     f0111ac0 <test_realloc_block_FF+0x5a7>
		{
			is_correct = 0;
f0111a9b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #9.1: WRONG REALLOC - it return wrong address. Expected %x, Actual %x\n", startVAs[blockIndex] ,va);
f0111aa2:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111aa5:	8b 04 85 80 b3 2d f0 	mov    -0xfd24c80(,%eax,4),%eax
f0111aac:	83 ec 04             	sub    $0x4,%esp
f0111aaf:	ff 75 bc             	pushl  -0x44(%ebp)
f0111ab2:	50                   	push   %eax
f0111ab3:	68 50 72 13 f0       	push   $0xf0137250
f0111ab8:	e8 74 f3 fe ff       	call   f0100e31 <cprintf>
f0111abd:	83 c4 10             	add    $0x10,%esp
		}
		//check reallocated block size & status
		block_size = get_block_size(startVAs[blockIndex]) ;
f0111ac0:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111ac3:	8b 04 85 80 b3 2d f0 	mov    -0xfd24c80(,%eax,4),%eax
f0111aca:	83 ec 0c             	sub    $0xc,%esp
f0111acd:	50                   	push   %eax
f0111ace:	e8 e0 e3 01 00       	call   f012feb3 <get_block_size>
f0111ad3:	83 c4 10             	add    $0x10,%esp
f0111ad6:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		if (block_size != new_size + sizeOfMetaData())
f0111ad9:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0111adc:	8d 50 10             	lea    0x10(%eax),%edx
f0111adf:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0111ae2:	39 c2                	cmp    %eax,%edx
f0111ae4:	74 21                	je     f0111b07 <test_realloc_block_FF+0x5ee>
		{
			is_correct = 0;
f0111ae6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #9.2: WRONG REALLOC! block size after realloc is not correct. Expected %d, Actual %d\n",new_size + sizeOfMetaData(), block_size);
f0111aed:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0111af0:	83 c0 10             	add    $0x10,%eax
f0111af3:	83 ec 04             	sub    $0x4,%esp
f0111af6:	ff 75 a4             	pushl  -0x5c(%ebp)
f0111af9:	50                   	push   %eax
f0111afa:	68 b0 72 13 f0       	push   $0xf01372b0
f0111aff:	e8 2d f3 fe ff       	call   f0100e31 <cprintf>
f0111b04:	83 c4 10             	add    $0x10,%esp
		}
		block_status = is_free_block(startVAs[blockIndex]) ;
f0111b07:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111b0a:	8b 04 85 80 b3 2d f0 	mov    -0xfd24c80(,%eax,4),%eax
f0111b11:	83 ec 0c             	sub    $0xc,%esp
f0111b14:	50                   	push   %eax
f0111b15:	e8 af e3 01 00       	call   f012fec9 <is_free_block>
f0111b1a:	83 c4 10             	add    $0x10,%esp
f0111b1d:	0f be c0             	movsbl %al,%eax
f0111b20:	89 45 a0             	mov    %eax,-0x60(%ebp)
		if (block_status != 0)
f0111b23:	83 7d a0 00          	cmpl   $0x0,-0x60(%ebp)
f0111b27:	74 17                	je     f0111b40 <test_realloc_block_FF+0x627>
		{
			is_correct = 0;
f0111b29:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #9.3: WRONG REALLOC! block status (is_free) not equal 0 after realloc.\n");
f0111b30:	83 ec 0c             	sub    $0xc,%esp
f0111b33:	68 1c 73 13 f0       	push   $0xf013731c
f0111b38:	e8 f4 f2 fe ff       	call   f0100e31 <cprintf>
f0111b3d:	83 c4 10             	add    $0x10,%esp
		}
		//check vanishing block (if any)
		if (get_block_size(startVAs[blockIndex+1]) != 0 || is_free_block(startVAs[blockIndex+1]) != 0)
f0111b40:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111b43:	40                   	inc    %eax
f0111b44:	8b 04 85 80 b3 2d f0 	mov    -0xfd24c80(,%eax,4),%eax
f0111b4b:	83 ec 0c             	sub    $0xc,%esp
f0111b4e:	50                   	push   %eax
f0111b4f:	e8 5f e3 01 00       	call   f012feb3 <get_block_size>
f0111b54:	83 c4 10             	add    $0x10,%esp
f0111b57:	85 c0                	test   %eax,%eax
f0111b59:	75 1b                	jne    f0111b76 <test_realloc_block_FF+0x65d>
f0111b5b:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111b5e:	40                   	inc    %eax
f0111b5f:	8b 04 85 80 b3 2d f0 	mov    -0xfd24c80(,%eax,4),%eax
f0111b66:	83 ec 0c             	sub    $0xc,%esp
f0111b69:	50                   	push   %eax
f0111b6a:	e8 5a e3 01 00       	call   f012fec9 <is_free_block>
f0111b6f:	83 c4 10             	add    $0x10,%esp
f0111b72:	84 c0                	test   %al,%al
f0111b74:	74 17                	je     f0111b8d <test_realloc_block_FF+0x674>
		{
			is_correct = 0;
f0111b76:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #9.4: WRONG REALLOC! make sure to ZEROing the size & is_free values of the vanishing block.\n");
f0111b7d:	83 ec 0c             	sub    $0xc,%esp
f0111b80:	68 7c 73 13 f0       	push   $0xf013737c
f0111b85:	e8 a7 f2 fe ff       	call   f0100e31 <cprintf>
f0111b8a:	83 c4 10             	add    $0x10,%esp
		}
		//check content of reallocated block
		if (*(startVAs[blockIndex]) != blockIndex || *(midVAs[blockIndex]) != blockIndex ||	*(endVAs[blockIndex]) != blockIndex)
f0111b8d:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111b90:	8b 04 85 80 b3 2d f0 	mov    -0xfd24c80(,%eax,4),%eax
f0111b97:	66 8b 00             	mov    (%eax),%ax
f0111b9a:	98                   	cwtl   
f0111b9b:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f0111b9e:	75 26                	jne    f0111bc6 <test_realloc_block_FF+0x6ad>
f0111ba0:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111ba3:	8b 04 85 80 df 2d f0 	mov    -0xfd22080(,%eax,4),%eax
f0111baa:	66 8b 00             	mov    (%eax),%ax
f0111bad:	98                   	cwtl   
f0111bae:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f0111bb1:	75 13                	jne    f0111bc6 <test_realloc_block_FF+0x6ad>
f0111bb3:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111bb6:	8b 04 85 80 c9 2d f0 	mov    -0xfd23680(,%eax,4),%eax
f0111bbd:	66 8b 00             	mov    (%eax),%ax
f0111bc0:	98                   	cwtl   
f0111bc1:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f0111bc4:	74 1a                	je     f0111be0 <test_realloc_block_FF+0x6c7>
		{
			is_correct = 0;
f0111bc6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #9.5: WRONG REALLOC! content of the block is not correct. Expected %d\n", blockIndex);
f0111bcd:	83 ec 08             	sub    $0x8,%esp
f0111bd0:	ff 75 ac             	pushl  -0x54(%ebp)
f0111bd3:	68 f0 73 13 f0       	push   $0xf01373f0
f0111bd8:	e8 54 f2 fe ff       	call   f0100e31 <cprintf>
f0111bdd:	83 c4 10             	add    $0x10,%esp
		}
	}
	if (is_correct)
f0111be0:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0111be4:	74 04                	je     f0111bea <test_realloc_block_FF+0x6d1>
	{
		eval += 25;
f0111be6:	83 45 f4 19          	addl   $0x19,-0xc(%ebp)
	}

	//[3.2] reallocate in same place (NO relocate - NO split)
	cprintf("	3.2: reallocate in same place (NO relocate - NO split)\n\n") ;
f0111bea:	83 ec 0c             	sub    $0xc,%esp
f0111bed:	68 50 74 13 f0       	push   $0xf0137450
f0111bf2:	e8 3a f2 fe ff       	call   f0100e31 <cprintf>
f0111bf7:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f0111bfa:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	{
		blockIndex = 4*allocCntPerSize - 1 ;
f0111c01:	c7 45 ac 1f 03 00 00 	movl   $0x31f,-0x54(%ebp)
		new_size = allocSizes[3] /*12+16B + 2KB/2*/ + allocSizes[4]/2 /*2KB/2*/ - sizeOfMetaData();
f0111c08:	a1 2c fb 18 f0       	mov    0xf018fb2c,%eax
f0111c0d:	8b 15 30 fb 18 f0    	mov    0xf018fb30,%edx
f0111c13:	d1 ea                	shr    %edx
f0111c15:	01 d0                	add    %edx,%eax
f0111c17:	83 e8 10             	sub    $0x10,%eax
f0111c1a:	89 45 a8             	mov    %eax,-0x58(%ebp)
		va = realloc_block_FF(startVAs[blockIndex], new_size);
f0111c1d:	8b 55 a8             	mov    -0x58(%ebp),%edx
f0111c20:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111c23:	8b 04 85 80 b3 2d f0 	mov    -0xfd24c80(,%eax,4),%eax
f0111c2a:	83 ec 08             	sub    $0x8,%esp
f0111c2d:	52                   	push   %edx
f0111c2e:	50                   	push   %eax
f0111c2f:	e8 ec e8 01 00       	call   f0130520 <realloc_block_FF>
f0111c34:	83 c4 10             	add    $0x10,%esp
f0111c37:	89 45 bc             	mov    %eax,-0x44(%ebp)

		//check return address
		if(va == NULL || (va != startVAs[blockIndex]))
f0111c3a:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f0111c3e:	74 0f                	je     f0111c4f <test_realloc_block_FF+0x736>
f0111c40:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111c43:	8b 04 85 80 b3 2d f0 	mov    -0xfd24c80(,%eax,4),%eax
f0111c4a:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0111c4d:	74 25                	je     f0111c74 <test_realloc_block_FF+0x75b>
		{
			is_correct = 0;
f0111c4f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #10.1: WRONG REALLOC - it return wrong address. Expected %x, Actual %x\n", startVAs[blockIndex] ,va);
f0111c56:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111c59:	8b 04 85 80 b3 2d f0 	mov    -0xfd24c80(,%eax,4),%eax
f0111c60:	83 ec 04             	sub    $0x4,%esp
f0111c63:	ff 75 bc             	pushl  -0x44(%ebp)
f0111c66:	50                   	push   %eax
f0111c67:	68 8c 74 13 f0       	push   $0xf013748c
f0111c6c:	e8 c0 f1 fe ff       	call   f0100e31 <cprintf>
f0111c71:	83 c4 10             	add    $0x10,%esp
		}
		//check reallocated block size & status
		block_size = get_block_size(startVAs[blockIndex]) ;
f0111c74:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111c77:	8b 04 85 80 b3 2d f0 	mov    -0xfd24c80(,%eax,4),%eax
f0111c7e:	83 ec 0c             	sub    $0xc,%esp
f0111c81:	50                   	push   %eax
f0111c82:	e8 2c e2 01 00       	call   f012feb3 <get_block_size>
f0111c87:	83 c4 10             	add    $0x10,%esp
f0111c8a:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		if (block_size != new_size + sizeOfMetaData())
f0111c8d:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0111c90:	8d 50 10             	lea    0x10(%eax),%edx
f0111c93:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0111c96:	39 c2                	cmp    %eax,%edx
f0111c98:	74 21                	je     f0111cbb <test_realloc_block_FF+0x7a2>
		{
			is_correct = 0;
f0111c9a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #10.2: WRONG REALLOC! block size after realloc is not correct. Expected %d, Actual %d\n",new_size + sizeOfMetaData(), block_size);
f0111ca1:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0111ca4:	83 c0 10             	add    $0x10,%eax
f0111ca7:	83 ec 04             	sub    $0x4,%esp
f0111caa:	ff 75 a4             	pushl  -0x5c(%ebp)
f0111cad:	50                   	push   %eax
f0111cae:	68 ec 74 13 f0       	push   $0xf01374ec
f0111cb3:	e8 79 f1 fe ff       	call   f0100e31 <cprintf>
f0111cb8:	83 c4 10             	add    $0x10,%esp
		}
		block_status = is_free_block(startVAs[blockIndex]) ;
f0111cbb:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111cbe:	8b 04 85 80 b3 2d f0 	mov    -0xfd24c80(,%eax,4),%eax
f0111cc5:	83 ec 0c             	sub    $0xc,%esp
f0111cc8:	50                   	push   %eax
f0111cc9:	e8 fb e1 01 00       	call   f012fec9 <is_free_block>
f0111cce:	83 c4 10             	add    $0x10,%esp
f0111cd1:	0f be c0             	movsbl %al,%eax
f0111cd4:	89 45 a0             	mov    %eax,-0x60(%ebp)
		if (block_status != 0)
f0111cd7:	83 7d a0 00          	cmpl   $0x0,-0x60(%ebp)
f0111cdb:	74 17                	je     f0111cf4 <test_realloc_block_FF+0x7db>
		{
			is_correct = 0;
f0111cdd:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #10.3: WRONG REALLOC! block status (is_free) not equal 0 after realloc.\n");
f0111ce4:	83 ec 0c             	sub    $0xc,%esp
f0111ce7:	68 5c 75 13 f0       	push   $0xf013755c
f0111cec:	e8 40 f1 fe ff       	call   f0100e31 <cprintf>
f0111cf1:	83 c4 10             	add    $0x10,%esp
		}
		//check vanishing block (if any)
		if (get_block_size(startVAs[blockIndex+1]) != 0 || is_free_block(startVAs[blockIndex+1]) != 0)
f0111cf4:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111cf7:	40                   	inc    %eax
f0111cf8:	8b 04 85 80 b3 2d f0 	mov    -0xfd24c80(,%eax,4),%eax
f0111cff:	83 ec 0c             	sub    $0xc,%esp
f0111d02:	50                   	push   %eax
f0111d03:	e8 ab e1 01 00       	call   f012feb3 <get_block_size>
f0111d08:	83 c4 10             	add    $0x10,%esp
f0111d0b:	85 c0                	test   %eax,%eax
f0111d0d:	75 1b                	jne    f0111d2a <test_realloc_block_FF+0x811>
f0111d0f:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111d12:	40                   	inc    %eax
f0111d13:	8b 04 85 80 b3 2d f0 	mov    -0xfd24c80(,%eax,4),%eax
f0111d1a:	83 ec 0c             	sub    $0xc,%esp
f0111d1d:	50                   	push   %eax
f0111d1e:	e8 a6 e1 01 00       	call   f012fec9 <is_free_block>
f0111d23:	83 c4 10             	add    $0x10,%esp
f0111d26:	84 c0                	test   %al,%al
f0111d28:	74 17                	je     f0111d41 <test_realloc_block_FF+0x828>
		{
			is_correct = 0;
f0111d2a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #10.4: WRONG REALLOC! make sure to ZEROing the size & is_free values of the vanishing block.\n");
f0111d31:	83 ec 0c             	sub    $0xc,%esp
f0111d34:	68 bc 75 13 f0       	push   $0xf01375bc
f0111d39:	e8 f3 f0 fe ff       	call   f0100e31 <cprintf>
f0111d3e:	83 c4 10             	add    $0x10,%esp
		}
		//check content of reallocated block
		if (*(startVAs[blockIndex]) != blockIndex || *(midVAs[blockIndex]) != blockIndex ||	*(endVAs[blockIndex]) != blockIndex)
f0111d41:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111d44:	8b 04 85 80 b3 2d f0 	mov    -0xfd24c80(,%eax,4),%eax
f0111d4b:	66 8b 00             	mov    (%eax),%ax
f0111d4e:	98                   	cwtl   
f0111d4f:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f0111d52:	75 26                	jne    f0111d7a <test_realloc_block_FF+0x861>
f0111d54:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111d57:	8b 04 85 80 df 2d f0 	mov    -0xfd22080(,%eax,4),%eax
f0111d5e:	66 8b 00             	mov    (%eax),%ax
f0111d61:	98                   	cwtl   
f0111d62:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f0111d65:	75 13                	jne    f0111d7a <test_realloc_block_FF+0x861>
f0111d67:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111d6a:	8b 04 85 80 c9 2d f0 	mov    -0xfd23680(,%eax,4),%eax
f0111d71:	66 8b 00             	mov    (%eax),%ax
f0111d74:	98                   	cwtl   
f0111d75:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f0111d78:	74 1a                	je     f0111d94 <test_realloc_block_FF+0x87b>
		{
			is_correct = 0;
f0111d7a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #10.5: WRONG REALLOC! content of the block is not correct. Expected %d\n", blockIndex);
f0111d81:	83 ec 08             	sub    $0x8,%esp
f0111d84:	ff 75 ac             	pushl  -0x54(%ebp)
f0111d87:	68 30 76 13 f0       	push   $0xf0137630
f0111d8c:	e8 a0 f0 fe ff       	call   f0100e31 <cprintf>
f0111d91:	83 c4 10             	add    $0x10,%esp
		}
	}
	if (is_correct)
f0111d94:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0111d98:	74 04                	je     f0111d9e <test_realloc_block_FF+0x885>
	{
		eval += 25;
f0111d9a:	83 45 f4 19          	addl   $0x19,-0xc(%ebp)
	}

	//[4] Test realloc with decreased sizes
	cprintf("4: Test calling realloc with decreased sizes.[30%]\n\n") ;
f0111d9e:	83 ec 0c             	sub    $0xc,%esp
f0111da1:	68 90 76 13 f0       	push   $0xf0137690
f0111da6:	e8 86 f0 fe ff       	call   f0100e31 <cprintf>
f0111dab:	83 c4 10             	add    $0x10,%esp
	//[4.1] next block is full (NO coalesce)
	cprintf("	4.1: next block is full (NO coalesce)\n\n") ;
f0111dae:	83 ec 0c             	sub    $0xc,%esp
f0111db1:	68 c8 76 13 f0       	push   $0xf01376c8
f0111db6:	e8 76 f0 fe ff       	call   f0100e31 <cprintf>
f0111dbb:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f0111dbe:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	{
		blockIndex = 0*allocCntPerSize + 1; /*4KB*/
f0111dc5:	c7 45 ac 01 00 00 00 	movl   $0x1,-0x54(%ebp)
		old_size = allocSizes[0] /*4KB*/;
f0111dcc:	a1 20 fb 18 f0       	mov    0xf018fb20,%eax
f0111dd1:	89 45 9c             	mov    %eax,-0x64(%ebp)
		new_size = old_size - 1*kilo - sizeOfMetaData();
f0111dd4:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0111dd7:	2d 10 04 00 00       	sub    $0x410,%eax
f0111ddc:	89 45 a8             	mov    %eax,-0x58(%ebp)
		cprintf("REALLOCATE to size %d\n",new_size ) ;
f0111ddf:	83 ec 08             	sub    $0x8,%esp
f0111de2:	ff 75 a8             	pushl  -0x58(%ebp)
f0111de5:	68 f1 76 13 f0       	push   $0xf01376f1
f0111dea:	e8 42 f0 fe ff       	call   f0100e31 <cprintf>
f0111def:	83 c4 10             	add    $0x10,%esp
		va = realloc_block_FF(startVAs[blockIndex], new_size);
f0111df2:	8b 55 a8             	mov    -0x58(%ebp),%edx
f0111df5:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111df8:	8b 04 85 80 b3 2d f0 	mov    -0xfd24c80(,%eax,4),%eax
f0111dff:	83 ec 08             	sub    $0x8,%esp
f0111e02:	52                   	push   %edx
f0111e03:	50                   	push   %eax
f0111e04:	e8 17 e7 01 00       	call   f0130520 <realloc_block_FF>
f0111e09:	83 c4 10             	add    $0x10,%esp
f0111e0c:	89 45 bc             	mov    %eax,-0x44(%ebp)

		//check return address
		if(va == NULL || (va != startVAs[blockIndex]))
f0111e0f:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f0111e13:	74 0f                	je     f0111e24 <test_realloc_block_FF+0x90b>
f0111e15:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111e18:	8b 04 85 80 b3 2d f0 	mov    -0xfd24c80(,%eax,4),%eax
f0111e1f:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0111e22:	74 25                	je     f0111e49 <test_realloc_block_FF+0x930>
		{
			is_correct = 0;
f0111e24:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #14.1: WRONG REALLOC - it return wrong address. Expected %x, Actual %x\n", startVAs[blockIndex] ,va);
f0111e2b:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111e2e:	8b 04 85 80 b3 2d f0 	mov    -0xfd24c80(,%eax,4),%eax
f0111e35:	83 ec 04             	sub    $0x4,%esp
f0111e38:	ff 75 bc             	pushl  -0x44(%ebp)
f0111e3b:	50                   	push   %eax
f0111e3c:	68 08 77 13 f0       	push   $0xf0137708
f0111e41:	e8 eb ef fe ff       	call   f0100e31 <cprintf>
f0111e46:	83 c4 10             	add    $0x10,%esp
		}
		//check reallocated block size & status
		block_size = get_block_size(startVAs[blockIndex]) ;
f0111e49:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111e4c:	8b 04 85 80 b3 2d f0 	mov    -0xfd24c80(,%eax,4),%eax
f0111e53:	83 ec 0c             	sub    $0xc,%esp
f0111e56:	50                   	push   %eax
f0111e57:	e8 57 e0 01 00       	call   f012feb3 <get_block_size>
f0111e5c:	83 c4 10             	add    $0x10,%esp
f0111e5f:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		if (block_size != new_size + sizeOfMetaData())
f0111e62:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0111e65:	8d 50 10             	lea    0x10(%eax),%edx
f0111e68:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0111e6b:	39 c2                	cmp    %eax,%edx
f0111e6d:	74 21                	je     f0111e90 <test_realloc_block_FF+0x977>
		{
			is_correct = 0;
f0111e6f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #14.2: WRONG REALLOC! block size after realloc is not correct. Expected %d, Actual %d\n",new_size + sizeOfMetaData(), block_size);
f0111e76:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0111e79:	83 c0 10             	add    $0x10,%eax
f0111e7c:	83 ec 04             	sub    $0x4,%esp
f0111e7f:	ff 75 a4             	pushl  -0x5c(%ebp)
f0111e82:	50                   	push   %eax
f0111e83:	68 68 77 13 f0       	push   $0xf0137768
f0111e88:	e8 a4 ef fe ff       	call   f0100e31 <cprintf>
f0111e8d:	83 c4 10             	add    $0x10,%esp
		}
		block_status = is_free_block(startVAs[blockIndex]) ;
f0111e90:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111e93:	8b 04 85 80 b3 2d f0 	mov    -0xfd24c80(,%eax,4),%eax
f0111e9a:	83 ec 0c             	sub    $0xc,%esp
f0111e9d:	50                   	push   %eax
f0111e9e:	e8 26 e0 01 00       	call   f012fec9 <is_free_block>
f0111ea3:	83 c4 10             	add    $0x10,%esp
f0111ea6:	0f be c0             	movsbl %al,%eax
f0111ea9:	89 45 a0             	mov    %eax,-0x60(%ebp)
		if (block_status != 0)
f0111eac:	83 7d a0 00          	cmpl   $0x0,-0x60(%ebp)
f0111eb0:	74 17                	je     f0111ec9 <test_realloc_block_FF+0x9b0>
		{
			is_correct = 0;
f0111eb2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #14.3: WRONG REALLOC! block status (is_free) not equal 0 after realloc.\n");
f0111eb9:	83 ec 0c             	sub    $0xc,%esp
f0111ebc:	68 d8 77 13 f0       	push   $0xf01377d8
f0111ec1:	e8 6b ef fe ff       	call   f0100e31 <cprintf>
f0111ec6:	83 c4 10             	add    $0x10,%esp
		}
		//check new free block
		struct BlockMetaData *newBlkMetaData = (struct BlockMetaData *)(va + new_size);
f0111ec9:	8b 55 a8             	mov    -0x58(%ebp),%edx
f0111ecc:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0111ecf:	01 d0                	add    %edx,%eax
f0111ed1:	89 45 98             	mov    %eax,-0x68(%ebp)
		expected_size = 1*kilo ;
f0111ed4:	c7 45 94 00 04 00 00 	movl   $0x400,-0x6c(%ebp)
		if (newBlkMetaData->size != expected_size || newBlkMetaData->is_free != 1)
f0111edb:	8b 45 98             	mov    -0x68(%ebp),%eax
f0111ede:	8b 10                	mov    (%eax),%edx
f0111ee0:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0111ee3:	39 c2                	cmp    %eax,%edx
f0111ee5:	75 0a                	jne    f0111ef1 <test_realloc_block_FF+0x9d8>
f0111ee7:	8b 45 98             	mov    -0x68(%ebp),%eax
f0111eea:	8a 40 04             	mov    0x4(%eax),%al
f0111eed:	3c 01                	cmp    $0x1,%al
f0111eef:	74 20                	je     f0111f11 <test_realloc_block_FF+0x9f8>
		{
			is_correct = 0;
f0111ef1:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #14.4: WRONG REALLOC! newly created block is not correct... check it!. Expected %d, Actual %d\n", expected_size, newBlkMetaData->size);
f0111ef8:	8b 45 98             	mov    -0x68(%ebp),%eax
f0111efb:	8b 00                	mov    (%eax),%eax
f0111efd:	83 ec 04             	sub    $0x4,%esp
f0111f00:	50                   	push   %eax
f0111f01:	ff 75 94             	pushl  -0x6c(%ebp)
f0111f04:	68 38 78 13 f0       	push   $0xf0137838
f0111f09:	e8 23 ef fe ff       	call   f0100e31 <cprintf>
f0111f0e:	83 c4 10             	add    $0x10,%esp
		}
		//check content of reallocated block
		if (*(startVAs[blockIndex]) != blockIndex || *(midVAs[blockIndex]) != blockIndex)
f0111f11:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111f14:	8b 04 85 80 b3 2d f0 	mov    -0xfd24c80(,%eax,4),%eax
f0111f1b:	66 8b 00             	mov    (%eax),%ax
f0111f1e:	98                   	cwtl   
f0111f1f:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f0111f22:	75 13                	jne    f0111f37 <test_realloc_block_FF+0xa1e>
f0111f24:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111f27:	8b 04 85 80 df 2d f0 	mov    -0xfd22080(,%eax,4),%eax
f0111f2e:	66 8b 00             	mov    (%eax),%ax
f0111f31:	98                   	cwtl   
f0111f32:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f0111f35:	74 1a                	je     f0111f51 <test_realloc_block_FF+0xa38>
		{
			is_correct = 0;
f0111f37:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #14.5: WRONG REALLOC! content of the block is not correct. Expected %d\n", blockIndex);
f0111f3e:	83 ec 08             	sub    $0x8,%esp
f0111f41:	ff 75 ac             	pushl  -0x54(%ebp)
f0111f44:	68 b0 78 13 f0       	push   $0xf01378b0
f0111f49:	e8 e3 ee fe ff       	call   f0100e31 <cprintf>
f0111f4e:	83 c4 10             	add    $0x10,%esp
		}

	}
	if (is_correct)
f0111f51:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0111f55:	74 04                	je     f0111f5b <test_realloc_block_FF+0xa42>
		{
			eval += 30;
f0111f57:	83 45 f4 1e          	addl   $0x1e,-0xc(%ebp)
		}


	cprintf("test realloc_block with FIRST FIT completed. Evaluation = %d%\n", eval);
f0111f5b:	83 ec 08             	sub    $0x8,%esp
f0111f5e:	ff 75 f4             	pushl  -0xc(%ebp)
f0111f61:	68 10 79 13 f0       	push   $0xf0137910
f0111f66:	e8 c6 ee fe ff       	call   f0100e31 <cprintf>
f0111f6b:	83 c4 10             	add    $0x10,%esp

}
f0111f6e:	90                   	nop
f0111f6f:	c9                   	leave  
f0111f70:	c3                   	ret    

f0111f71 <test_realloc_block_FF_COMPLETE>:


void test_realloc_block_FF_COMPLETE()
{
f0111f71:	55                   	push   %ebp
f0111f72:	89 e5                	mov    %esp,%ebp
f0111f74:	83 ec 08             	sub    $0x8,%esp
#if USE_KHEAP
	panic("test_free_block: the kernel heap should be disabled. make sure USE_KHEAP = 0");
	return;
#endif

	panic("this is unseen test");
f0111f77:	83 ec 04             	sub    $0x4,%esp
f0111f7a:	68 4f 79 13 f0       	push   $0xf013794f
f0111f7f:	68 c7 05 00 00       	push   $0x5c7
f0111f84:	68 b0 48 13 f0       	push   $0xf01348b0
f0111f89:	e8 22 e2 fe ff       	call   f01001b0 <_panic>

f0111f8e <sys_check_LRU_lists>:
#include <kern/tests/test_working_set.h>
#include <kern/proc/user_environment.h>

//2020
int sys_check_LRU_lists(uint32* active_list_content, uint32* second_list_content, int actual_active_list_size, int actual_second_list_size)
{
f0111f8e:	55                   	push   %ebp
f0111f8f:	89 e5                	mov    %esp,%ebp
f0111f91:	83 ec 30             	sub    $0x30,%esp
	struct Env* env = curenv;
f0111f94:	a1 74 41 25 f0       	mov    0xf0254174,%eax
f0111f99:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int active_list_validation = 1;
f0111f9c:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
	int second_list_validation = 1;
f0111fa3:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
	struct WorkingSetElement* ptr_WS_element;

	//1- Check active list content if not null
	if(active_list_content != NULL)
f0111faa:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0111fae:	0f 84 a5 00 00 00    	je     f0112059 <sys_check_LRU_lists+0xcb>
	{
		int idx_active_list = 0;
f0111fb4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f0111fbb:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0111fbe:	8b 80 44 da 01 00    	mov    0x1da44(%eax),%eax
f0111fc4:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0111fc7:	eb 4a                	jmp    f0112013 <sys_check_LRU_lists+0x85>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) != ROUNDDOWN(active_list_content[idx_active_list], PAGE_SIZE))
f0111fc9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0111fcc:	8b 00                	mov    (%eax),%eax
f0111fce:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0111fd1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0111fd4:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0111fd9:	89 c2                	mov    %eax,%edx
f0111fdb:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0111fde:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f0111fe5:	8b 45 08             	mov    0x8(%ebp),%eax
f0111fe8:	01 c8                	add    %ecx,%eax
f0111fea:	8b 00                	mov    (%eax),%eax
f0111fec:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0111fef:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0111ff2:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0111ff7:	39 c2                	cmp    %eax,%edx
f0111ff9:	74 09                	je     f0112004 <sys_check_LRU_lists+0x76>
			{
				active_list_validation = 0;
f0111ffb:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
				break;
f0112002:	eb 3e                	jmp    f0112042 <sys_check_LRU_lists+0xb4>
			}
			idx_active_list++;
f0112004:	ff 45 f0             	incl   -0x10(%ebp)

	//1- Check active list content if not null
	if(active_list_content != NULL)
	{
		int idx_active_list = 0;
		LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f0112007:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011200a:	8b 80 4c da 01 00    	mov    0x1da4c(%eax),%eax
f0112010:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0112013:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0112017:	74 08                	je     f0112021 <sys_check_LRU_lists+0x93>
f0112019:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011201c:	8b 40 10             	mov    0x10(%eax),%eax
f011201f:	eb 05                	jmp    f0112026 <sys_check_LRU_lists+0x98>
f0112021:	b8 00 00 00 00       	mov    $0x0,%eax
f0112026:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0112029:	89 82 4c da 01 00    	mov    %eax,0x1da4c(%edx)
f011202f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0112032:	8b 80 4c da 01 00    	mov    0x1da4c(%eax),%eax
f0112038:	85 c0                	test   %eax,%eax
f011203a:	75 8d                	jne    f0111fc9 <sys_check_LRU_lists+0x3b>
f011203c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0112040:	75 87                	jne    f0111fc9 <sys_check_LRU_lists+0x3b>
				active_list_validation = 0;
				break;
			}
			idx_active_list++;
		}
		if(LIST_SIZE(&env->ActiveList) != actual_active_list_size)
f0112042:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0112045:	8b 90 50 da 01 00    	mov    0x1da50(%eax),%edx
f011204b:	8b 45 10             	mov    0x10(%ebp),%eax
f011204e:	39 c2                	cmp    %eax,%edx
f0112050:	74 07                	je     f0112059 <sys_check_LRU_lists+0xcb>
		{
			active_list_validation = 0;
f0112052:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

		}
	}

	//2- Check second chance list content if not null
	if(second_list_content != NULL)
f0112059:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f011205d:	0f 84 a5 00 00 00    	je     f0112108 <sys_check_LRU_lists+0x17a>
	{
		int idx_second_list = 0;
f0112063:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
		LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f011206a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011206d:	8b 80 54 da 01 00    	mov    0x1da54(%eax),%eax
f0112073:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0112076:	eb 4a                	jmp    f01120c2 <sys_check_LRU_lists+0x134>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) != ROUNDDOWN(second_list_content[idx_second_list], PAGE_SIZE))
f0112078:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011207b:	8b 00                	mov    (%eax),%eax
f011207d:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0112080:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0112083:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0112088:	89 c2                	mov    %eax,%edx
f011208a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011208d:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f0112094:	8b 45 0c             	mov    0xc(%ebp),%eax
f0112097:	01 c8                	add    %ecx,%eax
f0112099:	8b 00                	mov    (%eax),%eax
f011209b:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011209e:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01120a1:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01120a6:	39 c2                	cmp    %eax,%edx
f01120a8:	74 09                	je     f01120b3 <sys_check_LRU_lists+0x125>
			{
				second_list_validation = 0;
f01120aa:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
				break;
f01120b1:	eb 3e                	jmp    f01120f1 <sys_check_LRU_lists+0x163>
			}
			idx_second_list++;
f01120b3:	ff 45 ec             	incl   -0x14(%ebp)

	//2- Check second chance list content if not null
	if(second_list_content != NULL)
	{
		int idx_second_list = 0;
		LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f01120b6:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01120b9:	8b 80 5c da 01 00    	mov    0x1da5c(%eax),%eax
f01120bf:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01120c2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01120c6:	74 08                	je     f01120d0 <sys_check_LRU_lists+0x142>
f01120c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01120cb:	8b 40 10             	mov    0x10(%eax),%eax
f01120ce:	eb 05                	jmp    f01120d5 <sys_check_LRU_lists+0x147>
f01120d0:	b8 00 00 00 00       	mov    $0x0,%eax
f01120d5:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01120d8:	89 82 5c da 01 00    	mov    %eax,0x1da5c(%edx)
f01120de:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01120e1:	8b 80 5c da 01 00    	mov    0x1da5c(%eax),%eax
f01120e7:	85 c0                	test   %eax,%eax
f01120e9:	75 8d                	jne    f0112078 <sys_check_LRU_lists+0xea>
f01120eb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01120ef:	75 87                	jne    f0112078 <sys_check_LRU_lists+0xea>
				second_list_validation = 0;
				break;
			}
			idx_second_list++;
		}
		if(LIST_SIZE(&env->SecondList) != actual_second_list_size)
f01120f1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01120f4:	8b 90 60 da 01 00    	mov    0x1da60(%eax),%edx
f01120fa:	8b 45 14             	mov    0x14(%ebp),%eax
f01120fd:	39 c2                	cmp    %eax,%edx
f01120ff:	74 07                	je     f0112108 <sys_check_LRU_lists+0x17a>
			second_list_validation = 0;
f0112101:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	}
	return active_list_validation&second_list_validation;
f0112108:	8b 45 fc             	mov    -0x4(%ebp),%eax
f011210b:	23 45 f8             	and    -0x8(%ebp),%eax
}
f011210e:	c9                   	leave  
f011210f:	c3                   	ret    

f0112110 <sys_check_LRU_lists_free>:


//2020
int sys_check_LRU_lists_free(uint32* list_content, int list_size)
{
f0112110:	55                   	push   %ebp
f0112111:	89 e5                	mov    %esp,%ebp
f0112113:	83 ec 30             	sub    $0x30,%esp
	struct Env* env = curenv;
f0112116:	a1 74 41 25 f0       	mov    0xf0254174,%eax
f011211b:	89 45 ec             	mov    %eax,-0x14(%ebp)
	int list_validation_count = 0;
f011211e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	struct WorkingSetElement* ptr_WS_element;

	LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f0112125:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0112128:	8b 80 44 da 01 00    	mov    0x1da44(%eax),%eax
f011212e:	89 45 f8             	mov    %eax,-0x8(%ebp)
f0112131:	eb 65                	jmp    f0112198 <sys_check_LRU_lists_free+0x88>
	{
		for(int var = 0; var < list_size; var++)
f0112133:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011213a:	eb 3a                	jmp    f0112176 <sys_check_LRU_lists_free+0x66>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) == ROUNDDOWN(list_content[var], PAGE_SIZE))
f011213c:	8b 45 f8             	mov    -0x8(%ebp),%eax
f011213f:	8b 00                	mov    (%eax),%eax
f0112141:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0112144:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0112147:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f011214c:	89 c2                	mov    %eax,%edx
f011214e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0112151:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f0112158:	8b 45 08             	mov    0x8(%ebp),%eax
f011215b:	01 c8                	add    %ecx,%eax
f011215d:	8b 00                	mov    (%eax),%eax
f011215f:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0112162:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0112165:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f011216a:	39 c2                	cmp    %eax,%edx
f011216c:	75 05                	jne    f0112173 <sys_check_LRU_lists_free+0x63>
			{
				list_validation_count++;
f011216e:	ff 45 fc             	incl   -0x4(%ebp)
				break;
f0112171:	eb 0b                	jmp    f011217e <sys_check_LRU_lists_free+0x6e>
	int list_validation_count = 0;
	struct WorkingSetElement* ptr_WS_element;

	LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
	{
		for(int var = 0; var < list_size; var++)
f0112173:	ff 45 f4             	incl   -0xc(%ebp)
f0112176:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0112179:	3b 45 0c             	cmp    0xc(%ebp),%eax
f011217c:	7c be                	jl     f011213c <sys_check_LRU_lists_free+0x2c>
			{
				list_validation_count++;
				break;
			}
		}
		if(list_validation_count > 0)
f011217e:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0112182:	7e 08                	jle    f011218c <sys_check_LRU_lists_free+0x7c>
			return list_validation_count;
f0112184:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0112187:	e9 ed 00 00 00       	jmp    f0112279 <sys_check_LRU_lists_free+0x169>
{
	struct Env* env = curenv;
	int list_validation_count = 0;
	struct WorkingSetElement* ptr_WS_element;

	LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f011218c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011218f:	8b 80 4c da 01 00    	mov    0x1da4c(%eax),%eax
f0112195:	89 45 f8             	mov    %eax,-0x8(%ebp)
f0112198:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f011219c:	74 08                	je     f01121a6 <sys_check_LRU_lists_free+0x96>
f011219e:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01121a1:	8b 40 10             	mov    0x10(%eax),%eax
f01121a4:	eb 05                	jmp    f01121ab <sys_check_LRU_lists_free+0x9b>
f01121a6:	b8 00 00 00 00       	mov    $0x0,%eax
f01121ab:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01121ae:	89 82 4c da 01 00    	mov    %eax,0x1da4c(%edx)
f01121b4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01121b7:	8b 80 4c da 01 00    	mov    0x1da4c(%eax),%eax
f01121bd:	85 c0                	test   %eax,%eax
f01121bf:	0f 85 6e ff ff ff    	jne    f0112133 <sys_check_LRU_lists_free+0x23>
f01121c5:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f01121c9:	0f 85 64 ff ff ff    	jne    f0112133 <sys_check_LRU_lists_free+0x23>
		if(list_validation_count > 0)
			return list_validation_count;
	}


	LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f01121cf:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01121d2:	8b 80 54 da 01 00    	mov    0x1da54(%eax),%eax
f01121d8:	89 45 f8             	mov    %eax,-0x8(%ebp)
f01121db:	eb 62                	jmp    f011223f <sys_check_LRU_lists_free+0x12f>
	{
		for(int var = 0; var < list_size; var++)
f01121dd:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01121e4:	eb 3a                	jmp    f0112220 <sys_check_LRU_lists_free+0x110>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) == ROUNDDOWN(list_content[var], PAGE_SIZE))
f01121e6:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01121e9:	8b 00                	mov    (%eax),%eax
f01121eb:	89 45 e8             	mov    %eax,-0x18(%ebp)
f01121ee:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01121f1:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01121f6:	89 c2                	mov    %eax,%edx
f01121f8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01121fb:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f0112202:	8b 45 08             	mov    0x8(%ebp),%eax
f0112205:	01 c8                	add    %ecx,%eax
f0112207:	8b 00                	mov    (%eax),%eax
f0112209:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f011220c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011220f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0112214:	39 c2                	cmp    %eax,%edx
f0112216:	75 05                	jne    f011221d <sys_check_LRU_lists_free+0x10d>
			{
				list_validation_count++;
f0112218:	ff 45 fc             	incl   -0x4(%ebp)
				break;
f011221b:	eb 0b                	jmp    f0112228 <sys_check_LRU_lists_free+0x118>
	}


	LIST_FOREACH(ptr_WS_element, &(env->SecondList))
	{
		for(int var = 0; var < list_size; var++)
f011221d:	ff 45 f0             	incl   -0x10(%ebp)
f0112220:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0112223:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0112226:	7c be                	jl     f01121e6 <sys_check_LRU_lists_free+0xd6>
			{
				list_validation_count++;
				break;
			}
		}
		if(list_validation_count > 0)
f0112228:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f011222c:	7e 05                	jle    f0112233 <sys_check_LRU_lists_free+0x123>
			return list_validation_count;
f011222e:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0112231:	eb 46                	jmp    f0112279 <sys_check_LRU_lists_free+0x169>
		if(list_validation_count > 0)
			return list_validation_count;
	}


	LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f0112233:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0112236:	8b 80 5c da 01 00    	mov    0x1da5c(%eax),%eax
f011223c:	89 45 f8             	mov    %eax,-0x8(%ebp)
f011223f:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f0112243:	74 08                	je     f011224d <sys_check_LRU_lists_free+0x13d>
f0112245:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0112248:	8b 40 10             	mov    0x10(%eax),%eax
f011224b:	eb 05                	jmp    f0112252 <sys_check_LRU_lists_free+0x142>
f011224d:	b8 00 00 00 00       	mov    $0x0,%eax
f0112252:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0112255:	89 82 5c da 01 00    	mov    %eax,0x1da5c(%edx)
f011225b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011225e:	8b 80 5c da 01 00    	mov    0x1da5c(%eax),%eax
f0112264:	85 c0                	test   %eax,%eax
f0112266:	0f 85 71 ff ff ff    	jne    f01121dd <sys_check_LRU_lists_free+0xcd>
f011226c:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f0112270:	0f 85 67 ff ff ff    	jne    f01121dd <sys_check_LRU_lists_free+0xcd>
			return list_validation_count;

	}


	return list_validation_count;
f0112276:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f0112279:	c9                   	leave  
f011227a:	c3                   	ret    

f011227b <sys_check_WS_list>:

//2023
int sys_check_WS_list(uint32* WS_list_content, int actual_WS_list_size, uint32 last_WS_element_content, bool chk_in_order)
{
f011227b:	55                   	push   %ebp
f011227c:	89 e5                	mov    %esp,%ebp
f011227e:	83 ec 08             	sub    $0x8,%esp
			}
		}
	}
	return WS_list_validation;
#else
	panic("sys_check_WS_list: this function is intended to be used when USE_KHEAP = 1");
f0112281:	83 ec 04             	sub    $0x4,%esp
f0112284:	68 64 79 13 f0       	push   $0xf0137964
f0112289:	68 9c 00 00 00       	push   $0x9c
f011228e:	68 af 79 13 f0       	push   $0xf01379af
f0112293:	e8 18 df fe ff       	call   f01001b0 <_panic>

f0112298 <TestAutoCompleteCommand>:
int CP(uint32* pd, uint32 va, uint32 ps, uint32 pc);
int CA(uint32 *ptr_dir, uint32 va);
int CPs(uint32 *ptr_dir, uint32 va, uint32 perms, uint32 which);
int CCP(uint32 *ptr_dir, uint32 ptr1, uint32 ptr2, uint32 size, int ref, uint32 dst_perms, uint32 dst_to_chk, uint32 src_perms, uint32 src_to_chk, uint8 chk_type);
int TestAutoCompleteCommand()
{
f0112298:	55                   	push   %ebp
f0112299:	89 e5                	mov    %esp,%ebp
f011229b:	57                   	push   %edi
f011229c:	56                   	push   %esi
f011229d:	53                   	push   %ebx
f011229e:	81 ec ac 01 00 00    	sub    $0x1ac,%esp
	cprintf("Automatic Testing of Autocomplete:\n");
f01122a4:	83 ec 0c             	sub    $0xc,%esp
f01122a7:	68 d0 79 13 f0       	push   $0xf01379d0
f01122ac:	e8 80 eb fe ff       	call   f0100e31 <cprintf>
f01122b1:	83 c4 10             	add    $0x10,%esp
	cprintf("\n========================\n");
f01122b4:	83 ec 0c             	sub    $0xc,%esp
f01122b7:	68 f4 79 13 f0       	push   $0xf01379f4
f01122bc:	e8 70 eb fe ff       	call   f0100e31 <cprintf>
f01122c1:	83 c4 10             	add    $0x10,%esp
	//	cprintf("========================\n");
	//	cprintf("Q2 Test: manually try the test cases in the doc. \n..."
	//			"OR, you can do it automatically by un-commenting the code in this function, it should output the same results in the Examples exist in the MS1 ppt\n");
	//
	//	int retValue = 0;
	int i = 0;
f01122c4:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	//CASE1:
	//should execute the kernel_info command
	cprintf("==>Testing now AUTOCOMPLETE for: kernel_info\n");
f01122cb:	83 ec 0c             	sub    $0xc,%esp
f01122ce:	68 10 7a 13 f0       	push   $0xf0137a10
f01122d3:	e8 59 eb fe ff       	call   f0100e31 <cprintf>
f01122d8:	83 c4 10             	add    $0x10,%esp
	char cr0[100] = "kernel_info";
f01122db:	8d 45 80             	lea    -0x80(%ebp),%eax
f01122de:	bb ca 7a 13 f0       	mov    $0xf0137aca,%ebx
f01122e3:	ba 03 00 00 00       	mov    $0x3,%edx
f01122e8:	89 c7                	mov    %eax,%edi
f01122ea:	89 de                	mov    %ebx,%esi
f01122ec:	89 d1                	mov    %edx,%ecx
f01122ee:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f01122f0:	8d 55 8c             	lea    -0x74(%ebp),%edx
f01122f3:	b9 16 00 00 00       	mov    $0x16,%ecx
f01122f8:	b8 00 00 00 00       	mov    $0x0,%eax
f01122fd:	89 d7                	mov    %edx,%edi
f01122ff:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr0) ;
f0112301:	83 ec 0c             	sub    $0xc,%esp
f0112304:	8d 45 80             	lea    -0x80(%ebp),%eax
f0112307:	50                   	push   %eax
f0112308:	e8 b6 f8 fe ff       	call   f0101bc3 <execute_command>
f011230d:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f0112310:	83 ec 0c             	sub    $0xc,%esp
f0112313:	68 3e 7a 13 f0       	push   $0xf0137a3e
f0112318:	e8 14 eb fe ff       	call   f0100e31 <cprintf>
f011231d:	83 c4 10             	add    $0x10,%esp

	//CASE2: should print the commands that start with he ---> Shall print (help)
	cprintf("==>Testing now AUTOCOMPLETE for: he\n");
f0112320:	83 ec 0c             	sub    $0xc,%esp
f0112323:	68 54 7a 13 f0       	push   $0xf0137a54
f0112328:	e8 04 eb fe ff       	call   f0100e31 <cprintf>
f011232d:	83 c4 10             	add    $0x10,%esp
	char cr2[100] = "he";
f0112330:	c7 85 1c ff ff ff 68 	movl   $0x6568,-0xe4(%ebp)
f0112337:	65 00 00 
f011233a:	8d 95 20 ff ff ff    	lea    -0xe0(%ebp),%edx
f0112340:	b9 18 00 00 00       	mov    $0x18,%ecx
f0112345:	b8 00 00 00 00       	mov    $0x0,%eax
f011234a:	89 d7                	mov    %edx,%edi
f011234c:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr2) ;
f011234e:	83 ec 0c             	sub    $0xc,%esp
f0112351:	8d 85 1c ff ff ff    	lea    -0xe4(%ebp),%eax
f0112357:	50                   	push   %eax
f0112358:	e8 66 f8 fe ff       	call   f0101bc3 <execute_command>
f011235d:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f0112360:	83 ec 0c             	sub    $0xc,%esp
f0112363:	68 3e 7a 13 f0       	push   $0xf0137a3e
f0112368:	e8 c4 ea fe ff       	call   f0100e31 <cprintf>
f011236d:	83 c4 10             	add    $0x10,%esp


	//CASE3: should print the commands that start with ru ---> Shall print (rum, rub, rut, run, runall) .. Each in a separate line
	cprintf("==>Testing now AUTOCOMPLETE for: ru\n");
f0112370:	83 ec 0c             	sub    $0xc,%esp
f0112373:	68 7c 7a 13 f0       	push   $0xf0137a7c
f0112378:	e8 b4 ea fe ff       	call   f0100e31 <cprintf>
f011237d:	83 c4 10             	add    $0x10,%esp
	char cr3[100] = "ru";
f0112380:	c7 85 b8 fe ff ff 72 	movl   $0x7572,-0x148(%ebp)
f0112387:	75 00 00 
f011238a:	8d 95 bc fe ff ff    	lea    -0x144(%ebp),%edx
f0112390:	b9 18 00 00 00       	mov    $0x18,%ecx
f0112395:	b8 00 00 00 00       	mov    $0x0,%eax
f011239a:	89 d7                	mov    %edx,%edi
f011239c:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr3) ;
f011239e:	83 ec 0c             	sub    $0xc,%esp
f01123a1:	8d 85 b8 fe ff ff    	lea    -0x148(%ebp),%eax
f01123a7:	50                   	push   %eax
f01123a8:	e8 16 f8 fe ff       	call   f0101bc3 <execute_command>
f01123ad:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f01123b0:	83 ec 0c             	sub    $0xc,%esp
f01123b3:	68 3e 7a 13 f0       	push   $0xf0137a3e
f01123b8:	e8 74 ea fe ff       	call   f0100e31 <cprintf>
f01123bd:	83 c4 10             	add    $0x10,%esp

	//CASE4: should print unknown command
	cprintf("==>Testing now AUTOCOMPLETE for: smm\n");
f01123c0:	83 ec 0c             	sub    $0xc,%esp
f01123c3:	68 a4 7a 13 f0       	push   $0xf0137aa4
f01123c8:	e8 64 ea fe ff       	call   f0100e31 <cprintf>
f01123cd:	83 c4 10             	add    $0x10,%esp
	char cr4[100] = "smm";
f01123d0:	c7 85 54 fe ff ff 73 	movl   $0x6d6d73,-0x1ac(%ebp)
f01123d7:	6d 6d 00 
f01123da:	8d 95 58 fe ff ff    	lea    -0x1a8(%ebp),%edx
f01123e0:	b9 18 00 00 00       	mov    $0x18,%ecx
f01123e5:	b8 00 00 00 00       	mov    $0x0,%eax
f01123ea:	89 d7                	mov    %edx,%edi
f01123ec:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr4) ;
f01123ee:	83 ec 0c             	sub    $0xc,%esp
f01123f1:	8d 85 54 fe ff ff    	lea    -0x1ac(%ebp),%eax
f01123f7:	50                   	push   %eax
f01123f8:	e8 c6 f7 fe ff       	call   f0101bc3 <execute_command>
f01123fd:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f0112400:	83 ec 0c             	sub    $0xc,%esp
f0112403:	68 3e 7a 13 f0       	push   $0xf0137a3e
f0112408:	e8 24 ea fe ff       	call   f0100e31 <cprintf>
f011240d:	83 c4 10             	add    $0x10,%esp
	return 0;
f0112410:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0112415:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0112418:	5b                   	pop    %ebx
f0112419:	5e                   	pop    %esi
f011241a:	5f                   	pop    %edi
f011241b:	5d                   	pop    %ebp
f011241c:	c3                   	ret    

f011241d <test_pt_set_page_permissions>:

//=====================================
// 1) TEST SET/CLEAR PAGE PERMISSIONS:
//=====================================
int test_pt_set_page_permissions()
{
f011241d:	55                   	push   %ebp
f011241e:	89 e5                	mov    %esp,%ebp
f0112420:	83 ec 18             	sub    $0x18,%esp
	//Case 1: Check setting a permission
	uint32 va = 0xEF800000;
f0112423:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	uint32 permissions_to_set = PERM_PRESENT;
f011242a:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	uint32 permissions_to_clear = 0;
f0112431:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0112438:	a1 30 ce 2b f0       	mov    0xf02bce30,%eax
f011243d:	ff 75 ec             	pushl  -0x14(%ebp)
f0112440:	ff 75 f0             	pushl  -0x10(%ebp)
f0112443:	ff 75 f4             	pushl  -0xc(%ebp)
f0112446:	50                   	push   %eax
f0112447:	e8 4a 60 ff ff       	call   f0108496 <pt_set_page_permissions>
f011244c:	83 c4 10             	add    $0x10,%esp
	int ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f011244f:	a1 30 ce 2b f0       	mov    0xf02bce30,%eax
f0112454:	ff 75 ec             	pushl  -0x14(%ebp)
f0112457:	ff 75 f0             	pushl  -0x10(%ebp)
f011245a:	ff 75 f4             	pushl  -0xc(%ebp)
f011245d:	50                   	push   %eax
f011245e:	e8 b8 4d 00 00       	call   f011721b <CP>
f0112463:	83 c4 10             	add    $0x10,%esp
f0112466:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0112469:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f011246d:	74 14                	je     f0112483 <test_pt_set_page_permissions+0x66>
	{
		panic("[EVAL] #1 Set Permission Failed.\n");
f011246f:	83 ec 04             	sub    $0x4,%esp
f0112472:	68 30 7b 13 f0       	push   $0xf0137b30
f0112477:	6a 5a                	push   $0x5a
f0112479:	68 52 7b 13 f0       	push   $0xf0137b52
f011247e:	e8 2d dd fe ff       	call   f01001b0 <_panic>
	}

	//Case 2: Check setting MORE THAN ONE permission
	va = 0xEF801000;
f0112483:	c7 45 f4 00 10 80 ef 	movl   $0xef801000,-0xc(%ebp)
	permissions_to_set = PERM_MODIFIED|PERM_USER;
f011248a:	c7 45 f0 44 00 00 00 	movl   $0x44,-0x10(%ebp)
	permissions_to_clear = 0;
f0112491:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0112498:	a1 30 ce 2b f0       	mov    0xf02bce30,%eax
f011249d:	ff 75 ec             	pushl  -0x14(%ebp)
f01124a0:	ff 75 f0             	pushl  -0x10(%ebp)
f01124a3:	ff 75 f4             	pushl  -0xc(%ebp)
f01124a6:	50                   	push   %eax
f01124a7:	e8 ea 5f ff ff       	call   f0108496 <pt_set_page_permissions>
f01124ac:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f01124af:	a1 30 ce 2b f0       	mov    0xf02bce30,%eax
f01124b4:	ff 75 ec             	pushl  -0x14(%ebp)
f01124b7:	ff 75 f0             	pushl  -0x10(%ebp)
f01124ba:	ff 75 f4             	pushl  -0xc(%ebp)
f01124bd:	50                   	push   %eax
f01124be:	e8 58 4d 00 00       	call   f011721b <CP>
f01124c3:	83 c4 10             	add    $0x10,%esp
f01124c6:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f01124c9:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f01124cd:	74 14                	je     f01124e3 <test_pt_set_page_permissions+0xc6>
	{
		panic("[EVAL] #2 Set Permission Failed.\n");
f01124cf:	83 ec 04             	sub    $0x4,%esp
f01124d2:	68 70 7b 13 f0       	push   $0xf0137b70
f01124d7:	6a 66                	push   $0x66
f01124d9:	68 52 7b 13 f0       	push   $0xf0137b52
f01124de:	e8 cd dc fe ff       	call   f01001b0 <_panic>
	}

	va = 0xEF800000;
f01124e3:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	permissions_to_set = PERM_MODIFIED|PERM_USER|PERM_USED|PERM_PRESENT;
f01124ea:	c7 45 f0 65 00 00 00 	movl   $0x65,-0x10(%ebp)
	permissions_to_clear = 0;
f01124f1:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f01124f8:	a1 30 ce 2b f0       	mov    0xf02bce30,%eax
f01124fd:	ff 75 ec             	pushl  -0x14(%ebp)
f0112500:	ff 75 f0             	pushl  -0x10(%ebp)
f0112503:	ff 75 f4             	pushl  -0xc(%ebp)
f0112506:	50                   	push   %eax
f0112507:	e8 8a 5f ff ff       	call   f0108496 <pt_set_page_permissions>
f011250c:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f011250f:	a1 30 ce 2b f0       	mov    0xf02bce30,%eax
f0112514:	ff 75 ec             	pushl  -0x14(%ebp)
f0112517:	ff 75 f0             	pushl  -0x10(%ebp)
f011251a:	ff 75 f4             	pushl  -0xc(%ebp)
f011251d:	50                   	push   %eax
f011251e:	e8 f8 4c 00 00       	call   f011721b <CP>
f0112523:	83 c4 10             	add    $0x10,%esp
f0112526:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0112529:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f011252d:	74 14                	je     f0112543 <test_pt_set_page_permissions+0x126>
	{
		panic("[EVAL] #3 Set Permission Failed.\n");
f011252f:	83 ec 04             	sub    $0x4,%esp
f0112532:	68 94 7b 13 f0       	push   $0xf0137b94
f0112537:	6a 71                	push   $0x71
f0112539:	68 52 7b 13 f0       	push   $0xf0137b52
f011253e:	e8 6d dc fe ff       	call   f01001b0 <_panic>
	}

	//Case 3: Check clearing a permission
	va = 0xF0000000;
f0112543:	c7 45 f4 00 00 00 f0 	movl   $0xf0000000,-0xc(%ebp)
	permissions_to_set = 0;
f011254a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	permissions_to_clear = PERM_PRESENT;
f0112551:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0112558:	a1 30 ce 2b f0       	mov    0xf02bce30,%eax
f011255d:	ff 75 ec             	pushl  -0x14(%ebp)
f0112560:	ff 75 f0             	pushl  -0x10(%ebp)
f0112563:	ff 75 f4             	pushl  -0xc(%ebp)
f0112566:	50                   	push   %eax
f0112567:	e8 2a 5f ff ff       	call   f0108496 <pt_set_page_permissions>
f011256c:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f011256f:	a1 30 ce 2b f0       	mov    0xf02bce30,%eax
f0112574:	ff 75 ec             	pushl  -0x14(%ebp)
f0112577:	ff 75 f0             	pushl  -0x10(%ebp)
f011257a:	ff 75 f4             	pushl  -0xc(%ebp)
f011257d:	50                   	push   %eax
f011257e:	e8 98 4c 00 00       	call   f011721b <CP>
f0112583:	83 c4 10             	add    $0x10,%esp
f0112586:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0112589:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f011258d:	74 14                	je     f01125a3 <test_pt_set_page_permissions+0x186>
	{
		panic("[EVAL] #4 Clear Permission Failed.\n");
f011258f:	83 ec 04             	sub    $0x4,%esp
f0112592:	68 b8 7b 13 f0       	push   $0xf0137bb8
f0112597:	6a 7d                	push   $0x7d
f0112599:	68 52 7b 13 f0       	push   $0xf0137b52
f011259e:	e8 0d dc fe ff       	call   f01001b0 <_panic>
	}

	//Case 4: Check clearing MORE THAN ONE permission
	va = 0xEF800000;
f01125a3:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	permissions_to_set = 0;
f01125aa:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	permissions_to_clear = PERM_MODIFIED|PERM_USER;
f01125b1:	c7 45 ec 44 00 00 00 	movl   $0x44,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f01125b8:	a1 30 ce 2b f0       	mov    0xf02bce30,%eax
f01125bd:	ff 75 ec             	pushl  -0x14(%ebp)
f01125c0:	ff 75 f0             	pushl  -0x10(%ebp)
f01125c3:	ff 75 f4             	pushl  -0xc(%ebp)
f01125c6:	50                   	push   %eax
f01125c7:	e8 ca 5e ff ff       	call   f0108496 <pt_set_page_permissions>
f01125cc:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f01125cf:	a1 30 ce 2b f0       	mov    0xf02bce30,%eax
f01125d4:	ff 75 ec             	pushl  -0x14(%ebp)
f01125d7:	ff 75 f0             	pushl  -0x10(%ebp)
f01125da:	ff 75 f4             	pushl  -0xc(%ebp)
f01125dd:	50                   	push   %eax
f01125de:	e8 38 4c 00 00       	call   f011721b <CP>
f01125e3:	83 c4 10             	add    $0x10,%esp
f01125e6:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f01125e9:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f01125ed:	74 17                	je     f0112606 <test_pt_set_page_permissions+0x1e9>
	{
		panic("[EVAL] #5 Clear Permission Failed.\n");
f01125ef:	83 ec 04             	sub    $0x4,%esp
f01125f2:	68 dc 7b 13 f0       	push   $0xf0137bdc
f01125f7:	68 89 00 00 00       	push   $0x89
f01125fc:	68 52 7b 13 f0       	push   $0xf0137b52
f0112601:	e8 aa db fe ff       	call   f01001b0 <_panic>
	}

	//Case 5: Check settiing & clearing MORE THAN ONE permission together
	va = 0xF0001000;
f0112606:	c7 45 f4 00 10 00 f0 	movl   $0xf0001000,-0xc(%ebp)
	permissions_to_set = PERM_USER|PERM_BUFFERED;
f011260d:	c7 45 f0 04 02 00 00 	movl   $0x204,-0x10(%ebp)
	permissions_to_clear = PERM_WRITEABLE|PERM_USED|PERM_MODIFIED;
f0112614:	c7 45 ec 62 00 00 00 	movl   $0x62,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f011261b:	a1 30 ce 2b f0       	mov    0xf02bce30,%eax
f0112620:	ff 75 ec             	pushl  -0x14(%ebp)
f0112623:	ff 75 f0             	pushl  -0x10(%ebp)
f0112626:	ff 75 f4             	pushl  -0xc(%ebp)
f0112629:	50                   	push   %eax
f011262a:	e8 67 5e ff ff       	call   f0108496 <pt_set_page_permissions>
f011262f:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0112632:	a1 30 ce 2b f0       	mov    0xf02bce30,%eax
f0112637:	ff 75 ec             	pushl  -0x14(%ebp)
f011263a:	ff 75 f0             	pushl  -0x10(%ebp)
f011263d:	ff 75 f4             	pushl  -0xc(%ebp)
f0112640:	50                   	push   %eax
f0112641:	e8 d5 4b 00 00       	call   f011721b <CP>
f0112646:	83 c4 10             	add    $0x10,%esp
f0112649:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f011264c:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0112650:	74 17                	je     f0112669 <test_pt_set_page_permissions+0x24c>
	{
		panic("[EVAL] #6 Set & Clear Permission Failed.\n");
f0112652:	83 ec 04             	sub    $0x4,%esp
f0112655:	68 00 7c 13 f0       	push   $0xf0137c00
f011265a:	68 95 00 00 00       	push   $0x95
f011265f:	68 52 7b 13 f0       	push   $0xf0137b52
f0112664:	e8 47 db fe ff       	call   f01001b0 <_panic>
	}

	cprintf("Congratulations!! test pt_set&clear_page_permissions completed successfully.\n");
f0112669:	83 ec 0c             	sub    $0xc,%esp
f011266c:	68 2c 7c 13 f0       	push   $0xf0137c2c
f0112671:	e8 bb e7 fe ff       	call   f0100e31 <cprintf>
f0112676:	83 c4 10             	add    $0x10,%esp
	return 0;
f0112679:	b8 00 00 00 00       	mov    $0x0,%eax
}
f011267e:	c9                   	leave  
f011267f:	c3                   	ret    

f0112680 <test_pt_set_page_permissions_invalid_va>:

int test_pt_set_page_permissions_invalid_va()
{
f0112680:	55                   	push   %ebp
f0112681:	89 e5                	mov    %esp,%ebp
f0112683:	83 ec 18             	sub    $0x18,%esp
	uint32 va = 0x0;
f0112686:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 permissions_to_set = PERM_PRESENT;
f011268d:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	uint32 permissions_to_clear = 0;
f0112694:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f011269b:	a1 30 ce 2b f0       	mov    0xf02bce30,%eax
f01126a0:	ff 75 ec             	pushl  -0x14(%ebp)
f01126a3:	ff 75 f0             	pushl  -0x10(%ebp)
f01126a6:	ff 75 f4             	pushl  -0xc(%ebp)
f01126a9:	50                   	push   %eax
f01126aa:	e8 e7 5d ff ff       	call   f0108496 <pt_set_page_permissions>
f01126af:	83 c4 10             	add    $0x10,%esp
	panic("WRONG PANIC - This test shall panic with your error message. Check handling setting permissions of an invalid virtual address with non existing page table.");
f01126b2:	83 ec 04             	sub    $0x4,%esp
f01126b5:	68 7c 7c 13 f0       	push   $0xf0137c7c
f01126ba:	68 a2 00 00 00       	push   $0xa2
f01126bf:	68 52 7b 13 f0       	push   $0xf0137b52
f01126c4:	e8 e7 da fe ff       	call   f01001b0 <_panic>

f01126c9 <test_pt_get_page_permissions>:

//=====================================
// 2) TEST GET PAGE PERMISSIONS:
//=====================================
int test_pt_get_page_permissions()
{
f01126c9:	55                   	push   %ebp
f01126ca:	89 e5                	mov    %esp,%ebp
f01126cc:	83 ec 18             	sub    $0x18,%esp
	//Case 1: Check getting a permission of a non existing VA with NO table
	uint32 va = 0xeebfe000;
f01126cf:	c7 45 f4 00 e0 bf ee 	movl   $0xeebfe000,-0xc(%ebp)
	int ret = pt_get_page_permissions(ptr_page_directory, va);
f01126d6:	a1 30 ce 2b f0       	mov    0xf02bce30,%eax
f01126db:	83 ec 08             	sub    $0x8,%esp
f01126de:	ff 75 f4             	pushl  -0xc(%ebp)
f01126e1:	50                   	push   %eax
f01126e2:	e8 73 5e ff ff       	call   f010855a <pt_get_page_permissions>
f01126e7:	83 c4 10             	add    $0x10,%esp
f01126ea:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != -1)
f01126ed:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
f01126f1:	74 17                	je     f011270a <test_pt_get_page_permissions+0x41>
	{
		panic("[EVAL] #1 Get Permission Failed.\n");
f01126f3:	83 ec 04             	sub    $0x4,%esp
f01126f6:	68 18 7d 13 f0       	push   $0xf0137d18
f01126fb:	68 b0 00 00 00       	push   $0xb0
f0112700:	68 52 7b 13 f0       	push   $0xf0137b52
f0112705:	e8 a6 da fe ff       	call   f01001b0 <_panic>
	}

	//Case 2: Check getting a permission of a non existing VA with an existing table
	va = 0xEF800000;
f011270a:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f0112711:	a1 30 ce 2b f0       	mov    0xf02bce30,%eax
f0112716:	83 ec 08             	sub    $0x8,%esp
f0112719:	ff 75 f4             	pushl  -0xc(%ebp)
f011271c:	50                   	push   %eax
f011271d:	e8 38 5e ff ff       	call   f010855a <pt_get_page_permissions>
f0112722:	83 c4 10             	add    $0x10,%esp
f0112725:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 0)
f0112728:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f011272c:	74 17                	je     f0112745 <test_pt_get_page_permissions+0x7c>
	{
		panic("[EVAL] #2 Get Permission Failed.\n");
f011272e:	83 ec 04             	sub    $0x4,%esp
f0112731:	68 3c 7d 13 f0       	push   $0xf0137d3c
f0112736:	68 b8 00 00 00       	push   $0xb8
f011273b:	68 52 7b 13 f0       	push   $0xf0137b52
f0112740:	e8 6b da fe ff       	call   f01001b0 <_panic>
	}

	//Case 3: Check getting a permission of an existing VA with an existing table
	va = 0xf0000000;
f0112745:	c7 45 f4 00 00 00 f0 	movl   $0xf0000000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f011274c:	a1 30 ce 2b f0       	mov    0xf02bce30,%eax
f0112751:	83 ec 08             	sub    $0x8,%esp
f0112754:	ff 75 f4             	pushl  -0xc(%ebp)
f0112757:	50                   	push   %eax
f0112758:	e8 fd 5d ff ff       	call   f010855a <pt_get_page_permissions>
f011275d:	83 c4 10             	add    $0x10,%esp
f0112760:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 3)
f0112763:	83 7d f0 03          	cmpl   $0x3,-0x10(%ebp)
f0112767:	74 17                	je     f0112780 <test_pt_get_page_permissions+0xb7>
	{
		panic("[EVAL] #3 Get Permission Failed.\n");
f0112769:	83 ec 04             	sub    $0x4,%esp
f011276c:	68 60 7d 13 f0       	push   $0xf0137d60
f0112771:	68 c0 00 00 00       	push   $0xc0
f0112776:	68 52 7b 13 f0       	push   $0xf0137b52
f011277b:	e8 30 da fe ff       	call   f01001b0 <_panic>
	}

	va = 0xF1000000;
f0112780:	c7 45 f4 00 00 00 f1 	movl   $0xf1000000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f0112787:	a1 30 ce 2b f0       	mov    0xf02bce30,%eax
f011278c:	83 ec 08             	sub    $0x8,%esp
f011278f:	ff 75 f4             	pushl  -0xc(%ebp)
f0112792:	50                   	push   %eax
f0112793:	e8 c2 5d ff ff       	call   f010855a <pt_get_page_permissions>
f0112798:	83 c4 10             	add    $0x10,%esp
f011279b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 3)
f011279e:	83 7d f0 03          	cmpl   $0x3,-0x10(%ebp)
f01127a2:	74 17                	je     f01127bb <test_pt_get_page_permissions+0xf2>
	{
		panic("[EVAL] #4 Get Permission Failed.\n");
f01127a4:	83 ec 04             	sub    $0x4,%esp
f01127a7:	68 84 7d 13 f0       	push   $0xf0137d84
f01127ac:	68 c7 00 00 00       	push   $0xc7
f01127b1:	68 52 7b 13 f0       	push   $0xf0137b52
f01127b6:	e8 f5 d9 fe ff       	call   f01001b0 <_panic>
	}

	va = 0xF0001000;
f01127bb:	c7 45 f4 00 10 00 f0 	movl   $0xf0001000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f01127c2:	a1 30 ce 2b f0       	mov    0xf02bce30,%eax
f01127c7:	83 ec 08             	sub    $0x8,%esp
f01127ca:	ff 75 f4             	pushl  -0xc(%ebp)
f01127cd:	50                   	push   %eax
f01127ce:	e8 87 5d ff ff       	call   f010855a <pt_get_page_permissions>
f01127d3:	83 c4 10             	add    $0x10,%esp
f01127d6:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 99)
f01127d9:	83 7d f0 63          	cmpl   $0x63,-0x10(%ebp)
f01127dd:	74 17                	je     f01127f6 <test_pt_get_page_permissions+0x12d>
	{
		panic("[EVAL] #5 Get Permission Failed.\n");
f01127df:	83 ec 04             	sub    $0x4,%esp
f01127e2:	68 a8 7d 13 f0       	push   $0xf0137da8
f01127e7:	68 ce 00 00 00       	push   $0xce
f01127ec:	68 52 7b 13 f0       	push   $0xf0137b52
f01127f1:	e8 ba d9 fe ff       	call   f01001b0 <_panic>
	}
	cprintf("Congratulations!! test pt_get_page_permissions completed successfully.\n");
f01127f6:	83 ec 0c             	sub    $0xc,%esp
f01127f9:	68 cc 7d 13 f0       	push   $0xf0137dcc
f01127fe:	e8 2e e6 fe ff       	call   f0100e31 <cprintf>
f0112803:	83 c4 10             	add    $0x10,%esp
	return 0;
f0112806:	b8 00 00 00 00       	mov    $0x0,%eax
}
f011280b:	c9                   	leave  
f011280c:	c3                   	ret    

f011280d <test_pt_clear_page_table_entry>:

//=====================================
// 3) TEST CLEAR PAGE TABLE ENTRY:
//=====================================
int test_pt_clear_page_table_entry()
{
f011280d:	55                   	push   %ebp
f011280e:	89 e5                	mov    %esp,%ebp
f0112810:	83 ec 18             	sub    $0x18,%esp
	uint32 va = 0xF1000000;
f0112813:	c7 45 f4 00 00 00 f1 	movl   $0xf1000000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f011281a:	a1 30 ce 2b f0       	mov    0xf02bce30,%eax
f011281f:	83 ec 08             	sub    $0x8,%esp
f0112822:	ff 75 f4             	pushl  -0xc(%ebp)
f0112825:	50                   	push   %eax
f0112826:	e8 78 5d ff ff       	call   f01085a3 <pt_clear_page_table_entry>
f011282b:	83 c4 10             	add    $0x10,%esp
	int ret = CE(ptr_page_directory, va);
f011282e:	a1 30 ce 2b f0       	mov    0xf02bce30,%eax
f0112833:	83 ec 08             	sub    $0x8,%esp
f0112836:	ff 75 f4             	pushl  -0xc(%ebp)
f0112839:	50                   	push   %eax
f011283a:	e8 38 49 00 00       	call   f0117177 <CE>
f011283f:	83 c4 10             	add    $0x10,%esp
f0112842:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f0112845:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f0112849:	74 17                	je     f0112862 <test_pt_clear_page_table_entry+0x55>
	{
		panic("[EVAL] #1 Clear Page Table Entry Failed.\n");
f011284b:	83 ec 04             	sub    $0x4,%esp
f011284e:	68 14 7e 13 f0       	push   $0xf0137e14
f0112853:	68 de 00 00 00       	push   $0xde
f0112858:	68 52 7b 13 f0       	push   $0xf0137b52
f011285d:	e8 4e d9 fe ff       	call   f01001b0 <_panic>
	}

	va = 0xF0001000;
f0112862:	c7 45 f4 00 10 00 f0 	movl   $0xf0001000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f0112869:	a1 30 ce 2b f0       	mov    0xf02bce30,%eax
f011286e:	83 ec 08             	sub    $0x8,%esp
f0112871:	ff 75 f4             	pushl  -0xc(%ebp)
f0112874:	50                   	push   %eax
f0112875:	e8 29 5d ff ff       	call   f01085a3 <pt_clear_page_table_entry>
f011287a:	83 c4 10             	add    $0x10,%esp
	ret = CE(ptr_page_directory, va);
f011287d:	a1 30 ce 2b f0       	mov    0xf02bce30,%eax
f0112882:	83 ec 08             	sub    $0x8,%esp
f0112885:	ff 75 f4             	pushl  -0xc(%ebp)
f0112888:	50                   	push   %eax
f0112889:	e8 e9 48 00 00       	call   f0117177 <CE>
f011288e:	83 c4 10             	add    $0x10,%esp
f0112891:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f0112894:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f0112898:	74 17                	je     f01128b1 <test_pt_clear_page_table_entry+0xa4>
	{
		panic("[EVAL] #2 Clear Page Table Entry Failed.\n");
f011289a:	83 ec 04             	sub    $0x4,%esp
f011289d:	68 40 7e 13 f0       	push   $0xf0137e40
f01128a2:	68 e6 00 00 00       	push   $0xe6
f01128a7:	68 52 7b 13 f0       	push   $0xf0137b52
f01128ac:	e8 ff d8 fe ff       	call   f01001b0 <_panic>
	}

	va = 0xEF800000;
f01128b1:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f01128b8:	a1 30 ce 2b f0       	mov    0xf02bce30,%eax
f01128bd:	83 ec 08             	sub    $0x8,%esp
f01128c0:	ff 75 f4             	pushl  -0xc(%ebp)
f01128c3:	50                   	push   %eax
f01128c4:	e8 da 5c ff ff       	call   f01085a3 <pt_clear_page_table_entry>
f01128c9:	83 c4 10             	add    $0x10,%esp
	ret = CE(ptr_page_directory, va);
f01128cc:	a1 30 ce 2b f0       	mov    0xf02bce30,%eax
f01128d1:	83 ec 08             	sub    $0x8,%esp
f01128d4:	ff 75 f4             	pushl  -0xc(%ebp)
f01128d7:	50                   	push   %eax
f01128d8:	e8 9a 48 00 00       	call   f0117177 <CE>
f01128dd:	83 c4 10             	add    $0x10,%esp
f01128e0:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f01128e3:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f01128e7:	74 17                	je     f0112900 <test_pt_clear_page_table_entry+0xf3>
	{
		panic("[EVAL] #3 Clear Page Table Entry Failed.\n");
f01128e9:	83 ec 04             	sub    $0x4,%esp
f01128ec:	68 6c 7e 13 f0       	push   $0xf0137e6c
f01128f1:	68 ee 00 00 00       	push   $0xee
f01128f6:	68 52 7b 13 f0       	push   $0xf0137b52
f01128fb:	e8 b0 d8 fe ff       	call   f01001b0 <_panic>
	}

	va = 0xF0000000;
f0112900:	c7 45 f4 00 00 00 f0 	movl   $0xf0000000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f0112907:	a1 30 ce 2b f0       	mov    0xf02bce30,%eax
f011290c:	83 ec 08             	sub    $0x8,%esp
f011290f:	ff 75 f4             	pushl  -0xc(%ebp)
f0112912:	50                   	push   %eax
f0112913:	e8 8b 5c ff ff       	call   f01085a3 <pt_clear_page_table_entry>
f0112918:	83 c4 10             	add    $0x10,%esp
	ret = CE(ptr_page_directory, va);
f011291b:	a1 30 ce 2b f0       	mov    0xf02bce30,%eax
f0112920:	83 ec 08             	sub    $0x8,%esp
f0112923:	ff 75 f4             	pushl  -0xc(%ebp)
f0112926:	50                   	push   %eax
f0112927:	e8 4b 48 00 00       	call   f0117177 <CE>
f011292c:	83 c4 10             	add    $0x10,%esp
f011292f:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f0112932:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f0112936:	74 17                	je     f011294f <test_pt_clear_page_table_entry+0x142>
	{
		panic("[EVAL] #4 Clear Page Table Entry Failed.\n");
f0112938:	83 ec 04             	sub    $0x4,%esp
f011293b:	68 98 7e 13 f0       	push   $0xf0137e98
f0112940:	68 f6 00 00 00       	push   $0xf6
f0112945:	68 52 7b 13 f0       	push   $0xf0137b52
f011294a:	e8 61 d8 fe ff       	call   f01001b0 <_panic>
	}

	cprintf("Congratulations!! test pt_clear_page_table_entry completed successfully.\n");
f011294f:	83 ec 0c             	sub    $0xc,%esp
f0112952:	68 c4 7e 13 f0       	push   $0xf0137ec4
f0112957:	e8 d5 e4 fe ff       	call   f0100e31 <cprintf>
f011295c:	83 c4 10             	add    $0x10,%esp
	return 0;
f011295f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0112964:	c9                   	leave  
f0112965:	c3                   	ret    

f0112966 <test_pt_clear_page_table_entry_invalid_va>:

int test_pt_clear_page_table_entry_invalid_va()
{
f0112966:	55                   	push   %ebp
f0112967:	89 e5                	mov    %esp,%ebp
f0112969:	83 ec 18             	sub    $0x18,%esp
	uint32 va = 0x1000;
f011296c:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f0112973:	a1 30 ce 2b f0       	mov    0xf02bce30,%eax
f0112978:	83 ec 08             	sub    $0x8,%esp
f011297b:	ff 75 f4             	pushl  -0xc(%ebp)
f011297e:	50                   	push   %eax
f011297f:	e8 1f 5c ff ff       	call   f01085a3 <pt_clear_page_table_entry>
f0112984:	83 c4 10             	add    $0x10,%esp
	panic("WRONG PANIC - This test shall panic with your error message. Check handling clearing the entry of an invalid virtual address non existing page table.");
f0112987:	83 ec 04             	sub    $0x4,%esp
f011298a:	68 10 7f 13 f0       	push   $0xf0137f10
f011298f:	68 01 01 00 00       	push   $0x101
f0112994:	68 52 7b 13 f0       	push   $0xf0137b52
f0112999:	e8 12 d8 fe ff       	call   f01001b0 <_panic>

f011299e <test_cut_paste_pages>:

//===============================
// 1) TEST CUT-PASTE PAGES:
//===============================
int test_cut_paste_pages()
{
f011299e:	55                   	push   %ebp
f011299f:	89 e5                	mov    %esp,%ebp
f01129a1:	57                   	push   %edi
f01129a2:	56                   	push   %esi
f01129a3:	53                   	push   %ebx
f01129a4:	81 ec ec 03 00 00    	sub    $0x3ec,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f01129aa:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f01129b0:	bb 54 82 13 f0       	mov    $0xf0138254,%ebx
f01129b5:	ba 0f 00 00 00       	mov    $0xf,%edx
f01129ba:	89 c7                	mov    %eax,%edi
f01129bc:	89 de                	mov    %ebx,%esi
f01129be:	89 d1                	mov    %edx,%ecx
f01129c0:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01129c2:	8d 95 6d ff ff ff    	lea    -0x93(%ebp),%edx
f01129c8:	b9 23 00 00 00       	mov    $0x23,%ecx
f01129cd:	b0 00                	mov    $0x0,%al
f01129cf:	89 d7                	mov    %edx,%edi
f01129d1:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f01129d3:	6a 00                	push   $0x0
f01129d5:	6a 0a                	push   $0xa
f01129d7:	6a 14                	push   $0x14
f01129d9:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f01129df:	50                   	push   %eax
f01129e0:	e8 5d 67 ff ff       	call   f0109142 <env_create>
f01129e5:	83 c4 10             	add    $0x10,%esp
f01129e8:	89 45 d8             	mov    %eax,-0x28(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f01129eb:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01129ee:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f01129f4:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	lcr3(env->env_cr3) ;
f01129f7:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01129fa:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f0112a00:	89 45 90             	mov    %eax,-0x70(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0112a03:	8b 45 90             	mov    -0x70(%ebp),%eax
f0112a06:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f0112a09:	c7 85 4a ff ff ff 61 	movl   $0x20707561,-0xb6(%ebp)
f0112a10:	75 70 20 
f0112a13:	c7 85 4e ff ff ff 00 	movl   $0x0,-0xb2(%ebp)
f0112a1a:	00 00 00 
f0112a1d:	8d 95 52 ff ff ff    	lea    -0xae(%ebp),%edx
f0112a23:	b9 03 00 00 00       	mov    $0x3,%ecx
f0112a28:	b8 00 00 00 00       	mov    $0x0,%eax
f0112a2d:	89 d7                	mov    %edx,%edi
f0112a2f:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f0112a31:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0112a34:	8b 40 4c             	mov    0x4c(%eax),%eax
f0112a37:	83 ec 08             	sub    $0x8,%esp
f0112a3a:	8d 95 36 ff ff ff    	lea    -0xca(%ebp),%edx
f0112a40:	52                   	push   %edx
f0112a41:	50                   	push   %eax
f0112a42:	e8 d7 ce 01 00       	call   f012f91e <ltostr>
f0112a47:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f0112a4a:	83 ec 04             	sub    $0x4,%esp
f0112a4d:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0112a53:	50                   	push   %eax
f0112a54:	8d 85 36 ff ff ff    	lea    -0xca(%ebp),%eax
f0112a5a:	50                   	push   %eax
f0112a5b:	8d 85 4a ff ff ff    	lea    -0xb6(%ebp),%eax
f0112a61:	50                   	push   %eax
f0112a62:	e8 af cf 01 00       	call   f012fa16 <strcconcat>
f0112a67:	83 c4 10             	add    $0x10,%esp
	//===================================================
	int numOfArgs = 0;
f0112a6a:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
	char *args[MAX_ARGUMENTS] ;

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6;
	int kilo = 1024 ;
f0112a71:	c7 45 c8 00 04 00 00 	movl   $0x400,-0x38(%ebp)
	int mega = 1024*1024 ;
f0112a78:	c7 45 c4 00 00 10 00 	movl   $0x100000,-0x3c(%ebp)

	ClearUserSpace(proc_directory);
f0112a7f:	83 ec 0c             	sub    $0xc,%esp
f0112a82:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112a85:	e8 ee 48 00 00       	call   f0117378 <ClearUserSpace>
f0112a8a:	83 c4 10             	add    $0x10,%esp

	char ap1[100] ;strcconcat(aup_cmd, " 0x2800000", ap1); execute_command(ap1);
f0112a8d:	83 ec 04             	sub    $0x4,%esp
f0112a90:	8d 85 60 fe ff ff    	lea    -0x1a0(%ebp),%eax
f0112a96:	50                   	push   %eax
f0112a97:	68 a6 7f 13 f0       	push   $0xf0137fa6
f0112a9c:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0112aa2:	50                   	push   %eax
f0112aa3:	e8 6e cf 01 00       	call   f012fa16 <strcconcat>
f0112aa8:	83 c4 10             	add    $0x10,%esp
f0112aab:	83 ec 0c             	sub    $0xc,%esp
f0112aae:	8d 85 60 fe ff ff    	lea    -0x1a0(%ebp),%eax
f0112ab4:	50                   	push   %eax
f0112ab5:	e8 09 f1 fe ff       	call   f0101bc3 <execute_command>
f0112aba:	83 c4 10             	add    $0x10,%esp
	char ap2[100] ;strcconcat(aup_cmd, " 0x2801000", ap2); execute_command(ap2);
f0112abd:	83 ec 04             	sub    $0x4,%esp
f0112ac0:	8d 85 fc fd ff ff    	lea    -0x204(%ebp),%eax
f0112ac6:	50                   	push   %eax
f0112ac7:	68 b1 7f 13 f0       	push   $0xf0137fb1
f0112acc:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0112ad2:	50                   	push   %eax
f0112ad3:	e8 3e cf 01 00       	call   f012fa16 <strcconcat>
f0112ad8:	83 c4 10             	add    $0x10,%esp
f0112adb:	83 ec 0c             	sub    $0xc,%esp
f0112ade:	8d 85 fc fd ff ff    	lea    -0x204(%ebp),%eax
f0112ae4:	50                   	push   %eax
f0112ae5:	e8 d9 f0 fe ff       	call   f0101bc3 <execute_command>
f0112aea:	83 c4 10             	add    $0x10,%esp
	char ap3[100] ;strcconcat(aup_cmd, " 0x2802000", ap3); execute_command(ap3);
f0112aed:	83 ec 04             	sub    $0x4,%esp
f0112af0:	8d 85 98 fd ff ff    	lea    -0x268(%ebp),%eax
f0112af6:	50                   	push   %eax
f0112af7:	68 bc 7f 13 f0       	push   $0xf0137fbc
f0112afc:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0112b02:	50                   	push   %eax
f0112b03:	e8 0e cf 01 00       	call   f012fa16 <strcconcat>
f0112b08:	83 c4 10             	add    $0x10,%esp
f0112b0b:	83 ec 0c             	sub    $0xc,%esp
f0112b0e:	8d 85 98 fd ff ff    	lea    -0x268(%ebp),%eax
f0112b14:	50                   	push   %eax
f0112b15:	e8 a9 f0 fe ff       	call   f0101bc3 <execute_command>
f0112b1a:	83 c4 10             	add    $0x10,%esp

	ptr1 = (char*)0x2800000; *ptr1 = 'a';
f0112b1d:	c7 45 c0 00 00 80 02 	movl   $0x2800000,-0x40(%ebp)
f0112b24:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112b27:	c6 00 61             	movb   $0x61,(%eax)
	ptr1 = (char*)0x28017FF; *ptr1 = 'b';
f0112b2a:	c7 45 c0 ff 17 80 02 	movl   $0x28017ff,-0x40(%ebp)
f0112b31:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112b34:	c6 00 62             	movb   $0x62,(%eax)
	ptr1 = (char*)0x2802FFF; *ptr1 = 'c';
f0112b37:	c7 45 c0 ff 2f 80 02 	movl   $0x2802fff,-0x40(%ebp)
f0112b3e:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112b41:	c6 00 63             	movb   $0x63,(%eax)

	uint32 perms = GP(proc_directory, (uint32)ptr1);
f0112b44:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112b47:	83 ec 08             	sub    $0x8,%esp
f0112b4a:	50                   	push   %eax
f0112b4b:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112b4e:	e8 8c 47 00 00       	call   f01172df <GP>
f0112b53:	83 c4 10             	add    $0x10,%esp
f0112b56:	89 45 bc             	mov    %eax,-0x44(%ebp)

	int eval = 0;
f0112b59:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	int correct = 1;
f0112b60:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	int ff1 = sys_calculate_free_frames();
f0112b67:	e8 d2 a2 ff ff       	call   f010ce3e <sys_calculate_free_frames>
f0112b6c:	89 45 b8             	mov    %eax,-0x48(%ebp)

	/*=============================================*/
	/*PART I: Destination Pages Does NOT Exist 60% */
	/*=============================================*/
	cprintf("CASE I: Destination Pages Does NOT Exist [60%]\n") ;
f0112b6f:	83 ec 0c             	sub    $0xc,%esp
f0112b72:	68 c8 7f 13 f0       	push   $0xf0137fc8
f0112b77:	e8 b5 e2 fe ff       	call   f0100e31 <cprintf>
f0112b7c:	83 c4 10             	add    $0x10,%esp
	int ret = cut_paste_pages(proc_directory, 0x2800000, 0x2900000, 3) ;
f0112b7f:	6a 03                	push   $0x3
f0112b81:	68 00 00 90 02       	push   $0x2900000
f0112b86:	68 00 00 80 02       	push   $0x2800000
f0112b8b:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112b8e:	e8 71 64 ff ff       	call   f0109004 <cut_paste_pages>
f0112b93:	83 c4 10             	add    $0x10,%esp
f0112b96:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	int ff2 = sys_calculate_free_frames();
f0112b99:	e8 a0 a2 ff ff       	call   f010ce3e <sys_calculate_free_frames>
f0112b9e:	89 45 b0             	mov    %eax,-0x50(%ebp)

	correct = 1 ;
f0112ba1:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	if (ret != 0 || ff1 != ff2)
f0112ba8:	83 7d b4 00          	cmpl   $0x0,-0x4c(%ebp)
f0112bac:	75 08                	jne    f0112bb6 <test_cut_paste_pages+0x218>
f0112bae:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112bb1:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0112bb4:	74 2b                	je     f0112be1 <test_cut_paste_pages+0x243>
	{
		warn("[EVAL] cut_paste_pages: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, ff1 - ff2);
f0112bb6:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112bb9:	2b 45 b0             	sub    -0x50(%ebp),%eax
f0112bbc:	83 ec 0c             	sub    $0xc,%esp
f0112bbf:	50                   	push   %eax
f0112bc0:	ff 75 b4             	pushl  -0x4c(%ebp)
f0112bc3:	68 f8 7f 13 f0       	push   $0xf0137ff8
f0112bc8:	68 3a 01 00 00       	push   $0x13a
f0112bcd:	68 52 7b 13 f0       	push   $0xf0137b52
f0112bd2:	e8 e7 d7 fe ff       	call   f01003be <_warn>
f0112bd7:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f0112bda:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 5 ;
f0112be1:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112be5:	74 04                	je     f0112beb <test_cut_paste_pages+0x24d>
f0112be7:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	correct = 1 ;
f0112beb:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CCP(proc_directory, 0x2800000, 0x2900000, 3*PAGE_SIZE, 1, perms, 0xFFF, 0, 0x001, CHK_CUT_PASTE) != 1)
f0112bf2:	83 ec 08             	sub    $0x8,%esp
f0112bf5:	6a 00                	push   $0x0
f0112bf7:	6a 01                	push   $0x1
f0112bf9:	6a 00                	push   $0x0
f0112bfb:	68 ff 0f 00 00       	push   $0xfff
f0112c00:	ff 75 bc             	pushl  -0x44(%ebp)
f0112c03:	6a 01                	push   $0x1
f0112c05:	68 00 30 00 00       	push   $0x3000
f0112c0a:	68 00 00 90 02       	push   $0x2900000
f0112c0f:	68 00 00 80 02       	push   $0x2800000
f0112c14:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112c17:	e8 90 47 00 00       	call   f01173ac <CCP>
f0112c1c:	83 c4 30             	add    $0x30,%esp
f0112c1f:	83 f8 01             	cmp    $0x1,%eax
f0112c22:	74 21                	je     f0112c45 <test_cut_paste_pages+0x2a7>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions and/or references\n");
f0112c24:	83 ec 04             	sub    $0x4,%esp
f0112c27:	68 4c 80 13 f0       	push   $0xf013804c
f0112c2c:	68 42 01 00 00       	push   $0x142
f0112c31:	68 52 7b 13 f0       	push   $0xf0137b52
f0112c36:	e8 83 d7 fe ff       	call   f01003be <_warn>
f0112c3b:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f0112c3e:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 15 ;
f0112c45:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112c49:	74 04                	je     f0112c4f <test_cut_paste_pages+0x2b1>
f0112c4b:	83 45 e4 0f          	addl   $0xf,-0x1c(%ebp)
	correct = 1 ;
f0112c4f:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CB(proc_directory, 0x2900000, 0) && CB(proc_directory, 0x2901000, 0) && CB(proc_directory, 0x2902000, 0))
f0112c56:	83 ec 04             	sub    $0x4,%esp
f0112c59:	6a 00                	push   $0x0
f0112c5b:	68 00 00 90 02       	push   $0x2900000
f0112c60:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112c63:	e8 d5 41 00 00       	call   f0116e3d <CB>
f0112c68:	83 c4 10             	add    $0x10,%esp
f0112c6b:	85 c0                	test   %eax,%eax
f0112c6d:	0f 84 f6 00 00 00    	je     f0112d69 <test_cut_paste_pages+0x3cb>
f0112c73:	83 ec 04             	sub    $0x4,%esp
f0112c76:	6a 00                	push   $0x0
f0112c78:	68 00 10 90 02       	push   $0x2901000
f0112c7d:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112c80:	e8 b8 41 00 00       	call   f0116e3d <CB>
f0112c85:	83 c4 10             	add    $0x10,%esp
f0112c88:	85 c0                	test   %eax,%eax
f0112c8a:	0f 84 d9 00 00 00    	je     f0112d69 <test_cut_paste_pages+0x3cb>
f0112c90:	83 ec 04             	sub    $0x4,%esp
f0112c93:	6a 00                	push   $0x0
f0112c95:	68 00 20 90 02       	push   $0x2902000
f0112c9a:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112c9d:	e8 9b 41 00 00       	call   f0116e3d <CB>
f0112ca2:	83 c4 10             	add    $0x10,%esp
f0112ca5:	85 c0                	test   %eax,%eax
f0112ca7:	0f 84 bc 00 00 00    	je     f0112d69 <test_cut_paste_pages+0x3cb>
	{
		ptr1 = (char*)0x2900000;
f0112cad:	c7 45 c0 00 00 90 02 	movl   $0x2900000,-0x40(%ebp)
		ptr2 = (char*)0x29017FF;
f0112cb4:	c7 45 ac ff 17 90 02 	movl   $0x29017ff,-0x54(%ebp)
		ptr3 = (char*)0x2902FFF;
f0112cbb:	c7 45 a8 ff 2f 90 02 	movl   $0x2902fff,-0x58(%ebp)
		if ((*ptr1) != 'a' || (*ptr2) != 'b' || (*ptr3) != 'c')
f0112cc2:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112cc5:	8a 00                	mov    (%eax),%al
f0112cc7:	3c 61                	cmp    $0x61,%al
f0112cc9:	75 12                	jne    f0112cdd <test_cut_paste_pages+0x33f>
f0112ccb:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0112cce:	8a 00                	mov    (%eax),%al
f0112cd0:	3c 62                	cmp    $0x62,%al
f0112cd2:	75 09                	jne    f0112cdd <test_cut_paste_pages+0x33f>
f0112cd4:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0112cd7:	8a 00                	mov    (%eax),%al
f0112cd9:	3c 63                	cmp    $0x63,%al
f0112cdb:	74 21                	je     f0112cfe <test_cut_paste_pages+0x360>
		{
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f0112cdd:	83 ec 04             	sub    $0x4,%esp
f0112ce0:	68 98 80 13 f0       	push   $0xf0138098
f0112ce5:	68 4f 01 00 00       	push   $0x14f
f0112cea:	68 52 7b 13 f0       	push   $0xf0137b52
f0112cef:	e8 ca d6 fe ff       	call   f01003be <_warn>
f0112cf4:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112cf7:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0112cfe:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112d02:	74 04                	je     f0112d08 <test_cut_paste_pages+0x36a>
f0112d04:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112d08:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (CB(proc_directory, 0x2901000, 1))
f0112d0f:	83 ec 04             	sub    $0x4,%esp
f0112d12:	6a 01                	push   $0x1
f0112d14:	68 00 10 90 02       	push   $0x2901000
f0112d19:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112d1c:	e8 1c 41 00 00       	call   f0116e3d <CB>
f0112d21:	83 c4 10             	add    $0x10,%esp
f0112d24:	85 c0                	test   %eax,%eax
f0112d26:	74 41                	je     f0112d69 <test_cut_paste_pages+0x3cb>
		{
			*ptr2 = 'y';
f0112d28:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0112d2b:	c6 00 79             	movb   $0x79,(%eax)
			if ((*ptr2) != 'y')
f0112d2e:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0112d31:	8a 00                	mov    (%eax),%al
f0112d33:	3c 79                	cmp    $0x79,%al
f0112d35:	74 21                	je     f0112d58 <test_cut_paste_pages+0x3ba>
			{
				warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f0112d37:	83 ec 04             	sub    $0x4,%esp
f0112d3a:	68 98 80 13 f0       	push   $0xf0138098
f0112d3f:	68 5a 01 00 00       	push   $0x15a
f0112d44:	68 52 7b 13 f0       	push   $0xf0137b52
f0112d49:	e8 70 d6 fe ff       	call   f01003be <_warn>
f0112d4e:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0112d51:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			}
			if (correct) eval += 5 ;
f0112d58:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112d5c:	74 04                	je     f0112d62 <test_cut_paste_pages+0x3c4>
f0112d5e:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0112d62:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		}
	}


	ff1 = ff2 ;
f0112d69:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0112d6c:	89 45 b8             	mov    %eax,-0x48(%ebp)

	ret = cut_paste_pages(proc_directory, 0x2901000, 0x2BFF000, 2) ;
f0112d6f:	6a 02                	push   $0x2
f0112d71:	68 00 f0 bf 02       	push   $0x2bff000
f0112d76:	68 00 10 90 02       	push   $0x2901000
f0112d7b:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112d7e:	e8 81 62 ff ff       	call   f0109004 <cut_paste_pages>
f0112d83:	83 c4 10             	add    $0x10,%esp
f0112d86:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	ff2 = sys_calculate_free_frames();
f0112d89:	e8 b0 a0 ff ff       	call   f010ce3e <sys_calculate_free_frames>
f0112d8e:	89 45 b0             	mov    %eax,-0x50(%ebp)

	if (ret != 0 || ff1 - ff2 != 1)
f0112d91:	83 7d b4 00          	cmpl   $0x0,-0x4c(%ebp)
f0112d95:	75 0b                	jne    f0112da2 <test_cut_paste_pages+0x404>
f0112d97:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112d9a:	2b 45 b0             	sub    -0x50(%ebp),%eax
f0112d9d:	83 f8 01             	cmp    $0x1,%eax
f0112da0:	74 2b                	je     f0112dcd <test_cut_paste_pages+0x42f>
	{
		warn("[EVAL] cut_paste_pages: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, ff1 - ff2);
f0112da2:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112da5:	2b 45 b0             	sub    -0x50(%ebp),%eax
f0112da8:	83 ec 0c             	sub    $0xc,%esp
f0112dab:	50                   	push   %eax
f0112dac:	ff 75 b4             	pushl  -0x4c(%ebp)
f0112daf:	68 f8 7f 13 f0       	push   $0xf0137ff8
f0112db4:	68 6b 01 00 00       	push   $0x16b
f0112db9:	68 52 7b 13 f0       	push   $0xf0137b52
f0112dbe:	e8 fb d5 fe ff       	call   f01003be <_warn>
f0112dc3:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f0112dc6:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f0112dcd:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112dd1:	74 04                	je     f0112dd7 <test_cut_paste_pages+0x439>
f0112dd3:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f0112dd7:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CCP(proc_directory, 0x2901000, 0x2BFF000, 2*PAGE_SIZE, 1, perms , 0xFFF, 0, 0x001, CHK_CUT_PASTE) != 1)
f0112dde:	83 ec 08             	sub    $0x8,%esp
f0112de1:	6a 00                	push   $0x0
f0112de3:	6a 01                	push   $0x1
f0112de5:	6a 00                	push   $0x0
f0112de7:	68 ff 0f 00 00       	push   $0xfff
f0112dec:	ff 75 bc             	pushl  -0x44(%ebp)
f0112def:	6a 01                	push   $0x1
f0112df1:	68 00 20 00 00       	push   $0x2000
f0112df6:	68 00 f0 bf 02       	push   $0x2bff000
f0112dfb:	68 00 10 90 02       	push   $0x2901000
f0112e00:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112e03:	e8 a4 45 00 00       	call   f01173ac <CCP>
f0112e08:	83 c4 30             	add    $0x30,%esp
f0112e0b:	83 f8 01             	cmp    $0x1,%eax
f0112e0e:	74 21                	je     f0112e31 <test_cut_paste_pages+0x493>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions and/or references\n");
f0112e10:	83 ec 04             	sub    $0x4,%esp
f0112e13:	68 4c 80 13 f0       	push   $0xf013804c
f0112e18:	68 73 01 00 00       	push   $0x173
f0112e1d:	68 52 7b 13 f0       	push   $0xf0137b52
f0112e22:	e8 97 d5 fe ff       	call   f01003be <_warn>
f0112e27:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f0112e2a:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f0112e31:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112e35:	74 04                	je     f0112e3b <test_cut_paste_pages+0x49d>
f0112e37:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f0112e3b:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CB(proc_directory, 0x2BFF7FF, 0) && CB(proc_directory, 0x2C00FFF, 0))
f0112e42:	83 ec 04             	sub    $0x4,%esp
f0112e45:	6a 00                	push   $0x0
f0112e47:	68 ff f7 bf 02       	push   $0x2bff7ff
f0112e4c:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112e4f:	e8 e9 3f 00 00       	call   f0116e3d <CB>
f0112e54:	83 c4 10             	add    $0x10,%esp
f0112e57:	85 c0                	test   %eax,%eax
f0112e59:	74 6b                	je     f0112ec6 <test_cut_paste_pages+0x528>
f0112e5b:	83 ec 04             	sub    $0x4,%esp
f0112e5e:	6a 00                	push   $0x0
f0112e60:	68 ff 0f c0 02       	push   $0x2c00fff
f0112e65:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112e68:	e8 d0 3f 00 00       	call   f0116e3d <CB>
f0112e6d:	83 c4 10             	add    $0x10,%esp
f0112e70:	85 c0                	test   %eax,%eax
f0112e72:	74 52                	je     f0112ec6 <test_cut_paste_pages+0x528>
	{
		ptr1 = (char*)0x2BFF7FF;
f0112e74:	c7 45 c0 ff f7 bf 02 	movl   $0x2bff7ff,-0x40(%ebp)
		ptr2 = (char*)0x2C00FFF;
f0112e7b:	c7 45 ac ff 0f c0 02 	movl   $0x2c00fff,-0x54(%ebp)
		if ((*ptr1) != 'y' || (*ptr2) != 'c')
f0112e82:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112e85:	8a 00                	mov    (%eax),%al
f0112e87:	3c 79                	cmp    $0x79,%al
f0112e89:	75 09                	jne    f0112e94 <test_cut_paste_pages+0x4f6>
f0112e8b:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0112e8e:	8a 00                	mov    (%eax),%al
f0112e90:	3c 63                	cmp    $0x63,%al
f0112e92:	74 21                	je     f0112eb5 <test_cut_paste_pages+0x517>
		{
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f0112e94:	83 ec 04             	sub    $0x4,%esp
f0112e97:	68 98 80 13 f0       	push   $0xf0138098
f0112e9c:	68 7f 01 00 00       	push   $0x17f
f0112ea1:	68 52 7b 13 f0       	push   $0xf0137b52
f0112ea6:	e8 13 d5 fe ff       	call   f01003be <_warn>
f0112eab:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112eae:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f0112eb5:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112eb9:	74 04                	je     f0112ebf <test_cut_paste_pages+0x521>
f0112ebb:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0112ebf:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	}
	cprintf("CASE I: END\n") ;
f0112ec6:	83 ec 0c             	sub    $0xc,%esp
f0112ec9:	68 d1 80 13 f0       	push   $0xf01380d1
f0112ece:	e8 5e df fe ff       	call   f0100e31 <cprintf>
f0112ed3:	83 c4 10             	add    $0x10,%esp

	/*========================================*/
	/*PART II: Destination Pages Exist 40%	  */
	/*========================================*/
	cprintf("\nCASE II: Destination Pages Exist [40%]\n") ;
f0112ed6:	83 ec 0c             	sub    $0xc,%esp
f0112ed9:	68 e0 80 13 f0       	push   $0xf01380e0
f0112ede:	e8 4e df fe ff       	call   f0100e31 <cprintf>
f0112ee3:	83 c4 10             	add    $0x10,%esp

	char ap4[100] ;strcconcat(aup_cmd, " 0x1400000", ap4); execute_command(ap4);
f0112ee6:	83 ec 04             	sub    $0x4,%esp
f0112ee9:	8d 85 34 fd ff ff    	lea    -0x2cc(%ebp),%eax
f0112eef:	50                   	push   %eax
f0112ef0:	68 09 81 13 f0       	push   $0xf0138109
f0112ef5:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0112efb:	50                   	push   %eax
f0112efc:	e8 15 cb 01 00       	call   f012fa16 <strcconcat>
f0112f01:	83 c4 10             	add    $0x10,%esp
f0112f04:	83 ec 0c             	sub    $0xc,%esp
f0112f07:	8d 85 34 fd ff ff    	lea    -0x2cc(%ebp),%eax
f0112f0d:	50                   	push   %eax
f0112f0e:	e8 b0 ec fe ff       	call   f0101bc3 <execute_command>
f0112f13:	83 c4 10             	add    $0x10,%esp
	char ap5[100] ;strcconcat(aup_cmd, " 0x1401000", ap5); execute_command(ap5);
f0112f16:	83 ec 04             	sub    $0x4,%esp
f0112f19:	8d 85 d0 fc ff ff    	lea    -0x330(%ebp),%eax
f0112f1f:	50                   	push   %eax
f0112f20:	68 14 81 13 f0       	push   $0xf0138114
f0112f25:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0112f2b:	50                   	push   %eax
f0112f2c:	e8 e5 ca 01 00       	call   f012fa16 <strcconcat>
f0112f31:	83 c4 10             	add    $0x10,%esp
f0112f34:	83 ec 0c             	sub    $0xc,%esp
f0112f37:	8d 85 d0 fc ff ff    	lea    -0x330(%ebp),%eax
f0112f3d:	50                   	push   %eax
f0112f3e:	e8 80 ec fe ff       	call   f0101bc3 <execute_command>
f0112f43:	83 c4 10             	add    $0x10,%esp
	char ap6[100] ;strcconcat(aup_cmd, " 0x1402000", ap6); execute_command(ap6);
f0112f46:	83 ec 04             	sub    $0x4,%esp
f0112f49:	8d 85 6c fc ff ff    	lea    -0x394(%ebp),%eax
f0112f4f:	50                   	push   %eax
f0112f50:	68 1f 81 13 f0       	push   $0xf013811f
f0112f55:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0112f5b:	50                   	push   %eax
f0112f5c:	e8 b5 ca 01 00       	call   f012fa16 <strcconcat>
f0112f61:	83 c4 10             	add    $0x10,%esp
f0112f64:	83 ec 0c             	sub    $0xc,%esp
f0112f67:	8d 85 6c fc ff ff    	lea    -0x394(%ebp),%eax
f0112f6d:	50                   	push   %eax
f0112f6e:	e8 50 ec fe ff       	call   f0101bc3 <execute_command>
f0112f73:	83 c4 10             	add    $0x10,%esp
	char ap7[100] ;strcconcat(aup_cmd, " 0x1C00000", ap7); execute_command(ap7);
f0112f76:	83 ec 04             	sub    $0x4,%esp
f0112f79:	8d 85 08 fc ff ff    	lea    -0x3f8(%ebp),%eax
f0112f7f:	50                   	push   %eax
f0112f80:	68 2a 81 13 f0       	push   $0xf013812a
f0112f85:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0112f8b:	50                   	push   %eax
f0112f8c:	e8 85 ca 01 00       	call   f012fa16 <strcconcat>
f0112f91:	83 c4 10             	add    $0x10,%esp
f0112f94:	83 ec 0c             	sub    $0xc,%esp
f0112f97:	8d 85 08 fc ff ff    	lea    -0x3f8(%ebp),%eax
f0112f9d:	50                   	push   %eax
f0112f9e:	e8 20 ec fe ff       	call   f0101bc3 <execute_command>
f0112fa3:	83 c4 10             	add    $0x10,%esp

	ptr1 = (char*)0x1400000; *ptr1 = 'a';
f0112fa6:	c7 45 c0 00 00 40 01 	movl   $0x1400000,-0x40(%ebp)
f0112fad:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112fb0:	c6 00 61             	movb   $0x61,(%eax)
	ptr1 = (char*)0x14007FF; *ptr1 = 'b';
f0112fb3:	c7 45 c0 ff 07 40 01 	movl   $0x14007ff,-0x40(%ebp)
f0112fba:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112fbd:	c6 00 62             	movb   $0x62,(%eax)
	ptr1 = (char*)0x1400FFF; *ptr1 = 'c';
f0112fc0:	c7 45 c0 ff 0f 40 01 	movl   $0x1400fff,-0x40(%ebp)
f0112fc7:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112fca:	c6 00 63             	movb   $0x63,(%eax)
	ptr1 = (char*)0x1C00000; *ptr1 = 'x';
f0112fcd:	c7 45 c0 00 00 c0 01 	movl   $0x1c00000,-0x40(%ebp)
f0112fd4:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112fd7:	c6 00 78             	movb   $0x78,(%eax)
	ptr1 = (char*)0x1C007FF; *ptr1 = 'y';
f0112fda:	c7 45 c0 ff 07 c0 01 	movl   $0x1c007ff,-0x40(%ebp)
f0112fe1:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112fe4:	c6 00 79             	movb   $0x79,(%eax)
	ptr1 = (char*)0x1C00FFF; *ptr1 = 'z';
f0112fe7:	c7 45 c0 ff 0f c0 01 	movl   $0x1c00fff,-0x40(%ebp)
f0112fee:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112ff1:	c6 00 7a             	movb   $0x7a,(%eax)
	uint32 srcp = GP(proc_directory, 0x1C00000) ;
f0112ff4:	83 ec 08             	sub    $0x8,%esp
f0112ff7:	68 00 00 c0 01       	push   $0x1c00000
f0112ffc:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112fff:	e8 db 42 00 00       	call   f01172df <GP>
f0113004:	83 c4 10             	add    $0x10,%esp
f0113007:	89 45 a4             	mov    %eax,-0x5c(%ebp)
	uint32 dstp = GP(proc_directory, 0x1400000) ;
f011300a:	83 ec 08             	sub    $0x8,%esp
f011300d:	68 00 00 40 01       	push   $0x1400000
f0113012:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113015:	e8 c5 42 00 00       	call   f01172df <GP>
f011301a:	83 c4 10             	add    $0x10,%esp
f011301d:	89 45 a0             	mov    %eax,-0x60(%ebp)

	ff1 = sys_calculate_free_frames();
f0113020:	e8 19 9e ff ff       	call   f010ce3e <sys_calculate_free_frames>
f0113025:	89 45 b8             	mov    %eax,-0x48(%ebp)

	ret = cut_paste_pages(proc_directory, 0x1C00000, 0x1400000, 1) ;
f0113028:	6a 01                	push   $0x1
f011302a:	68 00 00 40 01       	push   $0x1400000
f011302f:	68 00 00 c0 01       	push   $0x1c00000
f0113034:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113037:	e8 c8 5f ff ff       	call   f0109004 <cut_paste_pages>
f011303c:	83 c4 10             	add    $0x10,%esp
f011303f:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	ff2 = sys_calculate_free_frames();
f0113042:	e8 f7 9d ff ff       	call   f010ce3e <sys_calculate_free_frames>
f0113047:	89 45 b0             	mov    %eax,-0x50(%ebp)

	if (ret != -1 || ff1 - ff2 != 0)
f011304a:	83 7d b4 ff          	cmpl   $0xffffffff,-0x4c(%ebp)
f011304e:	75 08                	jne    f0113058 <test_cut_paste_pages+0x6ba>
f0113050:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113053:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0113056:	74 2b                	je     f0113083 <test_cut_paste_pages+0x6e5>
	{
		warn("[EVAL] cut_paste_pages: Failed (dest is exist... operation should be denied) ret=%d diff=%d\n", ret, ff1 - ff2);
f0113058:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011305b:	2b 45 b0             	sub    -0x50(%ebp),%eax
f011305e:	83 ec 0c             	sub    $0xc,%esp
f0113061:	50                   	push   %eax
f0113062:	ff 75 b4             	pushl  -0x4c(%ebp)
f0113065:	68 38 81 13 f0       	push   $0xf0138138
f011306a:	68 a2 01 00 00       	push   $0x1a2
f011306f:	68 52 7b 13 f0       	push   $0xf0137b52
f0113074:	e8 45 d3 fe ff       	call   f01003be <_warn>
f0113079:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f011307c:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f0113083:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113087:	74 04                	je     f011308d <test_cut_paste_pages+0x6ef>
f0113089:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f011308d:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	int chk_cntnt = 1 ;
f0113094:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
	if (CCP(proc_directory, 0x1C00000, 0x1400000, 1*PAGE_SIZE, 1, dstp , 0xFFF, srcp, 0xFFF, CHK_CUT_PASTE) != 1)
f011309b:	83 ec 08             	sub    $0x8,%esp
f011309e:	6a 00                	push   $0x0
f01130a0:	68 ff 0f 00 00       	push   $0xfff
f01130a5:	ff 75 a4             	pushl  -0x5c(%ebp)
f01130a8:	68 ff 0f 00 00       	push   $0xfff
f01130ad:	ff 75 a0             	pushl  -0x60(%ebp)
f01130b0:	6a 01                	push   $0x1
f01130b2:	68 00 10 00 00       	push   $0x1000
f01130b7:	68 00 00 40 01       	push   $0x1400000
f01130bc:	68 00 00 c0 01       	push   $0x1c00000
f01130c1:	ff 75 d4             	pushl  -0x2c(%ebp)
f01130c4:	e8 e3 42 00 00       	call   f01173ac <CCP>
f01130c9:	83 c4 30             	add    $0x30,%esp
f01130cc:	83 f8 01             	cmp    $0x1,%eax
f01130cf:	74 28                	je     f01130f9 <test_cut_paste_pages+0x75b>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions and/or references\n");
f01130d1:	83 ec 04             	sub    $0x4,%esp
f01130d4:	68 4c 80 13 f0       	push   $0xf013804c
f01130d9:	68 ab 01 00 00       	push   $0x1ab
f01130de:	68 52 7b 13 f0       	push   $0xf0137b52
f01130e3:	e8 d6 d2 fe ff       	call   f01003be <_warn>
f01130e8:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f01130eb:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		chk_cntnt = 0;
f01130f2:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	}
	if (correct) eval += 5 ;
f01130f9:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01130fd:	74 04                	je     f0113103 <test_cut_paste_pages+0x765>
f01130ff:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	correct = 1 ;
f0113103:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (chk_cntnt)
f011310a:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f011310e:	0f 84 92 00 00 00    	je     f01131a6 <test_cut_paste_pages+0x808>
	{
		ptr1 = (char*)0x1400000;
f0113114:	c7 45 c0 00 00 40 01 	movl   $0x1400000,-0x40(%ebp)
		ptr2 = (char*)0x1C00000;
f011311b:	c7 45 ac 00 00 c0 01 	movl   $0x1c00000,-0x54(%ebp)
		ptr3 = (char*)0x14007FF;
f0113122:	c7 45 a8 ff 07 40 01 	movl   $0x14007ff,-0x58(%ebp)
		ptr4 = (char*)0x1C007FF;
f0113129:	c7 45 9c ff 07 c0 01 	movl   $0x1c007ff,-0x64(%ebp)
		ptr5 = (char*)0x1400FFF;
f0113130:	c7 45 98 ff 0f 40 01 	movl   $0x1400fff,-0x68(%ebp)
		ptr6 = (char*)0x1C00FFF;
f0113137:	c7 45 94 ff 0f c0 01 	movl   $0x1c00fff,-0x6c(%ebp)
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f011313e:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0113141:	8a 00                	mov    (%eax),%al
f0113143:	3c 61                	cmp    $0x61,%al
f0113145:	75 2d                	jne    f0113174 <test_cut_paste_pages+0x7d6>
f0113147:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011314a:	8a 00                	mov    (%eax),%al
f011314c:	3c 78                	cmp    $0x78,%al
f011314e:	75 24                	jne    f0113174 <test_cut_paste_pages+0x7d6>
f0113150:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0113153:	8a 00                	mov    (%eax),%al
f0113155:	3c 62                	cmp    $0x62,%al
f0113157:	75 1b                	jne    f0113174 <test_cut_paste_pages+0x7d6>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f0113159:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011315c:	8a 00                	mov    (%eax),%al
		ptr2 = (char*)0x1C00000;
		ptr3 = (char*)0x14007FF;
		ptr4 = (char*)0x1C007FF;
		ptr5 = (char*)0x1400FFF;
		ptr6 = (char*)0x1C00FFF;
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f011315e:	3c 79                	cmp    $0x79,%al
f0113160:	75 12                	jne    f0113174 <test_cut_paste_pages+0x7d6>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f0113162:	8b 45 98             	mov    -0x68(%ebp),%eax
f0113165:	8a 00                	mov    (%eax),%al
f0113167:	3c 63                	cmp    $0x63,%al
f0113169:	75 09                	jne    f0113174 <test_cut_paste_pages+0x7d6>
f011316b:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011316e:	8a 00                	mov    (%eax),%al
f0113170:	3c 7a                	cmp    $0x7a,%al
f0113172:	74 21                	je     f0113195 <test_cut_paste_pages+0x7f7>
		{
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f0113174:	83 ec 04             	sub    $0x4,%esp
f0113177:	68 98 80 13 f0       	push   $0xf0138098
f011317c:	68 bd 01 00 00       	push   $0x1bd
f0113181:	68 52 7b 13 f0       	push   $0xf0137b52
f0113186:	e8 33 d2 fe ff       	call   f01003be <_warn>
f011318b:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011318e:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0113195:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113199:	74 04                	je     f011319f <test_cut_paste_pages+0x801>
f011319b:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011319f:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	}

	ff1 = sys_calculate_free_frames();
f01131a6:	e8 93 9c ff ff       	call   f010ce3e <sys_calculate_free_frames>
f01131ab:	89 45 b8             	mov    %eax,-0x48(%ebp)

	ret = cut_paste_pages(proc_directory, 0x1400000, 0x1BFF000, 3) ;
f01131ae:	6a 03                	push   $0x3
f01131b0:	68 00 f0 bf 01       	push   $0x1bff000
f01131b5:	68 00 00 40 01       	push   $0x1400000
f01131ba:	ff 75 d4             	pushl  -0x2c(%ebp)
f01131bd:	e8 42 5e ff ff       	call   f0109004 <cut_paste_pages>
f01131c2:	83 c4 10             	add    $0x10,%esp
f01131c5:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	ff2 = sys_calculate_free_frames();
f01131c8:	e8 71 9c ff ff       	call   f010ce3e <sys_calculate_free_frames>
f01131cd:	89 45 b0             	mov    %eax,-0x50(%ebp)

	if (ret != -1 || ff1 - ff2 != 0)
f01131d0:	83 7d b4 ff          	cmpl   $0xffffffff,-0x4c(%ebp)
f01131d4:	75 08                	jne    f01131de <test_cut_paste_pages+0x840>
f01131d6:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01131d9:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f01131dc:	74 2b                	je     f0113209 <test_cut_paste_pages+0x86b>
	{
		warn("[EVAL] cut_paste_pages: Failed (dest is exist... operation should be denied) ret=%d diff=%d\n", ret, ff1 - ff2);
f01131de:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01131e1:	2b 45 b0             	sub    -0x50(%ebp),%eax
f01131e4:	83 ec 0c             	sub    $0xc,%esp
f01131e7:	50                   	push   %eax
f01131e8:	ff 75 b4             	pushl  -0x4c(%ebp)
f01131eb:	68 38 81 13 f0       	push   $0xf0138138
f01131f0:	68 cc 01 00 00       	push   $0x1cc
f01131f5:	68 52 7b 13 f0       	push   $0xf0137b52
f01131fa:	e8 bf d1 fe ff       	call   f01003be <_warn>
f01131ff:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f0113202:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f0113209:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011320d:	74 04                	je     f0113213 <test_cut_paste_pages+0x875>
f011320f:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f0113213:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	chk_cntnt = 1;
f011321a:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
	if (CB(proc_directory, 0x1400000, 0) != 1 || CB(proc_directory, 0x1401000, 0) != 1 || CB(proc_directory, 0x1402000, 0) != 1 ||
f0113221:	83 ec 04             	sub    $0x4,%esp
f0113224:	6a 00                	push   $0x0
f0113226:	68 00 00 40 01       	push   $0x1400000
f011322b:	ff 75 d4             	pushl  -0x2c(%ebp)
f011322e:	e8 0a 3c 00 00       	call   f0116e3d <CB>
f0113233:	83 c4 10             	add    $0x10,%esp
f0113236:	83 f8 01             	cmp    $0x1,%eax
f0113239:	0f 85 80 00 00 00    	jne    f01132bf <test_cut_paste_pages+0x921>
f011323f:	83 ec 04             	sub    $0x4,%esp
f0113242:	6a 00                	push   $0x0
f0113244:	68 00 10 40 01       	push   $0x1401000
f0113249:	ff 75 d4             	pushl  -0x2c(%ebp)
f011324c:	e8 ec 3b 00 00       	call   f0116e3d <CB>
f0113251:	83 c4 10             	add    $0x10,%esp
f0113254:	83 f8 01             	cmp    $0x1,%eax
f0113257:	75 66                	jne    f01132bf <test_cut_paste_pages+0x921>
f0113259:	83 ec 04             	sub    $0x4,%esp
f011325c:	6a 00                	push   $0x0
f011325e:	68 00 20 40 01       	push   $0x1402000
f0113263:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113266:	e8 d2 3b 00 00       	call   f0116e3d <CB>
f011326b:	83 c4 10             	add    $0x10,%esp
f011326e:	83 f8 01             	cmp    $0x1,%eax
f0113271:	75 4c                	jne    f01132bf <test_cut_paste_pages+0x921>
			CB(proc_directory, 0x1BFF000, 0) != 0 || CB(proc_directory, 0x1C00000, 0) != 1 || CB(proc_directory, 0x1C01000, 0) != 0)
f0113273:	83 ec 04             	sub    $0x4,%esp
f0113276:	6a 00                	push   $0x0
f0113278:	68 00 f0 bf 01       	push   $0x1bff000
f011327d:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113280:	e8 b8 3b 00 00       	call   f0116e3d <CB>
f0113285:	83 c4 10             	add    $0x10,%esp
		correct = 0;
	}
	if (correct) eval += 10 ;
	correct = 1 ;
	chk_cntnt = 1;
	if (CB(proc_directory, 0x1400000, 0) != 1 || CB(proc_directory, 0x1401000, 0) != 1 || CB(proc_directory, 0x1402000, 0) != 1 ||
f0113288:	85 c0                	test   %eax,%eax
f011328a:	75 33                	jne    f01132bf <test_cut_paste_pages+0x921>
			CB(proc_directory, 0x1BFF000, 0) != 0 || CB(proc_directory, 0x1C00000, 0) != 1 || CB(proc_directory, 0x1C01000, 0) != 0)
f011328c:	83 ec 04             	sub    $0x4,%esp
f011328f:	6a 00                	push   $0x0
f0113291:	68 00 00 c0 01       	push   $0x1c00000
f0113296:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113299:	e8 9f 3b 00 00       	call   f0116e3d <CB>
f011329e:	83 c4 10             	add    $0x10,%esp
f01132a1:	83 f8 01             	cmp    $0x1,%eax
f01132a4:	75 19                	jne    f01132bf <test_cut_paste_pages+0x921>
f01132a6:	83 ec 04             	sub    $0x4,%esp
f01132a9:	6a 00                	push   $0x0
f01132ab:	68 00 10 c0 01       	push   $0x1c01000
f01132b0:	ff 75 d4             	pushl  -0x2c(%ebp)
f01132b3:	e8 85 3b 00 00       	call   f0116e3d <CB>
f01132b8:	83 c4 10             	add    $0x10,%esp
f01132bb:	85 c0                	test   %eax,%eax
f01132bd:	74 28                	je     f01132e7 <test_cut_paste_pages+0x949>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions)\n");
f01132bf:	83 ec 04             	sub    $0x4,%esp
f01132c2:	68 98 81 13 f0       	push   $0xf0138198
f01132c7:	68 d5 01 00 00       	push   $0x1d5
f01132cc:	68 52 7b 13 f0       	push   $0xf0137b52
f01132d1:	e8 e8 d0 fe ff       	call   f01003be <_warn>
f01132d6:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f01132d9:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		chk_cntnt = 0;
f01132e0:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	}
	if (correct) eval += 5 ;
f01132e7:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01132eb:	74 04                	je     f01132f1 <test_cut_paste_pages+0x953>
f01132ed:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	correct = 1 ;
f01132f1:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (chk_cntnt)
f01132f8:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f01132fc:	0f 84 99 00 00 00    	je     f011339b <test_cut_paste_pages+0x9fd>
	{
		ptr1 = (char*)0x1400000;
f0113302:	c7 45 c0 00 00 40 01 	movl   $0x1400000,-0x40(%ebp)
		ptr2 = (char*)0x1C00000;
f0113309:	c7 45 ac 00 00 c0 01 	movl   $0x1c00000,-0x54(%ebp)
		ptr3 = (char*)0x14007FF;
f0113310:	c7 45 a8 ff 07 40 01 	movl   $0x14007ff,-0x58(%ebp)
		ptr4 = (char*)0x1C007FF;
f0113317:	c7 45 9c ff 07 c0 01 	movl   $0x1c007ff,-0x64(%ebp)
		ptr5 = (char*)0x1400FFF;
f011331e:	c7 45 98 ff 0f 40 01 	movl   $0x1400fff,-0x68(%ebp)
		ptr6 = (char*)0x1C00FFF;
f0113325:	c7 45 94 ff 0f c0 01 	movl   $0x1c00fff,-0x6c(%ebp)
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f011332c:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011332f:	8a 00                	mov    (%eax),%al
f0113331:	3c 61                	cmp    $0x61,%al
f0113333:	75 2d                	jne    f0113362 <test_cut_paste_pages+0x9c4>
f0113335:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0113338:	8a 00                	mov    (%eax),%al
f011333a:	3c 78                	cmp    $0x78,%al
f011333c:	75 24                	jne    f0113362 <test_cut_paste_pages+0x9c4>
f011333e:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0113341:	8a 00                	mov    (%eax),%al
f0113343:	3c 62                	cmp    $0x62,%al
f0113345:	75 1b                	jne    f0113362 <test_cut_paste_pages+0x9c4>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f0113347:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011334a:	8a 00                	mov    (%eax),%al
		ptr2 = (char*)0x1C00000;
		ptr3 = (char*)0x14007FF;
		ptr4 = (char*)0x1C007FF;
		ptr5 = (char*)0x1400FFF;
		ptr6 = (char*)0x1C00FFF;
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f011334c:	3c 79                	cmp    $0x79,%al
f011334e:	75 12                	jne    f0113362 <test_cut_paste_pages+0x9c4>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f0113350:	8b 45 98             	mov    -0x68(%ebp),%eax
f0113353:	8a 00                	mov    (%eax),%al
f0113355:	3c 63                	cmp    $0x63,%al
f0113357:	75 09                	jne    f0113362 <test_cut_paste_pages+0x9c4>
f0113359:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011335c:	8a 00                	mov    (%eax),%al
f011335e:	3c 7a                	cmp    $0x7a,%al
f0113360:	74 28                	je     f011338a <test_cut_paste_pages+0x9ec>
		{
			correct = 0;
f0113362:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chk_cntnt = 0;
f0113369:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f0113370:	83 ec 04             	sub    $0x4,%esp
f0113373:	68 98 80 13 f0       	push   $0xf0138098
f0113378:	68 e9 01 00 00       	push   $0x1e9
f011337d:	68 52 7b 13 f0       	push   $0xf0137b52
f0113382:	e8 37 d0 fe ff       	call   f01003be <_warn>
f0113387:	83 c4 10             	add    $0x10,%esp
		}
		if (correct) eval += 5 ;
f011338a:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011338e:	74 04                	je     f0113394 <test_cut_paste_pages+0x9f6>
f0113390:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113394:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	}

	cprintf("CASE II: END\n") ;
f011339b:	83 ec 0c             	sub    $0xc,%esp
f011339e:	68 d1 81 13 f0       	push   $0xf01381d1
f01133a3:	e8 89 da fe ff       	call   f0100e31 <cprintf>
f01133a8:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] cut_paste_pages: FINISHED. Evaluation = %d\n", eval);
f01133ab:	83 ec 08             	sub    $0x8,%esp
f01133ae:	ff 75 e4             	pushl  -0x1c(%ebp)
f01133b1:	68 e0 81 13 f0       	push   $0xf01381e0
f01133b6:	e8 76 da fe ff       	call   f0100e31 <cprintf>
f01133bb:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f01133be:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f01133c2:	75 10                	jne    f01133d4 <test_cut_paste_pages+0xa36>
		cprintf("Congratulations!! test cut_paste_pages completed successfully.\n");
f01133c4:	83 ec 0c             	sub    $0xc,%esp
f01133c7:	68 14 82 13 f0       	push   $0xf0138214
f01133cc:	e8 60 da fe ff       	call   f0100e31 <cprintf>
f01133d1:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f01133d4:	a1 70 ce 2b f0       	mov    0xf02bce70,%eax
f01133d9:	89 45 d0             	mov    %eax,-0x30(%ebp)
f01133dc:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01133df:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f01133e2:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01133e7:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01133ea:	5b                   	pop    %ebx
f01133eb:	5e                   	pop    %esi
f01133ec:	5f                   	pop    %edi
f01133ed:	5d                   	pop    %ebp
f01133ee:	c3                   	ret    

f01133ef <test_copy_paste_chunk>:

//===============================
// 2) TEST COPY-PASTE CHUNK:
//===============================
int test_copy_paste_chunk()
{
f01133ef:	55                   	push   %ebp
f01133f0:	89 e5                	mov    %esp,%ebp
f01133f2:	57                   	push   %edi
f01133f3:	56                   	push   %esi
f01133f4:	53                   	push   %ebx
f01133f5:	81 ec ac 05 00 00    	sub    $0x5ac,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f01133fb:	8d 85 42 ff ff ff    	lea    -0xbe(%ebp),%eax
f0113401:	bb 54 82 13 f0       	mov    $0xf0138254,%ebx
f0113406:	ba 0f 00 00 00       	mov    $0xf,%edx
f011340b:	89 c7                	mov    %eax,%edi
f011340d:	89 de                	mov    %ebx,%esi
f011340f:	89 d1                	mov    %edx,%ecx
f0113411:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113413:	8d 95 51 ff ff ff    	lea    -0xaf(%ebp),%edx
f0113419:	b9 23 00 00 00       	mov    $0x23,%ecx
f011341e:	b0 00                	mov    $0x0,%al
f0113420:	89 d7                	mov    %edx,%edi
f0113422:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0113424:	6a 00                	push   $0x0
f0113426:	6a 0a                	push   $0xa
f0113428:	6a 14                	push   $0x14
f011342a:	8d 85 42 ff ff ff    	lea    -0xbe(%ebp),%eax
f0113430:	50                   	push   %eax
f0113431:	e8 0c 5d ff ff       	call   f0109142 <env_create>
f0113436:	83 c4 10             	add    $0x10,%esp
f0113439:	89 45 d8             	mov    %eax,-0x28(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f011343c:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011343f:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0113445:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	lcr3(env->env_cr3) ;
f0113448:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011344b:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f0113451:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0113457:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011345d:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f0113460:	c7 85 2e ff ff ff 61 	movl   $0x20707561,-0xd2(%ebp)
f0113467:	75 70 20 
f011346a:	c7 85 32 ff ff ff 00 	movl   $0x0,-0xce(%ebp)
f0113471:	00 00 00 
f0113474:	8d 95 36 ff ff ff    	lea    -0xca(%ebp),%edx
f011347a:	b9 03 00 00 00       	mov    $0x3,%ecx
f011347f:	b8 00 00 00 00       	mov    $0x0,%eax
f0113484:	89 d7                	mov    %edx,%edi
f0113486:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f0113488:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011348b:	8b 40 4c             	mov    0x4c(%eax),%eax
f011348e:	83 ec 08             	sub    $0x8,%esp
f0113491:	8d 95 1a ff ff ff    	lea    -0xe6(%ebp),%edx
f0113497:	52                   	push   %edx
f0113498:	50                   	push   %eax
f0113499:	e8 80 c4 01 00       	call   f012f91e <ltostr>
f011349e:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f01134a1:	83 ec 04             	sub    $0x4,%esp
f01134a4:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f01134aa:	50                   	push   %eax
f01134ab:	8d 85 1a ff ff ff    	lea    -0xe6(%ebp),%eax
f01134b1:	50                   	push   %eax
f01134b2:	8d 85 2e ff ff ff    	lea    -0xd2(%ebp),%eax
f01134b8:	50                   	push   %eax
f01134b9:	e8 58 c5 01 00       	call   f012fa16 <strcconcat>
f01134be:	83 c4 10             	add    $0x10,%esp
	//===================================================

	ClearUserSpace(proc_directory);
f01134c1:	83 ec 0c             	sub    $0xc,%esp
f01134c4:	ff 75 d4             	pushl  -0x2c(%ebp)
f01134c7:	e8 ac 3e 00 00       	call   f0117378 <ClearUserSpace>
f01134cc:	83 c4 10             	add    $0x10,%esp
	int numOfArgs = 0;
f01134cf:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
	char *args[MAX_ARGUMENTS] ;
	uint32 res =0;
f01134d6:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	uint32 eval = 0; int correct = 1 ;
f01134dd:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f01134e4:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	uint32 numOfFreeFramesBefore, numOfFreeFramesAfter ;
	char *ch1, *ch2, *ch3, *ch4, *ch5, *ch6, *ch7,*ch8, *ch9, *ch10, *ch11, *ch12 ;
	char tch[13];
	int kilo = 1024 ;
f01134eb:	c7 45 c4 00 04 00 00 	movl   $0x400,-0x3c(%ebp)
	int mega = 1024*1024 ;
f01134f2:	c7 45 c0 00 00 10 00 	movl   $0x100000,-0x40(%ebp)
	/*==================================================*/
	/*PART I: Destination page(s) exist & read only 20% */
	/*==================================================*/
	cprintf("\nCASE I: Destination page(s) exist & read only [20%]\n") ;
f01134f9:	83 ec 0c             	sub    $0xc,%esp
f01134fc:	68 88 82 13 f0       	push   $0xf0138288
f0113501:	e8 2b d9 fe ff       	call   f0100e31 <cprintf>
f0113506:	83 c4 10             	add    $0x10,%esp
	{
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x0", c1); execute_command(c1);
f0113509:	83 ec 04             	sub    $0x4,%esp
f011350c:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0113512:	50                   	push   %eax
f0113513:	68 be 82 13 f0       	push   $0xf01382be
f0113518:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f011351e:	50                   	push   %eax
f011351f:	e8 f2 c4 01 00       	call   f012fa16 <strcconcat>
f0113524:	83 c4 10             	add    $0x10,%esp
f0113527:	83 ec 0c             	sub    $0xc,%esp
f011352a:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0113530:	50                   	push   %eax
f0113531:	e8 8d e6 fe ff       	call   f0101bc3 <execute_command>
f0113536:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x1000", c1); execute_command(c1);
f0113539:	83 ec 04             	sub    $0x4,%esp
f011353c:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0113542:	50                   	push   %eax
f0113543:	68 c3 82 13 f0       	push   $0xf01382c3
f0113548:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f011354e:	50                   	push   %eax
f011354f:	e8 c2 c4 01 00       	call   f012fa16 <strcconcat>
f0113554:	83 c4 10             	add    $0x10,%esp
f0113557:	83 ec 0c             	sub    $0xc,%esp
f011355a:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0113560:	50                   	push   %eax
f0113561:	e8 5d e6 fe ff       	call   f0101bc3 <execute_command>
f0113566:	83 c4 10             	add    $0x10,%esp
		/*write on 1st page*/
		char c2[100] = "wum 0x000000 a";execute_command(c2);
f0113569:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f011356f:	bb c9 85 13 f0       	mov    $0xf01385c9,%ebx
f0113574:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113579:	89 c7                	mov    %eax,%edi
f011357b:	89 de                	mov    %ebx,%esi
f011357d:	89 d1                	mov    %edx,%ecx
f011357f:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113581:	8d 95 c2 fa ff ff    	lea    -0x53e(%ebp),%edx
f0113587:	b9 55 00 00 00       	mov    $0x55,%ecx
f011358c:	b0 00                	mov    $0x0,%al
f011358e:	89 d7                	mov    %edx,%edi
f0113590:	f3 aa                	rep stos %al,%es:(%edi)
f0113592:	83 ec 0c             	sub    $0xc,%esp
f0113595:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f011359b:	50                   	push   %eax
f011359c:	e8 22 e6 fe ff       	call   f0101bc3 <execute_command>
f01135a1:	83 c4 10             	add    $0x10,%esp
		char c3[100] = "wum 0x0007FF b";execute_command(c3);
f01135a4:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f01135aa:	bb 2d 86 13 f0       	mov    $0xf013862d,%ebx
f01135af:	ba 0f 00 00 00       	mov    $0xf,%edx
f01135b4:	89 c7                	mov    %eax,%edi
f01135b6:	89 de                	mov    %ebx,%esi
f01135b8:	89 d1                	mov    %edx,%ecx
f01135ba:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01135bc:	8d 95 26 fb ff ff    	lea    -0x4da(%ebp),%edx
f01135c2:	b9 55 00 00 00       	mov    $0x55,%ecx
f01135c7:	b0 00                	mov    $0x0,%al
f01135c9:	89 d7                	mov    %edx,%edi
f01135cb:	f3 aa                	rep stos %al,%es:(%edi)
f01135cd:	83 ec 0c             	sub    $0xc,%esp
f01135d0:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f01135d6:	50                   	push   %eax
f01135d7:	e8 e7 e5 fe ff       	call   f0101bc3 <execute_command>
f01135dc:	83 c4 10             	add    $0x10,%esp
		char c4[100] = "wum 0x000FFF c";execute_command(c4);
f01135df:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f01135e5:	bb 91 86 13 f0       	mov    $0xf0138691,%ebx
f01135ea:	ba 0f 00 00 00       	mov    $0xf,%edx
f01135ef:	89 c7                	mov    %eax,%edi
f01135f1:	89 de                	mov    %ebx,%esi
f01135f3:	89 d1                	mov    %edx,%ecx
f01135f5:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01135f7:	8d 95 8a fb ff ff    	lea    -0x476(%ebp),%edx
f01135fd:	b9 55 00 00 00       	mov    $0x55,%ecx
f0113602:	b0 00                	mov    $0x0,%al
f0113604:	89 d7                	mov    %edx,%edi
f0113606:	f3 aa                	rep stos %al,%es:(%edi)
f0113608:	83 ec 0c             	sub    $0xc,%esp
f011360b:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f0113611:	50                   	push   %eax
f0113612:	e8 ac e5 fe ff       	call   f0101bc3 <execute_command>
f0113617:	83 c4 10             	add    $0x10,%esp
		/*write on 2nd page*/
		char c22[100] = "wum 0x001000 d";execute_command(c22);
f011361a:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f0113620:	bb f5 86 13 f0       	mov    $0xf01386f5,%ebx
f0113625:	ba 0f 00 00 00       	mov    $0xf,%edx
f011362a:	89 c7                	mov    %eax,%edi
f011362c:	89 de                	mov    %ebx,%esi
f011362e:	89 d1                	mov    %edx,%ecx
f0113630:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113632:	8d 95 ee fb ff ff    	lea    -0x412(%ebp),%edx
f0113638:	b9 55 00 00 00       	mov    $0x55,%ecx
f011363d:	b0 00                	mov    $0x0,%al
f011363f:	89 d7                	mov    %edx,%edi
f0113641:	f3 aa                	rep stos %al,%es:(%edi)
f0113643:	83 ec 0c             	sub    $0xc,%esp
f0113646:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f011364c:	50                   	push   %eax
f011364d:	e8 71 e5 fe ff       	call   f0101bc3 <execute_command>
f0113652:	83 c4 10             	add    $0x10,%esp
		char c23[100] = "wum 0x0017FF e";execute_command(c23);
f0113655:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f011365b:	bb 59 87 13 f0       	mov    $0xf0138759,%ebx
f0113660:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113665:	89 c7                	mov    %eax,%edi
f0113667:	89 de                	mov    %ebx,%esi
f0113669:	89 d1                	mov    %edx,%ecx
f011366b:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011366d:	8d 95 52 fc ff ff    	lea    -0x3ae(%ebp),%edx
f0113673:	b9 55 00 00 00       	mov    $0x55,%ecx
f0113678:	b0 00                	mov    $0x0,%al
f011367a:	89 d7                	mov    %edx,%edi
f011367c:	f3 aa                	rep stos %al,%es:(%edi)
f011367e:	83 ec 0c             	sub    $0xc,%esp
f0113681:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f0113687:	50                   	push   %eax
f0113688:	e8 36 e5 fe ff       	call   f0101bc3 <execute_command>
f011368d:	83 c4 10             	add    $0x10,%esp
		char c24[100] = "wum 0x001FFF f";execute_command(c24);
f0113690:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f0113696:	bb bd 87 13 f0       	mov    $0xf01387bd,%ebx
f011369b:	ba 0f 00 00 00       	mov    $0xf,%edx
f01136a0:	89 c7                	mov    %eax,%edi
f01136a2:	89 de                	mov    %ebx,%esi
f01136a4:	89 d1                	mov    %edx,%ecx
f01136a6:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01136a8:	8d 95 b6 fc ff ff    	lea    -0x34a(%ebp),%edx
f01136ae:	b9 55 00 00 00       	mov    $0x55,%ecx
f01136b3:	b0 00                	mov    $0x0,%al
f01136b5:	89 d7                	mov    %edx,%edi
f01136b7:	f3 aa                	rep stos %al,%es:(%edi)
f01136b9:	83 ec 0c             	sub    $0xc,%esp
f01136bc:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f01136c2:	50                   	push   %eax
f01136c3:	e8 fb e4 fe ff       	call   f0101bc3 <execute_command>
f01136c8:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c5[100] ;strcconcat(aup_cmd, " 0x100000", c5); execute_command(c5);
f01136cb:	83 ec 04             	sub    $0x4,%esp
f01136ce:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01136d4:	50                   	push   %eax
f01136d5:	68 cb 82 13 f0       	push   $0xf01382cb
f01136da:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f01136e0:	50                   	push   %eax
f01136e1:	e8 30 c3 01 00       	call   f012fa16 <strcconcat>
f01136e6:	83 c4 10             	add    $0x10,%esp
f01136e9:	83 ec 0c             	sub    $0xc,%esp
f01136ec:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01136f2:	50                   	push   %eax
f01136f3:	e8 cb e4 fe ff       	call   f0101bc3 <execute_command>
f01136f8:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x101000 r", c5); execute_command(c5);
f01136fb:	83 ec 04             	sub    $0x4,%esp
f01136fe:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0113704:	50                   	push   %eax
f0113705:	68 d5 82 13 f0       	push   $0xf01382d5
f011370a:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0113710:	50                   	push   %eax
f0113711:	e8 00 c3 01 00       	call   f012fa16 <strcconcat>
f0113716:	83 c4 10             	add    $0x10,%esp
f0113719:	83 ec 0c             	sub    $0xc,%esp
f011371c:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0113722:	50                   	push   %eax
f0113723:	e8 9b e4 fe ff       	call   f0101bc3 <execute_command>
f0113728:	83 c4 10             	add    $0x10,%esp
		char c6[100] = "wum 0x100000 x";execute_command(c6);
f011372b:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0113731:	bb 21 88 13 f0       	mov    $0xf0138821,%ebx
f0113736:	ba 0f 00 00 00       	mov    $0xf,%edx
f011373b:	89 c7                	mov    %eax,%edi
f011373d:	89 de                	mov    %ebx,%esi
f011373f:	89 d1                	mov    %edx,%ecx
f0113741:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113743:	8d 95 7e fd ff ff    	lea    -0x282(%ebp),%edx
f0113749:	b9 55 00 00 00       	mov    $0x55,%ecx
f011374e:	b0 00                	mov    $0x0,%al
f0113750:	89 d7                	mov    %edx,%edi
f0113752:	f3 aa                	rep stos %al,%es:(%edi)
f0113754:	83 ec 0c             	sub    $0xc,%esp
f0113757:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f011375d:	50                   	push   %eax
f011375e:	e8 60 e4 fe ff       	call   f0101bc3 <execute_command>
f0113763:	83 c4 10             	add    $0x10,%esp
		char c7[100] = "wum 0x1007FF y";execute_command(c7);
f0113766:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f011376c:	bb 85 88 13 f0       	mov    $0xf0138885,%ebx
f0113771:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113776:	89 c7                	mov    %eax,%edi
f0113778:	89 de                	mov    %ebx,%esi
f011377a:	89 d1                	mov    %edx,%ecx
f011377c:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011377e:	8d 95 e2 fd ff ff    	lea    -0x21e(%ebp),%edx
f0113784:	b9 55 00 00 00       	mov    $0x55,%ecx
f0113789:	b0 00                	mov    $0x0,%al
f011378b:	89 d7                	mov    %edx,%edi
f011378d:	f3 aa                	rep stos %al,%es:(%edi)
f011378f:	83 ec 0c             	sub    $0xc,%esp
f0113792:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0113798:	50                   	push   %eax
f0113799:	e8 25 e4 fe ff       	call   f0101bc3 <execute_command>
f011379e:	83 c4 10             	add    $0x10,%esp
		char c8[100] = "wum 0x100FFF z";execute_command(c8);
f01137a1:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f01137a7:	bb e9 88 13 f0       	mov    $0xf01388e9,%ebx
f01137ac:	ba 0f 00 00 00       	mov    $0xf,%edx
f01137b1:	89 c7                	mov    %eax,%edi
f01137b3:	89 de                	mov    %ebx,%esi
f01137b5:	89 d1                	mov    %edx,%ecx
f01137b7:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01137b9:	8d 95 46 fe ff ff    	lea    -0x1ba(%ebp),%edx
f01137bf:	b9 55 00 00 00       	mov    $0x55,%ecx
f01137c4:	b0 00                	mov    $0x0,%al
f01137c6:	89 d7                	mov    %edx,%edi
f01137c8:	f3 aa                	rep stos %al,%es:(%edi)
f01137ca:	83 ec 0c             	sub    $0xc,%esp
f01137cd:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f01137d3:	50                   	push   %eax
f01137d4:	e8 ea e3 fe ff       	call   f0101bc3 <execute_command>
f01137d9:	83 c4 10             	add    $0x10,%esp

		ch1 = (char*)0x000000; ch2 = (char*)0x100000;
f01137dc:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
f01137e3:	c7 45 b8 00 00 10 00 	movl   $0x100000,-0x48(%ebp)
		ch3 = (char*)0x0007FF; ch4 = (char*)0x1007FF;
f01137ea:	c7 45 b4 ff 07 00 00 	movl   $0x7ff,-0x4c(%ebp)
f01137f1:	c7 45 b0 ff 07 10 00 	movl   $0x1007ff,-0x50(%ebp)
		ch5 = (char*)0x000FFF; ch6 = (char*)0x100FFF;
f01137f8:	c7 45 ac ff 0f 00 00 	movl   $0xfff,-0x54(%ebp)
f01137ff:	c7 45 a8 ff 0f 10 00 	movl   $0x100fff,-0x58(%ebp)
		ch7 = (char*)0x001000; ch8 = (char*)0x101000;
f0113806:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011380d:	c7 45 a0 00 10 10 00 	movl   $0x101000,-0x60(%ebp)
		ch9 = (char*)0x0017FF; ch10= (char*)0x1017FF;
f0113814:	c7 45 9c ff 17 00 00 	movl   $0x17ff,-0x64(%ebp)
f011381b:	c7 45 98 ff 17 10 00 	movl   $0x1017ff,-0x68(%ebp)
		ch11= (char*)0x001FFF; ch12= (char*)0x101FFF;
f0113822:	c7 45 94 ff 1f 00 00 	movl   $0x1fff,-0x6c(%ebp)
f0113829:	c7 45 90 ff 1f 10 00 	movl   $0x101fff,-0x70(%ebp)

		tch[8] = *ch8 ;tch[10] = *ch10 ;tch[12] = *ch12 ;
f0113830:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0113833:	8a 00                	mov    (%eax),%al
f0113835:	88 85 a3 fe ff ff    	mov    %al,-0x15d(%ebp)
f011383b:	8b 45 98             	mov    -0x68(%ebp),%eax
f011383e:	8a 00                	mov    (%eax),%al
f0113840:	88 85 a5 fe ff ff    	mov    %al,-0x15b(%ebp)
f0113846:	8b 45 90             	mov    -0x70(%ebp),%eax
f0113849:	8a 00                	mov    (%eax),%al
f011384b:	88 85 a7 fe ff ff    	mov    %al,-0x159(%ebp)

		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113851:	e8 e8 95 ff ff       	call   f010ce3e <sys_calculate_free_frames>
f0113856:	89 45 8c             	mov    %eax,-0x74(%ebp)

		int ret = copy_paste_chunk(proc_directory, 0x0, 0x100000, 6*kilo);
f0113859:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f011385c:	89 d0                	mov    %edx,%eax
f011385e:	01 c0                	add    %eax,%eax
f0113860:	01 d0                	add    %edx,%eax
f0113862:	01 c0                	add    %eax,%eax
f0113864:	50                   	push   %eax
f0113865:	68 00 00 10 00       	push   $0x100000
f011386a:	6a 00                	push   $0x0
f011386c:	ff 75 d4             	pushl  -0x2c(%ebp)
f011386f:	e8 aa 57 ff ff       	call   f010901e <copy_paste_chunk>
f0113874:	83 c4 10             	add    $0x10,%esp
f0113877:	89 45 88             	mov    %eax,-0x78(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f011387a:	e8 bf 95 ff ff       	call   f010ce3e <sys_calculate_free_frames>
f011387f:	89 45 84             	mov    %eax,-0x7c(%ebp)

		correct = 1 ;
f0113882:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		if (ret != -1 || numOfFreeFramesBefore != numOfFreeFramesAfter)
f0113889:	83 7d 88 ff          	cmpl   $0xffffffff,-0x78(%ebp)
f011388d:	75 08                	jne    f0113897 <test_copy_paste_chunk+0x4a8>
f011388f:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0113892:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f0113895:	74 2b                	je     f01138c2 <test_copy_paste_chunk+0x4d3>
		{
			warn("[EVAL] copy_paste_chunk: Failed (dest is read-only... operation should be denied) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0113897:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011389a:	2b 45 84             	sub    -0x7c(%ebp),%eax
f011389d:	83 ec 0c             	sub    $0xc,%esp
f01138a0:	50                   	push   %eax
f01138a1:	ff 75 88             	pushl  -0x78(%ebp)
f01138a4:	68 e4 82 13 f0       	push   $0xf01382e4
f01138a9:	68 3c 02 00 00       	push   $0x23c
f01138ae:	68 52 7b 13 f0       	push   $0xf0137b52
f01138b3:	e8 06 cb fe ff       	call   f01003be <_warn>
f01138b8:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01138bb:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f01138c2:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01138c6:	74 04                	je     f01138cc <test_copy_paste_chunk+0x4dd>
f01138c8:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01138cc:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (*ch1 != 'a' || *ch2 != 'x' || *ch3 != 'b' || *ch4 != 'y' || *ch5 != 'c' || *ch6 != 'z'
f01138d3:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01138d6:	8a 00                	mov    (%eax),%al
f01138d8:	3c 61                	cmp    $0x61,%al
f01138da:	75 75                	jne    f0113951 <test_copy_paste_chunk+0x562>
f01138dc:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01138df:	8a 00                	mov    (%eax),%al
f01138e1:	3c 78                	cmp    $0x78,%al
f01138e3:	75 6c                	jne    f0113951 <test_copy_paste_chunk+0x562>
f01138e5:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01138e8:	8a 00                	mov    (%eax),%al
f01138ea:	3c 62                	cmp    $0x62,%al
f01138ec:	75 63                	jne    f0113951 <test_copy_paste_chunk+0x562>
f01138ee:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01138f1:	8a 00                	mov    (%eax),%al
f01138f3:	3c 79                	cmp    $0x79,%al
f01138f5:	75 5a                	jne    f0113951 <test_copy_paste_chunk+0x562>
f01138f7:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01138fa:	8a 00                	mov    (%eax),%al
f01138fc:	3c 63                	cmp    $0x63,%al
f01138fe:	75 51                	jne    f0113951 <test_copy_paste_chunk+0x562>
f0113900:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0113903:	8a 00                	mov    (%eax),%al
f0113905:	3c 7a                	cmp    $0x7a,%al
f0113907:	75 48                	jne    f0113951 <test_copy_paste_chunk+0x562>
				||  *ch7 != 'd' || *ch8 != tch[8] || *ch9 != 'e' || *ch10 != tch[10] || *ch11!= 'f' || *ch12 != tch[12])
f0113909:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011390c:	8a 00                	mov    (%eax),%al
f011390e:	3c 64                	cmp    $0x64,%al
f0113910:	75 3f                	jne    f0113951 <test_copy_paste_chunk+0x562>
f0113912:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0113915:	8a 10                	mov    (%eax),%dl
f0113917:	8a 85 a3 fe ff ff    	mov    -0x15d(%ebp),%al
f011391d:	38 c2                	cmp    %al,%dl
f011391f:	75 30                	jne    f0113951 <test_copy_paste_chunk+0x562>
f0113921:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0113924:	8a 00                	mov    (%eax),%al
f0113926:	3c 65                	cmp    $0x65,%al
f0113928:	75 27                	jne    f0113951 <test_copy_paste_chunk+0x562>
f011392a:	8b 45 98             	mov    -0x68(%ebp),%eax
f011392d:	8a 10                	mov    (%eax),%dl
f011392f:	8a 85 a5 fe ff ff    	mov    -0x15b(%ebp),%al
f0113935:	38 c2                	cmp    %al,%dl
f0113937:	75 18                	jne    f0113951 <test_copy_paste_chunk+0x562>
f0113939:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011393c:	8a 00                	mov    (%eax),%al
f011393e:	3c 66                	cmp    $0x66,%al
f0113940:	75 0f                	jne    f0113951 <test_copy_paste_chunk+0x562>
f0113942:	8b 45 90             	mov    -0x70(%ebp),%eax
f0113945:	8a 10                	mov    (%eax),%dl
f0113947:	8a 85 a7 fe ff ff    	mov    -0x159(%ebp),%al
f011394d:	38 c2                	cmp    %al,%dl
f011394f:	74 21                	je     f0113972 <test_copy_paste_chunk+0x583>
		{
			warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f0113951:	83 ec 04             	sub    $0x4,%esp
f0113954:	68 48 83 13 f0       	push   $0xf0138348
f0113959:	68 45 02 00 00       	push   $0x245
f011395e:	68 52 7b 13 f0       	push   $0xf0137b52
f0113963:	e8 56 ca fe ff       	call   f01003be <_warn>
f0113968:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011396b:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f0113972:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113976:	74 04                	je     f011397c <test_copy_paste_chunk+0x58d>
f0113978:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011397c:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	}
	cprintf("\nCASE I: END \n") ;
f0113983:	83 ec 0c             	sub    $0xc,%esp
f0113986:	68 82 83 13 f0       	push   $0xf0138382
f011398b:	e8 a1 d4 fe ff       	call   f0100e31 <cprintf>
f0113990:	83 c4 10             	add    $0x10,%esp

	/*==================================================*/
	/*PART II: Destination page(s) exist & writable 40% */
	/*==================================================*/
	cprintf("\nCASE II: Destination page(s) exist & writable [40%]\n") ;
f0113993:	83 ec 0c             	sub    $0xc,%esp
f0113996:	68 94 83 13 f0       	push   $0xf0138394
f011399b:	e8 91 d4 fe ff       	call   f0100e31 <cprintf>
f01139a0:	83 c4 10             	add    $0x10,%esp
	{
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x200000", c1); execute_command(c1);
f01139a3:	83 ec 04             	sub    $0x4,%esp
f01139a6:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f01139ac:	50                   	push   %eax
f01139ad:	68 ca 83 13 f0       	push   $0xf01383ca
f01139b2:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f01139b8:	50                   	push   %eax
f01139b9:	e8 58 c0 01 00       	call   f012fa16 <strcconcat>
f01139be:	83 c4 10             	add    $0x10,%esp
f01139c1:	83 ec 0c             	sub    $0xc,%esp
f01139c4:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f01139ca:	50                   	push   %eax
f01139cb:	e8 f3 e1 fe ff       	call   f0101bc3 <execute_command>
f01139d0:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x201000", c1); execute_command(c1);
f01139d3:	83 ec 04             	sub    $0x4,%esp
f01139d6:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f01139dc:	50                   	push   %eax
f01139dd:	68 d4 83 13 f0       	push   $0xf01383d4
f01139e2:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f01139e8:	50                   	push   %eax
f01139e9:	e8 28 c0 01 00       	call   f012fa16 <strcconcat>
f01139ee:	83 c4 10             	add    $0x10,%esp
f01139f1:	83 ec 0c             	sub    $0xc,%esp
f01139f4:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f01139fa:	50                   	push   %eax
f01139fb:	e8 c3 e1 fe ff       	call   f0101bc3 <execute_command>
f0113a00:	83 c4 10             	add    $0x10,%esp
		/*write on 1st page*/
		char c2[100] = "wum 0x200000 a";execute_command(c2);
f0113a03:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f0113a09:	bb 4d 89 13 f0       	mov    $0xf013894d,%ebx
f0113a0e:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113a13:	89 c7                	mov    %eax,%edi
f0113a15:	89 de                	mov    %ebx,%esi
f0113a17:	89 d1                	mov    %edx,%ecx
f0113a19:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113a1b:	8d 95 c2 fa ff ff    	lea    -0x53e(%ebp),%edx
f0113a21:	b9 55 00 00 00       	mov    $0x55,%ecx
f0113a26:	b0 00                	mov    $0x0,%al
f0113a28:	89 d7                	mov    %edx,%edi
f0113a2a:	f3 aa                	rep stos %al,%es:(%edi)
f0113a2c:	83 ec 0c             	sub    $0xc,%esp
f0113a2f:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f0113a35:	50                   	push   %eax
f0113a36:	e8 88 e1 fe ff       	call   f0101bc3 <execute_command>
f0113a3b:	83 c4 10             	add    $0x10,%esp
		char c3[100] = "wum 0x2007FF b";execute_command(c3);
f0113a3e:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f0113a44:	bb b1 89 13 f0       	mov    $0xf01389b1,%ebx
f0113a49:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113a4e:	89 c7                	mov    %eax,%edi
f0113a50:	89 de                	mov    %ebx,%esi
f0113a52:	89 d1                	mov    %edx,%ecx
f0113a54:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113a56:	8d 95 26 fb ff ff    	lea    -0x4da(%ebp),%edx
f0113a5c:	b9 55 00 00 00       	mov    $0x55,%ecx
f0113a61:	b0 00                	mov    $0x0,%al
f0113a63:	89 d7                	mov    %edx,%edi
f0113a65:	f3 aa                	rep stos %al,%es:(%edi)
f0113a67:	83 ec 0c             	sub    $0xc,%esp
f0113a6a:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f0113a70:	50                   	push   %eax
f0113a71:	e8 4d e1 fe ff       	call   f0101bc3 <execute_command>
f0113a76:	83 c4 10             	add    $0x10,%esp
		char c4[100] = "wum 0x200FFF c";execute_command(c4);
f0113a79:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f0113a7f:	bb 15 8a 13 f0       	mov    $0xf0138a15,%ebx
f0113a84:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113a89:	89 c7                	mov    %eax,%edi
f0113a8b:	89 de                	mov    %ebx,%esi
f0113a8d:	89 d1                	mov    %edx,%ecx
f0113a8f:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113a91:	8d 95 8a fb ff ff    	lea    -0x476(%ebp),%edx
f0113a97:	b9 55 00 00 00       	mov    $0x55,%ecx
f0113a9c:	b0 00                	mov    $0x0,%al
f0113a9e:	89 d7                	mov    %edx,%edi
f0113aa0:	f3 aa                	rep stos %al,%es:(%edi)
f0113aa2:	83 ec 0c             	sub    $0xc,%esp
f0113aa5:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f0113aab:	50                   	push   %eax
f0113aac:	e8 12 e1 fe ff       	call   f0101bc3 <execute_command>
f0113ab1:	83 c4 10             	add    $0x10,%esp
		/*write on 2nd page*/
		char c22[100] = "wum 0x201000 d";execute_command(c22);
f0113ab4:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f0113aba:	bb 79 8a 13 f0       	mov    $0xf0138a79,%ebx
f0113abf:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113ac4:	89 c7                	mov    %eax,%edi
f0113ac6:	89 de                	mov    %ebx,%esi
f0113ac8:	89 d1                	mov    %edx,%ecx
f0113aca:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113acc:	8d 95 ee fb ff ff    	lea    -0x412(%ebp),%edx
f0113ad2:	b9 55 00 00 00       	mov    $0x55,%ecx
f0113ad7:	b0 00                	mov    $0x0,%al
f0113ad9:	89 d7                	mov    %edx,%edi
f0113adb:	f3 aa                	rep stos %al,%es:(%edi)
f0113add:	83 ec 0c             	sub    $0xc,%esp
f0113ae0:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f0113ae6:	50                   	push   %eax
f0113ae7:	e8 d7 e0 fe ff       	call   f0101bc3 <execute_command>
f0113aec:	83 c4 10             	add    $0x10,%esp
		char c23[100] = "wum 0x2017FF e";execute_command(c23);
f0113aef:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f0113af5:	bb dd 8a 13 f0       	mov    $0xf0138add,%ebx
f0113afa:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113aff:	89 c7                	mov    %eax,%edi
f0113b01:	89 de                	mov    %ebx,%esi
f0113b03:	89 d1                	mov    %edx,%ecx
f0113b05:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113b07:	8d 95 52 fc ff ff    	lea    -0x3ae(%ebp),%edx
f0113b0d:	b9 55 00 00 00       	mov    $0x55,%ecx
f0113b12:	b0 00                	mov    $0x0,%al
f0113b14:	89 d7                	mov    %edx,%edi
f0113b16:	f3 aa                	rep stos %al,%es:(%edi)
f0113b18:	83 ec 0c             	sub    $0xc,%esp
f0113b1b:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f0113b21:	50                   	push   %eax
f0113b22:	e8 9c e0 fe ff       	call   f0101bc3 <execute_command>
f0113b27:	83 c4 10             	add    $0x10,%esp
		char c24[100] = "wum 0x201FFF f";execute_command(c24);
f0113b2a:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f0113b30:	bb 41 8b 13 f0       	mov    $0xf0138b41,%ebx
f0113b35:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113b3a:	89 c7                	mov    %eax,%edi
f0113b3c:	89 de                	mov    %ebx,%esi
f0113b3e:	89 d1                	mov    %edx,%ecx
f0113b40:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113b42:	8d 95 b6 fc ff ff    	lea    -0x34a(%ebp),%edx
f0113b48:	b9 55 00 00 00       	mov    $0x55,%ecx
f0113b4d:	b0 00                	mov    $0x0,%al
f0113b4f:	89 d7                	mov    %edx,%edi
f0113b51:	f3 aa                	rep stos %al,%es:(%edi)
f0113b53:	83 ec 0c             	sub    $0xc,%esp
f0113b56:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f0113b5c:	50                   	push   %eax
f0113b5d:	e8 61 e0 fe ff       	call   f0101bc3 <execute_command>
f0113b62:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c5[100] ;strcconcat(aup_cmd, " 0x400000", c5); execute_command(c5);
f0113b65:	83 ec 04             	sub    $0x4,%esp
f0113b68:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0113b6e:	50                   	push   %eax
f0113b6f:	68 de 83 13 f0       	push   $0xf01383de
f0113b74:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0113b7a:	50                   	push   %eax
f0113b7b:	e8 96 be 01 00       	call   f012fa16 <strcconcat>
f0113b80:	83 c4 10             	add    $0x10,%esp
f0113b83:	83 ec 0c             	sub    $0xc,%esp
f0113b86:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0113b8c:	50                   	push   %eax
f0113b8d:	e8 31 e0 fe ff       	call   f0101bc3 <execute_command>
f0113b92:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x401000", c5); execute_command(c5);
f0113b95:	83 ec 04             	sub    $0x4,%esp
f0113b98:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0113b9e:	50                   	push   %eax
f0113b9f:	68 e8 83 13 f0       	push   $0xf01383e8
f0113ba4:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0113baa:	50                   	push   %eax
f0113bab:	e8 66 be 01 00       	call   f012fa16 <strcconcat>
f0113bb0:	83 c4 10             	add    $0x10,%esp
f0113bb3:	83 ec 0c             	sub    $0xc,%esp
f0113bb6:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0113bbc:	50                   	push   %eax
f0113bbd:	e8 01 e0 fe ff       	call   f0101bc3 <execute_command>
f0113bc2:	83 c4 10             	add    $0x10,%esp
		char c6[100] = "wum 0x400000 x";execute_command(c6);
f0113bc5:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0113bcb:	bb a5 8b 13 f0       	mov    $0xf0138ba5,%ebx
f0113bd0:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113bd5:	89 c7                	mov    %eax,%edi
f0113bd7:	89 de                	mov    %ebx,%esi
f0113bd9:	89 d1                	mov    %edx,%ecx
f0113bdb:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113bdd:	8d 95 7e fd ff ff    	lea    -0x282(%ebp),%edx
f0113be3:	b9 55 00 00 00       	mov    $0x55,%ecx
f0113be8:	b0 00                	mov    $0x0,%al
f0113bea:	89 d7                	mov    %edx,%edi
f0113bec:	f3 aa                	rep stos %al,%es:(%edi)
f0113bee:	83 ec 0c             	sub    $0xc,%esp
f0113bf1:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0113bf7:	50                   	push   %eax
f0113bf8:	e8 c6 df fe ff       	call   f0101bc3 <execute_command>
f0113bfd:	83 c4 10             	add    $0x10,%esp
		char c7[100] = "wum 0x4007FF y";execute_command(c7);
f0113c00:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0113c06:	bb 09 8c 13 f0       	mov    $0xf0138c09,%ebx
f0113c0b:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113c10:	89 c7                	mov    %eax,%edi
f0113c12:	89 de                	mov    %ebx,%esi
f0113c14:	89 d1                	mov    %edx,%ecx
f0113c16:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113c18:	8d 95 e2 fd ff ff    	lea    -0x21e(%ebp),%edx
f0113c1e:	b9 55 00 00 00       	mov    $0x55,%ecx
f0113c23:	b0 00                	mov    $0x0,%al
f0113c25:	89 d7                	mov    %edx,%edi
f0113c27:	f3 aa                	rep stos %al,%es:(%edi)
f0113c29:	83 ec 0c             	sub    $0xc,%esp
f0113c2c:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0113c32:	50                   	push   %eax
f0113c33:	e8 8b df fe ff       	call   f0101bc3 <execute_command>
f0113c38:	83 c4 10             	add    $0x10,%esp
		char c8[100] = "wum 0x400FFF z";execute_command(c8);
f0113c3b:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0113c41:	bb 6d 8c 13 f0       	mov    $0xf0138c6d,%ebx
f0113c46:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113c4b:	89 c7                	mov    %eax,%edi
f0113c4d:	89 de                	mov    %ebx,%esi
f0113c4f:	89 d1                	mov    %edx,%ecx
f0113c51:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113c53:	8d 95 46 fe ff ff    	lea    -0x1ba(%ebp),%edx
f0113c59:	b9 55 00 00 00       	mov    $0x55,%ecx
f0113c5e:	b0 00                	mov    $0x0,%al
f0113c60:	89 d7                	mov    %edx,%edi
f0113c62:	f3 aa                	rep stos %al,%es:(%edi)
f0113c64:	83 ec 0c             	sub    $0xc,%esp
f0113c67:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0113c6d:	50                   	push   %eax
f0113c6e:	e8 50 df fe ff       	call   f0101bc3 <execute_command>
f0113c73:	83 c4 10             	add    $0x10,%esp

		//Test1
		ch1 = (char*)0x200000; ch2 = (char*)0x400000;
f0113c76:	c7 45 bc 00 00 20 00 	movl   $0x200000,-0x44(%ebp)
f0113c7d:	c7 45 b8 00 00 40 00 	movl   $0x400000,-0x48(%ebp)
		ch3 = (char*)0x2007FF; ch4 = (char*)0x4007FF;
f0113c84:	c7 45 b4 ff 07 20 00 	movl   $0x2007ff,-0x4c(%ebp)
f0113c8b:	c7 45 b0 ff 07 40 00 	movl   $0x4007ff,-0x50(%ebp)
		ch5 = (char*)0x200FFF; ch6 = (char*)0x400FFF;
f0113c92:	c7 45 ac ff 0f 20 00 	movl   $0x200fff,-0x54(%ebp)
f0113c99:	c7 45 a8 ff 0f 40 00 	movl   $0x400fff,-0x58(%ebp)
		ch7 = (char*)0x201000; ch8 = (char*)0x401000;
f0113ca0:	c7 45 a4 00 10 20 00 	movl   $0x201000,-0x5c(%ebp)
f0113ca7:	c7 45 a0 00 10 40 00 	movl   $0x401000,-0x60(%ebp)
		ch9 = (char*)0x2017FF; ch10= (char*)0x4017FF;
f0113cae:	c7 45 9c ff 17 20 00 	movl   $0x2017ff,-0x64(%ebp)
f0113cb5:	c7 45 98 ff 17 40 00 	movl   $0x4017ff,-0x68(%ebp)
		ch11= (char*)0x201FFF; ch12= (char*)0x401FFF;
f0113cbc:	c7 45 94 ff 1f 20 00 	movl   $0x201fff,-0x6c(%ebp)
f0113cc3:	c7 45 90 ff 1f 40 00 	movl   $0x401fff,-0x70(%ebp)

		tch[12] = *ch12 ;
f0113cca:	8b 45 90             	mov    -0x70(%ebp),%eax
f0113ccd:	8a 00                	mov    (%eax),%al
f0113ccf:	88 85 a7 fe ff ff    	mov    %al,-0x159(%ebp)
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113cd5:	e8 64 91 ff ff       	call   f010ce3e <sys_calculate_free_frames>
f0113cda:	89 45 8c             	mov    %eax,-0x74(%ebp)

		int ret = copy_paste_chunk(proc_directory, 0x200000, 0x400000, 6*kilo);
f0113cdd:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113ce0:	89 d0                	mov    %edx,%eax
f0113ce2:	01 c0                	add    %eax,%eax
f0113ce4:	01 d0                	add    %edx,%eax
f0113ce6:	01 c0                	add    %eax,%eax
f0113ce8:	50                   	push   %eax
f0113ce9:	68 00 00 40 00       	push   $0x400000
f0113cee:	68 00 00 20 00       	push   $0x200000
f0113cf3:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113cf6:	e8 23 53 ff ff       	call   f010901e <copy_paste_chunk>
f0113cfb:	83 c4 10             	add    $0x10,%esp
f0113cfe:	89 45 80             	mov    %eax,-0x80(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113d01:	e8 38 91 ff ff       	call   f010ce3e <sys_calculate_free_frames>
f0113d06:	89 45 84             	mov    %eax,-0x7c(%ebp)

		correct = 1 ;
f0113d09:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		if (ret != 0 || numOfFreeFramesBefore != numOfFreeFramesAfter)
f0113d10:	83 7d 80 00          	cmpl   $0x0,-0x80(%ebp)
f0113d14:	75 08                	jne    f0113d1e <test_copy_paste_chunk+0x92f>
f0113d16:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0113d19:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f0113d1c:	74 2b                	je     f0113d49 <test_copy_paste_chunk+0x95a>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0113d1e:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0113d21:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0113d24:	83 ec 0c             	sub    $0xc,%esp
f0113d27:	50                   	push   %eax
f0113d28:	ff 75 80             	pushl  -0x80(%ebp)
f0113d2b:	68 f4 83 13 f0       	push   $0xf01383f4
f0113d30:	68 75 02 00 00       	push   $0x275
f0113d35:	68 52 7b 13 f0       	push   $0xf0137b52
f0113d3a:	e8 7f c6 fe ff       	call   f01003be <_warn>
f0113d3f:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113d42:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0113d49:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113d4d:	74 04                	je     f0113d53 <test_copy_paste_chunk+0x964>
f0113d4f:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113d53:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		int chkcnt = 1;
f0113d5a:	c7 85 7c ff ff ff 01 	movl   $0x1,-0x84(%ebp)
f0113d61:	00 00 00 
		if (CCP(proc_directory, 0x200000, 0x400000, 2*PAGE_SIZE, 1, 0x007, 0x007, 0x007, 0x007, CHK_COPY_PASTE) != 1)
f0113d64:	83 ec 08             	sub    $0x8,%esp
f0113d67:	6a 01                	push   $0x1
f0113d69:	6a 07                	push   $0x7
f0113d6b:	6a 07                	push   $0x7
f0113d6d:	6a 07                	push   $0x7
f0113d6f:	6a 07                	push   $0x7
f0113d71:	6a 01                	push   $0x1
f0113d73:	68 00 20 00 00       	push   $0x2000
f0113d78:	68 00 00 40 00       	push   $0x400000
f0113d7d:	68 00 00 20 00       	push   $0x200000
f0113d82:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113d85:	e8 22 36 00 00       	call   f01173ac <CCP>
f0113d8a:	83 c4 30             	add    $0x30,%esp
f0113d8d:	83 f8 01             	cmp    $0x1,%eax
f0113d90:	74 2b                	je     f0113dbd <test_copy_paste_chunk+0x9ce>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references)\n");
f0113d92:	83 ec 04             	sub    $0x4,%esp
f0113d95:	68 48 84 13 f0       	push   $0xf0138448
f0113d9a:	68 7e 02 00 00       	push   $0x27e
f0113d9f:	68 52 7b 13 f0       	push   $0xf0137b52
f0113da4:	e8 15 c6 fe ff       	call   f01003be <_warn>
f0113da9:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113dac:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chkcnt = 0;
f0113db3:	c7 85 7c ff ff ff 00 	movl   $0x0,-0x84(%ebp)
f0113dba:	00 00 00 
		}
		if (correct) eval += 5 ;
f0113dbd:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113dc1:	74 04                	je     f0113dc7 <test_copy_paste_chunk+0x9d8>
f0113dc3:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113dc7:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		*ch3 = 'y' ;	// wum 0x2007FF y
f0113dce:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113dd1:	c6 00 79             	movb   $0x79,(%eax)
		*ch6 = 'z' ;	// wum 0x400FFF z
f0113dd4:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0113dd7:	c6 00 7a             	movb   $0x7a,(%eax)
		*ch7 = 'w' ;	// wum 0x201000 w
f0113dda:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0113ddd:	c6 00 77             	movb   $0x77,(%eax)

		if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'c' || *ch6 != 'z'
f0113de0:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113de3:	8a 00                	mov    (%eax),%al
f0113de5:	3c 61                	cmp    $0x61,%al
f0113de7:	75 69                	jne    f0113e52 <test_copy_paste_chunk+0xa63>
f0113de9:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113dec:	8a 00                	mov    (%eax),%al
f0113dee:	3c 61                	cmp    $0x61,%al
f0113df0:	75 60                	jne    f0113e52 <test_copy_paste_chunk+0xa63>
f0113df2:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113df5:	8a 00                	mov    (%eax),%al
f0113df7:	3c 79                	cmp    $0x79,%al
f0113df9:	75 57                	jne    f0113e52 <test_copy_paste_chunk+0xa63>
f0113dfb:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0113dfe:	8a 00                	mov    (%eax),%al
f0113e00:	3c 62                	cmp    $0x62,%al
f0113e02:	75 4e                	jne    f0113e52 <test_copy_paste_chunk+0xa63>
f0113e04:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0113e07:	8a 00                	mov    (%eax),%al
f0113e09:	3c 63                	cmp    $0x63,%al
f0113e0b:	75 45                	jne    f0113e52 <test_copy_paste_chunk+0xa63>
f0113e0d:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0113e10:	8a 00                	mov    (%eax),%al
f0113e12:	3c 7a                	cmp    $0x7a,%al
f0113e14:	75 3c                	jne    f0113e52 <test_copy_paste_chunk+0xa63>
				||  *ch7 != 'w' || *ch8 != 'd' || *ch9 != 'e' || *ch10!= 'e' || *ch11!= 'f' || *ch12 != tch[12])
f0113e16:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0113e19:	8a 00                	mov    (%eax),%al
f0113e1b:	3c 77                	cmp    $0x77,%al
f0113e1d:	75 33                	jne    f0113e52 <test_copy_paste_chunk+0xa63>
f0113e1f:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0113e22:	8a 00                	mov    (%eax),%al
f0113e24:	3c 64                	cmp    $0x64,%al
f0113e26:	75 2a                	jne    f0113e52 <test_copy_paste_chunk+0xa63>
f0113e28:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0113e2b:	8a 00                	mov    (%eax),%al
f0113e2d:	3c 65                	cmp    $0x65,%al
f0113e2f:	75 21                	jne    f0113e52 <test_copy_paste_chunk+0xa63>
f0113e31:	8b 45 98             	mov    -0x68(%ebp),%eax
f0113e34:	8a 00                	mov    (%eax),%al
f0113e36:	3c 65                	cmp    $0x65,%al
f0113e38:	75 18                	jne    f0113e52 <test_copy_paste_chunk+0xa63>
f0113e3a:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0113e3d:	8a 00                	mov    (%eax),%al
f0113e3f:	3c 66                	cmp    $0x66,%al
f0113e41:	75 0f                	jne    f0113e52 <test_copy_paste_chunk+0xa63>
f0113e43:	8b 45 90             	mov    -0x70(%ebp),%eax
f0113e46:	8a 10                	mov    (%eax),%dl
f0113e48:	8a 85 a7 fe ff ff    	mov    -0x159(%ebp),%al
f0113e4e:	38 c2                	cmp    %al,%dl
f0113e50:	74 21                	je     f0113e73 <test_copy_paste_chunk+0xa84>
		{
			warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f0113e52:	83 ec 04             	sub    $0x4,%esp
f0113e55:	68 48 83 13 f0       	push   $0xf0138348
f0113e5a:	68 8c 02 00 00       	push   $0x28c
f0113e5f:	68 52 7b 13 f0       	push   $0xf0137b52
f0113e64:	e8 55 c5 fe ff       	call   f01003be <_warn>
f0113e69:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113e6c:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f0113e73:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113e77:	74 04                	je     f0113e7d <test_copy_paste_chunk+0xa8e>
f0113e79:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0113e7d:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		//Test2
		*ch10 = 'x';	// wum 0x4017FF y
f0113e84:	8b 45 98             	mov    -0x68(%ebp),%eax
f0113e87:	c6 00 78             	movb   $0x78,(%eax)
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113e8a:	e8 af 8f ff ff       	call   f010ce3e <sys_calculate_free_frames>
f0113e8f:	89 45 8c             	mov    %eax,-0x74(%ebp)

		ret = copy_paste_chunk(proc_directory, 0x400800, 0x200800, 3*kilo);
f0113e92:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113e95:	89 c2                	mov    %eax,%edx
f0113e97:	01 d2                	add    %edx,%edx
f0113e99:	01 d0                	add    %edx,%eax
f0113e9b:	50                   	push   %eax
f0113e9c:	68 00 08 20 00       	push   $0x200800
f0113ea1:	68 00 08 40 00       	push   $0x400800
f0113ea6:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113ea9:	e8 70 51 ff ff       	call   f010901e <copy_paste_chunk>
f0113eae:	83 c4 10             	add    $0x10,%esp
f0113eb1:	89 45 80             	mov    %eax,-0x80(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113eb4:	e8 85 8f ff ff       	call   f010ce3e <sys_calculate_free_frames>
f0113eb9:	89 45 84             	mov    %eax,-0x7c(%ebp)

		if (ret != 0 || numOfFreeFramesBefore != numOfFreeFramesAfter)
f0113ebc:	83 7d 80 00          	cmpl   $0x0,-0x80(%ebp)
f0113ec0:	75 08                	jne    f0113eca <test_copy_paste_chunk+0xadb>
f0113ec2:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0113ec5:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f0113ec8:	74 2b                	je     f0113ef5 <test_copy_paste_chunk+0xb06>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0113eca:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0113ecd:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0113ed0:	83 ec 0c             	sub    $0xc,%esp
f0113ed3:	50                   	push   %eax
f0113ed4:	ff 75 80             	pushl  -0x80(%ebp)
f0113ed7:	68 f4 83 13 f0       	push   $0xf01383f4
f0113edc:	68 9c 02 00 00       	push   $0x29c
f0113ee1:	68 52 7b 13 f0       	push   $0xf0137b52
f0113ee6:	e8 d3 c4 fe ff       	call   f01003be <_warn>
f0113eeb:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113eee:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0113ef5:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113ef9:	74 04                	je     f0113eff <test_copy_paste_chunk+0xb10>
f0113efb:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113eff:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (CCP(proc_directory, 0x400000, 0x200000, 2*PAGE_SIZE, 1, 0x007, 0x007, 0x007, 0x007, CHK_COPY_PASTE) != 1)
f0113f06:	83 ec 08             	sub    $0x8,%esp
f0113f09:	6a 01                	push   $0x1
f0113f0b:	6a 07                	push   $0x7
f0113f0d:	6a 07                	push   $0x7
f0113f0f:	6a 07                	push   $0x7
f0113f11:	6a 07                	push   $0x7
f0113f13:	6a 01                	push   $0x1
f0113f15:	68 00 20 00 00       	push   $0x2000
f0113f1a:	68 00 00 20 00       	push   $0x200000
f0113f1f:	68 00 00 40 00       	push   $0x400000
f0113f24:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113f27:	e8 80 34 00 00       	call   f01173ac <CCP>
f0113f2c:	83 c4 30             	add    $0x30,%esp
f0113f2f:	83 f8 01             	cmp    $0x1,%eax
f0113f32:	74 21                	je     f0113f55 <test_copy_paste_chunk+0xb66>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references\n");
f0113f34:	83 ec 04             	sub    $0x4,%esp
f0113f37:	68 94 84 13 f0       	push   $0xf0138494
f0113f3c:	68 a4 02 00 00       	push   $0x2a4
f0113f41:	68 52 7b 13 f0       	push   $0xf0137b52
f0113f46:	e8 73 c4 fe ff       	call   f01003be <_warn>
f0113f4b:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113f4e:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0113f55:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113f59:	74 04                	je     f0113f5f <test_copy_paste_chunk+0xb70>
f0113f5b:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113f5f:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'z' || *ch6 != 'z' ||
f0113f66:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113f69:	8a 00                	mov    (%eax),%al
f0113f6b:	3c 61                	cmp    $0x61,%al
f0113f6d:	75 69                	jne    f0113fd8 <test_copy_paste_chunk+0xbe9>
f0113f6f:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113f72:	8a 00                	mov    (%eax),%al
f0113f74:	3c 61                	cmp    $0x61,%al
f0113f76:	75 60                	jne    f0113fd8 <test_copy_paste_chunk+0xbe9>
f0113f78:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113f7b:	8a 00                	mov    (%eax),%al
f0113f7d:	3c 79                	cmp    $0x79,%al
f0113f7f:	75 57                	jne    f0113fd8 <test_copy_paste_chunk+0xbe9>
f0113f81:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0113f84:	8a 00                	mov    (%eax),%al
f0113f86:	3c 62                	cmp    $0x62,%al
f0113f88:	75 4e                	jne    f0113fd8 <test_copy_paste_chunk+0xbe9>
f0113f8a:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0113f8d:	8a 00                	mov    (%eax),%al
f0113f8f:	3c 7a                	cmp    $0x7a,%al
f0113f91:	75 45                	jne    f0113fd8 <test_copy_paste_chunk+0xbe9>
f0113f93:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0113f96:	8a 00                	mov    (%eax),%al
f0113f98:	3c 7a                	cmp    $0x7a,%al
f0113f9a:	75 3c                	jne    f0113fd8 <test_copy_paste_chunk+0xbe9>
				*ch7 != 'd' || *ch8 != 'd' || *ch9 != 'e' || *ch10!= 'x' || *ch11!= 'f'  || *ch12 != tch[12])
f0113f9c:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0113f9f:	8a 00                	mov    (%eax),%al
			correct = 0;
		}
		if (correct) eval += 5 ;
		correct = 1 ;

		if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'z' || *ch6 != 'z' ||
f0113fa1:	3c 64                	cmp    $0x64,%al
f0113fa3:	75 33                	jne    f0113fd8 <test_copy_paste_chunk+0xbe9>
				*ch7 != 'd' || *ch8 != 'd' || *ch9 != 'e' || *ch10!= 'x' || *ch11!= 'f'  || *ch12 != tch[12])
f0113fa5:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0113fa8:	8a 00                	mov    (%eax),%al
f0113faa:	3c 64                	cmp    $0x64,%al
f0113fac:	75 2a                	jne    f0113fd8 <test_copy_paste_chunk+0xbe9>
f0113fae:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0113fb1:	8a 00                	mov    (%eax),%al
f0113fb3:	3c 65                	cmp    $0x65,%al
f0113fb5:	75 21                	jne    f0113fd8 <test_copy_paste_chunk+0xbe9>
f0113fb7:	8b 45 98             	mov    -0x68(%ebp),%eax
f0113fba:	8a 00                	mov    (%eax),%al
f0113fbc:	3c 78                	cmp    $0x78,%al
f0113fbe:	75 18                	jne    f0113fd8 <test_copy_paste_chunk+0xbe9>
f0113fc0:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0113fc3:	8a 00                	mov    (%eax),%al
f0113fc5:	3c 66                	cmp    $0x66,%al
f0113fc7:	75 0f                	jne    f0113fd8 <test_copy_paste_chunk+0xbe9>
f0113fc9:	8b 45 90             	mov    -0x70(%ebp),%eax
f0113fcc:	8a 10                	mov    (%eax),%dl
f0113fce:	8a 85 a7 fe ff ff    	mov    -0x159(%ebp),%al
f0113fd4:	38 c2                	cmp    %al,%dl
f0113fd6:	74 21                	je     f0113ff9 <test_copy_paste_chunk+0xc0a>
		{
			warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f0113fd8:	83 ec 04             	sub    $0x4,%esp
f0113fdb:	68 48 83 13 f0       	push   $0xf0138348
f0113fe0:	68 ad 02 00 00       	push   $0x2ad
f0113fe5:	68 52 7b 13 f0       	push   $0xf0137b52
f0113fea:	e8 cf c3 fe ff       	call   f01003be <_warn>
f0113fef:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113ff2:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f0113ff9:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113ffd:	74 04                	je     f0114003 <test_copy_paste_chunk+0xc14>
f0113fff:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0114003:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	}
	cprintf("\nCASE II: END\n") ;
f011400a:	83 ec 0c             	sub    $0xc,%esp
f011400d:	68 df 84 13 f0       	push   $0xf01384df
f0114012:	e8 1a ce fe ff       	call   f0100e31 <cprintf>
f0114017:	83 c4 10             	add    $0x10,%esp

	/*================================================*/
	/*PART III: Destination page(s) doesn't exist 40% */
	/*================================================*/
	cprintf("\nCASE III: Destination page(s) doesn't exist [40%]\n") ;
f011401a:	83 ec 0c             	sub    $0xc,%esp
f011401d:	68 f0 84 13 f0       	push   $0xf01384f0
f0114022:	e8 0a ce fe ff       	call   f0100e31 <cprintf>
f0114027:	83 c4 10             	add    $0x10,%esp
	{
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x800000", c1); execute_command(c1);
f011402a:	83 ec 04             	sub    $0x4,%esp
f011402d:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0114033:	50                   	push   %eax
f0114034:	68 24 85 13 f0       	push   $0xf0138524
f0114039:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f011403f:	50                   	push   %eax
f0114040:	e8 d1 b9 01 00       	call   f012fa16 <strcconcat>
f0114045:	83 c4 10             	add    $0x10,%esp
f0114048:	83 ec 0c             	sub    $0xc,%esp
f011404b:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0114051:	50                   	push   %eax
f0114052:	e8 6c db fe ff       	call   f0101bc3 <execute_command>
f0114057:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x801000", c1); execute_command(c1);
f011405a:	83 ec 04             	sub    $0x4,%esp
f011405d:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0114063:	50                   	push   %eax
f0114064:	68 2e 85 13 f0       	push   $0xf013852e
f0114069:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f011406f:	50                   	push   %eax
f0114070:	e8 a1 b9 01 00       	call   f012fa16 <strcconcat>
f0114075:	83 c4 10             	add    $0x10,%esp
f0114078:	83 ec 0c             	sub    $0xc,%esp
f011407b:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0114081:	50                   	push   %eax
f0114082:	e8 3c db fe ff       	call   f0101bc3 <execute_command>
f0114087:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x802000", c1); execute_command(c1);
f011408a:	83 ec 04             	sub    $0x4,%esp
f011408d:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0114093:	50                   	push   %eax
f0114094:	68 38 85 13 f0       	push   $0xf0138538
f0114099:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f011409f:	50                   	push   %eax
f01140a0:	e8 71 b9 01 00       	call   f012fa16 <strcconcat>
f01140a5:	83 c4 10             	add    $0x10,%esp
f01140a8:	83 ec 0c             	sub    $0xc,%esp
f01140ab:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01140b1:	50                   	push   %eax
f01140b2:	e8 0c db fe ff       	call   f0101bc3 <execute_command>
f01140b7:	83 c4 10             	add    $0x10,%esp
		char c14[100] = "wum 0x800000 a"; execute_command(c14);
f01140ba:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f01140c0:	bb d1 8c 13 f0       	mov    $0xf0138cd1,%ebx
f01140c5:	ba 0f 00 00 00       	mov    $0xf,%edx
f01140ca:	89 c7                	mov    %eax,%edi
f01140cc:	89 de                	mov    %ebx,%esi
f01140ce:	89 d1                	mov    %edx,%ecx
f01140d0:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01140d2:	8d 95 7e fd ff ff    	lea    -0x282(%ebp),%edx
f01140d8:	b9 55 00 00 00       	mov    $0x55,%ecx
f01140dd:	b0 00                	mov    $0x0,%al
f01140df:	89 d7                	mov    %edx,%edi
f01140e1:	f3 aa                	rep stos %al,%es:(%edi)
f01140e3:	83 ec 0c             	sub    $0xc,%esp
f01140e6:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f01140ec:	50                   	push   %eax
f01140ed:	e8 d1 da fe ff       	call   f0101bc3 <execute_command>
f01140f2:	83 c4 10             	add    $0x10,%esp
		char c15[100] = "wum 0x8017FF b"; execute_command(c15);
f01140f5:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f01140fb:	bb 35 8d 13 f0       	mov    $0xf0138d35,%ebx
f0114100:	ba 0f 00 00 00       	mov    $0xf,%edx
f0114105:	89 c7                	mov    %eax,%edi
f0114107:	89 de                	mov    %ebx,%esi
f0114109:	89 d1                	mov    %edx,%ecx
f011410b:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011410d:	8d 95 e2 fd ff ff    	lea    -0x21e(%ebp),%edx
f0114113:	b9 55 00 00 00       	mov    $0x55,%ecx
f0114118:	b0 00                	mov    $0x0,%al
f011411a:	89 d7                	mov    %edx,%edi
f011411c:	f3 aa                	rep stos %al,%es:(%edi)
f011411e:	83 ec 0c             	sub    $0xc,%esp
f0114121:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0114127:	50                   	push   %eax
f0114128:	e8 96 da fe ff       	call   f0101bc3 <execute_command>
f011412d:	83 c4 10             	add    $0x10,%esp
		char c16[100] = "wum 0x802FFF c"; execute_command(c16);
f0114130:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0114136:	bb 99 8d 13 f0       	mov    $0xf0138d99,%ebx
f011413b:	ba 0f 00 00 00       	mov    $0xf,%edx
f0114140:	89 c7                	mov    %eax,%edi
f0114142:	89 de                	mov    %ebx,%esi
f0114144:	89 d1                	mov    %edx,%ecx
f0114146:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0114148:	8d 95 46 fe ff ff    	lea    -0x1ba(%ebp),%edx
f011414e:	b9 55 00 00 00       	mov    $0x55,%ecx
f0114153:	b0 00                	mov    $0x0,%al
f0114155:	89 d7                	mov    %edx,%edi
f0114157:	f3 aa                	rep stos %al,%es:(%edi)
f0114159:	83 ec 0c             	sub    $0xc,%esp
f011415c:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0114162:	50                   	push   %eax
f0114163:	e8 5b da fe ff       	call   f0101bc3 <execute_command>
f0114168:	83 c4 10             	add    $0x10,%esp

		//Test3
		numOfFreeFramesBefore = sys_calculate_free_frames();
f011416b:	e8 ce 8c ff ff       	call   f010ce3e <sys_calculate_free_frames>
f0114170:	89 45 8c             	mov    %eax,-0x74(%ebp)

		int ret = copy_paste_chunk(proc_directory, 0x800000, 0x900000, 12*kilo);
f0114173:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114176:	89 d0                	mov    %edx,%eax
f0114178:	01 c0                	add    %eax,%eax
f011417a:	01 d0                	add    %edx,%eax
f011417c:	c1 e0 02             	shl    $0x2,%eax
f011417f:	50                   	push   %eax
f0114180:	68 00 00 90 00       	push   $0x900000
f0114185:	68 00 00 80 00       	push   $0x800000
f011418a:	ff 75 d4             	pushl  -0x2c(%ebp)
f011418d:	e8 8c 4e ff ff       	call   f010901e <copy_paste_chunk>
f0114192:	83 c4 10             	add    $0x10,%esp
f0114195:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f011419b:	e8 9e 8c ff ff       	call   f010ce3e <sys_calculate_free_frames>
f01141a0:	89 45 84             	mov    %eax,-0x7c(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 3)
f01141a3:	83 bd 78 ff ff ff 00 	cmpl   $0x0,-0x88(%ebp)
f01141aa:	75 0b                	jne    f01141b7 <test_copy_paste_chunk+0xdc8>
f01141ac:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01141af:	2b 45 84             	sub    -0x7c(%ebp),%eax
f01141b2:	83 f8 03             	cmp    $0x3,%eax
f01141b5:	74 2e                	je     f01141e5 <test_copy_paste_chunk+0xdf6>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f01141b7:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01141ba:	2b 45 84             	sub    -0x7c(%ebp),%eax
f01141bd:	83 ec 0c             	sub    $0xc,%esp
f01141c0:	50                   	push   %eax
f01141c1:	ff b5 78 ff ff ff    	pushl  -0x88(%ebp)
f01141c7:	68 f4 83 13 f0       	push   $0xf01383f4
f01141cc:	68 cb 02 00 00       	push   $0x2cb
f01141d1:	68 52 7b 13 f0       	push   $0xf0137b52
f01141d6:	e8 e3 c1 fe ff       	call   f01003be <_warn>
f01141db:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01141de:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f01141e5:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01141e9:	74 04                	je     f01141ef <test_copy_paste_chunk+0xe00>
f01141eb:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01141ef:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		int chkcnt = 1 ;
f01141f6:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0x800000, 0x900000, 3*PAGE_SIZE, 1, 0x007, 0x007, 0x007, 0x007, CHK_COPY_PASTE) != 1)
f01141fd:	83 ec 08             	sub    $0x8,%esp
f0114200:	6a 01                	push   $0x1
f0114202:	6a 07                	push   $0x7
f0114204:	6a 07                	push   $0x7
f0114206:	6a 07                	push   $0x7
f0114208:	6a 07                	push   $0x7
f011420a:	6a 01                	push   $0x1
f011420c:	68 00 30 00 00       	push   $0x3000
f0114211:	68 00 00 90 00       	push   $0x900000
f0114216:	68 00 00 80 00       	push   $0x800000
f011421b:	ff 75 d4             	pushl  -0x2c(%ebp)
f011421e:	e8 89 31 00 00       	call   f01173ac <CCP>
f0114223:	83 c4 30             	add    $0x30,%esp
f0114226:	83 f8 01             	cmp    $0x1,%eax
f0114229:	74 28                	je     f0114253 <test_copy_paste_chunk+0xe64>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references\n");
f011422b:	83 ec 04             	sub    $0x4,%esp
f011422e:	68 94 84 13 f0       	push   $0xf0138494
f0114233:	68 d4 02 00 00       	push   $0x2d4
f0114238:	68 52 7b 13 f0       	push   $0xf0137b52
f011423d:	e8 7c c1 fe ff       	call   f01003be <_warn>
f0114242:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114245:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chkcnt = 0 ;
f011424c:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}
		if (correct) eval += 5 ;
f0114253:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0114257:	74 04                	je     f011425d <test_copy_paste_chunk+0xe6e>
f0114259:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011425d:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (chkcnt)
f0114264:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0114268:	0f 84 9e 00 00 00    	je     f011430c <test_copy_paste_chunk+0xf1d>
		{
			ch1 = (char*)0x800000; ch2 = (char*)0x900000;
f011426e:	c7 45 bc 00 00 80 00 	movl   $0x800000,-0x44(%ebp)
f0114275:	c7 45 b8 00 00 90 00 	movl   $0x900000,-0x48(%ebp)
			ch3 = (char*)0x8017FF; ch4 = (char*)0x9017FF;
f011427c:	c7 45 b4 ff 17 80 00 	movl   $0x8017ff,-0x4c(%ebp)
f0114283:	c7 45 b0 ff 17 90 00 	movl   $0x9017ff,-0x50(%ebp)
			ch5 = (char*)0x802FFF; ch6 = (char*)0x902FFF;
f011428a:	c7 45 ac ff 2f 80 00 	movl   $0x802fff,-0x54(%ebp)
f0114291:	c7 45 a8 ff 2f 90 00 	movl   $0x902fff,-0x58(%ebp)

			*ch3 = 'y';	//wum 0x8017FF y
f0114298:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011429b:	c6 00 79             	movb   $0x79,(%eax)
			*ch6 = 'z';	//wum 0x902FFF z
f011429e:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01142a1:	c6 00 7a             	movb   $0x7a,(%eax)

			if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'c' || *ch6 != 'z')
f01142a4:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01142a7:	8a 00                	mov    (%eax),%al
f01142a9:	3c 61                	cmp    $0x61,%al
f01142ab:	75 2d                	jne    f01142da <test_copy_paste_chunk+0xeeb>
f01142ad:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01142b0:	8a 00                	mov    (%eax),%al
f01142b2:	3c 61                	cmp    $0x61,%al
f01142b4:	75 24                	jne    f01142da <test_copy_paste_chunk+0xeeb>
f01142b6:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01142b9:	8a 00                	mov    (%eax),%al
f01142bb:	3c 79                	cmp    $0x79,%al
f01142bd:	75 1b                	jne    f01142da <test_copy_paste_chunk+0xeeb>
f01142bf:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01142c2:	8a 00                	mov    (%eax),%al
f01142c4:	3c 62                	cmp    $0x62,%al
f01142c6:	75 12                	jne    f01142da <test_copy_paste_chunk+0xeeb>
f01142c8:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01142cb:	8a 00                	mov    (%eax),%al
f01142cd:	3c 63                	cmp    $0x63,%al
f01142cf:	75 09                	jne    f01142da <test_copy_paste_chunk+0xeeb>
f01142d1:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01142d4:	8a 00                	mov    (%eax),%al
f01142d6:	3c 7a                	cmp    $0x7a,%al
f01142d8:	74 21                	je     f01142fb <test_copy_paste_chunk+0xf0c>
			{
				warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f01142da:	83 ec 04             	sub    $0x4,%esp
f01142dd:	68 48 83 13 f0       	push   $0xf0138348
f01142e2:	68 e6 02 00 00       	push   $0x2e6
f01142e7:	68 52 7b 13 f0       	push   $0xf0137b52
f01142ec:	e8 cd c0 fe ff       	call   f01003be <_warn>
f01142f1:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f01142f4:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			}
			if (correct) eval += 10 ;
f01142fb:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01142ff:	74 04                	je     f0114305 <test_copy_paste_chunk+0xf16>
f0114301:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
			correct = 1 ;
f0114305:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		}
		//Test4
		numOfFreeFramesBefore = sys_calculate_free_frames();
f011430c:	e8 2d 8b ff ff       	call   f010ce3e <sys_calculate_free_frames>
f0114311:	89 45 8c             	mov    %eax,-0x74(%ebp)
		SB(proc_directory, 0x901000, 2 , 0) ;
f0114314:	6a 00                	push   $0x0
f0114316:	6a 02                	push   $0x2
f0114318:	68 00 10 90 00       	push   $0x901000
f011431d:	ff 75 d4             	pushl  -0x2c(%ebp)
f0114320:	e8 c9 2b 00 00       	call   f0116eee <SB>
f0114325:	83 c4 10             	add    $0x10,%esp
		SB(proc_directory, 0x902000, 2 , 0) ;
f0114328:	6a 00                	push   $0x0
f011432a:	6a 02                	push   $0x2
f011432c:	68 00 20 90 00       	push   $0x902000
f0114331:	ff 75 d4             	pushl  -0x2c(%ebp)
f0114334:	e8 b5 2b 00 00       	call   f0116eee <SB>
f0114339:	83 c4 10             	add    $0x10,%esp

		ret = copy_paste_chunk(proc_directory, 0x901000, 0xBFF000, 8*kilo);
f011433c:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011433f:	c1 e0 03             	shl    $0x3,%eax
f0114342:	50                   	push   %eax
f0114343:	68 00 f0 bf 00       	push   $0xbff000
f0114348:	68 00 10 90 00       	push   $0x901000
f011434d:	ff 75 d4             	pushl  -0x2c(%ebp)
f0114350:	e8 c9 4c ff ff       	call   f010901e <copy_paste_chunk>
f0114355:	83 c4 10             	add    $0x10,%esp
f0114358:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f011435e:	e8 db 8a ff ff       	call   f010ce3e <sys_calculate_free_frames>
f0114363:	89 45 84             	mov    %eax,-0x7c(%ebp)
		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 3)
f0114366:	83 bd 78 ff ff ff 00 	cmpl   $0x0,-0x88(%ebp)
f011436d:	75 0b                	jne    f011437a <test_copy_paste_chunk+0xf8b>
f011436f:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0114372:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0114375:	83 f8 03             	cmp    $0x3,%eax
f0114378:	74 2e                	je     f01143a8 <test_copy_paste_chunk+0xfb9>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f011437a:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011437d:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0114380:	83 ec 0c             	sub    $0xc,%esp
f0114383:	50                   	push   %eax
f0114384:	ff b5 78 ff ff ff    	pushl  -0x88(%ebp)
f011438a:	68 f4 83 13 f0       	push   $0xf01383f4
f011438f:	68 f6 02 00 00       	push   $0x2f6
f0114394:	68 52 7b 13 f0       	push   $0xf0137b52
f0114399:	e8 20 c0 fe ff       	call   f01003be <_warn>
f011439e:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01143a1:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f01143a8:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01143ac:	74 04                	je     f01143b2 <test_copy_paste_chunk+0xfc3>
f01143ae:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01143b2:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		chkcnt = 1 ;
f01143b9:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0x901000, 0xBFF000, 2*PAGE_SIZE, 1, 0x003, 0x007, 0x003, 0x007, CHK_COPY_PASTE) != 1)
f01143c0:	83 ec 08             	sub    $0x8,%esp
f01143c3:	6a 01                	push   $0x1
f01143c5:	6a 07                	push   $0x7
f01143c7:	6a 03                	push   $0x3
f01143c9:	6a 07                	push   $0x7
f01143cb:	6a 03                	push   $0x3
f01143cd:	6a 01                	push   $0x1
f01143cf:	68 00 20 00 00       	push   $0x2000
f01143d4:	68 00 f0 bf 00       	push   $0xbff000
f01143d9:	68 00 10 90 00       	push   $0x901000
f01143de:	ff 75 d4             	pushl  -0x2c(%ebp)
f01143e1:	e8 c6 2f 00 00       	call   f01173ac <CCP>
f01143e6:	83 c4 30             	add    $0x30,%esp
f01143e9:	83 f8 01             	cmp    $0x1,%eax
f01143ec:	74 28                	je     f0114416 <test_copy_paste_chunk+0x1027>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references\n");
f01143ee:	83 ec 04             	sub    $0x4,%esp
f01143f1:	68 94 84 13 f0       	push   $0xf0138494
f01143f6:	68 ff 02 00 00       	push   $0x2ff
f01143fb:	68 52 7b 13 f0       	push   $0xf0137b52
f0114400:	e8 b9 bf fe ff       	call   f01003be <_warn>
f0114405:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114408:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chkcnt = 0 ;
f011440f:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}
		if (correct) eval += 10 ;
f0114416:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011441a:	74 04                	je     f0114420 <test_copy_paste_chunk+0x1031>
f011441c:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0114420:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (chkcnt)
f0114427:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f011442b:	74 72                	je     f011449f <test_copy_paste_chunk+0x10b0>
		{
			ch1 = (char*)0x9017FF; ch2 = (char*)0xBFF7FF; ch3 = (char*)0x902FFF;ch4 = (char*)0xC00FFF;
f011442d:	c7 45 bc ff 17 90 00 	movl   $0x9017ff,-0x44(%ebp)
f0114434:	c7 45 b8 ff f7 bf 00 	movl   $0xbff7ff,-0x48(%ebp)
f011443b:	c7 45 b4 ff 2f 90 00 	movl   $0x902fff,-0x4c(%ebp)
f0114442:	c7 45 b0 ff 0f c0 00 	movl   $0xc00fff,-0x50(%ebp)
			if (*ch1 != 'b' || *ch2 != 'b' || *ch3 != 'z' || *ch4 != 'z')
f0114449:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011444c:	8a 00                	mov    (%eax),%al
f011444e:	3c 62                	cmp    $0x62,%al
f0114450:	75 1b                	jne    f011446d <test_copy_paste_chunk+0x107e>
f0114452:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0114455:	8a 00                	mov    (%eax),%al
f0114457:	3c 62                	cmp    $0x62,%al
f0114459:	75 12                	jne    f011446d <test_copy_paste_chunk+0x107e>
f011445b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011445e:	8a 00                	mov    (%eax),%al
f0114460:	3c 7a                	cmp    $0x7a,%al
f0114462:	75 09                	jne    f011446d <test_copy_paste_chunk+0x107e>
f0114464:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0114467:	8a 00                	mov    (%eax),%al
f0114469:	3c 7a                	cmp    $0x7a,%al
f011446b:	74 21                	je     f011448e <test_copy_paste_chunk+0x109f>
			{
				warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f011446d:	83 ec 04             	sub    $0x4,%esp
f0114470:	68 48 83 13 f0       	push   $0xf0138348
f0114475:	68 0b 03 00 00       	push   $0x30b
f011447a:	68 52 7b 13 f0       	push   $0xf0137b52
f011447f:	e8 3a bf fe ff       	call   f01003be <_warn>
f0114484:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0114487:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			}
			if (correct) eval += 5 ;
f011448e:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0114492:	74 04                	je     f0114498 <test_copy_paste_chunk+0x10a9>
f0114494:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0114498:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		}
	}
	cprintf("\nCASE III: END\n") ;
f011449f:	83 ec 0c             	sub    $0xc,%esp
f01144a2:	68 42 85 13 f0       	push   $0xf0138542
f01144a7:	e8 85 c9 fe ff       	call   f0100e31 <cprintf>
f01144ac:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] copy_paste_chunk: FINISHED. Evaluation = %d\n", eval);
f01144af:	83 ec 08             	sub    $0x8,%esp
f01144b2:	ff 75 e4             	pushl  -0x1c(%ebp)
f01144b5:	68 54 85 13 f0       	push   $0xf0138554
f01144ba:	e8 72 c9 fe ff       	call   f0100e31 <cprintf>
f01144bf:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f01144c2:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f01144c6:	75 10                	jne    f01144d8 <test_copy_paste_chunk+0x10e9>
		cprintf("Congratulations!! test copy_paste_chunk completed successfully.\n");
f01144c8:	83 ec 0c             	sub    $0xc,%esp
f01144cb:	68 88 85 13 f0       	push   $0xf0138588
f01144d0:	e8 5c c9 fe ff       	call   f0100e31 <cprintf>
f01144d5:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f01144d8:	a1 70 ce 2b f0       	mov    0xf02bce70,%eax
f01144dd:	89 45 d0             	mov    %eax,-0x30(%ebp)
f01144e0:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01144e3:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f01144e6:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01144eb:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01144ee:	5b                   	pop    %ebx
f01144ef:	5e                   	pop    %esi
f01144f0:	5f                   	pop    %edi
f01144f1:	5d                   	pop    %ebp
f01144f2:	c3                   	ret    

f01144f3 <test_share_chunk>:

//===============================
// 3) TEST SHARE CHUNK:
//===============================
int test_share_chunk()
{
f01144f3:	55                   	push   %ebp
f01144f4:	89 e5                	mov    %esp,%ebp
f01144f6:	57                   	push   %edi
f01144f7:	56                   	push   %esi
f01144f8:	53                   	push   %ebx
f01144f9:	81 ec bc 00 00 00    	sub    $0xbc,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f01144ff:	8d 85 4e ff ff ff    	lea    -0xb2(%ebp),%eax
f0114505:	bb 54 82 13 f0       	mov    $0xf0138254,%ebx
f011450a:	ba 0f 00 00 00       	mov    $0xf,%edx
f011450f:	89 c7                	mov    %eax,%edi
f0114511:	89 de                	mov    %ebx,%esi
f0114513:	89 d1                	mov    %edx,%ecx
f0114515:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0114517:	8d 95 5d ff ff ff    	lea    -0xa3(%ebp),%edx
f011451d:	b9 23 00 00 00       	mov    $0x23,%ecx
f0114522:	b0 00                	mov    $0x0,%al
f0114524:	89 d7                	mov    %edx,%edi
f0114526:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0114528:	6a 00                	push   $0x0
f011452a:	6a 0a                	push   $0xa
f011452c:	6a 14                	push   $0x14
f011452e:	8d 85 4e ff ff ff    	lea    -0xb2(%ebp),%eax
f0114534:	50                   	push   %eax
f0114535:	e8 08 4c ff ff       	call   f0109142 <env_create>
f011453a:	83 c4 10             	add    $0x10,%esp
f011453d:	89 45 d0             	mov    %eax,-0x30(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0114540:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0114543:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0114549:	89 45 cc             	mov    %eax,-0x34(%ebp)
	lcr3(env->env_cr3) ;
f011454c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011454f:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f0114555:	89 45 80             	mov    %eax,-0x80(%ebp)
f0114558:	8b 45 80             	mov    -0x80(%ebp),%eax
f011455b:	0f 22 d8             	mov    %eax,%cr3
	//===================================================

	ClearUserSpace(proc_directory);
f011455e:	83 ec 0c             	sub    $0xc,%esp
f0114561:	ff 75 cc             	pushl  -0x34(%ebp)
f0114564:	e8 0f 2e 00 00       	call   f0117378 <ClearUserSpace>
f0114569:	83 c4 10             	add    $0x10,%esp

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f011456c:	c7 45 c4 00 04 00 00 	movl   $0x400,-0x3c(%ebp)
	int mega = 1024*1024 ;
f0114573:	c7 45 c0 00 00 10 00 	movl   $0x100000,-0x40(%ebp)
	uint32 eval = 0;
f011457a:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint8 correct =1 ;
f0114581:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	extern char end_of_kernel[];

	/*======================================*/
	/*PART I: Destination page(s) exist 20% */
	/*======================================*/
	cprintf("\nCASE I: Destination page(s) exist [20%]\n") ;
f0114585:	83 ec 0c             	sub    $0xc,%esp
f0114588:	68 00 8e 13 f0       	push   $0xf0138e00
f011458d:	e8 9f c8 fe ff       	call   f0100e31 <cprintf>
f0114592:	83 c4 10             	add    $0x10,%esp
	{
		ptr1 = (char*)0xF0100000;
f0114595:	c7 45 bc 00 00 10 f0 	movl   $0xf0100000,-0x44(%ebp)
		ptr2 = (char*)0xF0104000;
f011459c:	c7 45 b8 00 40 10 f0 	movl   $0xf0104000,-0x48(%ebp)
		tptr[1] = *ptr1 ;
f01145a3:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01145a6:	8a 00                	mov    (%eax),%al
f01145a8:	88 85 45 ff ff ff    	mov    %al,-0xbb(%ebp)
		tptr[2] = *ptr2 ;
f01145ae:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01145b1:	8a 00                	mov    (%eax),%al
f01145b3:	88 85 46 ff ff ff    	mov    %al,-0xba(%ebp)

		numOfFreeFramesBefore = sys_calculate_free_frames();
f01145b9:	e8 80 88 ff ff       	call   f010ce3e <sys_calculate_free_frames>
f01145be:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0xF0100000,0xF0104000, 6*kilo, PERM_WRITEABLE) ;
f01145c1:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01145c4:	89 d0                	mov    %edx,%eax
f01145c6:	01 c0                	add    %eax,%eax
f01145c8:	01 d0                	add    %edx,%eax
f01145ca:	01 c0                	add    %eax,%eax
f01145cc:	83 ec 0c             	sub    $0xc,%esp
f01145cf:	6a 02                	push   $0x2
f01145d1:	50                   	push   %eax
f01145d2:	68 00 40 10 f0       	push   $0xf0104000
f01145d7:	68 00 00 10 f0       	push   $0xf0100000
f01145dc:	ff 75 cc             	pushl  -0x34(%ebp)
f01145df:	e8 54 4a ff ff       	call   f0109038 <share_chunk>
f01145e4:	83 c4 20             	add    $0x20,%esp
f01145e7:	89 45 b0             	mov    %eax,-0x50(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01145ea:	e8 4f 88 ff ff       	call   f010ce3e <sys_calculate_free_frames>
f01145ef:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != -1 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 0)
f01145f2:	83 7d b0 ff          	cmpl   $0xffffffff,-0x50(%ebp)
f01145f6:	75 08                	jne    f0114600 <test_share_chunk+0x10d>
f01145f8:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01145fb:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f01145fe:	74 28                	je     f0114628 <test_share_chunk+0x135>
		{
			warn("[EVAL] share_chunk: Failed (dest is exist... operation should be denied) ret=%d diff=%d\n", ret, (numOfFreeFramesBefore - numOfFreeFramesAfter));
f0114600:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114603:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114606:	83 ec 0c             	sub    $0xc,%esp
f0114609:	50                   	push   %eax
f011460a:	ff 75 b0             	pushl  -0x50(%ebp)
f011460d:	68 2c 8e 13 f0       	push   $0xf0138e2c
f0114612:	68 47 03 00 00       	push   $0x347
f0114617:	68 52 7b 13 f0       	push   $0xf0137b52
f011461c:	e8 9d bd fe ff       	call   f01003be <_warn>
f0114621:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114624:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114628:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011462c:	74 04                	je     f0114632 <test_share_chunk+0x13f>
f011462e:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114632:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0xF0100000, 0xF0104000, 8*kilo, 1, 0x003, 0x007, 0x003, 0x007, ~CHK_SHARE) == 0)
f0114636:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114639:	c1 e0 03             	shl    $0x3,%eax
f011463c:	83 ec 08             	sub    $0x8,%esp
f011463f:	68 fd 00 00 00       	push   $0xfd
f0114644:	6a 07                	push   $0x7
f0114646:	6a 03                	push   $0x3
f0114648:	6a 07                	push   $0x7
f011464a:	6a 03                	push   $0x3
f011464c:	6a 01                	push   $0x1
f011464e:	50                   	push   %eax
f011464f:	68 00 40 10 f0       	push   $0xf0104000
f0114654:	68 00 00 10 f0       	push   $0xf0100000
f0114659:	ff 75 cc             	pushl  -0x34(%ebp)
f011465c:	e8 4b 2d 00 00       	call   f01173ac <CCP>
f0114661:	83 c4 30             	add    $0x30,%esp
f0114664:	85 c0                	test   %eax,%eax
f0114666:	75 1e                	jne    f0114686 <test_share_chunk+0x193>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0114668:	83 ec 04             	sub    $0x4,%esp
f011466b:	68 88 8e 13 f0       	push   $0xf0138e88
f0114670:	68 4f 03 00 00       	push   $0x34f
f0114675:	68 52 7b 13 f0       	push   $0xf0137b52
f011467a:	e8 3f bd fe ff       	call   f01003be <_warn>
f011467f:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114682:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114686:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011468a:	74 04                	je     f0114690 <test_share_chunk+0x19d>
f011468c:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)

		*ptr1 = 'A' ;
f0114690:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114693:	c6 00 41             	movb   $0x41,(%eax)
		*ptr2 = 'B' ;
f0114696:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0114699:	c6 00 42             	movb   $0x42,(%eax)

		if ((*ptr1) != 'A' || (*ptr2) != 'B')
f011469c:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011469f:	8a 00                	mov    (%eax),%al
f01146a1:	3c 41                	cmp    $0x41,%al
f01146a3:	75 09                	jne    f01146ae <test_share_chunk+0x1bb>
f01146a5:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01146a8:	8a 00                	mov    (%eax),%al
f01146aa:	3c 42                	cmp    $0x42,%al
f01146ac:	74 1e                	je     f01146cc <test_share_chunk+0x1d9>
		{
			warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f01146ae:	83 ec 04             	sub    $0x4,%esp
f01146b1:	68 d0 8e 13 f0       	push   $0xf0138ed0
f01146b6:	68 59 03 00 00       	push   $0x359
f01146bb:	68 52 7b 13 f0       	push   $0xf0137b52
f01146c0:	e8 f9 bc fe ff       	call   f01003be <_warn>
f01146c5:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01146c8:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f01146cc:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01146d0:	74 04                	je     f01146d6 <test_share_chunk+0x1e3>
f01146d2:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01146d6:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		*ptr1 = tptr[1] ;
f01146da:	8a 95 45 ff ff ff    	mov    -0xbb(%ebp),%dl
f01146e0:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01146e3:	88 10                	mov    %dl,(%eax)
		*ptr2 = tptr[2] ;
f01146e5:	8a 95 46 ff ff ff    	mov    -0xba(%ebp),%dl
f01146eb:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01146ee:	88 10                	mov    %dl,(%eax)
	}
	cprintf("\nCASE I: END\n") ;
f01146f0:	83 ec 0c             	sub    $0xc,%esp
f01146f3:	68 05 8f 13 f0       	push   $0xf0138f05
f01146f8:	e8 34 c7 fe ff       	call   f0100e31 <cprintf>
f01146fd:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART II: Destination page(s) not exist [Supervisor] 25% */
	/*========================================================*/
	cprintf("\nCASE II: Destination page(s) not exist [Supervisor] [25%]\n") ;
f0114700:	83 ec 0c             	sub    $0xc,%esp
f0114703:	68 14 8f 13 f0       	push   $0xf0138f14
f0114708:	e8 24 c7 fe ff       	call   f0100e31 <cprintf>
f011470d:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0114710:	e8 29 87 ff ff       	call   f010ce3e <sys_calculate_free_frames>
f0114715:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0xF0000000,0x40000000, 32*mega, PERM_WRITEABLE | PERM_AVAILABLE) ;
f0114718:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011471b:	c1 e0 05             	shl    $0x5,%eax
f011471e:	83 ec 0c             	sub    $0xc,%esp
f0114721:	68 02 0e 00 00       	push   $0xe02
f0114726:	50                   	push   %eax
f0114727:	68 00 00 00 40       	push   $0x40000000
f011472c:	68 00 00 00 f0       	push   $0xf0000000
f0114731:	ff 75 cc             	pushl  -0x34(%ebp)
f0114734:	e8 ff 48 ff ff       	call   f0109038 <share_chunk>
f0114739:	83 c4 20             	add    $0x20,%esp
f011473c:	89 45 a8             	mov    %eax,-0x58(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f011473f:	e8 fa 86 ff ff       	call   f010ce3e <sys_calculate_free_frames>
f0114744:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != (32*mega) / (4*mega))
f0114747:	83 7d a8 00          	cmpl   $0x0,-0x58(%ebp)
f011474b:	75 1f                	jne    f011476c <test_share_chunk+0x279>
f011474d:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114750:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114753:	89 c1                	mov    %eax,%ecx
f0114755:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114758:	c1 e0 05             	shl    $0x5,%eax
f011475b:	8b 55 c0             	mov    -0x40(%ebp),%edx
f011475e:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0114765:	99                   	cltd   
f0114766:	f7 fb                	idiv   %ebx
f0114768:	39 c1                	cmp    %eax,%ecx
f011476a:	74 28                	je     f0114794 <test_share_chunk+0x2a1>
		{
			warn("[EVAL] share_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f011476c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011476f:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114772:	83 ec 0c             	sub    $0xc,%esp
f0114775:	50                   	push   %eax
f0114776:	ff 75 a8             	pushl  -0x58(%ebp)
f0114779:	68 50 8f 13 f0       	push   $0xf0138f50
f011477e:	68 71 03 00 00       	push   $0x371
f0114783:	68 52 7b 13 f0       	push   $0xf0137b52
f0114788:	e8 31 bc fe ff       	call   f01003be <_warn>
f011478d:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114790:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114794:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114798:	74 04                	je     f011479e <test_share_chunk+0x2ab>
f011479a:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011479e:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f01147a2:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0xF0000000, 0x40000000, 32*mega, -1, 0xE03, 0xE07, 0x003, 0x007, CHK_SHARE) == 0)
f01147a9:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01147ac:	c1 e0 05             	shl    $0x5,%eax
f01147af:	83 ec 08             	sub    $0x8,%esp
f01147b2:	6a 02                	push   $0x2
f01147b4:	6a 07                	push   $0x7
f01147b6:	6a 03                	push   $0x3
f01147b8:	68 07 0e 00 00       	push   $0xe07
f01147bd:	68 03 0e 00 00       	push   $0xe03
f01147c2:	6a ff                	push   $0xffffffff
f01147c4:	50                   	push   %eax
f01147c5:	68 00 00 00 40       	push   $0x40000000
f01147ca:	68 00 00 00 f0       	push   $0xf0000000
f01147cf:	ff 75 cc             	pushl  -0x34(%ebp)
f01147d2:	e8 d5 2b 00 00       	call   f01173ac <CCP>
f01147d7:	83 c4 30             	add    $0x30,%esp
f01147da:	85 c0                	test   %eax,%eax
f01147dc:	75 25                	jne    f0114803 <test_share_chunk+0x310>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f01147de:	83 ec 04             	sub    $0x4,%esp
f01147e1:	68 88 8e 13 f0       	push   $0xf0138e88
f01147e6:	68 7a 03 00 00       	push   $0x37a
f01147eb:	68 52 7b 13 f0       	push   $0xf0137b52
f01147f0:	e8 c9 bb fe ff       	call   f01003be <_warn>
f01147f5:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01147f8:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f01147fc:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}

		if (CCP(proc_directory, 0xF0000000, 0x40000000, 12*kilo, 2, 0xE03, 0xE07, 0x003, 0x007, CHK_SHARE) == 0)
f0114803:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114806:	89 d0                	mov    %edx,%eax
f0114808:	01 c0                	add    %eax,%eax
f011480a:	01 d0                	add    %edx,%eax
f011480c:	c1 e0 02             	shl    $0x2,%eax
f011480f:	83 ec 08             	sub    $0x8,%esp
f0114812:	6a 02                	push   $0x2
f0114814:	6a 07                	push   $0x7
f0114816:	6a 03                	push   $0x3
f0114818:	68 07 0e 00 00       	push   $0xe07
f011481d:	68 03 0e 00 00       	push   $0xe03
f0114822:	6a 02                	push   $0x2
f0114824:	50                   	push   %eax
f0114825:	68 00 00 00 40       	push   $0x40000000
f011482a:	68 00 00 00 f0       	push   $0xf0000000
f011482f:	ff 75 cc             	pushl  -0x34(%ebp)
f0114832:	e8 75 2b 00 00       	call   f01173ac <CCP>
f0114837:	83 c4 30             	add    $0x30,%esp
f011483a:	85 c0                	test   %eax,%eax
f011483c:	75 1e                	jne    f011485c <test_share_chunk+0x369>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f011483e:	83 ec 04             	sub    $0x4,%esp
f0114841:	68 88 8e 13 f0       	push   $0xf0138e88
f0114846:	68 81 03 00 00       	push   $0x381
f011484b:	68 52 7b 13 f0       	push   $0xf0137b52
f0114850:	e8 69 bb fe ff       	call   f01003be <_warn>
f0114855:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114858:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011485c:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114860:	74 04                	je     f0114866 <test_share_chunk+0x373>
f0114862:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114866:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		extern char end_of_kernel[];
		uint32 endRange = ((uint32)end_of_kernel - KERNEL_BASE);
f011486a:	b8 6c f5 2d f0       	mov    $0xf02df56c,%eax
f011486f:	05 00 00 00 10       	add    $0x10000000,%eax
f0114874:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		if (CCP(proc_directory, 0xF0000000+PHYS_IO_MEM, 0x40000000+PHYS_IO_MEM, endRange - PHYS_IO_MEM, 2, 0xE03, 0xE07, 0x003, 0x007, CHK_SHARE) == 0)
f0114877:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011487a:	2d 00 00 0a 00       	sub    $0xa0000,%eax
f011487f:	83 ec 08             	sub    $0x8,%esp
f0114882:	6a 02                	push   $0x2
f0114884:	6a 07                	push   $0x7
f0114886:	6a 03                	push   $0x3
f0114888:	68 07 0e 00 00       	push   $0xe07
f011488d:	68 03 0e 00 00       	push   $0xe03
f0114892:	6a 02                	push   $0x2
f0114894:	50                   	push   %eax
f0114895:	68 00 00 0a 40       	push   $0x400a0000
f011489a:	68 00 00 0a f0       	push   $0xf00a0000
f011489f:	ff 75 cc             	pushl  -0x34(%ebp)
f01148a2:	e8 05 2b 00 00       	call   f01173ac <CCP>
f01148a7:	83 c4 30             	add    $0x30,%esp
f01148aa:	85 c0                	test   %eax,%eax
f01148ac:	75 1e                	jne    f01148cc <test_share_chunk+0x3d9>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f01148ae:	83 ec 04             	sub    $0x4,%esp
f01148b1:	68 88 8e 13 f0       	push   $0xf0138e88
f01148b6:	68 8b 03 00 00       	push   $0x38b
f01148bb:	68 52 7b 13 f0       	push   $0xf0137b52
f01148c0:	e8 f9 ba fe ff       	call   f01003be <_warn>
f01148c5:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01148c8:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01148cc:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01148d0:	74 04                	je     f01148d6 <test_share_chunk+0x3e3>
f01148d2:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01148d6:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f01148da:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f01148de:	0f 84 a4 00 00 00    	je     f0114988 <test_share_chunk+0x495>
		{
			ptr1 = (char*)0xF00007FF; *ptr1 = 'A' ;
f01148e4:	c7 45 bc ff 07 00 f0 	movl   $0xf00007ff,-0x44(%ebp)
f01148eb:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01148ee:	c6 00 41             	movb   $0x41,(%eax)
			ptr2 = (char*)0x400007FF;
f01148f1:	c7 45 b8 ff 07 00 40 	movl   $0x400007ff,-0x48(%ebp)

			if ((*ptr1) != 'A' || (*ptr2) != 'A')
f01148f8:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01148fb:	8a 00                	mov    (%eax),%al
f01148fd:	3c 41                	cmp    $0x41,%al
f01148ff:	75 09                	jne    f011490a <test_share_chunk+0x417>
f0114901:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0114904:	8a 00                	mov    (%eax),%al
f0114906:	3c 41                	cmp    $0x41,%al
f0114908:	74 1e                	je     f0114928 <test_share_chunk+0x435>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f011490a:	83 ec 04             	sub    $0x4,%esp
f011490d:	68 d0 8e 13 f0       	push   $0xf0138ed0
f0114912:	68 98 03 00 00       	push   $0x398
f0114917:	68 52 7b 13 f0       	push   $0xf0137b52
f011491c:	e8 9d ba fe ff       	call   f01003be <_warn>
f0114921:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0114924:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0114928:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011492c:	74 04                	je     f0114932 <test_share_chunk+0x43f>
f011492e:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0114932:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

			ptr1 = (char*)0x41000FFF; *ptr1 = 'C' ;
f0114936:	c7 45 bc ff 0f 00 41 	movl   $0x41000fff,-0x44(%ebp)
f011493d:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114940:	c6 00 43             	movb   $0x43,(%eax)
			ptr2 = (char*)0xF1000FFF;
f0114943:	c7 45 b8 ff 0f 00 f1 	movl   $0xf1000fff,-0x48(%ebp)

			if ((*ptr1) != 'C' || (*ptr2) != 'C')
f011494a:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011494d:	8a 00                	mov    (%eax),%al
f011494f:	3c 43                	cmp    $0x43,%al
f0114951:	75 09                	jne    f011495c <test_share_chunk+0x469>
f0114953:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0114956:	8a 00                	mov    (%eax),%al
f0114958:	3c 43                	cmp    $0x43,%al
f011495a:	74 1e                	je     f011497a <test_share_chunk+0x487>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f011495c:	83 ec 04             	sub    $0x4,%esp
f011495f:	68 d0 8e 13 f0       	push   $0xf0138ed0
f0114964:	68 a3 03 00 00       	push   $0x3a3
f0114969:	68 52 7b 13 f0       	push   $0xf0137b52
f011496e:	e8 4b ba fe ff       	call   f01003be <_warn>
f0114973:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0114976:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f011497a:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011497e:	74 04                	je     f0114984 <test_share_chunk+0x491>
f0114980:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0114984:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE II: END\n") ;
f0114988:	83 ec 0c             	sub    $0xc,%esp
f011498b:	68 df 84 13 f0       	push   $0xf01384df
f0114990:	e8 9c c4 fe ff       	call   f0100e31 <cprintf>
f0114995:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART III: Destination page(s) not exist [User r/w] 25%  */
	/*========================================================*/
	cprintf("\nCASE III: Destination page(s) not exist [User r/w] [25%]\n") ;
f0114998:	83 ec 0c             	sub    $0xc,%esp
f011499b:	68 a0 8f 13 f0       	push   $0xf0138fa0
f01149a0:	e8 8c c4 fe ff       	call   f0100e31 <cprintf>
f01149a5:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f01149a8:	e8 91 84 ff ff       	call   f010ce3e <sys_calculate_free_frames>
f01149ad:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0x40000000,0x0, 648*kilo, PERM_WRITEABLE|PERM_USER) ;
f01149b0:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01149b3:	89 d0                	mov    %edx,%eax
f01149b5:	c1 e0 03             	shl    $0x3,%eax
f01149b8:	01 d0                	add    %edx,%eax
f01149ba:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f01149c1:	01 d0                	add    %edx,%eax
f01149c3:	c1 e0 03             	shl    $0x3,%eax
f01149c6:	83 ec 0c             	sub    $0xc,%esp
f01149c9:	6a 06                	push   $0x6
f01149cb:	50                   	push   %eax
f01149cc:	6a 00                	push   $0x0
f01149ce:	68 00 00 00 40       	push   $0x40000000
f01149d3:	ff 75 cc             	pushl  -0x34(%ebp)
f01149d6:	e8 5d 46 ff ff       	call   f0109038 <share_chunk>
f01149db:	83 c4 20             	add    $0x20,%esp
f01149de:	89 45 a0             	mov    %eax,-0x60(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01149e1:	e8 58 84 ff ff       	call   f010ce3e <sys_calculate_free_frames>
f01149e6:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 1)
f01149e9:	83 7d a0 00          	cmpl   $0x0,-0x60(%ebp)
f01149ed:	75 0b                	jne    f01149fa <test_share_chunk+0x507>
f01149ef:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01149f2:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01149f5:	83 f8 01             	cmp    $0x1,%eax
f01149f8:	74 28                	je     f0114a22 <test_share_chunk+0x52f>
		{
			warn("[EVAL] share_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f01149fa:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01149fd:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114a00:	83 ec 0c             	sub    $0xc,%esp
f0114a03:	50                   	push   %eax
f0114a04:	ff 75 a0             	pushl  -0x60(%ebp)
f0114a07:	68 50 8f 13 f0       	push   $0xf0138f50
f0114a0c:	68 b9 03 00 00       	push   $0x3b9
f0114a11:	68 52 7b 13 f0       	push   $0xf0137b52
f0114a16:	e8 a3 b9 fe ff       	call   f01003be <_warn>
f0114a1b:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114a1e:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114a22:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114a26:	74 04                	je     f0114a2c <test_share_chunk+0x539>
f0114a28:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114a2c:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0114a30:	c7 45 d8 01 00 00 00 	movl   $0x1,-0x28(%ebp)
		if (CCP(proc_directory, 0x40000000, 0x0, PHYS_IO_MEM + 4*kilo, -1, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f0114a37:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114a3a:	05 00 80 02 00       	add    $0x28000,%eax
f0114a3f:	c1 e0 02             	shl    $0x2,%eax
f0114a42:	83 ec 08             	sub    $0x8,%esp
f0114a45:	6a 02                	push   $0x2
f0114a47:	6a 07                	push   $0x7
f0114a49:	6a 03                	push   $0x3
f0114a4b:	6a 07                	push   $0x7
f0114a4d:	6a 07                	push   $0x7
f0114a4f:	6a ff                	push   $0xffffffff
f0114a51:	50                   	push   %eax
f0114a52:	6a 00                	push   $0x0
f0114a54:	68 00 00 00 40       	push   $0x40000000
f0114a59:	ff 75 cc             	pushl  -0x34(%ebp)
f0114a5c:	e8 4b 29 00 00       	call   f01173ac <CCP>
f0114a61:	83 c4 30             	add    $0x30,%esp
f0114a64:	85 c0                	test   %eax,%eax
f0114a66:	75 25                	jne    f0114a8d <test_share_chunk+0x59a>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0114a68:	83 ec 04             	sub    $0x4,%esp
f0114a6b:	68 88 8e 13 f0       	push   $0xf0138e88
f0114a70:	68 c2 03 00 00       	push   $0x3c2
f0114a75:	68 52 7b 13 f0       	push   $0xf0137b52
f0114a7a:	e8 3f b9 fe ff       	call   f01003be <_warn>
f0114a7f:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114a82:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f0114a86:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
		}

		if (CCP(proc_directory, 0x40000000, 0x0, 12*kilo, 3, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f0114a8d:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114a90:	89 d0                	mov    %edx,%eax
f0114a92:	01 c0                	add    %eax,%eax
f0114a94:	01 d0                	add    %edx,%eax
f0114a96:	c1 e0 02             	shl    $0x2,%eax
f0114a99:	83 ec 08             	sub    $0x8,%esp
f0114a9c:	6a 02                	push   $0x2
f0114a9e:	6a 07                	push   $0x7
f0114aa0:	6a 03                	push   $0x3
f0114aa2:	6a 07                	push   $0x7
f0114aa4:	6a 07                	push   $0x7
f0114aa6:	6a 03                	push   $0x3
f0114aa8:	50                   	push   %eax
f0114aa9:	6a 00                	push   $0x0
f0114aab:	68 00 00 00 40       	push   $0x40000000
f0114ab0:	ff 75 cc             	pushl  -0x34(%ebp)
f0114ab3:	e8 f4 28 00 00       	call   f01173ac <CCP>
f0114ab8:	83 c4 30             	add    $0x30,%esp
f0114abb:	85 c0                	test   %eax,%eax
f0114abd:	75 1e                	jne    f0114add <test_share_chunk+0x5ea>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0114abf:	83 ec 04             	sub    $0x4,%esp
f0114ac2:	68 88 8e 13 f0       	push   $0xf0138e88
f0114ac7:	68 c9 03 00 00       	push   $0x3c9
f0114acc:	68 52 7b 13 f0       	push   $0xf0137b52
f0114ad1:	e8 e8 b8 fe ff       	call   f01003be <_warn>
f0114ad6:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114ad9:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114add:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114ae1:	74 04                	je     f0114ae7 <test_share_chunk+0x5f4>
f0114ae3:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114ae7:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0x40003000, 0x3000, PHYS_IO_MEM - 12*kilo, 2, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f0114aeb:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114aee:	89 d0                	mov    %edx,%eax
f0114af0:	01 c0                	add    %eax,%eax
f0114af2:	01 d0                	add    %edx,%eax
f0114af4:	c1 e0 02             	shl    $0x2,%eax
f0114af7:	f7 d8                	neg    %eax
f0114af9:	05 00 00 0a 00       	add    $0xa0000,%eax
f0114afe:	83 ec 08             	sub    $0x8,%esp
f0114b01:	6a 02                	push   $0x2
f0114b03:	6a 07                	push   $0x7
f0114b05:	6a 03                	push   $0x3
f0114b07:	6a 07                	push   $0x7
f0114b09:	6a 07                	push   $0x7
f0114b0b:	6a 02                	push   $0x2
f0114b0d:	50                   	push   %eax
f0114b0e:	68 00 30 00 00       	push   $0x3000
f0114b13:	68 00 30 00 40       	push   $0x40003000
f0114b18:	ff 75 cc             	pushl  -0x34(%ebp)
f0114b1b:	e8 8c 28 00 00       	call   f01173ac <CCP>
f0114b20:	83 c4 30             	add    $0x30,%esp
f0114b23:	85 c0                	test   %eax,%eax
f0114b25:	75 1e                	jne    f0114b45 <test_share_chunk+0x652>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0114b27:	83 ec 04             	sub    $0x4,%esp
f0114b2a:	68 88 8e 13 f0       	push   $0xf0138e88
f0114b2f:	68 d1 03 00 00       	push   $0x3d1
f0114b34:	68 52 7b 13 f0       	push   $0xf0137b52
f0114b39:	e8 80 b8 fe ff       	call   f01003be <_warn>
f0114b3e:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114b41:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114b45:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114b49:	74 04                	je     f0114b4f <test_share_chunk+0x65c>
f0114b4b:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114b4f:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0x40000000+PHYS_IO_MEM, PHYS_IO_MEM, 4*kilo, 3, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f0114b53:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114b56:	c1 e0 02             	shl    $0x2,%eax
f0114b59:	83 ec 08             	sub    $0x8,%esp
f0114b5c:	6a 02                	push   $0x2
f0114b5e:	6a 07                	push   $0x7
f0114b60:	6a 03                	push   $0x3
f0114b62:	6a 07                	push   $0x7
f0114b64:	6a 07                	push   $0x7
f0114b66:	6a 03                	push   $0x3
f0114b68:	50                   	push   %eax
f0114b69:	68 00 00 0a 00       	push   $0xa0000
f0114b6e:	68 00 00 0a 40       	push   $0x400a0000
f0114b73:	ff 75 cc             	pushl  -0x34(%ebp)
f0114b76:	e8 31 28 00 00       	call   f01173ac <CCP>
f0114b7b:	83 c4 30             	add    $0x30,%esp
f0114b7e:	85 c0                	test   %eax,%eax
f0114b80:	75 1e                	jne    f0114ba0 <test_share_chunk+0x6ad>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0114b82:	83 ec 04             	sub    $0x4,%esp
f0114b85:	68 88 8e 13 f0       	push   $0xf0138e88
f0114b8a:	68 d9 03 00 00       	push   $0x3d9
f0114b8f:	68 52 7b 13 f0       	push   $0xf0137b52
f0114b94:	e8 25 b8 fe ff       	call   f01003be <_warn>
f0114b99:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114b9c:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114ba0:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114ba4:	74 04                	je     f0114baa <test_share_chunk+0x6b7>
f0114ba6:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114baa:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f0114bae:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
f0114bb2:	0f 84 92 00 00 00    	je     f0114c4a <test_share_chunk+0x757>
		{
			ptr1 = (char*)0x7FF;
f0114bb8:	c7 45 bc ff 07 00 00 	movl   $0x7ff,-0x44(%ebp)
			ptr2 = (char*)0xF00007FF;
f0114bbf:	c7 45 b8 ff 07 00 f0 	movl   $0xf00007ff,-0x48(%ebp)
			ptr3 = (char*)0x400007FF;
f0114bc6:	c7 45 9c ff 07 00 40 	movl   $0x400007ff,-0x64(%ebp)
			ptr4 = (char*)0x9FFFF; *ptr4 = 'D';
f0114bcd:	c7 45 98 ff ff 09 00 	movl   $0x9ffff,-0x68(%ebp)
f0114bd4:	8b 45 98             	mov    -0x68(%ebp),%eax
f0114bd7:	c6 00 44             	movb   $0x44,(%eax)
			ptr5 = (char*)0xF009FFFF;
f0114bda:	c7 45 94 ff ff 09 f0 	movl   $0xf009ffff,-0x6c(%ebp)
			ptr6 = (char*)0x4009FFFF;
f0114be1:	c7 45 90 ff ff 09 40 	movl   $0x4009ffff,-0x70(%ebp)

			if ((*ptr1) != 'A' || (*ptr2) != 'A' || (*ptr3) != 'A' ||
f0114be8:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114beb:	8a 00                	mov    (%eax),%al
f0114bed:	3c 41                	cmp    $0x41,%al
f0114bef:	75 2d                	jne    f0114c1e <test_share_chunk+0x72b>
f0114bf1:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0114bf4:	8a 00                	mov    (%eax),%al
f0114bf6:	3c 41                	cmp    $0x41,%al
f0114bf8:	75 24                	jne    f0114c1e <test_share_chunk+0x72b>
f0114bfa:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0114bfd:	8a 00                	mov    (%eax),%al
f0114bff:	3c 41                	cmp    $0x41,%al
f0114c01:	75 1b                	jne    f0114c1e <test_share_chunk+0x72b>
					(*ptr4) != 'D' || (*ptr5) != 'D'|| (*ptr6) != 'D')
f0114c03:	8b 45 98             	mov    -0x68(%ebp),%eax
f0114c06:	8a 00                	mov    (%eax),%al
			ptr3 = (char*)0x400007FF;
			ptr4 = (char*)0x9FFFF; *ptr4 = 'D';
			ptr5 = (char*)0xF009FFFF;
			ptr6 = (char*)0x4009FFFF;

			if ((*ptr1) != 'A' || (*ptr2) != 'A' || (*ptr3) != 'A' ||
f0114c08:	3c 44                	cmp    $0x44,%al
f0114c0a:	75 12                	jne    f0114c1e <test_share_chunk+0x72b>
					(*ptr4) != 'D' || (*ptr5) != 'D'|| (*ptr6) != 'D')
f0114c0c:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0114c0f:	8a 00                	mov    (%eax),%al
f0114c11:	3c 44                	cmp    $0x44,%al
f0114c13:	75 09                	jne    f0114c1e <test_share_chunk+0x72b>
f0114c15:	8b 45 90             	mov    -0x70(%ebp),%eax
f0114c18:	8a 00                	mov    (%eax),%al
f0114c1a:	3c 44                	cmp    $0x44,%al
f0114c1c:	74 1e                	je     f0114c3c <test_share_chunk+0x749>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f0114c1e:	83 ec 04             	sub    $0x4,%esp
f0114c21:	68 d0 8e 13 f0       	push   $0xf0138ed0
f0114c26:	68 eb 03 00 00       	push   $0x3eb
f0114c2b:	68 52 7b 13 f0       	push   $0xf0137b52
f0114c30:	e8 89 b7 fe ff       	call   f01003be <_warn>
f0114c35:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0114c38:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0114c3c:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114c40:	74 04                	je     f0114c46 <test_share_chunk+0x753>
f0114c42:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0114c46:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE III: END\n") ;
f0114c4a:	83 ec 0c             	sub    $0xc,%esp
f0114c4d:	68 42 85 13 f0       	push   $0xf0138542
f0114c52:	e8 da c1 fe ff       	call   f0100e31 <cprintf>
f0114c57:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART IV: Destination page(s) not exist [User r] 30%     */
	/*========================================================*/
	cprintf("\nCASE IV: Destination page(s) not exist [User r] [30%]\n") ;
f0114c5a:	83 ec 0c             	sub    $0xc,%esp
f0114c5d:	68 dc 8f 13 f0       	push   $0xf0138fdc
f0114c62:	e8 ca c1 fe ff       	call   f0100e31 <cprintf>
f0114c67:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0114c6a:	e8 cf 81 ff ff       	call   f010ce3e <sys_calculate_free_frames>
f0114c6f:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0x9FC00,0x3FFC00, 7*kilo, PERM_USER) ;
f0114c72:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114c75:	89 d0                	mov    %edx,%eax
f0114c77:	01 c0                	add    %eax,%eax
f0114c79:	01 d0                	add    %edx,%eax
f0114c7b:	01 c0                	add    %eax,%eax
f0114c7d:	01 d0                	add    %edx,%eax
f0114c7f:	83 ec 0c             	sub    $0xc,%esp
f0114c82:	6a 04                	push   $0x4
f0114c84:	50                   	push   %eax
f0114c85:	68 00 fc 3f 00       	push   $0x3ffc00
f0114c8a:	68 00 fc 09 00       	push   $0x9fc00
f0114c8f:	ff 75 cc             	pushl  -0x34(%ebp)
f0114c92:	e8 a1 43 ff ff       	call   f0109038 <share_chunk>
f0114c97:	83 c4 20             	add    $0x20,%esp
f0114c9a:	89 45 8c             	mov    %eax,-0x74(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0114c9d:	e8 9c 81 ff ff       	call   f010ce3e <sys_calculate_free_frames>
f0114ca2:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 1)
f0114ca5:	83 7d 8c 00          	cmpl   $0x0,-0x74(%ebp)
f0114ca9:	75 0b                	jne    f0114cb6 <test_share_chunk+0x7c3>
f0114cab:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114cae:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114cb1:	83 f8 01             	cmp    $0x1,%eax
f0114cb4:	74 28                	je     f0114cde <test_share_chunk+0x7eb>
		{
			warn("[EVAL] share_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0114cb6:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114cb9:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114cbc:	83 ec 0c             	sub    $0xc,%esp
f0114cbf:	50                   	push   %eax
f0114cc0:	ff 75 8c             	pushl  -0x74(%ebp)
f0114cc3:	68 50 8f 13 f0       	push   $0xf0138f50
f0114cc8:	68 01 04 00 00       	push   $0x401
f0114ccd:	68 52 7b 13 f0       	push   $0xf0137b52
f0114cd2:	e8 e7 b6 fe ff       	call   f01003be <_warn>
f0114cd7:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114cda:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0114cde:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114ce2:	74 04                	je     f0114ce8 <test_share_chunk+0x7f5>
f0114ce4:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0114ce8:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0114cec:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%ebp)
		if (CCP(proc_directory, 0x9F000, 0x3FF000, 12*kilo, -1, 0x005, 0x007, 0x007, 0x007, CHK_SHARE) == 0)
f0114cf3:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114cf6:	89 d0                	mov    %edx,%eax
f0114cf8:	01 c0                	add    %eax,%eax
f0114cfa:	01 d0                	add    %edx,%eax
f0114cfc:	c1 e0 02             	shl    $0x2,%eax
f0114cff:	83 ec 08             	sub    $0x8,%esp
f0114d02:	6a 02                	push   $0x2
f0114d04:	6a 07                	push   $0x7
f0114d06:	6a 07                	push   $0x7
f0114d08:	6a 07                	push   $0x7
f0114d0a:	6a 05                	push   $0x5
f0114d0c:	6a ff                	push   $0xffffffff
f0114d0e:	50                   	push   %eax
f0114d0f:	68 00 f0 3f 00       	push   $0x3ff000
f0114d14:	68 00 f0 09 00       	push   $0x9f000
f0114d19:	ff 75 cc             	pushl  -0x34(%ebp)
f0114d1c:	e8 8b 26 00 00       	call   f01173ac <CCP>
f0114d21:	83 c4 30             	add    $0x30,%esp
f0114d24:	85 c0                	test   %eax,%eax
f0114d26:	75 25                	jne    f0114d4d <test_share_chunk+0x85a>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0114d28:	83 ec 04             	sub    $0x4,%esp
f0114d2b:	68 88 8e 13 f0       	push   $0xf0138e88
f0114d30:	68 0a 04 00 00       	push   $0x40a
f0114d35:	68 52 7b 13 f0       	push   $0xf0137b52
f0114d3a:	e8 7f b6 fe ff       	call   f01003be <_warn>
f0114d3f:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114d42:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f0114d46:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
		}
		if (correct) eval += 5 ;
f0114d4d:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114d51:	74 04                	je     f0114d57 <test_share_chunk+0x864>
f0114d53:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114d57:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0x9F000, 0x3FF000, 4*kilo, 3, 0x005, 0x007, 0x007, 0x007, CHK_SHARE) == 0)
f0114d5b:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114d5e:	c1 e0 02             	shl    $0x2,%eax
f0114d61:	83 ec 08             	sub    $0x8,%esp
f0114d64:	6a 02                	push   $0x2
f0114d66:	6a 07                	push   $0x7
f0114d68:	6a 07                	push   $0x7
f0114d6a:	6a 07                	push   $0x7
f0114d6c:	6a 05                	push   $0x5
f0114d6e:	6a 03                	push   $0x3
f0114d70:	50                   	push   %eax
f0114d71:	68 00 f0 3f 00       	push   $0x3ff000
f0114d76:	68 00 f0 09 00       	push   $0x9f000
f0114d7b:	ff 75 cc             	pushl  -0x34(%ebp)
f0114d7e:	e8 29 26 00 00       	call   f01173ac <CCP>
f0114d83:	83 c4 30             	add    $0x30,%esp
f0114d86:	85 c0                	test   %eax,%eax
f0114d88:	75 1e                	jne    f0114da8 <test_share_chunk+0x8b5>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0114d8a:	83 ec 04             	sub    $0x4,%esp
f0114d8d:	68 88 8e 13 f0       	push   $0xf0138e88
f0114d92:	68 13 04 00 00       	push   $0x413
f0114d97:	68 52 7b 13 f0       	push   $0xf0137b52
f0114d9c:	e8 1d b6 fe ff       	call   f01003be <_warn>
f0114da1:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114da4:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114da8:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114dac:	74 04                	je     f0114db2 <test_share_chunk+0x8bf>
f0114dae:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114db2:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0xA0000, 0x400000, 8*kilo, 4, 0x005, 0x007, 0x007, 0x007, CHK_SHARE) == 0)
f0114db6:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114db9:	c1 e0 03             	shl    $0x3,%eax
f0114dbc:	83 ec 08             	sub    $0x8,%esp
f0114dbf:	6a 02                	push   $0x2
f0114dc1:	6a 07                	push   $0x7
f0114dc3:	6a 07                	push   $0x7
f0114dc5:	6a 07                	push   $0x7
f0114dc7:	6a 05                	push   $0x5
f0114dc9:	6a 04                	push   $0x4
f0114dcb:	50                   	push   %eax
f0114dcc:	68 00 00 40 00       	push   $0x400000
f0114dd1:	68 00 00 0a 00       	push   $0xa0000
f0114dd6:	ff 75 cc             	pushl  -0x34(%ebp)
f0114dd9:	e8 ce 25 00 00       	call   f01173ac <CCP>
f0114dde:	83 c4 30             	add    $0x30,%esp
f0114de1:	85 c0                	test   %eax,%eax
f0114de3:	75 1e                	jne    f0114e03 <test_share_chunk+0x910>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0114de5:	83 ec 04             	sub    $0x4,%esp
f0114de8:	68 88 8e 13 f0       	push   $0xf0138e88
f0114ded:	68 1b 04 00 00       	push   $0x41b
f0114df2:	68 52 7b 13 f0       	push   $0xf0137b52
f0114df7:	e8 c2 b5 fe ff       	call   f01003be <_warn>
f0114dfc:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114dff:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114e03:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114e07:	74 04                	je     f0114e0d <test_share_chunk+0x91a>
f0114e09:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114e0d:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f0114e11:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f0114e15:	0f 84 b2 00 00 00    	je     f0114ecd <test_share_chunk+0x9da>
		{
			ptr1 = (char*)0x0009FFFF;
f0114e1b:	c7 45 bc ff ff 09 00 	movl   $0x9ffff,-0x44(%ebp)
			ptr2 = (char*)0x003FFFFF;
f0114e22:	c7 45 b8 ff ff 3f 00 	movl   $0x3fffff,-0x48(%ebp)
			ptr3 = (char*)0x4009FFFF;
f0114e29:	c7 45 9c ff ff 09 40 	movl   $0x4009ffff,-0x64(%ebp)
			ptr4 = (char*)0xF009FFFF;
f0114e30:	c7 45 98 ff ff 09 f0 	movl   $0xf009ffff,-0x68(%ebp)

			ptr5 = (char*)0x000A1001;
f0114e37:	c7 45 94 01 10 0a 00 	movl   $0xa1001,-0x6c(%ebp)
			ptr6 = (char*)0x00401001;
f0114e3e:	c7 45 90 01 10 40 00 	movl   $0x401001,-0x70(%ebp)
			ptr7 = (char*)0x400A1001;
f0114e45:	c7 45 88 01 10 0a 40 	movl   $0x400a1001,-0x78(%ebp)
			ptr8 = (char*)0xF00A1001;
f0114e4c:	c7 45 84 01 10 0a f0 	movl   $0xf00a1001,-0x7c(%ebp)

			if ((*ptr1) != 'D' || (*ptr2) != 'D' || (*ptr3) != 'D' || (*ptr4) != 'D' ||
f0114e53:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114e56:	8a 00                	mov    (%eax),%al
f0114e58:	3c 44                	cmp    $0x44,%al
f0114e5a:	75 45                	jne    f0114ea1 <test_share_chunk+0x9ae>
f0114e5c:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0114e5f:	8a 00                	mov    (%eax),%al
f0114e61:	3c 44                	cmp    $0x44,%al
f0114e63:	75 3c                	jne    f0114ea1 <test_share_chunk+0x9ae>
f0114e65:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0114e68:	8a 00                	mov    (%eax),%al
f0114e6a:	3c 44                	cmp    $0x44,%al
f0114e6c:	75 33                	jne    f0114ea1 <test_share_chunk+0x9ae>
f0114e6e:	8b 45 98             	mov    -0x68(%ebp),%eax
f0114e71:	8a 00                	mov    (%eax),%al
f0114e73:	3c 44                	cmp    $0x44,%al
f0114e75:	75 2a                	jne    f0114ea1 <test_share_chunk+0x9ae>
					(*ptr5) != (*ptr6) || (*ptr5) != (*ptr7) ||(*ptr5) != (*ptr8))
f0114e77:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0114e7a:	8a 10                	mov    (%eax),%dl
f0114e7c:	8b 45 90             	mov    -0x70(%ebp),%eax
f0114e7f:	8a 00                	mov    (%eax),%al
			ptr5 = (char*)0x000A1001;
			ptr6 = (char*)0x00401001;
			ptr7 = (char*)0x400A1001;
			ptr8 = (char*)0xF00A1001;

			if ((*ptr1) != 'D' || (*ptr2) != 'D' || (*ptr3) != 'D' || (*ptr4) != 'D' ||
f0114e81:	38 c2                	cmp    %al,%dl
f0114e83:	75 1c                	jne    f0114ea1 <test_share_chunk+0x9ae>
					(*ptr5) != (*ptr6) || (*ptr5) != (*ptr7) ||(*ptr5) != (*ptr8))
f0114e85:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0114e88:	8a 10                	mov    (%eax),%dl
f0114e8a:	8b 45 88             	mov    -0x78(%ebp),%eax
f0114e8d:	8a 00                	mov    (%eax),%al
f0114e8f:	38 c2                	cmp    %al,%dl
f0114e91:	75 0e                	jne    f0114ea1 <test_share_chunk+0x9ae>
f0114e93:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0114e96:	8a 10                	mov    (%eax),%dl
f0114e98:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0114e9b:	8a 00                	mov    (%eax),%al
f0114e9d:	38 c2                	cmp    %al,%dl
f0114e9f:	74 1e                	je     f0114ebf <test_share_chunk+0x9cc>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f0114ea1:	83 ec 04             	sub    $0x4,%esp
f0114ea4:	68 d0 8e 13 f0       	push   $0xf0138ed0
f0114ea9:	68 30 04 00 00       	push   $0x430
f0114eae:	68 52 7b 13 f0       	push   $0xf0137b52
f0114eb3:	e8 06 b5 fe ff       	call   f01003be <_warn>
f0114eb8:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0114ebb:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0114ebf:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114ec3:	74 04                	je     f0114ec9 <test_share_chunk+0x9d6>
f0114ec5:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0114ec9:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE IV: END\n") ;
f0114ecd:	83 ec 0c             	sub    $0xc,%esp
f0114ed0:	68 14 90 13 f0       	push   $0xf0139014
f0114ed5:	e8 57 bf fe ff       	call   f0100e31 <cprintf>
f0114eda:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] share_chunk: FINISHED. Evaluation = %d\n", eval);
f0114edd:	83 ec 08             	sub    $0x8,%esp
f0114ee0:	ff 75 e4             	pushl  -0x1c(%ebp)
f0114ee3:	68 24 90 13 f0       	push   $0xf0139024
f0114ee8:	e8 44 bf fe ff       	call   f0100e31 <cprintf>
f0114eed:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0114ef0:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f0114ef4:	75 10                	jne    f0114f06 <test_share_chunk+0xa13>
		cprintf("Congratulations!! test share_chunk completed successfully.\n");
f0114ef6:	83 ec 0c             	sub    $0xc,%esp
f0114ef9:	68 54 90 13 f0       	push   $0xf0139054
f0114efe:	e8 2e bf fe ff       	call   f0100e31 <cprintf>
f0114f03:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0114f06:	a1 70 ce 2b f0       	mov    0xf02bce70,%eax
f0114f0b:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0114f0e:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0114f11:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0114f14:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0114f19:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0114f1c:	5b                   	pop    %ebx
f0114f1d:	5e                   	pop    %esi
f0114f1e:	5f                   	pop    %edi
f0114f1f:	5d                   	pop    %ebp
f0114f20:	c3                   	ret    

f0114f21 <test_allocate_chunk>:

//===============================
// 4) TEST ALLOCATE CHUNK:
//===============================
int test_allocate_chunk()
{
f0114f21:	55                   	push   %ebp
f0114f22:	89 e5                	mov    %esp,%ebp
f0114f24:	57                   	push   %edi
f0114f25:	56                   	push   %esi
f0114f26:	53                   	push   %ebx
f0114f27:	81 ec ac 00 00 00    	sub    $0xac,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0114f2d:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f0114f33:	bb 54 82 13 f0       	mov    $0xf0138254,%ebx
f0114f38:	ba 0f 00 00 00       	mov    $0xf,%edx
f0114f3d:	89 c7                	mov    %eax,%edi
f0114f3f:	89 de                	mov    %ebx,%esi
f0114f41:	89 d1                	mov    %edx,%ecx
f0114f43:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0114f45:	8d 95 6d ff ff ff    	lea    -0x93(%ebp),%edx
f0114f4b:	b9 23 00 00 00       	mov    $0x23,%ecx
f0114f50:	b0 00                	mov    $0x0,%al
f0114f52:	89 d7                	mov    %edx,%edi
f0114f54:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0114f56:	6a 00                	push   $0x0
f0114f58:	6a 0a                	push   $0xa
f0114f5a:	6a 14                	push   $0x14
f0114f5c:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f0114f62:	50                   	push   %eax
f0114f63:	e8 da 41 ff ff       	call   f0109142 <env_create>
f0114f68:	83 c4 10             	add    $0x10,%esp
f0114f6b:	89 45 d0             	mov    %eax,-0x30(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0114f6e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0114f71:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f0114f77:	89 45 cc             	mov    %eax,-0x34(%ebp)
	lcr3(env->env_cr3) ;
f0114f7a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0114f7d:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f0114f83:	89 45 90             	mov    %eax,-0x70(%ebp)
f0114f86:	8b 45 90             	mov    -0x70(%ebp),%eax
f0114f89:	0f 22 d8             	mov    %eax,%cr3
	//===================================================

	ClearUserSpace(proc_directory);
f0114f8c:	83 ec 0c             	sub    $0xc,%esp
f0114f8f:	ff 75 cc             	pushl  -0x34(%ebp)
f0114f92:	e8 e1 23 00 00       	call   f0117378 <ClearUserSpace>
f0114f97:	83 c4 10             	add    $0x10,%esp

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f0114f9a:	c7 45 c4 00 04 00 00 	movl   $0x400,-0x3c(%ebp)
	int mega = 1024*1024 ;
f0114fa1:	c7 45 c0 00 00 10 00 	movl   $0x100000,-0x40(%ebp)
	uint32 eval = 0;
f0114fa8:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	uint8 correct =1 ;
f0114faf:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)
	extern char end_of_kernel[];

	/*======================================*/
	/*PART I: Destination page(s) exist 30% */
	/*======================================*/
	cprintf("\nCASE I: Destination page(s) exist [30%]\n") ;
f0114fb3:	83 ec 0c             	sub    $0xc,%esp
f0114fb6:	68 90 90 13 f0       	push   $0xf0139090
f0114fbb:	e8 71 be fe ff       	call   f0100e31 <cprintf>
f0114fc0:	83 c4 10             	add    $0x10,%esp
	{
		ptr1 = (char*)KERNEL_STACK_TOP - 1;
f0114fc3:	c7 45 e4 ff ff bf ef 	movl   $0xefbfffff,-0x1c(%ebp)
		ptr2 = (char*)KERNEL_STACK_TOP - 2;
f0114fca:	c7 45 bc fe ff bf ef 	movl   $0xefbffffe,-0x44(%ebp)
		while ((ptr1 > (char*)(KERNEL_STACK_TOP - PAGE_SIZE)) && *ptr1 == 0)	ptr1-- ;
f0114fd1:	eb 03                	jmp    f0114fd6 <test_allocate_chunk+0xb5>
f0114fd3:	ff 4d e4             	decl   -0x1c(%ebp)
f0114fd6:	81 7d e4 00 f0 bf ef 	cmpl   $0xefbff000,-0x1c(%ebp)
f0114fdd:	76 09                	jbe    f0114fe8 <test_allocate_chunk+0xc7>
f0114fdf:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0114fe2:	8a 00                	mov    (%eax),%al
f0114fe4:	84 c0                	test   %al,%al
f0114fe6:	74 eb                	je     f0114fd3 <test_allocate_chunk+0xb2>
		if (ptr1 == (char*)(KERNEL_STACK_TOP - PAGE_SIZE))	*ptr1 = 'A' ;
f0114fe8:	81 7d e4 00 f0 bf ef 	cmpl   $0xefbff000,-0x1c(%ebp)
f0114fef:	75 06                	jne    f0114ff7 <test_allocate_chunk+0xd6>
f0114ff1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0114ff4:	c6 00 41             	movb   $0x41,(%eax)
		tptr[1] = *ptr1 ;
f0114ff7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0114ffa:	8a 00                	mov    (%eax),%al
f0114ffc:	88 85 55 ff ff ff    	mov    %al,-0xab(%ebp)
		tptr[2] = *ptr2 ;
f0115002:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0115005:	8a 00                	mov    (%eax),%al
f0115007:	88 85 56 ff ff ff    	mov    %al,-0xaa(%ebp)
		cprintf("*ptr1 = %c\n", *ptr1) ;
f011500d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0115010:	8a 00                	mov    (%eax),%al
f0115012:	0f be c0             	movsbl %al,%eax
f0115015:	83 ec 08             	sub    $0x8,%esp
f0115018:	50                   	push   %eax
f0115019:	68 ba 90 13 f0       	push   $0xf01390ba
f011501e:	e8 0e be fe ff       	call   f0100e31 <cprintf>
f0115023:	83 c4 10             	add    $0x10,%esp
		cprintf("*ptr2 = %c\n", *ptr2) ;
f0115026:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0115029:	8a 00                	mov    (%eax),%al
f011502b:	0f be c0             	movsbl %al,%eax
f011502e:	83 ec 08             	sub    $0x8,%esp
f0115031:	50                   	push   %eax
f0115032:	68 c6 90 13 f0       	push   $0xf01390c6
f0115037:	e8 f5 bd fe ff       	call   f0100e31 <cprintf>
f011503c:	83 c4 10             	add    $0x10,%esp
		uint32 old_perms = GP(proc_directory, KERNEL_STACK_TOP - 1*PAGE_SIZE) ;
f011503f:	83 ec 08             	sub    $0x8,%esp
f0115042:	68 00 f0 bf ef       	push   $0xefbff000
f0115047:	ff 75 cc             	pushl  -0x34(%ebp)
f011504a:	e8 90 22 00 00       	call   f01172df <GP>
f011504f:	83 c4 10             	add    $0x10,%esp
f0115052:	89 45 b8             	mov    %eax,-0x48(%ebp)
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0115055:	e8 e4 7d ff ff       	call   f010ce3e <sys_calculate_free_frames>
f011505a:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, KERNEL_STACK_TOP - 1*PAGE_SIZE, 4*kilo, PERM_WRITEABLE) ;
f011505d:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0115060:	c1 e0 02             	shl    $0x2,%eax
f0115063:	6a 02                	push   $0x2
f0115065:	50                   	push   %eax
f0115066:	68 00 f0 bf ef       	push   $0xefbff000
f011506b:	ff 75 cc             	pushl  -0x34(%ebp)
f011506e:	e8 df 3f ff ff       	call   f0109052 <allocate_chunk>
f0115073:	83 c4 10             	add    $0x10,%esp
f0115076:	89 45 b0             	mov    %eax,-0x50(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0115079:	e8 c0 7d ff ff       	call   f010ce3e <sys_calculate_free_frames>
f011507e:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != -1 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 0)
f0115081:	83 7d b0 ff          	cmpl   $0xffffffff,-0x50(%ebp)
f0115085:	75 08                	jne    f011508f <test_allocate_chunk+0x16e>
f0115087:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011508a:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f011508d:	74 2a                	je     f01150b9 <test_allocate_chunk+0x198>
		{
			warn("[EVAL] allocate_chunk: Failed (dest is exist... operation should be denied) ret=%d diff=%d expected=%d\n", ret, (numOfFreeFramesBefore - numOfFreeFramesAfter), 0);
f011508f:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0115092:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0115095:	83 ec 08             	sub    $0x8,%esp
f0115098:	6a 00                	push   $0x0
f011509a:	50                   	push   %eax
f011509b:	ff 75 b0             	pushl  -0x50(%ebp)
f011509e:	68 d4 90 13 f0       	push   $0xf01390d4
f01150a3:	68 70 04 00 00       	push   $0x470
f01150a8:	68 52 7b 13 f0       	push   $0xf0137b52
f01150ad:	e8 0c b3 fe ff       	call   f01003be <_warn>
f01150b2:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01150b5:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
		}
		if (correct) eval += 5 ;
f01150b9:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f01150bd:	74 04                	je     f01150c3 <test_allocate_chunk+0x1a2>
f01150bf:	83 45 e0 05          	addl   $0x5,-0x20(%ebp)
		correct = 1 ;
f01150c3:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		numOfFreeFramesBefore = sys_calculate_free_frames();
f01150c7:	e8 72 7d ff ff       	call   f010ce3e <sys_calculate_free_frames>
f01150cc:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		ret = allocate_chunk(proc_directory, KERNEL_STACK_TOP - 5*kilo, 2*kilo, PERM_WRITEABLE) ;
f01150cf:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01150d2:	01 c0                	add    %eax,%eax
f01150d4:	89 c1                	mov    %eax,%ecx
f01150d6:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01150d9:	89 d0                	mov    %edx,%eax
f01150db:	c1 e0 02             	shl    $0x2,%eax
f01150de:	01 d0                	add    %edx,%eax
f01150e0:	f7 d8                	neg    %eax
f01150e2:	2d 00 00 40 10       	sub    $0x10400000,%eax
f01150e7:	6a 02                	push   $0x2
f01150e9:	51                   	push   %ecx
f01150ea:	50                   	push   %eax
f01150eb:	ff 75 cc             	pushl  -0x34(%ebp)
f01150ee:	e8 5f 3f ff ff       	call   f0109052 <allocate_chunk>
f01150f3:	83 c4 10             	add    $0x10,%esp
f01150f6:	89 45 b0             	mov    %eax,-0x50(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01150f9:	e8 40 7d ff ff       	call   f010ce3e <sys_calculate_free_frames>
f01150fe:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != -1 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 0)
f0115101:	83 7d b0 ff          	cmpl   $0xffffffff,-0x50(%ebp)
f0115105:	75 08                	jne    f011510f <test_allocate_chunk+0x1ee>
f0115107:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011510a:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f011510d:	74 2a                	je     f0115139 <test_allocate_chunk+0x218>
		{
			warn("[EVAL] allocate_chunk: Failed (dest is exist... operation should be denied) ret=%d diff=%d expected=%d\n", ret, (numOfFreeFramesBefore - numOfFreeFramesAfter), 0);
f011510f:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0115112:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0115115:	83 ec 08             	sub    $0x8,%esp
f0115118:	6a 00                	push   $0x0
f011511a:	50                   	push   %eax
f011511b:	ff 75 b0             	pushl  -0x50(%ebp)
f011511e:	68 d4 90 13 f0       	push   $0xf01390d4
f0115123:	68 7e 04 00 00       	push   $0x47e
f0115128:	68 52 7b 13 f0       	push   $0xf0137b52
f011512d:	e8 8c b2 fe ff       	call   f01003be <_warn>
f0115132:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115135:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
		}
		if (correct) eval += 10 ;
f0115139:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f011513d:	74 04                	je     f0115143 <test_allocate_chunk+0x222>
f011513f:	83 45 e0 0a          	addl   $0xa,-0x20(%ebp)
		correct = 1 ;
f0115143:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		if (CCP(proc_directory, 0, KERNEL_STACK_TOP-1*PAGE_SIZE, 4*kilo, 1, old_perms, 0xFFF, 0, 0, CHK_ALLOC) == 0)
f0115147:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011514a:	c1 e0 02             	shl    $0x2,%eax
f011514d:	83 ec 08             	sub    $0x8,%esp
f0115150:	6a 03                	push   $0x3
f0115152:	6a 00                	push   $0x0
f0115154:	6a 00                	push   $0x0
f0115156:	68 ff 0f 00 00       	push   $0xfff
f011515b:	ff 75 b8             	pushl  -0x48(%ebp)
f011515e:	6a 01                	push   $0x1
f0115160:	50                   	push   %eax
f0115161:	68 00 f0 bf ef       	push   $0xefbff000
f0115166:	6a 00                	push   $0x0
f0115168:	ff 75 cc             	pushl  -0x34(%ebp)
f011516b:	e8 3c 22 00 00       	call   f01173ac <CCP>
f0115170:	83 c4 30             	add    $0x30,%esp
f0115173:	85 c0                	test   %eax,%eax
f0115175:	75 1e                	jne    f0115195 <test_allocate_chunk+0x274>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0115177:	83 ec 04             	sub    $0x4,%esp
f011517a:	68 3c 91 13 f0       	push   $0xf013913c
f011517f:	68 86 04 00 00       	push   $0x486
f0115184:	68 52 7b 13 f0       	push   $0xf0137b52
f0115189:	e8 30 b2 fe ff       	call   f01003be <_warn>
f011518e:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0115191:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
		}
		if (correct) eval += 5 ;
f0115195:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0115199:	74 04                	je     f011519f <test_allocate_chunk+0x27e>
f011519b:	83 45 e0 05          	addl   $0x5,-0x20(%ebp)
		correct = 1 ;
f011519f:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		if ((*ptr1) != tptr[1] || (*ptr2) != tptr[2])
f01151a3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01151a6:	8a 10                	mov    (%eax),%dl
f01151a8:	8a 85 55 ff ff ff    	mov    -0xab(%ebp),%al
f01151ae:	38 c2                	cmp    %al,%dl
f01151b0:	75 0f                	jne    f01151c1 <test_allocate_chunk+0x2a0>
f01151b2:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01151b5:	8a 10                	mov    (%eax),%dl
f01151b7:	8a 85 56 ff ff ff    	mov    -0xaa(%ebp),%al
f01151bd:	38 c2                	cmp    %al,%dl
f01151bf:	74 1e                	je     f01151df <test_allocate_chunk+0x2be>
		{
			warn("[EVAL] allocate_chunk: Failed (content is not correct)\n");
f01151c1:	83 ec 04             	sub    $0x4,%esp
f01151c4:	68 88 91 13 f0       	push   $0xf0139188
f01151c9:	68 8e 04 00 00       	push   $0x48e
f01151ce:	68 52 7b 13 f0       	push   $0xf0137b52
f01151d3:	e8 e6 b1 fe ff       	call   f01003be <_warn>
f01151d8:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01151db:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
		}
		if (correct) eval += 10 ;
f01151df:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f01151e3:	74 04                	je     f01151e9 <test_allocate_chunk+0x2c8>
f01151e5:	83 45 e0 0a          	addl   $0xa,-0x20(%ebp)
		correct = 1 ;
f01151e9:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)
	}
	cprintf("\nCASE I: END\n") ;
f01151ed:	83 ec 0c             	sub    $0xc,%esp
f01151f0:	68 05 8f 13 f0       	push   $0xf0138f05
f01151f5:	e8 37 bc fe ff       	call   f0100e31 <cprintf>
f01151fa:	83 c4 10             	add    $0x10,%esp

	/*============================================================*/
	/*PART II: Destination page(s) not exist [Supervisor r/w] 20% */
	/*============================================================*/
	cprintf("\nCASE II: Destination page(s) not exist [Supervisor r/w] [20%]\n") ;
f01151fd:	83 ec 0c             	sub    $0xc,%esp
f0115200:	68 c0 91 13 f0       	push   $0xf01391c0
f0115205:	e8 27 bc fe ff       	call   f0100e31 <cprintf>
f011520a:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f011520d:	e8 2c 7c ff ff       	call   f010ce3e <sys_calculate_free_frames>
f0115212:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, 0x0, 32*mega, PERM_WRITEABLE | PERM_AVAILABLE) ;
f0115215:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0115218:	c1 e0 05             	shl    $0x5,%eax
f011521b:	68 02 0e 00 00       	push   $0xe02
f0115220:	50                   	push   %eax
f0115221:	6a 00                	push   $0x0
f0115223:	ff 75 cc             	pushl  -0x34(%ebp)
f0115226:	e8 27 3e ff ff       	call   f0109052 <allocate_chunk>
f011522b:	83 c4 10             	add    $0x10,%esp
f011522e:	89 45 a8             	mov    %eax,-0x58(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0115231:	e8 08 7c ff ff       	call   f010ce3e <sys_calculate_free_frames>
f0115236:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != ((32*mega)/(4*mega) + (32*mega)/(4*kilo)))
f0115239:	83 7d a8 00          	cmpl   $0x0,-0x58(%ebp)
f011523d:	75 36                	jne    f0115275 <test_allocate_chunk+0x354>
f011523f:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0115242:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0115245:	89 c1                	mov    %eax,%ecx
f0115247:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011524a:	c1 e0 05             	shl    $0x5,%eax
f011524d:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0115250:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0115257:	99                   	cltd   
f0115258:	f7 fe                	idiv   %esi
f011525a:	89 c3                	mov    %eax,%ebx
f011525c:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011525f:	c1 e0 05             	shl    $0x5,%eax
f0115262:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0115265:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f011526c:	99                   	cltd   
f011526d:	f7 fe                	idiv   %esi
f011526f:	01 d8                	add    %ebx,%eax
f0115271:	39 c1                	cmp    %eax,%ecx
f0115273:	74 54                	je     f01152c9 <test_allocate_chunk+0x3a8>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, ((32*mega)/(4*mega) + (32*mega)/(4*kilo)));
f0115275:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0115278:	c1 e0 05             	shl    $0x5,%eax
f011527b:	8b 55 c0             	mov    -0x40(%ebp),%edx
f011527e:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f0115285:	99                   	cltd   
f0115286:	f7 ff                	idiv   %edi
f0115288:	89 c1                	mov    %eax,%ecx
f011528a:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011528d:	c1 e0 05             	shl    $0x5,%eax
f0115290:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0115293:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f011529a:	99                   	cltd   
f011529b:	f7 fe                	idiv   %esi
f011529d:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f01152a0:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01152a3:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01152a6:	83 ec 08             	sub    $0x8,%esp
f01152a9:	52                   	push   %edx
f01152aa:	50                   	push   %eax
f01152ab:	ff 75 a8             	pushl  -0x58(%ebp)
f01152ae:	68 00 92 13 f0       	push   $0xf0139200
f01152b3:	68 a3 04 00 00       	push   $0x4a3
f01152b8:	68 52 7b 13 f0       	push   $0xf0137b52
f01152bd:	e8 fc b0 fe ff       	call   f01003be <_warn>
f01152c2:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01152c5:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
		}
		if (correct) eval += 5 ;
f01152c9:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f01152cd:	74 04                	je     f01152d3 <test_allocate_chunk+0x3b2>
f01152cf:	83 45 e0 05          	addl   $0x5,-0x20(%ebp)
		correct = 1 ;
f01152d3:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		int chk_cnt = 1 ;
f01152d7:	c7 45 d8 01 00 00 00 	movl   $0x1,-0x28(%ebp)
		if (CCP(proc_directory, 0, 0x0, 32*mega, 1, 0xE03, 0xE07, 0, 0, CHK_ALLOC) == 0)
f01152de:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01152e1:	c1 e0 05             	shl    $0x5,%eax
f01152e4:	83 ec 08             	sub    $0x8,%esp
f01152e7:	6a 03                	push   $0x3
f01152e9:	6a 00                	push   $0x0
f01152eb:	6a 00                	push   $0x0
f01152ed:	68 07 0e 00 00       	push   $0xe07
f01152f2:	68 03 0e 00 00       	push   $0xe03
f01152f7:	6a 01                	push   $0x1
f01152f9:	50                   	push   %eax
f01152fa:	6a 00                	push   $0x0
f01152fc:	6a 00                	push   $0x0
f01152fe:	ff 75 cc             	pushl  -0x34(%ebp)
f0115301:	e8 a6 20 00 00       	call   f01173ac <CCP>
f0115306:	83 c4 30             	add    $0x30,%esp
f0115309:	85 c0                	test   %eax,%eax
f011530b:	75 25                	jne    f0115332 <test_allocate_chunk+0x411>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f011530d:	83 ec 04             	sub    $0x4,%esp
f0115310:	68 3c 91 13 f0       	push   $0xf013913c
f0115315:	68 ac 04 00 00       	push   $0x4ac
f011531a:	68 52 7b 13 f0       	push   $0xf0137b52
f011531f:	e8 9a b0 fe ff       	call   f01003be <_warn>
f0115324:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0115327:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
			chk_cnt = 0 ;
f011532b:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
		}
		if (correct) eval += 10 ;
f0115332:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0115336:	74 04                	je     f011533c <test_allocate_chunk+0x41b>
f0115338:	83 45 e0 0a          	addl   $0xa,-0x20(%ebp)
		correct = 1 ;
f011533c:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		if (chk_cnt)
f0115340:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
f0115344:	74 5a                	je     f01153a0 <test_allocate_chunk+0x47f>
		{
			ptr1 = (char*)(0x0+2*kilo); *ptr1 = 'K' ;
f0115346:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0115349:	01 c0                	add    %eax,%eax
f011534b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f011534e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0115351:	c6 00 4b             	movb   $0x4b,(%eax)
			ptr2 = (char*)(0x0+2*mega); *ptr2 = 'M' ;
f0115354:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0115357:	01 c0                	add    %eax,%eax
f0115359:	89 45 bc             	mov    %eax,-0x44(%ebp)
f011535c:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011535f:	c6 00 4d             	movb   $0x4d,(%eax)

			if ((*ptr1) != 'K' || (*ptr2) != 'M')
f0115362:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0115365:	8a 00                	mov    (%eax),%al
f0115367:	3c 4b                	cmp    $0x4b,%al
f0115369:	75 09                	jne    f0115374 <test_allocate_chunk+0x453>
f011536b:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011536e:	8a 00                	mov    (%eax),%al
f0115370:	3c 4d                	cmp    $0x4d,%al
f0115372:	74 1e                	je     f0115392 <test_allocate_chunk+0x471>
			{
				warn("[EVAL] allocate_chunk: Failed (content is not correct)\n");
f0115374:	83 ec 04             	sub    $0x4,%esp
f0115377:	68 88 91 13 f0       	push   $0xf0139188
f011537c:	68 ba 04 00 00       	push   $0x4ba
f0115381:	68 52 7b 13 f0       	push   $0xf0137b52
f0115386:	e8 33 b0 fe ff       	call   f01003be <_warn>
f011538b:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f011538e:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
			}
			if (correct) eval += 5 ;
f0115392:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0115396:	74 04                	je     f011539c <test_allocate_chunk+0x47b>
f0115398:	83 45 e0 05          	addl   $0x5,-0x20(%ebp)
			correct = 1 ;
f011539c:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)
		}
	}
	cprintf("\nCASE II: END\n") ;
f01153a0:	83 ec 0c             	sub    $0xc,%esp
f01153a3:	68 df 84 13 f0       	push   $0xf01384df
f01153a8:	e8 84 ba fe ff       	call   f0100e31 <cprintf>
f01153ad:	83 c4 10             	add    $0x10,%esp

	/*============================================================*/
	/*PART III: Destination page(s) not exist [Supervisor r] 15%  */
	/*============================================================*/
	cprintf("\nCASE III: Destination page(s) not exist [Supervisor r] [15%]\n") ;
f01153b0:	83 ec 0c             	sub    $0xc,%esp
f01153b3:	68 60 92 13 f0       	push   $0xf0139260
f01153b8:	e8 74 ba fe ff       	call   f0100e31 <cprintf>
f01153bd:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f01153c0:	e8 79 7a ff ff       	call   f010ce3e <sys_calculate_free_frames>
f01153c5:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, 0x0+32*mega, 64*mega, 0) ;
f01153c8:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01153cb:	c1 e0 06             	shl    $0x6,%eax
f01153ce:	89 c2                	mov    %eax,%edx
f01153d0:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01153d3:	c1 e0 05             	shl    $0x5,%eax
f01153d6:	6a 00                	push   $0x0
f01153d8:	52                   	push   %edx
f01153d9:	50                   	push   %eax
f01153da:	ff 75 cc             	pushl  -0x34(%ebp)
f01153dd:	e8 70 3c ff ff       	call   f0109052 <allocate_chunk>
f01153e2:	83 c4 10             	add    $0x10,%esp
f01153e5:	89 45 a4             	mov    %eax,-0x5c(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01153e8:	e8 51 7a ff ff       	call   f010ce3e <sys_calculate_free_frames>
f01153ed:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != ((64*mega)/(4*mega) + (64*mega)/(4*kilo)))
f01153f0:	83 7d a4 00          	cmpl   $0x0,-0x5c(%ebp)
f01153f4:	75 36                	jne    f011542c <test_allocate_chunk+0x50b>
f01153f6:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01153f9:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01153fc:	89 c1                	mov    %eax,%ecx
f01153fe:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0115401:	c1 e0 06             	shl    $0x6,%eax
f0115404:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0115407:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f011540e:	99                   	cltd   
f011540f:	f7 ff                	idiv   %edi
f0115411:	89 c3                	mov    %eax,%ebx
f0115413:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0115416:	c1 e0 06             	shl    $0x6,%eax
f0115419:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f011541c:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0115423:	99                   	cltd   
f0115424:	f7 fe                	idiv   %esi
f0115426:	01 d8                	add    %ebx,%eax
f0115428:	39 c1                	cmp    %eax,%ecx
f011542a:	74 54                	je     f0115480 <test_allocate_chunk+0x55f>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, ((64*mega)/(4*mega) + (64*mega)/(4*kilo)));
f011542c:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011542f:	c1 e0 06             	shl    $0x6,%eax
f0115432:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0115435:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f011543c:	99                   	cltd   
f011543d:	f7 fb                	idiv   %ebx
f011543f:	89 c1                	mov    %eax,%ecx
f0115441:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0115444:	c1 e0 06             	shl    $0x6,%eax
f0115447:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f011544a:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f0115451:	99                   	cltd   
f0115452:	f7 ff                	idiv   %edi
f0115454:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0115457:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011545a:	2b 45 ac             	sub    -0x54(%ebp),%eax
f011545d:	83 ec 08             	sub    $0x8,%esp
f0115460:	52                   	push   %edx
f0115461:	50                   	push   %eax
f0115462:	ff 75 a4             	pushl  -0x5c(%ebp)
f0115465:	68 00 92 13 f0       	push   $0xf0139200
f011546a:	68 d0 04 00 00       	push   $0x4d0
f011546f:	68 52 7b 13 f0       	push   $0xf0137b52
f0115474:	e8 45 af fe ff       	call   f01003be <_warn>
f0115479:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011547c:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
		}
		if (correct) eval += 5 ;
f0115480:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0115484:	74 04                	je     f011548a <test_allocate_chunk+0x569>
f0115486:	83 45 e0 05          	addl   $0x5,-0x20(%ebp)
		correct = 1 ;
f011548a:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		int chk_cnt = 1 ;
f011548e:	c7 45 a0 01 00 00 00 	movl   $0x1,-0x60(%ebp)
		if (CCP(proc_directory, 0, 0x0+32*mega, 64*mega, 1, 0x001, 0xE07, 0, 0, CHK_ALLOC) == 0)
f0115495:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0115498:	c1 e0 06             	shl    $0x6,%eax
f011549b:	89 c2                	mov    %eax,%edx
f011549d:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01154a0:	c1 e0 05             	shl    $0x5,%eax
f01154a3:	83 ec 08             	sub    $0x8,%esp
f01154a6:	6a 03                	push   $0x3
f01154a8:	6a 00                	push   $0x0
f01154aa:	6a 00                	push   $0x0
f01154ac:	68 07 0e 00 00       	push   $0xe07
f01154b1:	6a 01                	push   $0x1
f01154b3:	6a 01                	push   $0x1
f01154b5:	52                   	push   %edx
f01154b6:	50                   	push   %eax
f01154b7:	6a 00                	push   $0x0
f01154b9:	ff 75 cc             	pushl  -0x34(%ebp)
f01154bc:	e8 eb 1e 00 00       	call   f01173ac <CCP>
f01154c1:	83 c4 30             	add    $0x30,%esp
f01154c4:	85 c0                	test   %eax,%eax
f01154c6:	75 25                	jne    f01154ed <test_allocate_chunk+0x5cc>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f01154c8:	83 ec 04             	sub    $0x4,%esp
f01154cb:	68 3c 91 13 f0       	push   $0xf013913c
f01154d0:	68 d9 04 00 00       	push   $0x4d9
f01154d5:	68 52 7b 13 f0       	push   $0xf0137b52
f01154da:	e8 df ae fe ff       	call   f01003be <_warn>
f01154df:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01154e2:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
			chk_cnt = 0 ;
f01154e6:	c7 45 a0 00 00 00 00 	movl   $0x0,-0x60(%ebp)
		}
		if (correct) eval += 10 ;
f01154ed:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f01154f1:	74 04                	je     f01154f7 <test_allocate_chunk+0x5d6>
f01154f3:	83 45 e0 0a          	addl   $0xa,-0x20(%ebp)
		correct = 1 ;
f01154f7:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)
	}
	cprintf("\nCASE III: END\n") ;
f01154fb:	83 ec 0c             	sub    $0xc,%esp
f01154fe:	68 42 85 13 f0       	push   $0xf0138542
f0115503:	e8 29 b9 fe ff       	call   f0100e31 <cprintf>
f0115508:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART IV: Destination page(s) not exist [User r/w] 20%  */
	/*========================================================*/
	cprintf("\nCASE IV: Destination page(s) not exist [User r/w] [20%]\n") ;
f011550b:	83 ec 0c             	sub    $0xc,%esp
f011550e:	68 a0 92 13 f0       	push   $0xf01392a0
f0115513:	e8 19 b9 fe ff       	call   f0100e31 <cprintf>
f0115518:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f011551b:	e8 1e 79 ff ff       	call   f010ce3e <sys_calculate_free_frames>
f0115520:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, USER_HEAP_START, 64*mega, PERM_WRITEABLE|PERM_USER|PERM_AVAILABLE) ;
f0115523:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0115526:	c1 e0 06             	shl    $0x6,%eax
f0115529:	68 06 0e 00 00       	push   $0xe06
f011552e:	50                   	push   %eax
f011552f:	68 00 00 00 80       	push   $0x80000000
f0115534:	ff 75 cc             	pushl  -0x34(%ebp)
f0115537:	e8 16 3b ff ff       	call   f0109052 <allocate_chunk>
f011553c:	83 c4 10             	add    $0x10,%esp
f011553f:	89 45 9c             	mov    %eax,-0x64(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0115542:	e8 f7 78 ff ff       	call   f010ce3e <sys_calculate_free_frames>
f0115547:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != ((64*mega)/(4*kilo)+(64*mega)/(4*mega)))
f011554a:	83 7d 9c 00          	cmpl   $0x0,-0x64(%ebp)
f011554e:	75 36                	jne    f0115586 <test_allocate_chunk+0x665>
f0115550:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0115553:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0115556:	89 c1                	mov    %eax,%ecx
f0115558:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011555b:	c1 e0 06             	shl    $0x6,%eax
f011555e:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0115561:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0115568:	99                   	cltd   
f0115569:	f7 fb                	idiv   %ebx
f011556b:	89 c3                	mov    %eax,%ebx
f011556d:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0115570:	c1 e0 06             	shl    $0x6,%eax
f0115573:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0115576:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f011557d:	99                   	cltd   
f011557e:	f7 fe                	idiv   %esi
f0115580:	01 d8                	add    %ebx,%eax
f0115582:	39 c1                	cmp    %eax,%ecx
f0115584:	74 54                	je     f01155da <test_allocate_chunk+0x6b9>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, ((64*mega)/(4*kilo)+(64*mega)/(4*mega)));
f0115586:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0115589:	c1 e0 06             	shl    $0x6,%eax
f011558c:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f011558f:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f0115596:	99                   	cltd   
f0115597:	f7 ff                	idiv   %edi
f0115599:	89 c1                	mov    %eax,%ecx
f011559b:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011559e:	c1 e0 06             	shl    $0x6,%eax
f01155a1:	8b 55 c0             	mov    -0x40(%ebp),%edx
f01155a4:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f01155ab:	99                   	cltd   
f01155ac:	f7 fb                	idiv   %ebx
f01155ae:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f01155b1:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01155b4:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01155b7:	83 ec 08             	sub    $0x8,%esp
f01155ba:	52                   	push   %edx
f01155bb:	50                   	push   %eax
f01155bc:	ff 75 9c             	pushl  -0x64(%ebp)
f01155bf:	68 00 92 13 f0       	push   $0xf0139200
f01155c4:	68 ef 04 00 00       	push   $0x4ef
f01155c9:	68 52 7b 13 f0       	push   $0xf0137b52
f01155ce:	e8 eb ad fe ff       	call   f01003be <_warn>
f01155d3:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01155d6:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
		}
		if (correct) eval += 5 ;
f01155da:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f01155de:	74 04                	je     f01155e4 <test_allocate_chunk+0x6c3>
f01155e0:	83 45 e0 05          	addl   $0x5,-0x20(%ebp)
		correct = 1 ;
f01155e4:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		int chk_cnt = 1 ;
f01155e8:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%ebp)
		if (CCP(proc_directory, 0, USER_HEAP_START, 64*mega, 1, 0xE07, 0xE07, 0, 0, CHK_ALLOC) == 0)
f01155ef:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01155f2:	c1 e0 06             	shl    $0x6,%eax
f01155f5:	83 ec 08             	sub    $0x8,%esp
f01155f8:	6a 03                	push   $0x3
f01155fa:	6a 00                	push   $0x0
f01155fc:	6a 00                	push   $0x0
f01155fe:	68 07 0e 00 00       	push   $0xe07
f0115603:	68 07 0e 00 00       	push   $0xe07
f0115608:	6a 01                	push   $0x1
f011560a:	50                   	push   %eax
f011560b:	68 00 00 00 80       	push   $0x80000000
f0115610:	6a 00                	push   $0x0
f0115612:	ff 75 cc             	pushl  -0x34(%ebp)
f0115615:	e8 92 1d 00 00       	call   f01173ac <CCP>
f011561a:	83 c4 30             	add    $0x30,%esp
f011561d:	85 c0                	test   %eax,%eax
f011561f:	75 25                	jne    f0115646 <test_allocate_chunk+0x725>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0115621:	83 ec 04             	sub    $0x4,%esp
f0115624:	68 3c 91 13 f0       	push   $0xf013913c
f0115629:	68 f8 04 00 00       	push   $0x4f8
f011562e:	68 52 7b 13 f0       	push   $0xf0137b52
f0115633:	e8 86 ad fe ff       	call   f01003be <_warn>
f0115638:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011563b:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
			chk_cnt = 0 ;
f011563f:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
		}
		if (correct) eval += 10 ;
f0115646:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f011564a:	74 04                	je     f0115650 <test_allocate_chunk+0x72f>
f011564c:	83 45 e0 0a          	addl   $0xa,-0x20(%ebp)
		correct = 1 ;
f0115650:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		if (chk_cnt)
f0115654:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f0115658:	74 6f                	je     f01156c9 <test_allocate_chunk+0x7a8>
		{
			ptr1 = (char*)(USER_HEAP_START+2*kilo); *ptr1 = 'K' ;
f011565a:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011565d:	01 c0                	add    %eax,%eax
f011565f:	05 00 00 00 80       	add    $0x80000000,%eax
f0115664:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0115667:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011566a:	c6 00 4b             	movb   $0x4b,(%eax)
			ptr2 = (char*)(USER_HEAP_START+22*mega);*ptr2 = 'M' ;
f011566d:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0115670:	89 d0                	mov    %edx,%eax
f0115672:	c1 e0 02             	shl    $0x2,%eax
f0115675:	01 d0                	add    %edx,%eax
f0115677:	01 c0                	add    %eax,%eax
f0115679:	01 d0                	add    %edx,%eax
f011567b:	01 c0                	add    %eax,%eax
f011567d:	05 00 00 00 80       	add    $0x80000000,%eax
f0115682:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0115685:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0115688:	c6 00 4d             	movb   $0x4d,(%eax)

			if ((*ptr1) != 'K' || (*ptr2) != 'M')
f011568b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011568e:	8a 00                	mov    (%eax),%al
f0115690:	3c 4b                	cmp    $0x4b,%al
f0115692:	75 09                	jne    f011569d <test_allocate_chunk+0x77c>
f0115694:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0115697:	8a 00                	mov    (%eax),%al
f0115699:	3c 4d                	cmp    $0x4d,%al
f011569b:	74 1e                	je     f01156bb <test_allocate_chunk+0x79a>
			{
				warn("[EVAL] allocate_chunk: Failed (content is not correct)\n");
f011569d:	83 ec 04             	sub    $0x4,%esp
f01156a0:	68 88 91 13 f0       	push   $0xf0139188
f01156a5:	68 06 05 00 00       	push   $0x506
f01156aa:	68 52 7b 13 f0       	push   $0xf0137b52
f01156af:	e8 0a ad fe ff       	call   f01003be <_warn>
f01156b4:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f01156b7:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
			}
			if (correct) eval += 5 ;
f01156bb:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f01156bf:	74 04                	je     f01156c5 <test_allocate_chunk+0x7a4>
f01156c1:	83 45 e0 05          	addl   $0x5,-0x20(%ebp)
			correct = 1 ;
f01156c5:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		}
	}
	cprintf("\nCASE IV: END\n") ;
f01156c9:	83 ec 0c             	sub    $0xc,%esp
f01156cc:	68 14 90 13 f0       	push   $0xf0139014
f01156d1:	e8 5b b7 fe ff       	call   f0100e31 <cprintf>
f01156d6:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART V: Destination page(s) not exist [User r] 15%     */
	/*========================================================*/
	cprintf("\nCASE V: Destination page(s) not exist [User r] [15%]\n") ;
f01156d9:	83 ec 0c             	sub    $0xc,%esp
f01156dc:	68 dc 92 13 f0       	push   $0xf01392dc
f01156e1:	e8 4b b7 fe ff       	call   f0100e31 <cprintf>
f01156e6:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f01156e9:	e8 50 77 ff ff       	call   f010ce3e <sys_calculate_free_frames>
f01156ee:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory,0x403FFC00, 7*kilo, PERM_USER|PERM_AVAILABLE) ;
f01156f1:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01156f4:	89 d0                	mov    %edx,%eax
f01156f6:	01 c0                	add    %eax,%eax
f01156f8:	01 d0                	add    %edx,%eax
f01156fa:	01 c0                	add    %eax,%eax
f01156fc:	01 d0                	add    %edx,%eax
f01156fe:	68 04 0e 00 00       	push   $0xe04
f0115703:	50                   	push   %eax
f0115704:	68 00 fc 3f 40       	push   $0x403ffc00
f0115709:	ff 75 cc             	pushl  -0x34(%ebp)
f011570c:	e8 41 39 ff ff       	call   f0109052 <allocate_chunk>
f0115711:	83 c4 10             	add    $0x10,%esp
f0115714:	89 45 98             	mov    %eax,-0x68(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0115717:	e8 22 77 ff ff       	call   f010ce3e <sys_calculate_free_frames>
f011571c:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != (3+2))
f011571f:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
f0115723:	75 0b                	jne    f0115730 <test_allocate_chunk+0x80f>
f0115725:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0115728:	2b 45 ac             	sub    -0x54(%ebp),%eax
f011572b:	83 f8 05             	cmp    $0x5,%eax
f011572e:	74 2a                	je     f011575a <test_allocate_chunk+0x839>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, (3+2));
f0115730:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0115733:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0115736:	83 ec 08             	sub    $0x8,%esp
f0115739:	6a 05                	push   $0x5
f011573b:	50                   	push   %eax
f011573c:	ff 75 98             	pushl  -0x68(%ebp)
f011573f:	68 00 92 13 f0       	push   $0xf0139200
f0115744:	68 1d 05 00 00       	push   $0x51d
f0115749:	68 52 7b 13 f0       	push   $0xf0137b52
f011574e:	e8 6b ac fe ff       	call   f01003be <_warn>
f0115753:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115756:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
		}
		if (correct) eval += 10 ;
f011575a:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f011575e:	74 04                	je     f0115764 <test_allocate_chunk+0x843>
f0115760:	83 45 e0 0a          	addl   $0xa,-0x20(%ebp)
		correct = 1 ;
f0115764:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		int chk_cnt = 1 ;
f0115768:	c7 45 94 01 00 00 00 	movl   $0x1,-0x6c(%ebp)
		if (CCP(proc_directory, 0, 0x403FF000, 12*kilo, 1, 0xE05, 0xE07, 0, 0, CHK_ALLOC) == 0)
f011576f:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0115772:	89 d0                	mov    %edx,%eax
f0115774:	01 c0                	add    %eax,%eax
f0115776:	01 d0                	add    %edx,%eax
f0115778:	c1 e0 02             	shl    $0x2,%eax
f011577b:	83 ec 08             	sub    $0x8,%esp
f011577e:	6a 03                	push   $0x3
f0115780:	6a 00                	push   $0x0
f0115782:	6a 00                	push   $0x0
f0115784:	68 07 0e 00 00       	push   $0xe07
f0115789:	68 05 0e 00 00       	push   $0xe05
f011578e:	6a 01                	push   $0x1
f0115790:	50                   	push   %eax
f0115791:	68 00 f0 3f 40       	push   $0x403ff000
f0115796:	6a 00                	push   $0x0
f0115798:	ff 75 cc             	pushl  -0x34(%ebp)
f011579b:	e8 0c 1c 00 00       	call   f01173ac <CCP>
f01157a0:	83 c4 30             	add    $0x30,%esp
f01157a3:	85 c0                	test   %eax,%eax
f01157a5:	75 25                	jne    f01157cc <test_allocate_chunk+0x8ab>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f01157a7:	83 ec 04             	sub    $0x4,%esp
f01157aa:	68 3c 91 13 f0       	push   $0xf013913c
f01157af:	68 26 05 00 00       	push   $0x526
f01157b4:	68 52 7b 13 f0       	push   $0xf0137b52
f01157b9:	e8 00 ac fe ff       	call   f01003be <_warn>
f01157be:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01157c1:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
			chk_cnt = 0 ;
f01157c5:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
		}
		if (correct) eval += 5 ;
f01157cc:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f01157d0:	74 04                	je     f01157d6 <test_allocate_chunk+0x8b5>
f01157d2:	83 45 e0 05          	addl   $0x5,-0x20(%ebp)
		correct = 1 ;
f01157d6:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

	}
	cprintf("\nCASE V: END\n") ;
f01157da:	83 ec 0c             	sub    $0xc,%esp
f01157dd:	68 13 93 13 f0       	push   $0xf0139313
f01157e2:	e8 4a b6 fe ff       	call   f0100e31 <cprintf>
f01157e7:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] allocate_chunk: FINISHED. Evaluation = %d\n", eval);
f01157ea:	83 ec 08             	sub    $0x8,%esp
f01157ed:	ff 75 e0             	pushl  -0x20(%ebp)
f01157f0:	68 24 93 13 f0       	push   $0xf0139324
f01157f5:	e8 37 b6 fe ff       	call   f0100e31 <cprintf>
f01157fa:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f01157fd:	83 7d e0 64          	cmpl   $0x64,-0x20(%ebp)
f0115801:	75 10                	jne    f0115813 <test_allocate_chunk+0x8f2>
		cprintf("Congratulations!! test allocate_chunk completed successfully.\n");
f0115803:	83 ec 0c             	sub    $0xc,%esp
f0115806:	68 58 93 13 f0       	push   $0xf0139358
f011580b:	e8 21 b6 fe ff       	call   f0100e31 <cprintf>
f0115810:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0115813:	a1 70 ce 2b f0       	mov    0xf02bce70,%eax
f0115818:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011581b:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011581e:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0115821:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0115826:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0115829:	5b                   	pop    %ebx
f011582a:	5e                   	pop    %esi
f011582b:	5f                   	pop    %edi
f011582c:	5d                   	pop    %ebp
f011582d:	c3                   	ret    

f011582e <test_calculate_required_frames>:

//======================================
// 5) [+]TEST CALCULATE REQUIRED FRAMES:
//======================================
int test_calculate_required_frames()
{
f011582e:	55                   	push   %ebp
f011582f:	89 e5                	mov    %esp,%ebp
f0115831:	57                   	push   %edi
f0115832:	56                   	push   %esi
f0115833:	53                   	push   %ebx
f0115834:	81 ec fc 01 00 00    	sub    $0x1fc,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f011583a:	8d 45 8e             	lea    -0x72(%ebp),%eax
f011583d:	bb 54 82 13 f0       	mov    $0xf0138254,%ebx
f0115842:	ba 0f 00 00 00       	mov    $0xf,%edx
f0115847:	89 c7                	mov    %eax,%edi
f0115849:	89 de                	mov    %ebx,%esi
f011584b:	89 d1                	mov    %edx,%ecx
f011584d:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011584f:	8d 55 9d             	lea    -0x63(%ebp),%edx
f0115852:	b9 23 00 00 00       	mov    $0x23,%ecx
f0115857:	b0 00                	mov    $0x0,%al
f0115859:	89 d7                	mov    %edx,%edi
f011585b:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f011585d:	6a 00                	push   $0x0
f011585f:	6a 0a                	push   $0xa
f0115861:	6a 14                	push   $0x14
f0115863:	8d 45 8e             	lea    -0x72(%ebp),%eax
f0115866:	50                   	push   %eax
f0115867:	e8 d6 38 ff ff       	call   f0109142 <env_create>
f011586c:	83 c4 10             	add    $0x10,%esp
f011586f:	89 45 dc             	mov    %eax,-0x24(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0115872:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0115875:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f011587b:	89 45 d8             	mov    %eax,-0x28(%ebp)
	lcr3(env->env_cr3) ;
f011587e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0115881:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f0115887:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011588a:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011588d:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f0115890:	c7 85 7a ff ff ff 61 	movl   $0x20707561,-0x86(%ebp)
f0115897:	75 70 20 
f011589a:	c7 85 7e ff ff ff 00 	movl   $0x0,-0x82(%ebp)
f01158a1:	00 00 00 
f01158a4:	8d 55 82             	lea    -0x7e(%ebp),%edx
f01158a7:	b9 03 00 00 00       	mov    $0x3,%ecx
f01158ac:	b8 00 00 00 00       	mov    $0x0,%eax
f01158b1:	89 d7                	mov    %edx,%edi
f01158b3:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f01158b5:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01158b8:	8b 40 4c             	mov    0x4c(%eax),%eax
f01158bb:	83 ec 08             	sub    $0x8,%esp
f01158be:	8d 95 66 ff ff ff    	lea    -0x9a(%ebp),%edx
f01158c4:	52                   	push   %edx
f01158c5:	50                   	push   %eax
f01158c6:	e8 53 a0 01 00       	call   f012f91e <ltostr>
f01158cb:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f01158ce:	83 ec 04             	sub    $0x4,%esp
f01158d1:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01158d7:	50                   	push   %eax
f01158d8:	8d 85 66 ff ff ff    	lea    -0x9a(%ebp),%eax
f01158de:	50                   	push   %eax
f01158df:	8d 85 7a ff ff ff    	lea    -0x86(%ebp),%eax
f01158e5:	50                   	push   %eax
f01158e6:	e8 2b a1 01 00       	call   f012fa16 <strcconcat>
f01158eb:	83 c4 10             	add    $0x10,%esp
	//===================================================

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f01158ee:	c7 45 d0 00 04 00 00 	movl   $0x400,-0x30(%ebp)
	int mega = 1024*1024 ;
f01158f5:	c7 45 cc 00 00 10 00 	movl   $0x100000,-0x34(%ebp)
	uint32 eval = 0;
f01158fc:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint32 res =0;
f0115903:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	uint8 correct = 1;
f011590a:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	uint32 expected;
	uint32 numOfFreeFramesBefore, numOfFreeFramesAfter;

	ClearUserSpace(proc_directory);
f011590e:	83 ec 0c             	sub    $0xc,%esp
f0115911:	ff 75 d8             	pushl  -0x28(%ebp)
f0115914:	e8 5f 1a 00 00       	call   f0117378 <ClearUserSpace>
f0115919:	83 c4 10             	add    $0x10,%esp

	/*================================================*/
	/*PART I: ALL pages and tables are not exist 50%  */
	/*================================================*/
	cprintf("\nCASE I: ALL pages and tables are not exist [50%]\n") ;
f011591c:	83 ec 0c             	sub    $0xc,%esp
f011591f:	68 98 93 13 f0       	push   $0xf0139398
f0115924:	e8 08 b5 fe ff       	call   f0100e31 <cprintf>
f0115929:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		res = calculate_required_frames(proc_directory, 0x0, 8*kilo);
f011592c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011592f:	c1 e0 03             	shl    $0x3,%eax
f0115932:	83 ec 04             	sub    $0x4,%esp
f0115935:	50                   	push   %eax
f0115936:	6a 00                	push   $0x0
f0115938:	ff 75 d8             	pushl  -0x28(%ebp)
f011593b:	e8 46 37 ff ff       	call   f0109086 <calculate_required_frames>
f0115940:	83 c4 10             	add    $0x10,%esp
f0115943:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 3)
f0115946:	83 7d c8 03          	cmpl   $0x3,-0x38(%ebp)
f011594a:	74 23                	je     f011596f <test_calculate_required_frames+0x141>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 3);
f011594c:	83 ec 0c             	sub    $0xc,%esp
f011594f:	6a 03                	push   $0x3
f0115951:	ff 75 c8             	pushl  -0x38(%ebp)
f0115954:	68 cc 93 13 f0       	push   $0xf01393cc
f0115959:	68 5f 05 00 00       	push   $0x55f
f011595e:	68 52 7b 13 f0       	push   $0xf0137b52
f0115963:	e8 56 aa fe ff       	call   f01003be <_warn>
f0115968:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011596b:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011596f:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115973:	74 04                	je     f0115979 <test_calculate_required_frames+0x14b>
f0115975:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115979:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test2
		res = calculate_required_frames(proc_directory, 0x0, 4*mega);
f011597d:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115980:	c1 e0 02             	shl    $0x2,%eax
f0115983:	83 ec 04             	sub    $0x4,%esp
f0115986:	50                   	push   %eax
f0115987:	6a 00                	push   $0x0
f0115989:	ff 75 d8             	pushl  -0x28(%ebp)
f011598c:	e8 f5 36 ff ff       	call   f0109086 <calculate_required_frames>
f0115991:	83 c4 10             	add    $0x10,%esp
f0115994:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 1025)
f0115997:	81 7d c8 01 04 00 00 	cmpl   $0x401,-0x38(%ebp)
f011599e:	74 26                	je     f01159c6 <test_calculate_required_frames+0x198>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 1025);
f01159a0:	83 ec 0c             	sub    $0xc,%esp
f01159a3:	68 01 04 00 00       	push   $0x401
f01159a8:	ff 75 c8             	pushl  -0x38(%ebp)
f01159ab:	68 cc 93 13 f0       	push   $0xf01393cc
f01159b0:	68 69 05 00 00       	push   $0x569
f01159b5:	68 52 7b 13 f0       	push   $0xf0137b52
f01159ba:	e8 ff a9 fe ff       	call   f01003be <_warn>
f01159bf:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01159c2:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01159c6:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01159ca:	74 04                	je     f01159d0 <test_calculate_required_frames+0x1a2>
f01159cc:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01159d0:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		res = calculate_required_frames(proc_directory, 0x0, 1024*mega);
f01159d4:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01159d7:	c1 e0 0a             	shl    $0xa,%eax
f01159da:	83 ec 04             	sub    $0x4,%esp
f01159dd:	50                   	push   %eax
f01159de:	6a 00                	push   $0x0
f01159e0:	ff 75 d8             	pushl  -0x28(%ebp)
f01159e3:	e8 9e 36 ff ff       	call   f0109086 <calculate_required_frames>
f01159e8:	83 c4 10             	add    $0x10,%esp
f01159eb:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != ((1024*mega)/(4*mega) + (1024*mega)/(4*kilo)))
f01159ee:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01159f1:	c1 e0 0a             	shl    $0xa,%eax
f01159f4:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01159f7:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f01159fe:	99                   	cltd   
f01159ff:	f7 fb                	idiv   %ebx
f0115a01:	89 c1                	mov    %eax,%ecx
f0115a03:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115a06:	c1 e0 0a             	shl    $0xa,%eax
f0115a09:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0115a0c:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0115a13:	99                   	cltd   
f0115a14:	f7 fe                	idiv   %esi
f0115a16:	01 c8                	add    %ecx,%eax
f0115a18:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0115a1b:	74 4c                	je     f0115a69 <test_calculate_required_frames+0x23b>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, ((1024*mega)/(4*mega) + (1024*mega)/(4*kilo)));
f0115a1d:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115a20:	c1 e0 0a             	shl    $0xa,%eax
f0115a23:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0115a26:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0115a2d:	99                   	cltd   
f0115a2e:	f7 fb                	idiv   %ebx
f0115a30:	89 c1                	mov    %eax,%ecx
f0115a32:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115a35:	c1 e0 0a             	shl    $0xa,%eax
f0115a38:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0115a3b:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0115a42:	99                   	cltd   
f0115a43:	f7 fe                	idiv   %esi
f0115a45:	01 c8                	add    %ecx,%eax
f0115a47:	83 ec 0c             	sub    $0xc,%esp
f0115a4a:	50                   	push   %eax
f0115a4b:	ff 75 c8             	pushl  -0x38(%ebp)
f0115a4e:	68 cc 93 13 f0       	push   $0xf01393cc
f0115a53:	68 73 05 00 00       	push   $0x573
f0115a58:	68 52 7b 13 f0       	push   $0xf0137b52
f0115a5d:	e8 5c a9 fe ff       	call   f01003be <_warn>
f0115a62:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115a65:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115a69:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115a6d:	74 04                	je     f0115a73 <test_calculate_required_frames+0x245>
f0115a6f:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115a73:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		//Test4
		res = calculate_required_frames(proc_directory, 0x1000, 6*kilo);
f0115a77:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0115a7a:	89 d0                	mov    %edx,%eax
f0115a7c:	01 c0                	add    %eax,%eax
f0115a7e:	01 d0                	add    %edx,%eax
f0115a80:	01 c0                	add    %eax,%eax
f0115a82:	83 ec 04             	sub    $0x4,%esp
f0115a85:	50                   	push   %eax
f0115a86:	68 00 10 00 00       	push   $0x1000
f0115a8b:	ff 75 d8             	pushl  -0x28(%ebp)
f0115a8e:	e8 f3 35 ff ff       	call   f0109086 <calculate_required_frames>
f0115a93:	83 c4 10             	add    $0x10,%esp
f0115a96:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 3)
f0115a99:	83 7d c8 03          	cmpl   $0x3,-0x38(%ebp)
f0115a9d:	74 23                	je     f0115ac2 <test_calculate_required_frames+0x294>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 3);
f0115a9f:	83 ec 0c             	sub    $0xc,%esp
f0115aa2:	6a 03                	push   $0x3
f0115aa4:	ff 75 c8             	pushl  -0x38(%ebp)
f0115aa7:	68 cc 93 13 f0       	push   $0xf01393cc
f0115aac:	68 7f 05 00 00       	push   $0x57f
f0115ab1:	68 52 7b 13 f0       	push   $0xf0137b52
f0115ab6:	e8 03 a9 fe ff       	call   f01003be <_warn>
f0115abb:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115abe:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115ac2:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115ac6:	74 04                	je     f0115acc <test_calculate_required_frames+0x29e>
f0115ac8:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115acc:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test5
		res = calculate_required_frames(proc_directory, 0x1800, 3*kilo);
f0115ad0:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115ad3:	89 c2                	mov    %eax,%edx
f0115ad5:	01 d2                	add    %edx,%edx
f0115ad7:	01 d0                	add    %edx,%eax
f0115ad9:	83 ec 04             	sub    $0x4,%esp
f0115adc:	50                   	push   %eax
f0115add:	68 00 18 00 00       	push   $0x1800
f0115ae2:	ff 75 d8             	pushl  -0x28(%ebp)
f0115ae5:	e8 9c 35 ff ff       	call   f0109086 <calculate_required_frames>
f0115aea:	83 c4 10             	add    $0x10,%esp
f0115aed:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 3)
f0115af0:	83 7d c8 03          	cmpl   $0x3,-0x38(%ebp)
f0115af4:	74 23                	je     f0115b19 <test_calculate_required_frames+0x2eb>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 3);
f0115af6:	83 ec 0c             	sub    $0xc,%esp
f0115af9:	6a 03                	push   $0x3
f0115afb:	ff 75 c8             	pushl  -0x38(%ebp)
f0115afe:	68 cc 93 13 f0       	push   $0xf01393cc
f0115b03:	68 89 05 00 00       	push   $0x589
f0115b08:	68 52 7b 13 f0       	push   $0xf0137b52
f0115b0d:	e8 ac a8 fe ff       	call   f01003be <_warn>
f0115b12:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115b15:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115b19:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115b1d:	74 04                	je     f0115b23 <test_calculate_required_frames+0x2f5>
f0115b1f:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115b23:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test6
		res = calculate_required_frames(proc_directory, 0x400000, 10*mega);
f0115b27:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0115b2a:	89 d0                	mov    %edx,%eax
f0115b2c:	c1 e0 02             	shl    $0x2,%eax
f0115b2f:	01 d0                	add    %edx,%eax
f0115b31:	01 c0                	add    %eax,%eax
f0115b33:	83 ec 04             	sub    $0x4,%esp
f0115b36:	50                   	push   %eax
f0115b37:	68 00 00 40 00       	push   $0x400000
f0115b3c:	ff 75 d8             	pushl  -0x28(%ebp)
f0115b3f:	e8 42 35 ff ff       	call   f0109086 <calculate_required_frames>
f0115b44:	83 c4 10             	add    $0x10,%esp
f0115b47:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 2563)
f0115b4a:	81 7d c8 03 0a 00 00 	cmpl   $0xa03,-0x38(%ebp)
f0115b51:	74 26                	je     f0115b79 <test_calculate_required_frames+0x34b>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 2563);
f0115b53:	83 ec 0c             	sub    $0xc,%esp
f0115b56:	68 03 0a 00 00       	push   $0xa03
f0115b5b:	ff 75 c8             	pushl  -0x38(%ebp)
f0115b5e:	68 cc 93 13 f0       	push   $0xf01393cc
f0115b63:	68 93 05 00 00       	push   $0x593
f0115b68:	68 52 7b 13 f0       	push   $0xf0137b52
f0115b6d:	e8 4c a8 fe ff       	call   f01003be <_warn>
f0115b72:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115b75:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115b79:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115b7d:	74 04                	je     f0115b83 <test_calculate_required_frames+0x355>
f0115b7f:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115b83:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		//Test7
		res = calculate_required_frames(proc_directory, 0x700000, 2*mega);
f0115b87:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115b8a:	01 c0                	add    %eax,%eax
f0115b8c:	83 ec 04             	sub    $0x4,%esp
f0115b8f:	50                   	push   %eax
f0115b90:	68 00 00 70 00       	push   $0x700000
f0115b95:	ff 75 d8             	pushl  -0x28(%ebp)
f0115b98:	e8 e9 34 ff ff       	call   f0109086 <calculate_required_frames>
f0115b9d:	83 c4 10             	add    $0x10,%esp
f0115ba0:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 514)
f0115ba3:	81 7d c8 02 02 00 00 	cmpl   $0x202,-0x38(%ebp)
f0115baa:	74 26                	je     f0115bd2 <test_calculate_required_frames+0x3a4>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 514);
f0115bac:	83 ec 0c             	sub    $0xc,%esp
f0115baf:	68 02 02 00 00       	push   $0x202
f0115bb4:	ff 75 c8             	pushl  -0x38(%ebp)
f0115bb7:	68 cc 93 13 f0       	push   $0xf01393cc
f0115bbc:	68 9f 05 00 00       	push   $0x59f
f0115bc1:	68 52 7b 13 f0       	push   $0xf0137b52
f0115bc6:	e8 f3 a7 fe ff       	call   f01003be <_warn>
f0115bcb:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115bce:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0115bd2:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115bd6:	74 04                	je     f0115bdc <test_calculate_required_frames+0x3ae>
f0115bd8:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0115bdc:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test8
		res = calculate_required_frames(proc_directory, 0x3FFFFF, 1*kilo);
f0115be0:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115be3:	83 ec 04             	sub    $0x4,%esp
f0115be6:	50                   	push   %eax
f0115be7:	68 ff ff 3f 00       	push   $0x3fffff
f0115bec:	ff 75 d8             	pushl  -0x28(%ebp)
f0115bef:	e8 92 34 ff ff       	call   f0109086 <calculate_required_frames>
f0115bf4:	83 c4 10             	add    $0x10,%esp
f0115bf7:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 4)
f0115bfa:	83 7d c8 04          	cmpl   $0x4,-0x38(%ebp)
f0115bfe:	74 23                	je     f0115c23 <test_calculate_required_frames+0x3f5>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 4);
f0115c00:	83 ec 0c             	sub    $0xc,%esp
f0115c03:	6a 04                	push   $0x4
f0115c05:	ff 75 c8             	pushl  -0x38(%ebp)
f0115c08:	68 cc 93 13 f0       	push   $0xf01393cc
f0115c0d:	68 a9 05 00 00       	push   $0x5a9
f0115c12:	68 52 7b 13 f0       	push   $0xf0137b52
f0115c17:	e8 a2 a7 fe ff       	call   f01003be <_warn>
f0115c1c:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115c1f:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0115c23:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115c27:	74 04                	je     f0115c2d <test_calculate_required_frames+0x3ff>
f0115c29:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0115c2d:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE I: END\n") ;
f0115c31:	83 ec 0c             	sub    $0xc,%esp
f0115c34:	68 05 8f 13 f0       	push   $0xf0138f05
f0115c39:	e8 f3 b1 fe ff       	call   f0100e31 <cprintf>
f0115c3e:	83 c4 10             	add    $0x10,%esp

	/*==================================================*/
	/*PART II: SOME pages and/or tables are exist [50%] */
	/*==================================================*/
	cprintf("\nCASE II: SOME pages and/or tables are exist [50%]\n") ;
f0115c41:	83 ec 0c             	sub    $0xc,%esp
f0115c44:	68 24 94 13 f0       	push   $0xf0139424
f0115c49:	e8 e3 b1 fe ff       	call   f0100e31 <cprintf>
f0115c4e:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x0", c1); execute_command(c1);
f0115c51:	83 ec 04             	sub    $0x4,%esp
f0115c54:	8d 85 fe fd ff ff    	lea    -0x202(%ebp),%eax
f0115c5a:	50                   	push   %eax
f0115c5b:	68 be 82 13 f0       	push   $0xf01382be
f0115c60:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115c66:	50                   	push   %eax
f0115c67:	e8 aa 9d 01 00       	call   f012fa16 <strcconcat>
f0115c6c:	83 c4 10             	add    $0x10,%esp
f0115c6f:	83 ec 0c             	sub    $0xc,%esp
f0115c72:	8d 85 fe fd ff ff    	lea    -0x202(%ebp),%eax
f0115c78:	50                   	push   %eax
f0115c79:	e8 45 bf fe ff       	call   f0101bc3 <execute_command>
f0115c7e:	83 c4 10             	add    $0x10,%esp

		res = calculate_required_frames(proc_directory, 0x0, 8*kilo);
f0115c81:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115c84:	c1 e0 03             	shl    $0x3,%eax
f0115c87:	83 ec 04             	sub    $0x4,%esp
f0115c8a:	50                   	push   %eax
f0115c8b:	6a 00                	push   $0x0
f0115c8d:	ff 75 d8             	pushl  -0x28(%ebp)
f0115c90:	e8 f1 33 ff ff       	call   f0109086 <calculate_required_frames>
f0115c95:	83 c4 10             	add    $0x10,%esp
f0115c98:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 1 ;
f0115c9b:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (res != expected)
f0115ca2:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0115ca5:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0115ca8:	74 24                	je     f0115cce <test_calculate_required_frames+0x4a0>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f0115caa:	83 ec 0c             	sub    $0xc,%esp
f0115cad:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115cb0:	ff 75 c8             	pushl  -0x38(%ebp)
f0115cb3:	68 cc 93 13 f0       	push   $0xf01393cc
f0115cb8:	68 bd 05 00 00       	push   $0x5bd
f0115cbd:	68 52 7b 13 f0       	push   $0xf0137b52
f0115cc2:	e8 f7 a6 fe ff       	call   f01003be <_warn>
f0115cc7:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115cca:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115cce:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115cd2:	74 04                	je     f0115cd8 <test_calculate_required_frames+0x4aa>
f0115cd4:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115cd8:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c2[100] ;strcconcat(aup_cmd, " 0x100000", c2); execute_command(c2);
f0115cdc:	83 ec 04             	sub    $0x4,%esp
f0115cdf:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0115ce5:	50                   	push   %eax
f0115ce6:	68 cb 82 13 f0       	push   $0xf01382cb
f0115ceb:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115cf1:	50                   	push   %eax
f0115cf2:	e8 1f 9d 01 00       	call   f012fa16 <strcconcat>
f0115cf7:	83 c4 10             	add    $0x10,%esp
f0115cfa:	83 ec 0c             	sub    $0xc,%esp
f0115cfd:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0115d03:	50                   	push   %eax
f0115d04:	e8 ba be fe ff       	call   f0101bc3 <execute_command>
f0115d09:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x10000000", c3); execute_command(c3);
f0115d0c:	83 ec 04             	sub    $0x4,%esp
f0115d0f:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f0115d15:	50                   	push   %eax
f0115d16:	68 58 94 13 f0       	push   $0xf0139458
f0115d1b:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115d21:	50                   	push   %eax
f0115d22:	e8 ef 9c 01 00       	call   f012fa16 <strcconcat>
f0115d27:	83 c4 10             	add    $0x10,%esp
f0115d2a:	83 ec 0c             	sub    $0xc,%esp
f0115d2d:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f0115d33:	50                   	push   %eax
f0115d34:	e8 8a be fe ff       	call   f0101bc3 <execute_command>
f0115d39:	83 c4 10             	add    $0x10,%esp

		//Test2
		res = calculate_required_frames(proc_directory, 0x0, 8*mega);
f0115d3c:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115d3f:	c1 e0 03             	shl    $0x3,%eax
f0115d42:	83 ec 04             	sub    $0x4,%esp
f0115d45:	50                   	push   %eax
f0115d46:	6a 00                	push   $0x0
f0115d48:	ff 75 d8             	pushl  -0x28(%ebp)
f0115d4b:	e8 36 33 ff ff       	call   f0109086 <calculate_required_frames>
f0115d50:	83 c4 10             	add    $0x10,%esp
f0115d53:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 2047;
f0115d56:	c7 45 c4 ff 07 00 00 	movl   $0x7ff,-0x3c(%ebp)
		if (res != expected)
f0115d5d:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0115d60:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0115d63:	74 24                	je     f0115d89 <test_calculate_required_frames+0x55b>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f0115d65:	83 ec 0c             	sub    $0xc,%esp
f0115d68:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115d6b:	ff 75 c8             	pushl  -0x38(%ebp)
f0115d6e:	68 cc 93 13 f0       	push   $0xf01393cc
f0115d73:	68 cb 05 00 00       	push   $0x5cb
f0115d78:	68 52 7b 13 f0       	push   $0xf0137b52
f0115d7d:	e8 3c a6 fe ff       	call   f01003be <_warn>
f0115d82:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115d85:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115d89:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115d8d:	74 04                	je     f0115d93 <test_calculate_required_frames+0x565>
f0115d8f:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115d93:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		res = calculate_required_frames(proc_directory, 0x0, 1024*mega);
f0115d97:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115d9a:	c1 e0 0a             	shl    $0xa,%eax
f0115d9d:	83 ec 04             	sub    $0x4,%esp
f0115da0:	50                   	push   %eax
f0115da1:	6a 00                	push   $0x0
f0115da3:	ff 75 d8             	pushl  -0x28(%ebp)
f0115da6:	e8 db 32 ff ff       	call   f0109086 <calculate_required_frames>
f0115dab:	83 c4 10             	add    $0x10,%esp
f0115dae:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = ((1024*mega)/(4*mega) + (1024*mega)/(4*kilo)) - 2 - 1 - 2;
f0115db1:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115db4:	c1 e0 0a             	shl    $0xa,%eax
f0115db7:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0115dba:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0115dc1:	99                   	cltd   
f0115dc2:	f7 fb                	idiv   %ebx
f0115dc4:	89 c1                	mov    %eax,%ecx
f0115dc6:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115dc9:	c1 e0 0a             	shl    $0xa,%eax
f0115dcc:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0115dcf:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0115dd6:	99                   	cltd   
f0115dd7:	f7 fe                	idiv   %esi
f0115dd9:	01 c8                	add    %ecx,%eax
f0115ddb:	83 e8 05             	sub    $0x5,%eax
f0115dde:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		if (res != expected)
f0115de1:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0115de4:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0115de7:	74 24                	je     f0115e0d <test_calculate_required_frames+0x5df>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f0115de9:	83 ec 0c             	sub    $0xc,%esp
f0115dec:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115def:	ff 75 c8             	pushl  -0x38(%ebp)
f0115df2:	68 cc 93 13 f0       	push   $0xf01393cc
f0115df7:	68 d6 05 00 00       	push   $0x5d6
f0115dfc:	68 52 7b 13 f0       	push   $0xf0137b52
f0115e01:	e8 b8 a5 fe ff       	call   f01003be <_warn>
f0115e06:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115e09:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0115e0d:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115e11:	74 04                	je     f0115e17 <test_calculate_required_frames+0x5e9>
f0115e13:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0115e17:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x2000", c3); execute_command(c3);
f0115e1b:	83 ec 04             	sub    $0x4,%esp
f0115e1e:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0115e24:	50                   	push   %eax
f0115e25:	68 64 94 13 f0       	push   $0xf0139464
f0115e2a:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115e30:	50                   	push   %eax
f0115e31:	e8 e0 9b 01 00       	call   f012fa16 <strcconcat>
f0115e36:	83 c4 10             	add    $0x10,%esp
f0115e39:	83 ec 0c             	sub    $0xc,%esp
f0115e3c:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0115e42:	50                   	push   %eax
f0115e43:	e8 7b bd fe ff       	call   f0101bc3 <execute_command>
f0115e48:	83 c4 10             	add    $0x10,%esp

		//Test4
		res = calculate_required_frames(proc_directory, 0x1800, 3*kilo);
f0115e4b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115e4e:	89 c2                	mov    %eax,%edx
f0115e50:	01 d2                	add    %edx,%edx
f0115e52:	01 d0                	add    %edx,%eax
f0115e54:	83 ec 04             	sub    $0x4,%esp
f0115e57:	50                   	push   %eax
f0115e58:	68 00 18 00 00       	push   $0x1800
f0115e5d:	ff 75 d8             	pushl  -0x28(%ebp)
f0115e60:	e8 21 32 ff ff       	call   f0109086 <calculate_required_frames>
f0115e65:	83 c4 10             	add    $0x10,%esp
f0115e68:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 1 ;
f0115e6b:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (res != expected)
f0115e72:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0115e75:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0115e78:	74 24                	je     f0115e9e <test_calculate_required_frames+0x670>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f0115e7a:	83 ec 0c             	sub    $0xc,%esp
f0115e7d:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115e80:	ff 75 c8             	pushl  -0x38(%ebp)
f0115e83:	68 cc 93 13 f0       	push   $0xf01393cc
f0115e88:	68 e5 05 00 00       	push   $0x5e5
f0115e8d:	68 52 7b 13 f0       	push   $0xf0137b52
f0115e92:	e8 27 a5 fe ff       	call   f01003be <_warn>
f0115e97:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115e9a:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115e9e:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115ea2:	74 04                	je     f0115ea8 <test_calculate_required_frames+0x67a>
f0115ea4:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115ea8:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x800000", c4); execute_command(c4);
f0115eac:	83 ec 04             	sub    $0x4,%esp
f0115eaf:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f0115eb5:	50                   	push   %eax
f0115eb6:	68 24 85 13 f0       	push   $0xf0138524
f0115ebb:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115ec1:	50                   	push   %eax
f0115ec2:	e8 4f 9b 01 00       	call   f012fa16 <strcconcat>
f0115ec7:	83 c4 10             	add    $0x10,%esp
f0115eca:	83 ec 0c             	sub    $0xc,%esp
f0115ecd:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f0115ed3:	50                   	push   %eax
f0115ed4:	e8 ea bc fe ff       	call   f0101bc3 <execute_command>
f0115ed9:	83 c4 10             	add    $0x10,%esp

		//Test5
		res = calculate_required_frames(proc_directory, 0x400000, 10*mega);
f0115edc:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0115edf:	89 d0                	mov    %edx,%eax
f0115ee1:	c1 e0 02             	shl    $0x2,%eax
f0115ee4:	01 d0                	add    %edx,%eax
f0115ee6:	01 c0                	add    %eax,%eax
f0115ee8:	83 ec 04             	sub    $0x4,%esp
f0115eeb:	50                   	push   %eax
f0115eec:	68 00 00 40 00       	push   $0x400000
f0115ef1:	ff 75 d8             	pushl  -0x28(%ebp)
f0115ef4:	e8 8d 31 ff ff       	call   f0109086 <calculate_required_frames>
f0115ef9:	83 c4 10             	add    $0x10,%esp
f0115efc:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 2561)
f0115eff:	81 7d c8 01 0a 00 00 	cmpl   $0xa01,-0x38(%ebp)
f0115f06:	74 26                	je     f0115f2e <test_calculate_required_frames+0x700>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 2563);
f0115f08:	83 ec 0c             	sub    $0xc,%esp
f0115f0b:	68 03 0a 00 00       	push   $0xa03
f0115f10:	ff 75 c8             	pushl  -0x38(%ebp)
f0115f13:	68 cc 93 13 f0       	push   $0xf01393cc
f0115f18:	68 f1 05 00 00       	push   $0x5f1
f0115f1d:	68 52 7b 13 f0       	push   $0xf0137b52
f0115f22:	e8 97 a4 fe ff       	call   f01003be <_warn>
f0115f27:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115f2a:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115f2e:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115f32:	74 04                	je     f0115f38 <test_calculate_required_frames+0x70a>
f0115f34:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115f38:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x801000", c3); execute_command(c3);
f0115f3c:	83 ec 04             	sub    $0x4,%esp
f0115f3f:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0115f45:	50                   	push   %eax
f0115f46:	68 2e 85 13 f0       	push   $0xf013852e
f0115f4b:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115f51:	50                   	push   %eax
f0115f52:	e8 bf 9a 01 00       	call   f012fa16 <strcconcat>
f0115f57:	83 c4 10             	add    $0x10,%esp
f0115f5a:	83 ec 0c             	sub    $0xc,%esp
f0115f5d:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0115f63:	50                   	push   %eax
f0115f64:	e8 5a bc fe ff       	call   f0101bc3 <execute_command>
f0115f69:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x810000", c4); execute_command(c4);
f0115f6c:	83 ec 04             	sub    $0x4,%esp
f0115f6f:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f0115f75:	50                   	push   %eax
f0115f76:	68 6c 94 13 f0       	push   $0xf013946c
f0115f7b:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115f81:	50                   	push   %eax
f0115f82:	e8 8f 9a 01 00       	call   f012fa16 <strcconcat>
f0115f87:	83 c4 10             	add    $0x10,%esp
f0115f8a:	83 ec 0c             	sub    $0xc,%esp
f0115f8d:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f0115f93:	50                   	push   %eax
f0115f94:	e8 2a bc fe ff       	call   f0101bc3 <execute_command>
f0115f99:	83 c4 10             	add    $0x10,%esp

		//Test7
		res = calculate_required_frames(proc_directory, 0x700000, 2*mega);
f0115f9c:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115f9f:	01 c0                	add    %eax,%eax
f0115fa1:	83 ec 04             	sub    $0x4,%esp
f0115fa4:	50                   	push   %eax
f0115fa5:	68 00 00 70 00       	push   $0x700000
f0115faa:	ff 75 d8             	pushl  -0x28(%ebp)
f0115fad:	e8 d4 30 ff ff       	call   f0109086 <calculate_required_frames>
f0115fb2:	83 c4 10             	add    $0x10,%esp
f0115fb5:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 510 ;
f0115fb8:	c7 45 c4 fe 01 00 00 	movl   $0x1fe,-0x3c(%ebp)
		if (res != expected)
f0115fbf:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0115fc2:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0115fc5:	74 24                	je     f0115feb <test_calculate_required_frames+0x7bd>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f0115fc7:	83 ec 0c             	sub    $0xc,%esp
f0115fca:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115fcd:	ff 75 c8             	pushl  -0x38(%ebp)
f0115fd0:	68 cc 93 13 f0       	push   $0xf01393cc
f0115fd5:	68 01 06 00 00       	push   $0x601
f0115fda:	68 52 7b 13 f0       	push   $0xf0137b52
f0115fdf:	e8 da a3 fe ff       	call   f01003be <_warn>
f0115fe4:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115fe7:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0115feb:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115fef:	74 04                	je     f0115ff5 <test_calculate_required_frames+0x7c7>
f0115ff1:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0115ff5:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test8
		res = calculate_required_frames(proc_directory, 0x3FFFFF, 1*kilo);
f0115ff9:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115ffc:	83 ec 04             	sub    $0x4,%esp
f0115fff:	50                   	push   %eax
f0116000:	68 ff ff 3f 00       	push   $0x3fffff
f0116005:	ff 75 d8             	pushl  -0x28(%ebp)
f0116008:	e8 79 30 ff ff       	call   f0109086 <calculate_required_frames>
f011600d:	83 c4 10             	add    $0x10,%esp
f0116010:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 3 ;
f0116013:	c7 45 c4 03 00 00 00 	movl   $0x3,-0x3c(%ebp)
		if (res != expected)
f011601a:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011601d:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0116020:	74 24                	je     f0116046 <test_calculate_required_frames+0x818>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f0116022:	83 ec 0c             	sub    $0xc,%esp
f0116025:	ff 75 c4             	pushl  -0x3c(%ebp)
f0116028:	ff 75 c8             	pushl  -0x38(%ebp)
f011602b:	68 cc 93 13 f0       	push   $0xf01393cc
f0116030:	68 0c 06 00 00       	push   $0x60c
f0116035:	68 52 7b 13 f0       	push   $0xf0137b52
f011603a:	e8 7f a3 fe ff       	call   f01003be <_warn>
f011603f:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116042:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0116046:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011604a:	74 04                	je     f0116050 <test_calculate_required_frames+0x822>
f011604c:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0116050:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE II: END\n") ;
f0116054:	83 ec 0c             	sub    $0xc,%esp
f0116057:	68 df 84 13 f0       	push   $0xf01384df
f011605c:	e8 d0 ad fe ff       	call   f0100e31 <cprintf>
f0116061:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] calculate_required_frames: FINISHED. Evaluation = %d\n", eval);
f0116064:	83 ec 08             	sub    $0x8,%esp
f0116067:	ff 75 e4             	pushl  -0x1c(%ebp)
f011606a:	68 78 94 13 f0       	push   $0xf0139478
f011606f:	e8 bd ad fe ff       	call   f0100e31 <cprintf>
f0116074:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0116077:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f011607b:	75 10                	jne    f011608d <test_calculate_required_frames+0x85f>
		cprintf("Congratulations!! test calculate_required_frames completed successfully.\n");
f011607d:	83 ec 0c             	sub    $0xc,%esp
f0116080:	68 b8 94 13 f0       	push   $0xf01394b8
f0116085:	e8 a7 ad fe ff       	call   f0100e31 <cprintf>
f011608a:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f011608d:	a1 70 ce 2b f0       	mov    0xf02bce70,%eax
f0116092:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0116095:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0116098:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f011609b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01160a0:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01160a3:	5b                   	pop    %ebx
f01160a4:	5e                   	pop    %esi
f01160a5:	5f                   	pop    %edi
f01160a6:	5d                   	pop    %ebp
f01160a7:	c3                   	ret    

f01160a8 <test_calculate_allocated_space>:

int test_calculate_allocated_space()
{
f01160a8:	55                   	push   %ebp
f01160a9:	89 e5                	mov    %esp,%ebp
f01160ab:	57                   	push   %edi
f01160ac:	56                   	push   %esi
f01160ad:	53                   	push   %ebx
f01160ae:	81 ec 0c 02 00 00    	sub    $0x20c,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f01160b4:	8d 45 8e             	lea    -0x72(%ebp),%eax
f01160b7:	bb 54 82 13 f0       	mov    $0xf0138254,%ebx
f01160bc:	ba 0f 00 00 00       	mov    $0xf,%edx
f01160c1:	89 c7                	mov    %eax,%edi
f01160c3:	89 de                	mov    %ebx,%esi
f01160c5:	89 d1                	mov    %edx,%ecx
f01160c7:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01160c9:	8d 55 9d             	lea    -0x63(%ebp),%edx
f01160cc:	b9 23 00 00 00       	mov    $0x23,%ecx
f01160d1:	b0 00                	mov    $0x0,%al
f01160d3:	89 d7                	mov    %edx,%edi
f01160d5:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f01160d7:	6a 00                	push   $0x0
f01160d9:	6a 0a                	push   $0xa
f01160db:	6a 14                	push   $0x14
f01160dd:	8d 45 8e             	lea    -0x72(%ebp),%eax
f01160e0:	50                   	push   %eax
f01160e1:	e8 5c 30 ff ff       	call   f0109142 <env_create>
f01160e6:	83 c4 10             	add    $0x10,%esp
f01160e9:	89 45 dc             	mov    %eax,-0x24(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f01160ec:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01160ef:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
f01160f5:	89 45 d8             	mov    %eax,-0x28(%ebp)
	lcr3(env->env_cr3) ;
f01160f8:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01160fb:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
f0116101:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0116104:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0116107:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f011610a:	c7 85 7a ff ff ff 61 	movl   $0x20707561,-0x86(%ebp)
f0116111:	75 70 20 
f0116114:	c7 85 7e ff ff ff 00 	movl   $0x0,-0x82(%ebp)
f011611b:	00 00 00 
f011611e:	8d 55 82             	lea    -0x7e(%ebp),%edx
f0116121:	b9 03 00 00 00       	mov    $0x3,%ecx
f0116126:	b8 00 00 00 00       	mov    $0x0,%eax
f011612b:	89 d7                	mov    %edx,%edi
f011612d:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f011612f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0116132:	8b 40 4c             	mov    0x4c(%eax),%eax
f0116135:	83 ec 08             	sub    $0x8,%esp
f0116138:	8d 95 66 ff ff ff    	lea    -0x9a(%ebp),%edx
f011613e:	52                   	push   %edx
f011613f:	50                   	push   %eax
f0116140:	e8 d9 97 01 00       	call   f012f91e <ltostr>
f0116145:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f0116148:	83 ec 04             	sub    $0x4,%esp
f011614b:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0116151:	50                   	push   %eax
f0116152:	8d 85 66 ff ff ff    	lea    -0x9a(%ebp),%eax
f0116158:	50                   	push   %eax
f0116159:	8d 85 7a ff ff ff    	lea    -0x86(%ebp),%eax
f011615f:	50                   	push   %eax
f0116160:	e8 b1 98 01 00       	call   f012fa16 <strcconcat>
f0116165:	83 c4 10             	add    $0x10,%esp
	//===================================================

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f0116168:	c7 45 d0 00 04 00 00 	movl   $0x400,-0x30(%ebp)
	int mega = 1024*1024 ;
f011616f:	c7 45 cc 00 00 10 00 	movl   $0x100000,-0x34(%ebp)
	uint32 eval = 0;
f0116176:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint8 correct = 1;
f011617d:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	uint32 expected_num_pages;
	uint32 expected_num_tables;
	uint32 numOfFreeFramesBefore, numOfFreeFramesAfter;
	uint32 num_pages = 0;
f0116181:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0116188:	00 00 00 
	uint32 num_tables = 0;
f011618b:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0116192:	00 00 00 
	ClearUserSpace(proc_directory);
f0116195:	83 ec 0c             	sub    $0xc,%esp
f0116198:	ff 75 d8             	pushl  -0x28(%ebp)
f011619b:	e8 d8 11 00 00       	call   f0117378 <ClearUserSpace>
f01161a0:	83 c4 10             	add    $0x10,%esp

	/*================================================*/
	/*PART I: ALL pages and tables are not exist 50%  */
	/*================================================*/
	cprintf("\nCASE I: ALL pages and tables are not exist [50%]\n") ;
f01161a3:	83 ec 0c             	sub    $0xc,%esp
f01161a6:	68 98 93 13 f0       	push   $0xf0139398
f01161ab:	e8 81 ac fe ff       	call   f0100e31 <cprintf>
f01161b0:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		calculate_allocated_space(proc_directory, 0x0, 0x0+8*kilo, &num_tables, &num_pages);
f01161b3:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01161b6:	c1 e0 03             	shl    $0x3,%eax
f01161b9:	89 c2                	mov    %eax,%edx
f01161bb:	83 ec 0c             	sub    $0xc,%esp
f01161be:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01161c4:	50                   	push   %eax
f01161c5:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01161cb:	50                   	push   %eax
f01161cc:	52                   	push   %edx
f01161cd:	6a 00                	push   $0x0
f01161cf:	ff 75 d8             	pushl  -0x28(%ebp)
f01161d2:	e8 95 2e ff ff       	call   f010906c <calculate_allocated_space>
f01161d7:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f01161da:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01161e0:	85 c0                	test   %eax,%eax
f01161e2:	74 27                	je     f011620b <test_calculate_allocated_space+0x163>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f01161e4:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01161ea:	83 ec 0c             	sub    $0xc,%esp
f01161ed:	6a 00                	push   $0x0
f01161ef:	50                   	push   %eax
f01161f0:	68 04 95 13 f0       	push   $0xf0139504
f01161f5:	68 41 06 00 00       	push   $0x641
f01161fa:	68 52 7b 13 f0       	push   $0xf0137b52
f01161ff:	e8 ba a1 fe ff       	call   f01003be <_warn>
f0116204:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116207:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f011620b:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116211:	85 c0                	test   %eax,%eax
f0116213:	74 27                	je     f011623c <test_calculate_allocated_space+0x194>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0116215:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011621b:	83 ec 0c             	sub    $0xc,%esp
f011621e:	6a 00                	push   $0x0
f0116220:	50                   	push   %eax
f0116221:	68 64 95 13 f0       	push   $0xf0139564
f0116226:	68 46 06 00 00       	push   $0x646
f011622b:	68 52 7b 13 f0       	push   $0xf0137b52
f0116230:	e8 89 a1 fe ff       	call   f01003be <_warn>
f0116235:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116238:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011623c:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0116240:	74 04                	je     f0116246 <test_calculate_allocated_space+0x19e>
f0116242:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0116246:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test2
		num_tables = 0;
f011624a:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0116251:	00 00 00 
		num_pages = 0;
f0116254:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f011625b:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+4*mega, &num_tables, &num_pages);
f011625e:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0116261:	c1 e0 02             	shl    $0x2,%eax
f0116264:	89 c2                	mov    %eax,%edx
f0116266:	83 ec 0c             	sub    $0xc,%esp
f0116269:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f011626f:	50                   	push   %eax
f0116270:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0116276:	50                   	push   %eax
f0116277:	52                   	push   %edx
f0116278:	6a 00                	push   $0x0
f011627a:	ff 75 d8             	pushl  -0x28(%ebp)
f011627d:	e8 ea 2d ff ff       	call   f010906c <calculate_allocated_space>
f0116282:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0116285:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011628b:	85 c0                	test   %eax,%eax
f011628d:	74 27                	je     f01162b6 <test_calculate_allocated_space+0x20e>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f011628f:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0116295:	83 ec 0c             	sub    $0xc,%esp
f0116298:	6a 00                	push   $0x0
f011629a:	50                   	push   %eax
f011629b:	68 04 95 13 f0       	push   $0xf0139504
f01162a0:	68 52 06 00 00       	push   $0x652
f01162a5:	68 52 7b 13 f0       	push   $0xf0137b52
f01162aa:	e8 0f a1 fe ff       	call   f01003be <_warn>
f01162af:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01162b2:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f01162b6:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01162bc:	85 c0                	test   %eax,%eax
f01162be:	74 27                	je     f01162e7 <test_calculate_allocated_space+0x23f>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f01162c0:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01162c6:	83 ec 0c             	sub    $0xc,%esp
f01162c9:	6a 00                	push   $0x0
f01162cb:	50                   	push   %eax
f01162cc:	68 64 95 13 f0       	push   $0xf0139564
f01162d1:	68 57 06 00 00       	push   $0x657
f01162d6:	68 52 7b 13 f0       	push   $0xf0137b52
f01162db:	e8 de a0 fe ff       	call   f01003be <_warn>
f01162e0:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01162e3:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01162e7:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01162eb:	74 04                	je     f01162f1 <test_calculate_allocated_space+0x249>
f01162ed:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01162f1:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		num_tables = 0;
f01162f5:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01162fc:	00 00 00 
		num_pages = 0;
f01162ff:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0116306:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+1024*mega, &num_tables, &num_pages);
f0116309:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011630c:	c1 e0 0a             	shl    $0xa,%eax
f011630f:	89 c2                	mov    %eax,%edx
f0116311:	83 ec 0c             	sub    $0xc,%esp
f0116314:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f011631a:	50                   	push   %eax
f011631b:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0116321:	50                   	push   %eax
f0116322:	52                   	push   %edx
f0116323:	6a 00                	push   $0x0
f0116325:	ff 75 d8             	pushl  -0x28(%ebp)
f0116328:	e8 3f 2d ff ff       	call   f010906c <calculate_allocated_space>
f011632d:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0116330:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0116336:	85 c0                	test   %eax,%eax
f0116338:	74 27                	je     f0116361 <test_calculate_allocated_space+0x2b9>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f011633a:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0116340:	83 ec 0c             	sub    $0xc,%esp
f0116343:	6a 00                	push   $0x0
f0116345:	50                   	push   %eax
f0116346:	68 04 95 13 f0       	push   $0xf0139504
f011634b:	68 63 06 00 00       	push   $0x663
f0116350:	68 52 7b 13 f0       	push   $0xf0137b52
f0116355:	e8 64 a0 fe ff       	call   f01003be <_warn>
f011635a:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011635d:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0116361:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116367:	85 c0                	test   %eax,%eax
f0116369:	74 27                	je     f0116392 <test_calculate_allocated_space+0x2ea>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f011636b:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116371:	83 ec 0c             	sub    $0xc,%esp
f0116374:	6a 00                	push   $0x0
f0116376:	50                   	push   %eax
f0116377:	68 64 95 13 f0       	push   $0xf0139564
f011637c:	68 68 06 00 00       	push   $0x668
f0116381:	68 52 7b 13 f0       	push   $0xf0137b52
f0116386:	e8 33 a0 fe ff       	call   f01003be <_warn>
f011638b:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011638e:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0116392:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0116396:	74 04                	je     f011639c <test_calculate_allocated_space+0x2f4>
f0116398:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011639c:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		//Test4
		num_tables = 0;
f01163a0:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01163a7:	00 00 00 
		num_pages = 0;
f01163aa:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01163b1:	00 00 00 
		calculate_allocated_space(proc_directory, 0x1000, 0x1000+6*kilo, &num_tables, &num_pages);
f01163b4:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01163b7:	89 d0                	mov    %edx,%eax
f01163b9:	01 c0                	add    %eax,%eax
f01163bb:	01 d0                	add    %edx,%eax
f01163bd:	01 c0                	add    %eax,%eax
f01163bf:	05 00 10 00 00       	add    $0x1000,%eax
f01163c4:	89 c2                	mov    %eax,%edx
f01163c6:	83 ec 0c             	sub    $0xc,%esp
f01163c9:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01163cf:	50                   	push   %eax
f01163d0:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01163d6:	50                   	push   %eax
f01163d7:	52                   	push   %edx
f01163d8:	68 00 10 00 00       	push   $0x1000
f01163dd:	ff 75 d8             	pushl  -0x28(%ebp)
f01163e0:	e8 87 2c ff ff       	call   f010906c <calculate_allocated_space>
f01163e5:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f01163e8:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01163ee:	85 c0                	test   %eax,%eax
f01163f0:	74 27                	je     f0116419 <test_calculate_allocated_space+0x371>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f01163f2:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01163f8:	83 ec 0c             	sub    $0xc,%esp
f01163fb:	6a 00                	push   $0x0
f01163fd:	50                   	push   %eax
f01163fe:	68 04 95 13 f0       	push   $0xf0139504
f0116403:	68 75 06 00 00       	push   $0x675
f0116408:	68 52 7b 13 f0       	push   $0xf0137b52
f011640d:	e8 ac 9f fe ff       	call   f01003be <_warn>
f0116412:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116415:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0116419:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011641f:	85 c0                	test   %eax,%eax
f0116421:	74 27                	je     f011644a <test_calculate_allocated_space+0x3a2>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0116423:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116429:	83 ec 0c             	sub    $0xc,%esp
f011642c:	6a 00                	push   $0x0
f011642e:	50                   	push   %eax
f011642f:	68 64 95 13 f0       	push   $0xf0139564
f0116434:	68 7a 06 00 00       	push   $0x67a
f0116439:	68 52 7b 13 f0       	push   $0xf0137b52
f011643e:	e8 7b 9f fe ff       	call   f01003be <_warn>
f0116443:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116446:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011644a:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011644e:	74 04                	je     f0116454 <test_calculate_allocated_space+0x3ac>
f0116450:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0116454:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test5
		num_tables = 0;
f0116458:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f011645f:	00 00 00 
		num_pages = 0;
f0116462:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0116469:	00 00 00 
		calculate_allocated_space(proc_directory, 0x1800, 0x1800+3*kilo, &num_tables, &num_pages);
f011646c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011646f:	89 c2                	mov    %eax,%edx
f0116471:	01 d2                	add    %edx,%edx
f0116473:	01 d0                	add    %edx,%eax
f0116475:	05 00 18 00 00       	add    $0x1800,%eax
f011647a:	89 c2                	mov    %eax,%edx
f011647c:	83 ec 0c             	sub    $0xc,%esp
f011647f:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0116485:	50                   	push   %eax
f0116486:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f011648c:	50                   	push   %eax
f011648d:	52                   	push   %edx
f011648e:	68 00 18 00 00       	push   $0x1800
f0116493:	ff 75 d8             	pushl  -0x28(%ebp)
f0116496:	e8 d1 2b ff ff       	call   f010906c <calculate_allocated_space>
f011649b:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f011649e:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01164a4:	85 c0                	test   %eax,%eax
f01164a6:	74 27                	je     f01164cf <test_calculate_allocated_space+0x427>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f01164a8:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01164ae:	83 ec 0c             	sub    $0xc,%esp
f01164b1:	6a 00                	push   $0x0
f01164b3:	50                   	push   %eax
f01164b4:	68 04 95 13 f0       	push   $0xf0139504
f01164b9:	68 86 06 00 00       	push   $0x686
f01164be:	68 52 7b 13 f0       	push   $0xf0137b52
f01164c3:	e8 f6 9e fe ff       	call   f01003be <_warn>
f01164c8:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01164cb:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f01164cf:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01164d5:	85 c0                	test   %eax,%eax
f01164d7:	74 27                	je     f0116500 <test_calculate_allocated_space+0x458>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f01164d9:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01164df:	83 ec 0c             	sub    $0xc,%esp
f01164e2:	6a 00                	push   $0x0
f01164e4:	50                   	push   %eax
f01164e5:	68 64 95 13 f0       	push   $0xf0139564
f01164ea:	68 8b 06 00 00       	push   $0x68b
f01164ef:	68 52 7b 13 f0       	push   $0xf0137b52
f01164f4:	e8 c5 9e fe ff       	call   f01003be <_warn>
f01164f9:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01164fc:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0116500:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0116504:	74 04                	je     f011650a <test_calculate_allocated_space+0x462>
f0116506:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011650a:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test6
		num_tables = 0;
f011650e:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0116515:	00 00 00 
		num_pages = 0;
f0116518:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f011651f:	00 00 00 
		calculate_allocated_space(proc_directory, 0x400000, 0x400000+10*mega, &num_tables, &num_pages);
f0116522:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0116525:	89 d0                	mov    %edx,%eax
f0116527:	c1 e0 02             	shl    $0x2,%eax
f011652a:	01 d0                	add    %edx,%eax
f011652c:	01 c0                	add    %eax,%eax
f011652e:	05 00 00 40 00       	add    $0x400000,%eax
f0116533:	89 c2                	mov    %eax,%edx
f0116535:	83 ec 0c             	sub    $0xc,%esp
f0116538:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f011653e:	50                   	push   %eax
f011653f:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0116545:	50                   	push   %eax
f0116546:	52                   	push   %edx
f0116547:	68 00 00 40 00       	push   $0x400000
f011654c:	ff 75 d8             	pushl  -0x28(%ebp)
f011654f:	e8 18 2b ff ff       	call   f010906c <calculate_allocated_space>
f0116554:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0116557:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011655d:	85 c0                	test   %eax,%eax
f011655f:	74 27                	je     f0116588 <test_calculate_allocated_space+0x4e0>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0116561:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0116567:	83 ec 0c             	sub    $0xc,%esp
f011656a:	6a 00                	push   $0x0
f011656c:	50                   	push   %eax
f011656d:	68 04 95 13 f0       	push   $0xf0139504
f0116572:	68 97 06 00 00       	push   $0x697
f0116577:	68 52 7b 13 f0       	push   $0xf0137b52
f011657c:	e8 3d 9e fe ff       	call   f01003be <_warn>
f0116581:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116584:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0116588:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011658e:	85 c0                	test   %eax,%eax
f0116590:	74 27                	je     f01165b9 <test_calculate_allocated_space+0x511>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0116592:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116598:	83 ec 0c             	sub    $0xc,%esp
f011659b:	6a 00                	push   $0x0
f011659d:	50                   	push   %eax
f011659e:	68 64 95 13 f0       	push   $0xf0139564
f01165a3:	68 9c 06 00 00       	push   $0x69c
f01165a8:	68 52 7b 13 f0       	push   $0xf0137b52
f01165ad:	e8 0c 9e fe ff       	call   f01003be <_warn>
f01165b2:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01165b5:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01165b9:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01165bd:	74 04                	je     f01165c3 <test_calculate_allocated_space+0x51b>
f01165bf:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01165c3:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		//Test7
		num_tables = 0;
f01165c7:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01165ce:	00 00 00 
		num_pages = 0;
f01165d1:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01165d8:	00 00 00 
		calculate_allocated_space(proc_directory, 0x700000, 0x700000+2*mega, &num_tables, &num_pages);
f01165db:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01165de:	05 00 00 38 00       	add    $0x380000,%eax
f01165e3:	01 c0                	add    %eax,%eax
f01165e5:	89 c2                	mov    %eax,%edx
f01165e7:	83 ec 0c             	sub    $0xc,%esp
f01165ea:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01165f0:	50                   	push   %eax
f01165f1:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01165f7:	50                   	push   %eax
f01165f8:	52                   	push   %edx
f01165f9:	68 00 00 70 00       	push   $0x700000
f01165fe:	ff 75 d8             	pushl  -0x28(%ebp)
f0116601:	e8 66 2a ff ff       	call   f010906c <calculate_allocated_space>
f0116606:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0116609:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011660f:	85 c0                	test   %eax,%eax
f0116611:	74 27                	je     f011663a <test_calculate_allocated_space+0x592>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0116613:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0116619:	83 ec 0c             	sub    $0xc,%esp
f011661c:	6a 00                	push   $0x0
f011661e:	50                   	push   %eax
f011661f:	68 04 95 13 f0       	push   $0xf0139504
f0116624:	68 a9 06 00 00       	push   $0x6a9
f0116629:	68 52 7b 13 f0       	push   $0xf0137b52
f011662e:	e8 8b 9d fe ff       	call   f01003be <_warn>
f0116633:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116636:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f011663a:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116640:	85 c0                	test   %eax,%eax
f0116642:	74 27                	je     f011666b <test_calculate_allocated_space+0x5c3>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0116644:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011664a:	83 ec 0c             	sub    $0xc,%esp
f011664d:	6a 00                	push   $0x0
f011664f:	50                   	push   %eax
f0116650:	68 64 95 13 f0       	push   $0xf0139564
f0116655:	68 ae 06 00 00       	push   $0x6ae
f011665a:	68 52 7b 13 f0       	push   $0xf0137b52
f011665f:	e8 5a 9d fe ff       	call   f01003be <_warn>
f0116664:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116667:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f011666b:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011666f:	74 04                	je     f0116675 <test_calculate_allocated_space+0x5cd>
f0116671:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0116675:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test8
		num_tables = 0;
f0116679:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0116680:	00 00 00 
		num_pages = 0;
f0116683:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f011668a:	00 00 00 
		calculate_allocated_space(proc_directory, 0x3FFFFF, 0x3FFFFF+1*kilo, &num_tables, &num_pages);
f011668d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0116690:	05 ff ff 3f 00       	add    $0x3fffff,%eax
f0116695:	89 c2                	mov    %eax,%edx
f0116697:	83 ec 0c             	sub    $0xc,%esp
f011669a:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01166a0:	50                   	push   %eax
f01166a1:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01166a7:	50                   	push   %eax
f01166a8:	52                   	push   %edx
f01166a9:	68 ff ff 3f 00       	push   $0x3fffff
f01166ae:	ff 75 d8             	pushl  -0x28(%ebp)
f01166b1:	e8 b6 29 ff ff       	call   f010906c <calculate_allocated_space>
f01166b6:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f01166b9:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01166bf:	85 c0                	test   %eax,%eax
f01166c1:	74 27                	je     f01166ea <test_calculate_allocated_space+0x642>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f01166c3:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01166c9:	83 ec 0c             	sub    $0xc,%esp
f01166cc:	6a 00                	push   $0x0
f01166ce:	50                   	push   %eax
f01166cf:	68 04 95 13 f0       	push   $0xf0139504
f01166d4:	68 ba 06 00 00       	push   $0x6ba
f01166d9:	68 52 7b 13 f0       	push   $0xf0137b52
f01166de:	e8 db 9c fe ff       	call   f01003be <_warn>
f01166e3:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01166e6:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f01166ea:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01166f0:	85 c0                	test   %eax,%eax
f01166f2:	74 27                	je     f011671b <test_calculate_allocated_space+0x673>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f01166f4:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01166fa:	83 ec 0c             	sub    $0xc,%esp
f01166fd:	6a 00                	push   $0x0
f01166ff:	50                   	push   %eax
f0116700:	68 64 95 13 f0       	push   $0xf0139564
f0116705:	68 bf 06 00 00       	push   $0x6bf
f011670a:	68 52 7b 13 f0       	push   $0xf0137b52
f011670f:	e8 aa 9c fe ff       	call   f01003be <_warn>
f0116714:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116717:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f011671b:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011671f:	74 04                	je     f0116725 <test_calculate_allocated_space+0x67d>
f0116721:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0116725:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE I: END\n") ;
f0116729:	83 ec 0c             	sub    $0xc,%esp
f011672c:	68 05 8f 13 f0       	push   $0xf0138f05
f0116731:	e8 fb a6 fe ff       	call   f0100e31 <cprintf>
f0116736:	83 c4 10             	add    $0x10,%esp

	/*==================================================*/
	/*PART II: SOME pages and/or tables are exist [50%] */
	/*==================================================*/
	cprintf("\nCASE II: SOME pages and/or tables are exist [50%]\n") ;
f0116739:	83 ec 0c             	sub    $0xc,%esp
f011673c:	68 24 94 13 f0       	push   $0xf0139424
f0116741:	e8 eb a6 fe ff       	call   f0100e31 <cprintf>
f0116746:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x0", c1); execute_command(c1);
f0116749:	83 ec 04             	sub    $0x4,%esp
f011674c:	8d 85 f4 fd ff ff    	lea    -0x20c(%ebp),%eax
f0116752:	50                   	push   %eax
f0116753:	68 be 82 13 f0       	push   $0xf01382be
f0116758:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f011675e:	50                   	push   %eax
f011675f:	e8 b2 92 01 00       	call   f012fa16 <strcconcat>
f0116764:	83 c4 10             	add    $0x10,%esp
f0116767:	83 ec 0c             	sub    $0xc,%esp
f011676a:	8d 85 f4 fd ff ff    	lea    -0x20c(%ebp),%eax
f0116770:	50                   	push   %eax
f0116771:	e8 4d b4 fe ff       	call   f0101bc3 <execute_command>
f0116776:	83 c4 10             	add    $0x10,%esp

		num_tables = 0;
f0116779:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0116780:	00 00 00 
		num_pages = 0;
f0116783:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f011678a:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+8*kilo, &num_tables, &num_pages);
f011678d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0116790:	c1 e0 03             	shl    $0x3,%eax
f0116793:	89 c2                	mov    %eax,%edx
f0116795:	83 ec 0c             	sub    $0xc,%esp
f0116798:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f011679e:	50                   	push   %eax
f011679f:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01167a5:	50                   	push   %eax
f01167a6:	52                   	push   %edx
f01167a7:	6a 00                	push   $0x0
f01167a9:	ff 75 d8             	pushl  -0x28(%ebp)
f01167ac:	e8 bb 28 ff ff       	call   f010906c <calculate_allocated_space>
f01167b1:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1 ;
f01167b4:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 1 ;
f01167bb:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f01167c2:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01167c8:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f01167cb:	74 28                	je     f01167f5 <test_calculate_allocated_space+0x74d>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f01167cd:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01167d3:	83 ec 0c             	sub    $0xc,%esp
f01167d6:	ff 75 c8             	pushl  -0x38(%ebp)
f01167d9:	50                   	push   %eax
f01167da:	68 04 95 13 f0       	push   $0xf0139504
f01167df:	68 d6 06 00 00       	push   $0x6d6
f01167e4:	68 52 7b 13 f0       	push   $0xf0137b52
f01167e9:	e8 d0 9b fe ff       	call   f01003be <_warn>
f01167ee:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01167f1:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f01167f5:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01167fb:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01167fe:	74 28                	je     f0116828 <test_calculate_allocated_space+0x780>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0116800:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116806:	83 ec 0c             	sub    $0xc,%esp
f0116809:	ff 75 c4             	pushl  -0x3c(%ebp)
f011680c:	50                   	push   %eax
f011680d:	68 64 95 13 f0       	push   $0xf0139564
f0116812:	68 db 06 00 00       	push   $0x6db
f0116817:	68 52 7b 13 f0       	push   $0xf0137b52
f011681c:	e8 9d 9b fe ff       	call   f01003be <_warn>
f0116821:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116824:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0116828:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011682c:	74 04                	je     f0116832 <test_calculate_allocated_space+0x78a>
f011682e:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0116832:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c2[100] ;strcconcat(aup_cmd, " 0x100000", c2); execute_command(c2);
f0116836:	83 ec 04             	sub    $0x4,%esp
f0116839:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f011683f:	50                   	push   %eax
f0116840:	68 cb 82 13 f0       	push   $0xf01382cb
f0116845:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f011684b:	50                   	push   %eax
f011684c:	e8 c5 91 01 00       	call   f012fa16 <strcconcat>
f0116851:	83 c4 10             	add    $0x10,%esp
f0116854:	83 ec 0c             	sub    $0xc,%esp
f0116857:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f011685d:	50                   	push   %eax
f011685e:	e8 60 b3 fe ff       	call   f0101bc3 <execute_command>
f0116863:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x10000000", c3); execute_command(c3);
f0116866:	83 ec 04             	sub    $0x4,%esp
f0116869:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f011686f:	50                   	push   %eax
f0116870:	68 58 94 13 f0       	push   $0xf0139458
f0116875:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f011687b:	50                   	push   %eax
f011687c:	e8 95 91 01 00       	call   f012fa16 <strcconcat>
f0116881:	83 c4 10             	add    $0x10,%esp
f0116884:	83 ec 0c             	sub    $0xc,%esp
f0116887:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f011688d:	50                   	push   %eax
f011688e:	e8 30 b3 fe ff       	call   f0101bc3 <execute_command>
f0116893:	83 c4 10             	add    $0x10,%esp

		//Test2
		num_tables = 0;
f0116896:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f011689d:	00 00 00 
		num_pages = 0;
f01168a0:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01168a7:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+8*mega, &num_tables, &num_pages);
f01168aa:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01168ad:	c1 e0 03             	shl    $0x3,%eax
f01168b0:	89 c2                	mov    %eax,%edx
f01168b2:	83 ec 0c             	sub    $0xc,%esp
f01168b5:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01168bb:	50                   	push   %eax
f01168bc:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01168c2:	50                   	push   %eax
f01168c3:	52                   	push   %edx
f01168c4:	6a 00                	push   $0x0
f01168c6:	ff 75 d8             	pushl  -0x28(%ebp)
f01168c9:	e8 9e 27 ff ff       	call   f010906c <calculate_allocated_space>
f01168ce:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1 ;
f01168d1:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 2 ;
f01168d8:	c7 45 c4 02 00 00 00 	movl   $0x2,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f01168df:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01168e5:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f01168e8:	74 28                	je     f0116912 <test_calculate_allocated_space+0x86a>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f01168ea:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01168f0:	83 ec 0c             	sub    $0xc,%esp
f01168f3:	ff 75 c8             	pushl  -0x38(%ebp)
f01168f6:	50                   	push   %eax
f01168f7:	68 04 95 13 f0       	push   $0xf0139504
f01168fc:	68 ec 06 00 00       	push   $0x6ec
f0116901:	68 52 7b 13 f0       	push   $0xf0137b52
f0116906:	e8 b3 9a fe ff       	call   f01003be <_warn>
f011690b:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011690e:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0116912:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116918:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011691b:	74 28                	je     f0116945 <test_calculate_allocated_space+0x89d>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f011691d:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116923:	83 ec 0c             	sub    $0xc,%esp
f0116926:	ff 75 c4             	pushl  -0x3c(%ebp)
f0116929:	50                   	push   %eax
f011692a:	68 64 95 13 f0       	push   $0xf0139564
f011692f:	68 f1 06 00 00       	push   $0x6f1
f0116934:	68 52 7b 13 f0       	push   $0xf0137b52
f0116939:	e8 80 9a fe ff       	call   f01003be <_warn>
f011693e:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116941:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0116945:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0116949:	74 04                	je     f011694f <test_calculate_allocated_space+0x8a7>
f011694b:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011694f:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		num_tables = 0;
f0116953:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f011695a:	00 00 00 
		num_pages = 0;
f011695d:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0116964:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+1024*mega, &num_tables, &num_pages);
f0116967:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011696a:	c1 e0 0a             	shl    $0xa,%eax
f011696d:	89 c2                	mov    %eax,%edx
f011696f:	83 ec 0c             	sub    $0xc,%esp
f0116972:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0116978:	50                   	push   %eax
f0116979:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f011697f:	50                   	push   %eax
f0116980:	52                   	push   %edx
f0116981:	6a 00                	push   $0x0
f0116983:	ff 75 d8             	pushl  -0x28(%ebp)
f0116986:	e8 e1 26 ff ff       	call   f010906c <calculate_allocated_space>
f011698b:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1 + 1;
f011698e:	c7 45 c8 02 00 00 00 	movl   $0x2,-0x38(%ebp)
		expected_num_pages = 1 + 1 + 1;
f0116995:	c7 45 c4 03 00 00 00 	movl   $0x3,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f011699c:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01169a2:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f01169a5:	74 28                	je     f01169cf <test_calculate_allocated_space+0x927>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f01169a7:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01169ad:	83 ec 0c             	sub    $0xc,%esp
f01169b0:	ff 75 c8             	pushl  -0x38(%ebp)
f01169b3:	50                   	push   %eax
f01169b4:	68 04 95 13 f0       	push   $0xf0139504
f01169b9:	68 ff 06 00 00       	push   $0x6ff
f01169be:	68 52 7b 13 f0       	push   $0xf0137b52
f01169c3:	e8 f6 99 fe ff       	call   f01003be <_warn>
f01169c8:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01169cb:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f01169cf:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01169d5:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01169d8:	74 28                	je     f0116a02 <test_calculate_allocated_space+0x95a>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f01169da:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01169e0:	83 ec 0c             	sub    $0xc,%esp
f01169e3:	ff 75 c4             	pushl  -0x3c(%ebp)
f01169e6:	50                   	push   %eax
f01169e7:	68 64 95 13 f0       	push   $0xf0139564
f01169ec:	68 04 07 00 00       	push   $0x704
f01169f1:	68 52 7b 13 f0       	push   $0xf0137b52
f01169f6:	e8 c3 99 fe ff       	call   f01003be <_warn>
f01169fb:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01169fe:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0116a02:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0116a06:	74 04                	je     f0116a0c <test_calculate_allocated_space+0x964>
f0116a08:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0116a0c:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x2000", c3); execute_command(c3);
f0116a10:	83 ec 04             	sub    $0x4,%esp
f0116a13:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0116a19:	50                   	push   %eax
f0116a1a:	68 64 94 13 f0       	push   $0xf0139464
f0116a1f:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0116a25:	50                   	push   %eax
f0116a26:	e8 eb 8f 01 00       	call   f012fa16 <strcconcat>
f0116a2b:	83 c4 10             	add    $0x10,%esp
f0116a2e:	83 ec 0c             	sub    $0xc,%esp
f0116a31:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0116a37:	50                   	push   %eax
f0116a38:	e8 86 b1 fe ff       	call   f0101bc3 <execute_command>
f0116a3d:	83 c4 10             	add    $0x10,%esp

		//Test4
		num_tables = 0;
f0116a40:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0116a47:	00 00 00 
		num_pages = 0;
f0116a4a:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0116a51:	00 00 00 
		calculate_allocated_space(proc_directory, 0x1800, 0x1800+3*kilo, &num_tables, &num_pages);
f0116a54:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0116a57:	89 c2                	mov    %eax,%edx
f0116a59:	01 d2                	add    %edx,%edx
f0116a5b:	01 d0                	add    %edx,%eax
f0116a5d:	05 00 18 00 00       	add    $0x1800,%eax
f0116a62:	89 c2                	mov    %eax,%edx
f0116a64:	83 ec 0c             	sub    $0xc,%esp
f0116a67:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0116a6d:	50                   	push   %eax
f0116a6e:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0116a74:	50                   	push   %eax
f0116a75:	52                   	push   %edx
f0116a76:	68 00 18 00 00       	push   $0x1800
f0116a7b:	ff 75 d8             	pushl  -0x28(%ebp)
f0116a7e:	e8 e9 25 ff ff       	call   f010906c <calculate_allocated_space>
f0116a83:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f0116a86:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 1;
f0116a8d:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0116a94:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0116a9a:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0116a9d:	74 28                	je     f0116ac7 <test_calculate_allocated_space+0xa1f>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0116a9f:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0116aa5:	83 ec 0c             	sub    $0xc,%esp
f0116aa8:	ff 75 c8             	pushl  -0x38(%ebp)
f0116aab:	50                   	push   %eax
f0116aac:	68 04 95 13 f0       	push   $0xf0139504
f0116ab1:	68 15 07 00 00       	push   $0x715
f0116ab6:	68 52 7b 13 f0       	push   $0xf0137b52
f0116abb:	e8 fe 98 fe ff       	call   f01003be <_warn>
f0116ac0:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116ac3:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0116ac7:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116acd:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0116ad0:	74 28                	je     f0116afa <test_calculate_allocated_space+0xa52>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0116ad2:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116ad8:	83 ec 0c             	sub    $0xc,%esp
f0116adb:	ff 75 c4             	pushl  -0x3c(%ebp)
f0116ade:	50                   	push   %eax
f0116adf:	68 64 95 13 f0       	push   $0xf0139564
f0116ae4:	68 1a 07 00 00       	push   $0x71a
f0116ae9:	68 52 7b 13 f0       	push   $0xf0137b52
f0116aee:	e8 cb 98 fe ff       	call   f01003be <_warn>
f0116af3:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116af6:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0116afa:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0116afe:	74 04                	je     f0116b04 <test_calculate_allocated_space+0xa5c>
f0116b00:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0116b04:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x800000", c4); execute_command(c4);
f0116b08:	83 ec 04             	sub    $0x4,%esp
f0116b0b:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0116b11:	50                   	push   %eax
f0116b12:	68 24 85 13 f0       	push   $0xf0138524
f0116b17:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0116b1d:	50                   	push   %eax
f0116b1e:	e8 f3 8e 01 00       	call   f012fa16 <strcconcat>
f0116b23:	83 c4 10             	add    $0x10,%esp
f0116b26:	83 ec 0c             	sub    $0xc,%esp
f0116b29:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0116b2f:	50                   	push   %eax
f0116b30:	e8 8e b0 fe ff       	call   f0101bc3 <execute_command>
f0116b35:	83 c4 10             	add    $0x10,%esp

		//Test5
		num_tables = 0;
f0116b38:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0116b3f:	00 00 00 
		num_pages = 0;
f0116b42:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0116b49:	00 00 00 
		calculate_allocated_space(proc_directory, 0x400000, 0x400000+10*mega, &num_tables, &num_pages);
f0116b4c:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0116b4f:	89 d0                	mov    %edx,%eax
f0116b51:	c1 e0 02             	shl    $0x2,%eax
f0116b54:	01 d0                	add    %edx,%eax
f0116b56:	01 c0                	add    %eax,%eax
f0116b58:	05 00 00 40 00       	add    $0x400000,%eax
f0116b5d:	89 c2                	mov    %eax,%edx
f0116b5f:	83 ec 0c             	sub    $0xc,%esp
f0116b62:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0116b68:	50                   	push   %eax
f0116b69:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0116b6f:	50                   	push   %eax
f0116b70:	52                   	push   %edx
f0116b71:	68 00 00 40 00       	push   $0x400000
f0116b76:	ff 75 d8             	pushl  -0x28(%ebp)
f0116b79:	e8 ee 24 ff ff       	call   f010906c <calculate_allocated_space>
f0116b7e:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f0116b81:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 1;
f0116b88:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0116b8f:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0116b95:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0116b98:	74 28                	je     f0116bc2 <test_calculate_allocated_space+0xb1a>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0116b9a:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0116ba0:	83 ec 0c             	sub    $0xc,%esp
f0116ba3:	ff 75 c8             	pushl  -0x38(%ebp)
f0116ba6:	50                   	push   %eax
f0116ba7:	68 04 95 13 f0       	push   $0xf0139504
f0116bac:	68 2a 07 00 00       	push   $0x72a
f0116bb1:	68 52 7b 13 f0       	push   $0xf0137b52
f0116bb6:	e8 03 98 fe ff       	call   f01003be <_warn>
f0116bbb:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116bbe:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0116bc2:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116bc8:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0116bcb:	74 28                	je     f0116bf5 <test_calculate_allocated_space+0xb4d>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0116bcd:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116bd3:	83 ec 0c             	sub    $0xc,%esp
f0116bd6:	ff 75 c4             	pushl  -0x3c(%ebp)
f0116bd9:	50                   	push   %eax
f0116bda:	68 64 95 13 f0       	push   $0xf0139564
f0116bdf:	68 2f 07 00 00       	push   $0x72f
f0116be4:	68 52 7b 13 f0       	push   $0xf0137b52
f0116be9:	e8 d0 97 fe ff       	call   f01003be <_warn>
f0116bee:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116bf1:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0116bf5:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0116bf9:	74 04                	je     f0116bff <test_calculate_allocated_space+0xb57>
f0116bfb:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0116bff:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x801000", c3); execute_command(c3);
f0116c03:	83 ec 04             	sub    $0x4,%esp
f0116c06:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0116c0c:	50                   	push   %eax
f0116c0d:	68 2e 85 13 f0       	push   $0xf013852e
f0116c12:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0116c18:	50                   	push   %eax
f0116c19:	e8 f8 8d 01 00       	call   f012fa16 <strcconcat>
f0116c1e:	83 c4 10             	add    $0x10,%esp
f0116c21:	83 ec 0c             	sub    $0xc,%esp
f0116c24:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0116c2a:	50                   	push   %eax
f0116c2b:	e8 93 af fe ff       	call   f0101bc3 <execute_command>
f0116c30:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x810000", c4); execute_command(c4);
f0116c33:	83 ec 04             	sub    $0x4,%esp
f0116c36:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0116c3c:	50                   	push   %eax
f0116c3d:	68 6c 94 13 f0       	push   $0xf013946c
f0116c42:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0116c48:	50                   	push   %eax
f0116c49:	e8 c8 8d 01 00       	call   f012fa16 <strcconcat>
f0116c4e:	83 c4 10             	add    $0x10,%esp
f0116c51:	83 ec 0c             	sub    $0xc,%esp
f0116c54:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0116c5a:	50                   	push   %eax
f0116c5b:	e8 63 af fe ff       	call   f0101bc3 <execute_command>
f0116c60:	83 c4 10             	add    $0x10,%esp

		//Test6
		num_tables = 0;
f0116c63:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0116c6a:	00 00 00 
		num_pages = 0;
f0116c6d:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0116c74:	00 00 00 
		calculate_allocated_space(proc_directory, 0x700000, 0x700000+2*mega, &num_tables, &num_pages);
f0116c77:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0116c7a:	05 00 00 38 00       	add    $0x380000,%eax
f0116c7f:	01 c0                	add    %eax,%eax
f0116c81:	89 c2                	mov    %eax,%edx
f0116c83:	83 ec 0c             	sub    $0xc,%esp
f0116c86:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0116c8c:	50                   	push   %eax
f0116c8d:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0116c93:	50                   	push   %eax
f0116c94:	52                   	push   %edx
f0116c95:	68 00 00 70 00       	push   $0x700000
f0116c9a:	ff 75 d8             	pushl  -0x28(%ebp)
f0116c9d:	e8 ca 23 ff ff       	call   f010906c <calculate_allocated_space>
f0116ca2:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f0116ca5:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 3;
f0116cac:	c7 45 c4 03 00 00 00 	movl   $0x3,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0116cb3:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0116cb9:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0116cbc:	74 28                	je     f0116ce6 <test_calculate_allocated_space+0xc3e>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0116cbe:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0116cc4:	83 ec 0c             	sub    $0xc,%esp
f0116cc7:	ff 75 c8             	pushl  -0x38(%ebp)
f0116cca:	50                   	push   %eax
f0116ccb:	68 04 95 13 f0       	push   $0xf0139504
f0116cd0:	68 41 07 00 00       	push   $0x741
f0116cd5:	68 52 7b 13 f0       	push   $0xf0137b52
f0116cda:	e8 df 96 fe ff       	call   f01003be <_warn>
f0116cdf:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116ce2:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0116ce6:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116cec:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0116cef:	74 28                	je     f0116d19 <test_calculate_allocated_space+0xc71>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0116cf1:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116cf7:	83 ec 0c             	sub    $0xc,%esp
f0116cfa:	ff 75 c4             	pushl  -0x3c(%ebp)
f0116cfd:	50                   	push   %eax
f0116cfe:	68 64 95 13 f0       	push   $0xf0139564
f0116d03:	68 46 07 00 00       	push   $0x746
f0116d08:	68 52 7b 13 f0       	push   $0xf0137b52
f0116d0d:	e8 ac 96 fe ff       	call   f01003be <_warn>
f0116d12:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116d15:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0116d19:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0116d1d:	74 04                	je     f0116d23 <test_calculate_allocated_space+0xc7b>
f0116d1f:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0116d23:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test7
		num_tables = 0;
f0116d27:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0116d2e:	00 00 00 
		num_pages = 0;
f0116d31:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0116d38:	00 00 00 
		calculate_allocated_space(proc_directory, 0x3FFFFF, 0x3FFFFF+1*kilo, &num_tables, &num_pages);
f0116d3b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0116d3e:	05 ff ff 3f 00       	add    $0x3fffff,%eax
f0116d43:	89 c2                	mov    %eax,%edx
f0116d45:	83 ec 0c             	sub    $0xc,%esp
f0116d48:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0116d4e:	50                   	push   %eax
f0116d4f:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0116d55:	50                   	push   %eax
f0116d56:	52                   	push   %edx
f0116d57:	68 ff ff 3f 00       	push   $0x3fffff
f0116d5c:	ff 75 d8             	pushl  -0x28(%ebp)
f0116d5f:	e8 08 23 ff ff       	call   f010906c <calculate_allocated_space>
f0116d64:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f0116d67:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 0;
f0116d6e:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0116d75:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0116d7b:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0116d7e:	74 28                	je     f0116da8 <test_calculate_allocated_space+0xd00>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0116d80:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0116d86:	83 ec 0c             	sub    $0xc,%esp
f0116d89:	ff 75 c8             	pushl  -0x38(%ebp)
f0116d8c:	50                   	push   %eax
f0116d8d:	68 04 95 13 f0       	push   $0xf0139504
f0116d92:	68 54 07 00 00       	push   $0x754
f0116d97:	68 52 7b 13 f0       	push   $0xf0137b52
f0116d9c:	e8 1d 96 fe ff       	call   f01003be <_warn>
f0116da1:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116da4:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0116da8:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116dae:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0116db1:	74 28                	je     f0116ddb <test_calculate_allocated_space+0xd33>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0116db3:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116db9:	83 ec 0c             	sub    $0xc,%esp
f0116dbc:	ff 75 c4             	pushl  -0x3c(%ebp)
f0116dbf:	50                   	push   %eax
f0116dc0:	68 64 95 13 f0       	push   $0xf0139564
f0116dc5:	68 59 07 00 00       	push   $0x759
f0116dca:	68 52 7b 13 f0       	push   $0xf0137b52
f0116dcf:	e8 ea 95 fe ff       	call   f01003be <_warn>
f0116dd4:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116dd7:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0116ddb:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0116ddf:	74 04                	je     f0116de5 <test_calculate_allocated_space+0xd3d>
f0116de1:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0116de5:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE II: END\n") ;
f0116de9:	83 ec 0c             	sub    $0xc,%esp
f0116dec:	68 df 84 13 f0       	push   $0xf01384df
f0116df1:	e8 3b a0 fe ff       	call   f0100e31 <cprintf>
f0116df6:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] calculate_allocated_space: FINISHED. Evaluation = %d\n", eval);
f0116df9:	83 ec 08             	sub    $0x8,%esp
f0116dfc:	ff 75 e4             	pushl  -0x1c(%ebp)
f0116dff:	68 c0 95 13 f0       	push   $0xf01395c0
f0116e04:	e8 28 a0 fe ff       	call   f0100e31 <cprintf>
f0116e09:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0116e0c:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f0116e10:	75 10                	jne    f0116e22 <test_calculate_allocated_space+0xd7a>
		cprintf("Congratulations!! test calculate_allocated_space completed successfully.\n");
f0116e12:	83 ec 0c             	sub    $0xc,%esp
f0116e15:	68 00 96 13 f0       	push   $0xf0139600
f0116e1a:	e8 12 a0 fe ff       	call   f0100e31 <cprintf>
f0116e1f:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0116e22:	a1 70 ce 2b f0       	mov    0xf02bce70,%eax
f0116e27:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0116e2a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0116e2d:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0116e30:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0116e35:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0116e38:	5b                   	pop    %ebx
f0116e39:	5e                   	pop    %esi
f0116e3a:	5f                   	pop    %edi
f0116e3b:	5d                   	pop    %ebp
f0116e3c:	c3                   	ret    

f0116e3d <CB>:
//===========================================================================
//===========================================================================
//===========================================================================

int CB(uint32 *ptr_dir, uint32 va, int bn)
{
f0116e3d:	55                   	push   %ebp
f0116e3e:	89 e5                	mov    %esp,%ebp
f0116e40:	83 ec 18             	sub    $0x18,%esp
	//assert(USE_KHEAP == 0) ;
	uint32 mask = 1<<bn;
f0116e43:	8b 45 10             	mov    0x10(%ebp),%eax
f0116e46:	ba 01 00 00 00       	mov    $0x1,%edx
f0116e4b:	88 c1                	mov    %al,%cl
f0116e4d:	d3 e2                	shl    %cl,%edx
f0116e4f:	89 d0                	mov    %edx,%eax
f0116e51:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f0116e54:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116e57:	c1 e8 16             	shr    $0x16,%eax
f0116e5a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116e61:	8b 45 08             	mov    0x8(%ebp),%eax
f0116e64:	01 d0                	add    %edx,%eax
f0116e66:	8b 00                	mov    (%eax),%eax
f0116e68:	83 e0 01             	and    $0x1,%eax
f0116e6b:	85 c0                	test   %eax,%eax
f0116e6d:	75 07                	jne    f0116e76 <CB+0x39>
f0116e6f:	b8 00 00 00 00       	mov    $0x0,%eax
f0116e74:	eb 76                	jmp    f0116eec <CB+0xaf>
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f0116e76:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116e79:	c1 e8 16             	shr    $0x16,%eax
f0116e7c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116e83:	8b 45 08             	mov    0x8(%ebp),%eax
f0116e86:	01 d0                	add    %edx,%eax
f0116e88:	8b 00                	mov    (%eax),%eax
f0116e8a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0116e8f:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0116e92:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0116e95:	c1 e8 0c             	shr    $0xc,%eax
f0116e98:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0116e9b:	a1 d0 cd 2b f0       	mov    0xf02bcdd0,%eax
f0116ea0:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0116ea3:	72 17                	jb     f0116ebc <CB+0x7f>
f0116ea5:	ff 75 f0             	pushl  -0x10(%ebp)
f0116ea8:	68 4c 96 13 f0       	push   $0xf013964c
f0116ead:	68 74 07 00 00       	push   $0x774
f0116eb2:	68 52 7b 13 f0       	push   $0xf0137b52
f0116eb7:	e8 f4 92 fe ff       	call   f01001b0 <_panic>
f0116ebc:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0116ebf:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0116ec4:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return ((table[((((uint32) (va)) >> 12) & 0x3FF)]&mask) == mask)? 1 : 0 ;
f0116ec7:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116eca:	c1 e8 0c             	shr    $0xc,%eax
f0116ecd:	25 ff 03 00 00       	and    $0x3ff,%eax
f0116ed2:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116ed9:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0116edc:	01 d0                	add    %edx,%eax
f0116ede:	8b 00                	mov    (%eax),%eax
f0116ee0:	23 45 f4             	and    -0xc(%ebp),%eax
f0116ee3:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0116ee6:	0f 94 c0             	sete   %al
f0116ee9:	0f b6 c0             	movzbl %al,%eax
}
f0116eec:	c9                   	leave  
f0116eed:	c3                   	ret    

f0116eee <SB>:
int SB(uint32 *ptr_dir, uint32 va, int bn , int v)
{
f0116eee:	55                   	push   %ebp
f0116eef:	89 e5                	mov    %esp,%ebp
f0116ef1:	83 ec 18             	sub    $0x18,%esp
	assert(USE_KHEAP == 0) ;
	uint32 mask = 1<<bn;
f0116ef4:	8b 45 10             	mov    0x10(%ebp),%eax
f0116ef7:	ba 01 00 00 00       	mov    $0x1,%edx
f0116efc:	88 c1                	mov    %al,%cl
f0116efe:	d3 e2                	shl    %cl,%edx
f0116f00:	89 d0                	mov    %edx,%eax
f0116f02:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f0116f05:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116f08:	c1 e8 16             	shr    $0x16,%eax
f0116f0b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116f12:	8b 45 08             	mov    0x8(%ebp),%eax
f0116f15:	01 d0                	add    %edx,%eax
f0116f17:	8b 00                	mov    (%eax),%eax
f0116f19:	83 e0 01             	and    $0x1,%eax
f0116f1c:	85 c0                	test   %eax,%eax
f0116f1e:	75 0a                	jne    f0116f2a <SB+0x3c>
f0116f20:	b8 00 00 00 00       	mov    $0x0,%eax
f0116f25:	e9 cd 00 00 00       	jmp    f0116ff7 <SB+0x109>
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f0116f2a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116f2d:	c1 e8 16             	shr    $0x16,%eax
f0116f30:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116f37:	8b 45 08             	mov    0x8(%ebp),%eax
f0116f3a:	01 d0                	add    %edx,%eax
f0116f3c:	8b 00                	mov    (%eax),%eax
f0116f3e:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0116f43:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0116f46:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0116f49:	c1 e8 0c             	shr    $0xc,%eax
f0116f4c:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0116f4f:	a1 d0 cd 2b f0       	mov    0xf02bcdd0,%eax
f0116f54:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0116f57:	72 17                	jb     f0116f70 <SB+0x82>
f0116f59:	ff 75 f0             	pushl  -0x10(%ebp)
f0116f5c:	68 4c 96 13 f0       	push   $0xf013964c
f0116f61:	68 7c 07 00 00       	push   $0x77c
f0116f66:	68 52 7b 13 f0       	push   $0xf0137b52
f0116f6b:	e8 40 92 fe ff       	call   f01001b0 <_panic>
f0116f70:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0116f73:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0116f78:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (~v) table[((((uint32) (va)) >> 12) & 0x3FF)] &= ~mask ;
f0116f7b:	83 7d 14 ff          	cmpl   $0xffffffff,0x14(%ebp)
f0116f7f:	74 3c                	je     f0116fbd <SB+0xcf>
f0116f81:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116f84:	c1 e8 0c             	shr    $0xc,%eax
f0116f87:	25 ff 03 00 00       	and    $0x3ff,%eax
f0116f8c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116f93:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0116f96:	01 d0                	add    %edx,%eax
f0116f98:	8b 55 0c             	mov    0xc(%ebp),%edx
f0116f9b:	c1 ea 0c             	shr    $0xc,%edx
f0116f9e:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0116fa4:	8d 0c 95 00 00 00 00 	lea    0x0(,%edx,4),%ecx
f0116fab:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0116fae:	01 ca                	add    %ecx,%edx
f0116fb0:	8b 12                	mov    (%edx),%edx
f0116fb2:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0116fb5:	f7 d1                	not    %ecx
f0116fb7:	21 ca                	and    %ecx,%edx
f0116fb9:	89 10                	mov    %edx,(%eax)
f0116fbb:	eb 35                	jmp    f0116ff2 <SB+0x104>
	else 	table[((((uint32) (va)) >> 12) & 0x3FF)] |= mask ;
f0116fbd:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116fc0:	c1 e8 0c             	shr    $0xc,%eax
f0116fc3:	25 ff 03 00 00       	and    $0x3ff,%eax
f0116fc8:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116fcf:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0116fd2:	01 c2                	add    %eax,%edx
f0116fd4:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116fd7:	c1 e8 0c             	shr    $0xc,%eax
f0116fda:	25 ff 03 00 00       	and    $0x3ff,%eax
f0116fdf:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f0116fe6:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0116fe9:	01 c8                	add    %ecx,%eax
f0116feb:	8b 00                	mov    (%eax),%eax
f0116fed:	0b 45 f4             	or     -0xc(%ebp),%eax
f0116ff0:	89 02                	mov    %eax,(%edx)
	return 0;
f0116ff2:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0116ff7:	c9                   	leave  
f0116ff8:	c3                   	ret    

f0116ff9 <CPs>:
int CPs(uint32 *ptr_dir, uint32 va, uint32 perms, uint32 which)
{
f0116ff9:	55                   	push   %ebp
f0116ffa:	89 e5                	mov    %esp,%ebp
f0116ffc:	83 ec 28             	sub    $0x28,%esp
	assert(USE_KHEAP == 0) ;
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f0116fff:	8b 45 0c             	mov    0xc(%ebp),%eax
f0117002:	c1 e8 16             	shr    $0x16,%eax
f0117005:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011700c:	8b 45 08             	mov    0x8(%ebp),%eax
f011700f:	01 d0                	add    %edx,%eax
f0117011:	8b 00                	mov    (%eax),%eax
f0117013:	83 e0 01             	and    $0x1,%eax
f0117016:	85 c0                	test   %eax,%eax
f0117018:	75 0a                	jne    f0117024 <CPs+0x2b>
f011701a:	b8 00 00 00 00       	mov    $0x0,%eax
f011701f:	e9 b8 00 00 00       	jmp    f01170dc <CPs+0xe3>
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f0117024:	8b 45 0c             	mov    0xc(%ebp),%eax
f0117027:	c1 e8 16             	shr    $0x16,%eax
f011702a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0117031:	8b 45 08             	mov    0x8(%ebp),%eax
f0117034:	01 d0                	add    %edx,%eax
f0117036:	8b 00                	mov    (%eax),%eax
f0117038:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f011703d:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0117040:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0117043:	c1 e8 0c             	shr    $0xc,%eax
f0117046:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0117049:	a1 d0 cd 2b f0       	mov    0xf02bcdd0,%eax
f011704e:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0117051:	72 17                	jb     f011706a <CPs+0x71>
f0117053:	ff 75 f0             	pushl  -0x10(%ebp)
f0117056:	68 4c 96 13 f0       	push   $0xf013964c
f011705b:	68 85 07 00 00       	push   $0x785
f0117060:	68 52 7b 13 f0       	push   $0xf0137b52
f0117065:	e8 46 91 fe ff       	call   f01001b0 <_panic>
f011706a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011706d:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0117072:	89 45 e8             	mov    %eax,-0x18(%ebp)
	for (int i = 0 ; i < 12 ; i++)
f0117075:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011707c:	eb 53                	jmp    f01170d1 <CPs+0xd8>
	{
		uint32 mask = 1<<i;
f011707e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0117081:	ba 01 00 00 00       	mov    $0x1,%edx
f0117086:	88 c1                	mov    %al,%cl
f0117088:	d3 e2                	shl    %cl,%edx
f011708a:	89 d0                	mov    %edx,%eax
f011708c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		if (!(which & mask))	continue ;
f011708f:	8b 45 14             	mov    0x14(%ebp),%eax
f0117092:	23 45 e4             	and    -0x1c(%ebp),%eax
f0117095:	85 c0                	test   %eax,%eax
f0117097:	74 34                	je     f01170cd <CPs+0xd4>
		uint8 c = (table[((((uint32) (va)) >> 12) & 0x3FF)] & mask) == (perms & mask) ? 1 :  0;
f0117099:	8b 45 0c             	mov    0xc(%ebp),%eax
f011709c:	c1 e8 0c             	shr    $0xc,%eax
f011709f:	25 ff 03 00 00       	and    $0x3ff,%eax
f01170a4:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01170ab:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01170ae:	01 d0                	add    %edx,%eax
f01170b0:	8b 00                	mov    (%eax),%eax
f01170b2:	33 45 10             	xor    0x10(%ebp),%eax
f01170b5:	23 45 e4             	and    -0x1c(%ebp),%eax
f01170b8:	85 c0                	test   %eax,%eax
f01170ba:	0f 94 c0             	sete   %al
f01170bd:	88 45 e3             	mov    %al,-0x1d(%ebp)
		if (!c) return 0;
f01170c0:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01170c4:	75 08                	jne    f01170ce <CPs+0xd5>
f01170c6:	b8 00 00 00 00       	mov    $0x0,%eax
f01170cb:	eb 0f                	jmp    f01170dc <CPs+0xe3>
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
	for (int i = 0 ; i < 12 ; i++)
	{
		uint32 mask = 1<<i;
		if (!(which & mask))	continue ;
f01170cd:	90                   	nop
int CPs(uint32 *ptr_dir, uint32 va, uint32 perms, uint32 which)
{
	assert(USE_KHEAP == 0) ;
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
	for (int i = 0 ; i < 12 ; i++)
f01170ce:	ff 45 f4             	incl   -0xc(%ebp)
f01170d1:	83 7d f4 0b          	cmpl   $0xb,-0xc(%ebp)
f01170d5:	7e a7                	jle    f011707e <CPs+0x85>
		uint32 mask = 1<<i;
		if (!(which & mask))	continue ;
		uint8 c = (table[((((uint32) (va)) >> 12) & 0x3FF)] & mask) == (perms & mask) ? 1 :  0;
		if (!c) return 0;
	}
	return 1;
f01170d7:	b8 01 00 00 00       	mov    $0x1,%eax
}
f01170dc:	c9                   	leave  
f01170dd:	c3                   	ret    

f01170de <CA>:

int CA(uint32 *ptr_dir, uint32 va)
{
f01170de:	55                   	push   %ebp
f01170df:	89 e5                	mov    %esp,%ebp
f01170e1:	83 ec 18             	sub    $0x18,%esp
	assert(USE_KHEAP == 0) ;
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f01170e4:	8b 45 0c             	mov    0xc(%ebp),%eax
f01170e7:	c1 e8 16             	shr    $0x16,%eax
f01170ea:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01170f1:	8b 45 08             	mov    0x8(%ebp),%eax
f01170f4:	01 d0                	add    %edx,%eax
f01170f6:	8b 00                	mov    (%eax),%eax
f01170f8:	83 e0 01             	and    $0x1,%eax
f01170fb:	85 c0                	test   %eax,%eax
f01170fd:	75 07                	jne    f0117106 <CA+0x28>
f01170ff:	b8 00 00 00 00       	mov    $0x0,%eax
f0117104:	eb 6f                	jmp    f0117175 <CA+0x97>
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f0117106:	8b 45 0c             	mov    0xc(%ebp),%eax
f0117109:	c1 e8 16             	shr    $0x16,%eax
f011710c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0117113:	8b 45 08             	mov    0x8(%ebp),%eax
f0117116:	01 d0                	add    %edx,%eax
f0117118:	8b 00                	mov    (%eax),%eax
f011711a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f011711f:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0117122:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0117125:	c1 e8 0c             	shr    $0xc,%eax
f0117128:	89 45 f0             	mov    %eax,-0x10(%ebp)
f011712b:	a1 d0 cd 2b f0       	mov    0xf02bcdd0,%eax
f0117130:	39 45 f0             	cmp    %eax,-0x10(%ebp)
f0117133:	72 17                	jb     f011714c <CA+0x6e>
f0117135:	ff 75 f4             	pushl  -0xc(%ebp)
f0117138:	68 4c 96 13 f0       	push   $0xf013964c
f011713d:	68 94 07 00 00       	push   $0x794
f0117142:	68 52 7b 13 f0       	push   $0xf0137b52
f0117147:	e8 64 90 fe ff       	call   f01001b0 <_panic>
f011714c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011714f:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0117154:	89 45 ec             	mov    %eax,-0x14(%ebp)
	return table[((((uint32) (va)) >> 12) & 0x3FF)]&~0x00000FFF;
f0117157:	8b 45 0c             	mov    0xc(%ebp),%eax
f011715a:	c1 e8 0c             	shr    $0xc,%eax
f011715d:	25 ff 03 00 00       	and    $0x3ff,%eax
f0117162:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0117169:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011716c:	01 d0                	add    %edx,%eax
f011716e:	8b 00                	mov    (%eax),%eax
f0117170:	25 00 f0 ff ff       	and    $0xfffff000,%eax
}
f0117175:	c9                   	leave  
f0117176:	c3                   	ret    

f0117177 <CE>:

int CE(uint32 *_d, uint32 va)
{
f0117177:	55                   	push   %ebp
f0117178:	89 e5                	mov    %esp,%ebp
f011717a:	83 ec 18             	sub    $0x18,%esp
	if (!(_d[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f011717d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0117180:	c1 e8 16             	shr    $0x16,%eax
f0117183:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011718a:	8b 45 08             	mov    0x8(%ebp),%eax
f011718d:	01 d0                	add    %edx,%eax
f011718f:	8b 00                	mov    (%eax),%eax
f0117191:	83 e0 01             	and    $0x1,%eax
f0117194:	85 c0                	test   %eax,%eax
f0117196:	75 07                	jne    f011719f <CE+0x28>
f0117198:	b8 00 00 00 00       	mov    $0x0,%eax
f011719d:	eb 7a                	jmp    f0117219 <CE+0xa2>
	uint32 *_t = (STATIC_KERNEL_VIRTUAL_ADDRESS(_d[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f011719f:	8b 45 0c             	mov    0xc(%ebp),%eax
f01171a2:	c1 e8 16             	shr    $0x16,%eax
f01171a5:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01171ac:	8b 45 08             	mov    0x8(%ebp),%eax
f01171af:	01 d0                	add    %edx,%eax
f01171b1:	8b 00                	mov    (%eax),%eax
f01171b3:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01171b8:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01171bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01171be:	c1 e8 0c             	shr    $0xc,%eax
f01171c1:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01171c4:	a1 d0 cd 2b f0       	mov    0xf02bcdd0,%eax
f01171c9:	39 45 f0             	cmp    %eax,-0x10(%ebp)
f01171cc:	72 17                	jb     f01171e5 <CE+0x6e>
f01171ce:	ff 75 f4             	pushl  -0xc(%ebp)
f01171d1:	68 4c 96 13 f0       	push   $0xf013964c
f01171d6:	68 9b 07 00 00       	push   $0x79b
f01171db:	68 52 7b 13 f0       	push   $0xf0137b52
f01171e0:	e8 cb 8f fe ff       	call   f01001b0 <_panic>
f01171e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01171e8:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01171ed:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if ((_t[((((uint32) (va)) >> 12) & 0x3FF)])!=0) return 0;
f01171f0:	8b 45 0c             	mov    0xc(%ebp),%eax
f01171f3:	c1 e8 0c             	shr    $0xc,%eax
f01171f6:	25 ff 03 00 00       	and    $0x3ff,%eax
f01171fb:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0117202:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0117205:	01 d0                	add    %edx,%eax
f0117207:	8b 00                	mov    (%eax),%eax
f0117209:	85 c0                	test   %eax,%eax
f011720b:	74 07                	je     f0117214 <CE+0x9d>
f011720d:	b8 00 00 00 00       	mov    $0x0,%eax
f0117212:	eb 05                	jmp    f0117219 <CE+0xa2>
	return 1;
f0117214:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0117219:	c9                   	leave  
f011721a:	c3                   	ret    

f011721b <CP>:

int CP(uint32* pd, uint32 va, uint32 ps, uint32 pc)
{
f011721b:	55                   	push   %ebp
f011721c:	89 e5                	mov    %esp,%ebp
f011721e:	83 ec 18             	sub    $0x18,%esp
	assert(USE_KHEAP == 0) ;
	uint32 pd_entry = pd[((((uint32) (va)) >> 22) & 0x3FF)];
f0117221:	8b 45 0c             	mov    0xc(%ebp),%eax
f0117224:	c1 e8 16             	shr    $0x16,%eax
f0117227:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011722e:	8b 45 08             	mov    0x8(%ebp),%eax
f0117231:	01 d0                	add    %edx,%eax
f0117233:	8b 00                	mov    (%eax),%eax
f0117235:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if ( (pd_entry & 1) == 1)
f0117238:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011723b:	83 e0 01             	and    $0x1,%eax
f011723e:	85 c0                	test   %eax,%eax
f0117240:	0f 84 92 00 00 00    	je     f01172d8 <CP+0xbd>
	{
		uint32 *t = NULL;
f0117246:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		t = (STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(pd_entry)));
f011724d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0117250:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0117255:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0117258:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011725b:	c1 e8 0c             	shr    $0xc,%eax
f011725e:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0117261:	a1 d0 cd 2b f0       	mov    0xf02bcdd0,%eax
f0117266:	39 45 e8             	cmp    %eax,-0x18(%ebp)
f0117269:	72 17                	jb     f0117282 <CP+0x67>
f011726b:	ff 75 ec             	pushl  -0x14(%ebp)
f011726e:	68 4c 96 13 f0       	push   $0xf013964c
f0117273:	68 a7 07 00 00       	push   $0x7a7
f0117278:	68 52 7b 13 f0       	push   $0xf0137b52
f011727d:	e8 2e 8f fe ff       	call   f01001b0 <_panic>
f0117282:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0117285:	2d 00 00 00 10       	sub    $0x10000000,%eax
f011728a:	89 45 f0             	mov    %eax,-0x10(%ebp)
		//cprintf("va =%x, ENTRY after PERM = %x, perm to set = %x, perm to clear = %x\n", va, t[PTX(va)]&0x00000FFF, ps, pc);

		if (((t[((((uint32) (va)) >> 12) & 0x3FF)]&ps) == ps)&&((~(t[((((uint32) (va)) >> 12) & 0x3FF)])&pc) == pc))
f011728d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0117290:	c1 e8 0c             	shr    $0xc,%eax
f0117293:	25 ff 03 00 00       	and    $0x3ff,%eax
f0117298:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011729f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01172a2:	01 d0                	add    %edx,%eax
f01172a4:	8b 00                	mov    (%eax),%eax
f01172a6:	23 45 10             	and    0x10(%ebp),%eax
f01172a9:	3b 45 10             	cmp    0x10(%ebp),%eax
f01172ac:	75 2a                	jne    f01172d8 <CP+0xbd>
f01172ae:	8b 45 0c             	mov    0xc(%ebp),%eax
f01172b1:	c1 e8 0c             	shr    $0xc,%eax
f01172b4:	25 ff 03 00 00       	and    $0x3ff,%eax
f01172b9:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01172c0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01172c3:	01 d0                	add    %edx,%eax
f01172c5:	8b 00                	mov    (%eax),%eax
f01172c7:	f7 d0                	not    %eax
f01172c9:	23 45 14             	and    0x14(%ebp),%eax
f01172cc:	3b 45 14             	cmp    0x14(%ebp),%eax
f01172cf:	75 07                	jne    f01172d8 <CP+0xbd>
			return 1;
f01172d1:	b8 01 00 00 00       	mov    $0x1,%eax
f01172d6:	eb 05                	jmp    f01172dd <CP+0xc2>
	}
	return 0;
f01172d8:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01172dd:	c9                   	leave  
f01172de:	c3                   	ret    

f01172df <GP>:

uint32 GP(uint32 *ptr_dir, uint32 va)
{
f01172df:	55                   	push   %ebp
f01172e0:	89 e5                	mov    %esp,%ebp
f01172e2:	83 ec 18             	sub    $0x18,%esp
	assert(USE_KHEAP == 0) ;
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f01172e5:	8b 45 0c             	mov    0xc(%ebp),%eax
f01172e8:	c1 e8 16             	shr    $0x16,%eax
f01172eb:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01172f2:	8b 45 08             	mov    0x8(%ebp),%eax
f01172f5:	01 d0                	add    %edx,%eax
f01172f7:	8b 00                	mov    (%eax),%eax
f01172f9:	83 e0 01             	and    $0x1,%eax
f01172fc:	85 c0                	test   %eax,%eax
f01172fe:	75 07                	jne    f0117307 <GP+0x28>
f0117300:	b8 00 00 00 00       	mov    $0x0,%eax
f0117305:	eb 6f                	jmp    f0117376 <GP+0x97>
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f0117307:	8b 45 0c             	mov    0xc(%ebp),%eax
f011730a:	c1 e8 16             	shr    $0x16,%eax
f011730d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0117314:	8b 45 08             	mov    0x8(%ebp),%eax
f0117317:	01 d0                	add    %edx,%eax
f0117319:	8b 00                	mov    (%eax),%eax
f011731b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0117320:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0117323:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0117326:	c1 e8 0c             	shr    $0xc,%eax
f0117329:	89 45 f0             	mov    %eax,-0x10(%ebp)
f011732c:	a1 d0 cd 2b f0       	mov    0xf02bcdd0,%eax
f0117331:	39 45 f0             	cmp    %eax,-0x10(%ebp)
f0117334:	72 17                	jb     f011734d <GP+0x6e>
f0117336:	ff 75 f4             	pushl  -0xc(%ebp)
f0117339:	68 4c 96 13 f0       	push   $0xf013964c
f011733e:	68 b4 07 00 00       	push   $0x7b4
f0117343:	68 52 7b 13 f0       	push   $0xf0137b52
f0117348:	e8 63 8e fe ff       	call   f01001b0 <_panic>
f011734d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0117350:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0117355:	89 45 ec             	mov    %eax,-0x14(%ebp)
	return table[((((uint32) (va)) >> 12) & 0x3FF)] & 0xFFF;
f0117358:	8b 45 0c             	mov    0xc(%ebp),%eax
f011735b:	c1 e8 0c             	shr    $0xc,%eax
f011735e:	25 ff 03 00 00       	and    $0x3ff,%eax
f0117363:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011736a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011736d:	01 d0                	add    %edx,%eax
f011736f:	8b 00                	mov    (%eax),%eax
f0117371:	25 ff 0f 00 00       	and    $0xfff,%eax
}
f0117376:	c9                   	leave  
f0117377:	c3                   	ret    

f0117378 <ClearUserSpace>:

void ClearUserSpace(uint32 *ptr_dir)
{
f0117378:	55                   	push   %ebp
f0117379:	89 e5                	mov    %esp,%ebp
f011737b:	83 ec 10             	sub    $0x10,%esp
	for (int i = 0; i < PDX(USER_TOP); ++i) {
f011737e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0117385:	eb 18                	jmp    f011739f <ClearUserSpace+0x27>
		ptr_dir[i] = 0;
f0117387:	8b 45 fc             	mov    -0x4(%ebp),%eax
f011738a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0117391:	8b 45 08             	mov    0x8(%ebp),%eax
f0117394:	01 d0                	add    %edx,%eax
f0117396:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	return table[((((uint32) (va)) >> 12) & 0x3FF)] & 0xFFF;
}

void ClearUserSpace(uint32 *ptr_dir)
{
	for (int i = 0; i < PDX(USER_TOP); ++i) {
f011739c:	ff 45 fc             	incl   -0x4(%ebp)
f011739f:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01173a2:	3d ba 03 00 00       	cmp    $0x3ba,%eax
f01173a7:	76 de                	jbe    f0117387 <ClearUserSpace+0xf>
		ptr_dir[i] = 0;
	}
}
f01173a9:	90                   	nop
f01173aa:	c9                   	leave  
f01173ab:	c3                   	ret    

f01173ac <CCP>:

int CCP(uint32 *ptr_dir, uint32 ptr1, uint32 ptr2, uint32 size, int ref, uint32 dst_perms, uint32 dst_to_chk, uint32 src_perms, uint32 src_to_chk, uint8 chk_type)
{
f01173ac:	55                   	push   %ebp
f01173ad:	89 e5                	mov    %esp,%ebp
f01173af:	83 ec 38             	sub    $0x38,%esp
f01173b2:	8b 45 2c             	mov    0x2c(%ebp),%eax
f01173b5:	88 45 d4             	mov    %al,-0x2c(%ebp)
	void* ptrTemp1 = (void*)(ptr1 - ptr1 % (4096));
f01173b8:	8b 45 0c             	mov    0xc(%ebp),%eax
f01173bb:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01173c0:	89 45 f4             	mov    %eax,-0xc(%ebp)
	void* ptrTemp2 = (void*)(ptr2 - ptr2 % (4096));
f01173c3:	8b 45 10             	mov    0x10(%ebp),%eax
f01173c6:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01173cb:	89 45 f0             	mov    %eax,-0x10(%ebp)

	for( ;ptrTemp2 < (void*)(ptr2+size); ptrTemp2+=PAGE_SIZE)
f01173ce:	e9 ea 01 00 00       	jmp    f01175bd <CCP+0x211>
	{
		uint32* ptr_table1;
		uint32* ptr_table2;
		struct FrameInfo * pfi1 ;
		struct FrameInfo * pfi2 ;
		if (chk_type != CHK_ALLOC)
f01173d3:	80 7d d4 03          	cmpb   $0x3,-0x2c(%ebp)
f01173d7:	74 44                	je     f011741d <CCP+0x71>
		{
			pfi1 = get_frame_info(ptr_dir, (uint32)ptrTemp1, &ptr_table1);
f01173d9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01173dc:	83 ec 04             	sub    $0x4,%esp
f01173df:	8d 55 dc             	lea    -0x24(%ebp),%edx
f01173e2:	52                   	push   %edx
f01173e3:	50                   	push   %eax
f01173e4:	ff 75 08             	pushl  0x8(%ebp)
f01173e7:	e8 93 03 ff ff       	call   f010777f <get_frame_info>
f01173ec:	83 c4 10             	add    $0x10,%esp
f01173ef:	89 45 e0             	mov    %eax,-0x20(%ebp)
			if (ptr_table1 == NULL)
f01173f2:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01173f5:	85 c0                	test   %eax,%eax
f01173f7:	75 24                	jne    f011741d <CCP+0x71>
			{
				warn("[EVAL] Failed. Table of address 1 = NULL\n");
f01173f9:	83 ec 04             	sub    $0x4,%esp
f01173fc:	68 7c 96 13 f0       	push   $0xf013967c
f0117401:	68 cf 07 00 00       	push   $0x7cf
f0117406:	68 52 7b 13 f0       	push   $0xf0137b52
f011740b:	e8 ae 8f fe ff       	call   f01003be <_warn>
f0117410:	83 c4 10             	add    $0x10,%esp
				return 0;
f0117413:	b8 00 00 00 00       	mov    $0x0,%eax
f0117418:	e9 b6 01 00 00       	jmp    f01175d3 <CCP+0x227>
			}
		}
		pfi2 = get_frame_info(ptr_dir, (uint32)ptrTemp2, &ptr_table2);
f011741d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0117420:	83 ec 04             	sub    $0x4,%esp
f0117423:	8d 55 d8             	lea    -0x28(%ebp),%edx
f0117426:	52                   	push   %edx
f0117427:	50                   	push   %eax
f0117428:	ff 75 08             	pushl  0x8(%ebp)
f011742b:	e8 4f 03 ff ff       	call   f010777f <get_frame_info>
f0117430:	83 c4 10             	add    $0x10,%esp
f0117433:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if (ptr_table2 == NULL)
f0117436:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0117439:	85 c0                	test   %eax,%eax
f011743b:	75 24                	jne    f0117461 <CCP+0xb5>
		{
			warn("[EVAL] Failed. Table of address 2 = NULL\n");
f011743d:	83 ec 04             	sub    $0x4,%esp
f0117440:	68 a8 96 13 f0       	push   $0xf01396a8
f0117445:	68 d6 07 00 00       	push   $0x7d6
f011744a:	68 52 7b 13 f0       	push   $0xf0137b52
f011744f:	e8 6a 8f fe ff       	call   f01003be <_warn>
f0117454:	83 c4 10             	add    $0x10,%esp
			return 0;
f0117457:	b8 00 00 00 00       	mov    $0x0,%eax
f011745c:	e9 72 01 00 00       	jmp    f01175d3 <CCP+0x227>
		}
		if (chk_type == CHK_SHARE)
f0117461:	80 7d d4 02          	cmpb   $0x2,-0x2c(%ebp)
f0117465:	75 70                	jne    f01174d7 <CCP+0x12b>
		{
			uint32 fn1 = ptr_table1[PTX(ptrTemp1)] >> 12 ;
f0117467:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011746a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011746d:	c1 ea 0c             	shr    $0xc,%edx
f0117470:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0117476:	c1 e2 02             	shl    $0x2,%edx
f0117479:	01 d0                	add    %edx,%eax
f011747b:	8b 00                	mov    (%eax),%eax
f011747d:	c1 e8 0c             	shr    $0xc,%eax
f0117480:	89 45 e8             	mov    %eax,-0x18(%ebp)
			uint32 fn2 = ptr_table2[PTX(ptrTemp2)] >> 12 ;
f0117483:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0117486:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0117489:	c1 ea 0c             	shr    $0xc,%edx
f011748c:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0117492:	c1 e2 02             	shl    $0x2,%edx
f0117495:	01 d0                	add    %edx,%eax
f0117497:	8b 00                	mov    (%eax),%eax
f0117499:	c1 e8 0c             	shr    $0xc,%eax
f011749c:	89 45 e4             	mov    %eax,-0x1c(%ebp)

			if(fn1 != fn2)
f011749f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01174a2:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f01174a5:	74 30                	je     f01174d7 <CCP+0x12b>
			{
				warn("[EVAL] Failed. Frame numbers not equal in the whole range!\nva1=%x, va2=%x, fn1=%x, fn2=%x\n", ptrTemp1, ptrTemp2, fn1, fn2);
f01174a7:	83 ec 04             	sub    $0x4,%esp
f01174aa:	ff 75 e4             	pushl  -0x1c(%ebp)
f01174ad:	ff 75 e8             	pushl  -0x18(%ebp)
f01174b0:	ff 75 f0             	pushl  -0x10(%ebp)
f01174b3:	ff 75 f4             	pushl  -0xc(%ebp)
f01174b6:	68 d4 96 13 f0       	push   $0xf01396d4
f01174bb:	68 e0 07 00 00       	push   $0x7e0
f01174c0:	68 52 7b 13 f0       	push   $0xf0137b52
f01174c5:	e8 f4 8e fe ff       	call   f01003be <_warn>
f01174ca:	83 c4 20             	add    $0x20,%esp
				return 0;
f01174cd:	b8 00 00 00 00       	mov    $0x0,%eax
f01174d2:	e9 fc 00 00 00       	jmp    f01175d3 <CCP+0x227>
			}
		}
		if (ref != -1)
f01174d7:	83 7d 18 ff          	cmpl   $0xffffffff,0x18(%ebp)
f01174db:	74 52                	je     f011752f <CCP+0x183>
		{
			if (pfi2 == NULL || (*pfi2).references != ref)
f01174dd:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01174e1:	74 0e                	je     f01174f1 <CCP+0x145>
f01174e3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01174e6:	8b 40 08             	mov    0x8(%eax),%eax
f01174e9:	0f b7 c0             	movzwl %ax,%eax
f01174ec:	3b 45 18             	cmp    0x18(%ebp),%eax
f01174ef:	74 3e                	je     f011752f <CCP+0x183>
			{
				warn("[EVAL] Failed. Num of frame references is not correct. MAKE SURE to use the functions of LAB5! va2=%x, ref2=%d\n", ptrTemp2, pfi2==NULL? 0 : (*pfi2).references);
f01174f1:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01174f5:	74 0b                	je     f0117502 <CCP+0x156>
f01174f7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01174fa:	8b 40 08             	mov    0x8(%eax),%eax
f01174fd:	0f b7 c0             	movzwl %ax,%eax
f0117500:	eb 05                	jmp    f0117507 <CCP+0x15b>
f0117502:	b8 00 00 00 00       	mov    $0x0,%eax
f0117507:	83 ec 0c             	sub    $0xc,%esp
f011750a:	50                   	push   %eax
f011750b:	ff 75 f0             	pushl  -0x10(%ebp)
f011750e:	68 30 97 13 f0       	push   $0xf0139730
f0117513:	68 e8 07 00 00       	push   $0x7e8
f0117518:	68 52 7b 13 f0       	push   $0xf0137b52
f011751d:	e8 9c 8e fe ff       	call   f01003be <_warn>
f0117522:	83 c4 20             	add    $0x20,%esp
				return 0;
f0117525:	b8 00 00 00 00       	mov    $0x0,%eax
f011752a:	e9 a4 00 00 00       	jmp    f01175d3 <CCP+0x227>
			}
		}
		if (CPs(ptr_dir, (uint32)ptrTemp2, dst_perms, dst_to_chk) <= 0)
f011752f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0117532:	ff 75 20             	pushl  0x20(%ebp)
f0117535:	ff 75 1c             	pushl  0x1c(%ebp)
f0117538:	50                   	push   %eax
f0117539:	ff 75 08             	pushl  0x8(%ebp)
f011753c:	e8 b8 fa ff ff       	call   f0116ff9 <CPs>
f0117541:	83 c4 10             	add    $0x10,%esp
f0117544:	85 c0                	test   %eax,%eax
f0117546:	7f 21                	jg     f0117569 <CCP+0x1bd>
		{
			warn("[EVAL] Failed. one or more permission in destination is not correct\n");
f0117548:	83 ec 04             	sub    $0x4,%esp
f011754b:	68 a0 97 13 f0       	push   $0xf01397a0
f0117550:	68 ee 07 00 00       	push   $0x7ee
f0117555:	68 52 7b 13 f0       	push   $0xf0137b52
f011755a:	e8 5f 8e fe ff       	call   f01003be <_warn>
f011755f:	83 c4 10             	add    $0x10,%esp
			return 0;
f0117562:	b8 00 00 00 00       	mov    $0x0,%eax
f0117567:	eb 6a                	jmp    f01175d3 <CCP+0x227>
		}
		if (chk_type != CHK_ALLOC)
f0117569:	80 7d d4 03          	cmpb   $0x3,-0x2c(%ebp)
f011756d:	74 3a                	je     f01175a9 <CCP+0x1fd>
		{
			if (CPs(ptr_dir, (uint32)ptrTemp1, src_perms, src_to_chk) <= 0)
f011756f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0117572:	ff 75 28             	pushl  0x28(%ebp)
f0117575:	ff 75 24             	pushl  0x24(%ebp)
f0117578:	50                   	push   %eax
f0117579:	ff 75 08             	pushl  0x8(%ebp)
f011757c:	e8 78 fa ff ff       	call   f0116ff9 <CPs>
f0117581:	83 c4 10             	add    $0x10,%esp
f0117584:	85 c0                	test   %eax,%eax
f0117586:	7f 21                	jg     f01175a9 <CCP+0x1fd>
			{
				warn("[EVAL] Failed. one or more permission in source is not correct\n");
f0117588:	83 ec 04             	sub    $0x4,%esp
f011758b:	68 e8 97 13 f0       	push   $0xf01397e8
f0117590:	68 f5 07 00 00       	push   $0x7f5
f0117595:	68 52 7b 13 f0       	push   $0xf0137b52
f011759a:	e8 1f 8e fe ff       	call   f01003be <_warn>
f011759f:	83 c4 10             	add    $0x10,%esp
				return 0;
f01175a2:	b8 00 00 00 00       	mov    $0x0,%eax
f01175a7:	eb 2a                	jmp    f01175d3 <CCP+0x227>
			}
		}
		if (chk_type != CHK_ALLOC)
f01175a9:	80 7d d4 03          	cmpb   $0x3,-0x2c(%ebp)
f01175ad:	74 07                	je     f01175b6 <CCP+0x20a>
		{
			ptrTemp1 += PAGE_SIZE;
f01175af:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
int CCP(uint32 *ptr_dir, uint32 ptr1, uint32 ptr2, uint32 size, int ref, uint32 dst_perms, uint32 dst_to_chk, uint32 src_perms, uint32 src_to_chk, uint8 chk_type)
{
	void* ptrTemp1 = (void*)(ptr1 - ptr1 % (4096));
	void* ptrTemp2 = (void*)(ptr2 - ptr2 % (4096));

	for( ;ptrTemp2 < (void*)(ptr2+size); ptrTemp2+=PAGE_SIZE)
f01175b6:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
f01175bd:	8b 55 10             	mov    0x10(%ebp),%edx
f01175c0:	8b 45 14             	mov    0x14(%ebp),%eax
f01175c3:	01 d0                	add    %edx,%eax
f01175c5:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01175c8:	0f 87 05 fe ff ff    	ja     f01173d3 <CCP+0x27>
		{
			ptrTemp1 += PAGE_SIZE;
		}
	}

	return 1;
f01175ce:	b8 01 00 00 00       	mov    $0x1,%eax
}
f01175d3:	c9                   	leave  
f01175d4:	c3                   	ret    

f01175d5 <test_priority_normal_and_higher>:

extern int sys_calculate_free_frames();

uint8 firstTime = 1;
void test_priority_normal_and_higher()
{
f01175d5:	55                   	push   %ebp
f01175d6:	89 e5                	mov    %esp,%ebp
f01175d8:	57                   	push   %edi
f01175d9:	56                   	push   %esi
f01175da:	53                   	push   %ebx
f01175db:	81 ec 4c 03 00 00    	sub    $0x34c,%esp
#if USE_KHEAP
	panic("not handled yet");
#else
	if(firstTime)
f01175e1:	a0 3c fb 18 f0       	mov    0xf018fb3c,%al
f01175e6:	84 c0                	test   %al,%al
f01175e8:	0f 84 38 0a 00 00    	je     f0118026 <test_priority_normal_and_higher+0xa51>
		uint32 fact_WS[15];
		uint32 fact_TimeStamp[15];
		uint32 hello_WS[10];
		uint32 hello_TimeStamp[10];

		firstTime = 0;
f01175ee:	c6 05 3c fb 18 f0 00 	movb   $0x0,0xf018fb3c
		char command[100] = "load fos_add 20";
f01175f5:	8d 85 14 fe ff ff    	lea    -0x1ec(%ebp),%eax
f01175fb:	bb a4 9a 13 f0       	mov    $0xf0139aa4,%ebx
f0117600:	ba 04 00 00 00       	mov    $0x4,%edx
f0117605:	89 c7                	mov    %eax,%edi
f0117607:	89 de                	mov    %ebx,%esi
f0117609:	89 d1                	mov    %edx,%ecx
f011760b:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f011760d:	8d 95 24 fe ff ff    	lea    -0x1dc(%ebp),%edx
f0117613:	b9 15 00 00 00       	mov    $0x15,%ecx
f0117618:	b8 00 00 00 00       	mov    $0x0,%eax
f011761d:	89 d7                	mov    %edx,%edi
f011761f:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command);
f0117621:	83 ec 0c             	sub    $0xc,%esp
f0117624:	8d 85 14 fe ff ff    	lea    -0x1ec(%ebp),%eax
f011762a:	50                   	push   %eax
f011762b:	e8 93 a5 fe ff       	call   f0101bc3 <execute_command>
f0117630:	83 c4 10             	add    $0x10,%esp
		char command2[100] = "load fact 15";
f0117633:	8d 85 78 fe ff ff    	lea    -0x188(%ebp),%eax
f0117639:	bb 08 9b 13 f0       	mov    $0xf0139b08,%ebx
f011763e:	ba 0d 00 00 00       	mov    $0xd,%edx
f0117643:	89 c7                	mov    %eax,%edi
f0117645:	89 de                	mov    %ebx,%esi
f0117647:	89 d1                	mov    %edx,%ecx
f0117649:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011764b:	8d 95 85 fe ff ff    	lea    -0x17b(%ebp),%edx
f0117651:	b9 57 00 00 00       	mov    $0x57,%ecx
f0117656:	b0 00                	mov    $0x0,%al
f0117658:	89 d7                	mov    %edx,%edi
f011765a:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command2);
f011765c:	83 ec 0c             	sub    $0xc,%esp
f011765f:	8d 85 78 fe ff ff    	lea    -0x188(%ebp),%eax
f0117665:	50                   	push   %eax
f0117666:	e8 58 a5 fe ff       	call   f0101bc3 <execute_command>
f011766b:	83 c4 10             	add    $0x10,%esp
		char command3[100] = "load fos_helloWorld 10";
f011766e:	8d 85 dc fe ff ff    	lea    -0x124(%ebp),%eax
f0117674:	bb 6c 9b 13 f0       	mov    $0xf0139b6c,%ebx
f0117679:	ba 17 00 00 00       	mov    $0x17,%edx
f011767e:	89 c7                	mov    %eax,%edi
f0117680:	89 de                	mov    %ebx,%esi
f0117682:	89 d1                	mov    %edx,%ecx
f0117684:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0117686:	8d 95 f3 fe ff ff    	lea    -0x10d(%ebp),%edx
f011768c:	b9 4d 00 00 00       	mov    $0x4d,%ecx
f0117691:	b0 00                	mov    $0x0,%al
f0117693:	89 d7                	mov    %edx,%edi
f0117695:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command3);
f0117697:	83 ec 0c             	sub    $0xc,%esp
f011769a:	8d 85 dc fe ff ff    	lea    -0x124(%ebp),%eax
f01176a0:	50                   	push   %eax
f01176a1:	e8 1d a5 fe ff       	call   f0101bc3 <execute_command>
f01176a6:	83 c4 10             	add    $0x10,%esp

		struct Env * addEnv;
		struct Env * factEnv;
		struct Env * helloEnv;
		envid2env(16, &addEnv, 0);
f01176a9:	83 ec 04             	sub    $0x4,%esp
f01176ac:	6a 00                	push   $0x0
f01176ae:	8d 45 ac             	lea    -0x54(%ebp),%eax
f01176b1:	50                   	push   %eax
f01176b2:	6a 10                	push   $0x10
f01176b4:	e8 8c 27 ff ff       	call   f0109e45 <envid2env>
f01176b9:	83 c4 10             	add    $0x10,%esp
		envid2env(17, &factEnv, 0);
f01176bc:	83 ec 04             	sub    $0x4,%esp
f01176bf:	6a 00                	push   $0x0
f01176c1:	8d 45 a8             	lea    -0x58(%ebp),%eax
f01176c4:	50                   	push   %eax
f01176c5:	6a 11                	push   $0x11
f01176c7:	e8 79 27 ff ff       	call   f0109e45 <envid2env>
f01176cc:	83 c4 10             	add    $0x10,%esp
		envid2env(18, &helloEnv, 0);
f01176cf:	83 ec 04             	sub    $0x4,%esp
f01176d2:	6a 00                	push   $0x0
f01176d4:	8d 45 a4             	lea    -0x5c(%ebp),%eax
f01176d7:	50                   	push   %eax
f01176d8:	6a 12                	push   $0x12
f01176da:	e8 66 27 ff ff       	call   f0109e45 <envid2env>
f01176df:	83 c4 10             	add    $0x10,%esp

		if(addEnv == NULL || factEnv == NULL || helloEnv == NULL)
f01176e2:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01176e5:	85 c0                	test   %eax,%eax
f01176e7:	74 0e                	je     f01176f7 <test_priority_normal_and_higher+0x122>
f01176e9:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01176ec:	85 c0                	test   %eax,%eax
f01176ee:	74 07                	je     f01176f7 <test_priority_normal_and_higher+0x122>
f01176f0:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01176f3:	85 c0                	test   %eax,%eax
f01176f5:	75 14                	jne    f011770b <test_priority_normal_and_higher+0x136>
			panic("Loading programs failed\n");
f01176f7:	83 ec 04             	sub    $0x4,%esp
f01176fa:	68 28 98 13 f0       	push   $0xf0139828
f01176ff:	6a 29                	push   $0x29
f0117701:	68 41 98 13 f0       	push   $0xf0139841
f0117706:	e8 a5 8a fe ff       	call   f01001b0 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
f011770b:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011770e:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117714:	83 f8 14             	cmp    $0x14,%eax
f0117717:	75 1c                	jne    f0117735 <test_priority_normal_and_higher+0x160>
f0117719:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011771c:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117722:	83 f8 0f             	cmp    $0xf,%eax
f0117725:	75 0e                	jne    f0117735 <test_priority_normal_and_higher+0x160>
f0117727:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011772a:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117730:	83 f8 0a             	cmp    $0xa,%eax
f0117733:	74 32                	je     f0117767 <test_priority_normal_and_higher+0x192>
			panic("The programs should be initially loaded with the given working set size. add: %d, fact: %d, hello: %d\n", addEnv->page_WS_max_size , factEnv->page_WS_max_size , helloEnv->page_WS_max_size );
f0117735:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0117738:	8b 88 7c d5 01 00    	mov    0x1d57c(%eax),%ecx
f011773e:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0117741:	8b 90 7c d5 01 00    	mov    0x1d57c(%eax),%edx
f0117747:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011774a:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117750:	83 ec 08             	sub    $0x8,%esp
f0117753:	51                   	push   %ecx
f0117754:	52                   	push   %edx
f0117755:	50                   	push   %eax
f0117756:	68 5c 98 13 f0       	push   $0xf013985c
f011775b:	6a 2c                	push   $0x2c
f011775d:	68 41 98 13 f0       	push   $0xf0139841
f0117762:	e8 49 8a fe ff       	call   f01001b0 <_panic>

		for(int i = 0; i < 20; i++)
f0117767:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f011776e:	eb 47                	jmp    f01177b7 <test_priority_normal_and_higher+0x1e2>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
f0117770:	8b 4d ac             	mov    -0x54(%ebp),%ecx
f0117773:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0117776:	89 d0                	mov    %edx,%eax
f0117778:	01 c0                	add    %eax,%eax
f011777a:	01 d0                	add    %edx,%eax
f011777c:	c1 e0 03             	shl    $0x3,%eax
f011777f:	01 c8                	add    %ecx,%eax
f0117781:	05 b8 00 00 00       	add    $0xb8,%eax
f0117786:	8b 10                	mov    (%eax),%edx
f0117788:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011778b:	89 94 85 74 fd ff ff 	mov    %edx,-0x28c(%ebp,%eax,4)
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
f0117792:	8b 4d ac             	mov    -0x54(%ebp),%ecx
f0117795:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0117798:	89 d0                	mov    %edx,%eax
f011779a:	01 c0                	add    %eax,%eax
f011779c:	01 d0                	add    %edx,%eax
f011779e:	c1 e0 03             	shl    $0x3,%eax
f01177a1:	01 c8                	add    %ecx,%eax
f01177a3:	05 c0 00 00 00       	add    $0xc0,%eax
f01177a8:	8b 10                	mov    (%eax),%edx
f01177aa:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01177ad:	89 94 85 c4 fd ff ff 	mov    %edx,-0x23c(%ebp,%eax,4)
			panic("Loading programs failed\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
			panic("The programs should be initially loaded with the given working set size. add: %d, fact: %d, hello: %d\n", addEnv->page_WS_max_size , factEnv->page_WS_max_size , helloEnv->page_WS_max_size );

		for(int i = 0; i < 20; i++)
f01177b4:	ff 45 e4             	incl   -0x1c(%ebp)
f01177b7:	83 7d e4 13          	cmpl   $0x13,-0x1c(%ebp)
f01177bb:	7e b3                	jle    f0117770 <test_priority_normal_and_higher+0x19b>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 15; i++)
f01177bd:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f01177c4:	eb 47                	jmp    f011780d <test_priority_normal_and_higher+0x238>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
f01177c6:	8b 4d a8             	mov    -0x58(%ebp),%ecx
f01177c9:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01177cc:	89 d0                	mov    %edx,%eax
f01177ce:	01 c0                	add    %eax,%eax
f01177d0:	01 d0                	add    %edx,%eax
f01177d2:	c1 e0 03             	shl    $0x3,%eax
f01177d5:	01 c8                	add    %ecx,%eax
f01177d7:	05 b8 00 00 00       	add    $0xb8,%eax
f01177dc:	8b 10                	mov    (%eax),%edx
f01177de:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01177e1:	89 94 85 fc fc ff ff 	mov    %edx,-0x304(%ebp,%eax,4)
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
f01177e8:	8b 4d a8             	mov    -0x58(%ebp),%ecx
f01177eb:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01177ee:	89 d0                	mov    %edx,%eax
f01177f0:	01 c0                	add    %eax,%eax
f01177f2:	01 d0                	add    %edx,%eax
f01177f4:	c1 e0 03             	shl    $0x3,%eax
f01177f7:	01 c8                	add    %ecx,%eax
f01177f9:	05 c0 00 00 00       	add    $0xc0,%eax
f01177fe:	8b 10                	mov    (%eax),%edx
f0117800:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0117803:	89 94 85 38 fd ff ff 	mov    %edx,-0x2c8(%ebp,%eax,4)
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 15; i++)
f011780a:	ff 45 e0             	incl   -0x20(%ebp)
f011780d:	83 7d e0 0e          	cmpl   $0xe,-0x20(%ebp)
f0117811:	7e b3                	jle    f01177c6 <test_priority_normal_and_higher+0x1f1>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 10; i++)
f0117813:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f011781a:	eb 47                	jmp    f0117863 <test_priority_normal_and_higher+0x28e>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
f011781c:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
f011781f:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0117822:	89 d0                	mov    %edx,%eax
f0117824:	01 c0                	add    %eax,%eax
f0117826:	01 d0                	add    %edx,%eax
f0117828:	c1 e0 03             	shl    $0x3,%eax
f011782b:	01 c8                	add    %ecx,%eax
f011782d:	05 b8 00 00 00       	add    $0xb8,%eax
f0117832:	8b 10                	mov    (%eax),%edx
f0117834:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0117837:	89 94 85 ac fc ff ff 	mov    %edx,-0x354(%ebp,%eax,4)
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
f011783e:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
f0117841:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0117844:	89 d0                	mov    %edx,%eax
f0117846:	01 c0                	add    %eax,%eax
f0117848:	01 d0                	add    %edx,%eax
f011784a:	c1 e0 03             	shl    $0x3,%eax
f011784d:	01 c8                	add    %ecx,%eax
f011784f:	05 c0 00 00 00       	add    $0xc0,%eax
f0117854:	8b 10                	mov    (%eax),%edx
f0117856:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0117859:	89 94 85 d4 fc ff ff 	mov    %edx,-0x32c(%ebp,%eax,4)
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 10; i++)
f0117860:	ff 45 dc             	incl   -0x24(%ebp)
f0117863:	83 7d dc 09          	cmpl   $0x9,-0x24(%ebp)
f0117867:	7e b3                	jle    f011781c <test_priority_normal_and_higher+0x247>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		int freeFrames = sys_calculate_free_frames();
f0117869:	e8 d0 55 ff ff       	call   f010ce3e <sys_calculate_free_frames>
f011786e:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		int freeDiskFrames = pf_calculate_free_frames();
f0117871:	e8 0e ce fe ff       	call   f0104684 <pf_calculate_free_frames>
f0117876:	89 45 b0             	mov    %eax,-0x50(%ebp)

		// Set Priority To Normal // Should change nothing
		set_program_priority(addEnv, 3);
f0117879:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011787c:	83 ec 08             	sub    $0x8,%esp
f011787f:	6a 03                	push   $0x3
f0117881:	50                   	push   %eax
f0117882:	e8 9e 3a ff ff       	call   f010b325 <set_program_priority>
f0117887:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 3);
f011788a:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011788d:	83 ec 08             	sub    $0x8,%esp
f0117890:	6a 03                	push   $0x3
f0117892:	50                   	push   %eax
f0117893:	e8 8d 3a ff ff       	call   f010b325 <set_program_priority>
f0117898:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 3);
f011789b:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011789e:	83 ec 08             	sub    $0x8,%esp
f01178a1:	6a 03                	push   $0x3
f01178a3:	50                   	push   %eax
f01178a4:	e8 7c 3a ff ff       	call   f010b325 <set_program_priority>
f01178a9:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f01178ac:	e8 d3 cd fe ff       	call   f0104684 <pf_calculate_free_frames>
f01178b1:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f01178b4:	74 14                	je     f01178ca <test_priority_normal_and_higher+0x2f5>
f01178b6:	83 ec 04             	sub    $0x4,%esp
f01178b9:	68 c4 98 13 f0       	push   $0xf01398c4
f01178be:	6a 48                	push   $0x48
f01178c0:	68 41 98 13 f0       	push   $0xf0139841
f01178c5:	e8 e6 88 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f01178ca:	e8 6f 55 ff ff       	call   f010ce3e <sys_calculate_free_frames>
f01178cf:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f01178d2:	74 14                	je     f01178e8 <test_priority_normal_and_higher+0x313>
f01178d4:	83 ec 04             	sub    $0x4,%esp
f01178d7:	68 c4 98 13 f0       	push   $0xf01398c4
f01178dc:	6a 49                	push   $0x49
f01178de:	68 41 98 13 f0       	push   $0xf0139841
f01178e3:	e8 c8 88 fe ff       	call   f01001b0 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
f01178e8:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01178eb:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f01178f1:	83 f8 14             	cmp    $0x14,%eax
f01178f4:	75 1c                	jne    f0117912 <test_priority_normal_and_higher+0x33d>
f01178f6:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01178f9:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f01178ff:	83 f8 0f             	cmp    $0xf,%eax
f0117902:	75 0e                	jne    f0117912 <test_priority_normal_and_higher+0x33d>
f0117904:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0117907:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f011790d:	83 f8 0a             	cmp    $0xa,%eax
f0117910:	74 14                	je     f0117926 <test_priority_normal_and_higher+0x351>
			panic("The programs' working set size should not change after setting priority to normal\n");
f0117912:	83 ec 04             	sub    $0x4,%esp
f0117915:	68 f0 98 13 f0       	push   $0xf01398f0
f011791a:	6a 4c                	push   $0x4c
f011791c:	68 41 98 13 f0       	push   $0xf0139841
f0117921:	e8 8a 88 fe ff       	call   f01001b0 <_panic>

		freeFrames = sys_calculate_free_frames();
f0117926:	e8 13 55 ff ff       	call   f010ce3e <sys_calculate_free_frames>
f011792b:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011792e:	e8 51 cd fe ff       	call   f0104684 <pf_calculate_free_frames>
f0117933:	89 45 b0             	mov    %eax,-0x50(%ebp)

		// Set Priority To Above Normal // Should change only helloWorld as none of the rest is full
		set_program_priority(addEnv, 4);
f0117936:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0117939:	83 ec 08             	sub    $0x8,%esp
f011793c:	6a 04                	push   $0x4
f011793e:	50                   	push   %eax
f011793f:	e8 e1 39 ff ff       	call   f010b325 <set_program_priority>
f0117944:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 4);
f0117947:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011794a:	83 ec 08             	sub    $0x8,%esp
f011794d:	6a 04                	push   $0x4
f011794f:	50                   	push   %eax
f0117950:	e8 d0 39 ff ff       	call   f010b325 <set_program_priority>
f0117955:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 4);
f0117958:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011795b:	83 ec 08             	sub    $0x8,%esp
f011795e:	6a 04                	push   $0x4
f0117960:	50                   	push   %eax
f0117961:	e8 bf 39 ff ff       	call   f010b325 <set_program_priority>
f0117966:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0117969:	e8 16 cd fe ff       	call   f0104684 <pf_calculate_free_frames>
f011796e:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0117971:	74 14                	je     f0117987 <test_priority_normal_and_higher+0x3b2>
f0117973:	83 ec 04             	sub    $0x4,%esp
f0117976:	68 c4 98 13 f0       	push   $0xf01398c4
f011797b:	6a 56                	push   $0x56
f011797d:	68 41 98 13 f0       	push   $0xf0139841
f0117982:	e8 29 88 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly%x\n");
f0117987:	e8 b2 54 ff ff       	call   f010ce3e <sys_calculate_free_frames>
f011798c:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f011798f:	74 14                	je     f01179a5 <test_priority_normal_and_higher+0x3d0>
f0117991:	83 ec 04             	sub    $0x4,%esp
f0117994:	68 44 99 13 f0       	push   $0xf0139944
f0117999:	6a 57                	push   $0x57
f011799b:	68 41 98 13 f0       	push   $0xf0139841
f01179a0:	e8 0b 88 fe ff       	call   f01001b0 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f01179a5:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01179a8:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f01179ae:	83 f8 14             	cmp    $0x14,%eax
f01179b1:	75 1c                	jne    f01179cf <test_priority_normal_and_higher+0x3fa>
f01179b3:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01179b6:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f01179bc:	83 f8 0f             	cmp    $0xf,%eax
f01179bf:	75 0e                	jne    f01179cf <test_priority_normal_and_higher+0x3fa>
f01179c1:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01179c4:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f01179ca:	83 f8 14             	cmp    $0x14,%eax
f01179cd:	74 14                	je     f01179e3 <test_priority_normal_and_higher+0x40e>
			panic("The programs' working set size should be doubled only if it is full\n");
f01179cf:	83 ec 04             	sub    $0x4,%esp
f01179d2:	68 74 99 13 f0       	push   $0xf0139974
f01179d7:	6a 5a                	push   $0x5a
f01179d9:	68 41 98 13 f0       	push   $0xf0139841
f01179de:	e8 cd 87 fe ff       	call   f01001b0 <_panic>

		freeFrames = sys_calculate_free_frames();
f01179e3:	e8 56 54 ff ff       	call   f010ce3e <sys_calculate_free_frames>
f01179e8:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01179eb:	e8 94 cc fe ff       	call   f0104684 <pf_calculate_free_frames>
f01179f0:	89 45 b0             	mov    %eax,-0x50(%ebp)

		// Set priority to above normal --> nothing should change (1 time only)
		set_program_priority(helloEnv, 4);
f01179f3:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01179f6:	83 ec 08             	sub    $0x8,%esp
f01179f9:	6a 04                	push   $0x4
f01179fb:	50                   	push   %eax
f01179fc:	e8 24 39 ff ff       	call   f010b325 <set_program_priority>
f0117a01:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0117a04:	e8 7b cc fe ff       	call   f0104684 <pf_calculate_free_frames>
f0117a09:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0117a0c:	74 14                	je     f0117a22 <test_priority_normal_and_higher+0x44d>
f0117a0e:	83 ec 04             	sub    $0x4,%esp
f0117a11:	68 c4 98 13 f0       	push   $0xf01398c4
f0117a16:	6a 62                	push   $0x62
f0117a18:	68 41 98 13 f0       	push   $0xf0139841
f0117a1d:	e8 8e 87 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0117a22:	e8 17 54 ff ff       	call   f010ce3e <sys_calculate_free_frames>
f0117a27:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0117a2a:	74 14                	je     f0117a40 <test_priority_normal_and_higher+0x46b>
f0117a2c:	83 ec 04             	sub    $0x4,%esp
f0117a2f:	68 c4 98 13 f0       	push   $0xf01398c4
f0117a34:	6a 63                	push   $0x63
f0117a36:	68 41 98 13 f0       	push   $0xf0139841
f0117a3b:	e8 70 87 fe ff       	call   f01001b0 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f0117a40:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0117a43:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117a49:	83 f8 14             	cmp    $0x14,%eax
f0117a4c:	75 1c                	jne    f0117a6a <test_priority_normal_and_higher+0x495>
f0117a4e:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0117a51:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117a57:	83 f8 0f             	cmp    $0xf,%eax
f0117a5a:	75 0e                	jne    f0117a6a <test_priority_normal_and_higher+0x495>
f0117a5c:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0117a5f:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117a65:	83 f8 14             	cmp    $0x14,%eax
f0117a68:	74 14                	je     f0117a7e <test_priority_normal_and_higher+0x4a9>
			panic("The programs' working set size should be doubled only once\n");
f0117a6a:	83 ec 04             	sub    $0x4,%esp
f0117a6d:	68 bc 99 13 f0       	push   $0xf01399bc
f0117a72:	6a 66                	push   $0x66
f0117a74:	68 41 98 13 f0       	push   $0xf0139841
f0117a79:	e8 32 87 fe ff       	call   f01001b0 <_panic>


		// Manipulate WS to seem as full
		for(int i = 10; i < 20; i++)
f0117a7e:	c7 45 d8 0a 00 00 00 	movl   $0xa,-0x28(%ebp)
f0117a85:	eb 1c                	jmp    f0117aa3 <test_priority_normal_and_higher+0x4ce>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
f0117a87:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
f0117a8a:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0117a8d:	89 d0                	mov    %edx,%eax
f0117a8f:	01 c0                	add    %eax,%eax
f0117a91:	01 d0                	add    %edx,%eax
f0117a93:	c1 e0 03             	shl    $0x3,%eax
f0117a96:	01 c8                	add    %ecx,%eax
f0117a98:	05 bc 00 00 00       	add    $0xbc,%eax
f0117a9d:	c6 00 00             	movb   $0x0,(%eax)
		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
			panic("The programs' working set size should be doubled only once\n");


		// Manipulate WS to seem as full
		for(int i = 10; i < 20; i++)
f0117aa0:	ff 45 d8             	incl   -0x28(%ebp)
f0117aa3:	83 7d d8 13          	cmpl   $0x13,-0x28(%ebp)
f0117aa7:	7e de                	jle    f0117a87 <test_priority_normal_and_higher+0x4b2>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f0117aa9:	e8 90 53 ff ff       	call   f010ce3e <sys_calculate_free_frames>
f0117aae:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117ab1:	e8 ce cb fe ff       	call   f0104684 <pf_calculate_free_frames>
f0117ab6:	89 45 b0             	mov    %eax,-0x50(%ebp)

		set_program_priority(helloEnv, 4);
f0117ab9:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0117abc:	83 ec 08             	sub    $0x8,%esp
f0117abf:	6a 04                	push   $0x4
f0117ac1:	50                   	push   %eax
f0117ac2:	e8 5e 38 ff ff       	call   f010b325 <set_program_priority>
f0117ac7:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0117aca:	e8 b5 cb fe ff       	call   f0104684 <pf_calculate_free_frames>
f0117acf:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0117ad2:	74 14                	je     f0117ae8 <test_priority_normal_and_higher+0x513>
f0117ad4:	83 ec 04             	sub    $0x4,%esp
f0117ad7:	68 c4 98 13 f0       	push   $0xf01398c4
f0117adc:	6a 73                	push   $0x73
f0117ade:	68 41 98 13 f0       	push   $0xf0139841
f0117ae3:	e8 c8 86 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0117ae8:	e8 51 53 ff ff       	call   f010ce3e <sys_calculate_free_frames>
f0117aed:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0117af0:	74 14                	je     f0117b06 <test_priority_normal_and_higher+0x531>
f0117af2:	83 ec 04             	sub    $0x4,%esp
f0117af5:	68 c4 98 13 f0       	push   $0xf01398c4
f0117afa:	6a 74                	push   $0x74
f0117afc:	68 41 98 13 f0       	push   $0xf0139841
f0117b01:	e8 aa 86 fe ff       	call   f01001b0 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f0117b06:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0117b09:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117b0f:	83 f8 14             	cmp    $0x14,%eax
f0117b12:	75 1c                	jne    f0117b30 <test_priority_normal_and_higher+0x55b>
f0117b14:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0117b17:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117b1d:	83 f8 0f             	cmp    $0xf,%eax
f0117b20:	75 0e                	jne    f0117b30 <test_priority_normal_and_higher+0x55b>
f0117b22:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0117b25:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117b2b:	83 f8 14             	cmp    $0x14,%eax
f0117b2e:	74 14                	je     f0117b44 <test_priority_normal_and_higher+0x56f>
			panic("The programs' working set size should be doubled only once\n");
f0117b30:	83 ec 04             	sub    $0x4,%esp
f0117b33:	68 bc 99 13 f0       	push   $0xf01399bc
f0117b38:	6a 77                	push   $0x77
f0117b3a:	68 41 98 13 f0       	push   $0xf0139841
f0117b3f:	e8 6c 86 fe ff       	call   f01001b0 <_panic>

		for(int i = 10; i < 15; i++)
f0117b44:	c7 45 d4 0a 00 00 00 	movl   $0xa,-0x2c(%ebp)
f0117b4b:	eb 1c                	jmp    f0117b69 <test_priority_normal_and_higher+0x594>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
f0117b4d:	8b 4d a8             	mov    -0x58(%ebp),%ecx
f0117b50:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0117b53:	89 d0                	mov    %edx,%eax
f0117b55:	01 c0                	add    %eax,%eax
f0117b57:	01 d0                	add    %edx,%eax
f0117b59:	c1 e0 03             	shl    $0x3,%eax
f0117b5c:	01 c8                	add    %ecx,%eax
f0117b5e:	05 bc 00 00 00       	add    $0xbc,%eax
f0117b63:	c6 00 00             	movb   $0x0,(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
			panic("The programs' working set size should be doubled only once\n");

		for(int i = 10; i < 15; i++)
f0117b66:	ff 45 d4             	incl   -0x2c(%ebp)
f0117b69:	83 7d d4 0e          	cmpl   $0xe,-0x2c(%ebp)
f0117b6d:	7e de                	jle    f0117b4d <test_priority_normal_and_higher+0x578>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f0117b6f:	e8 ca 52 ff ff       	call   f010ce3e <sys_calculate_free_frames>
f0117b74:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117b77:	e8 08 cb fe ff       	call   f0104684 <pf_calculate_free_frames>
f0117b7c:	89 45 b0             	mov    %eax,-0x50(%ebp)
		set_program_priority(factEnv, 5);
f0117b7f:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0117b82:	83 ec 08             	sub    $0x8,%esp
f0117b85:	6a 05                	push   $0x5
f0117b87:	50                   	push   %eax
f0117b88:	e8 98 37 ff ff       	call   f010b325 <set_program_priority>
f0117b8d:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 5);
f0117b90:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0117b93:	83 ec 08             	sub    $0x8,%esp
f0117b96:	6a 05                	push   $0x5
f0117b98:	50                   	push   %eax
f0117b99:	e8 87 37 ff ff       	call   f010b325 <set_program_priority>
f0117b9e:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0117ba1:	e8 de ca fe ff       	call   f0104684 <pf_calculate_free_frames>
f0117ba6:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0117ba9:	74 17                	je     f0117bc2 <test_priority_normal_and_higher+0x5ed>
f0117bab:	83 ec 04             	sub    $0x4,%esp
f0117bae:	68 c4 98 13 f0       	push   $0xf01398c4
f0117bb3:	68 82 00 00 00       	push   $0x82
f0117bb8:	68 41 98 13 f0       	push   $0xf0139841
f0117bbd:	e8 ee 85 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0117bc2:	e8 77 52 ff ff       	call   f010ce3e <sys_calculate_free_frames>
f0117bc7:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0117bca:	74 17                	je     f0117be3 <test_priority_normal_and_higher+0x60e>
f0117bcc:	83 ec 04             	sub    $0x4,%esp
f0117bcf:	68 c4 98 13 f0       	push   $0xf01398c4
f0117bd4:	68 83 00 00 00       	push   $0x83
f0117bd9:	68 41 98 13 f0       	push   $0xf0139841
f0117bde:	e8 cd 85 fe ff       	call   f01001b0 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f0117be3:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0117be6:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117bec:	83 f8 14             	cmp    $0x14,%eax
f0117bef:	75 1c                	jne    f0117c0d <test_priority_normal_and_higher+0x638>
f0117bf1:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0117bf4:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117bfa:	83 f8 1e             	cmp    $0x1e,%eax
f0117bfd:	75 0e                	jne    f0117c0d <test_priority_normal_and_higher+0x638>
f0117bff:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0117c02:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117c08:	83 f8 28             	cmp    $0x28,%eax
f0117c0b:	74 17                	je     f0117c24 <test_priority_normal_and_higher+0x64f>
			panic("The programs' working set size should be doubled if full\n");
f0117c0d:	83 ec 04             	sub    $0x4,%esp
f0117c10:	68 f8 99 13 f0       	push   $0xf01399f8
f0117c15:	68 86 00 00 00       	push   $0x86
f0117c1a:	68 41 98 13 f0       	push   $0xf0139841
f0117c1f:	e8 8c 85 fe ff       	call   f01001b0 <_panic>

		for(int i = 20; i < 40; i++)
f0117c24:	c7 45 d0 14 00 00 00 	movl   $0x14,-0x30(%ebp)
f0117c2b:	eb 1c                	jmp    f0117c49 <test_priority_normal_and_higher+0x674>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
f0117c2d:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
f0117c30:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0117c33:	89 d0                	mov    %edx,%eax
f0117c35:	01 c0                	add    %eax,%eax
f0117c37:	01 d0                	add    %edx,%eax
f0117c39:	c1 e0 03             	shl    $0x3,%eax
f0117c3c:	01 c8                	add    %ecx,%eax
f0117c3e:	05 bc 00 00 00       	add    $0xbc,%eax
f0117c43:	c6 00 00             	movb   $0x0,(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 20; i < 40; i++)
f0117c46:	ff 45 d0             	incl   -0x30(%ebp)
f0117c49:	83 7d d0 27          	cmpl   $0x27,-0x30(%ebp)
f0117c4d:	7e de                	jle    f0117c2d <test_priority_normal_and_higher+0x658>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f0117c4f:	e8 ea 51 ff ff       	call   f010ce3e <sys_calculate_free_frames>
f0117c54:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117c57:	e8 28 ca fe ff       	call   f0104684 <pf_calculate_free_frames>
f0117c5c:	89 45 b0             	mov    %eax,-0x50(%ebp)
		set_program_priority(factEnv, 5);
f0117c5f:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0117c62:	83 ec 08             	sub    $0x8,%esp
f0117c65:	6a 05                	push   $0x5
f0117c67:	50                   	push   %eax
f0117c68:	e8 b8 36 ff ff       	call   f010b325 <set_program_priority>
f0117c6d:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 4);
f0117c70:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0117c73:	83 ec 08             	sub    $0x8,%esp
f0117c76:	6a 04                	push   $0x4
f0117c78:	50                   	push   %eax
f0117c79:	e8 a7 36 ff ff       	call   f010b325 <set_program_priority>
f0117c7e:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0117c81:	e8 fe c9 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0117c86:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0117c89:	74 17                	je     f0117ca2 <test_priority_normal_and_higher+0x6cd>
f0117c8b:	83 ec 04             	sub    $0x4,%esp
f0117c8e:	68 c4 98 13 f0       	push   $0xf01398c4
f0117c93:	68 91 00 00 00       	push   $0x91
f0117c98:	68 41 98 13 f0       	push   $0xf0139841
f0117c9d:	e8 0e 85 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0117ca2:	e8 97 51 ff ff       	call   f010ce3e <sys_calculate_free_frames>
f0117ca7:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0117caa:	74 17                	je     f0117cc3 <test_priority_normal_and_higher+0x6ee>
f0117cac:	83 ec 04             	sub    $0x4,%esp
f0117caf:	68 c4 98 13 f0       	push   $0xf01398c4
f0117cb4:	68 92 00 00 00       	push   $0x92
f0117cb9:	68 41 98 13 f0       	push   $0xf0139841
f0117cbe:	e8 ed 84 fe ff       	call   f01001b0 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f0117cc3:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0117cc6:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117ccc:	83 f8 14             	cmp    $0x14,%eax
f0117ccf:	75 1c                	jne    f0117ced <test_priority_normal_and_higher+0x718>
f0117cd1:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0117cd4:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117cda:	83 f8 1e             	cmp    $0x1e,%eax
f0117cdd:	75 0e                	jne    f0117ced <test_priority_normal_and_higher+0x718>
f0117cdf:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0117ce2:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117ce8:	83 f8 28             	cmp    $0x28,%eax
f0117ceb:	74 17                	je     f0117d04 <test_priority_normal_and_higher+0x72f>
			panic("The programs' working set size should be doubled if full\n");
f0117ced:	83 ec 04             	sub    $0x4,%esp
f0117cf0:	68 f8 99 13 f0       	push   $0xf01399f8
f0117cf5:	68 95 00 00 00       	push   $0x95
f0117cfa:	68 41 98 13 f0       	push   $0xf0139841
f0117cff:	e8 ac 84 fe ff       	call   f01001b0 <_panic>

		for(int i = 15; i < 30; i++)
f0117d04:	c7 45 cc 0f 00 00 00 	movl   $0xf,-0x34(%ebp)
f0117d0b:	eb 1c                	jmp    f0117d29 <test_priority_normal_and_higher+0x754>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
f0117d0d:	8b 4d a8             	mov    -0x58(%ebp),%ecx
f0117d10:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0117d13:	89 d0                	mov    %edx,%eax
f0117d15:	01 c0                	add    %eax,%eax
f0117d17:	01 d0                	add    %edx,%eax
f0117d19:	c1 e0 03             	shl    $0x3,%eax
f0117d1c:	01 c8                	add    %ecx,%eax
f0117d1e:	05 bc 00 00 00       	add    $0xbc,%eax
f0117d23:	c6 00 00             	movb   $0x0,(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 15; i < 30; i++)
f0117d26:	ff 45 cc             	incl   -0x34(%ebp)
f0117d29:	83 7d cc 1d          	cmpl   $0x1d,-0x34(%ebp)
f0117d2d:	7e de                	jle    f0117d0d <test_priority_normal_and_higher+0x738>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f0117d2f:	e8 0a 51 ff ff       	call   f010ce3e <sys_calculate_free_frames>
f0117d34:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117d37:	e8 48 c9 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0117d3c:	89 45 b0             	mov    %eax,-0x50(%ebp)
		set_program_priority(factEnv, 5);
f0117d3f:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0117d42:	83 ec 08             	sub    $0x8,%esp
f0117d45:	6a 05                	push   $0x5
f0117d47:	50                   	push   %eax
f0117d48:	e8 d8 35 ff ff       	call   f010b325 <set_program_priority>
f0117d4d:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 4);
f0117d50:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0117d53:	83 ec 08             	sub    $0x8,%esp
f0117d56:	6a 04                	push   $0x4
f0117d58:	50                   	push   %eax
f0117d59:	e8 c7 35 ff ff       	call   f010b325 <set_program_priority>
f0117d5e:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0117d61:	e8 1e c9 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0117d66:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0117d69:	74 17                	je     f0117d82 <test_priority_normal_and_higher+0x7ad>
f0117d6b:	83 ec 04             	sub    $0x4,%esp
f0117d6e:	68 c4 98 13 f0       	push   $0xf01398c4
f0117d73:	68 a0 00 00 00       	push   $0xa0
f0117d78:	68 41 98 13 f0       	push   $0xf0139841
f0117d7d:	e8 2e 84 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0117d82:	e8 b7 50 ff ff       	call   f010ce3e <sys_calculate_free_frames>
f0117d87:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0117d8a:	74 17                	je     f0117da3 <test_priority_normal_and_higher+0x7ce>
f0117d8c:	83 ec 04             	sub    $0x4,%esp
f0117d8f:	68 c4 98 13 f0       	push   $0xf01398c4
f0117d94:	68 a1 00 00 00       	push   $0xa1
f0117d99:	68 41 98 13 f0       	push   $0xf0139841
f0117d9e:	e8 0d 84 fe ff       	call   f01001b0 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 60 || helloEnv->page_WS_max_size != 40)
f0117da3:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0117da6:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117dac:	83 f8 14             	cmp    $0x14,%eax
f0117daf:	75 1c                	jne    f0117dcd <test_priority_normal_and_higher+0x7f8>
f0117db1:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0117db4:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117dba:	83 f8 3c             	cmp    $0x3c,%eax
f0117dbd:	75 0e                	jne    f0117dcd <test_priority_normal_and_higher+0x7f8>
f0117dbf:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0117dc2:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0117dc8:	83 f8 28             	cmp    $0x28,%eax
f0117dcb:	74 17                	je     f0117de4 <test_priority_normal_and_higher+0x80f>
			panic("The programs' working set size should be doubled if full\n");
f0117dcd:	83 ec 04             	sub    $0x4,%esp
f0117dd0:	68 f8 99 13 f0       	push   $0xf01399f8
f0117dd5:	68 a4 00 00 00       	push   $0xa4
f0117dda:	68 41 98 13 f0       	push   $0xf0139841
f0117ddf:	e8 cc 83 fe ff       	call   f01001b0 <_panic>

		for(int i = 15; i < 60; i++)
f0117de4:	c7 45 c8 0f 00 00 00 	movl   $0xf,-0x38(%ebp)
f0117deb:	eb 1c                	jmp    f0117e09 <test_priority_normal_and_higher+0x834>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 1;
f0117ded:	8b 4d a8             	mov    -0x58(%ebp),%ecx
f0117df0:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0117df3:	89 d0                	mov    %edx,%eax
f0117df5:	01 c0                	add    %eax,%eax
f0117df7:	01 d0                	add    %edx,%eax
f0117df9:	c1 e0 03             	shl    $0x3,%eax
f0117dfc:	01 c8                	add    %ecx,%eax
f0117dfe:	05 bc 00 00 00       	add    $0xbc,%eax
f0117e03:	c6 00 01             	movb   $0x1,(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 60 || helloEnv->page_WS_max_size != 40)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 15; i < 60; i++)
f0117e06:	ff 45 c8             	incl   -0x38(%ebp)
f0117e09:	83 7d c8 3b          	cmpl   $0x3b,-0x38(%ebp)
f0117e0d:	7e de                	jle    f0117ded <test_priority_normal_and_higher+0x818>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 1;
		}
		for(int i = 10; i < 40; i++)
f0117e0f:	c7 45 c4 0a 00 00 00 	movl   $0xa,-0x3c(%ebp)
f0117e16:	eb 1c                	jmp    f0117e34 <test_priority_normal_and_higher+0x85f>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 1;
f0117e18:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
f0117e1b:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0117e1e:	89 d0                	mov    %edx,%eax
f0117e20:	01 c0                	add    %eax,%eax
f0117e22:	01 d0                	add    %edx,%eax
f0117e24:	c1 e0 03             	shl    $0x3,%eax
f0117e27:	01 c8                	add    %ecx,%eax
f0117e29:	05 bc 00 00 00       	add    $0xbc,%eax
f0117e2e:	c6 00 01             	movb   $0x1,(%eax)

		for(int i = 15; i < 60; i++)
		{
			factEnv->ptr_pageWorkingSet[i].empty = 1;
		}
		for(int i = 10; i < 40; i++)
f0117e31:	ff 45 c4             	incl   -0x3c(%ebp)
f0117e34:	83 7d c4 27          	cmpl   $0x27,-0x3c(%ebp)
f0117e38:	7e de                	jle    f0117e18 <test_priority_normal_and_higher+0x843>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 1;
		}

		for(int i = 0; i < 20; i++)
f0117e3a:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
f0117e41:	eb 7d                	jmp    f0117ec0 <test_priority_normal_and_higher+0x8eb>
		{
			if(add_WS[i] != addEnv->ptr_pageWorkingSet[i].virtual_address)
f0117e43:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0117e46:	8b 8c 85 74 fd ff ff 	mov    -0x28c(%ebp,%eax,4),%ecx
f0117e4d:	8b 5d ac             	mov    -0x54(%ebp),%ebx
f0117e50:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0117e53:	89 d0                	mov    %edx,%eax
f0117e55:	01 c0                	add    %eax,%eax
f0117e57:	01 d0                	add    %edx,%eax
f0117e59:	c1 e0 03             	shl    $0x3,%eax
f0117e5c:	01 d8                	add    %ebx,%eax
f0117e5e:	05 b8 00 00 00       	add    $0xb8,%eax
f0117e63:	8b 00                	mov    (%eax),%eax
f0117e65:	39 c1                	cmp    %eax,%ecx
f0117e67:	74 17                	je     f0117e80 <test_priority_normal_and_higher+0x8ab>
				panic("Working set should be moved properly to the new one");
f0117e69:	83 ec 04             	sub    $0x4,%esp
f0117e6c:	68 34 9a 13 f0       	push   $0xf0139a34
f0117e71:	68 b2 00 00 00       	push   $0xb2
f0117e76:	68 41 98 13 f0       	push   $0xf0139841
f0117e7b:	e8 30 83 fe ff       	call   f01001b0 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
f0117e80:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0117e83:	8b 8c 85 c4 fd ff ff 	mov    -0x23c(%ebp,%eax,4),%ecx
f0117e8a:	8b 5d ac             	mov    -0x54(%ebp),%ebx
f0117e8d:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0117e90:	89 d0                	mov    %edx,%eax
f0117e92:	01 c0                	add    %eax,%eax
f0117e94:	01 d0                	add    %edx,%eax
f0117e96:	c1 e0 03             	shl    $0x3,%eax
f0117e99:	01 d8                	add    %ebx,%eax
f0117e9b:	05 c0 00 00 00       	add    $0xc0,%eax
f0117ea0:	8b 00                	mov    (%eax),%eax
f0117ea2:	39 c1                	cmp    %eax,%ecx
f0117ea4:	74 17                	je     f0117ebd <test_priority_normal_and_higher+0x8e8>
				panic("Working set should be moved properly to the new one");
f0117ea6:	83 ec 04             	sub    $0x4,%esp
f0117ea9:	68 34 9a 13 f0       	push   $0xf0139a34
f0117eae:	68 b5 00 00 00       	push   $0xb5
f0117eb3:	68 41 98 13 f0       	push   $0xf0139841
f0117eb8:	e8 f3 82 fe ff       	call   f01001b0 <_panic>
		for(int i = 10; i < 40; i++)
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 1;
		}

		for(int i = 0; i < 20; i++)
f0117ebd:	ff 45 c0             	incl   -0x40(%ebp)
f0117ec0:	83 7d c0 13          	cmpl   $0x13,-0x40(%ebp)
f0117ec4:	0f 8e 79 ff ff ff    	jle    f0117e43 <test_priority_normal_and_higher+0x86e>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f0117eca:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
f0117ed1:	eb 7d                	jmp    f0117f50 <test_priority_normal_and_higher+0x97b>
		{
			if(fact_WS[i] != factEnv->ptr_pageWorkingSet[i].virtual_address)
f0117ed3:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0117ed6:	8b 8c 85 fc fc ff ff 	mov    -0x304(%ebp,%eax,4),%ecx
f0117edd:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0117ee0:	8b 55 bc             	mov    -0x44(%ebp),%edx
f0117ee3:	89 d0                	mov    %edx,%eax
f0117ee5:	01 c0                	add    %eax,%eax
f0117ee7:	01 d0                	add    %edx,%eax
f0117ee9:	c1 e0 03             	shl    $0x3,%eax
f0117eec:	01 d8                	add    %ebx,%eax
f0117eee:	05 b8 00 00 00       	add    $0xb8,%eax
f0117ef3:	8b 00                	mov    (%eax),%eax
f0117ef5:	39 c1                	cmp    %eax,%ecx
f0117ef7:	74 17                	je     f0117f10 <test_priority_normal_and_higher+0x93b>
				panic("Working set should be moved properly to the new one");
f0117ef9:	83 ec 04             	sub    $0x4,%esp
f0117efc:	68 34 9a 13 f0       	push   $0xf0139a34
f0117f01:	68 bb 00 00 00       	push   $0xbb
f0117f06:	68 41 98 13 f0       	push   $0xf0139841
f0117f0b:	e8 a0 82 fe ff       	call   f01001b0 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
f0117f10:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0117f13:	8b 8c 85 38 fd ff ff 	mov    -0x2c8(%ebp,%eax,4),%ecx
f0117f1a:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0117f1d:	8b 55 bc             	mov    -0x44(%ebp),%edx
f0117f20:	89 d0                	mov    %edx,%eax
f0117f22:	01 c0                	add    %eax,%eax
f0117f24:	01 d0                	add    %edx,%eax
f0117f26:	c1 e0 03             	shl    $0x3,%eax
f0117f29:	01 d8                	add    %ebx,%eax
f0117f2b:	05 c0 00 00 00       	add    $0xc0,%eax
f0117f30:	8b 00                	mov    (%eax),%eax
f0117f32:	39 c1                	cmp    %eax,%ecx
f0117f34:	74 17                	je     f0117f4d <test_priority_normal_and_higher+0x978>
				panic("Working set should be moved properly to the new one");
f0117f36:	83 ec 04             	sub    $0x4,%esp
f0117f39:	68 34 9a 13 f0       	push   $0xf0139a34
f0117f3e:	68 be 00 00 00       	push   $0xbe
f0117f43:	68 41 98 13 f0       	push   $0xf0139841
f0117f48:	e8 63 82 fe ff       	call   f01001b0 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f0117f4d:	ff 45 bc             	incl   -0x44(%ebp)
f0117f50:	83 7d bc 0e          	cmpl   $0xe,-0x44(%ebp)
f0117f54:	0f 8e 79 ff ff ff    	jle    f0117ed3 <test_priority_normal_and_higher+0x8fe>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f0117f5a:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
f0117f61:	eb 7d                	jmp    f0117fe0 <test_priority_normal_and_higher+0xa0b>
		{
			if(hello_WS[i] != helloEnv->ptr_pageWorkingSet[i].virtual_address)
f0117f63:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117f66:	8b 8c 85 ac fc ff ff 	mov    -0x354(%ebp,%eax,4),%ecx
f0117f6d:	8b 5d a4             	mov    -0x5c(%ebp),%ebx
f0117f70:	8b 55 b8             	mov    -0x48(%ebp),%edx
f0117f73:	89 d0                	mov    %edx,%eax
f0117f75:	01 c0                	add    %eax,%eax
f0117f77:	01 d0                	add    %edx,%eax
f0117f79:	c1 e0 03             	shl    $0x3,%eax
f0117f7c:	01 d8                	add    %ebx,%eax
f0117f7e:	05 b8 00 00 00       	add    $0xb8,%eax
f0117f83:	8b 00                	mov    (%eax),%eax
f0117f85:	39 c1                	cmp    %eax,%ecx
f0117f87:	74 17                	je     f0117fa0 <test_priority_normal_and_higher+0x9cb>
				panic("Working set should be moved properly to the new one");
f0117f89:	83 ec 04             	sub    $0x4,%esp
f0117f8c:	68 34 9a 13 f0       	push   $0xf0139a34
f0117f91:	68 c4 00 00 00       	push   $0xc4
f0117f96:	68 41 98 13 f0       	push   $0xf0139841
f0117f9b:	e8 10 82 fe ff       	call   f01001b0 <_panic>

			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
f0117fa0:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117fa3:	8b 8c 85 d4 fc ff ff 	mov    -0x32c(%ebp,%eax,4),%ecx
f0117faa:	8b 5d a4             	mov    -0x5c(%ebp),%ebx
f0117fad:	8b 55 b8             	mov    -0x48(%ebp),%edx
f0117fb0:	89 d0                	mov    %edx,%eax
f0117fb2:	01 c0                	add    %eax,%eax
f0117fb4:	01 d0                	add    %edx,%eax
f0117fb6:	c1 e0 03             	shl    $0x3,%eax
f0117fb9:	01 d8                	add    %ebx,%eax
f0117fbb:	05 c0 00 00 00       	add    $0xc0,%eax
f0117fc0:	8b 00                	mov    (%eax),%eax
f0117fc2:	39 c1                	cmp    %eax,%ecx
f0117fc4:	74 17                	je     f0117fdd <test_priority_normal_and_higher+0xa08>
				panic("Working set should be moved properly to the new one");
f0117fc6:	83 ec 04             	sub    $0x4,%esp
f0117fc9:	68 34 9a 13 f0       	push   $0xf0139a34
f0117fce:	68 c7 00 00 00       	push   $0xc7
f0117fd3:	68 41 98 13 f0       	push   $0xf0139841
f0117fd8:	e8 d3 81 fe ff       	call   f01001b0 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f0117fdd:	ff 45 b8             	incl   -0x48(%ebp)
f0117fe0:	83 7d b8 09          	cmpl   $0x9,-0x48(%ebp)
f0117fe4:	0f 8e 79 ff ff ff    	jle    f0117f63 <test_priority_normal_and_higher+0x98e>

			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		char command4[100] = "runall";
f0117fea:	c7 85 40 ff ff ff 72 	movl   $0x616e7572,-0xc0(%ebp)
f0117ff1:	75 6e 61 
f0117ff4:	c7 85 44 ff ff ff 6c 	movl   $0x6c6c,-0xbc(%ebp)
f0117ffb:	6c 00 00 
f0117ffe:	8d 95 48 ff ff ff    	lea    -0xb8(%ebp),%edx
f0118004:	b9 17 00 00 00       	mov    $0x17,%ecx
f0118009:	b8 00 00 00 00       	mov    $0x0,%eax
f011800e:	89 d7                	mov    %edx,%edi
f0118010:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command4);
f0118012:	83 ec 0c             	sub    $0xc,%esp
f0118015:	8d 85 40 ff ff ff    	lea    -0xc0(%ebp),%eax
f011801b:	50                   	push   %eax
f011801c:	e8 a2 9b fe ff       	call   f0101bc3 <execute_command>
f0118021:	83 c4 10             	add    $0x10,%esp
	else
	{
		cprintf("\nCongratulations!! test priority 1 completed successfully.\n");
	}
#endif
}
f0118024:	eb 10                	jmp    f0118036 <test_priority_normal_and_higher+0xa61>
		char command4[100] = "runall";
		execute_command(command4);
	}
	else
	{
		cprintf("\nCongratulations!! test priority 1 completed successfully.\n");
f0118026:	83 ec 0c             	sub    $0xc,%esp
f0118029:	68 68 9a 13 f0       	push   $0xf0139a68
f011802e:	e8 fe 8d fe ff       	call   f0100e31 <cprintf>
f0118033:	83 c4 10             	add    $0x10,%esp
	}
#endif
}
f0118036:	90                   	nop
f0118037:	8d 65 f4             	lea    -0xc(%ebp),%esp
f011803a:	5b                   	pop    %ebx
f011803b:	5e                   	pop    %esi
f011803c:	5f                   	pop    %edi
f011803d:	5d                   	pop    %ebp
f011803e:	c3                   	ret    

f011803f <test_priority_normal_and_lower>:

void test_priority_normal_and_lower()
{
f011803f:	55                   	push   %ebp
f0118040:	89 e5                	mov    %esp,%ebp
f0118042:	57                   	push   %edi
f0118043:	56                   	push   %esi
f0118044:	53                   	push   %ebx
f0118045:	81 ec ac 04 00 00    	sub    $0x4ac,%esp
#if USE_KHEAP
	panic("not handled yet");
#else
	if(firstTime)
f011804b:	a0 3c fb 18 f0       	mov    0xf018fb3c,%al
f0118050:	84 c0                	test   %al,%al
f0118052:	0f 84 1b 0a 00 00    	je     f0118a73 <test_priority_normal_and_lower+0xa34>
		uint32 fact_WS[30];
		uint32 fact_TimeStamp[30];
		uint32 hello_WS[40];
		uint32 hello_TimeStamp[40];

		firstTime = 0;
f0118058:	c6 05 3c fb 18 f0 00 	movb   $0x0,0xf018fb3c
		char command[100] = "load fos_add 20";
f011805f:	8d 85 f0 fb ff ff    	lea    -0x410(%ebp),%eax
f0118065:	bb a4 9a 13 f0       	mov    $0xf0139aa4,%ebx
f011806a:	ba 04 00 00 00       	mov    $0x4,%edx
f011806f:	89 c7                	mov    %eax,%edi
f0118071:	89 de                	mov    %ebx,%esi
f0118073:	89 d1                	mov    %edx,%ecx
f0118075:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f0118077:	8d 95 00 fc ff ff    	lea    -0x400(%ebp),%edx
f011807d:	b9 15 00 00 00       	mov    $0x15,%ecx
f0118082:	b8 00 00 00 00       	mov    $0x0,%eax
f0118087:	89 d7                	mov    %edx,%edi
f0118089:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command);
f011808b:	83 ec 0c             	sub    $0xc,%esp
f011808e:	8d 85 f0 fb ff ff    	lea    -0x410(%ebp),%eax
f0118094:	50                   	push   %eax
f0118095:	e8 29 9b fe ff       	call   f0101bc3 <execute_command>
f011809a:	83 c4 10             	add    $0x10,%esp
		char command2[100] = "load fact 30";
f011809d:	8d 85 54 fc ff ff    	lea    -0x3ac(%ebp),%eax
f01180a3:	bb ac 9d 13 f0       	mov    $0xf0139dac,%ebx
f01180a8:	ba 0d 00 00 00       	mov    $0xd,%edx
f01180ad:	89 c7                	mov    %eax,%edi
f01180af:	89 de                	mov    %ebx,%esi
f01180b1:	89 d1                	mov    %edx,%ecx
f01180b3:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01180b5:	8d 95 61 fc ff ff    	lea    -0x39f(%ebp),%edx
f01180bb:	b9 57 00 00 00       	mov    $0x57,%ecx
f01180c0:	b0 00                	mov    $0x0,%al
f01180c2:	89 d7                	mov    %edx,%edi
f01180c4:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command2);
f01180c6:	83 ec 0c             	sub    $0xc,%esp
f01180c9:	8d 85 54 fc ff ff    	lea    -0x3ac(%ebp),%eax
f01180cf:	50                   	push   %eax
f01180d0:	e8 ee 9a fe ff       	call   f0101bc3 <execute_command>
f01180d5:	83 c4 10             	add    $0x10,%esp
		char command3[100] = "load fos_helloWorld 40";
f01180d8:	8d 85 b8 fc ff ff    	lea    -0x348(%ebp),%eax
f01180de:	bb 10 9e 13 f0       	mov    $0xf0139e10,%ebx
f01180e3:	ba 17 00 00 00       	mov    $0x17,%edx
f01180e8:	89 c7                	mov    %eax,%edi
f01180ea:	89 de                	mov    %ebx,%esi
f01180ec:	89 d1                	mov    %edx,%ecx
f01180ee:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01180f0:	8d 95 cf fc ff ff    	lea    -0x331(%ebp),%edx
f01180f6:	b9 4d 00 00 00       	mov    $0x4d,%ecx
f01180fb:	b0 00                	mov    $0x0,%al
f01180fd:	89 d7                	mov    %edx,%edi
f01180ff:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command3);
f0118101:	83 ec 0c             	sub    $0xc,%esp
f0118104:	8d 85 b8 fc ff ff    	lea    -0x348(%ebp),%eax
f011810a:	50                   	push   %eax
f011810b:	e8 b3 9a fe ff       	call   f0101bc3 <execute_command>
f0118110:	83 c4 10             	add    $0x10,%esp

		struct Env * addEnv;
		struct Env * factEnv;
		struct Env * helloEnv;
		envid2env(4096, &addEnv, 0);
f0118113:	83 ec 04             	sub    $0x4,%esp
f0118116:	6a 00                	push   $0x0
f0118118:	8d 45 b8             	lea    -0x48(%ebp),%eax
f011811b:	50                   	push   %eax
f011811c:	68 00 10 00 00       	push   $0x1000
f0118121:	e8 1f 1d ff ff       	call   f0109e45 <envid2env>
f0118126:	83 c4 10             	add    $0x10,%esp
		envid2env(4097, &factEnv, 0);
f0118129:	83 ec 04             	sub    $0x4,%esp
f011812c:	6a 00                	push   $0x0
f011812e:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f0118131:	50                   	push   %eax
f0118132:	68 01 10 00 00       	push   $0x1001
f0118137:	e8 09 1d ff ff       	call   f0109e45 <envid2env>
f011813c:	83 c4 10             	add    $0x10,%esp
		envid2env(4098, &helloEnv, 0);
f011813f:	83 ec 04             	sub    $0x4,%esp
f0118142:	6a 00                	push   $0x0
f0118144:	8d 45 b0             	lea    -0x50(%ebp),%eax
f0118147:	50                   	push   %eax
f0118148:	68 02 10 00 00       	push   $0x1002
f011814d:	e8 f3 1c ff ff       	call   f0109e45 <envid2env>
f0118152:	83 c4 10             	add    $0x10,%esp

		if(addEnv == NULL || factEnv == NULL || helloEnv == NULL)
f0118155:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0118158:	85 c0                	test   %eax,%eax
f011815a:	74 0e                	je     f011816a <test_priority_normal_and_lower+0x12b>
f011815c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011815f:	85 c0                	test   %eax,%eax
f0118161:	74 07                	je     f011816a <test_priority_normal_and_lower+0x12b>
f0118163:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0118166:	85 c0                	test   %eax,%eax
f0118168:	75 17                	jne    f0118181 <test_priority_normal_and_lower+0x142>
			panic("Loading programs failed\n");
f011816a:	83 ec 04             	sub    $0x4,%esp
f011816d:	68 28 98 13 f0       	push   $0xf0139828
f0118172:	68 f2 00 00 00       	push   $0xf2
f0118177:	68 41 98 13 f0       	push   $0xf0139841
f011817c:	e8 2f 80 fe ff       	call   f01001b0 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f0118181:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0118184:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f011818a:	83 f8 14             	cmp    $0x14,%eax
f011818d:	75 1c                	jne    f01181ab <test_priority_normal_and_lower+0x16c>
f011818f:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0118192:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0118198:	83 f8 1e             	cmp    $0x1e,%eax
f011819b:	75 0e                	jne    f01181ab <test_priority_normal_and_lower+0x16c>
f011819d:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01181a0:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f01181a6:	83 f8 28             	cmp    $0x28,%eax
f01181a9:	74 17                	je     f01181c2 <test_priority_normal_and_lower+0x183>
			panic("The programs should be initially loaded with the given working set size\n");
f01181ab:	83 ec 04             	sub    $0x4,%esp
f01181ae:	68 d0 9b 13 f0       	push   $0xf0139bd0
f01181b3:	68 f5 00 00 00       	push   $0xf5
f01181b8:	68 41 98 13 f0       	push   $0xf0139841
f01181bd:	e8 ee 7f fe ff       	call   f01001b0 <_panic>

		for(int i = 0; i < 20; i++)
f01181c2:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f01181c9:	eb 47                	jmp    f0118212 <test_priority_normal_and_lower+0x1d3>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
f01181cb:	8b 4d b8             	mov    -0x48(%ebp),%ecx
f01181ce:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01181d1:	89 d0                	mov    %edx,%eax
f01181d3:	01 c0                	add    %eax,%eax
f01181d5:	01 d0                	add    %edx,%eax
f01181d7:	c1 e0 03             	shl    $0x3,%eax
f01181da:	01 c8                	add    %ecx,%eax
f01181dc:	05 b8 00 00 00       	add    $0xb8,%eax
f01181e1:	8b 10                	mov    (%eax),%edx
f01181e3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01181e6:	89 94 85 50 fb ff ff 	mov    %edx,-0x4b0(%ebp,%eax,4)
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
f01181ed:	8b 4d b8             	mov    -0x48(%ebp),%ecx
f01181f0:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01181f3:	89 d0                	mov    %edx,%eax
f01181f5:	01 c0                	add    %eax,%eax
f01181f7:	01 d0                	add    %edx,%eax
f01181f9:	c1 e0 03             	shl    $0x3,%eax
f01181fc:	01 c8                	add    %ecx,%eax
f01181fe:	05 c0 00 00 00       	add    $0xc0,%eax
f0118203:	8b 10                	mov    (%eax),%edx
f0118205:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0118208:	89 94 85 a0 fb ff ff 	mov    %edx,-0x460(%ebp,%eax,4)
			panic("Loading programs failed\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
			panic("The programs should be initially loaded with the given working set size\n");

		for(int i = 0; i < 20; i++)
f011820f:	ff 45 e4             	incl   -0x1c(%ebp)
f0118212:	83 7d e4 13          	cmpl   $0x13,-0x1c(%ebp)
f0118216:	7e b3                	jle    f01181cb <test_priority_normal_and_lower+0x18c>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 30; i++)
f0118218:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011821f:	eb 47                	jmp    f0118268 <test_priority_normal_and_lower+0x229>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
f0118221:	8b 4d b4             	mov    -0x4c(%ebp),%ecx
f0118224:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0118227:	89 d0                	mov    %edx,%eax
f0118229:	01 c0                	add    %eax,%eax
f011822b:	01 d0                	add    %edx,%eax
f011822d:	c1 e0 03             	shl    $0x3,%eax
f0118230:	01 c8                	add    %ecx,%eax
f0118232:	05 b8 00 00 00       	add    $0xb8,%eax
f0118237:	8b 10                	mov    (%eax),%edx
f0118239:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011823c:	89 94 85 80 fd ff ff 	mov    %edx,-0x280(%ebp,%eax,4)
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
f0118243:	8b 4d b4             	mov    -0x4c(%ebp),%ecx
f0118246:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0118249:	89 d0                	mov    %edx,%eax
f011824b:	01 c0                	add    %eax,%eax
f011824d:	01 d0                	add    %edx,%eax
f011824f:	c1 e0 03             	shl    $0x3,%eax
f0118252:	01 c8                	add    %ecx,%eax
f0118254:	05 c0 00 00 00       	add    $0xc0,%eax
f0118259:	8b 10                	mov    (%eax),%edx
f011825b:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011825e:	89 94 85 f8 fd ff ff 	mov    %edx,-0x208(%ebp,%eax,4)
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 30; i++)
f0118265:	ff 45 e0             	incl   -0x20(%ebp)
f0118268:	83 7d e0 1d          	cmpl   $0x1d,-0x20(%ebp)
f011826c:	7e b3                	jle    f0118221 <test_priority_normal_and_lower+0x1e2>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 40; i++)
f011826e:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f0118275:	eb 47                	jmp    f01182be <test_priority_normal_and_lower+0x27f>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
f0118277:	8b 4d b0             	mov    -0x50(%ebp),%ecx
f011827a:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011827d:	89 d0                	mov    %edx,%eax
f011827f:	01 c0                	add    %eax,%eax
f0118281:	01 d0                	add    %edx,%eax
f0118283:	c1 e0 03             	shl    $0x3,%eax
f0118286:	01 c8                	add    %ecx,%eax
f0118288:	05 b8 00 00 00       	add    $0xb8,%eax
f011828d:	8b 10                	mov    (%eax),%edx
f011828f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0118292:	89 94 85 70 fe ff ff 	mov    %edx,-0x190(%ebp,%eax,4)
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
f0118299:	8b 4d b0             	mov    -0x50(%ebp),%ecx
f011829c:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011829f:	89 d0                	mov    %edx,%eax
f01182a1:	01 c0                	add    %eax,%eax
f01182a3:	01 d0                	add    %edx,%eax
f01182a5:	c1 e0 03             	shl    $0x3,%eax
f01182a8:	01 c8                	add    %ecx,%eax
f01182aa:	05 c0 00 00 00       	add    $0xc0,%eax
f01182af:	8b 10                	mov    (%eax),%edx
f01182b1:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01182b4:	89 94 85 10 ff ff ff 	mov    %edx,-0xf0(%ebp,%eax,4)
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 40; i++)
f01182bb:	ff 45 dc             	incl   -0x24(%ebp)
f01182be:	83 7d dc 27          	cmpl   $0x27,-0x24(%ebp)
f01182c2:	7e b3                	jle    f0118277 <test_priority_normal_and_lower+0x238>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		int freeFrames = sys_calculate_free_frames();
f01182c4:	e8 75 4b ff ff       	call   f010ce3e <sys_calculate_free_frames>
f01182c9:	89 45 c0             	mov    %eax,-0x40(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f01182cc:	e8 b3 c3 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01182d1:	89 45 bc             	mov    %eax,-0x44(%ebp)

		// Set Priority To Normal // Should change nothing
		set_program_priority(addEnv, 3);
f01182d4:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01182d7:	83 ec 08             	sub    $0x8,%esp
f01182da:	6a 03                	push   $0x3
f01182dc:	50                   	push   %eax
f01182dd:	e8 43 30 ff ff       	call   f010b325 <set_program_priority>
f01182e2:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 3);
f01182e5:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01182e8:	83 ec 08             	sub    $0x8,%esp
f01182eb:	6a 03                	push   $0x3
f01182ed:	50                   	push   %eax
f01182ee:	e8 32 30 ff ff       	call   f010b325 <set_program_priority>
f01182f3:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 3);
f01182f6:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01182f9:	83 ec 08             	sub    $0x8,%esp
f01182fc:	6a 03                	push   $0x3
f01182fe:	50                   	push   %eax
f01182ff:	e8 21 30 ff ff       	call   f010b325 <set_program_priority>
f0118304:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0118307:	e8 78 c3 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011830c:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f011830f:	74 17                	je     f0118328 <test_priority_normal_and_lower+0x2e9>
f0118311:	83 ec 04             	sub    $0x4,%esp
f0118314:	68 c4 98 13 f0       	push   $0xf01398c4
f0118319:	68 11 01 00 00       	push   $0x111
f011831e:	68 41 98 13 f0       	push   $0xf0139841
f0118323:	e8 88 7e fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0118328:	e8 11 4b ff ff       	call   f010ce3e <sys_calculate_free_frames>
f011832d:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f0118330:	74 17                	je     f0118349 <test_priority_normal_and_lower+0x30a>
f0118332:	83 ec 04             	sub    $0x4,%esp
f0118335:	68 c4 98 13 f0       	push   $0xf01398c4
f011833a:	68 12 01 00 00       	push   $0x112
f011833f:	68 41 98 13 f0       	push   $0xf0139841
f0118344:	e8 67 7e fe ff       	call   f01001b0 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f0118349:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011834c:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0118352:	83 f8 14             	cmp    $0x14,%eax
f0118355:	75 1c                	jne    f0118373 <test_priority_normal_and_lower+0x334>
f0118357:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011835a:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0118360:	83 f8 1e             	cmp    $0x1e,%eax
f0118363:	75 0e                	jne    f0118373 <test_priority_normal_and_lower+0x334>
f0118365:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0118368:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f011836e:	83 f8 28             	cmp    $0x28,%eax
f0118371:	74 17                	je     f011838a <test_priority_normal_and_lower+0x34b>
			panic("The programs' working set size should not change after setting priority to normal\n");
f0118373:	83 ec 04             	sub    $0x4,%esp
f0118376:	68 f0 98 13 f0       	push   $0xf01398f0
f011837b:	68 15 01 00 00       	push   $0x115
f0118380:	68 41 98 13 f0       	push   $0xf0139841
f0118385:	e8 26 7e fe ff       	call   f01001b0 <_panic>

		freeFrames = sys_calculate_free_frames();
f011838a:	e8 af 4a ff ff       	call   f010ce3e <sys_calculate_free_frames>
f011838f:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118392:	e8 ed c2 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0118397:	89 45 bc             	mov    %eax,-0x44(%ebp)

		// Set Priority To Below Normal // Should change only if half is free
		set_program_priority(addEnv, 2);
f011839a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011839d:	83 ec 08             	sub    $0x8,%esp
f01183a0:	6a 02                	push   $0x2
f01183a2:	50                   	push   %eax
f01183a3:	e8 7d 2f ff ff       	call   f010b325 <set_program_priority>
f01183a8:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 2);
f01183ab:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01183ae:	83 ec 08             	sub    $0x8,%esp
f01183b1:	6a 02                	push   $0x2
f01183b3:	50                   	push   %eax
f01183b4:	e8 6c 2f ff ff       	call   f010b325 <set_program_priority>
f01183b9:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 2);
f01183bc:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01183bf:	83 ec 08             	sub    $0x8,%esp
f01183c2:	6a 02                	push   $0x2
f01183c4:	50                   	push   %eax
f01183c5:	e8 5b 2f ff ff       	call   f010b325 <set_program_priority>
f01183ca:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f01183cd:	e8 b2 c2 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01183d2:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f01183d5:	74 17                	je     f01183ee <test_priority_normal_and_lower+0x3af>
f01183d7:	83 ec 04             	sub    $0x4,%esp
f01183da:	68 c4 98 13 f0       	push   $0xf01398c4
f01183df:	68 1f 01 00 00       	push   $0x11f
f01183e4:	68 41 98 13 f0       	push   $0xf0139841
f01183e9:	e8 c2 7d fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Old working set should be removed properly%x\n", (freeFrames - sys_calculate_free_frames()));
f01183ee:	e8 4b 4a ff ff       	call   f010ce3e <sys_calculate_free_frames>
f01183f3:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f01183f6:	74 21                	je     f0118419 <test_priority_normal_and_lower+0x3da>
f01183f8:	e8 41 4a ff ff       	call   f010ce3e <sys_calculate_free_frames>
f01183fd:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0118400:	29 c2                	sub    %eax,%edx
f0118402:	89 d0                	mov    %edx,%eax
f0118404:	50                   	push   %eax
f0118405:	68 44 99 13 f0       	push   $0xf0139944
f011840a:	68 20 01 00 00       	push   $0x120
f011840f:	68 41 98 13 f0       	push   $0xf0139841
f0118414:	e8 97 7d fe ff       	call   f01001b0 <_panic>

		if(addEnv->page_WS_max_size != 10 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f0118419:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011841c:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0118422:	83 f8 0a             	cmp    $0xa,%eax
f0118425:	75 1c                	jne    f0118443 <test_priority_normal_and_lower+0x404>
f0118427:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011842a:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0118430:	83 f8 0f             	cmp    $0xf,%eax
f0118433:	75 0e                	jne    f0118443 <test_priority_normal_and_lower+0x404>
f0118435:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0118438:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f011843e:	83 f8 14             	cmp    $0x14,%eax
f0118441:	74 17                	je     f011845a <test_priority_normal_and_lower+0x41b>
			panic("The programs' working set size should be doubled only if it is full\n");
f0118443:	83 ec 04             	sub    $0x4,%esp
f0118446:	68 74 99 13 f0       	push   $0xf0139974
f011844b:	68 23 01 00 00       	push   $0x123
f0118450:	68 41 98 13 f0       	push   $0xf0139841
f0118455:	e8 56 7d fe ff       	call   f01001b0 <_panic>

		freeFrames = sys_calculate_free_frames();
f011845a:	e8 df 49 ff ff       	call   f010ce3e <sys_calculate_free_frames>
f011845f:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118462:	e8 1d c2 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0118467:	89 45 bc             	mov    %eax,-0x44(%ebp)

		// Set Priority To Below Normal // Should change only if half is free
		set_program_priority(addEnv, 2);
f011846a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011846d:	83 ec 08             	sub    $0x8,%esp
f0118470:	6a 02                	push   $0x2
f0118472:	50                   	push   %eax
f0118473:	e8 ad 2e ff ff       	call   f010b325 <set_program_priority>
f0118478:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 2);
f011847b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011847e:	83 ec 08             	sub    $0x8,%esp
f0118481:	6a 02                	push   $0x2
f0118483:	50                   	push   %eax
f0118484:	e8 9c 2e ff ff       	call   f010b325 <set_program_priority>
f0118489:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 2);
f011848c:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011848f:	83 ec 08             	sub    $0x8,%esp
f0118492:	6a 02                	push   $0x2
f0118494:	50                   	push   %eax
f0118495:	e8 8b 2e ff ff       	call   f010b325 <set_program_priority>
f011849a:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f011849d:	e8 e2 c1 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01184a2:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f01184a5:	74 17                	je     f01184be <test_priority_normal_and_lower+0x47f>
f01184a7:	83 ec 04             	sub    $0x4,%esp
f01184aa:	68 c4 98 13 f0       	push   $0xf01398c4
f01184af:	68 2d 01 00 00       	push   $0x12d
f01184b4:	68 41 98 13 f0       	push   $0xf0139841
f01184b9:	e8 f2 7c fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Old working set should be removed properly%x\n", (freeFrames - sys_calculate_free_frames()));
f01184be:	e8 7b 49 ff ff       	call   f010ce3e <sys_calculate_free_frames>
f01184c3:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f01184c6:	74 21                	je     f01184e9 <test_priority_normal_and_lower+0x4aa>
f01184c8:	e8 71 49 ff ff       	call   f010ce3e <sys_calculate_free_frames>
f01184cd:	8b 55 c0             	mov    -0x40(%ebp),%edx
f01184d0:	29 c2                	sub    %eax,%edx
f01184d2:	89 d0                	mov    %edx,%eax
f01184d4:	50                   	push   %eax
f01184d5:	68 44 99 13 f0       	push   $0xf0139944
f01184da:	68 2e 01 00 00       	push   $0x12e
f01184df:	68 41 98 13 f0       	push   $0xf0139841
f01184e4:	e8 c7 7c fe ff       	call   f01001b0 <_panic>

		if(addEnv->page_WS_max_size != 10 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
f01184e9:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01184ec:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f01184f2:	83 f8 0a             	cmp    $0xa,%eax
f01184f5:	75 1c                	jne    f0118513 <test_priority_normal_and_lower+0x4d4>
f01184f7:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01184fa:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0118500:	83 f8 0f             	cmp    $0xf,%eax
f0118503:	75 0e                	jne    f0118513 <test_priority_normal_and_lower+0x4d4>
f0118505:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0118508:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f011850e:	83 f8 0a             	cmp    $0xa,%eax
f0118511:	74 17                	je     f011852a <test_priority_normal_and_lower+0x4eb>
			panic("The programs' working set size should be doubled only if it is full\n");
f0118513:	83 ec 04             	sub    $0x4,%esp
f0118516:	68 74 99 13 f0       	push   $0xf0139974
f011851b:	68 31 01 00 00       	push   $0x131
f0118520:	68 41 98 13 f0       	push   $0xf0139841
f0118525:	e8 86 7c fe ff       	call   f01001b0 <_panic>

		for(int i = 0; i < 10; i++)
f011852a:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f0118531:	eb 7d                	jmp    f01185b0 <test_priority_normal_and_lower+0x571>
		{
			if(add_WS[i] != addEnv->ptr_pageWorkingSet[i].virtual_address)
f0118533:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0118536:	8b 8c 85 50 fb ff ff 	mov    -0x4b0(%ebp,%eax,4),%ecx
f011853d:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f0118540:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0118543:	89 d0                	mov    %edx,%eax
f0118545:	01 c0                	add    %eax,%eax
f0118547:	01 d0                	add    %edx,%eax
f0118549:	c1 e0 03             	shl    $0x3,%eax
f011854c:	01 d8                	add    %ebx,%eax
f011854e:	05 b8 00 00 00       	add    $0xb8,%eax
f0118553:	8b 00                	mov    (%eax),%eax
f0118555:	39 c1                	cmp    %eax,%ecx
f0118557:	74 17                	je     f0118570 <test_priority_normal_and_lower+0x531>
				panic("Working set should be moved properly to the new one");
f0118559:	83 ec 04             	sub    $0x4,%esp
f011855c:	68 34 9a 13 f0       	push   $0xf0139a34
f0118561:	68 36 01 00 00       	push   $0x136
f0118566:	68 41 98 13 f0       	push   $0xf0139841
f011856b:	e8 40 7c fe ff       	call   f01001b0 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
f0118570:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0118573:	8b 8c 85 a0 fb ff ff 	mov    -0x460(%ebp,%eax,4),%ecx
f011857a:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f011857d:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0118580:	89 d0                	mov    %edx,%eax
f0118582:	01 c0                	add    %eax,%eax
f0118584:	01 d0                	add    %edx,%eax
f0118586:	c1 e0 03             	shl    $0x3,%eax
f0118589:	01 d8                	add    %ebx,%eax
f011858b:	05 c0 00 00 00       	add    $0xc0,%eax
f0118590:	8b 00                	mov    (%eax),%eax
f0118592:	39 c1                	cmp    %eax,%ecx
f0118594:	74 17                	je     f01185ad <test_priority_normal_and_lower+0x56e>
				panic("Working set should be moved properly to the new one");
f0118596:	83 ec 04             	sub    $0x4,%esp
f0118599:	68 34 9a 13 f0       	push   $0xf0139a34
f011859e:	68 39 01 00 00       	push   $0x139
f01185a3:	68 41 98 13 f0       	push   $0xf0139841
f01185a8:	e8 03 7c fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Old working set should be removed properly%x\n", (freeFrames - sys_calculate_free_frames()));

		if(addEnv->page_WS_max_size != 10 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
			panic("The programs' working set size should be doubled only if it is full\n");

		for(int i = 0; i < 10; i++)
f01185ad:	ff 45 d8             	incl   -0x28(%ebp)
f01185b0:	83 7d d8 09          	cmpl   $0x9,-0x28(%ebp)
f01185b4:	0f 8e 79 ff ff ff    	jle    f0118533 <test_priority_normal_and_lower+0x4f4>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f01185ba:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f01185c1:	eb 7d                	jmp    f0118640 <test_priority_normal_and_lower+0x601>
		{
			if(fact_WS[i] != factEnv->ptr_pageWorkingSet[i].virtual_address)
f01185c3:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01185c6:	8b 8c 85 80 fd ff ff 	mov    -0x280(%ebp,%eax,4),%ecx
f01185cd:	8b 5d b4             	mov    -0x4c(%ebp),%ebx
f01185d0:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f01185d3:	89 d0                	mov    %edx,%eax
f01185d5:	01 c0                	add    %eax,%eax
f01185d7:	01 d0                	add    %edx,%eax
f01185d9:	c1 e0 03             	shl    $0x3,%eax
f01185dc:	01 d8                	add    %ebx,%eax
f01185de:	05 b8 00 00 00       	add    $0xb8,%eax
f01185e3:	8b 00                	mov    (%eax),%eax
f01185e5:	39 c1                	cmp    %eax,%ecx
f01185e7:	74 17                	je     f0118600 <test_priority_normal_and_lower+0x5c1>
				panic("Working set should be moved properly to the new one");
f01185e9:	83 ec 04             	sub    $0x4,%esp
f01185ec:	68 34 9a 13 f0       	push   $0xf0139a34
f01185f1:	68 3f 01 00 00       	push   $0x13f
f01185f6:	68 41 98 13 f0       	push   $0xf0139841
f01185fb:	e8 b0 7b fe ff       	call   f01001b0 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
f0118600:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0118603:	8b 8c 85 f8 fd ff ff 	mov    -0x208(%ebp,%eax,4),%ecx
f011860a:	8b 5d b4             	mov    -0x4c(%ebp),%ebx
f011860d:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0118610:	89 d0                	mov    %edx,%eax
f0118612:	01 c0                	add    %eax,%eax
f0118614:	01 d0                	add    %edx,%eax
f0118616:	c1 e0 03             	shl    $0x3,%eax
f0118619:	01 d8                	add    %ebx,%eax
f011861b:	05 c0 00 00 00       	add    $0xc0,%eax
f0118620:	8b 00                	mov    (%eax),%eax
f0118622:	39 c1                	cmp    %eax,%ecx
f0118624:	74 17                	je     f011863d <test_priority_normal_and_lower+0x5fe>
				panic("Working set should be moved properly to the new one");
f0118626:	83 ec 04             	sub    $0x4,%esp
f0118629:	68 34 9a 13 f0       	push   $0xf0139a34
f011862e:	68 42 01 00 00       	push   $0x142
f0118633:	68 41 98 13 f0       	push   $0xf0139841
f0118638:	e8 73 7b fe ff       	call   f01001b0 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f011863d:	ff 45 d4             	incl   -0x2c(%ebp)
f0118640:	83 7d d4 0e          	cmpl   $0xe,-0x2c(%ebp)
f0118644:	0f 8e 79 ff ff ff    	jle    f01185c3 <test_priority_normal_and_lower+0x584>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f011864a:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
f0118651:	eb 7d                	jmp    f01186d0 <test_priority_normal_and_lower+0x691>
		{
			if(hello_WS[i] != helloEnv->ptr_pageWorkingSet[i].virtual_address)
f0118653:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0118656:	8b 8c 85 70 fe ff ff 	mov    -0x190(%ebp,%eax,4),%ecx
f011865d:	8b 5d b0             	mov    -0x50(%ebp),%ebx
f0118660:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0118663:	89 d0                	mov    %edx,%eax
f0118665:	01 c0                	add    %eax,%eax
f0118667:	01 d0                	add    %edx,%eax
f0118669:	c1 e0 03             	shl    $0x3,%eax
f011866c:	01 d8                	add    %ebx,%eax
f011866e:	05 b8 00 00 00       	add    $0xb8,%eax
f0118673:	8b 00                	mov    (%eax),%eax
f0118675:	39 c1                	cmp    %eax,%ecx
f0118677:	74 17                	je     f0118690 <test_priority_normal_and_lower+0x651>
				panic("Working set should be moved properly to the new one");
f0118679:	83 ec 04             	sub    $0x4,%esp
f011867c:	68 34 9a 13 f0       	push   $0xf0139a34
f0118681:	68 48 01 00 00       	push   $0x148
f0118686:	68 41 98 13 f0       	push   $0xf0139841
f011868b:	e8 20 7b fe ff       	call   f01001b0 <_panic>

			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
f0118690:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0118693:	8b 8c 85 10 ff ff ff 	mov    -0xf0(%ebp,%eax,4),%ecx
f011869a:	8b 5d b0             	mov    -0x50(%ebp),%ebx
f011869d:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01186a0:	89 d0                	mov    %edx,%eax
f01186a2:	01 c0                	add    %eax,%eax
f01186a4:	01 d0                	add    %edx,%eax
f01186a6:	c1 e0 03             	shl    $0x3,%eax
f01186a9:	01 d8                	add    %ebx,%eax
f01186ab:	05 c0 00 00 00       	add    $0xc0,%eax
f01186b0:	8b 00                	mov    (%eax),%eax
f01186b2:	39 c1                	cmp    %eax,%ecx
f01186b4:	74 17                	je     f01186cd <test_priority_normal_and_lower+0x68e>
				panic("Working set should be moved properly to the new one");
f01186b6:	83 ec 04             	sub    $0x4,%esp
f01186b9:	68 34 9a 13 f0       	push   $0xf0139a34
f01186be:	68 4b 01 00 00       	push   $0x14b
f01186c3:	68 41 98 13 f0       	push   $0xf0139841
f01186c8:	e8 e3 7a fe ff       	call   f01001b0 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f01186cd:	ff 45 d0             	incl   -0x30(%ebp)
f01186d0:	83 7d d0 09          	cmpl   $0x9,-0x30(%ebp)
f01186d4:	0f 8e 79 ff ff ff    	jle    f0118653 <test_priority_normal_and_lower+0x614>
			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		// Set priority to low
		freeFrames = sys_calculate_free_frames();
f01186da:	e8 5f 47 ff ff       	call   f010ce3e <sys_calculate_free_frames>
f01186df:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01186e2:	e8 9d bf fe ff       	call   f0104684 <pf_calculate_free_frames>
f01186e7:	89 45 bc             	mov    %eax,-0x44(%ebp)
		set_program_priority(addEnv, 1);
f01186ea:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01186ed:	83 ec 08             	sub    $0x8,%esp
f01186f0:	6a 01                	push   $0x1
f01186f2:	50                   	push   %eax
f01186f3:	e8 2d 2c ff ff       	call   f010b325 <set_program_priority>
f01186f8:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 1);
f01186fb:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01186fe:	83 ec 08             	sub    $0x8,%esp
f0118701:	6a 01                	push   $0x1
f0118703:	50                   	push   %eax
f0118704:	e8 1c 2c ff ff       	call   f010b325 <set_program_priority>
f0118709:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 1);
f011870c:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011870f:	83 ec 08             	sub    $0x8,%esp
f0118712:	6a 01                	push   $0x1
f0118714:	50                   	push   %eax
f0118715:	e8 0b 2c ff ff       	call   f010b325 <set_program_priority>
f011871a:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f011871d:	e8 62 bf fe ff       	call   f0104684 <pf_calculate_free_frames>
f0118722:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0118725:	74 17                	je     f011873e <test_priority_normal_and_lower+0x6ff>
f0118727:	83 ec 04             	sub    $0x4,%esp
f011872a:	68 c4 98 13 f0       	push   $0xf01398c4
f011872f:	68 54 01 00 00       	push   $0x154
f0118734:	68 41 98 13 f0       	push   $0xf0139841
f0118739:	e8 72 7a fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != (5+3+5)) panic("Old working set and extra pages in WS should be removed properly %d\n");
f011873e:	e8 fb 46 ff ff       	call   f010ce3e <sys_calculate_free_frames>
f0118743:	2b 45 c0             	sub    -0x40(%ebp),%eax
f0118746:	83 f8 0d             	cmp    $0xd,%eax
f0118749:	74 17                	je     f0118762 <test_priority_normal_and_lower+0x723>
f011874b:	83 ec 04             	sub    $0x4,%esp
f011874e:	68 1c 9c 13 f0       	push   $0xf0139c1c
f0118753:	68 55 01 00 00       	push   $0x155
f0118758:	68 41 98 13 f0       	push   $0xf0139841
f011875d:	e8 4e 7a fe ff       	call   f01001b0 <_panic>

		if(addEnv->page_WS_max_size != 5 || factEnv->page_WS_max_size != 7 || helloEnv->page_WS_max_size != 5)
f0118762:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0118765:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f011876b:	83 f8 05             	cmp    $0x5,%eax
f011876e:	75 1c                	jne    f011878c <test_priority_normal_and_lower+0x74d>
f0118770:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0118773:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0118779:	83 f8 07             	cmp    $0x7,%eax
f011877c:	75 0e                	jne    f011878c <test_priority_normal_and_lower+0x74d>
f011877e:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0118781:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0118787:	83 f8 05             	cmp    $0x5,%eax
f011878a:	74 17                	je     f01187a3 <test_priority_normal_and_lower+0x764>
			panic("The programs' working set size should be half\n");
f011878c:	83 ec 04             	sub    $0x4,%esp
f011878f:	68 64 9c 13 f0       	push   $0xf0139c64
f0118794:	68 58 01 00 00       	push   $0x158
f0118799:	68 41 98 13 f0       	push   $0xf0139841
f011879e:	e8 0d 7a fe ff       	call   f01001b0 <_panic>


		freeFrames = sys_calculate_free_frames();
f01187a3:	e8 96 46 ff ff       	call   f010ce3e <sys_calculate_free_frames>
f01187a8:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01187ab:	e8 d4 be fe ff       	call   f0104684 <pf_calculate_free_frames>
f01187b0:	89 45 bc             	mov    %eax,-0x44(%ebp)
		set_program_priority(addEnv, 1);
f01187b3:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01187b6:	83 ec 08             	sub    $0x8,%esp
f01187b9:	6a 01                	push   $0x1
f01187bb:	50                   	push   %eax
f01187bc:	e8 64 2b ff ff       	call   f010b325 <set_program_priority>
f01187c1:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f01187c4:	e8 bb be fe ff       	call   f0104684 <pf_calculate_free_frames>
f01187c9:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f01187cc:	74 17                	je     f01187e5 <test_priority_normal_and_lower+0x7a6>
f01187ce:	83 ec 04             	sub    $0x4,%esp
f01187d1:	68 c4 98 13 f0       	push   $0xf01398c4
f01187d6:	68 5e 01 00 00       	push   $0x15e
f01187db:	68 41 98 13 f0       	push   $0xf0139841
f01187e0:	e8 cb 79 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3) panic("Old working set should be removed properly\n");
f01187e5:	e8 54 46 ff ff       	call   f010ce3e <sys_calculate_free_frames>
f01187ea:	2b 45 c0             	sub    -0x40(%ebp),%eax
f01187ed:	83 f8 03             	cmp    $0x3,%eax
f01187f0:	74 17                	je     f0118809 <test_priority_normal_and_lower+0x7ca>
f01187f2:	83 ec 04             	sub    $0x4,%esp
f01187f5:	68 c4 98 13 f0       	push   $0xf01398c4
f01187fa:	68 5f 01 00 00       	push   $0x15f
f01187ff:	68 41 98 13 f0       	push   $0xf0139841
f0118804:	e8 a7 79 fe ff       	call   f01001b0 <_panic>

		if(addEnv->page_WS_max_size != 2 || factEnv->page_WS_max_size != 7 || helloEnv->page_WS_max_size != 5)
f0118809:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011880c:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0118812:	83 f8 02             	cmp    $0x2,%eax
f0118815:	75 1c                	jne    f0118833 <test_priority_normal_and_lower+0x7f4>
f0118817:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011881a:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f0118820:	83 f8 07             	cmp    $0x7,%eax
f0118823:	75 0e                	jne    f0118833 <test_priority_normal_and_lower+0x7f4>
f0118825:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0118828:	8b 80 7c d5 01 00    	mov    0x1d57c(%eax),%eax
f011882e:	83 f8 05             	cmp    $0x5,%eax
f0118831:	74 17                	je     f011884a <test_priority_normal_and_lower+0x80b>
			panic("The programs' working set size should be doubled if full\n");
f0118833:	83 ec 04             	sub    $0x4,%esp
f0118836:	68 f8 99 13 f0       	push   $0xf01399f8
f011883b:	68 62 01 00 00       	push   $0x162
f0118840:	68 41 98 13 f0       	push   $0xf0139841
f0118845:	e8 66 79 fe ff       	call   f01001b0 <_panic>

		for(int i = 0; i < 2; i++)
f011884a:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f0118851:	e9 83 00 00 00       	jmp    f01188d9 <test_priority_normal_and_lower+0x89a>
		{
			if(add_WS[i+8] != addEnv->ptr_pageWorkingSet[i].virtual_address)
f0118856:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0118859:	83 c0 08             	add    $0x8,%eax
f011885c:	8b 8c 85 50 fb ff ff 	mov    -0x4b0(%ebp,%eax,4),%ecx
f0118863:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f0118866:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0118869:	89 d0                	mov    %edx,%eax
f011886b:	01 c0                	add    %eax,%eax
f011886d:	01 d0                	add    %edx,%eax
f011886f:	c1 e0 03             	shl    $0x3,%eax
f0118872:	01 d8                	add    %ebx,%eax
f0118874:	05 b8 00 00 00       	add    $0xb8,%eax
f0118879:	8b 00                	mov    (%eax),%eax
f011887b:	39 c1                	cmp    %eax,%ecx
f011887d:	74 17                	je     f0118896 <test_priority_normal_and_lower+0x857>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f011887f:	83 ec 04             	sub    $0x4,%esp
f0118882:	68 94 9c 13 f0       	push   $0xf0139c94
f0118887:	68 67 01 00 00       	push   $0x167
f011888c:	68 41 98 13 f0       	push   $0xf0139841
f0118891:	e8 1a 79 fe ff       	call   f01001b0 <_panic>

			if(add_TimeStamp[i+8] != addEnv->ptr_pageWorkingSet[i].time_stamp)
f0118896:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0118899:	83 c0 08             	add    $0x8,%eax
f011889c:	8b 8c 85 a0 fb ff ff 	mov    -0x460(%ebp,%eax,4),%ecx
f01188a3:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f01188a6:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01188a9:	89 d0                	mov    %edx,%eax
f01188ab:	01 c0                	add    %eax,%eax
f01188ad:	01 d0                	add    %edx,%eax
f01188af:	c1 e0 03             	shl    $0x3,%eax
f01188b2:	01 d8                	add    %ebx,%eax
f01188b4:	05 c0 00 00 00       	add    $0xc0,%eax
f01188b9:	8b 00                	mov    (%eax),%eax
f01188bb:	39 c1                	cmp    %eax,%ecx
f01188bd:	74 17                	je     f01188d6 <test_priority_normal_and_lower+0x897>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f01188bf:	83 ec 04             	sub    $0x4,%esp
f01188c2:	68 94 9c 13 f0       	push   $0xf0139c94
f01188c7:	68 6a 01 00 00       	push   $0x16a
f01188cc:	68 41 98 13 f0       	push   $0xf0139841
f01188d1:	e8 da 78 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 2 || factEnv->page_WS_max_size != 7 || helloEnv->page_WS_max_size != 5)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 0; i < 2; i++)
f01188d6:	ff 45 cc             	incl   -0x34(%ebp)
f01188d9:	83 7d cc 01          	cmpl   $0x1,-0x34(%ebp)
f01188dd:	0f 8e 73 ff ff ff    	jle    f0118856 <test_priority_normal_and_lower+0x817>

			if(add_TimeStamp[i+8] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 7; i++)
f01188e3:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
f01188ea:	e9 83 00 00 00       	jmp    f0118972 <test_priority_normal_and_lower+0x933>
		{
			if(fact_WS[i+3] != factEnv->ptr_pageWorkingSet[i].virtual_address)
f01188ef:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01188f2:	83 c0 03             	add    $0x3,%eax
f01188f5:	8b 8c 85 80 fd ff ff 	mov    -0x280(%ebp,%eax,4),%ecx
f01188fc:	8b 5d b4             	mov    -0x4c(%ebp),%ebx
f01188ff:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0118902:	89 d0                	mov    %edx,%eax
f0118904:	01 c0                	add    %eax,%eax
f0118906:	01 d0                	add    %edx,%eax
f0118908:	c1 e0 03             	shl    $0x3,%eax
f011890b:	01 d8                	add    %ebx,%eax
f011890d:	05 b8 00 00 00       	add    $0xb8,%eax
f0118912:	8b 00                	mov    (%eax),%eax
f0118914:	39 c1                	cmp    %eax,%ecx
f0118916:	74 17                	je     f011892f <test_priority_normal_and_lower+0x8f0>
				panic("%d Working set should be moved properly to the new one, removed pages are chosen based on replacement policy", i);
f0118918:	ff 75 c8             	pushl  -0x38(%ebp)
f011891b:	68 00 9d 13 f0       	push   $0xf0139d00
f0118920:	68 70 01 00 00       	push   $0x170
f0118925:	68 41 98 13 f0       	push   $0xf0139841
f011892a:	e8 81 78 fe ff       	call   f01001b0 <_panic>

			if(fact_TimeStamp[i+3] != factEnv->ptr_pageWorkingSet[i].time_stamp)
f011892f:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0118932:	83 c0 03             	add    $0x3,%eax
f0118935:	8b 8c 85 f8 fd ff ff 	mov    -0x208(%ebp,%eax,4),%ecx
f011893c:	8b 5d b4             	mov    -0x4c(%ebp),%ebx
f011893f:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0118942:	89 d0                	mov    %edx,%eax
f0118944:	01 c0                	add    %eax,%eax
f0118946:	01 d0                	add    %edx,%eax
f0118948:	c1 e0 03             	shl    $0x3,%eax
f011894b:	01 d8                	add    %ebx,%eax
f011894d:	05 c0 00 00 00       	add    $0xc0,%eax
f0118952:	8b 00                	mov    (%eax),%eax
f0118954:	39 c1                	cmp    %eax,%ecx
f0118956:	74 17                	je     f011896f <test_priority_normal_and_lower+0x930>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0118958:	83 ec 04             	sub    $0x4,%esp
f011895b:	68 94 9c 13 f0       	push   $0xf0139c94
f0118960:	68 73 01 00 00       	push   $0x173
f0118965:	68 41 98 13 f0       	push   $0xf0139841
f011896a:	e8 41 78 fe ff       	call   f01001b0 <_panic>

			if(add_TimeStamp[i+8] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 7; i++)
f011896f:	ff 45 c8             	incl   -0x38(%ebp)
f0118972:	83 7d c8 06          	cmpl   $0x6,-0x38(%ebp)
f0118976:	0f 8e 73 ff ff ff    	jle    f01188ef <test_priority_normal_and_lower+0x8b0>

			if(fact_TimeStamp[i+3] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 5; i++)
f011897c:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
f0118983:	e9 83 00 00 00       	jmp    f0118a0b <test_priority_normal_and_lower+0x9cc>
		{
			if(hello_WS[i+5] != helloEnv->ptr_pageWorkingSet[i].virtual_address)
f0118988:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011898b:	83 c0 05             	add    $0x5,%eax
f011898e:	8b 8c 85 70 fe ff ff 	mov    -0x190(%ebp,%eax,4),%ecx
f0118995:	8b 5d b0             	mov    -0x50(%ebp),%ebx
f0118998:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f011899b:	89 d0                	mov    %edx,%eax
f011899d:	01 c0                	add    %eax,%eax
f011899f:	01 d0                	add    %edx,%eax
f01189a1:	c1 e0 03             	shl    $0x3,%eax
f01189a4:	01 d8                	add    %ebx,%eax
f01189a6:	05 b8 00 00 00       	add    $0xb8,%eax
f01189ab:	8b 00                	mov    (%eax),%eax
f01189ad:	39 c1                	cmp    %eax,%ecx
f01189af:	74 17                	je     f01189c8 <test_priority_normal_and_lower+0x989>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f01189b1:	83 ec 04             	sub    $0x4,%esp
f01189b4:	68 94 9c 13 f0       	push   $0xf0139c94
f01189b9:	68 79 01 00 00       	push   $0x179
f01189be:	68 41 98 13 f0       	push   $0xf0139841
f01189c3:	e8 e8 77 fe ff       	call   f01001b0 <_panic>

			if(hello_TimeStamp[i+5] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
f01189c8:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01189cb:	83 c0 05             	add    $0x5,%eax
f01189ce:	8b 8c 85 10 ff ff ff 	mov    -0xf0(%ebp,%eax,4),%ecx
f01189d5:	8b 5d b0             	mov    -0x50(%ebp),%ebx
f01189d8:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01189db:	89 d0                	mov    %edx,%eax
f01189dd:	01 c0                	add    %eax,%eax
f01189df:	01 d0                	add    %edx,%eax
f01189e1:	c1 e0 03             	shl    $0x3,%eax
f01189e4:	01 d8                	add    %ebx,%eax
f01189e6:	05 c0 00 00 00       	add    $0xc0,%eax
f01189eb:	8b 00                	mov    (%eax),%eax
f01189ed:	39 c1                	cmp    %eax,%ecx
f01189ef:	74 17                	je     f0118a08 <test_priority_normal_and_lower+0x9c9>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f01189f1:	83 ec 04             	sub    $0x4,%esp
f01189f4:	68 94 9c 13 f0       	push   $0xf0139c94
f01189f9:	68 7c 01 00 00       	push   $0x17c
f01189fe:	68 41 98 13 f0       	push   $0xf0139841
f0118a03:	e8 a8 77 fe ff       	call   f01001b0 <_panic>

			if(fact_TimeStamp[i+3] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 5; i++)
f0118a08:	ff 45 c4             	incl   -0x3c(%ebp)
f0118a0b:	83 7d c4 04          	cmpl   $0x4,-0x3c(%ebp)
f0118a0f:	0f 8e 73 ff ff ff    	jle    f0118988 <test_priority_normal_and_lower+0x949>

			if(hello_TimeStamp[i+5] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		set_program_priority(addEnv, 5);
f0118a15:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0118a18:	83 ec 08             	sub    $0x8,%esp
f0118a1b:	6a 05                	push   $0x5
f0118a1d:	50                   	push   %eax
f0118a1e:	e8 02 29 ff ff       	call   f010b325 <set_program_priority>
f0118a23:	83 c4 10             	add    $0x10,%esp
		set_program_priority(addEnv, 5);
f0118a26:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0118a29:	83 ec 08             	sub    $0x8,%esp
f0118a2c:	6a 05                	push   $0x5
f0118a2e:	50                   	push   %eax
f0118a2f:	e8 f1 28 ff ff       	call   f010b325 <set_program_priority>
f0118a34:	83 c4 10             	add    $0x10,%esp

		char command4[100] = "runall";
f0118a37:	c7 85 1c fd ff ff 72 	movl   $0x616e7572,-0x2e4(%ebp)
f0118a3e:	75 6e 61 
f0118a41:	c7 85 20 fd ff ff 6c 	movl   $0x6c6c,-0x2e0(%ebp)
f0118a48:	6c 00 00 
f0118a4b:	8d 95 24 fd ff ff    	lea    -0x2dc(%ebp),%edx
f0118a51:	b9 17 00 00 00       	mov    $0x17,%ecx
f0118a56:	b8 00 00 00 00       	mov    $0x0,%eax
f0118a5b:	89 d7                	mov    %edx,%edi
f0118a5d:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command4);
f0118a5f:	83 ec 0c             	sub    $0xc,%esp
f0118a62:	8d 85 1c fd ff ff    	lea    -0x2e4(%ebp),%eax
f0118a68:	50                   	push   %eax
f0118a69:	e8 55 91 fe ff       	call   f0101bc3 <execute_command>
f0118a6e:	83 c4 10             	add    $0x10,%esp
	else
	{
		cprintf("\nCongratulations!! test priority 2 completed successfully.\n");
	}
#endif
}
f0118a71:	eb 10                	jmp    f0118a83 <test_priority_normal_and_lower+0xa44>
		char command4[100] = "runall";
		execute_command(command4);
	}
	else
	{
		cprintf("\nCongratulations!! test priority 2 completed successfully.\n");
f0118a73:	83 ec 0c             	sub    $0xc,%esp
f0118a76:	68 70 9d 13 f0       	push   $0xf0139d70
f0118a7b:	e8 b1 83 fe ff       	call   f0100e31 <cprintf>
f0118a80:	83 c4 10             	add    $0x10,%esp
	}
#endif
}
f0118a83:	90                   	nop
f0118a84:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0118a87:	5b                   	pop    %ebx
f0118a88:	5e                   	pop    %esi
f0118a89:	5f                   	pop    %edi
f0118a8a:	5d                   	pop    %ebp
f0118a8b:	c3                   	ret    

f0118a8c <isKHeapPlacementStrategyNEXTFIT>:
f0118a8c:	55                   	push   %ebp
f0118a8d:	89 e5                	mov    %esp,%ebp
f0118a8f:	a1 18 ce 2b f0       	mov    0xf02bce18,%eax
f0118a94:	83 f8 03             	cmp    $0x3,%eax
f0118a97:	75 04                	jne    f0118a9d <isKHeapPlacementStrategyNEXTFIT+0x11>
f0118a99:	b0 01                	mov    $0x1,%al
f0118a9b:	eb 02                	jmp    f0118a9f <isKHeapPlacementStrategyNEXTFIT+0x13>
f0118a9d:	b0 00                	mov    $0x0,%al
f0118a9f:	5d                   	pop    %ebp
f0118aa0:	c3                   	ret    

f0118aa1 <test_kmalloc>:
	int c;
};


int test_kmalloc()
{
f0118aa1:	55                   	push   %ebp
f0118aa2:	89 e5                	mov    %esp,%ebp
f0118aa4:	57                   	push   %edi
f0118aa5:	53                   	push   %ebx
f0118aa6:	81 ec 70 01 00 00    	sub    $0x170,%esp
	cprintf("==============================================\n");
f0118aac:	83 ec 0c             	sub    $0xc,%esp
f0118aaf:	68 74 9e 13 f0       	push   $0xf0139e74
f0118ab4:	e8 78 83 fe ff       	call   f0100e31 <cprintf>
f0118ab9:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0118abc:	83 ec 0c             	sub    $0xc,%esp
f0118abf:	68 a4 9e 13 f0       	push   $0xf0139ea4
f0118ac4:	e8 68 83 fe ff       	call   f0100e31 <cprintf>
f0118ac9:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0118acc:	83 ec 0c             	sub    $0xc,%esp
f0118acf:	68 74 9e 13 f0       	push   $0xf0139e74
f0118ad4:	e8 58 83 fe ff       	call   f0100e31 <cprintf>
f0118ad9:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f0118adc:	c6 45 f3 80          	movb   $0x80,-0xd(%ebp)
	char maxByte = 0x7F;
f0118ae0:	c6 45 f2 7f          	movb   $0x7f,-0xe(%ebp)
	short minShort = 1<<15 ;
f0118ae4:	66 c7 45 f0 00 80    	movw   $0x8000,-0x10(%ebp)
	short maxShort = 0x7FFF;
f0118aea:	66 c7 45 ee ff 7f    	movw   $0x7fff,-0x12(%ebp)
	int minInt = 1<<31 ;
f0118af0:	c7 45 e8 00 00 00 80 	movl   $0x80000000,-0x18(%ebp)
	int maxInt = 0x7FFFFFFF;
f0118af7:	c7 45 e4 ff ff ff 7f 	movl   $0x7fffffff,-0x1c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0118afe:	e8 3b 43 ff ff       	call   f010ce3e <sys_calculate_free_frames>
f0118b03:	89 45 e0             	mov    %eax,-0x20(%ebp)

	void* ptr_allocations[20] = {0};
f0118b06:	8d 95 98 fe ff ff    	lea    -0x168(%ebp),%edx
f0118b0c:	b9 14 00 00 00       	mov    $0x14,%ecx
f0118b11:	b8 00 00 00 00       	mov    $0x0,%eax
f0118b16:	89 d7                	mov    %edx,%edi
f0118b18:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//Insufficient space
		int freeFrames = sys_calculate_free_frames() ;
f0118b1a:	e8 1f 43 ff ff       	call   f010ce3e <sys_calculate_free_frames>
f0118b1f:	89 45 dc             	mov    %eax,-0x24(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0118b22:	e8 5d bb fe ff       	call   f0104684 <pf_calculate_free_frames>
f0118b27:	89 45 d8             	mov    %eax,-0x28(%ebp)
		uint32 sizeOfKHeap = (KERNEL_HEAP_MAX - ACTUAL_START + 1) ;
f0118b2a:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f0118b31:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0118b36:	0f b6 d0             	movzbl %al,%edx
f0118b39:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0118b3c:	01 d0                	add    %edx,%eax
f0118b3e:	48                   	dec    %eax
f0118b3f:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0118b42:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0118b45:	ba 00 00 00 00       	mov    $0x0,%edx
f0118b4a:	f7 75 d4             	divl   -0x2c(%ebp)
f0118b4d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0118b50:	29 d0                	sub    %edx,%eax
f0118b52:	89 c1                	mov    %eax,%ecx
f0118b54:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0118b5b:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0118b60:	0f b6 c0             	movzbl %al,%eax
f0118b63:	c1 e0 04             	shl    $0x4,%eax
f0118b66:	89 c2                	mov    %eax,%edx
f0118b68:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0118b6b:	01 d0                	add    %edx,%eax
f0118b6d:	48                   	dec    %eax
f0118b6e:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0118b71:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0118b74:	ba 00 00 00 00       	mov    $0x0,%edx
f0118b79:	f7 75 cc             	divl   -0x34(%ebp)
f0118b7c:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0118b7f:	29 d0                	sub    %edx,%eax
f0118b81:	01 c8                	add    %ecx,%eax
f0118b83:	ba 01 b0 ff 09       	mov    $0x9ffb001,%edx
f0118b88:	29 c2                	sub    %eax,%edx
f0118b8a:	89 d0                	mov    %edx,%eax
f0118b8c:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		ptr_allocations[0] = kmalloc(sizeOfKHeap);
f0118b8f:	83 ec 0c             	sub    $0xc,%esp
f0118b92:	ff 75 c4             	pushl  -0x3c(%ebp)
f0118b95:	e8 b9 f6 fe ff       	call   f0108253 <kmalloc>
f0118b9a:	83 c4 10             	add    $0x10,%esp
f0118b9d:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
		if (ptr_allocations[0] != NULL) panic("Allocating insufficient space: should return NULL");
f0118ba3:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0118ba9:	85 c0                	test   %eax,%eax
f0118bab:	74 14                	je     f0118bc1 <test_kmalloc+0x120>
f0118bad:	83 ec 04             	sub    $0x4,%esp
f0118bb0:	68 00 9f 13 f0       	push   $0xf0139f00
f0118bb5:	6a 40                	push   $0x40
f0118bb7:	68 32 9f 13 f0       	push   $0xf0139f32
f0118bbc:	e8 ef 75 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118bc1:	e8 be ba fe ff       	call   f0104684 <pf_calculate_free_frames>
f0118bc6:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0118bc9:	74 14                	je     f0118bdf <test_kmalloc+0x13e>
f0118bcb:	83 ec 04             	sub    $0x4,%esp
f0118bce:	68 4c 9f 13 f0       	push   $0xf0139f4c
f0118bd3:	6a 41                	push   $0x41
f0118bd5:	68 32 9f 13 f0       	push   $0xf0139f32
f0118bda:	e8 d1 75 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118bdf:	e8 5a 42 ff ff       	call   f010ce3e <sys_calculate_free_frames>
f0118be4:	89 c2                	mov    %eax,%edx
f0118be6:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0118be9:	39 c2                	cmp    %eax,%edx
f0118beb:	74 14                	je     f0118c01 <test_kmalloc+0x160>
f0118bed:	83 ec 04             	sub    $0x4,%esp
f0118bf0:	68 b4 9f 13 f0       	push   $0xf0139fb4
f0118bf5:	6a 42                	push   $0x42
f0118bf7:	68 32 9f 13 f0       	push   $0xf0139f32
f0118bfc:	e8 af 75 fe ff       	call   f01001b0 <_panic>

		cprintf("\nkmalloc: current evaluation = 10%");
f0118c01:	83 ec 0c             	sub    $0xc,%esp
f0118c04:	68 f4 9f 13 f0       	push   $0xf0139ff4
f0118c09:	e8 23 82 fe ff       	call   f0100e31 <cprintf>
f0118c0e:	83 c4 10             	add    $0x10,%esp
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0118c11:	e8 28 42 ff ff       	call   f010ce3e <sys_calculate_free_frames>
f0118c16:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118c19:	e8 66 ba fe ff       	call   f0104684 <pf_calculate_free_frames>
f0118c1e:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0118c21:	83 ec 0c             	sub    $0xc,%esp
f0118c24:	68 00 fc 1f 00       	push   $0x1ffc00
f0118c29:	e8 25 f6 fe ff       	call   f0108253 <kmalloc>
f0118c2e:	83 c4 10             	add    $0x10,%esp
f0118c31:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0118c37:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0118c3d:	89 c1                	mov    %eax,%ecx
f0118c3f:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f0118c46:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0118c4b:	0f b6 d0             	movzbl %al,%edx
f0118c4e:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0118c51:	01 d0                	add    %edx,%eax
f0118c53:	48                   	dec    %eax
f0118c54:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0118c57:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0118c5a:	ba 00 00 00 00       	mov    $0x0,%edx
f0118c5f:	f7 75 c0             	divl   -0x40(%ebp)
f0118c62:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0118c65:	29 d0                	sub    %edx,%eax
f0118c67:	89 c3                	mov    %eax,%ebx
f0118c69:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f0118c70:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0118c75:	0f b6 c0             	movzbl %al,%eax
f0118c78:	c1 e0 04             	shl    $0x4,%eax
f0118c7b:	89 c2                	mov    %eax,%edx
f0118c7d:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0118c80:	01 d0                	add    %edx,%eax
f0118c82:	48                   	dec    %eax
f0118c83:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f0118c86:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0118c89:	ba 00 00 00 00       	mov    $0x0,%edx
f0118c8e:	f7 75 b8             	divl   -0x48(%ebp)
f0118c91:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0118c94:	29 d0                	sub    %edx,%eax
f0118c96:	01 d8                	add    %ebx,%eax
f0118c98:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0118c9d:	39 c1                	cmp    %eax,%ecx
f0118c9f:	74 14                	je     f0118cb5 <test_kmalloc+0x214>
f0118ca1:	83 ec 04             	sub    $0x4,%esp
f0118ca4:	68 18 a0 13 f0       	push   $0xf013a018
f0118ca9:	6a 49                	push   $0x49
f0118cab:	68 32 9f 13 f0       	push   $0xf0139f32
f0118cb0:	e8 fb 74 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118cb5:	e8 ca b9 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0118cba:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0118cbd:	74 14                	je     f0118cd3 <test_kmalloc+0x232>
f0118cbf:	83 ec 04             	sub    $0x4,%esp
f0118cc2:	68 4c 9f 13 f0       	push   $0xf0139f4c
f0118cc7:	6a 4a                	push   $0x4a
f0118cc9:	68 32 9f 13 f0       	push   $0xf0139f32
f0118cce:	e8 dd 74 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118cd3:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0118cd6:	e8 63 41 ff ff       	call   f010ce3e <sys_calculate_free_frames>
f0118cdb:	29 c3                	sub    %eax,%ebx
f0118cdd:	89 d8                	mov    %ebx,%eax
f0118cdf:	3d 00 02 00 00       	cmp    $0x200,%eax
f0118ce4:	74 14                	je     f0118cfa <test_kmalloc+0x259>
f0118ce6:	83 ec 04             	sub    $0x4,%esp
f0118ce9:	68 b4 9f 13 f0       	push   $0xf0139fb4
f0118cee:	6a 4b                	push   $0x4b
f0118cf0:	68 32 9f 13 f0       	push   $0xf0139f32
f0118cf5:	e8 b6 74 fe ff       	call   f01001b0 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0118cfa:	e8 3f 41 ff ff       	call   f010ce3e <sys_calculate_free_frames>
f0118cff:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118d02:	e8 7d b9 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0118d07:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0118d0a:	83 ec 0c             	sub    $0xc,%esp
f0118d0d:	68 00 fc 1f 00       	push   $0x1ffc00
f0118d12:	e8 3c f5 fe ff       	call   f0108253 <kmalloc>
f0118d17:	83 c4 10             	add    $0x10,%esp
f0118d1a:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0118d20:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0118d26:	89 c1                	mov    %eax,%ecx
f0118d28:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f0118d2f:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0118d34:	0f b6 d0             	movzbl %al,%edx
f0118d37:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0118d3a:	01 d0                	add    %edx,%eax
f0118d3c:	48                   	dec    %eax
f0118d3d:	89 45 ac             	mov    %eax,-0x54(%ebp)
f0118d40:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0118d43:	ba 00 00 00 00       	mov    $0x0,%edx
f0118d48:	f7 75 b0             	divl   -0x50(%ebp)
f0118d4b:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0118d4e:	29 d0                	sub    %edx,%eax
f0118d50:	89 c3                	mov    %eax,%ebx
f0118d52:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f0118d59:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0118d5e:	0f b6 c0             	movzbl %al,%eax
f0118d61:	c1 e0 04             	shl    $0x4,%eax
f0118d64:	89 c2                	mov    %eax,%edx
f0118d66:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0118d69:	01 d0                	add    %edx,%eax
f0118d6b:	48                   	dec    %eax
f0118d6c:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f0118d6f:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0118d72:	ba 00 00 00 00       	mov    $0x0,%edx
f0118d77:	f7 75 a8             	divl   -0x58(%ebp)
f0118d7a:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0118d7d:	29 d0                	sub    %edx,%eax
f0118d7f:	01 d8                	add    %ebx,%eax
f0118d81:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0118d86:	39 c1                	cmp    %eax,%ecx
f0118d88:	74 14                	je     f0118d9e <test_kmalloc+0x2fd>
f0118d8a:	83 ec 04             	sub    $0x4,%esp
f0118d8d:	68 18 a0 13 f0       	push   $0xf013a018
f0118d92:	6a 51                	push   $0x51
f0118d94:	68 32 9f 13 f0       	push   $0xf0139f32
f0118d99:	e8 12 74 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118d9e:	e8 e1 b8 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0118da3:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0118da6:	74 14                	je     f0118dbc <test_kmalloc+0x31b>
f0118da8:	83 ec 04             	sub    $0x4,%esp
f0118dab:	68 4c 9f 13 f0       	push   $0xf0139f4c
f0118db0:	6a 52                	push   $0x52
f0118db2:	68 32 9f 13 f0       	push   $0xf0139f32
f0118db7:	e8 f4 73 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118dbc:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0118dbf:	e8 7a 40 ff ff       	call   f010ce3e <sys_calculate_free_frames>
f0118dc4:	29 c3                	sub    %eax,%ebx
f0118dc6:	89 d8                	mov    %ebx,%eax
f0118dc8:	3d 00 02 00 00       	cmp    $0x200,%eax
f0118dcd:	74 14                	je     f0118de3 <test_kmalloc+0x342>
f0118dcf:	83 ec 04             	sub    $0x4,%esp
f0118dd2:	68 b4 9f 13 f0       	push   $0xf0139fb4
f0118dd7:	6a 53                	push   $0x53
f0118dd9:	68 32 9f 13 f0       	push   $0xf0139f32
f0118dde:	e8 cd 73 fe ff       	call   f01001b0 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0118de3:	e8 56 40 ff ff       	call   f010ce3e <sys_calculate_free_frames>
f0118de8:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118deb:	e8 94 b8 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0118df0:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0118df3:	83 ec 0c             	sub    $0xc,%esp
f0118df6:	68 00 08 00 00       	push   $0x800
f0118dfb:	e8 53 f4 fe ff       	call   f0108253 <kmalloc>
f0118e00:	83 c4 10             	add    $0x10,%esp
f0118e03:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0118e09:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0118e0f:	89 c1                	mov    %eax,%ecx
f0118e11:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0118e18:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0118e1d:	0f b6 d0             	movzbl %al,%edx
f0118e20:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0118e23:	01 d0                	add    %edx,%eax
f0118e25:	48                   	dec    %eax
f0118e26:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0118e29:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0118e2c:	ba 00 00 00 00       	mov    $0x0,%edx
f0118e31:	f7 75 a0             	divl   -0x60(%ebp)
f0118e34:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0118e37:	29 d0                	sub    %edx,%eax
f0118e39:	89 c3                	mov    %eax,%ebx
f0118e3b:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f0118e42:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0118e47:	0f b6 c0             	movzbl %al,%eax
f0118e4a:	c1 e0 04             	shl    $0x4,%eax
f0118e4d:	89 c2                	mov    %eax,%edx
f0118e4f:	8b 45 98             	mov    -0x68(%ebp),%eax
f0118e52:	01 d0                	add    %edx,%eax
f0118e54:	48                   	dec    %eax
f0118e55:	89 45 94             	mov    %eax,-0x6c(%ebp)
f0118e58:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0118e5b:	ba 00 00 00 00       	mov    $0x0,%edx
f0118e60:	f7 75 98             	divl   -0x68(%ebp)
f0118e63:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0118e66:	29 d0                	sub    %edx,%eax
f0118e68:	01 d8                	add    %ebx,%eax
f0118e6a:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0118e6f:	39 c1                	cmp    %eax,%ecx
f0118e71:	74 14                	je     f0118e87 <test_kmalloc+0x3e6>
f0118e73:	83 ec 04             	sub    $0x4,%esp
f0118e76:	68 18 a0 13 f0       	push   $0xf013a018
f0118e7b:	6a 59                	push   $0x59
f0118e7d:	68 32 9f 13 f0       	push   $0xf0139f32
f0118e82:	e8 29 73 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118e87:	e8 f8 b7 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0118e8c:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0118e8f:	74 14                	je     f0118ea5 <test_kmalloc+0x404>
f0118e91:	83 ec 04             	sub    $0x4,%esp
f0118e94:	68 4c 9f 13 f0       	push   $0xf0139f4c
f0118e99:	6a 5a                	push   $0x5a
f0118e9b:	68 32 9f 13 f0       	push   $0xf0139f32
f0118ea0:	e8 0b 73 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118ea5:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0118ea8:	e8 91 3f ff ff       	call   f010ce3e <sys_calculate_free_frames>
f0118ead:	29 c3                	sub    %eax,%ebx
f0118eaf:	89 d8                	mov    %ebx,%eax
f0118eb1:	83 f8 01             	cmp    $0x1,%eax
f0118eb4:	74 14                	je     f0118eca <test_kmalloc+0x429>
f0118eb6:	83 ec 04             	sub    $0x4,%esp
f0118eb9:	68 b4 9f 13 f0       	push   $0xf0139fb4
f0118ebe:	6a 5b                	push   $0x5b
f0118ec0:	68 32 9f 13 f0       	push   $0xf0139f32
f0118ec5:	e8 e6 72 fe ff       	call   f01001b0 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0118eca:	e8 6f 3f ff ff       	call   f010ce3e <sys_calculate_free_frames>
f0118ecf:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118ed2:	e8 ad b7 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0118ed7:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0118eda:	83 ec 0c             	sub    $0xc,%esp
f0118edd:	68 00 08 00 00       	push   $0x800
f0118ee2:	e8 6c f3 fe ff       	call   f0108253 <kmalloc>
f0118ee7:	83 c4 10             	add    $0x10,%esp
f0118eea:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0118ef0:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0118ef6:	89 c1                	mov    %eax,%ecx
f0118ef8:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f0118eff:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0118f04:	0f b6 d0             	movzbl %al,%edx
f0118f07:	8b 45 90             	mov    -0x70(%ebp),%eax
f0118f0a:	01 d0                	add    %edx,%eax
f0118f0c:	48                   	dec    %eax
f0118f0d:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0118f10:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0118f13:	ba 00 00 00 00       	mov    $0x0,%edx
f0118f18:	f7 75 90             	divl   -0x70(%ebp)
f0118f1b:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0118f1e:	29 d0                	sub    %edx,%eax
f0118f20:	89 c3                	mov    %eax,%ebx
f0118f22:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0118f29:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0118f2e:	0f b6 c0             	movzbl %al,%eax
f0118f31:	c1 e0 04             	shl    $0x4,%eax
f0118f34:	89 c2                	mov    %eax,%edx
f0118f36:	8b 45 88             	mov    -0x78(%ebp),%eax
f0118f39:	01 d0                	add    %edx,%eax
f0118f3b:	48                   	dec    %eax
f0118f3c:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0118f3f:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0118f42:	ba 00 00 00 00       	mov    $0x0,%edx
f0118f47:	f7 75 88             	divl   -0x78(%ebp)
f0118f4a:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0118f4d:	29 d0                	sub    %edx,%eax
f0118f4f:	01 d8                	add    %ebx,%eax
f0118f51:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0118f56:	39 c1                	cmp    %eax,%ecx
f0118f58:	74 14                	je     f0118f6e <test_kmalloc+0x4cd>
f0118f5a:	83 ec 04             	sub    $0x4,%esp
f0118f5d:	68 18 a0 13 f0       	push   $0xf013a018
f0118f62:	6a 61                	push   $0x61
f0118f64:	68 32 9f 13 f0       	push   $0xf0139f32
f0118f69:	e8 42 72 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118f6e:	e8 11 b7 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0118f73:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0118f76:	74 14                	je     f0118f8c <test_kmalloc+0x4eb>
f0118f78:	83 ec 04             	sub    $0x4,%esp
f0118f7b:	68 4c 9f 13 f0       	push   $0xf0139f4c
f0118f80:	6a 62                	push   $0x62
f0118f82:	68 32 9f 13 f0       	push   $0xf0139f32
f0118f87:	e8 24 72 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118f8c:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0118f8f:	e8 aa 3e ff ff       	call   f010ce3e <sys_calculate_free_frames>
f0118f94:	29 c3                	sub    %eax,%ebx
f0118f96:	89 d8                	mov    %ebx,%eax
f0118f98:	83 f8 01             	cmp    $0x1,%eax
f0118f9b:	74 14                	je     f0118fb1 <test_kmalloc+0x510>
f0118f9d:	83 ec 04             	sub    $0x4,%esp
f0118fa0:	68 b4 9f 13 f0       	push   $0xf0139fb4
f0118fa5:	6a 63                	push   $0x63
f0118fa7:	68 32 9f 13 f0       	push   $0xf0139f32
f0118fac:	e8 ff 71 fe ff       	call   f01001b0 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0118fb1:	e8 88 3e ff ff       	call   f010ce3e <sys_calculate_free_frames>
f0118fb6:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118fb9:	e8 c6 b6 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0118fbe:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0118fc1:	83 ec 0c             	sub    $0xc,%esp
f0118fc4:	68 00 1c 00 00       	push   $0x1c00
f0118fc9:	e8 85 f2 fe ff       	call   f0108253 <kmalloc>
f0118fce:	83 c4 10             	add    $0x10,%esp
f0118fd1:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0118fd7:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0118fdd:	89 c1                	mov    %eax,%ecx
f0118fdf:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f0118fe6:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0118feb:	0f b6 d0             	movzbl %al,%edx
f0118fee:	8b 45 80             	mov    -0x80(%ebp),%eax
f0118ff1:	01 d0                	add    %edx,%eax
f0118ff3:	48                   	dec    %eax
f0118ff4:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0118ffa:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0119000:	ba 00 00 00 00       	mov    $0x0,%edx
f0119005:	f7 75 80             	divl   -0x80(%ebp)
f0119008:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011900e:	29 d0                	sub    %edx,%eax
f0119010:	89 c3                	mov    %eax,%ebx
f0119012:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0119019:	10 00 00 
f011901c:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0119021:	0f b6 c0             	movzbl %al,%eax
f0119024:	c1 e0 04             	shl    $0x4,%eax
f0119027:	89 c2                	mov    %eax,%edx
f0119029:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011902f:	01 d0                	add    %edx,%eax
f0119031:	48                   	dec    %eax
f0119032:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0119038:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011903e:	ba 00 00 00 00       	mov    $0x0,%edx
f0119043:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f0119049:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011904f:	29 d0                	sub    %edx,%eax
f0119051:	01 d8                	add    %ebx,%eax
f0119053:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0119058:	39 c1                	cmp    %eax,%ecx
f011905a:	74 14                	je     f0119070 <test_kmalloc+0x5cf>
f011905c:	83 ec 04             	sub    $0x4,%esp
f011905f:	68 18 a0 13 f0       	push   $0xf013a018
f0119064:	6a 69                	push   $0x69
f0119066:	68 32 9f 13 f0       	push   $0xf0139f32
f011906b:	e8 40 71 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119070:	e8 0f b6 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0119075:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0119078:	74 14                	je     f011908e <test_kmalloc+0x5ed>
f011907a:	83 ec 04             	sub    $0x4,%esp
f011907d:	68 4c 9f 13 f0       	push   $0xf0139f4c
f0119082:	6a 6a                	push   $0x6a
f0119084:	68 32 9f 13 f0       	push   $0xf0139f32
f0119089:	e8 22 71 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f011908e:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0119091:	e8 a8 3d ff ff       	call   f010ce3e <sys_calculate_free_frames>
f0119096:	29 c3                	sub    %eax,%ebx
f0119098:	89 d8                	mov    %ebx,%eax
f011909a:	83 f8 02             	cmp    $0x2,%eax
f011909d:	74 14                	je     f01190b3 <test_kmalloc+0x612>
f011909f:	83 ec 04             	sub    $0x4,%esp
f01190a2:	68 b4 9f 13 f0       	push   $0xf0139fb4
f01190a7:	6a 6b                	push   $0x6b
f01190a9:	68 32 9f 13 f0       	push   $0xf0139f32
f01190ae:	e8 fd 70 fe ff       	call   f01001b0 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f01190b3:	e8 86 3d ff ff       	call   f010ce3e <sys_calculate_free_frames>
f01190b8:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01190bb:	e8 c4 b5 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01190c0:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f01190c3:	83 ec 0c             	sub    $0xc,%esp
f01190c6:	68 00 fc 2f 00       	push   $0x2ffc00
f01190cb:	e8 83 f1 fe ff       	call   f0108253 <kmalloc>
f01190d0:	83 c4 10             	add    $0x10,%esp
f01190d3:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01190d9:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f01190df:	89 c1                	mov    %eax,%ecx
f01190e1:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f01190e8:	10 00 00 
f01190eb:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f01190f0:	0f b6 d0             	movzbl %al,%edx
f01190f3:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01190f9:	01 d0                	add    %edx,%eax
f01190fb:	48                   	dec    %eax
f01190fc:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f0119102:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0119108:	ba 00 00 00 00       	mov    $0x0,%edx
f011910d:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f0119113:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0119119:	29 d0                	sub    %edx,%eax
f011911b:	89 c3                	mov    %eax,%ebx
f011911d:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0119124:	10 00 00 
f0119127:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011912c:	0f b6 c0             	movzbl %al,%eax
f011912f:	c1 e0 04             	shl    $0x4,%eax
f0119132:	89 c2                	mov    %eax,%edx
f0119134:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011913a:	01 d0                	add    %edx,%eax
f011913c:	48                   	dec    %eax
f011913d:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0119143:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0119149:	ba 00 00 00 00       	mov    $0x0,%edx
f011914e:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0119154:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011915a:	29 d0                	sub    %edx,%eax
f011915c:	01 d8                	add    %ebx,%eax
f011915e:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0119163:	39 c1                	cmp    %eax,%ecx
f0119165:	74 14                	je     f011917b <test_kmalloc+0x6da>
f0119167:	83 ec 04             	sub    $0x4,%esp
f011916a:	68 18 a0 13 f0       	push   $0xf013a018
f011916f:	6a 71                	push   $0x71
f0119171:	68 32 9f 13 f0       	push   $0xf0139f32
f0119176:	e8 35 70 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011917b:	e8 04 b5 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0119180:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0119183:	74 14                	je     f0119199 <test_kmalloc+0x6f8>
f0119185:	83 ec 04             	sub    $0x4,%esp
f0119188:	68 4c 9f 13 f0       	push   $0xf0139f4c
f011918d:	6a 72                	push   $0x72
f011918f:	68 32 9f 13 f0       	push   $0xf0139f32
f0119194:	e8 17 70 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0119199:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f011919c:	e8 9d 3c ff ff       	call   f010ce3e <sys_calculate_free_frames>
f01191a1:	29 c3                	sub    %eax,%ebx
f01191a3:	89 d8                	mov    %ebx,%eax
f01191a5:	3d 00 03 00 00       	cmp    $0x300,%eax
f01191aa:	74 14                	je     f01191c0 <test_kmalloc+0x71f>
f01191ac:	83 ec 04             	sub    $0x4,%esp
f01191af:	68 b4 9f 13 f0       	push   $0xf0139fb4
f01191b4:	6a 73                	push   $0x73
f01191b6:	68 32 9f 13 f0       	push   $0xf0139f32
f01191bb:	e8 f0 6f fe ff       	call   f01001b0 <_panic>

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f01191c0:	e8 79 3c ff ff       	call   f010ce3e <sys_calculate_free_frames>
f01191c5:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01191c8:	e8 b7 b4 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01191cd:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f01191d0:	83 ec 0c             	sub    $0xc,%esp
f01191d3:	68 00 fc 5f 00       	push   $0x5ffc00
f01191d8:	e8 76 f0 fe ff       	call   f0108253 <kmalloc>
f01191dd:	83 c4 10             	add    $0x10,%esp
f01191e0:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01191e6:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f01191ec:	89 c1                	mov    %eax,%ecx
f01191ee:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f01191f5:	10 00 00 
f01191f8:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f01191fd:	0f b6 d0             	movzbl %al,%edx
f0119200:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0119206:	01 d0                	add    %edx,%eax
f0119208:	48                   	dec    %eax
f0119209:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f011920f:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0119215:	ba 00 00 00 00       	mov    $0x0,%edx
f011921a:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f0119220:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0119226:	29 d0                	sub    %edx,%eax
f0119228:	89 c3                	mov    %eax,%ebx
f011922a:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f0119231:	10 00 00 
f0119234:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0119239:	0f b6 c0             	movzbl %al,%eax
f011923c:	c1 e0 04             	shl    $0x4,%eax
f011923f:	89 c2                	mov    %eax,%edx
f0119241:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0119247:	01 d0                	add    %edx,%eax
f0119249:	48                   	dec    %eax
f011924a:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f0119250:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0119256:	ba 00 00 00 00       	mov    $0x0,%edx
f011925b:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f0119261:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0119267:	29 d0                	sub    %edx,%eax
f0119269:	01 d8                	add    %ebx,%eax
f011926b:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0119270:	39 c1                	cmp    %eax,%ecx
f0119272:	74 14                	je     f0119288 <test_kmalloc+0x7e7>
f0119274:	83 ec 04             	sub    $0x4,%esp
f0119277:	68 18 a0 13 f0       	push   $0xf013a018
f011927c:	6a 79                	push   $0x79
f011927e:	68 32 9f 13 f0       	push   $0xf0139f32
f0119283:	e8 28 6f fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119288:	e8 f7 b3 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011928d:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0119290:	74 14                	je     f01192a6 <test_kmalloc+0x805>
f0119292:	83 ec 04             	sub    $0x4,%esp
f0119295:	68 4c 9f 13 f0       	push   $0xf0139f4c
f011929a:	6a 7a                	push   $0x7a
f011929c:	68 32 9f 13 f0       	push   $0xf0139f32
f01192a1:	e8 0a 6f fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f01192a6:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01192a9:	e8 90 3b ff ff       	call   f010ce3e <sys_calculate_free_frames>
f01192ae:	29 c3                	sub    %eax,%ebx
f01192b0:	89 d8                	mov    %ebx,%eax
f01192b2:	3d 00 06 00 00       	cmp    $0x600,%eax
f01192b7:	74 14                	je     f01192cd <test_kmalloc+0x82c>
f01192b9:	83 ec 04             	sub    $0x4,%esp
f01192bc:	68 b4 9f 13 f0       	push   $0xf0139fb4
f01192c1:	6a 7b                	push   $0x7b
f01192c3:	68 32 9f 13 f0       	push   $0xf0139f32
f01192c8:	e8 e3 6e fe ff       	call   f01001b0 <_panic>

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f01192cd:	e8 6c 3b ff ff       	call   f010ce3e <sys_calculate_free_frames>
f01192d2:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01192d5:	e8 aa b3 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01192da:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f01192dd:	83 ec 0c             	sub    $0xc,%esp
f01192e0:	68 00 38 00 00       	push   $0x3800
f01192e5:	e8 69 ef fe ff       	call   f0108253 <kmalloc>
f01192ea:	83 c4 10             	add    $0x10,%esp
f01192ed:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01192f3:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f01192f9:	89 c1                	mov    %eax,%ecx
f01192fb:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f0119302:	10 00 00 
f0119305:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011930a:	0f b6 d0             	movzbl %al,%edx
f011930d:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0119313:	01 d0                	add    %edx,%eax
f0119315:	48                   	dec    %eax
f0119316:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f011931c:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0119322:	ba 00 00 00 00       	mov    $0x0,%edx
f0119327:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f011932d:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0119333:	29 d0                	sub    %edx,%eax
f0119335:	89 c3                	mov    %eax,%ebx
f0119337:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f011933e:	10 00 00 
f0119341:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0119346:	0f b6 c0             	movzbl %al,%eax
f0119349:	c1 e0 04             	shl    $0x4,%eax
f011934c:	89 c2                	mov    %eax,%edx
f011934e:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0119354:	01 d0                	add    %edx,%eax
f0119356:	48                   	dec    %eax
f0119357:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f011935d:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0119363:	ba 00 00 00 00       	mov    $0x0,%edx
f0119368:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f011936e:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0119374:	29 d0                	sub    %edx,%eax
f0119376:	01 d8                	add    %ebx,%eax
f0119378:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f011937d:	39 c1                	cmp    %eax,%ecx
f011937f:	74 17                	je     f0119398 <test_kmalloc+0x8f7>
f0119381:	83 ec 04             	sub    $0x4,%esp
f0119384:	68 18 a0 13 f0       	push   $0xf013a018
f0119389:	68 81 00 00 00       	push   $0x81
f011938e:	68 32 9f 13 f0       	push   $0xf0139f32
f0119393:	e8 18 6e fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119398:	e8 e7 b2 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011939d:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01193a0:	74 17                	je     f01193b9 <test_kmalloc+0x918>
f01193a2:	83 ec 04             	sub    $0x4,%esp
f01193a5:	68 4c 9f 13 f0       	push   $0xf0139f4c
f01193aa:	68 82 00 00 00       	push   $0x82
f01193af:	68 32 9f 13 f0       	push   $0xf0139f32
f01193b4:	e8 f7 6d fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f01193b9:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01193bc:	e8 7d 3a ff ff       	call   f010ce3e <sys_calculate_free_frames>
f01193c1:	29 c3                	sub    %eax,%ebx
f01193c3:	89 d8                	mov    %ebx,%eax
f01193c5:	83 f8 04             	cmp    $0x4,%eax
f01193c8:	74 17                	je     f01193e1 <test_kmalloc+0x940>
f01193ca:	83 ec 04             	sub    $0x4,%esp
f01193cd:	68 b4 9f 13 f0       	push   $0xf0139fb4
f01193d2:	68 83 00 00 00       	push   $0x83
f01193d7:	68 32 9f 13 f0       	push   $0xf0139f32
f01193dc:	e8 cf 6d fe ff       	call   f01001b0 <_panic>

		cprintf("\b\b\b50%");
f01193e1:	83 ec 0c             	sub    $0xc,%esp
f01193e4:	68 7e a0 13 f0       	push   $0xf013a07e
f01193e9:	e8 43 7a fe ff       	call   f0100e31 <cprintf>
f01193ee:	83 c4 10             	add    $0x10,%esp
		//Checking read/write on the allocated spaces
		{
			freeFrames = sys_calculate_free_frames() ;
f01193f1:	e8 48 3a ff ff       	call   f010ce3e <sys_calculate_free_frames>
f01193f6:	89 45 dc             	mov    %eax,-0x24(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f01193f9:	e8 86 b2 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01193fe:	89 45 d8             	mov    %eax,-0x28(%ebp)

			//Write values
			//In 1st 2 MB
			lastIndexOfByte = (2*Mega-kilo)/sizeof(char) - 1;
f0119401:	c7 85 40 ff ff ff ff 	movl   $0x1ffbff,-0xc0(%ebp)
f0119408:	fb 1f 00 
			byteArr = (char *) ptr_allocations[0];
f011940b:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0119411:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
			byteArr[0] = minByte ;
f0119417:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011941d:	8a 55 f3             	mov    -0xd(%ebp),%dl
f0119420:	88 10                	mov    %dl,(%eax)
			byteArr[lastIndexOfByte] = maxByte ;
f0119422:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f0119428:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011942e:	01 c2                	add    %eax,%edx
f0119430:	8a 45 f2             	mov    -0xe(%ebp),%al
f0119433:	88 02                	mov    %al,(%edx)

			//In 2nd 2 MB
			shortArr = (short *) ptr_allocations[1];
f0119435:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f011943b:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
			lastIndexOfShort = (2*Mega-kilo)/sizeof(short) - 1;
f0119441:	c7 85 34 ff ff ff ff 	movl   $0xffdff,-0xcc(%ebp)
f0119448:	fd 0f 00 
			shortArr[0] = minShort;
f011944b:	8b 95 38 ff ff ff    	mov    -0xc8(%ebp),%edx
f0119451:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0119454:	66 89 02             	mov    %ax,(%edx)
			shortArr[lastIndexOfShort] = maxShort;
f0119457:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011945d:	01 c0                	add    %eax,%eax
f011945f:	89 c2                	mov    %eax,%edx
f0119461:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0119467:	01 c2                	add    %eax,%edx
f0119469:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f011946d:	66 89 02             	mov    %ax,(%edx)

			//In next 2 KB
			intArr = (int *) ptr_allocations[2];
f0119470:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0119476:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
			lastIndexOfInt = (2*kilo)/sizeof(int) - 1;
f011947c:	c7 85 2c ff ff ff ff 	movl   $0x1ff,-0xd4(%ebp)
f0119483:	01 00 00 
			intArr[0] = minInt;
f0119486:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011948c:	8b 55 e8             	mov    -0x18(%ebp),%edx
f011948f:	89 10                	mov    %edx,(%eax)
			intArr[lastIndexOfInt] = maxInt;
f0119491:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0119497:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011949e:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01194a4:	01 c2                	add    %eax,%edx
f01194a6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01194a9:	89 02                	mov    %eax,(%edx)

			//In 7 KB
			structArr = (struct MyStruct *) ptr_allocations[4];
f01194ab:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f01194b1:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
			lastIndexOfStruct = (7*kilo)/sizeof(struct MyStruct) - 1;
f01194b7:	c7 85 24 ff ff ff 7f 	movl   $0x37f,-0xdc(%ebp)
f01194be:	03 00 00 
			structArr[0].a = minByte; structArr[0].b = minShort; structArr[0].c = minInt;
f01194c1:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01194c7:	8a 55 f3             	mov    -0xd(%ebp),%dl
f01194ca:	88 10                	mov    %dl,(%eax)
f01194cc:	8b 95 28 ff ff ff    	mov    -0xd8(%ebp),%edx
f01194d2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01194d5:	66 89 42 02          	mov    %ax,0x2(%edx)
f01194d9:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01194df:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01194e2:	89 50 04             	mov    %edx,0x4(%eax)
			structArr[lastIndexOfStruct].a = maxByte; structArr[lastIndexOfStruct].b = maxShort; structArr[lastIndexOfStruct].c = maxInt;
f01194e5:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01194eb:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f01194f2:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01194f8:	01 c2                	add    %eax,%edx
f01194fa:	8a 45 f2             	mov    -0xe(%ebp),%al
f01194fd:	88 02                	mov    %al,(%edx)
f01194ff:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0119505:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f011950c:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0119512:	01 c2                	add    %eax,%edx
f0119514:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f0119518:	66 89 42 02          	mov    %ax,0x2(%edx)
f011951c:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0119522:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0119529:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011952f:	01 c2                	add    %eax,%edx
f0119531:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0119534:	89 42 04             	mov    %eax,0x4(%edx)

			//In 6 MB
			lastIndexOfByte2 = (6*Mega-kilo)/sizeof(char) - 1;
f0119537:	c7 85 20 ff ff ff ff 	movl   $0x5ffbff,-0xe0(%ebp)
f011953e:	fb 5f 00 
			byteArr2 = (char *) ptr_allocations[6];
f0119541:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0119547:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
			byteArr2[0] = minByte ;
f011954d:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0119553:	8a 55 f3             	mov    -0xd(%ebp),%dl
f0119556:	88 10                	mov    %dl,(%eax)
			byteArr2[lastIndexOfByte2 / 2] = maxByte / 2;
f0119558:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011955e:	89 c2                	mov    %eax,%edx
f0119560:	c1 ea 1f             	shr    $0x1f,%edx
f0119563:	01 d0                	add    %edx,%eax
f0119565:	d1 f8                	sar    %eax
f0119567:	89 c2                	mov    %eax,%edx
f0119569:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011956f:	01 c2                	add    %eax,%edx
f0119571:	8a 45 f2             	mov    -0xe(%ebp),%al
f0119574:	88 c1                	mov    %al,%cl
f0119576:	c0 e9 07             	shr    $0x7,%cl
f0119579:	01 c8                	add    %ecx,%eax
f011957b:	d0 f8                	sar    %al
f011957d:	88 02                	mov    %al,(%edx)
			byteArr2[lastIndexOfByte2] = maxByte ;
f011957f:	8b 95 20 ff ff ff    	mov    -0xe0(%ebp),%edx
f0119585:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011958b:	01 c2                	add    %eax,%edx
f011958d:	8a 45 f2             	mov    -0xe(%ebp),%al
f0119590:	88 02                	mov    %al,(%edx)

			//In 14 KB
			shortArr2 = (short *) ptr_allocations[7];
f0119592:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0119598:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
			lastIndexOfShort2 = (14*kilo)/sizeof(short) - 1;
f011959e:	c7 85 14 ff ff ff ff 	movl   $0x1bff,-0xec(%ebp)
f01195a5:	1b 00 00 
			shortArr2[0] = minShort;
f01195a8:	8b 95 18 ff ff ff    	mov    -0xe8(%ebp),%edx
f01195ae:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01195b1:	66 89 02             	mov    %ax,(%edx)
			shortArr2[lastIndexOfShort2] = maxShort;
f01195b4:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f01195ba:	01 c0                	add    %eax,%eax
f01195bc:	89 c2                	mov    %eax,%edx
f01195be:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f01195c4:	01 c2                	add    %eax,%edx
f01195c6:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f01195ca:	66 89 02             	mov    %ax,(%edx)

			//Read values: check that the values are successfully written
			if (byteArr[0] 	!= minByte 	|| byteArr[lastIndexOfByte] 	!= maxByte) panic("Wrong allocation: stored values are wrongly changed!");
f01195cd:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01195d3:	8a 00                	mov    (%eax),%al
f01195d5:	3a 45 f3             	cmp    -0xd(%ebp),%al
f01195d8:	75 15                	jne    f01195ef <test_kmalloc+0xb4e>
f01195da:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f01195e0:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01195e6:	01 d0                	add    %edx,%eax
f01195e8:	8a 00                	mov    (%eax),%al
f01195ea:	3a 45 f2             	cmp    -0xe(%ebp),%al
f01195ed:	74 17                	je     f0119606 <test_kmalloc+0xb65>
f01195ef:	83 ec 04             	sub    $0x4,%esp
f01195f2:	68 88 a0 13 f0       	push   $0xf013a088
f01195f7:	68 b2 00 00 00       	push   $0xb2
f01195fc:	68 32 9f 13 f0       	push   $0xf0139f32
f0119601:	e8 aa 6b fe ff       	call   f01001b0 <_panic>
			if (shortArr[0] != minShort || shortArr[lastIndexOfShort] 	!= maxShort) panic("Wrong allocation: stored values are wrongly changed!");
f0119606:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011960c:	66 8b 00             	mov    (%eax),%ax
f011960f:	66 3b 45 f0          	cmp    -0x10(%ebp),%ax
f0119613:	75 1b                	jne    f0119630 <test_kmalloc+0xb8f>
f0119615:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011961b:	01 c0                	add    %eax,%eax
f011961d:	89 c2                	mov    %eax,%edx
f011961f:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0119625:	01 d0                	add    %edx,%eax
f0119627:	66 8b 00             	mov    (%eax),%ax
f011962a:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f011962e:	74 17                	je     f0119647 <test_kmalloc+0xba6>
f0119630:	83 ec 04             	sub    $0x4,%esp
f0119633:	68 88 a0 13 f0       	push   $0xf013a088
f0119638:	68 b3 00 00 00       	push   $0xb3
f011963d:	68 32 9f 13 f0       	push   $0xf0139f32
f0119642:	e8 69 6b fe ff       	call   f01001b0 <_panic>
			if (intArr[0] 	!= minInt 	|| intArr[lastIndexOfInt] 		!= maxInt) panic("Wrong allocation: stored values are wrongly changed!");
f0119647:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011964d:	8b 00                	mov    (%eax),%eax
f011964f:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0119652:	75 1c                	jne    f0119670 <test_kmalloc+0xbcf>
f0119654:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011965a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0119661:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0119667:	01 d0                	add    %edx,%eax
f0119669:	8b 00                	mov    (%eax),%eax
f011966b:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f011966e:	74 17                	je     f0119687 <test_kmalloc+0xbe6>
f0119670:	83 ec 04             	sub    $0x4,%esp
f0119673:	68 88 a0 13 f0       	push   $0xf013a088
f0119678:	68 b4 00 00 00       	push   $0xb4
f011967d:	68 32 9f 13 f0       	push   $0xf0139f32
f0119682:	e8 29 6b fe ff       	call   f01001b0 <_panic>

			if (structArr[0].a != minByte 	|| structArr[lastIndexOfStruct].a != maxByte) 	panic("Wrong allocation: stored values are wrongly changed!");
f0119687:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011968d:	8a 00                	mov    (%eax),%al
f011968f:	3a 45 f3             	cmp    -0xd(%ebp),%al
f0119692:	75 1c                	jne    f01196b0 <test_kmalloc+0xc0f>
f0119694:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011969a:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f01196a1:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01196a7:	01 d0                	add    %edx,%eax
f01196a9:	8a 00                	mov    (%eax),%al
f01196ab:	3a 45 f2             	cmp    -0xe(%ebp),%al
f01196ae:	74 17                	je     f01196c7 <test_kmalloc+0xc26>
f01196b0:	83 ec 04             	sub    $0x4,%esp
f01196b3:	68 88 a0 13 f0       	push   $0xf013a088
f01196b8:	68 b6 00 00 00       	push   $0xb6
f01196bd:	68 32 9f 13 f0       	push   $0xf0139f32
f01196c2:	e8 e9 6a fe ff       	call   f01001b0 <_panic>
			if (structArr[0].b != minShort 	|| structArr[lastIndexOfStruct].b != maxShort) 	panic("Wrong allocation: stored values are wrongly changed!");
f01196c7:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01196cd:	66 8b 40 02          	mov    0x2(%eax),%ax
f01196d1:	66 3b 45 f0          	cmp    -0x10(%ebp),%ax
f01196d5:	75 1f                	jne    f01196f6 <test_kmalloc+0xc55>
f01196d7:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01196dd:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f01196e4:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01196ea:	01 d0                	add    %edx,%eax
f01196ec:	66 8b 40 02          	mov    0x2(%eax),%ax
f01196f0:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f01196f4:	74 17                	je     f011970d <test_kmalloc+0xc6c>
f01196f6:	83 ec 04             	sub    $0x4,%esp
f01196f9:	68 88 a0 13 f0       	push   $0xf013a088
f01196fe:	68 b7 00 00 00       	push   $0xb7
f0119703:	68 32 9f 13 f0       	push   $0xf0139f32
f0119708:	e8 a3 6a fe ff       	call   f01001b0 <_panic>
			if (structArr[0].c != minInt 	|| structArr[lastIndexOfStruct].c != maxInt) 	panic("Wrong allocation: stored values are wrongly changed!");
f011970d:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0119713:	8b 40 04             	mov    0x4(%eax),%eax
f0119716:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0119719:	75 1d                	jne    f0119738 <test_kmalloc+0xc97>
f011971b:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0119721:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0119728:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011972e:	01 d0                	add    %edx,%eax
f0119730:	8b 40 04             	mov    0x4(%eax),%eax
f0119733:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0119736:	74 17                	je     f011974f <test_kmalloc+0xcae>
f0119738:	83 ec 04             	sub    $0x4,%esp
f011973b:	68 88 a0 13 f0       	push   $0xf013a088
f0119740:	68 b8 00 00 00       	push   $0xb8
f0119745:	68 32 9f 13 f0       	push   $0xf0139f32
f011974a:	e8 61 6a fe ff       	call   f01001b0 <_panic>

			if (byteArr2[0] != minByte || byteArr2[lastIndexOfByte2/2] != maxByte/2 || byteArr2[lastIndexOfByte2] != maxByte) panic("Wrong allocation: stored values are wrongly changed!");
f011974f:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0119755:	8a 00                	mov    (%eax),%al
f0119757:	3a 45 f3             	cmp    -0xd(%ebp),%al
f011975a:	75 40                	jne    f011979c <test_kmalloc+0xcfb>
f011975c:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0119762:	89 c2                	mov    %eax,%edx
f0119764:	c1 ea 1f             	shr    $0x1f,%edx
f0119767:	01 d0                	add    %edx,%eax
f0119769:	d1 f8                	sar    %eax
f011976b:	89 c2                	mov    %eax,%edx
f011976d:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0119773:	01 d0                	add    %edx,%eax
f0119775:	8a 10                	mov    (%eax),%dl
f0119777:	8a 45 f2             	mov    -0xe(%ebp),%al
f011977a:	88 c1                	mov    %al,%cl
f011977c:	c0 e9 07             	shr    $0x7,%cl
f011977f:	01 c8                	add    %ecx,%eax
f0119781:	d0 f8                	sar    %al
f0119783:	38 c2                	cmp    %al,%dl
f0119785:	75 15                	jne    f011979c <test_kmalloc+0xcfb>
f0119787:	8b 95 20 ff ff ff    	mov    -0xe0(%ebp),%edx
f011978d:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0119793:	01 d0                	add    %edx,%eax
f0119795:	8a 00                	mov    (%eax),%al
f0119797:	3a 45 f2             	cmp    -0xe(%ebp),%al
f011979a:	74 17                	je     f01197b3 <test_kmalloc+0xd12>
f011979c:	83 ec 04             	sub    $0x4,%esp
f011979f:	68 88 a0 13 f0       	push   $0xf013a088
f01197a4:	68 ba 00 00 00       	push   $0xba
f01197a9:	68 32 9f 13 f0       	push   $0xf0139f32
f01197ae:	e8 fd 69 fe ff       	call   f01001b0 <_panic>
			if (shortArr2[0] != minShort || shortArr2[lastIndexOfShort2] != maxShort) panic("Wrong allocation: stored values are wrongly changed!");
f01197b3:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f01197b9:	66 8b 00             	mov    (%eax),%ax
f01197bc:	66 3b 45 f0          	cmp    -0x10(%ebp),%ax
f01197c0:	75 1b                	jne    f01197dd <test_kmalloc+0xd3c>
f01197c2:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f01197c8:	01 c0                	add    %eax,%eax
f01197ca:	89 c2                	mov    %eax,%edx
f01197cc:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f01197d2:	01 d0                	add    %edx,%eax
f01197d4:	66 8b 00             	mov    (%eax),%ax
f01197d7:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f01197db:	74 17                	je     f01197f4 <test_kmalloc+0xd53>
f01197dd:	83 ec 04             	sub    $0x4,%esp
f01197e0:	68 88 a0 13 f0       	push   $0xf013a088
f01197e5:	68 bb 00 00 00       	push   $0xbb
f01197ea:	68 32 9f 13 f0       	push   $0xf0139f32
f01197ef:	e8 bc 69 fe ff       	call   f01001b0 <_panic>

			if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation: pages are not loaded successfully into memory");
f01197f4:	e8 45 36 ff ff       	call   f010ce3e <sys_calculate_free_frames>
f01197f9:	89 c2                	mov    %eax,%edx
f01197fb:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01197fe:	39 c2                	cmp    %eax,%edx
f0119800:	74 17                	je     f0119819 <test_kmalloc+0xd78>
f0119802:	83 ec 04             	sub    $0x4,%esp
f0119805:	68 b4 9f 13 f0       	push   $0xf0139fb4
f011980a:	68 bd 00 00 00       	push   $0xbd
f011980f:	68 32 9f 13 f0       	push   $0xf0139f32
f0119814:	e8 97 69 fe ff       	call   f01001b0 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119819:	e8 66 ae fe ff       	call   f0104684 <pf_calculate_free_frames>
f011981e:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0119821:	74 17                	je     f011983a <test_kmalloc+0xd99>
f0119823:	83 ec 04             	sub    $0x4,%esp
f0119826:	68 4c 9f 13 f0       	push   $0xf0139f4c
f011982b:	68 be 00 00 00       	push   $0xbe
f0119830:	68 32 9f 13 f0       	push   $0xf0139f32
f0119835:	e8 76 69 fe ff       	call   f01001b0 <_panic>
		}

		cprintf("\b\b\b80%");
f011983a:	83 ec 0c             	sub    $0xc,%esp
f011983d:	68 bd a0 13 f0       	push   $0xf013a0bd
f0119842:	e8 ea 75 fe ff       	call   f0100e31 <cprintf>
f0119847:	83 c4 10             	add    $0x10,%esp

		//Insufficient space again
		freeFrames = sys_calculate_free_frames() ;
f011984a:	e8 ef 35 ff ff       	call   f010ce3e <sys_calculate_free_frames>
f011984f:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0119852:	e8 2d ae fe ff       	call   f0104684 <pf_calculate_free_frames>
f0119857:	89 45 d8             	mov    %eax,-0x28(%ebp)
		uint32 restOfKHeap = (KERNEL_HEAP_MAX - ACTUAL_START + 2*PAGE_SIZE) - (2*Mega+2*Mega+4*kilo+4*kilo+8*kilo+3*Mega+6*Mega+16*kilo) ;
f011985a:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f0119861:	10 00 00 
f0119864:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0119869:	0f b6 d0             	movzbl %al,%edx
f011986c:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0119872:	01 d0                	add    %edx,%eax
f0119874:	48                   	dec    %eax
f0119875:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f011987b:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0119881:	ba 00 00 00 00       	mov    $0x0,%edx
f0119886:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f011988c:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0119892:	29 d0                	sub    %edx,%eax
f0119894:	89 c1                	mov    %eax,%ecx
f0119896:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f011989d:	10 00 00 
f01198a0:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f01198a5:	0f b6 c0             	movzbl %al,%eax
f01198a8:	c1 e0 04             	shl    $0x4,%eax
f01198ab:	89 c2                	mov    %eax,%edx
f01198ad:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f01198b3:	01 d0                	add    %edx,%eax
f01198b5:	48                   	dec    %eax
f01198b6:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f01198bc:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01198c2:	ba 00 00 00 00       	mov    $0x0,%edx
f01198c7:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f01198cd:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01198d3:	29 d0                	sub    %edx,%eax
f01198d5:	01 c8                	add    %ecx,%eax
f01198d7:	ba 00 50 2f 09       	mov    $0x92f5000,%edx
f01198dc:	29 c2                	sub    %eax,%edx
f01198de:	89 d0                	mov    %edx,%eax
f01198e0:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		ptr_allocations[8] = kmalloc(restOfKHeap);
f01198e6:	83 ec 0c             	sub    $0xc,%esp
f01198e9:	ff b5 00 ff ff ff    	pushl  -0x100(%ebp)
f01198ef:	e8 5f e9 fe ff       	call   f0108253 <kmalloc>
f01198f4:	83 c4 10             	add    $0x10,%esp
f01198f7:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
		if (ptr_allocations[8] != NULL) panic("Allocating insufficient space: should return NULL");
f01198fd:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0119903:	85 c0                	test   %eax,%eax
f0119905:	74 17                	je     f011991e <test_kmalloc+0xe7d>
f0119907:	83 ec 04             	sub    $0x4,%esp
f011990a:	68 00 9f 13 f0       	push   $0xf0139f00
f011990f:	68 c8 00 00 00       	push   $0xc8
f0119914:	68 32 9f 13 f0       	push   $0xf0139f32
f0119919:	e8 92 68 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011991e:	e8 61 ad fe ff       	call   f0104684 <pf_calculate_free_frames>
f0119923:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0119926:	74 17                	je     f011993f <test_kmalloc+0xe9e>
f0119928:	83 ec 04             	sub    $0x4,%esp
f011992b:	68 4c 9f 13 f0       	push   $0xf0139f4c
f0119930:	68 c9 00 00 00       	push   $0xc9
f0119935:	68 32 9f 13 f0       	push   $0xf0139f32
f011993a:	e8 71 68 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation: pages are not loaded successfully into memory");
f011993f:	e8 fa 34 ff ff       	call   f010ce3e <sys_calculate_free_frames>
f0119944:	89 c2                	mov    %eax,%edx
f0119946:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0119949:	39 c2                	cmp    %eax,%edx
f011994b:	74 17                	je     f0119964 <test_kmalloc+0xec3>
f011994d:	83 ec 04             	sub    $0x4,%esp
f0119950:	68 b4 9f 13 f0       	push   $0xf0139fb4
f0119955:	68 ca 00 00 00       	push   $0xca
f011995a:	68 32 9f 13 f0       	push   $0xf0139f32
f011995f:	e8 4c 68 fe ff       	call   f01001b0 <_panic>

		cprintf("\b\b\b90%");
f0119964:	83 ec 0c             	sub    $0xc,%esp
f0119967:	68 c4 a0 13 f0       	push   $0xf013a0c4
f011996c:	e8 c0 74 fe ff       	call   f0100e31 <cprintf>
f0119971:	83 c4 10             	add    $0x10,%esp

		//permissions
		uint32 lastAllocAddress = (uint32)ptr_allocations[7] + 16*kilo ;
f0119974:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011997a:	05 00 40 00 00       	add    $0x4000,%eax
f011997f:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
		uint32 va;
		for (va = ACTUAL_START; va < lastAllocAddress; va+=PAGE_SIZE)
f0119985:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f011998c:	10 00 00 
f011998f:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0119994:	0f b6 d0             	movzbl %al,%edx
f0119997:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011999d:	01 d0                	add    %edx,%eax
f011999f:	48                   	dec    %eax
f01199a0:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f01199a6:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f01199ac:	ba 00 00 00 00       	mov    $0x0,%edx
f01199b1:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f01199b7:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f01199bd:	29 d0                	sub    %edx,%eax
f01199bf:	89 c1                	mov    %eax,%ecx
f01199c1:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f01199c8:	10 00 00 
f01199cb:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f01199d0:	0f b6 c0             	movzbl %al,%eax
f01199d3:	c1 e0 04             	shl    $0x4,%eax
f01199d6:	89 c2                	mov    %eax,%edx
f01199d8:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f01199de:	01 d0                	add    %edx,%eax
f01199e0:	48                   	dec    %eax
f01199e1:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f01199e7:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f01199ed:	ba 00 00 00 00       	mov    $0x0,%edx
f01199f2:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f01199f8:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f01199fe:	29 d0                	sub    %edx,%eax
f0119a00:	01 c8                	add    %ecx,%eax
f0119a02:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0119a07:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0119a0a:	eb 6a                	jmp    f0119a76 <test_kmalloc+0xfd5>
		{
			unsigned int * table;
			get_page_table(ptr_page_directory, va, &table);
f0119a0c:	a1 30 ce 2b f0       	mov    0xf02bce30,%eax
f0119a11:	83 ec 04             	sub    $0x4,%esp
f0119a14:	8d 95 94 fe ff ff    	lea    -0x16c(%ebp),%edx
f0119a1a:	52                   	push   %edx
f0119a1b:	ff 75 f4             	pushl  -0xc(%ebp)
f0119a1e:	50                   	push   %eax
f0119a1f:	e8 c3 da fe ff       	call   f01074e7 <get_page_table>
f0119a24:	83 c4 10             	add    $0x10,%esp
			uint32 perm = table[PTX(va)] & 0xFFF;
f0119a27:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0119a2d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0119a30:	c1 ea 0c             	shr    $0xc,%edx
f0119a33:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0119a39:	c1 e2 02             	shl    $0x2,%edx
f0119a3c:	01 d0                	add    %edx,%eax
f0119a3e:	8b 00                	mov    (%eax),%eax
f0119a40:	25 ff 0f 00 00       	and    $0xfff,%eax
f0119a45:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
			if ((perm & PERM_USER) == PERM_USER)
f0119a4b:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0119a51:	83 e0 04             	and    $0x4,%eax
f0119a54:	85 c0                	test   %eax,%eax
f0119a56:	74 17                	je     f0119a6f <test_kmalloc+0xfce>
				panic("Wrong permissions: pages should be mapped with Supervisor permission only");
f0119a58:	83 ec 04             	sub    $0x4,%esp
f0119a5b:	68 cc a0 13 f0       	push   $0xf013a0cc
f0119a60:	68 d7 00 00 00       	push   $0xd7
f0119a65:	68 32 9f 13 f0       	push   $0xf0139f32
f0119a6a:	e8 41 67 fe ff       	call   f01001b0 <_panic>
		cprintf("\b\b\b90%");

		//permissions
		uint32 lastAllocAddress = (uint32)ptr_allocations[7] + 16*kilo ;
		uint32 va;
		for (va = ACTUAL_START; va < lastAllocAddress; va+=PAGE_SIZE)
f0119a6f:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0119a76:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0119a79:	3b 85 fc fe ff ff    	cmp    -0x104(%ebp),%eax
f0119a7f:	72 8b                	jb     f0119a0c <test_kmalloc+0xf6b>
			uint32 perm = table[PTX(va)] & 0xFFF;
			if ((perm & PERM_USER) == PERM_USER)
				panic("Wrong permissions: pages should be mapped with Supervisor permission only");
		}

		cprintf("\b\b\b100%\n");
f0119a81:	83 ec 0c             	sub    $0xc,%esp
f0119a84:	68 16 a1 13 f0       	push   $0xf013a116
f0119a89:	e8 a3 73 fe ff       	call   f0100e31 <cprintf>
f0119a8e:	83 c4 10             	add    $0x10,%esp

	}

	cprintf("\nCongratulations!! test kmalloc completed successfully.\n");
f0119a91:	83 ec 0c             	sub    $0xc,%esp
f0119a94:	68 20 a1 13 f0       	push   $0xf013a120
f0119a99:	e8 93 73 fe ff       	call   f0100e31 <cprintf>
f0119a9e:	83 c4 10             	add    $0x10,%esp

	return 1;
f0119aa1:	b8 01 00 00 00       	mov    $0x1,%eax

}
f0119aa6:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0119aa9:	5b                   	pop    %ebx
f0119aaa:	5f                   	pop    %edi
f0119aab:	5d                   	pop    %ebp
f0119aac:	c3                   	ret    

f0119aad <test_kmalloc_nextfit>:

int test_kmalloc_nextfit()
{
f0119aad:	55                   	push   %ebp
f0119aae:	89 e5                	mov    %esp,%ebp
f0119ab0:	57                   	push   %edi
f0119ab1:	53                   	push   %ebx
f0119ab2:	81 ec d0 03 00 00    	sub    $0x3d0,%esp
	cprintf("==============================================\n");
f0119ab8:	83 ec 0c             	sub    $0xc,%esp
f0119abb:	68 74 9e 13 f0       	push   $0xf0139e74
f0119ac0:	e8 6c 73 fe ff       	call   f0100e31 <cprintf>
f0119ac5:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0119ac8:	83 ec 0c             	sub    $0xc,%esp
f0119acb:	68 a4 9e 13 f0       	push   $0xf0139ea4
f0119ad0:	e8 5c 73 fe ff       	call   f0100e31 <cprintf>
f0119ad5:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0119ad8:	83 ec 0c             	sub    $0xc,%esp
f0119adb:	68 74 9e 13 f0       	push   $0xf0139e74
f0119ae0:	e8 4c 73 fe ff       	call   f0100e31 <cprintf>
f0119ae5:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[160] = {0};
f0119ae8:	8d 95 28 fc ff ff    	lea    -0x3d8(%ebp),%edx
f0119aee:	b9 a0 00 00 00       	mov    $0xa0,%ecx
f0119af3:	b8 00 00 00 00       	mov    $0x0,%eax
f0119af8:	89 d7                	mov    %edx,%edi
f0119afa:	f3 ab                	rep stos %eax,%es:(%edi)
	cprintf("This test has THREE cases. A pass message will be displayed after each one.\n");
f0119afc:	83 ec 0c             	sub    $0xc,%esp
f0119aff:	68 5c a1 13 f0       	push   $0xf013a15c
f0119b04:	e8 28 73 fe ff       	call   f0100e31 <cprintf>
f0119b09:	83 c4 10             	add    $0x10,%esp

	// allocate pages
	int freeFrames = sys_calculate_free_frames() ;
f0119b0c:	e8 2d 33 ff ff       	call   f010ce3e <sys_calculate_free_frames>
f0119b11:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int freeDiskFrames = pf_calculate_free_frames() ;
f0119b14:	e8 6b ab fe ff       	call   f0104684 <pf_calculate_free_frames>
f0119b19:	89 45 ec             	mov    %eax,-0x14(%ebp)

	int i;
	//ptr_allocations[0] = kmalloc(2*Mega - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);
	for(i = 0; i< 79 ;i++)
f0119b1c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0119b23:	eb 1f                	jmp    f0119b44 <test_kmalloc_nextfit+0x97>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
f0119b25:	83 ec 0c             	sub    $0xc,%esp
f0119b28:	68 00 00 20 00       	push   $0x200000
f0119b2d:	e8 21 e7 fe ff       	call   f0108253 <kmalloc>
f0119b32:	83 c4 10             	add    $0x10,%esp
f0119b35:	89 c2                	mov    %eax,%edx
f0119b37:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0119b3a:	89 94 85 28 fc ff ff 	mov    %edx,-0x3d8(%ebp,%eax,4)
	int freeFrames = sys_calculate_free_frames() ;
	int freeDiskFrames = pf_calculate_free_frames() ;

	int i;
	//ptr_allocations[0] = kmalloc(2*Mega - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);
	for(i = 0; i< 79 ;i++)
f0119b41:	ff 45 f4             	incl   -0xc(%ebp)
f0119b44:	83 7d f4 4e          	cmpl   $0x4e,-0xc(%ebp)
f0119b48:	7e db                	jle    f0119b25 <test_kmalloc_nextfit+0x78>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS);
f0119b4a:	c7 45 e8 00 10 00 00 	movl   $0x1000,-0x18(%ebp)
f0119b51:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0119b56:	0f b6 d0             	movzbl %al,%edx
f0119b59:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0119b5c:	01 d0                	add    %edx,%eax
f0119b5e:	48                   	dec    %eax
f0119b5f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0119b62:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0119b65:	ba 00 00 00 00       	mov    $0x0,%edx
f0119b6a:	f7 75 e8             	divl   -0x18(%ebp)
f0119b6d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0119b70:	29 d0                	sub    %edx,%eax
f0119b72:	89 c1                	mov    %eax,%ecx
f0119b74:	c7 45 e0 00 10 00 00 	movl   $0x1000,-0x20(%ebp)
f0119b7b:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0119b80:	0f b6 c0             	movzbl %al,%eax
f0119b83:	c1 e0 04             	shl    $0x4,%eax
f0119b86:	89 c2                	mov    %eax,%edx
f0119b88:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0119b8b:	01 d0                	add    %edx,%eax
f0119b8d:	48                   	dec    %eax
f0119b8e:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0119b91:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0119b94:	ba 00 00 00 00       	mov    $0x0,%edx
f0119b99:	f7 75 e0             	divl   -0x20(%ebp)
f0119b9c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0119b9f:	29 d0                	sub    %edx,%eax
f0119ba1:	01 c8                	add    %ecx,%eax
f0119ba3:	ba 00 b0 1f 00       	mov    $0x1fb000,%edx
f0119ba8:	29 c2                	sub    %eax,%edx
f0119baa:	89 d0                	mov    %edx,%eax
f0119bac:	83 ec 0c             	sub    $0xc,%esp
f0119baf:	50                   	push   %eax
f0119bb0:	e8 9e e6 fe ff       	call   f0108253 <kmalloc>
f0119bb5:	83 c4 10             	add    $0x10,%esp
f0119bb8:	89 85 64 fd ff ff    	mov    %eax,-0x29c(%ebp)


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f0119bbe:	8b 85 28 fc ff ff    	mov    -0x3d8(%ebp),%eax
f0119bc4:	89 c1                	mov    %eax,%ecx
f0119bc6:	c7 45 d8 00 10 00 00 	movl   $0x1000,-0x28(%ebp)
f0119bcd:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0119bd2:	0f b6 d0             	movzbl %al,%edx
f0119bd5:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0119bd8:	01 d0                	add    %edx,%eax
f0119bda:	48                   	dec    %eax
f0119bdb:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0119bde:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0119be1:	ba 00 00 00 00       	mov    $0x0,%edx
f0119be6:	f7 75 d8             	divl   -0x28(%ebp)
f0119be9:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0119bec:	29 d0                	sub    %edx,%eax
f0119bee:	89 c3                	mov    %eax,%ebx
f0119bf0:	c7 45 d0 00 10 00 00 	movl   $0x1000,-0x30(%ebp)
f0119bf7:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0119bfc:	0f b6 c0             	movzbl %al,%eax
f0119bff:	c1 e0 04             	shl    $0x4,%eax
f0119c02:	89 c2                	mov    %eax,%edx
f0119c04:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0119c07:	01 d0                	add    %edx,%eax
f0119c09:	48                   	dec    %eax
f0119c0a:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0119c0d:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0119c10:	ba 00 00 00 00       	mov    $0x0,%edx
f0119c15:	f7 75 d0             	divl   -0x30(%ebp)
f0119c18:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0119c1b:	29 d0                	sub    %edx,%eax
f0119c1d:	01 d8                	add    %ebx,%eax
f0119c1f:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0119c24:	39 c1                	cmp    %eax,%ecx
f0119c26:	0f 85 4f 03 00 00    	jne    f0119f7b <test_kmalloc_nextfit+0x4ce>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f0119c2c:	8b 85 30 fc ff ff    	mov    -0x3d0(%ebp),%eax
f0119c32:	89 c1                	mov    %eax,%ecx
f0119c34:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f0119c3b:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0119c40:	0f b6 d0             	movzbl %al,%edx
f0119c43:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0119c46:	01 d0                	add    %edx,%eax
f0119c48:	48                   	dec    %eax
f0119c49:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f0119c4c:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0119c4f:	ba 00 00 00 00       	mov    $0x0,%edx
f0119c54:	f7 75 c8             	divl   -0x38(%ebp)
f0119c57:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0119c5a:	29 d0                	sub    %edx,%eax
f0119c5c:	89 c3                	mov    %eax,%ebx
f0119c5e:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f0119c65:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0119c6a:	0f b6 c0             	movzbl %al,%eax
f0119c6d:	c1 e0 04             	shl    $0x4,%eax
f0119c70:	89 c2                	mov    %eax,%edx
f0119c72:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0119c75:	01 d0                	add    %edx,%eax
f0119c77:	48                   	dec    %eax
f0119c78:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0119c7b:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0119c7e:	ba 00 00 00 00       	mov    $0x0,%edx
f0119c83:	f7 75 c0             	divl   -0x40(%ebp)
f0119c86:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0119c89:	29 d0                	sub    %edx,%eax
f0119c8b:	01 d8                	add    %ebx,%eax
f0119c8d:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS);


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f0119c92:	39 c1                	cmp    %eax,%ecx
f0119c94:	0f 85 e1 02 00 00    	jne    f0119f7b <test_kmalloc_nextfit+0x4ce>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f0119c9a:	8b 85 48 fc ff ff    	mov    -0x3b8(%ebp),%eax
f0119ca0:	89 c1                	mov    %eax,%ecx
f0119ca2:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f0119ca9:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0119cae:	0f b6 d0             	movzbl %al,%edx
f0119cb1:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0119cb4:	01 d0                	add    %edx,%eax
f0119cb6:	48                   	dec    %eax
f0119cb7:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f0119cba:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0119cbd:	ba 00 00 00 00       	mov    $0x0,%edx
f0119cc2:	f7 75 b8             	divl   -0x48(%ebp)
f0119cc5:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0119cc8:	29 d0                	sub    %edx,%eax
f0119cca:	89 c3                	mov    %eax,%ebx
f0119ccc:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f0119cd3:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0119cd8:	0f b6 c0             	movzbl %al,%eax
f0119cdb:	c1 e0 04             	shl    $0x4,%eax
f0119cde:	89 c2                	mov    %eax,%edx
f0119ce0:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0119ce3:	01 d0                	add    %edx,%eax
f0119ce5:	48                   	dec    %eax
f0119ce6:	89 45 ac             	mov    %eax,-0x54(%ebp)
f0119ce9:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0119cec:	ba 00 00 00 00       	mov    $0x0,%edx
f0119cf1:	f7 75 b0             	divl   -0x50(%ebp)
f0119cf4:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0119cf7:	29 d0                	sub    %edx,%eax
f0119cf9:	01 d8                	add    %ebx,%eax
f0119cfb:	2d 00 c0 ff 08       	sub    $0x8ffc000,%eax
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS);


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f0119d00:	39 c1                	cmp    %eax,%ecx
f0119d02:	0f 85 73 02 00 00    	jne    f0119f7b <test_kmalloc_nextfit+0x4ce>
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f0119d08:	8b 85 50 fc ff ff    	mov    -0x3b0(%ebp),%eax
f0119d0e:	89 c1                	mov    %eax,%ecx
f0119d10:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f0119d17:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0119d1c:	0f b6 d0             	movzbl %al,%edx
f0119d1f:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0119d22:	01 d0                	add    %edx,%eax
f0119d24:	48                   	dec    %eax
f0119d25:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f0119d28:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0119d2b:	ba 00 00 00 00       	mov    $0x0,%edx
f0119d30:	f7 75 a8             	divl   -0x58(%ebp)
f0119d33:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0119d36:	29 d0                	sub    %edx,%eax
f0119d38:	89 c3                	mov    %eax,%ebx
f0119d3a:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0119d41:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0119d46:	0f b6 c0             	movzbl %al,%eax
f0119d49:	c1 e0 04             	shl    $0x4,%eax
f0119d4c:	89 c2                	mov    %eax,%edx
f0119d4e:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0119d51:	01 d0                	add    %edx,%eax
f0119d53:	48                   	dec    %eax
f0119d54:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0119d57:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0119d5a:	ba 00 00 00 00       	mov    $0x0,%edx
f0119d5f:	f7 75 a0             	divl   -0x60(%ebp)
f0119d62:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0119d65:	29 d0                	sub    %edx,%eax
f0119d67:	01 d8                	add    %ebx,%eax
f0119d69:	2d 00 c0 bf 08       	sub    $0x8bfc000,%eax


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f0119d6e:	39 c1                	cmp    %eax,%ecx
f0119d70:	0f 85 05 02 00 00    	jne    f0119f7b <test_kmalloc_nextfit+0x4ce>
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f0119d76:	8b 85 64 fc ff ff    	mov    -0x39c(%ebp),%eax
f0119d7c:	89 c1                	mov    %eax,%ecx
f0119d7e:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f0119d85:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0119d8a:	0f b6 d0             	movzbl %al,%edx
f0119d8d:	8b 45 98             	mov    -0x68(%ebp),%eax
f0119d90:	01 d0                	add    %edx,%eax
f0119d92:	48                   	dec    %eax
f0119d93:	89 45 94             	mov    %eax,-0x6c(%ebp)
f0119d96:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0119d99:	ba 00 00 00 00       	mov    $0x0,%edx
f0119d9e:	f7 75 98             	divl   -0x68(%ebp)
f0119da1:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0119da4:	29 d0                	sub    %edx,%eax
f0119da6:	89 c3                	mov    %eax,%ebx
f0119da8:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f0119daf:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0119db4:	0f b6 c0             	movzbl %al,%eax
f0119db7:	c1 e0 04             	shl    $0x4,%eax
f0119dba:	89 c2                	mov    %eax,%edx
f0119dbc:	8b 45 90             	mov    -0x70(%ebp),%eax
f0119dbf:	01 d0                	add    %edx,%eax
f0119dc1:	48                   	dec    %eax
f0119dc2:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0119dc5:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0119dc8:	ba 00 00 00 00       	mov    $0x0,%edx
f0119dcd:	f7 75 90             	divl   -0x70(%ebp)
f0119dd0:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0119dd3:	29 d0                	sub    %edx,%eax
f0119dd5:	01 d8                	add    %ebx,%eax
f0119dd7:	2d 00 c0 1f 08       	sub    $0x81fc000,%eax

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f0119ddc:	39 c1                	cmp    %eax,%ecx
f0119dde:	0f 85 97 01 00 00    	jne    f0119f7b <test_kmalloc_nextfit+0x4ce>
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f0119de4:	8b 85 78 fc ff ff    	mov    -0x388(%ebp),%eax
f0119dea:	89 c1                	mov    %eax,%ecx
f0119dec:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0119df3:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0119df8:	0f b6 d0             	movzbl %al,%edx
f0119dfb:	8b 45 88             	mov    -0x78(%ebp),%eax
f0119dfe:	01 d0                	add    %edx,%eax
f0119e00:	48                   	dec    %eax
f0119e01:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0119e04:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0119e07:	ba 00 00 00 00       	mov    $0x0,%edx
f0119e0c:	f7 75 88             	divl   -0x78(%ebp)
f0119e0f:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0119e12:	29 d0                	sub    %edx,%eax
f0119e14:	89 c3                	mov    %eax,%ebx
f0119e16:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f0119e1d:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0119e22:	0f b6 c0             	movzbl %al,%eax
f0119e25:	c1 e0 04             	shl    $0x4,%eax
f0119e28:	89 c2                	mov    %eax,%edx
f0119e2a:	8b 45 80             	mov    -0x80(%ebp),%eax
f0119e2d:	01 d0                	add    %edx,%eax
f0119e2f:	48                   	dec    %eax
f0119e30:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0119e36:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0119e3c:	ba 00 00 00 00       	mov    $0x0,%edx
f0119e41:	f7 75 80             	divl   -0x80(%ebp)
f0119e44:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0119e4a:	29 d0                	sub    %edx,%eax
f0119e4c:	01 d8                	add    %ebx,%eax
f0119e4e:	2d 00 c0 7f 07       	sub    $0x77fc000,%eax
	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f0119e53:	39 c1                	cmp    %eax,%ecx
f0119e55:	0f 85 20 01 00 00    	jne    f0119f7b <test_kmalloc_nextfit+0x4ce>
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[25] != (ACTUAL_START + 50*Mega) ||
f0119e5b:	8b 85 8c fc ff ff    	mov    -0x374(%ebp),%eax
f0119e61:	89 c1                	mov    %eax,%ecx
f0119e63:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0119e6a:	10 00 00 
f0119e6d:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0119e72:	0f b6 d0             	movzbl %al,%edx
f0119e75:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0119e7b:	01 d0                	add    %edx,%eax
f0119e7d:	48                   	dec    %eax
f0119e7e:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0119e84:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0119e8a:	ba 00 00 00 00       	mov    $0x0,%edx
f0119e8f:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f0119e95:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0119e9b:	29 d0                	sub    %edx,%eax
f0119e9d:	89 c3                	mov    %eax,%ebx
f0119e9f:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0119ea6:	10 00 00 
f0119ea9:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0119eae:	0f b6 c0             	movzbl %al,%eax
f0119eb1:	c1 e0 04             	shl    $0x4,%eax
f0119eb4:	89 c2                	mov    %eax,%edx
f0119eb6:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0119ebc:	01 d0                	add    %edx,%eax
f0119ebe:	48                   	dec    %eax
f0119ebf:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f0119ec5:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0119ecb:	ba 00 00 00 00       	mov    $0x0,%edx
f0119ed0:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f0119ed6:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0119edc:	29 d0                	sub    %edx,%eax
f0119ede:	01 d8                	add    %ebx,%eax
f0119ee0:	2d 00 c0 df 06       	sub    $0x6dfc000,%eax
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f0119ee5:	39 c1                	cmp    %eax,%ecx
f0119ee7:	0f 85 8e 00 00 00    	jne    f0119f7b <test_kmalloc_nextfit+0x4ce>
			(uint32)ptr_allocations[25] != (ACTUAL_START + 50*Mega) ||
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega ))
f0119eed:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f0119ef3:	89 c1                	mov    %eax,%ecx
f0119ef5:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0119efc:	10 00 00 
f0119eff:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0119f04:	0f b6 d0             	movzbl %al,%edx
f0119f07:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0119f0d:	01 d0                	add    %edx,%eax
f0119f0f:	48                   	dec    %eax
f0119f10:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0119f16:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0119f1c:	ba 00 00 00 00       	mov    $0x0,%edx
f0119f21:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0119f27:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0119f2d:	29 d0                	sub    %edx,%eax
f0119f2f:	89 c3                	mov    %eax,%ebx
f0119f31:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f0119f38:	10 00 00 
f0119f3b:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0119f40:	0f b6 c0             	movzbl %al,%eax
f0119f43:	c1 e0 04             	shl    $0x4,%eax
f0119f46:	89 c2                	mov    %eax,%edx
f0119f48:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0119f4e:	01 d0                	add    %edx,%eax
f0119f50:	48                   	dec    %eax
f0119f51:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f0119f57:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0119f5d:	ba 00 00 00 00       	mov    $0x0,%edx
f0119f62:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f0119f68:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0119f6e:	29 d0                	sub    %edx,%eax
f0119f70:	01 d8                	add    %ebx,%eax
f0119f72:	2d 00 c0 1f 00       	sub    $0x1fc000,%eax
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[25] != (ACTUAL_START + 50*Mega) ||
f0119f77:	39 c1                	cmp    %eax,%ecx
f0119f79:	74 17                	je     f0119f92 <test_kmalloc_nextfit+0x4e5>
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega ))
		panic("Wrong allocation, Check next fitting strategy is working correctly");
f0119f7b:	83 ec 04             	sub    $0x4,%esp
f0119f7e:	68 ac a1 13 f0       	push   $0xf013a1ac
f0119f83:	68 03 01 00 00       	push   $0x103
f0119f88:	68 32 9f 13 f0       	push   $0xf0139f32
f0119f8d:	e8 1e 62 fe ff       	call   f01001b0 <_panic>

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119f92:	e8 ed a6 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0119f97:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119f9a:	74 17                	je     f0119fb3 <test_kmalloc_nextfit+0x506>
f0119f9c:	83 ec 04             	sub    $0x4,%esp
f0119f9f:	68 4c 9f 13 f0       	push   $0xf0139f4c
f0119fa4:	68 05 01 00 00       	push   $0x105
f0119fa9:	68 32 9f 13 f0       	push   $0xf0139f32
f0119fae:	e8 fd 61 fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (160*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS)/(PAGE_SIZE) ) panic("Wrong allocation");
f0119fb3:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0119fb6:	e8 83 2e ff ff       	call   f010ce3e <sys_calculate_free_frames>
f0119fbb:	29 c3                	sub    %eax,%ebx
f0119fbd:	89 d9                	mov    %ebx,%ecx
f0119fbf:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f0119fc6:	10 00 00 
f0119fc9:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0119fce:	0f b6 d0             	movzbl %al,%edx
f0119fd1:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0119fd7:	01 d0                	add    %edx,%eax
f0119fd9:	48                   	dec    %eax
f0119fda:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f0119fe0:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0119fe6:	ba 00 00 00 00       	mov    $0x0,%edx
f0119feb:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f0119ff1:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0119ff7:	29 d0                	sub    %edx,%eax
f0119ff9:	89 c3                	mov    %eax,%ebx
f0119ffb:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f011a002:	10 00 00 
f011a005:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011a00a:	0f b6 c0             	movzbl %al,%eax
f011a00d:	c1 e0 04             	shl    $0x4,%eax
f011a010:	89 c2                	mov    %eax,%edx
f011a012:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011a018:	01 d0                	add    %edx,%eax
f011a01a:	48                   	dec    %eax
f011a01b:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f011a021:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011a027:	ba 00 00 00 00       	mov    $0x0,%edx
f011a02c:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f011a032:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011a038:	29 d0                	sub    %edx,%eax
f011a03a:	01 d8                	add    %ebx,%eax
f011a03c:	ba 00 b0 ff 09       	mov    $0x9ffb000,%edx
f011a041:	29 c2                	sub    %eax,%edx
f011a043:	89 d0                	mov    %edx,%eax
f011a045:	c1 e8 0c             	shr    $0xc,%eax
f011a048:	39 c1                	cmp    %eax,%ecx
f011a04a:	74 17                	je     f011a063 <test_kmalloc_nextfit+0x5b6>
f011a04c:	83 ec 04             	sub    $0x4,%esp
f011a04f:	68 ef a1 13 f0       	push   $0xf013a1ef
f011a054:	68 06 01 00 00       	push   $0x106
f011a059:	68 32 9f 13 f0       	push   $0xf0139f32
f011a05e:	e8 4d 61 fe ff       	call   f01001b0 <_panic>

	// Make memory holes.
	freeDiskFrames = pf_calculate_free_frames() ;
f011a063:	e8 1c a6 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011a068:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011a06b:	e8 ce 2d ff ff       	call   f010ce3e <sys_calculate_free_frames>
f011a070:	89 45 f0             	mov    %eax,-0x10(%ebp)

	kfree(ptr_allocations[0]);		// Hole 1 = 2 M
f011a073:	8b 85 28 fc ff ff    	mov    -0x3d8(%ebp),%eax
f011a079:	83 ec 0c             	sub    $0xc,%esp
f011a07c:	50                   	push   %eax
f011a07d:	e8 5c e3 fe ff       	call   f01083de <kfree>
f011a082:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[2]);		// Hole 2 = 4 M
f011a085:	8b 85 30 fc ff ff    	mov    -0x3d0(%ebp),%eax
f011a08b:	83 ec 0c             	sub    $0xc,%esp
f011a08e:	50                   	push   %eax
f011a08f:	e8 4a e3 fe ff       	call   f01083de <kfree>
f011a094:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[3]);
f011a097:	8b 85 34 fc ff ff    	mov    -0x3cc(%ebp),%eax
f011a09d:	83 ec 0c             	sub    $0xc,%esp
f011a0a0:	50                   	push   %eax
f011a0a1:	e8 38 e3 fe ff       	call   f01083de <kfree>
f011a0a6:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[5]);		// Hole 3 = 2 M
f011a0a9:	8b 85 3c fc ff ff    	mov    -0x3c4(%ebp),%eax
f011a0af:	83 ec 0c             	sub    $0xc,%esp
f011a0b2:	50                   	push   %eax
f011a0b3:	e8 26 e3 fe ff       	call   f01083de <kfree>
f011a0b8:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[10]);		// Hole 4 = 6 M
f011a0bb:	8b 85 50 fc ff ff    	mov    -0x3b0(%ebp),%eax
f011a0c1:	83 ec 0c             	sub    $0xc,%esp
f011a0c4:	50                   	push   %eax
f011a0c5:	e8 14 e3 fe ff       	call   f01083de <kfree>
f011a0ca:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[12]);
f011a0cd:	8b 85 58 fc ff ff    	mov    -0x3a8(%ebp),%eax
f011a0d3:	83 ec 0c             	sub    $0xc,%esp
f011a0d6:	50                   	push   %eax
f011a0d7:	e8 02 e3 fe ff       	call   f01083de <kfree>
f011a0dc:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[11]);
f011a0df:	8b 85 54 fc ff ff    	mov    -0x3ac(%ebp),%eax
f011a0e5:	83 ec 0c             	sub    $0xc,%esp
f011a0e8:	50                   	push   %eax
f011a0e9:	e8 f0 e2 fe ff       	call   f01083de <kfree>
f011a0ee:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[20]);		// Hole 5 = 2 M
f011a0f1:	8b 85 78 fc ff ff    	mov    -0x388(%ebp),%eax
f011a0f7:	83 ec 0c             	sub    $0xc,%esp
f011a0fa:	50                   	push   %eax
f011a0fb:	e8 de e2 fe ff       	call   f01083de <kfree>
f011a100:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[25]);		// Hole 6 = 2 M
f011a103:	8b 85 8c fc ff ff    	mov    -0x374(%ebp),%eax
f011a109:	83 ec 0c             	sub    $0xc,%esp
f011a10c:	50                   	push   %eax
f011a10d:	e8 cc e2 fe ff       	call   f01083de <kfree>
f011a112:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[79]);		// Hole 7 = 2 M - 4 KB
f011a115:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f011a11b:	83 ec 0c             	sub    $0xc,%esp
f011a11e:	50                   	push   %eax
f011a11f:	e8 ba e2 fe ff       	call   f01083de <kfree>
f011a124:	83 c4 10             	add    $0x10,%esp

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a127:	e8 58 a5 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011a12c:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a12f:	74 17                	je     f011a148 <test_kmalloc_nextfit+0x69b>
f011a131:	83 ec 04             	sub    $0x4,%esp
f011a134:	68 4c 9f 13 f0       	push   $0xf0139f4c
f011a139:	68 17 01 00 00       	push   $0x117
f011a13e:	68 32 9f 13 f0       	push   $0xf0139f32
f011a143:	e8 68 60 fe ff       	call   f01001b0 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) != ((10*2*Mega) - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f011a148:	e8 f1 2c ff ff       	call   f010ce3e <sys_calculate_free_frames>
f011a14d:	89 c2                	mov    %eax,%edx
f011a14f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011a152:	89 d1                	mov    %edx,%ecx
f011a154:	29 c1                	sub    %eax,%ecx
f011a156:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f011a15d:	10 00 00 
f011a160:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011a165:	0f b6 d0             	movzbl %al,%edx
f011a168:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011a16e:	01 d0                	add    %edx,%eax
f011a170:	48                   	dec    %eax
f011a171:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f011a177:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011a17d:	ba 00 00 00 00       	mov    $0x0,%edx
f011a182:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f011a188:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011a18e:	29 d0                	sub    %edx,%eax
f011a190:	89 c3                	mov    %eax,%ebx
f011a192:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f011a199:	10 00 00 
f011a19c:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011a1a1:	0f b6 c0             	movzbl %al,%eax
f011a1a4:	c1 e0 04             	shl    $0x4,%eax
f011a1a7:	89 c2                	mov    %eax,%edx
f011a1a9:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011a1af:	01 d0                	add    %edx,%eax
f011a1b1:	48                   	dec    %eax
f011a1b2:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f011a1b8:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011a1be:	ba 00 00 00 00       	mov    $0x0,%edx
f011a1c3:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f011a1c9:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011a1cf:	29 d0                	sub    %edx,%eax
f011a1d1:	01 d8                	add    %ebx,%eax
f011a1d3:	ba 00 b0 3f 01       	mov    $0x13fb000,%edx
f011a1d8:	29 c2                	sub    %eax,%edx
f011a1da:	89 d0                	mov    %edx,%eax
f011a1dc:	c1 e8 0c             	shr    $0xc,%eax
f011a1df:	39 c1                	cmp    %eax,%ecx
f011a1e1:	74 17                	je     f011a1fa <test_kmalloc_nextfit+0x74d>
f011a1e3:	83 ec 04             	sub    $0x4,%esp
f011a1e6:	68 00 a2 13 f0       	push   $0xf013a200
f011a1eb:	68 18 01 00 00       	push   $0x118
f011a1f0:	68 32 9f 13 f0       	push   $0xf0139f32
f011a1f5:	e8 b6 5f fe ff       	call   f01001b0 <_panic>

	// Test next fit
	freeDiskFrames = pf_calculate_free_frames() ;
f011a1fa:	e8 85 a4 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011a1ff:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011a202:	e8 37 2c ff ff       	call   f010ce3e <sys_calculate_free_frames>
f011a207:	89 45 f0             	mov    %eax,-0x10(%ebp)
	void* tempAddress = kmalloc(Mega-kilo);		// Use Hole 1 -> Hole 1 = 1 M
f011a20a:	83 ec 0c             	sub    $0xc,%esp
f011a20d:	68 00 fc 0f 00       	push   $0xffc00
f011a212:	e8 3c e0 fe ff       	call   f0108253 <kmalloc>
f011a217:	83 c4 10             	add    $0x10,%esp
f011a21a:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START)
f011a220:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011a227:	10 00 00 
f011a22a:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011a22f:	0f b6 d0             	movzbl %al,%edx
f011a232:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011a238:	01 d0                	add    %edx,%eax
f011a23a:	48                   	dec    %eax
f011a23b:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011a241:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011a247:	ba 00 00 00 00       	mov    $0x0,%edx
f011a24c:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011a252:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011a258:	29 d0                	sub    %edx,%eax
f011a25a:	89 c1                	mov    %eax,%ecx
f011a25c:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011a263:	10 00 00 
f011a266:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011a26b:	0f b6 c0             	movzbl %al,%eax
f011a26e:	c1 e0 04             	shl    $0x4,%eax
f011a271:	89 c2                	mov    %eax,%edx
f011a273:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011a279:	01 d0                	add    %edx,%eax
f011a27b:	48                   	dec    %eax
f011a27c:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011a282:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011a288:	ba 00 00 00 00       	mov    $0x0,%edx
f011a28d:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011a293:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011a299:	29 d0                	sub    %edx,%eax
f011a29b:	01 c8                	add    %ecx,%eax
f011a29d:	8d 90 00 40 00 f6    	lea    -0x9ffc000(%eax),%edx
f011a2a3:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011a2a9:	39 c2                	cmp    %eax,%edx
f011a2ab:	74 17                	je     f011a2c4 <test_kmalloc_nextfit+0x817>
		panic("Next Fit not working correctly");
f011a2ad:	83 ec 04             	sub    $0x4,%esp
f011a2b0:	68 40 a2 13 f0       	push   $0xf013a240
f011a2b5:	68 1f 01 00 00       	push   $0x11f
f011a2ba:	68 32 9f 13 f0       	push   $0xf0139f32
f011a2bf:	e8 ec 5e fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a2c4:	e8 bb a3 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011a2c9:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a2cc:	74 17                	je     f011a2e5 <test_kmalloc_nextfit+0x838>
f011a2ce:	83 ec 04             	sub    $0x4,%esp
f011a2d1:	68 4c 9f 13 f0       	push   $0xf0139f4c
f011a2d6:	68 20 01 00 00       	push   $0x120
f011a2db:	68 32 9f 13 f0       	push   $0xf0139f32
f011a2e0:	e8 cb 5e fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (1*Mega)/PAGE_SIZE) panic("Wrong allocation");
f011a2e5:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011a2e8:	e8 51 2b ff ff       	call   f010ce3e <sys_calculate_free_frames>
f011a2ed:	29 c3                	sub    %eax,%ebx
f011a2ef:	89 d8                	mov    %ebx,%eax
f011a2f1:	3d 00 01 00 00       	cmp    $0x100,%eax
f011a2f6:	74 17                	je     f011a30f <test_kmalloc_nextfit+0x862>
f011a2f8:	83 ec 04             	sub    $0x4,%esp
f011a2fb:	68 ef a1 13 f0       	push   $0xf013a1ef
f011a300:	68 21 01 00 00       	push   $0x121
f011a305:	68 32 9f 13 f0       	push   $0xf0139f32
f011a30a:	e8 a1 5e fe ff       	call   f01001b0 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f011a30f:	e8 70 a3 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011a314:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011a317:	e8 22 2b ff ff       	call   f010ce3e <sys_calculate_free_frames>
f011a31c:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(kilo);					// Use Hole 1 -> Hole 1 = 1 M - Kilo -> requires one page only
f011a31f:	83 ec 0c             	sub    $0xc,%esp
f011a322:	68 00 04 00 00       	push   $0x400
f011a327:	e8 27 df fe ff       	call   f0108253 <kmalloc>
f011a32c:	83 c4 10             	add    $0x10,%esp
f011a32f:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00100000)
f011a335:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011a33c:	10 00 00 
f011a33f:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011a344:	0f b6 d0             	movzbl %al,%edx
f011a347:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011a34d:	01 d0                	add    %edx,%eax
f011a34f:	48                   	dec    %eax
f011a350:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011a356:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011a35c:	ba 00 00 00 00       	mov    $0x0,%edx
f011a361:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011a367:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011a36d:	29 d0                	sub    %edx,%eax
f011a36f:	89 c1                	mov    %eax,%ecx
f011a371:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f011a378:	10 00 00 
f011a37b:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011a380:	0f b6 c0             	movzbl %al,%eax
f011a383:	c1 e0 04             	shl    $0x4,%eax
f011a386:	89 c2                	mov    %eax,%edx
f011a388:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011a38e:	01 d0                	add    %edx,%eax
f011a390:	48                   	dec    %eax
f011a391:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f011a397:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011a39d:	ba 00 00 00 00       	mov    $0x0,%edx
f011a3a2:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f011a3a8:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011a3ae:	29 d0                	sub    %edx,%eax
f011a3b0:	01 c8                	add    %ecx,%eax
f011a3b2:	8d 90 00 40 10 f6    	lea    -0x9efc000(%eax),%edx
f011a3b8:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011a3be:	39 c2                	cmp    %eax,%edx
f011a3c0:	74 17                	je     f011a3d9 <test_kmalloc_nextfit+0x92c>
		panic("Next Fit not working correctly");
f011a3c2:	83 ec 04             	sub    $0x4,%esp
f011a3c5:	68 40 a2 13 f0       	push   $0xf013a240
f011a3ca:	68 27 01 00 00       	push   $0x127
f011a3cf:	68 32 9f 13 f0       	push   $0xf0139f32
f011a3d4:	e8 d7 5d fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a3d9:	e8 a6 a2 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011a3de:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a3e1:	74 17                	je     f011a3fa <test_kmalloc_nextfit+0x94d>
f011a3e3:	83 ec 04             	sub    $0x4,%esp
f011a3e6:	68 4c 9f 13 f0       	push   $0xf0139f4c
f011a3eb:	68 28 01 00 00       	push   $0x128
f011a3f0:	68 32 9f 13 f0       	push   $0xf0139f32
f011a3f5:	e8 b6 5d fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation");
f011a3fa:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011a3fd:	e8 3c 2a ff ff       	call   f010ce3e <sys_calculate_free_frames>
f011a402:	29 c3                	sub    %eax,%ebx
f011a404:	89 d8                	mov    %ebx,%eax
f011a406:	83 f8 01             	cmp    $0x1,%eax
f011a409:	74 17                	je     f011a422 <test_kmalloc_nextfit+0x975>
f011a40b:	83 ec 04             	sub    $0x4,%esp
f011a40e:	68 ef a1 13 f0       	push   $0xf013a1ef
f011a413:	68 29 01 00 00       	push   $0x129
f011a418:	68 32 9f 13 f0       	push   $0xf0139f32
f011a41d:	e8 8e 5d fe ff       	call   f01001b0 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f011a422:	e8 5d a2 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011a427:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011a42a:	e8 0f 2a ff ff       	call   f010ce3e <sys_calculate_free_frames>
f011a42f:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(5*Mega); 			   // Use Hole 4 -> Hole 4 = 1 M
f011a432:	83 ec 0c             	sub    $0xc,%esp
f011a435:	68 00 00 50 00       	push   $0x500000
f011a43a:	e8 14 de fe ff       	call   f0108253 <kmalloc>
f011a43f:	83 c4 10             	add    $0x10,%esp
f011a442:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01400000)
f011a448:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011a44f:	10 00 00 
f011a452:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011a457:	0f b6 d0             	movzbl %al,%edx
f011a45a:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011a460:	01 d0                	add    %edx,%eax
f011a462:	48                   	dec    %eax
f011a463:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011a469:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011a46f:	ba 00 00 00 00       	mov    $0x0,%edx
f011a474:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011a47a:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011a480:	29 d0                	sub    %edx,%eax
f011a482:	89 c1                	mov    %eax,%ecx
f011a484:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f011a48b:	10 00 00 
f011a48e:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011a493:	0f b6 c0             	movzbl %al,%eax
f011a496:	c1 e0 04             	shl    $0x4,%eax
f011a499:	89 c2                	mov    %eax,%edx
f011a49b:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011a4a1:	01 d0                	add    %edx,%eax
f011a4a3:	48                   	dec    %eax
f011a4a4:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f011a4aa:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011a4b0:	ba 00 00 00 00       	mov    $0x0,%edx
f011a4b5:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f011a4bb:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011a4c1:	29 d0                	sub    %edx,%eax
f011a4c3:	01 c8                	add    %ecx,%eax
f011a4c5:	8d 90 00 40 40 f7    	lea    -0x8bfc000(%eax),%edx
f011a4cb:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011a4d1:	39 c2                	cmp    %eax,%edx
f011a4d3:	74 17                	je     f011a4ec <test_kmalloc_nextfit+0xa3f>
		panic("Next Fit not working correctly");
f011a4d5:	83 ec 04             	sub    $0x4,%esp
f011a4d8:	68 40 a2 13 f0       	push   $0xf013a240
f011a4dd:	68 2f 01 00 00       	push   $0x12f
f011a4e2:	68 32 9f 13 f0       	push   $0xf0139f32
f011a4e7:	e8 c4 5c fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a4ec:	e8 93 a1 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011a4f1:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a4f4:	74 17                	je     f011a50d <test_kmalloc_nextfit+0xa60>
f011a4f6:	83 ec 04             	sub    $0x4,%esp
f011a4f9:	68 4c 9f 13 f0       	push   $0xf0139f4c
f011a4fe:	68 30 01 00 00       	push   $0x130
f011a503:	68 32 9f 13 f0       	push   $0xf0139f32
f011a508:	e8 a3 5c fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (5*Mega)/PAGE_SIZE) panic("Wrong allocation");
f011a50d:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011a510:	e8 29 29 ff ff       	call   f010ce3e <sys_calculate_free_frames>
f011a515:	29 c3                	sub    %eax,%ebx
f011a517:	89 d8                	mov    %ebx,%eax
f011a519:	3d 00 05 00 00       	cmp    $0x500,%eax
f011a51e:	74 17                	je     f011a537 <test_kmalloc_nextfit+0xa8a>
f011a520:	83 ec 04             	sub    $0x4,%esp
f011a523:	68 ef a1 13 f0       	push   $0xf013a1ef
f011a528:	68 31 01 00 00       	push   $0x131
f011a52d:	68 32 9f 13 f0       	push   $0xf0139f32
f011a532:	e8 79 5c fe ff       	call   f01001b0 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f011a537:	e8 48 a1 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011a53c:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011a53f:	e8 fa 28 ff ff       	call   f010ce3e <sys_calculate_free_frames>
f011a544:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(1*Mega); 			   // Use Hole 4 -> Hole 4 = 0 M
f011a547:	83 ec 0c             	sub    $0xc,%esp
f011a54a:	68 00 00 10 00       	push   $0x100000
f011a54f:	e8 ff dc fe ff       	call   f0108253 <kmalloc>
f011a554:	83 c4 10             	add    $0x10,%esp
f011a557:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01900000)
f011a55d:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f011a564:	10 00 00 
f011a567:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011a56c:	0f b6 d0             	movzbl %al,%edx
f011a56f:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011a575:	01 d0                	add    %edx,%eax
f011a577:	48                   	dec    %eax
f011a578:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f011a57e:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011a584:	ba 00 00 00 00       	mov    $0x0,%edx
f011a589:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f011a58f:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011a595:	29 d0                	sub    %edx,%eax
f011a597:	89 c1                	mov    %eax,%ecx
f011a599:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f011a5a0:	10 00 00 
f011a5a3:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011a5a8:	0f b6 c0             	movzbl %al,%eax
f011a5ab:	c1 e0 04             	shl    $0x4,%eax
f011a5ae:	89 c2                	mov    %eax,%edx
f011a5b0:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011a5b6:	01 d0                	add    %edx,%eax
f011a5b8:	48                   	dec    %eax
f011a5b9:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f011a5bf:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011a5c5:	ba 00 00 00 00       	mov    $0x0,%edx
f011a5ca:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f011a5d0:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011a5d6:	29 d0                	sub    %edx,%eax
f011a5d8:	01 c8                	add    %ecx,%eax
f011a5da:	8d 90 00 40 90 f7    	lea    -0x86fc000(%eax),%edx
f011a5e0:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011a5e6:	39 c2                	cmp    %eax,%edx
f011a5e8:	74 17                	je     f011a601 <test_kmalloc_nextfit+0xb54>
		panic("Next Fit not working correctly");
f011a5ea:	83 ec 04             	sub    $0x4,%esp
f011a5ed:	68 40 a2 13 f0       	push   $0xf013a240
f011a5f2:	68 37 01 00 00       	push   $0x137
f011a5f7:	68 32 9f 13 f0       	push   $0xf0139f32
f011a5fc:	e8 af 5b fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a601:	e8 7e a0 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011a606:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a609:	74 17                	je     f011a622 <test_kmalloc_nextfit+0xb75>
f011a60b:	83 ec 04             	sub    $0x4,%esp
f011a60e:	68 4c 9f 13 f0       	push   $0xf0139f4c
f011a613:	68 38 01 00 00       	push   $0x138
f011a618:	68 32 9f 13 f0       	push   $0xf0139f32
f011a61d:	e8 8e 5b fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (1*Mega)/PAGE_SIZE) panic("Wrong allocation");
f011a622:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011a625:	e8 14 28 ff ff       	call   f010ce3e <sys_calculate_free_frames>
f011a62a:	29 c3                	sub    %eax,%ebx
f011a62c:	89 d8                	mov    %ebx,%eax
f011a62e:	3d 00 01 00 00       	cmp    $0x100,%eax
f011a633:	74 17                	je     f011a64c <test_kmalloc_nextfit+0xb9f>
f011a635:	83 ec 04             	sub    $0x4,%esp
f011a638:	68 ef a1 13 f0       	push   $0xf013a1ef
f011a63d:	68 39 01 00 00       	push   $0x139
f011a642:	68 32 9f 13 f0       	push   $0xf0139f32
f011a647:	e8 64 5b fe ff       	call   f01001b0 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f011a64c:	e8 33 a0 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011a651:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011a654:	e8 e5 27 ff ff       	call   f010ce3e <sys_calculate_free_frames>
f011a659:	89 45 f0             	mov    %eax,-0x10(%ebp)
	kfree(ptr_allocations[15]);					// Make a new hole => 2 M
f011a65c:	8b 85 64 fc ff ff    	mov    -0x39c(%ebp),%eax
f011a662:	83 ec 0c             	sub    $0xc,%esp
f011a665:	50                   	push   %eax
f011a666:	e8 73 dd fe ff       	call   f01083de <kfree>
f011a66b:	83 c4 10             	add    $0x10,%esp
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a66e:	e8 11 a0 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011a673:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a676:	74 17                	je     f011a68f <test_kmalloc_nextfit+0xbe2>
f011a678:	83 ec 04             	sub    $0x4,%esp
f011a67b:	68 4c 9f 13 f0       	push   $0xf0139f4c
f011a680:	68 3e 01 00 00       	push   $0x13e
f011a685:	68 32 9f 13 f0       	push   $0xf0139f32
f011a68a:	e8 21 5b fe ff       	call   f01001b0 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) !=  (2*Mega)/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f011a68f:	e8 aa 27 ff ff       	call   f010ce3e <sys_calculate_free_frames>
f011a694:	89 c2                	mov    %eax,%edx
f011a696:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011a699:	29 c2                	sub    %eax,%edx
f011a69b:	89 d0                	mov    %edx,%eax
f011a69d:	3d 00 02 00 00       	cmp    $0x200,%eax
f011a6a2:	74 17                	je     f011a6bb <test_kmalloc_nextfit+0xc0e>
f011a6a4:	83 ec 04             	sub    $0x4,%esp
f011a6a7:	68 00 a2 13 f0       	push   $0xf013a200
f011a6ac:	68 3f 01 00 00       	push   $0x13f
f011a6b1:	68 32 9f 13 f0       	push   $0xf0139f32
f011a6b6:	e8 f5 5a fe ff       	call   f01001b0 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f011a6bb:	e8 c4 9f fe ff       	call   f0104684 <pf_calculate_free_frames>
f011a6c0:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011a6c3:	e8 76 27 ff ff       	call   f010ce3e <sys_calculate_free_frames>
f011a6c8:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(kilo); 			   // Use new Hole = 2 M - 4 kilo
f011a6cb:	83 ec 0c             	sub    $0xc,%esp
f011a6ce:	68 00 04 00 00       	push   $0x400
f011a6d3:	e8 7b db fe ff       	call   f0108253 <kmalloc>
f011a6d8:	83 c4 10             	add    $0x10,%esp
f011a6db:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01E00000)
f011a6e1:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f011a6e8:	10 00 00 
f011a6eb:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011a6f0:	0f b6 d0             	movzbl %al,%edx
f011a6f3:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011a6f9:	01 d0                	add    %edx,%eax
f011a6fb:	48                   	dec    %eax
f011a6fc:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f011a702:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011a708:	ba 00 00 00 00       	mov    $0x0,%edx
f011a70d:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f011a713:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011a719:	29 d0                	sub    %edx,%eax
f011a71b:	89 c1                	mov    %eax,%ecx
f011a71d:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f011a724:	10 00 00 
f011a727:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011a72c:	0f b6 c0             	movzbl %al,%eax
f011a72f:	c1 e0 04             	shl    $0x4,%eax
f011a732:	89 c2                	mov    %eax,%edx
f011a734:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011a73a:	01 d0                	add    %edx,%eax
f011a73c:	48                   	dec    %eax
f011a73d:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f011a743:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011a749:	ba 00 00 00 00       	mov    $0x0,%edx
f011a74e:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f011a754:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011a75a:	29 d0                	sub    %edx,%eax
f011a75c:	01 c8                	add    %ecx,%eax
f011a75e:	8d 90 00 40 e0 f7    	lea    -0x81fc000(%eax),%edx
f011a764:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011a76a:	39 c2                	cmp    %eax,%edx
f011a76c:	74 17                	je     f011a785 <test_kmalloc_nextfit+0xcd8>
		panic("Next Fit not working correctly");
f011a76e:	83 ec 04             	sub    $0x4,%esp
f011a771:	68 40 a2 13 f0       	push   $0xf013a240
f011a776:	68 45 01 00 00       	push   $0x145
f011a77b:	68 32 9f 13 f0       	push   $0xf0139f32
f011a780:	e8 2b 5a fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a785:	e8 fa 9e fe ff       	call   f0104684 <pf_calculate_free_frames>
f011a78a:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a78d:	74 17                	je     f011a7a6 <test_kmalloc_nextfit+0xcf9>
f011a78f:	83 ec 04             	sub    $0x4,%esp
f011a792:	68 4c 9f 13 f0       	push   $0xf0139f4c
f011a797:	68 46 01 00 00       	push   $0x146
f011a79c:	68 32 9f 13 f0       	push   $0xf0139f32
f011a7a1:	e8 0a 5a fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation");
f011a7a6:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011a7a9:	e8 90 26 ff ff       	call   f010ce3e <sys_calculate_free_frames>
f011a7ae:	29 c3                	sub    %eax,%ebx
f011a7b0:	89 d8                	mov    %ebx,%eax
f011a7b2:	83 f8 01             	cmp    $0x1,%eax
f011a7b5:	74 17                	je     f011a7ce <test_kmalloc_nextfit+0xd21>
f011a7b7:	83 ec 04             	sub    $0x4,%esp
f011a7ba:	68 ef a1 13 f0       	push   $0xf013a1ef
f011a7bf:	68 47 01 00 00       	push   $0x147
f011a7c4:	68 32 9f 13 f0       	push   $0xf0139f32
f011a7c9:	e8 e2 59 fe ff       	call   f01001b0 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f011a7ce:	e8 b1 9e fe ff       	call   f0104684 <pf_calculate_free_frames>
f011a7d3:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011a7d6:	e8 63 26 ff ff       	call   f010ce3e <sys_calculate_free_frames>
f011a7db:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(Mega + 1016*kilo); 	// Use new Hole = 4 kilo
f011a7de:	83 ec 0c             	sub    $0xc,%esp
f011a7e1:	68 00 e0 1f 00       	push   $0x1fe000
f011a7e6:	e8 68 da fe ff       	call   f0108253 <kmalloc>
f011a7eb:	83 c4 10             	add    $0x10,%esp
f011a7ee:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01E01000)
f011a7f4:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f011a7fb:	10 00 00 
f011a7fe:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011a803:	0f b6 d0             	movzbl %al,%edx
f011a806:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011a80c:	01 d0                	add    %edx,%eax
f011a80e:	48                   	dec    %eax
f011a80f:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f011a815:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011a81b:	ba 00 00 00 00       	mov    $0x0,%edx
f011a820:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f011a826:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011a82c:	29 d0                	sub    %edx,%eax
f011a82e:	89 c1                	mov    %eax,%ecx
f011a830:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f011a837:	10 00 00 
f011a83a:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011a83f:	0f b6 c0             	movzbl %al,%eax
f011a842:	c1 e0 04             	shl    $0x4,%eax
f011a845:	89 c2                	mov    %eax,%edx
f011a847:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011a84d:	01 d0                	add    %edx,%eax
f011a84f:	48                   	dec    %eax
f011a850:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f011a856:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011a85c:	ba 00 00 00 00       	mov    $0x0,%edx
f011a861:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f011a867:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011a86d:	29 d0                	sub    %edx,%eax
f011a86f:	01 c8                	add    %ecx,%eax
f011a871:	8d 90 00 50 e0 f7    	lea    -0x81fb000(%eax),%edx
f011a877:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011a87d:	39 c2                	cmp    %eax,%edx
f011a87f:	74 17                	je     f011a898 <test_kmalloc_nextfit+0xdeb>
		panic("Next Fit not working correctly");
f011a881:	83 ec 04             	sub    $0x4,%esp
f011a884:	68 40 a2 13 f0       	push   $0xf013a240
f011a889:	68 4d 01 00 00       	push   $0x14d
f011a88e:	68 32 9f 13 f0       	push   $0xf0139f32
f011a893:	e8 18 59 fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a898:	e8 e7 9d fe ff       	call   f0104684 <pf_calculate_free_frames>
f011a89d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a8a0:	74 17                	je     f011a8b9 <test_kmalloc_nextfit+0xe0c>
f011a8a2:	83 ec 04             	sub    $0x4,%esp
f011a8a5:	68 4c 9f 13 f0       	push   $0xf0139f4c
f011a8aa:	68 4e 01 00 00       	push   $0x14e
f011a8af:	68 32 9f 13 f0       	push   $0xf0139f32
f011a8b4:	e8 f7 58 fe ff       	call   f01001b0 <_panic>

	if ((freeFrames - sys_calculate_free_frames()) != (1*Mega+1016*kilo)/PAGE_SIZE) panic("Wrong allocation");
f011a8b9:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011a8bc:	e8 7d 25 ff ff       	call   f010ce3e <sys_calculate_free_frames>
f011a8c1:	29 c3                	sub    %eax,%ebx
f011a8c3:	89 d8                	mov    %ebx,%eax
f011a8c5:	3d fe 01 00 00       	cmp    $0x1fe,%eax
f011a8ca:	74 17                	je     f011a8e3 <test_kmalloc_nextfit+0xe36>
f011a8cc:	83 ec 04             	sub    $0x4,%esp
f011a8cf:	68 ef a1 13 f0       	push   $0xf013a1ef
f011a8d4:	68 50 01 00 00       	push   $0x150
f011a8d9:	68 32 9f 13 f0       	push   $0xf0139f32
f011a8de:	e8 cd 58 fe ff       	call   f01001b0 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f011a8e3:	e8 9c 9d fe ff       	call   f0104684 <pf_calculate_free_frames>
f011a8e8:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011a8eb:	e8 4e 25 ff ff       	call   f010ce3e <sys_calculate_free_frames>
f011a8f0:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(512*kilo); 			   // Use Hole 5 -> Hole 5 = 1.5 M
f011a8f3:	83 ec 0c             	sub    $0xc,%esp
f011a8f6:	68 00 00 08 00       	push   $0x80000
f011a8fb:	e8 53 d9 fe ff       	call   f0108253 <kmalloc>
f011a900:	83 c4 10             	add    $0x10,%esp
f011a903:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x02800000)
f011a909:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f011a910:	10 00 00 
f011a913:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011a918:	0f b6 d0             	movzbl %al,%edx
f011a91b:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011a921:	01 d0                	add    %edx,%eax
f011a923:	48                   	dec    %eax
f011a924:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f011a92a:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011a930:	ba 00 00 00 00       	mov    $0x0,%edx
f011a935:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f011a93b:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011a941:	29 d0                	sub    %edx,%eax
f011a943:	89 c1                	mov    %eax,%ecx
f011a945:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f011a94c:	10 00 00 
f011a94f:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011a954:	0f b6 c0             	movzbl %al,%eax
f011a957:	c1 e0 04             	shl    $0x4,%eax
f011a95a:	89 c2                	mov    %eax,%edx
f011a95c:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011a962:	01 d0                	add    %edx,%eax
f011a964:	48                   	dec    %eax
f011a965:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f011a96b:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011a971:	ba 00 00 00 00       	mov    $0x0,%edx
f011a976:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f011a97c:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011a982:	29 d0                	sub    %edx,%eax
f011a984:	01 c8                	add    %ecx,%eax
f011a986:	8d 90 00 40 80 f8    	lea    -0x77fc000(%eax),%edx
f011a98c:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011a992:	39 c2                	cmp    %eax,%edx
f011a994:	74 17                	je     f011a9ad <test_kmalloc_nextfit+0xf00>
		panic("Next Fit not working correctly");
f011a996:	83 ec 04             	sub    $0x4,%esp
f011a999:	68 40 a2 13 f0       	push   $0xf013a240
f011a99e:	68 56 01 00 00       	push   $0x156
f011a9a3:	68 32 9f 13 f0       	push   $0xf0139f32
f011a9a8:	e8 03 58 fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a9ad:	e8 d2 9c fe ff       	call   f0104684 <pf_calculate_free_frames>
f011a9b2:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a9b5:	74 17                	je     f011a9ce <test_kmalloc_nextfit+0xf21>
f011a9b7:	83 ec 04             	sub    $0x4,%esp
f011a9ba:	68 4c 9f 13 f0       	push   $0xf0139f4c
f011a9bf:	68 57 01 00 00       	push   $0x157
f011a9c4:	68 32 9f 13 f0       	push   $0xf0139f32
f011a9c9:	e8 e2 57 fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (512*kilo)/PAGE_SIZE) panic("Wrong allocation");
f011a9ce:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011a9d1:	e8 68 24 ff ff       	call   f010ce3e <sys_calculate_free_frames>
f011a9d6:	29 c3                	sub    %eax,%ebx
f011a9d8:	89 d8                	mov    %ebx,%eax
f011a9da:	3d 80 00 00 00       	cmp    $0x80,%eax
f011a9df:	74 17                	je     f011a9f8 <test_kmalloc_nextfit+0xf4b>
f011a9e1:	83 ec 04             	sub    $0x4,%esp
f011a9e4:	68 ef a1 13 f0       	push   $0xf013a1ef
f011a9e9:	68 58 01 00 00       	push   $0x158
f011a9ee:	68 32 9f 13 f0       	push   $0xf0139f32
f011a9f3:	e8 b8 57 fe ff       	call   f01001b0 <_panic>

	cprintf("\nCASE1: (next fit without looping back) is succeeded...\n") ;
f011a9f8:	83 ec 0c             	sub    $0xc,%esp
f011a9fb:	68 60 a2 13 f0       	push   $0xf013a260
f011aa00:	e8 2c 64 fe ff       	call   f0100e31 <cprintf>
f011aa05:	83 c4 10             	add    $0x10,%esp
	/******************************/

	// Check that next fit is looping back to check for free space
	freeDiskFrames = pf_calculate_free_frames() ;
f011aa08:	e8 77 9c fe ff       	call   f0104684 <pf_calculate_free_frames>
f011aa0d:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011aa10:	e8 29 24 ff ff       	call   f010ce3e <sys_calculate_free_frames>
f011aa15:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(3*Mega + 512*kilo); 			   // Use Hole 2 -> Hole 2 = 0.5 M
f011aa18:	83 ec 0c             	sub    $0xc,%esp
f011aa1b:	68 00 00 38 00       	push   $0x380000
f011aa20:	e8 2e d8 fe ff       	call   f0108253 <kmalloc>
f011aa25:	83 c4 10             	add    $0x10,%esp
f011aa28:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00400000)
f011aa2e:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f011aa35:	10 00 00 
f011aa38:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011aa3d:	0f b6 d0             	movzbl %al,%edx
f011aa40:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011aa46:	01 d0                	add    %edx,%eax
f011aa48:	48                   	dec    %eax
f011aa49:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f011aa4f:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011aa55:	ba 00 00 00 00       	mov    $0x0,%edx
f011aa5a:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f011aa60:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011aa66:	29 d0                	sub    %edx,%eax
f011aa68:	89 c1                	mov    %eax,%ecx
f011aa6a:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f011aa71:	10 00 00 
f011aa74:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011aa79:	0f b6 c0             	movzbl %al,%eax
f011aa7c:	c1 e0 04             	shl    $0x4,%eax
f011aa7f:	89 c2                	mov    %eax,%edx
f011aa81:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011aa87:	01 d0                	add    %edx,%eax
f011aa89:	48                   	dec    %eax
f011aa8a:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f011aa90:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011aa96:	ba 00 00 00 00       	mov    $0x0,%edx
f011aa9b:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f011aaa1:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011aaa7:	29 d0                	sub    %edx,%eax
f011aaa9:	01 c8                	add    %ecx,%eax
f011aaab:	8d 90 00 40 40 f6    	lea    -0x9bfc000(%eax),%edx
f011aab1:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011aab7:	39 c2                	cmp    %eax,%edx
f011aab9:	74 17                	je     f011aad2 <test_kmalloc_nextfit+0x1025>
		panic("Next Fit not working correctly");
f011aabb:	83 ec 04             	sub    $0x4,%esp
f011aabe:	68 40 a2 13 f0       	push   $0xf013a240
f011aac3:	68 62 01 00 00       	push   $0x162
f011aac8:	68 32 9f 13 f0       	push   $0xf0139f32
f011aacd:	e8 de 56 fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011aad2:	e8 ad 9b fe ff       	call   f0104684 <pf_calculate_free_frames>
f011aad7:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011aada:	74 17                	je     f011aaf3 <test_kmalloc_nextfit+0x1046>
f011aadc:	83 ec 04             	sub    $0x4,%esp
f011aadf:	68 4c 9f 13 f0       	push   $0xf0139f4c
f011aae4:	68 63 01 00 00       	push   $0x163
f011aae9:	68 32 9f 13 f0       	push   $0xf0139f32
f011aaee:	e8 bd 56 fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (3*Mega+512*kilo)/PAGE_SIZE) panic("Wrong allocation");
f011aaf3:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011aaf6:	e8 43 23 ff ff       	call   f010ce3e <sys_calculate_free_frames>
f011aafb:	29 c3                	sub    %eax,%ebx
f011aafd:	89 d8                	mov    %ebx,%eax
f011aaff:	3d 80 03 00 00       	cmp    $0x380,%eax
f011ab04:	74 17                	je     f011ab1d <test_kmalloc_nextfit+0x1070>
f011ab06:	83 ec 04             	sub    $0x4,%esp
f011ab09:	68 ef a1 13 f0       	push   $0xf013a1ef
f011ab0e:	68 64 01 00 00       	push   $0x164
f011ab13:	68 32 9f 13 f0       	push   $0xf0139f32
f011ab18:	e8 93 56 fe ff       	call   f01001b0 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f011ab1d:	e8 62 9b fe ff       	call   f0104684 <pf_calculate_free_frames>
f011ab22:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011ab25:	e8 14 23 ff ff       	call   f010ce3e <sys_calculate_free_frames>
f011ab2a:	89 45 f0             	mov    %eax,-0x10(%ebp)
	kfree(ptr_allocations[24]);		// Increase size of Hole 6 to 4 M
f011ab2d:	8b 85 88 fc ff ff    	mov    -0x378(%ebp),%eax
f011ab33:	83 ec 0c             	sub    $0xc,%esp
f011ab36:	50                   	push   %eax
f011ab37:	e8 a2 d8 fe ff       	call   f01083de <kfree>
f011ab3c:	83 c4 10             	add    $0x10,%esp
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ab3f:	e8 40 9b fe ff       	call   f0104684 <pf_calculate_free_frames>
f011ab44:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011ab47:	74 17                	je     f011ab60 <test_kmalloc_nextfit+0x10b3>
f011ab49:	83 ec 04             	sub    $0x4,%esp
f011ab4c:	68 4c 9f 13 f0       	push   $0xf0139f4c
f011ab51:	68 69 01 00 00       	push   $0x169
f011ab56:	68 32 9f 13 f0       	push   $0xf0139f32
f011ab5b:	e8 50 56 fe ff       	call   f01001b0 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) != (2*Mega)/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f011ab60:	e8 d9 22 ff ff       	call   f010ce3e <sys_calculate_free_frames>
f011ab65:	89 c2                	mov    %eax,%edx
f011ab67:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011ab6a:	29 c2                	sub    %eax,%edx
f011ab6c:	89 d0                	mov    %edx,%eax
f011ab6e:	3d 00 02 00 00       	cmp    $0x200,%eax
f011ab73:	74 17                	je     f011ab8c <test_kmalloc_nextfit+0x10df>
f011ab75:	83 ec 04             	sub    $0x4,%esp
f011ab78:	68 00 a2 13 f0       	push   $0xf013a200
f011ab7d:	68 6a 01 00 00       	push   $0x16a
f011ab82:	68 32 9f 13 f0       	push   $0xf0139f32
f011ab87:	e8 24 56 fe ff       	call   f01001b0 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f011ab8c:	e8 f3 9a fe ff       	call   f0104684 <pf_calculate_free_frames>
f011ab91:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011ab94:	e8 a5 22 ff ff       	call   f010ce3e <sys_calculate_free_frames>
f011ab99:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(4*Mega-kilo);		// Use Hole 6 -> Hole 6 = 0 M
f011ab9c:	83 ec 0c             	sub    $0xc,%esp
f011ab9f:	68 00 fc 3f 00       	push   $0x3ffc00
f011aba4:	e8 aa d6 fe ff       	call   f0108253 <kmalloc>
f011aba9:	83 c4 10             	add    $0x10,%esp
f011abac:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x03000000)
f011abb2:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f011abb9:	10 00 00 
f011abbc:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011abc1:	0f b6 d0             	movzbl %al,%edx
f011abc4:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011abca:	01 d0                	add    %edx,%eax
f011abcc:	48                   	dec    %eax
f011abcd:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f011abd3:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011abd9:	ba 00 00 00 00       	mov    $0x0,%edx
f011abde:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f011abe4:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011abea:	29 d0                	sub    %edx,%eax
f011abec:	89 c1                	mov    %eax,%ecx
f011abee:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f011abf5:	10 00 00 
f011abf8:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011abfd:	0f b6 c0             	movzbl %al,%eax
f011ac00:	c1 e0 04             	shl    $0x4,%eax
f011ac03:	89 c2                	mov    %eax,%edx
f011ac05:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011ac0b:	01 d0                	add    %edx,%eax
f011ac0d:	48                   	dec    %eax
f011ac0e:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f011ac14:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011ac1a:	ba 00 00 00 00       	mov    $0x0,%edx
f011ac1f:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f011ac25:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011ac2b:	29 d0                	sub    %edx,%eax
f011ac2d:	01 c8                	add    %ecx,%eax
f011ac2f:	8d 90 00 40 00 f9    	lea    -0x6ffc000(%eax),%edx
f011ac35:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011ac3b:	39 c2                	cmp    %eax,%edx
f011ac3d:	74 17                	je     f011ac56 <test_kmalloc_nextfit+0x11a9>
		panic("Next Fit not working correctly");
f011ac3f:	83 ec 04             	sub    $0x4,%esp
f011ac42:	68 40 a2 13 f0       	push   $0xf013a240
f011ac47:	68 70 01 00 00       	push   $0x170
f011ac4c:	68 32 9f 13 f0       	push   $0xf0139f32
f011ac51:	e8 5a 55 fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ac56:	e8 29 9a fe ff       	call   f0104684 <pf_calculate_free_frames>
f011ac5b:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011ac5e:	74 17                	je     f011ac77 <test_kmalloc_nextfit+0x11ca>
f011ac60:	83 ec 04             	sub    $0x4,%esp
f011ac63:	68 4c 9f 13 f0       	push   $0xf0139f4c
f011ac68:	68 71 01 00 00       	push   $0x171
f011ac6d:	68 32 9f 13 f0       	push   $0xf0139f32
f011ac72:	e8 39 55 fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (4*Mega)/PAGE_SIZE) panic("Wrong allocation");
f011ac77:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011ac7a:	e8 bf 21 ff ff       	call   f010ce3e <sys_calculate_free_frames>
f011ac7f:	29 c3                	sub    %eax,%ebx
f011ac81:	89 d8                	mov    %ebx,%eax
f011ac83:	3d 00 04 00 00       	cmp    $0x400,%eax
f011ac88:	74 17                	je     f011aca1 <test_kmalloc_nextfit+0x11f4>
f011ac8a:	83 ec 04             	sub    $0x4,%esp
f011ac8d:	68 ef a1 13 f0       	push   $0xf013a1ef
f011ac92:	68 72 01 00 00       	push   $0x172
f011ac97:	68 32 9f 13 f0       	push   $0xf0139f32
f011ac9c:	e8 0f 55 fe ff       	call   f01001b0 <_panic>

	cprintf("\nCASE2: (next fit WITH looping back) is succeeded...\n") ;
f011aca1:	83 ec 0c             	sub    $0xc,%esp
f011aca4:	68 9c a2 13 f0       	push   $0xf013a29c
f011aca9:	e8 83 61 fe ff       	call   f0100e31 <cprintf>
f011acae:	83 c4 10             	add    $0x10,%esp
	/******************************/

	// Check that next fit returns null in case all holes are not free
	freeDiskFrames = pf_calculate_free_frames() ;
f011acb1:	e8 ce 99 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011acb6:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011acb9:	e8 80 21 ff ff       	call   f010ce3e <sys_calculate_free_frames>
f011acbe:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(6*Mega); 			   // No Suitable Hole is available
f011acc1:	83 ec 0c             	sub    $0xc,%esp
f011acc4:	68 00 00 60 00       	push   $0x600000
f011acc9:	e8 85 d5 fe ff       	call   f0108253 <kmalloc>
f011acce:	83 c4 10             	add    $0x10,%esp
f011acd1:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != 0x0)
f011acd7:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011acdd:	85 c0                	test   %eax,%eax
f011acdf:	74 17                	je     f011acf8 <test_kmalloc_nextfit+0x124b>
		panic("Next Fit not working correctly");
f011ace1:	83 ec 04             	sub    $0x4,%esp
f011ace4:	68 40 a2 13 f0       	push   $0xf013a240
f011ace9:	68 7c 01 00 00       	push   $0x17c
f011acee:	68 32 9f 13 f0       	push   $0xf0139f32
f011acf3:	e8 b8 54 fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011acf8:	e8 87 99 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011acfd:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011ad00:	74 17                	je     f011ad19 <test_kmalloc_nextfit+0x126c>
f011ad02:	83 ec 04             	sub    $0x4,%esp
f011ad05:	68 4c 9f 13 f0       	push   $0xf0139f4c
f011ad0a:	68 7d 01 00 00       	push   $0x17d
f011ad0f:	68 32 9f 13 f0       	push   $0xf0139f32
f011ad14:	e8 97 54 fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation");
f011ad19:	e8 20 21 ff ff       	call   f010ce3e <sys_calculate_free_frames>
f011ad1e:	89 c2                	mov    %eax,%edx
f011ad20:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011ad23:	39 c2                	cmp    %eax,%edx
f011ad25:	74 17                	je     f011ad3e <test_kmalloc_nextfit+0x1291>
f011ad27:	83 ec 04             	sub    $0x4,%esp
f011ad2a:	68 ef a1 13 f0       	push   $0xf013a1ef
f011ad2f:	68 7e 01 00 00       	push   $0x17e
f011ad34:	68 32 9f 13 f0       	push   $0xf0139f32
f011ad39:	e8 72 54 fe ff       	call   f01001b0 <_panic>

	cprintf("\nCASE3: (next fit with insufficient space) is succeeded...\n") ;
f011ad3e:	83 ec 0c             	sub    $0xc,%esp
f011ad41:	68 d4 a2 13 f0       	push   $0xf013a2d4
f011ad46:	e8 e6 60 fe ff       	call   f0100e31 <cprintf>
f011ad4b:	83 c4 10             	add    $0x10,%esp
	/******************************/

	cprintf("Congratulations!! test Next Fit completed successfully.\n");
f011ad4e:	83 ec 0c             	sub    $0xc,%esp
f011ad51:	68 10 a3 13 f0       	push   $0xf013a310
f011ad56:	e8 d6 60 fe ff       	call   f0100e31 <cprintf>
f011ad5b:	83 c4 10             	add    $0x10,%esp
	return 1;
f011ad5e:	b8 01 00 00 00       	mov    $0x1,%eax

}
f011ad63:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011ad66:	5b                   	pop    %ebx
f011ad67:	5f                   	pop    %edi
f011ad68:	5d                   	pop    %ebp
f011ad69:	c3                   	ret    

f011ad6a <test_kmalloc_bestfit1>:

int test_kmalloc_bestfit1()
{
f011ad6a:	55                   	push   %ebp
f011ad6b:	89 e5                	mov    %esp,%ebp
f011ad6d:	57                   	push   %edi
f011ad6e:	53                   	push   %ebx
f011ad6f:	81 ec 30 01 00 00    	sub    $0x130,%esp
	cprintf("==============================================\n");
f011ad75:	83 ec 0c             	sub    $0xc,%esp
f011ad78:	68 74 9e 13 f0       	push   $0xf0139e74
f011ad7d:	e8 af 60 fe ff       	call   f0100e31 <cprintf>
f011ad82:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011ad85:	83 ec 0c             	sub    $0xc,%esp
f011ad88:	68 a4 9e 13 f0       	push   $0xf0139ea4
f011ad8d:	e8 9f 60 fe ff       	call   f0100e31 <cprintf>
f011ad92:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011ad95:	83 ec 0c             	sub    $0xc,%esp
f011ad98:	68 74 9e 13 f0       	push   $0xf0139e74
f011ad9d:	e8 8f 60 fe ff       	call   f0100e31 <cprintf>
f011ada2:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011ada5:	8d 95 d0 fe ff ff    	lea    -0x130(%ebp),%edx
f011adab:	b9 14 00 00 00       	mov    $0x14,%ecx
f011adb0:	b8 00 00 00 00       	mov    $0x0,%eax
f011adb5:	89 d7                	mov    %edx,%edi
f011adb7:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeDiskFrames;

	//[1] Allocate all
	{
		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f011adb9:	e8 80 20 ff ff       	call   f010ce3e <sys_calculate_free_frames>
f011adbe:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011adc1:	e8 be 98 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011adc6:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[0] = kmalloc(3*Mega-kilo);
f011adc9:	83 ec 0c             	sub    $0xc,%esp
f011adcc:	68 00 fc 2f 00       	push   $0x2ffc00
f011add1:	e8 7d d4 fe ff       	call   f0108253 <kmalloc>
f011add6:	83 c4 10             	add    $0x10,%esp
f011add9:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011addf:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011ade5:	89 c1                	mov    %eax,%ecx
f011ade7:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f011adee:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011adf3:	0f b6 d0             	movzbl %al,%edx
f011adf6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011adf9:	01 d0                	add    %edx,%eax
f011adfb:	48                   	dec    %eax
f011adfc:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011adff:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011ae02:	ba 00 00 00 00       	mov    $0x0,%edx
f011ae07:	f7 75 ec             	divl   -0x14(%ebp)
f011ae0a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011ae0d:	29 d0                	sub    %edx,%eax
f011ae0f:	89 c3                	mov    %eax,%ebx
f011ae11:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011ae18:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011ae1d:	0f b6 c0             	movzbl %al,%eax
f011ae20:	c1 e0 04             	shl    $0x4,%eax
f011ae23:	89 c2                	mov    %eax,%edx
f011ae25:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011ae28:	01 d0                	add    %edx,%eax
f011ae2a:	48                   	dec    %eax
f011ae2b:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011ae2e:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011ae31:	ba 00 00 00 00       	mov    $0x0,%edx
f011ae36:	f7 75 e4             	divl   -0x1c(%ebp)
f011ae39:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011ae3c:	29 d0                	sub    %edx,%eax
f011ae3e:	01 d8                	add    %ebx,%eax
f011ae40:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011ae45:	39 c1                	cmp    %eax,%ecx
f011ae47:	74 17                	je     f011ae60 <test_kmalloc_bestfit1+0xf6>
f011ae49:	83 ec 04             	sub    $0x4,%esp
f011ae4c:	68 4c a3 13 f0       	push   $0xf013a34c
f011ae51:	68 98 01 00 00       	push   $0x198
f011ae56:	68 32 9f 13 f0       	push   $0xf0139f32
f011ae5b:	e8 50 53 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ae60:	e8 1f 98 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011ae65:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011ae68:	74 17                	je     f011ae81 <test_kmalloc_bestfit1+0x117>
f011ae6a:	83 ec 04             	sub    $0x4,%esp
f011ae6d:	68 4c 9f 13 f0       	push   $0xf0139f4c
f011ae72:	68 99 01 00 00       	push   $0x199
f011ae77:	68 32 9f 13 f0       	push   $0xf0139f32
f011ae7c:	e8 2f 53 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((3*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011ae81:	e8 b8 1f ff ff       	call   f010ce3e <sys_calculate_free_frames>
f011ae86:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011ae89:	29 c2                	sub    %eax,%edx
f011ae8b:	89 d0                	mov    %edx,%eax
f011ae8d:	3d 00 03 00 00       	cmp    $0x300,%eax
f011ae92:	74 17                	je     f011aeab <test_kmalloc_bestfit1+0x141>
f011ae94:	83 ec 04             	sub    $0x4,%esp
f011ae97:	68 7c a3 13 f0       	push   $0xf013a37c
f011ae9c:	68 9a 01 00 00       	push   $0x19a
f011aea1:	68 32 9f 13 f0       	push   $0xf0139f32
f011aea6:	e8 05 53 fe ff       	call   f01001b0 <_panic>

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f011aeab:	e8 8e 1f ff ff       	call   f010ce3e <sys_calculate_free_frames>
f011aeb0:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011aeb3:	e8 cc 97 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011aeb8:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[1] = kmalloc(3*Mega-kilo);
f011aebb:	83 ec 0c             	sub    $0xc,%esp
f011aebe:	68 00 fc 2f 00       	push   $0x2ffc00
f011aec3:	e8 8b d3 fe ff       	call   f0108253 <kmalloc>
f011aec8:	83 c4 10             	add    $0x10,%esp
f011aecb:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
		if ((uint32) ptr_allocations[1] !=  (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... ");
f011aed1:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011aed7:	89 c1                	mov    %eax,%ecx
f011aed9:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f011aee0:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011aee5:	0f b6 d0             	movzbl %al,%edx
f011aee8:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011aeeb:	01 d0                	add    %edx,%eax
f011aeed:	48                   	dec    %eax
f011aeee:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011aef1:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011aef4:	ba 00 00 00 00       	mov    $0x0,%edx
f011aef9:	f7 75 dc             	divl   -0x24(%ebp)
f011aefc:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011aeff:	29 d0                	sub    %edx,%eax
f011af01:	89 c3                	mov    %eax,%ebx
f011af03:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011af0a:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011af0f:	0f b6 c0             	movzbl %al,%eax
f011af12:	c1 e0 04             	shl    $0x4,%eax
f011af15:	89 c2                	mov    %eax,%edx
f011af17:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011af1a:	01 d0                	add    %edx,%eax
f011af1c:	48                   	dec    %eax
f011af1d:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011af20:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011af23:	ba 00 00 00 00       	mov    $0x0,%edx
f011af28:	f7 75 d4             	divl   -0x2c(%ebp)
f011af2b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011af2e:	29 d0                	sub    %edx,%eax
f011af30:	01 d8                	add    %ebx,%eax
f011af32:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f011af37:	39 c1                	cmp    %eax,%ecx
f011af39:	74 17                	je     f011af52 <test_kmalloc_bestfit1+0x1e8>
f011af3b:	83 ec 04             	sub    $0x4,%esp
f011af3e:	68 4c a3 13 f0       	push   $0xf013a34c
f011af43:	68 a0 01 00 00       	push   $0x1a0
f011af48:	68 32 9f 13 f0       	push   $0xf0139f32
f011af4d:	e8 5e 52 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011af52:	e8 2d 97 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011af57:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011af5a:	74 17                	je     f011af73 <test_kmalloc_bestfit1+0x209>
f011af5c:	83 ec 04             	sub    $0x4,%esp
f011af5f:	68 4c 9f 13 f0       	push   $0xf0139f4c
f011af64:	68 a1 01 00 00       	push   $0x1a1
f011af69:	68 32 9f 13 f0       	push   $0xf0139f32
f011af6e:	e8 3d 52 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((3*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011af73:	e8 c6 1e ff ff       	call   f010ce3e <sys_calculate_free_frames>
f011af78:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011af7b:	29 c2                	sub    %eax,%edx
f011af7d:	89 d0                	mov    %edx,%eax
f011af7f:	3d 00 03 00 00       	cmp    $0x300,%eax
f011af84:	74 17                	je     f011af9d <test_kmalloc_bestfit1+0x233>
f011af86:	83 ec 04             	sub    $0x4,%esp
f011af89:	68 7c a3 13 f0       	push   $0xf013a37c
f011af8e:	68 a2 01 00 00       	push   $0x1a2
f011af93:	68 32 9f 13 f0       	push   $0xf0139f32
f011af98:	e8 13 52 fe ff       	call   f01001b0 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011af9d:	e8 9c 1e ff ff       	call   f010ce3e <sys_calculate_free_frames>
f011afa2:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011afa5:	e8 da 96 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011afaa:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[2] = kmalloc(2*Mega-kilo);
f011afad:	83 ec 0c             	sub    $0xc,%esp
f011afb0:	68 00 fc 1f 00       	push   $0x1ffc00
f011afb5:	e8 99 d2 fe ff       	call   f0108253 <kmalloc>
f011afba:	83 c4 10             	add    $0x10,%esp
f011afbd:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) ptr_allocations[2] !=  (ACTUAL_START + 6*Mega)) panic("Wrong start address for the allocated space... ");
f011afc3:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011afc9:	89 c1                	mov    %eax,%ecx
f011afcb:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011afd2:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011afd7:	0f b6 d0             	movzbl %al,%edx
f011afda:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011afdd:	01 d0                	add    %edx,%eax
f011afdf:	48                   	dec    %eax
f011afe0:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011afe3:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011afe6:	ba 00 00 00 00       	mov    $0x0,%edx
f011afeb:	f7 75 cc             	divl   -0x34(%ebp)
f011afee:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011aff1:	29 d0                	sub    %edx,%eax
f011aff3:	89 c3                	mov    %eax,%ebx
f011aff5:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011affc:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011b001:	0f b6 c0             	movzbl %al,%eax
f011b004:	c1 e0 04             	shl    $0x4,%eax
f011b007:	89 c2                	mov    %eax,%edx
f011b009:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011b00c:	01 d0                	add    %edx,%eax
f011b00e:	48                   	dec    %eax
f011b00f:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011b012:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011b015:	ba 00 00 00 00       	mov    $0x0,%edx
f011b01a:	f7 75 c4             	divl   -0x3c(%ebp)
f011b01d:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011b020:	29 d0                	sub    %edx,%eax
f011b022:	01 d8                	add    %ebx,%eax
f011b024:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f011b029:	39 c1                	cmp    %eax,%ecx
f011b02b:	74 17                	je     f011b044 <test_kmalloc_bestfit1+0x2da>
f011b02d:	83 ec 04             	sub    $0x4,%esp
f011b030:	68 4c a3 13 f0       	push   $0xf013a34c
f011b035:	68 a8 01 00 00       	push   $0x1a8
f011b03a:	68 32 9f 13 f0       	push   $0xf0139f32
f011b03f:	e8 6c 51 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b044:	e8 3b 96 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011b049:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b04c:	74 17                	je     f011b065 <test_kmalloc_bestfit1+0x2fb>
f011b04e:	83 ec 04             	sub    $0x4,%esp
f011b051:	68 4c 9f 13 f0       	push   $0xf0139f4c
f011b056:	68 a9 01 00 00       	push   $0x1a9
f011b05b:	68 32 9f 13 f0       	push   $0xf0139f32
f011b060:	e8 4b 51 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((2*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011b065:	e8 d4 1d ff ff       	call   f010ce3e <sys_calculate_free_frames>
f011b06a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b06d:	29 c2                	sub    %eax,%edx
f011b06f:	89 d0                	mov    %edx,%eax
f011b071:	3d 00 02 00 00       	cmp    $0x200,%eax
f011b076:	74 17                	je     f011b08f <test_kmalloc_bestfit1+0x325>
f011b078:	83 ec 04             	sub    $0x4,%esp
f011b07b:	68 7c a3 13 f0       	push   $0xf013a37c
f011b080:	68 aa 01 00 00       	push   $0x1aa
f011b085:	68 32 9f 13 f0       	push   $0xf0139f32
f011b08a:	e8 21 51 fe ff       	call   f01001b0 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011b08f:	e8 aa 1d ff ff       	call   f010ce3e <sys_calculate_free_frames>
f011b094:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b097:	e8 e8 95 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011b09c:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[3] = kmalloc(2*Mega-kilo);
f011b09f:	83 ec 0c             	sub    $0xc,%esp
f011b0a2:	68 00 fc 1f 00       	push   $0x1ffc00
f011b0a7:	e8 a7 d1 fe ff       	call   f0108253 <kmalloc>
f011b0ac:	83 c4 10             	add    $0x10,%esp
f011b0af:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f011b0b5:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011b0bb:	89 c1                	mov    %eax,%ecx
f011b0bd:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011b0c4:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011b0c9:	0f b6 d0             	movzbl %al,%edx
f011b0cc:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011b0cf:	01 d0                	add    %edx,%eax
f011b0d1:	48                   	dec    %eax
f011b0d2:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011b0d5:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011b0d8:	ba 00 00 00 00       	mov    $0x0,%edx
f011b0dd:	f7 75 bc             	divl   -0x44(%ebp)
f011b0e0:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011b0e3:	29 d0                	sub    %edx,%eax
f011b0e5:	89 c3                	mov    %eax,%ebx
f011b0e7:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011b0ee:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011b0f3:	0f b6 c0             	movzbl %al,%eax
f011b0f6:	c1 e0 04             	shl    $0x4,%eax
f011b0f9:	89 c2                	mov    %eax,%edx
f011b0fb:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011b0fe:	01 d0                	add    %edx,%eax
f011b100:	48                   	dec    %eax
f011b101:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011b104:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011b107:	ba 00 00 00 00       	mov    $0x0,%edx
f011b10c:	f7 75 b4             	divl   -0x4c(%ebp)
f011b10f:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011b112:	29 d0                	sub    %edx,%eax
f011b114:	01 d8                	add    %ebx,%eax
f011b116:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f011b11b:	39 c1                	cmp    %eax,%ecx
f011b11d:	74 17                	je     f011b136 <test_kmalloc_bestfit1+0x3cc>
f011b11f:	83 ec 04             	sub    $0x4,%esp
f011b122:	68 4c a3 13 f0       	push   $0xf013a34c
f011b127:	68 b0 01 00 00       	push   $0x1b0
f011b12c:	68 32 9f 13 f0       	push   $0xf0139f32
f011b131:	e8 7a 50 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b136:	e8 49 95 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011b13b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b13e:	74 17                	je     f011b157 <test_kmalloc_bestfit1+0x3ed>
f011b140:	83 ec 04             	sub    $0x4,%esp
f011b143:	68 4c 9f 13 f0       	push   $0xf0139f4c
f011b148:	68 b1 01 00 00       	push   $0x1b1
f011b14d:	68 32 9f 13 f0       	push   $0xf0139f32
f011b152:	e8 59 50 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  ((2*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011b157:	e8 e2 1c ff ff       	call   f010ce3e <sys_calculate_free_frames>
f011b15c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b15f:	29 c2                	sub    %eax,%edx
f011b161:	89 d0                	mov    %edx,%eax
f011b163:	3d 00 02 00 00       	cmp    $0x200,%eax
f011b168:	74 17                	je     f011b181 <test_kmalloc_bestfit1+0x417>
f011b16a:	83 ec 04             	sub    $0x4,%esp
f011b16d:	68 7c a3 13 f0       	push   $0xf013a37c
f011b172:	68 b2 01 00 00       	push   $0x1b2
f011b177:	68 32 9f 13 f0       	push   $0xf0139f32
f011b17c:	e8 2f 50 fe ff       	call   f01001b0 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011b181:	e8 b8 1c ff ff       	call   f010ce3e <sys_calculate_free_frames>
f011b186:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b189:	e8 f6 94 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011b18e:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[4] = kmalloc(1*Mega-kilo);
f011b191:	83 ec 0c             	sub    $0xc,%esp
f011b194:	68 00 fc 0f 00       	push   $0xffc00
f011b199:	e8 b5 d0 fe ff       	call   f0108253 <kmalloc>
f011b19e:	83 c4 10             	add    $0x10,%esp
f011b1a1:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if ((uint32) ptr_allocations[4] !=  (ACTUAL_START + 10*Mega)) panic("Wrong start address for the allocated space... ");
f011b1a7:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011b1ad:	89 c1                	mov    %eax,%ecx
f011b1af:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011b1b6:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011b1bb:	0f b6 d0             	movzbl %al,%edx
f011b1be:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011b1c1:	01 d0                	add    %edx,%eax
f011b1c3:	48                   	dec    %eax
f011b1c4:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011b1c7:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011b1ca:	ba 00 00 00 00       	mov    $0x0,%edx
f011b1cf:	f7 75 ac             	divl   -0x54(%ebp)
f011b1d2:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011b1d5:	29 d0                	sub    %edx,%eax
f011b1d7:	89 c3                	mov    %eax,%ebx
f011b1d9:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011b1e0:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011b1e5:	0f b6 c0             	movzbl %al,%eax
f011b1e8:	c1 e0 04             	shl    $0x4,%eax
f011b1eb:	89 c2                	mov    %eax,%edx
f011b1ed:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011b1f0:	01 d0                	add    %edx,%eax
f011b1f2:	48                   	dec    %eax
f011b1f3:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011b1f6:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011b1f9:	ba 00 00 00 00       	mov    $0x0,%edx
f011b1fe:	f7 75 a4             	divl   -0x5c(%ebp)
f011b201:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011b204:	29 d0                	sub    %edx,%eax
f011b206:	01 d8                	add    %ebx,%eax
f011b208:	2d 00 c0 5f 09       	sub    $0x95fc000,%eax
f011b20d:	39 c1                	cmp    %eax,%ecx
f011b20f:	74 17                	je     f011b228 <test_kmalloc_bestfit1+0x4be>
f011b211:	83 ec 04             	sub    $0x4,%esp
f011b214:	68 4c a3 13 f0       	push   $0xf013a34c
f011b219:	68 b8 01 00 00       	push   $0x1b8
f011b21e:	68 32 9f 13 f0       	push   $0xf0139f32
f011b223:	e8 88 4f fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b228:	e8 57 94 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011b22d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b230:	74 17                	je     f011b249 <test_kmalloc_bestfit1+0x4df>
f011b232:	83 ec 04             	sub    $0x4,%esp
f011b235:	68 4c 9f 13 f0       	push   $0xf0139f4c
f011b23a:	68 b9 01 00 00       	push   $0x1b9
f011b23f:	68 32 9f 13 f0       	push   $0xf0139f32
f011b244:	e8 67 4f fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011b249:	e8 f0 1b ff ff       	call   f010ce3e <sys_calculate_free_frames>
f011b24e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b251:	29 c2                	sub    %eax,%edx
f011b253:	89 d0                	mov    %edx,%eax
f011b255:	3d 00 01 00 00       	cmp    $0x100,%eax
f011b25a:	74 17                	je     f011b273 <test_kmalloc_bestfit1+0x509>
f011b25c:	83 ec 04             	sub    $0x4,%esp
f011b25f:	68 7c a3 13 f0       	push   $0xf013a37c
f011b264:	68 ba 01 00 00       	push   $0x1ba
f011b269:	68 32 9f 13 f0       	push   $0xf0139f32
f011b26e:	e8 3d 4f fe ff       	call   f01001b0 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011b273:	e8 c6 1b ff ff       	call   f010ce3e <sys_calculate_free_frames>
f011b278:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b27b:	e8 04 94 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011b280:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[5] = kmalloc(1*Mega-kilo);
f011b283:	83 ec 0c             	sub    $0xc,%esp
f011b286:	68 00 fc 0f 00       	push   $0xffc00
f011b28b:	e8 c3 cf fe ff       	call   f0108253 <kmalloc>
f011b290:	83 c4 10             	add    $0x10,%esp
f011b293:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 11*Mega)) panic("Wrong start address for the allocated space... ");
f011b299:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011b29f:	89 c1                	mov    %eax,%ecx
f011b2a1:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011b2a8:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011b2ad:	0f b6 d0             	movzbl %al,%edx
f011b2b0:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011b2b3:	01 d0                	add    %edx,%eax
f011b2b5:	48                   	dec    %eax
f011b2b6:	89 45 98             	mov    %eax,-0x68(%ebp)
f011b2b9:	8b 45 98             	mov    -0x68(%ebp),%eax
f011b2bc:	ba 00 00 00 00       	mov    $0x0,%edx
f011b2c1:	f7 75 9c             	divl   -0x64(%ebp)
f011b2c4:	8b 45 98             	mov    -0x68(%ebp),%eax
f011b2c7:	29 d0                	sub    %edx,%eax
f011b2c9:	89 c3                	mov    %eax,%ebx
f011b2cb:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011b2d2:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011b2d7:	0f b6 c0             	movzbl %al,%eax
f011b2da:	c1 e0 04             	shl    $0x4,%eax
f011b2dd:	89 c2                	mov    %eax,%edx
f011b2df:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011b2e2:	01 d0                	add    %edx,%eax
f011b2e4:	48                   	dec    %eax
f011b2e5:	89 45 90             	mov    %eax,-0x70(%ebp)
f011b2e8:	8b 45 90             	mov    -0x70(%ebp),%eax
f011b2eb:	ba 00 00 00 00       	mov    $0x0,%edx
f011b2f0:	f7 75 94             	divl   -0x6c(%ebp)
f011b2f3:	8b 45 90             	mov    -0x70(%ebp),%eax
f011b2f6:	29 d0                	sub    %edx,%eax
f011b2f8:	01 d8                	add    %ebx,%eax
f011b2fa:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f011b2ff:	39 c1                	cmp    %eax,%ecx
f011b301:	74 17                	je     f011b31a <test_kmalloc_bestfit1+0x5b0>
f011b303:	83 ec 04             	sub    $0x4,%esp
f011b306:	68 4c a3 13 f0       	push   $0xf013a34c
f011b30b:	68 c0 01 00 00       	push   $0x1c0
f011b310:	68 32 9f 13 f0       	push   $0xf0139f32
f011b315:	e8 96 4e fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b31a:	e8 65 93 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011b31f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b322:	74 17                	je     f011b33b <test_kmalloc_bestfit1+0x5d1>
f011b324:	83 ec 04             	sub    $0x4,%esp
f011b327:	68 4c 9f 13 f0       	push   $0xf0139f4c
f011b32c:	68 c1 01 00 00       	push   $0x1c1
f011b331:	68 32 9f 13 f0       	push   $0xf0139f32
f011b336:	e8 75 4e fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011b33b:	e8 fe 1a ff ff       	call   f010ce3e <sys_calculate_free_frames>
f011b340:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b343:	29 c2                	sub    %eax,%edx
f011b345:	89 d0                	mov    %edx,%eax
f011b347:	3d 00 01 00 00       	cmp    $0x100,%eax
f011b34c:	74 17                	je     f011b365 <test_kmalloc_bestfit1+0x5fb>
f011b34e:	83 ec 04             	sub    $0x4,%esp
f011b351:	68 7c a3 13 f0       	push   $0xf013a37c
f011b356:	68 c2 01 00 00       	push   $0x1c2
f011b35b:	68 32 9f 13 f0       	push   $0xf0139f32
f011b360:	e8 4b 4e fe ff       	call   f01001b0 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011b365:	e8 d4 1a ff ff       	call   f010ce3e <sys_calculate_free_frames>
f011b36a:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b36d:	e8 12 93 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011b372:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[6] = kmalloc(1*Mega-kilo);
f011b375:	83 ec 0c             	sub    $0xc,%esp
f011b378:	68 00 fc 0f 00       	push   $0xffc00
f011b37d:	e8 d1 ce fe ff       	call   f0108253 <kmalloc>
f011b382:	83 c4 10             	add    $0x10,%esp
f011b385:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 12*Mega)) panic("Wrong start address for the allocated space... ");
f011b38b:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011b391:	89 c1                	mov    %eax,%ecx
f011b393:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011b39a:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011b39f:	0f b6 d0             	movzbl %al,%edx
f011b3a2:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011b3a5:	01 d0                	add    %edx,%eax
f011b3a7:	48                   	dec    %eax
f011b3a8:	89 45 88             	mov    %eax,-0x78(%ebp)
f011b3ab:	8b 45 88             	mov    -0x78(%ebp),%eax
f011b3ae:	ba 00 00 00 00       	mov    $0x0,%edx
f011b3b3:	f7 75 8c             	divl   -0x74(%ebp)
f011b3b6:	8b 45 88             	mov    -0x78(%ebp),%eax
f011b3b9:	29 d0                	sub    %edx,%eax
f011b3bb:	89 c3                	mov    %eax,%ebx
f011b3bd:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011b3c4:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011b3c9:	0f b6 c0             	movzbl %al,%eax
f011b3cc:	c1 e0 04             	shl    $0x4,%eax
f011b3cf:	89 c2                	mov    %eax,%edx
f011b3d1:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011b3d4:	01 d0                	add    %edx,%eax
f011b3d6:	48                   	dec    %eax
f011b3d7:	89 45 80             	mov    %eax,-0x80(%ebp)
f011b3da:	8b 45 80             	mov    -0x80(%ebp),%eax
f011b3dd:	ba 00 00 00 00       	mov    $0x0,%edx
f011b3e2:	f7 75 84             	divl   -0x7c(%ebp)
f011b3e5:	8b 45 80             	mov    -0x80(%ebp),%eax
f011b3e8:	29 d0                	sub    %edx,%eax
f011b3ea:	01 d8                	add    %ebx,%eax
f011b3ec:	2d 00 c0 3f 09       	sub    $0x93fc000,%eax
f011b3f1:	39 c1                	cmp    %eax,%ecx
f011b3f3:	74 17                	je     f011b40c <test_kmalloc_bestfit1+0x6a2>
f011b3f5:	83 ec 04             	sub    $0x4,%esp
f011b3f8:	68 4c a3 13 f0       	push   $0xf013a34c
f011b3fd:	68 c8 01 00 00       	push   $0x1c8
f011b402:	68 32 9f 13 f0       	push   $0xf0139f32
f011b407:	e8 a4 4d fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b40c:	e8 73 92 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011b411:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b414:	74 17                	je     f011b42d <test_kmalloc_bestfit1+0x6c3>
f011b416:	83 ec 04             	sub    $0x4,%esp
f011b419:	68 4c 9f 13 f0       	push   $0xf0139f4c
f011b41e:	68 c9 01 00 00       	push   $0x1c9
f011b423:	68 32 9f 13 f0       	push   $0xf0139f32
f011b428:	e8 83 4d fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011b42d:	e8 0c 1a ff ff       	call   f010ce3e <sys_calculate_free_frames>
f011b432:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b435:	29 c2                	sub    %eax,%edx
f011b437:	89 d0                	mov    %edx,%eax
f011b439:	3d 00 01 00 00       	cmp    $0x100,%eax
f011b43e:	74 17                	je     f011b457 <test_kmalloc_bestfit1+0x6ed>
f011b440:	83 ec 04             	sub    $0x4,%esp
f011b443:	68 7c a3 13 f0       	push   $0xf013a37c
f011b448:	68 ca 01 00 00       	push   $0x1ca
f011b44d:	68 32 9f 13 f0       	push   $0xf0139f32
f011b452:	e8 59 4d fe ff       	call   f01001b0 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011b457:	e8 e2 19 ff ff       	call   f010ce3e <sys_calculate_free_frames>
f011b45c:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b45f:	e8 20 92 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011b464:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[7] = kmalloc(1*Mega-kilo);
f011b467:	83 ec 0c             	sub    $0xc,%esp
f011b46a:	68 00 fc 0f 00       	push   $0xffc00
f011b46f:	e8 df cd fe ff       	call   f0108253 <kmalloc>
f011b474:	83 c4 10             	add    $0x10,%esp
f011b477:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega)) panic("Wrong start address for the allocated space... ");
f011b47d:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011b483:	89 c1                	mov    %eax,%ecx
f011b485:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011b48c:	10 00 00 
f011b48f:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011b494:	0f b6 d0             	movzbl %al,%edx
f011b497:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011b49d:	01 d0                	add    %edx,%eax
f011b49f:	48                   	dec    %eax
f011b4a0:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011b4a6:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011b4ac:	ba 00 00 00 00       	mov    $0x0,%edx
f011b4b1:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011b4b7:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011b4bd:	29 d0                	sub    %edx,%eax
f011b4bf:	89 c3                	mov    %eax,%ebx
f011b4c1:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011b4c8:	10 00 00 
f011b4cb:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011b4d0:	0f b6 c0             	movzbl %al,%eax
f011b4d3:	c1 e0 04             	shl    $0x4,%eax
f011b4d6:	89 c2                	mov    %eax,%edx
f011b4d8:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011b4de:	01 d0                	add    %edx,%eax
f011b4e0:	48                   	dec    %eax
f011b4e1:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011b4e7:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011b4ed:	ba 00 00 00 00       	mov    $0x0,%edx
f011b4f2:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011b4f8:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011b4fe:	29 d0                	sub    %edx,%eax
f011b500:	01 d8                	add    %ebx,%eax
f011b502:	2d 00 c0 2f 09       	sub    $0x92fc000,%eax
f011b507:	39 c1                	cmp    %eax,%ecx
f011b509:	74 17                	je     f011b522 <test_kmalloc_bestfit1+0x7b8>
f011b50b:	83 ec 04             	sub    $0x4,%esp
f011b50e:	68 4c a3 13 f0       	push   $0xf013a34c
f011b513:	68 d0 01 00 00       	push   $0x1d0
f011b518:	68 32 9f 13 f0       	push   $0xf0139f32
f011b51d:	e8 8e 4c fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b522:	e8 5d 91 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011b527:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b52a:	74 17                	je     f011b543 <test_kmalloc_bestfit1+0x7d9>
f011b52c:	83 ec 04             	sub    $0x4,%esp
f011b52f:	68 4c 9f 13 f0       	push   $0xf0139f4c
f011b534:	68 d1 01 00 00       	push   $0x1d1
f011b539:	68 32 9f 13 f0       	push   $0xf0139f32
f011b53e:	e8 6d 4c fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011b543:	e8 f6 18 ff ff       	call   f010ce3e <sys_calculate_free_frames>
f011b548:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b54b:	29 c2                	sub    %eax,%edx
f011b54d:	89 d0                	mov    %edx,%eax
f011b54f:	3d 00 01 00 00       	cmp    $0x100,%eax
f011b554:	74 17                	je     f011b56d <test_kmalloc_bestfit1+0x803>
f011b556:	83 ec 04             	sub    $0x4,%esp
f011b559:	68 7c a3 13 f0       	push   $0xf013a37c
f011b55e:	68 d2 01 00 00       	push   $0x1d2
f011b563:	68 32 9f 13 f0       	push   $0xf0139f32
f011b568:	e8 43 4c fe ff       	call   f01001b0 <_panic>
	}

	//[2] Free some to create holes
	{
		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011b56d:	e8 cc 18 ff ff       	call   f010ce3e <sys_calculate_free_frames>
f011b572:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b575:	e8 0a 91 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011b57a:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[1]);
f011b57d:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011b583:	83 ec 0c             	sub    $0xc,%esp
f011b586:	50                   	push   %eax
f011b587:	e8 52 ce fe ff       	call   f01083de <kfree>
f011b58c:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b58f:	e8 f0 90 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011b594:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b597:	74 17                	je     f011b5b0 <test_kmalloc_bestfit1+0x846>
f011b599:	83 ec 04             	sub    $0x4,%esp
f011b59c:	68 4c 9f 13 f0       	push   $0xf0139f4c
f011b5a1:	68 db 01 00 00       	push   $0x1db
f011b5a6:	68 32 9f 13 f0       	push   $0xf0139f32
f011b5ab:	e8 00 4c fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != ((3*Mega)/PAGE_SIZE)) panic("Wrong free: ");
f011b5b0:	e8 89 18 ff ff       	call   f010ce3e <sys_calculate_free_frames>
f011b5b5:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011b5b8:	3d 00 03 00 00       	cmp    $0x300,%eax
f011b5bd:	74 17                	je     f011b5d6 <test_kmalloc_bestfit1+0x86c>
f011b5bf:	83 ec 04             	sub    $0x4,%esp
f011b5c2:	68 8f a3 13 f0       	push   $0xf013a38f
f011b5c7:	68 dc 01 00 00       	push   $0x1dc
f011b5cc:	68 32 9f 13 f0       	push   $0xf0139f32
f011b5d1:	e8 da 4b fe ff       	call   f01001b0 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011b5d6:	e8 63 18 ff ff       	call   f010ce3e <sys_calculate_free_frames>
f011b5db:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b5de:	e8 a1 90 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011b5e3:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[3]);
f011b5e6:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011b5ec:	83 ec 0c             	sub    $0xc,%esp
f011b5ef:	50                   	push   %eax
f011b5f0:	e8 e9 cd fe ff       	call   f01083de <kfree>
f011b5f5:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b5f8:	e8 87 90 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011b5fd:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b600:	74 17                	je     f011b619 <test_kmalloc_bestfit1+0x8af>
f011b602:	83 ec 04             	sub    $0x4,%esp
f011b605:	68 4c 9f 13 f0       	push   $0xf0139f4c
f011b60a:	68 e2 01 00 00       	push   $0x1e2
f011b60f:	68 32 9f 13 f0       	push   $0xf0139f32
f011b614:	e8 97 4b fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != ((2*Mega)/PAGE_SIZE)) panic("Wrong free: ");
f011b619:	e8 20 18 ff ff       	call   f010ce3e <sys_calculate_free_frames>
f011b61e:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011b621:	3d 00 02 00 00       	cmp    $0x200,%eax
f011b626:	74 17                	je     f011b63f <test_kmalloc_bestfit1+0x8d5>
f011b628:	83 ec 04             	sub    $0x4,%esp
f011b62b:	68 8f a3 13 f0       	push   $0xf013a38f
f011b630:	68 e3 01 00 00       	push   $0x1e3
f011b635:	68 32 9f 13 f0       	push   $0xf0139f32
f011b63a:	e8 71 4b fe ff       	call   f01001b0 <_panic>

		//1 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011b63f:	e8 fa 17 ff ff       	call   f010ce3e <sys_calculate_free_frames>
f011b644:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b647:	e8 38 90 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011b64c:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[5]);
f011b64f:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011b655:	83 ec 0c             	sub    $0xc,%esp
f011b658:	50                   	push   %eax
f011b659:	e8 80 cd fe ff       	call   f01083de <kfree>
f011b65e:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b661:	e8 1e 90 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011b666:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b669:	74 17                	je     f011b682 <test_kmalloc_bestfit1+0x918>
f011b66b:	83 ec 04             	sub    $0x4,%esp
f011b66e:	68 4c 9f 13 f0       	push   $0xf0139f4c
f011b673:	68 e9 01 00 00       	push   $0x1e9
f011b678:	68 32 9f 13 f0       	push   $0xf0139f32
f011b67d:	e8 2e 4b fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011b682:	e8 b7 17 ff ff       	call   f010ce3e <sys_calculate_free_frames>
f011b687:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011b68a:	3d 00 01 00 00       	cmp    $0x100,%eax
f011b68f:	74 17                	je     f011b6a8 <test_kmalloc_bestfit1+0x93e>
f011b691:	83 ec 04             	sub    $0x4,%esp
f011b694:	68 8f a3 13 f0       	push   $0xf013a38f
f011b699:	68 ea 01 00 00       	push   $0x1ea
f011b69e:	68 32 9f 13 f0       	push   $0xf0139f32
f011b6a3:	e8 08 4b fe ff       	call   f01001b0 <_panic>
	}

	//[3] Allocate again [test best fit]
	{
		//Allocate 512 KB - should be placed in 3rd hole
		freeFrames = sys_calculate_free_frames() ;
f011b6a8:	e8 91 17 ff ff       	call   f010ce3e <sys_calculate_free_frames>
f011b6ad:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b6b0:	e8 cf 8f fe ff       	call   f0104684 <pf_calculate_free_frames>
f011b6b5:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[8] = kmalloc(512*kilo);
f011b6b8:	83 ec 0c             	sub    $0xc,%esp
f011b6bb:	68 00 00 08 00       	push   $0x80000
f011b6c0:	e8 8e cb fe ff       	call   f0108253 <kmalloc>
f011b6c5:	83 c4 10             	add    $0x10,%esp
f011b6c8:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		if ((uint32) ptr_allocations[8] !=  (ACTUAL_START + 11*Mega)) panic("Wrong start address for the allocated space... ");
f011b6ce:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011b6d4:	89 c1                	mov    %eax,%ecx
f011b6d6:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011b6dd:	10 00 00 
f011b6e0:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011b6e5:	0f b6 d0             	movzbl %al,%edx
f011b6e8:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011b6ee:	01 d0                	add    %edx,%eax
f011b6f0:	48                   	dec    %eax
f011b6f1:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011b6f7:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011b6fd:	ba 00 00 00 00       	mov    $0x0,%edx
f011b702:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011b708:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011b70e:	29 d0                	sub    %edx,%eax
f011b710:	89 c3                	mov    %eax,%ebx
f011b712:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011b719:	10 00 00 
f011b71c:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011b721:	0f b6 c0             	movzbl %al,%eax
f011b724:	c1 e0 04             	shl    $0x4,%eax
f011b727:	89 c2                	mov    %eax,%edx
f011b729:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011b72f:	01 d0                	add    %edx,%eax
f011b731:	48                   	dec    %eax
f011b732:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011b738:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011b73e:	ba 00 00 00 00       	mov    $0x0,%edx
f011b743:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011b749:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011b74f:	29 d0                	sub    %edx,%eax
f011b751:	01 d8                	add    %ebx,%eax
f011b753:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f011b758:	39 c1                	cmp    %eax,%ecx
f011b75a:	74 17                	je     f011b773 <test_kmalloc_bestfit1+0xa09>
f011b75c:	83 ec 04             	sub    $0x4,%esp
f011b75f:	68 4c a3 13 f0       	push   $0xf013a34c
f011b764:	68 f3 01 00 00       	push   $0x1f3
f011b769:	68 32 9f 13 f0       	push   $0xf0139f32
f011b76e:	e8 3d 4a fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b773:	e8 0c 8f fe ff       	call   f0104684 <pf_calculate_free_frames>
f011b778:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b77b:	74 17                	je     f011b794 <test_kmalloc_bestfit1+0xa2a>
f011b77d:	83 ec 04             	sub    $0x4,%esp
f011b780:	68 4c 9f 13 f0       	push   $0xf0139f4c
f011b785:	68 f4 01 00 00       	push   $0x1f4
f011b78a:	68 32 9f 13 f0       	push   $0xf0139f32
f011b78f:	e8 1c 4a fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 128) panic("Wrong allocation: ");
f011b794:	e8 a5 16 ff ff       	call   f010ce3e <sys_calculate_free_frames>
f011b799:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b79c:	29 c2                	sub    %eax,%edx
f011b79e:	89 d0                	mov    %edx,%eax
f011b7a0:	3d 80 00 00 00       	cmp    $0x80,%eax
f011b7a5:	74 17                	je     f011b7be <test_kmalloc_bestfit1+0xa54>
f011b7a7:	83 ec 04             	sub    $0x4,%esp
f011b7aa:	68 7c a3 13 f0       	push   $0xf013a37c
f011b7af:	68 f5 01 00 00       	push   $0x1f5
f011b7b4:	68 32 9f 13 f0       	push   $0xf0139f32
f011b7b9:	e8 f2 49 fe ff       	call   f01001b0 <_panic>

		//Allocate 1 MB - should be placed in 2nd hole
		freeFrames = sys_calculate_free_frames() ;
f011b7be:	e8 7b 16 ff ff       	call   f010ce3e <sys_calculate_free_frames>
f011b7c3:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b7c6:	e8 b9 8e fe ff       	call   f0104684 <pf_calculate_free_frames>
f011b7cb:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega - kilo);
f011b7ce:	83 ec 0c             	sub    $0xc,%esp
f011b7d1:	68 00 fc 0f 00       	push   $0xffc00
f011b7d6:	e8 78 ca fe ff       	call   f0108253 <kmalloc>
f011b7db:	83 c4 10             	add    $0x10,%esp
f011b7de:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
		if ((uint32) ptr_allocations[9] !=  (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f011b7e4:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011b7ea:	89 c1                	mov    %eax,%ecx
f011b7ec:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011b7f3:	10 00 00 
f011b7f6:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011b7fb:	0f b6 d0             	movzbl %al,%edx
f011b7fe:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011b804:	01 d0                	add    %edx,%eax
f011b806:	48                   	dec    %eax
f011b807:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011b80d:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011b813:	ba 00 00 00 00       	mov    $0x0,%edx
f011b818:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011b81e:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011b824:	29 d0                	sub    %edx,%eax
f011b826:	89 c3                	mov    %eax,%ebx
f011b828:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011b82f:	10 00 00 
f011b832:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011b837:	0f b6 c0             	movzbl %al,%eax
f011b83a:	c1 e0 04             	shl    $0x4,%eax
f011b83d:	89 c2                	mov    %eax,%edx
f011b83f:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011b845:	01 d0                	add    %edx,%eax
f011b847:	48                   	dec    %eax
f011b848:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011b84e:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011b854:	ba 00 00 00 00       	mov    $0x0,%edx
f011b859:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011b85f:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011b865:	29 d0                	sub    %edx,%eax
f011b867:	01 d8                	add    %ebx,%eax
f011b869:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f011b86e:	39 c1                	cmp    %eax,%ecx
f011b870:	74 17                	je     f011b889 <test_kmalloc_bestfit1+0xb1f>
f011b872:	83 ec 04             	sub    $0x4,%esp
f011b875:	68 4c a3 13 f0       	push   $0xf013a34c
f011b87a:	68 fb 01 00 00       	push   $0x1fb
f011b87f:	68 32 9f 13 f0       	push   $0xf0139f32
f011b884:	e8 27 49 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b889:	e8 f6 8d fe ff       	call   f0104684 <pf_calculate_free_frames>
f011b88e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b891:	74 17                	je     f011b8aa <test_kmalloc_bestfit1+0xb40>
f011b893:	83 ec 04             	sub    $0x4,%esp
f011b896:	68 4c 9f 13 f0       	push   $0xf0139f4c
f011b89b:	68 fc 01 00 00       	push   $0x1fc
f011b8a0:	68 32 9f 13 f0       	push   $0xf0139f32
f011b8a5:	e8 06 49 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011b8aa:	e8 8f 15 ff ff       	call   f010ce3e <sys_calculate_free_frames>
f011b8af:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b8b2:	29 c2                	sub    %eax,%edx
f011b8b4:	89 d0                	mov    %edx,%eax
f011b8b6:	3d 00 01 00 00       	cmp    $0x100,%eax
f011b8bb:	74 17                	je     f011b8d4 <test_kmalloc_bestfit1+0xb6a>
f011b8bd:	83 ec 04             	sub    $0x4,%esp
f011b8c0:	68 7c a3 13 f0       	push   $0xf013a37c
f011b8c5:	68 fd 01 00 00       	push   $0x1fd
f011b8ca:	68 32 9f 13 f0       	push   $0xf0139f32
f011b8cf:	e8 dc 48 fe ff       	call   f01001b0 <_panic>

		//Allocate 256 KB - should be placed in remaining of 3rd hole
		freeFrames = sys_calculate_free_frames() ;
f011b8d4:	e8 65 15 ff ff       	call   f010ce3e <sys_calculate_free_frames>
f011b8d9:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b8dc:	e8 a3 8d fe ff       	call   f0104684 <pf_calculate_free_frames>
f011b8e1:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[10] = kmalloc(256*kilo - kilo);
f011b8e4:	83 ec 0c             	sub    $0xc,%esp
f011b8e7:	68 00 fc 03 00       	push   $0x3fc00
f011b8ec:	e8 62 c9 fe ff       	call   f0108253 <kmalloc>
f011b8f1:	83 c4 10             	add    $0x10,%esp
f011b8f4:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
		if ((uint32) ptr_allocations[10] !=  (ACTUAL_START + 11*Mega + 512*kilo)) panic("Wrong start address for the allocated space... ");
f011b8fa:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011b900:	89 c1                	mov    %eax,%ecx
f011b902:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011b909:	10 00 00 
f011b90c:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011b911:	0f b6 d0             	movzbl %al,%edx
f011b914:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011b91a:	01 d0                	add    %edx,%eax
f011b91c:	48                   	dec    %eax
f011b91d:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011b923:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011b929:	ba 00 00 00 00       	mov    $0x0,%edx
f011b92e:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011b934:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011b93a:	29 d0                	sub    %edx,%eax
f011b93c:	89 c3                	mov    %eax,%ebx
f011b93e:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011b945:	10 00 00 
f011b948:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011b94d:	0f b6 c0             	movzbl %al,%eax
f011b950:	c1 e0 04             	shl    $0x4,%eax
f011b953:	89 c2                	mov    %eax,%edx
f011b955:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011b95b:	01 d0                	add    %edx,%eax
f011b95d:	48                   	dec    %eax
f011b95e:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011b964:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011b96a:	ba 00 00 00 00       	mov    $0x0,%edx
f011b96f:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011b975:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011b97b:	29 d0                	sub    %edx,%eax
f011b97d:	01 d8                	add    %ebx,%eax
f011b97f:	2d 00 c0 47 09       	sub    $0x947c000,%eax
f011b984:	39 c1                	cmp    %eax,%ecx
f011b986:	74 17                	je     f011b99f <test_kmalloc_bestfit1+0xc35>
f011b988:	83 ec 04             	sub    $0x4,%esp
f011b98b:	68 4c a3 13 f0       	push   $0xf013a34c
f011b990:	68 03 02 00 00       	push   $0x203
f011b995:	68 32 9f 13 f0       	push   $0xf0139f32
f011b99a:	e8 11 48 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b99f:	e8 e0 8c fe ff       	call   f0104684 <pf_calculate_free_frames>
f011b9a4:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b9a7:	74 17                	je     f011b9c0 <test_kmalloc_bestfit1+0xc56>
f011b9a9:	83 ec 04             	sub    $0x4,%esp
f011b9ac:	68 4c 9f 13 f0       	push   $0xf0139f4c
f011b9b1:	68 04 02 00 00       	push   $0x204
f011b9b6:	68 32 9f 13 f0       	push   $0xf0139f32
f011b9bb:	e8 f0 47 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 64) panic("Wrong allocation: ");
f011b9c0:	e8 79 14 ff ff       	call   f010ce3e <sys_calculate_free_frames>
f011b9c5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b9c8:	29 c2                	sub    %eax,%edx
f011b9ca:	89 d0                	mov    %edx,%eax
f011b9cc:	83 f8 40             	cmp    $0x40,%eax
f011b9cf:	74 17                	je     f011b9e8 <test_kmalloc_bestfit1+0xc7e>
f011b9d1:	83 ec 04             	sub    $0x4,%esp
f011b9d4:	68 7c a3 13 f0       	push   $0xf013a37c
f011b9d9:	68 05 02 00 00       	push   $0x205
f011b9de:	68 32 9f 13 f0       	push   $0xf0139f32
f011b9e3:	e8 c8 47 fe ff       	call   f01001b0 <_panic>

		//Allocate 4 MB - should be placed in end of all allocations
		freeFrames = sys_calculate_free_frames() ;
f011b9e8:	e8 51 14 ff ff       	call   f010ce3e <sys_calculate_free_frames>
f011b9ed:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b9f0:	e8 8f 8c fe ff       	call   f0104684 <pf_calculate_free_frames>
f011b9f5:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[11] = kmalloc(4*Mega - kilo);
f011b9f8:	83 ec 0c             	sub    $0xc,%esp
f011b9fb:	68 00 fc 3f 00       	push   $0x3ffc00
f011ba00:	e8 4e c8 fe ff       	call   f0108253 <kmalloc>
f011ba05:	83 c4 10             	add    $0x10,%esp
f011ba08:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 14*Mega)) panic("Wrong start address for the allocated space... ");
f011ba0e:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011ba14:	89 c1                	mov    %eax,%ecx
f011ba16:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011ba1d:	10 00 00 
f011ba20:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011ba25:	0f b6 d0             	movzbl %al,%edx
f011ba28:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011ba2e:	01 d0                	add    %edx,%eax
f011ba30:	48                   	dec    %eax
f011ba31:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011ba37:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011ba3d:	ba 00 00 00 00       	mov    $0x0,%edx
f011ba42:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011ba48:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011ba4e:	29 d0                	sub    %edx,%eax
f011ba50:	89 c3                	mov    %eax,%ebx
f011ba52:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011ba59:	10 00 00 
f011ba5c:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011ba61:	0f b6 c0             	movzbl %al,%eax
f011ba64:	c1 e0 04             	shl    $0x4,%eax
f011ba67:	89 c2                	mov    %eax,%edx
f011ba69:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011ba6f:	01 d0                	add    %edx,%eax
f011ba71:	48                   	dec    %eax
f011ba72:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011ba78:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011ba7e:	ba 00 00 00 00       	mov    $0x0,%edx
f011ba83:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011ba89:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011ba8f:	29 d0                	sub    %edx,%eax
f011ba91:	01 d8                	add    %ebx,%eax
f011ba93:	2d 00 c0 1f 09       	sub    $0x91fc000,%eax
f011ba98:	39 c1                	cmp    %eax,%ecx
f011ba9a:	74 17                	je     f011bab3 <test_kmalloc_bestfit1+0xd49>
f011ba9c:	83 ec 04             	sub    $0x4,%esp
f011ba9f:	68 4c a3 13 f0       	push   $0xf013a34c
f011baa4:	68 0b 02 00 00       	push   $0x20b
f011baa9:	68 32 9f 13 f0       	push   $0xf0139f32
f011baae:	e8 fd 46 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bab3:	e8 cc 8b fe ff       	call   f0104684 <pf_calculate_free_frames>
f011bab8:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011babb:	74 17                	je     f011bad4 <test_kmalloc_bestfit1+0xd6a>
f011babd:	83 ec 04             	sub    $0x4,%esp
f011bac0:	68 4c 9f 13 f0       	push   $0xf0139f4c
f011bac5:	68 0c 02 00 00       	push   $0x20c
f011baca:	68 32 9f 13 f0       	push   $0xf0139f32
f011bacf:	e8 dc 46 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1024) panic("Wrong allocation: ");
f011bad4:	e8 65 13 ff ff       	call   f010ce3e <sys_calculate_free_frames>
f011bad9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011badc:	29 c2                	sub    %eax,%edx
f011bade:	89 d0                	mov    %edx,%eax
f011bae0:	3d 00 04 00 00       	cmp    $0x400,%eax
f011bae5:	74 17                	je     f011bafe <test_kmalloc_bestfit1+0xd94>
f011bae7:	83 ec 04             	sub    $0x4,%esp
f011baea:	68 7c a3 13 f0       	push   $0xf013a37c
f011baef:	68 0d 02 00 00       	push   $0x20d
f011baf4:	68 32 9f 13 f0       	push   $0xf0139f32
f011baf9:	e8 b2 46 fe ff       	call   f01001b0 <_panic>
	}

	//[4] Free contiguous allocations
	{
		//1M Hole appended to already existing 1M hole in the middle
		freeFrames = sys_calculate_free_frames() ;
f011bafe:	e8 3b 13 ff ff       	call   f010ce3e <sys_calculate_free_frames>
f011bb03:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011bb06:	e8 79 8b fe ff       	call   f0104684 <pf_calculate_free_frames>
f011bb0b:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[4]);
f011bb0e:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011bb14:	83 ec 0c             	sub    $0xc,%esp
f011bb17:	50                   	push   %eax
f011bb18:	e8 c1 c8 fe ff       	call   f01083de <kfree>
f011bb1d:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bb20:	e8 5f 8b fe ff       	call   f0104684 <pf_calculate_free_frames>
f011bb25:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011bb28:	74 17                	je     f011bb41 <test_kmalloc_bestfit1+0xdd7>
f011bb2a:	83 ec 04             	sub    $0x4,%esp
f011bb2d:	68 4c 9f 13 f0       	push   $0xf0139f4c
f011bb32:	68 16 02 00 00       	push   $0x216
f011bb37:	68 32 9f 13 f0       	push   $0xf0139f32
f011bb3c:	e8 6f 46 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011bb41:	e8 f8 12 ff ff       	call   f010ce3e <sys_calculate_free_frames>
f011bb46:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011bb49:	3d 00 01 00 00       	cmp    $0x100,%eax
f011bb4e:	74 17                	je     f011bb67 <test_kmalloc_bestfit1+0xdfd>
f011bb50:	83 ec 04             	sub    $0x4,%esp
f011bb53:	68 8f a3 13 f0       	push   $0xf013a38f
f011bb58:	68 17 02 00 00       	push   $0x217
f011bb5d:	68 32 9f 13 f0       	push   $0xf0139f32
f011bb62:	e8 49 46 fe ff       	call   f01001b0 <_panic>

		//another 512 KB Hole appended to the hole
		freeFrames = sys_calculate_free_frames() ;
f011bb67:	e8 d2 12 ff ff       	call   f010ce3e <sys_calculate_free_frames>
f011bb6c:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011bb6f:	e8 10 8b fe ff       	call   f0104684 <pf_calculate_free_frames>
f011bb74:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[8]);
f011bb77:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011bb7d:	83 ec 0c             	sub    $0xc,%esp
f011bb80:	50                   	push   %eax
f011bb81:	e8 58 c8 fe ff       	call   f01083de <kfree>
f011bb86:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bb89:	e8 f6 8a fe ff       	call   f0104684 <pf_calculate_free_frames>
f011bb8e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011bb91:	74 17                	je     f011bbaa <test_kmalloc_bestfit1+0xe40>
f011bb93:	83 ec 04             	sub    $0x4,%esp
f011bb96:	68 4c 9f 13 f0       	push   $0xf0139f4c
f011bb9b:	68 1d 02 00 00       	push   $0x21d
f011bba0:	68 32 9f 13 f0       	push   $0xf0139f32
f011bba5:	e8 06 46 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 128) panic("Wrong free: ");
f011bbaa:	e8 8f 12 ff ff       	call   f010ce3e <sys_calculate_free_frames>
f011bbaf:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011bbb2:	3d 80 00 00 00       	cmp    $0x80,%eax
f011bbb7:	74 17                	je     f011bbd0 <test_kmalloc_bestfit1+0xe66>
f011bbb9:	83 ec 04             	sub    $0x4,%esp
f011bbbc:	68 8f a3 13 f0       	push   $0xf013a38f
f011bbc1:	68 1e 02 00 00       	push   $0x21e
f011bbc6:	68 32 9f 13 f0       	push   $0xf0139f32
f011bbcb:	e8 e0 45 fe ff       	call   f01001b0 <_panic>
	}

	//[5] Allocate again [test best fit]
	{
		//Allocate 2 MB - should be placed in the contiguous hole (2 MB + 512 KB)
		freeFrames = sys_calculate_free_frames();
f011bbd0:	e8 69 12 ff ff       	call   f010ce3e <sys_calculate_free_frames>
f011bbd5:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011bbd8:	e8 a7 8a fe ff       	call   f0104684 <pf_calculate_free_frames>
f011bbdd:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[12] = kmalloc(2*Mega - kilo);
f011bbe0:	83 ec 0c             	sub    $0xc,%esp
f011bbe3:	68 00 fc 1f 00       	push   $0x1ffc00
f011bbe8:	e8 66 c6 fe ff       	call   f0108253 <kmalloc>
f011bbed:	83 c4 10             	add    $0x10,%esp
f011bbf0:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 9*Mega)) panic("Wrong start address for the allocated space... ");
f011bbf6:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011bbfc:	89 c1                	mov    %eax,%ecx
f011bbfe:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011bc05:	10 00 00 
f011bc08:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011bc0d:	0f b6 d0             	movzbl %al,%edx
f011bc10:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011bc16:	01 d0                	add    %edx,%eax
f011bc18:	48                   	dec    %eax
f011bc19:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011bc1f:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011bc25:	ba 00 00 00 00       	mov    $0x0,%edx
f011bc2a:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011bc30:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011bc36:	29 d0                	sub    %edx,%eax
f011bc38:	89 c3                	mov    %eax,%ebx
f011bc3a:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011bc41:	10 00 00 
f011bc44:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011bc49:	0f b6 c0             	movzbl %al,%eax
f011bc4c:	c1 e0 04             	shl    $0x4,%eax
f011bc4f:	89 c2                	mov    %eax,%edx
f011bc51:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011bc57:	01 d0                	add    %edx,%eax
f011bc59:	48                   	dec    %eax
f011bc5a:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011bc60:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011bc66:	ba 00 00 00 00       	mov    $0x0,%edx
f011bc6b:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011bc71:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011bc77:	29 d0                	sub    %edx,%eax
f011bc79:	01 d8                	add    %ebx,%eax
f011bc7b:	2d 00 c0 6f 09       	sub    $0x96fc000,%eax
f011bc80:	39 c1                	cmp    %eax,%ecx
f011bc82:	74 17                	je     f011bc9b <test_kmalloc_bestfit1+0xf31>
f011bc84:	83 ec 04             	sub    $0x4,%esp
f011bc87:	68 4c a3 13 f0       	push   $0xf013a34c
f011bc8c:	68 27 02 00 00       	push   $0x227
f011bc91:	68 32 9f 13 f0       	push   $0xf0139f32
f011bc96:	e8 15 45 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bc9b:	e8 e4 89 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011bca0:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011bca3:	74 17                	je     f011bcbc <test_kmalloc_bestfit1+0xf52>
f011bca5:	83 ec 04             	sub    $0x4,%esp
f011bca8:	68 4c 9f 13 f0       	push   $0xf0139f4c
f011bcad:	68 28 02 00 00       	push   $0x228
f011bcb2:	68 32 9f 13 f0       	push   $0xf0139f32
f011bcb7:	e8 f4 44 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011bcbc:	e8 7d 11 ff ff       	call   f010ce3e <sys_calculate_free_frames>
f011bcc1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011bcc4:	29 c2                	sub    %eax,%edx
f011bcc6:	89 d0                	mov    %edx,%eax
f011bcc8:	3d 00 02 00 00       	cmp    $0x200,%eax
f011bccd:	74 17                	je     f011bce6 <test_kmalloc_bestfit1+0xf7c>
f011bccf:	83 ec 04             	sub    $0x4,%esp
f011bcd2:	68 7c a3 13 f0       	push   $0xf013a37c
f011bcd7:	68 29 02 00 00       	push   $0x229
f011bcdc:	68 32 9f 13 f0       	push   $0xf0139f32
f011bce1:	e8 ca 44 fe ff       	call   f01001b0 <_panic>
	}

	cprintf("Congratulations!! test BEST FIT allocation (1) completed successfully.\n");
f011bce6:	83 ec 0c             	sub    $0xc,%esp
f011bce9:	68 9c a3 13 f0       	push   $0xf013a39c
f011bcee:	e8 3e 51 fe ff       	call   f0100e31 <cprintf>
f011bcf3:	83 c4 10             	add    $0x10,%esp

	return 1;
f011bcf6:	b8 01 00 00 00       	mov    $0x1,%eax

}
f011bcfb:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011bcfe:	5b                   	pop    %ebx
f011bcff:	5f                   	pop    %edi
f011bd00:	5d                   	pop    %ebp
f011bd01:	c3                   	ret    

f011bd02 <test_kmalloc_bestfit2>:

int test_kmalloc_bestfit2()
{
f011bd02:	55                   	push   %ebp
f011bd03:	89 e5                	mov    %esp,%ebp
f011bd05:	57                   	push   %edi
f011bd06:	53                   	push   %ebx
f011bd07:	81 ec 40 01 00 00    	sub    $0x140,%esp
	cprintf("==============================================\n");
f011bd0d:	83 ec 0c             	sub    $0xc,%esp
f011bd10:	68 74 9e 13 f0       	push   $0xf0139e74
f011bd15:	e8 17 51 fe ff       	call   f0100e31 <cprintf>
f011bd1a:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011bd1d:	83 ec 0c             	sub    $0xc,%esp
f011bd20:	68 a4 9e 13 f0       	push   $0xf0139ea4
f011bd25:	e8 07 51 fe ff       	call   f0100e31 <cprintf>
f011bd2a:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011bd2d:	83 ec 0c             	sub    $0xc,%esp
f011bd30:	68 74 9e 13 f0       	push   $0xf0139e74
f011bd35:	e8 f7 50 fe ff       	call   f0100e31 <cprintf>
f011bd3a:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011bd3d:	8d 95 c0 fe ff ff    	lea    -0x140(%ebp),%edx
f011bd43:	b9 14 00 00 00       	mov    $0x14,%ecx
f011bd48:	b8 00 00 00 00       	mov    $0x0,%eax
f011bd4d:	89 d7                	mov    %edx,%edi
f011bd4f:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeFrames;
	uint32 freeDiskFrames;

	//[1] Attempt to allocate more than heap size
	{
		ptr_allocations[0] = kmalloc(KERNEL_HEAP_MAX - ACTUAL_START + 1);
f011bd51:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
f011bd58:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011bd5d:	0f b6 d0             	movzbl %al,%edx
f011bd60:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011bd63:	01 d0                	add    %edx,%eax
f011bd65:	48                   	dec    %eax
f011bd66:	89 45 f0             	mov    %eax,-0x10(%ebp)
f011bd69:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011bd6c:	ba 00 00 00 00       	mov    $0x0,%edx
f011bd71:	f7 75 f4             	divl   -0xc(%ebp)
f011bd74:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011bd77:	29 d0                	sub    %edx,%eax
f011bd79:	89 c1                	mov    %eax,%ecx
f011bd7b:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f011bd82:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011bd87:	0f b6 c0             	movzbl %al,%eax
f011bd8a:	c1 e0 04             	shl    $0x4,%eax
f011bd8d:	89 c2                	mov    %eax,%edx
f011bd8f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011bd92:	01 d0                	add    %edx,%eax
f011bd94:	48                   	dec    %eax
f011bd95:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011bd98:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011bd9b:	ba 00 00 00 00       	mov    $0x0,%edx
f011bda0:	f7 75 ec             	divl   -0x14(%ebp)
f011bda3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011bda6:	29 d0                	sub    %edx,%eax
f011bda8:	01 c8                	add    %ecx,%eax
f011bdaa:	ba 01 b0 ff 09       	mov    $0x9ffb001,%edx
f011bdaf:	29 c2                	sub    %eax,%edx
f011bdb1:	89 d0                	mov    %edx,%eax
f011bdb3:	83 ec 0c             	sub    $0xc,%esp
f011bdb6:	50                   	push   %eax
f011bdb7:	e8 97 c4 fe ff       	call   f0108253 <kmalloc>
f011bdbc:	83 c4 10             	add    $0x10,%esp
f011bdbf:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
		if (ptr_allocations[0] != NULL) panic("Kmalloc: Attempt to allocate more than heap size, should return NULL");
f011bdc5:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011bdcb:	85 c0                	test   %eax,%eax
f011bdcd:	74 17                	je     f011bde6 <test_kmalloc_bestfit2+0xe4>
f011bdcf:	83 ec 04             	sub    $0x4,%esp
f011bdd2:	68 e4 a3 13 f0       	push   $0xf013a3e4
f011bdd7:	68 3f 02 00 00       	push   $0x23f
f011bddc:	68 32 9f 13 f0       	push   $0xf0139f32
f011bde1:	e8 ca 43 fe ff       	call   f01001b0 <_panic>

	//[2] Attempt to allocate space more than any available fragment
	//	a) Create Fragments
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011bde6:	e8 53 10 ff ff       	call   f010ce3e <sys_calculate_free_frames>
f011bdeb:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011bdee:	e8 91 88 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011bdf3:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f011bdf6:	83 ec 0c             	sub    $0xc,%esp
f011bdf9:	68 00 fc 1f 00       	push   $0x1ffc00
f011bdfe:	e8 50 c4 fe ff       	call   f0108253 <kmalloc>
f011be03:	83 c4 10             	add    $0x10,%esp
f011be06:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011be0c:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011be12:	89 c1                	mov    %eax,%ecx
f011be14:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f011be1b:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011be20:	0f b6 d0             	movzbl %al,%edx
f011be23:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011be26:	01 d0                	add    %edx,%eax
f011be28:	48                   	dec    %eax
f011be29:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011be2c:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011be2f:	ba 00 00 00 00       	mov    $0x0,%edx
f011be34:	f7 75 dc             	divl   -0x24(%ebp)
f011be37:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011be3a:	29 d0                	sub    %edx,%eax
f011be3c:	89 c3                	mov    %eax,%ebx
f011be3e:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011be45:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011be4a:	0f b6 c0             	movzbl %al,%eax
f011be4d:	c1 e0 04             	shl    $0x4,%eax
f011be50:	89 c2                	mov    %eax,%edx
f011be52:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011be55:	01 d0                	add    %edx,%eax
f011be57:	48                   	dec    %eax
f011be58:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011be5b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011be5e:	ba 00 00 00 00       	mov    $0x0,%edx
f011be63:	f7 75 d4             	divl   -0x2c(%ebp)
f011be66:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011be69:	29 d0                	sub    %edx,%eax
f011be6b:	01 d8                	add    %ebx,%eax
f011be6d:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011be72:	39 c1                	cmp    %eax,%ecx
f011be74:	74 17                	je     f011be8d <test_kmalloc_bestfit2+0x18b>
f011be76:	83 ec 04             	sub    $0x4,%esp
f011be79:	68 4c a3 13 f0       	push   $0xf013a34c
f011be7e:	68 49 02 00 00       	push   $0x249
f011be83:	68 32 9f 13 f0       	push   $0xf0139f32
f011be88:	e8 23 43 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011be8d:	e8 f2 87 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011be92:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011be95:	74 17                	je     f011beae <test_kmalloc_bestfit2+0x1ac>
f011be97:	83 ec 04             	sub    $0x4,%esp
f011be9a:	68 4c 9f 13 f0       	push   $0xf0139f4c
f011be9f:	68 4a 02 00 00       	push   $0x24a
f011bea4:	68 32 9f 13 f0       	push   $0xf0139f32
f011bea9:	e8 02 43 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  512) panic("Wrong allocation: ");
f011beae:	e8 8b 0f ff ff       	call   f010ce3e <sys_calculate_free_frames>
f011beb3:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011beb6:	29 c2                	sub    %eax,%edx
f011beb8:	89 d0                	mov    %edx,%eax
f011beba:	3d 00 02 00 00       	cmp    $0x200,%eax
f011bebf:	74 17                	je     f011bed8 <test_kmalloc_bestfit2+0x1d6>
f011bec1:	83 ec 04             	sub    $0x4,%esp
f011bec4:	68 7c a3 13 f0       	push   $0xf013a37c
f011bec9:	68 4b 02 00 00       	push   $0x24b
f011bece:	68 32 9f 13 f0       	push   $0xf0139f32
f011bed3:	e8 d8 42 fe ff       	call   f01001b0 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011bed8:	e8 61 0f ff ff       	call   f010ce3e <sys_calculate_free_frames>
f011bedd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011bee0:	e8 9f 87 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011bee5:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f011bee8:	83 ec 0c             	sub    $0xc,%esp
f011beeb:	68 00 fc 1f 00       	push   $0x1ffc00
f011bef0:	e8 5e c3 fe ff       	call   f0108253 <kmalloc>
f011bef5:	83 c4 10             	add    $0x10,%esp
f011bef8:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... ");
f011befe:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011bf04:	89 c1                	mov    %eax,%ecx
f011bf06:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011bf0d:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011bf12:	0f b6 d0             	movzbl %al,%edx
f011bf15:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011bf18:	01 d0                	add    %edx,%eax
f011bf1a:	48                   	dec    %eax
f011bf1b:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011bf1e:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011bf21:	ba 00 00 00 00       	mov    $0x0,%edx
f011bf26:	f7 75 cc             	divl   -0x34(%ebp)
f011bf29:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011bf2c:	29 d0                	sub    %edx,%eax
f011bf2e:	89 c3                	mov    %eax,%ebx
f011bf30:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011bf37:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011bf3c:	0f b6 c0             	movzbl %al,%eax
f011bf3f:	c1 e0 04             	shl    $0x4,%eax
f011bf42:	89 c2                	mov    %eax,%edx
f011bf44:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011bf47:	01 d0                	add    %edx,%eax
f011bf49:	48                   	dec    %eax
f011bf4a:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011bf4d:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011bf50:	ba 00 00 00 00       	mov    $0x0,%edx
f011bf55:	f7 75 c4             	divl   -0x3c(%ebp)
f011bf58:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011bf5b:	29 d0                	sub    %edx,%eax
f011bf5d:	01 d8                	add    %ebx,%eax
f011bf5f:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011bf64:	39 c1                	cmp    %eax,%ecx
f011bf66:	74 17                	je     f011bf7f <test_kmalloc_bestfit2+0x27d>
f011bf68:	83 ec 04             	sub    $0x4,%esp
f011bf6b:	68 4c a3 13 f0       	push   $0xf013a34c
f011bf70:	68 51 02 00 00       	push   $0x251
f011bf75:	68 32 9f 13 f0       	push   $0xf0139f32
f011bf7a:	e8 31 42 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bf7f:	e8 00 87 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011bf84:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011bf87:	74 17                	je     f011bfa0 <test_kmalloc_bestfit2+0x29e>
f011bf89:	83 ec 04             	sub    $0x4,%esp
f011bf8c:	68 4c 9f 13 f0       	push   $0xf0139f4c
f011bf91:	68 52 02 00 00       	push   $0x252
f011bf96:	68 32 9f 13 f0       	push   $0xf0139f32
f011bf9b:	e8 10 42 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  512) panic("Wrong allocation: ");
f011bfa0:	e8 99 0e ff ff       	call   f010ce3e <sys_calculate_free_frames>
f011bfa5:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011bfa8:	29 c2                	sub    %eax,%edx
f011bfaa:	89 d0                	mov    %edx,%eax
f011bfac:	3d 00 02 00 00       	cmp    $0x200,%eax
f011bfb1:	74 17                	je     f011bfca <test_kmalloc_bestfit2+0x2c8>
f011bfb3:	83 ec 04             	sub    $0x4,%esp
f011bfb6:	68 7c a3 13 f0       	push   $0xf013a37c
f011bfbb:	68 53 02 00 00       	push   $0x253
f011bfc0:	68 32 9f 13 f0       	push   $0xf0139f32
f011bfc5:	e8 e6 41 fe ff       	call   f01001b0 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011bfca:	e8 6f 0e ff ff       	call   f010ce3e <sys_calculate_free_frames>
f011bfcf:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011bfd2:	e8 ad 86 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011bfd7:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f011bfda:	83 ec 0c             	sub    $0xc,%esp
f011bfdd:	68 00 08 00 00       	push   $0x800
f011bfe2:	e8 6c c2 fe ff       	call   f0108253 <kmalloc>
f011bfe7:	83 c4 10             	add    $0x10,%esp
f011bfea:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011bff0:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011bff6:	89 c1                	mov    %eax,%ecx
f011bff8:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011bfff:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011c004:	0f b6 d0             	movzbl %al,%edx
f011c007:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011c00a:	01 d0                	add    %edx,%eax
f011c00c:	48                   	dec    %eax
f011c00d:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011c010:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011c013:	ba 00 00 00 00       	mov    $0x0,%edx
f011c018:	f7 75 bc             	divl   -0x44(%ebp)
f011c01b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011c01e:	29 d0                	sub    %edx,%eax
f011c020:	89 c3                	mov    %eax,%ebx
f011c022:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011c029:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011c02e:	0f b6 c0             	movzbl %al,%eax
f011c031:	c1 e0 04             	shl    $0x4,%eax
f011c034:	89 c2                	mov    %eax,%edx
f011c036:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011c039:	01 d0                	add    %edx,%eax
f011c03b:	48                   	dec    %eax
f011c03c:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011c03f:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011c042:	ba 00 00 00 00       	mov    $0x0,%edx
f011c047:	f7 75 b4             	divl   -0x4c(%ebp)
f011c04a:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011c04d:	29 d0                	sub    %edx,%eax
f011c04f:	01 d8                	add    %ebx,%eax
f011c051:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011c056:	39 c1                	cmp    %eax,%ecx
f011c058:	74 17                	je     f011c071 <test_kmalloc_bestfit2+0x36f>
f011c05a:	83 ec 04             	sub    $0x4,%esp
f011c05d:	68 4c a3 13 f0       	push   $0xf013a34c
f011c062:	68 59 02 00 00       	push   $0x259
f011c067:	68 32 9f 13 f0       	push   $0xf0139f32
f011c06c:	e8 3f 41 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c071:	e8 0e 86 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011c076:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011c079:	74 17                	je     f011c092 <test_kmalloc_bestfit2+0x390>
f011c07b:	83 ec 04             	sub    $0x4,%esp
f011c07e:	68 4c 9f 13 f0       	push   $0xf0139f4c
f011c083:	68 5a 02 00 00       	push   $0x25a
f011c088:	68 32 9f 13 f0       	push   $0xf0139f32
f011c08d:	e8 1e 41 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  1) panic("Wrong allocation: ");
f011c092:	e8 a7 0d ff ff       	call   f010ce3e <sys_calculate_free_frames>
f011c097:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011c09a:	29 c2                	sub    %eax,%edx
f011c09c:	89 d0                	mov    %edx,%eax
f011c09e:	83 f8 01             	cmp    $0x1,%eax
f011c0a1:	74 17                	je     f011c0ba <test_kmalloc_bestfit2+0x3b8>
f011c0a3:	83 ec 04             	sub    $0x4,%esp
f011c0a6:	68 7c a3 13 f0       	push   $0xf013a37c
f011c0ab:	68 5b 02 00 00       	push   $0x25b
f011c0b0:	68 32 9f 13 f0       	push   $0xf0139f32
f011c0b5:	e8 f6 40 fe ff       	call   f01001b0 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011c0ba:	e8 7f 0d ff ff       	call   f010ce3e <sys_calculate_free_frames>
f011c0bf:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c0c2:	e8 bd 85 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011c0c7:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f011c0ca:	83 ec 0c             	sub    $0xc,%esp
f011c0cd:	68 00 08 00 00       	push   $0x800
f011c0d2:	e8 7c c1 fe ff       	call   f0108253 <kmalloc>
f011c0d7:	83 c4 10             	add    $0x10,%esp
f011c0da:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... ");
f011c0e0:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011c0e6:	89 c1                	mov    %eax,%ecx
f011c0e8:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011c0ef:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011c0f4:	0f b6 d0             	movzbl %al,%edx
f011c0f7:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011c0fa:	01 d0                	add    %edx,%eax
f011c0fc:	48                   	dec    %eax
f011c0fd:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011c100:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011c103:	ba 00 00 00 00       	mov    $0x0,%edx
f011c108:	f7 75 ac             	divl   -0x54(%ebp)
f011c10b:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011c10e:	29 d0                	sub    %edx,%eax
f011c110:	89 c3                	mov    %eax,%ebx
f011c112:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011c119:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011c11e:	0f b6 c0             	movzbl %al,%eax
f011c121:	c1 e0 04             	shl    $0x4,%eax
f011c124:	89 c2                	mov    %eax,%edx
f011c126:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011c129:	01 d0                	add    %edx,%eax
f011c12b:	48                   	dec    %eax
f011c12c:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011c12f:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011c132:	ba 00 00 00 00       	mov    $0x0,%edx
f011c137:	f7 75 a4             	divl   -0x5c(%ebp)
f011c13a:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011c13d:	29 d0                	sub    %edx,%eax
f011c13f:	01 d8                	add    %ebx,%eax
f011c141:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f011c146:	39 c1                	cmp    %eax,%ecx
f011c148:	74 17                	je     f011c161 <test_kmalloc_bestfit2+0x45f>
f011c14a:	83 ec 04             	sub    $0x4,%esp
f011c14d:	68 4c a3 13 f0       	push   $0xf013a34c
f011c152:	68 61 02 00 00       	push   $0x261
f011c157:	68 32 9f 13 f0       	push   $0xf0139f32
f011c15c:	e8 4f 40 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c161:	e8 1e 85 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011c166:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011c169:	74 17                	je     f011c182 <test_kmalloc_bestfit2+0x480>
f011c16b:	83 ec 04             	sub    $0x4,%esp
f011c16e:	68 4c 9f 13 f0       	push   $0xf0139f4c
f011c173:	68 62 02 00 00       	push   $0x262
f011c178:	68 32 9f 13 f0       	push   $0xf0139f32
f011c17d:	e8 2e 40 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  1) panic("Wrong allocation: ");
f011c182:	e8 b7 0c ff ff       	call   f010ce3e <sys_calculate_free_frames>
f011c187:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011c18a:	29 c2                	sub    %eax,%edx
f011c18c:	89 d0                	mov    %edx,%eax
f011c18e:	83 f8 01             	cmp    $0x1,%eax
f011c191:	74 17                	je     f011c1aa <test_kmalloc_bestfit2+0x4a8>
f011c193:	83 ec 04             	sub    $0x4,%esp
f011c196:	68 7c a3 13 f0       	push   $0xf013a37c
f011c19b:	68 63 02 00 00       	push   $0x263
f011c1a0:	68 32 9f 13 f0       	push   $0xf0139f32
f011c1a5:	e8 06 40 fe ff       	call   f01001b0 <_panic>

		//4 KB Hole
		freeFrames = sys_calculate_free_frames() ;
f011c1aa:	e8 8f 0c ff ff       	call   f010ce3e <sys_calculate_free_frames>
f011c1af:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c1b2:	e8 cd 84 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011c1b7:	89 45 e0             	mov    %eax,-0x20(%ebp)
		kfree(ptr_allocations[2]);
f011c1ba:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011c1c0:	83 ec 0c             	sub    $0xc,%esp
f011c1c3:	50                   	push   %eax
f011c1c4:	e8 15 c2 fe ff       	call   f01083de <kfree>
f011c1c9:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c1cc:	e8 b3 84 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011c1d1:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011c1d4:	74 17                	je     f011c1ed <test_kmalloc_bestfit2+0x4eb>
f011c1d6:	83 ec 04             	sub    $0x4,%esp
f011c1d9:	68 4c 9f 13 f0       	push   $0xf0139f4c
f011c1de:	68 69 02 00 00       	push   $0x269
f011c1e3:	68 32 9f 13 f0       	push   $0xf0139f32
f011c1e8:	e8 c3 3f fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong allocation: ");
f011c1ed:	e8 4c 0c ff ff       	call   f010ce3e <sys_calculate_free_frames>
f011c1f2:	2b 45 e4             	sub    -0x1c(%ebp),%eax
f011c1f5:	83 f8 01             	cmp    $0x1,%eax
f011c1f8:	74 17                	je     f011c211 <test_kmalloc_bestfit2+0x50f>
f011c1fa:	83 ec 04             	sub    $0x4,%esp
f011c1fd:	68 7c a3 13 f0       	push   $0xf013a37c
f011c202:	68 6a 02 00 00       	push   $0x26a
f011c207:	68 32 9f 13 f0       	push   $0xf0139f32
f011c20c:	e8 9f 3f fe ff       	call   f01001b0 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f011c211:	e8 28 0c ff ff       	call   f010ce3e <sys_calculate_free_frames>
f011c216:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c219:	e8 66 84 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011c21e:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f011c221:	83 ec 0c             	sub    $0xc,%esp
f011c224:	68 00 1c 00 00       	push   $0x1c00
f011c229:	e8 25 c0 fe ff       	call   f0108253 <kmalloc>
f011c22e:	83 c4 10             	add    $0x10,%esp
f011c231:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... ");
f011c237:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011c23d:	89 c1                	mov    %eax,%ecx
f011c23f:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011c246:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011c24b:	0f b6 d0             	movzbl %al,%edx
f011c24e:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011c251:	01 d0                	add    %edx,%eax
f011c253:	48                   	dec    %eax
f011c254:	89 45 98             	mov    %eax,-0x68(%ebp)
f011c257:	8b 45 98             	mov    -0x68(%ebp),%eax
f011c25a:	ba 00 00 00 00       	mov    $0x0,%edx
f011c25f:	f7 75 9c             	divl   -0x64(%ebp)
f011c262:	8b 45 98             	mov    -0x68(%ebp),%eax
f011c265:	29 d0                	sub    %edx,%eax
f011c267:	89 c3                	mov    %eax,%ebx
f011c269:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011c270:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011c275:	0f b6 c0             	movzbl %al,%eax
f011c278:	c1 e0 04             	shl    $0x4,%eax
f011c27b:	89 c2                	mov    %eax,%edx
f011c27d:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011c280:	01 d0                	add    %edx,%eax
f011c282:	48                   	dec    %eax
f011c283:	89 45 90             	mov    %eax,-0x70(%ebp)
f011c286:	8b 45 90             	mov    -0x70(%ebp),%eax
f011c289:	ba 00 00 00 00       	mov    $0x0,%edx
f011c28e:	f7 75 94             	divl   -0x6c(%ebp)
f011c291:	8b 45 90             	mov    -0x70(%ebp),%eax
f011c294:	29 d0                	sub    %edx,%eax
f011c296:	01 d8                	add    %ebx,%eax
f011c298:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f011c29d:	39 c1                	cmp    %eax,%ecx
f011c29f:	74 17                	je     f011c2b8 <test_kmalloc_bestfit2+0x5b6>
f011c2a1:	83 ec 04             	sub    $0x4,%esp
f011c2a4:	68 4c a3 13 f0       	push   $0xf013a34c
f011c2a9:	68 70 02 00 00       	push   $0x270
f011c2ae:	68 32 9f 13 f0       	push   $0xf0139f32
f011c2b3:	e8 f8 3e fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c2b8:	e8 c7 83 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011c2bd:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011c2c0:	74 17                	je     f011c2d9 <test_kmalloc_bestfit2+0x5d7>
f011c2c2:	83 ec 04             	sub    $0x4,%esp
f011c2c5:	68 4c 9f 13 f0       	push   $0xf0139f4c
f011c2ca:	68 71 02 00 00       	push   $0x271
f011c2cf:	68 32 9f 13 f0       	push   $0xf0139f32
f011c2d4:	e8 d7 3e fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  2) panic("Wrong allocation: ");
f011c2d9:	e8 60 0b ff ff       	call   f010ce3e <sys_calculate_free_frames>
f011c2de:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011c2e1:	29 c2                	sub    %eax,%edx
f011c2e3:	89 d0                	mov    %edx,%eax
f011c2e5:	83 f8 02             	cmp    $0x2,%eax
f011c2e8:	74 17                	je     f011c301 <test_kmalloc_bestfit2+0x5ff>
f011c2ea:	83 ec 04             	sub    $0x4,%esp
f011c2ed:	68 7c a3 13 f0       	push   $0xf013a37c
f011c2f2:	68 72 02 00 00       	push   $0x272
f011c2f7:	68 32 9f 13 f0       	push   $0xf0139f32
f011c2fc:	e8 af 3e fe ff       	call   f01001b0 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011c301:	e8 38 0b ff ff       	call   f010ce3e <sys_calculate_free_frames>
f011c306:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c309:	e8 76 83 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011c30e:	89 45 e0             	mov    %eax,-0x20(%ebp)
		kfree(ptr_allocations[0]);
f011c311:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011c317:	83 ec 0c             	sub    $0xc,%esp
f011c31a:	50                   	push   %eax
f011c31b:	e8 be c0 fe ff       	call   f01083de <kfree>
f011c320:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c323:	e8 5c 83 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011c328:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011c32b:	74 17                	je     f011c344 <test_kmalloc_bestfit2+0x642>
f011c32d:	83 ec 04             	sub    $0x4,%esp
f011c330:	68 4c 9f 13 f0       	push   $0xf0139f4c
f011c335:	68 78 02 00 00       	push   $0x278
f011c33a:	68 32 9f 13 f0       	push   $0xf0139f32
f011c33f:	e8 6c 3e fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: Extra or less pages are removed from main memory");
f011c344:	e8 f5 0a ff ff       	call   f010ce3e <sys_calculate_free_frames>
f011c349:	2b 45 e4             	sub    -0x1c(%ebp),%eax
f011c34c:	3d 00 02 00 00       	cmp    $0x200,%eax
f011c351:	74 17                	je     f011c36a <test_kmalloc_bestfit2+0x668>
f011c353:	83 ec 04             	sub    $0x4,%esp
f011c356:	68 00 a2 13 f0       	push   $0xf013a200
f011c35b:	68 79 02 00 00       	push   $0x279
f011c360:	68 32 9f 13 f0       	push   $0xf0139f32
f011c365:	e8 46 3e fe ff       	call   f01001b0 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011c36a:	e8 cf 0a ff ff       	call   f010ce3e <sys_calculate_free_frames>
f011c36f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c372:	e8 0d 83 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011c377:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f011c37a:	83 ec 0c             	sub    $0xc,%esp
f011c37d:	68 00 fc 2f 00       	push   $0x2ffc00
f011c382:	e8 cc be fe ff       	call   f0108253 <kmalloc>
f011c387:	83 c4 10             	add    $0x10,%esp
f011c38a:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011c390:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011c396:	89 c1                	mov    %eax,%ecx
f011c398:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011c39f:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011c3a4:	0f b6 d0             	movzbl %al,%edx
f011c3a7:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011c3aa:	01 d0                	add    %edx,%eax
f011c3ac:	48                   	dec    %eax
f011c3ad:	89 45 88             	mov    %eax,-0x78(%ebp)
f011c3b0:	8b 45 88             	mov    -0x78(%ebp),%eax
f011c3b3:	ba 00 00 00 00       	mov    $0x0,%edx
f011c3b8:	f7 75 8c             	divl   -0x74(%ebp)
f011c3bb:	8b 45 88             	mov    -0x78(%ebp),%eax
f011c3be:	29 d0                	sub    %edx,%eax
f011c3c0:	89 c3                	mov    %eax,%ebx
f011c3c2:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011c3c9:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011c3ce:	0f b6 c0             	movzbl %al,%eax
f011c3d1:	c1 e0 04             	shl    $0x4,%eax
f011c3d4:	89 c2                	mov    %eax,%edx
f011c3d6:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011c3d9:	01 d0                	add    %edx,%eax
f011c3db:	48                   	dec    %eax
f011c3dc:	89 45 80             	mov    %eax,-0x80(%ebp)
f011c3df:	8b 45 80             	mov    -0x80(%ebp),%eax
f011c3e2:	ba 00 00 00 00       	mov    $0x0,%edx
f011c3e7:	f7 75 84             	divl   -0x7c(%ebp)
f011c3ea:	8b 45 80             	mov    -0x80(%ebp),%eax
f011c3ed:	29 d0                	sub    %edx,%eax
f011c3ef:	01 d8                	add    %ebx,%eax
f011c3f1:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f011c3f6:	39 c1                	cmp    %eax,%ecx
f011c3f8:	74 17                	je     f011c411 <test_kmalloc_bestfit2+0x70f>
f011c3fa:	83 ec 04             	sub    $0x4,%esp
f011c3fd:	68 4c a3 13 f0       	push   $0xf013a34c
f011c402:	68 7f 02 00 00       	push   $0x27f
f011c407:	68 32 9f 13 f0       	push   $0xf0139f32
f011c40c:	e8 9f 3d fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c411:	e8 6e 82 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011c416:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011c419:	74 17                	je     f011c432 <test_kmalloc_bestfit2+0x730>
f011c41b:	83 ec 04             	sub    $0x4,%esp
f011c41e:	68 4c 9f 13 f0       	push   $0xf0139f4c
f011c423:	68 80 02 00 00       	push   $0x280
f011c428:	68 32 9f 13 f0       	push   $0xf0139f32
f011c42d:	e8 7e 3d fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  768) panic("Wrong allocation: ");
f011c432:	e8 07 0a ff ff       	call   f010ce3e <sys_calculate_free_frames>
f011c437:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011c43a:	29 c2                	sub    %eax,%edx
f011c43c:	89 d0                	mov    %edx,%eax
f011c43e:	3d 00 03 00 00       	cmp    $0x300,%eax
f011c443:	74 17                	je     f011c45c <test_kmalloc_bestfit2+0x75a>
f011c445:	83 ec 04             	sub    $0x4,%esp
f011c448:	68 7c a3 13 f0       	push   $0xf013a37c
f011c44d:	68 81 02 00 00       	push   $0x281
f011c452:	68 32 9f 13 f0       	push   $0xf0139f32
f011c457:	e8 54 3d fe ff       	call   f01001b0 <_panic>

		//2 MB + 6 KB
		freeFrames = sys_calculate_free_frames() ;
f011c45c:	e8 dd 09 ff ff       	call   f010ce3e <sys_calculate_free_frames>
f011c461:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c464:	e8 1b 82 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011c469:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[6] = kmalloc(2*Mega + 6*kilo);
f011c46c:	83 ec 0c             	sub    $0xc,%esp
f011c46f:	68 00 18 20 00       	push   $0x201800
f011c474:	e8 da bd fe ff       	call   f0108253 <kmalloc>
f011c479:	83 c4 10             	add    $0x10,%esp
f011c47c:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011c482:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011c488:	89 c1                	mov    %eax,%ecx
f011c48a:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011c491:	10 00 00 
f011c494:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011c499:	0f b6 d0             	movzbl %al,%edx
f011c49c:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011c4a2:	01 d0                	add    %edx,%eax
f011c4a4:	48                   	dec    %eax
f011c4a5:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011c4ab:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011c4b1:	ba 00 00 00 00       	mov    $0x0,%edx
f011c4b6:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011c4bc:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011c4c2:	29 d0                	sub    %edx,%eax
f011c4c4:	89 c3                	mov    %eax,%ebx
f011c4c6:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011c4cd:	10 00 00 
f011c4d0:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011c4d5:	0f b6 c0             	movzbl %al,%eax
f011c4d8:	c1 e0 04             	shl    $0x4,%eax
f011c4db:	89 c2                	mov    %eax,%edx
f011c4dd:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011c4e3:	01 d0                	add    %edx,%eax
f011c4e5:	48                   	dec    %eax
f011c4e6:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011c4ec:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011c4f2:	ba 00 00 00 00       	mov    $0x0,%edx
f011c4f7:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011c4fd:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011c503:	29 d0                	sub    %edx,%eax
f011c505:	01 d8                	add    %ebx,%eax
f011c507:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f011c50c:	39 c1                	cmp    %eax,%ecx
f011c50e:	74 17                	je     f011c527 <test_kmalloc_bestfit2+0x825>
f011c510:	83 ec 04             	sub    $0x4,%esp
f011c513:	68 4c a3 13 f0       	push   $0xf013a34c
f011c518:	68 87 02 00 00       	push   $0x287
f011c51d:	68 32 9f 13 f0       	push   $0xf0139f32
f011c522:	e8 89 3c fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c527:	e8 58 81 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011c52c:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011c52f:	74 17                	je     f011c548 <test_kmalloc_bestfit2+0x846>
f011c531:	83 ec 04             	sub    $0x4,%esp
f011c534:	68 4c 9f 13 f0       	push   $0xf0139f4c
f011c539:	68 88 02 00 00       	push   $0x288
f011c53e:	68 32 9f 13 f0       	push   $0xf0139f32
f011c543:	e8 68 3c fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  514) panic("Wrong allocation: ");
f011c548:	e8 f1 08 ff ff       	call   f010ce3e <sys_calculate_free_frames>
f011c54d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011c550:	29 c2                	sub    %eax,%edx
f011c552:	89 d0                	mov    %edx,%eax
f011c554:	3d 02 02 00 00       	cmp    $0x202,%eax
f011c559:	74 17                	je     f011c572 <test_kmalloc_bestfit2+0x870>
f011c55b:	83 ec 04             	sub    $0x4,%esp
f011c55e:	68 7c a3 13 f0       	push   $0xf013a37c
f011c563:	68 89 02 00 00       	push   $0x289
f011c568:	68 32 9f 13 f0       	push   $0xf0139f32
f011c56d:	e8 3e 3c fe ff       	call   f01001b0 <_panic>

		//5 MB
		freeFrames = sys_calculate_free_frames() ;
f011c572:	e8 c7 08 ff ff       	call   f010ce3e <sys_calculate_free_frames>
f011c577:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c57a:	e8 05 81 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011c57f:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[7] = kmalloc(5*Mega-kilo);
f011c582:	83 ec 0c             	sub    $0xc,%esp
f011c585:	68 00 fc 4f 00       	push   $0x4ffc00
f011c58a:	e8 c4 bc fe ff       	call   f0108253 <kmalloc>
f011c58f:	83 c4 10             	add    $0x10,%esp
f011c592:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 9*Mega + 24*kilo)) panic("Wrong start address for the allocated space... ");
f011c598:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011c59e:	89 c1                	mov    %eax,%ecx
f011c5a0:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011c5a7:	10 00 00 
f011c5aa:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011c5af:	0f b6 d0             	movzbl %al,%edx
f011c5b2:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011c5b8:	01 d0                	add    %edx,%eax
f011c5ba:	48                   	dec    %eax
f011c5bb:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011c5c1:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011c5c7:	ba 00 00 00 00       	mov    $0x0,%edx
f011c5cc:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011c5d2:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011c5d8:	29 d0                	sub    %edx,%eax
f011c5da:	89 c3                	mov    %eax,%ebx
f011c5dc:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011c5e3:	10 00 00 
f011c5e6:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011c5eb:	0f b6 c0             	movzbl %al,%eax
f011c5ee:	c1 e0 04             	shl    $0x4,%eax
f011c5f1:	89 c2                	mov    %eax,%edx
f011c5f3:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011c5f9:	01 d0                	add    %edx,%eax
f011c5fb:	48                   	dec    %eax
f011c5fc:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011c602:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011c608:	ba 00 00 00 00       	mov    $0x0,%edx
f011c60d:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011c613:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011c619:	29 d0                	sub    %edx,%eax
f011c61b:	01 d8                	add    %ebx,%eax
f011c61d:	2d 00 60 6f 09       	sub    $0x96f6000,%eax
f011c622:	39 c1                	cmp    %eax,%ecx
f011c624:	74 17                	je     f011c63d <test_kmalloc_bestfit2+0x93b>
f011c626:	83 ec 04             	sub    $0x4,%esp
f011c629:	68 4c a3 13 f0       	push   $0xf013a34c
f011c62e:	68 8f 02 00 00       	push   $0x28f
f011c633:	68 32 9f 13 f0       	push   $0xf0139f32
f011c638:	e8 73 3b fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c63d:	e8 42 80 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011c642:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011c645:	74 17                	je     f011c65e <test_kmalloc_bestfit2+0x95c>
f011c647:	83 ec 04             	sub    $0x4,%esp
f011c64a:	68 4c 9f 13 f0       	push   $0xf0139f4c
f011c64f:	68 90 02 00 00       	push   $0x290
f011c654:	68 32 9f 13 f0       	push   $0xf0139f32
f011c659:	e8 52 3b fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  ((5*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011c65e:	e8 db 07 ff ff       	call   f010ce3e <sys_calculate_free_frames>
f011c663:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011c666:	29 c2                	sub    %eax,%edx
f011c668:	89 d0                	mov    %edx,%eax
f011c66a:	3d 00 05 00 00       	cmp    $0x500,%eax
f011c66f:	74 17                	je     f011c688 <test_kmalloc_bestfit2+0x986>
f011c671:	83 ec 04             	sub    $0x4,%esp
f011c674:	68 7c a3 13 f0       	push   $0xf013a37c
f011c679:	68 91 02 00 00       	push   $0x291
f011c67e:	68 32 9f 13 f0       	push   $0xf0139f32
f011c683:	e8 28 3b fe ff       	call   f01001b0 <_panic>

		//2 MB + 8 KB Hole
		freeFrames = sys_calculate_free_frames() ;
f011c688:	e8 b1 07 ff ff       	call   f010ce3e <sys_calculate_free_frames>
f011c68d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c690:	e8 ef 7f fe ff       	call   f0104684 <pf_calculate_free_frames>
f011c695:	89 45 e0             	mov    %eax,-0x20(%ebp)
		kfree(ptr_allocations[6]);
f011c698:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011c69e:	83 ec 0c             	sub    $0xc,%esp
f011c6a1:	50                   	push   %eax
f011c6a2:	e8 37 bd fe ff       	call   f01083de <kfree>
f011c6a7:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c6aa:	e8 d5 7f fe ff       	call   f0104684 <pf_calculate_free_frames>
f011c6af:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011c6b2:	74 17                	je     f011c6cb <test_kmalloc_bestfit2+0x9c9>
f011c6b4:	83 ec 04             	sub    $0x4,%esp
f011c6b7:	68 4c 9f 13 f0       	push   $0xf0139f4c
f011c6bc:	68 97 02 00 00       	push   $0x297
f011c6c1:	68 32 9f 13 f0       	push   $0xf0139f32
f011c6c6:	e8 e5 3a fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) !=  514) panic("Wrong free: Extra or less pages are removed from main memory");
f011c6cb:	e8 6e 07 ff ff       	call   f010ce3e <sys_calculate_free_frames>
f011c6d0:	2b 45 e4             	sub    -0x1c(%ebp),%eax
f011c6d3:	3d 02 02 00 00       	cmp    $0x202,%eax
f011c6d8:	74 17                	je     f011c6f1 <test_kmalloc_bestfit2+0x9ef>
f011c6da:	83 ec 04             	sub    $0x4,%esp
f011c6dd:	68 00 a2 13 f0       	push   $0xf013a200
f011c6e2:	68 98 02 00 00       	push   $0x298
f011c6e7:	68 32 9f 13 f0       	push   $0xf0139f32
f011c6ec:	e8 bf 3a fe ff       	call   f01001b0 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011c6f1:	e8 48 07 ff ff       	call   f010ce3e <sys_calculate_free_frames>
f011c6f6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c6f9:	e8 86 7f fe ff       	call   f0104684 <pf_calculate_free_frames>
f011c6fe:	89 45 e0             	mov    %eax,-0x20(%ebp)
		kfree(ptr_allocations[1]);
f011c701:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011c707:	83 ec 0c             	sub    $0xc,%esp
f011c70a:	50                   	push   %eax
f011c70b:	e8 ce bc fe ff       	call   f01083de <kfree>
f011c710:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c713:	e8 6c 7f fe ff       	call   f0104684 <pf_calculate_free_frames>
f011c718:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011c71b:	74 17                	je     f011c734 <test_kmalloc_bestfit2+0xa32>
f011c71d:	83 ec 04             	sub    $0x4,%esp
f011c720:	68 4c 9f 13 f0       	push   $0xf0139f4c
f011c725:	68 9e 02 00 00       	push   $0x29e
f011c72a:	68 32 9f 13 f0       	push   $0xf0139f32
f011c72f:	e8 7c 3a fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) !=  512) panic("Wrong free: Extra or less pages are removed from main memory.");
f011c734:	e8 05 07 ff ff       	call   f010ce3e <sys_calculate_free_frames>
f011c739:	2b 45 e4             	sub    -0x1c(%ebp),%eax
f011c73c:	3d 00 02 00 00       	cmp    $0x200,%eax
f011c741:	74 17                	je     f011c75a <test_kmalloc_bestfit2+0xa58>
f011c743:	83 ec 04             	sub    $0x4,%esp
f011c746:	68 2c a4 13 f0       	push   $0xf013a42c
f011c74b:	68 9f 02 00 00       	push   $0x29f
f011c750:	68 32 9f 13 f0       	push   $0xf0139f32
f011c755:	e8 56 3a fe ff       	call   f01001b0 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011c75a:	e8 df 06 ff ff       	call   f010ce3e <sys_calculate_free_frames>
f011c75f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c762:	e8 1d 7f fe ff       	call   f0104684 <pf_calculate_free_frames>
f011c767:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[8] = kmalloc(2*Mega-kilo);
f011c76a:	83 ec 0c             	sub    $0xc,%esp
f011c76d:	68 00 fc 1f 00       	push   $0x1ffc00
f011c772:	e8 dc ba fe ff       	call   f0108253 <kmalloc>
f011c777:	83 c4 10             	add    $0x10,%esp
f011c77a:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011c780:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011c786:	89 c1                	mov    %eax,%ecx
f011c788:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011c78f:	10 00 00 
f011c792:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011c797:	0f b6 d0             	movzbl %al,%edx
f011c79a:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011c7a0:	01 d0                	add    %edx,%eax
f011c7a2:	48                   	dec    %eax
f011c7a3:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011c7a9:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011c7af:	ba 00 00 00 00       	mov    $0x0,%edx
f011c7b4:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011c7ba:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011c7c0:	29 d0                	sub    %edx,%eax
f011c7c2:	89 c3                	mov    %eax,%ebx
f011c7c4:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011c7cb:	10 00 00 
f011c7ce:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011c7d3:	0f b6 c0             	movzbl %al,%eax
f011c7d6:	c1 e0 04             	shl    $0x4,%eax
f011c7d9:	89 c2                	mov    %eax,%edx
f011c7db:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011c7e1:	01 d0                	add    %edx,%eax
f011c7e3:	48                   	dec    %eax
f011c7e4:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011c7ea:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011c7f0:	ba 00 00 00 00       	mov    $0x0,%edx
f011c7f5:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011c7fb:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011c801:	29 d0                	sub    %edx,%eax
f011c803:	01 d8                	add    %ebx,%eax
f011c805:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f011c80a:	39 c1                	cmp    %eax,%ecx
f011c80c:	74 17                	je     f011c825 <test_kmalloc_bestfit2+0xb23>
f011c80e:	83 ec 04             	sub    $0x4,%esp
f011c811:	68 4c a3 13 f0       	push   $0xf013a34c
f011c816:	68 a5 02 00 00       	push   $0x2a5
f011c81b:	68 32 9f 13 f0       	push   $0xf0139f32
f011c820:	e8 8b 39 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c825:	e8 5a 7e fe ff       	call   f0104684 <pf_calculate_free_frames>
f011c82a:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011c82d:	74 17                	je     f011c846 <test_kmalloc_bestfit2+0xb44>
f011c82f:	83 ec 04             	sub    $0x4,%esp
f011c832:	68 4c 9f 13 f0       	push   $0xf0139f4c
f011c837:	68 a6 02 00 00       	push   $0x2a6
f011c83c:	68 32 9f 13 f0       	push   $0xf0139f32
f011c841:	e8 6a 39 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  512) panic("Wrong allocation:");
f011c846:	e8 f3 05 ff ff       	call   f010ce3e <sys_calculate_free_frames>
f011c84b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011c84e:	29 c2                	sub    %eax,%edx
f011c850:	89 d0                	mov    %edx,%eax
f011c852:	3d 00 02 00 00       	cmp    $0x200,%eax
f011c857:	74 17                	je     f011c870 <test_kmalloc_bestfit2+0xb6e>
f011c859:	83 ec 04             	sub    $0x4,%esp
f011c85c:	68 6a a4 13 f0       	push   $0xf013a46a
f011c861:	68 a7 02 00 00       	push   $0x2a7
f011c866:	68 32 9f 13 f0       	push   $0xf0139f32
f011c86b:	e8 40 39 fe ff       	call   f01001b0 <_panic>

		//6 KB
		freeFrames = sys_calculate_free_frames() ;
f011c870:	e8 c9 05 ff ff       	call   f010ce3e <sys_calculate_free_frames>
f011c875:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c878:	e8 07 7e fe ff       	call   f0104684 <pf_calculate_free_frames>
f011c87d:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[9] = kmalloc(6*kilo);
f011c880:	83 ec 0c             	sub    $0xc,%esp
f011c883:	68 00 18 00 00       	push   $0x1800
f011c888:	e8 c6 b9 fe ff       	call   f0108253 <kmalloc>
f011c88d:	83 c4 10             	add    $0x10,%esp
f011c890:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 9*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011c896:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011c89c:	89 c1                	mov    %eax,%ecx
f011c89e:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011c8a5:	10 00 00 
f011c8a8:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011c8ad:	0f b6 d0             	movzbl %al,%edx
f011c8b0:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011c8b6:	01 d0                	add    %edx,%eax
f011c8b8:	48                   	dec    %eax
f011c8b9:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011c8bf:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011c8c5:	ba 00 00 00 00       	mov    $0x0,%edx
f011c8ca:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011c8d0:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011c8d6:	29 d0                	sub    %edx,%eax
f011c8d8:	89 c3                	mov    %eax,%ebx
f011c8da:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011c8e1:	10 00 00 
f011c8e4:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011c8e9:	0f b6 c0             	movzbl %al,%eax
f011c8ec:	c1 e0 04             	shl    $0x4,%eax
f011c8ef:	89 c2                	mov    %eax,%edx
f011c8f1:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011c8f7:	01 d0                	add    %edx,%eax
f011c8f9:	48                   	dec    %eax
f011c8fa:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011c900:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011c906:	ba 00 00 00 00       	mov    $0x0,%edx
f011c90b:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011c911:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011c917:	29 d0                	sub    %edx,%eax
f011c919:	01 d8                	add    %ebx,%eax
f011c91b:	2d 00 80 6f 09       	sub    $0x96f8000,%eax
f011c920:	39 c1                	cmp    %eax,%ecx
f011c922:	74 17                	je     f011c93b <test_kmalloc_bestfit2+0xc39>
f011c924:	83 ec 04             	sub    $0x4,%esp
f011c927:	68 4c a3 13 f0       	push   $0xf013a34c
f011c92c:	68 ad 02 00 00       	push   $0x2ad
f011c931:	68 32 9f 13 f0       	push   $0xf0139f32
f011c936:	e8 75 38 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c93b:	e8 44 7d fe ff       	call   f0104684 <pf_calculate_free_frames>
f011c940:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011c943:	74 17                	je     f011c95c <test_kmalloc_bestfit2+0xc5a>
f011c945:	83 ec 04             	sub    $0x4,%esp
f011c948:	68 4c 9f 13 f0       	push   $0xf0139f4c
f011c94d:	68 ae 02 00 00       	push   $0x2ae
f011c952:	68 32 9f 13 f0       	push   $0xf0139f32
f011c957:	e8 54 38 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  2) panic("Wrong allocation:");
f011c95c:	e8 dd 04 ff ff       	call   f010ce3e <sys_calculate_free_frames>
f011c961:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011c964:	29 c2                	sub    %eax,%edx
f011c966:	89 d0                	mov    %edx,%eax
f011c968:	83 f8 02             	cmp    $0x2,%eax
f011c96b:	74 17                	je     f011c984 <test_kmalloc_bestfit2+0xc82>
f011c96d:	83 ec 04             	sub    $0x4,%esp
f011c970:	68 6a a4 13 f0       	push   $0xf013a46a
f011c975:	68 af 02 00 00       	push   $0x2af
f011c97a:	68 32 9f 13 f0       	push   $0xf0139f32
f011c97f:	e8 2c 38 fe ff       	call   f01001b0 <_panic>

		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011c984:	e8 b5 04 ff ff       	call   f010ce3e <sys_calculate_free_frames>
f011c989:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c98c:	e8 f3 7c fe ff       	call   f0104684 <pf_calculate_free_frames>
f011c991:	89 45 e0             	mov    %eax,-0x20(%ebp)
		kfree(ptr_allocations[5]);
f011c994:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011c99a:	83 ec 0c             	sub    $0xc,%esp
f011c99d:	50                   	push   %eax
f011c99e:	e8 3b ba fe ff       	call   f01083de <kfree>
f011c9a3:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c9a6:	e8 d9 7c fe ff       	call   f0104684 <pf_calculate_free_frames>
f011c9ab:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011c9ae:	74 17                	je     f011c9c7 <test_kmalloc_bestfit2+0xcc5>
f011c9b0:	83 ec 04             	sub    $0x4,%esp
f011c9b3:	68 4c 9f 13 f0       	push   $0xf0139f4c
f011c9b8:	68 b5 02 00 00       	push   $0x2b5
f011c9bd:	68 32 9f 13 f0       	push   $0xf0139f32
f011c9c2:	e8 e9 37 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) !=  768) panic("Wrong free: Extra or less pages are removed from main memory.");
f011c9c7:	e8 72 04 ff ff       	call   f010ce3e <sys_calculate_free_frames>
f011c9cc:	2b 45 e4             	sub    -0x1c(%ebp),%eax
f011c9cf:	3d 00 03 00 00       	cmp    $0x300,%eax
f011c9d4:	74 17                	je     f011c9ed <test_kmalloc_bestfit2+0xceb>
f011c9d6:	83 ec 04             	sub    $0x4,%esp
f011c9d9:	68 2c a4 13 f0       	push   $0xf013a42c
f011c9de:	68 b6 02 00 00       	push   $0x2b6
f011c9e3:	68 32 9f 13 f0       	push   $0xf0139f32
f011c9e8:	e8 c3 37 fe ff       	call   f01001b0 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011c9ed:	e8 4c 04 ff ff       	call   f010ce3e <sys_calculate_free_frames>
f011c9f2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c9f5:	e8 8a 7c fe ff       	call   f0104684 <pf_calculate_free_frames>
f011c9fa:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[10] = kmalloc(3*Mega-kilo);
f011c9fd:	83 ec 0c             	sub    $0xc,%esp
f011ca00:	68 00 fc 2f 00       	push   $0x2ffc00
f011ca05:	e8 49 b8 fe ff       	call   f0108253 <kmalloc>
f011ca0a:	83 c4 10             	add    $0x10,%esp
f011ca0d:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 4*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011ca13:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011ca19:	89 c1                	mov    %eax,%ecx
f011ca1b:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011ca22:	10 00 00 
f011ca25:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011ca2a:	0f b6 d0             	movzbl %al,%edx
f011ca2d:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011ca33:	01 d0                	add    %edx,%eax
f011ca35:	48                   	dec    %eax
f011ca36:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011ca3c:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011ca42:	ba 00 00 00 00       	mov    $0x0,%edx
f011ca47:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011ca4d:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011ca53:	29 d0                	sub    %edx,%eax
f011ca55:	89 c3                	mov    %eax,%ebx
f011ca57:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011ca5e:	10 00 00 
f011ca61:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011ca66:	0f b6 c0             	movzbl %al,%eax
f011ca69:	c1 e0 04             	shl    $0x4,%eax
f011ca6c:	89 c2                	mov    %eax,%edx
f011ca6e:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011ca74:	01 d0                	add    %edx,%eax
f011ca76:	48                   	dec    %eax
f011ca77:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011ca7d:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011ca83:	ba 00 00 00 00       	mov    $0x0,%edx
f011ca88:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011ca8e:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011ca94:	29 d0                	sub    %edx,%eax
f011ca96:	01 d8                	add    %ebx,%eax
f011ca98:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f011ca9d:	39 c1                	cmp    %eax,%ecx
f011ca9f:	74 17                	je     f011cab8 <test_kmalloc_bestfit2+0xdb6>
f011caa1:	83 ec 04             	sub    $0x4,%esp
f011caa4:	68 4c a3 13 f0       	push   $0xf013a34c
f011caa9:	68 bc 02 00 00       	push   $0x2bc
f011caae:	68 32 9f 13 f0       	push   $0xf0139f32
f011cab3:	e8 f8 36 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cab8:	e8 c7 7b fe ff       	call   f0104684 <pf_calculate_free_frames>
f011cabd:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011cac0:	74 17                	je     f011cad9 <test_kmalloc_bestfit2+0xdd7>
f011cac2:	83 ec 04             	sub    $0x4,%esp
f011cac5:	68 4c 9f 13 f0       	push   $0xf0139f4c
f011caca:	68 bd 02 00 00       	push   $0x2bd
f011cacf:	68 32 9f 13 f0       	push   $0xf0139f32
f011cad4:	e8 d7 36 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  ((3*Mega)/4096)) panic("Wrong free: Extra or less pages are removed from main memory.");
f011cad9:	e8 60 03 ff ff       	call   f010ce3e <sys_calculate_free_frames>
f011cade:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011cae1:	29 c2                	sub    %eax,%edx
f011cae3:	89 d0                	mov    %edx,%eax
f011cae5:	3d 00 03 00 00       	cmp    $0x300,%eax
f011caea:	74 17                	je     f011cb03 <test_kmalloc_bestfit2+0xe01>
f011caec:	83 ec 04             	sub    $0x4,%esp
f011caef:	68 2c a4 13 f0       	push   $0xf013a42c
f011caf4:	68 be 02 00 00       	push   $0x2be
f011caf9:	68 32 9f 13 f0       	push   $0xf0139f32
f011cafe:	e8 ad 36 fe ff       	call   f01001b0 <_panic>

		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f011cb03:	e8 36 03 ff ff       	call   f010ce3e <sys_calculate_free_frames>
f011cb08:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011cb0b:	e8 74 7b fe ff       	call   f0104684 <pf_calculate_free_frames>
f011cb10:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[11] = kmalloc(4*Mega-kilo);
f011cb13:	83 ec 0c             	sub    $0xc,%esp
f011cb16:	68 00 fc 3f 00       	push   $0x3ffc00
f011cb1b:	e8 33 b7 fe ff       	call   f0108253 <kmalloc>
f011cb20:	83 c4 10             	add    $0x10,%esp
f011cb23:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011cb29:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011cb2f:	89 c1                	mov    %eax,%ecx
f011cb31:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011cb38:	10 00 00 
f011cb3b:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011cb40:	0f b6 d0             	movzbl %al,%edx
f011cb43:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011cb49:	01 d0                	add    %edx,%eax
f011cb4b:	48                   	dec    %eax
f011cb4c:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011cb52:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011cb58:	ba 00 00 00 00       	mov    $0x0,%edx
f011cb5d:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011cb63:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011cb69:	29 d0                	sub    %edx,%eax
f011cb6b:	89 c3                	mov    %eax,%ebx
f011cb6d:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011cb74:	10 00 00 
f011cb77:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011cb7c:	0f b6 c0             	movzbl %al,%eax
f011cb7f:	c1 e0 04             	shl    $0x4,%eax
f011cb82:	89 c2                	mov    %eax,%edx
f011cb84:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011cb8a:	01 d0                	add    %edx,%eax
f011cb8c:	48                   	dec    %eax
f011cb8d:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011cb93:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011cb99:	ba 00 00 00 00       	mov    $0x0,%edx
f011cb9e:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011cba4:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011cbaa:	29 d0                	sub    %edx,%eax
f011cbac:	01 d8                	add    %ebx,%eax
f011cbae:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011cbb3:	39 c1                	cmp    %eax,%ecx
f011cbb5:	74 17                	je     f011cbce <test_kmalloc_bestfit2+0xecc>
f011cbb7:	83 ec 04             	sub    $0x4,%esp
f011cbba:	68 4c a3 13 f0       	push   $0xf013a34c
f011cbbf:	68 c4 02 00 00       	push   $0x2c4
f011cbc4:	68 32 9f 13 f0       	push   $0xf0139f32
f011cbc9:	e8 e2 35 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cbce:	e8 b1 7a fe ff       	call   f0104684 <pf_calculate_free_frames>
f011cbd3:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011cbd6:	74 17                	je     f011cbef <test_kmalloc_bestfit2+0xeed>
f011cbd8:	83 ec 04             	sub    $0x4,%esp
f011cbdb:	68 4c 9f 13 f0       	push   $0xf0139f4c
f011cbe0:	68 c5 02 00 00       	push   $0x2c5
f011cbe5:	68 32 9f 13 f0       	push   $0xf0139f32
f011cbea:	e8 c1 35 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((4*Mega)/4096)) panic("Wrong free: Extra or less pages are removed from main memory.");
f011cbef:	e8 4a 02 ff ff       	call   f010ce3e <sys_calculate_free_frames>
f011cbf4:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011cbf7:	29 c2                	sub    %eax,%edx
f011cbf9:	89 d0                	mov    %edx,%eax
f011cbfb:	3d 00 04 00 00       	cmp    $0x400,%eax
f011cc00:	74 17                	je     f011cc19 <test_kmalloc_bestfit2+0xf17>
f011cc02:	83 ec 04             	sub    $0x4,%esp
f011cc05:	68 2c a4 13 f0       	push   $0xf013a42c
f011cc0a:	68 c6 02 00 00       	push   $0x2c6
f011cc0f:	68 32 9f 13 f0       	push   $0xf0139f32
f011cc14:	e8 97 35 fe ff       	call   f01001b0 <_panic>
	}

	//	b) Attempt to allocate large segment with no suitable fragment to fit on
	{
		//Large Allocation
		ptr_allocations[12] = kmalloc((KERNEL_HEAP_MAX - ACTUAL_START - 14*Mega));
f011cc19:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f011cc20:	10 00 00 
f011cc23:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011cc28:	0f b6 d0             	movzbl %al,%edx
f011cc2b:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011cc31:	01 d0                	add    %edx,%eax
f011cc33:	48                   	dec    %eax
f011cc34:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f011cc3a:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011cc40:	ba 00 00 00 00       	mov    $0x0,%edx
f011cc45:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f011cc4b:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011cc51:	29 d0                	sub    %edx,%eax
f011cc53:	89 c1                	mov    %eax,%ecx
f011cc55:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011cc5c:	10 00 00 
f011cc5f:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011cc64:	0f b6 c0             	movzbl %al,%eax
f011cc67:	c1 e0 04             	shl    $0x4,%eax
f011cc6a:	89 c2                	mov    %eax,%edx
f011cc6c:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011cc72:	01 d0                	add    %edx,%eax
f011cc74:	48                   	dec    %eax
f011cc75:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011cc7b:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011cc81:	ba 00 00 00 00       	mov    $0x0,%edx
f011cc86:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011cc8c:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011cc92:	29 d0                	sub    %edx,%eax
f011cc94:	01 c8                	add    %ecx,%eax
f011cc96:	ba 00 b0 1f 09       	mov    $0x91fb000,%edx
f011cc9b:	29 c2                	sub    %eax,%edx
f011cc9d:	89 d0                	mov    %edx,%eax
f011cc9f:	83 ec 0c             	sub    $0xc,%esp
f011cca2:	50                   	push   %eax
f011cca3:	e8 ab b5 fe ff       	call   f0108253 <kmalloc>
f011cca8:	83 c4 10             	add    $0x10,%esp
f011ccab:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		if (ptr_allocations[12] != NULL) panic("Kmalloc: Attempt to allocate large segment with no suitable fragment to fit on, should return NULL");
f011ccb1:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011ccb7:	85 c0                	test   %eax,%eax
f011ccb9:	74 17                	je     f011ccd2 <test_kmalloc_bestfit2+0xfd0>
f011ccbb:	83 ec 04             	sub    $0x4,%esp
f011ccbe:	68 7c a4 13 f0       	push   $0xf013a47c
f011ccc3:	68 ce 02 00 00       	push   $0x2ce
f011ccc8:	68 32 9f 13 f0       	push   $0xf0139f32
f011cccd:	e8 de 34 fe ff       	call   f01001b0 <_panic>

		cprintf("Congratulations!! test BEST FIT allocation (2) completed successfully.\n");
f011ccd2:	83 ec 0c             	sub    $0xc,%esp
f011ccd5:	68 e0 a4 13 f0       	push   $0xf013a4e0
f011ccda:	e8 52 41 fe ff       	call   f0100e31 <cprintf>
f011ccdf:	83 c4 10             	add    $0x10,%esp
	}
	return 1;
f011cce2:	b8 01 00 00 00       	mov    $0x1,%eax

}
f011cce7:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011ccea:	5b                   	pop    %ebx
f011cceb:	5f                   	pop    %edi
f011ccec:	5d                   	pop    %ebp
f011cced:	c3                   	ret    

f011ccee <test_kmalloc_firstfit1>:

int test_kmalloc_firstfit1()
{
f011ccee:	55                   	push   %ebp
f011ccef:	89 e5                	mov    %esp,%ebp
f011ccf1:	57                   	push   %edi
f011ccf2:	53                   	push   %ebx
f011ccf3:	81 ec 40 01 00 00    	sub    $0x140,%esp
	cprintf("==============================================\n");
f011ccf9:	83 ec 0c             	sub    $0xc,%esp
f011ccfc:	68 74 9e 13 f0       	push   $0xf0139e74
f011cd01:	e8 2b 41 fe ff       	call   f0100e31 <cprintf>
f011cd06:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011cd09:	83 ec 0c             	sub    $0xc,%esp
f011cd0c:	68 a4 9e 13 f0       	push   $0xf0139ea4
f011cd11:	e8 1b 41 fe ff       	call   f0100e31 <cprintf>
f011cd16:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011cd19:	83 ec 0c             	sub    $0xc,%esp
f011cd1c:	68 74 9e 13 f0       	push   $0xf0139e74
f011cd21:	e8 0b 41 fe ff       	call   f0100e31 <cprintf>
f011cd26:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011cd29:	8d 95 c0 fe ff ff    	lea    -0x140(%ebp),%edx
f011cd2f:	b9 14 00 00 00       	mov    $0x14,%ecx
f011cd34:	b8 00 00 00 00       	mov    $0x0,%eax
f011cd39:	89 d7                	mov    %edx,%edi
f011cd3b:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeDiskFrames;

	//[1] Allocate all
	{
		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011cd3d:	e8 fc 00 ff ff       	call   f010ce3e <sys_calculate_free_frames>
f011cd42:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cd45:	e8 3a 79 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011cd4a:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[0] = kmalloc(1*Mega-kilo);
f011cd4d:	83 ec 0c             	sub    $0xc,%esp
f011cd50:	68 00 fc 0f 00       	push   $0xffc00
f011cd55:	e8 f9 b4 fe ff       	call   f0108253 <kmalloc>
f011cd5a:	83 c4 10             	add    $0x10,%esp
f011cd5d:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011cd63:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011cd69:	89 c1                	mov    %eax,%ecx
f011cd6b:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f011cd72:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011cd77:	0f b6 d0             	movzbl %al,%edx
f011cd7a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011cd7d:	01 d0                	add    %edx,%eax
f011cd7f:	48                   	dec    %eax
f011cd80:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011cd83:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011cd86:	ba 00 00 00 00       	mov    $0x0,%edx
f011cd8b:	f7 75 ec             	divl   -0x14(%ebp)
f011cd8e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011cd91:	29 d0                	sub    %edx,%eax
f011cd93:	89 c3                	mov    %eax,%ebx
f011cd95:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011cd9c:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011cda1:	0f b6 c0             	movzbl %al,%eax
f011cda4:	c1 e0 04             	shl    $0x4,%eax
f011cda7:	89 c2                	mov    %eax,%edx
f011cda9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011cdac:	01 d0                	add    %edx,%eax
f011cdae:	48                   	dec    %eax
f011cdaf:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011cdb2:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011cdb5:	ba 00 00 00 00       	mov    $0x0,%edx
f011cdba:	f7 75 e4             	divl   -0x1c(%ebp)
f011cdbd:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011cdc0:	29 d0                	sub    %edx,%eax
f011cdc2:	01 d8                	add    %ebx,%eax
f011cdc4:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011cdc9:	39 c1                	cmp    %eax,%ecx
f011cdcb:	74 17                	je     f011cde4 <test_kmalloc_firstfit1+0xf6>
f011cdcd:	83 ec 04             	sub    $0x4,%esp
f011cdd0:	68 4c a3 13 f0       	push   $0xf013a34c
f011cdd5:	68 e6 02 00 00       	push   $0x2e6
f011cdda:	68 32 9f 13 f0       	push   $0xf0139f32
f011cddf:	e8 cc 33 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cde4:	e8 9b 78 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011cde9:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011cdec:	74 17                	je     f011ce05 <test_kmalloc_firstfit1+0x117>
f011cdee:	83 ec 04             	sub    $0x4,%esp
f011cdf1:	68 4c 9f 13 f0       	push   $0xf0139f4c
f011cdf6:	68 e7 02 00 00       	push   $0x2e7
f011cdfb:	68 32 9f 13 f0       	push   $0xf0139f32
f011ce00:	e8 ab 33 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011ce05:	e8 34 00 ff ff       	call   f010ce3e <sys_calculate_free_frames>
f011ce0a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011ce0d:	29 c2                	sub    %eax,%edx
f011ce0f:	89 d0                	mov    %edx,%eax
f011ce11:	3d 00 01 00 00       	cmp    $0x100,%eax
f011ce16:	74 17                	je     f011ce2f <test_kmalloc_firstfit1+0x141>
f011ce18:	83 ec 04             	sub    $0x4,%esp
f011ce1b:	68 7c a3 13 f0       	push   $0xf013a37c
f011ce20:	68 e8 02 00 00       	push   $0x2e8
f011ce25:	68 32 9f 13 f0       	push   $0xf0139f32
f011ce2a:	e8 81 33 fe ff       	call   f01001b0 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011ce2f:	e8 0a 00 ff ff       	call   f010ce3e <sys_calculate_free_frames>
f011ce34:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ce37:	e8 48 78 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011ce3c:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[1] = kmalloc(1*Mega-kilo);
f011ce3f:	83 ec 0c             	sub    $0xc,%esp
f011ce42:	68 00 fc 0f 00       	push   $0xffc00
f011ce47:	e8 07 b4 fe ff       	call   f0108253 <kmalloc>
f011ce4c:	83 c4 10             	add    $0x10,%esp
f011ce4f:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 1*Mega)) panic("Wrong start address for the allocated space... ");
f011ce55:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011ce5b:	89 c1                	mov    %eax,%ecx
f011ce5d:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f011ce64:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011ce69:	0f b6 d0             	movzbl %al,%edx
f011ce6c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011ce6f:	01 d0                	add    %edx,%eax
f011ce71:	48                   	dec    %eax
f011ce72:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011ce75:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011ce78:	ba 00 00 00 00       	mov    $0x0,%edx
f011ce7d:	f7 75 dc             	divl   -0x24(%ebp)
f011ce80:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011ce83:	29 d0                	sub    %edx,%eax
f011ce85:	89 c3                	mov    %eax,%ebx
f011ce87:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011ce8e:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011ce93:	0f b6 c0             	movzbl %al,%eax
f011ce96:	c1 e0 04             	shl    $0x4,%eax
f011ce99:	89 c2                	mov    %eax,%edx
f011ce9b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011ce9e:	01 d0                	add    %edx,%eax
f011cea0:	48                   	dec    %eax
f011cea1:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011cea4:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011cea7:	ba 00 00 00 00       	mov    $0x0,%edx
f011ceac:	f7 75 d4             	divl   -0x2c(%ebp)
f011ceaf:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011ceb2:	29 d0                	sub    %edx,%eax
f011ceb4:	01 d8                	add    %ebx,%eax
f011ceb6:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f011cebb:	39 c1                	cmp    %eax,%ecx
f011cebd:	74 17                	je     f011ced6 <test_kmalloc_firstfit1+0x1e8>
f011cebf:	83 ec 04             	sub    $0x4,%esp
f011cec2:	68 4c a3 13 f0       	push   $0xf013a34c
f011cec7:	68 ee 02 00 00       	push   $0x2ee
f011cecc:	68 32 9f 13 f0       	push   $0xf0139f32
f011ced1:	e8 da 32 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ced6:	e8 a9 77 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011cedb:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011cede:	74 17                	je     f011cef7 <test_kmalloc_firstfit1+0x209>
f011cee0:	83 ec 04             	sub    $0x4,%esp
f011cee3:	68 4c 9f 13 f0       	push   $0xf0139f4c
f011cee8:	68 ef 02 00 00       	push   $0x2ef
f011ceed:	68 32 9f 13 f0       	push   $0xf0139f32
f011cef2:	e8 b9 32 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011cef7:	e8 42 ff fe ff       	call   f010ce3e <sys_calculate_free_frames>
f011cefc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011ceff:	29 c2                	sub    %eax,%edx
f011cf01:	89 d0                	mov    %edx,%eax
f011cf03:	3d 00 01 00 00       	cmp    $0x100,%eax
f011cf08:	74 17                	je     f011cf21 <test_kmalloc_firstfit1+0x233>
f011cf0a:	83 ec 04             	sub    $0x4,%esp
f011cf0d:	68 7c a3 13 f0       	push   $0xf013a37c
f011cf12:	68 f0 02 00 00       	push   $0x2f0
f011cf17:	68 32 9f 13 f0       	push   $0xf0139f32
f011cf1c:	e8 8f 32 fe ff       	call   f01001b0 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011cf21:	e8 18 ff fe ff       	call   f010ce3e <sys_calculate_free_frames>
f011cf26:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cf29:	e8 56 77 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011cf2e:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[2] = kmalloc(1*Mega-kilo);
f011cf31:	83 ec 0c             	sub    $0xc,%esp
f011cf34:	68 00 fc 0f 00       	push   $0xffc00
f011cf39:	e8 15 b3 fe ff       	call   f0108253 <kmalloc>
f011cf3e:	83 c4 10             	add    $0x10,%esp
f011cf41:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... ");
f011cf47:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011cf4d:	89 c1                	mov    %eax,%ecx
f011cf4f:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011cf56:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011cf5b:	0f b6 d0             	movzbl %al,%edx
f011cf5e:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011cf61:	01 d0                	add    %edx,%eax
f011cf63:	48                   	dec    %eax
f011cf64:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011cf67:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011cf6a:	ba 00 00 00 00       	mov    $0x0,%edx
f011cf6f:	f7 75 cc             	divl   -0x34(%ebp)
f011cf72:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011cf75:	29 d0                	sub    %edx,%eax
f011cf77:	89 c3                	mov    %eax,%ebx
f011cf79:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011cf80:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011cf85:	0f b6 c0             	movzbl %al,%eax
f011cf88:	c1 e0 04             	shl    $0x4,%eax
f011cf8b:	89 c2                	mov    %eax,%edx
f011cf8d:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011cf90:	01 d0                	add    %edx,%eax
f011cf92:	48                   	dec    %eax
f011cf93:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011cf96:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011cf99:	ba 00 00 00 00       	mov    $0x0,%edx
f011cf9e:	f7 75 c4             	divl   -0x3c(%ebp)
f011cfa1:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011cfa4:	29 d0                	sub    %edx,%eax
f011cfa6:	01 d8                	add    %ebx,%eax
f011cfa8:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011cfad:	39 c1                	cmp    %eax,%ecx
f011cfaf:	74 17                	je     f011cfc8 <test_kmalloc_firstfit1+0x2da>
f011cfb1:	83 ec 04             	sub    $0x4,%esp
f011cfb4:	68 4c a3 13 f0       	push   $0xf013a34c
f011cfb9:	68 f6 02 00 00       	push   $0x2f6
f011cfbe:	68 32 9f 13 f0       	push   $0xf0139f32
f011cfc3:	e8 e8 31 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cfc8:	e8 b7 76 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011cfcd:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011cfd0:	74 17                	je     f011cfe9 <test_kmalloc_firstfit1+0x2fb>
f011cfd2:	83 ec 04             	sub    $0x4,%esp
f011cfd5:	68 4c 9f 13 f0       	push   $0xf0139f4c
f011cfda:	68 f7 02 00 00       	push   $0x2f7
f011cfdf:	68 32 9f 13 f0       	push   $0xf0139f32
f011cfe4:	e8 c7 31 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011cfe9:	e8 50 fe fe ff       	call   f010ce3e <sys_calculate_free_frames>
f011cfee:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011cff1:	29 c2                	sub    %eax,%edx
f011cff3:	89 d0                	mov    %edx,%eax
f011cff5:	3d 00 01 00 00       	cmp    $0x100,%eax
f011cffa:	74 17                	je     f011d013 <test_kmalloc_firstfit1+0x325>
f011cffc:	83 ec 04             	sub    $0x4,%esp
f011cfff:	68 7c a3 13 f0       	push   $0xf013a37c
f011d004:	68 f8 02 00 00       	push   $0x2f8
f011d009:	68 32 9f 13 f0       	push   $0xf0139f32
f011d00e:	e8 9d 31 fe ff       	call   f01001b0 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011d013:	e8 26 fe fe ff       	call   f010ce3e <sys_calculate_free_frames>
f011d018:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d01b:	e8 64 76 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011d020:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[3] = kmalloc(1*Mega-kilo);
f011d023:	83 ec 0c             	sub    $0xc,%esp
f011d026:	68 00 fc 0f 00       	push   $0xffc00
f011d02b:	e8 23 b2 fe ff       	call   f0108253 <kmalloc>
f011d030:	83 c4 10             	add    $0x10,%esp
f011d033:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... ");
f011d039:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011d03f:	89 c1                	mov    %eax,%ecx
f011d041:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011d048:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011d04d:	0f b6 d0             	movzbl %al,%edx
f011d050:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011d053:	01 d0                	add    %edx,%eax
f011d055:	48                   	dec    %eax
f011d056:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011d059:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011d05c:	ba 00 00 00 00       	mov    $0x0,%edx
f011d061:	f7 75 bc             	divl   -0x44(%ebp)
f011d064:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011d067:	29 d0                	sub    %edx,%eax
f011d069:	89 c3                	mov    %eax,%ebx
f011d06b:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011d072:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011d077:	0f b6 c0             	movzbl %al,%eax
f011d07a:	c1 e0 04             	shl    $0x4,%eax
f011d07d:	89 c2                	mov    %eax,%edx
f011d07f:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011d082:	01 d0                	add    %edx,%eax
f011d084:	48                   	dec    %eax
f011d085:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011d088:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011d08b:	ba 00 00 00 00       	mov    $0x0,%edx
f011d090:	f7 75 b4             	divl   -0x4c(%ebp)
f011d093:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011d096:	29 d0                	sub    %edx,%eax
f011d098:	01 d8                	add    %ebx,%eax
f011d09a:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f011d09f:	39 c1                	cmp    %eax,%ecx
f011d0a1:	74 17                	je     f011d0ba <test_kmalloc_firstfit1+0x3cc>
f011d0a3:	83 ec 04             	sub    $0x4,%esp
f011d0a6:	68 4c a3 13 f0       	push   $0xf013a34c
f011d0ab:	68 fe 02 00 00       	push   $0x2fe
f011d0b0:	68 32 9f 13 f0       	push   $0xf0139f32
f011d0b5:	e8 f6 30 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d0ba:	e8 c5 75 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011d0bf:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d0c2:	74 17                	je     f011d0db <test_kmalloc_firstfit1+0x3ed>
f011d0c4:	83 ec 04             	sub    $0x4,%esp
f011d0c7:	68 4c 9f 13 f0       	push   $0xf0139f4c
f011d0cc:	68 ff 02 00 00       	push   $0x2ff
f011d0d1:	68 32 9f 13 f0       	push   $0xf0139f32
f011d0d6:	e8 d5 30 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011d0db:	e8 5e fd fe ff       	call   f010ce3e <sys_calculate_free_frames>
f011d0e0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d0e3:	29 c2                	sub    %eax,%edx
f011d0e5:	89 d0                	mov    %edx,%eax
f011d0e7:	3d 00 01 00 00       	cmp    $0x100,%eax
f011d0ec:	74 17                	je     f011d105 <test_kmalloc_firstfit1+0x417>
f011d0ee:	83 ec 04             	sub    $0x4,%esp
f011d0f1:	68 7c a3 13 f0       	push   $0xf013a37c
f011d0f6:	68 00 03 00 00       	push   $0x300
f011d0fb:	68 32 9f 13 f0       	push   $0xf0139f32
f011d100:	e8 ab 30 fe ff       	call   f01001b0 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011d105:	e8 34 fd fe ff       	call   f010ce3e <sys_calculate_free_frames>
f011d10a:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d10d:	e8 72 75 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011d112:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[4] = kmalloc(2*Mega-kilo);
f011d115:	83 ec 0c             	sub    $0xc,%esp
f011d118:	68 00 fc 1f 00       	push   $0x1ffc00
f011d11d:	e8 31 b1 fe ff       	call   f0108253 <kmalloc>
f011d122:	83 c4 10             	add    $0x10,%esp
f011d125:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011d12b:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011d131:	89 c1                	mov    %eax,%ecx
f011d133:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011d13a:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011d13f:	0f b6 d0             	movzbl %al,%edx
f011d142:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011d145:	01 d0                	add    %edx,%eax
f011d147:	48                   	dec    %eax
f011d148:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011d14b:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011d14e:	ba 00 00 00 00       	mov    $0x0,%edx
f011d153:	f7 75 ac             	divl   -0x54(%ebp)
f011d156:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011d159:	29 d0                	sub    %edx,%eax
f011d15b:	89 c3                	mov    %eax,%ebx
f011d15d:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011d164:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011d169:	0f b6 c0             	movzbl %al,%eax
f011d16c:	c1 e0 04             	shl    $0x4,%eax
f011d16f:	89 c2                	mov    %eax,%edx
f011d171:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011d174:	01 d0                	add    %edx,%eax
f011d176:	48                   	dec    %eax
f011d177:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011d17a:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011d17d:	ba 00 00 00 00       	mov    $0x0,%edx
f011d182:	f7 75 a4             	divl   -0x5c(%ebp)
f011d185:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011d188:	29 d0                	sub    %edx,%eax
f011d18a:	01 d8                	add    %ebx,%eax
f011d18c:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011d191:	39 c1                	cmp    %eax,%ecx
f011d193:	74 17                	je     f011d1ac <test_kmalloc_firstfit1+0x4be>
f011d195:	83 ec 04             	sub    $0x4,%esp
f011d198:	68 4c a3 13 f0       	push   $0xf013a34c
f011d19d:	68 06 03 00 00       	push   $0x306
f011d1a2:	68 32 9f 13 f0       	push   $0xf0139f32
f011d1a7:	e8 04 30 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d1ac:	e8 d3 74 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011d1b1:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d1b4:	74 17                	je     f011d1cd <test_kmalloc_firstfit1+0x4df>
f011d1b6:	83 ec 04             	sub    $0x4,%esp
f011d1b9:	68 4c 9f 13 f0       	push   $0xf0139f4c
f011d1be:	68 07 03 00 00       	push   $0x307
f011d1c3:	68 32 9f 13 f0       	push   $0xf0139f32
f011d1c8:	e8 e3 2f fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011d1cd:	e8 6c fc fe ff       	call   f010ce3e <sys_calculate_free_frames>
f011d1d2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d1d5:	29 c2                	sub    %eax,%edx
f011d1d7:	89 d0                	mov    %edx,%eax
f011d1d9:	3d 00 02 00 00       	cmp    $0x200,%eax
f011d1de:	74 17                	je     f011d1f7 <test_kmalloc_firstfit1+0x509>
f011d1e0:	83 ec 04             	sub    $0x4,%esp
f011d1e3:	68 7c a3 13 f0       	push   $0xf013a37c
f011d1e8:	68 08 03 00 00       	push   $0x308
f011d1ed:	68 32 9f 13 f0       	push   $0xf0139f32
f011d1f2:	e8 b9 2f fe ff       	call   f01001b0 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011d1f7:	e8 42 fc fe ff       	call   f010ce3e <sys_calculate_free_frames>
f011d1fc:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d1ff:	e8 80 74 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011d204:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[5] = kmalloc(2*Mega-kilo);
f011d207:	83 ec 0c             	sub    $0xc,%esp
f011d20a:	68 00 fc 1f 00       	push   $0x1ffc00
f011d20f:	e8 3f b0 fe ff       	call   f0108253 <kmalloc>
f011d214:	83 c4 10             	add    $0x10,%esp
f011d217:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 6*Mega)) panic("Wrong start address for the allocated space... ");
f011d21d:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011d223:	89 c1                	mov    %eax,%ecx
f011d225:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011d22c:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011d231:	0f b6 d0             	movzbl %al,%edx
f011d234:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011d237:	01 d0                	add    %edx,%eax
f011d239:	48                   	dec    %eax
f011d23a:	89 45 98             	mov    %eax,-0x68(%ebp)
f011d23d:	8b 45 98             	mov    -0x68(%ebp),%eax
f011d240:	ba 00 00 00 00       	mov    $0x0,%edx
f011d245:	f7 75 9c             	divl   -0x64(%ebp)
f011d248:	8b 45 98             	mov    -0x68(%ebp),%eax
f011d24b:	29 d0                	sub    %edx,%eax
f011d24d:	89 c3                	mov    %eax,%ebx
f011d24f:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011d256:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011d25b:	0f b6 c0             	movzbl %al,%eax
f011d25e:	c1 e0 04             	shl    $0x4,%eax
f011d261:	89 c2                	mov    %eax,%edx
f011d263:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011d266:	01 d0                	add    %edx,%eax
f011d268:	48                   	dec    %eax
f011d269:	89 45 90             	mov    %eax,-0x70(%ebp)
f011d26c:	8b 45 90             	mov    -0x70(%ebp),%eax
f011d26f:	ba 00 00 00 00       	mov    $0x0,%edx
f011d274:	f7 75 94             	divl   -0x6c(%ebp)
f011d277:	8b 45 90             	mov    -0x70(%ebp),%eax
f011d27a:	29 d0                	sub    %edx,%eax
f011d27c:	01 d8                	add    %ebx,%eax
f011d27e:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f011d283:	39 c1                	cmp    %eax,%ecx
f011d285:	74 17                	je     f011d29e <test_kmalloc_firstfit1+0x5b0>
f011d287:	83 ec 04             	sub    $0x4,%esp
f011d28a:	68 4c a3 13 f0       	push   $0xf013a34c
f011d28f:	68 0e 03 00 00       	push   $0x30e
f011d294:	68 32 9f 13 f0       	push   $0xf0139f32
f011d299:	e8 12 2f fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d29e:	e8 e1 73 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011d2a3:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d2a6:	74 17                	je     f011d2bf <test_kmalloc_firstfit1+0x5d1>
f011d2a8:	83 ec 04             	sub    $0x4,%esp
f011d2ab:	68 4c 9f 13 f0       	push   $0xf0139f4c
f011d2b0:	68 0f 03 00 00       	push   $0x30f
f011d2b5:	68 32 9f 13 f0       	push   $0xf0139f32
f011d2ba:	e8 f1 2e fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011d2bf:	e8 7a fb fe ff       	call   f010ce3e <sys_calculate_free_frames>
f011d2c4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d2c7:	29 c2                	sub    %eax,%edx
f011d2c9:	89 d0                	mov    %edx,%eax
f011d2cb:	3d 00 02 00 00       	cmp    $0x200,%eax
f011d2d0:	74 17                	je     f011d2e9 <test_kmalloc_firstfit1+0x5fb>
f011d2d2:	83 ec 04             	sub    $0x4,%esp
f011d2d5:	68 7c a3 13 f0       	push   $0xf013a37c
f011d2da:	68 10 03 00 00       	push   $0x310
f011d2df:	68 32 9f 13 f0       	push   $0xf0139f32
f011d2e4:	e8 c7 2e fe ff       	call   f01001b0 <_panic>

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f011d2e9:	e8 50 fb fe ff       	call   f010ce3e <sys_calculate_free_frames>
f011d2ee:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d2f1:	e8 8e 73 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011d2f6:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[6] = kmalloc(3*Mega-kilo);
f011d2f9:	83 ec 0c             	sub    $0xc,%esp
f011d2fc:	68 00 fc 2f 00       	push   $0x2ffc00
f011d301:	e8 4d af fe ff       	call   f0108253 <kmalloc>
f011d306:	83 c4 10             	add    $0x10,%esp
f011d309:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) ptr_allocations[6] !=  (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f011d30f:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011d315:	89 c1                	mov    %eax,%ecx
f011d317:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011d31e:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011d323:	0f b6 d0             	movzbl %al,%edx
f011d326:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011d329:	01 d0                	add    %edx,%eax
f011d32b:	48                   	dec    %eax
f011d32c:	89 45 88             	mov    %eax,-0x78(%ebp)
f011d32f:	8b 45 88             	mov    -0x78(%ebp),%eax
f011d332:	ba 00 00 00 00       	mov    $0x0,%edx
f011d337:	f7 75 8c             	divl   -0x74(%ebp)
f011d33a:	8b 45 88             	mov    -0x78(%ebp),%eax
f011d33d:	29 d0                	sub    %edx,%eax
f011d33f:	89 c3                	mov    %eax,%ebx
f011d341:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011d348:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011d34d:	0f b6 c0             	movzbl %al,%eax
f011d350:	c1 e0 04             	shl    $0x4,%eax
f011d353:	89 c2                	mov    %eax,%edx
f011d355:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011d358:	01 d0                	add    %edx,%eax
f011d35a:	48                   	dec    %eax
f011d35b:	89 45 80             	mov    %eax,-0x80(%ebp)
f011d35e:	8b 45 80             	mov    -0x80(%ebp),%eax
f011d361:	ba 00 00 00 00       	mov    $0x0,%edx
f011d366:	f7 75 84             	divl   -0x7c(%ebp)
f011d369:	8b 45 80             	mov    -0x80(%ebp),%eax
f011d36c:	29 d0                	sub    %edx,%eax
f011d36e:	01 d8                	add    %ebx,%eax
f011d370:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f011d375:	39 c1                	cmp    %eax,%ecx
f011d377:	74 17                	je     f011d390 <test_kmalloc_firstfit1+0x6a2>
f011d379:	83 ec 04             	sub    $0x4,%esp
f011d37c:	68 4c a3 13 f0       	push   $0xf013a34c
f011d381:	68 16 03 00 00       	push   $0x316
f011d386:	68 32 9f 13 f0       	push   $0xf0139f32
f011d38b:	e8 20 2e fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d390:	e8 ef 72 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011d395:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d398:	74 17                	je     f011d3b1 <test_kmalloc_firstfit1+0x6c3>
f011d39a:	83 ec 04             	sub    $0x4,%esp
f011d39d:	68 4c 9f 13 f0       	push   $0xf0139f4c
f011d3a2:	68 17 03 00 00       	push   $0x317
f011d3a7:	68 32 9f 13 f0       	push   $0xf0139f32
f011d3ac:	e8 ff 2d fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: ");
f011d3b1:	e8 88 fa fe ff       	call   f010ce3e <sys_calculate_free_frames>
f011d3b6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d3b9:	29 c2                	sub    %eax,%edx
f011d3bb:	89 d0                	mov    %edx,%eax
f011d3bd:	3d 00 03 00 00       	cmp    $0x300,%eax
f011d3c2:	74 17                	je     f011d3db <test_kmalloc_firstfit1+0x6ed>
f011d3c4:	83 ec 04             	sub    $0x4,%esp
f011d3c7:	68 7c a3 13 f0       	push   $0xf013a37c
f011d3cc:	68 18 03 00 00       	push   $0x318
f011d3d1:	68 32 9f 13 f0       	push   $0xf0139f32
f011d3d6:	e8 d5 2d fe ff       	call   f01001b0 <_panic>

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f011d3db:	e8 5e fa fe ff       	call   f010ce3e <sys_calculate_free_frames>
f011d3e0:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d3e3:	e8 9c 72 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011d3e8:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[7] = kmalloc(3*Mega-kilo);
f011d3eb:	83 ec 0c             	sub    $0xc,%esp
f011d3ee:	68 00 fc 2f 00       	push   $0x2ffc00
f011d3f3:	e8 5b ae fe ff       	call   f0108253 <kmalloc>
f011d3f8:	83 c4 10             	add    $0x10,%esp
f011d3fb:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 11*Mega)) panic("Wrong start address for the allocated space... ");
f011d401:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011d407:	89 c1                	mov    %eax,%ecx
f011d409:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011d410:	10 00 00 
f011d413:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011d418:	0f b6 d0             	movzbl %al,%edx
f011d41b:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011d421:	01 d0                	add    %edx,%eax
f011d423:	48                   	dec    %eax
f011d424:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011d42a:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011d430:	ba 00 00 00 00       	mov    $0x0,%edx
f011d435:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011d43b:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011d441:	29 d0                	sub    %edx,%eax
f011d443:	89 c3                	mov    %eax,%ebx
f011d445:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011d44c:	10 00 00 
f011d44f:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011d454:	0f b6 c0             	movzbl %al,%eax
f011d457:	c1 e0 04             	shl    $0x4,%eax
f011d45a:	89 c2                	mov    %eax,%edx
f011d45c:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011d462:	01 d0                	add    %edx,%eax
f011d464:	48                   	dec    %eax
f011d465:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011d46b:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011d471:	ba 00 00 00 00       	mov    $0x0,%edx
f011d476:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011d47c:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011d482:	29 d0                	sub    %edx,%eax
f011d484:	01 d8                	add    %ebx,%eax
f011d486:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f011d48b:	39 c1                	cmp    %eax,%ecx
f011d48d:	74 17                	je     f011d4a6 <test_kmalloc_firstfit1+0x7b8>
f011d48f:	83 ec 04             	sub    $0x4,%esp
f011d492:	68 4c a3 13 f0       	push   $0xf013a34c
f011d497:	68 1e 03 00 00       	push   $0x31e
f011d49c:	68 32 9f 13 f0       	push   $0xf0139f32
f011d4a1:	e8 0a 2d fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d4a6:	e8 d9 71 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011d4ab:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d4ae:	74 17                	je     f011d4c7 <test_kmalloc_firstfit1+0x7d9>
f011d4b0:	83 ec 04             	sub    $0x4,%esp
f011d4b3:	68 4c 9f 13 f0       	push   $0xf0139f4c
f011d4b8:	68 1f 03 00 00       	push   $0x31f
f011d4bd:	68 32 9f 13 f0       	push   $0xf0139f32
f011d4c2:	e8 e9 2c fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: ");
f011d4c7:	e8 72 f9 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f011d4cc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d4cf:	29 c2                	sub    %eax,%edx
f011d4d1:	89 d0                	mov    %edx,%eax
f011d4d3:	3d 00 03 00 00       	cmp    $0x300,%eax
f011d4d8:	74 17                	je     f011d4f1 <test_kmalloc_firstfit1+0x803>
f011d4da:	83 ec 04             	sub    $0x4,%esp
f011d4dd:	68 7c a3 13 f0       	push   $0xf013a37c
f011d4e2:	68 20 03 00 00       	push   $0x320
f011d4e7:	68 32 9f 13 f0       	push   $0xf0139f32
f011d4ec:	e8 bf 2c fe ff       	call   f01001b0 <_panic>
	}

	//[2] Free some to create holes
	{
		//1 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011d4f1:	e8 48 f9 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f011d4f6:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d4f9:	e8 86 71 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011d4fe:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[1]);
f011d501:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011d507:	83 ec 0c             	sub    $0xc,%esp
f011d50a:	50                   	push   %eax
f011d50b:	e8 ce ae fe ff       	call   f01083de <kfree>
f011d510:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d513:	e8 6c 71 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011d518:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d51b:	74 17                	je     f011d534 <test_kmalloc_firstfit1+0x846>
f011d51d:	83 ec 04             	sub    $0x4,%esp
f011d520:	68 4c 9f 13 f0       	push   $0xf0139f4c
f011d525:	68 29 03 00 00       	push   $0x329
f011d52a:	68 32 9f 13 f0       	push   $0xf0139f32
f011d52f:	e8 7c 2c fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011d534:	e8 05 f9 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f011d539:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011d53c:	3d 00 01 00 00       	cmp    $0x100,%eax
f011d541:	74 17                	je     f011d55a <test_kmalloc_firstfit1+0x86c>
f011d543:	83 ec 04             	sub    $0x4,%esp
f011d546:	68 8f a3 13 f0       	push   $0xf013a38f
f011d54b:	68 2a 03 00 00       	push   $0x32a
f011d550:	68 32 9f 13 f0       	push   $0xf0139f32
f011d555:	e8 56 2c fe ff       	call   f01001b0 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011d55a:	e8 df f8 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f011d55f:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d562:	e8 1d 71 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011d567:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[4]);
f011d56a:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011d570:	83 ec 0c             	sub    $0xc,%esp
f011d573:	50                   	push   %eax
f011d574:	e8 65 ae fe ff       	call   f01083de <kfree>
f011d579:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d57c:	e8 03 71 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011d581:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d584:	74 17                	je     f011d59d <test_kmalloc_firstfit1+0x8af>
f011d586:	83 ec 04             	sub    $0x4,%esp
f011d589:	68 4c 9f 13 f0       	push   $0xf0139f4c
f011d58e:	68 30 03 00 00       	push   $0x330
f011d593:	68 32 9f 13 f0       	push   $0xf0139f32
f011d598:	e8 13 2c fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: ");
f011d59d:	e8 9c f8 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f011d5a2:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011d5a5:	3d 00 02 00 00       	cmp    $0x200,%eax
f011d5aa:	74 17                	je     f011d5c3 <test_kmalloc_firstfit1+0x8d5>
f011d5ac:	83 ec 04             	sub    $0x4,%esp
f011d5af:	68 8f a3 13 f0       	push   $0xf013a38f
f011d5b4:	68 31 03 00 00       	push   $0x331
f011d5b9:	68 32 9f 13 f0       	push   $0xf0139f32
f011d5be:	e8 ed 2b fe ff       	call   f01001b0 <_panic>

		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011d5c3:	e8 76 f8 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f011d5c8:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d5cb:	e8 b4 70 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011d5d0:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[6]);
f011d5d3:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011d5d9:	83 ec 0c             	sub    $0xc,%esp
f011d5dc:	50                   	push   %eax
f011d5dd:	e8 fc ad fe ff       	call   f01083de <kfree>
f011d5e2:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d5e5:	e8 9a 70 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011d5ea:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d5ed:	74 17                	je     f011d606 <test_kmalloc_firstfit1+0x918>
f011d5ef:	83 ec 04             	sub    $0x4,%esp
f011d5f2:	68 4c 9f 13 f0       	push   $0xf0139f4c
f011d5f7:	68 37 03 00 00       	push   $0x337
f011d5fc:	68 32 9f 13 f0       	push   $0xf0139f32
f011d601:	e8 aa 2b fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 768) panic("Wrong free: ");
f011d606:	e8 33 f8 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f011d60b:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011d60e:	3d 00 03 00 00       	cmp    $0x300,%eax
f011d613:	74 17                	je     f011d62c <test_kmalloc_firstfit1+0x93e>
f011d615:	83 ec 04             	sub    $0x4,%esp
f011d618:	68 8f a3 13 f0       	push   $0xf013a38f
f011d61d:	68 38 03 00 00       	push   $0x338
f011d622:	68 32 9f 13 f0       	push   $0xf0139f32
f011d627:	e8 84 2b fe ff       	call   f01001b0 <_panic>
	}

	//[3] Allocate again [test first fit]
	{
		//Allocate 512 KB - should be placed in 1st hole
		freeFrames = sys_calculate_free_frames() ;
f011d62c:	e8 0d f8 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f011d631:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d634:	e8 4b 70 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011d639:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[8] = kmalloc(512*kilo - kilo);
f011d63c:	83 ec 0c             	sub    $0xc,%esp
f011d63f:	68 00 fc 07 00       	push   $0x7fc00
f011d644:	e8 0a ac fe ff       	call   f0108253 <kmalloc>
f011d649:	83 c4 10             	add    $0x10,%esp
f011d64c:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 1*Mega)) panic("Wrong start address for the allocated space... ");
f011d652:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011d658:	89 c1                	mov    %eax,%ecx
f011d65a:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011d661:	10 00 00 
f011d664:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011d669:	0f b6 d0             	movzbl %al,%edx
f011d66c:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011d672:	01 d0                	add    %edx,%eax
f011d674:	48                   	dec    %eax
f011d675:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011d67b:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011d681:	ba 00 00 00 00       	mov    $0x0,%edx
f011d686:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011d68c:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011d692:	29 d0                	sub    %edx,%eax
f011d694:	89 c3                	mov    %eax,%ebx
f011d696:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011d69d:	10 00 00 
f011d6a0:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011d6a5:	0f b6 c0             	movzbl %al,%eax
f011d6a8:	c1 e0 04             	shl    $0x4,%eax
f011d6ab:	89 c2                	mov    %eax,%edx
f011d6ad:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011d6b3:	01 d0                	add    %edx,%eax
f011d6b5:	48                   	dec    %eax
f011d6b6:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011d6bc:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011d6c2:	ba 00 00 00 00       	mov    $0x0,%edx
f011d6c7:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011d6cd:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011d6d3:	29 d0                	sub    %edx,%eax
f011d6d5:	01 d8                	add    %ebx,%eax
f011d6d7:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f011d6dc:	39 c1                	cmp    %eax,%ecx
f011d6de:	74 17                	je     f011d6f7 <test_kmalloc_firstfit1+0xa09>
f011d6e0:	83 ec 04             	sub    $0x4,%esp
f011d6e3:	68 4c a3 13 f0       	push   $0xf013a34c
f011d6e8:	68 41 03 00 00       	push   $0x341
f011d6ed:	68 32 9f 13 f0       	push   $0xf0139f32
f011d6f2:	e8 b9 2a fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d6f7:	e8 88 6f fe ff       	call   f0104684 <pf_calculate_free_frames>
f011d6fc:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d6ff:	74 17                	je     f011d718 <test_kmalloc_firstfit1+0xa2a>
f011d701:	83 ec 04             	sub    $0x4,%esp
f011d704:	68 4c 9f 13 f0       	push   $0xf0139f4c
f011d709:	68 42 03 00 00       	push   $0x342
f011d70e:	68 32 9f 13 f0       	push   $0xf0139f32
f011d713:	e8 98 2a fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 128) panic("Wrong allocation: ");
f011d718:	e8 21 f7 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f011d71d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d720:	29 c2                	sub    %eax,%edx
f011d722:	89 d0                	mov    %edx,%eax
f011d724:	3d 80 00 00 00       	cmp    $0x80,%eax
f011d729:	74 17                	je     f011d742 <test_kmalloc_firstfit1+0xa54>
f011d72b:	83 ec 04             	sub    $0x4,%esp
f011d72e:	68 7c a3 13 f0       	push   $0xf013a37c
f011d733:	68 43 03 00 00       	push   $0x343
f011d738:	68 32 9f 13 f0       	push   $0xf0139f32
f011d73d:	e8 6e 2a fe ff       	call   f01001b0 <_panic>

		//Allocate 1 MB - should be placed in 2nd hole
		freeFrames = sys_calculate_free_frames() ;
f011d742:	e8 f7 f6 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f011d747:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d74a:	e8 35 6f fe ff       	call   f0104684 <pf_calculate_free_frames>
f011d74f:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega - kilo);
f011d752:	83 ec 0c             	sub    $0xc,%esp
f011d755:	68 00 fc 0f 00       	push   $0xffc00
f011d75a:	e8 f4 aa fe ff       	call   f0108253 <kmalloc>
f011d75f:	83 c4 10             	add    $0x10,%esp
f011d762:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011d768:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011d76e:	89 c1                	mov    %eax,%ecx
f011d770:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011d777:	10 00 00 
f011d77a:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011d77f:	0f b6 d0             	movzbl %al,%edx
f011d782:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011d788:	01 d0                	add    %edx,%eax
f011d78a:	48                   	dec    %eax
f011d78b:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011d791:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011d797:	ba 00 00 00 00       	mov    $0x0,%edx
f011d79c:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011d7a2:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011d7a8:	29 d0                	sub    %edx,%eax
f011d7aa:	89 c3                	mov    %eax,%ebx
f011d7ac:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011d7b3:	10 00 00 
f011d7b6:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011d7bb:	0f b6 c0             	movzbl %al,%eax
f011d7be:	c1 e0 04             	shl    $0x4,%eax
f011d7c1:	89 c2                	mov    %eax,%edx
f011d7c3:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011d7c9:	01 d0                	add    %edx,%eax
f011d7cb:	48                   	dec    %eax
f011d7cc:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011d7d2:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011d7d8:	ba 00 00 00 00       	mov    $0x0,%edx
f011d7dd:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011d7e3:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011d7e9:	29 d0                	sub    %edx,%eax
f011d7eb:	01 d8                	add    %ebx,%eax
f011d7ed:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011d7f2:	39 c1                	cmp    %eax,%ecx
f011d7f4:	74 17                	je     f011d80d <test_kmalloc_firstfit1+0xb1f>
f011d7f6:	83 ec 04             	sub    $0x4,%esp
f011d7f9:	68 4c a3 13 f0       	push   $0xf013a34c
f011d7fe:	68 49 03 00 00       	push   $0x349
f011d803:	68 32 9f 13 f0       	push   $0xf0139f32
f011d808:	e8 a3 29 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d80d:	e8 72 6e fe ff       	call   f0104684 <pf_calculate_free_frames>
f011d812:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d815:	74 17                	je     f011d82e <test_kmalloc_firstfit1+0xb40>
f011d817:	83 ec 04             	sub    $0x4,%esp
f011d81a:	68 4c 9f 13 f0       	push   $0xf0139f4c
f011d81f:	68 4a 03 00 00       	push   $0x34a
f011d824:	68 32 9f 13 f0       	push   $0xf0139f32
f011d829:	e8 82 29 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011d82e:	e8 0b f6 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f011d833:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d836:	29 c2                	sub    %eax,%edx
f011d838:	89 d0                	mov    %edx,%eax
f011d83a:	3d 00 01 00 00       	cmp    $0x100,%eax
f011d83f:	74 17                	je     f011d858 <test_kmalloc_firstfit1+0xb6a>
f011d841:	83 ec 04             	sub    $0x4,%esp
f011d844:	68 7c a3 13 f0       	push   $0xf013a37c
f011d849:	68 4b 03 00 00       	push   $0x34b
f011d84e:	68 32 9f 13 f0       	push   $0xf0139f32
f011d853:	e8 58 29 fe ff       	call   f01001b0 <_panic>


		//Allocate 256 KB - should be placed in remaining of 1st hole
		freeFrames = sys_calculate_free_frames() ;
f011d858:	e8 e1 f5 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f011d85d:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d860:	e8 1f 6e fe ff       	call   f0104684 <pf_calculate_free_frames>
f011d865:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[10] = kmalloc(256*kilo - kilo);
f011d868:	83 ec 0c             	sub    $0xc,%esp
f011d86b:	68 00 fc 03 00       	push   $0x3fc00
f011d870:	e8 de a9 fe ff       	call   f0108253 <kmalloc>
f011d875:	83 c4 10             	add    $0x10,%esp
f011d878:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 1*Mega + 512*kilo)) panic("Wrong start address for the allocated space... ");
f011d87e:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011d884:	89 c1                	mov    %eax,%ecx
f011d886:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011d88d:	10 00 00 
f011d890:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011d895:	0f b6 d0             	movzbl %al,%edx
f011d898:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011d89e:	01 d0                	add    %edx,%eax
f011d8a0:	48                   	dec    %eax
f011d8a1:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011d8a7:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011d8ad:	ba 00 00 00 00       	mov    $0x0,%edx
f011d8b2:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011d8b8:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011d8be:	29 d0                	sub    %edx,%eax
f011d8c0:	89 c3                	mov    %eax,%ebx
f011d8c2:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011d8c9:	10 00 00 
f011d8cc:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011d8d1:	0f b6 c0             	movzbl %al,%eax
f011d8d4:	c1 e0 04             	shl    $0x4,%eax
f011d8d7:	89 c2                	mov    %eax,%edx
f011d8d9:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011d8df:	01 d0                	add    %edx,%eax
f011d8e1:	48                   	dec    %eax
f011d8e2:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011d8e8:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011d8ee:	ba 00 00 00 00       	mov    $0x0,%edx
f011d8f3:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011d8f9:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011d8ff:	29 d0                	sub    %edx,%eax
f011d901:	01 d8                	add    %ebx,%eax
f011d903:	2d 00 c0 e7 09       	sub    $0x9e7c000,%eax
f011d908:	39 c1                	cmp    %eax,%ecx
f011d90a:	74 17                	je     f011d923 <test_kmalloc_firstfit1+0xc35>
f011d90c:	83 ec 04             	sub    $0x4,%esp
f011d90f:	68 4c a3 13 f0       	push   $0xf013a34c
f011d914:	68 52 03 00 00       	push   $0x352
f011d919:	68 32 9f 13 f0       	push   $0xf0139f32
f011d91e:	e8 8d 28 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d923:	e8 5c 6d fe ff       	call   f0104684 <pf_calculate_free_frames>
f011d928:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d92b:	74 17                	je     f011d944 <test_kmalloc_firstfit1+0xc56>
f011d92d:	83 ec 04             	sub    $0x4,%esp
f011d930:	68 4c 9f 13 f0       	push   $0xf0139f4c
f011d935:	68 53 03 00 00       	push   $0x353
f011d93a:	68 32 9f 13 f0       	push   $0xf0139f32
f011d93f:	e8 6c 28 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 64) panic("Wrong allocation: ");
f011d944:	e8 f5 f4 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f011d949:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d94c:	29 c2                	sub    %eax,%edx
f011d94e:	89 d0                	mov    %edx,%eax
f011d950:	83 f8 40             	cmp    $0x40,%eax
f011d953:	74 17                	je     f011d96c <test_kmalloc_firstfit1+0xc7e>
f011d955:	83 ec 04             	sub    $0x4,%esp
f011d958:	68 7c a3 13 f0       	push   $0xf013a37c
f011d95d:	68 54 03 00 00       	push   $0x354
f011d962:	68 32 9f 13 f0       	push   $0xf0139f32
f011d967:	e8 44 28 fe ff       	call   f01001b0 <_panic>

		//Allocate 2 MB - should be placed in 3rd hole
		freeFrames = sys_calculate_free_frames() ;
f011d96c:	e8 cd f4 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f011d971:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d974:	e8 0b 6d fe ff       	call   f0104684 <pf_calculate_free_frames>
f011d979:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[11] = kmalloc(2*Mega);
f011d97c:	83 ec 0c             	sub    $0xc,%esp
f011d97f:	68 00 00 20 00       	push   $0x200000
f011d984:	e8 ca a8 fe ff       	call   f0108253 <kmalloc>
f011d989:	83 c4 10             	add    $0x10,%esp
f011d98c:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f011d992:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011d998:	89 c1                	mov    %eax,%ecx
f011d99a:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011d9a1:	10 00 00 
f011d9a4:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011d9a9:	0f b6 d0             	movzbl %al,%edx
f011d9ac:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011d9b2:	01 d0                	add    %edx,%eax
f011d9b4:	48                   	dec    %eax
f011d9b5:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011d9bb:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011d9c1:	ba 00 00 00 00       	mov    $0x0,%edx
f011d9c6:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011d9cc:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011d9d2:	29 d0                	sub    %edx,%eax
f011d9d4:	89 c3                	mov    %eax,%ebx
f011d9d6:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011d9dd:	10 00 00 
f011d9e0:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011d9e5:	0f b6 c0             	movzbl %al,%eax
f011d9e8:	c1 e0 04             	shl    $0x4,%eax
f011d9eb:	89 c2                	mov    %eax,%edx
f011d9ed:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011d9f3:	01 d0                	add    %edx,%eax
f011d9f5:	48                   	dec    %eax
f011d9f6:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011d9fc:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011da02:	ba 00 00 00 00       	mov    $0x0,%edx
f011da07:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011da0d:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011da13:	29 d0                	sub    %edx,%eax
f011da15:	01 d8                	add    %ebx,%eax
f011da17:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f011da1c:	39 c1                	cmp    %eax,%ecx
f011da1e:	74 17                	je     f011da37 <test_kmalloc_firstfit1+0xd49>
f011da20:	83 ec 04             	sub    $0x4,%esp
f011da23:	68 4c a3 13 f0       	push   $0xf013a34c
f011da28:	68 5a 03 00 00       	push   $0x35a
f011da2d:	68 32 9f 13 f0       	push   $0xf0139f32
f011da32:	e8 79 27 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011da37:	e8 02 f4 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f011da3c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011da3f:	29 c2                	sub    %eax,%edx
f011da41:	89 d0                	mov    %edx,%eax
f011da43:	3d 00 02 00 00       	cmp    $0x200,%eax
f011da48:	74 17                	je     f011da61 <test_kmalloc_firstfit1+0xd73>
f011da4a:	83 ec 04             	sub    $0x4,%esp
f011da4d:	68 7c a3 13 f0       	push   $0xf013a37c
f011da52:	68 5b 03 00 00       	push   $0x35b
f011da57:	68 32 9f 13 f0       	push   $0xf0139f32
f011da5c:	e8 4f 27 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011da61:	e8 1e 6c fe ff       	call   f0104684 <pf_calculate_free_frames>
f011da66:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011da69:	74 17                	je     f011da82 <test_kmalloc_firstfit1+0xd94>
f011da6b:	83 ec 04             	sub    $0x4,%esp
f011da6e:	68 4c 9f 13 f0       	push   $0xf0139f4c
f011da73:	68 5c 03 00 00       	push   $0x35c
f011da78:	68 32 9f 13 f0       	push   $0xf0139f32
f011da7d:	e8 2e 27 fe ff       	call   f01001b0 <_panic>


		//Allocate 4 MB - should be placed in end of all allocations
		freeFrames = sys_calculate_free_frames() ;
f011da82:	e8 b7 f3 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f011da87:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011da8a:	e8 f5 6b fe ff       	call   f0104684 <pf_calculate_free_frames>
f011da8f:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[12] = kmalloc(4*Mega - kilo);
f011da92:	83 ec 0c             	sub    $0xc,%esp
f011da95:	68 00 fc 3f 00       	push   $0x3ffc00
f011da9a:	e8 b4 a7 fe ff       	call   f0108253 <kmalloc>
f011da9f:	83 c4 10             	add    $0x10,%esp
f011daa2:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 14*Mega)) panic("Wrong start address for the allocated space... ");
f011daa8:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011daae:	89 c1                	mov    %eax,%ecx
f011dab0:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011dab7:	10 00 00 
f011daba:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011dabf:	0f b6 d0             	movzbl %al,%edx
f011dac2:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011dac8:	01 d0                	add    %edx,%eax
f011daca:	48                   	dec    %eax
f011dacb:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011dad1:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011dad7:	ba 00 00 00 00       	mov    $0x0,%edx
f011dadc:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011dae2:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011dae8:	29 d0                	sub    %edx,%eax
f011daea:	89 c3                	mov    %eax,%ebx
f011daec:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011daf3:	10 00 00 
f011daf6:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011dafb:	0f b6 c0             	movzbl %al,%eax
f011dafe:	c1 e0 04             	shl    $0x4,%eax
f011db01:	89 c2                	mov    %eax,%edx
f011db03:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011db09:	01 d0                	add    %edx,%eax
f011db0b:	48                   	dec    %eax
f011db0c:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011db12:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011db18:	ba 00 00 00 00       	mov    $0x0,%edx
f011db1d:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011db23:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011db29:	29 d0                	sub    %edx,%eax
f011db2b:	01 d8                	add    %ebx,%eax
f011db2d:	2d 00 c0 1f 09       	sub    $0x91fc000,%eax
f011db32:	39 c1                	cmp    %eax,%ecx
f011db34:	74 17                	je     f011db4d <test_kmalloc_firstfit1+0xe5f>
f011db36:	83 ec 04             	sub    $0x4,%esp
f011db39:	68 4c a3 13 f0       	push   $0xf013a34c
f011db3e:	68 63 03 00 00       	push   $0x363
f011db43:	68 32 9f 13 f0       	push   $0xf0139f32
f011db48:	e8 63 26 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011db4d:	e8 32 6b fe ff       	call   f0104684 <pf_calculate_free_frames>
f011db52:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011db55:	74 17                	je     f011db6e <test_kmalloc_firstfit1+0xe80>
f011db57:	83 ec 04             	sub    $0x4,%esp
f011db5a:	68 4c 9f 13 f0       	push   $0xf0139f4c
f011db5f:	68 64 03 00 00       	push   $0x364
f011db64:	68 32 9f 13 f0       	push   $0xf0139f32
f011db69:	e8 42 26 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1024) panic("Wrong allocation: ");
f011db6e:	e8 cb f2 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f011db73:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011db76:	29 c2                	sub    %eax,%edx
f011db78:	89 d0                	mov    %edx,%eax
f011db7a:	3d 00 04 00 00       	cmp    $0x400,%eax
f011db7f:	74 17                	je     f011db98 <test_kmalloc_firstfit1+0xeaa>
f011db81:	83 ec 04             	sub    $0x4,%esp
f011db84:	68 7c a3 13 f0       	push   $0xf013a37c
f011db89:	68 65 03 00 00       	push   $0x365
f011db8e:	68 32 9f 13 f0       	push   $0xf0139f32
f011db93:	e8 18 26 fe ff       	call   f01001b0 <_panic>
	}

	//[4] Free contiguous allocations
	{
		//1 MB Hole appended to previous 256 KB hole
		freeFrames = sys_calculate_free_frames() ;
f011db98:	e8 a1 f2 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f011db9d:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011dba0:	e8 df 6a fe ff       	call   f0104684 <pf_calculate_free_frames>
f011dba5:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[2]);
f011dba8:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011dbae:	83 ec 0c             	sub    $0xc,%esp
f011dbb1:	50                   	push   %eax
f011dbb2:	e8 27 a8 fe ff       	call   f01083de <kfree>
f011dbb7:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011dbba:	e8 c5 6a fe ff       	call   f0104684 <pf_calculate_free_frames>
f011dbbf:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011dbc2:	74 17                	je     f011dbdb <test_kmalloc_firstfit1+0xeed>
f011dbc4:	83 ec 04             	sub    $0x4,%esp
f011dbc7:	68 4c 9f 13 f0       	push   $0xf0139f4c
f011dbcc:	68 6e 03 00 00       	push   $0x36e
f011dbd1:	68 32 9f 13 f0       	push   $0xf0139f32
f011dbd6:	e8 d5 25 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011dbdb:	e8 5e f2 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f011dbe0:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011dbe3:	3d 00 01 00 00       	cmp    $0x100,%eax
f011dbe8:	74 17                	je     f011dc01 <test_kmalloc_firstfit1+0xf13>
f011dbea:	83 ec 04             	sub    $0x4,%esp
f011dbed:	68 8f a3 13 f0       	push   $0xf013a38f
f011dbf2:	68 6f 03 00 00       	push   $0x36f
f011dbf7:	68 32 9f 13 f0       	push   $0xf0139f32
f011dbfc:	e8 af 25 fe ff       	call   f01001b0 <_panic>

		//Next 1 MB Hole appended also
		freeFrames = sys_calculate_free_frames() ;
f011dc01:	e8 38 f2 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f011dc06:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011dc09:	e8 76 6a fe ff       	call   f0104684 <pf_calculate_free_frames>
f011dc0e:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[3]);
f011dc11:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011dc17:	83 ec 0c             	sub    $0xc,%esp
f011dc1a:	50                   	push   %eax
f011dc1b:	e8 be a7 fe ff       	call   f01083de <kfree>
f011dc20:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011dc23:	e8 5c 6a fe ff       	call   f0104684 <pf_calculate_free_frames>
f011dc28:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011dc2b:	74 17                	je     f011dc44 <test_kmalloc_firstfit1+0xf56>
f011dc2d:	83 ec 04             	sub    $0x4,%esp
f011dc30:	68 4c 9f 13 f0       	push   $0xf0139f4c
f011dc35:	68 75 03 00 00       	push   $0x375
f011dc3a:	68 32 9f 13 f0       	push   $0xf0139f32
f011dc3f:	e8 6c 25 fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011dc44:	e8 f5 f1 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f011dc49:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011dc4c:	3d 00 01 00 00       	cmp    $0x100,%eax
f011dc51:	74 17                	je     f011dc6a <test_kmalloc_firstfit1+0xf7c>
f011dc53:	83 ec 04             	sub    $0x4,%esp
f011dc56:	68 8f a3 13 f0       	push   $0xf013a38f
f011dc5b:	68 76 03 00 00       	push   $0x376
f011dc60:	68 32 9f 13 f0       	push   $0xf0139f32
f011dc65:	e8 46 25 fe ff       	call   f01001b0 <_panic>

	//[5] Allocate again [test first fit]
	{
		//[FIRST FIT Case]
		//Allocate 1 MB - should be placed in the contiguous hole (256 KB + 2 MB)
		freeFrames = sys_calculate_free_frames() ;
f011dc6a:	e8 cf f1 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f011dc6f:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011dc72:	e8 0d 6a fe ff       	call   f0104684 <pf_calculate_free_frames>
f011dc77:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[13] = kmalloc(1*Mega);
f011dc7a:	83 ec 0c             	sub    $0xc,%esp
f011dc7d:	68 00 00 10 00       	push   $0x100000
f011dc82:	e8 cc a5 fe ff       	call   f0108253 <kmalloc>
f011dc87:	83 c4 10             	add    $0x10,%esp
f011dc8a:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
		if ((uint32) ptr_allocations[13] != (ACTUAL_START + 1*Mega + 768*kilo)) panic("Wrong start address for the allocated space... ");
f011dc90:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011dc96:	89 c1                	mov    %eax,%ecx
f011dc98:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f011dc9f:	10 00 00 
f011dca2:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011dca7:	0f b6 d0             	movzbl %al,%edx
f011dcaa:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011dcb0:	01 d0                	add    %edx,%eax
f011dcb2:	48                   	dec    %eax
f011dcb3:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f011dcb9:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011dcbf:	ba 00 00 00 00       	mov    $0x0,%edx
f011dcc4:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f011dcca:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011dcd0:	29 d0                	sub    %edx,%eax
f011dcd2:	89 c3                	mov    %eax,%ebx
f011dcd4:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011dcdb:	10 00 00 
f011dcde:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011dce3:	0f b6 c0             	movzbl %al,%eax
f011dce6:	c1 e0 04             	shl    $0x4,%eax
f011dce9:	89 c2                	mov    %eax,%edx
f011dceb:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011dcf1:	01 d0                	add    %edx,%eax
f011dcf3:	48                   	dec    %eax
f011dcf4:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011dcfa:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011dd00:	ba 00 00 00 00       	mov    $0x0,%edx
f011dd05:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011dd0b:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011dd11:	29 d0                	sub    %edx,%eax
f011dd13:	01 d8                	add    %ebx,%eax
f011dd15:	2d 00 c0 e3 09       	sub    $0x9e3c000,%eax
f011dd1a:	39 c1                	cmp    %eax,%ecx
f011dd1c:	74 17                	je     f011dd35 <test_kmalloc_firstfit1+0x1047>
f011dd1e:	83 ec 04             	sub    $0x4,%esp
f011dd21:	68 4c a3 13 f0       	push   $0xf013a34c
f011dd26:	68 80 03 00 00       	push   $0x380
f011dd2b:	68 32 9f 13 f0       	push   $0xf0139f32
f011dd30:	e8 7b 24 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011dd35:	e8 4a 69 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011dd3a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011dd3d:	74 17                	je     f011dd56 <test_kmalloc_firstfit1+0x1068>
f011dd3f:	83 ec 04             	sub    $0x4,%esp
f011dd42:	68 4c 9f 13 f0       	push   $0xf0139f4c
f011dd47:	68 81 03 00 00       	push   $0x381
f011dd4c:	68 32 9f 13 f0       	push   $0xf0139f32
f011dd51:	e8 5a 24 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011dd56:	e8 e3 f0 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f011dd5b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011dd5e:	29 c2                	sub    %eax,%edx
f011dd60:	89 d0                	mov    %edx,%eax
f011dd62:	3d 00 01 00 00       	cmp    $0x100,%eax
f011dd67:	74 17                	je     f011dd80 <test_kmalloc_firstfit1+0x1092>
f011dd69:	83 ec 04             	sub    $0x4,%esp
f011dd6c:	68 7c a3 13 f0       	push   $0xf013a37c
f011dd71:	68 82 03 00 00       	push   $0x382
f011dd76:	68 32 9f 13 f0       	push   $0xf0139f32
f011dd7b:	e8 30 24 fe ff       	call   f01001b0 <_panic>
	}

	cprintf("Congratulations!! test FIRST FIT allocation (1) completed successfully.\n");
f011dd80:	83 ec 0c             	sub    $0xc,%esp
f011dd83:	68 28 a5 13 f0       	push   $0xf013a528
f011dd88:	e8 a4 30 fe ff       	call   f0100e31 <cprintf>
f011dd8d:	83 c4 10             	add    $0x10,%esp

	return 1;
f011dd90:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011dd95:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011dd98:	5b                   	pop    %ebx
f011dd99:	5f                   	pop    %edi
f011dd9a:	5d                   	pop    %ebp
f011dd9b:	c3                   	ret    

f011dd9c <test_kmalloc_firstfit2>:

int test_kmalloc_firstfit2()
{
f011dd9c:	55                   	push   %ebp
f011dd9d:	89 e5                	mov    %esp,%ebp
f011dd9f:	57                   	push   %edi
f011dda0:	53                   	push   %ebx
f011dda1:	81 ec 10 01 00 00    	sub    $0x110,%esp
	cprintf("==============================================\n");
f011dda7:	83 ec 0c             	sub    $0xc,%esp
f011ddaa:	68 74 9e 13 f0       	push   $0xf0139e74
f011ddaf:	e8 7d 30 fe ff       	call   f0100e31 <cprintf>
f011ddb4:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011ddb7:	83 ec 0c             	sub    $0xc,%esp
f011ddba:	68 a4 9e 13 f0       	push   $0xf0139ea4
f011ddbf:	e8 6d 30 fe ff       	call   f0100e31 <cprintf>
f011ddc4:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011ddc7:	83 ec 0c             	sub    $0xc,%esp
f011ddca:	68 74 9e 13 f0       	push   $0xf0139e74
f011ddcf:	e8 5d 30 fe ff       	call   f0100e31 <cprintf>
f011ddd4:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011ddd7:	8d 95 f0 fe ff ff    	lea    -0x110(%ebp),%edx
f011dddd:	b9 14 00 00 00       	mov    $0x14,%ecx
f011dde2:	b8 00 00 00 00       	mov    $0x0,%eax
f011dde7:	89 d7                	mov    %edx,%edi
f011dde9:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeFrames;
	uint32 freeDiskFrames;

	//[1] Attempt to allocate more than heap size
	{
		ptr_allocations[0] = kmalloc(KERNEL_HEAP_MAX - ACTUAL_START + 1);
f011ddeb:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
f011ddf2:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011ddf7:	0f b6 d0             	movzbl %al,%edx
f011ddfa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011ddfd:	01 d0                	add    %edx,%eax
f011ddff:	48                   	dec    %eax
f011de00:	89 45 f0             	mov    %eax,-0x10(%ebp)
f011de03:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011de06:	ba 00 00 00 00       	mov    $0x0,%edx
f011de0b:	f7 75 f4             	divl   -0xc(%ebp)
f011de0e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011de11:	29 d0                	sub    %edx,%eax
f011de13:	89 c1                	mov    %eax,%ecx
f011de15:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f011de1c:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011de21:	0f b6 c0             	movzbl %al,%eax
f011de24:	c1 e0 04             	shl    $0x4,%eax
f011de27:	89 c2                	mov    %eax,%edx
f011de29:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011de2c:	01 d0                	add    %edx,%eax
f011de2e:	48                   	dec    %eax
f011de2f:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011de32:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011de35:	ba 00 00 00 00       	mov    $0x0,%edx
f011de3a:	f7 75 ec             	divl   -0x14(%ebp)
f011de3d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011de40:	29 d0                	sub    %edx,%eax
f011de42:	01 c8                	add    %ecx,%eax
f011de44:	ba 01 b0 ff 09       	mov    $0x9ffb001,%edx
f011de49:	29 c2                	sub    %eax,%edx
f011de4b:	89 d0                	mov    %edx,%eax
f011de4d:	83 ec 0c             	sub    $0xc,%esp
f011de50:	50                   	push   %eax
f011de51:	e8 fd a3 fe ff       	call   f0108253 <kmalloc>
f011de56:	83 c4 10             	add    $0x10,%esp
f011de59:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		if (ptr_allocations[0] != NULL) panic("kmalloc: Attempt to allocate more than heap size, should return NULL");
f011de5f:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011de65:	85 c0                	test   %eax,%eax
f011de67:	74 17                	je     f011de80 <test_kmalloc_firstfit2+0xe4>
f011de69:	83 ec 04             	sub    $0x4,%esp
f011de6c:	68 74 a5 13 f0       	push   $0xf013a574
f011de71:	68 97 03 00 00       	push   $0x397
f011de76:	68 32 9f 13 f0       	push   $0xf0139f32
f011de7b:	e8 30 23 fe ff       	call   f01001b0 <_panic>

	//[2] Attempt to allocate space more than any available fragment
	//	a) Create Fragments
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011de80:	e8 b9 ef fe ff       	call   f010ce3e <sys_calculate_free_frames>
f011de85:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011de88:	e8 f7 67 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011de8d:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f011de90:	83 ec 0c             	sub    $0xc,%esp
f011de93:	68 00 fc 1f 00       	push   $0x1ffc00
f011de98:	e8 b6 a3 fe ff       	call   f0108253 <kmalloc>
f011de9d:	83 c4 10             	add    $0x10,%esp
f011dea0:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011dea6:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011deac:	89 c1                	mov    %eax,%ecx
f011deae:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f011deb5:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011deba:	0f b6 d0             	movzbl %al,%edx
f011debd:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011dec0:	01 d0                	add    %edx,%eax
f011dec2:	48                   	dec    %eax
f011dec3:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011dec6:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011dec9:	ba 00 00 00 00       	mov    $0x0,%edx
f011dece:	f7 75 dc             	divl   -0x24(%ebp)
f011ded1:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011ded4:	29 d0                	sub    %edx,%eax
f011ded6:	89 c3                	mov    %eax,%ebx
f011ded8:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011dedf:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011dee4:	0f b6 c0             	movzbl %al,%eax
f011dee7:	c1 e0 04             	shl    $0x4,%eax
f011deea:	89 c2                	mov    %eax,%edx
f011deec:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011deef:	01 d0                	add    %edx,%eax
f011def1:	48                   	dec    %eax
f011def2:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011def5:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011def8:	ba 00 00 00 00       	mov    $0x0,%edx
f011defd:	f7 75 d4             	divl   -0x2c(%ebp)
f011df00:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011df03:	29 d0                	sub    %edx,%eax
f011df05:	01 d8                	add    %ebx,%eax
f011df07:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011df0c:	39 c1                	cmp    %eax,%ecx
f011df0e:	74 17                	je     f011df27 <test_kmalloc_firstfit2+0x18b>
f011df10:	83 ec 04             	sub    $0x4,%esp
f011df13:	68 4c a3 13 f0       	push   $0xf013a34c
f011df18:	68 a1 03 00 00       	push   $0x3a1
f011df1d:	68 32 9f 13 f0       	push   $0xf0139f32
f011df22:	e8 89 22 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011df27:	e8 58 67 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011df2c:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011df2f:	74 17                	je     f011df48 <test_kmalloc_firstfit2+0x1ac>
f011df31:	83 ec 04             	sub    $0x4,%esp
f011df34:	68 4c 9f 13 f0       	push   $0xf0139f4c
f011df39:	68 a2 03 00 00       	push   $0x3a2
f011df3e:	68 32 9f 13 f0       	push   $0xf0139f32
f011df43:	e8 68 22 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011df48:	e8 f1 ee fe ff       	call   f010ce3e <sys_calculate_free_frames>
f011df4d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011df50:	29 c2                	sub    %eax,%edx
f011df52:	89 d0                	mov    %edx,%eax
f011df54:	3d 00 02 00 00       	cmp    $0x200,%eax
f011df59:	74 17                	je     f011df72 <test_kmalloc_firstfit2+0x1d6>
f011df5b:	83 ec 04             	sub    $0x4,%esp
f011df5e:	68 7c a3 13 f0       	push   $0xf013a37c
f011df63:	68 a3 03 00 00       	push   $0x3a3
f011df68:	68 32 9f 13 f0       	push   $0xf0139f32
f011df6d:	e8 3e 22 fe ff       	call   f01001b0 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011df72:	e8 c7 ee fe ff       	call   f010ce3e <sys_calculate_free_frames>
f011df77:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011df7a:	e8 05 67 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011df7f:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f011df82:	83 ec 0c             	sub    $0xc,%esp
f011df85:	68 00 fc 1f 00       	push   $0x1ffc00
f011df8a:	e8 c4 a2 fe ff       	call   f0108253 <kmalloc>
f011df8f:	83 c4 10             	add    $0x10,%esp
f011df92:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... ");
f011df98:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011df9e:	89 c1                	mov    %eax,%ecx
f011dfa0:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011dfa7:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011dfac:	0f b6 d0             	movzbl %al,%edx
f011dfaf:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011dfb2:	01 d0                	add    %edx,%eax
f011dfb4:	48                   	dec    %eax
f011dfb5:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011dfb8:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011dfbb:	ba 00 00 00 00       	mov    $0x0,%edx
f011dfc0:	f7 75 cc             	divl   -0x34(%ebp)
f011dfc3:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011dfc6:	29 d0                	sub    %edx,%eax
f011dfc8:	89 c3                	mov    %eax,%ebx
f011dfca:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011dfd1:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011dfd6:	0f b6 c0             	movzbl %al,%eax
f011dfd9:	c1 e0 04             	shl    $0x4,%eax
f011dfdc:	89 c2                	mov    %eax,%edx
f011dfde:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011dfe1:	01 d0                	add    %edx,%eax
f011dfe3:	48                   	dec    %eax
f011dfe4:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011dfe7:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011dfea:	ba 00 00 00 00       	mov    $0x0,%edx
f011dfef:	f7 75 c4             	divl   -0x3c(%ebp)
f011dff2:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011dff5:	29 d0                	sub    %edx,%eax
f011dff7:	01 d8                	add    %ebx,%eax
f011dff9:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011dffe:	39 c1                	cmp    %eax,%ecx
f011e000:	74 17                	je     f011e019 <test_kmalloc_firstfit2+0x27d>
f011e002:	83 ec 04             	sub    $0x4,%esp
f011e005:	68 4c a3 13 f0       	push   $0xf013a34c
f011e00a:	68 a9 03 00 00       	push   $0x3a9
f011e00f:	68 32 9f 13 f0       	push   $0xf0139f32
f011e014:	e8 97 21 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e019:	e8 66 66 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011e01e:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011e021:	74 17                	je     f011e03a <test_kmalloc_firstfit2+0x29e>
f011e023:	83 ec 04             	sub    $0x4,%esp
f011e026:	68 4c 9f 13 f0       	push   $0xf0139f4c
f011e02b:	68 aa 03 00 00       	push   $0x3aa
f011e030:	68 32 9f 13 f0       	push   $0xf0139f32
f011e035:	e8 76 21 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011e03a:	e8 ff ed fe ff       	call   f010ce3e <sys_calculate_free_frames>
f011e03f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011e042:	29 c2                	sub    %eax,%edx
f011e044:	89 d0                	mov    %edx,%eax
f011e046:	3d 00 02 00 00       	cmp    $0x200,%eax
f011e04b:	74 17                	je     f011e064 <test_kmalloc_firstfit2+0x2c8>
f011e04d:	83 ec 04             	sub    $0x4,%esp
f011e050:	68 7c a3 13 f0       	push   $0xf013a37c
f011e055:	68 ab 03 00 00       	push   $0x3ab
f011e05a:	68 32 9f 13 f0       	push   $0xf0139f32
f011e05f:	e8 4c 21 fe ff       	call   f01001b0 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011e064:	e8 d5 ed fe ff       	call   f010ce3e <sys_calculate_free_frames>
f011e069:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e06c:	e8 13 66 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011e071:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f011e074:	83 ec 0c             	sub    $0xc,%esp
f011e077:	68 00 08 00 00       	push   $0x800
f011e07c:	e8 d2 a1 fe ff       	call   f0108253 <kmalloc>
f011e081:	83 c4 10             	add    $0x10,%esp
f011e084:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
		if ((uint32) ptr_allocations[2] < (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011e08a:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011e090:	89 c1                	mov    %eax,%ecx
f011e092:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011e099:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011e09e:	0f b6 d0             	movzbl %al,%edx
f011e0a1:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011e0a4:	01 d0                	add    %edx,%eax
f011e0a6:	48                   	dec    %eax
f011e0a7:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011e0aa:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011e0ad:	ba 00 00 00 00       	mov    $0x0,%edx
f011e0b2:	f7 75 bc             	divl   -0x44(%ebp)
f011e0b5:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011e0b8:	29 d0                	sub    %edx,%eax
f011e0ba:	89 c3                	mov    %eax,%ebx
f011e0bc:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011e0c3:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011e0c8:	0f b6 c0             	movzbl %al,%eax
f011e0cb:	c1 e0 04             	shl    $0x4,%eax
f011e0ce:	89 c2                	mov    %eax,%edx
f011e0d0:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011e0d3:	01 d0                	add    %edx,%eax
f011e0d5:	48                   	dec    %eax
f011e0d6:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011e0d9:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011e0dc:	ba 00 00 00 00       	mov    $0x0,%edx
f011e0e1:	f7 75 b4             	divl   -0x4c(%ebp)
f011e0e4:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011e0e7:	29 d0                	sub    %edx,%eax
f011e0e9:	01 d8                	add    %ebx,%eax
f011e0eb:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011e0f0:	39 c1                	cmp    %eax,%ecx
f011e0f2:	73 17                	jae    f011e10b <test_kmalloc_firstfit2+0x36f>
f011e0f4:	83 ec 04             	sub    $0x4,%esp
f011e0f7:	68 4c a3 13 f0       	push   $0xf013a34c
f011e0fc:	68 b1 03 00 00       	push   $0x3b1
f011e101:	68 32 9f 13 f0       	push   $0xf0139f32
f011e106:	e8 a5 20 fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e10b:	e8 74 65 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011e110:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011e113:	74 17                	je     f011e12c <test_kmalloc_firstfit2+0x390>
f011e115:	83 ec 04             	sub    $0x4,%esp
f011e118:	68 4c 9f 13 f0       	push   $0xf0139f4c
f011e11d:	68 b2 03 00 00       	push   $0x3b2
f011e122:	68 32 9f 13 f0       	push   $0xf0139f32
f011e127:	e8 84 20 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: ");
f011e12c:	e8 0d ed fe ff       	call   f010ce3e <sys_calculate_free_frames>
f011e131:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011e134:	29 c2                	sub    %eax,%edx
f011e136:	89 d0                	mov    %edx,%eax
f011e138:	83 f8 01             	cmp    $0x1,%eax
f011e13b:	74 17                	je     f011e154 <test_kmalloc_firstfit2+0x3b8>
f011e13d:	83 ec 04             	sub    $0x4,%esp
f011e140:	68 7c a3 13 f0       	push   $0xf013a37c
f011e145:	68 b3 03 00 00       	push   $0x3b3
f011e14a:	68 32 9f 13 f0       	push   $0xf0139f32
f011e14f:	e8 5c 20 fe ff       	call   f01001b0 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011e154:	e8 e5 ec fe ff       	call   f010ce3e <sys_calculate_free_frames>
f011e159:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e15c:	e8 23 65 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011e161:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f011e164:	83 ec 0c             	sub    $0xc,%esp
f011e167:	68 00 08 00 00       	push   $0x800
f011e16c:	e8 e2 a0 fe ff       	call   f0108253 <kmalloc>
f011e171:	83 c4 10             	add    $0x10,%esp
f011e174:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... ");
f011e17a:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011e180:	89 c1                	mov    %eax,%ecx
f011e182:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011e189:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011e18e:	0f b6 d0             	movzbl %al,%edx
f011e191:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011e194:	01 d0                	add    %edx,%eax
f011e196:	48                   	dec    %eax
f011e197:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011e19a:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011e19d:	ba 00 00 00 00       	mov    $0x0,%edx
f011e1a2:	f7 75 ac             	divl   -0x54(%ebp)
f011e1a5:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011e1a8:	29 d0                	sub    %edx,%eax
f011e1aa:	89 c3                	mov    %eax,%ebx
f011e1ac:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011e1b3:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011e1b8:	0f b6 c0             	movzbl %al,%eax
f011e1bb:	c1 e0 04             	shl    $0x4,%eax
f011e1be:	89 c2                	mov    %eax,%edx
f011e1c0:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011e1c3:	01 d0                	add    %edx,%eax
f011e1c5:	48                   	dec    %eax
f011e1c6:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011e1c9:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011e1cc:	ba 00 00 00 00       	mov    $0x0,%edx
f011e1d1:	f7 75 a4             	divl   -0x5c(%ebp)
f011e1d4:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011e1d7:	29 d0                	sub    %edx,%eax
f011e1d9:	01 d8                	add    %ebx,%eax
f011e1db:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f011e1e0:	39 c1                	cmp    %eax,%ecx
f011e1e2:	74 17                	je     f011e1fb <test_kmalloc_firstfit2+0x45f>
f011e1e4:	83 ec 04             	sub    $0x4,%esp
f011e1e7:	68 4c a3 13 f0       	push   $0xf013a34c
f011e1ec:	68 b9 03 00 00       	push   $0x3b9
f011e1f1:	68 32 9f 13 f0       	push   $0xf0139f32
f011e1f6:	e8 b5 1f fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e1fb:	e8 84 64 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011e200:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011e203:	74 17                	je     f011e21c <test_kmalloc_firstfit2+0x480>
f011e205:	83 ec 04             	sub    $0x4,%esp
f011e208:	68 4c 9f 13 f0       	push   $0xf0139f4c
f011e20d:	68 ba 03 00 00       	push   $0x3ba
f011e212:	68 32 9f 13 f0       	push   $0xf0139f32
f011e217:	e8 94 1f fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: ");
f011e21c:	e8 1d ec fe ff       	call   f010ce3e <sys_calculate_free_frames>
f011e221:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011e224:	29 c2                	sub    %eax,%edx
f011e226:	89 d0                	mov    %edx,%eax
f011e228:	83 f8 01             	cmp    $0x1,%eax
f011e22b:	74 17                	je     f011e244 <test_kmalloc_firstfit2+0x4a8>
f011e22d:	83 ec 04             	sub    $0x4,%esp
f011e230:	68 7c a3 13 f0       	push   $0xf013a37c
f011e235:	68 bb 03 00 00       	push   $0x3bb
f011e23a:	68 32 9f 13 f0       	push   $0xf0139f32
f011e23f:	e8 6c 1f fe ff       	call   f01001b0 <_panic>

		//4 KB Hole
		freeFrames = sys_calculate_free_frames() ;
f011e244:	e8 f5 eb fe ff       	call   f010ce3e <sys_calculate_free_frames>
f011e249:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e24c:	e8 33 64 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011e251:	89 45 e0             	mov    %eax,-0x20(%ebp)
		kfree(ptr_allocations[2]);
f011e254:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011e25a:	83 ec 0c             	sub    $0xc,%esp
f011e25d:	50                   	push   %eax
f011e25e:	e8 7b a1 fe ff       	call   f01083de <kfree>
f011e263:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e266:	e8 19 64 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011e26b:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011e26e:	74 17                	je     f011e287 <test_kmalloc_firstfit2+0x4eb>
f011e270:	83 ec 04             	sub    $0x4,%esp
f011e273:	68 4c 9f 13 f0       	push   $0xf0139f4c
f011e278:	68 c1 03 00 00       	push   $0x3c1
f011e27d:	68 32 9f 13 f0       	push   $0xf0139f32
f011e282:	e8 29 1f fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong free: ");
f011e287:	e8 b2 eb fe ff       	call   f010ce3e <sys_calculate_free_frames>
f011e28c:	2b 45 e4             	sub    -0x1c(%ebp),%eax
f011e28f:	83 f8 01             	cmp    $0x1,%eax
f011e292:	74 17                	je     f011e2ab <test_kmalloc_firstfit2+0x50f>
f011e294:	83 ec 04             	sub    $0x4,%esp
f011e297:	68 8f a3 13 f0       	push   $0xf013a38f
f011e29c:	68 c2 03 00 00       	push   $0x3c2
f011e2a1:	68 32 9f 13 f0       	push   $0xf0139f32
f011e2a6:	e8 05 1f fe ff       	call   f01001b0 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f011e2ab:	e8 8e eb fe ff       	call   f010ce3e <sys_calculate_free_frames>
f011e2b0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e2b3:	e8 cc 63 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011e2b8:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f011e2bb:	83 ec 0c             	sub    $0xc,%esp
f011e2be:	68 00 1c 00 00       	push   $0x1c00
f011e2c3:	e8 8b 9f fe ff       	call   f0108253 <kmalloc>
f011e2c8:	83 c4 10             	add    $0x10,%esp
f011e2cb:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... ");
f011e2d1:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011e2d7:	89 c1                	mov    %eax,%ecx
f011e2d9:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011e2e0:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011e2e5:	0f b6 d0             	movzbl %al,%edx
f011e2e8:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011e2eb:	01 d0                	add    %edx,%eax
f011e2ed:	48                   	dec    %eax
f011e2ee:	89 45 98             	mov    %eax,-0x68(%ebp)
f011e2f1:	8b 45 98             	mov    -0x68(%ebp),%eax
f011e2f4:	ba 00 00 00 00       	mov    $0x0,%edx
f011e2f9:	f7 75 9c             	divl   -0x64(%ebp)
f011e2fc:	8b 45 98             	mov    -0x68(%ebp),%eax
f011e2ff:	29 d0                	sub    %edx,%eax
f011e301:	89 c3                	mov    %eax,%ebx
f011e303:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011e30a:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011e30f:	0f b6 c0             	movzbl %al,%eax
f011e312:	c1 e0 04             	shl    $0x4,%eax
f011e315:	89 c2                	mov    %eax,%edx
f011e317:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011e31a:	01 d0                	add    %edx,%eax
f011e31c:	48                   	dec    %eax
f011e31d:	89 45 90             	mov    %eax,-0x70(%ebp)
f011e320:	8b 45 90             	mov    -0x70(%ebp),%eax
f011e323:	ba 00 00 00 00       	mov    $0x0,%edx
f011e328:	f7 75 94             	divl   -0x6c(%ebp)
f011e32b:	8b 45 90             	mov    -0x70(%ebp),%eax
f011e32e:	29 d0                	sub    %edx,%eax
f011e330:	01 d8                	add    %ebx,%eax
f011e332:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f011e337:	39 c1                	cmp    %eax,%ecx
f011e339:	74 17                	je     f011e352 <test_kmalloc_firstfit2+0x5b6>
f011e33b:	83 ec 04             	sub    $0x4,%esp
f011e33e:	68 4c a3 13 f0       	push   $0xf013a34c
f011e343:	68 c8 03 00 00       	push   $0x3c8
f011e348:	68 32 9f 13 f0       	push   $0xf0139f32
f011e34d:	e8 5e 1e fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e352:	e8 2d 63 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011e357:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011e35a:	74 17                	je     f011e373 <test_kmalloc_firstfit2+0x5d7>
f011e35c:	83 ec 04             	sub    $0x4,%esp
f011e35f:	68 4c 9f 13 f0       	push   $0xf0139f4c
f011e364:	68 c9 03 00 00       	push   $0x3c9
f011e369:	68 32 9f 13 f0       	push   $0xf0139f32
f011e36e:	e8 3d 1e fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: ");
f011e373:	e8 c6 ea fe ff       	call   f010ce3e <sys_calculate_free_frames>
f011e378:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011e37b:	29 c2                	sub    %eax,%edx
f011e37d:	89 d0                	mov    %edx,%eax
f011e37f:	83 f8 02             	cmp    $0x2,%eax
f011e382:	74 17                	je     f011e39b <test_kmalloc_firstfit2+0x5ff>
f011e384:	83 ec 04             	sub    $0x4,%esp
f011e387:	68 7c a3 13 f0       	push   $0xf013a37c
f011e38c:	68 ca 03 00 00       	push   $0x3ca
f011e391:	68 32 9f 13 f0       	push   $0xf0139f32
f011e396:	e8 15 1e fe ff       	call   f01001b0 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011e39b:	e8 9e ea fe ff       	call   f010ce3e <sys_calculate_free_frames>
f011e3a0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e3a3:	e8 dc 62 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011e3a8:	89 45 e0             	mov    %eax,-0x20(%ebp)
		kfree(ptr_allocations[0]);
f011e3ab:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011e3b1:	83 ec 0c             	sub    $0xc,%esp
f011e3b4:	50                   	push   %eax
f011e3b5:	e8 24 a0 fe ff       	call   f01083de <kfree>
f011e3ba:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e3bd:	e8 c2 62 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011e3c2:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011e3c5:	74 17                	je     f011e3de <test_kmalloc_firstfit2+0x642>
f011e3c7:	83 ec 04             	sub    $0x4,%esp
f011e3ca:	68 4c 9f 13 f0       	push   $0xf0139f4c
f011e3cf:	68 d0 03 00 00       	push   $0x3d0
f011e3d4:	68 32 9f 13 f0       	push   $0xf0139f32
f011e3d9:	e8 d2 1d fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: ");
f011e3de:	e8 5b ea fe ff       	call   f010ce3e <sys_calculate_free_frames>
f011e3e3:	2b 45 e4             	sub    -0x1c(%ebp),%eax
f011e3e6:	3d 00 02 00 00       	cmp    $0x200,%eax
f011e3eb:	74 17                	je     f011e404 <test_kmalloc_firstfit2+0x668>
f011e3ed:	83 ec 04             	sub    $0x4,%esp
f011e3f0:	68 8f a3 13 f0       	push   $0xf013a38f
f011e3f5:	68 d1 03 00 00       	push   $0x3d1
f011e3fa:	68 32 9f 13 f0       	push   $0xf0139f32
f011e3ff:	e8 ac 1d fe ff       	call   f01001b0 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011e404:	e8 35 ea fe ff       	call   f010ce3e <sys_calculate_free_frames>
f011e409:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e40c:	e8 73 62 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011e411:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f011e414:	83 ec 0c             	sub    $0xc,%esp
f011e417:	68 00 fc 2f 00       	push   $0x2ffc00
f011e41c:	e8 32 9e fe ff       	call   f0108253 <kmalloc>
f011e421:	83 c4 10             	add    $0x10,%esp
f011e424:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011e42a:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011e430:	89 c1                	mov    %eax,%ecx
f011e432:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011e439:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011e43e:	0f b6 d0             	movzbl %al,%edx
f011e441:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011e444:	01 d0                	add    %edx,%eax
f011e446:	48                   	dec    %eax
f011e447:	89 45 88             	mov    %eax,-0x78(%ebp)
f011e44a:	8b 45 88             	mov    -0x78(%ebp),%eax
f011e44d:	ba 00 00 00 00       	mov    $0x0,%edx
f011e452:	f7 75 8c             	divl   -0x74(%ebp)
f011e455:	8b 45 88             	mov    -0x78(%ebp),%eax
f011e458:	29 d0                	sub    %edx,%eax
f011e45a:	89 c3                	mov    %eax,%ebx
f011e45c:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011e463:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011e468:	0f b6 c0             	movzbl %al,%eax
f011e46b:	c1 e0 04             	shl    $0x4,%eax
f011e46e:	89 c2                	mov    %eax,%edx
f011e470:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011e473:	01 d0                	add    %edx,%eax
f011e475:	48                   	dec    %eax
f011e476:	89 45 80             	mov    %eax,-0x80(%ebp)
f011e479:	8b 45 80             	mov    -0x80(%ebp),%eax
f011e47c:	ba 00 00 00 00       	mov    $0x0,%edx
f011e481:	f7 75 84             	divl   -0x7c(%ebp)
f011e484:	8b 45 80             	mov    -0x80(%ebp),%eax
f011e487:	29 d0                	sub    %edx,%eax
f011e489:	01 d8                	add    %ebx,%eax
f011e48b:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f011e490:	39 c1                	cmp    %eax,%ecx
f011e492:	74 17                	je     f011e4ab <test_kmalloc_firstfit2+0x70f>
f011e494:	83 ec 04             	sub    $0x4,%esp
f011e497:	68 4c a3 13 f0       	push   $0xf013a34c
f011e49c:	68 d7 03 00 00       	push   $0x3d7
f011e4a1:	68 32 9f 13 f0       	push   $0xf0139f32
f011e4a6:	e8 05 1d fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e4ab:	e8 d4 61 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011e4b0:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011e4b3:	74 17                	je     f011e4cc <test_kmalloc_firstfit2+0x730>
f011e4b5:	83 ec 04             	sub    $0x4,%esp
f011e4b8:	68 4c 9f 13 f0       	push   $0xf0139f4c
f011e4bd:	68 d8 03 00 00       	push   $0x3d8
f011e4c2:	68 32 9f 13 f0       	push   $0xf0139f32
f011e4c7:	e8 e4 1c fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  3*Mega/PAGE_SIZE) panic("Wrong allocation: ");
f011e4cc:	e8 6d e9 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f011e4d1:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011e4d4:	29 c2                	sub    %eax,%edx
f011e4d6:	89 d0                	mov    %edx,%eax
f011e4d8:	3d 00 03 00 00       	cmp    $0x300,%eax
f011e4dd:	74 17                	je     f011e4f6 <test_kmalloc_firstfit2+0x75a>
f011e4df:	83 ec 04             	sub    $0x4,%esp
f011e4e2:	68 7c a3 13 f0       	push   $0xf013a37c
f011e4e7:	68 d9 03 00 00       	push   $0x3d9
f011e4ec:	68 32 9f 13 f0       	push   $0xf0139f32
f011e4f1:	e8 ba 1c fe ff       	call   f01001b0 <_panic>

		//2 MB + 6 KB
		freeFrames = sys_calculate_free_frames() ;
f011e4f6:	e8 43 e9 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f011e4fb:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e4fe:	e8 81 61 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011e503:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[6] = kmalloc(2*Mega + 6*kilo);
f011e506:	83 ec 0c             	sub    $0xc,%esp
f011e509:	68 00 18 20 00       	push   $0x201800
f011e50e:	e8 40 9d fe ff       	call   f0108253 <kmalloc>
f011e513:	83 c4 10             	add    $0x10,%esp
f011e516:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011e51c:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011e522:	89 c1                	mov    %eax,%ecx
f011e524:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011e52b:	10 00 00 
f011e52e:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011e533:	0f b6 d0             	movzbl %al,%edx
f011e536:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011e53c:	01 d0                	add    %edx,%eax
f011e53e:	48                   	dec    %eax
f011e53f:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011e545:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011e54b:	ba 00 00 00 00       	mov    $0x0,%edx
f011e550:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011e556:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011e55c:	29 d0                	sub    %edx,%eax
f011e55e:	89 c3                	mov    %eax,%ebx
f011e560:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011e567:	10 00 00 
f011e56a:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011e56f:	0f b6 c0             	movzbl %al,%eax
f011e572:	c1 e0 04             	shl    $0x4,%eax
f011e575:	89 c2                	mov    %eax,%edx
f011e577:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011e57d:	01 d0                	add    %edx,%eax
f011e57f:	48                   	dec    %eax
f011e580:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011e586:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011e58c:	ba 00 00 00 00       	mov    $0x0,%edx
f011e591:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011e597:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011e59d:	29 d0                	sub    %edx,%eax
f011e59f:	01 d8                	add    %ebx,%eax
f011e5a1:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f011e5a6:	39 c1                	cmp    %eax,%ecx
f011e5a8:	74 17                	je     f011e5c1 <test_kmalloc_firstfit2+0x825>
f011e5aa:	83 ec 04             	sub    $0x4,%esp
f011e5ad:	68 4c a3 13 f0       	push   $0xf013a34c
f011e5b2:	68 df 03 00 00       	push   $0x3df
f011e5b7:	68 32 9f 13 f0       	push   $0xf0139f32
f011e5bc:	e8 ef 1b fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e5c1:	e8 be 60 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011e5c6:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011e5c9:	74 17                	je     f011e5e2 <test_kmalloc_firstfit2+0x846>
f011e5cb:	83 ec 04             	sub    $0x4,%esp
f011e5ce:	68 4c 9f 13 f0       	push   $0xf0139f4c
f011e5d3:	68 e0 03 00 00       	push   $0x3e0
f011e5d8:	68 32 9f 13 f0       	push   $0xf0139f32
f011e5dd:	e8 ce 1b fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  514) panic("Wrong allocation: ");
f011e5e2:	e8 57 e8 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f011e5e7:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011e5ea:	29 c2                	sub    %eax,%edx
f011e5ec:	89 d0                	mov    %edx,%eax
f011e5ee:	3d 02 02 00 00       	cmp    $0x202,%eax
f011e5f3:	74 17                	je     f011e60c <test_kmalloc_firstfit2+0x870>
f011e5f5:	83 ec 04             	sub    $0x4,%esp
f011e5f8:	68 7c a3 13 f0       	push   $0xf013a37c
f011e5fd:	68 e1 03 00 00       	push   $0x3e1
f011e602:	68 32 9f 13 f0       	push   $0xf0139f32
f011e607:	e8 a4 1b fe ff       	call   f01001b0 <_panic>

		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011e60c:	e8 2d e8 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f011e611:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e614:	e8 6b 60 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011e619:	89 45 e0             	mov    %eax,-0x20(%ebp)
		kfree(ptr_allocations[5]);
f011e61c:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011e622:	83 ec 0c             	sub    $0xc,%esp
f011e625:	50                   	push   %eax
f011e626:	e8 b3 9d fe ff       	call   f01083de <kfree>
f011e62b:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e62e:	e8 51 60 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011e633:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011e636:	74 17                	je     f011e64f <test_kmalloc_firstfit2+0x8b3>
f011e638:	83 ec 04             	sub    $0x4,%esp
f011e63b:	68 4c 9f 13 f0       	push   $0xf0139f4c
f011e640:	68 e7 03 00 00       	push   $0x3e7
f011e645:	68 32 9f 13 f0       	push   $0xf0139f32
f011e64a:	e8 61 1b fe ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 768) panic("Wrong free: ");
f011e64f:	e8 ea e7 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f011e654:	2b 45 e4             	sub    -0x1c(%ebp),%eax
f011e657:	3d 00 03 00 00       	cmp    $0x300,%eax
f011e65c:	74 17                	je     f011e675 <test_kmalloc_firstfit2+0x8d9>
f011e65e:	83 ec 04             	sub    $0x4,%esp
f011e661:	68 8f a3 13 f0       	push   $0xf013a38f
f011e666:	68 e8 03 00 00       	push   $0x3e8
f011e66b:	68 32 9f 13 f0       	push   $0xf0139f32
f011e670:	e8 3b 1b fe ff       	call   f01001b0 <_panic>

		//2 MB Hole [Resulting Hole = 2 MB + 2 MB + 4 KB = 4 MB + 4 KB]
		freeFrames = sys_calculate_free_frames() ;
f011e675:	e8 c4 e7 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f011e67a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e67d:	e8 02 60 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011e682:	89 45 e0             	mov    %eax,-0x20(%ebp)
		kfree(ptr_allocations[1]);
f011e685:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011e68b:	83 ec 0c             	sub    $0xc,%esp
f011e68e:	50                   	push   %eax
f011e68f:	e8 4a 9d fe ff       	call   f01083de <kfree>
f011e694:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: ");
f011e697:	e8 a2 e7 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f011e69c:	2b 45 e4             	sub    -0x1c(%ebp),%eax
f011e69f:	3d 00 02 00 00       	cmp    $0x200,%eax
f011e6a4:	74 17                	je     f011e6bd <test_kmalloc_firstfit2+0x921>
f011e6a6:	83 ec 04             	sub    $0x4,%esp
f011e6a9:	68 8f a3 13 f0       	push   $0xf013a38f
f011e6ae:	68 ee 03 00 00       	push   $0x3ee
f011e6b3:	68 32 9f 13 f0       	push   $0xf0139f32
f011e6b8:	e8 f3 1a fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e6bd:	e8 c2 5f fe ff       	call   f0104684 <pf_calculate_free_frames>
f011e6c2:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011e6c5:	74 17                	je     f011e6de <test_kmalloc_firstfit2+0x942>
f011e6c7:	83 ec 04             	sub    $0x4,%esp
f011e6ca:	68 4c 9f 13 f0       	push   $0xf0139f4c
f011e6cf:	68 ef 03 00 00       	push   $0x3ef
f011e6d4:	68 32 9f 13 f0       	push   $0xf0139f32
f011e6d9:	e8 d2 1a fe ff       	call   f01001b0 <_panic>

		//5 MB
		freeFrames = sys_calculate_free_frames() ;
f011e6de:	e8 5b e7 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f011e6e3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e6e6:	e8 99 5f fe ff       	call   f0104684 <pf_calculate_free_frames>
f011e6eb:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[7] = kmalloc(5*Mega-kilo);
f011e6ee:	83 ec 0c             	sub    $0xc,%esp
f011e6f1:	68 00 fc 4f 00       	push   $0x4ffc00
f011e6f6:	e8 58 9b fe ff       	call   f0108253 <kmalloc>
f011e6fb:	83 c4 10             	add    $0x10,%esp
f011e6fe:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 9*Mega + 24*kilo)) panic("Wrong start address for the allocated space... ");
f011e704:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011e70a:	89 c1                	mov    %eax,%ecx
f011e70c:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011e713:	10 00 00 
f011e716:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011e71b:	0f b6 d0             	movzbl %al,%edx
f011e71e:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011e724:	01 d0                	add    %edx,%eax
f011e726:	48                   	dec    %eax
f011e727:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011e72d:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011e733:	ba 00 00 00 00       	mov    $0x0,%edx
f011e738:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011e73e:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011e744:	29 d0                	sub    %edx,%eax
f011e746:	89 c3                	mov    %eax,%ebx
f011e748:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011e74f:	10 00 00 
f011e752:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011e757:	0f b6 c0             	movzbl %al,%eax
f011e75a:	c1 e0 04             	shl    $0x4,%eax
f011e75d:	89 c2                	mov    %eax,%edx
f011e75f:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011e765:	01 d0                	add    %edx,%eax
f011e767:	48                   	dec    %eax
f011e768:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011e76e:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011e774:	ba 00 00 00 00       	mov    $0x0,%edx
f011e779:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011e77f:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011e785:	29 d0                	sub    %edx,%eax
f011e787:	01 d8                	add    %ebx,%eax
f011e789:	2d 00 60 6f 09       	sub    $0x96f6000,%eax
f011e78e:	39 c1                	cmp    %eax,%ecx
f011e790:	74 17                	je     f011e7a9 <test_kmalloc_firstfit2+0xa0d>
f011e792:	83 ec 04             	sub    $0x4,%esp
f011e795:	68 4c a3 13 f0       	push   $0xf013a34c
f011e79a:	68 f5 03 00 00       	push   $0x3f5
f011e79f:	68 32 9f 13 f0       	push   $0xf0139f32
f011e7a4:	e8 07 1a fe ff       	call   f01001b0 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e7a9:	e8 d6 5e fe ff       	call   f0104684 <pf_calculate_free_frames>
f011e7ae:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011e7b1:	74 17                	je     f011e7ca <test_kmalloc_firstfit2+0xa2e>
f011e7b3:	83 ec 04             	sub    $0x4,%esp
f011e7b6:	68 4c 9f 13 f0       	push   $0xf0139f4c
f011e7bb:	68 f6 03 00 00       	push   $0x3f6
f011e7c0:	68 32 9f 13 f0       	push   $0xf0139f32
f011e7c5:	e8 e6 19 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=   5*Mega/PAGE_SIZE) panic("Wrong allocation: ");
f011e7ca:	e8 6f e6 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f011e7cf:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011e7d2:	29 c2                	sub    %eax,%edx
f011e7d4:	89 d0                	mov    %edx,%eax
f011e7d6:	3d 00 05 00 00       	cmp    $0x500,%eax
f011e7db:	74 17                	je     f011e7f4 <test_kmalloc_firstfit2+0xa58>
f011e7dd:	83 ec 04             	sub    $0x4,%esp
f011e7e0:	68 7c a3 13 f0       	push   $0xf013a37c
f011e7e5:	68 f7 03 00 00       	push   $0x3f7
f011e7ea:	68 32 9f 13 f0       	push   $0xf0139f32
f011e7ef:	e8 bc 19 fe ff       	call   f01001b0 <_panic>
//		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
//		if ((sys_calculate_free_frames() - freeFrames) != 514) panic("Wrong free: ");

		//[FIRST FIT Case]
		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011e7f4:	e8 45 e6 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f011e7f9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e7fc:	e8 83 5e fe ff       	call   f0104684 <pf_calculate_free_frames>
f011e801:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[8] = kmalloc(3*Mega-kilo);
f011e804:	83 ec 0c             	sub    $0xc,%esp
f011e807:	68 00 fc 2f 00       	push   $0x2ffc00
f011e80c:	e8 42 9a fe ff       	call   f0108253 <kmalloc>
f011e811:	83 c4 10             	add    $0x10,%esp
f011e814:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011e81a:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011e820:	89 c1                	mov    %eax,%ecx
f011e822:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011e829:	10 00 00 
f011e82c:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011e831:	0f b6 d0             	movzbl %al,%edx
f011e834:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011e83a:	01 d0                	add    %edx,%eax
f011e83c:	48                   	dec    %eax
f011e83d:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011e843:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011e849:	ba 00 00 00 00       	mov    $0x0,%edx
f011e84e:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011e854:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011e85a:	29 d0                	sub    %edx,%eax
f011e85c:	89 c3                	mov    %eax,%ebx
f011e85e:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011e865:	10 00 00 
f011e868:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011e86d:	0f b6 c0             	movzbl %al,%eax
f011e870:	c1 e0 04             	shl    $0x4,%eax
f011e873:	89 c2                	mov    %eax,%edx
f011e875:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011e87b:	01 d0                	add    %edx,%eax
f011e87d:	48                   	dec    %eax
f011e87e:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011e884:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011e88a:	ba 00 00 00 00       	mov    $0x0,%edx
f011e88f:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011e895:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011e89b:	29 d0                	sub    %edx,%eax
f011e89d:	01 d8                	add    %ebx,%eax
f011e89f:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011e8a4:	39 c1                	cmp    %eax,%ecx
f011e8a6:	74 17                	je     f011e8bf <test_kmalloc_firstfit2+0xb23>
f011e8a8:	83 ec 04             	sub    $0x4,%esp
f011e8ab:	68 4c a3 13 f0       	push   $0xf013a34c
f011e8b0:	68 05 04 00 00       	push   $0x405
f011e8b5:	68 32 9f 13 f0       	push   $0xf0139f32
f011e8ba:	e8 f1 18 fe ff       	call   f01001b0 <_panic>
		if((freeDiskFrames - pf_calculate_free_frames()) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e8bf:	e8 c0 5d fe ff       	call   f0104684 <pf_calculate_free_frames>
f011e8c4:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011e8c7:	74 17                	je     f011e8e0 <test_kmalloc_firstfit2+0xb44>
f011e8c9:	83 ec 04             	sub    $0x4,%esp
f011e8cc:	68 4c 9f 13 f0       	push   $0xf0139f4c
f011e8d1:	68 06 04 00 00       	push   $0x406
f011e8d6:	68 32 9f 13 f0       	push   $0xf0139f32
f011e8db:	e8 d0 18 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=   3*Mega/PAGE_SIZE) panic("Wrong allocation: ");
f011e8e0:	e8 59 e5 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f011e8e5:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011e8e8:	29 c2                	sub    %eax,%edx
f011e8ea:	89 d0                	mov    %edx,%eax
f011e8ec:	3d 00 03 00 00       	cmp    $0x300,%eax
f011e8f1:	74 17                	je     f011e90a <test_kmalloc_firstfit2+0xb6e>
f011e8f3:	83 ec 04             	sub    $0x4,%esp
f011e8f6:	68 7c a3 13 f0       	push   $0xf013a37c
f011e8fb:	68 07 04 00 00       	push   $0x407
f011e900:	68 32 9f 13 f0       	push   $0xf0139f32
f011e905:	e8 a6 18 fe ff       	call   f01001b0 <_panic>
	}
	//	b) Attempt to allocate large segment with no suitable fragment to fit on
	{
		//Large Allocation
		ptr_allocations[9] = kmalloc((KERNEL_HEAP_MAX - ACTUAL_START - 14*Mega));
f011e90a:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011e911:	10 00 00 
f011e914:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011e919:	0f b6 d0             	movzbl %al,%edx
f011e91c:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011e922:	01 d0                	add    %edx,%eax
f011e924:	48                   	dec    %eax
f011e925:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011e92b:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011e931:	ba 00 00 00 00       	mov    $0x0,%edx
f011e936:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011e93c:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011e942:	29 d0                	sub    %edx,%eax
f011e944:	89 c1                	mov    %eax,%ecx
f011e946:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011e94d:	10 00 00 
f011e950:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011e955:	0f b6 c0             	movzbl %al,%eax
f011e958:	c1 e0 04             	shl    $0x4,%eax
f011e95b:	89 c2                	mov    %eax,%edx
f011e95d:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011e963:	01 d0                	add    %edx,%eax
f011e965:	48                   	dec    %eax
f011e966:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011e96c:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011e972:	ba 00 00 00 00       	mov    $0x0,%edx
f011e977:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011e97d:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011e983:	29 d0                	sub    %edx,%eax
f011e985:	01 c8                	add    %ecx,%eax
f011e987:	ba 00 b0 1f 09       	mov    $0x91fb000,%edx
f011e98c:	29 c2                	sub    %eax,%edx
f011e98e:	89 d0                	mov    %edx,%eax
f011e990:	83 ec 0c             	sub    $0xc,%esp
f011e993:	50                   	push   %eax
f011e994:	e8 ba 98 fe ff       	call   f0108253 <kmalloc>
f011e999:	83 c4 10             	add    $0x10,%esp
f011e99c:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
		if (ptr_allocations[9] != NULL) panic("Kmalloc: Attempt to allocate large segment with no suitable fragment to fit on, should return NULL");
f011e9a2:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011e9a8:	85 c0                	test   %eax,%eax
f011e9aa:	74 17                	je     f011e9c3 <test_kmalloc_firstfit2+0xc27>
f011e9ac:	83 ec 04             	sub    $0x4,%esp
f011e9af:	68 7c a4 13 f0       	push   $0xf013a47c
f011e9b4:	68 0d 04 00 00       	push   $0x40d
f011e9b9:	68 32 9f 13 f0       	push   $0xf0139f32
f011e9be:	e8 ed 17 fe ff       	call   f01001b0 <_panic>

		cprintf("Congratulations!! test FIRST FIT allocation (2) completed successfully.\n");
f011e9c3:	83 ec 0c             	sub    $0xc,%esp
f011e9c6:	68 bc a5 13 f0       	push   $0xf013a5bc
f011e9cb:	e8 61 24 fe ff       	call   f0100e31 <cprintf>
f011e9d0:	83 c4 10             	add    $0x10,%esp
	}
	return 1;
f011e9d3:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011e9d8:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011e9db:	5b                   	pop    %ebx
f011e9dc:	5f                   	pop    %edi
f011e9dd:	5d                   	pop    %ebp
f011e9de:	c3                   	ret    

f011e9df <test_kmalloc_worstfit>:

int test_kmalloc_worstfit()
{
f011e9df:	55                   	push   %ebp
f011e9e0:	89 e5                	mov    %esp,%ebp
f011e9e2:	57                   	push   %edi
f011e9e3:	53                   	push   %ebx
f011e9e4:	81 ec c0 03 00 00    	sub    $0x3c0,%esp
	cprintf("==============================================\n");
f011e9ea:	83 ec 0c             	sub    $0xc,%esp
f011e9ed:	68 74 9e 13 f0       	push   $0xf0139e74
f011e9f2:	e8 3a 24 fe ff       	call   f0100e31 <cprintf>
f011e9f7:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011e9fa:	83 ec 0c             	sub    $0xc,%esp
f011e9fd:	68 a4 9e 13 f0       	push   $0xf0139ea4
f011ea02:	e8 2a 24 fe ff       	call   f0100e31 <cprintf>
f011ea07:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011ea0a:	83 ec 0c             	sub    $0xc,%esp
f011ea0d:	68 74 9e 13 f0       	push   $0xf0139e74
f011ea12:	e8 1a 24 fe ff       	call   f0100e31 <cprintf>
f011ea17:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[160] = {0};
f011ea1a:	8d 95 44 fc ff ff    	lea    -0x3bc(%ebp),%edx
f011ea20:	b9 a0 00 00 00       	mov    $0xa0,%ecx
f011ea25:	b8 00 00 00 00       	mov    $0x0,%eax
f011ea2a:	89 d7                	mov    %edx,%edi
f011ea2c:	f3 ab                	rep stos %eax,%es:(%edi)

	// allocate pages
	int freeFrames = sys_calculate_free_frames() ;
f011ea2e:	e8 0b e4 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f011ea33:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int freeDiskFrames = pf_calculate_free_frames() ;
f011ea36:	e8 49 5c fe ff       	call   f0104684 <pf_calculate_free_frames>
f011ea3b:	89 45 ec             	mov    %eax,-0x14(%ebp)

	int count = 0;
f011ea3e:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	int i;
	for(i = 0; i< 79 ;i++)
f011ea45:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011ea4c:	eb 1f                	jmp    f011ea6d <test_kmalloc_worstfit+0x8e>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
f011ea4e:	83 ec 0c             	sub    $0xc,%esp
f011ea51:	68 00 00 20 00       	push   $0x200000
f011ea56:	e8 f8 97 fe ff       	call   f0108253 <kmalloc>
f011ea5b:	83 c4 10             	add    $0x10,%esp
f011ea5e:	89 c2                	mov    %eax,%edx
f011ea60:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011ea63:	89 94 85 44 fc ff ff 	mov    %edx,-0x3bc(%ebp,%eax,4)
	int freeFrames = sys_calculate_free_frames() ;
	int freeDiskFrames = pf_calculate_free_frames() ;

	int count = 0;
	int i;
	for(i = 0; i< 79 ;i++)
f011ea6a:	ff 45 f4             	incl   -0xc(%ebp)
f011ea6d:	83 7d f4 4e          	cmpl   $0x4e,-0xc(%ebp)
f011ea71:	7e db                	jle    f011ea4e <test_kmalloc_worstfit+0x6f>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);
f011ea73:	83 ec 0c             	sub    $0xc,%esp
f011ea76:	68 00 b0 1f 00       	push   $0x1fb000
f011ea7b:	e8 d3 97 fe ff       	call   f0108253 <kmalloc>
f011ea80:	83 c4 10             	add    $0x10,%esp
f011ea83:	89 85 80 fd ff ff    	mov    %eax,-0x280(%ebp)

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f011ea89:	8b 85 44 fc ff ff    	mov    -0x3bc(%ebp),%eax
f011ea8f:	89 c1                	mov    %eax,%ecx
f011ea91:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011ea98:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011ea9d:	0f b6 d0             	movzbl %al,%edx
f011eaa0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011eaa3:	01 d0                	add    %edx,%eax
f011eaa5:	48                   	dec    %eax
f011eaa6:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011eaa9:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011eaac:	ba 00 00 00 00       	mov    $0x0,%edx
f011eab1:	f7 75 e4             	divl   -0x1c(%ebp)
f011eab4:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011eab7:	29 d0                	sub    %edx,%eax
f011eab9:	89 c3                	mov    %eax,%ebx
f011eabb:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f011eac2:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011eac7:	0f b6 c0             	movzbl %al,%eax
f011eaca:	c1 e0 04             	shl    $0x4,%eax
f011eacd:	89 c2                	mov    %eax,%edx
f011eacf:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011ead2:	01 d0                	add    %edx,%eax
f011ead4:	48                   	dec    %eax
f011ead5:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011ead8:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011eadb:	ba 00 00 00 00       	mov    $0x0,%edx
f011eae0:	f7 75 dc             	divl   -0x24(%ebp)
f011eae3:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011eae6:	29 d0                	sub    %edx,%eax
f011eae8:	01 d8                	add    %ebx,%eax
f011eaea:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011eaef:	39 c1                	cmp    %eax,%ecx
f011eaf1:	0f 85 34 03 00 00    	jne    f011ee2b <test_kmalloc_worstfit+0x44c>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f011eaf7:	8b 85 4c fc ff ff    	mov    -0x3b4(%ebp),%eax
f011eafd:	89 c1                	mov    %eax,%ecx
f011eaff:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011eb06:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011eb0b:	0f b6 d0             	movzbl %al,%edx
f011eb0e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011eb11:	01 d0                	add    %edx,%eax
f011eb13:	48                   	dec    %eax
f011eb14:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011eb17:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011eb1a:	ba 00 00 00 00       	mov    $0x0,%edx
f011eb1f:	f7 75 d4             	divl   -0x2c(%ebp)
f011eb22:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011eb25:	29 d0                	sub    %edx,%eax
f011eb27:	89 c3                	mov    %eax,%ebx
f011eb29:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011eb30:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011eb35:	0f b6 c0             	movzbl %al,%eax
f011eb38:	c1 e0 04             	shl    $0x4,%eax
f011eb3b:	89 c2                	mov    %eax,%edx
f011eb3d:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011eb40:	01 d0                	add    %edx,%eax
f011eb42:	48                   	dec    %eax
f011eb43:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011eb46:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011eb49:	ba 00 00 00 00       	mov    $0x0,%edx
f011eb4e:	f7 75 cc             	divl   -0x34(%ebp)
f011eb51:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011eb54:	29 d0                	sub    %edx,%eax
f011eb56:	01 d8                	add    %ebx,%eax
f011eb58:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
		ptr_allocations[i] = kmalloc(2*Mega);
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f011eb5d:	39 c1                	cmp    %eax,%ecx
f011eb5f:	0f 85 c6 02 00 00    	jne    f011ee2b <test_kmalloc_worstfit+0x44c>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f011eb65:	8b 85 64 fc ff ff    	mov    -0x39c(%ebp),%eax
f011eb6b:	89 c1                	mov    %eax,%ecx
f011eb6d:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011eb74:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011eb79:	0f b6 d0             	movzbl %al,%edx
f011eb7c:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011eb7f:	01 d0                	add    %edx,%eax
f011eb81:	48                   	dec    %eax
f011eb82:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011eb85:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011eb88:	ba 00 00 00 00       	mov    $0x0,%edx
f011eb8d:	f7 75 c4             	divl   -0x3c(%ebp)
f011eb90:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011eb93:	29 d0                	sub    %edx,%eax
f011eb95:	89 c3                	mov    %eax,%ebx
f011eb97:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011eb9e:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011eba3:	0f b6 c0             	movzbl %al,%eax
f011eba6:	c1 e0 04             	shl    $0x4,%eax
f011eba9:	89 c2                	mov    %eax,%edx
f011ebab:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011ebae:	01 d0                	add    %edx,%eax
f011ebb0:	48                   	dec    %eax
f011ebb1:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011ebb4:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011ebb7:	ba 00 00 00 00       	mov    $0x0,%edx
f011ebbc:	f7 75 bc             	divl   -0x44(%ebp)
f011ebbf:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011ebc2:	29 d0                	sub    %edx,%eax
f011ebc4:	01 d8                	add    %ebx,%eax
f011ebc6:	2d 00 c0 ff 08       	sub    $0x8ffc000,%eax
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f011ebcb:	39 c1                	cmp    %eax,%ecx
f011ebcd:	0f 85 58 02 00 00    	jne    f011ee2b <test_kmalloc_worstfit+0x44c>
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f011ebd3:	8b 85 6c fc ff ff    	mov    -0x394(%ebp),%eax
f011ebd9:	89 c1                	mov    %eax,%ecx
f011ebdb:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011ebe2:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011ebe7:	0f b6 d0             	movzbl %al,%edx
f011ebea:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011ebed:	01 d0                	add    %edx,%eax
f011ebef:	48                   	dec    %eax
f011ebf0:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011ebf3:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011ebf6:	ba 00 00 00 00       	mov    $0x0,%edx
f011ebfb:	f7 75 b4             	divl   -0x4c(%ebp)
f011ebfe:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011ec01:	29 d0                	sub    %edx,%eax
f011ec03:	89 c3                	mov    %eax,%ebx
f011ec05:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011ec0c:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011ec11:	0f b6 c0             	movzbl %al,%eax
f011ec14:	c1 e0 04             	shl    $0x4,%eax
f011ec17:	89 c2                	mov    %eax,%edx
f011ec19:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011ec1c:	01 d0                	add    %edx,%eax
f011ec1e:	48                   	dec    %eax
f011ec1f:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011ec22:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011ec25:	ba 00 00 00 00       	mov    $0x0,%edx
f011ec2a:	f7 75 ac             	divl   -0x54(%ebp)
f011ec2d:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011ec30:	29 d0                	sub    %edx,%eax
f011ec32:	01 d8                	add    %ebx,%eax
f011ec34:	2d 00 c0 bf 08       	sub    $0x8bfc000,%eax
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f011ec39:	39 c1                	cmp    %eax,%ecx
f011ec3b:	0f 85 ea 01 00 00    	jne    f011ee2b <test_kmalloc_worstfit+0x44c>
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f011ec41:	8b 85 80 fc ff ff    	mov    -0x380(%ebp),%eax
f011ec47:	89 c1                	mov    %eax,%ecx
f011ec49:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011ec50:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011ec55:	0f b6 d0             	movzbl %al,%edx
f011ec58:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011ec5b:	01 d0                	add    %edx,%eax
f011ec5d:	48                   	dec    %eax
f011ec5e:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011ec61:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011ec64:	ba 00 00 00 00       	mov    $0x0,%edx
f011ec69:	f7 75 a4             	divl   -0x5c(%ebp)
f011ec6c:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011ec6f:	29 d0                	sub    %edx,%eax
f011ec71:	89 c3                	mov    %eax,%ebx
f011ec73:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011ec7a:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011ec7f:	0f b6 c0             	movzbl %al,%eax
f011ec82:	c1 e0 04             	shl    $0x4,%eax
f011ec85:	89 c2                	mov    %eax,%edx
f011ec87:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011ec8a:	01 d0                	add    %edx,%eax
f011ec8c:	48                   	dec    %eax
f011ec8d:	89 45 98             	mov    %eax,-0x68(%ebp)
f011ec90:	8b 45 98             	mov    -0x68(%ebp),%eax
f011ec93:	ba 00 00 00 00       	mov    $0x0,%edx
f011ec98:	f7 75 9c             	divl   -0x64(%ebp)
f011ec9b:	8b 45 98             	mov    -0x68(%ebp),%eax
f011ec9e:	29 d0                	sub    %edx,%eax
f011eca0:	01 d8                	add    %ebx,%eax
f011eca2:	2d 00 c0 1f 08       	sub    $0x81fc000,%eax

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f011eca7:	39 c1                	cmp    %eax,%ecx
f011eca9:	0f 85 7c 01 00 00    	jne    f011ee2b <test_kmalloc_worstfit+0x44c>
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f011ecaf:	8b 85 94 fc ff ff    	mov    -0x36c(%ebp),%eax
f011ecb5:	89 c1                	mov    %eax,%ecx
f011ecb7:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011ecbe:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011ecc3:	0f b6 d0             	movzbl %al,%edx
f011ecc6:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011ecc9:	01 d0                	add    %edx,%eax
f011eccb:	48                   	dec    %eax
f011eccc:	89 45 90             	mov    %eax,-0x70(%ebp)
f011eccf:	8b 45 90             	mov    -0x70(%ebp),%eax
f011ecd2:	ba 00 00 00 00       	mov    $0x0,%edx
f011ecd7:	f7 75 94             	divl   -0x6c(%ebp)
f011ecda:	8b 45 90             	mov    -0x70(%ebp),%eax
f011ecdd:	29 d0                	sub    %edx,%eax
f011ecdf:	89 c3                	mov    %eax,%ebx
f011ece1:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011ece8:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011eced:	0f b6 c0             	movzbl %al,%eax
f011ecf0:	c1 e0 04             	shl    $0x4,%eax
f011ecf3:	89 c2                	mov    %eax,%edx
f011ecf5:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011ecf8:	01 d0                	add    %edx,%eax
f011ecfa:	48                   	dec    %eax
f011ecfb:	89 45 88             	mov    %eax,-0x78(%ebp)
f011ecfe:	8b 45 88             	mov    -0x78(%ebp),%eax
f011ed01:	ba 00 00 00 00       	mov    $0x0,%edx
f011ed06:	f7 75 8c             	divl   -0x74(%ebp)
f011ed09:	8b 45 88             	mov    -0x78(%ebp),%eax
f011ed0c:	29 d0                	sub    %edx,%eax
f011ed0e:	01 d8                	add    %ebx,%eax
f011ed10:	2d 00 c0 7f 07       	sub    $0x77fc000,%eax
	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f011ed15:	39 c1                	cmp    %eax,%ecx
f011ed17:	0f 85 0e 01 00 00    	jne    f011ee2b <test_kmalloc_worstfit+0x44c>
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[50] != (ACTUAL_START + 100*Mega) ||
f011ed1d:	8b 85 0c fd ff ff    	mov    -0x2f4(%ebp),%eax
f011ed23:	89 c1                	mov    %eax,%ecx
f011ed25:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011ed2c:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011ed31:	0f b6 d0             	movzbl %al,%edx
f011ed34:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011ed37:	01 d0                	add    %edx,%eax
f011ed39:	48                   	dec    %eax
f011ed3a:	89 45 80             	mov    %eax,-0x80(%ebp)
f011ed3d:	8b 45 80             	mov    -0x80(%ebp),%eax
f011ed40:	ba 00 00 00 00       	mov    $0x0,%edx
f011ed45:	f7 75 84             	divl   -0x7c(%ebp)
f011ed48:	8b 45 80             	mov    -0x80(%ebp),%eax
f011ed4b:	29 d0                	sub    %edx,%eax
f011ed4d:	89 c3                	mov    %eax,%ebx
f011ed4f:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011ed56:	10 00 00 
f011ed59:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011ed5e:	0f b6 c0             	movzbl %al,%eax
f011ed61:	c1 e0 04             	shl    $0x4,%eax
f011ed64:	89 c2                	mov    %eax,%edx
f011ed66:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011ed6c:	01 d0                	add    %edx,%eax
f011ed6e:	48                   	dec    %eax
f011ed6f:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011ed75:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011ed7b:	ba 00 00 00 00       	mov    $0x0,%edx
f011ed80:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011ed86:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011ed8c:	29 d0                	sub    %edx,%eax
f011ed8e:	01 d8                	add    %ebx,%eax
f011ed90:	2d 00 c0 bf 03       	sub    $0x3bfc000,%eax
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f011ed95:	39 c1                	cmp    %eax,%ecx
f011ed97:	0f 85 8e 00 00 00    	jne    f011ee2b <test_kmalloc_worstfit+0x44c>
			(uint32)ptr_allocations[50] != (ACTUAL_START + 100*Mega) ||
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega))
f011ed9d:	8b 85 80 fd ff ff    	mov    -0x280(%ebp),%eax
f011eda3:	89 c1                	mov    %eax,%ecx
f011eda5:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011edac:	10 00 00 
f011edaf:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011edb4:	0f b6 d0             	movzbl %al,%edx
f011edb7:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011edbd:	01 d0                	add    %edx,%eax
f011edbf:	48                   	dec    %eax
f011edc0:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011edc6:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011edcc:	ba 00 00 00 00       	mov    $0x0,%edx
f011edd1:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011edd7:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011eddd:	29 d0                	sub    %edx,%eax
f011eddf:	89 c3                	mov    %eax,%ebx
f011ede1:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011ede8:	10 00 00 
f011edeb:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011edf0:	0f b6 c0             	movzbl %al,%eax
f011edf3:	c1 e0 04             	shl    $0x4,%eax
f011edf6:	89 c2                	mov    %eax,%edx
f011edf8:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011edfe:	01 d0                	add    %edx,%eax
f011ee00:	48                   	dec    %eax
f011ee01:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011ee07:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011ee0d:	ba 00 00 00 00       	mov    $0x0,%edx
f011ee12:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011ee18:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011ee1e:	29 d0                	sub    %edx,%eax
f011ee20:	01 d8                	add    %ebx,%eax
f011ee22:	2d 00 c0 1f 00       	sub    $0x1fc000,%eax
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[50] != (ACTUAL_START + 100*Mega) ||
f011ee27:	39 c1                	cmp    %eax,%ecx
f011ee29:	74 17                	je     f011ee42 <test_kmalloc_worstfit+0x463>
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega))
		panic("Wrong allocation, Check worst fitting strategy is working correctly");
f011ee2b:	83 ec 04             	sub    $0x4,%esp
f011ee2e:	68 08 a6 13 f0       	push   $0xf013a608
f011ee33:	68 31 04 00 00       	push   $0x431
f011ee38:	68 32 9f 13 f0       	push   $0xf0139f32
f011ee3d:	e8 6e 13 fe ff       	call   f01001b0 <_panic>

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ee42:	e8 3d 58 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011ee47:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011ee4a:	74 17                	je     f011ee63 <test_kmalloc_worstfit+0x484>
f011ee4c:	83 ec 04             	sub    $0x4,%esp
f011ee4f:	68 4c 9f 13 f0       	push   $0xf0139f4c
f011ee54:	68 33 04 00 00       	push   $0x433
f011ee59:	68 32 9f 13 f0       	push   $0xf0139f32
f011ee5e:	e8 4d 13 fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (160*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE)/(PAGE_SIZE) ) panic("Wrong allocation");
f011ee63:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011ee66:	e8 d3 df fe ff       	call   f010ce3e <sys_calculate_free_frames>
f011ee6b:	29 c3                	sub    %eax,%ebx
f011ee6d:	89 d8                	mov    %ebx,%eax
f011ee6f:	3d fb 9f 00 00       	cmp    $0x9ffb,%eax
f011ee74:	74 17                	je     f011ee8d <test_kmalloc_worstfit+0x4ae>
f011ee76:	83 ec 04             	sub    $0x4,%esp
f011ee79:	68 ef a1 13 f0       	push   $0xf013a1ef
f011ee7e:	68 34 04 00 00       	push   $0x434
f011ee83:	68 32 9f 13 f0       	push   $0xf0139f32
f011ee88:	e8 23 13 fe ff       	call   f01001b0 <_panic>

	//make memory holes
	freeFrames = sys_calculate_free_frames() ;
f011ee8d:	e8 ac df fe ff       	call   f010ce3e <sys_calculate_free_frames>
f011ee92:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames() ;
f011ee95:	e8 ea 57 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011ee9a:	89 45 ec             	mov    %eax,-0x14(%ebp)

	kfree(ptr_allocations[0]);		//Hole 1 = 2 M
f011ee9d:	8b 85 44 fc ff ff    	mov    -0x3bc(%ebp),%eax
f011eea3:	83 ec 0c             	sub    $0xc,%esp
f011eea6:	50                   	push   %eax
f011eea7:	e8 32 95 fe ff       	call   f01083de <kfree>
f011eeac:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[2]);		//Hole 2 = 4 M
f011eeaf:	8b 85 4c fc ff ff    	mov    -0x3b4(%ebp),%eax
f011eeb5:	83 ec 0c             	sub    $0xc,%esp
f011eeb8:	50                   	push   %eax
f011eeb9:	e8 20 95 fe ff       	call   f01083de <kfree>
f011eebe:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[3]);
f011eec1:	8b 85 50 fc ff ff    	mov    -0x3b0(%ebp),%eax
f011eec7:	83 ec 0c             	sub    $0xc,%esp
f011eeca:	50                   	push   %eax
f011eecb:	e8 0e 95 fe ff       	call   f01083de <kfree>
f011eed0:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[10]);		//Hole 3 = 6 M
f011eed3:	8b 85 6c fc ff ff    	mov    -0x394(%ebp),%eax
f011eed9:	83 ec 0c             	sub    $0xc,%esp
f011eedc:	50                   	push   %eax
f011eedd:	e8 fc 94 fe ff       	call   f01083de <kfree>
f011eee2:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[12]);
f011eee5:	8b 85 74 fc ff ff    	mov    -0x38c(%ebp),%eax
f011eeeb:	83 ec 0c             	sub    $0xc,%esp
f011eeee:	50                   	push   %eax
f011eeef:	e8 ea 94 fe ff       	call   f01083de <kfree>
f011eef4:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[11]);
f011eef7:	8b 85 70 fc ff ff    	mov    -0x390(%ebp),%eax
f011eefd:	83 ec 0c             	sub    $0xc,%esp
f011ef00:	50                   	push   %eax
f011ef01:	e8 d8 94 fe ff       	call   f01083de <kfree>
f011ef06:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[30]);		//Hole 4 = 10 M
f011ef09:	8b 85 bc fc ff ff    	mov    -0x344(%ebp),%eax
f011ef0f:	83 ec 0c             	sub    $0xc,%esp
f011ef12:	50                   	push   %eax
f011ef13:	e8 c6 94 fe ff       	call   f01083de <kfree>
f011ef18:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[31]);
f011ef1b:	8b 85 c0 fc ff ff    	mov    -0x340(%ebp),%eax
f011ef21:	83 ec 0c             	sub    $0xc,%esp
f011ef24:	50                   	push   %eax
f011ef25:	e8 b4 94 fe ff       	call   f01083de <kfree>
f011ef2a:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[32]);
f011ef2d:	8b 85 c4 fc ff ff    	mov    -0x33c(%ebp),%eax
f011ef33:	83 ec 0c             	sub    $0xc,%esp
f011ef36:	50                   	push   %eax
f011ef37:	e8 a2 94 fe ff       	call   f01083de <kfree>
f011ef3c:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[33]);
f011ef3f:	8b 85 c8 fc ff ff    	mov    -0x338(%ebp),%eax
f011ef45:	83 ec 0c             	sub    $0xc,%esp
f011ef48:	50                   	push   %eax
f011ef49:	e8 90 94 fe ff       	call   f01083de <kfree>
f011ef4e:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[34]);
f011ef51:	8b 85 cc fc ff ff    	mov    -0x334(%ebp),%eax
f011ef57:	83 ec 0c             	sub    $0xc,%esp
f011ef5a:	50                   	push   %eax
f011ef5b:	e8 7e 94 fe ff       	call   f01083de <kfree>
f011ef60:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[70]); 	//Hole 5 = 8 M
f011ef63:	8b 85 5c fd ff ff    	mov    -0x2a4(%ebp),%eax
f011ef69:	83 ec 0c             	sub    $0xc,%esp
f011ef6c:	50                   	push   %eax
f011ef6d:	e8 6c 94 fe ff       	call   f01083de <kfree>
f011ef72:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[71]);
f011ef75:	8b 85 60 fd ff ff    	mov    -0x2a0(%ebp),%eax
f011ef7b:	83 ec 0c             	sub    $0xc,%esp
f011ef7e:	50                   	push   %eax
f011ef7f:	e8 5a 94 fe ff       	call   f01083de <kfree>
f011ef84:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[72]);
f011ef87:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f011ef8d:	83 ec 0c             	sub    $0xc,%esp
f011ef90:	50                   	push   %eax
f011ef91:	e8 48 94 fe ff       	call   f01083de <kfree>
f011ef96:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[73]);
f011ef99:	8b 85 68 fd ff ff    	mov    -0x298(%ebp),%eax
f011ef9f:	83 ec 0c             	sub    $0xc,%esp
f011efa2:	50                   	push   %eax
f011efa3:	e8 36 94 fe ff       	call   f01083de <kfree>
f011efa8:	83 c4 10             	add    $0x10,%esp

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011efab:	e8 d4 56 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011efb0:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011efb3:	74 17                	je     f011efcc <test_kmalloc_worstfit+0x5ed>
f011efb5:	83 ec 04             	sub    $0x4,%esp
f011efb8:	68 4c 9f 13 f0       	push   $0xf0139f4c
f011efbd:	68 4a 04 00 00       	push   $0x44a
f011efc2:	68 32 9f 13 f0       	push   $0xf0139f32
f011efc7:	e8 e4 11 fe ff       	call   f01001b0 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) != ((15*2*Mega))/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f011efcc:	e8 6d de fe ff       	call   f010ce3e <sys_calculate_free_frames>
f011efd1:	89 c2                	mov    %eax,%edx
f011efd3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011efd6:	29 c2                	sub    %eax,%edx
f011efd8:	89 d0                	mov    %edx,%eax
f011efda:	3d 00 1e 00 00       	cmp    $0x1e00,%eax
f011efdf:	74 17                	je     f011eff8 <test_kmalloc_worstfit+0x619>
f011efe1:	83 ec 04             	sub    $0x4,%esp
f011efe4:	68 00 a2 13 f0       	push   $0xf013a200
f011efe9:	68 4b 04 00 00       	push   $0x44b
f011efee:	68 32 9f 13 f0       	push   $0xf0139f32
f011eff3:	e8 b8 11 fe ff       	call   f01001b0 <_panic>

	// Test worst fit
	freeFrames = sys_calculate_free_frames() ;
f011eff8:	e8 41 de fe ff       	call   f010ce3e <sys_calculate_free_frames>
f011effd:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f000:	e8 7f 56 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011f005:	89 45 ec             	mov    %eax,-0x14(%ebp)
	void* tempAddress = kmalloc(Mega);		//Use Hole 4 -> Hole 4 = 9 M
f011f008:	83 ec 0c             	sub    $0xc,%esp
f011f00b:	68 00 00 10 00       	push   $0x100000
f011f010:	e8 3e 92 fe ff       	call   f0108253 <kmalloc>
f011f015:	83 c4 10             	add    $0x10,%esp
f011f018:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x03C00000)
f011f01e:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f011f025:	10 00 00 
f011f028:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011f02d:	0f b6 d0             	movzbl %al,%edx
f011f030:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011f036:	01 d0                	add    %edx,%eax
f011f038:	48                   	dec    %eax
f011f039:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f011f03f:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011f045:	ba 00 00 00 00       	mov    $0x0,%edx
f011f04a:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f011f050:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011f056:	29 d0                	sub    %edx,%eax
f011f058:	89 c1                	mov    %eax,%ecx
f011f05a:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f011f061:	10 00 00 
f011f064:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011f069:	0f b6 c0             	movzbl %al,%eax
f011f06c:	c1 e0 04             	shl    $0x4,%eax
f011f06f:	89 c2                	mov    %eax,%edx
f011f071:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011f077:	01 d0                	add    %edx,%eax
f011f079:	48                   	dec    %eax
f011f07a:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f011f080:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011f086:	ba 00 00 00 00       	mov    $0x0,%edx
f011f08b:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f011f091:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011f097:	29 d0                	sub    %edx,%eax
f011f099:	01 c8                	add    %ecx,%eax
f011f09b:	8d 90 00 40 c0 f9    	lea    -0x63fc000(%eax),%edx
f011f0a1:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011f0a7:	39 c2                	cmp    %eax,%edx
f011f0a9:	74 17                	je     f011f0c2 <test_kmalloc_worstfit+0x6e3>
		panic("Worst Fit not working correctly");
f011f0ab:	83 ec 04             	sub    $0x4,%esp
f011f0ae:	68 4c a6 13 f0       	push   $0xf013a64c
f011f0b3:	68 52 04 00 00       	push   $0x452
f011f0b8:	68 32 9f 13 f0       	push   $0xf0139f32
f011f0bd:	e8 ee 10 fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f0c2:	e8 bd 55 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011f0c7:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f0ca:	74 17                	je     f011f0e3 <test_kmalloc_worstfit+0x704>
f011f0cc:	83 ec 04             	sub    $0x4,%esp
f011f0cf:	68 4c 9f 13 f0       	push   $0xf0139f4c
f011f0d4:	68 53 04 00 00       	push   $0x453
f011f0d9:	68 32 9f 13 f0       	push   $0xf0139f32
f011f0de:	e8 cd 10 fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  1*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011f0e3:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f0e6:	e8 53 dd fe ff       	call   f010ce3e <sys_calculate_free_frames>
f011f0eb:	29 c3                	sub    %eax,%ebx
f011f0ed:	89 d8                	mov    %ebx,%eax
f011f0ef:	3d 00 01 00 00       	cmp    $0x100,%eax
f011f0f4:	74 17                	je     f011f10d <test_kmalloc_worstfit+0x72e>
f011f0f6:	83 ec 04             	sub    $0x4,%esp
f011f0f9:	68 6a a4 13 f0       	push   $0xf013a46a
f011f0fe:	68 54 04 00 00       	push   $0x454
f011f103:	68 32 9f 13 f0       	push   $0xf0139f32
f011f108:	e8 a3 10 fe ff       	call   f01001b0 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f10d:	ff 45 e8             	incl   -0x18(%ebp)
f011f110:	83 ec 08             	sub    $0x8,%esp
f011f113:	ff 75 e8             	pushl  -0x18(%ebp)
f011f116:	68 6c a6 13 f0       	push   $0xf013a66c
f011f11b:	e8 11 1d fe ff       	call   f0100e31 <cprintf>
f011f120:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011f123:	e8 16 dd fe ff       	call   f010ce3e <sys_calculate_free_frames>
f011f128:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f12b:	e8 54 55 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011f130:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(4 * Mega);			//Use Hole 4 -> Hole 4 = 5 M
f011f133:	83 ec 0c             	sub    $0xc,%esp
f011f136:	68 00 00 40 00       	push   $0x400000
f011f13b:	e8 13 91 fe ff       	call   f0108253 <kmalloc>
f011f140:	83 c4 10             	add    $0x10,%esp
f011f143:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x03D00000)
f011f149:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f011f150:	10 00 00 
f011f153:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011f158:	0f b6 d0             	movzbl %al,%edx
f011f15b:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011f161:	01 d0                	add    %edx,%eax
f011f163:	48                   	dec    %eax
f011f164:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f011f16a:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011f170:	ba 00 00 00 00       	mov    $0x0,%edx
f011f175:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f011f17b:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011f181:	29 d0                	sub    %edx,%eax
f011f183:	89 c1                	mov    %eax,%ecx
f011f185:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f011f18c:	10 00 00 
f011f18f:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011f194:	0f b6 c0             	movzbl %al,%eax
f011f197:	c1 e0 04             	shl    $0x4,%eax
f011f19a:	89 c2                	mov    %eax,%edx
f011f19c:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011f1a2:	01 d0                	add    %edx,%eax
f011f1a4:	48                   	dec    %eax
f011f1a5:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f011f1ab:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011f1b1:	ba 00 00 00 00       	mov    $0x0,%edx
f011f1b6:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f011f1bc:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011f1c2:	29 d0                	sub    %edx,%eax
f011f1c4:	01 c8                	add    %ecx,%eax
f011f1c6:	8d 90 00 40 d0 f9    	lea    -0x62fc000(%eax),%edx
f011f1cc:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011f1d2:	39 c2                	cmp    %eax,%edx
f011f1d4:	74 17                	je     f011f1ed <test_kmalloc_worstfit+0x80e>
		panic("Worst Fit not working correctly");
f011f1d6:	83 ec 04             	sub    $0x4,%esp
f011f1d9:	68 4c a6 13 f0       	push   $0xf013a64c
f011f1de:	68 5b 04 00 00       	push   $0x45b
f011f1e3:	68 32 9f 13 f0       	push   $0xf0139f32
f011f1e8:	e8 c3 0f fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f1ed:	e8 92 54 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011f1f2:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f1f5:	74 17                	je     f011f20e <test_kmalloc_worstfit+0x82f>
f011f1f7:	83 ec 04             	sub    $0x4,%esp
f011f1fa:	68 4c 9f 13 f0       	push   $0xf0139f4c
f011f1ff:	68 5c 04 00 00       	push   $0x45c
f011f204:	68 32 9f 13 f0       	push   $0xf0139f32
f011f209:	e8 a2 0f fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  4*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011f20e:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f211:	e8 28 dc fe ff       	call   f010ce3e <sys_calculate_free_frames>
f011f216:	29 c3                	sub    %eax,%ebx
f011f218:	89 d8                	mov    %ebx,%eax
f011f21a:	3d 00 04 00 00       	cmp    $0x400,%eax
f011f21f:	74 17                	je     f011f238 <test_kmalloc_worstfit+0x859>
f011f221:	83 ec 04             	sub    $0x4,%esp
f011f224:	68 6a a4 13 f0       	push   $0xf013a46a
f011f229:	68 5d 04 00 00       	push   $0x45d
f011f22e:	68 32 9f 13 f0       	push   $0xf0139f32
f011f233:	e8 78 0f fe ff       	call   f01001b0 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f238:	ff 45 e8             	incl   -0x18(%ebp)
f011f23b:	83 ec 08             	sub    $0x8,%esp
f011f23e:	ff 75 e8             	pushl  -0x18(%ebp)
f011f241:	68 6c a6 13 f0       	push   $0xf013a66c
f011f246:	e8 e6 1b fe ff       	call   f0100e31 <cprintf>
f011f24b:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011f24e:	e8 eb db fe ff       	call   f010ce3e <sys_calculate_free_frames>
f011f253:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f256:	e8 29 54 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011f25b:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(6*Mega); 			   //Use Hole 5 -> Hole 5 = 2 M
f011f25e:	83 ec 0c             	sub    $0xc,%esp
f011f261:	68 00 00 60 00       	push   $0x600000
f011f266:	e8 e8 8f fe ff       	call   f0108253 <kmalloc>
f011f26b:	83 c4 10             	add    $0x10,%esp
f011f26e:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x08C00000)
f011f274:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f011f27b:	10 00 00 
f011f27e:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011f283:	0f b6 d0             	movzbl %al,%edx
f011f286:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011f28c:	01 d0                	add    %edx,%eax
f011f28e:	48                   	dec    %eax
f011f28f:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f011f295:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011f29b:	ba 00 00 00 00       	mov    $0x0,%edx
f011f2a0:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f011f2a6:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011f2ac:	29 d0                	sub    %edx,%eax
f011f2ae:	89 c1                	mov    %eax,%ecx
f011f2b0:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f011f2b7:	10 00 00 
f011f2ba:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011f2bf:	0f b6 c0             	movzbl %al,%eax
f011f2c2:	c1 e0 04             	shl    $0x4,%eax
f011f2c5:	89 c2                	mov    %eax,%edx
f011f2c7:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011f2cd:	01 d0                	add    %edx,%eax
f011f2cf:	48                   	dec    %eax
f011f2d0:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f011f2d6:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011f2dc:	ba 00 00 00 00       	mov    $0x0,%edx
f011f2e1:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f011f2e7:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011f2ed:	29 d0                	sub    %edx,%eax
f011f2ef:	01 c8                	add    %ecx,%eax
f011f2f1:	8d 90 00 40 c0 fe    	lea    -0x13fc000(%eax),%edx
f011f2f7:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011f2fd:	39 c2                	cmp    %eax,%edx
f011f2ff:	74 17                	je     f011f318 <test_kmalloc_worstfit+0x939>
		panic("Worst Fit not working correctly");
f011f301:	83 ec 04             	sub    $0x4,%esp
f011f304:	68 4c a6 13 f0       	push   $0xf013a64c
f011f309:	68 64 04 00 00       	push   $0x464
f011f30e:	68 32 9f 13 f0       	push   $0xf0139f32
f011f313:	e8 98 0e fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f318:	e8 67 53 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011f31d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f320:	74 17                	je     f011f339 <test_kmalloc_worstfit+0x95a>
f011f322:	83 ec 04             	sub    $0x4,%esp
f011f325:	68 4c 9f 13 f0       	push   $0xf0139f4c
f011f32a:	68 65 04 00 00       	push   $0x465
f011f32f:	68 32 9f 13 f0       	push   $0xf0139f32
f011f334:	e8 77 0e fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  6*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011f339:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f33c:	e8 fd da fe ff       	call   f010ce3e <sys_calculate_free_frames>
f011f341:	29 c3                	sub    %eax,%ebx
f011f343:	89 d8                	mov    %ebx,%eax
f011f345:	3d 00 06 00 00       	cmp    $0x600,%eax
f011f34a:	74 17                	je     f011f363 <test_kmalloc_worstfit+0x984>
f011f34c:	83 ec 04             	sub    $0x4,%esp
f011f34f:	68 6a a4 13 f0       	push   $0xf013a46a
f011f354:	68 66 04 00 00       	push   $0x466
f011f359:	68 32 9f 13 f0       	push   $0xf0139f32
f011f35e:	e8 4d 0e fe ff       	call   f01001b0 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f363:	ff 45 e8             	incl   -0x18(%ebp)
f011f366:	83 ec 08             	sub    $0x8,%esp
f011f369:	ff 75 e8             	pushl  -0x18(%ebp)
f011f36c:	68 6c a6 13 f0       	push   $0xf013a66c
f011f371:	e8 bb 1a fe ff       	call   f0100e31 <cprintf>
f011f376:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011f379:	e8 c0 da fe ff       	call   f010ce3e <sys_calculate_free_frames>
f011f37e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f381:	e8 fe 52 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011f386:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(5*Mega); 			   //Use Hole 3 -> Hole 3 = 1 M
f011f389:	83 ec 0c             	sub    $0xc,%esp
f011f38c:	68 00 00 50 00       	push   $0x500000
f011f391:	e8 bd 8e fe ff       	call   f0108253 <kmalloc>
f011f396:	83 c4 10             	add    $0x10,%esp
f011f399:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01400000)
f011f39f:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f011f3a6:	10 00 00 
f011f3a9:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011f3ae:	0f b6 d0             	movzbl %al,%edx
f011f3b1:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011f3b7:	01 d0                	add    %edx,%eax
f011f3b9:	48                   	dec    %eax
f011f3ba:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f011f3c0:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011f3c6:	ba 00 00 00 00       	mov    $0x0,%edx
f011f3cb:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f011f3d1:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011f3d7:	29 d0                	sub    %edx,%eax
f011f3d9:	89 c1                	mov    %eax,%ecx
f011f3db:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f011f3e2:	10 00 00 
f011f3e5:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011f3ea:	0f b6 c0             	movzbl %al,%eax
f011f3ed:	c1 e0 04             	shl    $0x4,%eax
f011f3f0:	89 c2                	mov    %eax,%edx
f011f3f2:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011f3f8:	01 d0                	add    %edx,%eax
f011f3fa:	48                   	dec    %eax
f011f3fb:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f011f401:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011f407:	ba 00 00 00 00       	mov    $0x0,%edx
f011f40c:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f011f412:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011f418:	29 d0                	sub    %edx,%eax
f011f41a:	01 c8                	add    %ecx,%eax
f011f41c:	8d 90 00 40 40 f7    	lea    -0x8bfc000(%eax),%edx
f011f422:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011f428:	39 c2                	cmp    %eax,%edx
f011f42a:	74 17                	je     f011f443 <test_kmalloc_worstfit+0xa64>
		panic("Worst Fit not working correctly");
f011f42c:	83 ec 04             	sub    $0x4,%esp
f011f42f:	68 4c a6 13 f0       	push   $0xf013a64c
f011f434:	68 6d 04 00 00       	push   $0x46d
f011f439:	68 32 9f 13 f0       	push   $0xf0139f32
f011f43e:	e8 6d 0d fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f443:	e8 3c 52 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011f448:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f44b:	74 17                	je     f011f464 <test_kmalloc_worstfit+0xa85>
f011f44d:	83 ec 04             	sub    $0x4,%esp
f011f450:	68 4c 9f 13 f0       	push   $0xf0139f4c
f011f455:	68 6e 04 00 00       	push   $0x46e
f011f45a:	68 32 9f 13 f0       	push   $0xf0139f32
f011f45f:	e8 4c 0d fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  5*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011f464:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f467:	e8 d2 d9 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f011f46c:	29 c3                	sub    %eax,%ebx
f011f46e:	89 d8                	mov    %ebx,%eax
f011f470:	3d 00 05 00 00       	cmp    $0x500,%eax
f011f475:	74 17                	je     f011f48e <test_kmalloc_worstfit+0xaaf>
f011f477:	83 ec 04             	sub    $0x4,%esp
f011f47a:	68 6a a4 13 f0       	push   $0xf013a46a
f011f47f:	68 6f 04 00 00       	push   $0x46f
f011f484:	68 32 9f 13 f0       	push   $0xf0139f32
f011f489:	e8 22 0d fe ff       	call   f01001b0 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f48e:	ff 45 e8             	incl   -0x18(%ebp)
f011f491:	83 ec 08             	sub    $0x8,%esp
f011f494:	ff 75 e8             	pushl  -0x18(%ebp)
f011f497:	68 6c a6 13 f0       	push   $0xf013a66c
f011f49c:	e8 90 19 fe ff       	call   f0100e31 <cprintf>
f011f4a1:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011f4a4:	e8 95 d9 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f011f4a9:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f4ac:	e8 d3 51 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011f4b1:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(4*Mega); 			   // Use Hole 4 -> Hole 4 = 1 M
f011f4b4:	83 ec 0c             	sub    $0xc,%esp
f011f4b7:	68 00 00 40 00       	push   $0x400000
f011f4bc:	e8 92 8d fe ff       	call   f0108253 <kmalloc>
f011f4c1:	83 c4 10             	add    $0x10,%esp
f011f4c4:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x04100000)
f011f4ca:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f011f4d1:	10 00 00 
f011f4d4:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011f4d9:	0f b6 d0             	movzbl %al,%edx
f011f4dc:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011f4e2:	01 d0                	add    %edx,%eax
f011f4e4:	48                   	dec    %eax
f011f4e5:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f011f4eb:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011f4f1:	ba 00 00 00 00       	mov    $0x0,%edx
f011f4f6:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f011f4fc:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011f502:	29 d0                	sub    %edx,%eax
f011f504:	89 c1                	mov    %eax,%ecx
f011f506:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f011f50d:	10 00 00 
f011f510:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011f515:	0f b6 c0             	movzbl %al,%eax
f011f518:	c1 e0 04             	shl    $0x4,%eax
f011f51b:	89 c2                	mov    %eax,%edx
f011f51d:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011f523:	01 d0                	add    %edx,%eax
f011f525:	48                   	dec    %eax
f011f526:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f011f52c:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011f532:	ba 00 00 00 00       	mov    $0x0,%edx
f011f537:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f011f53d:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011f543:	29 d0                	sub    %edx,%eax
f011f545:	01 c8                	add    %ecx,%eax
f011f547:	8d 90 00 40 10 fa    	lea    -0x5efc000(%eax),%edx
f011f54d:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011f553:	39 c2                	cmp    %eax,%edx
f011f555:	74 17                	je     f011f56e <test_kmalloc_worstfit+0xb8f>
		panic("Worst Fit not working correctly");
f011f557:	83 ec 04             	sub    $0x4,%esp
f011f55a:	68 4c a6 13 f0       	push   $0xf013a64c
f011f55f:	68 76 04 00 00       	push   $0x476
f011f564:	68 32 9f 13 f0       	push   $0xf0139f32
f011f569:	e8 42 0c fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f56e:	e8 11 51 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011f573:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f576:	74 17                	je     f011f58f <test_kmalloc_worstfit+0xbb0>
f011f578:	83 ec 04             	sub    $0x4,%esp
f011f57b:	68 4c 9f 13 f0       	push   $0xf0139f4c
f011f580:	68 77 04 00 00       	push   $0x477
f011f585:	68 32 9f 13 f0       	push   $0xf0139f32
f011f58a:	e8 21 0c fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  4*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011f58f:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f592:	e8 a7 d8 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f011f597:	29 c3                	sub    %eax,%ebx
f011f599:	89 d8                	mov    %ebx,%eax
f011f59b:	3d 00 04 00 00       	cmp    $0x400,%eax
f011f5a0:	74 17                	je     f011f5b9 <test_kmalloc_worstfit+0xbda>
f011f5a2:	83 ec 04             	sub    $0x4,%esp
f011f5a5:	68 6a a4 13 f0       	push   $0xf013a46a
f011f5aa:	68 78 04 00 00       	push   $0x478
f011f5af:	68 32 9f 13 f0       	push   $0xf0139f32
f011f5b4:	e8 f7 0b fe ff       	call   f01001b0 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f5b9:	ff 45 e8             	incl   -0x18(%ebp)
f011f5bc:	83 ec 08             	sub    $0x8,%esp
f011f5bf:	ff 75 e8             	pushl  -0x18(%ebp)
f011f5c2:	68 6c a6 13 f0       	push   $0xf013a66c
f011f5c7:	e8 65 18 fe ff       	call   f0100e31 <cprintf>
f011f5cc:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011f5cf:	e8 6a d8 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f011f5d4:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f5d7:	e8 a8 50 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011f5dc:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(2 * Mega); 			// Use Hole 2 -> Hole 2 = 2 M
f011f5df:	83 ec 0c             	sub    $0xc,%esp
f011f5e2:	68 00 00 20 00       	push   $0x200000
f011f5e7:	e8 67 8c fe ff       	call   f0108253 <kmalloc>
f011f5ec:	83 c4 10             	add    $0x10,%esp
f011f5ef:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00400000)
f011f5f5:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f011f5fc:	10 00 00 
f011f5ff:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011f604:	0f b6 d0             	movzbl %al,%edx
f011f607:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011f60d:	01 d0                	add    %edx,%eax
f011f60f:	48                   	dec    %eax
f011f610:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f011f616:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011f61c:	ba 00 00 00 00       	mov    $0x0,%edx
f011f621:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f011f627:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011f62d:	29 d0                	sub    %edx,%eax
f011f62f:	89 c1                	mov    %eax,%ecx
f011f631:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f011f638:	10 00 00 
f011f63b:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011f640:	0f b6 c0             	movzbl %al,%eax
f011f643:	c1 e0 04             	shl    $0x4,%eax
f011f646:	89 c2                	mov    %eax,%edx
f011f648:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011f64e:	01 d0                	add    %edx,%eax
f011f650:	48                   	dec    %eax
f011f651:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f011f657:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011f65d:	ba 00 00 00 00       	mov    $0x0,%edx
f011f662:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f011f668:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011f66e:	29 d0                	sub    %edx,%eax
f011f670:	01 c8                	add    %ecx,%eax
f011f672:	8d 90 00 40 40 f6    	lea    -0x9bfc000(%eax),%edx
f011f678:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011f67e:	39 c2                	cmp    %eax,%edx
f011f680:	74 17                	je     f011f699 <test_kmalloc_worstfit+0xcba>
		panic("Worst Fit not working correctly");
f011f682:	83 ec 04             	sub    $0x4,%esp
f011f685:	68 4c a6 13 f0       	push   $0xf013a64c
f011f68a:	68 7f 04 00 00       	push   $0x47f
f011f68f:	68 32 9f 13 f0       	push   $0xf0139f32
f011f694:	e8 17 0b fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f699:	e8 e6 4f fe ff       	call   f0104684 <pf_calculate_free_frames>
f011f69e:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f6a1:	74 17                	je     f011f6ba <test_kmalloc_worstfit+0xcdb>
f011f6a3:	83 ec 04             	sub    $0x4,%esp
f011f6a6:	68 4c 9f 13 f0       	push   $0xf0139f4c
f011f6ab:	68 80 04 00 00       	push   $0x480
f011f6b0:	68 32 9f 13 f0       	push   $0xf0139f32
f011f6b5:	e8 f6 0a fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  2*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011f6ba:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f6bd:	e8 7c d7 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f011f6c2:	29 c3                	sub    %eax,%ebx
f011f6c4:	89 d8                	mov    %ebx,%eax
f011f6c6:	3d 00 02 00 00       	cmp    $0x200,%eax
f011f6cb:	74 17                	je     f011f6e4 <test_kmalloc_worstfit+0xd05>
f011f6cd:	83 ec 04             	sub    $0x4,%esp
f011f6d0:	68 6a a4 13 f0       	push   $0xf013a46a
f011f6d5:	68 81 04 00 00       	push   $0x481
f011f6da:	68 32 9f 13 f0       	push   $0xf0139f32
f011f6df:	e8 cc 0a fe ff       	call   f01001b0 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f6e4:	ff 45 e8             	incl   -0x18(%ebp)
f011f6e7:	83 ec 08             	sub    $0x8,%esp
f011f6ea:	ff 75 e8             	pushl  -0x18(%ebp)
f011f6ed:	68 6c a6 13 f0       	push   $0xf013a66c
f011f6f2:	e8 3a 17 fe ff       	call   f0100e31 <cprintf>
f011f6f7:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011f6fa:	e8 3f d7 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f011f6ff:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f702:	e8 7d 4f fe ff       	call   f0104684 <pf_calculate_free_frames>
f011f707:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(1*Mega + 512*kilo);    // Use Hole 1 -> Hole 1 = 0.5 M
f011f70a:	83 ec 0c             	sub    $0xc,%esp
f011f70d:	68 00 00 18 00       	push   $0x180000
f011f712:	e8 3c 8b fe ff       	call   f0108253 <kmalloc>
f011f717:	83 c4 10             	add    $0x10,%esp
f011f71a:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
	if((uint32)tempAddress != ACTUAL_START)
f011f720:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f011f727:	10 00 00 
f011f72a:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011f72f:	0f b6 d0             	movzbl %al,%edx
f011f732:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011f738:	01 d0                	add    %edx,%eax
f011f73a:	48                   	dec    %eax
f011f73b:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f011f741:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011f747:	ba 00 00 00 00       	mov    $0x0,%edx
f011f74c:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f011f752:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011f758:	29 d0                	sub    %edx,%eax
f011f75a:	89 c1                	mov    %eax,%ecx
f011f75c:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f011f763:	10 00 00 
f011f766:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011f76b:	0f b6 c0             	movzbl %al,%eax
f011f76e:	c1 e0 04             	shl    $0x4,%eax
f011f771:	89 c2                	mov    %eax,%edx
f011f773:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011f779:	01 d0                	add    %edx,%eax
f011f77b:	48                   	dec    %eax
f011f77c:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f011f782:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011f788:	ba 00 00 00 00       	mov    $0x0,%edx
f011f78d:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f011f793:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011f799:	29 d0                	sub    %edx,%eax
f011f79b:	01 c8                	add    %ecx,%eax
f011f79d:	8d 90 00 40 00 f6    	lea    -0x9ffc000(%eax),%edx
f011f7a3:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011f7a9:	39 c2                	cmp    %eax,%edx
f011f7ab:	74 17                	je     f011f7c4 <test_kmalloc_worstfit+0xde5>
		panic("Worst Fit not working correctly");
f011f7ad:	83 ec 04             	sub    $0x4,%esp
f011f7b0:	68 4c a6 13 f0       	push   $0xf013a64c
f011f7b5:	68 88 04 00 00       	push   $0x488
f011f7ba:	68 32 9f 13 f0       	push   $0xf0139f32
f011f7bf:	e8 ec 09 fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f7c4:	e8 bb 4e fe ff       	call   f0104684 <pf_calculate_free_frames>
f011f7c9:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f7cc:	74 17                	je     f011f7e5 <test_kmalloc_worstfit+0xe06>
f011f7ce:	83 ec 04             	sub    $0x4,%esp
f011f7d1:	68 4c 9f 13 f0       	push   $0xf0139f4c
f011f7d6:	68 89 04 00 00       	push   $0x489
f011f7db:	68 32 9f 13 f0       	push   $0xf0139f32
f011f7e0:	e8 cb 09 fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (1*Mega + 512*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f011f7e5:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f7e8:	e8 51 d6 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f011f7ed:	29 c3                	sub    %eax,%ebx
f011f7ef:	89 d8                	mov    %ebx,%eax
f011f7f1:	3d 80 01 00 00       	cmp    $0x180,%eax
f011f7f6:	74 17                	je     f011f80f <test_kmalloc_worstfit+0xe30>
f011f7f8:	83 ec 04             	sub    $0x4,%esp
f011f7fb:	68 6a a4 13 f0       	push   $0xf013a46a
f011f800:	68 8a 04 00 00       	push   $0x48a
f011f805:	68 32 9f 13 f0       	push   $0xf0139f32
f011f80a:	e8 a1 09 fe ff       	call   f01001b0 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f80f:	ff 45 e8             	incl   -0x18(%ebp)
f011f812:	83 ec 08             	sub    $0x8,%esp
f011f815:	ff 75 e8             	pushl  -0x18(%ebp)
f011f818:	68 6c a6 13 f0       	push   $0xf013a66c
f011f81d:	e8 0f 16 fe ff       	call   f0100e31 <cprintf>
f011f822:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011f825:	e8 14 d6 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f011f82a:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f82d:	e8 52 4e fe ff       	call   f0104684 <pf_calculate_free_frames>
f011f832:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(512*kilo); 			   // Use Hole 2 -> Hole 2 = 1.5 M
f011f835:	83 ec 0c             	sub    $0xc,%esp
f011f838:	68 00 00 08 00       	push   $0x80000
f011f83d:	e8 11 8a fe ff       	call   f0108253 <kmalloc>
f011f842:	83 c4 10             	add    $0x10,%esp
f011f845:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00600000)
f011f84b:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f011f852:	10 00 00 
f011f855:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011f85a:	0f b6 d0             	movzbl %al,%edx
f011f85d:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011f863:	01 d0                	add    %edx,%eax
f011f865:	48                   	dec    %eax
f011f866:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f011f86c:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011f872:	ba 00 00 00 00       	mov    $0x0,%edx
f011f877:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f011f87d:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011f883:	29 d0                	sub    %edx,%eax
f011f885:	89 c1                	mov    %eax,%ecx
f011f887:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f011f88e:	10 00 00 
f011f891:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011f896:	0f b6 c0             	movzbl %al,%eax
f011f899:	c1 e0 04             	shl    $0x4,%eax
f011f89c:	89 c2                	mov    %eax,%edx
f011f89e:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011f8a4:	01 d0                	add    %edx,%eax
f011f8a6:	48                   	dec    %eax
f011f8a7:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f011f8ad:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011f8b3:	ba 00 00 00 00       	mov    $0x0,%edx
f011f8b8:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f011f8be:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011f8c4:	29 d0                	sub    %edx,%eax
f011f8c6:	01 c8                	add    %ecx,%eax
f011f8c8:	8d 90 00 40 60 f6    	lea    -0x99fc000(%eax),%edx
f011f8ce:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011f8d4:	39 c2                	cmp    %eax,%edx
f011f8d6:	74 17                	je     f011f8ef <test_kmalloc_worstfit+0xf10>
		panic("Worst Fit not working correctly");
f011f8d8:	83 ec 04             	sub    $0x4,%esp
f011f8db:	68 4c a6 13 f0       	push   $0xf013a64c
f011f8e0:	68 91 04 00 00       	push   $0x491
f011f8e5:	68 32 9f 13 f0       	push   $0xf0139f32
f011f8ea:	e8 c1 08 fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f8ef:	e8 90 4d fe ff       	call   f0104684 <pf_calculate_free_frames>
f011f8f4:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f8f7:	74 17                	je     f011f910 <test_kmalloc_worstfit+0xf31>
f011f8f9:	83 ec 04             	sub    $0x4,%esp
f011f8fc:	68 4c 9f 13 f0       	push   $0xf0139f4c
f011f901:	68 92 04 00 00       	push   $0x492
f011f906:	68 32 9f 13 f0       	push   $0xf0139f32
f011f90b:	e8 a0 08 fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (512*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f011f910:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f913:	e8 26 d5 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f011f918:	29 c3                	sub    %eax,%ebx
f011f91a:	89 d8                	mov    %ebx,%eax
f011f91c:	3d 80 00 00 00       	cmp    $0x80,%eax
f011f921:	74 17                	je     f011f93a <test_kmalloc_worstfit+0xf5b>
f011f923:	83 ec 04             	sub    $0x4,%esp
f011f926:	68 6a a4 13 f0       	push   $0xf013a46a
f011f92b:	68 93 04 00 00       	push   $0x493
f011f930:	68 32 9f 13 f0       	push   $0xf0139f32
f011f935:	e8 76 08 fe ff       	call   f01001b0 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f93a:	ff 45 e8             	incl   -0x18(%ebp)
f011f93d:	83 ec 08             	sub    $0x8,%esp
f011f940:	ff 75 e8             	pushl  -0x18(%ebp)
f011f943:	68 6c a6 13 f0       	push   $0xf013a66c
f011f948:	e8 e4 14 fe ff       	call   f0100e31 <cprintf>
f011f94d:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011f950:	e8 e9 d4 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f011f955:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f958:	e8 27 4d fe ff       	call   f0104684 <pf_calculate_free_frames>
f011f95d:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(kilo); 			   // Use Hole 5 -> Hole 5 = 2 M - K
f011f960:	83 ec 0c             	sub    $0xc,%esp
f011f963:	68 00 04 00 00       	push   $0x400
f011f968:	e8 e6 88 fe ff       	call   f0108253 <kmalloc>
f011f96d:	83 c4 10             	add    $0x10,%esp
f011f970:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x09200000)
f011f976:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f011f97d:	10 00 00 
f011f980:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011f985:	0f b6 d0             	movzbl %al,%edx
f011f988:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011f98e:	01 d0                	add    %edx,%eax
f011f990:	48                   	dec    %eax
f011f991:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f011f997:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011f99d:	ba 00 00 00 00       	mov    $0x0,%edx
f011f9a2:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f011f9a8:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011f9ae:	29 d0                	sub    %edx,%eax
f011f9b0:	89 c1                	mov    %eax,%ecx
f011f9b2:	c7 85 d8 fe ff ff 00 	movl   $0x1000,-0x128(%ebp)
f011f9b9:	10 00 00 
f011f9bc:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011f9c1:	0f b6 c0             	movzbl %al,%eax
f011f9c4:	c1 e0 04             	shl    $0x4,%eax
f011f9c7:	89 c2                	mov    %eax,%edx
f011f9c9:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011f9cf:	01 d0                	add    %edx,%eax
f011f9d1:	48                   	dec    %eax
f011f9d2:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
f011f9d8:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011f9de:	ba 00 00 00 00       	mov    $0x0,%edx
f011f9e3:	f7 b5 d8 fe ff ff    	divl   -0x128(%ebp)
f011f9e9:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011f9ef:	29 d0                	sub    %edx,%eax
f011f9f1:	01 c8                	add    %ecx,%eax
f011f9f3:	8d 90 00 40 20 ff    	lea    -0xdfc000(%eax),%edx
f011f9f9:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011f9ff:	39 c2                	cmp    %eax,%edx
f011fa01:	74 17                	je     f011fa1a <test_kmalloc_worstfit+0x103b>
		panic("Worst Fit not working correctly");
f011fa03:	83 ec 04             	sub    $0x4,%esp
f011fa06:	68 4c a6 13 f0       	push   $0xf013a64c
f011fa0b:	68 9a 04 00 00       	push   $0x49a
f011fa10:	68 32 9f 13 f0       	push   $0xf0139f32
f011fa15:	e8 96 07 fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fa1a:	e8 65 4c fe ff       	call   f0104684 <pf_calculate_free_frames>
f011fa1f:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011fa22:	74 17                	je     f011fa3b <test_kmalloc_worstfit+0x105c>
f011fa24:	83 ec 04             	sub    $0x4,%esp
f011fa27:	68 4c 9f 13 f0       	push   $0xf0139f4c
f011fa2c:	68 9b 04 00 00       	push   $0x49b
f011fa31:	68 32 9f 13 f0       	push   $0xf0139f32
f011fa36:	e8 75 07 fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (4*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f011fa3b:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011fa3e:	e8 fb d3 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f011fa43:	29 c3                	sub    %eax,%ebx
f011fa45:	89 d8                	mov    %ebx,%eax
f011fa47:	83 f8 01             	cmp    $0x1,%eax
f011fa4a:	74 17                	je     f011fa63 <test_kmalloc_worstfit+0x1084>
f011fa4c:	83 ec 04             	sub    $0x4,%esp
f011fa4f:	68 6a a4 13 f0       	push   $0xf013a46a
f011fa54:	68 9c 04 00 00       	push   $0x49c
f011fa59:	68 32 9f 13 f0       	push   $0xf0139f32
f011fa5e:	e8 4d 07 fe ff       	call   f01001b0 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011fa63:	ff 45 e8             	incl   -0x18(%ebp)
f011fa66:	83 ec 08             	sub    $0x8,%esp
f011fa69:	ff 75 e8             	pushl  -0x18(%ebp)
f011fa6c:	68 6c a6 13 f0       	push   $0xf013a66c
f011fa71:	e8 bb 13 fe ff       	call   f0100e31 <cprintf>
f011fa76:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011fa79:	e8 c0 d3 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f011fa7e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011fa81:	e8 fe 4b fe ff       	call   f0104684 <pf_calculate_free_frames>
f011fa86:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(2*Mega - 4*kilo); 		// Use Hole 5 -> Hole 5 = 0
f011fa89:	83 ec 0c             	sub    $0xc,%esp
f011fa8c:	68 00 f0 1f 00       	push   $0x1ff000
f011fa91:	e8 bd 87 fe ff       	call   f0108253 <kmalloc>
f011fa96:	83 c4 10             	add    $0x10,%esp
f011fa99:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x09201000)
f011fa9f:	c7 85 d0 fe ff ff 00 	movl   $0x1000,-0x130(%ebp)
f011faa6:	10 00 00 
f011faa9:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011faae:	0f b6 d0             	movzbl %al,%edx
f011fab1:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011fab7:	01 d0                	add    %edx,%eax
f011fab9:	48                   	dec    %eax
f011faba:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
f011fac0:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011fac6:	ba 00 00 00 00       	mov    $0x0,%edx
f011facb:	f7 b5 d0 fe ff ff    	divl   -0x130(%ebp)
f011fad1:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011fad7:	29 d0                	sub    %edx,%eax
f011fad9:	89 c1                	mov    %eax,%ecx
f011fadb:	c7 85 c8 fe ff ff 00 	movl   $0x1000,-0x138(%ebp)
f011fae2:	10 00 00 
f011fae5:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011faea:	0f b6 c0             	movzbl %al,%eax
f011faed:	c1 e0 04             	shl    $0x4,%eax
f011faf0:	89 c2                	mov    %eax,%edx
f011faf2:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011faf8:	01 d0                	add    %edx,%eax
f011fafa:	48                   	dec    %eax
f011fafb:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
f011fb01:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011fb07:	ba 00 00 00 00       	mov    $0x0,%edx
f011fb0c:	f7 b5 c8 fe ff ff    	divl   -0x138(%ebp)
f011fb12:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011fb18:	29 d0                	sub    %edx,%eax
f011fb1a:	01 c8                	add    %ecx,%eax
f011fb1c:	8d 90 00 50 20 ff    	lea    -0xdfb000(%eax),%edx
f011fb22:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011fb28:	39 c2                	cmp    %eax,%edx
f011fb2a:	74 17                	je     f011fb43 <test_kmalloc_worstfit+0x1164>
		panic("Worst Fit not working correctly");
f011fb2c:	83 ec 04             	sub    $0x4,%esp
f011fb2f:	68 4c a6 13 f0       	push   $0xf013a64c
f011fb34:	68 a3 04 00 00       	push   $0x4a3
f011fb39:	68 32 9f 13 f0       	push   $0xf0139f32
f011fb3e:	e8 6d 06 fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fb43:	e8 3c 4b fe ff       	call   f0104684 <pf_calculate_free_frames>
f011fb48:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011fb4b:	74 17                	je     f011fb64 <test_kmalloc_worstfit+0x1185>
f011fb4d:	83 ec 04             	sub    $0x4,%esp
f011fb50:	68 4c 9f 13 f0       	push   $0xf0139f4c
f011fb55:	68 a4 04 00 00       	push   $0x4a4
f011fb5a:	68 32 9f 13 f0       	push   $0xf0139f32
f011fb5f:	e8 4c 06 fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (2*Mega - 4*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f011fb64:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011fb67:	e8 d2 d2 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f011fb6c:	29 c3                	sub    %eax,%ebx
f011fb6e:	89 d8                	mov    %ebx,%eax
f011fb70:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f011fb75:	74 17                	je     f011fb8e <test_kmalloc_worstfit+0x11af>
f011fb77:	83 ec 04             	sub    $0x4,%esp
f011fb7a:	68 6a a4 13 f0       	push   $0xf013a46a
f011fb7f:	68 a5 04 00 00       	push   $0x4a5
f011fb84:	68 32 9f 13 f0       	push   $0xf0139f32
f011fb89:	e8 22 06 fe ff       	call   f01001b0 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011fb8e:	ff 45 e8             	incl   -0x18(%ebp)
f011fb91:	83 ec 08             	sub    $0x8,%esp
f011fb94:	ff 75 e8             	pushl  -0x18(%ebp)
f011fb97:	68 6c a6 13 f0       	push   $0xf013a66c
f011fb9c:	e8 90 12 fe ff       	call   f0100e31 <cprintf>
f011fba1:	83 c4 10             	add    $0x10,%esp

	// Check that worst fit returns null in case all holes are not free
	freeFrames = sys_calculate_free_frames() ;
f011fba4:	e8 95 d2 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f011fba9:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011fbac:	e8 d3 4a fe ff       	call   f0104684 <pf_calculate_free_frames>
f011fbb1:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(4*Mega); 		//No Suitable hole
f011fbb4:	83 ec 0c             	sub    $0xc,%esp
f011fbb7:	68 00 00 40 00       	push   $0x400000
f011fbbc:	e8 92 86 fe ff       	call   f0108253 <kmalloc>
f011fbc1:	83 c4 10             	add    $0x10,%esp
f011fbc4:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
	if((uint32)tempAddress != 0x0)
f011fbca:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011fbd0:	85 c0                	test   %eax,%eax
f011fbd2:	74 17                	je     f011fbeb <test_kmalloc_worstfit+0x120c>
		panic("Worst Fit not working correctly");
f011fbd4:	83 ec 04             	sub    $0x4,%esp
f011fbd7:	68 4c a6 13 f0       	push   $0xf013a64c
f011fbdc:	68 ad 04 00 00       	push   $0x4ad
f011fbe1:	68 32 9f 13 f0       	push   $0xf0139f32
f011fbe6:	e8 c5 05 fe ff       	call   f01001b0 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fbeb:	e8 94 4a fe ff       	call   f0104684 <pf_calculate_free_frames>
f011fbf0:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011fbf3:	74 17                	je     f011fc0c <test_kmalloc_worstfit+0x122d>
f011fbf5:	83 ec 04             	sub    $0x4,%esp
f011fbf8:	68 4c 9f 13 f0       	push   $0xf0139f4c
f011fbfd:	68 ae 04 00 00       	push   $0x4ae
f011fc02:	68 32 9f 13 f0       	push   $0xf0139f32
f011fc07:	e8 a4 05 fe ff       	call   f01001b0 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  0) panic("Wrong allocation:");
f011fc0c:	e8 2d d2 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f011fc11:	89 c2                	mov    %eax,%edx
f011fc13:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011fc16:	39 c2                	cmp    %eax,%edx
f011fc18:	74 17                	je     f011fc31 <test_kmalloc_worstfit+0x1252>
f011fc1a:	83 ec 04             	sub    $0x4,%esp
f011fc1d:	68 6a a4 13 f0       	push   $0xf013a46a
f011fc22:	68 af 04 00 00       	push   $0x4af
f011fc27:	68 32 9f 13 f0       	push   $0xf0139f32
f011fc2c:	e8 7f 05 fe ff       	call   f01001b0 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011fc31:	ff 45 e8             	incl   -0x18(%ebp)
f011fc34:	83 ec 08             	sub    $0x8,%esp
f011fc37:	ff 75 e8             	pushl  -0x18(%ebp)
f011fc3a:	68 6c a6 13 f0       	push   $0xf013a66c
f011fc3f:	e8 ed 11 fe ff       	call   f0100e31 <cprintf>
f011fc44:	83 c4 10             	add    $0x10,%esp

	cprintf("Congratulations!! test Worst Fit completed successfully.\n");
f011fc47:	83 ec 0c             	sub    $0xc,%esp
f011fc4a:	68 80 a6 13 f0       	push   $0xf013a680
f011fc4f:	e8 dd 11 fe ff       	call   f0100e31 <cprintf>
f011fc54:	83 c4 10             	add    $0x10,%esp


	return 1;
f011fc57:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011fc5c:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011fc5f:	5b                   	pop    %ebx
f011fc60:	5f                   	pop    %edi
f011fc61:	5d                   	pop    %ebp
f011fc62:	c3                   	ret    

f011fc63 <test_kfree>:

int test_kfree()
{
f011fc63:	55                   	push   %ebp
f011fc64:	89 e5                	mov    %esp,%ebp
f011fc66:	57                   	push   %edi
f011fc67:	53                   	push   %ebx
f011fc68:	81 ec 40 02 00 00    	sub    $0x240,%esp
	cprintf("==============================================\n");
f011fc6e:	83 ec 0c             	sub    $0xc,%esp
f011fc71:	68 74 9e 13 f0       	push   $0xf0139e74
f011fc76:	e8 b6 11 fe ff       	call   f0100e31 <cprintf>
f011fc7b:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011fc7e:	83 ec 0c             	sub    $0xc,%esp
f011fc81:	68 a4 9e 13 f0       	push   $0xf0139ea4
f011fc86:	e8 a6 11 fe ff       	call   f0100e31 <cprintf>
f011fc8b:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011fc8e:	83 ec 0c             	sub    $0xc,%esp
f011fc91:	68 74 9e 13 f0       	push   $0xf0139e74
f011fc96:	e8 96 11 fe ff       	call   f0100e31 <cprintf>
f011fc9b:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f011fc9e:	c6 45 e7 80          	movb   $0x80,-0x19(%ebp)
	char maxByte = 0x7F;
f011fca2:	c6 45 e6 7f          	movb   $0x7f,-0x1a(%ebp)
	short minShort = 1<<15 ;
f011fca6:	66 c7 45 e4 00 80    	movw   $0x8000,-0x1c(%ebp)
	short maxShort = 0x7FFF;
f011fcac:	66 c7 45 e2 ff 7f    	movw   $0x7fff,-0x1e(%ebp)
	int minInt = 1<<31 ;
f011fcb2:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
	int maxInt = 0x7FFFFFFF;
f011fcb9:	c7 45 d8 ff ff ff 7f 	movl   $0x7fffffff,-0x28(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f011fcc0:	e8 79 d1 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f011fcc5:	89 45 d4             	mov    %eax,-0x2c(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f011fcc8:	8d 95 68 fe ff ff    	lea    -0x198(%ebp),%edx
f011fcce:	b9 14 00 00 00       	mov    $0x14,%ecx
f011fcd3:	b8 00 00 00 00       	mov    $0x0,%eax
f011fcd8:	89 d7                	mov    %edx,%edi
f011fcda:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f011fcdc:	8d 95 18 fe ff ff    	lea    -0x1e8(%ebp),%edx
f011fce2:	b9 14 00 00 00       	mov    $0x14,%ecx
f011fce7:	b8 00 00 00 00       	mov    $0x0,%eax
f011fcec:	89 d7                	mov    %edx,%edi
f011fcee:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f011fcf0:	8d 95 c8 fd ff ff    	lea    -0x238(%ebp),%edx
f011fcf6:	b9 14 00 00 00       	mov    $0x14,%ecx
f011fcfb:	b8 00 00 00 00       	mov    $0x0,%eax
f011fd00:	89 d7                	mov    %edx,%edi
f011fd02:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011fd04:	e8 35 d1 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f011fd09:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011fd0c:	e8 73 49 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011fd11:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f011fd14:	83 ec 0c             	sub    $0xc,%esp
f011fd17:	68 00 fc 1f 00       	push   $0x1ffc00
f011fd1c:	e8 32 85 fe ff       	call   f0108253 <kmalloc>
f011fd21:	83 c4 10             	add    $0x10,%esp
f011fd24:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011fd2a:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f011fd30:	89 c1                	mov    %eax,%ecx
f011fd32:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f011fd39:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011fd3e:	0f b6 d0             	movzbl %al,%edx
f011fd41:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011fd44:	01 d0                	add    %edx,%eax
f011fd46:	48                   	dec    %eax
f011fd47:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f011fd4a:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011fd4d:	ba 00 00 00 00       	mov    $0x0,%edx
f011fd52:	f7 75 c8             	divl   -0x38(%ebp)
f011fd55:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011fd58:	29 d0                	sub    %edx,%eax
f011fd5a:	89 c3                	mov    %eax,%ebx
f011fd5c:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f011fd63:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011fd68:	0f b6 c0             	movzbl %al,%eax
f011fd6b:	c1 e0 04             	shl    $0x4,%eax
f011fd6e:	89 c2                	mov    %eax,%edx
f011fd70:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011fd73:	01 d0                	add    %edx,%eax
f011fd75:	48                   	dec    %eax
f011fd76:	89 45 bc             	mov    %eax,-0x44(%ebp)
f011fd79:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011fd7c:	ba 00 00 00 00       	mov    $0x0,%edx
f011fd81:	f7 75 c0             	divl   -0x40(%ebp)
f011fd84:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011fd87:	29 d0                	sub    %edx,%eax
f011fd89:	01 d8                	add    %ebx,%eax
f011fd8b:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011fd90:	39 c1                	cmp    %eax,%ecx
f011fd92:	74 17                	je     f011fdab <test_kfree+0x148>
f011fd94:	83 ec 04             	sub    $0x4,%esp
f011fd97:	68 18 a0 13 f0       	push   $0xf013a018
f011fd9c:	68 d7 04 00 00       	push   $0x4d7
f011fda1:	68 32 9f 13 f0       	push   $0xf0139f32
f011fda6:	e8 05 04 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fdab:	e8 d4 48 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011fdb0:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011fdb3:	74 17                	je     f011fdcc <test_kfree+0x169>
f011fdb5:	83 ec 04             	sub    $0x4,%esp
f011fdb8:	68 4c 9f 13 f0       	push   $0xf0139f4c
f011fdbd:	68 d8 04 00 00       	push   $0x4d8
f011fdc2:	68 32 9f 13 f0       	push   $0xf0139f32
f011fdc7:	e8 e4 03 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f011fdcc:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011fdcf:	e8 6a d0 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f011fdd4:	29 c3                	sub    %eax,%ebx
f011fdd6:	89 d8                	mov    %ebx,%eax
f011fdd8:	3d 00 02 00 00       	cmp    $0x200,%eax
f011fddd:	74 17                	je     f011fdf6 <test_kfree+0x193>
f011fddf:	83 ec 04             	sub    $0x4,%esp
f011fde2:	68 b4 9f 13 f0       	push   $0xf0139fb4
f011fde7:	68 d9 04 00 00       	push   $0x4d9
f011fdec:	68 32 9f 13 f0       	push   $0xf0139f32
f011fdf1:	e8 ba 03 fe ff       	call   f01001b0 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f011fdf6:	c7 85 68 fe ff ff ff 	movl   $0x1ffbff,-0x198(%ebp)
f011fdfd:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011fe00:	e8 39 d0 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f011fe05:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011fe08:	e8 77 48 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011fe0d:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f011fe10:	83 ec 0c             	sub    $0xc,%esp
f011fe13:	68 00 fc 1f 00       	push   $0x1ffc00
f011fe18:	e8 36 84 fe ff       	call   f0108253 <kmalloc>
f011fe1d:	83 c4 10             	add    $0x10,%esp
f011fe20:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011fe26:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f011fe2c:	89 c1                	mov    %eax,%ecx
f011fe2e:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f011fe35:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011fe3a:	0f b6 d0             	movzbl %al,%edx
f011fe3d:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011fe40:	01 d0                	add    %edx,%eax
f011fe42:	48                   	dec    %eax
f011fe43:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f011fe46:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011fe49:	ba 00 00 00 00       	mov    $0x0,%edx
f011fe4e:	f7 75 b8             	divl   -0x48(%ebp)
f011fe51:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011fe54:	29 d0                	sub    %edx,%eax
f011fe56:	89 c3                	mov    %eax,%ebx
f011fe58:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f011fe5f:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011fe64:	0f b6 c0             	movzbl %al,%eax
f011fe67:	c1 e0 04             	shl    $0x4,%eax
f011fe6a:	89 c2                	mov    %eax,%edx
f011fe6c:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011fe6f:	01 d0                	add    %edx,%eax
f011fe71:	48                   	dec    %eax
f011fe72:	89 45 ac             	mov    %eax,-0x54(%ebp)
f011fe75:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011fe78:	ba 00 00 00 00       	mov    $0x0,%edx
f011fe7d:	f7 75 b0             	divl   -0x50(%ebp)
f011fe80:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011fe83:	29 d0                	sub    %edx,%eax
f011fe85:	01 d8                	add    %ebx,%eax
f011fe87:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011fe8c:	39 c1                	cmp    %eax,%ecx
f011fe8e:	74 17                	je     f011fea7 <test_kfree+0x244>
f011fe90:	83 ec 04             	sub    $0x4,%esp
f011fe93:	68 18 a0 13 f0       	push   $0xf013a018
f011fe98:	68 e0 04 00 00       	push   $0x4e0
f011fe9d:	68 32 9f 13 f0       	push   $0xf0139f32
f011fea2:	e8 09 03 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fea7:	e8 d8 47 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011feac:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011feaf:	74 17                	je     f011fec8 <test_kfree+0x265>
f011feb1:	83 ec 04             	sub    $0x4,%esp
f011feb4:	68 4c 9f 13 f0       	push   $0xf0139f4c
f011feb9:	68 e1 04 00 00       	push   $0x4e1
f011febe:	68 32 9f 13 f0       	push   $0xf0139f32
f011fec3:	e8 e8 02 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f011fec8:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011fecb:	e8 6e cf fe ff       	call   f010ce3e <sys_calculate_free_frames>
f011fed0:	29 c3                	sub    %eax,%ebx
f011fed2:	89 d8                	mov    %ebx,%eax
f011fed4:	3d 00 02 00 00       	cmp    $0x200,%eax
f011fed9:	74 17                	je     f011fef2 <test_kfree+0x28f>
f011fedb:	83 ec 04             	sub    $0x4,%esp
f011fede:	68 b4 9f 13 f0       	push   $0xf0139fb4
f011fee3:	68 e2 04 00 00       	push   $0x4e2
f011fee8:	68 32 9f 13 f0       	push   $0xf0139f32
f011feed:	e8 be 02 fe ff       	call   f01001b0 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f011fef2:	c7 85 6c fe ff ff ff 	movl   $0x1ffbff,-0x194(%ebp)
f011fef9:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011fefc:	e8 3d cf fe ff       	call   f010ce3e <sys_calculate_free_frames>
f011ff01:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ff04:	e8 7b 47 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011ff09:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f011ff0c:	83 ec 0c             	sub    $0xc,%esp
f011ff0f:	68 00 08 00 00       	push   $0x800
f011ff14:	e8 3a 83 fe ff       	call   f0108253 <kmalloc>
f011ff19:	83 c4 10             	add    $0x10,%esp
f011ff1c:	89 85 d0 fd ff ff    	mov    %eax,-0x230(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011ff22:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f011ff28:	89 c1                	mov    %eax,%ecx
f011ff2a:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f011ff31:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011ff36:	0f b6 d0             	movzbl %al,%edx
f011ff39:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011ff3c:	01 d0                	add    %edx,%eax
f011ff3e:	48                   	dec    %eax
f011ff3f:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f011ff42:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011ff45:	ba 00 00 00 00       	mov    $0x0,%edx
f011ff4a:	f7 75 a8             	divl   -0x58(%ebp)
f011ff4d:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011ff50:	29 d0                	sub    %edx,%eax
f011ff52:	89 c3                	mov    %eax,%ebx
f011ff54:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f011ff5b:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f011ff60:	0f b6 c0             	movzbl %al,%eax
f011ff63:	c1 e0 04             	shl    $0x4,%eax
f011ff66:	89 c2                	mov    %eax,%edx
f011ff68:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011ff6b:	01 d0                	add    %edx,%eax
f011ff6d:	48                   	dec    %eax
f011ff6e:	89 45 9c             	mov    %eax,-0x64(%ebp)
f011ff71:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011ff74:	ba 00 00 00 00       	mov    $0x0,%edx
f011ff79:	f7 75 a0             	divl   -0x60(%ebp)
f011ff7c:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011ff7f:	29 d0                	sub    %edx,%eax
f011ff81:	01 d8                	add    %ebx,%eax
f011ff83:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011ff88:	39 c1                	cmp    %eax,%ecx
f011ff8a:	74 17                	je     f011ffa3 <test_kfree+0x340>
f011ff8c:	83 ec 04             	sub    $0x4,%esp
f011ff8f:	68 18 a0 13 f0       	push   $0xf013a018
f011ff94:	68 e9 04 00 00       	push   $0x4e9
f011ff99:	68 32 9f 13 f0       	push   $0xf0139f32
f011ff9e:	e8 0d 02 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ffa3:	e8 dc 46 fe ff       	call   f0104684 <pf_calculate_free_frames>
f011ffa8:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011ffab:	74 17                	je     f011ffc4 <test_kfree+0x361>
f011ffad:	83 ec 04             	sub    $0x4,%esp
f011ffb0:	68 4c 9f 13 f0       	push   $0xf0139f4c
f011ffb5:	68 ea 04 00 00       	push   $0x4ea
f011ffba:	68 32 9f 13 f0       	push   $0xf0139f32
f011ffbf:	e8 ec 01 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f011ffc4:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011ffc7:	e8 72 ce fe ff       	call   f010ce3e <sys_calculate_free_frames>
f011ffcc:	29 c3                	sub    %eax,%ebx
f011ffce:	89 d8                	mov    %ebx,%eax
f011ffd0:	83 f8 01             	cmp    $0x1,%eax
f011ffd3:	74 17                	je     f011ffec <test_kfree+0x389>
f011ffd5:	83 ec 04             	sub    $0x4,%esp
f011ffd8:	68 b4 9f 13 f0       	push   $0xf0139fb4
f011ffdd:	68 eb 04 00 00       	push   $0x4eb
f011ffe2:	68 32 9f 13 f0       	push   $0xf0139f32
f011ffe7:	e8 c4 01 fe ff       	call   f01001b0 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f011ffec:	c7 85 70 fe ff ff ff 	movl   $0x7ff,-0x190(%ebp)
f011fff3:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f011fff6:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f011fffc:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f011ffff:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120006:	eb 0e                	jmp    f0120016 <test_kfree+0x3b3>
		{
			ptr[i] = 2 ;
f0120008:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012000b:	8b 45 98             	mov    -0x68(%ebp),%eax
f012000e:	01 d0                	add    %edx,%eax
f0120010:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0120013:	ff 45 f4             	incl   -0xc(%ebp)
f0120016:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012001c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012001f:	7f e7                	jg     f0120008 <test_kfree+0x3a5>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0120021:	e8 18 ce fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0120026:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120029:	e8 56 46 fe ff       	call   f0104684 <pf_calculate_free_frames>
f012002e:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0120031:	83 ec 0c             	sub    $0xc,%esp
f0120034:	68 00 08 00 00       	push   $0x800
f0120039:	e8 15 82 fe ff       	call   f0108253 <kmalloc>
f012003e:	83 c4 10             	add    $0x10,%esp
f0120041:	89 85 d4 fd ff ff    	mov    %eax,-0x22c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120047:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f012004d:	89 c1                	mov    %eax,%ecx
f012004f:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f0120056:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f012005b:	0f b6 d0             	movzbl %al,%edx
f012005e:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0120061:	01 d0                	add    %edx,%eax
f0120063:	48                   	dec    %eax
f0120064:	89 45 90             	mov    %eax,-0x70(%ebp)
f0120067:	8b 45 90             	mov    -0x70(%ebp),%eax
f012006a:	ba 00 00 00 00       	mov    $0x0,%edx
f012006f:	f7 75 94             	divl   -0x6c(%ebp)
f0120072:	8b 45 90             	mov    -0x70(%ebp),%eax
f0120075:	29 d0                	sub    %edx,%eax
f0120077:	89 c3                	mov    %eax,%ebx
f0120079:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f0120080:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0120085:	0f b6 c0             	movzbl %al,%eax
f0120088:	c1 e0 04             	shl    $0x4,%eax
f012008b:	89 c2                	mov    %eax,%edx
f012008d:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0120090:	01 d0                	add    %edx,%eax
f0120092:	48                   	dec    %eax
f0120093:	89 45 88             	mov    %eax,-0x78(%ebp)
f0120096:	8b 45 88             	mov    -0x78(%ebp),%eax
f0120099:	ba 00 00 00 00       	mov    $0x0,%edx
f012009e:	f7 75 8c             	divl   -0x74(%ebp)
f01200a1:	8b 45 88             	mov    -0x78(%ebp),%eax
f01200a4:	29 d0                	sub    %edx,%eax
f01200a6:	01 d8                	add    %ebx,%eax
f01200a8:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f01200ad:	39 c1                	cmp    %eax,%ecx
f01200af:	74 17                	je     f01200c8 <test_kfree+0x465>
f01200b1:	83 ec 04             	sub    $0x4,%esp
f01200b4:	68 18 a0 13 f0       	push   $0xf013a018
f01200b9:	68 f7 04 00 00       	push   $0x4f7
f01200be:	68 32 9f 13 f0       	push   $0xf0139f32
f01200c3:	e8 e8 00 fe ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01200c8:	e8 b7 45 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01200cd:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01200d0:	74 17                	je     f01200e9 <test_kfree+0x486>
f01200d2:	83 ec 04             	sub    $0x4,%esp
f01200d5:	68 4c 9f 13 f0       	push   $0xf0139f4c
f01200da:	68 f8 04 00 00       	push   $0x4f8
f01200df:	68 32 9f 13 f0       	push   $0xf0139f32
f01200e4:	e8 c7 00 fe ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01200e9:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01200ec:	e8 4d cd fe ff       	call   f010ce3e <sys_calculate_free_frames>
f01200f1:	29 c3                	sub    %eax,%ebx
f01200f3:	89 d8                	mov    %ebx,%eax
f01200f5:	83 f8 01             	cmp    $0x1,%eax
f01200f8:	74 17                	je     f0120111 <test_kfree+0x4ae>
f01200fa:	83 ec 04             	sub    $0x4,%esp
f01200fd:	68 b4 9f 13 f0       	push   $0xf0139fb4
f0120102:	68 f9 04 00 00       	push   $0x4f9
f0120107:	68 32 9f 13 f0       	push   $0xf0139f32
f012010c:	e8 9f 00 fe ff       	call   f01001b0 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f0120111:	c7 85 74 fe ff ff ff 	movl   $0x7ff,-0x18c(%ebp)
f0120118:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f012011b:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0120121:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0120124:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012012b:	eb 0e                	jmp    f012013b <test_kfree+0x4d8>
		{
			ptr[i] = 3 ;
f012012d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0120130:	8b 45 98             	mov    -0x68(%ebp),%eax
f0120133:	01 d0                	add    %edx,%eax
f0120135:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0120138:	ff 45 f4             	incl   -0xc(%ebp)
f012013b:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0120141:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120144:	7f e7                	jg     f012012d <test_kfree+0x4ca>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0120146:	e8 f3 cc fe ff       	call   f010ce3e <sys_calculate_free_frames>
f012014b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012014e:	e8 31 45 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0120153:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0120156:	83 ec 0c             	sub    $0xc,%esp
f0120159:	68 00 1c 00 00       	push   $0x1c00
f012015e:	e8 f0 80 fe ff       	call   f0108253 <kmalloc>
f0120163:	83 c4 10             	add    $0x10,%esp
f0120166:	89 85 d8 fd ff ff    	mov    %eax,-0x228(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012016c:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0120172:	89 c1                	mov    %eax,%ecx
f0120174:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f012017b:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0120180:	0f b6 d0             	movzbl %al,%edx
f0120183:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0120186:	01 d0                	add    %edx,%eax
f0120188:	48                   	dec    %eax
f0120189:	89 45 80             	mov    %eax,-0x80(%ebp)
f012018c:	8b 45 80             	mov    -0x80(%ebp),%eax
f012018f:	ba 00 00 00 00       	mov    $0x0,%edx
f0120194:	f7 75 84             	divl   -0x7c(%ebp)
f0120197:	8b 45 80             	mov    -0x80(%ebp),%eax
f012019a:	29 d0                	sub    %edx,%eax
f012019c:	89 c3                	mov    %eax,%ebx
f012019e:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f01201a5:	10 00 00 
f01201a8:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f01201ad:	0f b6 c0             	movzbl %al,%eax
f01201b0:	c1 e0 04             	shl    $0x4,%eax
f01201b3:	89 c2                	mov    %eax,%edx
f01201b5:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01201bb:	01 d0                	add    %edx,%eax
f01201bd:	48                   	dec    %eax
f01201be:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f01201c4:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01201ca:	ba 00 00 00 00       	mov    $0x0,%edx
f01201cf:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f01201d5:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01201db:	29 d0                	sub    %edx,%eax
f01201dd:	01 d8                	add    %ebx,%eax
f01201df:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f01201e4:	39 c1                	cmp    %eax,%ecx
f01201e6:	74 17                	je     f01201ff <test_kfree+0x59c>
f01201e8:	83 ec 04             	sub    $0x4,%esp
f01201eb:	68 18 a0 13 f0       	push   $0xf013a018
f01201f0:	68 05 05 00 00       	push   $0x505
f01201f5:	68 32 9f 13 f0       	push   $0xf0139f32
f01201fa:	e8 b1 ff fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01201ff:	e8 80 44 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0120204:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120207:	74 17                	je     f0120220 <test_kfree+0x5bd>
f0120209:	83 ec 04             	sub    $0x4,%esp
f012020c:	68 4c 9f 13 f0       	push   $0xf0139f4c
f0120211:	68 06 05 00 00       	push   $0x506
f0120216:	68 32 9f 13 f0       	push   $0xf0139f32
f012021b:	e8 90 ff fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120220:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120223:	e8 16 cc fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0120228:	29 c3                	sub    %eax,%ebx
f012022a:	89 d8                	mov    %ebx,%eax
f012022c:	83 f8 02             	cmp    $0x2,%eax
f012022f:	74 17                	je     f0120248 <test_kfree+0x5e5>
f0120231:	83 ec 04             	sub    $0x4,%esp
f0120234:	68 b4 9f 13 f0       	push   $0xf0139fb4
f0120239:	68 07 05 00 00       	push   $0x507
f012023e:	68 32 9f 13 f0       	push   $0xf0139f32
f0120243:	e8 68 ff fd ff       	call   f01001b0 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f0120248:	c7 85 78 fe ff ff ff 	movl   $0x1bff,-0x188(%ebp)
f012024f:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f0120252:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0120258:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f012025b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120262:	eb 0e                	jmp    f0120272 <test_kfree+0x60f>
		{
			ptr[i] = 4 ;
f0120264:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0120267:	8b 45 98             	mov    -0x68(%ebp),%eax
f012026a:	01 d0                	add    %edx,%eax
f012026c:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f012026f:	ff 45 f4             	incl   -0xc(%ebp)
f0120272:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0120278:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012027b:	7f e7                	jg     f0120264 <test_kfree+0x601>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f012027d:	e8 bc cb fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0120282:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120285:	e8 fa 43 fe ff       	call   f0104684 <pf_calculate_free_frames>
f012028a:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f012028d:	83 ec 0c             	sub    $0xc,%esp
f0120290:	68 00 fc 2f 00       	push   $0x2ffc00
f0120295:	e8 b9 7f fe ff       	call   f0108253 <kmalloc>
f012029a:	83 c4 10             	add    $0x10,%esp
f012029d:	89 85 dc fd ff ff    	mov    %eax,-0x224(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01202a3:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f01202a9:	89 c1                	mov    %eax,%ecx
f01202ab:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f01202b2:	10 00 00 
f01202b5:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f01202ba:	0f b6 d0             	movzbl %al,%edx
f01202bd:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01202c3:	01 d0                	add    %edx,%eax
f01202c5:	48                   	dec    %eax
f01202c6:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f01202cc:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01202d2:	ba 00 00 00 00       	mov    $0x0,%edx
f01202d7:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f01202dd:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01202e3:	29 d0                	sub    %edx,%eax
f01202e5:	89 c3                	mov    %eax,%ebx
f01202e7:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f01202ee:	10 00 00 
f01202f1:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f01202f6:	0f b6 c0             	movzbl %al,%eax
f01202f9:	c1 e0 04             	shl    $0x4,%eax
f01202fc:	89 c2                	mov    %eax,%edx
f01202fe:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0120304:	01 d0                	add    %edx,%eax
f0120306:	48                   	dec    %eax
f0120307:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f012030d:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0120313:	ba 00 00 00 00       	mov    $0x0,%edx
f0120318:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f012031e:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0120324:	29 d0                	sub    %edx,%eax
f0120326:	01 d8                	add    %ebx,%eax
f0120328:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f012032d:	39 c1                	cmp    %eax,%ecx
f012032f:	74 17                	je     f0120348 <test_kfree+0x6e5>
f0120331:	83 ec 04             	sub    $0x4,%esp
f0120334:	68 18 a0 13 f0       	push   $0xf013a018
f0120339:	68 13 05 00 00       	push   $0x513
f012033e:	68 32 9f 13 f0       	push   $0xf0139f32
f0120343:	e8 68 fe fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120348:	e8 37 43 fe ff       	call   f0104684 <pf_calculate_free_frames>
f012034d:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120350:	74 17                	je     f0120369 <test_kfree+0x706>
f0120352:	83 ec 04             	sub    $0x4,%esp
f0120355:	68 4c 9f 13 f0       	push   $0xf0139f4c
f012035a:	68 14 05 00 00       	push   $0x514
f012035f:	68 32 9f 13 f0       	push   $0xf0139f32
f0120364:	e8 47 fe fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120369:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012036c:	e8 cd ca fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0120371:	29 c3                	sub    %eax,%ebx
f0120373:	89 d8                	mov    %ebx,%eax
f0120375:	3d 00 03 00 00       	cmp    $0x300,%eax
f012037a:	74 17                	je     f0120393 <test_kfree+0x730>
f012037c:	83 ec 04             	sub    $0x4,%esp
f012037f:	68 b4 9f 13 f0       	push   $0xf0139fb4
f0120384:	68 15 05 00 00       	push   $0x515
f0120389:	68 32 9f 13 f0       	push   $0xf0139f32
f012038e:	e8 1d fe fd ff       	call   f01001b0 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f0120393:	c7 85 7c fe ff ff ff 	movl   $0x2ffbff,-0x184(%ebp)
f012039a:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f012039d:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f01203a3:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f01203a6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01203ad:	eb 0e                	jmp    f01203bd <test_kfree+0x75a>
		{
			ptr[i] = 5 ;
f01203af:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01203b2:	8b 45 98             	mov    -0x68(%ebp),%eax
f01203b5:	01 d0                	add    %edx,%eax
f01203b7:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f01203ba:	ff 45 f4             	incl   -0xc(%ebp)
f01203bd:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f01203c3:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01203c6:	7f e7                	jg     f01203af <test_kfree+0x74c>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f01203c8:	e8 71 ca fe ff       	call   f010ce3e <sys_calculate_free_frames>
f01203cd:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01203d0:	e8 af 42 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01203d5:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f01203d8:	83 ec 0c             	sub    $0xc,%esp
f01203db:	68 00 fc 5f 00       	push   $0x5ffc00
f01203e0:	e8 6e 7e fe ff       	call   f0108253 <kmalloc>
f01203e5:	83 c4 10             	add    $0x10,%esp
f01203e8:	89 85 e0 fd ff ff    	mov    %eax,-0x220(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01203ee:	8b 85 e0 fd ff ff    	mov    -0x220(%ebp),%eax
f01203f4:	89 c1                	mov    %eax,%ecx
f01203f6:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f01203fd:	10 00 00 
f0120400:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0120405:	0f b6 d0             	movzbl %al,%edx
f0120408:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012040e:	01 d0                	add    %edx,%eax
f0120410:	48                   	dec    %eax
f0120411:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f0120417:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012041d:	ba 00 00 00 00       	mov    $0x0,%edx
f0120422:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f0120428:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012042e:	29 d0                	sub    %edx,%eax
f0120430:	89 c3                	mov    %eax,%ebx
f0120432:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f0120439:	10 00 00 
f012043c:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0120441:	0f b6 c0             	movzbl %al,%eax
f0120444:	c1 e0 04             	shl    $0x4,%eax
f0120447:	89 c2                	mov    %eax,%edx
f0120449:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012044f:	01 d0                	add    %edx,%eax
f0120451:	48                   	dec    %eax
f0120452:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f0120458:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012045e:	ba 00 00 00 00       	mov    $0x0,%edx
f0120463:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f0120469:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012046f:	29 d0                	sub    %edx,%eax
f0120471:	01 d8                	add    %ebx,%eax
f0120473:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0120478:	39 c1                	cmp    %eax,%ecx
f012047a:	74 17                	je     f0120493 <test_kfree+0x830>
f012047c:	83 ec 04             	sub    $0x4,%esp
f012047f:	68 18 a0 13 f0       	push   $0xf013a018
f0120484:	68 21 05 00 00       	push   $0x521
f0120489:	68 32 9f 13 f0       	push   $0xf0139f32
f012048e:	e8 1d fd fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120493:	e8 ec 41 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0120498:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012049b:	74 17                	je     f01204b4 <test_kfree+0x851>
f012049d:	83 ec 04             	sub    $0x4,%esp
f01204a0:	68 4c 9f 13 f0       	push   $0xf0139f4c
f01204a5:	68 22 05 00 00       	push   $0x522
f01204aa:	68 32 9f 13 f0       	push   $0xf0139f32
f01204af:	e8 fc fc fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f01204b4:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01204b7:	e8 82 c9 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f01204bc:	29 c3                	sub    %eax,%ebx
f01204be:	89 d8                	mov    %ebx,%eax
f01204c0:	3d 00 06 00 00       	cmp    $0x600,%eax
f01204c5:	74 17                	je     f01204de <test_kfree+0x87b>
f01204c7:	83 ec 04             	sub    $0x4,%esp
f01204ca:	68 b4 9f 13 f0       	push   $0xf0139fb4
f01204cf:	68 23 05 00 00       	push   $0x523
f01204d4:	68 32 9f 13 f0       	push   $0xf0139f32
f01204d9:	e8 d2 fc fd ff       	call   f01001b0 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f01204de:	c7 85 80 fe ff ff ff 	movl   $0x5ffbff,-0x180(%ebp)
f01204e5:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f01204e8:	e8 51 c9 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f01204ed:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01204f0:	e8 8f 41 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01204f5:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f01204f8:	83 ec 0c             	sub    $0xc,%esp
f01204fb:	68 00 38 00 00       	push   $0x3800
f0120500:	e8 4e 7d fe ff       	call   f0108253 <kmalloc>
f0120505:	83 c4 10             	add    $0x10,%esp
f0120508:	89 85 e4 fd ff ff    	mov    %eax,-0x21c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012050e:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0120514:	89 c1                	mov    %eax,%ecx
f0120516:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f012051d:	10 00 00 
f0120520:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0120525:	0f b6 d0             	movzbl %al,%edx
f0120528:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012052e:	01 d0                	add    %edx,%eax
f0120530:	48                   	dec    %eax
f0120531:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f0120537:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012053d:	ba 00 00 00 00       	mov    $0x0,%edx
f0120542:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f0120548:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012054e:	29 d0                	sub    %edx,%eax
f0120550:	89 c3                	mov    %eax,%ebx
f0120552:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f0120559:	10 00 00 
f012055c:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0120561:	0f b6 c0             	movzbl %al,%eax
f0120564:	c1 e0 04             	shl    $0x4,%eax
f0120567:	89 c2                	mov    %eax,%edx
f0120569:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012056f:	01 d0                	add    %edx,%eax
f0120571:	48                   	dec    %eax
f0120572:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f0120578:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012057e:	ba 00 00 00 00       	mov    $0x0,%edx
f0120583:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f0120589:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012058f:	29 d0                	sub    %edx,%eax
f0120591:	01 d8                	add    %ebx,%eax
f0120593:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0120598:	39 c1                	cmp    %eax,%ecx
f012059a:	74 17                	je     f01205b3 <test_kfree+0x950>
f012059c:	83 ec 04             	sub    $0x4,%esp
f012059f:	68 18 a0 13 f0       	push   $0xf013a018
f01205a4:	68 2a 05 00 00       	push   $0x52a
f01205a9:	68 32 9f 13 f0       	push   $0xf0139f32
f01205ae:	e8 fd fb fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01205b3:	e8 cc 40 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01205b8:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01205bb:	74 17                	je     f01205d4 <test_kfree+0x971>
f01205bd:	83 ec 04             	sub    $0x4,%esp
f01205c0:	68 4c 9f 13 f0       	push   $0xf0139f4c
f01205c5:	68 2b 05 00 00       	push   $0x52b
f01205ca:	68 32 9f 13 f0       	push   $0xf0139f32
f01205cf:	e8 dc fb fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f01205d4:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01205d7:	e8 62 c8 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f01205dc:	29 c3                	sub    %eax,%ebx
f01205de:	89 d8                	mov    %ebx,%eax
f01205e0:	83 f8 04             	cmp    $0x4,%eax
f01205e3:	74 17                	je     f01205fc <test_kfree+0x999>
f01205e5:	83 ec 04             	sub    $0x4,%esp
f01205e8:	68 b4 9f 13 f0       	push   $0xf0139fb4
f01205ed:	68 2c 05 00 00       	push   $0x52c
f01205f2:	68 32 9f 13 f0       	push   $0xf0139f32
f01205f7:	e8 b4 fb fd ff       	call   f01001b0 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f01205fc:	c7 85 84 fe ff ff ff 	movl   $0x37ff,-0x17c(%ebp)
f0120603:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f0120606:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f012060c:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f012060f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120616:	eb 0e                	jmp    f0120626 <test_kfree+0x9c3>
		{
			ptr[i] = 7 ;
f0120618:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012061b:	8b 45 98             	mov    -0x68(%ebp),%eax
f012061e:	01 d0                	add    %edx,%eax
f0120620:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0120623:	ff 45 f4             	incl   -0xc(%ebp)
f0120626:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f012062c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012062f:	7f e7                	jg     f0120618 <test_kfree+0x9b5>
	}

	//kfree some of the allocated spaces [15%]
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0120631:	e8 08 c8 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0120636:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f012063c:	e8 43 40 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0120641:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[0]);
f0120647:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f012064d:	83 ec 0c             	sub    $0xc,%esp
f0120650:	50                   	push   %eax
f0120651:	e8 88 7d fe ff       	call   f01083de <kfree>
f0120656:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120659:	e8 26 40 fe ff       	call   f0104684 <pf_calculate_free_frames>
f012065e:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f0120664:	74 17                	je     f012067d <test_kfree+0xa1a>
f0120666:	83 ec 04             	sub    $0x4,%esp
f0120669:	68 4c 9f 13 f0       	push   $0xf0139f4c
f012066e:	68 3b 05 00 00       	push   $0x53b
f0120673:	68 32 9f 13 f0       	push   $0xf0139f32
f0120678:	e8 33 fb fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f012067d:	e8 bc c7 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0120682:	89 c2                	mov    %eax,%edx
f0120684:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012068a:	29 c2                	sub    %eax,%edx
f012068c:	89 d0                	mov    %edx,%eax
f012068e:	3d 00 02 00 00       	cmp    $0x200,%eax
f0120693:	74 17                	je     f01206ac <test_kfree+0xa49>
f0120695:	83 ec 04             	sub    $0x4,%esp
f0120698:	68 bc a6 13 f0       	push   $0xf013a6bc
f012069d:	68 3c 05 00 00       	push   $0x53c
f01206a2:	68 32 9f 13 f0       	push   $0xf0139f32
f01206a7:	e8 04 fb fd ff       	call   f01001b0 <_panic>

		//kfree 1st 2 KB
		freeFrames = sys_calculate_free_frames() ;
f01206ac:	e8 8d c7 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f01206b1:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01206b7:	e8 c8 3f fe ff       	call   f0104684 <pf_calculate_free_frames>
f01206bc:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[2]);
f01206c2:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f01206c8:	83 ec 0c             	sub    $0xc,%esp
f01206cb:	50                   	push   %eax
f01206cc:	e8 0d 7d fe ff       	call   f01083de <kfree>
f01206d1:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01206d4:	e8 ab 3f fe ff       	call   f0104684 <pf_calculate_free_frames>
f01206d9:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f01206df:	74 17                	je     f01206f8 <test_kfree+0xa95>
f01206e1:	83 ec 04             	sub    $0x4,%esp
f01206e4:	68 4c 9f 13 f0       	push   $0xf0139f4c
f01206e9:	68 42 05 00 00       	push   $0x542
f01206ee:	68 32 9f 13 f0       	push   $0xf0139f32
f01206f3:	e8 b8 fa fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1 ) panic("Wrong kfree: pages in memory are not freed correctly");
f01206f8:	e8 41 c7 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f01206fd:	89 c2                	mov    %eax,%edx
f01206ff:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0120705:	29 c2                	sub    %eax,%edx
f0120707:	89 d0                	mov    %edx,%eax
f0120709:	83 f8 01             	cmp    $0x1,%eax
f012070c:	74 17                	je     f0120725 <test_kfree+0xac2>
f012070e:	83 ec 04             	sub    $0x4,%esp
f0120711:	68 bc a6 13 f0       	push   $0xf013a6bc
f0120716:	68 43 05 00 00       	push   $0x543
f012071b:	68 32 9f 13 f0       	push   $0xf0139f32
f0120720:	e8 8b fa fd ff       	call   f01001b0 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0120725:	e8 14 c7 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f012072a:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120730:	e8 4f 3f fe ff       	call   f0104684 <pf_calculate_free_frames>
f0120735:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[1]);
f012073b:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f0120741:	83 ec 0c             	sub    $0xc,%esp
f0120744:	50                   	push   %eax
f0120745:	e8 94 7c fe ff       	call   f01083de <kfree>
f012074a:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012074d:	e8 32 3f fe ff       	call   f0104684 <pf_calculate_free_frames>
f0120752:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f0120758:	74 17                	je     f0120771 <test_kfree+0xb0e>
f012075a:	83 ec 04             	sub    $0x4,%esp
f012075d:	68 4c 9f 13 f0       	push   $0xf0139f4c
f0120762:	68 49 05 00 00       	push   $0x549
f0120767:	68 32 9f 13 f0       	push   $0xf0139f32
f012076c:	e8 3f fa fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f0120771:	e8 c8 c6 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0120776:	89 c2                	mov    %eax,%edx
f0120778:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012077e:	29 c2                	sub    %eax,%edx
f0120780:	89 d0                	mov    %edx,%eax
f0120782:	3d 00 02 00 00       	cmp    $0x200,%eax
f0120787:	74 17                	je     f01207a0 <test_kfree+0xb3d>
f0120789:	83 ec 04             	sub    $0x4,%esp
f012078c:	68 bc a6 13 f0       	push   $0xf013a6bc
f0120791:	68 4a 05 00 00       	push   $0x54a
f0120796:	68 32 9f 13 f0       	push   $0xf0139f32
f012079b:	e8 10 fa fd ff       	call   f01001b0 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f01207a0:	e8 99 c6 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f01207a5:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01207ab:	e8 d4 3e fe ff       	call   f0104684 <pf_calculate_free_frames>
f01207b0:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[6]);
f01207b6:	8b 85 e0 fd ff ff    	mov    -0x220(%ebp),%eax
f01207bc:	83 ec 0c             	sub    $0xc,%esp
f01207bf:	50                   	push   %eax
f01207c0:	e8 19 7c fe ff       	call   f01083de <kfree>
f01207c5:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01207c8:	e8 b7 3e fe ff       	call   f0104684 <pf_calculate_free_frames>
f01207cd:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f01207d3:	74 17                	je     f01207ec <test_kfree+0xb89>
f01207d5:	83 ec 04             	sub    $0x4,%esp
f01207d8:	68 4c 9f 13 f0       	push   $0xf0139f4c
f01207dd:	68 50 05 00 00       	push   $0x550
f01207e2:	68 32 9f 13 f0       	push   $0xf0139f32
f01207e7:	e8 c4 f9 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f01207ec:	e8 4d c6 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f01207f1:	89 c2                	mov    %eax,%edx
f01207f3:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01207f9:	29 c2                	sub    %eax,%edx
f01207fb:	89 d0                	mov    %edx,%eax
f01207fd:	3d 00 06 00 00       	cmp    $0x600,%eax
f0120802:	74 17                	je     f012081b <test_kfree+0xbb8>
f0120804:	83 ec 04             	sub    $0x4,%esp
f0120807:	68 bc a6 13 f0       	push   $0xf013a6bc
f012080c:	68 51 05 00 00       	push   $0x551
f0120811:	68 32 9f 13 f0       	push   $0xf0139f32
f0120816:	e8 95 f9 fd ff       	call   f01001b0 <_panic>
	}

	cprintf("\nkfree: current evaluation = 15%");
f012081b:	83 ec 0c             	sub    $0xc,%esp
f012081e:	68 f4 a6 13 f0       	push   $0xf013a6f4
f0120823:	e8 09 06 fe ff       	call   f0100e31 <cprintf>
f0120828:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
f012082b:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0120831:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0120834:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012083b:	eb 1e                	jmp    f012085b <test_kfree+0xbf8>
		{
			sums[3] += ptr[i] ;
f012083d:	8b 95 24 fe ff ff    	mov    -0x1dc(%ebp),%edx
f0120843:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0120846:	8b 45 98             	mov    -0x68(%ebp),%eax
f0120849:	01 c8                	add    %ecx,%eax
f012084b:	8a 00                	mov    (%eax),%al
f012084d:	0f be c0             	movsbl %al,%eax
f0120850:	01 d0                	add    %edx,%eax
f0120852:	89 85 24 fe ff ff    	mov    %eax,-0x1dc(%ebp)

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0120858:	ff 45 f4             	incl   -0xc(%ebp)
f012085b:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0120861:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120864:	7f d7                	jg     f012083d <test_kfree+0xbda>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f0120866:	8b 95 24 fe ff ff    	mov    -0x1dc(%ebp),%edx
f012086c:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0120872:	89 c1                	mov    %eax,%ecx
f0120874:	01 c9                	add    %ecx,%ecx
f0120876:	01 c8                	add    %ecx,%eax
f0120878:	39 c2                	cmp    %eax,%edx
f012087a:	74 17                	je     f0120893 <test_kfree+0xc30>
f012087c:	83 ec 04             	sub    $0x4,%esp
f012087f:	68 18 a7 13 f0       	push   $0xf013a718
f0120884:	68 5e 05 00 00       	push   $0x55e
f0120889:	68 32 9f 13 f0       	push   $0xf0139f32
f012088e:	e8 1d f9 fd ff       	call   f01001b0 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f0120893:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0120899:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f012089c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01208a3:	eb 1e                	jmp    f01208c3 <test_kfree+0xc60>
		{
			sums[4] += ptr[i] ;
f01208a5:	8b 95 28 fe ff ff    	mov    -0x1d8(%ebp),%edx
f01208ab:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01208ae:	8b 45 98             	mov    -0x68(%ebp),%eax
f01208b1:	01 c8                	add    %ecx,%eax
f01208b3:	8a 00                	mov    (%eax),%al
f01208b5:	0f be c0             	movsbl %al,%eax
f01208b8:	01 d0                	add    %edx,%eax
f01208ba:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f01208c0:	ff 45 f4             	incl   -0xc(%ebp)
f01208c3:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f01208c9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01208cc:	7f d7                	jg     f01208a5 <test_kfree+0xc42>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f01208ce:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f01208d4:	8b 95 78 fe ff ff    	mov    -0x188(%ebp),%edx
f01208da:	c1 e2 02             	shl    $0x2,%edx
f01208dd:	39 d0                	cmp    %edx,%eax
f01208df:	74 17                	je     f01208f8 <test_kfree+0xc95>
f01208e1:	83 ec 04             	sub    $0x4,%esp
f01208e4:	68 18 a7 13 f0       	push   $0xf013a718
f01208e9:	68 66 05 00 00       	push   $0x566
f01208ee:	68 32 9f 13 f0       	push   $0xf0139f32
f01208f3:	e8 b8 f8 fd ff       	call   f01001b0 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f01208f8:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f01208fe:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0120901:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120908:	eb 1e                	jmp    f0120928 <test_kfree+0xcc5>
		{
			sums[5] += ptr[i] ;
f012090a:	8b 95 2c fe ff ff    	mov    -0x1d4(%ebp),%edx
f0120910:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0120913:	8b 45 98             	mov    -0x68(%ebp),%eax
f0120916:	01 c8                	add    %ecx,%eax
f0120918:	8a 00                	mov    (%eax),%al
f012091a:	0f be c0             	movsbl %al,%eax
f012091d:	01 d0                	add    %edx,%eax
f012091f:	89 85 2c fe ff ff    	mov    %eax,-0x1d4(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0120925:	ff 45 f4             	incl   -0xc(%ebp)
f0120928:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f012092e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120931:	7f d7                	jg     f012090a <test_kfree+0xca7>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f0120933:	8b 8d 2c fe ff ff    	mov    -0x1d4(%ebp),%ecx
f0120939:	8b 95 7c fe ff ff    	mov    -0x184(%ebp),%edx
f012093f:	89 d0                	mov    %edx,%eax
f0120941:	c1 e0 02             	shl    $0x2,%eax
f0120944:	01 d0                	add    %edx,%eax
f0120946:	39 c1                	cmp    %eax,%ecx
f0120948:	74 17                	je     f0120961 <test_kfree+0xcfe>
f012094a:	83 ec 04             	sub    $0x4,%esp
f012094d:	68 18 a7 13 f0       	push   $0xf013a718
f0120952:	68 6e 05 00 00       	push   $0x56e
f0120957:	68 32 9f 13 f0       	push   $0xf0139f32
f012095c:	e8 4f f8 fd ff       	call   f01001b0 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f0120961:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0120967:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f012096a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120971:	eb 1e                	jmp    f0120991 <test_kfree+0xd2e>
		{
			sums[7] += ptr[i] ;
f0120973:	8b 95 34 fe ff ff    	mov    -0x1cc(%ebp),%edx
f0120979:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012097c:	8b 45 98             	mov    -0x68(%ebp),%eax
f012097f:	01 c8                	add    %ecx,%eax
f0120981:	8a 00                	mov    (%eax),%al
f0120983:	0f be c0             	movsbl %al,%eax
f0120986:	01 d0                	add    %edx,%eax
f0120988:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f012098e:	ff 45 f4             	incl   -0xc(%ebp)
f0120991:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0120997:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012099a:	7f d7                	jg     f0120973 <test_kfree+0xd10>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f012099c:	8b 8d 34 fe ff ff    	mov    -0x1cc(%ebp),%ecx
f01209a2:	8b 95 84 fe ff ff    	mov    -0x17c(%ebp),%edx
f01209a8:	89 d0                	mov    %edx,%eax
f01209aa:	01 c0                	add    %eax,%eax
f01209ac:	01 d0                	add    %edx,%eax
f01209ae:	01 c0                	add    %eax,%eax
f01209b0:	01 d0                	add    %edx,%eax
f01209b2:	39 c1                	cmp    %eax,%ecx
f01209b4:	74 17                	je     f01209cd <test_kfree+0xd6a>
f01209b6:	83 ec 04             	sub    $0x4,%esp
f01209b9:	68 18 a7 13 f0       	push   $0xf013a718
f01209be:	68 76 05 00 00       	push   $0x576
f01209c3:	68 32 9f 13 f0       	push   $0xf0139f32
f01209c8:	e8 e3 f7 fd ff       	call   f01001b0 <_panic>
	}
	cprintf("\b\b\b30%");
f01209cd:	83 ec 0c             	sub    $0xc,%esp
f01209d0:	68 4b a7 13 f0       	push   $0xf013a74b
f01209d5:	e8 57 04 fe ff       	call   f0100e31 <cprintf>
f01209da:	83 c4 10             	add    $0x10,%esp

	//Allocate after kfree [15%]
	{
		//20 KB
		freeFrames = sys_calculate_free_frames() ;
f01209dd:	e8 5c c4 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f01209e2:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01209e5:	e8 9a 3c fe ff       	call   f0104684 <pf_calculate_free_frames>
f01209ea:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[8] = kmalloc(20*kilo);
f01209ed:	83 ec 0c             	sub    $0xc,%esp
f01209f0:	68 00 50 00 00       	push   $0x5000
f01209f5:	e8 59 78 fe ff       	call   f0108253 <kmalloc>
f01209fa:	83 c4 10             	add    $0x10,%esp
f01209fd:	89 85 e8 fd ff ff    	mov    %eax,-0x218(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120a03:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0120a09:	89 c1                	mov    %eax,%ecx
f0120a0b:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f0120a12:	10 00 00 
f0120a15:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0120a1a:	0f b6 d0             	movzbl %al,%edx
f0120a1d:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0120a23:	01 d0                	add    %edx,%eax
f0120a25:	48                   	dec    %eax
f0120a26:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f0120a2c:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0120a32:	ba 00 00 00 00       	mov    $0x0,%edx
f0120a37:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f0120a3d:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0120a43:	29 d0                	sub    %edx,%eax
f0120a45:	89 c3                	mov    %eax,%ebx
f0120a47:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f0120a4e:	10 00 00 
f0120a51:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0120a56:	0f b6 c0             	movzbl %al,%eax
f0120a59:	c1 e0 04             	shl    $0x4,%eax
f0120a5c:	89 c2                	mov    %eax,%edx
f0120a5e:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0120a64:	01 d0                	add    %edx,%eax
f0120a66:	48                   	dec    %eax
f0120a67:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f0120a6d:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0120a73:	ba 00 00 00 00       	mov    $0x0,%edx
f0120a78:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f0120a7e:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0120a84:	29 d0                	sub    %edx,%eax
f0120a86:	01 d8                	add    %ebx,%eax
f0120a88:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0120a8d:	39 c1                	cmp    %eax,%ecx
f0120a8f:	74 17                	je     f0120aa8 <test_kfree+0xe45>
f0120a91:	83 ec 04             	sub    $0x4,%esp
f0120a94:	68 18 a0 13 f0       	push   $0xf013a018
f0120a99:	68 80 05 00 00       	push   $0x580
f0120a9e:	68 32 9f 13 f0       	push   $0xf0139f32
f0120aa3:	e8 08 f7 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120aa8:	e8 d7 3b fe ff       	call   f0104684 <pf_calculate_free_frames>
f0120aad:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120ab0:	74 17                	je     f0120ac9 <test_kfree+0xe66>
f0120ab2:	83 ec 04             	sub    $0x4,%esp
f0120ab5:	68 4c 9f 13 f0       	push   $0xf0139f4c
f0120aba:	68 81 05 00 00       	push   $0x581
f0120abf:	68 32 9f 13 f0       	push   $0xf0139f32
f0120ac4:	e8 e7 f6 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120ac9:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120acc:	e8 6d c3 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0120ad1:	29 c3                	sub    %eax,%ebx
f0120ad3:	89 d8                	mov    %ebx,%eax
f0120ad5:	83 f8 05             	cmp    $0x5,%eax
f0120ad8:	74 17                	je     f0120af1 <test_kfree+0xe8e>
f0120ada:	83 ec 04             	sub    $0x4,%esp
f0120add:	68 b4 9f 13 f0       	push   $0xf0139fb4
f0120ae2:	68 82 05 00 00       	push   $0x582
f0120ae7:	68 32 9f 13 f0       	push   $0xf0139f32
f0120aec:	e8 bf f6 fd ff       	call   f01001b0 <_panic>
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
f0120af1:	c7 85 88 fe ff ff ff 	movl   $0x4fff,-0x178(%ebp)
f0120af8:	4f 00 00 
		ptr = (char*)ptr_allocations[8];
f0120afb:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0120b01:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f0120b04:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120b0b:	eb 0e                	jmp    f0120b1b <test_kfree+0xeb8>
		{
			ptr[i] = 8 ;
f0120b0d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0120b10:	8b 45 98             	mov    -0x68(%ebp),%eax
f0120b13:	01 d0                	add    %edx,%eax
f0120b15:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f0120b18:	ff 45 f4             	incl   -0xc(%ebp)
f0120b1b:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0120b21:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120b24:	7f e7                	jg     f0120b0d <test_kfree+0xeaa>
		{
			ptr[i] = 8 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f0120b26:	e8 13 c3 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0120b2b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120b2e:	e8 51 3b fe ff       	call   f0104684 <pf_calculate_free_frames>
f0120b33:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega);
f0120b36:	83 ec 0c             	sub    $0xc,%esp
f0120b39:	68 00 00 10 00       	push   $0x100000
f0120b3e:	e8 10 77 fe ff       	call   f0108253 <kmalloc>
f0120b43:	83 c4 10             	add    $0x10,%esp
f0120b46:	89 85 ec fd ff ff    	mov    %eax,-0x214(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120b4c:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0120b52:	89 c1                	mov    %eax,%ecx
f0120b54:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f0120b5b:	10 00 00 
f0120b5e:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0120b63:	0f b6 d0             	movzbl %al,%edx
f0120b66:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0120b6c:	01 d0                	add    %edx,%eax
f0120b6e:	48                   	dec    %eax
f0120b6f:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f0120b75:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0120b7b:	ba 00 00 00 00       	mov    $0x0,%edx
f0120b80:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f0120b86:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0120b8c:	29 d0                	sub    %edx,%eax
f0120b8e:	89 c3                	mov    %eax,%ebx
f0120b90:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f0120b97:	10 00 00 
f0120b9a:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0120b9f:	0f b6 c0             	movzbl %al,%eax
f0120ba2:	c1 e0 04             	shl    $0x4,%eax
f0120ba5:	89 c2                	mov    %eax,%edx
f0120ba7:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0120bad:	01 d0                	add    %edx,%eax
f0120baf:	48                   	dec    %eax
f0120bb0:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f0120bb6:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0120bbc:	ba 00 00 00 00       	mov    $0x0,%edx
f0120bc1:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f0120bc7:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0120bcd:	29 d0                	sub    %edx,%eax
f0120bcf:	01 d8                	add    %ebx,%eax
f0120bd1:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f0120bd6:	39 c1                	cmp    %eax,%ecx
f0120bd8:	74 17                	je     f0120bf1 <test_kfree+0xf8e>
f0120bda:	83 ec 04             	sub    $0x4,%esp
f0120bdd:	68 18 a0 13 f0       	push   $0xf013a018
f0120be2:	68 8e 05 00 00       	push   $0x58e
f0120be7:	68 32 9f 13 f0       	push   $0xf0139f32
f0120bec:	e8 bf f5 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120bf1:	e8 8e 3a fe ff       	call   f0104684 <pf_calculate_free_frames>
f0120bf6:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120bf9:	74 17                	je     f0120c12 <test_kfree+0xfaf>
f0120bfb:	83 ec 04             	sub    $0x4,%esp
f0120bfe:	68 4c 9f 13 f0       	push   $0xf0139f4c
f0120c03:	68 8f 05 00 00       	push   $0x58f
f0120c08:	68 32 9f 13 f0       	push   $0xf0139f32
f0120c0d:	e8 9e f5 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120c12:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120c15:	e8 24 c2 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0120c1a:	29 c3                	sub    %eax,%ebx
f0120c1c:	89 d8                	mov    %ebx,%eax
f0120c1e:	3d 00 01 00 00       	cmp    $0x100,%eax
f0120c23:	74 17                	je     f0120c3c <test_kfree+0xfd9>
f0120c25:	83 ec 04             	sub    $0x4,%esp
f0120c28:	68 b4 9f 13 f0       	push   $0xf0139fb4
f0120c2d:	68 90 05 00 00       	push   $0x590
f0120c32:	68 32 9f 13 f0       	push   $0xf0139f32
f0120c37:	e8 74 f5 fd ff       	call   f01001b0 <_panic>
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
f0120c3c:	c7 85 8c fe ff ff ff 	movl   $0xfffff,-0x174(%ebp)
f0120c43:	ff 0f 00 
		ptr = (char*)ptr_allocations[9];
f0120c46:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0120c4c:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f0120c4f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120c56:	eb 0e                	jmp    f0120c66 <test_kfree+0x1003>
		{
			ptr[i] = 9 ;
f0120c58:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0120c5b:	8b 45 98             	mov    -0x68(%ebp),%eax
f0120c5e:	01 d0                	add    %edx,%eax
f0120c60:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f0120c63:	ff 45 f4             	incl   -0xc(%ebp)
f0120c66:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0120c6c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120c6f:	7f e7                	jg     f0120c58 <test_kfree+0xff5>
		{
			ptr[i] = 9 ;
		}

		if (isKHeapPlacementStrategyNEXTFIT())
f0120c71:	e8 16 7e ff ff       	call   f0118a8c <isKHeapPlacementStrategyNEXTFIT>
f0120c76:	84 c0                	test   %al,%al
f0120c78:	0f 84 9e 05 00 00    	je     f012121c <test_kfree+0x15b9>
		{
			//Allocate Remaining MBs
			freeFrames = sys_calculate_free_frames() ;
f0120c7e:	e8 bb c1 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0120c83:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0120c86:	e8 f9 39 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0120c8b:	89 45 cc             	mov    %eax,-0x34(%ebp)
			uint32 reqAllocatedSpace = KERNEL_HEAP_MAX - (ACTUAL_START + 13*Mega + 52*kilo + 1*Mega);
f0120c8e:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f0120c95:	10 00 00 
f0120c98:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0120c9d:	0f b6 d0             	movzbl %al,%edx
f0120ca0:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0120ca6:	01 d0                	add    %edx,%eax
f0120ca8:	48                   	dec    %eax
f0120ca9:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f0120caf:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0120cb5:	ba 00 00 00 00       	mov    $0x0,%edx
f0120cba:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f0120cc0:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0120cc6:	29 d0                	sub    %edx,%eax
f0120cc8:	89 c1                	mov    %eax,%ecx
f0120cca:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f0120cd1:	10 00 00 
f0120cd4:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0120cd9:	0f b6 c0             	movzbl %al,%eax
f0120cdc:	c1 e0 04             	shl    $0x4,%eax
f0120cdf:	89 c2                	mov    %eax,%edx
f0120ce1:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0120ce7:	01 d0                	add    %edx,%eax
f0120ce9:	48                   	dec    %eax
f0120cea:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f0120cf0:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0120cf6:	ba 00 00 00 00       	mov    $0x0,%edx
f0120cfb:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f0120d01:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0120d07:	29 d0                	sub    %edx,%eax
f0120d09:	01 c8                	add    %ecx,%eax
f0120d0b:	ba 00 e0 1e 09       	mov    $0x91ee000,%edx
f0120d10:	29 c2                	sub    %eax,%edx
f0120d12:	89 d0                	mov    %edx,%eax
f0120d14:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
			ptr_allocations[10] = kmalloc(reqAllocatedSpace);
f0120d1a:	83 ec 0c             	sub    $0xc,%esp
f0120d1d:	ff b5 0c ff ff ff    	pushl  -0xf4(%ebp)
f0120d23:	e8 2b 75 fe ff       	call   f0108253 <kmalloc>
f0120d28:	83 c4 10             	add    $0x10,%esp
f0120d2b:	89 85 f0 fd ff ff    	mov    %eax,-0x210(%ebp)
			if ((uint32) ptr_allocations[10] != (ACTUAL_START + 13*Mega + 52*kilo + 1*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120d31:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f0120d37:	89 c1                	mov    %eax,%ecx
f0120d39:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f0120d40:	10 00 00 
f0120d43:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0120d48:	0f b6 d0             	movzbl %al,%edx
f0120d4b:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0120d51:	01 d0                	add    %edx,%eax
f0120d53:	48                   	dec    %eax
f0120d54:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f0120d5a:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0120d60:	ba 00 00 00 00       	mov    $0x0,%edx
f0120d65:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f0120d6b:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0120d71:	29 d0                	sub    %edx,%eax
f0120d73:	89 c3                	mov    %eax,%ebx
f0120d75:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f0120d7c:	10 00 00 
f0120d7f:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0120d84:	0f b6 c0             	movzbl %al,%eax
f0120d87:	c1 e0 04             	shl    $0x4,%eax
f0120d8a:	89 c2                	mov    %eax,%edx
f0120d8c:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0120d92:	01 d0                	add    %edx,%eax
f0120d94:	48                   	dec    %eax
f0120d95:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f0120d9b:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0120da1:	ba 00 00 00 00       	mov    $0x0,%edx
f0120da6:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f0120dac:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0120db2:	29 d0                	sub    %edx,%eax
f0120db4:	01 d8                	add    %ebx,%eax
f0120db6:	2d 00 f0 1e 09       	sub    $0x91ef000,%eax
f0120dbb:	39 c1                	cmp    %eax,%ecx
f0120dbd:	74 17                	je     f0120dd6 <test_kfree+0x1173>
f0120dbf:	83 ec 04             	sub    $0x4,%esp
f0120dc2:	68 18 a0 13 f0       	push   $0xf013a018
f0120dc7:	68 9f 05 00 00       	push   $0x59f
f0120dcc:	68 32 9f 13 f0       	push   $0xf0139f32
f0120dd1:	e8 da f3 fd ff       	call   f01001b0 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120dd6:	e8 a9 38 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0120ddb:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120dde:	74 17                	je     f0120df7 <test_kfree+0x1194>
f0120de0:	83 ec 04             	sub    $0x4,%esp
f0120de3:	68 4c 9f 13 f0       	push   $0xf0139f4c
f0120de8:	68 a0 05 00 00       	push   $0x5a0
f0120ded:	68 32 9f 13 f0       	push   $0xf0139f32
f0120df2:	e8 b9 f3 fd ff       	call   f01001b0 <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != reqAllocatedSpace/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120df7:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120dfa:	e8 3f c0 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0120dff:	29 c3                	sub    %eax,%ebx
f0120e01:	89 da                	mov    %ebx,%edx
f0120e03:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0120e09:	c1 e8 0c             	shr    $0xc,%eax
f0120e0c:	39 c2                	cmp    %eax,%edx
f0120e0e:	74 17                	je     f0120e27 <test_kfree+0x11c4>
f0120e10:	83 ec 04             	sub    $0x4,%esp
f0120e13:	68 b4 9f 13 f0       	push   $0xf0139fb4
f0120e18:	68 a1 05 00 00       	push   $0x5a1
f0120e1d:	68 32 9f 13 f0       	push   $0xf0139f32
f0120e22:	e8 89 f3 fd ff       	call   f01001b0 <_panic>
			lastIndices[10] = (reqAllocatedSpace)/sizeof(char) - 1;
f0120e27:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0120e2d:	48                   	dec    %eax
f0120e2e:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
			ptr = (char*)ptr_allocations[10];
f0120e34:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f0120e3a:	89 45 98             	mov    %eax,-0x68(%ebp)
//				ptr[i] = 10;
//			}

			//Allocate in merged freed space FROM the beginning
			//3 MB
			freeFrames = sys_calculate_free_frames() ;
f0120e3d:	e8 fc bf fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0120e42:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0120e45:	e8 3a 38 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0120e4a:	89 45 cc             	mov    %eax,-0x34(%ebp)
			ptr_allocations[11] = kmalloc(3*Mega);
f0120e4d:	83 ec 0c             	sub    $0xc,%esp
f0120e50:	68 00 00 30 00       	push   $0x300000
f0120e55:	e8 f9 73 fe ff       	call   f0108253 <kmalloc>
f0120e5a:	83 c4 10             	add    $0x10,%esp
f0120e5d:	89 85 f4 fd ff ff    	mov    %eax,-0x20c(%ebp)
			if ((uint32) ptr_allocations[11] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120e63:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f0120e69:	89 c1                	mov    %eax,%ecx
f0120e6b:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f0120e72:	10 00 00 
f0120e75:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0120e7a:	0f b6 d0             	movzbl %al,%edx
f0120e7d:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0120e83:	01 d0                	add    %edx,%eax
f0120e85:	48                   	dec    %eax
f0120e86:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f0120e8c:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0120e92:	ba 00 00 00 00       	mov    $0x0,%edx
f0120e97:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f0120e9d:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0120ea3:	29 d0                	sub    %edx,%eax
f0120ea5:	89 c3                	mov    %eax,%ebx
f0120ea7:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f0120eae:	10 00 00 
f0120eb1:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0120eb6:	0f b6 c0             	movzbl %al,%eax
f0120eb9:	c1 e0 04             	shl    $0x4,%eax
f0120ebc:	89 c2                	mov    %eax,%edx
f0120ebe:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0120ec4:	01 d0                	add    %edx,%eax
f0120ec6:	48                   	dec    %eax
f0120ec7:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f0120ecd:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0120ed3:	ba 00 00 00 00       	mov    $0x0,%edx
f0120ed8:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f0120ede:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0120ee4:	29 d0                	sub    %edx,%eax
f0120ee6:	01 d8                	add    %ebx,%eax
f0120ee8:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0120eed:	39 c1                	cmp    %eax,%ecx
f0120eef:	74 17                	je     f0120f08 <test_kfree+0x12a5>
f0120ef1:	83 ec 04             	sub    $0x4,%esp
f0120ef4:	68 18 a0 13 f0       	push   $0xf013a018
f0120ef9:	68 ae 05 00 00       	push   $0x5ae
f0120efe:	68 32 9f 13 f0       	push   $0xf0139f32
f0120f03:	e8 a8 f2 fd ff       	call   f01001b0 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120f08:	e8 77 37 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0120f0d:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120f10:	74 17                	je     f0120f29 <test_kfree+0x12c6>
f0120f12:	83 ec 04             	sub    $0x4,%esp
f0120f15:	68 4c 9f 13 f0       	push   $0xf0139f4c
f0120f1a:	68 af 05 00 00       	push   $0x5af
f0120f1f:	68 32 9f 13 f0       	push   $0xf0139f32
f0120f24:	e8 87 f2 fd ff       	call   f01001b0 <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120f29:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120f2c:	e8 0d bf fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0120f31:	29 c3                	sub    %eax,%ebx
f0120f33:	89 d8                	mov    %ebx,%eax
f0120f35:	3d 00 03 00 00       	cmp    $0x300,%eax
f0120f3a:	74 17                	je     f0120f53 <test_kfree+0x12f0>
f0120f3c:	83 ec 04             	sub    $0x4,%esp
f0120f3f:	68 b4 9f 13 f0       	push   $0xf0139fb4
f0120f44:	68 b0 05 00 00       	push   $0x5b0
f0120f49:	68 32 9f 13 f0       	push   $0xf0139f32
f0120f4e:	e8 5d f2 fd ff       	call   f01001b0 <_panic>
			lastIndices[11] = (3*Mega)/sizeof(char) - 1;
f0120f53:	c7 85 94 fe ff ff ff 	movl   $0x2fffff,-0x16c(%ebp)
f0120f5a:	ff 2f 00 
			ptr = (char*)ptr_allocations[11];
f0120f5d:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f0120f63:	89 45 98             	mov    %eax,-0x68(%ebp)
			for (i = 0; i < lastIndices[11]; ++i)
f0120f66:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120f6d:	eb 0e                	jmp    f0120f7d <test_kfree+0x131a>
			{
				ptr[i] = 8 ;
f0120f6f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0120f72:	8b 45 98             	mov    -0x68(%ebp),%eax
f0120f75:	01 d0                	add    %edx,%eax
f0120f77:	c6 00 08             	movb   $0x8,(%eax)
			if ((uint32) ptr_allocations[11] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
			if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
			lastIndices[11] = (3*Mega)/sizeof(char) - 1;
			ptr = (char*)ptr_allocations[11];
			for (i = 0; i < lastIndices[11]; ++i)
f0120f7a:	ff 45 f4             	incl   -0xc(%ebp)
f0120f7d:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0120f83:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120f86:	7f e7                	jg     f0120f6f <test_kfree+0x130c>
			{
				ptr[i] = 8 ;
			}

			//2 KB
			freeFrames = sys_calculate_free_frames() ;
f0120f88:	e8 b1 be fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0120f8d:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0120f90:	e8 ef 36 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0120f95:	89 45 cc             	mov    %eax,-0x34(%ebp)
			ptr_allocations[12] = kmalloc(2*kilo);
f0120f98:	83 ec 0c             	sub    $0xc,%esp
f0120f9b:	68 00 08 00 00       	push   $0x800
f0120fa0:	e8 ae 72 fe ff       	call   f0108253 <kmalloc>
f0120fa5:	83 c4 10             	add    $0x10,%esp
f0120fa8:	89 85 f8 fd ff ff    	mov    %eax,-0x208(%ebp)
			if ((uint32) ptr_allocations[12] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120fae:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f0120fb4:	89 c1                	mov    %eax,%ecx
f0120fb6:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f0120fbd:	10 00 00 
f0120fc0:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0120fc5:	0f b6 d0             	movzbl %al,%edx
f0120fc8:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0120fce:	01 d0                	add    %edx,%eax
f0120fd0:	48                   	dec    %eax
f0120fd1:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f0120fd7:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0120fdd:	ba 00 00 00 00       	mov    $0x0,%edx
f0120fe2:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f0120fe8:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0120fee:	29 d0                	sub    %edx,%eax
f0120ff0:	89 c3                	mov    %eax,%ebx
f0120ff2:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f0120ff9:	10 00 00 
f0120ffc:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0121001:	0f b6 c0             	movzbl %al,%eax
f0121004:	c1 e0 04             	shl    $0x4,%eax
f0121007:	89 c2                	mov    %eax,%edx
f0121009:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012100f:	01 d0                	add    %edx,%eax
f0121011:	48                   	dec    %eax
f0121012:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f0121018:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f012101e:	ba 00 00 00 00       	mov    $0x0,%edx
f0121023:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f0121029:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f012102f:	29 d0                	sub    %edx,%eax
f0121031:	01 d8                	add    %ebx,%eax
f0121033:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f0121038:	39 c1                	cmp    %eax,%ecx
f012103a:	74 17                	je     f0121053 <test_kfree+0x13f0>
f012103c:	83 ec 04             	sub    $0x4,%esp
f012103f:	68 18 a0 13 f0       	push   $0xf013a018
f0121044:	68 bc 05 00 00       	push   $0x5bc
f0121049:	68 32 9f 13 f0       	push   $0xf0139f32
f012104e:	e8 5d f1 fd ff       	call   f01001b0 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121053:	e8 2c 36 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0121058:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012105b:	74 17                	je     f0121074 <test_kfree+0x1411>
f012105d:	83 ec 04             	sub    $0x4,%esp
f0121060:	68 4c 9f 13 f0       	push   $0xf0139f4c
f0121065:	68 bd 05 00 00       	push   $0x5bd
f012106a:	68 32 9f 13 f0       	push   $0xf0139f32
f012106f:	e8 3c f1 fd ff       	call   f01001b0 <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121074:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121077:	e8 c2 bd fe ff       	call   f010ce3e <sys_calculate_free_frames>
f012107c:	29 c3                	sub    %eax,%ebx
f012107e:	89 d8                	mov    %ebx,%eax
f0121080:	83 f8 01             	cmp    $0x1,%eax
f0121083:	74 17                	je     f012109c <test_kfree+0x1439>
f0121085:	83 ec 04             	sub    $0x4,%esp
f0121088:	68 b4 9f 13 f0       	push   $0xf0139fb4
f012108d:	68 be 05 00 00       	push   $0x5be
f0121092:	68 32 9f 13 f0       	push   $0xf0139f32
f0121097:	e8 14 f1 fd ff       	call   f01001b0 <_panic>
			lastIndices[12] = (2*kilo)/sizeof(char) - 1;
f012109c:	c7 85 98 fe ff ff ff 	movl   $0x7ff,-0x168(%ebp)
f01210a3:	07 00 00 
			ptr = (char*)ptr_allocations[12];
f01210a6:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f01210ac:	89 45 98             	mov    %eax,-0x68(%ebp)
			for (i = 0; i < lastIndices[12]; ++i)
f01210af:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01210b6:	eb 0e                	jmp    f01210c6 <test_kfree+0x1463>
			{
				ptr[i] = 9 ;
f01210b8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01210bb:	8b 45 98             	mov    -0x68(%ebp),%eax
f01210be:	01 d0                	add    %edx,%eax
f01210c0:	c6 00 09             	movb   $0x9,(%eax)
			if ((uint32) ptr_allocations[12] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
			if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
			lastIndices[12] = (2*kilo)/sizeof(char) - 1;
			ptr = (char*)ptr_allocations[12];
			for (i = 0; i < lastIndices[12]; ++i)
f01210c3:	ff 45 f4             	incl   -0xc(%ebp)
f01210c6:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f01210cc:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01210cf:	7f e7                	jg     f01210b8 <test_kfree+0x1455>
			{
				ptr[i] = 9 ;
			}

			//1 MB
			freeFrames = sys_calculate_free_frames() ;
f01210d1:	e8 68 bd fe ff       	call   f010ce3e <sys_calculate_free_frames>
f01210d6:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f01210d9:	e8 a6 35 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01210de:	89 45 cc             	mov    %eax,-0x34(%ebp)
			ptr_allocations[13] = kmalloc(1*Mega);
f01210e1:	83 ec 0c             	sub    $0xc,%esp
f01210e4:	68 00 00 10 00       	push   $0x100000
f01210e9:	e8 65 71 fe ff       	call   f0108253 <kmalloc>
f01210ee:	83 c4 10             	add    $0x10,%esp
f01210f1:	89 85 fc fd ff ff    	mov    %eax,-0x204(%ebp)
			if ((uint32) ptr_allocations[13] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01210f7:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f01210fd:	89 c1                	mov    %eax,%ecx
f01210ff:	c7 85 d8 fe ff ff 00 	movl   $0x1000,-0x128(%ebp)
f0121106:	10 00 00 
f0121109:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f012110e:	0f b6 d0             	movzbl %al,%edx
f0121111:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0121117:	01 d0                	add    %edx,%eax
f0121119:	48                   	dec    %eax
f012111a:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
f0121120:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0121126:	ba 00 00 00 00       	mov    $0x0,%edx
f012112b:	f7 b5 d8 fe ff ff    	divl   -0x128(%ebp)
f0121131:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0121137:	29 d0                	sub    %edx,%eax
f0121139:	89 c3                	mov    %eax,%ebx
f012113b:	c7 85 d0 fe ff ff 00 	movl   $0x1000,-0x130(%ebp)
f0121142:	10 00 00 
f0121145:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f012114a:	0f b6 c0             	movzbl %al,%eax
f012114d:	c1 e0 04             	shl    $0x4,%eax
f0121150:	89 c2                	mov    %eax,%edx
f0121152:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0121158:	01 d0                	add    %edx,%eax
f012115a:	48                   	dec    %eax
f012115b:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
f0121161:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0121167:	ba 00 00 00 00       	mov    $0x0,%edx
f012116c:	f7 b5 d0 fe ff ff    	divl   -0x130(%ebp)
f0121172:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0121178:	29 d0                	sub    %edx,%eax
f012117a:	01 d8                	add    %ebx,%eax
f012117c:	2d 00 b0 cf 09       	sub    $0x9cfb000,%eax
f0121181:	39 c1                	cmp    %eax,%ecx
f0121183:	74 17                	je     f012119c <test_kfree+0x1539>
f0121185:	83 ec 04             	sub    $0x4,%esp
f0121188:	68 18 a0 13 f0       	push   $0xf013a018
f012118d:	68 ca 05 00 00       	push   $0x5ca
f0121192:	68 32 9f 13 f0       	push   $0xf0139f32
f0121197:	e8 14 f0 fd ff       	call   f01001b0 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012119c:	e8 e3 34 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01211a1:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01211a4:	74 17                	je     f01211bd <test_kfree+0x155a>
f01211a6:	83 ec 04             	sub    $0x4,%esp
f01211a9:	68 4c 9f 13 f0       	push   $0xf0139f4c
f01211ae:	68 cb 05 00 00       	push   $0x5cb
f01211b3:	68 32 9f 13 f0       	push   $0xf0139f32
f01211b8:	e8 f3 ef fd ff       	call   f01001b0 <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f01211bd:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01211c0:	e8 79 bc fe ff       	call   f010ce3e <sys_calculate_free_frames>
f01211c5:	29 c3                	sub    %eax,%ebx
f01211c7:	89 d8                	mov    %ebx,%eax
f01211c9:	3d 00 01 00 00       	cmp    $0x100,%eax
f01211ce:	74 17                	je     f01211e7 <test_kfree+0x1584>
f01211d0:	83 ec 04             	sub    $0x4,%esp
f01211d3:	68 b4 9f 13 f0       	push   $0xf0139fb4
f01211d8:	68 cc 05 00 00       	push   $0x5cc
f01211dd:	68 32 9f 13 f0       	push   $0xf0139f32
f01211e2:	e8 c9 ef fd ff       	call   f01001b0 <_panic>
			lastIndices[13] = (1*Mega)/sizeof(char) - 1;
f01211e7:	c7 85 9c fe ff ff ff 	movl   $0xfffff,-0x164(%ebp)
f01211ee:	ff 0f 00 
			ptr = (char*)ptr_allocations[13];
f01211f1:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f01211f7:	89 45 98             	mov    %eax,-0x68(%ebp)
			for (i = 0; i < lastIndices[13]; ++i)
f01211fa:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121201:	eb 0e                	jmp    f0121211 <test_kfree+0x15ae>
			{
				ptr[i] = 10 ;
f0121203:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0121206:	8b 45 98             	mov    -0x68(%ebp),%eax
f0121209:	01 d0                	add    %edx,%eax
f012120b:	c6 00 0a             	movb   $0xa,(%eax)
			if ((uint32) ptr_allocations[13] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
			if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
			lastIndices[13] = (1*Mega)/sizeof(char) - 1;
			ptr = (char*)ptr_allocations[13];
			for (i = 0; i < lastIndices[13]; ++i)
f012120e:	ff 45 f4             	incl   -0xc(%ebp)
f0121211:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0121217:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012121a:	7f e7                	jg     f0121203 <test_kfree+0x15a0>
			{
				ptr[i] = 10 ;
			}
		}
	}
	cprintf("\b\b\b45%");
f012121c:	83 ec 0c             	sub    $0xc,%esp
f012121f:	68 52 a7 13 f0       	push   $0xf013a752
f0121224:	e8 08 fc fd ff       	call   f0100e31 <cprintf>
f0121229:	83 c4 10             	add    $0x10,%esp

	//kfree remaining allocated spaces [15%]
	{
		//kfree 7 KB
		freeFrames = sys_calculate_free_frames() ;
f012122c:	e8 0d bc fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0121231:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121234:	e8 4b 34 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0121239:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[4]);
f012123c:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0121242:	83 ec 0c             	sub    $0xc,%esp
f0121245:	50                   	push   %eax
f0121246:	e8 93 71 fe ff       	call   f01083de <kfree>
f012124b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012124e:	e8 31 34 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0121253:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121256:	74 17                	je     f012126f <test_kfree+0x160c>
f0121258:	83 ec 04             	sub    $0x4,%esp
f012125b:	68 4c 9f 13 f0       	push   $0xf0139f4c
f0121260:	68 dd 05 00 00       	push   $0x5dd
f0121265:	68 32 9f 13 f0       	push   $0xf0139f32
f012126a:	e8 41 ef fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 2) panic("Wrong kfree: pages in memory are not freed correctly");
f012126f:	e8 ca bb fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0121274:	89 c2                	mov    %eax,%edx
f0121276:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121279:	29 c2                	sub    %eax,%edx
f012127b:	89 d0                	mov    %edx,%eax
f012127d:	83 f8 02             	cmp    $0x2,%eax
f0121280:	74 17                	je     f0121299 <test_kfree+0x1636>
f0121282:	83 ec 04             	sub    $0x4,%esp
f0121285:	68 bc a6 13 f0       	push   $0xf013a6bc
f012128a:	68 de 05 00 00       	push   $0x5de
f012128f:	68 32 9f 13 f0       	push   $0xf0139f32
f0121294:	e8 17 ef fd ff       	call   f01001b0 <_panic>

		//kfree 3 MB
		freeFrames = sys_calculate_free_frames() ;
f0121299:	e8 a0 bb fe ff       	call   f010ce3e <sys_calculate_free_frames>
f012129e:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01212a1:	e8 de 33 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01212a6:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[5]);
f01212a9:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f01212af:	83 ec 0c             	sub    $0xc,%esp
f01212b2:	50                   	push   %eax
f01212b3:	e8 26 71 fe ff       	call   f01083de <kfree>
f01212b8:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01212bb:	e8 c4 33 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01212c0:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01212c3:	74 17                	je     f01212dc <test_kfree+0x1679>
f01212c5:	83 ec 04             	sub    $0x4,%esp
f01212c8:	68 4c 9f 13 f0       	push   $0xf0139f4c
f01212cd:	68 e4 05 00 00       	push   $0x5e4
f01212d2:	68 32 9f 13 f0       	push   $0xf0139f32
f01212d7:	e8 d4 ee fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f01212dc:	e8 5d bb fe ff       	call   f010ce3e <sys_calculate_free_frames>
f01212e1:	89 c2                	mov    %eax,%edx
f01212e3:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01212e6:	29 c2                	sub    %eax,%edx
f01212e8:	89 d0                	mov    %edx,%eax
f01212ea:	3d 00 03 00 00       	cmp    $0x300,%eax
f01212ef:	74 17                	je     f0121308 <test_kfree+0x16a5>
f01212f1:	83 ec 04             	sub    $0x4,%esp
f01212f4:	68 bc a6 13 f0       	push   $0xf013a6bc
f01212f9:	68 e5 05 00 00       	push   $0x5e5
f01212fe:	68 32 9f 13 f0       	push   $0xf0139f32
f0121303:	e8 a8 ee fd ff       	call   f01001b0 <_panic>

		//kfree 2nd 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0121308:	e8 31 bb fe ff       	call   f010ce3e <sys_calculate_free_frames>
f012130d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121310:	e8 6f 33 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0121315:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[3]);
f0121318:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f012131e:	83 ec 0c             	sub    $0xc,%esp
f0121321:	50                   	push   %eax
f0121322:	e8 b7 70 fe ff       	call   f01083de <kfree>
f0121327:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012132a:	e8 55 33 fe ff       	call   f0104684 <pf_calculate_free_frames>
f012132f:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121332:	74 17                	je     f012134b <test_kfree+0x16e8>
f0121334:	83 ec 04             	sub    $0x4,%esp
f0121337:	68 4c 9f 13 f0       	push   $0xf0139f4c
f012133c:	68 eb 05 00 00       	push   $0x5eb
f0121341:	68 32 9f 13 f0       	push   $0xf0139f32
f0121346:	e8 65 ee fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f012134b:	e8 ee ba fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0121350:	89 c2                	mov    %eax,%edx
f0121352:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121355:	29 c2                	sub    %eax,%edx
f0121357:	89 d0                	mov    %edx,%eax
f0121359:	83 f8 01             	cmp    $0x1,%eax
f012135c:	74 17                	je     f0121375 <test_kfree+0x1712>
f012135e:	83 ec 04             	sub    $0x4,%esp
f0121361:	68 bc a6 13 f0       	push   $0xf013a6bc
f0121366:	68 ec 05 00 00       	push   $0x5ec
f012136b:	68 32 9f 13 f0       	push   $0xf0139f32
f0121370:	e8 3b ee fd ff       	call   f01001b0 <_panic>

		//kfree 14 KB
		freeFrames = sys_calculate_free_frames() ;
f0121375:	e8 c4 ba fe ff       	call   f010ce3e <sys_calculate_free_frames>
f012137a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012137d:	e8 02 33 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0121382:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[7]);
f0121385:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f012138b:	83 ec 0c             	sub    $0xc,%esp
f012138e:	50                   	push   %eax
f012138f:	e8 4a 70 fe ff       	call   f01083de <kfree>
f0121394:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121397:	e8 e8 32 fe ff       	call   f0104684 <pf_calculate_free_frames>
f012139c:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012139f:	74 17                	je     f01213b8 <test_kfree+0x1755>
f01213a1:	83 ec 04             	sub    $0x4,%esp
f01213a4:	68 4c 9f 13 f0       	push   $0xf0139f4c
f01213a9:	68 f2 05 00 00       	push   $0x5f2
f01213ae:	68 32 9f 13 f0       	push   $0xf0139f32
f01213b3:	e8 f8 ed fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 4) panic("Wrong kfree: pages in memory are not freed correctly");
f01213b8:	e8 81 ba fe ff       	call   f010ce3e <sys_calculate_free_frames>
f01213bd:	89 c2                	mov    %eax,%edx
f01213bf:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01213c2:	29 c2                	sub    %eax,%edx
f01213c4:	89 d0                	mov    %edx,%eax
f01213c6:	83 f8 04             	cmp    $0x4,%eax
f01213c9:	74 17                	je     f01213e2 <test_kfree+0x177f>
f01213cb:	83 ec 04             	sub    $0x4,%esp
f01213ce:	68 bc a6 13 f0       	push   $0xf013a6bc
f01213d3:	68 f3 05 00 00       	push   $0x5f3
f01213d8:	68 32 9f 13 f0       	push   $0xf0139f32
f01213dd:	e8 ce ed fd ff       	call   f01001b0 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f01213e2:	e8 57 ba fe ff       	call   f010ce3e <sys_calculate_free_frames>
f01213e7:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01213ea:	e8 95 32 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01213ef:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f01213f2:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f01213f8:	83 ec 0c             	sub    $0xc,%esp
f01213fb:	50                   	push   %eax
f01213fc:	e8 dd 6f fe ff       	call   f01083de <kfree>
f0121401:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121404:	e8 7b 32 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0121409:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012140c:	74 17                	je     f0121425 <test_kfree+0x17c2>
f012140e:	83 ec 04             	sub    $0x4,%esp
f0121411:	68 4c 9f 13 f0       	push   $0xf0139f4c
f0121416:	68 f9 05 00 00       	push   $0x5f9
f012141b:	68 32 9f 13 f0       	push   $0xf0139f32
f0121420:	e8 8b ed fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 5) panic("Wrong kfree: pages in memory are not freed correctly");
f0121425:	e8 14 ba fe ff       	call   f010ce3e <sys_calculate_free_frames>
f012142a:	89 c2                	mov    %eax,%edx
f012142c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012142f:	29 c2                	sub    %eax,%edx
f0121431:	89 d0                	mov    %edx,%eax
f0121433:	83 f8 05             	cmp    $0x5,%eax
f0121436:	74 17                	je     f012144f <test_kfree+0x17ec>
f0121438:	83 ec 04             	sub    $0x4,%esp
f012143b:	68 bc a6 13 f0       	push   $0xf013a6bc
f0121440:	68 fa 05 00 00       	push   $0x5fa
f0121445:	68 32 9f 13 f0       	push   $0xf0139f32
f012144a:	e8 61 ed fd ff       	call   f01001b0 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f012144f:	e8 ea b9 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0121454:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121457:	e8 28 32 fe ff       	call   f0104684 <pf_calculate_free_frames>
f012145c:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f012145f:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0121465:	83 ec 0c             	sub    $0xc,%esp
f0121468:	50                   	push   %eax
f0121469:	e8 70 6f fe ff       	call   f01083de <kfree>
f012146e:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121471:	e8 0e 32 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0121476:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121479:	74 17                	je     f0121492 <test_kfree+0x182f>
f012147b:	83 ec 04             	sub    $0x4,%esp
f012147e:	68 4c 9f 13 f0       	push   $0xf0139f4c
f0121483:	68 00 06 00 00       	push   $0x600
f0121488:	68 32 9f 13 f0       	push   $0xf0139f32
f012148d:	e8 1e ed fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong kfree: pages in memory are not freed correctly");
f0121492:	e8 a7 b9 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0121497:	89 c2                	mov    %eax,%edx
f0121499:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012149c:	29 c2                	sub    %eax,%edx
f012149e:	89 d0                	mov    %edx,%eax
f01214a0:	3d 00 01 00 00       	cmp    $0x100,%eax
f01214a5:	74 17                	je     f01214be <test_kfree+0x185b>
f01214a7:	83 ec 04             	sub    $0x4,%esp
f01214aa:	68 bc a6 13 f0       	push   $0xf013a6bc
f01214af:	68 01 06 00 00       	push   $0x601
f01214b4:	68 32 9f 13 f0       	push   $0xf0139f32
f01214b9:	e8 f2 ec fd ff       	call   f01001b0 <_panic>

		if (isKHeapPlacementStrategyNEXTFIT())
f01214be:	e8 c9 75 ff ff       	call   f0118a8c <isKHeapPlacementStrategyNEXTFIT>
f01214c3:	84 c0                	test   %al,%al
f01214c5:	0f 84 4a 02 00 00    	je     f0121715 <test_kfree+0x1ab2>
		{
			//cprintf("FREE in NEXT FIT\n");
			//kfree Remaining MBs
			freeFrames = sys_calculate_free_frames() ;
f01214cb:	e8 6e b9 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f01214d0:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f01214d3:	e8 ac 31 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01214d8:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[10]);
f01214db:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f01214e1:	83 ec 0c             	sub    $0xc,%esp
f01214e4:	50                   	push   %eax
f01214e5:	e8 f4 6e fe ff       	call   f01083de <kfree>
f01214ea:	83 c4 10             	add    $0x10,%esp
			uint32 reqAllocatedSpace = KERNEL_HEAP_MAX - (ACTUAL_START + 13*Mega + 52*kilo + 1*Mega);
f01214ed:	c7 85 c8 fe ff ff 00 	movl   $0x1000,-0x138(%ebp)
f01214f4:	10 00 00 
f01214f7:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f01214fc:	0f b6 d0             	movzbl %al,%edx
f01214ff:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0121505:	01 d0                	add    %edx,%eax
f0121507:	48                   	dec    %eax
f0121508:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
f012150e:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0121514:	ba 00 00 00 00       	mov    $0x0,%edx
f0121519:	f7 b5 c8 fe ff ff    	divl   -0x138(%ebp)
f012151f:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0121525:	29 d0                	sub    %edx,%eax
f0121527:	89 c1                	mov    %eax,%ecx
f0121529:	c7 85 c0 fe ff ff 00 	movl   $0x1000,-0x140(%ebp)
f0121530:	10 00 00 
f0121533:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0121538:	0f b6 c0             	movzbl %al,%eax
f012153b:	c1 e0 04             	shl    $0x4,%eax
f012153e:	89 c2                	mov    %eax,%edx
f0121540:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0121546:	01 d0                	add    %edx,%eax
f0121548:	48                   	dec    %eax
f0121549:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
f012154f:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0121555:	ba 00 00 00 00       	mov    $0x0,%edx
f012155a:	f7 b5 c0 fe ff ff    	divl   -0x140(%ebp)
f0121560:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0121566:	29 d0                	sub    %edx,%eax
f0121568:	01 c8                	add    %ecx,%eax
f012156a:	ba 00 e0 1e 09       	mov    $0x91ee000,%edx
f012156f:	29 c2                	sub    %eax,%edx
f0121571:	89 d0                	mov    %edx,%eax
f0121573:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121579:	e8 06 31 fe ff       	call   f0104684 <pf_calculate_free_frames>
f012157e:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121581:	74 17                	je     f012159a <test_kfree+0x1937>
f0121583:	83 ec 04             	sub    $0x4,%esp
f0121586:	68 4c 9f 13 f0       	push   $0xf0139f4c
f012158b:	68 0b 06 00 00       	push   $0x60b
f0121590:	68 32 9f 13 f0       	push   $0xf0139f32
f0121595:	e8 16 ec fd ff       	call   f01001b0 <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != reqAllocatedSpace/PAGE_SIZE) panic("Wrong kfree: pages in memory are not freed correctly");
f012159a:	e8 9f b8 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f012159f:	89 c2                	mov    %eax,%edx
f01215a1:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01215a4:	29 c2                	sub    %eax,%edx
f01215a6:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f01215ac:	c1 e8 0c             	shr    $0xc,%eax
f01215af:	39 c2                	cmp    %eax,%edx
f01215b1:	74 17                	je     f01215ca <test_kfree+0x1967>
f01215b3:	83 ec 04             	sub    $0x4,%esp
f01215b6:	68 bc a6 13 f0       	push   $0xf013a6bc
f01215bb:	68 0c 06 00 00       	push   $0x60c
f01215c0:	68 32 9f 13 f0       	push   $0xf0139f32
f01215c5:	e8 e6 eb fd ff       	call   f01001b0 <_panic>

			//kfree 3 MB
			freeFrames = sys_calculate_free_frames() ;
f01215ca:	e8 6f b8 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f01215cf:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f01215d2:	e8 ad 30 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01215d7:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[11]);
f01215da:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f01215e0:	83 ec 0c             	sub    $0xc,%esp
f01215e3:	50                   	push   %eax
f01215e4:	e8 f5 6d fe ff       	call   f01083de <kfree>
f01215e9:	83 c4 10             	add    $0x10,%esp
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01215ec:	e8 93 30 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01215f1:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01215f4:	74 17                	je     f012160d <test_kfree+0x19aa>
f01215f6:	83 ec 04             	sub    $0x4,%esp
f01215f9:	68 4c 9f 13 f0       	push   $0xf0139f4c
f01215fe:	68 12 06 00 00       	push   $0x612
f0121603:	68 32 9f 13 f0       	push   $0xf0139f32
f0121608:	e8 a3 eb fd ff       	call   f01001b0 <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f012160d:	e8 2c b8 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0121612:	89 c2                	mov    %eax,%edx
f0121614:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121617:	29 c2                	sub    %eax,%edx
f0121619:	89 d0                	mov    %edx,%eax
f012161b:	3d 00 03 00 00       	cmp    $0x300,%eax
f0121620:	74 17                	je     f0121639 <test_kfree+0x19d6>
f0121622:	83 ec 04             	sub    $0x4,%esp
f0121625:	68 bc a6 13 f0       	push   $0xf013a6bc
f012162a:	68 13 06 00 00       	push   $0x613
f012162f:	68 32 9f 13 f0       	push   $0xf0139f32
f0121634:	e8 77 eb fd ff       	call   f01001b0 <_panic>

			//kfree 2 KB
			freeFrames = sys_calculate_free_frames() ;
f0121639:	e8 00 b8 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f012163e:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0121641:	e8 3e 30 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0121646:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[12]);
f0121649:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f012164f:	83 ec 0c             	sub    $0xc,%esp
f0121652:	50                   	push   %eax
f0121653:	e8 86 6d fe ff       	call   f01083de <kfree>
f0121658:	83 c4 10             	add    $0x10,%esp
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012165b:	e8 24 30 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0121660:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121663:	74 17                	je     f012167c <test_kfree+0x1a19>
f0121665:	83 ec 04             	sub    $0x4,%esp
f0121668:	68 4c 9f 13 f0       	push   $0xf0139f4c
f012166d:	68 19 06 00 00       	push   $0x619
f0121672:	68 32 9f 13 f0       	push   $0xf0139f32
f0121677:	e8 34 eb fd ff       	call   f01001b0 <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f012167c:	e8 bd b7 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0121681:	89 c2                	mov    %eax,%edx
f0121683:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121686:	29 c2                	sub    %eax,%edx
f0121688:	89 d0                	mov    %edx,%eax
f012168a:	83 f8 01             	cmp    $0x1,%eax
f012168d:	74 17                	je     f01216a6 <test_kfree+0x1a43>
f012168f:	83 ec 04             	sub    $0x4,%esp
f0121692:	68 bc a6 13 f0       	push   $0xf013a6bc
f0121697:	68 1a 06 00 00       	push   $0x61a
f012169c:	68 32 9f 13 f0       	push   $0xf0139f32
f01216a1:	e8 0a eb fd ff       	call   f01001b0 <_panic>

			//kfree 1 MB
			freeFrames = sys_calculate_free_frames() ;
f01216a6:	e8 93 b7 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f01216ab:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f01216ae:	e8 d1 2f fe ff       	call   f0104684 <pf_calculate_free_frames>
f01216b3:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[13]);
f01216b6:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f01216bc:	83 ec 0c             	sub    $0xc,%esp
f01216bf:	50                   	push   %eax
f01216c0:	e8 19 6d fe ff       	call   f01083de <kfree>
f01216c5:	83 c4 10             	add    $0x10,%esp
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01216c8:	e8 b7 2f fe ff       	call   f0104684 <pf_calculate_free_frames>
f01216cd:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01216d0:	74 17                	je     f01216e9 <test_kfree+0x1a86>
f01216d2:	83 ec 04             	sub    $0x4,%esp
f01216d5:	68 4c 9f 13 f0       	push   $0xf0139f4c
f01216da:	68 20 06 00 00       	push   $0x620
f01216df:	68 32 9f 13 f0       	push   $0xf0139f32
f01216e4:	e8 c7 ea fd ff       	call   f01001b0 <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != 1*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f01216e9:	e8 50 b7 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f01216ee:	89 c2                	mov    %eax,%edx
f01216f0:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01216f3:	29 c2                	sub    %eax,%edx
f01216f5:	89 d0                	mov    %edx,%eax
f01216f7:	3d 00 01 00 00       	cmp    $0x100,%eax
f01216fc:	74 17                	je     f0121715 <test_kfree+0x1ab2>
f01216fe:	83 ec 04             	sub    $0x4,%esp
f0121701:	68 bc a6 13 f0       	push   $0xf013a6bc
f0121706:	68 21 06 00 00       	push   $0x621
f012170b:	68 32 9f 13 f0       	push   $0xf0139f32
f0121710:	e8 9b ea fd ff       	call   f01001b0 <_panic>

		}
		if(start_freeFrames != (sys_calculate_free_frames())) {panic("Wrong kfree: not all pages removed correctly at end");}
f0121715:	e8 24 b7 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f012171a:	89 c2                	mov    %eax,%edx
f012171c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012171f:	39 c2                	cmp    %eax,%edx
f0121721:	74 17                	je     f012173a <test_kfree+0x1ad7>
f0121723:	83 ec 04             	sub    $0x4,%esp
f0121726:	68 5c a7 13 f0       	push   $0xf013a75c
f012172b:	68 24 06 00 00       	push   $0x624
f0121730:	68 32 9f 13 f0       	push   $0xf0139f32
f0121735:	e8 76 ea fd ff       	call   f01001b0 <_panic>
	}
	cprintf("\b\b\b60%");
f012173a:	83 ec 0c             	sub    $0xc,%esp
f012173d:	68 90 a7 13 f0       	push   $0xf013a790
f0121742:	e8 ea f6 fd ff       	call   f0100e31 <cprintf>
f0121747:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f012174a:	83 ec 0c             	sub    $0xc,%esp
f012174d:	6a 03                	push   $0x3
f012174f:	e8 85 bb fe ff       	call   f010d2d9 <sys_bypassPageFault>
f0121754:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 10; ++i)
f0121757:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012175e:	e9 82 00 00 00       	jmp    f01217e5 <test_kfree+0x1b82>
		{
			ptr = (char *) ptr_allocations[i];
f0121763:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0121766:	8b 84 85 c8 fd ff ff 	mov    -0x238(%ebp,%eax,4),%eax
f012176d:	89 45 98             	mov    %eax,-0x68(%ebp)
			ptr[0] = 10;
f0121770:	8b 45 98             	mov    -0x68(%ebp),%eax
f0121773:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0121776:	e8 4c bb fe ff       	call   f010d2c7 <sys_rcr2>
f012177b:	89 c2                	mov    %eax,%edx
f012177d:	8b 45 98             	mov    -0x68(%ebp),%eax
f0121780:	39 c2                	cmp    %eax,%edx
f0121782:	74 17                	je     f012179b <test_kfree+0x1b38>
f0121784:	83 ec 04             	sub    $0x4,%esp
f0121787:	68 98 a7 13 f0       	push   $0xf013a798
f012178c:	68 33 06 00 00       	push   $0x633
f0121791:	68 32 9f 13 f0       	push   $0xf0139f32
f0121796:	e8 15 ea fd ff       	call   f01001b0 <_panic>
			ptr[lastIndices[i]] = 10;
f012179b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012179e:	8b 84 85 68 fe ff ff 	mov    -0x198(%ebp,%eax,4),%eax
f01217a5:	89 c2                	mov    %eax,%edx
f01217a7:	8b 45 98             	mov    -0x68(%ebp),%eax
f01217aa:	01 d0                	add    %edx,%eax
f01217ac:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
f01217af:	e8 13 bb fe ff       	call   f010d2c7 <sys_rcr2>
f01217b4:	89 c2                	mov    %eax,%edx
f01217b6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01217b9:	8b 84 85 68 fe ff ff 	mov    -0x198(%ebp,%eax,4),%eax
f01217c0:	89 c1                	mov    %eax,%ecx
f01217c2:	8b 45 98             	mov    -0x68(%ebp),%eax
f01217c5:	01 c8                	add    %ecx,%eax
f01217c7:	39 c2                	cmp    %eax,%edx
f01217c9:	74 17                	je     f01217e2 <test_kfree+0x1b7f>
f01217cb:	83 ec 04             	sub    $0x4,%esp
f01217ce:	68 98 a7 13 f0       	push   $0xf013a798
f01217d3:	68 35 06 00 00       	push   $0x635
f01217d8:	68 32 9f 13 f0       	push   $0xf0139f32
f01217dd:	e8 ce e9 fd ff       	call   f01001b0 <_panic>
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 10; ++i)
f01217e2:	ff 45 f4             	incl   -0xc(%ebp)
f01217e5:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
f01217e9:	0f 8e 74 ff ff ff    	jle    f0121763 <test_kfree+0x1b00>
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f01217ef:	83 ec 0c             	sub    $0xc,%esp
f01217f2:	6a 00                	push   $0x0
f01217f4:	e8 e0 ba fe ff       	call   f010d2d9 <sys_bypassPageFault>
f01217f9:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("\b\b\b75%");
f01217fc:	83 ec 0c             	sub    $0xc,%esp
f01217ff:	68 dd a7 13 f0       	push   $0xf013a7dd
f0121804:	e8 28 f6 fd ff       	call   f0100e31 <cprintf>
f0121809:	83 c4 10             	add    $0x10,%esp

	//kfree non-exist item [10%]
	{
		//kfree 2 MB
		freeFrames = sys_calculate_free_frames() ;
f012180c:	e8 2d b6 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0121811:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121814:	e8 6b 2e fe ff       	call   f0104684 <pf_calculate_free_frames>
f0121819:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[0]);
f012181c:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f0121822:	83 ec 0c             	sub    $0xc,%esp
f0121825:	50                   	push   %eax
f0121826:	e8 b3 6b fe ff       	call   f01083de <kfree>
f012182b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012182e:	e8 51 2e fe ff       	call   f0104684 <pf_calculate_free_frames>
f0121833:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121836:	74 17                	je     f012184f <test_kfree+0x1bec>
f0121838:	83 ec 04             	sub    $0x4,%esp
f012183b:	68 4c 9f 13 f0       	push   $0xf0139f4c
f0121840:	68 43 06 00 00       	push   $0x643
f0121845:	68 32 9f 13 f0       	push   $0xf0139f32
f012184a:	e8 61 e9 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f012184f:	e8 ea b5 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0121854:	89 c2                	mov    %eax,%edx
f0121856:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121859:	39 c2                	cmp    %eax,%edx
f012185b:	74 17                	je     f0121874 <test_kfree+0x1c11>
f012185d:	83 ec 04             	sub    $0x4,%esp
f0121860:	68 e4 a7 13 f0       	push   $0xf013a7e4
f0121865:	68 44 06 00 00       	push   $0x644
f012186a:	68 32 9f 13 f0       	push   $0xf0139f32
f012186f:	e8 3c e9 fd ff       	call   f01001b0 <_panic>

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0121874:	e8 c5 b5 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0121879:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012187c:	e8 03 2e fe ff       	call   f0104684 <pf_calculate_free_frames>
f0121881:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f0121884:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f012188a:	83 ec 0c             	sub    $0xc,%esp
f012188d:	50                   	push   %eax
f012188e:	e8 4b 6b fe ff       	call   f01083de <kfree>
f0121893:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121896:	e8 e9 2d fe ff       	call   f0104684 <pf_calculate_free_frames>
f012189b:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012189e:	74 17                	je     f01218b7 <test_kfree+0x1c54>
f01218a0:	83 ec 04             	sub    $0x4,%esp
f01218a3:	68 4c 9f 13 f0       	push   $0xf0139f4c
f01218a8:	68 4a 06 00 00       	push   $0x64a
f01218ad:	68 32 9f 13 f0       	push   $0xf0139f32
f01218b2:	e8 f9 e8 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f01218b7:	e8 82 b5 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f01218bc:	89 c2                	mov    %eax,%edx
f01218be:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01218c1:	39 c2                	cmp    %eax,%edx
f01218c3:	74 17                	je     f01218dc <test_kfree+0x1c79>
f01218c5:	83 ec 04             	sub    $0x4,%esp
f01218c8:	68 e4 a7 13 f0       	push   $0xf013a7e4
f01218cd:	68 4b 06 00 00       	push   $0x64b
f01218d2:	68 32 9f 13 f0       	push   $0xf0139f32
f01218d7:	e8 d4 e8 fd ff       	call   f01001b0 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f01218dc:	e8 5d b5 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f01218e1:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01218e4:	e8 9b 2d fe ff       	call   f0104684 <pf_calculate_free_frames>
f01218e9:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f01218ec:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f01218f2:	83 ec 0c             	sub    $0xc,%esp
f01218f5:	50                   	push   %eax
f01218f6:	e8 e3 6a fe ff       	call   f01083de <kfree>
f01218fb:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01218fe:	e8 81 2d fe ff       	call   f0104684 <pf_calculate_free_frames>
f0121903:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121906:	74 17                	je     f012191f <test_kfree+0x1cbc>
f0121908:	83 ec 04             	sub    $0x4,%esp
f012190b:	68 4c 9f 13 f0       	push   $0xf0139f4c
f0121910:	68 51 06 00 00       	push   $0x651
f0121915:	68 32 9f 13 f0       	push   $0xf0139f32
f012191a:	e8 91 e8 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f012191f:	e8 1a b5 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0121924:	89 c2                	mov    %eax,%edx
f0121926:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121929:	39 c2                	cmp    %eax,%edx
f012192b:	74 17                	je     f0121944 <test_kfree+0x1ce1>
f012192d:	83 ec 04             	sub    $0x4,%esp
f0121930:	68 e4 a7 13 f0       	push   $0xf013a7e4
f0121935:	68 52 06 00 00       	push   $0x652
f012193a:	68 32 9f 13 f0       	push   $0xf0139f32
f012193f:	e8 6c e8 fd ff       	call   f01001b0 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0121944:	e8 f5 b4 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0121949:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012194c:	e8 33 2d fe ff       	call   f0104684 <pf_calculate_free_frames>
f0121951:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f0121954:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f012195a:	83 ec 0c             	sub    $0xc,%esp
f012195d:	50                   	push   %eax
f012195e:	e8 7b 6a fe ff       	call   f01083de <kfree>
f0121963:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121966:	e8 19 2d fe ff       	call   f0104684 <pf_calculate_free_frames>
f012196b:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012196e:	74 17                	je     f0121987 <test_kfree+0x1d24>
f0121970:	83 ec 04             	sub    $0x4,%esp
f0121973:	68 4c 9f 13 f0       	push   $0xf0139f4c
f0121978:	68 58 06 00 00       	push   $0x658
f012197d:	68 32 9f 13 f0       	push   $0xf0139f32
f0121982:	e8 29 e8 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0121987:	e8 b2 b4 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f012198c:	89 c2                	mov    %eax,%edx
f012198e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121991:	39 c2                	cmp    %eax,%edx
f0121993:	74 17                	je     f01219ac <test_kfree+0x1d49>
f0121995:	83 ec 04             	sub    $0x4,%esp
f0121998:	68 e4 a7 13 f0       	push   $0xf013a7e4
f012199d:	68 59 06 00 00       	push   $0x659
f01219a2:	68 32 9f 13 f0       	push   $0xf0139f32
f01219a7:	e8 04 e8 fd ff       	call   f01001b0 <_panic>

	}
	cprintf("\b\b\b85%");
f01219ac:	83 ec 0c             	sub    $0xc,%esp
f01219af:	68 2b a8 13 f0       	push   $0xf013a82b
f01219b4:	e8 78 f4 fd ff       	call   f0100e31 <cprintf>
f01219b9:	83 c4 10             	add    $0x10,%esp

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f01219bc:	c7 45 e8 00 00 00 f6 	movl   $0xf6000000,-0x18(%ebp)
f01219c3:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f01219ca:	eb 48                	jmp    f0121a14 <test_kfree+0x1db1>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va, &ptr_table);
f01219cc:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01219cf:	a1 30 ce 2b f0       	mov    0xf02bce30,%eax
f01219d4:	83 ec 04             	sub    $0x4,%esp
f01219d7:	8d 8d c4 fd ff ff    	lea    -0x23c(%ebp),%ecx
f01219dd:	51                   	push   %ecx
f01219de:	52                   	push   %edx
f01219df:	50                   	push   %eax
f01219e0:	e8 02 5b fe ff       	call   f01074e7 <get_page_table>
f01219e5:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f01219e8:	8b 85 c4 fd ff ff    	mov    -0x23c(%ebp),%eax
f01219ee:	85 c0                	test   %eax,%eax
f01219f0:	75 17                	jne    f0121a09 <test_kfree+0x1da6>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
f01219f2:	83 ec 04             	sub    $0x4,%esp
f01219f5:	68 34 a8 13 f0       	push   $0xf013a834
f01219fa:	68 67 06 00 00       	push   $0x667
f01219ff:	68 32 9f 13 f0       	push   $0xf0139f32
f0121a04:	e8 a7 e7 fd ff       	call   f01001b0 <_panic>
	cprintf("\b\b\b85%");

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0121a09:	81 45 e8 00 00 40 00 	addl   $0x400000,-0x18(%ebp)
f0121a10:	83 55 ec 00          	adcl   $0x0,-0x14(%ebp)
f0121a14:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0121a18:	78 b2                	js     f01219cc <test_kfree+0x1d69>
f0121a1a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0121a1e:	7f 09                	jg     f0121a29 <test_kfree+0x1dc6>
f0121a20:	81 7d e8 ff ef ff ff 	cmpl   $0xffffefff,-0x18(%ebp)
f0121a27:	76 a3                	jbe    f01219cc <test_kfree+0x1d69>
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
			}
		}
	}

	cprintf("\b\b\b100%\n");
f0121a29:	83 ec 0c             	sub    $0xc,%esp
f0121a2c:	68 16 a1 13 f0       	push   $0xf013a116
f0121a31:	e8 fb f3 fd ff       	call   f0100e31 <cprintf>
f0121a36:	83 c4 10             	add    $0x10,%esp



	cprintf("\nCongratulations!! test kfree completed successfully.\n");
f0121a39:	83 ec 0c             	sub    $0xc,%esp
f0121a3c:	68 9c a8 13 f0       	push   $0xf013a89c
f0121a41:	e8 eb f3 fd ff       	call   f0100e31 <cprintf>
f0121a46:	83 c4 10             	add    $0x10,%esp

	return 1;
f0121a49:	b8 01 00 00 00       	mov    $0x1,%eax

}
f0121a4e:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0121a51:	5b                   	pop    %ebx
f0121a52:	5f                   	pop    %edi
f0121a53:	5d                   	pop    %ebp
f0121a54:	c3                   	ret    

f0121a55 <test_kfree_bestfirstfit>:

int test_kfree_bestfirstfit()
{
f0121a55:	55                   	push   %ebp
f0121a56:	89 e5                	mov    %esp,%ebp
f0121a58:	57                   	push   %edi
f0121a59:	53                   	push   %ebx
f0121a5a:	81 ec e0 01 00 00    	sub    $0x1e0,%esp
	cprintf("==============================================\n");
f0121a60:	83 ec 0c             	sub    $0xc,%esp
f0121a63:	68 74 9e 13 f0       	push   $0xf0139e74
f0121a68:	e8 c4 f3 fd ff       	call   f0100e31 <cprintf>
f0121a6d:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0121a70:	83 ec 0c             	sub    $0xc,%esp
f0121a73:	68 a4 9e 13 f0       	push   $0xf0139ea4
f0121a78:	e8 b4 f3 fd ff       	call   f0100e31 <cprintf>
f0121a7d:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0121a80:	83 ec 0c             	sub    $0xc,%esp
f0121a83:	68 74 9e 13 f0       	push   $0xf0139e74
f0121a88:	e8 a4 f3 fd ff       	call   f0100e31 <cprintf>
f0121a8d:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f0121a90:	c6 45 e7 80          	movb   $0x80,-0x19(%ebp)
	char maxByte = 0x7F;
f0121a94:	c6 45 e6 7f          	movb   $0x7f,-0x1a(%ebp)
	short minShort = 1<<15 ;
f0121a98:	66 c7 45 e4 00 80    	movw   $0x8000,-0x1c(%ebp)
	short maxShort = 0x7FFF;
f0121a9e:	66 c7 45 e2 ff 7f    	movw   $0x7fff,-0x1e(%ebp)
	int minInt = 1<<31 ;
f0121aa4:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
	int maxInt = 0x7FFFFFFF;
f0121aab:	c7 45 d8 ff ff ff 7f 	movl   $0x7fffffff,-0x28(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0121ab2:	e8 87 b3 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0121ab7:	89 45 d4             	mov    %eax,-0x2c(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0121aba:	8d 95 c0 fe ff ff    	lea    -0x140(%ebp),%edx
f0121ac0:	b9 14 00 00 00       	mov    $0x14,%ecx
f0121ac5:	b8 00 00 00 00       	mov    $0x0,%eax
f0121aca:	89 d7                	mov    %edx,%edi
f0121acc:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0121ace:	8d 95 70 fe ff ff    	lea    -0x190(%ebp),%edx
f0121ad4:	b9 14 00 00 00       	mov    $0x14,%ecx
f0121ad9:	b8 00 00 00 00       	mov    $0x0,%eax
f0121ade:	89 d7                	mov    %edx,%edi
f0121ae0:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f0121ae2:	8d 95 20 fe ff ff    	lea    -0x1e0(%ebp),%edx
f0121ae8:	b9 14 00 00 00       	mov    $0x14,%ecx
f0121aed:	b8 00 00 00 00       	mov    $0x0,%eax
f0121af2:	89 d7                	mov    %edx,%edi
f0121af4:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0121af6:	e8 43 b3 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0121afb:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121afe:	e8 81 2b fe ff       	call   f0104684 <pf_calculate_free_frames>
f0121b03:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0121b06:	83 ec 0c             	sub    $0xc,%esp
f0121b09:	68 00 fc 1f 00       	push   $0x1ffc00
f0121b0e:	e8 40 67 fe ff       	call   f0108253 <kmalloc>
f0121b13:	83 c4 10             	add    $0x10,%esp
f0121b16:	89 85 20 fe ff ff    	mov    %eax,-0x1e0(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121b1c:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f0121b22:	89 c1                	mov    %eax,%ecx
f0121b24:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f0121b2b:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0121b30:	0f b6 d0             	movzbl %al,%edx
f0121b33:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0121b36:	01 d0                	add    %edx,%eax
f0121b38:	48                   	dec    %eax
f0121b39:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f0121b3c:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0121b3f:	ba 00 00 00 00       	mov    $0x0,%edx
f0121b44:	f7 75 c8             	divl   -0x38(%ebp)
f0121b47:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0121b4a:	29 d0                	sub    %edx,%eax
f0121b4c:	89 c3                	mov    %eax,%ebx
f0121b4e:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f0121b55:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0121b5a:	0f b6 c0             	movzbl %al,%eax
f0121b5d:	c1 e0 04             	shl    $0x4,%eax
f0121b60:	89 c2                	mov    %eax,%edx
f0121b62:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0121b65:	01 d0                	add    %edx,%eax
f0121b67:	48                   	dec    %eax
f0121b68:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0121b6b:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0121b6e:	ba 00 00 00 00       	mov    $0x0,%edx
f0121b73:	f7 75 c0             	divl   -0x40(%ebp)
f0121b76:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0121b79:	29 d0                	sub    %edx,%eax
f0121b7b:	01 d8                	add    %ebx,%eax
f0121b7d:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0121b82:	39 c1                	cmp    %eax,%ecx
f0121b84:	74 17                	je     f0121b9d <test_kfree_bestfirstfit+0x148>
f0121b86:	83 ec 04             	sub    $0x4,%esp
f0121b89:	68 18 a0 13 f0       	push   $0xf013a018
f0121b8e:	68 95 06 00 00       	push   $0x695
f0121b93:	68 32 9f 13 f0       	push   $0xf0139f32
f0121b98:	e8 13 e6 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121b9d:	e8 e2 2a fe ff       	call   f0104684 <pf_calculate_free_frames>
f0121ba2:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121ba5:	74 17                	je     f0121bbe <test_kfree_bestfirstfit+0x169>
f0121ba7:	83 ec 04             	sub    $0x4,%esp
f0121baa:	68 4c 9f 13 f0       	push   $0xf0139f4c
f0121baf:	68 96 06 00 00       	push   $0x696
f0121bb4:	68 32 9f 13 f0       	push   $0xf0139f32
f0121bb9:	e8 f2 e5 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121bbe:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121bc1:	e8 78 b2 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0121bc6:	29 c3                	sub    %eax,%ebx
f0121bc8:	89 d8                	mov    %ebx,%eax
f0121bca:	3d 00 02 00 00       	cmp    $0x200,%eax
f0121bcf:	74 17                	je     f0121be8 <test_kfree_bestfirstfit+0x193>
f0121bd1:	83 ec 04             	sub    $0x4,%esp
f0121bd4:	68 b4 9f 13 f0       	push   $0xf0139fb4
f0121bd9:	68 97 06 00 00       	push   $0x697
f0121bde:	68 32 9f 13 f0       	push   $0xf0139f32
f0121be3:	e8 c8 e5 fd ff       	call   f01001b0 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f0121be8:	c7 85 c0 fe ff ff ff 	movl   $0x1ffbff,-0x140(%ebp)
f0121bef:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0121bf2:	e8 47 b2 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0121bf7:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121bfa:	e8 85 2a fe ff       	call   f0104684 <pf_calculate_free_frames>
f0121bff:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0121c02:	83 ec 0c             	sub    $0xc,%esp
f0121c05:	68 00 fc 1f 00       	push   $0x1ffc00
f0121c0a:	e8 44 66 fe ff       	call   f0108253 <kmalloc>
f0121c0f:	83 c4 10             	add    $0x10,%esp
f0121c12:	89 85 24 fe ff ff    	mov    %eax,-0x1dc(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121c18:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f0121c1e:	89 c1                	mov    %eax,%ecx
f0121c20:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f0121c27:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0121c2c:	0f b6 d0             	movzbl %al,%edx
f0121c2f:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0121c32:	01 d0                	add    %edx,%eax
f0121c34:	48                   	dec    %eax
f0121c35:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f0121c38:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0121c3b:	ba 00 00 00 00       	mov    $0x0,%edx
f0121c40:	f7 75 b8             	divl   -0x48(%ebp)
f0121c43:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0121c46:	29 d0                	sub    %edx,%eax
f0121c48:	89 c3                	mov    %eax,%ebx
f0121c4a:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f0121c51:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0121c56:	0f b6 c0             	movzbl %al,%eax
f0121c59:	c1 e0 04             	shl    $0x4,%eax
f0121c5c:	89 c2                	mov    %eax,%edx
f0121c5e:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0121c61:	01 d0                	add    %edx,%eax
f0121c63:	48                   	dec    %eax
f0121c64:	89 45 ac             	mov    %eax,-0x54(%ebp)
f0121c67:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0121c6a:	ba 00 00 00 00       	mov    $0x0,%edx
f0121c6f:	f7 75 b0             	divl   -0x50(%ebp)
f0121c72:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0121c75:	29 d0                	sub    %edx,%eax
f0121c77:	01 d8                	add    %ebx,%eax
f0121c79:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0121c7e:	39 c1                	cmp    %eax,%ecx
f0121c80:	74 17                	je     f0121c99 <test_kfree_bestfirstfit+0x244>
f0121c82:	83 ec 04             	sub    $0x4,%esp
f0121c85:	68 18 a0 13 f0       	push   $0xf013a018
f0121c8a:	68 9e 06 00 00       	push   $0x69e
f0121c8f:	68 32 9f 13 f0       	push   $0xf0139f32
f0121c94:	e8 17 e5 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121c99:	e8 e6 29 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0121c9e:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121ca1:	74 17                	je     f0121cba <test_kfree_bestfirstfit+0x265>
f0121ca3:	83 ec 04             	sub    $0x4,%esp
f0121ca6:	68 4c 9f 13 f0       	push   $0xf0139f4c
f0121cab:	68 9f 06 00 00       	push   $0x69f
f0121cb0:	68 32 9f 13 f0       	push   $0xf0139f32
f0121cb5:	e8 f6 e4 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121cba:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121cbd:	e8 7c b1 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0121cc2:	29 c3                	sub    %eax,%ebx
f0121cc4:	89 d8                	mov    %ebx,%eax
f0121cc6:	3d 00 02 00 00       	cmp    $0x200,%eax
f0121ccb:	74 17                	je     f0121ce4 <test_kfree_bestfirstfit+0x28f>
f0121ccd:	83 ec 04             	sub    $0x4,%esp
f0121cd0:	68 b4 9f 13 f0       	push   $0xf0139fb4
f0121cd5:	68 a0 06 00 00       	push   $0x6a0
f0121cda:	68 32 9f 13 f0       	push   $0xf0139f32
f0121cdf:	e8 cc e4 fd ff       	call   f01001b0 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f0121ce4:	c7 85 c4 fe ff ff ff 	movl   $0x1ffbff,-0x13c(%ebp)
f0121ceb:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0121cee:	e8 4b b1 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0121cf3:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121cf6:	e8 89 29 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0121cfb:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0121cfe:	83 ec 0c             	sub    $0xc,%esp
f0121d01:	68 00 08 00 00       	push   $0x800
f0121d06:	e8 48 65 fe ff       	call   f0108253 <kmalloc>
f0121d0b:	83 c4 10             	add    $0x10,%esp
f0121d0e:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121d14:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f0121d1a:	89 c1                	mov    %eax,%ecx
f0121d1c:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f0121d23:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0121d28:	0f b6 d0             	movzbl %al,%edx
f0121d2b:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0121d2e:	01 d0                	add    %edx,%eax
f0121d30:	48                   	dec    %eax
f0121d31:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f0121d34:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0121d37:	ba 00 00 00 00       	mov    $0x0,%edx
f0121d3c:	f7 75 a8             	divl   -0x58(%ebp)
f0121d3f:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0121d42:	29 d0                	sub    %edx,%eax
f0121d44:	89 c3                	mov    %eax,%ebx
f0121d46:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0121d4d:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0121d52:	0f b6 c0             	movzbl %al,%eax
f0121d55:	c1 e0 04             	shl    $0x4,%eax
f0121d58:	89 c2                	mov    %eax,%edx
f0121d5a:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0121d5d:	01 d0                	add    %edx,%eax
f0121d5f:	48                   	dec    %eax
f0121d60:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0121d63:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0121d66:	ba 00 00 00 00       	mov    $0x0,%edx
f0121d6b:	f7 75 a0             	divl   -0x60(%ebp)
f0121d6e:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0121d71:	29 d0                	sub    %edx,%eax
f0121d73:	01 d8                	add    %ebx,%eax
f0121d75:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0121d7a:	39 c1                	cmp    %eax,%ecx
f0121d7c:	74 17                	je     f0121d95 <test_kfree_bestfirstfit+0x340>
f0121d7e:	83 ec 04             	sub    $0x4,%esp
f0121d81:	68 18 a0 13 f0       	push   $0xf013a018
f0121d86:	68 a7 06 00 00       	push   $0x6a7
f0121d8b:	68 32 9f 13 f0       	push   $0xf0139f32
f0121d90:	e8 1b e4 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121d95:	e8 ea 28 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0121d9a:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121d9d:	74 17                	je     f0121db6 <test_kfree_bestfirstfit+0x361>
f0121d9f:	83 ec 04             	sub    $0x4,%esp
f0121da2:	68 4c 9f 13 f0       	push   $0xf0139f4c
f0121da7:	68 a8 06 00 00       	push   $0x6a8
f0121dac:	68 32 9f 13 f0       	push   $0xf0139f32
f0121db1:	e8 fa e3 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121db6:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121db9:	e8 80 b0 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0121dbe:	29 c3                	sub    %eax,%ebx
f0121dc0:	89 d8                	mov    %ebx,%eax
f0121dc2:	83 f8 01             	cmp    $0x1,%eax
f0121dc5:	74 17                	je     f0121dde <test_kfree_bestfirstfit+0x389>
f0121dc7:	83 ec 04             	sub    $0x4,%esp
f0121dca:	68 b4 9f 13 f0       	push   $0xf0139fb4
f0121dcf:	68 a9 06 00 00       	push   $0x6a9
f0121dd4:	68 32 9f 13 f0       	push   $0xf0139f32
f0121dd9:	e8 d2 e3 fd ff       	call   f01001b0 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f0121dde:	c7 85 c8 fe ff ff ff 	movl   $0x7ff,-0x138(%ebp)
f0121de5:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f0121de8:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f0121dee:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0121df1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121df8:	eb 0e                	jmp    f0121e08 <test_kfree_bestfirstfit+0x3b3>
		{
			ptr[i] = 2 ;
f0121dfa:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0121dfd:	8b 45 98             	mov    -0x68(%ebp),%eax
f0121e00:	01 d0                	add    %edx,%eax
f0121e02:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0121e05:	ff 45 f4             	incl   -0xc(%ebp)
f0121e08:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0121e0e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121e11:	7f e7                	jg     f0121dfa <test_kfree_bestfirstfit+0x3a5>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0121e13:	e8 26 b0 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0121e18:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121e1b:	e8 64 28 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0121e20:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0121e23:	83 ec 0c             	sub    $0xc,%esp
f0121e26:	68 00 08 00 00       	push   $0x800
f0121e2b:	e8 23 64 fe ff       	call   f0108253 <kmalloc>
f0121e30:	83 c4 10             	add    $0x10,%esp
f0121e33:	89 85 2c fe ff ff    	mov    %eax,-0x1d4(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121e39:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f0121e3f:	89 c1                	mov    %eax,%ecx
f0121e41:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f0121e48:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0121e4d:	0f b6 d0             	movzbl %al,%edx
f0121e50:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0121e53:	01 d0                	add    %edx,%eax
f0121e55:	48                   	dec    %eax
f0121e56:	89 45 90             	mov    %eax,-0x70(%ebp)
f0121e59:	8b 45 90             	mov    -0x70(%ebp),%eax
f0121e5c:	ba 00 00 00 00       	mov    $0x0,%edx
f0121e61:	f7 75 94             	divl   -0x6c(%ebp)
f0121e64:	8b 45 90             	mov    -0x70(%ebp),%eax
f0121e67:	29 d0                	sub    %edx,%eax
f0121e69:	89 c3                	mov    %eax,%ebx
f0121e6b:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f0121e72:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0121e77:	0f b6 c0             	movzbl %al,%eax
f0121e7a:	c1 e0 04             	shl    $0x4,%eax
f0121e7d:	89 c2                	mov    %eax,%edx
f0121e7f:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0121e82:	01 d0                	add    %edx,%eax
f0121e84:	48                   	dec    %eax
f0121e85:	89 45 88             	mov    %eax,-0x78(%ebp)
f0121e88:	8b 45 88             	mov    -0x78(%ebp),%eax
f0121e8b:	ba 00 00 00 00       	mov    $0x0,%edx
f0121e90:	f7 75 8c             	divl   -0x74(%ebp)
f0121e93:	8b 45 88             	mov    -0x78(%ebp),%eax
f0121e96:	29 d0                	sub    %edx,%eax
f0121e98:	01 d8                	add    %ebx,%eax
f0121e9a:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0121e9f:	39 c1                	cmp    %eax,%ecx
f0121ea1:	74 17                	je     f0121eba <test_kfree_bestfirstfit+0x465>
f0121ea3:	83 ec 04             	sub    $0x4,%esp
f0121ea6:	68 18 a0 13 f0       	push   $0xf013a018
f0121eab:	68 b5 06 00 00       	push   $0x6b5
f0121eb0:	68 32 9f 13 f0       	push   $0xf0139f32
f0121eb5:	e8 f6 e2 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121eba:	e8 c5 27 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0121ebf:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121ec2:	74 17                	je     f0121edb <test_kfree_bestfirstfit+0x486>
f0121ec4:	83 ec 04             	sub    $0x4,%esp
f0121ec7:	68 4c 9f 13 f0       	push   $0xf0139f4c
f0121ecc:	68 b6 06 00 00       	push   $0x6b6
f0121ed1:	68 32 9f 13 f0       	push   $0xf0139f32
f0121ed6:	e8 d5 e2 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121edb:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121ede:	e8 5b af fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0121ee3:	29 c3                	sub    %eax,%ebx
f0121ee5:	89 d8                	mov    %ebx,%eax
f0121ee7:	83 f8 01             	cmp    $0x1,%eax
f0121eea:	74 17                	je     f0121f03 <test_kfree_bestfirstfit+0x4ae>
f0121eec:	83 ec 04             	sub    $0x4,%esp
f0121eef:	68 b4 9f 13 f0       	push   $0xf0139fb4
f0121ef4:	68 b7 06 00 00       	push   $0x6b7
f0121ef9:	68 32 9f 13 f0       	push   $0xf0139f32
f0121efe:	e8 ad e2 fd ff       	call   f01001b0 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f0121f03:	c7 85 cc fe ff ff ff 	movl   $0x7ff,-0x134(%ebp)
f0121f0a:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f0121f0d:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f0121f13:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0121f16:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121f1d:	eb 0e                	jmp    f0121f2d <test_kfree_bestfirstfit+0x4d8>
		{
			ptr[i] = 3 ;
f0121f1f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0121f22:	8b 45 98             	mov    -0x68(%ebp),%eax
f0121f25:	01 d0                	add    %edx,%eax
f0121f27:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0121f2a:	ff 45 f4             	incl   -0xc(%ebp)
f0121f2d:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0121f33:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121f36:	7f e7                	jg     f0121f1f <test_kfree_bestfirstfit+0x4ca>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0121f38:	e8 01 af fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0121f3d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121f40:	e8 3f 27 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0121f45:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0121f48:	83 ec 0c             	sub    $0xc,%esp
f0121f4b:	68 00 1c 00 00       	push   $0x1c00
f0121f50:	e8 fe 62 fe ff       	call   f0108253 <kmalloc>
f0121f55:	83 c4 10             	add    $0x10,%esp
f0121f58:	89 85 30 fe ff ff    	mov    %eax,-0x1d0(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121f5e:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f0121f64:	89 c1                	mov    %eax,%ecx
f0121f66:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f0121f6d:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0121f72:	0f b6 d0             	movzbl %al,%edx
f0121f75:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0121f78:	01 d0                	add    %edx,%eax
f0121f7a:	48                   	dec    %eax
f0121f7b:	89 45 80             	mov    %eax,-0x80(%ebp)
f0121f7e:	8b 45 80             	mov    -0x80(%ebp),%eax
f0121f81:	ba 00 00 00 00       	mov    $0x0,%edx
f0121f86:	f7 75 84             	divl   -0x7c(%ebp)
f0121f89:	8b 45 80             	mov    -0x80(%ebp),%eax
f0121f8c:	29 d0                	sub    %edx,%eax
f0121f8e:	89 c3                	mov    %eax,%ebx
f0121f90:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f0121f97:	10 00 00 
f0121f9a:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0121f9f:	0f b6 c0             	movzbl %al,%eax
f0121fa2:	c1 e0 04             	shl    $0x4,%eax
f0121fa5:	89 c2                	mov    %eax,%edx
f0121fa7:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0121fad:	01 d0                	add    %edx,%eax
f0121faf:	48                   	dec    %eax
f0121fb0:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f0121fb6:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0121fbc:	ba 00 00 00 00       	mov    $0x0,%edx
f0121fc1:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f0121fc7:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0121fcd:	29 d0                	sub    %edx,%eax
f0121fcf:	01 d8                	add    %ebx,%eax
f0121fd1:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0121fd6:	39 c1                	cmp    %eax,%ecx
f0121fd8:	74 17                	je     f0121ff1 <test_kfree_bestfirstfit+0x59c>
f0121fda:	83 ec 04             	sub    $0x4,%esp
f0121fdd:	68 18 a0 13 f0       	push   $0xf013a018
f0121fe2:	68 c3 06 00 00       	push   $0x6c3
f0121fe7:	68 32 9f 13 f0       	push   $0xf0139f32
f0121fec:	e8 bf e1 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121ff1:	e8 8e 26 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0121ff6:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121ff9:	74 17                	je     f0122012 <test_kfree_bestfirstfit+0x5bd>
f0121ffb:	83 ec 04             	sub    $0x4,%esp
f0121ffe:	68 4c 9f 13 f0       	push   $0xf0139f4c
f0122003:	68 c4 06 00 00       	push   $0x6c4
f0122008:	68 32 9f 13 f0       	push   $0xf0139f32
f012200d:	e8 9e e1 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122012:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0122015:	e8 24 ae fe ff       	call   f010ce3e <sys_calculate_free_frames>
f012201a:	29 c3                	sub    %eax,%ebx
f012201c:	89 d8                	mov    %ebx,%eax
f012201e:	83 f8 02             	cmp    $0x2,%eax
f0122021:	74 17                	je     f012203a <test_kfree_bestfirstfit+0x5e5>
f0122023:	83 ec 04             	sub    $0x4,%esp
f0122026:	68 b4 9f 13 f0       	push   $0xf0139fb4
f012202b:	68 c5 06 00 00       	push   $0x6c5
f0122030:	68 32 9f 13 f0       	push   $0xf0139f32
f0122035:	e8 76 e1 fd ff       	call   f01001b0 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f012203a:	c7 85 d0 fe ff ff ff 	movl   $0x1bff,-0x130(%ebp)
f0122041:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f0122044:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f012204a:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f012204d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122054:	eb 0e                	jmp    f0122064 <test_kfree_bestfirstfit+0x60f>
		{
			ptr[i] = 4 ;
f0122056:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0122059:	8b 45 98             	mov    -0x68(%ebp),%eax
f012205c:	01 d0                	add    %edx,%eax
f012205e:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0122061:	ff 45 f4             	incl   -0xc(%ebp)
f0122064:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012206a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012206d:	7f e7                	jg     f0122056 <test_kfree_bestfirstfit+0x601>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f012206f:	e8 ca ad fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0122074:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122077:	e8 08 26 fe ff       	call   f0104684 <pf_calculate_free_frames>
f012207c:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f012207f:	83 ec 0c             	sub    $0xc,%esp
f0122082:	68 00 fc 2f 00       	push   $0x2ffc00
f0122087:	e8 c7 61 fe ff       	call   f0108253 <kmalloc>
f012208c:	83 c4 10             	add    $0x10,%esp
f012208f:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122095:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f012209b:	89 c1                	mov    %eax,%ecx
f012209d:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f01220a4:	10 00 00 
f01220a7:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f01220ac:	0f b6 d0             	movzbl %al,%edx
f01220af:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01220b5:	01 d0                	add    %edx,%eax
f01220b7:	48                   	dec    %eax
f01220b8:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f01220be:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01220c4:	ba 00 00 00 00       	mov    $0x0,%edx
f01220c9:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f01220cf:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01220d5:	29 d0                	sub    %edx,%eax
f01220d7:	89 c3                	mov    %eax,%ebx
f01220d9:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f01220e0:	10 00 00 
f01220e3:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f01220e8:	0f b6 c0             	movzbl %al,%eax
f01220eb:	c1 e0 04             	shl    $0x4,%eax
f01220ee:	89 c2                	mov    %eax,%edx
f01220f0:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01220f6:	01 d0                	add    %edx,%eax
f01220f8:	48                   	dec    %eax
f01220f9:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f01220ff:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0122105:	ba 00 00 00 00       	mov    $0x0,%edx
f012210a:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f0122110:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0122116:	29 d0                	sub    %edx,%eax
f0122118:	01 d8                	add    %ebx,%eax
f012211a:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f012211f:	39 c1                	cmp    %eax,%ecx
f0122121:	74 17                	je     f012213a <test_kfree_bestfirstfit+0x6e5>
f0122123:	83 ec 04             	sub    $0x4,%esp
f0122126:	68 18 a0 13 f0       	push   $0xf013a018
f012212b:	68 d1 06 00 00       	push   $0x6d1
f0122130:	68 32 9f 13 f0       	push   $0xf0139f32
f0122135:	e8 76 e0 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012213a:	e8 45 25 fe ff       	call   f0104684 <pf_calculate_free_frames>
f012213f:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122142:	74 17                	je     f012215b <test_kfree_bestfirstfit+0x706>
f0122144:	83 ec 04             	sub    $0x4,%esp
f0122147:	68 4c 9f 13 f0       	push   $0xf0139f4c
f012214c:	68 d2 06 00 00       	push   $0x6d2
f0122151:	68 32 9f 13 f0       	push   $0xf0139f32
f0122156:	e8 55 e0 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f012215b:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012215e:	e8 db ac fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0122163:	29 c3                	sub    %eax,%ebx
f0122165:	89 d8                	mov    %ebx,%eax
f0122167:	3d 00 03 00 00       	cmp    $0x300,%eax
f012216c:	74 17                	je     f0122185 <test_kfree_bestfirstfit+0x730>
f012216e:	83 ec 04             	sub    $0x4,%esp
f0122171:	68 b4 9f 13 f0       	push   $0xf0139fb4
f0122176:	68 d3 06 00 00       	push   $0x6d3
f012217b:	68 32 9f 13 f0       	push   $0xf0139f32
f0122180:	e8 2b e0 fd ff       	call   f01001b0 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f0122185:	c7 85 d4 fe ff ff ff 	movl   $0x2ffbff,-0x12c(%ebp)
f012218c:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f012218f:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f0122195:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0122198:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012219f:	eb 0e                	jmp    f01221af <test_kfree_bestfirstfit+0x75a>
		{
			ptr[i] = 5 ;
f01221a1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01221a4:	8b 45 98             	mov    -0x68(%ebp),%eax
f01221a7:	01 d0                	add    %edx,%eax
f01221a9:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f01221ac:	ff 45 f4             	incl   -0xc(%ebp)
f01221af:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f01221b5:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01221b8:	7f e7                	jg     f01221a1 <test_kfree_bestfirstfit+0x74c>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f01221ba:	e8 7f ac fe ff       	call   f010ce3e <sys_calculate_free_frames>
f01221bf:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01221c2:	e8 bd 24 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01221c7:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f01221ca:	83 ec 0c             	sub    $0xc,%esp
f01221cd:	68 00 fc 5f 00       	push   $0x5ffc00
f01221d2:	e8 7c 60 fe ff       	call   f0108253 <kmalloc>
f01221d7:	83 c4 10             	add    $0x10,%esp
f01221da:	89 85 38 fe ff ff    	mov    %eax,-0x1c8(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01221e0:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f01221e6:	89 c1                	mov    %eax,%ecx
f01221e8:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f01221ef:	10 00 00 
f01221f2:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f01221f7:	0f b6 d0             	movzbl %al,%edx
f01221fa:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0122200:	01 d0                	add    %edx,%eax
f0122202:	48                   	dec    %eax
f0122203:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f0122209:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012220f:	ba 00 00 00 00       	mov    $0x0,%edx
f0122214:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f012221a:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0122220:	29 d0                	sub    %edx,%eax
f0122222:	89 c3                	mov    %eax,%ebx
f0122224:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f012222b:	10 00 00 
f012222e:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0122233:	0f b6 c0             	movzbl %al,%eax
f0122236:	c1 e0 04             	shl    $0x4,%eax
f0122239:	89 c2                	mov    %eax,%edx
f012223b:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0122241:	01 d0                	add    %edx,%eax
f0122243:	48                   	dec    %eax
f0122244:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f012224a:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0122250:	ba 00 00 00 00       	mov    $0x0,%edx
f0122255:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f012225b:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0122261:	29 d0                	sub    %edx,%eax
f0122263:	01 d8                	add    %ebx,%eax
f0122265:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f012226a:	39 c1                	cmp    %eax,%ecx
f012226c:	74 17                	je     f0122285 <test_kfree_bestfirstfit+0x830>
f012226e:	83 ec 04             	sub    $0x4,%esp
f0122271:	68 18 a0 13 f0       	push   $0xf013a018
f0122276:	68 df 06 00 00       	push   $0x6df
f012227b:	68 32 9f 13 f0       	push   $0xf0139f32
f0122280:	e8 2b df fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122285:	e8 fa 23 fe ff       	call   f0104684 <pf_calculate_free_frames>
f012228a:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012228d:	74 17                	je     f01222a6 <test_kfree_bestfirstfit+0x851>
f012228f:	83 ec 04             	sub    $0x4,%esp
f0122292:	68 4c 9f 13 f0       	push   $0xf0139f4c
f0122297:	68 e0 06 00 00       	push   $0x6e0
f012229c:	68 32 9f 13 f0       	push   $0xf0139f32
f01222a1:	e8 0a df fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f01222a6:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01222a9:	e8 90 ab fe ff       	call   f010ce3e <sys_calculate_free_frames>
f01222ae:	29 c3                	sub    %eax,%ebx
f01222b0:	89 d8                	mov    %ebx,%eax
f01222b2:	3d 00 06 00 00       	cmp    $0x600,%eax
f01222b7:	74 17                	je     f01222d0 <test_kfree_bestfirstfit+0x87b>
f01222b9:	83 ec 04             	sub    $0x4,%esp
f01222bc:	68 b4 9f 13 f0       	push   $0xf0139fb4
f01222c1:	68 e1 06 00 00       	push   $0x6e1
f01222c6:	68 32 9f 13 f0       	push   $0xf0139f32
f01222cb:	e8 e0 de fd ff       	call   f01001b0 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f01222d0:	c7 85 d8 fe ff ff ff 	movl   $0x5ffbff,-0x128(%ebp)
f01222d7:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f01222da:	e8 5f ab fe ff       	call   f010ce3e <sys_calculate_free_frames>
f01222df:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01222e2:	e8 9d 23 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01222e7:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f01222ea:	83 ec 0c             	sub    $0xc,%esp
f01222ed:	68 00 38 00 00       	push   $0x3800
f01222f2:	e8 5c 5f fe ff       	call   f0108253 <kmalloc>
f01222f7:	83 c4 10             	add    $0x10,%esp
f01222fa:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122300:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0122306:	89 c1                	mov    %eax,%ecx
f0122308:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f012230f:	10 00 00 
f0122312:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0122317:	0f b6 d0             	movzbl %al,%edx
f012231a:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0122320:	01 d0                	add    %edx,%eax
f0122322:	48                   	dec    %eax
f0122323:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f0122329:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012232f:	ba 00 00 00 00       	mov    $0x0,%edx
f0122334:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f012233a:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0122340:	29 d0                	sub    %edx,%eax
f0122342:	89 c3                	mov    %eax,%ebx
f0122344:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f012234b:	10 00 00 
f012234e:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0122353:	0f b6 c0             	movzbl %al,%eax
f0122356:	c1 e0 04             	shl    $0x4,%eax
f0122359:	89 c2                	mov    %eax,%edx
f012235b:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0122361:	01 d0                	add    %edx,%eax
f0122363:	48                   	dec    %eax
f0122364:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f012236a:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0122370:	ba 00 00 00 00       	mov    $0x0,%edx
f0122375:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f012237b:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0122381:	29 d0                	sub    %edx,%eax
f0122383:	01 d8                	add    %ebx,%eax
f0122385:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f012238a:	39 c1                	cmp    %eax,%ecx
f012238c:	74 17                	je     f01223a5 <test_kfree_bestfirstfit+0x950>
f012238e:	83 ec 04             	sub    $0x4,%esp
f0122391:	68 18 a0 13 f0       	push   $0xf013a018
f0122396:	68 e8 06 00 00       	push   $0x6e8
f012239b:	68 32 9f 13 f0       	push   $0xf0139f32
f01223a0:	e8 0b de fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01223a5:	e8 da 22 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01223aa:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01223ad:	74 17                	je     f01223c6 <test_kfree_bestfirstfit+0x971>
f01223af:	83 ec 04             	sub    $0x4,%esp
f01223b2:	68 4c 9f 13 f0       	push   $0xf0139f4c
f01223b7:	68 e9 06 00 00       	push   $0x6e9
f01223bc:	68 32 9f 13 f0       	push   $0xf0139f32
f01223c1:	e8 ea dd fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f01223c6:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01223c9:	e8 70 aa fe ff       	call   f010ce3e <sys_calculate_free_frames>
f01223ce:	29 c3                	sub    %eax,%ebx
f01223d0:	89 d8                	mov    %ebx,%eax
f01223d2:	83 f8 04             	cmp    $0x4,%eax
f01223d5:	74 17                	je     f01223ee <test_kfree_bestfirstfit+0x999>
f01223d7:	83 ec 04             	sub    $0x4,%esp
f01223da:	68 b4 9f 13 f0       	push   $0xf0139fb4
f01223df:	68 ea 06 00 00       	push   $0x6ea
f01223e4:	68 32 9f 13 f0       	push   $0xf0139f32
f01223e9:	e8 c2 dd fd ff       	call   f01001b0 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f01223ee:	c7 85 dc fe ff ff ff 	movl   $0x37ff,-0x124(%ebp)
f01223f5:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f01223f8:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f01223fe:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0122401:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122408:	eb 0e                	jmp    f0122418 <test_kfree_bestfirstfit+0x9c3>
		{
			ptr[i] = 7 ;
f012240a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012240d:	8b 45 98             	mov    -0x68(%ebp),%eax
f0122410:	01 d0                	add    %edx,%eax
f0122412:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0122415:	ff 45 f4             	incl   -0xc(%ebp)
f0122418:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f012241e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122421:	7f e7                	jg     f012240a <test_kfree_bestfirstfit+0x9b5>
	}

	//kfree some of the allocated spaces [15%]
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0122423:	e8 16 aa fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0122428:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f012242e:	e8 51 22 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0122433:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[0]);
f0122439:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012243f:	83 ec 0c             	sub    $0xc,%esp
f0122442:	50                   	push   %eax
f0122443:	e8 96 5f fe ff       	call   f01083de <kfree>
f0122448:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012244b:	e8 34 22 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0122450:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f0122456:	74 17                	je     f012246f <test_kfree_bestfirstfit+0xa1a>
f0122458:	83 ec 04             	sub    $0x4,%esp
f012245b:	68 4c 9f 13 f0       	push   $0xf0139f4c
f0122460:	68 f9 06 00 00       	push   $0x6f9
f0122465:	68 32 9f 13 f0       	push   $0xf0139f32
f012246a:	e8 41 dd fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f012246f:	e8 ca a9 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0122474:	89 c2                	mov    %eax,%edx
f0122476:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012247c:	29 c2                	sub    %eax,%edx
f012247e:	89 d0                	mov    %edx,%eax
f0122480:	3d 00 02 00 00       	cmp    $0x200,%eax
f0122485:	74 17                	je     f012249e <test_kfree_bestfirstfit+0xa49>
f0122487:	83 ec 04             	sub    $0x4,%esp
f012248a:	68 bc a6 13 f0       	push   $0xf013a6bc
f012248f:	68 fa 06 00 00       	push   $0x6fa
f0122494:	68 32 9f 13 f0       	push   $0xf0139f32
f0122499:	e8 12 dd fd ff       	call   f01001b0 <_panic>

		//kfree 1st 2 KB
		freeFrames = sys_calculate_free_frames() ;
f012249e:	e8 9b a9 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f01224a3:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01224a9:	e8 d6 21 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01224ae:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[2]);
f01224b4:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f01224ba:	83 ec 0c             	sub    $0xc,%esp
f01224bd:	50                   	push   %eax
f01224be:	e8 1b 5f fe ff       	call   f01083de <kfree>
f01224c3:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01224c6:	e8 b9 21 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01224cb:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f01224d1:	74 17                	je     f01224ea <test_kfree_bestfirstfit+0xa95>
f01224d3:	83 ec 04             	sub    $0x4,%esp
f01224d6:	68 4c 9f 13 f0       	push   $0xf0139f4c
f01224db:	68 00 07 00 00       	push   $0x700
f01224e0:	68 32 9f 13 f0       	push   $0xf0139f32
f01224e5:	e8 c6 dc fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1 ) panic("Wrong kfree: pages in memory are not freed correctly");
f01224ea:	e8 4f a9 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f01224ef:	89 c2                	mov    %eax,%edx
f01224f1:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01224f7:	29 c2                	sub    %eax,%edx
f01224f9:	89 d0                	mov    %edx,%eax
f01224fb:	83 f8 01             	cmp    $0x1,%eax
f01224fe:	74 17                	je     f0122517 <test_kfree_bestfirstfit+0xac2>
f0122500:	83 ec 04             	sub    $0x4,%esp
f0122503:	68 bc a6 13 f0       	push   $0xf013a6bc
f0122508:	68 01 07 00 00       	push   $0x701
f012250d:	68 32 9f 13 f0       	push   $0xf0139f32
f0122512:	e8 99 dc fd ff       	call   f01001b0 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0122517:	e8 22 a9 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f012251c:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122522:	e8 5d 21 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0122527:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[1]);
f012252d:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f0122533:	83 ec 0c             	sub    $0xc,%esp
f0122536:	50                   	push   %eax
f0122537:	e8 a2 5e fe ff       	call   f01083de <kfree>
f012253c:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012253f:	e8 40 21 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0122544:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f012254a:	74 17                	je     f0122563 <test_kfree_bestfirstfit+0xb0e>
f012254c:	83 ec 04             	sub    $0x4,%esp
f012254f:	68 4c 9f 13 f0       	push   $0xf0139f4c
f0122554:	68 07 07 00 00       	push   $0x707
f0122559:	68 32 9f 13 f0       	push   $0xf0139f32
f012255e:	e8 4d dc fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f0122563:	e8 d6 a8 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0122568:	89 c2                	mov    %eax,%edx
f012256a:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0122570:	29 c2                	sub    %eax,%edx
f0122572:	89 d0                	mov    %edx,%eax
f0122574:	3d 00 02 00 00       	cmp    $0x200,%eax
f0122579:	74 17                	je     f0122592 <test_kfree_bestfirstfit+0xb3d>
f012257b:	83 ec 04             	sub    $0x4,%esp
f012257e:	68 bc a6 13 f0       	push   $0xf013a6bc
f0122583:	68 08 07 00 00       	push   $0x708
f0122588:	68 32 9f 13 f0       	push   $0xf0139f32
f012258d:	e8 1e dc fd ff       	call   f01001b0 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f0122592:	e8 a7 a8 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0122597:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012259d:	e8 e2 20 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01225a2:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[6]);
f01225a8:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f01225ae:	83 ec 0c             	sub    $0xc,%esp
f01225b1:	50                   	push   %eax
f01225b2:	e8 27 5e fe ff       	call   f01083de <kfree>
f01225b7:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01225ba:	e8 c5 20 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01225bf:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f01225c5:	74 17                	je     f01225de <test_kfree_bestfirstfit+0xb89>
f01225c7:	83 ec 04             	sub    $0x4,%esp
f01225ca:	68 4c 9f 13 f0       	push   $0xf0139f4c
f01225cf:	68 0e 07 00 00       	push   $0x70e
f01225d4:	68 32 9f 13 f0       	push   $0xf0139f32
f01225d9:	e8 d2 db fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f01225de:	e8 5b a8 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f01225e3:	89 c2                	mov    %eax,%edx
f01225e5:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01225eb:	29 c2                	sub    %eax,%edx
f01225ed:	89 d0                	mov    %edx,%eax
f01225ef:	3d 00 06 00 00       	cmp    $0x600,%eax
f01225f4:	74 17                	je     f012260d <test_kfree_bestfirstfit+0xbb8>
f01225f6:	83 ec 04             	sub    $0x4,%esp
f01225f9:	68 bc a6 13 f0       	push   $0xf013a6bc
f01225fe:	68 0f 07 00 00       	push   $0x70f
f0122603:	68 32 9f 13 f0       	push   $0xf0139f32
f0122608:	e8 a3 db fd ff       	call   f01001b0 <_panic>
	}

	cprintf("\nkfree: current evaluation = 15%");
f012260d:	83 ec 0c             	sub    $0xc,%esp
f0122610:	68 f4 a6 13 f0       	push   $0xf013a6f4
f0122615:	e8 17 e8 fd ff       	call   f0100e31 <cprintf>
f012261a:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
f012261d:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f0122623:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0122626:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012262d:	eb 1e                	jmp    f012264d <test_kfree_bestfirstfit+0xbf8>
		{
			sums[3] += ptr[i] ;
f012262f:	8b 95 7c fe ff ff    	mov    -0x184(%ebp),%edx
f0122635:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0122638:	8b 45 98             	mov    -0x68(%ebp),%eax
f012263b:	01 c8                	add    %ecx,%eax
f012263d:	8a 00                	mov    (%eax),%al
f012263f:	0f be c0             	movsbl %al,%eax
f0122642:	01 d0                	add    %edx,%eax
f0122644:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f012264a:	ff 45 f4             	incl   -0xc(%ebp)
f012264d:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0122653:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122656:	7f d7                	jg     f012262f <test_kfree_bestfirstfit+0xbda>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f0122658:	8b 95 7c fe ff ff    	mov    -0x184(%ebp),%edx
f012265e:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0122664:	89 c1                	mov    %eax,%ecx
f0122666:	01 c9                	add    %ecx,%ecx
f0122668:	01 c8                	add    %ecx,%eax
f012266a:	39 c2                	cmp    %eax,%edx
f012266c:	74 17                	je     f0122685 <test_kfree_bestfirstfit+0xc30>
f012266e:	83 ec 04             	sub    $0x4,%esp
f0122671:	68 18 a7 13 f0       	push   $0xf013a718
f0122676:	68 1c 07 00 00       	push   $0x71c
f012267b:	68 32 9f 13 f0       	push   $0xf0139f32
f0122680:	e8 2b db fd ff       	call   f01001b0 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f0122685:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f012268b:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f012268e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122695:	eb 1e                	jmp    f01226b5 <test_kfree_bestfirstfit+0xc60>
		{
			sums[4] += ptr[i] ;
f0122697:	8b 95 80 fe ff ff    	mov    -0x180(%ebp),%edx
f012269d:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01226a0:	8b 45 98             	mov    -0x68(%ebp),%eax
f01226a3:	01 c8                	add    %ecx,%eax
f01226a5:	8a 00                	mov    (%eax),%al
f01226a7:	0f be c0             	movsbl %al,%eax
f01226aa:	01 d0                	add    %edx,%eax
f01226ac:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f01226b2:	ff 45 f4             	incl   -0xc(%ebp)
f01226b5:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01226bb:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01226be:	7f d7                	jg     f0122697 <test_kfree_bestfirstfit+0xc42>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f01226c0:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f01226c6:	8b 95 d0 fe ff ff    	mov    -0x130(%ebp),%edx
f01226cc:	c1 e2 02             	shl    $0x2,%edx
f01226cf:	39 d0                	cmp    %edx,%eax
f01226d1:	74 17                	je     f01226ea <test_kfree_bestfirstfit+0xc95>
f01226d3:	83 ec 04             	sub    $0x4,%esp
f01226d6:	68 18 a7 13 f0       	push   $0xf013a718
f01226db:	68 24 07 00 00       	push   $0x724
f01226e0:	68 32 9f 13 f0       	push   $0xf0139f32
f01226e5:	e8 c6 da fd ff       	call   f01001b0 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f01226ea:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f01226f0:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f01226f3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01226fa:	eb 1e                	jmp    f012271a <test_kfree_bestfirstfit+0xcc5>
		{
			sums[5] += ptr[i] ;
f01226fc:	8b 95 84 fe ff ff    	mov    -0x17c(%ebp),%edx
f0122702:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0122705:	8b 45 98             	mov    -0x68(%ebp),%eax
f0122708:	01 c8                	add    %ecx,%eax
f012270a:	8a 00                	mov    (%eax),%al
f012270c:	0f be c0             	movsbl %al,%eax
f012270f:	01 d0                	add    %edx,%eax
f0122711:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0122717:	ff 45 f4             	incl   -0xc(%ebp)
f012271a:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0122720:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122723:	7f d7                	jg     f01226fc <test_kfree_bestfirstfit+0xca7>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f0122725:	8b 8d 84 fe ff ff    	mov    -0x17c(%ebp),%ecx
f012272b:	8b 95 d4 fe ff ff    	mov    -0x12c(%ebp),%edx
f0122731:	89 d0                	mov    %edx,%eax
f0122733:	c1 e0 02             	shl    $0x2,%eax
f0122736:	01 d0                	add    %edx,%eax
f0122738:	39 c1                	cmp    %eax,%ecx
f012273a:	74 17                	je     f0122753 <test_kfree_bestfirstfit+0xcfe>
f012273c:	83 ec 04             	sub    $0x4,%esp
f012273f:	68 18 a7 13 f0       	push   $0xf013a718
f0122744:	68 2c 07 00 00       	push   $0x72c
f0122749:	68 32 9f 13 f0       	push   $0xf0139f32
f012274e:	e8 5d da fd ff       	call   f01001b0 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f0122753:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0122759:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f012275c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122763:	eb 1e                	jmp    f0122783 <test_kfree_bestfirstfit+0xd2e>
		{
			sums[7] += ptr[i] ;
f0122765:	8b 95 8c fe ff ff    	mov    -0x174(%ebp),%edx
f012276b:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012276e:	8b 45 98             	mov    -0x68(%ebp),%eax
f0122771:	01 c8                	add    %ecx,%eax
f0122773:	8a 00                	mov    (%eax),%al
f0122775:	0f be c0             	movsbl %al,%eax
f0122778:	01 d0                	add    %edx,%eax
f012277a:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0122780:	ff 45 f4             	incl   -0xc(%ebp)
f0122783:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0122789:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012278c:	7f d7                	jg     f0122765 <test_kfree_bestfirstfit+0xd10>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f012278e:	8b 8d 8c fe ff ff    	mov    -0x174(%ebp),%ecx
f0122794:	8b 95 dc fe ff ff    	mov    -0x124(%ebp),%edx
f012279a:	89 d0                	mov    %edx,%eax
f012279c:	01 c0                	add    %eax,%eax
f012279e:	01 d0                	add    %edx,%eax
f01227a0:	01 c0                	add    %eax,%eax
f01227a2:	01 d0                	add    %edx,%eax
f01227a4:	39 c1                	cmp    %eax,%ecx
f01227a6:	74 17                	je     f01227bf <test_kfree_bestfirstfit+0xd6a>
f01227a8:	83 ec 04             	sub    $0x4,%esp
f01227ab:	68 18 a7 13 f0       	push   $0xf013a718
f01227b0:	68 34 07 00 00       	push   $0x734
f01227b5:	68 32 9f 13 f0       	push   $0xf0139f32
f01227ba:	e8 f1 d9 fd ff       	call   f01001b0 <_panic>
	}
	cprintf("\b\b\b30%");
f01227bf:	83 ec 0c             	sub    $0xc,%esp
f01227c2:	68 4b a7 13 f0       	push   $0xf013a74b
f01227c7:	e8 65 e6 fd ff       	call   f0100e31 <cprintf>
f01227cc:	83 c4 10             	add    $0x10,%esp

	//Allocate after kfree [15%]
	{
		//Allocate in merged freed space
		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f01227cf:	e8 6a a6 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f01227d4:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01227d7:	e8 a8 1e fe ff       	call   f0104684 <pf_calculate_free_frames>
f01227dc:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[8] = kmalloc(3*Mega);
f01227df:	83 ec 0c             	sub    $0xc,%esp
f01227e2:	68 00 00 30 00       	push   $0x300000
f01227e7:	e8 67 5a fe ff       	call   f0108253 <kmalloc>
f01227ec:	83 c4 10             	add    $0x10,%esp
f01227ef:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01227f5:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f01227fb:	89 c1                	mov    %eax,%ecx
f01227fd:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f0122804:	10 00 00 
f0122807:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f012280c:	0f b6 d0             	movzbl %al,%edx
f012280f:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0122815:	01 d0                	add    %edx,%eax
f0122817:	48                   	dec    %eax
f0122818:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f012281e:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0122824:	ba 00 00 00 00       	mov    $0x0,%edx
f0122829:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f012282f:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0122835:	29 d0                	sub    %edx,%eax
f0122837:	89 c3                	mov    %eax,%ebx
f0122839:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f0122840:	10 00 00 
f0122843:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0122848:	0f b6 c0             	movzbl %al,%eax
f012284b:	c1 e0 04             	shl    $0x4,%eax
f012284e:	89 c2                	mov    %eax,%edx
f0122850:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0122856:	01 d0                	add    %edx,%eax
f0122858:	48                   	dec    %eax
f0122859:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f012285f:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0122865:	ba 00 00 00 00       	mov    $0x0,%edx
f012286a:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f0122870:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0122876:	29 d0                	sub    %edx,%eax
f0122878:	01 d8                	add    %ebx,%eax
f012287a:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f012287f:	39 c1                	cmp    %eax,%ecx
f0122881:	74 17                	je     f012289a <test_kfree_bestfirstfit+0xe45>
f0122883:	83 ec 04             	sub    $0x4,%esp
f0122886:	68 18 a0 13 f0       	push   $0xf013a018
f012288b:	68 3f 07 00 00       	push   $0x73f
f0122890:	68 32 9f 13 f0       	push   $0xf0139f32
f0122895:	e8 16 d9 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012289a:	e8 e5 1d fe ff       	call   f0104684 <pf_calculate_free_frames>
f012289f:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01228a2:	74 17                	je     f01228bb <test_kfree_bestfirstfit+0xe66>
f01228a4:	83 ec 04             	sub    $0x4,%esp
f01228a7:	68 4c 9f 13 f0       	push   $0xf0139f4c
f01228ac:	68 40 07 00 00       	push   $0x740
f01228b1:	68 32 9f 13 f0       	push   $0xf0139f32
f01228b6:	e8 f5 d8 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f01228bb:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01228be:	e8 7b a5 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f01228c3:	29 c3                	sub    %eax,%ebx
f01228c5:	89 d8                	mov    %ebx,%eax
f01228c7:	3d 00 03 00 00       	cmp    $0x300,%eax
f01228cc:	74 17                	je     f01228e5 <test_kfree_bestfirstfit+0xe90>
f01228ce:	83 ec 04             	sub    $0x4,%esp
f01228d1:	68 b4 9f 13 f0       	push   $0xf0139fb4
f01228d6:	68 41 07 00 00       	push   $0x741
f01228db:	68 32 9f 13 f0       	push   $0xf0139f32
f01228e0:	e8 cb d8 fd ff       	call   f01001b0 <_panic>
		lastIndices[8] = (3*Mega)/sizeof(char) - 1;
f01228e5:	c7 85 e0 fe ff ff ff 	movl   $0x2fffff,-0x120(%ebp)
f01228ec:	ff 2f 00 
		ptr = (char*)ptr_allocations[8];
f01228ef:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f01228f5:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f01228f8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01228ff:	eb 0e                	jmp    f012290f <test_kfree_bestfirstfit+0xeba>
		{
			ptr[i] = 8 ;
f0122901:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0122904:	8b 45 98             	mov    -0x68(%ebp),%eax
f0122907:	01 d0                	add    %edx,%eax
f0122909:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (3*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f012290c:	ff 45 f4             	incl   -0xc(%ebp)
f012290f:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0122915:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122918:	7f e7                	jg     f0122901 <test_kfree_bestfirstfit+0xeac>
		{
			ptr[i] = 8 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f012291a:	e8 1f a5 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f012291f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122922:	e8 5d 1d fe ff       	call   f0104684 <pf_calculate_free_frames>
f0122927:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[9] = kmalloc(2*kilo);
f012292a:	83 ec 0c             	sub    $0xc,%esp
f012292d:	68 00 08 00 00       	push   $0x800
f0122932:	e8 1c 59 fe ff       	call   f0108253 <kmalloc>
f0122937:	83 c4 10             	add    $0x10,%esp
f012293a:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122940:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0122946:	89 c1                	mov    %eax,%ecx
f0122948:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f012294f:	10 00 00 
f0122952:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0122957:	0f b6 d0             	movzbl %al,%edx
f012295a:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0122960:	01 d0                	add    %edx,%eax
f0122962:	48                   	dec    %eax
f0122963:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f0122969:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012296f:	ba 00 00 00 00       	mov    $0x0,%edx
f0122974:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f012297a:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0122980:	29 d0                	sub    %edx,%eax
f0122982:	89 c3                	mov    %eax,%ebx
f0122984:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f012298b:	10 00 00 
f012298e:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0122993:	0f b6 c0             	movzbl %al,%eax
f0122996:	c1 e0 04             	shl    $0x4,%eax
f0122999:	89 c2                	mov    %eax,%edx
f012299b:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01229a1:	01 d0                	add    %edx,%eax
f01229a3:	48                   	dec    %eax
f01229a4:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f01229aa:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01229b0:	ba 00 00 00 00       	mov    $0x0,%edx
f01229b5:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f01229bb:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01229c1:	29 d0                	sub    %edx,%eax
f01229c3:	01 d8                	add    %ebx,%eax
f01229c5:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f01229ca:	39 c1                	cmp    %eax,%ecx
f01229cc:	74 17                	je     f01229e5 <test_kfree_bestfirstfit+0xf90>
f01229ce:	83 ec 04             	sub    $0x4,%esp
f01229d1:	68 18 a0 13 f0       	push   $0xf013a018
f01229d6:	68 4d 07 00 00       	push   $0x74d
f01229db:	68 32 9f 13 f0       	push   $0xf0139f32
f01229e0:	e8 cb d7 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01229e5:	e8 9a 1c fe ff       	call   f0104684 <pf_calculate_free_frames>
f01229ea:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01229ed:	74 17                	je     f0122a06 <test_kfree_bestfirstfit+0xfb1>
f01229ef:	83 ec 04             	sub    $0x4,%esp
f01229f2:	68 4c 9f 13 f0       	push   $0xf0139f4c
f01229f7:	68 4e 07 00 00       	push   $0x74e
f01229fc:	68 32 9f 13 f0       	push   $0xf0139f32
f0122a01:	e8 aa d7 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122a06:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0122a09:	e8 30 a4 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0122a0e:	29 c3                	sub    %eax,%ebx
f0122a10:	89 d8                	mov    %ebx,%eax
f0122a12:	83 f8 01             	cmp    $0x1,%eax
f0122a15:	74 17                	je     f0122a2e <test_kfree_bestfirstfit+0xfd9>
f0122a17:	83 ec 04             	sub    $0x4,%esp
f0122a1a:	68 b4 9f 13 f0       	push   $0xf0139fb4
f0122a1f:	68 4f 07 00 00       	push   $0x74f
f0122a24:	68 32 9f 13 f0       	push   $0xf0139f32
f0122a29:	e8 82 d7 fd ff       	call   f01001b0 <_panic>
		lastIndices[9] = (2*kilo)/sizeof(char) - 1;
f0122a2e:	c7 85 e4 fe ff ff ff 	movl   $0x7ff,-0x11c(%ebp)
f0122a35:	07 00 00 
		ptr = (char*)ptr_allocations[9];
f0122a38:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0122a3e:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f0122a41:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122a48:	eb 0e                	jmp    f0122a58 <test_kfree_bestfirstfit+0x1003>
		{
			ptr[i] = 9 ;
f0122a4a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0122a4d:	8b 45 98             	mov    -0x68(%ebp),%eax
f0122a50:	01 d0                	add    %edx,%eax
f0122a52:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f0122a55:	ff 45 f4             	incl   -0xc(%ebp)
f0122a58:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0122a5e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122a61:	7f e7                	jg     f0122a4a <test_kfree_bestfirstfit+0xff5>
		{
			ptr[i] = 9 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f0122a63:	e8 d6 a3 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0122a68:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122a6b:	e8 14 1c fe ff       	call   f0104684 <pf_calculate_free_frames>
f0122a70:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[10] = kmalloc(1*Mega);
f0122a73:	83 ec 0c             	sub    $0xc,%esp
f0122a76:	68 00 00 10 00       	push   $0x100000
f0122a7b:	e8 d3 57 fe ff       	call   f0108253 <kmalloc>
f0122a80:	83 c4 10             	add    $0x10,%esp
f0122a83:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122a89:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0122a8f:	89 c1                	mov    %eax,%ecx
f0122a91:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f0122a98:	10 00 00 
f0122a9b:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0122aa0:	0f b6 d0             	movzbl %al,%edx
f0122aa3:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0122aa9:	01 d0                	add    %edx,%eax
f0122aab:	48                   	dec    %eax
f0122aac:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f0122ab2:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0122ab8:	ba 00 00 00 00       	mov    $0x0,%edx
f0122abd:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f0122ac3:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0122ac9:	29 d0                	sub    %edx,%eax
f0122acb:	89 c3                	mov    %eax,%ebx
f0122acd:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f0122ad4:	10 00 00 
f0122ad7:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0122adc:	0f b6 c0             	movzbl %al,%eax
f0122adf:	c1 e0 04             	shl    $0x4,%eax
f0122ae2:	89 c2                	mov    %eax,%edx
f0122ae4:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0122aea:	01 d0                	add    %edx,%eax
f0122aec:	48                   	dec    %eax
f0122aed:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f0122af3:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0122af9:	ba 00 00 00 00       	mov    $0x0,%edx
f0122afe:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f0122b04:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0122b0a:	29 d0                	sub    %edx,%eax
f0122b0c:	01 d8                	add    %ebx,%eax
f0122b0e:	2d 00 b0 cf 09       	sub    $0x9cfb000,%eax
f0122b13:	39 c1                	cmp    %eax,%ecx
f0122b15:	74 17                	je     f0122b2e <test_kfree_bestfirstfit+0x10d9>
f0122b17:	83 ec 04             	sub    $0x4,%esp
f0122b1a:	68 18 a0 13 f0       	push   $0xf013a018
f0122b1f:	68 5b 07 00 00       	push   $0x75b
f0122b24:	68 32 9f 13 f0       	push   $0xf0139f32
f0122b29:	e8 82 d6 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122b2e:	e8 51 1b fe ff       	call   f0104684 <pf_calculate_free_frames>
f0122b33:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122b36:	74 17                	je     f0122b4f <test_kfree_bestfirstfit+0x10fa>
f0122b38:	83 ec 04             	sub    $0x4,%esp
f0122b3b:	68 4c 9f 13 f0       	push   $0xf0139f4c
f0122b40:	68 5c 07 00 00       	push   $0x75c
f0122b45:	68 32 9f 13 f0       	push   $0xf0139f32
f0122b4a:	e8 61 d6 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122b4f:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0122b52:	e8 e7 a2 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0122b57:	29 c3                	sub    %eax,%ebx
f0122b59:	89 d8                	mov    %ebx,%eax
f0122b5b:	3d 00 01 00 00       	cmp    $0x100,%eax
f0122b60:	74 17                	je     f0122b79 <test_kfree_bestfirstfit+0x1124>
f0122b62:	83 ec 04             	sub    $0x4,%esp
f0122b65:	68 b4 9f 13 f0       	push   $0xf0139fb4
f0122b6a:	68 5d 07 00 00       	push   $0x75d
f0122b6f:	68 32 9f 13 f0       	push   $0xf0139f32
f0122b74:	e8 37 d6 fd ff       	call   f01001b0 <_panic>
		lastIndices[10] = (1*Mega)/sizeof(char) - 1;
f0122b79:	c7 85 e8 fe ff ff ff 	movl   $0xfffff,-0x118(%ebp)
f0122b80:	ff 0f 00 
		ptr = (char*)ptr_allocations[10];
f0122b83:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0122b89:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[10]; ++i)
f0122b8c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122b93:	eb 0e                	jmp    f0122ba3 <test_kfree_bestfirstfit+0x114e>
		{
			ptr[i] = 10 ;
f0122b95:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0122b98:	8b 45 98             	mov    -0x68(%ebp),%eax
f0122b9b:	01 d0                	add    %edx,%eax
f0122b9d:	c6 00 0a             	movb   $0xa,(%eax)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[10] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[10];
		for (i = 0; i < lastIndices[10]; ++i)
f0122ba0:	ff 45 f4             	incl   -0xc(%ebp)
f0122ba3:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0122ba9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122bac:	7f e7                	jg     f0122b95 <test_kfree_bestfirstfit+0x1140>
		{
			ptr[i] = 10 ;
		}
	}
	cprintf("\b\b\b45%");
f0122bae:	83 ec 0c             	sub    $0xc,%esp
f0122bb1:	68 52 a7 13 f0       	push   $0xf013a752
f0122bb6:	e8 76 e2 fd ff       	call   f0100e31 <cprintf>
f0122bbb:	83 c4 10             	add    $0x10,%esp

	//kfree remaining allocated spaces [15%]
	{
		//kfree 7 KB
		freeFrames = sys_calculate_free_frames() ;
f0122bbe:	e8 7b a2 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0122bc3:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122bc6:	e8 b9 1a fe ff       	call   f0104684 <pf_calculate_free_frames>
f0122bcb:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[4]);
f0122bce:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f0122bd4:	83 ec 0c             	sub    $0xc,%esp
f0122bd7:	50                   	push   %eax
f0122bd8:	e8 01 58 fe ff       	call   f01083de <kfree>
f0122bdd:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122be0:	e8 9f 1a fe ff       	call   f0104684 <pf_calculate_free_frames>
f0122be5:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122be8:	74 17                	je     f0122c01 <test_kfree_bestfirstfit+0x11ac>
f0122bea:	83 ec 04             	sub    $0x4,%esp
f0122bed:	68 4c 9f 13 f0       	push   $0xf0139f4c
f0122bf2:	68 6d 07 00 00       	push   $0x76d
f0122bf7:	68 32 9f 13 f0       	push   $0xf0139f32
f0122bfc:	e8 af d5 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 2) panic("Wrong kfree: pages in memory are not freed correctly");
f0122c01:	e8 38 a2 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0122c06:	89 c2                	mov    %eax,%edx
f0122c08:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122c0b:	29 c2                	sub    %eax,%edx
f0122c0d:	89 d0                	mov    %edx,%eax
f0122c0f:	83 f8 02             	cmp    $0x2,%eax
f0122c12:	74 17                	je     f0122c2b <test_kfree_bestfirstfit+0x11d6>
f0122c14:	83 ec 04             	sub    $0x4,%esp
f0122c17:	68 bc a6 13 f0       	push   $0xf013a6bc
f0122c1c:	68 6e 07 00 00       	push   $0x76e
f0122c21:	68 32 9f 13 f0       	push   $0xf0139f32
f0122c26:	e8 85 d5 fd ff       	call   f01001b0 <_panic>

		//kfree 3 MB
		freeFrames = sys_calculate_free_frames() ;
f0122c2b:	e8 0e a2 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0122c30:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122c33:	e8 4c 1a fe ff       	call   f0104684 <pf_calculate_free_frames>
f0122c38:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[5]);
f0122c3b:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f0122c41:	83 ec 0c             	sub    $0xc,%esp
f0122c44:	50                   	push   %eax
f0122c45:	e8 94 57 fe ff       	call   f01083de <kfree>
f0122c4a:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122c4d:	e8 32 1a fe ff       	call   f0104684 <pf_calculate_free_frames>
f0122c52:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122c55:	74 17                	je     f0122c6e <test_kfree_bestfirstfit+0x1219>
f0122c57:	83 ec 04             	sub    $0x4,%esp
f0122c5a:	68 4c 9f 13 f0       	push   $0xf0139f4c
f0122c5f:	68 74 07 00 00       	push   $0x774
f0122c64:	68 32 9f 13 f0       	push   $0xf0139f32
f0122c69:	e8 42 d5 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0122c6e:	e8 cb a1 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0122c73:	89 c2                	mov    %eax,%edx
f0122c75:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122c78:	29 c2                	sub    %eax,%edx
f0122c7a:	89 d0                	mov    %edx,%eax
f0122c7c:	3d 00 03 00 00       	cmp    $0x300,%eax
f0122c81:	74 17                	je     f0122c9a <test_kfree_bestfirstfit+0x1245>
f0122c83:	83 ec 04             	sub    $0x4,%esp
f0122c86:	68 bc a6 13 f0       	push   $0xf013a6bc
f0122c8b:	68 75 07 00 00       	push   $0x775
f0122c90:	68 32 9f 13 f0       	push   $0xf0139f32
f0122c95:	e8 16 d5 fd ff       	call   f01001b0 <_panic>

		//kfree 2nd 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0122c9a:	e8 9f a1 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0122c9f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122ca2:	e8 dd 19 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0122ca7:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[3]);
f0122caa:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f0122cb0:	83 ec 0c             	sub    $0xc,%esp
f0122cb3:	50                   	push   %eax
f0122cb4:	e8 25 57 fe ff       	call   f01083de <kfree>
f0122cb9:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122cbc:	e8 c3 19 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0122cc1:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122cc4:	74 17                	je     f0122cdd <test_kfree_bestfirstfit+0x1288>
f0122cc6:	83 ec 04             	sub    $0x4,%esp
f0122cc9:	68 4c 9f 13 f0       	push   $0xf0139f4c
f0122cce:	68 7b 07 00 00       	push   $0x77b
f0122cd3:	68 32 9f 13 f0       	push   $0xf0139f32
f0122cd8:	e8 d3 d4 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f0122cdd:	e8 5c a1 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0122ce2:	89 c2                	mov    %eax,%edx
f0122ce4:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122ce7:	29 c2                	sub    %eax,%edx
f0122ce9:	89 d0                	mov    %edx,%eax
f0122ceb:	83 f8 01             	cmp    $0x1,%eax
f0122cee:	74 17                	je     f0122d07 <test_kfree_bestfirstfit+0x12b2>
f0122cf0:	83 ec 04             	sub    $0x4,%esp
f0122cf3:	68 bc a6 13 f0       	push   $0xf013a6bc
f0122cf8:	68 7c 07 00 00       	push   $0x77c
f0122cfd:	68 32 9f 13 f0       	push   $0xf0139f32
f0122d02:	e8 a9 d4 fd ff       	call   f01001b0 <_panic>

		//kfree 14 KB
		freeFrames = sys_calculate_free_frames() ;
f0122d07:	e8 32 a1 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0122d0c:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122d0f:	e8 70 19 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0122d14:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[7]);
f0122d17:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0122d1d:	83 ec 0c             	sub    $0xc,%esp
f0122d20:	50                   	push   %eax
f0122d21:	e8 b8 56 fe ff       	call   f01083de <kfree>
f0122d26:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122d29:	e8 56 19 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0122d2e:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122d31:	74 17                	je     f0122d4a <test_kfree_bestfirstfit+0x12f5>
f0122d33:	83 ec 04             	sub    $0x4,%esp
f0122d36:	68 4c 9f 13 f0       	push   $0xf0139f4c
f0122d3b:	68 82 07 00 00       	push   $0x782
f0122d40:	68 32 9f 13 f0       	push   $0xf0139f32
f0122d45:	e8 66 d4 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 4) panic("Wrong kfree: pages in memory are not freed correctly");
f0122d4a:	e8 ef a0 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0122d4f:	89 c2                	mov    %eax,%edx
f0122d51:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122d54:	29 c2                	sub    %eax,%edx
f0122d56:	89 d0                	mov    %edx,%eax
f0122d58:	83 f8 04             	cmp    $0x4,%eax
f0122d5b:	74 17                	je     f0122d74 <test_kfree_bestfirstfit+0x131f>
f0122d5d:	83 ec 04             	sub    $0x4,%esp
f0122d60:	68 bc a6 13 f0       	push   $0xf013a6bc
f0122d65:	68 83 07 00 00       	push   $0x783
f0122d6a:	68 32 9f 13 f0       	push   $0xf0139f32
f0122d6f:	e8 3c d4 fd ff       	call   f01001b0 <_panic>

		//kfree 3 MB
		freeFrames = sys_calculate_free_frames() ;
f0122d74:	e8 c5 a0 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0122d79:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122d7c:	e8 03 19 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0122d81:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f0122d84:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0122d8a:	83 ec 0c             	sub    $0xc,%esp
f0122d8d:	50                   	push   %eax
f0122d8e:	e8 4b 56 fe ff       	call   f01083de <kfree>
f0122d93:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122d96:	e8 e9 18 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0122d9b:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122d9e:	74 17                	je     f0122db7 <test_kfree_bestfirstfit+0x1362>
f0122da0:	83 ec 04             	sub    $0x4,%esp
f0122da3:	68 4c 9f 13 f0       	push   $0xf0139f4c
f0122da8:	68 89 07 00 00       	push   $0x789
f0122dad:	68 32 9f 13 f0       	push   $0xf0139f32
f0122db2:	e8 f9 d3 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0122db7:	e8 82 a0 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0122dbc:	89 c2                	mov    %eax,%edx
f0122dbe:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122dc1:	29 c2                	sub    %eax,%edx
f0122dc3:	89 d0                	mov    %edx,%eax
f0122dc5:	3d 00 03 00 00       	cmp    $0x300,%eax
f0122dca:	74 17                	je     f0122de3 <test_kfree_bestfirstfit+0x138e>
f0122dcc:	83 ec 04             	sub    $0x4,%esp
f0122dcf:	68 bc a6 13 f0       	push   $0xf013a6bc
f0122dd4:	68 8a 07 00 00       	push   $0x78a
f0122dd9:	68 32 9f 13 f0       	push   $0xf0139f32
f0122dde:	e8 cd d3 fd ff       	call   f01001b0 <_panic>

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0122de3:	e8 56 a0 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0122de8:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122deb:	e8 94 18 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0122df0:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f0122df3:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0122df9:	83 ec 0c             	sub    $0xc,%esp
f0122dfc:	50                   	push   %eax
f0122dfd:	e8 dc 55 fe ff       	call   f01083de <kfree>
f0122e02:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122e05:	e8 7a 18 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0122e0a:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122e0d:	74 17                	je     f0122e26 <test_kfree_bestfirstfit+0x13d1>
f0122e0f:	83 ec 04             	sub    $0x4,%esp
f0122e12:	68 4c 9f 13 f0       	push   $0xf0139f4c
f0122e17:	68 90 07 00 00       	push   $0x790
f0122e1c:	68 32 9f 13 f0       	push   $0xf0139f32
f0122e21:	e8 8a d3 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f0122e26:	e8 13 a0 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0122e2b:	89 c2                	mov    %eax,%edx
f0122e2d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122e30:	29 c2                	sub    %eax,%edx
f0122e32:	89 d0                	mov    %edx,%eax
f0122e34:	83 f8 01             	cmp    $0x1,%eax
f0122e37:	74 17                	je     f0122e50 <test_kfree_bestfirstfit+0x13fb>
f0122e39:	83 ec 04             	sub    $0x4,%esp
f0122e3c:	68 bc a6 13 f0       	push   $0xf013a6bc
f0122e41:	68 91 07 00 00       	push   $0x791
f0122e46:	68 32 9f 13 f0       	push   $0xf0139f32
f0122e4b:	e8 60 d3 fd ff       	call   f01001b0 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0122e50:	e8 e9 9f fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0122e55:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122e58:	e8 27 18 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0122e5d:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[10]);
f0122e60:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0122e66:	83 ec 0c             	sub    $0xc,%esp
f0122e69:	50                   	push   %eax
f0122e6a:	e8 6f 55 fe ff       	call   f01083de <kfree>
f0122e6f:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122e72:	e8 0d 18 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0122e77:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122e7a:	74 17                	je     f0122e93 <test_kfree_bestfirstfit+0x143e>
f0122e7c:	83 ec 04             	sub    $0x4,%esp
f0122e7f:	68 4c 9f 13 f0       	push   $0xf0139f4c
f0122e84:	68 97 07 00 00       	push   $0x797
f0122e89:	68 32 9f 13 f0       	push   $0xf0139f32
f0122e8e:	e8 1d d3 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0122e93:	e8 a6 9f fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0122e98:	89 c2                	mov    %eax,%edx
f0122e9a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122e9d:	29 c2                	sub    %eax,%edx
f0122e9f:	89 d0                	mov    %edx,%eax
f0122ea1:	3d 00 01 00 00       	cmp    $0x100,%eax
f0122ea6:	74 17                	je     f0122ebf <test_kfree_bestfirstfit+0x146a>
f0122ea8:	83 ec 04             	sub    $0x4,%esp
f0122eab:	68 bc a6 13 f0       	push   $0xf013a6bc
f0122eb0:	68 98 07 00 00       	push   $0x798
f0122eb5:	68 32 9f 13 f0       	push   $0xf0139f32
f0122eba:	e8 f1 d2 fd ff       	call   f01001b0 <_panic>

		if(start_freeFrames != (sys_calculate_free_frames())) {panic("Wrong kfree: not all pages removed correctly at end");}
f0122ebf:	e8 7a 9f fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0122ec4:	89 c2                	mov    %eax,%edx
f0122ec6:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0122ec9:	39 c2                	cmp    %eax,%edx
f0122ecb:	74 17                	je     f0122ee4 <test_kfree_bestfirstfit+0x148f>
f0122ecd:	83 ec 04             	sub    $0x4,%esp
f0122ed0:	68 5c a7 13 f0       	push   $0xf013a75c
f0122ed5:	68 9a 07 00 00       	push   $0x79a
f0122eda:	68 32 9f 13 f0       	push   $0xf0139f32
f0122edf:	e8 cc d2 fd ff       	call   f01001b0 <_panic>
	}
	cprintf("\b\b\b60%");
f0122ee4:	83 ec 0c             	sub    $0xc,%esp
f0122ee7:	68 90 a7 13 f0       	push   $0xf013a790
f0122eec:	e8 40 df fd ff       	call   f0100e31 <cprintf>
f0122ef1:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f0122ef4:	83 ec 0c             	sub    $0xc,%esp
f0122ef7:	6a 03                	push   $0x3
f0122ef9:	e8 db a3 fe ff       	call   f010d2d9 <sys_bypassPageFault>
f0122efe:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 10; ++i)
f0122f01:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122f08:	e9 82 00 00 00       	jmp    f0122f8f <test_kfree_bestfirstfit+0x153a>
		{
			ptr = (char *) ptr_allocations[i];
f0122f0d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0122f10:	8b 84 85 20 fe ff ff 	mov    -0x1e0(%ebp,%eax,4),%eax
f0122f17:	89 45 98             	mov    %eax,-0x68(%ebp)
			ptr[0] = 10;
f0122f1a:	8b 45 98             	mov    -0x68(%ebp),%eax
f0122f1d:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0122f20:	e8 a2 a3 fe ff       	call   f010d2c7 <sys_rcr2>
f0122f25:	89 c2                	mov    %eax,%edx
f0122f27:	8b 45 98             	mov    -0x68(%ebp),%eax
f0122f2a:	39 c2                	cmp    %eax,%edx
f0122f2c:	74 17                	je     f0122f45 <test_kfree_bestfirstfit+0x14f0>
f0122f2e:	83 ec 04             	sub    $0x4,%esp
f0122f31:	68 98 a7 13 f0       	push   $0xf013a798
f0122f36:	68 a9 07 00 00       	push   $0x7a9
f0122f3b:	68 32 9f 13 f0       	push   $0xf0139f32
f0122f40:	e8 6b d2 fd ff       	call   f01001b0 <_panic>
			ptr[lastIndices[i]] = 10;
f0122f45:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0122f48:	8b 84 85 c0 fe ff ff 	mov    -0x140(%ebp,%eax,4),%eax
f0122f4f:	89 c2                	mov    %eax,%edx
f0122f51:	8b 45 98             	mov    -0x68(%ebp),%eax
f0122f54:	01 d0                	add    %edx,%eax
f0122f56:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0122f59:	e8 69 a3 fe ff       	call   f010d2c7 <sys_rcr2>
f0122f5e:	89 c2                	mov    %eax,%edx
f0122f60:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0122f63:	8b 84 85 c0 fe ff ff 	mov    -0x140(%ebp,%eax,4),%eax
f0122f6a:	89 c1                	mov    %eax,%ecx
f0122f6c:	8b 45 98             	mov    -0x68(%ebp),%eax
f0122f6f:	01 c8                	add    %ecx,%eax
f0122f71:	39 c2                	cmp    %eax,%edx
f0122f73:	74 17                	je     f0122f8c <test_kfree_bestfirstfit+0x1537>
f0122f75:	83 ec 04             	sub    $0x4,%esp
f0122f78:	68 98 a7 13 f0       	push   $0xf013a798
f0122f7d:	68 ab 07 00 00       	push   $0x7ab
f0122f82:	68 32 9f 13 f0       	push   $0xf0139f32
f0122f87:	e8 24 d2 fd ff       	call   f01001b0 <_panic>
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 10; ++i)
f0122f8c:	ff 45 f4             	incl   -0xc(%ebp)
f0122f8f:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
f0122f93:	0f 8e 74 ff ff ff    	jle    f0122f0d <test_kfree_bestfirstfit+0x14b8>
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f0122f99:	83 ec 0c             	sub    $0xc,%esp
f0122f9c:	6a 00                	push   $0x0
f0122f9e:	e8 36 a3 fe ff       	call   f010d2d9 <sys_bypassPageFault>
f0122fa3:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("\b\b\b75%");
f0122fa6:	83 ec 0c             	sub    $0xc,%esp
f0122fa9:	68 dd a7 13 f0       	push   $0xf013a7dd
f0122fae:	e8 7e de fd ff       	call   f0100e31 <cprintf>
f0122fb3:	83 c4 10             	add    $0x10,%esp

	//kfree non-exist item [10%]
	{
		//kfree 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0122fb6:	e8 83 9e fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0122fbb:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122fbe:	e8 c1 16 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0122fc3:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[0]);
f0122fc6:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f0122fcc:	83 ec 0c             	sub    $0xc,%esp
f0122fcf:	50                   	push   %eax
f0122fd0:	e8 09 54 fe ff       	call   f01083de <kfree>
f0122fd5:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122fd8:	e8 a7 16 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0122fdd:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122fe0:	74 17                	je     f0122ff9 <test_kfree_bestfirstfit+0x15a4>
f0122fe2:	83 ec 04             	sub    $0x4,%esp
f0122fe5:	68 4c 9f 13 f0       	push   $0xf0139f4c
f0122fea:	68 b9 07 00 00       	push   $0x7b9
f0122fef:	68 32 9f 13 f0       	push   $0xf0139f32
f0122ff4:	e8 b7 d1 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0122ff9:	e8 40 9e fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0122ffe:	89 c2                	mov    %eax,%edx
f0123000:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0123003:	39 c2                	cmp    %eax,%edx
f0123005:	74 17                	je     f012301e <test_kfree_bestfirstfit+0x15c9>
f0123007:	83 ec 04             	sub    $0x4,%esp
f012300a:	68 e4 a7 13 f0       	push   $0xf013a7e4
f012300f:	68 ba 07 00 00       	push   $0x7ba
f0123014:	68 32 9f 13 f0       	push   $0xf0139f32
f0123019:	e8 92 d1 fd ff       	call   f01001b0 <_panic>

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f012301e:	e8 1b 9e fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0123023:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123026:	e8 59 16 fe ff       	call   f0104684 <pf_calculate_free_frames>
f012302b:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f012302e:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f0123034:	83 ec 0c             	sub    $0xc,%esp
f0123037:	50                   	push   %eax
f0123038:	e8 a1 53 fe ff       	call   f01083de <kfree>
f012303d:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123040:	e8 3f 16 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0123045:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123048:	74 17                	je     f0123061 <test_kfree_bestfirstfit+0x160c>
f012304a:	83 ec 04             	sub    $0x4,%esp
f012304d:	68 4c 9f 13 f0       	push   $0xf0139f4c
f0123052:	68 c0 07 00 00       	push   $0x7c0
f0123057:	68 32 9f 13 f0       	push   $0xf0139f32
f012305c:	e8 4f d1 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0123061:	e8 d8 9d fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0123066:	89 c2                	mov    %eax,%edx
f0123068:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012306b:	39 c2                	cmp    %eax,%edx
f012306d:	74 17                	je     f0123086 <test_kfree_bestfirstfit+0x1631>
f012306f:	83 ec 04             	sub    $0x4,%esp
f0123072:	68 e4 a7 13 f0       	push   $0xf013a7e4
f0123077:	68 c1 07 00 00       	push   $0x7c1
f012307c:	68 32 9f 13 f0       	push   $0xf0139f32
f0123081:	e8 2a d1 fd ff       	call   f01001b0 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f0123086:	e8 b3 9d fe ff       	call   f010ce3e <sys_calculate_free_frames>
f012308b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012308e:	e8 f1 15 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0123093:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f0123096:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012309c:	83 ec 0c             	sub    $0xc,%esp
f012309f:	50                   	push   %eax
f01230a0:	e8 39 53 fe ff       	call   f01083de <kfree>
f01230a5:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01230a8:	e8 d7 15 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01230ad:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01230b0:	74 17                	je     f01230c9 <test_kfree_bestfirstfit+0x1674>
f01230b2:	83 ec 04             	sub    $0x4,%esp
f01230b5:	68 4c 9f 13 f0       	push   $0xf0139f4c
f01230ba:	68 c7 07 00 00       	push   $0x7c7
f01230bf:	68 32 9f 13 f0       	push   $0xf0139f32
f01230c4:	e8 e7 d0 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f01230c9:	e8 70 9d fe ff       	call   f010ce3e <sys_calculate_free_frames>
f01230ce:	89 c2                	mov    %eax,%edx
f01230d0:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01230d3:	39 c2                	cmp    %eax,%edx
f01230d5:	74 17                	je     f01230ee <test_kfree_bestfirstfit+0x1699>
f01230d7:	83 ec 04             	sub    $0x4,%esp
f01230da:	68 e4 a7 13 f0       	push   $0xf013a7e4
f01230df:	68 c8 07 00 00       	push   $0x7c8
f01230e4:	68 32 9f 13 f0       	push   $0xf0139f32
f01230e9:	e8 c2 d0 fd ff       	call   f01001b0 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f01230ee:	e8 4b 9d fe ff       	call   f010ce3e <sys_calculate_free_frames>
f01230f3:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01230f6:	e8 89 15 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01230fb:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f01230fe:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0123104:	83 ec 0c             	sub    $0xc,%esp
f0123107:	50                   	push   %eax
f0123108:	e8 d1 52 fe ff       	call   f01083de <kfree>
f012310d:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123110:	e8 6f 15 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0123115:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123118:	74 17                	je     f0123131 <test_kfree_bestfirstfit+0x16dc>
f012311a:	83 ec 04             	sub    $0x4,%esp
f012311d:	68 4c 9f 13 f0       	push   $0xf0139f4c
f0123122:	68 ce 07 00 00       	push   $0x7ce
f0123127:	68 32 9f 13 f0       	push   $0xf0139f32
f012312c:	e8 7f d0 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0123131:	e8 08 9d fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0123136:	89 c2                	mov    %eax,%edx
f0123138:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012313b:	39 c2                	cmp    %eax,%edx
f012313d:	74 17                	je     f0123156 <test_kfree_bestfirstfit+0x1701>
f012313f:	83 ec 04             	sub    $0x4,%esp
f0123142:	68 e4 a7 13 f0       	push   $0xf013a7e4
f0123147:	68 cf 07 00 00       	push   $0x7cf
f012314c:	68 32 9f 13 f0       	push   $0xf0139f32
f0123151:	e8 5a d0 fd ff       	call   f01001b0 <_panic>

	}
	cprintf("\b\b\b85%");
f0123156:	83 ec 0c             	sub    $0xc,%esp
f0123159:	68 2b a8 13 f0       	push   $0xf013a82b
f012315e:	e8 ce dc fd ff       	call   f0100e31 <cprintf>
f0123163:	83 c4 10             	add    $0x10,%esp

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0123166:	c7 45 e8 00 00 00 f6 	movl   $0xf6000000,-0x18(%ebp)
f012316d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0123174:	eb 48                	jmp    f01231be <test_kfree_bestfirstfit+0x1769>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va, &ptr_table);
f0123176:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0123179:	a1 30 ce 2b f0       	mov    0xf02bce30,%eax
f012317e:	83 ec 04             	sub    $0x4,%esp
f0123181:	8d 8d 1c fe ff ff    	lea    -0x1e4(%ebp),%ecx
f0123187:	51                   	push   %ecx
f0123188:	52                   	push   %edx
f0123189:	50                   	push   %eax
f012318a:	e8 58 43 fe ff       	call   f01074e7 <get_page_table>
f012318f:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0123192:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f0123198:	85 c0                	test   %eax,%eax
f012319a:	75 17                	jne    f01231b3 <test_kfree_bestfirstfit+0x175e>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
f012319c:	83 ec 04             	sub    $0x4,%esp
f012319f:	68 34 a8 13 f0       	push   $0xf013a834
f01231a4:	68 dd 07 00 00       	push   $0x7dd
f01231a9:	68 32 9f 13 f0       	push   $0xf0139f32
f01231ae:	e8 fd cf fd ff       	call   f01001b0 <_panic>
	cprintf("\b\b\b85%");

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f01231b3:	81 45 e8 00 00 40 00 	addl   $0x400000,-0x18(%ebp)
f01231ba:	83 55 ec 00          	adcl   $0x0,-0x14(%ebp)
f01231be:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01231c2:	78 b2                	js     f0123176 <test_kfree_bestfirstfit+0x1721>
f01231c4:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01231c8:	7f 09                	jg     f01231d3 <test_kfree_bestfirstfit+0x177e>
f01231ca:	81 7d e8 ff ef ff ff 	cmpl   $0xffffefff,-0x18(%ebp)
f01231d1:	76 a3                	jbe    f0123176 <test_kfree_bestfirstfit+0x1721>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
			}
		}
	}
	cprintf("\b\b\b100%\n");
f01231d3:	83 ec 0c             	sub    $0xc,%esp
f01231d6:	68 16 a1 13 f0       	push   $0xf013a116
f01231db:	e8 51 dc fd ff       	call   f0100e31 <cprintf>
f01231e0:	83 c4 10             	add    $0x10,%esp



	cprintf("\nCongratulations!! test kfree completed successfully.\n");
f01231e3:	83 ec 0c             	sub    $0xc,%esp
f01231e6:	68 9c a8 13 f0       	push   $0xf013a89c
f01231eb:	e8 41 dc fd ff       	call   f0100e31 <cprintf>
f01231f0:	83 c4 10             	add    $0x10,%esp

	return 1;
f01231f3:	b8 01 00 00 00       	mov    $0x1,%eax

}
f01231f8:	8d 65 f8             	lea    -0x8(%ebp),%esp
f01231fb:	5b                   	pop    %ebx
f01231fc:	5f                   	pop    %edi
f01231fd:	5d                   	pop    %ebp
f01231fe:	c3                   	ret    

f01231ff <test_kheap_phys_addr>:

int test_kheap_phys_addr()
{
f01231ff:	55                   	push   %ebp
f0123200:	89 e5                	mov    %esp,%ebp
f0123202:	57                   	push   %edi
f0123203:	56                   	push   %esi
f0123204:	53                   	push   %ebx
f0123205:	81 ec 5c 02 00 00    	sub    $0x25c,%esp
	cprintf("==============================================\n");
f012320b:	83 ec 0c             	sub    $0xc,%esp
f012320e:	68 74 9e 13 f0       	push   $0xf0139e74
f0123213:	e8 19 dc fd ff       	call   f0100e31 <cprintf>
f0123218:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f012321b:	83 ec 0c             	sub    $0xc,%esp
f012321e:	68 a4 9e 13 f0       	push   $0xf0139ea4
f0123223:	e8 09 dc fd ff       	call   f0100e31 <cprintf>
f0123228:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f012322b:	83 ec 0c             	sub    $0xc,%esp
f012322e:	68 74 9e 13 f0       	push   $0xf0139e74
f0123233:	e8 f9 db fd ff       	call   f0100e31 <cprintf>
f0123238:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f012323b:	c6 45 bf 80          	movb   $0x80,-0x41(%ebp)
	char maxByte = 0x7F;
f012323f:	c6 45 be 7f          	movb   $0x7f,-0x42(%ebp)
	short minShort = 1<<15 ;
f0123243:	66 c7 45 bc 00 80    	movw   $0x8000,-0x44(%ebp)
	short maxShort = 0x7FFF;
f0123249:	66 c7 45 ba ff 7f    	movw   $0x7fff,-0x46(%ebp)
	int minInt = 1<<31 ;
f012324f:	c7 45 b4 00 00 00 80 	movl   $0x80000000,-0x4c(%ebp)
	int maxInt = 0x7FFFFFFF;
f0123256:	c7 45 b0 ff ff ff 7f 	movl   $0x7fffffff,-0x50(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f012325d:	e8 dc 9b fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0123262:	89 45 ac             	mov    %eax,-0x54(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0123265:	8d 95 4c fe ff ff    	lea    -0x1b4(%ebp),%edx
f012326b:	b9 14 00 00 00       	mov    $0x14,%ecx
f0123270:	b8 00 00 00 00       	mov    $0x0,%eax
f0123275:	89 d7                	mov    %edx,%edi
f0123277:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0123279:	8d 95 fc fd ff ff    	lea    -0x204(%ebp),%edx
f012327f:	b9 14 00 00 00       	mov    $0x14,%ecx
f0123284:	b8 00 00 00 00       	mov    $0x0,%eax
f0123289:	89 d7                	mov    %edx,%edi
f012328b:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f012328d:	8d 95 ac fd ff ff    	lea    -0x254(%ebp),%edx
f0123293:	b9 14 00 00 00       	mov    $0x14,%ecx
f0123298:	b8 00 00 00 00       	mov    $0x0,%eax
f012329d:	89 d7                	mov    %edx,%edi
f012329f:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01232a1:	e8 98 9b fe ff       	call   f010ce3e <sys_calculate_free_frames>
f01232a6:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01232a9:	e8 d6 13 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01232ae:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f01232b1:	83 ec 0c             	sub    $0xc,%esp
f01232b4:	68 00 fc 1f 00       	push   $0x1ffc00
f01232b9:	e8 95 4f fe ff       	call   f0108253 <kmalloc>
f01232be:	83 c4 10             	add    $0x10,%esp
f01232c1:	89 85 ac fd ff ff    	mov    %eax,-0x254(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01232c7:	8b 85 ac fd ff ff    	mov    -0x254(%ebp),%eax
f01232cd:	89 c1                	mov    %eax,%ecx
f01232cf:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f01232d6:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f01232db:	0f b6 d0             	movzbl %al,%edx
f01232de:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01232e1:	01 d0                	add    %edx,%eax
f01232e3:	48                   	dec    %eax
f01232e4:	89 45 9c             	mov    %eax,-0x64(%ebp)
f01232e7:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01232ea:	ba 00 00 00 00       	mov    $0x0,%edx
f01232ef:	f7 75 a0             	divl   -0x60(%ebp)
f01232f2:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01232f5:	29 d0                	sub    %edx,%eax
f01232f7:	89 c3                	mov    %eax,%ebx
f01232f9:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f0123300:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0123305:	0f b6 c0             	movzbl %al,%eax
f0123308:	c1 e0 04             	shl    $0x4,%eax
f012330b:	89 c2                	mov    %eax,%edx
f012330d:	8b 45 98             	mov    -0x68(%ebp),%eax
f0123310:	01 d0                	add    %edx,%eax
f0123312:	48                   	dec    %eax
f0123313:	89 45 94             	mov    %eax,-0x6c(%ebp)
f0123316:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0123319:	ba 00 00 00 00       	mov    $0x0,%edx
f012331e:	f7 75 98             	divl   -0x68(%ebp)
f0123321:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0123324:	29 d0                	sub    %edx,%eax
f0123326:	01 d8                	add    %ebx,%eax
f0123328:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f012332d:	39 c1                	cmp    %eax,%ecx
f012332f:	74 17                	je     f0123348 <test_kheap_phys_addr+0x149>
f0123331:	83 ec 04             	sub    $0x4,%esp
f0123334:	68 18 a0 13 f0       	push   $0xf013a018
f0123339:	68 0a 08 00 00       	push   $0x80a
f012333e:	68 32 9f 13 f0       	push   $0xf0139f32
f0123343:	e8 68 ce fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123348:	e8 37 13 fe ff       	call   f0104684 <pf_calculate_free_frames>
f012334d:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0123350:	74 17                	je     f0123369 <test_kheap_phys_addr+0x16a>
f0123352:	83 ec 04             	sub    $0x4,%esp
f0123355:	68 4c 9f 13 f0       	push   $0xf0139f4c
f012335a:	68 0b 08 00 00       	push   $0x80b
f012335f:	68 32 9f 13 f0       	push   $0xf0139f32
f0123364:	e8 47 ce fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123369:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f012336c:	e8 cd 9a fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0123371:	29 c3                	sub    %eax,%ebx
f0123373:	89 d8                	mov    %ebx,%eax
f0123375:	3d 00 02 00 00       	cmp    $0x200,%eax
f012337a:	74 17                	je     f0123393 <test_kheap_phys_addr+0x194>
f012337c:	83 ec 04             	sub    $0x4,%esp
f012337f:	68 b4 9f 13 f0       	push   $0xf0139fb4
f0123384:	68 0c 08 00 00       	push   $0x80c
f0123389:	68 32 9f 13 f0       	push   $0xf0139f32
f012338e:	e8 1d ce fd ff       	call   f01001b0 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0123393:	e8 a6 9a fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0123398:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012339b:	e8 e4 12 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01233a0:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f01233a3:	83 ec 0c             	sub    $0xc,%esp
f01233a6:	68 00 fc 1f 00       	push   $0x1ffc00
f01233ab:	e8 a3 4e fe ff       	call   f0108253 <kmalloc>
f01233b0:	83 c4 10             	add    $0x10,%esp
f01233b3:	89 85 b0 fd ff ff    	mov    %eax,-0x250(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01233b9:	8b 85 b0 fd ff ff    	mov    -0x250(%ebp),%eax
f01233bf:	89 c1                	mov    %eax,%ecx
f01233c1:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f01233c8:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f01233cd:	0f b6 d0             	movzbl %al,%edx
f01233d0:	8b 45 90             	mov    -0x70(%ebp),%eax
f01233d3:	01 d0                	add    %edx,%eax
f01233d5:	48                   	dec    %eax
f01233d6:	89 45 8c             	mov    %eax,-0x74(%ebp)
f01233d9:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01233dc:	ba 00 00 00 00       	mov    $0x0,%edx
f01233e1:	f7 75 90             	divl   -0x70(%ebp)
f01233e4:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01233e7:	29 d0                	sub    %edx,%eax
f01233e9:	89 c3                	mov    %eax,%ebx
f01233eb:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f01233f2:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f01233f7:	0f b6 c0             	movzbl %al,%eax
f01233fa:	c1 e0 04             	shl    $0x4,%eax
f01233fd:	89 c2                	mov    %eax,%edx
f01233ff:	8b 45 88             	mov    -0x78(%ebp),%eax
f0123402:	01 d0                	add    %edx,%eax
f0123404:	48                   	dec    %eax
f0123405:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0123408:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012340b:	ba 00 00 00 00       	mov    $0x0,%edx
f0123410:	f7 75 88             	divl   -0x78(%ebp)
f0123413:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0123416:	29 d0                	sub    %edx,%eax
f0123418:	01 d8                	add    %ebx,%eax
f012341a:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f012341f:	39 c1                	cmp    %eax,%ecx
f0123421:	74 17                	je     f012343a <test_kheap_phys_addr+0x23b>
f0123423:	83 ec 04             	sub    $0x4,%esp
f0123426:	68 18 a0 13 f0       	push   $0xf013a018
f012342b:	68 12 08 00 00       	push   $0x812
f0123430:	68 32 9f 13 f0       	push   $0xf0139f32
f0123435:	e8 76 cd fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012343a:	e8 45 12 fe ff       	call   f0104684 <pf_calculate_free_frames>
f012343f:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0123442:	74 17                	je     f012345b <test_kheap_phys_addr+0x25c>
f0123444:	83 ec 04             	sub    $0x4,%esp
f0123447:	68 4c 9f 13 f0       	push   $0xf0139f4c
f012344c:	68 13 08 00 00       	push   $0x813
f0123451:	68 32 9f 13 f0       	push   $0xf0139f32
f0123456:	e8 55 cd fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f012345b:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f012345e:	e8 db 99 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0123463:	29 c3                	sub    %eax,%ebx
f0123465:	89 d8                	mov    %ebx,%eax
f0123467:	3d 00 02 00 00       	cmp    $0x200,%eax
f012346c:	74 17                	je     f0123485 <test_kheap_phys_addr+0x286>
f012346e:	83 ec 04             	sub    $0x4,%esp
f0123471:	68 b4 9f 13 f0       	push   $0xf0139fb4
f0123476:	68 14 08 00 00       	push   $0x814
f012347b:	68 32 9f 13 f0       	push   $0xf0139f32
f0123480:	e8 2b cd fd ff       	call   f01001b0 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0123485:	e8 b4 99 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f012348a:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012348d:	e8 f2 11 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0123492:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0123495:	83 ec 0c             	sub    $0xc,%esp
f0123498:	68 00 08 00 00       	push   $0x800
f012349d:	e8 b1 4d fe ff       	call   f0108253 <kmalloc>
f01234a2:	83 c4 10             	add    $0x10,%esp
f01234a5:	89 85 b4 fd ff ff    	mov    %eax,-0x24c(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01234ab:	8b 85 b4 fd ff ff    	mov    -0x24c(%ebp),%eax
f01234b1:	89 c1                	mov    %eax,%ecx
f01234b3:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f01234ba:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f01234bf:	0f b6 d0             	movzbl %al,%edx
f01234c2:	8b 45 80             	mov    -0x80(%ebp),%eax
f01234c5:	01 d0                	add    %edx,%eax
f01234c7:	48                   	dec    %eax
f01234c8:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f01234ce:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01234d4:	ba 00 00 00 00       	mov    $0x0,%edx
f01234d9:	f7 75 80             	divl   -0x80(%ebp)
f01234dc:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01234e2:	29 d0                	sub    %edx,%eax
f01234e4:	89 c3                	mov    %eax,%ebx
f01234e6:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f01234ed:	10 00 00 
f01234f0:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f01234f5:	0f b6 c0             	movzbl %al,%eax
f01234f8:	c1 e0 04             	shl    $0x4,%eax
f01234fb:	89 c2                	mov    %eax,%edx
f01234fd:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0123503:	01 d0                	add    %edx,%eax
f0123505:	48                   	dec    %eax
f0123506:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f012350c:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0123512:	ba 00 00 00 00       	mov    $0x0,%edx
f0123517:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f012351d:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0123523:	29 d0                	sub    %edx,%eax
f0123525:	01 d8                	add    %ebx,%eax
f0123527:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f012352c:	39 c1                	cmp    %eax,%ecx
f012352e:	74 17                	je     f0123547 <test_kheap_phys_addr+0x348>
f0123530:	83 ec 04             	sub    $0x4,%esp
f0123533:	68 18 a0 13 f0       	push   $0xf013a018
f0123538:	68 1a 08 00 00       	push   $0x81a
f012353d:	68 32 9f 13 f0       	push   $0xf0139f32
f0123542:	e8 69 cc fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123547:	e8 38 11 fe ff       	call   f0104684 <pf_calculate_free_frames>
f012354c:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f012354f:	74 17                	je     f0123568 <test_kheap_phys_addr+0x369>
f0123551:	83 ec 04             	sub    $0x4,%esp
f0123554:	68 4c 9f 13 f0       	push   $0xf0139f4c
f0123559:	68 1b 08 00 00       	push   $0x81b
f012355e:	68 32 9f 13 f0       	push   $0xf0139f32
f0123563:	e8 48 cc fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123568:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f012356b:	e8 ce 98 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0123570:	29 c3                	sub    %eax,%ebx
f0123572:	89 d8                	mov    %ebx,%eax
f0123574:	83 f8 01             	cmp    $0x1,%eax
f0123577:	74 17                	je     f0123590 <test_kheap_phys_addr+0x391>
f0123579:	83 ec 04             	sub    $0x4,%esp
f012357c:	68 b4 9f 13 f0       	push   $0xf0139fb4
f0123581:	68 1c 08 00 00       	push   $0x81c
f0123586:	68 32 9f 13 f0       	push   $0xf0139f32
f012358b:	e8 20 cc fd ff       	call   f01001b0 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0123590:	e8 a9 98 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0123595:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123598:	e8 e7 10 fe ff       	call   f0104684 <pf_calculate_free_frames>
f012359d:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f01235a0:	83 ec 0c             	sub    $0xc,%esp
f01235a3:	68 00 08 00 00       	push   $0x800
f01235a8:	e8 a6 4c fe ff       	call   f0108253 <kmalloc>
f01235ad:	83 c4 10             	add    $0x10,%esp
f01235b0:	89 85 b8 fd ff ff    	mov    %eax,-0x248(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01235b6:	8b 85 b8 fd ff ff    	mov    -0x248(%ebp),%eax
f01235bc:	89 c1                	mov    %eax,%ecx
f01235be:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f01235c5:	10 00 00 
f01235c8:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f01235cd:	0f b6 d0             	movzbl %al,%edx
f01235d0:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01235d6:	01 d0                	add    %edx,%eax
f01235d8:	48                   	dec    %eax
f01235d9:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f01235df:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01235e5:	ba 00 00 00 00       	mov    $0x0,%edx
f01235ea:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f01235f0:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01235f6:	29 d0                	sub    %edx,%eax
f01235f8:	89 c3                	mov    %eax,%ebx
f01235fa:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0123601:	10 00 00 
f0123604:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0123609:	0f b6 c0             	movzbl %al,%eax
f012360c:	c1 e0 04             	shl    $0x4,%eax
f012360f:	89 c2                	mov    %eax,%edx
f0123611:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0123617:	01 d0                	add    %edx,%eax
f0123619:	48                   	dec    %eax
f012361a:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0123620:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0123626:	ba 00 00 00 00       	mov    $0x0,%edx
f012362b:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0123631:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0123637:	29 d0                	sub    %edx,%eax
f0123639:	01 d8                	add    %ebx,%eax
f012363b:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0123640:	39 c1                	cmp    %eax,%ecx
f0123642:	74 17                	je     f012365b <test_kheap_phys_addr+0x45c>
f0123644:	83 ec 04             	sub    $0x4,%esp
f0123647:	68 18 a0 13 f0       	push   $0xf013a018
f012364c:	68 22 08 00 00       	push   $0x822
f0123651:	68 32 9f 13 f0       	push   $0xf0139f32
f0123656:	e8 55 cb fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012365b:	e8 24 10 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0123660:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0123663:	74 17                	je     f012367c <test_kheap_phys_addr+0x47d>
f0123665:	83 ec 04             	sub    $0x4,%esp
f0123668:	68 4c 9f 13 f0       	push   $0xf0139f4c
f012366d:	68 23 08 00 00       	push   $0x823
f0123672:	68 32 9f 13 f0       	push   $0xf0139f32
f0123677:	e8 34 cb fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f012367c:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f012367f:	e8 ba 97 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0123684:	29 c3                	sub    %eax,%ebx
f0123686:	89 d8                	mov    %ebx,%eax
f0123688:	83 f8 01             	cmp    $0x1,%eax
f012368b:	74 17                	je     f01236a4 <test_kheap_phys_addr+0x4a5>
f012368d:	83 ec 04             	sub    $0x4,%esp
f0123690:	68 b4 9f 13 f0       	push   $0xf0139fb4
f0123695:	68 24 08 00 00       	push   $0x824
f012369a:	68 32 9f 13 f0       	push   $0xf0139f32
f012369f:	e8 0c cb fd ff       	call   f01001b0 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f01236a4:	e8 95 97 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f01236a9:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01236ac:	e8 d3 0f fe ff       	call   f0104684 <pf_calculate_free_frames>
f01236b1:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f01236b4:	83 ec 0c             	sub    $0xc,%esp
f01236b7:	68 00 1c 00 00       	push   $0x1c00
f01236bc:	e8 92 4b fe ff       	call   f0108253 <kmalloc>
f01236c1:	83 c4 10             	add    $0x10,%esp
f01236c4:	89 85 bc fd ff ff    	mov    %eax,-0x244(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01236ca:	8b 85 bc fd ff ff    	mov    -0x244(%ebp),%eax
f01236d0:	89 c1                	mov    %eax,%ecx
f01236d2:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f01236d9:	10 00 00 
f01236dc:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f01236e1:	0f b6 d0             	movzbl %al,%edx
f01236e4:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01236ea:	01 d0                	add    %edx,%eax
f01236ec:	48                   	dec    %eax
f01236ed:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f01236f3:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01236f9:	ba 00 00 00 00       	mov    $0x0,%edx
f01236fe:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f0123704:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012370a:	29 d0                	sub    %edx,%eax
f012370c:	89 c3                	mov    %eax,%ebx
f012370e:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f0123715:	10 00 00 
f0123718:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f012371d:	0f b6 c0             	movzbl %al,%eax
f0123720:	c1 e0 04             	shl    $0x4,%eax
f0123723:	89 c2                	mov    %eax,%edx
f0123725:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012372b:	01 d0                	add    %edx,%eax
f012372d:	48                   	dec    %eax
f012372e:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f0123734:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012373a:	ba 00 00 00 00       	mov    $0x0,%edx
f012373f:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f0123745:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012374b:	29 d0                	sub    %edx,%eax
f012374d:	01 d8                	add    %ebx,%eax
f012374f:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0123754:	39 c1                	cmp    %eax,%ecx
f0123756:	74 17                	je     f012376f <test_kheap_phys_addr+0x570>
f0123758:	83 ec 04             	sub    $0x4,%esp
f012375b:	68 18 a0 13 f0       	push   $0xf013a018
f0123760:	68 2a 08 00 00       	push   $0x82a
f0123765:	68 32 9f 13 f0       	push   $0xf0139f32
f012376a:	e8 41 ca fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012376f:	e8 10 0f fe ff       	call   f0104684 <pf_calculate_free_frames>
f0123774:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0123777:	74 17                	je     f0123790 <test_kheap_phys_addr+0x591>
f0123779:	83 ec 04             	sub    $0x4,%esp
f012377c:	68 4c 9f 13 f0       	push   $0xf0139f4c
f0123781:	68 2b 08 00 00       	push   $0x82b
f0123786:	68 32 9f 13 f0       	push   $0xf0139f32
f012378b:	e8 20 ca fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123790:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0123793:	e8 a6 96 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0123798:	29 c3                	sub    %eax,%ebx
f012379a:	89 d8                	mov    %ebx,%eax
f012379c:	83 f8 02             	cmp    $0x2,%eax
f012379f:	74 17                	je     f01237b8 <test_kheap_phys_addr+0x5b9>
f01237a1:	83 ec 04             	sub    $0x4,%esp
f01237a4:	68 b4 9f 13 f0       	push   $0xf0139fb4
f01237a9:	68 2c 08 00 00       	push   $0x82c
f01237ae:	68 32 9f 13 f0       	push   $0xf0139f32
f01237b3:	e8 f8 c9 fd ff       	call   f01001b0 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f01237b8:	e8 81 96 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f01237bd:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01237c0:	e8 bf 0e fe ff       	call   f0104684 <pf_calculate_free_frames>
f01237c5:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f01237c8:	83 ec 0c             	sub    $0xc,%esp
f01237cb:	68 00 fc 2f 00       	push   $0x2ffc00
f01237d0:	e8 7e 4a fe ff       	call   f0108253 <kmalloc>
f01237d5:	83 c4 10             	add    $0x10,%esp
f01237d8:	89 85 c0 fd ff ff    	mov    %eax,-0x240(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01237de:	8b 85 c0 fd ff ff    	mov    -0x240(%ebp),%eax
f01237e4:	89 c1                	mov    %eax,%ecx
f01237e6:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f01237ed:	10 00 00 
f01237f0:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f01237f5:	0f b6 d0             	movzbl %al,%edx
f01237f8:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f01237fe:	01 d0                	add    %edx,%eax
f0123800:	48                   	dec    %eax
f0123801:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f0123807:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012380d:	ba 00 00 00 00       	mov    $0x0,%edx
f0123812:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f0123818:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012381e:	29 d0                	sub    %edx,%eax
f0123820:	89 c3                	mov    %eax,%ebx
f0123822:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f0123829:	10 00 00 
f012382c:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0123831:	0f b6 c0             	movzbl %al,%eax
f0123834:	c1 e0 04             	shl    $0x4,%eax
f0123837:	89 c2                	mov    %eax,%edx
f0123839:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012383f:	01 d0                	add    %edx,%eax
f0123841:	48                   	dec    %eax
f0123842:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f0123848:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012384e:	ba 00 00 00 00       	mov    $0x0,%edx
f0123853:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f0123859:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012385f:	29 d0                	sub    %edx,%eax
f0123861:	01 d8                	add    %ebx,%eax
f0123863:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0123868:	39 c1                	cmp    %eax,%ecx
f012386a:	74 17                	je     f0123883 <test_kheap_phys_addr+0x684>
f012386c:	83 ec 04             	sub    $0x4,%esp
f012386f:	68 18 a0 13 f0       	push   $0xf013a018
f0123874:	68 32 08 00 00       	push   $0x832
f0123879:	68 32 9f 13 f0       	push   $0xf0139f32
f012387e:	e8 2d c9 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123883:	e8 fc 0d fe ff       	call   f0104684 <pf_calculate_free_frames>
f0123888:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f012388b:	74 17                	je     f01238a4 <test_kheap_phys_addr+0x6a5>
f012388d:	83 ec 04             	sub    $0x4,%esp
f0123890:	68 4c 9f 13 f0       	push   $0xf0139f4c
f0123895:	68 33 08 00 00       	push   $0x833
f012389a:	68 32 9f 13 f0       	push   $0xf0139f32
f012389f:	e8 0c c9 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f01238a4:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f01238a7:	e8 92 95 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f01238ac:	29 c3                	sub    %eax,%ebx
f01238ae:	89 d8                	mov    %ebx,%eax
f01238b0:	3d 00 03 00 00       	cmp    $0x300,%eax
f01238b5:	74 17                	je     f01238ce <test_kheap_phys_addr+0x6cf>
f01238b7:	83 ec 04             	sub    $0x4,%esp
f01238ba:	68 b4 9f 13 f0       	push   $0xf0139fb4
f01238bf:	68 34 08 00 00       	push   $0x834
f01238c4:	68 32 9f 13 f0       	push   $0xf0139f32
f01238c9:	e8 e2 c8 fd ff       	call   f01001b0 <_panic>

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f01238ce:	e8 6b 95 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f01238d3:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01238d6:	e8 a9 0d fe ff       	call   f0104684 <pf_calculate_free_frames>
f01238db:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f01238de:	83 ec 0c             	sub    $0xc,%esp
f01238e1:	68 00 fc 5f 00       	push   $0x5ffc00
f01238e6:	e8 68 49 fe ff       	call   f0108253 <kmalloc>
f01238eb:	83 c4 10             	add    $0x10,%esp
f01238ee:	89 85 c4 fd ff ff    	mov    %eax,-0x23c(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01238f4:	8b 85 c4 fd ff ff    	mov    -0x23c(%ebp),%eax
f01238fa:	89 c1                	mov    %eax,%ecx
f01238fc:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f0123903:	10 00 00 
f0123906:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f012390b:	0f b6 d0             	movzbl %al,%edx
f012390e:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0123914:	01 d0                	add    %edx,%eax
f0123916:	48                   	dec    %eax
f0123917:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f012391d:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0123923:	ba 00 00 00 00       	mov    $0x0,%edx
f0123928:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f012392e:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0123934:	29 d0                	sub    %edx,%eax
f0123936:	89 c3                	mov    %eax,%ebx
f0123938:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f012393f:	10 00 00 
f0123942:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0123947:	0f b6 c0             	movzbl %al,%eax
f012394a:	c1 e0 04             	shl    $0x4,%eax
f012394d:	89 c2                	mov    %eax,%edx
f012394f:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0123955:	01 d0                	add    %edx,%eax
f0123957:	48                   	dec    %eax
f0123958:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f012395e:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0123964:	ba 00 00 00 00       	mov    $0x0,%edx
f0123969:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f012396f:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0123975:	29 d0                	sub    %edx,%eax
f0123977:	01 d8                	add    %ebx,%eax
f0123979:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f012397e:	39 c1                	cmp    %eax,%ecx
f0123980:	74 17                	je     f0123999 <test_kheap_phys_addr+0x79a>
f0123982:	83 ec 04             	sub    $0x4,%esp
f0123985:	68 18 a0 13 f0       	push   $0xf013a018
f012398a:	68 3a 08 00 00       	push   $0x83a
f012398f:	68 32 9f 13 f0       	push   $0xf0139f32
f0123994:	e8 17 c8 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123999:	e8 e6 0c fe ff       	call   f0104684 <pf_calculate_free_frames>
f012399e:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f01239a1:	74 17                	je     f01239ba <test_kheap_phys_addr+0x7bb>
f01239a3:	83 ec 04             	sub    $0x4,%esp
f01239a6:	68 4c 9f 13 f0       	push   $0xf0139f4c
f01239ab:	68 3b 08 00 00       	push   $0x83b
f01239b0:	68 32 9f 13 f0       	push   $0xf0139f32
f01239b5:	e8 f6 c7 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f01239ba:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f01239bd:	e8 7c 94 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f01239c2:	29 c3                	sub    %eax,%ebx
f01239c4:	89 d8                	mov    %ebx,%eax
f01239c6:	3d 00 06 00 00       	cmp    $0x600,%eax
f01239cb:	74 17                	je     f01239e4 <test_kheap_phys_addr+0x7e5>
f01239cd:	83 ec 04             	sub    $0x4,%esp
f01239d0:	68 b4 9f 13 f0       	push   $0xf0139fb4
f01239d5:	68 3c 08 00 00       	push   $0x83c
f01239da:	68 32 9f 13 f0       	push   $0xf0139f32
f01239df:	e8 cc c7 fd ff       	call   f01001b0 <_panic>

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f01239e4:	e8 55 94 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f01239e9:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01239ec:	e8 93 0c fe ff       	call   f0104684 <pf_calculate_free_frames>
f01239f1:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f01239f4:	83 ec 0c             	sub    $0xc,%esp
f01239f7:	68 00 38 00 00       	push   $0x3800
f01239fc:	e8 52 48 fe ff       	call   f0108253 <kmalloc>
f0123a01:	83 c4 10             	add    $0x10,%esp
f0123a04:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123a0a:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f0123a10:	89 c1                	mov    %eax,%ecx
f0123a12:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f0123a19:	10 00 00 
f0123a1c:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0123a21:	0f b6 d0             	movzbl %al,%edx
f0123a24:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0123a2a:	01 d0                	add    %edx,%eax
f0123a2c:	48                   	dec    %eax
f0123a2d:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f0123a33:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0123a39:	ba 00 00 00 00       	mov    $0x0,%edx
f0123a3e:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f0123a44:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0123a4a:	29 d0                	sub    %edx,%eax
f0123a4c:	89 c3                	mov    %eax,%ebx
f0123a4e:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f0123a55:	10 00 00 
f0123a58:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0123a5d:	0f b6 c0             	movzbl %al,%eax
f0123a60:	c1 e0 04             	shl    $0x4,%eax
f0123a63:	89 c2                	mov    %eax,%edx
f0123a65:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0123a6b:	01 d0                	add    %edx,%eax
f0123a6d:	48                   	dec    %eax
f0123a6e:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f0123a74:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0123a7a:	ba 00 00 00 00       	mov    $0x0,%edx
f0123a7f:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f0123a85:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0123a8b:	29 d0                	sub    %edx,%eax
f0123a8d:	01 d8                	add    %ebx,%eax
f0123a8f:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0123a94:	39 c1                	cmp    %eax,%ecx
f0123a96:	74 17                	je     f0123aaf <test_kheap_phys_addr+0x8b0>
f0123a98:	83 ec 04             	sub    $0x4,%esp
f0123a9b:	68 18 a0 13 f0       	push   $0xf013a018
f0123aa0:	68 42 08 00 00       	push   $0x842
f0123aa5:	68 32 9f 13 f0       	push   $0xf0139f32
f0123aaa:	e8 01 c7 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123aaf:	e8 d0 0b fe ff       	call   f0104684 <pf_calculate_free_frames>
f0123ab4:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0123ab7:	74 17                	je     f0123ad0 <test_kheap_phys_addr+0x8d1>
f0123ab9:	83 ec 04             	sub    $0x4,%esp
f0123abc:	68 4c 9f 13 f0       	push   $0xf0139f4c
f0123ac1:	68 43 08 00 00       	push   $0x843
f0123ac6:	68 32 9f 13 f0       	push   $0xf0139f32
f0123acb:	e8 e0 c6 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123ad0:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0123ad3:	e8 66 93 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0123ad8:	29 c3                	sub    %eax,%ebx
f0123ada:	89 d8                	mov    %ebx,%eax
f0123adc:	83 f8 04             	cmp    $0x4,%eax
f0123adf:	74 17                	je     f0123af8 <test_kheap_phys_addr+0x8f9>
f0123ae1:	83 ec 04             	sub    $0x4,%esp
f0123ae4:	68 b4 9f 13 f0       	push   $0xf0139fb4
f0123ae9:	68 44 08 00 00       	push   $0x844
f0123aee:	68 32 9f 13 f0       	push   $0xf0139f32
f0123af3:	e8 b8 c6 fd ff       	call   f01001b0 <_panic>
	}

	//test kheap_physical_address after kmalloc only [40%]
	{
f0123af8:	89 e0                	mov    %esp,%eax
f0123afa:	89 c6                	mov    %eax,%esi
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f0123afc:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f0123b03:	10 00 00 
f0123b06:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0123b0b:	0f b6 d0             	movzbl %al,%edx
f0123b0e:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0123b14:	01 d0                	add    %edx,%eax
f0123b16:	48                   	dec    %eax
f0123b17:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f0123b1d:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0123b23:	ba 00 00 00 00       	mov    $0x0,%edx
f0123b28:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f0123b2e:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0123b34:	29 d0                	sub    %edx,%eax
f0123b36:	89 c1                	mov    %eax,%ecx
f0123b38:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f0123b3f:	10 00 00 
f0123b42:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0123b47:	0f b6 c0             	movzbl %al,%eax
f0123b4a:	c1 e0 04             	shl    $0x4,%eax
f0123b4d:	89 c2                	mov    %eax,%edx
f0123b4f:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0123b55:	01 d0                	add    %edx,%eax
f0123b57:	48                   	dec    %eax
f0123b58:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f0123b5e:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0123b64:	ba 00 00 00 00       	mov    $0x0,%edx
f0123b69:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f0123b6f:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0123b75:	29 d0                	sub    %edx,%eax
f0123b77:	01 c8                	add    %ecx,%eax
f0123b79:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0123b7e:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
f0123b84:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f0123b8b:	10 00 00 
f0123b8e:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0123b93:	0f b6 d0             	movzbl %al,%edx
f0123b96:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0123b9c:	01 d0                	add    %edx,%eax
f0123b9e:	48                   	dec    %eax
f0123b9f:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f0123ba5:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0123bab:	ba 00 00 00 00       	mov    $0x0,%edx
f0123bb0:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f0123bb6:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0123bbc:	29 d0                	sub    %edx,%eax
f0123bbe:	89 c1                	mov    %eax,%ecx
f0123bc0:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f0123bc7:	10 00 00 
f0123bca:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0123bcf:	0f b6 c0             	movzbl %al,%eax
f0123bd2:	c1 e0 04             	shl    $0x4,%eax
f0123bd5:	89 c2                	mov    %eax,%edx
f0123bd7:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0123bdd:	01 d0                	add    %edx,%eax
f0123bdf:	48                   	dec    %eax
f0123be0:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f0123be6:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0123bec:	ba 00 00 00 00       	mov    $0x0,%edx
f0123bf1:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f0123bf7:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0123bfd:	29 d0                	sub    %edx,%eax
f0123bff:	01 c8                	add    %ecx,%eax
f0123c01:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f0123c06:	c1 e8 0c             	shr    $0xc,%eax
f0123c09:	89 c2                	mov    %eax,%edx
f0123c0b:	4a                   	dec    %edx
f0123c0c:	89 95 fc fe ff ff    	mov    %edx,-0x104(%ebp)
f0123c12:	c1 e0 02             	shl    $0x2,%eax
f0123c15:	8d 50 03             	lea    0x3(%eax),%edx
f0123c18:	b8 10 00 00 00       	mov    $0x10,%eax
f0123c1d:	48                   	dec    %eax
f0123c1e:	01 d0                	add    %edx,%eax
f0123c20:	bf 10 00 00 00       	mov    $0x10,%edi
f0123c25:	ba 00 00 00 00       	mov    $0x0,%edx
f0123c2a:	f7 f7                	div    %edi
f0123c2c:	6b c0 10             	imul   $0x10,%eax,%eax
f0123c2f:	29 c4                	sub    %eax,%esp
f0123c31:	89 e0                	mov    %esp,%eax
f0123c33:	83 c0 03             	add    $0x3,%eax
f0123c36:	c1 e8 02             	shr    $0x2,%eax
f0123c39:	c1 e0 02             	shl    $0x2,%eax
f0123c3c:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
		i = 0;
f0123c42:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f0123c49:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
f0123c50:	eb 29                	jmp    f0123c7b <test_kheap_phys_addr+0xa7c>
		{
			allPAs[i++] = kheap_physical_address(va);
f0123c52:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
f0123c55:	8d 43 01             	lea    0x1(%ebx),%eax
f0123c58:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0123c5b:	83 ec 0c             	sub    $0xc,%esp
f0123c5e:	ff 75 e0             	pushl  -0x20(%ebp)
f0123c61:	e8 b2 47 fe ff       	call   f0108418 <kheap_physical_address>
f0123c66:	83 c4 10             	add    $0x10,%esp
f0123c69:	89 c2                	mov    %eax,%edx
f0123c6b:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0123c71:	89 14 98             	mov    %edx,(%eax,%ebx,4)
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
		i = 0;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f0123c74:	81 45 e0 00 10 00 00 	addl   $0x1000,-0x20(%ebp)
f0123c7b:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0123c7e:	3b 85 10 ff ff ff    	cmp    -0xf0(%ebp),%eax
f0123c84:	72 cc                	jb     f0123c52 <test_kheap_phys_addr+0xa53>
		{
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
f0123c86:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0123c89:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
		i = 0;
f0123c8f:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f0123c96:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
f0123c9d:	e9 ab 00 00 00       	jmp    f0123d4d <test_kheap_phys_addr+0xb4e>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f0123ca2:	a1 30 ce 2b f0       	mov    0xf02bce30,%eax
f0123ca7:	83 ec 04             	sub    $0x4,%esp
f0123caa:	8d 95 a8 fd ff ff    	lea    -0x258(%ebp),%edx
f0123cb0:	52                   	push   %edx
f0123cb1:	ff 75 e0             	pushl  -0x20(%ebp)
f0123cb4:	50                   	push   %eax
f0123cb5:	e8 2d 38 fe ff       	call   f01074e7 <get_page_table>
f0123cba:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0123cbd:	8b 85 a8 fd ff ff    	mov    -0x258(%ebp),%eax
f0123cc3:	85 c0                	test   %eax,%eax
f0123cc5:	75 17                	jne    f0123cde <test_kheap_phys_addr+0xadf>
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f0123cc7:	83 ec 04             	sub    $0x4,%esp
f0123cca:	68 d4 a8 13 f0       	push   $0xf013a8d4
f0123ccf:	68 59 08 00 00       	push   $0x859
f0123cd4:	68 32 9f 13 f0       	push   $0xf0139f32
f0123cd9:	e8 d2 c4 fd ff       	call   f01001b0 <_panic>

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f0123cde:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0123ce1:	c1 e8 0c             	shr    $0xc,%eax
f0123ce4:	25 ff 03 00 00       	and    $0x3ff,%eax
f0123ce9:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0123cec:	eb 4b                	jmp    f0123d39 <test_kheap_phys_addr+0xb3a>
			{
				if ((ptr_table[j] & 0xFFFFF000) != allPAs[i])
f0123cee:	8b 85 a8 fd ff ff    	mov    -0x258(%ebp),%eax
f0123cf4:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0123cf7:	c1 e2 02             	shl    $0x2,%edx
f0123cfa:	01 d0                	add    %edx,%eax
f0123cfc:	8b 00                	mov    (%eax),%eax
f0123cfe:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0123d03:	89 c1                	mov    %eax,%ecx
f0123d05:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0123d0b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0123d0e:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0123d11:	39 c1                	cmp    %eax,%ecx
f0123d13:	74 17                	je     f0123d2c <test_kheap_phys_addr+0xb2d>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					panic("Wrong kheap_physical_address");
f0123d15:	83 ec 04             	sub    $0x4,%esp
f0123d18:	68 2d a9 13 f0       	push   $0xf013a92d
f0123d1d:	68 60 08 00 00       	push   $0x860
f0123d22:	68 32 9f 13 f0       	push   $0xf0139f32
f0123d27:	e8 84 c4 fd ff       	call   f01001b0 <_panic>
				}
				va+=PAGE_SIZE;
f0123d2c:	81 45 e0 00 10 00 00 	addl   $0x1000,-0x20(%ebp)
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
			if (ptr_table == NULL)
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f0123d33:	ff 45 dc             	incl   -0x24(%ebp)
f0123d36:	ff 45 e4             	incl   -0x1c(%ebp)
f0123d39:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0123d3c:	3b 85 f4 fe ff ff    	cmp    -0x10c(%ebp),%eax
f0123d42:	7d 09                	jge    f0123d4d <test_kheap_phys_addr+0xb4e>
f0123d44:	81 7d dc ff 03 00 00 	cmpl   $0x3ff,-0x24(%ebp)
f0123d4b:	7e a1                	jle    f0123cee <test_kheap_phys_addr+0xaef>
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
		i = 0;
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f0123d4d:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0123d50:	3b 85 10 ff ff ff    	cmp    -0xf0(%ebp),%eax
f0123d56:	0f 82 46 ff ff ff    	jb     f0123ca2 <test_kheap_phys_addr+0xaa3>
f0123d5c:	89 f4                	mov    %esi,%esp
				}
				va+=PAGE_SIZE;
			}
		}
	}
	cprintf("\nkheap_physical_address: current evaluation = 40%");
f0123d5e:	83 ec 0c             	sub    $0xc,%esp
f0123d61:	68 4c a9 13 f0       	push   $0xf013a94c
f0123d66:	e8 c6 d0 fd ff       	call   f0100e31 <cprintf>
f0123d6b:	83 c4 10             	add    $0x10,%esp

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0123d6e:	e8 cb 90 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0123d73:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0123d79:	e8 06 09 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0123d7e:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		kfree(ptr_allocations[0]);
f0123d84:	8b 85 ac fd ff ff    	mov    -0x254(%ebp),%eax
f0123d8a:	83 ec 0c             	sub    $0xc,%esp
f0123d8d:	50                   	push   %eax
f0123d8e:	e8 4b 46 fe ff       	call   f01083de <kfree>
f0123d93:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123d96:	e8 e9 08 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0123d9b:	3b 85 ec fe ff ff    	cmp    -0x114(%ebp),%eax
f0123da1:	74 17                	je     f0123dba <test_kheap_phys_addr+0xbbb>
f0123da3:	83 ec 04             	sub    $0x4,%esp
f0123da6:	68 4c 9f 13 f0       	push   $0xf0139f4c
f0123dab:	68 6e 08 00 00       	push   $0x86e
f0123db0:	68 32 9f 13 f0       	push   $0xf0139f32
f0123db5:	e8 f6 c3 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0123dba:	e8 7f 90 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0123dbf:	89 c2                	mov    %eax,%edx
f0123dc1:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0123dc7:	29 c2                	sub    %eax,%edx
f0123dc9:	89 d0                	mov    %edx,%eax
f0123dcb:	3d 00 02 00 00       	cmp    $0x200,%eax
f0123dd0:	74 17                	je     f0123de9 <test_kheap_phys_addr+0xbea>
f0123dd2:	83 ec 04             	sub    $0x4,%esp
f0123dd5:	68 bc a6 13 f0       	push   $0xf013a6bc
f0123dda:	68 6f 08 00 00       	push   $0x86f
f0123ddf:	68 32 9f 13 f0       	push   $0xf0139f32
f0123de4:	e8 c7 c3 fd ff       	call   f01001b0 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0123de9:	e8 50 90 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0123dee:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123df4:	e8 8b 08 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0123df9:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		kfree(ptr_allocations[1]);
f0123dff:	8b 85 b0 fd ff ff    	mov    -0x250(%ebp),%eax
f0123e05:	83 ec 0c             	sub    $0xc,%esp
f0123e08:	50                   	push   %eax
f0123e09:	e8 d0 45 fe ff       	call   f01083de <kfree>
f0123e0e:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123e11:	e8 6e 08 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0123e16:	3b 85 ec fe ff ff    	cmp    -0x114(%ebp),%eax
f0123e1c:	74 17                	je     f0123e35 <test_kheap_phys_addr+0xc36>
f0123e1e:	83 ec 04             	sub    $0x4,%esp
f0123e21:	68 4c 9f 13 f0       	push   $0xf0139f4c
f0123e26:	68 75 08 00 00       	push   $0x875
f0123e2b:	68 32 9f 13 f0       	push   $0xf0139f32
f0123e30:	e8 7b c3 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f0123e35:	e8 04 90 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0123e3a:	89 c2                	mov    %eax,%edx
f0123e3c:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0123e42:	29 c2                	sub    %eax,%edx
f0123e44:	89 d0                	mov    %edx,%eax
f0123e46:	3d 00 02 00 00       	cmp    $0x200,%eax
f0123e4b:	74 17                	je     f0123e64 <test_kheap_phys_addr+0xc65>
f0123e4d:	83 ec 04             	sub    $0x4,%esp
f0123e50:	68 bc a6 13 f0       	push   $0xf013a6bc
f0123e55:	68 76 08 00 00       	push   $0x876
f0123e5a:	68 32 9f 13 f0       	push   $0xf0139f32
f0123e5f:	e8 4c c3 fd ff       	call   f01001b0 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f0123e64:	e8 d5 8f fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0123e69:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123e6f:	e8 10 08 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0123e74:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		kfree(ptr_allocations[6]);
f0123e7a:	8b 85 c4 fd ff ff    	mov    -0x23c(%ebp),%eax
f0123e80:	83 ec 0c             	sub    $0xc,%esp
f0123e83:	50                   	push   %eax
f0123e84:	e8 55 45 fe ff       	call   f01083de <kfree>
f0123e89:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123e8c:	e8 f3 07 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0123e91:	3b 85 ec fe ff ff    	cmp    -0x114(%ebp),%eax
f0123e97:	74 17                	je     f0123eb0 <test_kheap_phys_addr+0xcb1>
f0123e99:	83 ec 04             	sub    $0x4,%esp
f0123e9c:	68 4c 9f 13 f0       	push   $0xf0139f4c
f0123ea1:	68 7c 08 00 00       	push   $0x87c
f0123ea6:	68 32 9f 13 f0       	push   $0xf0139f32
f0123eab:	e8 00 c3 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0123eb0:	e8 89 8f fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0123eb5:	89 c2                	mov    %eax,%edx
f0123eb7:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0123ebd:	29 c2                	sub    %eax,%edx
f0123ebf:	89 d0                	mov    %edx,%eax
f0123ec1:	3d 00 06 00 00       	cmp    $0x600,%eax
f0123ec6:	74 17                	je     f0123edf <test_kheap_phys_addr+0xce0>
f0123ec8:	83 ec 04             	sub    $0x4,%esp
f0123ecb:	68 bc a6 13 f0       	push   $0xf013a6bc
f0123ed0:	68 7d 08 00 00       	push   $0x87d
f0123ed5:	68 32 9f 13 f0       	push   $0xf0139f32
f0123eda:	e8 d1 c2 fd ff       	call   f01001b0 <_panic>
	}


	//test kheap_physical_address after kmalloc and kfree [40%]
	{
f0123edf:	89 e0                	mov    %esp,%eax
f0123ee1:	89 c6                	mov    %eax,%esi
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f0123ee3:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f0123eea:	10 00 00 
f0123eed:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0123ef2:	0f b6 d0             	movzbl %al,%edx
f0123ef5:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0123efb:	01 d0                	add    %edx,%eax
f0123efd:	48                   	dec    %eax
f0123efe:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f0123f04:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0123f0a:	ba 00 00 00 00       	mov    $0x0,%edx
f0123f0f:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f0123f15:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0123f1b:	29 d0                	sub    %edx,%eax
f0123f1d:	89 c1                	mov    %eax,%ecx
f0123f1f:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f0123f26:	10 00 00 
f0123f29:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0123f2e:	0f b6 c0             	movzbl %al,%eax
f0123f31:	c1 e0 04             	shl    $0x4,%eax
f0123f34:	89 c2                	mov    %eax,%edx
f0123f36:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0123f3c:	01 d0                	add    %edx,%eax
f0123f3e:	48                   	dec    %eax
f0123f3f:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f0123f45:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0123f4b:	ba 00 00 00 00       	mov    $0x0,%edx
f0123f50:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f0123f56:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0123f5c:	29 d0                	sub    %edx,%eax
f0123f5e:	01 c8                	add    %ecx,%eax
f0123f60:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0123f65:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
f0123f6b:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f0123f72:	10 00 00 
f0123f75:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0123f7a:	0f b6 d0             	movzbl %al,%edx
f0123f7d:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0123f83:	01 d0                	add    %edx,%eax
f0123f85:	48                   	dec    %eax
f0123f86:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f0123f8c:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0123f92:	ba 00 00 00 00       	mov    $0x0,%edx
f0123f97:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f0123f9d:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0123fa3:	29 d0                	sub    %edx,%eax
f0123fa5:	89 c1                	mov    %eax,%ecx
f0123fa7:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f0123fae:	10 00 00 
f0123fb1:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0123fb6:	0f b6 c0             	movzbl %al,%eax
f0123fb9:	c1 e0 04             	shl    $0x4,%eax
f0123fbc:	89 c2                	mov    %eax,%edx
f0123fbe:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0123fc4:	01 d0                	add    %edx,%eax
f0123fc6:	48                   	dec    %eax
f0123fc7:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f0123fcd:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0123fd3:	ba 00 00 00 00       	mov    $0x0,%edx
f0123fd8:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f0123fde:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0123fe4:	29 d0                	sub    %edx,%eax
f0123fe6:	01 c8                	add    %ecx,%eax
f0123fe8:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f0123fed:	c1 e8 0c             	shr    $0xc,%eax
f0123ff0:	89 c2                	mov    %eax,%edx
f0123ff2:	4a                   	dec    %edx
f0123ff3:	89 95 c4 fe ff ff    	mov    %edx,-0x13c(%ebp)
f0123ff9:	c1 e0 02             	shl    $0x2,%eax
f0123ffc:	8d 50 03             	lea    0x3(%eax),%edx
f0123fff:	b8 10 00 00 00       	mov    $0x10,%eax
f0124004:	48                   	dec    %eax
f0124005:	01 d0                	add    %edx,%eax
f0124007:	bf 10 00 00 00       	mov    $0x10,%edi
f012400c:	ba 00 00 00 00       	mov    $0x0,%edx
f0124011:	f7 f7                	div    %edi
f0124013:	6b c0 10             	imul   $0x10,%eax,%eax
f0124016:	29 c4                	sub    %eax,%esp
f0124018:	89 e0                	mov    %esp,%eax
f012401a:	83 c0 03             	add    $0x3,%eax
f012401d:	c1 e8 02             	shr    $0x2,%eax
f0124020:	c1 e0 02             	shl    $0x2,%eax
f0124023:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
		i = 0;
f0124029:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f0124030:	c7 45 d8 00 00 00 f6 	movl   $0xf6000000,-0x28(%ebp)
f0124037:	eb 29                	jmp    f0124062 <test_kheap_phys_addr+0xe63>
		{
			allPAs[i++] = kheap_physical_address(va);
f0124039:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
f012403c:	8d 43 01             	lea    0x1(%ebx),%eax
f012403f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0124042:	83 ec 0c             	sub    $0xc,%esp
f0124045:	ff 75 d8             	pushl  -0x28(%ebp)
f0124048:	e8 cb 43 fe ff       	call   f0108418 <kheap_physical_address>
f012404d:	83 c4 10             	add    $0x10,%esp
f0124050:	89 c2                	mov    %eax,%edx
f0124052:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0124058:	89 14 98             	mov    %edx,(%eax,%ebx,4)
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
		i = 0;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f012405b:	81 45 d8 00 10 00 00 	addl   $0x1000,-0x28(%ebp)
f0124062:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0124065:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012406b:	72 cc                	jb     f0124039 <test_kheap_phys_addr+0xe3a>
		{
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
f012406d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0124070:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
		i = 0;
f0124076:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f012407d:	c7 45 d8 00 00 00 f6 	movl   $0xf6000000,-0x28(%ebp)
f0124084:	e9 ab 00 00 00       	jmp    f0124134 <test_kheap_phys_addr+0xf35>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f0124089:	a1 30 ce 2b f0       	mov    0xf02bce30,%eax
f012408e:	83 ec 04             	sub    $0x4,%esp
f0124091:	8d 95 a4 fd ff ff    	lea    -0x25c(%ebp),%edx
f0124097:	52                   	push   %edx
f0124098:	ff 75 d8             	pushl  -0x28(%ebp)
f012409b:	50                   	push   %eax
f012409c:	e8 46 34 fe ff       	call   f01074e7 <get_page_table>
f01240a1:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f01240a4:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f01240aa:	85 c0                	test   %eax,%eax
f01240ac:	75 17                	jne    f01240c5 <test_kheap_phys_addr+0xec6>
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f01240ae:	83 ec 04             	sub    $0x4,%esp
f01240b1:	68 d4 a8 13 f0       	push   $0xf013a8d4
f01240b6:	68 93 08 00 00       	push   $0x893
f01240bb:	68 32 9f 13 f0       	push   $0xf0139f32
f01240c0:	e8 eb c0 fd ff       	call   f01001b0 <_panic>

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f01240c5:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01240c8:	c1 e8 0c             	shr    $0xc,%eax
f01240cb:	25 ff 03 00 00       	and    $0x3ff,%eax
f01240d0:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f01240d3:	eb 4b                	jmp    f0124120 <test_kheap_phys_addr+0xf21>
			{
				if ((ptr_table[j] & 0xFFFFF000) != allPAs[i])
f01240d5:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f01240db:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f01240de:	c1 e2 02             	shl    $0x2,%edx
f01240e1:	01 d0                	add    %edx,%eax
f01240e3:	8b 00                	mov    (%eax),%eax
f01240e5:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01240ea:	89 c1                	mov    %eax,%ecx
f01240ec:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f01240f2:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01240f5:	8b 04 90             	mov    (%eax,%edx,4),%eax
f01240f8:	39 c1                	cmp    %eax,%ecx
f01240fa:	74 17                	je     f0124113 <test_kheap_phys_addr+0xf14>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					panic("Wrong kheap_physical_address");
f01240fc:	83 ec 04             	sub    $0x4,%esp
f01240ff:	68 2d a9 13 f0       	push   $0xf013a92d
f0124104:	68 9a 08 00 00       	push   $0x89a
f0124109:	68 32 9f 13 f0       	push   $0xf0139f32
f012410e:	e8 9d c0 fd ff       	call   f01001b0 <_panic>
				}
				va += PAGE_SIZE;
f0124113:	81 45 d8 00 10 00 00 	addl   $0x1000,-0x28(%ebp)
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
			if (ptr_table == NULL)
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f012411a:	ff 45 d4             	incl   -0x2c(%ebp)
f012411d:	ff 45 e4             	incl   -0x1c(%ebp)
f0124120:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0124123:	3b 85 bc fe ff ff    	cmp    -0x144(%ebp),%eax
f0124129:	7d 09                	jge    f0124134 <test_kheap_phys_addr+0xf35>
f012412b:	81 7d d4 ff 03 00 00 	cmpl   $0x3ff,-0x2c(%ebp)
f0124132:	7e a1                	jle    f01240d5 <test_kheap_phys_addr+0xed6>
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
		i = 0;
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f0124134:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0124137:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012413d:	0f 82 46 ff ff ff    	jb     f0124089 <test_kheap_phys_addr+0xe8a>
f0124143:	89 f4                	mov    %esi,%esp
				va += PAGE_SIZE;
			}
		}
	}

	cprintf("\b\b\b80%");
f0124145:	83 ec 0c             	sub    $0xc,%esp
f0124148:	68 bd a0 13 f0       	push   $0xf013a0bd
f012414d:	e8 df cc fd ff       	call   f0100e31 <cprintf>
f0124152:	83 c4 10             	add    $0x10,%esp

	//test kheap_physical_address on non-mapped area [20%]
	{
		uint32 va;
		uint32 startVA = ACTUAL_START + 16*Mega;
f0124155:	c7 85 b8 fe ff ff 00 	movl   $0x1000,-0x148(%ebp)
f012415c:	10 00 00 
f012415f:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0124164:	0f b6 d0             	movzbl %al,%edx
f0124167:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012416d:	01 d0                	add    %edx,%eax
f012416f:	48                   	dec    %eax
f0124170:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
f0124176:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012417c:	ba 00 00 00 00       	mov    $0x0,%edx
f0124181:	f7 b5 b8 fe ff ff    	divl   -0x148(%ebp)
f0124187:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012418d:	29 d0                	sub    %edx,%eax
f012418f:	89 c1                	mov    %eax,%ecx
f0124191:	c7 85 b0 fe ff ff 00 	movl   $0x1000,-0x150(%ebp)
f0124198:	10 00 00 
f012419b:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f01241a0:	0f b6 c0             	movzbl %al,%eax
f01241a3:	c1 e0 04             	shl    $0x4,%eax
f01241a6:	89 c2                	mov    %eax,%edx
f01241a8:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f01241ae:	01 d0                	add    %edx,%eax
f01241b0:	48                   	dec    %eax
f01241b1:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
f01241b7:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f01241bd:	ba 00 00 00 00       	mov    $0x0,%edx
f01241c2:	f7 b5 b0 fe ff ff    	divl   -0x150(%ebp)
f01241c8:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f01241ce:	29 d0                	sub    %edx,%eax
f01241d0:	01 c8                	add    %ecx,%eax
f01241d2:	2d 00 c0 ff 08       	sub    $0x8ffc000,%eax
f01241d7:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
		i = 0;
f01241dd:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		for (va = startVA; va < KERNEL_HEAP_MAX; va+=PAGE_SIZE)
f01241e4:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f01241ea:	89 45 d0             	mov    %eax,-0x30(%ebp)
f01241ed:	eb 0a                	jmp    f01241f9 <test_kheap_phys_addr+0xffa>
		{
			i++;
f01241ef:	ff 45 e4             	incl   -0x1c(%ebp)
	//test kheap_physical_address on non-mapped area [20%]
	{
		uint32 va;
		uint32 startVA = ACTUAL_START + 16*Mega;
		i = 0;
		for (va = startVA; va < KERNEL_HEAP_MAX; va+=PAGE_SIZE)
f01241f2:	81 45 d0 00 10 00 00 	addl   $0x1000,-0x30(%ebp)
f01241f9:	81 7d d0 ff ef ff ff 	cmpl   $0xffffefff,-0x30(%ebp)
f0124200:	76 ed                	jbe    f01241ef <test_kheap_phys_addr+0xff0>
		{
			i++;
		}
		int ii = i ;
f0124202:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0124205:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
		i = 0;
f012420b:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		int j;
		long long va2;
		for (va2 = startVA; va2 < (long long)KERNEL_HEAP_MAX; va2+=PTSIZE)
f0124212:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0124218:	89 45 c0             	mov    %eax,-0x40(%ebp)
f012421b:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
f0124222:	e9 cc 00 00 00       	jmp    f01242f3 <test_kheap_phys_addr+0x10f4>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va2, &ptr_table);
f0124227:	8b 55 c0             	mov    -0x40(%ebp),%edx
f012422a:	a1 30 ce 2b f0       	mov    0xf02bce30,%eax
f012422f:	83 ec 04             	sub    $0x4,%esp
f0124232:	8d 8d a0 fd ff ff    	lea    -0x260(%ebp),%ecx
f0124238:	51                   	push   %ecx
f0124239:	52                   	push   %edx
f012423a:	50                   	push   %eax
f012423b:	e8 a7 32 fe ff       	call   f01074e7 <get_page_table>
f0124240:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0124243:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f0124249:	85 c0                	test   %eax,%eax
f012424b:	75 17                	jne    f0124264 <test_kheap_phys_addr+0x1065>
			{
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f012424d:	83 ec 04             	sub    $0x4,%esp
f0124250:	68 d4 a8 13 f0       	push   $0xf013a8d4
f0124255:	68 b6 08 00 00       	push   $0x8b6
f012425a:	68 32 9f 13 f0       	push   $0xf0139f32
f012425f:	e8 4c bf fd ff       	call   f01001b0 <_panic>
			}
			for (j = 0; i < ii && j < 1024; ++j, ++i)
f0124264:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f012426b:	eb 67                	jmp    f01242d4 <test_kheap_phys_addr+0x10d5>
			{
				//if ((ptr_table[j] & 0xFFFFF000) != allPAs[i])
				unsigned int page_va = startVA+i*PAGE_SIZE;
f012426d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0124270:	c1 e0 0c             	shl    $0xc,%eax
f0124273:	89 c2                	mov    %eax,%edx
f0124275:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012427b:	01 d0                	add    %edx,%eax
f012427d:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
				unsigned int supposed_kheap_phys_add = kheap_physical_address(page_va);
f0124283:	83 ec 0c             	sub    $0xc,%esp
f0124286:	ff b5 a0 fe ff ff    	pushl  -0x160(%ebp)
f012428c:	e8 87 41 fe ff       	call   f0108418 <kheap_physical_address>
f0124291:	83 c4 10             	add    $0x10,%esp
f0124294:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
				if ((ptr_table[j] & 0xFFFFF000) != supposed_kheap_phys_add)
f012429a:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f01242a0:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01242a3:	c1 e2 02             	shl    $0x2,%edx
f01242a6:	01 d0                	add    %edx,%eax
f01242a8:	8b 00                	mov    (%eax),%eax
f01242aa:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01242af:	3b 85 9c fe ff ff    	cmp    -0x164(%ebp),%eax
f01242b5:	74 17                	je     f01242ce <test_kheap_phys_addr+0x10cf>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va2 + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					panic("Wrong kheap_physical_address");
f01242b7:	83 ec 04             	sub    $0x4,%esp
f01242ba:	68 2d a9 13 f0       	push   $0xf013a92d
f01242bf:	68 c0 08 00 00       	push   $0x8c0
f01242c4:	68 32 9f 13 f0       	push   $0xf0139f32
f01242c9:	e8 e2 be fd ff       	call   f01001b0 <_panic>
			get_page_table(ptr_page_directory, (uint32)va2, &ptr_table);
			if (ptr_table == NULL)
			{
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
			}
			for (j = 0; i < ii && j < 1024; ++j, ++i)
f01242ce:	ff 45 cc             	incl   -0x34(%ebp)
f01242d1:	ff 45 e4             	incl   -0x1c(%ebp)
f01242d4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01242d7:	3b 85 a4 fe ff ff    	cmp    -0x15c(%ebp),%eax
f01242dd:	7d 09                	jge    f01242e8 <test_kheap_phys_addr+0x10e9>
f01242df:	81 7d cc ff 03 00 00 	cmpl   $0x3ff,-0x34(%ebp)
f01242e6:	7e 85                	jle    f012426d <test_kheap_phys_addr+0x106e>
		}
		int ii = i ;
		i = 0;
		int j;
		long long va2;
		for (va2 = startVA; va2 < (long long)KERNEL_HEAP_MAX; va2+=PTSIZE)
f01242e8:	81 45 c0 00 00 40 00 	addl   $0x400000,-0x40(%ebp)
f01242ef:	83 55 c4 00          	adcl   $0x0,-0x3c(%ebp)
f01242f3:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
f01242f7:	0f 88 2a ff ff ff    	js     f0124227 <test_kheap_phys_addr+0x1028>
f01242fd:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
f0124301:	7f 0d                	jg     f0124310 <test_kheap_phys_addr+0x1111>
f0124303:	81 7d c0 ff ef ff ff 	cmpl   $0xffffefff,-0x40(%ebp)
f012430a:	0f 86 17 ff ff ff    	jbe    f0124227 <test_kheap_phys_addr+0x1028>
				}
			}
		}
	}

	cprintf("\b\b\b100%\n");
f0124310:	83 ec 0c             	sub    $0xc,%esp
f0124313:	68 16 a1 13 f0       	push   $0xf013a116
f0124318:	e8 14 cb fd ff       	call   f0100e31 <cprintf>
f012431d:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test kheap_physical_address completed successfully.\n");
f0124320:	83 ec 0c             	sub    $0xc,%esp
f0124323:	68 80 a9 13 f0       	push   $0xf013a980
f0124328:	e8 04 cb fd ff       	call   f0100e31 <cprintf>
f012432d:	83 c4 10             	add    $0x10,%esp

	return 1;
f0124330:	b8 01 00 00 00       	mov    $0x1,%eax

}
f0124335:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0124338:	5b                   	pop    %ebx
f0124339:	5e                   	pop    %esi
f012433a:	5f                   	pop    %edi
f012433b:	5d                   	pop    %ebp
f012433c:	c3                   	ret    

f012433d <test_kheap_virt_addr>:

int test_kheap_virt_addr()
{
f012433d:	55                   	push   %ebp
f012433e:	89 e5                	mov    %esp,%ebp
f0124340:	57                   	push   %edi
f0124341:	56                   	push   %esi
f0124342:	53                   	push   %ebx
f0124343:	81 ec 3c 02 00 00    	sub    $0x23c,%esp
f0124349:	89 e0                	mov    %esp,%eax
f012434b:	89 c6                	mov    %eax,%esi
	cprintf("==============================================\n");
f012434d:	83 ec 0c             	sub    $0xc,%esp
f0124350:	68 74 9e 13 f0       	push   $0xf0139e74
f0124355:	e8 d7 ca fd ff       	call   f0100e31 <cprintf>
f012435a:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f012435d:	83 ec 0c             	sub    $0xc,%esp
f0124360:	68 a4 9e 13 f0       	push   $0xf0139ea4
f0124365:	e8 c7 ca fd ff       	call   f0100e31 <cprintf>
f012436a:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f012436d:	83 ec 0c             	sub    $0xc,%esp
f0124370:	68 74 9e 13 f0       	push   $0xf0139e74
f0124375:	e8 b7 ca fd ff       	call   f0100e31 <cprintf>
f012437a:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f012437d:	c6 45 d3 80          	movb   $0x80,-0x2d(%ebp)
	char maxByte = 0x7F;
f0124381:	c6 45 d2 7f          	movb   $0x7f,-0x2e(%ebp)
	short minShort = 1<<15 ;
f0124385:	66 c7 45 d0 00 80    	movw   $0x8000,-0x30(%ebp)
	short maxShort = 0x7FFF;
f012438b:	66 c7 45 ce ff 7f    	movw   $0x7fff,-0x32(%ebp)
	int minInt = 1<<31 ;
f0124391:	c7 45 c8 00 00 00 80 	movl   $0x80000000,-0x38(%ebp)
	int maxInt = 0x7FFFFFFF;
f0124398:	c7 45 c4 ff ff ff 7f 	movl   $0x7fffffff,-0x3c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f012439f:	e8 9a 8a fe ff       	call   f010ce3e <sys_calculate_free_frames>
f01243a4:	89 45 c0             	mov    %eax,-0x40(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f01243a7:	8d 95 60 fe ff ff    	lea    -0x1a0(%ebp),%edx
f01243ad:	b9 14 00 00 00       	mov    $0x14,%ecx
f01243b2:	b8 00 00 00 00       	mov    $0x0,%eax
f01243b7:	89 d7                	mov    %edx,%edi
f01243b9:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f01243bb:	8d 95 10 fe ff ff    	lea    -0x1f0(%ebp),%edx
f01243c1:	b9 14 00 00 00       	mov    $0x14,%ecx
f01243c6:	b8 00 00 00 00       	mov    $0x0,%eax
f01243cb:	89 d7                	mov    %edx,%edi
f01243cd:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f01243cf:	8d 95 c0 fd ff ff    	lea    -0x240(%ebp),%edx
f01243d5:	b9 14 00 00 00       	mov    $0x14,%ecx
f01243da:	b8 00 00 00 00       	mov    $0x0,%eax
f01243df:	89 d7                	mov    %edx,%edi
f01243e1:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01243e3:	e8 56 8a fe ff       	call   f010ce3e <sys_calculate_free_frames>
f01243e8:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01243eb:	e8 94 02 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01243f0:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f01243f3:	83 ec 0c             	sub    $0xc,%esp
f01243f6:	68 00 fc 1f 00       	push   $0x1ffc00
f01243fb:	e8 53 3e fe ff       	call   f0108253 <kmalloc>
f0124400:	83 c4 10             	add    $0x10,%esp
f0124403:	89 85 c0 fd ff ff    	mov    %eax,-0x240(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0124409:	8b 85 c0 fd ff ff    	mov    -0x240(%ebp),%eax
f012440f:	89 c1                	mov    %eax,%ecx
f0124411:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f0124418:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f012441d:	0f b6 d0             	movzbl %al,%edx
f0124420:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0124423:	01 d0                	add    %edx,%eax
f0124425:	48                   	dec    %eax
f0124426:	89 45 b0             	mov    %eax,-0x50(%ebp)
f0124429:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012442c:	ba 00 00 00 00       	mov    $0x0,%edx
f0124431:	f7 75 b4             	divl   -0x4c(%ebp)
f0124434:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0124437:	29 d0                	sub    %edx,%eax
f0124439:	89 c3                	mov    %eax,%ebx
f012443b:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f0124442:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0124447:	0f b6 c0             	movzbl %al,%eax
f012444a:	c1 e0 04             	shl    $0x4,%eax
f012444d:	89 c2                	mov    %eax,%edx
f012444f:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0124452:	01 d0                	add    %edx,%eax
f0124454:	48                   	dec    %eax
f0124455:	89 45 a8             	mov    %eax,-0x58(%ebp)
f0124458:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012445b:	ba 00 00 00 00       	mov    $0x0,%edx
f0124460:	f7 75 ac             	divl   -0x54(%ebp)
f0124463:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0124466:	29 d0                	sub    %edx,%eax
f0124468:	01 d8                	add    %ebx,%eax
f012446a:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f012446f:	39 c1                	cmp    %eax,%ecx
f0124471:	74 17                	je     f012448a <test_kheap_virt_addr+0x14d>
f0124473:	83 ec 04             	sub    $0x4,%esp
f0124476:	68 18 a0 13 f0       	push   $0xf013a018
f012447b:	68 ed 08 00 00       	push   $0x8ed
f0124480:	68 32 9f 13 f0       	push   $0xf0139f32
f0124485:	e8 26 bd fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012448a:	e8 f5 01 fe ff       	call   f0104684 <pf_calculate_free_frames>
f012448f:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0124492:	74 17                	je     f01244ab <test_kheap_virt_addr+0x16e>
f0124494:	83 ec 04             	sub    $0x4,%esp
f0124497:	68 4c 9f 13 f0       	push   $0xf0139f4c
f012449c:	68 ee 08 00 00       	push   $0x8ee
f01244a1:	68 32 9f 13 f0       	push   $0xf0139f32
f01244a6:	e8 05 bd fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01244ab:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f01244ae:	e8 8b 89 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f01244b3:	29 c3                	sub    %eax,%ebx
f01244b5:	89 d8                	mov    %ebx,%eax
f01244b7:	3d 00 02 00 00       	cmp    $0x200,%eax
f01244bc:	74 17                	je     f01244d5 <test_kheap_virt_addr+0x198>
f01244be:	83 ec 04             	sub    $0x4,%esp
f01244c1:	68 b4 9f 13 f0       	push   $0xf0139fb4
f01244c6:	68 ef 08 00 00       	push   $0x8ef
f01244cb:	68 32 9f 13 f0       	push   $0xf0139f32
f01244d0:	e8 db bc fd ff       	call   f01001b0 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01244d5:	e8 64 89 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f01244da:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01244dd:	e8 a2 01 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01244e2:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f01244e5:	83 ec 0c             	sub    $0xc,%esp
f01244e8:	68 00 fc 1f 00       	push   $0x1ffc00
f01244ed:	e8 61 3d fe ff       	call   f0108253 <kmalloc>
f01244f2:	83 c4 10             	add    $0x10,%esp
f01244f5:	89 85 c4 fd ff ff    	mov    %eax,-0x23c(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01244fb:	8b 85 c4 fd ff ff    	mov    -0x23c(%ebp),%eax
f0124501:	89 c1                	mov    %eax,%ecx
f0124503:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f012450a:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f012450f:	0f b6 d0             	movzbl %al,%edx
f0124512:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0124515:	01 d0                	add    %edx,%eax
f0124517:	48                   	dec    %eax
f0124518:	89 45 a0             	mov    %eax,-0x60(%ebp)
f012451b:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012451e:	ba 00 00 00 00       	mov    $0x0,%edx
f0124523:	f7 75 a4             	divl   -0x5c(%ebp)
f0124526:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0124529:	29 d0                	sub    %edx,%eax
f012452b:	89 c3                	mov    %eax,%ebx
f012452d:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f0124534:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0124539:	0f b6 c0             	movzbl %al,%eax
f012453c:	c1 e0 04             	shl    $0x4,%eax
f012453f:	89 c2                	mov    %eax,%edx
f0124541:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0124544:	01 d0                	add    %edx,%eax
f0124546:	48                   	dec    %eax
f0124547:	89 45 98             	mov    %eax,-0x68(%ebp)
f012454a:	8b 45 98             	mov    -0x68(%ebp),%eax
f012454d:	ba 00 00 00 00       	mov    $0x0,%edx
f0124552:	f7 75 9c             	divl   -0x64(%ebp)
f0124555:	8b 45 98             	mov    -0x68(%ebp),%eax
f0124558:	29 d0                	sub    %edx,%eax
f012455a:	01 d8                	add    %ebx,%eax
f012455c:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0124561:	39 c1                	cmp    %eax,%ecx
f0124563:	74 17                	je     f012457c <test_kheap_virt_addr+0x23f>
f0124565:	83 ec 04             	sub    $0x4,%esp
f0124568:	68 18 a0 13 f0       	push   $0xf013a018
f012456d:	68 f5 08 00 00       	push   $0x8f5
f0124572:	68 32 9f 13 f0       	push   $0xf0139f32
f0124577:	e8 34 bc fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012457c:	e8 03 01 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0124581:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0124584:	74 17                	je     f012459d <test_kheap_virt_addr+0x260>
f0124586:	83 ec 04             	sub    $0x4,%esp
f0124589:	68 4c 9f 13 f0       	push   $0xf0139f4c
f012458e:	68 f6 08 00 00       	push   $0x8f6
f0124593:	68 32 9f 13 f0       	push   $0xf0139f32
f0124598:	e8 13 bc fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f012459d:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f01245a0:	e8 99 88 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f01245a5:	29 c3                	sub    %eax,%ebx
f01245a7:	89 d8                	mov    %ebx,%eax
f01245a9:	3d 00 02 00 00       	cmp    $0x200,%eax
f01245ae:	74 17                	je     f01245c7 <test_kheap_virt_addr+0x28a>
f01245b0:	83 ec 04             	sub    $0x4,%esp
f01245b3:	68 b4 9f 13 f0       	push   $0xf0139fb4
f01245b8:	68 f7 08 00 00       	push   $0x8f7
f01245bd:	68 32 9f 13 f0       	push   $0xf0139f32
f01245c2:	e8 e9 bb fd ff       	call   f01001b0 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01245c7:	e8 72 88 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f01245cc:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01245cf:	e8 b0 00 fe ff       	call   f0104684 <pf_calculate_free_frames>
f01245d4:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f01245d7:	83 ec 0c             	sub    $0xc,%esp
f01245da:	68 00 08 00 00       	push   $0x800
f01245df:	e8 6f 3c fe ff       	call   f0108253 <kmalloc>
f01245e4:	83 c4 10             	add    $0x10,%esp
f01245e7:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01245ed:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f01245f3:	89 c1                	mov    %eax,%ecx
f01245f5:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f01245fc:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0124601:	0f b6 d0             	movzbl %al,%edx
f0124604:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0124607:	01 d0                	add    %edx,%eax
f0124609:	48                   	dec    %eax
f012460a:	89 45 90             	mov    %eax,-0x70(%ebp)
f012460d:	8b 45 90             	mov    -0x70(%ebp),%eax
f0124610:	ba 00 00 00 00       	mov    $0x0,%edx
f0124615:	f7 75 94             	divl   -0x6c(%ebp)
f0124618:	8b 45 90             	mov    -0x70(%ebp),%eax
f012461b:	29 d0                	sub    %edx,%eax
f012461d:	89 c3                	mov    %eax,%ebx
f012461f:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f0124626:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f012462b:	0f b6 c0             	movzbl %al,%eax
f012462e:	c1 e0 04             	shl    $0x4,%eax
f0124631:	89 c2                	mov    %eax,%edx
f0124633:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0124636:	01 d0                	add    %edx,%eax
f0124638:	48                   	dec    %eax
f0124639:	89 45 88             	mov    %eax,-0x78(%ebp)
f012463c:	8b 45 88             	mov    -0x78(%ebp),%eax
f012463f:	ba 00 00 00 00       	mov    $0x0,%edx
f0124644:	f7 75 8c             	divl   -0x74(%ebp)
f0124647:	8b 45 88             	mov    -0x78(%ebp),%eax
f012464a:	29 d0                	sub    %edx,%eax
f012464c:	01 d8                	add    %ebx,%eax
f012464e:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0124653:	39 c1                	cmp    %eax,%ecx
f0124655:	74 17                	je     f012466e <test_kheap_virt_addr+0x331>
f0124657:	83 ec 04             	sub    $0x4,%esp
f012465a:	68 18 a0 13 f0       	push   $0xf013a018
f012465f:	68 fd 08 00 00       	push   $0x8fd
f0124664:	68 32 9f 13 f0       	push   $0xf0139f32
f0124669:	e8 42 bb fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012466e:	e8 11 00 fe ff       	call   f0104684 <pf_calculate_free_frames>
f0124673:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0124676:	74 17                	je     f012468f <test_kheap_virt_addr+0x352>
f0124678:	83 ec 04             	sub    $0x4,%esp
f012467b:	68 4c 9f 13 f0       	push   $0xf0139f4c
f0124680:	68 fe 08 00 00       	push   $0x8fe
f0124685:	68 32 9f 13 f0       	push   $0xf0139f32
f012468a:	e8 21 bb fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f012468f:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0124692:	e8 a7 87 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0124697:	29 c3                	sub    %eax,%ebx
f0124699:	89 d8                	mov    %ebx,%eax
f012469b:	83 f8 01             	cmp    $0x1,%eax
f012469e:	74 17                	je     f01246b7 <test_kheap_virt_addr+0x37a>
f01246a0:	83 ec 04             	sub    $0x4,%esp
f01246a3:	68 b4 9f 13 f0       	push   $0xf0139fb4
f01246a8:	68 ff 08 00 00       	push   $0x8ff
f01246ad:	68 32 9f 13 f0       	push   $0xf0139f32
f01246b2:	e8 f9 ba fd ff       	call   f01001b0 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01246b7:	e8 82 87 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f01246bc:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01246bf:	e8 c0 ff fd ff       	call   f0104684 <pf_calculate_free_frames>
f01246c4:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f01246c7:	83 ec 0c             	sub    $0xc,%esp
f01246ca:	68 00 08 00 00       	push   $0x800
f01246cf:	e8 7f 3b fe ff       	call   f0108253 <kmalloc>
f01246d4:	83 c4 10             	add    $0x10,%esp
f01246d7:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01246dd:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f01246e3:	89 c1                	mov    %eax,%ecx
f01246e5:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f01246ec:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f01246f1:	0f b6 d0             	movzbl %al,%edx
f01246f4:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01246f7:	01 d0                	add    %edx,%eax
f01246f9:	48                   	dec    %eax
f01246fa:	89 45 80             	mov    %eax,-0x80(%ebp)
f01246fd:	8b 45 80             	mov    -0x80(%ebp),%eax
f0124700:	ba 00 00 00 00       	mov    $0x0,%edx
f0124705:	f7 75 84             	divl   -0x7c(%ebp)
f0124708:	8b 45 80             	mov    -0x80(%ebp),%eax
f012470b:	29 d0                	sub    %edx,%eax
f012470d:	89 c3                	mov    %eax,%ebx
f012470f:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f0124716:	10 00 00 
f0124719:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f012471e:	0f b6 c0             	movzbl %al,%eax
f0124721:	c1 e0 04             	shl    $0x4,%eax
f0124724:	89 c2                	mov    %eax,%edx
f0124726:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012472c:	01 d0                	add    %edx,%eax
f012472e:	48                   	dec    %eax
f012472f:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f0124735:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012473b:	ba 00 00 00 00       	mov    $0x0,%edx
f0124740:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f0124746:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012474c:	29 d0                	sub    %edx,%eax
f012474e:	01 d8                	add    %ebx,%eax
f0124750:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0124755:	39 c1                	cmp    %eax,%ecx
f0124757:	74 17                	je     f0124770 <test_kheap_virt_addr+0x433>
f0124759:	83 ec 04             	sub    $0x4,%esp
f012475c:	68 18 a0 13 f0       	push   $0xf013a018
f0124761:	68 05 09 00 00       	push   $0x905
f0124766:	68 32 9f 13 f0       	push   $0xf0139f32
f012476b:	e8 40 ba fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124770:	e8 0f ff fd ff       	call   f0104684 <pf_calculate_free_frames>
f0124775:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0124778:	74 17                	je     f0124791 <test_kheap_virt_addr+0x454>
f012477a:	83 ec 04             	sub    $0x4,%esp
f012477d:	68 4c 9f 13 f0       	push   $0xf0139f4c
f0124782:	68 06 09 00 00       	push   $0x906
f0124787:	68 32 9f 13 f0       	push   $0xf0139f32
f012478c:	e8 1f ba fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124791:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0124794:	e8 a5 86 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0124799:	29 c3                	sub    %eax,%ebx
f012479b:	89 d8                	mov    %ebx,%eax
f012479d:	83 f8 01             	cmp    $0x1,%eax
f01247a0:	74 17                	je     f01247b9 <test_kheap_virt_addr+0x47c>
f01247a2:	83 ec 04             	sub    $0x4,%esp
f01247a5:	68 b4 9f 13 f0       	push   $0xf0139fb4
f01247aa:	68 07 09 00 00       	push   $0x907
f01247af:	68 32 9f 13 f0       	push   $0xf0139f32
f01247b4:	e8 f7 b9 fd ff       	call   f01001b0 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f01247b9:	e8 80 86 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f01247be:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01247c1:	e8 be fe fd ff       	call   f0104684 <pf_calculate_free_frames>
f01247c6:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f01247c9:	83 ec 0c             	sub    $0xc,%esp
f01247cc:	68 00 1c 00 00       	push   $0x1c00
f01247d1:	e8 7d 3a fe ff       	call   f0108253 <kmalloc>
f01247d6:	83 c4 10             	add    $0x10,%esp
f01247d9:	89 85 d0 fd ff ff    	mov    %eax,-0x230(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01247df:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f01247e5:	89 c1                	mov    %eax,%ecx
f01247e7:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f01247ee:	10 00 00 
f01247f1:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f01247f6:	0f b6 d0             	movzbl %al,%edx
f01247f9:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01247ff:	01 d0                	add    %edx,%eax
f0124801:	48                   	dec    %eax
f0124802:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f0124808:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012480e:	ba 00 00 00 00       	mov    $0x0,%edx
f0124813:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f0124819:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012481f:	29 d0                	sub    %edx,%eax
f0124821:	89 c3                	mov    %eax,%ebx
f0124823:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f012482a:	10 00 00 
f012482d:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0124832:	0f b6 c0             	movzbl %al,%eax
f0124835:	c1 e0 04             	shl    $0x4,%eax
f0124838:	89 c2                	mov    %eax,%edx
f012483a:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0124840:	01 d0                	add    %edx,%eax
f0124842:	48                   	dec    %eax
f0124843:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f0124849:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012484f:	ba 00 00 00 00       	mov    $0x0,%edx
f0124854:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f012485a:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0124860:	29 d0                	sub    %edx,%eax
f0124862:	01 d8                	add    %ebx,%eax
f0124864:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0124869:	39 c1                	cmp    %eax,%ecx
f012486b:	74 17                	je     f0124884 <test_kheap_virt_addr+0x547>
f012486d:	83 ec 04             	sub    $0x4,%esp
f0124870:	68 18 a0 13 f0       	push   $0xf013a018
f0124875:	68 0d 09 00 00       	push   $0x90d
f012487a:	68 32 9f 13 f0       	push   $0xf0139f32
f012487f:	e8 2c b9 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124884:	e8 fb fd fd ff       	call   f0104684 <pf_calculate_free_frames>
f0124889:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f012488c:	74 17                	je     f01248a5 <test_kheap_virt_addr+0x568>
f012488e:	83 ec 04             	sub    $0x4,%esp
f0124891:	68 4c 9f 13 f0       	push   $0xf0139f4c
f0124896:	68 0e 09 00 00       	push   $0x90e
f012489b:	68 32 9f 13 f0       	push   $0xf0139f32
f01248a0:	e8 0b b9 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f01248a5:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f01248a8:	e8 91 85 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f01248ad:	29 c3                	sub    %eax,%ebx
f01248af:	89 d8                	mov    %ebx,%eax
f01248b1:	83 f8 02             	cmp    $0x2,%eax
f01248b4:	74 17                	je     f01248cd <test_kheap_virt_addr+0x590>
f01248b6:	83 ec 04             	sub    $0x4,%esp
f01248b9:	68 b4 9f 13 f0       	push   $0xf0139fb4
f01248be:	68 0f 09 00 00       	push   $0x90f
f01248c3:	68 32 9f 13 f0       	push   $0xf0139f32
f01248c8:	e8 e3 b8 fd ff       	call   f01001b0 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f01248cd:	e8 6c 85 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f01248d2:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01248d5:	e8 aa fd fd ff       	call   f0104684 <pf_calculate_free_frames>
f01248da:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f01248dd:	83 ec 0c             	sub    $0xc,%esp
f01248e0:	68 00 fc 2f 00       	push   $0x2ffc00
f01248e5:	e8 69 39 fe ff       	call   f0108253 <kmalloc>
f01248ea:	83 c4 10             	add    $0x10,%esp
f01248ed:	89 85 d4 fd ff ff    	mov    %eax,-0x22c(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01248f3:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f01248f9:	89 c1                	mov    %eax,%ecx
f01248fb:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f0124902:	10 00 00 
f0124905:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f012490a:	0f b6 d0             	movzbl %al,%edx
f012490d:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0124913:	01 d0                	add    %edx,%eax
f0124915:	48                   	dec    %eax
f0124916:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f012491c:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0124922:	ba 00 00 00 00       	mov    $0x0,%edx
f0124927:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f012492d:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0124933:	29 d0                	sub    %edx,%eax
f0124935:	89 c3                	mov    %eax,%ebx
f0124937:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f012493e:	10 00 00 
f0124941:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0124946:	0f b6 c0             	movzbl %al,%eax
f0124949:	c1 e0 04             	shl    $0x4,%eax
f012494c:	89 c2                	mov    %eax,%edx
f012494e:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0124954:	01 d0                	add    %edx,%eax
f0124956:	48                   	dec    %eax
f0124957:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f012495d:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0124963:	ba 00 00 00 00       	mov    $0x0,%edx
f0124968:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f012496e:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0124974:	29 d0                	sub    %edx,%eax
f0124976:	01 d8                	add    %ebx,%eax
f0124978:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f012497d:	39 c1                	cmp    %eax,%ecx
f012497f:	74 17                	je     f0124998 <test_kheap_virt_addr+0x65b>
f0124981:	83 ec 04             	sub    $0x4,%esp
f0124984:	68 18 a0 13 f0       	push   $0xf013a018
f0124989:	68 15 09 00 00       	push   $0x915
f012498e:	68 32 9f 13 f0       	push   $0xf0139f32
f0124993:	e8 18 b8 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124998:	e8 e7 fc fd ff       	call   f0104684 <pf_calculate_free_frames>
f012499d:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f01249a0:	74 17                	je     f01249b9 <test_kheap_virt_addr+0x67c>
f01249a2:	83 ec 04             	sub    $0x4,%esp
f01249a5:	68 4c 9f 13 f0       	push   $0xf0139f4c
f01249aa:	68 16 09 00 00       	push   $0x916
f01249af:	68 32 9f 13 f0       	push   $0xf0139f32
f01249b4:	e8 f7 b7 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f01249b9:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f01249bc:	e8 7d 84 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f01249c1:	29 c3                	sub    %eax,%ebx
f01249c3:	89 d8                	mov    %ebx,%eax
f01249c5:	3d 00 03 00 00       	cmp    $0x300,%eax
f01249ca:	74 17                	je     f01249e3 <test_kheap_virt_addr+0x6a6>
f01249cc:	83 ec 04             	sub    $0x4,%esp
f01249cf:	68 b4 9f 13 f0       	push   $0xf0139fb4
f01249d4:	68 17 09 00 00       	push   $0x917
f01249d9:	68 32 9f 13 f0       	push   $0xf0139f32
f01249de:	e8 cd b7 fd ff       	call   f01001b0 <_panic>

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f01249e3:	e8 56 84 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f01249e8:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01249eb:	e8 94 fc fd ff       	call   f0104684 <pf_calculate_free_frames>
f01249f0:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f01249f3:	83 ec 0c             	sub    $0xc,%esp
f01249f6:	68 00 fc 5f 00       	push   $0x5ffc00
f01249fb:	e8 53 38 fe ff       	call   f0108253 <kmalloc>
f0124a00:	83 c4 10             	add    $0x10,%esp
f0124a03:	89 85 d8 fd ff ff    	mov    %eax,-0x228(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0124a09:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0124a0f:	89 c1                	mov    %eax,%ecx
f0124a11:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f0124a18:	10 00 00 
f0124a1b:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0124a20:	0f b6 d0             	movzbl %al,%edx
f0124a23:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0124a29:	01 d0                	add    %edx,%eax
f0124a2b:	48                   	dec    %eax
f0124a2c:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f0124a32:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0124a38:	ba 00 00 00 00       	mov    $0x0,%edx
f0124a3d:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f0124a43:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0124a49:	29 d0                	sub    %edx,%eax
f0124a4b:	89 c3                	mov    %eax,%ebx
f0124a4d:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f0124a54:	10 00 00 
f0124a57:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0124a5c:	0f b6 c0             	movzbl %al,%eax
f0124a5f:	c1 e0 04             	shl    $0x4,%eax
f0124a62:	89 c2                	mov    %eax,%edx
f0124a64:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0124a6a:	01 d0                	add    %edx,%eax
f0124a6c:	48                   	dec    %eax
f0124a6d:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f0124a73:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0124a79:	ba 00 00 00 00       	mov    $0x0,%edx
f0124a7e:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f0124a84:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0124a8a:	29 d0                	sub    %edx,%eax
f0124a8c:	01 d8                	add    %ebx,%eax
f0124a8e:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0124a93:	39 c1                	cmp    %eax,%ecx
f0124a95:	74 17                	je     f0124aae <test_kheap_virt_addr+0x771>
f0124a97:	83 ec 04             	sub    $0x4,%esp
f0124a9a:	68 18 a0 13 f0       	push   $0xf013a018
f0124a9f:	68 1d 09 00 00       	push   $0x91d
f0124aa4:	68 32 9f 13 f0       	push   $0xf0139f32
f0124aa9:	e8 02 b7 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124aae:	e8 d1 fb fd ff       	call   f0104684 <pf_calculate_free_frames>
f0124ab3:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0124ab6:	74 17                	je     f0124acf <test_kheap_virt_addr+0x792>
f0124ab8:	83 ec 04             	sub    $0x4,%esp
f0124abb:	68 4c 9f 13 f0       	push   $0xf0139f4c
f0124ac0:	68 1e 09 00 00       	push   $0x91e
f0124ac5:	68 32 9f 13 f0       	push   $0xf0139f32
f0124aca:	e8 e1 b6 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124acf:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0124ad2:	e8 67 83 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0124ad7:	29 c3                	sub    %eax,%ebx
f0124ad9:	89 d8                	mov    %ebx,%eax
f0124adb:	3d 00 06 00 00       	cmp    $0x600,%eax
f0124ae0:	74 17                	je     f0124af9 <test_kheap_virt_addr+0x7bc>
f0124ae2:	83 ec 04             	sub    $0x4,%esp
f0124ae5:	68 b4 9f 13 f0       	push   $0xf0139fb4
f0124aea:	68 1f 09 00 00       	push   $0x91f
f0124aef:	68 32 9f 13 f0       	push   $0xf0139f32
f0124af4:	e8 b7 b6 fd ff       	call   f01001b0 <_panic>

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0124af9:	e8 40 83 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0124afe:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124b01:	e8 7e fb fd ff       	call   f0104684 <pf_calculate_free_frames>
f0124b06:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0124b09:	83 ec 0c             	sub    $0xc,%esp
f0124b0c:	68 00 38 00 00       	push   $0x3800
f0124b11:	e8 3d 37 fe ff       	call   f0108253 <kmalloc>
f0124b16:	83 c4 10             	add    $0x10,%esp
f0124b19:	89 85 dc fd ff ff    	mov    %eax,-0x224(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0124b1f:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0124b25:	89 c1                	mov    %eax,%ecx
f0124b27:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f0124b2e:	10 00 00 
f0124b31:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0124b36:	0f b6 d0             	movzbl %al,%edx
f0124b39:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0124b3f:	01 d0                	add    %edx,%eax
f0124b41:	48                   	dec    %eax
f0124b42:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f0124b48:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0124b4e:	ba 00 00 00 00       	mov    $0x0,%edx
f0124b53:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f0124b59:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0124b5f:	29 d0                	sub    %edx,%eax
f0124b61:	89 c3                	mov    %eax,%ebx
f0124b63:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f0124b6a:	10 00 00 
f0124b6d:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0124b72:	0f b6 c0             	movzbl %al,%eax
f0124b75:	c1 e0 04             	shl    $0x4,%eax
f0124b78:	89 c2                	mov    %eax,%edx
f0124b7a:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0124b80:	01 d0                	add    %edx,%eax
f0124b82:	48                   	dec    %eax
f0124b83:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f0124b89:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0124b8f:	ba 00 00 00 00       	mov    $0x0,%edx
f0124b94:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f0124b9a:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0124ba0:	29 d0                	sub    %edx,%eax
f0124ba2:	01 d8                	add    %ebx,%eax
f0124ba4:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0124ba9:	39 c1                	cmp    %eax,%ecx
f0124bab:	74 17                	je     f0124bc4 <test_kheap_virt_addr+0x887>
f0124bad:	83 ec 04             	sub    $0x4,%esp
f0124bb0:	68 18 a0 13 f0       	push   $0xf013a018
f0124bb5:	68 25 09 00 00       	push   $0x925
f0124bba:	68 32 9f 13 f0       	push   $0xf0139f32
f0124bbf:	e8 ec b5 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124bc4:	e8 bb fa fd ff       	call   f0104684 <pf_calculate_free_frames>
f0124bc9:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0124bcc:	74 17                	je     f0124be5 <test_kheap_virt_addr+0x8a8>
f0124bce:	83 ec 04             	sub    $0x4,%esp
f0124bd1:	68 4c 9f 13 f0       	push   $0xf0139f4c
f0124bd6:	68 26 09 00 00       	push   $0x926
f0124bdb:	68 32 9f 13 f0       	push   $0xf0139f32
f0124be0:	e8 cb b5 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124be5:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0124be8:	e8 51 82 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0124bed:	29 c3                	sub    %eax,%ebx
f0124bef:	89 d8                	mov    %ebx,%eax
f0124bf1:	83 f8 04             	cmp    $0x4,%eax
f0124bf4:	74 17                	je     f0124c0d <test_kheap_virt_addr+0x8d0>
f0124bf6:	83 ec 04             	sub    $0x4,%esp
f0124bf9:	68 b4 9f 13 f0       	push   $0xf0139fb4
f0124bfe:	68 27 09 00 00       	push   $0x927
f0124c03:	68 32 9f 13 f0       	push   $0xf0139f32
f0124c08:	e8 a3 b5 fd ff       	call   f01001b0 <_panic>
	}

	uint32 allPAs[(13*Mega + 32*kilo+ (INITIAL_KHEAP_ALLOCATIONS-DYNAMIC_ALLOCATOR_DS))/PAGE_SIZE] ;
f0124c0d:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f0124c14:	10 00 00 
f0124c17:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0124c1c:	0f b6 d0             	movzbl %al,%edx
f0124c1f:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0124c25:	01 d0                	add    %edx,%eax
f0124c27:	48                   	dec    %eax
f0124c28:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f0124c2e:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0124c34:	ba 00 00 00 00       	mov    $0x0,%edx
f0124c39:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f0124c3f:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0124c45:	29 d0                	sub    %edx,%eax
f0124c47:	89 c1                	mov    %eax,%ecx
f0124c49:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f0124c50:	10 00 00 
f0124c53:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0124c58:	0f b6 c0             	movzbl %al,%eax
f0124c5b:	c1 e0 04             	shl    $0x4,%eax
f0124c5e:	89 c2                	mov    %eax,%edx
f0124c60:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0124c66:	01 d0                	add    %edx,%eax
f0124c68:	48                   	dec    %eax
f0124c69:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f0124c6f:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0124c75:	ba 00 00 00 00       	mov    $0x0,%edx
f0124c7a:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f0124c80:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0124c86:	29 d0                	sub    %edx,%eax
f0124c88:	01 c8                	add    %ecx,%eax
f0124c8a:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f0124c8f:	c1 e8 0c             	shr    $0xc,%eax
f0124c92:	89 c2                	mov    %eax,%edx
f0124c94:	4a                   	dec    %edx
f0124c95:	89 95 24 ff ff ff    	mov    %edx,-0xdc(%ebp)
f0124c9b:	c1 e0 02             	shl    $0x2,%eax
f0124c9e:	8d 50 03             	lea    0x3(%eax),%edx
f0124ca1:	b8 10 00 00 00       	mov    $0x10,%eax
f0124ca6:	48                   	dec    %eax
f0124ca7:	01 d0                	add    %edx,%eax
f0124ca9:	bf 10 00 00 00       	mov    $0x10,%edi
f0124cae:	ba 00 00 00 00       	mov    $0x0,%edx
f0124cb3:	f7 f7                	div    %edi
f0124cb5:	6b c0 10             	imul   $0x10,%eax,%eax
f0124cb8:	29 c4                	sub    %eax,%esp
f0124cba:	89 e0                	mov    %esp,%eax
f0124cbc:	83 c0 03             	add    $0x3,%eax
f0124cbf:	c1 e8 02             	shr    $0x2,%eax
f0124cc2:	c1 e0 02             	shl    $0x2,%eax
f0124cc5:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
	int numOfFrames = (13*Mega + 32*kilo+(INITIAL_KHEAP_ALLOCATIONS-DYNAMIC_ALLOCATOR_DS))/PAGE_SIZE ;
f0124ccb:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f0124cd2:	10 00 00 
f0124cd5:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0124cda:	0f b6 d0             	movzbl %al,%edx
f0124cdd:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0124ce3:	01 d0                	add    %edx,%eax
f0124ce5:	48                   	dec    %eax
f0124ce6:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f0124cec:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0124cf2:	ba 00 00 00 00       	mov    $0x0,%edx
f0124cf7:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f0124cfd:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0124d03:	29 d0                	sub    %edx,%eax
f0124d05:	89 c1                	mov    %eax,%ecx
f0124d07:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f0124d0e:	10 00 00 
f0124d11:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0124d16:	0f b6 c0             	movzbl %al,%eax
f0124d19:	c1 e0 04             	shl    $0x4,%eax
f0124d1c:	89 c2                	mov    %eax,%edx
f0124d1e:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0124d24:	01 d0                	add    %edx,%eax
f0124d26:	48                   	dec    %eax
f0124d27:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f0124d2d:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0124d33:	ba 00 00 00 00       	mov    $0x0,%edx
f0124d38:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f0124d3e:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0124d44:	29 d0                	sub    %edx,%eax
f0124d46:	01 c8                	add    %ecx,%eax
f0124d48:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f0124d4d:	c1 e8 0c             	shr    $0xc,%eax
f0124d50:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)

	//test kheap_virtual_address after kmalloc only [40%]
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f0124d56:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f0124d5d:	10 00 00 
f0124d60:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0124d65:	0f b6 d0             	movzbl %al,%edx
f0124d68:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0124d6e:	01 d0                	add    %edx,%eax
f0124d70:	48                   	dec    %eax
f0124d71:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f0124d77:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0124d7d:	ba 00 00 00 00       	mov    $0x0,%edx
f0124d82:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f0124d88:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0124d8e:	29 d0                	sub    %edx,%eax
f0124d90:	89 c1                	mov    %eax,%ecx
f0124d92:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f0124d99:	10 00 00 
f0124d9c:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0124da1:	0f b6 c0             	movzbl %al,%eax
f0124da4:	c1 e0 04             	shl    $0x4,%eax
f0124da7:	89 c2                	mov    %eax,%edx
f0124da9:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0124daf:	01 d0                	add    %edx,%eax
f0124db1:	48                   	dec    %eax
f0124db2:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f0124db8:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0124dbe:	ba 00 00 00 00       	mov    $0x0,%edx
f0124dc3:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f0124dc9:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0124dcf:	29 d0                	sub    %edx,%eax
f0124dd1:	01 c8                	add    %ecx,%eax
f0124dd3:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0124dd8:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
		int i = 0;
f0124dde:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f0124de5:	c7 45 e4 00 00 00 f6 	movl   $0xf6000000,-0x1c(%ebp)
f0124dec:	e9 21 01 00 00       	jmp    f0124f12 <test_kheap_virt_addr+0xbd5>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f0124df1:	a1 30 ce 2b f0       	mov    0xf02bce30,%eax
f0124df6:	83 ec 04             	sub    $0x4,%esp
f0124df9:	8d 95 bc fd ff ff    	lea    -0x244(%ebp),%edx
f0124dff:	52                   	push   %edx
f0124e00:	ff 75 e4             	pushl  -0x1c(%ebp)
f0124e03:	50                   	push   %eax
f0124e04:	e8 de 26 fe ff       	call   f01074e7 <get_page_table>
f0124e09:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0124e0c:	8b 85 bc fd ff ff    	mov    -0x244(%ebp),%eax
f0124e12:	85 c0                	test   %eax,%eax
f0124e14:	75 17                	jne    f0124e2d <test_kheap_virt_addr+0xaf0>
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f0124e16:	83 ec 04             	sub    $0x4,%esp
f0124e19:	68 d4 a8 13 f0       	push   $0xf013a8d4
f0124e1e:	68 38 09 00 00       	push   $0x938
f0124e23:	68 32 9f 13 f0       	push   $0xf0139f32
f0124e28:	e8 83 b3 fd ff       	call   f01001b0 <_panic>

			for (j = PTX(va); i < numOfFrames && j < 1024; ++j, ++i)
f0124e2d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0124e30:	c1 e8 0c             	shr    $0xc,%eax
f0124e33:	25 ff 03 00 00       	and    $0x3ff,%eax
f0124e38:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0124e3b:	e9 ba 00 00 00       	jmp    f0124efa <test_kheap_virt_addr+0xbbd>
			{
				allPAs[i] = (ptr_table[j] & 0xFFFFF000);
f0124e40:	8b 85 bc fd ff ff    	mov    -0x244(%ebp),%eax
f0124e46:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0124e49:	c1 e2 02             	shl    $0x2,%edx
f0124e4c:	01 d0                	add    %edx,%eax
f0124e4e:	8b 00                	mov    (%eax),%eax
f0124e50:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0124e55:	89 c1                	mov    %eax,%ecx
f0124e57:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0124e5d:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0124e60:	89 0c 90             	mov    %ecx,(%eax,%edx,4)
				uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f0124e63:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0124e69:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0124e6c:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0124e6f:	83 ec 0c             	sub    $0xc,%esp
f0124e72:	50                   	push   %eax
f0124e73:	e8 83 35 fe ff       	call   f01083fb <kheap_virtual_address>
f0124e78:	83 c4 10             	add    $0x10,%esp
f0124e7b:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
				//cprintf("va to check = %x\n", va);
				if (retrievedVA != (va))
f0124e81:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0124e87:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0124e8a:	74 61                	je     f0124eed <test_kheap_virt_addr+0xbb0>
				{
					cprintf("\nretrievedVA = %x, Actual VA = %x, table entry = %x, khep_pa = %x\n",retrievedVA, va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
f0124e8c:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0124e92:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0124e95:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0124e98:	8b 95 bc fd ff ff    	mov    -0x244(%ebp),%edx
f0124e9e:	8b 4d dc             	mov    -0x24(%ebp),%ecx
f0124ea1:	c1 e1 02             	shl    $0x2,%ecx
f0124ea4:	01 ca                	add    %ecx,%edx
f0124ea6:	8b 12                	mov    (%edx),%edx
f0124ea8:	89 d1                	mov    %edx,%ecx
f0124eaa:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
f0124eb0:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0124eb3:	c1 e2 0c             	shl    $0xc,%edx
f0124eb6:	89 d3                	mov    %edx,%ebx
f0124eb8:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0124ebb:	01 da                	add    %ebx,%edx
f0124ebd:	83 ec 0c             	sub    $0xc,%esp
f0124ec0:	50                   	push   %eax
f0124ec1:	51                   	push   %ecx
f0124ec2:	52                   	push   %edx
f0124ec3:	ff b5 f4 fe ff ff    	pushl  -0x10c(%ebp)
f0124ec9:	68 c8 a9 13 f0       	push   $0xf013a9c8
f0124ece:	e8 5e bf fd ff       	call   f0100e31 <cprintf>
f0124ed3:	83 c4 20             	add    $0x20,%esp
					panic("Wrong kheap_virtual_address");
f0124ed6:	83 ec 04             	sub    $0x4,%esp
f0124ed9:	68 0b aa 13 f0       	push   $0xf013aa0b
f0124ede:	68 42 09 00 00       	push   $0x942
f0124ee3:	68 32 9f 13 f0       	push   $0xf0139f32
f0124ee8:	e8 c3 b2 fd ff       	call   f01001b0 <_panic>
				}
				va+=PAGE_SIZE;
f0124eed:	81 45 e4 00 10 00 00 	addl   $0x1000,-0x1c(%ebp)
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
			if (ptr_table == NULL)
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");

			for (j = PTX(va); i < numOfFrames && j < 1024; ++j, ++i)
f0124ef4:	ff 45 dc             	incl   -0x24(%ebp)
f0124ef7:	ff 45 e0             	incl   -0x20(%ebp)
f0124efa:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0124efd:	3b 85 0c ff ff ff    	cmp    -0xf4(%ebp),%eax
f0124f03:	7d 0d                	jge    f0124f12 <test_kheap_virt_addr+0xbd5>
f0124f05:	81 7d dc ff 03 00 00 	cmpl   $0x3ff,-0x24(%ebp)
f0124f0c:	0f 8e 2e ff ff ff    	jle    f0124e40 <test_kheap_virt_addr+0xb03>
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		int i = 0;
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f0124f12:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0124f15:	3b 85 f8 fe ff ff    	cmp    -0x108(%ebp),%eax
f0124f1b:	0f 82 d0 fe ff ff    	jb     f0124df1 <test_kheap_virt_addr+0xab4>
				}
				va+=PAGE_SIZE;
			}
		}
	}
	cprintf("\nkheap_virtual_address: current evaluation = 40%");
f0124f21:	83 ec 0c             	sub    $0xc,%esp
f0124f24:	68 28 aa 13 f0       	push   $0xf013aa28
f0124f29:	e8 03 bf fd ff       	call   f0100e31 <cprintf>
f0124f2e:	83 c4 10             	add    $0x10,%esp

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0124f31:	e8 08 7f fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0124f36:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0124f3c:	e8 43 f7 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0124f41:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		kfree(ptr_allocations[0]);
f0124f47:	8b 85 c0 fd ff ff    	mov    -0x240(%ebp),%eax
f0124f4d:	83 ec 0c             	sub    $0xc,%esp
f0124f50:	50                   	push   %eax
f0124f51:	e8 88 34 fe ff       	call   f01083de <kfree>
f0124f56:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124f59:	e8 26 f7 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0124f5e:	3b 85 ec fe ff ff    	cmp    -0x114(%ebp),%eax
f0124f64:	74 17                	je     f0124f7d <test_kheap_virt_addr+0xc40>
f0124f66:	83 ec 04             	sub    $0x4,%esp
f0124f69:	68 4c 9f 13 f0       	push   $0xf0139f4c
f0124f6e:	68 50 09 00 00       	push   $0x950
f0124f73:	68 32 9f 13 f0       	push   $0xf0139f32
f0124f78:	e8 33 b2 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0124f7d:	e8 bc 7e fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0124f82:	89 c2                	mov    %eax,%edx
f0124f84:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0124f8a:	29 c2                	sub    %eax,%edx
f0124f8c:	89 d0                	mov    %edx,%eax
f0124f8e:	3d 00 02 00 00       	cmp    $0x200,%eax
f0124f93:	74 17                	je     f0124fac <test_kheap_virt_addr+0xc6f>
f0124f95:	83 ec 04             	sub    $0x4,%esp
f0124f98:	68 bc a6 13 f0       	push   $0xf013a6bc
f0124f9d:	68 51 09 00 00       	push   $0x951
f0124fa2:	68 32 9f 13 f0       	push   $0xf0139f32
f0124fa7:	e8 04 b2 fd ff       	call   f01001b0 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0124fac:	e8 8d 7e fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0124fb1:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124fb7:	e8 c8 f6 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0124fbc:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		kfree(ptr_allocations[1]);
f0124fc2:	8b 85 c4 fd ff ff    	mov    -0x23c(%ebp),%eax
f0124fc8:	83 ec 0c             	sub    $0xc,%esp
f0124fcb:	50                   	push   %eax
f0124fcc:	e8 0d 34 fe ff       	call   f01083de <kfree>
f0124fd1:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124fd4:	e8 ab f6 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0124fd9:	3b 85 ec fe ff ff    	cmp    -0x114(%ebp),%eax
f0124fdf:	74 17                	je     f0124ff8 <test_kheap_virt_addr+0xcbb>
f0124fe1:	83 ec 04             	sub    $0x4,%esp
f0124fe4:	68 4c 9f 13 f0       	push   $0xf0139f4c
f0124fe9:	68 57 09 00 00       	push   $0x957
f0124fee:	68 32 9f 13 f0       	push   $0xf0139f32
f0124ff3:	e8 b8 b1 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f0124ff8:	e8 41 7e fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0124ffd:	89 c2                	mov    %eax,%edx
f0124fff:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0125005:	29 c2                	sub    %eax,%edx
f0125007:	89 d0                	mov    %edx,%eax
f0125009:	3d 00 02 00 00       	cmp    $0x200,%eax
f012500e:	74 17                	je     f0125027 <test_kheap_virt_addr+0xcea>
f0125010:	83 ec 04             	sub    $0x4,%esp
f0125013:	68 bc a6 13 f0       	push   $0xf013a6bc
f0125018:	68 58 09 00 00       	push   $0x958
f012501d:	68 32 9f 13 f0       	push   $0xf0139f32
f0125022:	e8 89 b1 fd ff       	call   f01001b0 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f0125027:	e8 12 7e fe ff       	call   f010ce3e <sys_calculate_free_frames>
f012502c:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125032:	e8 4d f6 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0125037:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		kfree(ptr_allocations[6]);
f012503d:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0125043:	83 ec 0c             	sub    $0xc,%esp
f0125046:	50                   	push   %eax
f0125047:	e8 92 33 fe ff       	call   f01083de <kfree>
f012504c:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012504f:	e8 30 f6 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0125054:	3b 85 ec fe ff ff    	cmp    -0x114(%ebp),%eax
f012505a:	74 17                	je     f0125073 <test_kheap_virt_addr+0xd36>
f012505c:	83 ec 04             	sub    $0x4,%esp
f012505f:	68 4c 9f 13 f0       	push   $0xf0139f4c
f0125064:	68 5e 09 00 00       	push   $0x95e
f0125069:	68 32 9f 13 f0       	push   $0xf0139f32
f012506e:	e8 3d b1 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0125073:	e8 c6 7d fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0125078:	89 c2                	mov    %eax,%edx
f012507a:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0125080:	29 c2                	sub    %eax,%edx
f0125082:	89 d0                	mov    %edx,%eax
f0125084:	3d 00 06 00 00       	cmp    $0x600,%eax
f0125089:	74 17                	je     f01250a2 <test_kheap_virt_addr+0xd65>
f012508b:	83 ec 04             	sub    $0x4,%esp
f012508e:	68 bc a6 13 f0       	push   $0xf013a6bc
f0125093:	68 5f 09 00 00       	push   $0x95f
f0125098:	68 32 9f 13 f0       	push   $0xf0139f32
f012509d:	e8 0e b1 fd ff       	call   f01001b0 <_panic>


	//test kheap_virtual_address after kmalloc and kfree [40%]
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f01250a2:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f01250a9:	10 00 00 
f01250ac:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f01250b1:	0f b6 d0             	movzbl %al,%edx
f01250b4:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f01250ba:	01 d0                	add    %edx,%eax
f01250bc:	48                   	dec    %eax
f01250bd:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f01250c3:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f01250c9:	ba 00 00 00 00       	mov    $0x0,%edx
f01250ce:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f01250d4:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f01250da:	29 d0                	sub    %edx,%eax
f01250dc:	89 c1                	mov    %eax,%ecx
f01250de:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f01250e5:	10 00 00 
f01250e8:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f01250ed:	0f b6 c0             	movzbl %al,%eax
f01250f0:	c1 e0 04             	shl    $0x4,%eax
f01250f3:	89 c2                	mov    %eax,%edx
f01250f5:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01250fb:	01 d0                	add    %edx,%eax
f01250fd:	48                   	dec    %eax
f01250fe:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f0125104:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f012510a:	ba 00 00 00 00       	mov    $0x0,%edx
f012510f:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f0125115:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f012511b:	29 d0                	sub    %edx,%eax
f012511d:	01 c8                	add    %ecx,%eax
f012511f:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0125124:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		int i = 0;
f012512a:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
		int j;
		//frames of first 4 MB
		uint32 startIndex = (INITIAL_KHEAP_ALLOCATIONS - DYNAMIC_ALLOCATOR_DS) / PAGE_SIZE;
f0125131:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f0125138:	10 00 00 
f012513b:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0125140:	0f b6 d0             	movzbl %al,%edx
f0125143:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0125149:	01 d0                	add    %edx,%eax
f012514b:	48                   	dec    %eax
f012514c:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f0125152:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0125158:	ba 00 00 00 00       	mov    $0x0,%edx
f012515d:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f0125163:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0125169:	29 d0                	sub    %edx,%eax
f012516b:	89 c1                	mov    %eax,%ecx
f012516d:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f0125174:	10 00 00 
f0125177:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f012517c:	0f b6 c0             	movzbl %al,%eax
f012517f:	c1 e0 04             	shl    $0x4,%eax
f0125182:	89 c2                	mov    %eax,%edx
f0125184:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f012518a:	01 d0                	add    %edx,%eax
f012518c:	48                   	dec    %eax
f012518d:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f0125193:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0125199:	ba 00 00 00 00       	mov    $0x0,%edx
f012519e:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f01251a4:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f01251aa:	29 d0                	sub    %edx,%eax
f01251ac:	01 c8                	add    %ecx,%eax
f01251ae:	05 00 40 00 00       	add    $0x4000,%eax
f01251b3:	c1 e8 0c             	shr    $0xc,%eax
f01251b6:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
		for (i = startIndex ; i < startIndex + 4*Mega/PAGE_SIZE; ++i)
f01251bc:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f01251c2:	89 45 d8             	mov    %eax,-0x28(%ebp)
f01251c5:	eb 41                	jmp    f0125208 <test_kheap_virt_addr+0xecb>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f01251c7:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01251cd:	8b 55 d8             	mov    -0x28(%ebp),%edx
f01251d0:	8b 04 90             	mov    (%eax,%edx,4),%eax
f01251d3:	83 ec 0c             	sub    $0xc,%esp
f01251d6:	50                   	push   %eax
f01251d7:	e8 1f 32 fe ff       	call   f01083fb <kheap_virtual_address>
f01251dc:	83 c4 10             	add    $0x10,%esp
f01251df:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
			if (retrievedVA != 0)
f01251e5:	83 bd c0 fe ff ff 00 	cmpl   $0x0,-0x140(%ebp)
f01251ec:	74 17                	je     f0125205 <test_kheap_virt_addr+0xec8>
			{
				panic("Wrong kheap_virtual_address");
f01251ee:	83 ec 04             	sub    $0x4,%esp
f01251f1:	68 0b aa 13 f0       	push   $0xf013aa0b
f01251f6:	68 70 09 00 00       	push   $0x970
f01251fb:	68 32 9f 13 f0       	push   $0xf0139f32
f0125200:	e8 ab af fd ff       	call   f01001b0 <_panic>
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		int i = 0;
		int j;
		//frames of first 4 MB
		uint32 startIndex = (INITIAL_KHEAP_ALLOCATIONS - DYNAMIC_ALLOCATOR_DS) / PAGE_SIZE;
		for (i = startIndex ; i < startIndex + 4*Mega/PAGE_SIZE; ++i)
f0125205:	ff 45 d8             	incl   -0x28(%ebp)
f0125208:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012520e:	8d 90 00 04 00 00    	lea    0x400(%eax),%edx
f0125214:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0125217:	39 c2                	cmp    %eax,%edx
f0125219:	77 ac                	ja     f01251c7 <test_kheap_virt_addr+0xe8a>
				panic("Wrong kheap_virtual_address");
			}

		}
		//next frames until 6 MB
		for (i = startIndex + 4*Mega/PAGE_SIZE; i < startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; ++i)
f012521b:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0125221:	05 00 04 00 00       	add    $0x400,%eax
f0125226:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0125229:	eb 4b                	jmp    f0125276 <test_kheap_virt_addr+0xf39>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f012522b:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0125231:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0125234:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0125237:	83 ec 0c             	sub    $0xc,%esp
f012523a:	50                   	push   %eax
f012523b:	e8 bb 31 fe ff       	call   f01083fb <kheap_virtual_address>
f0125240:	83 c4 10             	add    $0x10,%esp
f0125243:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
			if (retrievedVA != KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS + i*PAGE_SIZE)
f0125249:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012524c:	c1 e0 0c             	shl    $0xc,%eax
f012524f:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0125254:	3b 85 bc fe ff ff    	cmp    -0x144(%ebp),%eax
f012525a:	74 17                	je     f0125273 <test_kheap_virt_addr+0xf36>
			{
				panic("Wrong kheap_virtual_address");
f012525c:	83 ec 04             	sub    $0x4,%esp
f012525f:	68 0b aa 13 f0       	push   $0xf013aa0b
f0125264:	68 7a 09 00 00       	push   $0x97a
f0125269:	68 32 9f 13 f0       	push   $0xf0139f32
f012526e:	e8 3d af fd ff       	call   f01001b0 <_panic>
				panic("Wrong kheap_virtual_address");
			}

		}
		//next frames until 6 MB
		for (i = startIndex + 4*Mega/PAGE_SIZE; i < startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; ++i)
f0125273:	ff 45 d8             	incl   -0x28(%ebp)
f0125276:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012527c:	8d 90 04 07 00 00    	lea    0x704(%eax),%edx
f0125282:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0125285:	39 c2                	cmp    %eax,%edx
f0125287:	77 a2                	ja     f012522b <test_kheap_virt_addr+0xeee>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of 6 MB
		for (i = startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; ++i)
f0125289:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012528f:	05 04 07 00 00       	add    $0x704,%eax
f0125294:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0125297:	eb 41                	jmp    f01252da <test_kheap_virt_addr+0xf9d>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f0125299:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012529f:	8b 55 d8             	mov    -0x28(%ebp),%edx
f01252a2:	8b 04 90             	mov    (%eax,%edx,4),%eax
f01252a5:	83 ec 0c             	sub    $0xc,%esp
f01252a8:	50                   	push   %eax
f01252a9:	e8 4d 31 fe ff       	call   f01083fb <kheap_virtual_address>
f01252ae:	83 c4 10             	add    $0x10,%esp
f01252b1:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
			if (retrievedVA != 0)
f01252b7:	83 bd b8 fe ff ff 00 	cmpl   $0x0,-0x148(%ebp)
f01252be:	74 17                	je     f01252d7 <test_kheap_virt_addr+0xf9a>
			{
				panic("Wrong kheap_virtual_address");
f01252c0:	83 ec 04             	sub    $0x4,%esp
f01252c3:	68 0b aa 13 f0       	push   $0xf013aa0b
f01252c8:	68 83 09 00 00       	push   $0x983
f01252cd:	68 32 9f 13 f0       	push   $0xf0139f32
f01252d2:	e8 d9 ae fd ff       	call   f01001b0 <_panic>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of 6 MB
		for (i = startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; ++i)
f01252d7:	ff 45 d8             	incl   -0x28(%ebp)
f01252da:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f01252e0:	8d 90 04 0d 00 00    	lea    0xd04(%eax),%edx
f01252e6:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01252e9:	39 c2                	cmp    %eax,%edx
f01252eb:	77 ac                	ja     f0125299 <test_kheap_virt_addr+0xf5c>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of last allocation (14 KB)
		for (i = startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 32*kilo)/PAGE_SIZE; ++i)
f01252ed:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f01252f3:	05 04 0d 00 00       	add    $0xd04,%eax
f01252f8:	89 45 d8             	mov    %eax,-0x28(%ebp)
f01252fb:	eb 4b                	jmp    f0125348 <test_kheap_virt_addr+0x100b>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f01252fd:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0125303:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0125306:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0125309:	83 ec 0c             	sub    $0xc,%esp
f012530c:	50                   	push   %eax
f012530d:	e8 e9 30 fe ff       	call   f01083fb <kheap_virtual_address>
f0125312:	83 c4 10             	add    $0x10,%esp
f0125315:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
			if (retrievedVA != KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS + i*PAGE_SIZE)
f012531b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012531e:	c1 e0 0c             	shl    $0xc,%eax
f0125321:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0125326:	3b 85 b4 fe ff ff    	cmp    -0x14c(%ebp),%eax
f012532c:	74 17                	je     f0125345 <test_kheap_virt_addr+0x1008>
			{
				panic("Wrong kheap_virtual_address");
f012532e:	83 ec 04             	sub    $0x4,%esp
f0125331:	68 0b aa 13 f0       	push   $0xf013aa0b
f0125336:	68 8c 09 00 00       	push   $0x98c
f012533b:	68 32 9f 13 f0       	push   $0xf0139f32
f0125340:	e8 6b ae fd ff       	call   f01001b0 <_panic>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of last allocation (14 KB)
		for (i = startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 32*kilo)/PAGE_SIZE; ++i)
f0125345:	ff 45 d8             	incl   -0x28(%ebp)
f0125348:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012534e:	8d 90 08 0d 00 00    	lea    0xd08(%eax),%edx
f0125354:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0125357:	39 c2                	cmp    %eax,%edx
f0125359:	77 a2                	ja     f01252fd <test_kheap_virt_addr+0xfc0>
				panic("Wrong kheap_virtual_address");
			}
		}
	}

	cprintf("\b\b\b80%");
f012535b:	83 ec 0c             	sub    $0xc,%esp
f012535e:	68 bd a0 13 f0       	push   $0xf013a0bd
f0125363:	e8 c9 ba fd ff       	call   f0100e31 <cprintf>
f0125368:	83 c4 10             	add    $0x10,%esp

	//test kheap_virtual_address on frames of KERNEL CODE [20%]
	{
		uint32 i;
		for (i = 1*Mega; i < (uint32)(end_of_kernel - KERNEL_BASE); i+=PAGE_SIZE)
f012536b:	c7 45 d4 00 00 10 00 	movl   $0x100000,-0x2c(%ebp)
f0125372:	eb 54                	jmp    f01253c8 <test_kheap_virt_addr+0x108b>
		{
			uint32 retrievedVA = kheap_virtual_address(i);
f0125374:	83 ec 0c             	sub    $0xc,%esp
f0125377:	ff 75 d4             	pushl  -0x2c(%ebp)
f012537a:	e8 7c 30 fe ff       	call   f01083fb <kheap_virtual_address>
f012537f:	83 c4 10             	add    $0x10,%esp
f0125382:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
			if (retrievedVA != 0)
f0125388:	83 bd b0 fe ff ff 00 	cmpl   $0x0,-0x150(%ebp)
f012538f:	74 30                	je     f01253c1 <test_kheap_virt_addr+0x1084>
			{
				cprintf("\nPA = %x, retrievedVA = %x\n", i, retrievedVA);
f0125391:	83 ec 04             	sub    $0x4,%esp
f0125394:	ff b5 b0 fe ff ff    	pushl  -0x150(%ebp)
f012539a:	ff 75 d4             	pushl  -0x2c(%ebp)
f012539d:	68 59 aa 13 f0       	push   $0xf013aa59
f01253a2:	e8 8a ba fd ff       	call   f0100e31 <cprintf>
f01253a7:	83 c4 10             	add    $0x10,%esp
				panic("Wrong kheap_virtual_address");
f01253aa:	83 ec 04             	sub    $0x4,%esp
f01253ad:	68 0b aa 13 f0       	push   $0xf013aa0b
f01253b2:	68 9c 09 00 00       	push   $0x99c
f01253b7:	68 32 9f 13 f0       	push   $0xf0139f32
f01253bc:	e8 ef ad fd ff       	call   f01001b0 <_panic>
	cprintf("\b\b\b80%");

	//test kheap_virtual_address on frames of KERNEL CODE [20%]
	{
		uint32 i;
		for (i = 1*Mega; i < (uint32)(end_of_kernel - KERNEL_BASE); i+=PAGE_SIZE)
f01253c1:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
f01253c8:	b8 6c f5 2d 00       	mov    $0x2df56c,%eax
f01253cd:	39 45 d4             	cmp    %eax,-0x2c(%ebp)
f01253d0:	72 a2                	jb     f0125374 <test_kheap_virt_addr+0x1037>
				panic("Wrong kheap_virtual_address");
			}
		}
	}

	cprintf("\b\b\b100%\n");
f01253d2:	83 ec 0c             	sub    $0xc,%esp
f01253d5:	68 16 a1 13 f0       	push   $0xf013a116
f01253da:	e8 52 ba fd ff       	call   f0100e31 <cprintf>
f01253df:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test kheap_virtual_address completed successfully.\n");
f01253e2:	83 ec 0c             	sub    $0xc,%esp
f01253e5:	68 78 aa 13 f0       	push   $0xf013aa78
f01253ea:	e8 42 ba fd ff       	call   f0100e31 <cprintf>
f01253ef:	83 c4 10             	add    $0x10,%esp

	return 1;
f01253f2:	b8 01 00 00 00       	mov    $0x1,%eax
f01253f7:	89 f4                	mov    %esi,%esp

}
f01253f9:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01253fc:	5b                   	pop    %ebx
f01253fd:	5e                   	pop    %esi
f01253fe:	5f                   	pop    %edi
f01253ff:	5d                   	pop    %ebp
f0125400:	c3                   	ret    

f0125401 <test_three_creation_functions>:

int initFreeFrames;
int initFreeDiskFrames ;
uint8 firstCall = 1 ;
int test_three_creation_functions()
{
f0125401:	55                   	push   %ebp
f0125402:	89 e5                	mov    %esp,%ebp
f0125404:	57                   	push   %edi
f0125405:	56                   	push   %esi
f0125406:	53                   	push   %ebx
f0125407:	81 ec 9c 00 00 00    	sub    $0x9c,%esp
	if (firstCall)
f012540d:	a0 3d fb 18 f0       	mov    0xf018fb3d,%al
f0125412:	84 c0                	test   %al,%al
f0125414:	74 56                	je     f012546c <test_three_creation_functions+0x6b>
	{
		firstCall = 0;
f0125416:	c6 05 3d fb 18 f0 00 	movb   $0x0,0xf018fb3d
		initFreeFrames = sys_calculate_free_frames() ;
f012541d:	e8 1c 7a fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0125422:	a3 68 f5 2d f0       	mov    %eax,0xf02df568
		initFreeDiskFrames = pf_calculate_free_frames() ;
f0125427:	e8 58 f2 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012542c:	a3 64 f5 2d f0       	mov    %eax,0xf02df564
		//Run simple user program
		{
			char command[100] = "run fos_add 4096";
f0125431:	8d 85 5c ff ff ff    	lea    -0xa4(%ebp),%eax
f0125437:	bb d5 ab 13 f0       	mov    $0xf013abd5,%ebx
f012543c:	ba 11 00 00 00       	mov    $0x11,%edx
f0125441:	89 c7                	mov    %eax,%edi
f0125443:	89 de                	mov    %ebx,%esi
f0125445:	89 d1                	mov    %edx,%ecx
f0125447:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0125449:	8d 95 6d ff ff ff    	lea    -0x93(%ebp),%edx
f012544f:	b9 53 00 00 00       	mov    $0x53,%ecx
f0125454:	b0 00                	mov    $0x0,%al
f0125456:	89 d7                	mov    %edx,%edi
f0125458:	f3 aa                	rep stos %al,%es:(%edi)
			execute_command(command) ;
f012545a:	83 ec 0c             	sub    $0xc,%esp
f012545d:	8d 85 5c ff ff ff    	lea    -0xa4(%ebp),%eax
f0125463:	50                   	push   %eax
f0125464:	e8 5a c7 fd ff       	call   f0101bc3 <execute_command>
f0125469:	83 c4 10             	add    $0x10,%esp
		}
	}
	//Ensure that the user directory, page WS and page tables are allocated in KERNEL HEAP
	{
		struct Env * e = NULL;
f012546c:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		struct Env * ptr_env = NULL;
f0125473:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		LIST_FOREACH(ptr_env, &env_exit_queue)
f012547a:	a1 c4 a9 2b f0       	mov    0xf02ba9c4,%eax
f012547f:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0125482:	eb 2b                	jmp    f01254af <test_three_creation_functions+0xae>
		{
			if (strcmp(ptr_env->prog_name, "fos_add") == 0)
f0125484:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0125487:	83 c0 5c             	add    $0x5c,%eax
f012548a:	83 ec 08             	sub    $0x8,%esp
f012548d:	68 bf aa 13 f0       	push   $0xf013aabf
f0125492:	50                   	push   %eax
f0125493:	e8 ec a0 00 00       	call   f012f584 <strcmp>
f0125498:	83 c4 10             	add    $0x10,%esp
f012549b:	85 c0                	test   %eax,%eax
f012549d:	75 08                	jne    f01254a7 <test_three_creation_functions+0xa6>
			{
				e = ptr_env ;
f012549f:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01254a2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				break;
f01254a5:	eb 2f                	jmp    f01254d6 <test_three_creation_functions+0xd5>
	}
	//Ensure that the user directory, page WS and page tables are allocated in KERNEL HEAP
	{
		struct Env * e = NULL;
		struct Env * ptr_env = NULL;
		LIST_FOREACH(ptr_env, &env_exit_queue)
f01254a7:	a1 cc a9 2b f0       	mov    0xf02ba9cc,%eax
f01254ac:	89 45 e0             	mov    %eax,-0x20(%ebp)
f01254af:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01254b3:	74 08                	je     f01254bd <test_three_creation_functions+0xbc>
f01254b5:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01254b8:	8b 40 44             	mov    0x44(%eax),%eax
f01254bb:	eb 05                	jmp    f01254c2 <test_three_creation_functions+0xc1>
f01254bd:	b8 00 00 00 00       	mov    $0x0,%eax
f01254c2:	a3 cc a9 2b f0       	mov    %eax,0xf02ba9cc
f01254c7:	a1 cc a9 2b f0       	mov    0xf02ba9cc,%eax
f01254cc:	85 c0                	test   %eax,%eax
f01254ce:	75 b4                	jne    f0125484 <test_three_creation_functions+0x83>
f01254d0:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01254d4:	75 ae                	jne    f0125484 <test_three_creation_functions+0x83>
			{
				e = ptr_env ;
				break;
			}
		}
		if (e->pageFaultsCounter != 0)
f01254d6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01254d9:	8b 80 74 da 01 00    	mov    0x1da74(%eax),%eax
f01254df:	85 c0                	test   %eax,%eax
f01254e1:	74 17                	je     f01254fa <test_three_creation_functions+0xf9>
			panic("Page fault is occur while not expected to. Review the three creation functions");
f01254e3:	83 ec 04             	sub    $0x4,%esp
f01254e6:	68 c8 aa 13 f0       	push   $0xf013aac8
f01254eb:	68 c6 09 00 00       	push   $0x9c6
f01254f0:	68 32 9f 13 f0       	push   $0xf0139f32
f01254f5:	e8 b6 ac fd ff       	call   f01001b0 <_panic>

		int pagesInWS = env_page_ws_get_size(e);
f01254fa:	83 ec 0c             	sub    $0xc,%esp
f01254fd:	ff 75 e4             	pushl  -0x1c(%ebp)
f0125500:	e8 c7 31 fe ff       	call   f01086cc <env_page_ws_get_size>
f0125505:	83 c4 10             	add    $0x10,%esp
f0125508:	89 45 dc             	mov    %eax,-0x24(%ebp)
		int curFreeFrames = sys_calculate_free_frames() ;
f012550b:	e8 2e 79 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0125510:	89 45 d8             	mov    %eax,-0x28(%ebp)
		int curFreeDiskFrames = pf_calculate_free_frames() ;
f0125513:	e8 6c f1 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0125518:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		//cprintf("\ndiff in page file = %d, pages in WS = %d\n", initFreeDiskFrames - curFreeDiskFrames, pagesInWS);
		if ((initFreeDiskFrames - curFreeDiskFrames) != pagesInWS) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012551b:	a1 64 f5 2d f0       	mov    0xf02df564,%eax
f0125520:	2b 45 d4             	sub    -0x2c(%ebp),%eax
f0125523:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f0125526:	74 17                	je     f012553f <test_three_creation_functions+0x13e>
f0125528:	83 ec 04             	sub    $0x4,%esp
f012552b:	68 4c 9f 13 f0       	push   $0xf0139f4c
f0125530:	68 cc 09 00 00       	push   $0x9cc
f0125535:	68 32 9f 13 f0       	push   $0xf0139f32
f012553a:	e8 71 ac fd ff       	call   f01001b0 <_panic>
		//cprintf("\ndiff in mem frames = %d, pages in WS = %d\n", initFreeFrames - curFreeFrames, pagesInWS);
		if ((initFreeFrames - curFreeFrames) != 12/*WS*/ + 2*1/*DIR*/ + 2*3/*Tables*/ + 1 /*user WS table*/ + pagesInWS) panic("Wrong allocation: pages are not loaded successfully into memory");
f012553f:	a1 68 f5 2d f0       	mov    0xf02df568,%eax
f0125544:	2b 45 d8             	sub    -0x28(%ebp),%eax
f0125547:	8b 55 dc             	mov    -0x24(%ebp),%edx
f012554a:	83 c2 15             	add    $0x15,%edx
f012554d:	39 d0                	cmp    %edx,%eax
f012554f:	74 17                	je     f0125568 <test_three_creation_functions+0x167>
f0125551:	83 ec 04             	sub    $0x4,%esp
f0125554:	68 b4 9f 13 f0       	push   $0xf0139fb4
f0125559:	68 ce 09 00 00       	push   $0x9ce
f012555e:	68 32 9f 13 f0       	push   $0xf0139f32
f0125563:	e8 48 ac fd ff       	call   f01001b0 <_panic>

		//allocate 4 KB
		char *ptr = kmalloc(4*kilo);
f0125568:	83 ec 0c             	sub    $0xc,%esp
f012556b:	68 00 10 00 00       	push   $0x1000
f0125570:	e8 de 2c fe ff       	call   f0108253 <kmalloc>
f0125575:	83 c4 10             	add    $0x10,%esp
f0125578:	89 45 d0             	mov    %eax,-0x30(%ebp)
		if ((uint32) ptr !=  (ACTUAL_START + (12+2*1+2*3+1)*PAGE_SIZE)) panic("Wrong start address for the allocated space... make sure you create the dir, table and page WS in KERNEL HEAP");
f012557b:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0125582:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0125587:	0f b6 d0             	movzbl %al,%edx
f012558a:	8b 45 cc             	mov    -0x34(%ebp),%eax
f012558d:	01 d0                	add    %edx,%eax
f012558f:	48                   	dec    %eax
f0125590:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0125593:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0125596:	ba 00 00 00 00       	mov    $0x0,%edx
f012559b:	f7 75 cc             	divl   -0x34(%ebp)
f012559e:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01255a1:	29 d0                	sub    %edx,%eax
f01255a3:	89 c1                	mov    %eax,%ecx
f01255a5:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f01255ac:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f01255b1:	0f b6 c0             	movzbl %al,%eax
f01255b4:	c1 e0 04             	shl    $0x4,%eax
f01255b7:	89 c2                	mov    %eax,%edx
f01255b9:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01255bc:	01 d0                	add    %edx,%eax
f01255be:	48                   	dec    %eax
f01255bf:	89 45 c0             	mov    %eax,-0x40(%ebp)
f01255c2:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01255c5:	ba 00 00 00 00       	mov    $0x0,%edx
f01255ca:	f7 75 c4             	divl   -0x3c(%ebp)
f01255cd:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01255d0:	29 d0                	sub    %edx,%eax
f01255d2:	01 c8                	add    %ecx,%eax
f01255d4:	8d 90 00 90 01 f6    	lea    -0x9fe7000(%eax),%edx
f01255da:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01255dd:	39 c2                	cmp    %eax,%edx
f01255df:	74 17                	je     f01255f8 <test_three_creation_functions+0x1f7>
f01255e1:	83 ec 04             	sub    $0x4,%esp
f01255e4:	68 18 ab 13 f0       	push   $0xf013ab18
f01255e9:	68 d2 09 00 00       	push   $0x9d2
f01255ee:	68 32 9f 13 f0       	push   $0xf0139f32
f01255f3:	e8 b8 ab fd ff       	call   f01001b0 <_panic>
	}

	cprintf("\nCongratulations!! test the 3 creation functions is completed successfully.\n");
f01255f8:	83 ec 0c             	sub    $0xc,%esp
f01255fb:	68 88 ab 13 f0       	push   $0xf013ab88
f0125600:	e8 2c b8 fd ff       	call   f0100e31 <cprintf>
f0125605:	83 c4 10             	add    $0x10,%esp

	return 1;
f0125608:	b8 01 00 00 00       	mov    $0x1,%eax
}
f012560d:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0125610:	5b                   	pop    %ebx
f0125611:	5e                   	pop    %esi
f0125612:	5f                   	pop    %edi
f0125613:	5d                   	pop    %ebp
f0125614:	c3                   	ret    

f0125615 <test_kfreeall>:


extern void kfreeall() ;

int test_kfreeall()
{
f0125615:	55                   	push   %ebp
f0125616:	89 e5                	mov    %esp,%ebp
f0125618:	57                   	push   %edi
f0125619:	53                   	push   %ebx
f012561a:	81 ec e0 01 00 00    	sub    $0x1e0,%esp
	char minByte = 1<<7;
f0125620:	c6 45 e7 80          	movb   $0x80,-0x19(%ebp)
	char maxByte = 0x7F;
f0125624:	c6 45 e6 7f          	movb   $0x7f,-0x1a(%ebp)
	short minShort = 1<<15 ;
f0125628:	66 c7 45 e4 00 80    	movw   $0x8000,-0x1c(%ebp)
	short maxShort = 0x7FFF;
f012562e:	66 c7 45 e2 ff 7f    	movw   $0x7fff,-0x1e(%ebp)
	int minInt = 1<<31 ;
f0125634:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
	int maxInt = 0x7FFFFFFF;
f012563b:	c7 45 d8 ff ff ff 7f 	movl   $0x7fffffff,-0x28(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0125642:	e8 f7 77 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0125647:	89 45 d4             	mov    %eax,-0x2c(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f012564a:	8d 95 c0 fe ff ff    	lea    -0x140(%ebp),%edx
f0125650:	b9 14 00 00 00       	mov    $0x14,%ecx
f0125655:	b8 00 00 00 00       	mov    $0x0,%eax
f012565a:	89 d7                	mov    %edx,%edi
f012565c:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f012565e:	8d 95 70 fe ff ff    	lea    -0x190(%ebp),%edx
f0125664:	b9 14 00 00 00       	mov    $0x14,%ecx
f0125669:	b8 00 00 00 00       	mov    $0x0,%eax
f012566e:	89 d7                	mov    %edx,%edi
f0125670:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f0125672:	8d 95 20 fe ff ff    	lea    -0x1e0(%ebp),%edx
f0125678:	b9 14 00 00 00       	mov    $0x14,%ecx
f012567d:	b8 00 00 00 00       	mov    $0x0,%eax
f0125682:	89 d7                	mov    %edx,%edi
f0125684:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0125686:	e8 b3 77 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f012568b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012568e:	e8 f1 ef fd ff       	call   f0104684 <pf_calculate_free_frames>
f0125693:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0125696:	83 ec 0c             	sub    $0xc,%esp
f0125699:	68 00 fc 1f 00       	push   $0x1ffc00
f012569e:	e8 b0 2b fe ff       	call   f0108253 <kmalloc>
f01256a3:	83 c4 10             	add    $0x10,%esp
f01256a6:	89 85 20 fe ff ff    	mov    %eax,-0x1e0(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01256ac:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f01256b2:	89 c1                	mov    %eax,%ecx
f01256b4:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f01256bb:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f01256c0:	0f b6 d0             	movzbl %al,%edx
f01256c3:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01256c6:	01 d0                	add    %edx,%eax
f01256c8:	48                   	dec    %eax
f01256c9:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f01256cc:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01256cf:	ba 00 00 00 00       	mov    $0x0,%edx
f01256d4:	f7 75 c8             	divl   -0x38(%ebp)
f01256d7:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01256da:	29 d0                	sub    %edx,%eax
f01256dc:	89 c3                	mov    %eax,%ebx
f01256de:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f01256e5:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f01256ea:	0f b6 c0             	movzbl %al,%eax
f01256ed:	c1 e0 04             	shl    $0x4,%eax
f01256f0:	89 c2                	mov    %eax,%edx
f01256f2:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01256f5:	01 d0                	add    %edx,%eax
f01256f7:	48                   	dec    %eax
f01256f8:	89 45 bc             	mov    %eax,-0x44(%ebp)
f01256fb:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01256fe:	ba 00 00 00 00       	mov    $0x0,%edx
f0125703:	f7 75 c0             	divl   -0x40(%ebp)
f0125706:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0125709:	29 d0                	sub    %edx,%eax
f012570b:	01 d8                	add    %ebx,%eax
f012570d:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0125712:	39 c1                	cmp    %eax,%ecx
f0125714:	74 17                	je     f012572d <test_kfreeall+0x118>
f0125716:	83 ec 04             	sub    $0x4,%esp
f0125719:	68 18 a0 13 f0       	push   $0xf013a018
f012571e:	68 f9 09 00 00       	push   $0x9f9
f0125723:	68 32 9f 13 f0       	push   $0xf0139f32
f0125728:	e8 83 aa fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012572d:	e8 52 ef fd ff       	call   f0104684 <pf_calculate_free_frames>
f0125732:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0125735:	74 17                	je     f012574e <test_kfreeall+0x139>
f0125737:	83 ec 04             	sub    $0x4,%esp
f012573a:	68 4c 9f 13 f0       	push   $0xf0139f4c
f012573f:	68 fa 09 00 00       	push   $0x9fa
f0125744:	68 32 9f 13 f0       	push   $0xf0139f32
f0125749:	e8 62 aa fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f012574e:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0125751:	e8 e8 76 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0125756:	29 c3                	sub    %eax,%ebx
f0125758:	89 d8                	mov    %ebx,%eax
f012575a:	3d 00 02 00 00       	cmp    $0x200,%eax
f012575f:	74 17                	je     f0125778 <test_kfreeall+0x163>
f0125761:	83 ec 04             	sub    $0x4,%esp
f0125764:	68 b4 9f 13 f0       	push   $0xf0139fb4
f0125769:	68 fb 09 00 00       	push   $0x9fb
f012576e:	68 32 9f 13 f0       	push   $0xf0139f32
f0125773:	e8 38 aa fd ff       	call   f01001b0 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f0125778:	c7 85 c0 fe ff ff ff 	movl   $0x1ffbff,-0x140(%ebp)
f012577f:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0125782:	e8 b7 76 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0125787:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012578a:	e8 f5 ee fd ff       	call   f0104684 <pf_calculate_free_frames>
f012578f:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0125792:	83 ec 0c             	sub    $0xc,%esp
f0125795:	68 00 fc 1f 00       	push   $0x1ffc00
f012579a:	e8 b4 2a fe ff       	call   f0108253 <kmalloc>
f012579f:	83 c4 10             	add    $0x10,%esp
f01257a2:	89 85 24 fe ff ff    	mov    %eax,-0x1dc(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01257a8:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f01257ae:	89 c1                	mov    %eax,%ecx
f01257b0:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f01257b7:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f01257bc:	0f b6 d0             	movzbl %al,%edx
f01257bf:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01257c2:	01 d0                	add    %edx,%eax
f01257c4:	48                   	dec    %eax
f01257c5:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f01257c8:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01257cb:	ba 00 00 00 00       	mov    $0x0,%edx
f01257d0:	f7 75 b8             	divl   -0x48(%ebp)
f01257d3:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01257d6:	29 d0                	sub    %edx,%eax
f01257d8:	89 c3                	mov    %eax,%ebx
f01257da:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f01257e1:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f01257e6:	0f b6 c0             	movzbl %al,%eax
f01257e9:	c1 e0 04             	shl    $0x4,%eax
f01257ec:	89 c2                	mov    %eax,%edx
f01257ee:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01257f1:	01 d0                	add    %edx,%eax
f01257f3:	48                   	dec    %eax
f01257f4:	89 45 ac             	mov    %eax,-0x54(%ebp)
f01257f7:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01257fa:	ba 00 00 00 00       	mov    $0x0,%edx
f01257ff:	f7 75 b0             	divl   -0x50(%ebp)
f0125802:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0125805:	29 d0                	sub    %edx,%eax
f0125807:	01 d8                	add    %ebx,%eax
f0125809:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f012580e:	39 c1                	cmp    %eax,%ecx
f0125810:	74 17                	je     f0125829 <test_kfreeall+0x214>
f0125812:	83 ec 04             	sub    $0x4,%esp
f0125815:	68 18 a0 13 f0       	push   $0xf013a018
f012581a:	68 02 0a 00 00       	push   $0xa02
f012581f:	68 32 9f 13 f0       	push   $0xf0139f32
f0125824:	e8 87 a9 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125829:	e8 56 ee fd ff       	call   f0104684 <pf_calculate_free_frames>
f012582e:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0125831:	74 17                	je     f012584a <test_kfreeall+0x235>
f0125833:	83 ec 04             	sub    $0x4,%esp
f0125836:	68 4c 9f 13 f0       	push   $0xf0139f4c
f012583b:	68 03 0a 00 00       	push   $0xa03
f0125840:	68 32 9f 13 f0       	push   $0xf0139f32
f0125845:	e8 66 a9 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f012584a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012584d:	e8 ec 75 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0125852:	29 c3                	sub    %eax,%ebx
f0125854:	89 d8                	mov    %ebx,%eax
f0125856:	3d 00 02 00 00       	cmp    $0x200,%eax
f012585b:	74 17                	je     f0125874 <test_kfreeall+0x25f>
f012585d:	83 ec 04             	sub    $0x4,%esp
f0125860:	68 b4 9f 13 f0       	push   $0xf0139fb4
f0125865:	68 04 0a 00 00       	push   $0xa04
f012586a:	68 32 9f 13 f0       	push   $0xf0139f32
f012586f:	e8 3c a9 fd ff       	call   f01001b0 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f0125874:	c7 85 c4 fe ff ff ff 	movl   $0x1ffbff,-0x13c(%ebp)
f012587b:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f012587e:	e8 bb 75 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0125883:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125886:	e8 f9 ed fd ff       	call   f0104684 <pf_calculate_free_frames>
f012588b:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f012588e:	83 ec 0c             	sub    $0xc,%esp
f0125891:	68 00 08 00 00       	push   $0x800
f0125896:	e8 b8 29 fe ff       	call   f0108253 <kmalloc>
f012589b:	83 c4 10             	add    $0x10,%esp
f012589e:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01258a4:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f01258aa:	89 c1                	mov    %eax,%ecx
f01258ac:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f01258b3:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f01258b8:	0f b6 d0             	movzbl %al,%edx
f01258bb:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01258be:	01 d0                	add    %edx,%eax
f01258c0:	48                   	dec    %eax
f01258c1:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f01258c4:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01258c7:	ba 00 00 00 00       	mov    $0x0,%edx
f01258cc:	f7 75 a8             	divl   -0x58(%ebp)
f01258cf:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01258d2:	29 d0                	sub    %edx,%eax
f01258d4:	89 c3                	mov    %eax,%ebx
f01258d6:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f01258dd:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f01258e2:	0f b6 c0             	movzbl %al,%eax
f01258e5:	c1 e0 04             	shl    $0x4,%eax
f01258e8:	89 c2                	mov    %eax,%edx
f01258ea:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01258ed:	01 d0                	add    %edx,%eax
f01258ef:	48                   	dec    %eax
f01258f0:	89 45 9c             	mov    %eax,-0x64(%ebp)
f01258f3:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01258f6:	ba 00 00 00 00       	mov    $0x0,%edx
f01258fb:	f7 75 a0             	divl   -0x60(%ebp)
f01258fe:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0125901:	29 d0                	sub    %edx,%eax
f0125903:	01 d8                	add    %ebx,%eax
f0125905:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f012590a:	39 c1                	cmp    %eax,%ecx
f012590c:	74 17                	je     f0125925 <test_kfreeall+0x310>
f012590e:	83 ec 04             	sub    $0x4,%esp
f0125911:	68 18 a0 13 f0       	push   $0xf013a018
f0125916:	68 0b 0a 00 00       	push   $0xa0b
f012591b:	68 32 9f 13 f0       	push   $0xf0139f32
f0125920:	e8 8b a8 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125925:	e8 5a ed fd ff       	call   f0104684 <pf_calculate_free_frames>
f012592a:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012592d:	74 17                	je     f0125946 <test_kfreeall+0x331>
f012592f:	83 ec 04             	sub    $0x4,%esp
f0125932:	68 4c 9f 13 f0       	push   $0xf0139f4c
f0125937:	68 0c 0a 00 00       	push   $0xa0c
f012593c:	68 32 9f 13 f0       	push   $0xf0139f32
f0125941:	e8 6a a8 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125946:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0125949:	e8 f0 74 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f012594e:	29 c3                	sub    %eax,%ebx
f0125950:	89 d8                	mov    %ebx,%eax
f0125952:	83 f8 01             	cmp    $0x1,%eax
f0125955:	74 17                	je     f012596e <test_kfreeall+0x359>
f0125957:	83 ec 04             	sub    $0x4,%esp
f012595a:	68 b4 9f 13 f0       	push   $0xf0139fb4
f012595f:	68 0d 0a 00 00       	push   $0xa0d
f0125964:	68 32 9f 13 f0       	push   $0xf0139f32
f0125969:	e8 42 a8 fd ff       	call   f01001b0 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f012596e:	c7 85 c8 fe ff ff ff 	movl   $0x7ff,-0x138(%ebp)
f0125975:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f0125978:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f012597e:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0125981:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0125988:	eb 0e                	jmp    f0125998 <test_kfreeall+0x383>
		{
			ptr[i] = 2 ;
f012598a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012598d:	8b 45 98             	mov    -0x68(%ebp),%eax
f0125990:	01 d0                	add    %edx,%eax
f0125992:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0125995:	ff 45 f4             	incl   -0xc(%ebp)
f0125998:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012599e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01259a1:	7f e7                	jg     f012598a <test_kfreeall+0x375>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01259a3:	e8 96 74 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f01259a8:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01259ab:	e8 d4 ec fd ff       	call   f0104684 <pf_calculate_free_frames>
f01259b0:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f01259b3:	83 ec 0c             	sub    $0xc,%esp
f01259b6:	68 00 08 00 00       	push   $0x800
f01259bb:	e8 93 28 fe ff       	call   f0108253 <kmalloc>
f01259c0:	83 c4 10             	add    $0x10,%esp
f01259c3:	89 85 2c fe ff ff    	mov    %eax,-0x1d4(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01259c9:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f01259cf:	89 c1                	mov    %eax,%ecx
f01259d1:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f01259d8:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f01259dd:	0f b6 d0             	movzbl %al,%edx
f01259e0:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01259e3:	01 d0                	add    %edx,%eax
f01259e5:	48                   	dec    %eax
f01259e6:	89 45 90             	mov    %eax,-0x70(%ebp)
f01259e9:	8b 45 90             	mov    -0x70(%ebp),%eax
f01259ec:	ba 00 00 00 00       	mov    $0x0,%edx
f01259f1:	f7 75 94             	divl   -0x6c(%ebp)
f01259f4:	8b 45 90             	mov    -0x70(%ebp),%eax
f01259f7:	29 d0                	sub    %edx,%eax
f01259f9:	89 c3                	mov    %eax,%ebx
f01259fb:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f0125a02:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0125a07:	0f b6 c0             	movzbl %al,%eax
f0125a0a:	c1 e0 04             	shl    $0x4,%eax
f0125a0d:	89 c2                	mov    %eax,%edx
f0125a0f:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0125a12:	01 d0                	add    %edx,%eax
f0125a14:	48                   	dec    %eax
f0125a15:	89 45 88             	mov    %eax,-0x78(%ebp)
f0125a18:	8b 45 88             	mov    -0x78(%ebp),%eax
f0125a1b:	ba 00 00 00 00       	mov    $0x0,%edx
f0125a20:	f7 75 8c             	divl   -0x74(%ebp)
f0125a23:	8b 45 88             	mov    -0x78(%ebp),%eax
f0125a26:	29 d0                	sub    %edx,%eax
f0125a28:	01 d8                	add    %ebx,%eax
f0125a2a:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0125a2f:	39 c1                	cmp    %eax,%ecx
f0125a31:	74 17                	je     f0125a4a <test_kfreeall+0x435>
f0125a33:	83 ec 04             	sub    $0x4,%esp
f0125a36:	68 18 a0 13 f0       	push   $0xf013a018
f0125a3b:	68 19 0a 00 00       	push   $0xa19
f0125a40:	68 32 9f 13 f0       	push   $0xf0139f32
f0125a45:	e8 66 a7 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125a4a:	e8 35 ec fd ff       	call   f0104684 <pf_calculate_free_frames>
f0125a4f:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0125a52:	74 17                	je     f0125a6b <test_kfreeall+0x456>
f0125a54:	83 ec 04             	sub    $0x4,%esp
f0125a57:	68 4c 9f 13 f0       	push   $0xf0139f4c
f0125a5c:	68 1a 0a 00 00       	push   $0xa1a
f0125a61:	68 32 9f 13 f0       	push   $0xf0139f32
f0125a66:	e8 45 a7 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125a6b:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0125a6e:	e8 cb 73 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0125a73:	29 c3                	sub    %eax,%ebx
f0125a75:	89 d8                	mov    %ebx,%eax
f0125a77:	83 f8 01             	cmp    $0x1,%eax
f0125a7a:	74 17                	je     f0125a93 <test_kfreeall+0x47e>
f0125a7c:	83 ec 04             	sub    $0x4,%esp
f0125a7f:	68 b4 9f 13 f0       	push   $0xf0139fb4
f0125a84:	68 1b 0a 00 00       	push   $0xa1b
f0125a89:	68 32 9f 13 f0       	push   $0xf0139f32
f0125a8e:	e8 1d a7 fd ff       	call   f01001b0 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f0125a93:	c7 85 cc fe ff ff ff 	movl   $0x7ff,-0x134(%ebp)
f0125a9a:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f0125a9d:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f0125aa3:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0125aa6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0125aad:	eb 0e                	jmp    f0125abd <test_kfreeall+0x4a8>
		{
			ptr[i] = 3 ;
f0125aaf:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0125ab2:	8b 45 98             	mov    -0x68(%ebp),%eax
f0125ab5:	01 d0                	add    %edx,%eax
f0125ab7:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0125aba:	ff 45 f4             	incl   -0xc(%ebp)
f0125abd:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0125ac3:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0125ac6:	7f e7                	jg     f0125aaf <test_kfreeall+0x49a>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0125ac8:	e8 71 73 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0125acd:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125ad0:	e8 af eb fd ff       	call   f0104684 <pf_calculate_free_frames>
f0125ad5:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0125ad8:	83 ec 0c             	sub    $0xc,%esp
f0125adb:	68 00 1c 00 00       	push   $0x1c00
f0125ae0:	e8 6e 27 fe ff       	call   f0108253 <kmalloc>
f0125ae5:	83 c4 10             	add    $0x10,%esp
f0125ae8:	89 85 30 fe ff ff    	mov    %eax,-0x1d0(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125aee:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f0125af4:	89 c1                	mov    %eax,%ecx
f0125af6:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f0125afd:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0125b02:	0f b6 d0             	movzbl %al,%edx
f0125b05:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0125b08:	01 d0                	add    %edx,%eax
f0125b0a:	48                   	dec    %eax
f0125b0b:	89 45 80             	mov    %eax,-0x80(%ebp)
f0125b0e:	8b 45 80             	mov    -0x80(%ebp),%eax
f0125b11:	ba 00 00 00 00       	mov    $0x0,%edx
f0125b16:	f7 75 84             	divl   -0x7c(%ebp)
f0125b19:	8b 45 80             	mov    -0x80(%ebp),%eax
f0125b1c:	29 d0                	sub    %edx,%eax
f0125b1e:	89 c3                	mov    %eax,%ebx
f0125b20:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f0125b27:	10 00 00 
f0125b2a:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0125b2f:	0f b6 c0             	movzbl %al,%eax
f0125b32:	c1 e0 04             	shl    $0x4,%eax
f0125b35:	89 c2                	mov    %eax,%edx
f0125b37:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0125b3d:	01 d0                	add    %edx,%eax
f0125b3f:	48                   	dec    %eax
f0125b40:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f0125b46:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0125b4c:	ba 00 00 00 00       	mov    $0x0,%edx
f0125b51:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f0125b57:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0125b5d:	29 d0                	sub    %edx,%eax
f0125b5f:	01 d8                	add    %ebx,%eax
f0125b61:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0125b66:	39 c1                	cmp    %eax,%ecx
f0125b68:	74 17                	je     f0125b81 <test_kfreeall+0x56c>
f0125b6a:	83 ec 04             	sub    $0x4,%esp
f0125b6d:	68 18 a0 13 f0       	push   $0xf013a018
f0125b72:	68 27 0a 00 00       	push   $0xa27
f0125b77:	68 32 9f 13 f0       	push   $0xf0139f32
f0125b7c:	e8 2f a6 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125b81:	e8 fe ea fd ff       	call   f0104684 <pf_calculate_free_frames>
f0125b86:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0125b89:	74 17                	je     f0125ba2 <test_kfreeall+0x58d>
f0125b8b:	83 ec 04             	sub    $0x4,%esp
f0125b8e:	68 4c 9f 13 f0       	push   $0xf0139f4c
f0125b93:	68 28 0a 00 00       	push   $0xa28
f0125b98:	68 32 9f 13 f0       	push   $0xf0139f32
f0125b9d:	e8 0e a6 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125ba2:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0125ba5:	e8 94 72 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0125baa:	29 c3                	sub    %eax,%ebx
f0125bac:	89 d8                	mov    %ebx,%eax
f0125bae:	83 f8 02             	cmp    $0x2,%eax
f0125bb1:	74 17                	je     f0125bca <test_kfreeall+0x5b5>
f0125bb3:	83 ec 04             	sub    $0x4,%esp
f0125bb6:	68 b4 9f 13 f0       	push   $0xf0139fb4
f0125bbb:	68 29 0a 00 00       	push   $0xa29
f0125bc0:	68 32 9f 13 f0       	push   $0xf0139f32
f0125bc5:	e8 e6 a5 fd ff       	call   f01001b0 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f0125bca:	c7 85 d0 fe ff ff ff 	movl   $0x1bff,-0x130(%ebp)
f0125bd1:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f0125bd4:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f0125bda:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0125bdd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0125be4:	eb 0e                	jmp    f0125bf4 <test_kfreeall+0x5df>
		{
			ptr[i] = 4 ;
f0125be6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0125be9:	8b 45 98             	mov    -0x68(%ebp),%eax
f0125bec:	01 d0                	add    %edx,%eax
f0125bee:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0125bf1:	ff 45 f4             	incl   -0xc(%ebp)
f0125bf4:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0125bfa:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0125bfd:	7f e7                	jg     f0125be6 <test_kfreeall+0x5d1>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0125bff:	e8 3a 72 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0125c04:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125c07:	e8 78 ea fd ff       	call   f0104684 <pf_calculate_free_frames>
f0125c0c:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0125c0f:	83 ec 0c             	sub    $0xc,%esp
f0125c12:	68 00 fc 2f 00       	push   $0x2ffc00
f0125c17:	e8 37 26 fe ff       	call   f0108253 <kmalloc>
f0125c1c:	83 c4 10             	add    $0x10,%esp
f0125c1f:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125c25:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f0125c2b:	89 c1                	mov    %eax,%ecx
f0125c2d:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f0125c34:	10 00 00 
f0125c37:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0125c3c:	0f b6 d0             	movzbl %al,%edx
f0125c3f:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0125c45:	01 d0                	add    %edx,%eax
f0125c47:	48                   	dec    %eax
f0125c48:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f0125c4e:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0125c54:	ba 00 00 00 00       	mov    $0x0,%edx
f0125c59:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f0125c5f:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0125c65:	29 d0                	sub    %edx,%eax
f0125c67:	89 c3                	mov    %eax,%ebx
f0125c69:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f0125c70:	10 00 00 
f0125c73:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0125c78:	0f b6 c0             	movzbl %al,%eax
f0125c7b:	c1 e0 04             	shl    $0x4,%eax
f0125c7e:	89 c2                	mov    %eax,%edx
f0125c80:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0125c86:	01 d0                	add    %edx,%eax
f0125c88:	48                   	dec    %eax
f0125c89:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f0125c8f:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0125c95:	ba 00 00 00 00       	mov    $0x0,%edx
f0125c9a:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f0125ca0:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0125ca6:	29 d0                	sub    %edx,%eax
f0125ca8:	01 d8                	add    %ebx,%eax
f0125caa:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0125caf:	39 c1                	cmp    %eax,%ecx
f0125cb1:	74 17                	je     f0125cca <test_kfreeall+0x6b5>
f0125cb3:	83 ec 04             	sub    $0x4,%esp
f0125cb6:	68 18 a0 13 f0       	push   $0xf013a018
f0125cbb:	68 35 0a 00 00       	push   $0xa35
f0125cc0:	68 32 9f 13 f0       	push   $0xf0139f32
f0125cc5:	e8 e6 a4 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125cca:	e8 b5 e9 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0125ccf:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0125cd2:	74 17                	je     f0125ceb <test_kfreeall+0x6d6>
f0125cd4:	83 ec 04             	sub    $0x4,%esp
f0125cd7:	68 4c 9f 13 f0       	push   $0xf0139f4c
f0125cdc:	68 36 0a 00 00       	push   $0xa36
f0125ce1:	68 32 9f 13 f0       	push   $0xf0139f32
f0125ce6:	e8 c5 a4 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125ceb:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0125cee:	e8 4b 71 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0125cf3:	29 c3                	sub    %eax,%ebx
f0125cf5:	89 d8                	mov    %ebx,%eax
f0125cf7:	3d 00 03 00 00       	cmp    $0x300,%eax
f0125cfc:	74 17                	je     f0125d15 <test_kfreeall+0x700>
f0125cfe:	83 ec 04             	sub    $0x4,%esp
f0125d01:	68 b4 9f 13 f0       	push   $0xf0139fb4
f0125d06:	68 37 0a 00 00       	push   $0xa37
f0125d0b:	68 32 9f 13 f0       	push   $0xf0139f32
f0125d10:	e8 9b a4 fd ff       	call   f01001b0 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f0125d15:	c7 85 d4 fe ff ff ff 	movl   $0x2ffbff,-0x12c(%ebp)
f0125d1c:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f0125d1f:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f0125d25:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0125d28:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0125d2f:	eb 0e                	jmp    f0125d3f <test_kfreeall+0x72a>
		{
			ptr[i] = 5 ;
f0125d31:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0125d34:	8b 45 98             	mov    -0x68(%ebp),%eax
f0125d37:	01 d0                	add    %edx,%eax
f0125d39:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0125d3c:	ff 45 f4             	incl   -0xc(%ebp)
f0125d3f:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0125d45:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0125d48:	7f e7                	jg     f0125d31 <test_kfreeall+0x71c>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0125d4a:	e8 ef 70 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0125d4f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125d52:	e8 2d e9 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0125d57:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0125d5a:	83 ec 0c             	sub    $0xc,%esp
f0125d5d:	68 00 fc 5f 00       	push   $0x5ffc00
f0125d62:	e8 ec 24 fe ff       	call   f0108253 <kmalloc>
f0125d67:	83 c4 10             	add    $0x10,%esp
f0125d6a:	89 85 38 fe ff ff    	mov    %eax,-0x1c8(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125d70:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0125d76:	89 c1                	mov    %eax,%ecx
f0125d78:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f0125d7f:	10 00 00 
f0125d82:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0125d87:	0f b6 d0             	movzbl %al,%edx
f0125d8a:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0125d90:	01 d0                	add    %edx,%eax
f0125d92:	48                   	dec    %eax
f0125d93:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f0125d99:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0125d9f:	ba 00 00 00 00       	mov    $0x0,%edx
f0125da4:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f0125daa:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0125db0:	29 d0                	sub    %edx,%eax
f0125db2:	89 c3                	mov    %eax,%ebx
f0125db4:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f0125dbb:	10 00 00 
f0125dbe:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0125dc3:	0f b6 c0             	movzbl %al,%eax
f0125dc6:	c1 e0 04             	shl    $0x4,%eax
f0125dc9:	89 c2                	mov    %eax,%edx
f0125dcb:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0125dd1:	01 d0                	add    %edx,%eax
f0125dd3:	48                   	dec    %eax
f0125dd4:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f0125dda:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0125de0:	ba 00 00 00 00       	mov    $0x0,%edx
f0125de5:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f0125deb:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0125df1:	29 d0                	sub    %edx,%eax
f0125df3:	01 d8                	add    %ebx,%eax
f0125df5:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0125dfa:	39 c1                	cmp    %eax,%ecx
f0125dfc:	74 17                	je     f0125e15 <test_kfreeall+0x800>
f0125dfe:	83 ec 04             	sub    $0x4,%esp
f0125e01:	68 18 a0 13 f0       	push   $0xf013a018
f0125e06:	68 43 0a 00 00       	push   $0xa43
f0125e0b:	68 32 9f 13 f0       	push   $0xf0139f32
f0125e10:	e8 9b a3 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125e15:	e8 6a e8 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0125e1a:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0125e1d:	74 17                	je     f0125e36 <test_kfreeall+0x821>
f0125e1f:	83 ec 04             	sub    $0x4,%esp
f0125e22:	68 4c 9f 13 f0       	push   $0xf0139f4c
f0125e27:	68 44 0a 00 00       	push   $0xa44
f0125e2c:	68 32 9f 13 f0       	push   $0xf0139f32
f0125e31:	e8 7a a3 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125e36:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0125e39:	e8 00 70 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0125e3e:	29 c3                	sub    %eax,%ebx
f0125e40:	89 d8                	mov    %ebx,%eax
f0125e42:	3d 00 06 00 00       	cmp    $0x600,%eax
f0125e47:	74 17                	je     f0125e60 <test_kfreeall+0x84b>
f0125e49:	83 ec 04             	sub    $0x4,%esp
f0125e4c:	68 b4 9f 13 f0       	push   $0xf0139fb4
f0125e51:	68 45 0a 00 00       	push   $0xa45
f0125e56:	68 32 9f 13 f0       	push   $0xf0139f32
f0125e5b:	e8 50 a3 fd ff       	call   f01001b0 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f0125e60:	c7 85 d8 fe ff ff ff 	movl   $0x5ffbff,-0x128(%ebp)
f0125e67:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0125e6a:	e8 cf 6f fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0125e6f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125e72:	e8 0d e8 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0125e77:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0125e7a:	83 ec 0c             	sub    $0xc,%esp
f0125e7d:	68 00 38 00 00       	push   $0x3800
f0125e82:	e8 cc 23 fe ff       	call   f0108253 <kmalloc>
f0125e87:	83 c4 10             	add    $0x10,%esp
f0125e8a:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125e90:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0125e96:	89 c1                	mov    %eax,%ecx
f0125e98:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f0125e9f:	10 00 00 
f0125ea2:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0125ea7:	0f b6 d0             	movzbl %al,%edx
f0125eaa:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0125eb0:	01 d0                	add    %edx,%eax
f0125eb2:	48                   	dec    %eax
f0125eb3:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f0125eb9:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0125ebf:	ba 00 00 00 00       	mov    $0x0,%edx
f0125ec4:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f0125eca:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0125ed0:	29 d0                	sub    %edx,%eax
f0125ed2:	89 c3                	mov    %eax,%ebx
f0125ed4:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f0125edb:	10 00 00 
f0125ede:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0125ee3:	0f b6 c0             	movzbl %al,%eax
f0125ee6:	c1 e0 04             	shl    $0x4,%eax
f0125ee9:	89 c2                	mov    %eax,%edx
f0125eeb:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0125ef1:	01 d0                	add    %edx,%eax
f0125ef3:	48                   	dec    %eax
f0125ef4:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f0125efa:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0125f00:	ba 00 00 00 00       	mov    $0x0,%edx
f0125f05:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f0125f0b:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0125f11:	29 d0                	sub    %edx,%eax
f0125f13:	01 d8                	add    %ebx,%eax
f0125f15:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0125f1a:	39 c1                	cmp    %eax,%ecx
f0125f1c:	74 17                	je     f0125f35 <test_kfreeall+0x920>
f0125f1e:	83 ec 04             	sub    $0x4,%esp
f0125f21:	68 18 a0 13 f0       	push   $0xf013a018
f0125f26:	68 4c 0a 00 00       	push   $0xa4c
f0125f2b:	68 32 9f 13 f0       	push   $0xf0139f32
f0125f30:	e8 7b a2 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125f35:	e8 4a e7 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0125f3a:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0125f3d:	74 17                	je     f0125f56 <test_kfreeall+0x941>
f0125f3f:	83 ec 04             	sub    $0x4,%esp
f0125f42:	68 4c 9f 13 f0       	push   $0xf0139f4c
f0125f47:	68 4d 0a 00 00       	push   $0xa4d
f0125f4c:	68 32 9f 13 f0       	push   $0xf0139f32
f0125f51:	e8 5a a2 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125f56:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0125f59:	e8 e0 6e fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0125f5e:	29 c3                	sub    %eax,%ebx
f0125f60:	89 d8                	mov    %ebx,%eax
f0125f62:	83 f8 04             	cmp    $0x4,%eax
f0125f65:	74 17                	je     f0125f7e <test_kfreeall+0x969>
f0125f67:	83 ec 04             	sub    $0x4,%esp
f0125f6a:	68 b4 9f 13 f0       	push   $0xf0139fb4
f0125f6f:	68 4e 0a 00 00       	push   $0xa4e
f0125f74:	68 32 9f 13 f0       	push   $0xf0139f32
f0125f79:	e8 32 a2 fd ff       	call   f01001b0 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f0125f7e:	c7 85 dc fe ff ff ff 	movl   $0x37ff,-0x124(%ebp)
f0125f85:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f0125f88:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0125f8e:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0125f91:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0125f98:	eb 0e                	jmp    f0125fa8 <test_kfreeall+0x993>
		{
			ptr[i] = 7 ;
f0125f9a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0125f9d:	8b 45 98             	mov    -0x68(%ebp),%eax
f0125fa0:	01 d0                	add    %edx,%eax
f0125fa2:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0125fa5:	ff 45 f4             	incl   -0xc(%ebp)
f0125fa8:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0125fae:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0125fb1:	7f e7                	jg     f0125f9a <test_kfreeall+0x985>
	}

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0125fb3:	e8 86 6e fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0125fb8:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0125fbe:	e8 c1 e6 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0125fc3:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[0]);
f0125fc9:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f0125fcf:	83 ec 0c             	sub    $0xc,%esp
f0125fd2:	50                   	push   %eax
f0125fd3:	e8 06 24 fe ff       	call   f01083de <kfree>
f0125fd8:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125fdb:	e8 a4 e6 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0125fe0:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f0125fe6:	74 17                	je     f0125fff <test_kfreeall+0x9ea>
f0125fe8:	83 ec 04             	sub    $0x4,%esp
f0125feb:	68 4c 9f 13 f0       	push   $0xf0139f4c
f0125ff0:	68 5d 0a 00 00       	push   $0xa5d
f0125ff5:	68 32 9f 13 f0       	push   $0xf0139f32
f0125ffa:	e8 b1 a1 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0125fff:	e8 3a 6e fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0126004:	89 c2                	mov    %eax,%edx
f0126006:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012600c:	29 c2                	sub    %eax,%edx
f012600e:	89 d0                	mov    %edx,%eax
f0126010:	3d 00 02 00 00       	cmp    $0x200,%eax
f0126015:	74 17                	je     f012602e <test_kfreeall+0xa19>
f0126017:	83 ec 04             	sub    $0x4,%esp
f012601a:	68 bc a6 13 f0       	push   $0xf013a6bc
f012601f:	68 5e 0a 00 00       	push   $0xa5e
f0126024:	68 32 9f 13 f0       	push   $0xf0139f32
f0126029:	e8 82 a1 fd ff       	call   f01001b0 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f012602e:	e8 0b 6e fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0126033:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126039:	e8 46 e6 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012603e:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[1]);
f0126044:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012604a:	83 ec 0c             	sub    $0xc,%esp
f012604d:	50                   	push   %eax
f012604e:	e8 8b 23 fe ff       	call   f01083de <kfree>
f0126053:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126056:	e8 29 e6 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012605b:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f0126061:	74 17                	je     f012607a <test_kfreeall+0xa65>
f0126063:	83 ec 04             	sub    $0x4,%esp
f0126066:	68 4c 9f 13 f0       	push   $0xf0139f4c
f012606b:	68 64 0a 00 00       	push   $0xa64
f0126070:	68 32 9f 13 f0       	push   $0xf0139f32
f0126075:	e8 36 a1 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f012607a:	e8 bf 6d fe ff       	call   f010ce3e <sys_calculate_free_frames>
f012607f:	89 c2                	mov    %eax,%edx
f0126081:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0126087:	29 c2                	sub    %eax,%edx
f0126089:	89 d0                	mov    %edx,%eax
f012608b:	3d 00 02 00 00       	cmp    $0x200,%eax
f0126090:	74 17                	je     f01260a9 <test_kfreeall+0xa94>
f0126092:	83 ec 04             	sub    $0x4,%esp
f0126095:	68 bc a6 13 f0       	push   $0xf013a6bc
f012609a:	68 65 0a 00 00       	push   $0xa65
f012609f:	68 32 9f 13 f0       	push   $0xf0139f32
f01260a4:	e8 07 a1 fd ff       	call   f01001b0 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f01260a9:	e8 90 6d fe ff       	call   f010ce3e <sys_calculate_free_frames>
f01260ae:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01260b4:	e8 cb e5 fd ff       	call   f0104684 <pf_calculate_free_frames>
f01260b9:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[6]);
f01260bf:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f01260c5:	83 ec 0c             	sub    $0xc,%esp
f01260c8:	50                   	push   %eax
f01260c9:	e8 10 23 fe ff       	call   f01083de <kfree>
f01260ce:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01260d1:	e8 ae e5 fd ff       	call   f0104684 <pf_calculate_free_frames>
f01260d6:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f01260dc:	74 17                	je     f01260f5 <test_kfreeall+0xae0>
f01260de:	83 ec 04             	sub    $0x4,%esp
f01260e1:	68 4c 9f 13 f0       	push   $0xf0139f4c
f01260e6:	68 6b 0a 00 00       	push   $0xa6b
f01260eb:	68 32 9f 13 f0       	push   $0xf0139f32
f01260f0:	e8 bb a0 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f01260f5:	e8 44 6d fe ff       	call   f010ce3e <sys_calculate_free_frames>
f01260fa:	89 c2                	mov    %eax,%edx
f01260fc:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0126102:	29 c2                	sub    %eax,%edx
f0126104:	89 d0                	mov    %edx,%eax
f0126106:	3d 00 06 00 00       	cmp    $0x600,%eax
f012610b:	74 17                	je     f0126124 <test_kfreeall+0xb0f>
f012610d:	83 ec 04             	sub    $0x4,%esp
f0126110:	68 bc a6 13 f0       	push   $0xf013a6bc
f0126115:	68 6c 0a 00 00       	push   $0xa6c
f012611a:	68 32 9f 13 f0       	push   $0xf0139f32
f012611f:	e8 8c a0 fd ff       	call   f01001b0 <_panic>


	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
f0126124:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f012612a:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f012612d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126134:	eb 1e                	jmp    f0126154 <test_kfreeall+0xb3f>
		{
			sums[2] += ptr[i] ;
f0126136:	8b 95 78 fe ff ff    	mov    -0x188(%ebp),%edx
f012613c:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012613f:	8b 45 98             	mov    -0x68(%ebp),%eax
f0126142:	01 c8                	add    %ecx,%eax
f0126144:	8a 00                	mov    (%eax),%al
f0126146:	0f be c0             	movsbl %al,%eax
f0126149:	01 d0                	add    %edx,%eax
f012614b:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)

	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0126151:	ff 45 f4             	incl   -0xc(%ebp)
f0126154:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012615a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012615d:	7f d7                	jg     f0126136 <test_kfreeall+0xb21>
		{
			sums[2] += ptr[i] ;
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");
f012615f:	8b 95 78 fe ff ff    	mov    -0x188(%ebp),%edx
f0126165:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012616b:	01 c0                	add    %eax,%eax
f012616d:	39 c2                	cmp    %eax,%edx
f012616f:	74 17                	je     f0126188 <test_kfreeall+0xb73>
f0126171:	83 ec 04             	sub    $0x4,%esp
f0126174:	68 18 a7 13 f0       	push   $0xf013a718
f0126179:	68 78 0a 00 00       	push   $0xa78
f012617e:	68 32 9f 13 f0       	push   $0xf0139f32
f0126183:	e8 28 a0 fd ff       	call   f01001b0 <_panic>

		//2 KB
		ptr = (char*)ptr_allocations[3];
f0126188:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f012618e:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0126191:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126198:	eb 1e                	jmp    f01261b8 <test_kfreeall+0xba3>
		{
			sums[3] += ptr[i] ;
f012619a:	8b 95 7c fe ff ff    	mov    -0x184(%ebp),%edx
f01261a0:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01261a3:	8b 45 98             	mov    -0x68(%ebp),%eax
f01261a6:	01 c8                	add    %ecx,%eax
f01261a8:	8a 00                	mov    (%eax),%al
f01261aa:	0f be c0             	movsbl %al,%eax
f01261ad:	01 d0                	add    %edx,%eax
f01261af:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");

		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f01261b5:	ff 45 f4             	incl   -0xc(%ebp)
f01261b8:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f01261be:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01261c1:	7f d7                	jg     f012619a <test_kfreeall+0xb85>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f01261c3:	8b 95 7c fe ff ff    	mov    -0x184(%ebp),%edx
f01261c9:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f01261cf:	89 c1                	mov    %eax,%ecx
f01261d1:	01 c9                	add    %ecx,%ecx
f01261d3:	01 c8                	add    %ecx,%eax
f01261d5:	39 c2                	cmp    %eax,%edx
f01261d7:	74 17                	je     f01261f0 <test_kfreeall+0xbdb>
f01261d9:	83 ec 04             	sub    $0x4,%esp
f01261dc:	68 18 a7 13 f0       	push   $0xf013a718
f01261e1:	68 80 0a 00 00       	push   $0xa80
f01261e6:	68 32 9f 13 f0       	push   $0xf0139f32
f01261eb:	e8 c0 9f fd ff       	call   f01001b0 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f01261f0:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f01261f6:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f01261f9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126200:	eb 1e                	jmp    f0126220 <test_kfreeall+0xc0b>
		{
			sums[4] += ptr[i] ;
f0126202:	8b 95 80 fe ff ff    	mov    -0x180(%ebp),%edx
f0126208:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012620b:	8b 45 98             	mov    -0x68(%ebp),%eax
f012620e:	01 c8                	add    %ecx,%eax
f0126210:	8a 00                	mov    (%eax),%al
f0126212:	0f be c0             	movsbl %al,%eax
f0126215:	01 d0                	add    %edx,%eax
f0126217:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f012621d:	ff 45 f4             	incl   -0xc(%ebp)
f0126220:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0126226:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126229:	7f d7                	jg     f0126202 <test_kfreeall+0xbed>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f012622b:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0126231:	8b 95 d0 fe ff ff    	mov    -0x130(%ebp),%edx
f0126237:	c1 e2 02             	shl    $0x2,%edx
f012623a:	39 d0                	cmp    %edx,%eax
f012623c:	74 17                	je     f0126255 <test_kfreeall+0xc40>
f012623e:	83 ec 04             	sub    $0x4,%esp
f0126241:	68 18 a7 13 f0       	push   $0xf013a718
f0126246:	68 88 0a 00 00       	push   $0xa88
f012624b:	68 32 9f 13 f0       	push   $0xf0139f32
f0126250:	e8 5b 9f fd ff       	call   f01001b0 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f0126255:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f012625b:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f012625e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126265:	eb 1e                	jmp    f0126285 <test_kfreeall+0xc70>
		{
			sums[5] += ptr[i] ;
f0126267:	8b 95 84 fe ff ff    	mov    -0x17c(%ebp),%edx
f012626d:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0126270:	8b 45 98             	mov    -0x68(%ebp),%eax
f0126273:	01 c8                	add    %ecx,%eax
f0126275:	8a 00                	mov    (%eax),%al
f0126277:	0f be c0             	movsbl %al,%eax
f012627a:	01 d0                	add    %edx,%eax
f012627c:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0126282:	ff 45 f4             	incl   -0xc(%ebp)
f0126285:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f012628b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012628e:	7f d7                	jg     f0126267 <test_kfreeall+0xc52>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f0126290:	8b 8d 84 fe ff ff    	mov    -0x17c(%ebp),%ecx
f0126296:	8b 95 d4 fe ff ff    	mov    -0x12c(%ebp),%edx
f012629c:	89 d0                	mov    %edx,%eax
f012629e:	c1 e0 02             	shl    $0x2,%eax
f01262a1:	01 d0                	add    %edx,%eax
f01262a3:	39 c1                	cmp    %eax,%ecx
f01262a5:	74 17                	je     f01262be <test_kfreeall+0xca9>
f01262a7:	83 ec 04             	sub    $0x4,%esp
f01262aa:	68 18 a7 13 f0       	push   $0xf013a718
f01262af:	68 90 0a 00 00       	push   $0xa90
f01262b4:	68 32 9f 13 f0       	push   $0xf0139f32
f01262b9:	e8 f2 9e fd ff       	call   f01001b0 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f01262be:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f01262c4:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f01262c7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01262ce:	eb 1e                	jmp    f01262ee <test_kfreeall+0xcd9>
		{
			sums[7] += ptr[i] ;
f01262d0:	8b 95 8c fe ff ff    	mov    -0x174(%ebp),%edx
f01262d6:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01262d9:	8b 45 98             	mov    -0x68(%ebp),%eax
f01262dc:	01 c8                	add    %ecx,%eax
f01262de:	8a 00                	mov    (%eax),%al
f01262e0:	0f be c0             	movsbl %al,%eax
f01262e3:	01 d0                	add    %edx,%eax
f01262e5:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f01262eb:	ff 45 f4             	incl   -0xc(%ebp)
f01262ee:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01262f4:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01262f7:	7f d7                	jg     f01262d0 <test_kfreeall+0xcbb>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f01262f9:	8b 8d 8c fe ff ff    	mov    -0x174(%ebp),%ecx
f01262ff:	8b 95 dc fe ff ff    	mov    -0x124(%ebp),%edx
f0126305:	89 d0                	mov    %edx,%eax
f0126307:	01 c0                	add    %eax,%eax
f0126309:	01 d0                	add    %edx,%eax
f012630b:	01 c0                	add    %eax,%eax
f012630d:	01 d0                	add    %edx,%eax
f012630f:	39 c1                	cmp    %eax,%ecx
f0126311:	74 17                	je     f012632a <test_kfreeall+0xd15>
f0126313:	83 ec 04             	sub    $0x4,%esp
f0126316:	68 18 a7 13 f0       	push   $0xf013a718
f012631b:	68 98 0a 00 00       	push   $0xa98
f0126320:	68 32 9f 13 f0       	push   $0xf0139f32
f0126325:	e8 86 9e fd ff       	call   f01001b0 <_panic>
	}

	//Allocate after kfree
	{
		//20 KB
		freeFrames = sys_calculate_free_frames() ;
f012632a:	e8 0f 6b fe ff       	call   f010ce3e <sys_calculate_free_frames>
f012632f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126332:	e8 4d e3 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0126337:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[8] = kmalloc(20*kilo);
f012633a:	83 ec 0c             	sub    $0xc,%esp
f012633d:	68 00 50 00 00       	push   $0x5000
f0126342:	e8 0c 1f fe ff       	call   f0108253 <kmalloc>
f0126347:	83 c4 10             	add    $0x10,%esp
f012634a:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126350:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0126356:	89 c1                	mov    %eax,%ecx
f0126358:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f012635f:	10 00 00 
f0126362:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0126367:	0f b6 d0             	movzbl %al,%edx
f012636a:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0126370:	01 d0                	add    %edx,%eax
f0126372:	48                   	dec    %eax
f0126373:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f0126379:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012637f:	ba 00 00 00 00       	mov    $0x0,%edx
f0126384:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f012638a:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0126390:	29 d0                	sub    %edx,%eax
f0126392:	89 c3                	mov    %eax,%ebx
f0126394:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f012639b:	10 00 00 
f012639e:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f01263a3:	0f b6 c0             	movzbl %al,%eax
f01263a6:	c1 e0 04             	shl    $0x4,%eax
f01263a9:	89 c2                	mov    %eax,%edx
f01263ab:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01263b1:	01 d0                	add    %edx,%eax
f01263b3:	48                   	dec    %eax
f01263b4:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f01263ba:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01263c0:	ba 00 00 00 00       	mov    $0x0,%edx
f01263c5:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f01263cb:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01263d1:	29 d0                	sub    %edx,%eax
f01263d3:	01 d8                	add    %ebx,%eax
f01263d5:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f01263da:	39 c1                	cmp    %eax,%ecx
f01263dc:	74 17                	je     f01263f5 <test_kfreeall+0xde0>
f01263de:	83 ec 04             	sub    $0x4,%esp
f01263e1:	68 18 a0 13 f0       	push   $0xf013a018
f01263e6:	68 a1 0a 00 00       	push   $0xaa1
f01263eb:	68 32 9f 13 f0       	push   $0xf0139f32
f01263f0:	e8 bb 9d fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01263f5:	e8 8a e2 fd ff       	call   f0104684 <pf_calculate_free_frames>
f01263fa:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01263fd:	74 17                	je     f0126416 <test_kfreeall+0xe01>
f01263ff:	83 ec 04             	sub    $0x4,%esp
f0126402:	68 4c 9f 13 f0       	push   $0xf0139f4c
f0126407:	68 a2 0a 00 00       	push   $0xaa2
f012640c:	68 32 9f 13 f0       	push   $0xf0139f32
f0126411:	e8 9a 9d fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126416:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0126419:	e8 20 6a fe ff       	call   f010ce3e <sys_calculate_free_frames>
f012641e:	29 c3                	sub    %eax,%ebx
f0126420:	89 d8                	mov    %ebx,%eax
f0126422:	83 f8 05             	cmp    $0x5,%eax
f0126425:	74 17                	je     f012643e <test_kfreeall+0xe29>
f0126427:	83 ec 04             	sub    $0x4,%esp
f012642a:	68 b4 9f 13 f0       	push   $0xf0139fb4
f012642f:	68 a3 0a 00 00       	push   $0xaa3
f0126434:	68 32 9f 13 f0       	push   $0xf0139f32
f0126439:	e8 72 9d fd ff       	call   f01001b0 <_panic>
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
f012643e:	c7 85 e0 fe ff ff ff 	movl   $0x4fff,-0x120(%ebp)
f0126445:	4f 00 00 
		ptr = (char*)ptr_allocations[8];
f0126448:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012644e:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f0126451:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126458:	eb 0e                	jmp    f0126468 <test_kfreeall+0xe53>
		{
			ptr[i] = 8 ;
f012645a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012645d:	8b 45 98             	mov    -0x68(%ebp),%eax
f0126460:	01 d0                	add    %edx,%eax
f0126462:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f0126465:	ff 45 f4             	incl   -0xc(%ebp)
f0126468:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012646e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126471:	7f e7                	jg     f012645a <test_kfreeall+0xe45>
		{
			ptr[i] = 8 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f0126473:	e8 c6 69 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0126478:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012647b:	e8 04 e2 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0126480:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega);
f0126483:	83 ec 0c             	sub    $0xc,%esp
f0126486:	68 00 00 10 00       	push   $0x100000
f012648b:	e8 c3 1d fe ff       	call   f0108253 <kmalloc>
f0126490:	83 c4 10             	add    $0x10,%esp
f0126493:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126499:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012649f:	89 c1                	mov    %eax,%ecx
f01264a1:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f01264a8:	10 00 00 
f01264ab:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f01264b0:	0f b6 d0             	movzbl %al,%edx
f01264b3:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01264b9:	01 d0                	add    %edx,%eax
f01264bb:	48                   	dec    %eax
f01264bc:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f01264c2:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01264c8:	ba 00 00 00 00       	mov    $0x0,%edx
f01264cd:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f01264d3:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01264d9:	29 d0                	sub    %edx,%eax
f01264db:	89 c3                	mov    %eax,%ebx
f01264dd:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f01264e4:	10 00 00 
f01264e7:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f01264ec:	0f b6 c0             	movzbl %al,%eax
f01264ef:	c1 e0 04             	shl    $0x4,%eax
f01264f2:	89 c2                	mov    %eax,%edx
f01264f4:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01264fa:	01 d0                	add    %edx,%eax
f01264fc:	48                   	dec    %eax
f01264fd:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f0126503:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0126509:	ba 00 00 00 00       	mov    $0x0,%edx
f012650e:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f0126514:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012651a:	29 d0                	sub    %edx,%eax
f012651c:	01 d8                	add    %ebx,%eax
f012651e:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f0126523:	39 c1                	cmp    %eax,%ecx
f0126525:	74 17                	je     f012653e <test_kfreeall+0xf29>
f0126527:	83 ec 04             	sub    $0x4,%esp
f012652a:	68 18 a0 13 f0       	push   $0xf013a018
f012652f:	68 af 0a 00 00       	push   $0xaaf
f0126534:	68 32 9f 13 f0       	push   $0xf0139f32
f0126539:	e8 72 9c fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012653e:	e8 41 e1 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0126543:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126546:	74 17                	je     f012655f <test_kfreeall+0xf4a>
f0126548:	83 ec 04             	sub    $0x4,%esp
f012654b:	68 4c 9f 13 f0       	push   $0xf0139f4c
f0126550:	68 b0 0a 00 00       	push   $0xab0
f0126555:	68 32 9f 13 f0       	push   $0xf0139f32
f012655a:	e8 51 9c fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f012655f:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0126562:	e8 d7 68 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0126567:	29 c3                	sub    %eax,%ebx
f0126569:	89 d8                	mov    %ebx,%eax
f012656b:	3d 00 01 00 00       	cmp    $0x100,%eax
f0126570:	74 17                	je     f0126589 <test_kfreeall+0xf74>
f0126572:	83 ec 04             	sub    $0x4,%esp
f0126575:	68 b4 9f 13 f0       	push   $0xf0139fb4
f012657a:	68 b1 0a 00 00       	push   $0xab1
f012657f:	68 32 9f 13 f0       	push   $0xf0139f32
f0126584:	e8 27 9c fd ff       	call   f01001b0 <_panic>
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
f0126589:	c7 85 e4 fe ff ff ff 	movl   $0xfffff,-0x11c(%ebp)
f0126590:	ff 0f 00 
		ptr = (char*)ptr_allocations[9];
f0126593:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0126599:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f012659c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01265a3:	eb 0e                	jmp    f01265b3 <test_kfreeall+0xf9e>
		{
			ptr[i] = 9 ;
f01265a5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01265a8:	8b 45 98             	mov    -0x68(%ebp),%eax
f01265ab:	01 d0                	add    %edx,%eax
f01265ad:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f01265b0:	ff 45 f4             	incl   -0xc(%ebp)
f01265b3:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f01265b9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01265bc:	7f e7                	jg     f01265a5 <test_kfreeall+0xf90>
		}
	}

	//kfree entire kernel heap
	{
		freeFrames = sys_calculate_free_frames() ;
f01265be:	e8 7b 68 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f01265c3:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01265c6:	e8 b9 e0 fd ff       	call   f0104684 <pf_calculate_free_frames>
f01265cb:	89 45 cc             	mov    %eax,-0x34(%ebp)

		kfreeall();
f01265ce:	e8 62 1e fe ff       	call   f0108435 <kfreeall>

		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01265d3:	e8 ac e0 fd ff       	call   f0104684 <pf_calculate_free_frames>
f01265d8:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01265db:	74 17                	je     f01265f4 <test_kfreeall+0xfdf>
f01265dd:	83 ec 04             	sub    $0x4,%esp
f01265e0:	68 4c 9f 13 f0       	push   $0xf0139f4c
f01265e5:	68 c1 0a 00 00       	push   $0xac1
f01265ea:	68 32 9f 13 f0       	push   $0xf0139f32
f01265ef:	e8 bc 9b fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != (INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE+ 2 + 3*Mega/4096 + 1 + 1 + 4 + 5 + 256) panic("Wrong kfree: pages in memory are not freed correctly");
f01265f4:	e8 45 68 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f01265f9:	89 c2                	mov    %eax,%edx
f01265fb:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01265fe:	89 d1                	mov    %edx,%ecx
f0126600:	29 c1                	sub    %eax,%ecx
f0126602:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f0126609:	10 00 00 
f012660c:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0126611:	0f b6 d0             	movzbl %al,%edx
f0126614:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012661a:	01 d0                	add    %edx,%eax
f012661c:	48                   	dec    %eax
f012661d:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f0126623:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0126629:	ba 00 00 00 00       	mov    $0x0,%edx
f012662e:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f0126634:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012663a:	29 d0                	sub    %edx,%eax
f012663c:	89 c3                	mov    %eax,%ebx
f012663e:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f0126645:	10 00 00 
f0126648:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f012664d:	0f b6 c0             	movzbl %al,%eax
f0126650:	c1 e0 04             	shl    $0x4,%eax
f0126653:	89 c2                	mov    %eax,%edx
f0126655:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012665b:	01 d0                	add    %edx,%eax
f012665d:	48                   	dec    %eax
f012665e:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f0126664:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012666a:	ba 00 00 00 00       	mov    $0x0,%edx
f012666f:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f0126675:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012667b:	29 d0                	sub    %edx,%eax
f012667d:	01 d8                	add    %ebx,%eax
f012667f:	05 00 40 00 00       	add    $0x4000,%eax
f0126684:	c1 e8 0c             	shr    $0xc,%eax
f0126687:	05 0d 04 00 00       	add    $0x40d,%eax
f012668c:	39 c1                	cmp    %eax,%ecx
f012668e:	74 17                	je     f01266a7 <test_kfreeall+0x1092>
f0126690:	83 ec 04             	sub    $0x4,%esp
f0126693:	68 bc a6 13 f0       	push   $0xf013a6bc
f0126698:	68 c2 0a 00 00       	push   $0xac2
f012669d:	68 32 9f 13 f0       	push   $0xf0139f32
f01266a2:	e8 09 9b fd ff       	call   f01001b0 <_panic>

	//Check memory access after kfreeall
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f01266a7:	83 ec 0c             	sub    $0xc,%esp
f01266aa:	6a 03                	push   $0x3
f01266ac:	e8 28 6c fe ff       	call   f010d2d9 <sys_bypassPageFault>
f01266b1:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 10; ++i)
f01266b4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01266bb:	e9 82 00 00 00       	jmp    f0126742 <test_kfreeall+0x112d>
		{
			ptr = (char *) ptr_allocations[i];
f01266c0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01266c3:	8b 84 85 20 fe ff ff 	mov    -0x1e0(%ebp,%eax,4),%eax
f01266ca:	89 45 98             	mov    %eax,-0x68(%ebp)
			ptr[0] = 10;
f01266cd:	8b 45 98             	mov    -0x68(%ebp),%eax
f01266d0:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
f01266d3:	e8 ef 6b fe ff       	call   f010d2c7 <sys_rcr2>
f01266d8:	89 c2                	mov    %eax,%edx
f01266da:	8b 45 98             	mov    -0x68(%ebp),%eax
f01266dd:	39 c2                	cmp    %eax,%edx
f01266df:	74 17                	je     f01266f8 <test_kfreeall+0x10e3>
f01266e1:	83 ec 04             	sub    $0x4,%esp
f01266e4:	68 98 a7 13 f0       	push   $0xf013a798
f01266e9:	68 d0 0a 00 00       	push   $0xad0
f01266ee:	68 32 9f 13 f0       	push   $0xf0139f32
f01266f3:	e8 b8 9a fd ff       	call   f01001b0 <_panic>
			ptr[lastIndices[i]] = 10;
f01266f8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01266fb:	8b 84 85 c0 fe ff ff 	mov    -0x140(%ebp,%eax,4),%eax
f0126702:	89 c2                	mov    %eax,%edx
f0126704:	8b 45 98             	mov    -0x68(%ebp),%eax
f0126707:	01 d0                	add    %edx,%eax
f0126709:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
f012670c:	e8 b6 6b fe ff       	call   f010d2c7 <sys_rcr2>
f0126711:	89 c2                	mov    %eax,%edx
f0126713:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0126716:	8b 84 85 c0 fe ff ff 	mov    -0x140(%ebp,%eax,4),%eax
f012671d:	89 c1                	mov    %eax,%ecx
f012671f:	8b 45 98             	mov    -0x68(%ebp),%eax
f0126722:	01 c8                	add    %ecx,%eax
f0126724:	39 c2                	cmp    %eax,%edx
f0126726:	74 17                	je     f012673f <test_kfreeall+0x112a>
f0126728:	83 ec 04             	sub    $0x4,%esp
f012672b:	68 98 a7 13 f0       	push   $0xf013a798
f0126730:	68 d2 0a 00 00       	push   $0xad2
f0126735:	68 32 9f 13 f0       	push   $0xf0139f32
f012673a:	e8 71 9a fd ff       	call   f01001b0 <_panic>
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 10; ++i)
f012673f:	ff 45 f4             	incl   -0xc(%ebp)
f0126742:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
f0126746:	0f 8e 74 ff ff ff    	jle    f01266c0 <test_kfreeall+0x10ab>
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
		}
		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f012674c:	83 ec 0c             	sub    $0xc,%esp
f012674f:	6a 00                	push   $0x0
f0126751:	e8 83 6b fe ff       	call   f010d2d9 <sys_bypassPageFault>
f0126756:	83 c4 10             	add    $0x10,%esp
	}

	//Allocate after kfreeall
	{
		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f0126759:	e8 e0 66 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f012675e:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126761:	e8 1e df fd ff       	call   f0104684 <pf_calculate_free_frames>
f0126766:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[10] = kmalloc(4*Mega);
f0126769:	83 ec 0c             	sub    $0xc,%esp
f012676c:	68 00 00 40 00       	push   $0x400000
f0126771:	e8 dd 1a fe ff       	call   f0108253 <kmalloc>
f0126776:	83 c4 10             	add    $0x10,%esp
f0126779:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
		if ((uint32) ptr_allocations[10] != (KERNEL_HEAP_START)) panic("Wrong start address after kfreeall()... check return address updating of heap ptr");
f012677f:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0126785:	3d 00 00 00 f6       	cmp    $0xf6000000,%eax
f012678a:	74 17                	je     f01267a3 <test_kfreeall+0x118e>
f012678c:	83 ec 04             	sub    $0x4,%esp
f012678f:	68 3c ac 13 f0       	push   $0xf013ac3c
f0126794:	68 de 0a 00 00       	push   $0xade
f0126799:	68 32 9f 13 f0       	push   $0xf0139f32
f012679e:	e8 0d 9a fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01267a3:	e8 dc de fd ff       	call   f0104684 <pf_calculate_free_frames>
f01267a8:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01267ab:	74 17                	je     f01267c4 <test_kfreeall+0x11af>
f01267ad:	83 ec 04             	sub    $0x4,%esp
f01267b0:	68 4c 9f 13 f0       	push   $0xf0139f4c
f01267b5:	68 df 0a 00 00       	push   $0xadf
f01267ba:	68 32 9f 13 f0       	push   $0xf0139f32
f01267bf:	e8 ec 99 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4*Mega/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f01267c4:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01267c7:	e8 72 66 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f01267cc:	29 c3                	sub    %eax,%ebx
f01267ce:	89 d8                	mov    %ebx,%eax
f01267d0:	3d 00 04 00 00       	cmp    $0x400,%eax
f01267d5:	74 17                	je     f01267ee <test_kfreeall+0x11d9>
f01267d7:	83 ec 04             	sub    $0x4,%esp
f01267da:	68 b4 9f 13 f0       	push   $0xf0139fb4
f01267df:	68 e0 0a 00 00       	push   $0xae0
f01267e4:	68 32 9f 13 f0       	push   $0xf0139f32
f01267e9:	e8 c2 99 fd ff       	call   f01001b0 <_panic>

		//12 KB
		freeFrames = sys_calculate_free_frames() ;
f01267ee:	e8 4b 66 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f01267f3:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01267f6:	e8 89 de fd ff       	call   f0104684 <pf_calculate_free_frames>
f01267fb:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[11] = kmalloc(12*kilo);
f01267fe:	83 ec 0c             	sub    $0xc,%esp
f0126801:	68 00 30 00 00       	push   $0x3000
f0126806:	e8 48 1a fe ff       	call   f0108253 <kmalloc>
f012680b:	83 c4 10             	add    $0x10,%esp
f012680e:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
		if ((uint32) ptr_allocations[11] != (KERNEL_HEAP_START + 4*Mega)) panic("Wrong start address after kfreeall()... check return address updating of heap ptr");
f0126814:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012681a:	3d 00 00 40 f6       	cmp    $0xf6400000,%eax
f012681f:	74 17                	je     f0126838 <test_kfreeall+0x1223>
f0126821:	83 ec 04             	sub    $0x4,%esp
f0126824:	68 3c ac 13 f0       	push   $0xf013ac3c
f0126829:	68 e6 0a 00 00       	push   $0xae6
f012682e:	68 32 9f 13 f0       	push   $0xf0139f32
f0126833:	e8 78 99 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126838:	e8 47 de fd ff       	call   f0104684 <pf_calculate_free_frames>
f012683d:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126840:	74 17                	je     f0126859 <test_kfreeall+0x1244>
f0126842:	83 ec 04             	sub    $0x4,%esp
f0126845:	68 4c 9f 13 f0       	push   $0xf0139f4c
f012684a:	68 e7 0a 00 00       	push   $0xae7
f012684f:	68 32 9f 13 f0       	push   $0xf0139f32
f0126854:	e8 57 99 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 3) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126859:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012685c:	e8 dd 65 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0126861:	29 c3                	sub    %eax,%ebx
f0126863:	89 d8                	mov    %ebx,%eax
f0126865:	83 f8 03             	cmp    $0x3,%eax
f0126868:	74 17                	je     f0126881 <test_kfreeall+0x126c>
f012686a:	83 ec 04             	sub    $0x4,%esp
f012686d:	68 b4 9f 13 f0       	push   $0xf0139fb4
f0126872:	68 e8 0a 00 00       	push   $0xae8
f0126877:	68 32 9f 13 f0       	push   $0xf0139f32
f012687c:	e8 2f 99 fd ff       	call   f01001b0 <_panic>
	}

	//kfree one of the newly allocated space
	{
		//kfree 12 KB
		freeFrames = sys_calculate_free_frames() ;
f0126881:	e8 b8 65 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0126886:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126889:	e8 f6 dd fd ff       	call   f0104684 <pf_calculate_free_frames>
f012688e:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[11]);
f0126891:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0126897:	83 ec 0c             	sub    $0xc,%esp
f012689a:	50                   	push   %eax
f012689b:	e8 3e 1b fe ff       	call   f01083de <kfree>
f01268a0:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01268a3:	e8 dc dd fd ff       	call   f0104684 <pf_calculate_free_frames>
f01268a8:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01268ab:	74 17                	je     f01268c4 <test_kfreeall+0x12af>
f01268ad:	83 ec 04             	sub    $0x4,%esp
f01268b0:	68 4c 9f 13 f0       	push   $0xf0139f4c
f01268b5:	68 f2 0a 00 00       	push   $0xaf2
f01268ba:	68 32 9f 13 f0       	push   $0xf0139f32
f01268bf:	e8 ec 98 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f01268c4:	e8 75 65 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f01268c9:	89 c2                	mov    %eax,%edx
f01268cb:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01268ce:	29 c2                	sub    %eax,%edx
f01268d0:	89 d0                	mov    %edx,%eax
f01268d2:	83 f8 03             	cmp    $0x3,%eax
f01268d5:	74 17                	je     f01268ee <test_kfreeall+0x12d9>
f01268d7:	83 ec 04             	sub    $0x4,%esp
f01268da:	68 e4 a7 13 f0       	push   $0xf013a7e4
f01268df:	68 f3 0a 00 00       	push   $0xaf3
f01268e4:	68 32 9f 13 f0       	push   $0xf0139f32
f01268e9:	e8 c2 98 fd ff       	call   f01001b0 <_panic>
	}

	//kfree non-exist item
	{
		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f01268ee:	e8 4b 65 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f01268f3:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01268f6:	e8 89 dd fd ff       	call   f0104684 <pf_calculate_free_frames>
f01268fb:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f01268fe:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f0126904:	83 ec 0c             	sub    $0xc,%esp
f0126907:	50                   	push   %eax
f0126908:	e8 d1 1a fe ff       	call   f01083de <kfree>
f012690d:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126910:	e8 6f dd fd ff       	call   f0104684 <pf_calculate_free_frames>
f0126915:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126918:	74 17                	je     f0126931 <test_kfreeall+0x131c>
f012691a:	83 ec 04             	sub    $0x4,%esp
f012691d:	68 4c 9f 13 f0       	push   $0xf0139f4c
f0126922:	68 fc 0a 00 00       	push   $0xafc
f0126927:	68 32 9f 13 f0       	push   $0xf0139f32
f012692c:	e8 7f 98 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0126931:	e8 08 65 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0126936:	89 c2                	mov    %eax,%edx
f0126938:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012693b:	39 c2                	cmp    %eax,%edx
f012693d:	74 17                	je     f0126956 <test_kfreeall+0x1341>
f012693f:	83 ec 04             	sub    $0x4,%esp
f0126942:	68 e4 a7 13 f0       	push   $0xf013a7e4
f0126947:	68 fd 0a 00 00       	push   $0xafd
f012694c:	68 32 9f 13 f0       	push   $0xf0139f32
f0126951:	e8 5a 98 fd ff       	call   f01001b0 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f0126956:	e8 e3 64 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f012695b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012695e:	e8 21 dd fd ff       	call   f0104684 <pf_calculate_free_frames>
f0126963:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f0126966:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012696c:	83 ec 0c             	sub    $0xc,%esp
f012696f:	50                   	push   %eax
f0126970:	e8 69 1a fe ff       	call   f01083de <kfree>
f0126975:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126978:	e8 07 dd fd ff       	call   f0104684 <pf_calculate_free_frames>
f012697d:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126980:	74 17                	je     f0126999 <test_kfreeall+0x1384>
f0126982:	83 ec 04             	sub    $0x4,%esp
f0126985:	68 4c 9f 13 f0       	push   $0xf0139f4c
f012698a:	68 03 0b 00 00       	push   $0xb03
f012698f:	68 32 9f 13 f0       	push   $0xf0139f32
f0126994:	e8 17 98 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0126999:	e8 a0 64 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f012699e:	89 c2                	mov    %eax,%edx
f01269a0:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01269a3:	39 c2                	cmp    %eax,%edx
f01269a5:	74 17                	je     f01269be <test_kfreeall+0x13a9>
f01269a7:	83 ec 04             	sub    $0x4,%esp
f01269aa:	68 e4 a7 13 f0       	push   $0xf013a7e4
f01269af:	68 04 0b 00 00       	push   $0xb04
f01269b4:	68 32 9f 13 f0       	push   $0xf0139f32
f01269b9:	e8 f2 97 fd ff       	call   f01001b0 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f01269be:	e8 7b 64 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f01269c3:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01269c6:	e8 b9 dc fd ff       	call   f0104684 <pf_calculate_free_frames>
f01269cb:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f01269ce:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f01269d4:	83 ec 0c             	sub    $0xc,%esp
f01269d7:	50                   	push   %eax
f01269d8:	e8 01 1a fe ff       	call   f01083de <kfree>
f01269dd:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01269e0:	e8 9f dc fd ff       	call   f0104684 <pf_calculate_free_frames>
f01269e5:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01269e8:	74 17                	je     f0126a01 <test_kfreeall+0x13ec>
f01269ea:	83 ec 04             	sub    $0x4,%esp
f01269ed:	68 4c 9f 13 f0       	push   $0xf0139f4c
f01269f2:	68 0a 0b 00 00       	push   $0xb0a
f01269f7:	68 32 9f 13 f0       	push   $0xf0139f32
f01269fc:	e8 af 97 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0126a01:	e8 38 64 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0126a06:	89 c2                	mov    %eax,%edx
f0126a08:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0126a0b:	39 c2                	cmp    %eax,%edx
f0126a0d:	74 17                	je     f0126a26 <test_kfreeall+0x1411>
f0126a0f:	83 ec 04             	sub    $0x4,%esp
f0126a12:	68 e4 a7 13 f0       	push   $0xf013a7e4
f0126a17:	68 0b 0b 00 00       	push   $0xb0b
f0126a1c:	68 32 9f 13 f0       	push   $0xf0139f32
f0126a21:	e8 8a 97 fd ff       	call   f01001b0 <_panic>
	}

	//check tables
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0126a26:	c7 45 e8 00 00 00 f6 	movl   $0xf6000000,-0x18(%ebp)
f0126a2d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0126a34:	eb 48                	jmp    f0126a7e <test_kfreeall+0x1469>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va, &ptr_table);
f0126a36:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0126a39:	a1 30 ce 2b f0       	mov    0xf02bce30,%eax
f0126a3e:	83 ec 04             	sub    $0x4,%esp
f0126a41:	8d 8d 1c fe ff ff    	lea    -0x1e4(%ebp),%ecx
f0126a47:	51                   	push   %ecx
f0126a48:	52                   	push   %edx
f0126a49:	50                   	push   %eax
f0126a4a:	e8 98 0a fe ff       	call   f01074e7 <get_page_table>
f0126a4f:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0126a52:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f0126a58:	85 c0                	test   %eax,%eax
f0126a5a:	75 17                	jne    f0126a73 <test_kfreeall+0x145e>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
f0126a5c:	83 ec 04             	sub    $0x4,%esp
f0126a5f:	68 34 a8 13 f0       	push   $0xf013a834
f0126a64:	68 18 0b 00 00       	push   $0xb18
f0126a69:	68 32 9f 13 f0       	push   $0xf0139f32
f0126a6e:	e8 3d 97 fd ff       	call   f01001b0 <_panic>
	}

	//check tables
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0126a73:	81 45 e8 00 00 40 00 	addl   $0x400000,-0x18(%ebp)
f0126a7a:	83 55 ec 00          	adcl   $0x0,-0x14(%ebp)
f0126a7e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0126a82:	78 b2                	js     f0126a36 <test_kfreeall+0x1421>
f0126a84:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0126a88:	7f 09                	jg     f0126a93 <test_kfreeall+0x147e>
f0126a8a:	81 7d e8 ff ef ff ff 	cmpl   $0xffffefff,-0x18(%ebp)
f0126a91:	76 a3                	jbe    f0126a36 <test_kfreeall+0x1421>
			}
		}
	}


	cprintf("\nCongratulations!! your modification is run successfully.\n");
f0126a93:	83 ec 0c             	sub    $0xc,%esp
f0126a96:	68 90 ac 13 f0       	push   $0xf013ac90
f0126a9b:	e8 91 a3 fd ff       	call   f0100e31 <cprintf>
f0126aa0:	83 c4 10             	add    $0x10,%esp

	return 1;
f0126aa3:	b8 01 00 00 00       	mov    $0x1,%eax

}
f0126aa8:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0126aab:	5b                   	pop    %ebx
f0126aac:	5f                   	pop    %edi
f0126aad:	5d                   	pop    %ebp
f0126aae:	c3                   	ret    

f0126aaf <test_kexpand>:


extern void kexpand(uint32 newSize) ;

int test_kexpand()
{
f0126aaf:	55                   	push   %ebp
f0126ab0:	89 e5                	mov    %esp,%ebp
f0126ab2:	57                   	push   %edi
f0126ab3:	53                   	push   %ebx
f0126ab4:	81 ec 50 01 00 00    	sub    $0x150,%esp
	char minByte = 1<<7;
f0126aba:	c6 45 f3 80          	movb   $0x80,-0xd(%ebp)
	char maxByte = 0x7F;
f0126abe:	c6 45 f2 7f          	movb   $0x7f,-0xe(%ebp)
	short minShort = 1<<15 ;
f0126ac2:	66 c7 45 f0 00 80    	movw   $0x8000,-0x10(%ebp)
	short maxShort = 0x7FFF;
f0126ac8:	66 c7 45 ee ff 7f    	movw   $0x7fff,-0x12(%ebp)
	int minInt = 1<<31 ;
f0126ace:	c7 45 e8 00 00 00 80 	movl   $0x80000000,-0x18(%ebp)
	int maxInt = 0x7FFFFFFF;
f0126ad5:	c7 45 e4 ff ff ff 7f 	movl   $0x7fffffff,-0x1c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0126adc:	e8 5d 63 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0126ae1:	89 45 e0             	mov    %eax,-0x20(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0126ae4:	8d 95 fc fe ff ff    	lea    -0x104(%ebp),%edx
f0126aea:	b9 14 00 00 00       	mov    $0x14,%ecx
f0126aef:	b8 00 00 00 00       	mov    $0x0,%eax
f0126af4:	89 d7                	mov    %edx,%edi
f0126af6:	f3 ab                	rep stos %eax,%es:(%edi)

	uint32 *arr;
	void* ptr_allocations[20] = {0};
f0126af8:	8d 95 ac fe ff ff    	lea    -0x154(%ebp),%edx
f0126afe:	b9 14 00 00 00       	mov    $0x14,%ecx
f0126b03:	b8 00 00 00 00       	mov    $0x0,%eax
f0126b08:	89 d7                	mov    %edx,%edi
f0126b0a:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0126b0c:	e8 2d 63 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0126b11:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126b14:	e8 6b db fd ff       	call   f0104684 <pf_calculate_free_frames>
f0126b19:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0126b1c:	83 ec 0c             	sub    $0xc,%esp
f0126b1f:	68 00 fc 1f 00       	push   $0x1ffc00
f0126b24:	e8 2a 17 fe ff       	call   f0108253 <kmalloc>
f0126b29:	83 c4 10             	add    $0x10,%esp
f0126b2c:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126b32:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f0126b38:	89 c1                	mov    %eax,%ecx
f0126b3a:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f0126b41:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0126b46:	0f b6 d0             	movzbl %al,%edx
f0126b49:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0126b4c:	01 d0                	add    %edx,%eax
f0126b4e:	48                   	dec    %eax
f0126b4f:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0126b52:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0126b55:	ba 00 00 00 00       	mov    $0x0,%edx
f0126b5a:	f7 75 d4             	divl   -0x2c(%ebp)
f0126b5d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0126b60:	29 d0                	sub    %edx,%eax
f0126b62:	89 c3                	mov    %eax,%ebx
f0126b64:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0126b6b:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0126b70:	0f b6 c0             	movzbl %al,%eax
f0126b73:	c1 e0 04             	shl    $0x4,%eax
f0126b76:	89 c2                	mov    %eax,%edx
f0126b78:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0126b7b:	01 d0                	add    %edx,%eax
f0126b7d:	48                   	dec    %eax
f0126b7e:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0126b81:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0126b84:	ba 00 00 00 00       	mov    $0x0,%edx
f0126b89:	f7 75 cc             	divl   -0x34(%ebp)
f0126b8c:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0126b8f:	29 d0                	sub    %edx,%eax
f0126b91:	01 d8                	add    %ebx,%eax
f0126b93:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0126b98:	39 c1                	cmp    %eax,%ecx
f0126b9a:	74 17                	je     f0126bb3 <test_kexpand+0x104>
f0126b9c:	83 ec 04             	sub    $0x4,%esp
f0126b9f:	68 18 a0 13 f0       	push   $0xf013a018
f0126ba4:	68 43 0b 00 00       	push   $0xb43
f0126ba9:	68 32 9f 13 f0       	push   $0xf0139f32
f0126bae:	e8 fd 95 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126bb3:	e8 cc da fd ff       	call   f0104684 <pf_calculate_free_frames>
f0126bb8:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0126bbb:	74 17                	je     f0126bd4 <test_kexpand+0x125>
f0126bbd:	83 ec 04             	sub    $0x4,%esp
f0126bc0:	68 4c 9f 13 f0       	push   $0xf0139f4c
f0126bc5:	68 44 0b 00 00       	push   $0xb44
f0126bca:	68 32 9f 13 f0       	push   $0xf0139f32
f0126bcf:	e8 dc 95 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126bd4:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0126bd7:	e8 62 62 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0126bdc:	29 c3                	sub    %eax,%ebx
f0126bde:	89 d8                	mov    %ebx,%eax
f0126be0:	3d 00 02 00 00       	cmp    $0x200,%eax
f0126be5:	74 17                	je     f0126bfe <test_kexpand+0x14f>
f0126be7:	83 ec 04             	sub    $0x4,%esp
f0126bea:	68 b4 9f 13 f0       	push   $0xf0139fb4
f0126bef:	68 45 0b 00 00       	push   $0xb45
f0126bf4:	68 32 9f 13 f0       	push   $0xf0139f32
f0126bf9:	e8 b2 95 fd ff       	call   f01001b0 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f0126bfe:	c7 85 fc fe ff ff ff 	movl   $0x1ffbff,-0x104(%ebp)
f0126c05:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0126c08:	e8 31 62 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0126c0d:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126c10:	e8 6f da fd ff       	call   f0104684 <pf_calculate_free_frames>
f0126c15:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0126c18:	83 ec 0c             	sub    $0xc,%esp
f0126c1b:	68 00 fc 1f 00       	push   $0x1ffc00
f0126c20:	e8 2e 16 fe ff       	call   f0108253 <kmalloc>
f0126c25:	83 c4 10             	add    $0x10,%esp
f0126c28:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126c2e:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0126c34:	89 c1                	mov    %eax,%ecx
f0126c36:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f0126c3d:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0126c42:	0f b6 d0             	movzbl %al,%edx
f0126c45:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0126c48:	01 d0                	add    %edx,%eax
f0126c4a:	48                   	dec    %eax
f0126c4b:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0126c4e:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0126c51:	ba 00 00 00 00       	mov    $0x0,%edx
f0126c56:	f7 75 c4             	divl   -0x3c(%ebp)
f0126c59:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0126c5c:	29 d0                	sub    %edx,%eax
f0126c5e:	89 c3                	mov    %eax,%ebx
f0126c60:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f0126c67:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0126c6c:	0f b6 c0             	movzbl %al,%eax
f0126c6f:	c1 e0 04             	shl    $0x4,%eax
f0126c72:	89 c2                	mov    %eax,%edx
f0126c74:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0126c77:	01 d0                	add    %edx,%eax
f0126c79:	48                   	dec    %eax
f0126c7a:	89 45 b8             	mov    %eax,-0x48(%ebp)
f0126c7d:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0126c80:	ba 00 00 00 00       	mov    $0x0,%edx
f0126c85:	f7 75 bc             	divl   -0x44(%ebp)
f0126c88:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0126c8b:	29 d0                	sub    %edx,%eax
f0126c8d:	01 d8                	add    %ebx,%eax
f0126c8f:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0126c94:	39 c1                	cmp    %eax,%ecx
f0126c96:	74 17                	je     f0126caf <test_kexpand+0x200>
f0126c98:	83 ec 04             	sub    $0x4,%esp
f0126c9b:	68 18 a0 13 f0       	push   $0xf013a018
f0126ca0:	68 4c 0b 00 00       	push   $0xb4c
f0126ca5:	68 32 9f 13 f0       	push   $0xf0139f32
f0126caa:	e8 01 95 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126caf:	e8 d0 d9 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0126cb4:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0126cb7:	74 17                	je     f0126cd0 <test_kexpand+0x221>
f0126cb9:	83 ec 04             	sub    $0x4,%esp
f0126cbc:	68 4c 9f 13 f0       	push   $0xf0139f4c
f0126cc1:	68 4d 0b 00 00       	push   $0xb4d
f0126cc6:	68 32 9f 13 f0       	push   $0xf0139f32
f0126ccb:	e8 e0 94 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126cd0:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0126cd3:	e8 66 61 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0126cd8:	29 c3                	sub    %eax,%ebx
f0126cda:	89 d8                	mov    %ebx,%eax
f0126cdc:	3d 00 02 00 00       	cmp    $0x200,%eax
f0126ce1:	74 17                	je     f0126cfa <test_kexpand+0x24b>
f0126ce3:	83 ec 04             	sub    $0x4,%esp
f0126ce6:	68 b4 9f 13 f0       	push   $0xf0139fb4
f0126ceb:	68 4e 0b 00 00       	push   $0xb4e
f0126cf0:	68 32 9f 13 f0       	push   $0xf0139f32
f0126cf5:	e8 b6 94 fd ff       	call   f01001b0 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f0126cfa:	c7 85 00 ff ff ff ff 	movl   $0x1ffbff,-0x100(%ebp)
f0126d01:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0126d04:	e8 35 61 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0126d09:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126d0c:	e8 73 d9 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0126d11:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0126d14:	83 ec 0c             	sub    $0xc,%esp
f0126d17:	68 00 08 00 00       	push   $0x800
f0126d1c:	e8 32 15 fe ff       	call   f0108253 <kmalloc>
f0126d21:	83 c4 10             	add    $0x10,%esp
f0126d24:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126d2a:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0126d30:	89 c1                	mov    %eax,%ecx
f0126d32:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f0126d39:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0126d3e:	0f b6 d0             	movzbl %al,%edx
f0126d41:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0126d44:	01 d0                	add    %edx,%eax
f0126d46:	48                   	dec    %eax
f0126d47:	89 45 b0             	mov    %eax,-0x50(%ebp)
f0126d4a:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0126d4d:	ba 00 00 00 00       	mov    $0x0,%edx
f0126d52:	f7 75 b4             	divl   -0x4c(%ebp)
f0126d55:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0126d58:	29 d0                	sub    %edx,%eax
f0126d5a:	89 c3                	mov    %eax,%ebx
f0126d5c:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f0126d63:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0126d68:	0f b6 c0             	movzbl %al,%eax
f0126d6b:	c1 e0 04             	shl    $0x4,%eax
f0126d6e:	89 c2                	mov    %eax,%edx
f0126d70:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0126d73:	01 d0                	add    %edx,%eax
f0126d75:	48                   	dec    %eax
f0126d76:	89 45 a8             	mov    %eax,-0x58(%ebp)
f0126d79:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0126d7c:	ba 00 00 00 00       	mov    $0x0,%edx
f0126d81:	f7 75 ac             	divl   -0x54(%ebp)
f0126d84:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0126d87:	29 d0                	sub    %edx,%eax
f0126d89:	01 d8                	add    %ebx,%eax
f0126d8b:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0126d90:	39 c1                	cmp    %eax,%ecx
f0126d92:	74 17                	je     f0126dab <test_kexpand+0x2fc>
f0126d94:	83 ec 04             	sub    $0x4,%esp
f0126d97:	68 18 a0 13 f0       	push   $0xf013a018
f0126d9c:	68 55 0b 00 00       	push   $0xb55
f0126da1:	68 32 9f 13 f0       	push   $0xf0139f32
f0126da6:	e8 05 94 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126dab:	e8 d4 d8 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0126db0:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0126db3:	74 17                	je     f0126dcc <test_kexpand+0x31d>
f0126db5:	83 ec 04             	sub    $0x4,%esp
f0126db8:	68 4c 9f 13 f0       	push   $0xf0139f4c
f0126dbd:	68 56 0b 00 00       	push   $0xb56
f0126dc2:	68 32 9f 13 f0       	push   $0xf0139f32
f0126dc7:	e8 e4 93 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126dcc:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0126dcf:	e8 6a 60 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0126dd4:	29 c3                	sub    %eax,%ebx
f0126dd6:	89 d8                	mov    %ebx,%eax
f0126dd8:	83 f8 01             	cmp    $0x1,%eax
f0126ddb:	74 17                	je     f0126df4 <test_kexpand+0x345>
f0126ddd:	83 ec 04             	sub    $0x4,%esp
f0126de0:	68 b4 9f 13 f0       	push   $0xf0139fb4
f0126de5:	68 57 0b 00 00       	push   $0xb57
f0126dea:	68 32 9f 13 f0       	push   $0xf0139f32
f0126def:	e8 bc 93 fd ff       	call   f01001b0 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f0126df4:	c7 85 04 ff ff ff ff 	movl   $0x7ff,-0xfc(%ebp)
f0126dfb:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f0126dfe:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0126e04:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0126e07:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126e0e:	eb 0e                	jmp    f0126e1e <test_kexpand+0x36f>
		{
			ptr[i] = 2 ;
f0126e10:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0126e13:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0126e16:	01 d0                	add    %edx,%eax
f0126e18:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0126e1b:	ff 45 f4             	incl   -0xc(%ebp)
f0126e1e:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0126e24:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126e27:	7f e7                	jg     f0126e10 <test_kexpand+0x361>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0126e29:	e8 10 60 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0126e2e:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126e31:	e8 4e d8 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0126e36:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0126e39:	83 ec 0c             	sub    $0xc,%esp
f0126e3c:	68 00 08 00 00       	push   $0x800
f0126e41:	e8 0d 14 fe ff       	call   f0108253 <kmalloc>
f0126e46:	83 c4 10             	add    $0x10,%esp
f0126e49:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126e4f:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0126e55:	89 c1                	mov    %eax,%ecx
f0126e57:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0126e5e:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0126e63:	0f b6 d0             	movzbl %al,%edx
f0126e66:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0126e69:	01 d0                	add    %edx,%eax
f0126e6b:	48                   	dec    %eax
f0126e6c:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0126e6f:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0126e72:	ba 00 00 00 00       	mov    $0x0,%edx
f0126e77:	f7 75 a0             	divl   -0x60(%ebp)
f0126e7a:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0126e7d:	29 d0                	sub    %edx,%eax
f0126e7f:	89 c3                	mov    %eax,%ebx
f0126e81:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f0126e88:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0126e8d:	0f b6 c0             	movzbl %al,%eax
f0126e90:	c1 e0 04             	shl    $0x4,%eax
f0126e93:	89 c2                	mov    %eax,%edx
f0126e95:	8b 45 98             	mov    -0x68(%ebp),%eax
f0126e98:	01 d0                	add    %edx,%eax
f0126e9a:	48                   	dec    %eax
f0126e9b:	89 45 94             	mov    %eax,-0x6c(%ebp)
f0126e9e:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0126ea1:	ba 00 00 00 00       	mov    $0x0,%edx
f0126ea6:	f7 75 98             	divl   -0x68(%ebp)
f0126ea9:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0126eac:	29 d0                	sub    %edx,%eax
f0126eae:	01 d8                	add    %ebx,%eax
f0126eb0:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0126eb5:	39 c1                	cmp    %eax,%ecx
f0126eb7:	74 17                	je     f0126ed0 <test_kexpand+0x421>
f0126eb9:	83 ec 04             	sub    $0x4,%esp
f0126ebc:	68 18 a0 13 f0       	push   $0xf013a018
f0126ec1:	68 63 0b 00 00       	push   $0xb63
f0126ec6:	68 32 9f 13 f0       	push   $0xf0139f32
f0126ecb:	e8 e0 92 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126ed0:	e8 af d7 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0126ed5:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0126ed8:	74 17                	je     f0126ef1 <test_kexpand+0x442>
f0126eda:	83 ec 04             	sub    $0x4,%esp
f0126edd:	68 4c 9f 13 f0       	push   $0xf0139f4c
f0126ee2:	68 64 0b 00 00       	push   $0xb64
f0126ee7:	68 32 9f 13 f0       	push   $0xf0139f32
f0126eec:	e8 bf 92 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126ef1:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0126ef4:	e8 45 5f fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0126ef9:	29 c3                	sub    %eax,%ebx
f0126efb:	89 d8                	mov    %ebx,%eax
f0126efd:	83 f8 01             	cmp    $0x1,%eax
f0126f00:	74 17                	je     f0126f19 <test_kexpand+0x46a>
f0126f02:	83 ec 04             	sub    $0x4,%esp
f0126f05:	68 b4 9f 13 f0       	push   $0xf0139fb4
f0126f0a:	68 65 0b 00 00       	push   $0xb65
f0126f0f:	68 32 9f 13 f0       	push   $0xf0139f32
f0126f14:	e8 97 92 fd ff       	call   f01001b0 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f0126f19:	c7 85 08 ff ff ff ff 	movl   $0x7ff,-0xf8(%ebp)
f0126f20:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f0126f23:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0126f29:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0126f2c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126f33:	eb 0e                	jmp    f0126f43 <test_kexpand+0x494>
		{
			ptr[i] = 3 ;
f0126f35:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0126f38:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0126f3b:	01 d0                	add    %edx,%eax
f0126f3d:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0126f40:	ff 45 f4             	incl   -0xc(%ebp)
f0126f43:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0126f49:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126f4c:	7f e7                	jg     f0126f35 <test_kexpand+0x486>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0126f4e:	e8 eb 5e fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0126f53:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126f56:	e8 29 d7 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0126f5b:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0126f5e:	83 ec 0c             	sub    $0xc,%esp
f0126f61:	68 00 1c 00 00       	push   $0x1c00
f0126f66:	e8 e8 12 fe ff       	call   f0108253 <kmalloc>
f0126f6b:	83 c4 10             	add    $0x10,%esp
f0126f6e:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126f74:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0126f7a:	89 c1                	mov    %eax,%ecx
f0126f7c:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f0126f83:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0126f88:	0f b6 d0             	movzbl %al,%edx
f0126f8b:	8b 45 90             	mov    -0x70(%ebp),%eax
f0126f8e:	01 d0                	add    %edx,%eax
f0126f90:	48                   	dec    %eax
f0126f91:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0126f94:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0126f97:	ba 00 00 00 00       	mov    $0x0,%edx
f0126f9c:	f7 75 90             	divl   -0x70(%ebp)
f0126f9f:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0126fa2:	29 d0                	sub    %edx,%eax
f0126fa4:	89 c3                	mov    %eax,%ebx
f0126fa6:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0126fad:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0126fb2:	0f b6 c0             	movzbl %al,%eax
f0126fb5:	c1 e0 04             	shl    $0x4,%eax
f0126fb8:	89 c2                	mov    %eax,%edx
f0126fba:	8b 45 88             	mov    -0x78(%ebp),%eax
f0126fbd:	01 d0                	add    %edx,%eax
f0126fbf:	48                   	dec    %eax
f0126fc0:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0126fc3:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0126fc6:	ba 00 00 00 00       	mov    $0x0,%edx
f0126fcb:	f7 75 88             	divl   -0x78(%ebp)
f0126fce:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0126fd1:	29 d0                	sub    %edx,%eax
f0126fd3:	01 d8                	add    %ebx,%eax
f0126fd5:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0126fda:	39 c1                	cmp    %eax,%ecx
f0126fdc:	74 17                	je     f0126ff5 <test_kexpand+0x546>
f0126fde:	83 ec 04             	sub    $0x4,%esp
f0126fe1:	68 18 a0 13 f0       	push   $0xf013a018
f0126fe6:	68 71 0b 00 00       	push   $0xb71
f0126feb:	68 32 9f 13 f0       	push   $0xf0139f32
f0126ff0:	e8 bb 91 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126ff5:	e8 8a d6 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0126ffa:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0126ffd:	74 17                	je     f0127016 <test_kexpand+0x567>
f0126fff:	83 ec 04             	sub    $0x4,%esp
f0127002:	68 4c 9f 13 f0       	push   $0xf0139f4c
f0127007:	68 72 0b 00 00       	push   $0xb72
f012700c:	68 32 9f 13 f0       	push   $0xf0139f32
f0127011:	e8 9a 91 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127016:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0127019:	e8 20 5e fe ff       	call   f010ce3e <sys_calculate_free_frames>
f012701e:	29 c3                	sub    %eax,%ebx
f0127020:	89 d8                	mov    %ebx,%eax
f0127022:	83 f8 02             	cmp    $0x2,%eax
f0127025:	74 17                	je     f012703e <test_kexpand+0x58f>
f0127027:	83 ec 04             	sub    $0x4,%esp
f012702a:	68 b4 9f 13 f0       	push   $0xf0139fb4
f012702f:	68 73 0b 00 00       	push   $0xb73
f0127034:	68 32 9f 13 f0       	push   $0xf0139f32
f0127039:	e8 72 91 fd ff       	call   f01001b0 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f012703e:	c7 85 0c ff ff ff ff 	movl   $0x1bff,-0xf4(%ebp)
f0127045:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f0127048:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012704e:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0127051:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127058:	eb 0e                	jmp    f0127068 <test_kexpand+0x5b9>
		{
			ptr[i] = 4 ;
f012705a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012705d:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0127060:	01 d0                	add    %edx,%eax
f0127062:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0127065:	ff 45 f4             	incl   -0xc(%ebp)
f0127068:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012706e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127071:	7f e7                	jg     f012705a <test_kexpand+0x5ab>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0127073:	e8 c6 5d fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0127078:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012707b:	e8 04 d6 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0127080:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0127083:	83 ec 0c             	sub    $0xc,%esp
f0127086:	68 00 fc 2f 00       	push   $0x2ffc00
f012708b:	e8 c3 11 fe ff       	call   f0108253 <kmalloc>
f0127090:	83 c4 10             	add    $0x10,%esp
f0127093:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127099:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012709f:	89 c1                	mov    %eax,%ecx
f01270a1:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f01270a8:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f01270ad:	0f b6 d0             	movzbl %al,%edx
f01270b0:	8b 45 80             	mov    -0x80(%ebp),%eax
f01270b3:	01 d0                	add    %edx,%eax
f01270b5:	48                   	dec    %eax
f01270b6:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f01270bc:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01270c2:	ba 00 00 00 00       	mov    $0x0,%edx
f01270c7:	f7 75 80             	divl   -0x80(%ebp)
f01270ca:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01270d0:	29 d0                	sub    %edx,%eax
f01270d2:	89 c3                	mov    %eax,%ebx
f01270d4:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f01270db:	10 00 00 
f01270de:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f01270e3:	0f b6 c0             	movzbl %al,%eax
f01270e6:	c1 e0 04             	shl    $0x4,%eax
f01270e9:	89 c2                	mov    %eax,%edx
f01270eb:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01270f1:	01 d0                	add    %edx,%eax
f01270f3:	48                   	dec    %eax
f01270f4:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f01270fa:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0127100:	ba 00 00 00 00       	mov    $0x0,%edx
f0127105:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f012710b:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0127111:	29 d0                	sub    %edx,%eax
f0127113:	01 d8                	add    %ebx,%eax
f0127115:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f012711a:	39 c1                	cmp    %eax,%ecx
f012711c:	74 17                	je     f0127135 <test_kexpand+0x686>
f012711e:	83 ec 04             	sub    $0x4,%esp
f0127121:	68 18 a0 13 f0       	push   $0xf013a018
f0127126:	68 7f 0b 00 00       	push   $0xb7f
f012712b:	68 32 9f 13 f0       	push   $0xf0139f32
f0127130:	e8 7b 90 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127135:	e8 4a d5 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012713a:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012713d:	74 17                	je     f0127156 <test_kexpand+0x6a7>
f012713f:	83 ec 04             	sub    $0x4,%esp
f0127142:	68 4c 9f 13 f0       	push   $0xf0139f4c
f0127147:	68 80 0b 00 00       	push   $0xb80
f012714c:	68 32 9f 13 f0       	push   $0xf0139f32
f0127151:	e8 5a 90 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127156:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0127159:	e8 e0 5c fe ff       	call   f010ce3e <sys_calculate_free_frames>
f012715e:	29 c3                	sub    %eax,%ebx
f0127160:	89 d8                	mov    %ebx,%eax
f0127162:	3d 00 03 00 00       	cmp    $0x300,%eax
f0127167:	74 17                	je     f0127180 <test_kexpand+0x6d1>
f0127169:	83 ec 04             	sub    $0x4,%esp
f012716c:	68 b4 9f 13 f0       	push   $0xf0139fb4
f0127171:	68 81 0b 00 00       	push   $0xb81
f0127176:	68 32 9f 13 f0       	push   $0xf0139f32
f012717b:	e8 30 90 fd ff       	call   f01001b0 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f0127180:	c7 85 10 ff ff ff ff 	movl   $0x2ffbff,-0xf0(%ebp)
f0127187:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f012718a:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0127190:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0127193:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012719a:	eb 0e                	jmp    f01271aa <test_kexpand+0x6fb>
		{
			ptr[i] = 5 ;
f012719c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012719f:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01271a2:	01 d0                	add    %edx,%eax
f01271a4:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f01271a7:	ff 45 f4             	incl   -0xc(%ebp)
f01271aa:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01271b0:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01271b3:	7f e7                	jg     f012719c <test_kexpand+0x6ed>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f01271b5:	e8 84 5c fe ff       	call   f010ce3e <sys_calculate_free_frames>
f01271ba:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01271bd:	e8 c2 d4 fd ff       	call   f0104684 <pf_calculate_free_frames>
f01271c2:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega);
f01271c5:	83 ec 0c             	sub    $0xc,%esp
f01271c8:	68 00 00 60 00       	push   $0x600000
f01271cd:	e8 81 10 fe ff       	call   f0108253 <kmalloc>
f01271d2:	83 c4 10             	add    $0x10,%esp
f01271d5:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01271db:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f01271e1:	89 c1                	mov    %eax,%ecx
f01271e3:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f01271ea:	10 00 00 
f01271ed:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f01271f2:	0f b6 d0             	movzbl %al,%edx
f01271f5:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01271fb:	01 d0                	add    %edx,%eax
f01271fd:	48                   	dec    %eax
f01271fe:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f0127204:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f012720a:	ba 00 00 00 00       	mov    $0x0,%edx
f012720f:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f0127215:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f012721b:	29 d0                	sub    %edx,%eax
f012721d:	89 c3                	mov    %eax,%ebx
f012721f:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0127226:	10 00 00 
f0127229:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f012722e:	0f b6 c0             	movzbl %al,%eax
f0127231:	c1 e0 04             	shl    $0x4,%eax
f0127234:	89 c2                	mov    %eax,%edx
f0127236:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012723c:	01 d0                	add    %edx,%eax
f012723e:	48                   	dec    %eax
f012723f:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0127245:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012724b:	ba 00 00 00 00       	mov    $0x0,%edx
f0127250:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0127256:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012725c:	29 d0                	sub    %edx,%eax
f012725e:	01 d8                	add    %ebx,%eax
f0127260:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0127265:	39 c1                	cmp    %eax,%ecx
f0127267:	74 17                	je     f0127280 <test_kexpand+0x7d1>
f0127269:	83 ec 04             	sub    $0x4,%esp
f012726c:	68 18 a0 13 f0       	push   $0xf013a018
f0127271:	68 8d 0b 00 00       	push   $0xb8d
f0127276:	68 32 9f 13 f0       	push   $0xf0139f32
f012727b:	e8 30 8f fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127280:	e8 ff d3 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0127285:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127288:	74 17                	je     f01272a1 <test_kexpand+0x7f2>
f012728a:	83 ec 04             	sub    $0x4,%esp
f012728d:	68 4c 9f 13 f0       	push   $0xf0139f4c
f0127292:	68 8e 0b 00 00       	push   $0xb8e
f0127297:	68 32 9f 13 f0       	push   $0xf0139f32
f012729c:	e8 0f 8f fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f01272a1:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01272a4:	e8 95 5b fe ff       	call   f010ce3e <sys_calculate_free_frames>
f01272a9:	29 c3                	sub    %eax,%ebx
f01272ab:	89 d8                	mov    %ebx,%eax
f01272ad:	3d 00 06 00 00       	cmp    $0x600,%eax
f01272b2:	74 17                	je     f01272cb <test_kexpand+0x81c>
f01272b4:	83 ec 04             	sub    $0x4,%esp
f01272b7:	68 b4 9f 13 f0       	push   $0xf0139fb4
f01272bc:	68 8f 0b 00 00       	push   $0xb8f
f01272c1:	68 32 9f 13 f0       	push   $0xf0139f32
f01272c6:	e8 e5 8e fd ff       	call   f01001b0 <_panic>
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
f01272cb:	c7 85 14 ff ff ff ff 	movl   $0x17ffff,-0xec(%ebp)
f01272d2:	ff 17 00 
		arr = (uint32*)ptr_allocations[6];
f01272d5:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f01272db:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
		for (i = 0; i <= lastIndices[6]; ++i)
f01272e1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01272e8:	eb 1a                	jmp    f0127304 <test_kexpand+0x855>
		{
			arr[i] = i ;
f01272ea:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01272ed:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01272f4:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01272fa:	01 c2                	add    %eax,%edx
f01272fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01272ff:	89 02                	mov    %eax,(%edx)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
		arr = (uint32*)ptr_allocations[6];
		for (i = 0; i <= lastIndices[6]; ++i)
f0127301:	ff 45 f4             	incl   -0xc(%ebp)
f0127304:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012730a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012730d:	7d db                	jge    f01272ea <test_kexpand+0x83b>
			arr[i] = i ;
		}
	}

	//Expand last allocated variable to 7 MB instead of 6 MB
	int newLastIndex = (7*Mega)/sizeof(uint32) - 1;
f012730f:	c7 85 5c ff ff ff ff 	movl   $0x1bffff,-0xa4(%ebp)
f0127316:	ff 1b 00 
	{
		freeFrames = sys_calculate_free_frames() ;
f0127319:	e8 20 5b fe ff       	call   f010ce3e <sys_calculate_free_frames>
f012731e:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127321:	e8 5e d3 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0127326:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kexpand(7*Mega) ;
f0127329:	83 ec 0c             	sub    $0xc,%esp
f012732c:	68 00 00 70 00       	push   $0x700000
f0127331:	e8 39 11 fe ff       	call   f010846f <kexpand>
f0127336:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0127339:	e8 46 d3 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012733e:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127341:	74 19                	je     f012735c <test_kexpand+0x8ad>
f0127343:	68 cc ac 13 f0       	push   $0xf013accc
f0127348:	68 fd ac 13 f0       	push   $0xf013acfd
f012734d:	68 a0 0b 00 00       	push   $0xba0
f0127352:	68 32 9f 13 f0       	push   $0xf0139f32
f0127357:	e8 54 8e fd ff       	call   f01001b0 <_panic>
		assert(freeFrames - sys_calculate_free_frames() == 256) ;
f012735c:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f012735f:	e8 da 5a fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0127364:	29 c3                	sub    %eax,%ebx
f0127366:	89 d8                	mov    %ebx,%eax
f0127368:	3d 00 01 00 00       	cmp    $0x100,%eax
f012736d:	74 19                	je     f0127388 <test_kexpand+0x8d9>
f012736f:	68 14 ad 13 f0       	push   $0xf013ad14
f0127374:	68 fd ac 13 f0       	push   $0xf013acfd
f0127379:	68 a1 0b 00 00       	push   $0xba1
f012737e:	68 32 9f 13 f0       	push   $0xf0139f32
f0127383:	e8 28 8e fd ff       	call   f01001b0 <_panic>

		for (i = lastIndices[6]; i < newLastIndex ; ++i)
f0127388:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012738e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0127391:	eb 1a                	jmp    f01273ad <test_kexpand+0x8fe>
		{
			arr[i] = i ;
f0127393:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0127396:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012739d:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01273a3:	01 c2                	add    %eax,%edx
f01273a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01273a8:	89 02                	mov    %eax,(%edx)
		kexpand(7*Mega) ;

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
		assert(freeFrames - sys_calculate_free_frames() == 256) ;

		for (i = lastIndices[6]; i < newLastIndex ; ++i)
f01273aa:	ff 45 f4             	incl   -0xc(%ebp)
f01273ad:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01273b0:	3b 85 5c ff ff ff    	cmp    -0xa4(%ebp),%eax
f01273b6:	7c db                	jl     f0127393 <test_kexpand+0x8e4>
		}
	}

	//Access elements after expansion
	{
		for (i = 0; i < newLastIndex ; ++i)
f01273b8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01273bf:	eb 37                	jmp    f01273f8 <test_kexpand+0x949>
		{
			assert(arr[i] ==i);
f01273c1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01273c4:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01273cb:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01273d1:	01 d0                	add    %edx,%eax
f01273d3:	8b 10                	mov    (%eax),%edx
f01273d5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01273d8:	39 c2                	cmp    %eax,%edx
f01273da:	74 19                	je     f01273f5 <test_kexpand+0x946>
f01273dc:	68 44 ad 13 f0       	push   $0xf013ad44
f01273e1:	68 fd ac 13 f0       	push   $0xf013acfd
f01273e6:	68 ad 0b 00 00       	push   $0xbad
f01273eb:	68 32 9f 13 f0       	push   $0xf0139f32
f01273f0:	e8 bb 8d fd ff       	call   f01001b0 <_panic>
		}
	}

	//Access elements after expansion
	{
		for (i = 0; i < newLastIndex ; ++i)
f01273f5:	ff 45 f4             	incl   -0xc(%ebp)
f01273f8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01273fb:	3b 85 5c ff ff ff    	cmp    -0xa4(%ebp),%eax
f0127401:	7c be                	jl     f01273c1 <test_kexpand+0x912>
		}
	}

	//Expand it again to 10 MB instead of 7 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f0127403:	e8 36 5a fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0127408:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012740b:	e8 74 d2 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0127410:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kexpand(10*Mega) ;
f0127413:	83 ec 0c             	sub    $0xc,%esp
f0127416:	68 00 00 a0 00       	push   $0xa00000
f012741b:	e8 4f 10 fe ff       	call   f010846f <kexpand>
f0127420:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0127423:	e8 5c d2 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0127428:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012742b:	74 19                	je     f0127446 <test_kexpand+0x997>
f012742d:	68 cc ac 13 f0       	push   $0xf013accc
f0127432:	68 fd ac 13 f0       	push   $0xf013acfd
f0127437:	68 b8 0b 00 00       	push   $0xbb8
f012743c:	68 32 9f 13 f0       	push   $0xf0139f32
f0127441:	e8 6a 8d fd ff       	call   f01001b0 <_panic>
		assert(freeFrames - sys_calculate_free_frames() == 768) ;
f0127446:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0127449:	e8 f0 59 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f012744e:	29 c3                	sub    %eax,%ebx
f0127450:	89 d8                	mov    %ebx,%eax
f0127452:	3d 00 03 00 00       	cmp    $0x300,%eax
f0127457:	74 19                	je     f0127472 <test_kexpand+0x9c3>
f0127459:	68 50 ad 13 f0       	push   $0xf013ad50
f012745e:	68 fd ac 13 f0       	push   $0xf013acfd
f0127463:	68 b9 0b 00 00       	push   $0xbb9
f0127468:	68 32 9f 13 f0       	push   $0xf0139f32
f012746d:	e8 3e 8d fd ff       	call   f01001b0 <_panic>


	//Allocate after expanding last var
	{
		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f0127472:	e8 c7 59 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0127477:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012747a:	e8 05 d2 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012747f:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(4*Mega);
f0127482:	83 ec 0c             	sub    $0xc,%esp
f0127485:	68 00 00 40 00       	push   $0x400000
f012748a:	e8 c4 0d fe ff       	call   f0108253 <kmalloc>
f012748f:	83 c4 10             	add    $0x10,%esp
f0127492:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)

		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 7*Mega + 16*kilo + 10*Mega)) panic("Wrong start address after kexpand()... ");
f0127498:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012749e:	89 c1                	mov    %eax,%ecx
f01274a0:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f01274a7:	10 00 00 
f01274aa:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f01274af:	0f b6 d0             	movzbl %al,%edx
f01274b2:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f01274b8:	01 d0                	add    %edx,%eax
f01274ba:	48                   	dec    %eax
f01274bb:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f01274c1:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01274c7:	ba 00 00 00 00       	mov    $0x0,%edx
f01274cc:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f01274d2:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01274d8:	29 d0                	sub    %edx,%eax
f01274da:	89 c3                	mov    %eax,%ebx
f01274dc:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f01274e3:	10 00 00 
f01274e6:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f01274eb:	0f b6 c0             	movzbl %al,%eax
f01274ee:	c1 e0 04             	shl    $0x4,%eax
f01274f1:	89 c2                	mov    %eax,%edx
f01274f3:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f01274f9:	01 d0                	add    %edx,%eax
f01274fb:	48                   	dec    %eax
f01274fc:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f0127502:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0127508:	ba 00 00 00 00       	mov    $0x0,%edx
f012750d:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f0127513:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0127519:	29 d0                	sub    %edx,%eax
f012751b:	01 d8                	add    %ebx,%eax
f012751d:	2d 00 80 ef 08       	sub    $0x8ef8000,%eax
f0127522:	39 c1                	cmp    %eax,%ecx
f0127524:	74 17                	je     f012753d <test_kexpand+0xa8e>
f0127526:	83 ec 04             	sub    $0x4,%esp
f0127529:	68 80 ad 13 f0       	push   $0xf013ad80
f012752e:	68 c4 0b 00 00       	push   $0xbc4
f0127533:	68 32 9f 13 f0       	push   $0xf0139f32
f0127538:	e8 73 8c fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012753d:	e8 42 d1 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0127542:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127545:	74 17                	je     f012755e <test_kexpand+0xaaf>
f0127547:	83 ec 04             	sub    $0x4,%esp
f012754a:	68 4c 9f 13 f0       	push   $0xf0139f4c
f012754f:	68 c5 0b 00 00       	push   $0xbc5
f0127554:	68 32 9f 13 f0       	push   $0xf0139f32
f0127559:	e8 52 8c fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4*Mega/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f012755e:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0127561:	e8 d8 58 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0127566:	29 c3                	sub    %eax,%ebx
f0127568:	89 d8                	mov    %ebx,%eax
f012756a:	3d 00 04 00 00       	cmp    $0x400,%eax
f012756f:	74 17                	je     f0127588 <test_kexpand+0xad9>
f0127571:	83 ec 04             	sub    $0x4,%esp
f0127574:	68 b4 9f 13 f0       	push   $0xf0139fb4
f0127579:	68 c6 0b 00 00       	push   $0xbc6
f012757e:	68 32 9f 13 f0       	push   $0xf0139f32
f0127583:	e8 28 8c fd ff       	call   f01001b0 <_panic>
	}

	//kfree the expanded variable
	{
		//kfree 10 MB (expanded)
		freeFrames = sys_calculate_free_frames() ;
f0127588:	e8 b1 58 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f012758d:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127590:	e8 ef d0 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0127595:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[6]);
f0127598:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012759e:	83 ec 0c             	sub    $0xc,%esp
f01275a1:	50                   	push   %eax
f01275a2:	e8 37 0e fe ff       	call   f01083de <kfree>
f01275a7:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01275aa:	e8 d5 d0 fd ff       	call   f0104684 <pf_calculate_free_frames>
f01275af:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01275b2:	74 17                	je     f01275cb <test_kexpand+0xb1c>
f01275b4:	83 ec 04             	sub    $0x4,%esp
f01275b7:	68 4c 9f 13 f0       	push   $0xf0139f4c
f01275bc:	68 cf 0b 00 00       	push   $0xbcf
f01275c1:	68 32 9f 13 f0       	push   $0xf0139f32
f01275c6:	e8 e5 8b fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 10*Mega/PAGE_SIZE) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f01275cb:	e8 6e 58 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f01275d0:	89 c2                	mov    %eax,%edx
f01275d2:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01275d5:	29 c2                	sub    %eax,%edx
f01275d7:	89 d0                	mov    %edx,%eax
f01275d9:	3d 00 0a 00 00       	cmp    $0xa00,%eax
f01275de:	74 17                	je     f01275f7 <test_kexpand+0xb48>
f01275e0:	83 ec 04             	sub    $0x4,%esp
f01275e3:	68 e4 a7 13 f0       	push   $0xf013a7e4
f01275e8:	68 d0 0b 00 00       	push   $0xbd0
f01275ed:	68 32 9f 13 f0       	push   $0xf0139f32
f01275f2:	e8 b9 8b fd ff       	call   f01001b0 <_panic>
	}

	//Expand last allocated variable to 4 MB + 20 kilo instead of 4 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f01275f7:	e8 42 58 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f01275fc:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01275ff:	e8 80 d0 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0127604:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kexpand(4*Mega + 20*kilo) ;
f0127607:	83 ec 0c             	sub    $0xc,%esp
f012760a:	68 00 50 40 00       	push   $0x405000
f012760f:	e8 5b 0e fe ff       	call   f010846f <kexpand>
f0127614:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0127617:	e8 68 d0 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012761c:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012761f:	74 19                	je     f012763a <test_kexpand+0xb8b>
f0127621:	68 cc ac 13 f0       	push   $0xf013accc
f0127626:	68 fd ac 13 f0       	push   $0xf013acfd
f012762b:	68 da 0b 00 00       	push   $0xbda
f0127630:	68 32 9f 13 f0       	push   $0xf0139f32
f0127635:	e8 76 8b fd ff       	call   f01001b0 <_panic>
		assert(freeFrames - sys_calculate_free_frames()  == 5) ;
f012763a:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f012763d:	e8 fc 57 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0127642:	29 c3                	sub    %eax,%ebx
f0127644:	89 d8                	mov    %ebx,%eax
f0127646:	83 f8 05             	cmp    $0x5,%eax
f0127649:	74 19                	je     f0127664 <test_kexpand+0xbb5>
f012764b:	68 a8 ad 13 f0       	push   $0xf013ada8
f0127650:	68 fd ac 13 f0       	push   $0xf013acfd
f0127655:	68 db 0b 00 00       	push   $0xbdb
f012765a:	68 32 9f 13 f0       	push   $0xf0139f32
f012765f:	e8 4c 8b fd ff       	call   f01001b0 <_panic>
	}

	cprintf("\nCongratulations!! your modification is run successfully.\n");
f0127664:	83 ec 0c             	sub    $0xc,%esp
f0127667:	68 90 ac 13 f0       	push   $0xf013ac90
f012766c:	e8 c0 97 fd ff       	call   f0100e31 <cprintf>
f0127671:	83 c4 10             	add    $0x10,%esp

	return 1;
f0127674:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0127679:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012767c:	5b                   	pop    %ebx
f012767d:	5f                   	pop    %edi
f012767e:	5d                   	pop    %ebp
f012767f:	c3                   	ret    

f0127680 <test_kshrink>:

extern void kshrink(uint32 newSize) ;

int test_kshrink()
{
f0127680:	55                   	push   %ebp
f0127681:	89 e5                	mov    %esp,%ebp
f0127683:	57                   	push   %edi
f0127684:	53                   	push   %ebx
f0127685:	81 ec 60 01 00 00    	sub    $0x160,%esp
	char minByte = 1<<7;
f012768b:	c6 45 f3 80          	movb   $0x80,-0xd(%ebp)
	char maxByte = 0x7F;
f012768f:	c6 45 f2 7f          	movb   $0x7f,-0xe(%ebp)
	short minShort = 1<<15 ;
f0127693:	66 c7 45 f0 00 80    	movw   $0x8000,-0x10(%ebp)
	short maxShort = 0x7FFF;
f0127699:	66 c7 45 ee ff 7f    	movw   $0x7fff,-0x12(%ebp)
	int minInt = 1<<31 ;
f012769f:	c7 45 e8 00 00 00 80 	movl   $0x80000000,-0x18(%ebp)
	int maxInt = 0x7FFFFFFF;
f01276a6:	c7 45 e4 ff ff ff 7f 	movl   $0x7fffffff,-0x1c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f01276ad:	e8 8c 57 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f01276b2:	89 45 e0             	mov    %eax,-0x20(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f01276b5:	8d 95 ec fe ff ff    	lea    -0x114(%ebp),%edx
f01276bb:	b9 14 00 00 00       	mov    $0x14,%ecx
f01276c0:	b8 00 00 00 00       	mov    $0x0,%eax
f01276c5:	89 d7                	mov    %edx,%edi
f01276c7:	f3 ab                	rep stos %eax,%es:(%edi)

	uint32 *arr;
	void* ptr_allocations[20] = {0};
f01276c9:	8d 95 9c fe ff ff    	lea    -0x164(%ebp),%edx
f01276cf:	b9 14 00 00 00       	mov    $0x14,%ecx
f01276d4:	b8 00 00 00 00       	mov    $0x0,%eax
f01276d9:	89 d7                	mov    %edx,%edi
f01276db:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01276dd:	e8 5c 57 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f01276e2:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01276e5:	e8 9a cf fd ff       	call   f0104684 <pf_calculate_free_frames>
f01276ea:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f01276ed:	83 ec 0c             	sub    $0xc,%esp
f01276f0:	68 00 fc 1f 00       	push   $0x1ffc00
f01276f5:	e8 59 0b fe ff       	call   f0108253 <kmalloc>
f01276fa:	83 c4 10             	add    $0x10,%esp
f01276fd:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127703:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0127709:	89 c1                	mov    %eax,%ecx
f012770b:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f0127712:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0127717:	0f b6 d0             	movzbl %al,%edx
f012771a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012771d:	01 d0                	add    %edx,%eax
f012771f:	48                   	dec    %eax
f0127720:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0127723:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0127726:	ba 00 00 00 00       	mov    $0x0,%edx
f012772b:	f7 75 d4             	divl   -0x2c(%ebp)
f012772e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0127731:	29 d0                	sub    %edx,%eax
f0127733:	89 c3                	mov    %eax,%ebx
f0127735:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f012773c:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0127741:	0f b6 c0             	movzbl %al,%eax
f0127744:	c1 e0 04             	shl    $0x4,%eax
f0127747:	89 c2                	mov    %eax,%edx
f0127749:	8b 45 cc             	mov    -0x34(%ebp),%eax
f012774c:	01 d0                	add    %edx,%eax
f012774e:	48                   	dec    %eax
f012774f:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0127752:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0127755:	ba 00 00 00 00       	mov    $0x0,%edx
f012775a:	f7 75 cc             	divl   -0x34(%ebp)
f012775d:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0127760:	29 d0                	sub    %edx,%eax
f0127762:	01 d8                	add    %ebx,%eax
f0127764:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0127769:	39 c1                	cmp    %eax,%ecx
f012776b:	74 17                	je     f0127784 <test_kshrink+0x104>
f012776d:	83 ec 04             	sub    $0x4,%esp
f0127770:	68 18 a0 13 f0       	push   $0xf013a018
f0127775:	68 01 0c 00 00       	push   $0xc01
f012777a:	68 32 9f 13 f0       	push   $0xf0139f32
f012777f:	e8 2c 8a fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127784:	e8 fb ce fd ff       	call   f0104684 <pf_calculate_free_frames>
f0127789:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012778c:	74 17                	je     f01277a5 <test_kshrink+0x125>
f012778e:	83 ec 04             	sub    $0x4,%esp
f0127791:	68 4c 9f 13 f0       	push   $0xf0139f4c
f0127796:	68 02 0c 00 00       	push   $0xc02
f012779b:	68 32 9f 13 f0       	push   $0xf0139f32
f01277a0:	e8 0b 8a fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01277a5:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01277a8:	e8 91 56 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f01277ad:	29 c3                	sub    %eax,%ebx
f01277af:	89 d8                	mov    %ebx,%eax
f01277b1:	3d 00 02 00 00       	cmp    $0x200,%eax
f01277b6:	74 17                	je     f01277cf <test_kshrink+0x14f>
f01277b8:	83 ec 04             	sub    $0x4,%esp
f01277bb:	68 b4 9f 13 f0       	push   $0xf0139fb4
f01277c0:	68 03 0c 00 00       	push   $0xc03
f01277c5:	68 32 9f 13 f0       	push   $0xf0139f32
f01277ca:	e8 e1 89 fd ff       	call   f01001b0 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f01277cf:	c7 85 ec fe ff ff ff 	movl   $0x1ffbff,-0x114(%ebp)
f01277d6:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01277d9:	e8 60 56 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f01277de:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01277e1:	e8 9e ce fd ff       	call   f0104684 <pf_calculate_free_frames>
f01277e6:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f01277e9:	83 ec 0c             	sub    $0xc,%esp
f01277ec:	68 00 fc 1f 00       	push   $0x1ffc00
f01277f1:	e8 5d 0a fe ff       	call   f0108253 <kmalloc>
f01277f6:	83 c4 10             	add    $0x10,%esp
f01277f9:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01277ff:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0127805:	89 c1                	mov    %eax,%ecx
f0127807:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f012780e:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0127813:	0f b6 d0             	movzbl %al,%edx
f0127816:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0127819:	01 d0                	add    %edx,%eax
f012781b:	48                   	dec    %eax
f012781c:	89 45 c0             	mov    %eax,-0x40(%ebp)
f012781f:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0127822:	ba 00 00 00 00       	mov    $0x0,%edx
f0127827:	f7 75 c4             	divl   -0x3c(%ebp)
f012782a:	8b 45 c0             	mov    -0x40(%ebp),%eax
f012782d:	29 d0                	sub    %edx,%eax
f012782f:	89 c3                	mov    %eax,%ebx
f0127831:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f0127838:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f012783d:	0f b6 c0             	movzbl %al,%eax
f0127840:	c1 e0 04             	shl    $0x4,%eax
f0127843:	89 c2                	mov    %eax,%edx
f0127845:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0127848:	01 d0                	add    %edx,%eax
f012784a:	48                   	dec    %eax
f012784b:	89 45 b8             	mov    %eax,-0x48(%ebp)
f012784e:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0127851:	ba 00 00 00 00       	mov    $0x0,%edx
f0127856:	f7 75 bc             	divl   -0x44(%ebp)
f0127859:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012785c:	29 d0                	sub    %edx,%eax
f012785e:	01 d8                	add    %ebx,%eax
f0127860:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0127865:	39 c1                	cmp    %eax,%ecx
f0127867:	74 17                	je     f0127880 <test_kshrink+0x200>
f0127869:	83 ec 04             	sub    $0x4,%esp
f012786c:	68 18 a0 13 f0       	push   $0xf013a018
f0127871:	68 0a 0c 00 00       	push   $0xc0a
f0127876:	68 32 9f 13 f0       	push   $0xf0139f32
f012787b:	e8 30 89 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127880:	e8 ff cd fd ff       	call   f0104684 <pf_calculate_free_frames>
f0127885:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127888:	74 17                	je     f01278a1 <test_kshrink+0x221>
f012788a:	83 ec 04             	sub    $0x4,%esp
f012788d:	68 4c 9f 13 f0       	push   $0xf0139f4c
f0127892:	68 0b 0c 00 00       	push   $0xc0b
f0127897:	68 32 9f 13 f0       	push   $0xf0139f32
f012789c:	e8 0f 89 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01278a1:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01278a4:	e8 95 55 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f01278a9:	29 c3                	sub    %eax,%ebx
f01278ab:	89 d8                	mov    %ebx,%eax
f01278ad:	3d 00 02 00 00       	cmp    $0x200,%eax
f01278b2:	74 17                	je     f01278cb <test_kshrink+0x24b>
f01278b4:	83 ec 04             	sub    $0x4,%esp
f01278b7:	68 b4 9f 13 f0       	push   $0xf0139fb4
f01278bc:	68 0c 0c 00 00       	push   $0xc0c
f01278c1:	68 32 9f 13 f0       	push   $0xf0139f32
f01278c6:	e8 e5 88 fd ff       	call   f01001b0 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f01278cb:	c7 85 f0 fe ff ff ff 	movl   $0x1ffbff,-0x110(%ebp)
f01278d2:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01278d5:	e8 64 55 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f01278da:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01278dd:	e8 a2 cd fd ff       	call   f0104684 <pf_calculate_free_frames>
f01278e2:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f01278e5:	83 ec 0c             	sub    $0xc,%esp
f01278e8:	68 00 08 00 00       	push   $0x800
f01278ed:	e8 61 09 fe ff       	call   f0108253 <kmalloc>
f01278f2:	83 c4 10             	add    $0x10,%esp
f01278f5:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01278fb:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0127901:	89 c1                	mov    %eax,%ecx
f0127903:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f012790a:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f012790f:	0f b6 d0             	movzbl %al,%edx
f0127912:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0127915:	01 d0                	add    %edx,%eax
f0127917:	48                   	dec    %eax
f0127918:	89 45 b0             	mov    %eax,-0x50(%ebp)
f012791b:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012791e:	ba 00 00 00 00       	mov    $0x0,%edx
f0127923:	f7 75 b4             	divl   -0x4c(%ebp)
f0127926:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0127929:	29 d0                	sub    %edx,%eax
f012792b:	89 c3                	mov    %eax,%ebx
f012792d:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f0127934:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0127939:	0f b6 c0             	movzbl %al,%eax
f012793c:	c1 e0 04             	shl    $0x4,%eax
f012793f:	89 c2                	mov    %eax,%edx
f0127941:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0127944:	01 d0                	add    %edx,%eax
f0127946:	48                   	dec    %eax
f0127947:	89 45 a8             	mov    %eax,-0x58(%ebp)
f012794a:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012794d:	ba 00 00 00 00       	mov    $0x0,%edx
f0127952:	f7 75 ac             	divl   -0x54(%ebp)
f0127955:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0127958:	29 d0                	sub    %edx,%eax
f012795a:	01 d8                	add    %ebx,%eax
f012795c:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0127961:	39 c1                	cmp    %eax,%ecx
f0127963:	74 17                	je     f012797c <test_kshrink+0x2fc>
f0127965:	83 ec 04             	sub    $0x4,%esp
f0127968:	68 18 a0 13 f0       	push   $0xf013a018
f012796d:	68 13 0c 00 00       	push   $0xc13
f0127972:	68 32 9f 13 f0       	push   $0xf0139f32
f0127977:	e8 34 88 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012797c:	e8 03 cd fd ff       	call   f0104684 <pf_calculate_free_frames>
f0127981:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127984:	74 17                	je     f012799d <test_kshrink+0x31d>
f0127986:	83 ec 04             	sub    $0x4,%esp
f0127989:	68 4c 9f 13 f0       	push   $0xf0139f4c
f012798e:	68 14 0c 00 00       	push   $0xc14
f0127993:	68 32 9f 13 f0       	push   $0xf0139f32
f0127998:	e8 13 88 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f012799d:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01279a0:	e8 99 54 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f01279a5:	29 c3                	sub    %eax,%ebx
f01279a7:	89 d8                	mov    %ebx,%eax
f01279a9:	83 f8 01             	cmp    $0x1,%eax
f01279ac:	74 17                	je     f01279c5 <test_kshrink+0x345>
f01279ae:	83 ec 04             	sub    $0x4,%esp
f01279b1:	68 b4 9f 13 f0       	push   $0xf0139fb4
f01279b6:	68 15 0c 00 00       	push   $0xc15
f01279bb:	68 32 9f 13 f0       	push   $0xf0139f32
f01279c0:	e8 eb 87 fd ff       	call   f01001b0 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f01279c5:	c7 85 f4 fe ff ff ff 	movl   $0x7ff,-0x10c(%ebp)
f01279cc:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f01279cf:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f01279d5:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f01279d8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01279df:	eb 0e                	jmp    f01279ef <test_kshrink+0x36f>
		{
			ptr[i] = 2 ;
f01279e1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01279e4:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01279e7:	01 d0                	add    %edx,%eax
f01279e9:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f01279ec:	ff 45 f4             	incl   -0xc(%ebp)
f01279ef:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f01279f5:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01279f8:	7f e7                	jg     f01279e1 <test_kshrink+0x361>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01279fa:	e8 3f 54 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f01279ff:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127a02:	e8 7d cc fd ff       	call   f0104684 <pf_calculate_free_frames>
f0127a07:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0127a0a:	83 ec 0c             	sub    $0xc,%esp
f0127a0d:	68 00 08 00 00       	push   $0x800
f0127a12:	e8 3c 08 fe ff       	call   f0108253 <kmalloc>
f0127a17:	83 c4 10             	add    $0x10,%esp
f0127a1a:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127a20:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0127a26:	89 c1                	mov    %eax,%ecx
f0127a28:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0127a2f:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0127a34:	0f b6 d0             	movzbl %al,%edx
f0127a37:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0127a3a:	01 d0                	add    %edx,%eax
f0127a3c:	48                   	dec    %eax
f0127a3d:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0127a40:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0127a43:	ba 00 00 00 00       	mov    $0x0,%edx
f0127a48:	f7 75 a0             	divl   -0x60(%ebp)
f0127a4b:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0127a4e:	29 d0                	sub    %edx,%eax
f0127a50:	89 c3                	mov    %eax,%ebx
f0127a52:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f0127a59:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0127a5e:	0f b6 c0             	movzbl %al,%eax
f0127a61:	c1 e0 04             	shl    $0x4,%eax
f0127a64:	89 c2                	mov    %eax,%edx
f0127a66:	8b 45 98             	mov    -0x68(%ebp),%eax
f0127a69:	01 d0                	add    %edx,%eax
f0127a6b:	48                   	dec    %eax
f0127a6c:	89 45 94             	mov    %eax,-0x6c(%ebp)
f0127a6f:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0127a72:	ba 00 00 00 00       	mov    $0x0,%edx
f0127a77:	f7 75 98             	divl   -0x68(%ebp)
f0127a7a:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0127a7d:	29 d0                	sub    %edx,%eax
f0127a7f:	01 d8                	add    %ebx,%eax
f0127a81:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0127a86:	39 c1                	cmp    %eax,%ecx
f0127a88:	74 17                	je     f0127aa1 <test_kshrink+0x421>
f0127a8a:	83 ec 04             	sub    $0x4,%esp
f0127a8d:	68 18 a0 13 f0       	push   $0xf013a018
f0127a92:	68 21 0c 00 00       	push   $0xc21
f0127a97:	68 32 9f 13 f0       	push   $0xf0139f32
f0127a9c:	e8 0f 87 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127aa1:	e8 de cb fd ff       	call   f0104684 <pf_calculate_free_frames>
f0127aa6:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127aa9:	74 17                	je     f0127ac2 <test_kshrink+0x442>
f0127aab:	83 ec 04             	sub    $0x4,%esp
f0127aae:	68 4c 9f 13 f0       	push   $0xf0139f4c
f0127ab3:	68 22 0c 00 00       	push   $0xc22
f0127ab8:	68 32 9f 13 f0       	push   $0xf0139f32
f0127abd:	e8 ee 86 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127ac2:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0127ac5:	e8 74 53 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0127aca:	29 c3                	sub    %eax,%ebx
f0127acc:	89 d8                	mov    %ebx,%eax
f0127ace:	83 f8 01             	cmp    $0x1,%eax
f0127ad1:	74 17                	je     f0127aea <test_kshrink+0x46a>
f0127ad3:	83 ec 04             	sub    $0x4,%esp
f0127ad6:	68 b4 9f 13 f0       	push   $0xf0139fb4
f0127adb:	68 23 0c 00 00       	push   $0xc23
f0127ae0:	68 32 9f 13 f0       	push   $0xf0139f32
f0127ae5:	e8 c6 86 fd ff       	call   f01001b0 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f0127aea:	c7 85 f8 fe ff ff ff 	movl   $0x7ff,-0x108(%ebp)
f0127af1:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f0127af4:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0127afa:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0127afd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127b04:	eb 0e                	jmp    f0127b14 <test_kshrink+0x494>
		{
			ptr[i] = 3 ;
f0127b06:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0127b09:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0127b0c:	01 d0                	add    %edx,%eax
f0127b0e:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0127b11:	ff 45 f4             	incl   -0xc(%ebp)
f0127b14:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0127b1a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127b1d:	7f e7                	jg     f0127b06 <test_kshrink+0x486>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0127b1f:	e8 1a 53 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0127b24:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127b27:	e8 58 cb fd ff       	call   f0104684 <pf_calculate_free_frames>
f0127b2c:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0127b2f:	83 ec 0c             	sub    $0xc,%esp
f0127b32:	68 00 1c 00 00       	push   $0x1c00
f0127b37:	e8 17 07 fe ff       	call   f0108253 <kmalloc>
f0127b3c:	83 c4 10             	add    $0x10,%esp
f0127b3f:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127b45:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f0127b4b:	89 c1                	mov    %eax,%ecx
f0127b4d:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f0127b54:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0127b59:	0f b6 d0             	movzbl %al,%edx
f0127b5c:	8b 45 90             	mov    -0x70(%ebp),%eax
f0127b5f:	01 d0                	add    %edx,%eax
f0127b61:	48                   	dec    %eax
f0127b62:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0127b65:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0127b68:	ba 00 00 00 00       	mov    $0x0,%edx
f0127b6d:	f7 75 90             	divl   -0x70(%ebp)
f0127b70:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0127b73:	29 d0                	sub    %edx,%eax
f0127b75:	89 c3                	mov    %eax,%ebx
f0127b77:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0127b7e:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0127b83:	0f b6 c0             	movzbl %al,%eax
f0127b86:	c1 e0 04             	shl    $0x4,%eax
f0127b89:	89 c2                	mov    %eax,%edx
f0127b8b:	8b 45 88             	mov    -0x78(%ebp),%eax
f0127b8e:	01 d0                	add    %edx,%eax
f0127b90:	48                   	dec    %eax
f0127b91:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0127b94:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0127b97:	ba 00 00 00 00       	mov    $0x0,%edx
f0127b9c:	f7 75 88             	divl   -0x78(%ebp)
f0127b9f:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0127ba2:	29 d0                	sub    %edx,%eax
f0127ba4:	01 d8                	add    %ebx,%eax
f0127ba6:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0127bab:	39 c1                	cmp    %eax,%ecx
f0127bad:	74 17                	je     f0127bc6 <test_kshrink+0x546>
f0127baf:	83 ec 04             	sub    $0x4,%esp
f0127bb2:	68 18 a0 13 f0       	push   $0xf013a018
f0127bb7:	68 2f 0c 00 00       	push   $0xc2f
f0127bbc:	68 32 9f 13 f0       	push   $0xf0139f32
f0127bc1:	e8 ea 85 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127bc6:	e8 b9 ca fd ff       	call   f0104684 <pf_calculate_free_frames>
f0127bcb:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127bce:	74 17                	je     f0127be7 <test_kshrink+0x567>
f0127bd0:	83 ec 04             	sub    $0x4,%esp
f0127bd3:	68 4c 9f 13 f0       	push   $0xf0139f4c
f0127bd8:	68 30 0c 00 00       	push   $0xc30
f0127bdd:	68 32 9f 13 f0       	push   $0xf0139f32
f0127be2:	e8 c9 85 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127be7:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0127bea:	e8 4f 52 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0127bef:	29 c3                	sub    %eax,%ebx
f0127bf1:	89 d8                	mov    %ebx,%eax
f0127bf3:	83 f8 02             	cmp    $0x2,%eax
f0127bf6:	74 17                	je     f0127c0f <test_kshrink+0x58f>
f0127bf8:	83 ec 04             	sub    $0x4,%esp
f0127bfb:	68 b4 9f 13 f0       	push   $0xf0139fb4
f0127c00:	68 31 0c 00 00       	push   $0xc31
f0127c05:	68 32 9f 13 f0       	push   $0xf0139f32
f0127c0a:	e8 a1 85 fd ff       	call   f01001b0 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f0127c0f:	c7 85 fc fe ff ff ff 	movl   $0x1bff,-0x104(%ebp)
f0127c16:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f0127c19:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f0127c1f:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0127c22:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127c29:	eb 0e                	jmp    f0127c39 <test_kshrink+0x5b9>
		{
			ptr[i] = 4 ;
f0127c2b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0127c2e:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0127c31:	01 d0                	add    %edx,%eax
f0127c33:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0127c36:	ff 45 f4             	incl   -0xc(%ebp)
f0127c39:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0127c3f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127c42:	7f e7                	jg     f0127c2b <test_kshrink+0x5ab>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0127c44:	e8 f5 51 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0127c49:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127c4c:	e8 33 ca fd ff       	call   f0104684 <pf_calculate_free_frames>
f0127c51:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0127c54:	83 ec 0c             	sub    $0xc,%esp
f0127c57:	68 00 fc 2f 00       	push   $0x2ffc00
f0127c5c:	e8 f2 05 fe ff       	call   f0108253 <kmalloc>
f0127c61:	83 c4 10             	add    $0x10,%esp
f0127c64:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127c6a:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0127c70:	89 c1                	mov    %eax,%ecx
f0127c72:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f0127c79:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0127c7e:	0f b6 d0             	movzbl %al,%edx
f0127c81:	8b 45 80             	mov    -0x80(%ebp),%eax
f0127c84:	01 d0                	add    %edx,%eax
f0127c86:	48                   	dec    %eax
f0127c87:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0127c8d:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0127c93:	ba 00 00 00 00       	mov    $0x0,%edx
f0127c98:	f7 75 80             	divl   -0x80(%ebp)
f0127c9b:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0127ca1:	29 d0                	sub    %edx,%eax
f0127ca3:	89 c3                	mov    %eax,%ebx
f0127ca5:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0127cac:	10 00 00 
f0127caf:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0127cb4:	0f b6 c0             	movzbl %al,%eax
f0127cb7:	c1 e0 04             	shl    $0x4,%eax
f0127cba:	89 c2                	mov    %eax,%edx
f0127cbc:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0127cc2:	01 d0                	add    %edx,%eax
f0127cc4:	48                   	dec    %eax
f0127cc5:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0127ccb:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0127cd1:	ba 00 00 00 00       	mov    $0x0,%edx
f0127cd6:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f0127cdc:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0127ce2:	29 d0                	sub    %edx,%eax
f0127ce4:	01 d8                	add    %ebx,%eax
f0127ce6:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0127ceb:	39 c1                	cmp    %eax,%ecx
f0127ced:	74 17                	je     f0127d06 <test_kshrink+0x686>
f0127cef:	83 ec 04             	sub    $0x4,%esp
f0127cf2:	68 18 a0 13 f0       	push   $0xf013a018
f0127cf7:	68 3d 0c 00 00       	push   $0xc3d
f0127cfc:	68 32 9f 13 f0       	push   $0xf0139f32
f0127d01:	e8 aa 84 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127d06:	e8 79 c9 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0127d0b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127d0e:	74 17                	je     f0127d27 <test_kshrink+0x6a7>
f0127d10:	83 ec 04             	sub    $0x4,%esp
f0127d13:	68 4c 9f 13 f0       	push   $0xf0139f4c
f0127d18:	68 3e 0c 00 00       	push   $0xc3e
f0127d1d:	68 32 9f 13 f0       	push   $0xf0139f32
f0127d22:	e8 89 84 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127d27:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0127d2a:	e8 0f 51 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0127d2f:	29 c3                	sub    %eax,%ebx
f0127d31:	89 d8                	mov    %ebx,%eax
f0127d33:	3d 00 03 00 00       	cmp    $0x300,%eax
f0127d38:	74 17                	je     f0127d51 <test_kshrink+0x6d1>
f0127d3a:	83 ec 04             	sub    $0x4,%esp
f0127d3d:	68 b4 9f 13 f0       	push   $0xf0139fb4
f0127d42:	68 3f 0c 00 00       	push   $0xc3f
f0127d47:	68 32 9f 13 f0       	push   $0xf0139f32
f0127d4c:	e8 5f 84 fd ff       	call   f01001b0 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f0127d51:	c7 85 00 ff ff ff ff 	movl   $0x2ffbff,-0x100(%ebp)
f0127d58:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f0127d5b:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0127d61:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0127d64:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127d6b:	eb 0e                	jmp    f0127d7b <test_kshrink+0x6fb>
		{
			ptr[i] = 5 ;
f0127d6d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0127d70:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0127d73:	01 d0                	add    %edx,%eax
f0127d75:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0127d78:	ff 45 f4             	incl   -0xc(%ebp)
f0127d7b:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0127d81:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127d84:	7f e7                	jg     f0127d6d <test_kshrink+0x6ed>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0127d86:	e8 b3 50 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0127d8b:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127d8e:	e8 f1 c8 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0127d93:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega);
f0127d96:	83 ec 0c             	sub    $0xc,%esp
f0127d99:	68 00 00 60 00       	push   $0x600000
f0127d9e:	e8 b0 04 fe ff       	call   f0108253 <kmalloc>
f0127da3:	83 c4 10             	add    $0x10,%esp
f0127da6:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127dac:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0127db2:	89 c1                	mov    %eax,%ecx
f0127db4:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0127dbb:	10 00 00 
f0127dbe:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0127dc3:	0f b6 d0             	movzbl %al,%edx
f0127dc6:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0127dcc:	01 d0                	add    %edx,%eax
f0127dce:	48                   	dec    %eax
f0127dcf:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f0127dd5:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0127ddb:	ba 00 00 00 00       	mov    $0x0,%edx
f0127de0:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f0127de6:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0127dec:	29 d0                	sub    %edx,%eax
f0127dee:	89 c3                	mov    %eax,%ebx
f0127df0:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0127df7:	10 00 00 
f0127dfa:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0127dff:	0f b6 c0             	movzbl %al,%eax
f0127e02:	c1 e0 04             	shl    $0x4,%eax
f0127e05:	89 c2                	mov    %eax,%edx
f0127e07:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0127e0d:	01 d0                	add    %edx,%eax
f0127e0f:	48                   	dec    %eax
f0127e10:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0127e16:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0127e1c:	ba 00 00 00 00       	mov    $0x0,%edx
f0127e21:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0127e27:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0127e2d:	29 d0                	sub    %edx,%eax
f0127e2f:	01 d8                	add    %ebx,%eax
f0127e31:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0127e36:	39 c1                	cmp    %eax,%ecx
f0127e38:	74 17                	je     f0127e51 <test_kshrink+0x7d1>
f0127e3a:	83 ec 04             	sub    $0x4,%esp
f0127e3d:	68 18 a0 13 f0       	push   $0xf013a018
f0127e42:	68 4b 0c 00 00       	push   $0xc4b
f0127e47:	68 32 9f 13 f0       	push   $0xf0139f32
f0127e4c:	e8 5f 83 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127e51:	e8 2e c8 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0127e56:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127e59:	74 17                	je     f0127e72 <test_kshrink+0x7f2>
f0127e5b:	83 ec 04             	sub    $0x4,%esp
f0127e5e:	68 4c 9f 13 f0       	push   $0xf0139f4c
f0127e63:	68 4c 0c 00 00       	push   $0xc4c
f0127e68:	68 32 9f 13 f0       	push   $0xf0139f32
f0127e6d:	e8 3e 83 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127e72:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0127e75:	e8 c4 4f fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0127e7a:	29 c3                	sub    %eax,%ebx
f0127e7c:	89 d8                	mov    %ebx,%eax
f0127e7e:	3d 00 06 00 00       	cmp    $0x600,%eax
f0127e83:	74 17                	je     f0127e9c <test_kshrink+0x81c>
f0127e85:	83 ec 04             	sub    $0x4,%esp
f0127e88:	68 b4 9f 13 f0       	push   $0xf0139fb4
f0127e8d:	68 4d 0c 00 00       	push   $0xc4d
f0127e92:	68 32 9f 13 f0       	push   $0xf0139f32
f0127e97:	e8 14 83 fd ff       	call   f01001b0 <_panic>
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
f0127e9c:	c7 85 04 ff ff ff ff 	movl   $0x17ffff,-0xfc(%ebp)
f0127ea3:	ff 17 00 
		arr = (uint32*)ptr_allocations[6];
f0127ea6:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0127eac:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
		for (i = 0; i <= lastIndices[6]; ++i)
f0127eb2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127eb9:	eb 1a                	jmp    f0127ed5 <test_kshrink+0x855>
		{
			arr[i] = i ;
f0127ebb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0127ebe:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0127ec5:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0127ecb:	01 c2                	add    %eax,%edx
f0127ecd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0127ed0:	89 02                	mov    %eax,(%edx)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
		arr = (uint32*)ptr_allocations[6];
		for (i = 0; i <= lastIndices[6]; ++i)
f0127ed2:	ff 45 f4             	incl   -0xc(%ebp)
f0127ed5:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0127edb:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127ede:	7d db                	jge    f0127ebb <test_kshrink+0x83b>
		}
	}

	//Shrink last allocated variable to 5 MB instead of 6 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f0127ee0:	e8 59 4f fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0127ee5:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127ee8:	e8 97 c7 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0127eed:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kshrink(5*Mega) ;
f0127ef0:	83 ec 0c             	sub    $0xc,%esp
f0127ef3:	68 00 00 50 00       	push   $0x500000
f0127ef8:	e8 55 05 fe ff       	call   f0108452 <kshrink>
f0127efd:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0127f00:	e8 7f c7 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0127f05:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127f08:	74 19                	je     f0127f23 <test_kshrink+0x8a3>
f0127f0a:	68 cc ac 13 f0       	push   $0xf013accc
f0127f0f:	68 fd ac 13 f0       	push   $0xf013acfd
f0127f14:	68 5d 0c 00 00       	push   $0xc5d
f0127f19:	68 32 9f 13 f0       	push   $0xf0139f32
f0127f1e:	e8 8d 82 fd ff       	call   f01001b0 <_panic>
		assert(sys_calculate_free_frames() - freeFrames == 256) ;
f0127f23:	e8 16 4f fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0127f28:	89 c2                	mov    %eax,%edx
f0127f2a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0127f2d:	29 c2                	sub    %eax,%edx
f0127f2f:	89 d0                	mov    %edx,%eax
f0127f31:	3d 00 01 00 00       	cmp    $0x100,%eax
f0127f36:	74 19                	je     f0127f51 <test_kshrink+0x8d1>
f0127f38:	68 d8 ad 13 f0       	push   $0xf013add8
f0127f3d:	68 fd ac 13 f0       	push   $0xf013acfd
f0127f42:	68 5e 0c 00 00       	push   $0xc5e
f0127f47:	68 32 9f 13 f0       	push   $0xf0139f32
f0127f4c:	e8 5f 82 fd ff       	call   f01001b0 <_panic>
	}

	//Access elements after shrink
	int newLastIndex = (5*Mega)/sizeof(uint32) - 1;
f0127f51:	c7 85 5c ff ff ff ff 	movl   $0x13ffff,-0xa4(%ebp)
f0127f58:	ff 13 00 
	{
		for (i = 0; i <= newLastIndex ; ++i)
f0127f5b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127f62:	eb 37                	jmp    f0127f9b <test_kshrink+0x91b>
		{
			assert(arr[i] == i);
f0127f64:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0127f67:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0127f6e:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0127f74:	01 d0                	add    %edx,%eax
f0127f76:	8b 10                	mov    (%eax),%edx
f0127f78:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0127f7b:	39 c2                	cmp    %eax,%edx
f0127f7d:	74 19                	je     f0127f98 <test_kshrink+0x918>
f0127f7f:	68 08 ae 13 f0       	push   $0xf013ae08
f0127f84:	68 fd ac 13 f0       	push   $0xf013acfd
f0127f89:	68 66 0c 00 00       	push   $0xc66
f0127f8e:	68 32 9f 13 f0       	push   $0xf0139f32
f0127f93:	e8 18 82 fd ff       	call   f01001b0 <_panic>
	}

	//Access elements after shrink
	int newLastIndex = (5*Mega)/sizeof(uint32) - 1;
	{
		for (i = 0; i <= newLastIndex ; ++i)
f0127f98:	ff 45 f4             	incl   -0xc(%ebp)
f0127f9b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0127f9e:	3b 85 5c ff ff ff    	cmp    -0xa4(%ebp),%eax
f0127fa4:	7e be                	jle    f0127f64 <test_kshrink+0x8e4>
			assert(arr[i] == i);
		}

		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f0127fa6:	83 ec 0c             	sub    $0xc,%esp
f0127fa9:	6a 03                	push   $0x3
f0127fab:	e8 29 53 fe ff       	call   f010d2d9 <sys_bypassPageFault>
f0127fb0:	83 c4 10             	add    $0x10,%esp

		ptr = (char *) ptr_allocations[6];
f0127fb3:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0127fb9:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr[5*Mega] = 10;
f0127fbc:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0127fbf:	05 00 00 50 00       	add    $0x500000,%eax
f0127fc4:	c6 00 0a             	movb   $0xa,(%eax)
		assert(sys_rcr2() == (uint32)&(ptr[5*Mega])) ;
f0127fc7:	e8 fb 52 fe ff       	call   f010d2c7 <sys_rcr2>
f0127fcc:	8b 55 a4             	mov    -0x5c(%ebp),%edx
f0127fcf:	81 c2 00 00 50 00    	add    $0x500000,%edx
f0127fd5:	39 d0                	cmp    %edx,%eax
f0127fd7:	74 19                	je     f0127ff2 <test_kshrink+0x972>
f0127fd9:	68 14 ae 13 f0       	push   $0xf013ae14
f0127fde:	68 fd ac 13 f0       	push   $0xf013acfd
f0127fe3:	68 6f 0c 00 00       	push   $0xc6f
f0127fe8:	68 32 9f 13 f0       	push   $0xf0139f32
f0127fed:	e8 be 81 fd ff       	call   f01001b0 <_panic>

		ptr[5*Mega+4*kilo] = 10;
f0127ff2:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0127ff5:	05 00 10 50 00       	add    $0x501000,%eax
f0127ffa:	c6 00 0a             	movb   $0xa,(%eax)
		assert(sys_rcr2() == (uint32)&(ptr[5*Mega+4*kilo])) ;
f0127ffd:	e8 c5 52 fe ff       	call   f010d2c7 <sys_rcr2>
f0128002:	8b 55 a4             	mov    -0x5c(%ebp),%edx
f0128005:	81 c2 00 10 50 00    	add    $0x501000,%edx
f012800b:	39 d0                	cmp    %edx,%eax
f012800d:	74 19                	je     f0128028 <test_kshrink+0x9a8>
f012800f:	68 3c ae 13 f0       	push   $0xf013ae3c
f0128014:	68 fd ac 13 f0       	push   $0xf013acfd
f0128019:	68 72 0c 00 00       	push   $0xc72
f012801e:	68 32 9f 13 f0       	push   $0xf0139f32
f0128023:	e8 88 81 fd ff       	call   f01001b0 <_panic>

		ptr[6*Mega - kilo] = 10;
f0128028:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012802b:	05 00 fc 5f 00       	add    $0x5ffc00,%eax
f0128030:	c6 00 0a             	movb   $0xa,(%eax)
		assert(sys_rcr2() == (uint32)&(ptr[6*Mega - kilo])) ;
f0128033:	e8 8f 52 fe ff       	call   f010d2c7 <sys_rcr2>
f0128038:	8b 55 a4             	mov    -0x5c(%ebp),%edx
f012803b:	81 c2 00 fc 5f 00    	add    $0x5ffc00,%edx
f0128041:	39 d0                	cmp    %edx,%eax
f0128043:	74 19                	je     f012805e <test_kshrink+0x9de>
f0128045:	68 68 ae 13 f0       	push   $0xf013ae68
f012804a:	68 fd ac 13 f0       	push   $0xf013acfd
f012804f:	68 75 0c 00 00       	push   $0xc75
f0128054:	68 32 9f 13 f0       	push   $0xf0139f32
f0128059:	e8 52 81 fd ff       	call   f01001b0 <_panic>

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f012805e:	83 ec 0c             	sub    $0xc,%esp
f0128061:	6a 00                	push   $0x0
f0128063:	e8 71 52 fe ff       	call   f010d2d9 <sys_bypassPageFault>
f0128068:	83 c4 10             	add    $0x10,%esp
	}

	//Shrink it again to 2 MB instead of 5 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f012806b:	e8 ce 4d fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0128070:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128073:	e8 0c c6 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0128078:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kshrink(2*Mega) ;
f012807b:	83 ec 0c             	sub    $0xc,%esp
f012807e:	68 00 00 20 00       	push   $0x200000
f0128083:	e8 ca 03 fe ff       	call   f0108452 <kshrink>
f0128088:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f012808b:	e8 f4 c5 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0128090:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128093:	74 19                	je     f01280ae <test_kshrink+0xa2e>
f0128095:	68 cc ac 13 f0       	push   $0xf013accc
f012809a:	68 fd ac 13 f0       	push   $0xf013acfd
f012809f:	68 82 0c 00 00       	push   $0xc82
f01280a4:	68 32 9f 13 f0       	push   $0xf0139f32
f01280a9:	e8 02 81 fd ff       	call   f01001b0 <_panic>
		assert(sys_calculate_free_frames() - freeFrames == 768) ;
f01280ae:	e8 8b 4d fe ff       	call   f010ce3e <sys_calculate_free_frames>
f01280b3:	89 c2                	mov    %eax,%edx
f01280b5:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01280b8:	29 c2                	sub    %eax,%edx
f01280ba:	89 d0                	mov    %edx,%eax
f01280bc:	3d 00 03 00 00       	cmp    $0x300,%eax
f01280c1:	74 19                	je     f01280dc <test_kshrink+0xa5c>
f01280c3:	68 94 ae 13 f0       	push   $0xf013ae94
f01280c8:	68 fd ac 13 f0       	push   $0xf013acfd
f01280cd:	68 83 0c 00 00       	push   $0xc83
f01280d2:	68 32 9f 13 f0       	push   $0xf0139f32
f01280d7:	e8 d4 80 fd ff       	call   f01001b0 <_panic>


	//Allocate after shrinking last var
	{
		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f01280dc:	e8 5d 4d fe ff       	call   f010ce3e <sys_calculate_free_frames>
f01280e1:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01280e4:	e8 9b c5 fd ff       	call   f0104684 <pf_calculate_free_frames>
f01280e9:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(4*Mega);
f01280ec:	83 ec 0c             	sub    $0xc,%esp
f01280ef:	68 00 00 40 00       	push   $0x400000
f01280f4:	e8 5a 01 fe ff       	call   f0108253 <kmalloc>
f01280f9:	83 c4 10             	add    $0x10,%esp
f01280fc:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
		cprintf("ACTUAL = %x, DESIRED = %x\n", (uint32) ptr_allocations[7] ,(ACTUAL_START + 7*Mega + 16*kilo + 2*Mega));
f0128102:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f0128109:	10 00 00 
f012810c:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0128111:	0f b6 d0             	movzbl %al,%edx
f0128114:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012811a:	01 d0                	add    %edx,%eax
f012811c:	48                   	dec    %eax
f012811d:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f0128123:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0128129:	ba 00 00 00 00       	mov    $0x0,%edx
f012812e:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f0128134:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012813a:	29 d0                	sub    %edx,%eax
f012813c:	89 c1                	mov    %eax,%ecx
f012813e:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f0128145:	10 00 00 
f0128148:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f012814d:	0f b6 c0             	movzbl %al,%eax
f0128150:	c1 e0 04             	shl    $0x4,%eax
f0128153:	89 c2                	mov    %eax,%edx
f0128155:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012815b:	01 d0                	add    %edx,%eax
f012815d:	48                   	dec    %eax
f012815e:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f0128164:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012816a:	ba 00 00 00 00       	mov    $0x0,%edx
f012816f:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f0128175:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012817b:	29 d0                	sub    %edx,%eax
f012817d:	01 c8                	add    %ecx,%eax
f012817f:	8d 90 00 80 90 f6    	lea    -0x96f8000(%eax),%edx
f0128185:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012818b:	83 ec 04             	sub    $0x4,%esp
f012818e:	52                   	push   %edx
f012818f:	50                   	push   %eax
f0128190:	68 c4 ae 13 f0       	push   $0xf013aec4
f0128195:	e8 97 8c fd ff       	call   f0100e31 <cprintf>
f012819a:	83 c4 10             	add    $0x10,%esp
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 7*Mega + 16*kilo + 2*Mega)) panic("Wrong start address after kshrink()... check the updating of your data structures");
f012819d:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f01281a3:	89 c1                	mov    %eax,%ecx
f01281a5:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f01281ac:	10 00 00 
f01281af:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f01281b4:	0f b6 d0             	movzbl %al,%edx
f01281b7:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f01281bd:	01 d0                	add    %edx,%eax
f01281bf:	48                   	dec    %eax
f01281c0:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f01281c6:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01281cc:	ba 00 00 00 00       	mov    $0x0,%edx
f01281d1:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f01281d7:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01281dd:	29 d0                	sub    %edx,%eax
f01281df:	89 c3                	mov    %eax,%ebx
f01281e1:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f01281e8:	10 00 00 
f01281eb:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f01281f0:	0f b6 c0             	movzbl %al,%eax
f01281f3:	c1 e0 04             	shl    $0x4,%eax
f01281f6:	89 c2                	mov    %eax,%edx
f01281f8:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01281fe:	01 d0                	add    %edx,%eax
f0128200:	48                   	dec    %eax
f0128201:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f0128207:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012820d:	ba 00 00 00 00       	mov    $0x0,%edx
f0128212:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f0128218:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012821e:	29 d0                	sub    %edx,%eax
f0128220:	01 d8                	add    %ebx,%eax
f0128222:	2d 00 80 6f 09       	sub    $0x96f8000,%eax
f0128227:	39 c1                	cmp    %eax,%ecx
f0128229:	74 17                	je     f0128242 <test_kshrink+0xbc2>
f012822b:	83 ec 04             	sub    $0x4,%esp
f012822e:	68 e0 ae 13 f0       	push   $0xf013aee0
f0128233:	68 8e 0c 00 00       	push   $0xc8e
f0128238:	68 32 9f 13 f0       	push   $0xf0139f32
f012823d:	e8 6e 7f fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128242:	e8 3d c4 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0128247:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012824a:	74 17                	je     f0128263 <test_kshrink+0xbe3>
f012824c:	83 ec 04             	sub    $0x4,%esp
f012824f:	68 4c 9f 13 f0       	push   $0xf0139f4c
f0128254:	68 8f 0c 00 00       	push   $0xc8f
f0128259:	68 32 9f 13 f0       	push   $0xf0139f32
f012825e:	e8 4d 7f fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4*Mega/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128263:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128266:	e8 d3 4b fe ff       	call   f010ce3e <sys_calculate_free_frames>
f012826b:	29 c3                	sub    %eax,%ebx
f012826d:	89 d8                	mov    %ebx,%eax
f012826f:	3d 00 04 00 00       	cmp    $0x400,%eax
f0128274:	74 17                	je     f012828d <test_kshrink+0xc0d>
f0128276:	83 ec 04             	sub    $0x4,%esp
f0128279:	68 b4 9f 13 f0       	push   $0xf0139fb4
f012827e:	68 90 0c 00 00       	push   $0xc90
f0128283:	68 32 9f 13 f0       	push   $0xf0139f32
f0128288:	e8 23 7f fd ff       	call   f01001b0 <_panic>


	//kfree the shrunk variable
	{
		//kfree 2 MB (shrunk)
		freeFrames = sys_calculate_free_frames() ;
f012828d:	e8 ac 4b fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0128292:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128295:	e8 ea c3 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012829a:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[6]);
f012829d:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f01282a3:	83 ec 0c             	sub    $0xc,%esp
f01282a6:	50                   	push   %eax
f01282a7:	e8 32 01 fe ff       	call   f01083de <kfree>
f01282ac:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01282af:	e8 d0 c3 fd ff       	call   f0104684 <pf_calculate_free_frames>
f01282b4:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01282b7:	74 17                	je     f01282d0 <test_kshrink+0xc50>
f01282b9:	83 ec 04             	sub    $0x4,%esp
f01282bc:	68 4c 9f 13 f0       	push   $0xf0139f4c
f01282c1:	68 9a 0c 00 00       	push   $0xc9a
f01282c6:	68 32 9f 13 f0       	push   $0xf0139f32
f01282cb:	e8 e0 7e fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f01282d0:	e8 69 4b fe ff       	call   f010ce3e <sys_calculate_free_frames>
f01282d5:	89 c2                	mov    %eax,%edx
f01282d7:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01282da:	29 c2                	sub    %eax,%edx
f01282dc:	89 d0                	mov    %edx,%eax
f01282de:	3d 00 02 00 00       	cmp    $0x200,%eax
f01282e3:	74 17                	je     f01282fc <test_kshrink+0xc7c>
f01282e5:	83 ec 04             	sub    $0x4,%esp
f01282e8:	68 e4 a7 13 f0       	push   $0xf013a7e4
f01282ed:	68 9b 0c 00 00       	push   $0xc9b
f01282f2:	68 32 9f 13 f0       	push   $0xf0139f32
f01282f7:	e8 b4 7e fd ff       	call   f01001b0 <_panic>
	}

	//Shrink last allocated variable to 4 MB - 20 kilo instead of 4 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f01282fc:	e8 3d 4b fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0128301:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128304:	e8 7b c3 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0128309:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kshrink(4*Mega - 20*kilo) ;
f012830c:	83 ec 0c             	sub    $0xc,%esp
f012830f:	68 00 b0 3f 00       	push   $0x3fb000
f0128314:	e8 39 01 fe ff       	call   f0108452 <kshrink>
f0128319:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f012831c:	e8 63 c3 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0128321:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128324:	74 19                	je     f012833f <test_kshrink+0xcbf>
f0128326:	68 cc ac 13 f0       	push   $0xf013accc
f012832b:	68 fd ac 13 f0       	push   $0xf013acfd
f0128330:	68 a5 0c 00 00       	push   $0xca5
f0128335:	68 32 9f 13 f0       	push   $0xf0139f32
f012833a:	e8 71 7e fd ff       	call   f01001b0 <_panic>
		assert(sys_calculate_free_frames() - freeFrames == 5) ;
f012833f:	e8 fa 4a fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0128344:	89 c2                	mov    %eax,%edx
f0128346:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0128349:	29 c2                	sub    %eax,%edx
f012834b:	89 d0                	mov    %edx,%eax
f012834d:	83 f8 05             	cmp    $0x5,%eax
f0128350:	74 19                	je     f012836b <test_kshrink+0xceb>
f0128352:	68 34 af 13 f0       	push   $0xf013af34
f0128357:	68 fd ac 13 f0       	push   $0xf013acfd
f012835c:	68 a6 0c 00 00       	push   $0xca6
f0128361:	68 32 9f 13 f0       	push   $0xf0139f32
f0128366:	e8 45 7e fd ff       	call   f01001b0 <_panic>
	}

	cprintf("\nCongratulations!! your modification is run successfully.\n");
f012836b:	83 ec 0c             	sub    $0xc,%esp
f012836e:	68 90 ac 13 f0       	push   $0xf013ac90
f0128373:	e8 b9 8a fd ff       	call   f0100e31 <cprintf>
f0128378:	83 c4 10             	add    $0x10,%esp

	return 1;
f012837b:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0128380:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0128383:	5b                   	pop    %ebx
f0128384:	5f                   	pop    %edi
f0128385:	5d                   	pop    %ebp
f0128386:	c3                   	ret    

f0128387 <test_kfreelast>:


int test_kfreelast()
{
f0128387:	55                   	push   %ebp
f0128388:	89 e5                	mov    %esp,%ebp
f012838a:	57                   	push   %edi
f012838b:	53                   	push   %ebx
f012838c:	81 ec 20 02 00 00    	sub    $0x220,%esp
	char minByte = 1<<7;
f0128392:	c6 45 eb 80          	movb   $0x80,-0x15(%ebp)
	char maxByte = 0x7F;
f0128396:	c6 45 ea 7f          	movb   $0x7f,-0x16(%ebp)
	short minShort = 1<<15 ;
f012839a:	66 c7 45 e8 00 80    	movw   $0x8000,-0x18(%ebp)
	short maxShort = 0x7FFF;
f01283a0:	66 c7 45 e6 ff 7f    	movw   $0x7fff,-0x1a(%ebp)
	int minInt = 1<<31 ;
f01283a6:	c7 45 e0 00 00 00 80 	movl   $0x80000000,-0x20(%ebp)
	int maxInt = 0x7FFFFFFF;
f01283ad:	c7 45 dc ff ff ff 7f 	movl   $0x7fffffff,-0x24(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f01283b4:	e8 85 4a fe ff       	call   f010ce3e <sys_calculate_free_frames>
f01283b9:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//malloc some spaces
	int i, ce, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f01283bc:	8d 95 84 fe ff ff    	lea    -0x17c(%ebp),%edx
f01283c2:	b9 14 00 00 00       	mov    $0x14,%ecx
f01283c7:	b8 00 00 00 00       	mov    $0x0,%eax
f01283cc:	89 d7                	mov    %edx,%edi
f01283ce:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f01283d0:	8d 95 34 fe ff ff    	lea    -0x1cc(%ebp),%edx
f01283d6:	b9 14 00 00 00       	mov    $0x14,%ecx
f01283db:	b8 00 00 00 00       	mov    $0x0,%eax
f01283e0:	89 d7                	mov    %edx,%edi
f01283e2:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f01283e4:	8d 95 e4 fd ff ff    	lea    -0x21c(%ebp),%edx
f01283ea:	b9 14 00 00 00       	mov    $0x14,%ecx
f01283ef:	b8 00 00 00 00       	mov    $0x0,%eax
f01283f4:	89 d7                	mov    %edx,%edi
f01283f6:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01283f8:	e8 41 4a fe ff       	call   f010ce3e <sys_calculate_free_frames>
f01283fd:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128400:	e8 7f c2 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0128405:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0128408:	83 ec 0c             	sub    $0xc,%esp
f012840b:	68 00 fc 1f 00       	push   $0x1ffc00
f0128410:	e8 3e fe fd ff       	call   f0108253 <kmalloc>
f0128415:	83 c4 10             	add    $0x10,%esp
f0128418:	89 85 e4 fd ff ff    	mov    %eax,-0x21c(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012841e:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0128424:	89 c1                	mov    %eax,%ecx
f0128426:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f012842d:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0128432:	0f b6 d0             	movzbl %al,%edx
f0128435:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0128438:	01 d0                	add    %edx,%eax
f012843a:	48                   	dec    %eax
f012843b:	89 45 c8             	mov    %eax,-0x38(%ebp)
f012843e:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0128441:	ba 00 00 00 00       	mov    $0x0,%edx
f0128446:	f7 75 cc             	divl   -0x34(%ebp)
f0128449:	8b 45 c8             	mov    -0x38(%ebp),%eax
f012844c:	29 d0                	sub    %edx,%eax
f012844e:	89 c3                	mov    %eax,%ebx
f0128450:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f0128457:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f012845c:	0f b6 c0             	movzbl %al,%eax
f012845f:	c1 e0 04             	shl    $0x4,%eax
f0128462:	89 c2                	mov    %eax,%edx
f0128464:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0128467:	01 d0                	add    %edx,%eax
f0128469:	48                   	dec    %eax
f012846a:	89 45 c0             	mov    %eax,-0x40(%ebp)
f012846d:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0128470:	ba 00 00 00 00       	mov    $0x0,%edx
f0128475:	f7 75 c4             	divl   -0x3c(%ebp)
f0128478:	8b 45 c0             	mov    -0x40(%ebp),%eax
f012847b:	29 d0                	sub    %edx,%eax
f012847d:	01 d8                	add    %ebx,%eax
f012847f:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0128484:	39 c1                	cmp    %eax,%ecx
f0128486:	74 17                	je     f012849f <test_kfreelast+0x118>
f0128488:	83 ec 04             	sub    $0x4,%esp
f012848b:	68 18 a0 13 f0       	push   $0xf013a018
f0128490:	68 ca 0c 00 00       	push   $0xcca
f0128495:	68 32 9f 13 f0       	push   $0xf0139f32
f012849a:	e8 11 7d fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012849f:	e8 e0 c1 fd ff       	call   f0104684 <pf_calculate_free_frames>
f01284a4:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f01284a7:	74 17                	je     f01284c0 <test_kfreelast+0x139>
f01284a9:	83 ec 04             	sub    $0x4,%esp
f01284ac:	68 4c 9f 13 f0       	push   $0xf0139f4c
f01284b1:	68 cb 0c 00 00       	push   $0xccb
f01284b6:	68 32 9f 13 f0       	push   $0xf0139f32
f01284bb:	e8 f0 7c fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01284c0:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f01284c3:	e8 76 49 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f01284c8:	29 c3                	sub    %eax,%ebx
f01284ca:	89 d8                	mov    %ebx,%eax
f01284cc:	3d 00 02 00 00       	cmp    $0x200,%eax
f01284d1:	74 17                	je     f01284ea <test_kfreelast+0x163>
f01284d3:	83 ec 04             	sub    $0x4,%esp
f01284d6:	68 b4 9f 13 f0       	push   $0xf0139fb4
f01284db:	68 cc 0c 00 00       	push   $0xccc
f01284e0:	68 32 9f 13 f0       	push   $0xf0139f32
f01284e5:	e8 c6 7c fd ff       	call   f01001b0 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f01284ea:	c7 85 84 fe ff ff ff 	movl   $0x1ffbff,-0x17c(%ebp)
f01284f1:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01284f4:	e8 45 49 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f01284f9:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01284fc:	e8 83 c1 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0128501:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0128504:	83 ec 0c             	sub    $0xc,%esp
f0128507:	68 00 fc 1f 00       	push   $0x1ffc00
f012850c:	e8 42 fd fd ff       	call   f0108253 <kmalloc>
f0128511:	83 c4 10             	add    $0x10,%esp
f0128514:	89 85 e8 fd ff ff    	mov    %eax,-0x218(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012851a:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0128520:	89 c1                	mov    %eax,%ecx
f0128522:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f0128529:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f012852e:	0f b6 d0             	movzbl %al,%edx
f0128531:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0128534:	01 d0                	add    %edx,%eax
f0128536:	48                   	dec    %eax
f0128537:	89 45 b8             	mov    %eax,-0x48(%ebp)
f012853a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012853d:	ba 00 00 00 00       	mov    $0x0,%edx
f0128542:	f7 75 bc             	divl   -0x44(%ebp)
f0128545:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0128548:	29 d0                	sub    %edx,%eax
f012854a:	89 c3                	mov    %eax,%ebx
f012854c:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f0128553:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0128558:	0f b6 c0             	movzbl %al,%eax
f012855b:	c1 e0 04             	shl    $0x4,%eax
f012855e:	89 c2                	mov    %eax,%edx
f0128560:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0128563:	01 d0                	add    %edx,%eax
f0128565:	48                   	dec    %eax
f0128566:	89 45 b0             	mov    %eax,-0x50(%ebp)
f0128569:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012856c:	ba 00 00 00 00       	mov    $0x0,%edx
f0128571:	f7 75 b4             	divl   -0x4c(%ebp)
f0128574:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0128577:	29 d0                	sub    %edx,%eax
f0128579:	01 d8                	add    %ebx,%eax
f012857b:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0128580:	39 c1                	cmp    %eax,%ecx
f0128582:	74 17                	je     f012859b <test_kfreelast+0x214>
f0128584:	83 ec 04             	sub    $0x4,%esp
f0128587:	68 18 a0 13 f0       	push   $0xf013a018
f012858c:	68 d3 0c 00 00       	push   $0xcd3
f0128591:	68 32 9f 13 f0       	push   $0xf0139f32
f0128596:	e8 15 7c fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012859b:	e8 e4 c0 fd ff       	call   f0104684 <pf_calculate_free_frames>
f01285a0:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f01285a3:	74 17                	je     f01285bc <test_kfreelast+0x235>
f01285a5:	83 ec 04             	sub    $0x4,%esp
f01285a8:	68 4c 9f 13 f0       	push   $0xf0139f4c
f01285ad:	68 d4 0c 00 00       	push   $0xcd4
f01285b2:	68 32 9f 13 f0       	push   $0xf0139f32
f01285b7:	e8 f4 7b fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01285bc:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f01285bf:	e8 7a 48 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f01285c4:	29 c3                	sub    %eax,%ebx
f01285c6:	89 d8                	mov    %ebx,%eax
f01285c8:	3d 00 02 00 00       	cmp    $0x200,%eax
f01285cd:	74 17                	je     f01285e6 <test_kfreelast+0x25f>
f01285cf:	83 ec 04             	sub    $0x4,%esp
f01285d2:	68 b4 9f 13 f0       	push   $0xf0139fb4
f01285d7:	68 d5 0c 00 00       	push   $0xcd5
f01285dc:	68 32 9f 13 f0       	push   $0xf0139f32
f01285e1:	e8 ca 7b fd ff       	call   f01001b0 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f01285e6:	c7 85 88 fe ff ff ff 	movl   $0x1ffbff,-0x178(%ebp)
f01285ed:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01285f0:	e8 49 48 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f01285f5:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01285f8:	e8 87 c0 fd ff       	call   f0104684 <pf_calculate_free_frames>
f01285fd:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0128600:	83 ec 0c             	sub    $0xc,%esp
f0128603:	68 00 08 00 00       	push   $0x800
f0128608:	e8 46 fc fd ff       	call   f0108253 <kmalloc>
f012860d:	83 c4 10             	add    $0x10,%esp
f0128610:	89 85 ec fd ff ff    	mov    %eax,-0x214(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128616:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f012861c:	89 c1                	mov    %eax,%ecx
f012861e:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f0128625:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f012862a:	0f b6 d0             	movzbl %al,%edx
f012862d:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0128630:	01 d0                	add    %edx,%eax
f0128632:	48                   	dec    %eax
f0128633:	89 45 a8             	mov    %eax,-0x58(%ebp)
f0128636:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0128639:	ba 00 00 00 00       	mov    $0x0,%edx
f012863e:	f7 75 ac             	divl   -0x54(%ebp)
f0128641:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0128644:	29 d0                	sub    %edx,%eax
f0128646:	89 c3                	mov    %eax,%ebx
f0128648:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f012864f:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0128654:	0f b6 c0             	movzbl %al,%eax
f0128657:	c1 e0 04             	shl    $0x4,%eax
f012865a:	89 c2                	mov    %eax,%edx
f012865c:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012865f:	01 d0                	add    %edx,%eax
f0128661:	48                   	dec    %eax
f0128662:	89 45 a0             	mov    %eax,-0x60(%ebp)
f0128665:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0128668:	ba 00 00 00 00       	mov    $0x0,%edx
f012866d:	f7 75 a4             	divl   -0x5c(%ebp)
f0128670:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0128673:	29 d0                	sub    %edx,%eax
f0128675:	01 d8                	add    %ebx,%eax
f0128677:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f012867c:	39 c1                	cmp    %eax,%ecx
f012867e:	74 17                	je     f0128697 <test_kfreelast+0x310>
f0128680:	83 ec 04             	sub    $0x4,%esp
f0128683:	68 18 a0 13 f0       	push   $0xf013a018
f0128688:	68 dc 0c 00 00       	push   $0xcdc
f012868d:	68 32 9f 13 f0       	push   $0xf0139f32
f0128692:	e8 19 7b fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128697:	e8 e8 bf fd ff       	call   f0104684 <pf_calculate_free_frames>
f012869c:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012869f:	74 17                	je     f01286b8 <test_kfreelast+0x331>
f01286a1:	83 ec 04             	sub    $0x4,%esp
f01286a4:	68 4c 9f 13 f0       	push   $0xf0139f4c
f01286a9:	68 dd 0c 00 00       	push   $0xcdd
f01286ae:	68 32 9f 13 f0       	push   $0xf0139f32
f01286b3:	e8 f8 7a fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01286b8:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f01286bb:	e8 7e 47 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f01286c0:	29 c3                	sub    %eax,%ebx
f01286c2:	89 d8                	mov    %ebx,%eax
f01286c4:	83 f8 01             	cmp    $0x1,%eax
f01286c7:	74 17                	je     f01286e0 <test_kfreelast+0x359>
f01286c9:	83 ec 04             	sub    $0x4,%esp
f01286cc:	68 b4 9f 13 f0       	push   $0xf0139fb4
f01286d1:	68 de 0c 00 00       	push   $0xcde
f01286d6:	68 32 9f 13 f0       	push   $0xf0139f32
f01286db:	e8 d0 7a fd ff       	call   f01001b0 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f01286e0:	c7 85 8c fe ff ff ff 	movl   $0x7ff,-0x174(%ebp)
f01286e7:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f01286ea:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f01286f0:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f01286f3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01286fa:	eb 0e                	jmp    f012870a <test_kfreelast+0x383>
		{
			ptr[i] = 2 ;
f01286fc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01286ff:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0128702:	01 d0                	add    %edx,%eax
f0128704:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0128707:	ff 45 f4             	incl   -0xc(%ebp)
f012870a:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0128710:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128713:	7f e7                	jg     f01286fc <test_kfreelast+0x375>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0128715:	e8 24 47 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f012871a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012871d:	e8 62 bf fd ff       	call   f0104684 <pf_calculate_free_frames>
f0128722:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0128725:	83 ec 0c             	sub    $0xc,%esp
f0128728:	68 00 08 00 00       	push   $0x800
f012872d:	e8 21 fb fd ff       	call   f0108253 <kmalloc>
f0128732:	83 c4 10             	add    $0x10,%esp
f0128735:	89 85 f0 fd ff ff    	mov    %eax,-0x210(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012873b:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f0128741:	89 c1                	mov    %eax,%ecx
f0128743:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f012874a:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f012874f:	0f b6 d0             	movzbl %al,%edx
f0128752:	8b 45 98             	mov    -0x68(%ebp),%eax
f0128755:	01 d0                	add    %edx,%eax
f0128757:	48                   	dec    %eax
f0128758:	89 45 94             	mov    %eax,-0x6c(%ebp)
f012875b:	8b 45 94             	mov    -0x6c(%ebp),%eax
f012875e:	ba 00 00 00 00       	mov    $0x0,%edx
f0128763:	f7 75 98             	divl   -0x68(%ebp)
f0128766:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0128769:	29 d0                	sub    %edx,%eax
f012876b:	89 c3                	mov    %eax,%ebx
f012876d:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f0128774:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0128779:	0f b6 c0             	movzbl %al,%eax
f012877c:	c1 e0 04             	shl    $0x4,%eax
f012877f:	89 c2                	mov    %eax,%edx
f0128781:	8b 45 90             	mov    -0x70(%ebp),%eax
f0128784:	01 d0                	add    %edx,%eax
f0128786:	48                   	dec    %eax
f0128787:	89 45 8c             	mov    %eax,-0x74(%ebp)
f012878a:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012878d:	ba 00 00 00 00       	mov    $0x0,%edx
f0128792:	f7 75 90             	divl   -0x70(%ebp)
f0128795:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0128798:	29 d0                	sub    %edx,%eax
f012879a:	01 d8                	add    %ebx,%eax
f012879c:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f01287a1:	39 c1                	cmp    %eax,%ecx
f01287a3:	74 17                	je     f01287bc <test_kfreelast+0x435>
f01287a5:	83 ec 04             	sub    $0x4,%esp
f01287a8:	68 18 a0 13 f0       	push   $0xf013a018
f01287ad:	68 ea 0c 00 00       	push   $0xcea
f01287b2:	68 32 9f 13 f0       	push   $0xf0139f32
f01287b7:	e8 f4 79 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01287bc:	e8 c3 be fd ff       	call   f0104684 <pf_calculate_free_frames>
f01287c1:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f01287c4:	74 17                	je     f01287dd <test_kfreelast+0x456>
f01287c6:	83 ec 04             	sub    $0x4,%esp
f01287c9:	68 4c 9f 13 f0       	push   $0xf0139f4c
f01287ce:	68 eb 0c 00 00       	push   $0xceb
f01287d3:	68 32 9f 13 f0       	push   $0xf0139f32
f01287d8:	e8 d3 79 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01287dd:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f01287e0:	e8 59 46 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f01287e5:	29 c3                	sub    %eax,%ebx
f01287e7:	89 d8                	mov    %ebx,%eax
f01287e9:	83 f8 01             	cmp    $0x1,%eax
f01287ec:	74 17                	je     f0128805 <test_kfreelast+0x47e>
f01287ee:	83 ec 04             	sub    $0x4,%esp
f01287f1:	68 b4 9f 13 f0       	push   $0xf0139fb4
f01287f6:	68 ec 0c 00 00       	push   $0xcec
f01287fb:	68 32 9f 13 f0       	push   $0xf0139f32
f0128800:	e8 ab 79 fd ff       	call   f01001b0 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f0128805:	c7 85 90 fe ff ff ff 	movl   $0x7ff,-0x170(%ebp)
f012880c:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f012880f:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f0128815:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0128818:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012881f:	eb 0e                	jmp    f012882f <test_kfreelast+0x4a8>
		{
			ptr[i] = 3 ;
f0128821:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0128824:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0128827:	01 d0                	add    %edx,%eax
f0128829:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f012882c:	ff 45 f4             	incl   -0xc(%ebp)
f012882f:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0128835:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128838:	7f e7                	jg     f0128821 <test_kfreelast+0x49a>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f012883a:	e8 ff 45 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f012883f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128842:	e8 3d be fd ff       	call   f0104684 <pf_calculate_free_frames>
f0128847:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f012884a:	83 ec 0c             	sub    $0xc,%esp
f012884d:	68 00 1c 00 00       	push   $0x1c00
f0128852:	e8 fc f9 fd ff       	call   f0108253 <kmalloc>
f0128857:	83 c4 10             	add    $0x10,%esp
f012885a:	89 85 f4 fd ff ff    	mov    %eax,-0x20c(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128860:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f0128866:	89 c1                	mov    %eax,%ecx
f0128868:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f012886f:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0128874:	0f b6 d0             	movzbl %al,%edx
f0128877:	8b 45 88             	mov    -0x78(%ebp),%eax
f012887a:	01 d0                	add    %edx,%eax
f012887c:	48                   	dec    %eax
f012887d:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0128880:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0128883:	ba 00 00 00 00       	mov    $0x0,%edx
f0128888:	f7 75 88             	divl   -0x78(%ebp)
f012888b:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012888e:	29 d0                	sub    %edx,%eax
f0128890:	89 c3                	mov    %eax,%ebx
f0128892:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f0128899:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f012889e:	0f b6 c0             	movzbl %al,%eax
f01288a1:	c1 e0 04             	shl    $0x4,%eax
f01288a4:	89 c2                	mov    %eax,%edx
f01288a6:	8b 45 80             	mov    -0x80(%ebp),%eax
f01288a9:	01 d0                	add    %edx,%eax
f01288ab:	48                   	dec    %eax
f01288ac:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f01288b2:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01288b8:	ba 00 00 00 00       	mov    $0x0,%edx
f01288bd:	f7 75 80             	divl   -0x80(%ebp)
f01288c0:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01288c6:	29 d0                	sub    %edx,%eax
f01288c8:	01 d8                	add    %ebx,%eax
f01288ca:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f01288cf:	39 c1                	cmp    %eax,%ecx
f01288d1:	74 17                	je     f01288ea <test_kfreelast+0x563>
f01288d3:	83 ec 04             	sub    $0x4,%esp
f01288d6:	68 18 a0 13 f0       	push   $0xf013a018
f01288db:	68 f8 0c 00 00       	push   $0xcf8
f01288e0:	68 32 9f 13 f0       	push   $0xf0139f32
f01288e5:	e8 c6 78 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01288ea:	e8 95 bd fd ff       	call   f0104684 <pf_calculate_free_frames>
f01288ef:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f01288f2:	74 17                	je     f012890b <test_kfreelast+0x584>
f01288f4:	83 ec 04             	sub    $0x4,%esp
f01288f7:	68 4c 9f 13 f0       	push   $0xf0139f4c
f01288fc:	68 f9 0c 00 00       	push   $0xcf9
f0128901:	68 32 9f 13 f0       	push   $0xf0139f32
f0128906:	e8 a5 78 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f012890b:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012890e:	e8 2b 45 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0128913:	29 c3                	sub    %eax,%ebx
f0128915:	89 d8                	mov    %ebx,%eax
f0128917:	83 f8 02             	cmp    $0x2,%eax
f012891a:	74 17                	je     f0128933 <test_kfreelast+0x5ac>
f012891c:	83 ec 04             	sub    $0x4,%esp
f012891f:	68 b4 9f 13 f0       	push   $0xf0139fb4
f0128924:	68 fa 0c 00 00       	push   $0xcfa
f0128929:	68 32 9f 13 f0       	push   $0xf0139f32
f012892e:	e8 7d 78 fd ff       	call   f01001b0 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f0128933:	c7 85 94 fe ff ff ff 	movl   $0x1bff,-0x16c(%ebp)
f012893a:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f012893d:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f0128943:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0128946:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012894d:	eb 0e                	jmp    f012895d <test_kfreelast+0x5d6>
		{
			ptr[i] = 4 ;
f012894f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0128952:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0128955:	01 d0                	add    %edx,%eax
f0128957:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f012895a:	ff 45 f4             	incl   -0xc(%ebp)
f012895d:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0128963:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128966:	7f e7                	jg     f012894f <test_kfreelast+0x5c8>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0128968:	e8 d1 44 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f012896d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128970:	e8 0f bd fd ff       	call   f0104684 <pf_calculate_free_frames>
f0128975:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0128978:	83 ec 0c             	sub    $0xc,%esp
f012897b:	68 00 fc 2f 00       	push   $0x2ffc00
f0128980:	e8 ce f8 fd ff       	call   f0108253 <kmalloc>
f0128985:	83 c4 10             	add    $0x10,%esp
f0128988:	89 85 f8 fd ff ff    	mov    %eax,-0x208(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012898e:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f0128994:	89 c1                	mov    %eax,%ecx
f0128996:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f012899d:	10 00 00 
f01289a0:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f01289a5:	0f b6 d0             	movzbl %al,%edx
f01289a8:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01289ae:	01 d0                	add    %edx,%eax
f01289b0:	48                   	dec    %eax
f01289b1:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f01289b7:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01289bd:	ba 00 00 00 00       	mov    $0x0,%edx
f01289c2:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f01289c8:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01289ce:	29 d0                	sub    %edx,%eax
f01289d0:	89 c3                	mov    %eax,%ebx
f01289d2:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f01289d9:	10 00 00 
f01289dc:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f01289e1:	0f b6 c0             	movzbl %al,%eax
f01289e4:	c1 e0 04             	shl    $0x4,%eax
f01289e7:	89 c2                	mov    %eax,%edx
f01289e9:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01289ef:	01 d0                	add    %edx,%eax
f01289f1:	48                   	dec    %eax
f01289f2:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f01289f8:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01289fe:	ba 00 00 00 00       	mov    $0x0,%edx
f0128a03:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f0128a09:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0128a0f:	29 d0                	sub    %edx,%eax
f0128a11:	01 d8                	add    %ebx,%eax
f0128a13:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0128a18:	39 c1                	cmp    %eax,%ecx
f0128a1a:	74 17                	je     f0128a33 <test_kfreelast+0x6ac>
f0128a1c:	83 ec 04             	sub    $0x4,%esp
f0128a1f:	68 18 a0 13 f0       	push   $0xf013a018
f0128a24:	68 06 0d 00 00       	push   $0xd06
f0128a29:	68 32 9f 13 f0       	push   $0xf0139f32
f0128a2e:	e8 7d 77 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128a33:	e8 4c bc fd ff       	call   f0104684 <pf_calculate_free_frames>
f0128a38:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0128a3b:	74 17                	je     f0128a54 <test_kfreelast+0x6cd>
f0128a3d:	83 ec 04             	sub    $0x4,%esp
f0128a40:	68 4c 9f 13 f0       	push   $0xf0139f4c
f0128a45:	68 07 0d 00 00       	push   $0xd07
f0128a4a:	68 32 9f 13 f0       	push   $0xf0139f32
f0128a4f:	e8 5c 77 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128a54:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0128a57:	e8 e2 43 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0128a5c:	29 c3                	sub    %eax,%ebx
f0128a5e:	89 d8                	mov    %ebx,%eax
f0128a60:	3d 00 03 00 00       	cmp    $0x300,%eax
f0128a65:	74 17                	je     f0128a7e <test_kfreelast+0x6f7>
f0128a67:	83 ec 04             	sub    $0x4,%esp
f0128a6a:	68 b4 9f 13 f0       	push   $0xf0139fb4
f0128a6f:	68 08 0d 00 00       	push   $0xd08
f0128a74:	68 32 9f 13 f0       	push   $0xf0139f32
f0128a79:	e8 32 77 fd ff       	call   f01001b0 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f0128a7e:	c7 85 98 fe ff ff ff 	movl   $0x2ffbff,-0x168(%ebp)
f0128a85:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f0128a88:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f0128a8e:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0128a91:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128a98:	eb 0e                	jmp    f0128aa8 <test_kfreelast+0x721>
		{
			ptr[i] = 5 ;
f0128a9a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0128a9d:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0128aa0:	01 d0                	add    %edx,%eax
f0128aa2:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0128aa5:	ff 45 f4             	incl   -0xc(%ebp)
f0128aa8:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0128aae:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128ab1:	7f e7                	jg     f0128a9a <test_kfreelast+0x713>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0128ab3:	e8 86 43 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0128ab8:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128abb:	e8 c4 bb fd ff       	call   f0104684 <pf_calculate_free_frames>
f0128ac0:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0128ac3:	83 ec 0c             	sub    $0xc,%esp
f0128ac6:	68 00 fc 5f 00       	push   $0x5ffc00
f0128acb:	e8 83 f7 fd ff       	call   f0108253 <kmalloc>
f0128ad0:	83 c4 10             	add    $0x10,%esp
f0128ad3:	89 85 fc fd ff ff    	mov    %eax,-0x204(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128ad9:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f0128adf:	89 c1                	mov    %eax,%ecx
f0128ae1:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0128ae8:	10 00 00 
f0128aeb:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0128af0:	0f b6 d0             	movzbl %al,%edx
f0128af3:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0128af9:	01 d0                	add    %edx,%eax
f0128afb:	48                   	dec    %eax
f0128afc:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0128b02:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0128b08:	ba 00 00 00 00       	mov    $0x0,%edx
f0128b0d:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0128b13:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0128b19:	29 d0                	sub    %edx,%eax
f0128b1b:	89 c3                	mov    %eax,%ebx
f0128b1d:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f0128b24:	10 00 00 
f0128b27:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0128b2c:	0f b6 c0             	movzbl %al,%eax
f0128b2f:	c1 e0 04             	shl    $0x4,%eax
f0128b32:	89 c2                	mov    %eax,%edx
f0128b34:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0128b3a:	01 d0                	add    %edx,%eax
f0128b3c:	48                   	dec    %eax
f0128b3d:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f0128b43:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0128b49:	ba 00 00 00 00       	mov    $0x0,%edx
f0128b4e:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f0128b54:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0128b5a:	29 d0                	sub    %edx,%eax
f0128b5c:	01 d8                	add    %ebx,%eax
f0128b5e:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0128b63:	39 c1                	cmp    %eax,%ecx
f0128b65:	74 17                	je     f0128b7e <test_kfreelast+0x7f7>
f0128b67:	83 ec 04             	sub    $0x4,%esp
f0128b6a:	68 18 a0 13 f0       	push   $0xf013a018
f0128b6f:	68 14 0d 00 00       	push   $0xd14
f0128b74:	68 32 9f 13 f0       	push   $0xf0139f32
f0128b79:	e8 32 76 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128b7e:	e8 01 bb fd ff       	call   f0104684 <pf_calculate_free_frames>
f0128b83:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0128b86:	74 17                	je     f0128b9f <test_kfreelast+0x818>
f0128b88:	83 ec 04             	sub    $0x4,%esp
f0128b8b:	68 4c 9f 13 f0       	push   $0xf0139f4c
f0128b90:	68 15 0d 00 00       	push   $0xd15
f0128b95:	68 32 9f 13 f0       	push   $0xf0139f32
f0128b9a:	e8 11 76 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128b9f:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0128ba2:	e8 97 42 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0128ba7:	29 c3                	sub    %eax,%ebx
f0128ba9:	89 d8                	mov    %ebx,%eax
f0128bab:	3d 00 06 00 00       	cmp    $0x600,%eax
f0128bb0:	74 17                	je     f0128bc9 <test_kfreelast+0x842>
f0128bb2:	83 ec 04             	sub    $0x4,%esp
f0128bb5:	68 b4 9f 13 f0       	push   $0xf0139fb4
f0128bba:	68 16 0d 00 00       	push   $0xd16
f0128bbf:	68 32 9f 13 f0       	push   $0xf0139f32
f0128bc4:	e8 e7 75 fd ff       	call   f01001b0 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f0128bc9:	c7 85 9c fe ff ff ff 	movl   $0x5ffbff,-0x164(%ebp)
f0128bd0:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0128bd3:	e8 66 42 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0128bd8:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128bdb:	e8 a4 ba fd ff       	call   f0104684 <pf_calculate_free_frames>
f0128be0:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0128be3:	83 ec 0c             	sub    $0xc,%esp
f0128be6:	68 00 38 00 00       	push   $0x3800
f0128beb:	e8 63 f6 fd ff       	call   f0108253 <kmalloc>
f0128bf0:	83 c4 10             	add    $0x10,%esp
f0128bf3:	89 85 00 fe ff ff    	mov    %eax,-0x200(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128bf9:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f0128bff:	89 c1                	mov    %eax,%ecx
f0128c01:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f0128c08:	10 00 00 
f0128c0b:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0128c10:	0f b6 d0             	movzbl %al,%edx
f0128c13:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0128c19:	01 d0                	add    %edx,%eax
f0128c1b:	48                   	dec    %eax
f0128c1c:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f0128c22:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0128c28:	ba 00 00 00 00       	mov    $0x0,%edx
f0128c2d:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f0128c33:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0128c39:	29 d0                	sub    %edx,%eax
f0128c3b:	89 c3                	mov    %eax,%ebx
f0128c3d:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f0128c44:	10 00 00 
f0128c47:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0128c4c:	0f b6 c0             	movzbl %al,%eax
f0128c4f:	c1 e0 04             	shl    $0x4,%eax
f0128c52:	89 c2                	mov    %eax,%edx
f0128c54:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0128c5a:	01 d0                	add    %edx,%eax
f0128c5c:	48                   	dec    %eax
f0128c5d:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f0128c63:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0128c69:	ba 00 00 00 00       	mov    $0x0,%edx
f0128c6e:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f0128c74:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0128c7a:	29 d0                	sub    %edx,%eax
f0128c7c:	01 d8                	add    %ebx,%eax
f0128c7e:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0128c83:	39 c1                	cmp    %eax,%ecx
f0128c85:	74 17                	je     f0128c9e <test_kfreelast+0x917>
f0128c87:	83 ec 04             	sub    $0x4,%esp
f0128c8a:	68 18 a0 13 f0       	push   $0xf013a018
f0128c8f:	68 1d 0d 00 00       	push   $0xd1d
f0128c94:	68 32 9f 13 f0       	push   $0xf0139f32
f0128c99:	e8 12 75 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128c9e:	e8 e1 b9 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0128ca3:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0128ca6:	74 17                	je     f0128cbf <test_kfreelast+0x938>
f0128ca8:	83 ec 04             	sub    $0x4,%esp
f0128cab:	68 4c 9f 13 f0       	push   $0xf0139f4c
f0128cb0:	68 1e 0d 00 00       	push   $0xd1e
f0128cb5:	68 32 9f 13 f0       	push   $0xf0139f32
f0128cba:	e8 f1 74 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128cbf:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0128cc2:	e8 77 41 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0128cc7:	29 c3                	sub    %eax,%ebx
f0128cc9:	89 d8                	mov    %ebx,%eax
f0128ccb:	83 f8 04             	cmp    $0x4,%eax
f0128cce:	74 17                	je     f0128ce7 <test_kfreelast+0x960>
f0128cd0:	83 ec 04             	sub    $0x4,%esp
f0128cd3:	68 b4 9f 13 f0       	push   $0xf0139fb4
f0128cd8:	68 1f 0d 00 00       	push   $0xd1f
f0128cdd:	68 32 9f 13 f0       	push   $0xf0139f32
f0128ce2:	e8 c9 74 fd ff       	call   f01001b0 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f0128ce7:	c7 85 a0 fe ff ff ff 	movl   $0x37ff,-0x160(%ebp)
f0128cee:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f0128cf1:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f0128cf7:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0128cfa:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128d01:	eb 0e                	jmp    f0128d11 <test_kfreelast+0x98a>
		{
			ptr[i] = 7 ;
f0128d03:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0128d06:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0128d09:	01 d0                	add    %edx,%eax
f0128d0b:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0128d0e:	ff 45 f4             	incl   -0xc(%ebp)
f0128d11:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0128d17:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128d1a:	7f e7                	jg     f0128d03 <test_kfreelast+0x97c>
	}

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0128d1c:	e8 1d 41 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0128d21:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0128d27:	e8 58 b9 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0128d2c:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		kfree(ptr_allocations[0]);
f0128d32:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0128d38:	83 ec 0c             	sub    $0xc,%esp
f0128d3b:	50                   	push   %eax
f0128d3c:	e8 9d f6 fd ff       	call   f01083de <kfree>
f0128d41:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128d44:	e8 3b b9 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0128d49:	3b 85 44 ff ff ff    	cmp    -0xbc(%ebp),%eax
f0128d4f:	74 17                	je     f0128d68 <test_kfreelast+0x9e1>
f0128d51:	83 ec 04             	sub    $0x4,%esp
f0128d54:	68 4c 9f 13 f0       	push   $0xf0139f4c
f0128d59:	68 2e 0d 00 00       	push   $0xd2e
f0128d5e:	68 32 9f 13 f0       	push   $0xf0139f32
f0128d63:	e8 48 74 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0128d68:	e8 d1 40 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0128d6d:	89 c2                	mov    %eax,%edx
f0128d6f:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0128d75:	29 c2                	sub    %eax,%edx
f0128d77:	89 d0                	mov    %edx,%eax
f0128d79:	3d 00 02 00 00       	cmp    $0x200,%eax
f0128d7e:	74 17                	je     f0128d97 <test_kfreelast+0xa10>
f0128d80:	83 ec 04             	sub    $0x4,%esp
f0128d83:	68 bc a6 13 f0       	push   $0xf013a6bc
f0128d88:	68 2f 0d 00 00       	push   $0xd2f
f0128d8d:	68 32 9f 13 f0       	push   $0xf0139f32
f0128d92:	e8 19 74 fd ff       	call   f01001b0 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0128d97:	e8 a2 40 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0128d9c:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128da2:	e8 dd b8 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0128da7:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		kfree(ptr_allocations[1]);
f0128dad:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0128db3:	83 ec 0c             	sub    $0xc,%esp
f0128db6:	50                   	push   %eax
f0128db7:	e8 22 f6 fd ff       	call   f01083de <kfree>
f0128dbc:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128dbf:	e8 c0 b8 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0128dc4:	3b 85 44 ff ff ff    	cmp    -0xbc(%ebp),%eax
f0128dca:	74 17                	je     f0128de3 <test_kfreelast+0xa5c>
f0128dcc:	83 ec 04             	sub    $0x4,%esp
f0128dcf:	68 4c 9f 13 f0       	push   $0xf0139f4c
f0128dd4:	68 35 0d 00 00       	push   $0xd35
f0128dd9:	68 32 9f 13 f0       	push   $0xf0139f32
f0128dde:	e8 cd 73 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f0128de3:	e8 56 40 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0128de8:	89 c2                	mov    %eax,%edx
f0128dea:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0128df0:	29 c2                	sub    %eax,%edx
f0128df2:	89 d0                	mov    %edx,%eax
f0128df4:	3d 00 02 00 00       	cmp    $0x200,%eax
f0128df9:	74 17                	je     f0128e12 <test_kfreelast+0xa8b>
f0128dfb:	83 ec 04             	sub    $0x4,%esp
f0128dfe:	68 bc a6 13 f0       	push   $0xf013a6bc
f0128e03:	68 36 0d 00 00       	push   $0xd36
f0128e08:	68 32 9f 13 f0       	push   $0xf0139f32
f0128e0d:	e8 9e 73 fd ff       	call   f01001b0 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f0128e12:	e8 27 40 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0128e17:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128e1d:	e8 62 b8 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0128e22:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		kfree(ptr_allocations[6]);
f0128e28:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f0128e2e:	83 ec 0c             	sub    $0xc,%esp
f0128e31:	50                   	push   %eax
f0128e32:	e8 a7 f5 fd ff       	call   f01083de <kfree>
f0128e37:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128e3a:	e8 45 b8 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0128e3f:	3b 85 44 ff ff ff    	cmp    -0xbc(%ebp),%eax
f0128e45:	74 17                	je     f0128e5e <test_kfreelast+0xad7>
f0128e47:	83 ec 04             	sub    $0x4,%esp
f0128e4a:	68 4c 9f 13 f0       	push   $0xf0139f4c
f0128e4f:	68 3c 0d 00 00       	push   $0xd3c
f0128e54:	68 32 9f 13 f0       	push   $0xf0139f32
f0128e59:	e8 52 73 fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0128e5e:	e8 db 3f fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0128e63:	89 c2                	mov    %eax,%edx
f0128e65:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0128e6b:	29 c2                	sub    %eax,%edx
f0128e6d:	89 d0                	mov    %edx,%eax
f0128e6f:	3d 00 06 00 00       	cmp    $0x600,%eax
f0128e74:	74 17                	je     f0128e8d <test_kfreelast+0xb06>
f0128e76:	83 ec 04             	sub    $0x4,%esp
f0128e79:	68 bc a6 13 f0       	push   $0xf013a6bc
f0128e7e:	68 3d 0d 00 00       	push   $0xd3d
f0128e83:	68 32 9f 13 f0       	push   $0xf0139f32
f0128e88:	e8 23 73 fd ff       	call   f01001b0 <_panic>
	}

	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
f0128e8d:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0128e93:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0128e96:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128e9d:	eb 1e                	jmp    f0128ebd <test_kfreelast+0xb36>
		{
			sums[2] += ptr[i] ;
f0128e9f:	8b 95 3c fe ff ff    	mov    -0x1c4(%ebp),%edx
f0128ea5:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0128ea8:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0128eab:	01 c8                	add    %ecx,%eax
f0128ead:	8a 00                	mov    (%eax),%al
f0128eaf:	0f be c0             	movsbl %al,%eax
f0128eb2:	01 d0                	add    %edx,%eax
f0128eb4:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)

	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0128eba:	ff 45 f4             	incl   -0xc(%ebp)
f0128ebd:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0128ec3:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128ec6:	7f d7                	jg     f0128e9f <test_kfreelast+0xb18>
		{
			sums[2] += ptr[i] ;
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");
f0128ec8:	8b 95 3c fe ff ff    	mov    -0x1c4(%ebp),%edx
f0128ece:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0128ed4:	01 c0                	add    %eax,%eax
f0128ed6:	39 c2                	cmp    %eax,%edx
f0128ed8:	74 17                	je     f0128ef1 <test_kfreelast+0xb6a>
f0128eda:	83 ec 04             	sub    $0x4,%esp
f0128edd:	68 18 a7 13 f0       	push   $0xf013a718
f0128ee2:	68 48 0d 00 00       	push   $0xd48
f0128ee7:	68 32 9f 13 f0       	push   $0xf0139f32
f0128eec:	e8 bf 72 fd ff       	call   f01001b0 <_panic>

		//2 KB
		ptr = (char*)ptr_allocations[3];
f0128ef1:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f0128ef7:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0128efa:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128f01:	eb 1e                	jmp    f0128f21 <test_kfreelast+0xb9a>
		{
			sums[3] += ptr[i] ;
f0128f03:	8b 95 40 fe ff ff    	mov    -0x1c0(%ebp),%edx
f0128f09:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0128f0c:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0128f0f:	01 c8                	add    %ecx,%eax
f0128f11:	8a 00                	mov    (%eax),%al
f0128f13:	0f be c0             	movsbl %al,%eax
f0128f16:	01 d0                	add    %edx,%eax
f0128f18:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");

		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0128f1e:	ff 45 f4             	incl   -0xc(%ebp)
f0128f21:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0128f27:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128f2a:	7f d7                	jg     f0128f03 <test_kfreelast+0xb7c>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f0128f2c:	8b 95 40 fe ff ff    	mov    -0x1c0(%ebp),%edx
f0128f32:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0128f38:	89 c1                	mov    %eax,%ecx
f0128f3a:	01 c9                	add    %ecx,%ecx
f0128f3c:	01 c8                	add    %ecx,%eax
f0128f3e:	39 c2                	cmp    %eax,%edx
f0128f40:	74 17                	je     f0128f59 <test_kfreelast+0xbd2>
f0128f42:	83 ec 04             	sub    $0x4,%esp
f0128f45:	68 18 a7 13 f0       	push   $0xf013a718
f0128f4a:	68 50 0d 00 00       	push   $0xd50
f0128f4f:	68 32 9f 13 f0       	push   $0xf0139f32
f0128f54:	e8 57 72 fd ff       	call   f01001b0 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f0128f59:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f0128f5f:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0128f62:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128f69:	eb 1e                	jmp    f0128f89 <test_kfreelast+0xc02>
		{
			sums[4] += ptr[i] ;
f0128f6b:	8b 95 44 fe ff ff    	mov    -0x1bc(%ebp),%edx
f0128f71:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0128f74:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0128f77:	01 c8                	add    %ecx,%eax
f0128f79:	8a 00                	mov    (%eax),%al
f0128f7b:	0f be c0             	movsbl %al,%eax
f0128f7e:	01 d0                	add    %edx,%eax
f0128f80:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0128f86:	ff 45 f4             	incl   -0xc(%ebp)
f0128f89:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0128f8f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128f92:	7f d7                	jg     f0128f6b <test_kfreelast+0xbe4>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f0128f94:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0128f9a:	8b 95 94 fe ff ff    	mov    -0x16c(%ebp),%edx
f0128fa0:	c1 e2 02             	shl    $0x2,%edx
f0128fa3:	39 d0                	cmp    %edx,%eax
f0128fa5:	74 17                	je     f0128fbe <test_kfreelast+0xc37>
f0128fa7:	83 ec 04             	sub    $0x4,%esp
f0128faa:	68 18 a7 13 f0       	push   $0xf013a718
f0128faf:	68 58 0d 00 00       	push   $0xd58
f0128fb4:	68 32 9f 13 f0       	push   $0xf0139f32
f0128fb9:	e8 f2 71 fd ff       	call   f01001b0 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f0128fbe:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f0128fc4:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0128fc7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128fce:	eb 1e                	jmp    f0128fee <test_kfreelast+0xc67>
		{
			sums[5] += ptr[i] ;
f0128fd0:	8b 95 48 fe ff ff    	mov    -0x1b8(%ebp),%edx
f0128fd6:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0128fd9:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0128fdc:	01 c8                	add    %ecx,%eax
f0128fde:	8a 00                	mov    (%eax),%al
f0128fe0:	0f be c0             	movsbl %al,%eax
f0128fe3:	01 d0                	add    %edx,%eax
f0128fe5:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0128feb:	ff 45 f4             	incl   -0xc(%ebp)
f0128fee:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0128ff4:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128ff7:	7f d7                	jg     f0128fd0 <test_kfreelast+0xc49>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f0128ff9:	8b 8d 48 fe ff ff    	mov    -0x1b8(%ebp),%ecx
f0128fff:	8b 95 98 fe ff ff    	mov    -0x168(%ebp),%edx
f0129005:	89 d0                	mov    %edx,%eax
f0129007:	c1 e0 02             	shl    $0x2,%eax
f012900a:	01 d0                	add    %edx,%eax
f012900c:	39 c1                	cmp    %eax,%ecx
f012900e:	74 17                	je     f0129027 <test_kfreelast+0xca0>
f0129010:	83 ec 04             	sub    $0x4,%esp
f0129013:	68 18 a7 13 f0       	push   $0xf013a718
f0129018:	68 60 0d 00 00       	push   $0xd60
f012901d:	68 32 9f 13 f0       	push   $0xf0139f32
f0129022:	e8 89 71 fd ff       	call   f01001b0 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f0129027:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012902d:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0129030:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129037:	eb 1e                	jmp    f0129057 <test_kfreelast+0xcd0>
		{
			sums[7] += ptr[i] ;
f0129039:	8b 95 50 fe ff ff    	mov    -0x1b0(%ebp),%edx
f012903f:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0129042:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0129045:	01 c8                	add    %ecx,%eax
f0129047:	8a 00                	mov    (%eax),%al
f0129049:	0f be c0             	movsbl %al,%eax
f012904c:	01 d0                	add    %edx,%eax
f012904e:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0129054:	ff 45 f4             	incl   -0xc(%ebp)
f0129057:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f012905d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129060:	7f d7                	jg     f0129039 <test_kfreelast+0xcb2>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f0129062:	8b 8d 50 fe ff ff    	mov    -0x1b0(%ebp),%ecx
f0129068:	8b 95 a0 fe ff ff    	mov    -0x160(%ebp),%edx
f012906e:	89 d0                	mov    %edx,%eax
f0129070:	01 c0                	add    %eax,%eax
f0129072:	01 d0                	add    %edx,%eax
f0129074:	01 c0                	add    %eax,%eax
f0129076:	01 d0                	add    %edx,%eax
f0129078:	39 c1                	cmp    %eax,%ecx
f012907a:	74 17                	je     f0129093 <test_kfreelast+0xd0c>
f012907c:	83 ec 04             	sub    $0x4,%esp
f012907f:	68 18 a7 13 f0       	push   $0xf013a718
f0129084:	68 68 0d 00 00       	push   $0xd68
f0129089:	68 32 9f 13 f0       	push   $0xf0139f32
f012908e:	e8 1d 71 fd ff       	call   f01001b0 <_panic>
	}

	//Allocate after kfree
	{
		//20 KB
		freeFrames = sys_calculate_free_frames() ;
f0129093:	e8 a6 3d fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0129098:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012909b:	e8 e4 b5 fd ff       	call   f0104684 <pf_calculate_free_frames>
f01290a0:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[8] = kmalloc(20*kilo);
f01290a3:	83 ec 0c             	sub    $0xc,%esp
f01290a6:	68 00 50 00 00       	push   $0x5000
f01290ab:	e8 a3 f1 fd ff       	call   f0108253 <kmalloc>
f01290b0:	83 c4 10             	add    $0x10,%esp
f01290b3:	89 85 04 fe ff ff    	mov    %eax,-0x1fc(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01290b9:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f01290bf:	89 c1                	mov    %eax,%ecx
f01290c1:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f01290c8:	10 00 00 
f01290cb:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f01290d0:	0f b6 d0             	movzbl %al,%edx
f01290d3:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01290d9:	01 d0                	add    %edx,%eax
f01290db:	48                   	dec    %eax
f01290dc:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f01290e2:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01290e8:	ba 00 00 00 00       	mov    $0x0,%edx
f01290ed:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f01290f3:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01290f9:	29 d0                	sub    %edx,%eax
f01290fb:	89 c3                	mov    %eax,%ebx
f01290fd:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f0129104:	10 00 00 
f0129107:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f012910c:	0f b6 c0             	movzbl %al,%eax
f012910f:	c1 e0 04             	shl    $0x4,%eax
f0129112:	89 c2                	mov    %eax,%edx
f0129114:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012911a:	01 d0                	add    %edx,%eax
f012911c:	48                   	dec    %eax
f012911d:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f0129123:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0129129:	ba 00 00 00 00       	mov    $0x0,%edx
f012912e:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f0129134:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f012913a:	29 d0                	sub    %edx,%eax
f012913c:	01 d8                	add    %ebx,%eax
f012913e:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0129143:	39 c1                	cmp    %eax,%ecx
f0129145:	74 17                	je     f012915e <test_kfreelast+0xdd7>
f0129147:	83 ec 04             	sub    $0x4,%esp
f012914a:	68 18 a0 13 f0       	push   $0xf013a018
f012914f:	68 71 0d 00 00       	push   $0xd71
f0129154:	68 32 9f 13 f0       	push   $0xf0139f32
f0129159:	e8 52 70 fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012915e:	e8 21 b5 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0129163:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129166:	74 17                	je     f012917f <test_kfreelast+0xdf8>
f0129168:	83 ec 04             	sub    $0x4,%esp
f012916b:	68 4c 9f 13 f0       	push   $0xf0139f4c
f0129170:	68 72 0d 00 00       	push   $0xd72
f0129175:	68 32 9f 13 f0       	push   $0xf0139f32
f012917a:	e8 31 70 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
f012917f:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0129182:	e8 b7 3c fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0129187:	29 c3                	sub    %eax,%ebx
f0129189:	89 d8                	mov    %ebx,%eax
f012918b:	83 f8 05             	cmp    $0x5,%eax
f012918e:	74 17                	je     f01291a7 <test_kfreelast+0xe20>
f0129190:	83 ec 04             	sub    $0x4,%esp
f0129193:	68 b4 9f 13 f0       	push   $0xf0139fb4
f0129198:	68 73 0d 00 00       	push   $0xd73
f012919d:	68 32 9f 13 f0       	push   $0xf0139f32
f01291a2:	e8 09 70 fd ff       	call   f01001b0 <_panic>
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
f01291a7:	c7 85 a4 fe ff ff ff 	movl   $0x4fff,-0x15c(%ebp)
f01291ae:	4f 00 00 
		ptr = (char*)ptr_allocations[8];
f01291b1:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f01291b7:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f01291ba:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01291c1:	eb 0e                	jmp    f01291d1 <test_kfreelast+0xe4a>
		{
			ptr[i] = 8 ;
f01291c3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01291c6:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01291c9:	01 d0                	add    %edx,%eax
f01291cb:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f01291ce:	ff 45 f4             	incl   -0xc(%ebp)
f01291d1:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f01291d7:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01291da:	7f e7                	jg     f01291c3 <test_kfreelast+0xe3c>
		{
			ptr[i] = 8 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f01291dc:	e8 5d 3c fe ff       	call   f010ce3e <sys_calculate_free_frames>
f01291e1:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01291e4:	e8 9b b4 fd ff       	call   f0104684 <pf_calculate_free_frames>
f01291e9:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega);
f01291ec:	83 ec 0c             	sub    $0xc,%esp
f01291ef:	68 00 00 10 00       	push   $0x100000
f01291f4:	e8 5a f0 fd ff       	call   f0108253 <kmalloc>
f01291f9:	83 c4 10             	add    $0x10,%esp
f01291fc:	89 85 08 fe ff ff    	mov    %eax,-0x1f8(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0129202:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f0129208:	89 c1                	mov    %eax,%ecx
f012920a:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f0129211:	10 00 00 
f0129214:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0129219:	0f b6 d0             	movzbl %al,%edx
f012921c:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0129222:	01 d0                	add    %edx,%eax
f0129224:	48                   	dec    %eax
f0129225:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f012922b:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0129231:	ba 00 00 00 00       	mov    $0x0,%edx
f0129236:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f012923c:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0129242:	29 d0                	sub    %edx,%eax
f0129244:	89 c3                	mov    %eax,%ebx
f0129246:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f012924d:	10 00 00 
f0129250:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0129255:	0f b6 c0             	movzbl %al,%eax
f0129258:	c1 e0 04             	shl    $0x4,%eax
f012925b:	89 c2                	mov    %eax,%edx
f012925d:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0129263:	01 d0                	add    %edx,%eax
f0129265:	48                   	dec    %eax
f0129266:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f012926c:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0129272:	ba 00 00 00 00       	mov    $0x0,%edx
f0129277:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f012927d:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0129283:	29 d0                	sub    %edx,%eax
f0129285:	01 d8                	add    %ebx,%eax
f0129287:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f012928c:	39 c1                	cmp    %eax,%ecx
f012928e:	74 17                	je     f01292a7 <test_kfreelast+0xf20>
f0129290:	83 ec 04             	sub    $0x4,%esp
f0129293:	68 18 a0 13 f0       	push   $0xf013a018
f0129298:	68 7f 0d 00 00       	push   $0xd7f
f012929d:	68 32 9f 13 f0       	push   $0xf0139f32
f01292a2:	e8 09 6f fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01292a7:	e8 d8 b3 fd ff       	call   f0104684 <pf_calculate_free_frames>
f01292ac:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f01292af:	74 17                	je     f01292c8 <test_kfreelast+0xf41>
f01292b1:	83 ec 04             	sub    $0x4,%esp
f01292b4:	68 4c 9f 13 f0       	push   $0xf0139f4c
f01292b9:	68 80 0d 00 00       	push   $0xd80
f01292be:	68 32 9f 13 f0       	push   $0xf0139f32
f01292c3:	e8 e8 6e fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f01292c8:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f01292cb:	e8 6e 3b fe ff       	call   f010ce3e <sys_calculate_free_frames>
f01292d0:	29 c3                	sub    %eax,%ebx
f01292d2:	89 d8                	mov    %ebx,%eax
f01292d4:	3d 00 01 00 00       	cmp    $0x100,%eax
f01292d9:	74 17                	je     f01292f2 <test_kfreelast+0xf6b>
f01292db:	83 ec 04             	sub    $0x4,%esp
f01292de:	68 b4 9f 13 f0       	push   $0xf0139fb4
f01292e3:	68 81 0d 00 00       	push   $0xd81
f01292e8:	68 32 9f 13 f0       	push   $0xf0139f32
f01292ed:	e8 be 6e fd ff       	call   f01001b0 <_panic>
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
f01292f2:	c7 85 a8 fe ff ff ff 	movl   $0xfffff,-0x158(%ebp)
f01292f9:	ff 0f 00 
		ptr = (char*)ptr_allocations[9];
f01292fc:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f0129302:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f0129305:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012930c:	eb 0e                	jmp    f012931c <test_kfreelast+0xf95>
		{
			ptr[i] = 9 ;
f012930e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0129311:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0129314:	01 d0                	add    %edx,%eax
f0129316:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f0129319:	ff 45 f4             	incl   -0xc(%ebp)
f012931c:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0129322:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129325:	7f e7                	jg     f012930e <test_kfreelast+0xf87>
		{
			ptr[i] = 9 ;
		}
	}

	ce = 0;
f0129327:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	//kfree last allocated space
	{
		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f012932e:	e8 0b 3b fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0129333:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129336:	e8 49 b3 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012933b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[9]);
f012933e:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f0129344:	83 ec 0c             	sub    $0xc,%esp
f0129347:	50                   	push   %eax
f0129348:	e8 91 f0 fd ff       	call   f01083de <kfree>
f012934d:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129350:	e8 2f b3 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0129355:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129358:	74 17                	je     f0129371 <test_kfreelast+0xfea>
f012935a:	83 ec 04             	sub    $0x4,%esp
f012935d:	68 4c 9f 13 f0       	push   $0xf0139f4c
f0129362:	68 91 0d 00 00       	push   $0xd91
f0129367:	68 32 9f 13 f0       	push   $0xf0139f32
f012936c:	e8 3f 6e fd ff       	call   f01001b0 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong kfree: pages in memory are not freed correctly");
f0129371:	e8 c8 3a fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0129376:	89 c2                	mov    %eax,%edx
f0129378:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012937b:	29 c2                	sub    %eax,%edx
f012937d:	89 d0                	mov    %edx,%eax
f012937f:	3d 00 01 00 00       	cmp    $0x100,%eax
f0129384:	74 17                	je     f012939d <test_kfreelast+0x1016>
f0129386:	83 ec 04             	sub    $0x4,%esp
f0129389:	68 bc a6 13 f0       	push   $0xf013a6bc
f012938e:	68 92 0d 00 00       	push   $0xd92
f0129393:	68 32 9f 13 f0       	push   $0xf0139f32
f0129398:	e8 13 6e fd ff       	call   f01001b0 <_panic>
	}

	//Allocate after kfree last [25%]
	{
		//30 KB
		freeFrames = sys_calculate_free_frames() ;
f012939d:	e8 9c 3a fe ff       	call   f010ce3e <sys_calculate_free_frames>
f01293a2:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01293a5:	e8 da b2 fd ff       	call   f0104684 <pf_calculate_free_frames>
f01293aa:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[10] = kmalloc(30*kilo);
f01293ad:	83 ec 0c             	sub    $0xc,%esp
f01293b0:	68 00 78 00 00       	push   $0x7800
f01293b5:	e8 99 ee fd ff       	call   f0108253 <kmalloc>
f01293ba:	83 c4 10             	add    $0x10,%esp
f01293bd:	89 85 0c fe ff ff    	mov    %eax,-0x1f4(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01293c3:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f01293c9:	89 c1                	mov    %eax,%ecx
f01293cb:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f01293d2:	10 00 00 
f01293d5:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f01293da:	0f b6 d0             	movzbl %al,%edx
f01293dd:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01293e3:	01 d0                	add    %edx,%eax
f01293e5:	48                   	dec    %eax
f01293e6:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f01293ec:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f01293f2:	ba 00 00 00 00       	mov    $0x0,%edx
f01293f7:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f01293fd:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0129403:	29 d0                	sub    %edx,%eax
f0129405:	89 c3                	mov    %eax,%ebx
f0129407:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f012940e:	10 00 00 
f0129411:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0129416:	0f b6 c0             	movzbl %al,%eax
f0129419:	c1 e0 04             	shl    $0x4,%eax
f012941c:	89 c2                	mov    %eax,%edx
f012941e:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0129424:	01 d0                	add    %edx,%eax
f0129426:	48                   	dec    %eax
f0129427:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f012942d:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0129433:	ba 00 00 00 00       	mov    $0x0,%edx
f0129438:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f012943e:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0129444:	29 d0                	sub    %edx,%eax
f0129446:	01 d8                	add    %ebx,%eax
f0129448:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f012944d:	39 c1                	cmp    %eax,%ecx
f012944f:	74 17                	je     f0129468 <test_kfreelast+0x10e1>
f0129451:	83 ec 04             	sub    $0x4,%esp
f0129454:	68 18 a0 13 f0       	push   $0xf013a018
f0129459:	68 9b 0d 00 00       	push   $0xd9b
f012945e:	68 32 9f 13 f0       	push   $0xf0139f32
f0129463:	e8 48 6d fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129468:	e8 17 b2 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012946d:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129470:	74 17                	je     f0129489 <test_kfreelast+0x1102>
f0129472:	83 ec 04             	sub    $0x4,%esp
f0129475:	68 4c 9f 13 f0       	push   $0xf0139f4c
f012947a:	68 9c 0d 00 00       	push   $0xd9c
f012947f:	68 32 9f 13 f0       	push   $0xf0139f32
f0129484:	e8 27 6d fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 8) panic("Wrong allocation: pages are not loaded successfully into memory");
f0129489:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012948c:	e8 ad 39 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0129491:	29 c3                	sub    %eax,%ebx
f0129493:	89 d8                	mov    %ebx,%eax
f0129495:	83 f8 08             	cmp    $0x8,%eax
f0129498:	74 17                	je     f01294b1 <test_kfreelast+0x112a>
f012949a:	83 ec 04             	sub    $0x4,%esp
f012949d:	68 b4 9f 13 f0       	push   $0xf0139fb4
f01294a2:	68 9d 0d 00 00       	push   $0xd9d
f01294a7:	68 32 9f 13 f0       	push   $0xf0139f32
f01294ac:	e8 ff 6c fd ff       	call   f01001b0 <_panic>
		lastIndices[10] = (30*kilo)/sizeof(char) - 1;
f01294b1:	c7 85 ac fe ff ff ff 	movl   $0x77ff,-0x154(%ebp)
f01294b8:	77 00 00 
		ptr = (char*)ptr_allocations[10];
f01294bb:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f01294c1:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[10]; ++i)
f01294c4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01294cb:	eb 0e                	jmp    f01294db <test_kfreelast+0x1154>
		{
			ptr[i] = 10 ;
f01294cd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01294d0:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01294d3:	01 d0                	add    %edx,%eax
f01294d5:	c6 00 0a             	movb   $0xa,(%eax)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 8) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[10] = (30*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[10];
		for (i = 0; i < lastIndices[10]; ++i)
f01294d8:	ff 45 f4             	incl   -0xc(%ebp)
f01294db:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f01294e1:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01294e4:	7f e7                	jg     f01294cd <test_kfreelast+0x1146>
		{
			ptr[i] = 10 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f01294e6:	e8 53 39 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f01294eb:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01294ee:	e8 91 b1 fd ff       	call   f0104684 <pf_calculate_free_frames>
f01294f3:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[11] = kmalloc(1*Mega);
f01294f6:	83 ec 0c             	sub    $0xc,%esp
f01294f9:	68 00 00 10 00       	push   $0x100000
f01294fe:	e8 50 ed fd ff       	call   f0108253 <kmalloc>
f0129503:	83 c4 10             	add    $0x10,%esp
f0129506:	89 85 10 fe ff ff    	mov    %eax,-0x1f0(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 13*Mega + 84*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012950c:	8b 85 10 fe ff ff    	mov    -0x1f0(%ebp),%eax
f0129512:	89 c1                	mov    %eax,%ecx
f0129514:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f012951b:	10 00 00 
f012951e:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0129523:	0f b6 d0             	movzbl %al,%edx
f0129526:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012952c:	01 d0                	add    %edx,%eax
f012952e:	48                   	dec    %eax
f012952f:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f0129535:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012953b:	ba 00 00 00 00       	mov    $0x0,%edx
f0129540:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f0129546:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012954c:	29 d0                	sub    %edx,%eax
f012954e:	89 c3                	mov    %eax,%ebx
f0129550:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f0129557:	10 00 00 
f012955a:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f012955f:	0f b6 c0             	movzbl %al,%eax
f0129562:	c1 e0 04             	shl    $0x4,%eax
f0129565:	89 c2                	mov    %eax,%edx
f0129567:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012956d:	01 d0                	add    %edx,%eax
f012956f:	48                   	dec    %eax
f0129570:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f0129576:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012957c:	ba 00 00 00 00       	mov    $0x0,%edx
f0129581:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f0129587:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012958d:	29 d0                	sub    %edx,%eax
f012958f:	01 d8                	add    %ebx,%eax
f0129591:	2d 00 70 2e 09       	sub    $0x92e7000,%eax
f0129596:	39 c1                	cmp    %eax,%ecx
f0129598:	74 17                	je     f01295b1 <test_kfreelast+0x122a>
f012959a:	83 ec 04             	sub    $0x4,%esp
f012959d:	68 18 a0 13 f0       	push   $0xf013a018
f01295a2:	68 a9 0d 00 00       	push   $0xda9
f01295a7:	68 32 9f 13 f0       	push   $0xf0139f32
f01295ac:	e8 ff 6b fd ff       	call   f01001b0 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01295b1:	e8 ce b0 fd ff       	call   f0104684 <pf_calculate_free_frames>
f01295b6:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f01295b9:	74 17                	je     f01295d2 <test_kfreelast+0x124b>
f01295bb:	83 ec 04             	sub    $0x4,%esp
f01295be:	68 4c 9f 13 f0       	push   $0xf0139f4c
f01295c3:	68 aa 0d 00 00       	push   $0xdaa
f01295c8:	68 32 9f 13 f0       	push   $0xf0139f32
f01295cd:	e8 de 6b fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f01295d2:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f01295d5:	e8 64 38 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f01295da:	29 c3                	sub    %eax,%ebx
f01295dc:	89 d8                	mov    %ebx,%eax
f01295de:	3d 00 01 00 00       	cmp    $0x100,%eax
f01295e3:	74 17                	je     f01295fc <test_kfreelast+0x1275>
f01295e5:	83 ec 04             	sub    $0x4,%esp
f01295e8:	68 b4 9f 13 f0       	push   $0xf0139fb4
f01295ed:	68 ab 0d 00 00       	push   $0xdab
f01295f2:	68 32 9f 13 f0       	push   $0xf0139f32
f01295f7:	e8 b4 6b fd ff       	call   f01001b0 <_panic>
		lastIndices[11] = (1*Mega)/sizeof(char) - 1;
f01295fc:	c7 85 b0 fe ff ff ff 	movl   $0xfffff,-0x150(%ebp)
f0129603:	ff 0f 00 
		ptr = (char*)ptr_allocations[11];
f0129606:	8b 85 10 fe ff ff    	mov    -0x1f0(%ebp),%eax
f012960c:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[11]; ++i)
f012960f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129616:	eb 0e                	jmp    f0129626 <test_kfreelast+0x129f>
		{
			ptr[i] = 11 ;
f0129618:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012961b:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012961e:	01 d0                	add    %edx,%eax
f0129620:	c6 00 0b             	movb   $0xb,(%eax)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 13*Mega + 84*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[11] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[11];
		for (i = 0; i < lastIndices[11]; ++i)
f0129623:	ff 45 f4             	incl   -0xc(%ebp)
f0129626:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012962c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012962f:	7f e7                	jg     f0129618 <test_kfreelast+0x1291>
		{
			ptr[i] = 11 ;
		}
	}
	ce += 25;
f0129631:	83 45 f0 19          	addl   $0x19,-0x10(%ebp)
	cprintf("\nkfreelast: current evaluation = %d%\n", ce);
f0129635:	83 ec 08             	sub    $0x8,%esp
f0129638:	ff 75 f0             	pushl  -0x10(%ebp)
f012963b:	68 64 af 13 f0       	push   $0xf013af64
f0129640:	e8 ec 77 fd ff       	call   f0100e31 <cprintf>
f0129645:	83 c4 10             	add    $0x10,%esp

	int f = 0;
f0129648:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	//kfree last allocated two spaces
	{
		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f012964f:	e8 ea 37 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0129654:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129657:	e8 28 b0 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012965c:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[11]);
f012965f:	8b 85 10 fe ff ff    	mov    -0x1f0(%ebp),%eax
f0129665:	83 ec 0c             	sub    $0xc,%esp
f0129668:	50                   	push   %eax
f0129669:	e8 70 ed fd ff       	call   f01083de <kfree>
f012966e:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f0129671:	e8 0e b0 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0129676:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129679:	74 1d                	je     f0129698 <test_kfreelast+0x1311>
f012967b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012967f:	75 17                	jne    f0129698 <test_kfreelast+0x1311>
f0129681:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129688:	83 ec 0c             	sub    $0xc,%esp
f012968b:	68 8c af 13 f0       	push   $0xf013af8c
f0129690:	e8 9c 77 fd ff       	call   f0100e31 <cprintf>
f0129695:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 256) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f0129698:	e8 a1 37 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f012969d:	89 c2                	mov    %eax,%edx
f012969f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01296a2:	29 c2                	sub    %eax,%edx
f01296a4:	89 d0                	mov    %edx,%eax
f01296a6:	3d 00 01 00 00       	cmp    $0x100,%eax
f01296ab:	74 1d                	je     f01296ca <test_kfreelast+0x1343>
f01296ad:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01296b1:	75 17                	jne    f01296ca <test_kfreelast+0x1343>
f01296b3:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f01296ba:	83 ec 0c             	sub    $0xc,%esp
f01296bd:	68 f8 af 13 f0       	push   $0xf013aff8
f01296c2:	e8 6a 77 fd ff       	call   f0100e31 <cprintf>
f01296c7:	83 c4 10             	add    $0x10,%esp

		//kfree 30 KB
		freeFrames = sys_calculate_free_frames() ;
f01296ca:	e8 6f 37 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f01296cf:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01296d2:	e8 ad af fd ff       	call   f0104684 <pf_calculate_free_frames>
f01296d7:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[10]);
f01296da:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f01296e0:	83 ec 0c             	sub    $0xc,%esp
f01296e3:	50                   	push   %eax
f01296e4:	e8 f5 ec fd ff       	call   f01083de <kfree>
f01296e9:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f01296ec:	e8 93 af fd ff       	call   f0104684 <pf_calculate_free_frames>
f01296f1:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f01296f4:	74 1d                	je     f0129713 <test_kfreelast+0x138c>
f01296f6:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01296fa:	75 17                	jne    f0129713 <test_kfreelast+0x138c>
f01296fc:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129703:	83 ec 0c             	sub    $0xc,%esp
f0129706:	68 8c af 13 f0       	push   $0xf013af8c
f012970b:	e8 21 77 fd ff       	call   f0100e31 <cprintf>
f0129710:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 8) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f0129713:	e8 26 37 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0129718:	89 c2                	mov    %eax,%edx
f012971a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012971d:	29 c2                	sub    %eax,%edx
f012971f:	89 d0                	mov    %edx,%eax
f0129721:	83 f8 08             	cmp    $0x8,%eax
f0129724:	74 1d                	je     f0129743 <test_kfreelast+0x13bc>
f0129726:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012972a:	75 17                	jne    f0129743 <test_kfreelast+0x13bc>
f012972c:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129733:	83 ec 0c             	sub    $0xc,%esp
f0129736:	68 f8 af 13 f0       	push   $0xf013aff8
f012973b:	e8 f1 76 fd ff       	call   f0100e31 <cprintf>
f0129740:	83 c4 10             	add    $0x10,%esp
	}

	//Allocate after kfree last allocated two spaces (in order) [10%]
	{
		//10 KB
		freeFrames = sys_calculate_free_frames() ;
f0129743:	e8 f6 36 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0129748:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012974b:	e8 34 af fd ff       	call   f0104684 <pf_calculate_free_frames>
f0129750:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[12] = kmalloc(10*kilo);
f0129753:	83 ec 0c             	sub    $0xc,%esp
f0129756:	68 00 28 00 00       	push   $0x2800
f012975b:	e8 f3 ea fd ff       	call   f0108253 <kmalloc>
f0129760:	83 c4 10             	add    $0x10,%esp
f0129763:	89 85 14 fe ff ff    	mov    %eax,-0x1ec(%ebp)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 13*Mega + 52*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
f0129769:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012976f:	89 c1                	mov    %eax,%ecx
f0129771:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f0129778:	10 00 00 
f012977b:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0129780:	0f b6 d0             	movzbl %al,%edx
f0129783:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0129789:	01 d0                	add    %edx,%eax
f012978b:	48                   	dec    %eax
f012978c:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f0129792:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0129798:	ba 00 00 00 00       	mov    $0x0,%edx
f012979d:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f01297a3:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f01297a9:	29 d0                	sub    %edx,%eax
f01297ab:	89 c3                	mov    %eax,%ebx
f01297ad:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f01297b4:	10 00 00 
f01297b7:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f01297bc:	0f b6 c0             	movzbl %al,%eax
f01297bf:	c1 e0 04             	shl    $0x4,%eax
f01297c2:	89 c2                	mov    %eax,%edx
f01297c4:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f01297ca:	01 d0                	add    %edx,%eax
f01297cc:	48                   	dec    %eax
f01297cd:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f01297d3:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f01297d9:	ba 00 00 00 00       	mov    $0x0,%edx
f01297de:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f01297e4:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f01297ea:	29 d0                	sub    %edx,%eax
f01297ec:	01 d8                	add    %ebx,%eax
f01297ee:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f01297f3:	39 c1                	cmp    %eax,%ecx
f01297f5:	74 1d                	je     f0129814 <test_kfreelast+0x148d>
f01297f7:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01297fb:	75 17                	jne    f0129814 <test_kfreelast+0x148d>
f01297fd:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129804:	83 ec 0c             	sub    $0xc,%esp
f0129807:	68 30 b0 13 f0       	push   $0xf013b030
f012980c:	e8 20 76 fd ff       	call   f0100e31 <cprintf>
f0129811:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f0129814:	e8 6b ae fd ff       	call   f0104684 <pf_calculate_free_frames>
f0129819:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012981c:	74 1d                	je     f012983b <test_kfreelast+0x14b4>
f012981e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129822:	75 17                	jne    f012983b <test_kfreelast+0x14b4>
f0129824:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012982b:	83 ec 0c             	sub    $0xc,%esp
f012982e:	68 8c af 13 f0       	push   $0xf013af8c
f0129833:	e8 f9 75 fd ff       	call   f0100e31 <cprintf>
f0129838:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 3) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
f012983b:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012983e:	e8 fb 35 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0129843:	29 c3                	sub    %eax,%ebx
f0129845:	89 d8                	mov    %ebx,%eax
f0129847:	83 f8 03             	cmp    $0x3,%eax
f012984a:	74 1d                	je     f0129869 <test_kfreelast+0x14e2>
f012984c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129850:	75 17                	jne    f0129869 <test_kfreelast+0x14e2>
f0129852:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129859:	83 ec 0c             	sub    $0xc,%esp
f012985c:	68 98 b0 13 f0       	push   $0xf013b098
f0129861:	e8 cb 75 fd ff       	call   f0100e31 <cprintf>
f0129866:	83 c4 10             	add    $0x10,%esp
		lastIndices[12] = (10*kilo)/sizeof(char) - 1;
f0129869:	c7 85 b4 fe ff ff ff 	movl   $0x27ff,-0x14c(%ebp)
f0129870:	27 00 00 
		ptr = (char*)ptr_allocations[12];
f0129873:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f0129879:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[12]; ++i)
f012987c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129883:	eb 0e                	jmp    f0129893 <test_kfreelast+0x150c>
		{
			ptr[i] = 12 ;
f0129885:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0129888:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012988b:	01 d0                	add    %edx,%eax
f012988d:	c6 00 0c             	movb   $0xc,(%eax)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 13*Mega + 52*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
		if ((freeFrames - sys_calculate_free_frames()) != 3) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
		lastIndices[12] = (10*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[12];
		for (i = 0; i < lastIndices[12]; ++i)
f0129890:	ff 45 f4             	incl   -0xc(%ebp)
f0129893:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0129899:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012989c:	7f e7                	jg     f0129885 <test_kfreelast+0x14fe>
		{
			ptr[i] = 12 ;
		}
	}

	if (!f) {ce += 10;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f012989e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01298a2:	75 17                	jne    f01298bb <test_kfreelast+0x1534>
f01298a4:	83 45 f0 0a          	addl   $0xa,-0x10(%ebp)
f01298a8:	83 ec 08             	sub    $0x8,%esp
f01298ab:	ff 75 f0             	pushl  -0x10(%ebp)
f01298ae:	68 64 af 13 f0       	push   $0xf013af64
f01298b3:	e8 79 75 fd ff       	call   f0100e31 <cprintf>
f01298b8:	83 c4 10             	add    $0x10,%esp
f01298bb:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//Check memory access after kfree last and kalloc [15%]
	{
		//10 KB
		ptr = (char*)ptr_allocations[12];
f01298c2:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f01298c8:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[12]; ++i)
f01298cb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01298d2:	eb 1e                	jmp    f01298f2 <test_kfreelast+0x156b>
		{
			sums[12] += ptr[i] ;
f01298d4:	8b 95 64 fe ff ff    	mov    -0x19c(%ebp),%edx
f01298da:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01298dd:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01298e0:	01 c8                	add    %ecx,%eax
f01298e2:	8a 00                	mov    (%eax),%al
f01298e4:	0f be c0             	movsbl %al,%eax
f01298e7:	01 d0                	add    %edx,%eax
f01298e9:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)

	//Check memory access after kfree last and kalloc [15%]
	{
		//10 KB
		ptr = (char*)ptr_allocations[12];
		for (i = 0; i < lastIndices[12]; ++i)
f01298ef:	ff 45 f4             	incl   -0xc(%ebp)
f01298f2:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f01298f8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01298fb:	7f d7                	jg     f01298d4 <test_kfreelast+0x154d>
		{
			sums[12] += ptr[i] ;
		}
		if (sums[12] != 12*lastIndices[12])	if (!f) {f=1; cprintf("\nkfree: invalid read after freeing some allocations");}
f01298fd:	8b 8d 64 fe ff ff    	mov    -0x19c(%ebp),%ecx
f0129903:	8b 95 b4 fe ff ff    	mov    -0x14c(%ebp),%edx
f0129909:	89 d0                	mov    %edx,%eax
f012990b:	01 c0                	add    %eax,%eax
f012990d:	01 d0                	add    %edx,%eax
f012990f:	c1 e0 02             	shl    $0x2,%eax
f0129912:	39 c1                	cmp    %eax,%ecx
f0129914:	74 1d                	je     f0129933 <test_kfreelast+0x15ac>
f0129916:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012991a:	75 17                	jne    f0129933 <test_kfreelast+0x15ac>
f012991c:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129923:	83 ec 0c             	sub    $0xc,%esp
f0129926:	68 dc b0 13 f0       	push   $0xf013b0dc
f012992b:	e8 01 75 fd ff       	call   f0100e31 <cprintf>
f0129930:	83 c4 10             	add    $0x10,%esp


		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f0129933:	83 ec 0c             	sub    $0xc,%esp
f0129936:	6a 03                	push   $0x3
f0129938:	e8 9c 39 fe ff       	call   f010d2d9 <sys_bypassPageFault>
f012993d:	83 c4 10             	add    $0x10,%esp

		ptr = (char *) ptr_allocations[12] + 12*kilo;
f0129940:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f0129946:	05 00 30 00 00       	add    $0x3000,%eax
f012994b:	89 45 9c             	mov    %eax,-0x64(%ebp)

		for (i = 0; i < 30*kilo; ++i)
f012994e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129955:	eb 3c                	jmp    f0129993 <test_kfreelast+0x160c>
		{
			ptr[i] = 10;
f0129957:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012995a:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012995d:	01 d0                	add    %edx,%eax
f012995f:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f0129962:	e8 60 39 fe ff       	call   f010d2c7 <sys_rcr2>
f0129967:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012996a:	8b 55 9c             	mov    -0x64(%ebp),%edx
f012996d:	01 ca                	add    %ecx,%edx
f012996f:	39 d0                	cmp    %edx,%eax
f0129971:	74 1d                	je     f0129990 <test_kfreelast+0x1609>
f0129973:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129977:	75 17                	jne    f0129990 <test_kfreelast+0x1609>
f0129979:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129980:	83 ec 0c             	sub    $0xc,%esp
f0129983:	68 10 b1 13 f0       	push   $0xf013b110
f0129988:	e8 a4 74 fd ff       	call   f0100e31 <cprintf>
f012998d:	83 c4 10             	add    $0x10,%esp
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		ptr = (char *) ptr_allocations[12] + 12*kilo;

		for (i = 0; i < 30*kilo; ++i)
f0129990:	ff 45 f4             	incl   -0xc(%ebp)
f0129993:	81 7d f4 ff 77 00 00 	cmpl   $0x77ff,-0xc(%ebp)
f012999a:	7e bb                	jle    f0129957 <test_kfreelast+0x15d0>
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f012999c:	83 ec 0c             	sub    $0xc,%esp
f012999f:	6a 00                	push   $0x0
f01299a1:	e8 33 39 fe ff       	call   f010d2d9 <sys_bypassPageFault>
f01299a6:	83 c4 10             	add    $0x10,%esp

	}

	if (!f) {ce += 15;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f01299a9:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01299ad:	75 17                	jne    f01299c6 <test_kfreelast+0x163f>
f01299af:	83 45 f0 0f          	addl   $0xf,-0x10(%ebp)
f01299b3:	83 ec 08             	sub    $0x8,%esp
f01299b6:	ff 75 f0             	pushl  -0x10(%ebp)
f01299b9:	68 64 af 13 f0       	push   $0xf013af64
f01299be:	e8 6e 74 fd ff       	call   f0100e31 <cprintf>
f01299c3:	83 c4 10             	add    $0x10,%esp
f01299c6:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//kfree last allocated three spaces [but with different order]
	{
		//kfree 10 KB
		freeFrames = sys_calculate_free_frames() ;
f01299cd:	e8 6c 34 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f01299d2:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01299d5:	e8 aa ac fd ff       	call   f0104684 <pf_calculate_free_frames>
f01299da:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[12]);
f01299dd:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f01299e3:	83 ec 0c             	sub    $0xc,%esp
f01299e6:	50                   	push   %eax
f01299e7:	e8 f2 e9 fd ff       	call   f01083de <kfree>
f01299ec:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f01299ef:	e8 90 ac fd ff       	call   f0104684 <pf_calculate_free_frames>
f01299f4:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f01299f7:	74 1d                	je     f0129a16 <test_kfreelast+0x168f>
f01299f9:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01299fd:	75 17                	jne    f0129a16 <test_kfreelast+0x168f>
f01299ff:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129a06:	83 ec 0c             	sub    $0xc,%esp
f0129a09:	68 8c af 13 f0       	push   $0xf013af8c
f0129a0e:	e8 1e 74 fd ff       	call   f0100e31 <cprintf>
f0129a13:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 3) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f0129a16:	e8 23 34 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0129a1b:	89 c2                	mov    %eax,%edx
f0129a1d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0129a20:	29 c2                	sub    %eax,%edx
f0129a22:	89 d0                	mov    %edx,%eax
f0129a24:	83 f8 03             	cmp    $0x3,%eax
f0129a27:	74 1d                	je     f0129a46 <test_kfreelast+0x16bf>
f0129a29:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129a2d:	75 17                	jne    f0129a46 <test_kfreelast+0x16bf>
f0129a2f:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129a36:	83 ec 0c             	sub    $0xc,%esp
f0129a39:	68 f8 af 13 f0       	push   $0xf013aff8
f0129a3e:	e8 ee 73 fd ff       	call   f0100e31 <cprintf>
f0129a43:	83 c4 10             	add    $0x10,%esp

		//kfree 14 KB
		freeFrames = sys_calculate_free_frames() ;
f0129a46:	e8 f3 33 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0129a4b:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129a4e:	e8 31 ac fd ff       	call   f0104684 <pf_calculate_free_frames>
f0129a53:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[7]);
f0129a56:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f0129a5c:	83 ec 0c             	sub    $0xc,%esp
f0129a5f:	50                   	push   %eax
f0129a60:	e8 79 e9 fd ff       	call   f01083de <kfree>
f0129a65:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f0129a68:	e8 17 ac fd ff       	call   f0104684 <pf_calculate_free_frames>
f0129a6d:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129a70:	74 1d                	je     f0129a8f <test_kfreelast+0x1708>
f0129a72:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129a76:	75 17                	jne    f0129a8f <test_kfreelast+0x1708>
f0129a78:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129a7f:	83 ec 0c             	sub    $0xc,%esp
f0129a82:	68 8c af 13 f0       	push   $0xf013af8c
f0129a87:	e8 a5 73 fd ff       	call   f0100e31 <cprintf>
f0129a8c:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 4) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f0129a8f:	e8 aa 33 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0129a94:	89 c2                	mov    %eax,%edx
f0129a96:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0129a99:	29 c2                	sub    %eax,%edx
f0129a9b:	89 d0                	mov    %edx,%eax
f0129a9d:	83 f8 04             	cmp    $0x4,%eax
f0129aa0:	74 1d                	je     f0129abf <test_kfreelast+0x1738>
f0129aa2:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129aa6:	75 17                	jne    f0129abf <test_kfreelast+0x1738>
f0129aa8:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129aaf:	83 ec 0c             	sub    $0xc,%esp
f0129ab2:	68 f8 af 13 f0       	push   $0xf013aff8
f0129ab7:	e8 75 73 fd ff       	call   f0100e31 <cprintf>
f0129abc:	83 c4 10             	add    $0x10,%esp

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f0129abf:	e8 7a 33 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0129ac4:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129ac7:	e8 b8 ab fd ff       	call   f0104684 <pf_calculate_free_frames>
f0129acc:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[8]);
f0129acf:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f0129ad5:	83 ec 0c             	sub    $0xc,%esp
f0129ad8:	50                   	push   %eax
f0129ad9:	e8 00 e9 fd ff       	call   f01083de <kfree>
f0129ade:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f0129ae1:	e8 9e ab fd ff       	call   f0104684 <pf_calculate_free_frames>
f0129ae6:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129ae9:	74 1d                	je     f0129b08 <test_kfreelast+0x1781>
f0129aeb:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129aef:	75 17                	jne    f0129b08 <test_kfreelast+0x1781>
f0129af1:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129af8:	83 ec 0c             	sub    $0xc,%esp
f0129afb:	68 8c af 13 f0       	push   $0xf013af8c
f0129b00:	e8 2c 73 fd ff       	call   f0100e31 <cprintf>
f0129b05:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 5) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f0129b08:	e8 31 33 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0129b0d:	89 c2                	mov    %eax,%edx
f0129b0f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0129b12:	29 c2                	sub    %eax,%edx
f0129b14:	89 d0                	mov    %edx,%eax
f0129b16:	83 f8 05             	cmp    $0x5,%eax
f0129b19:	74 1d                	je     f0129b38 <test_kfreelast+0x17b1>
f0129b1b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129b1f:	75 17                	jne    f0129b38 <test_kfreelast+0x17b1>
f0129b21:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129b28:	83 ec 0c             	sub    $0xc,%esp
f0129b2b:	68 f8 af 13 f0       	push   $0xf013aff8
f0129b30:	e8 fc 72 fd ff       	call   f0100e31 <cprintf>
f0129b35:	83 c4 10             	add    $0x10,%esp


	//Allocate after kfree last allocated 3 spaces with different order [25%]
	{
		//50 KB
		freeFrames = sys_calculate_free_frames() ;
f0129b38:	e8 01 33 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0129b3d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129b40:	e8 3f ab fd ff       	call   f0104684 <pf_calculate_free_frames>
f0129b45:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[13] = kmalloc(50*kilo);
f0129b48:	83 ec 0c             	sub    $0xc,%esp
f0129b4b:	68 00 c8 00 00       	push   $0xc800
f0129b50:	e8 fe e6 fd ff       	call   f0108253 <kmalloc>
f0129b55:	83 c4 10             	add    $0x10,%esp
f0129b58:	89 85 18 fe ff ff    	mov    %eax,-0x1e8(%ebp)
		if ((uint32) ptr_allocations[13] != (ACTUAL_START + 7*Mega + 16*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
f0129b5e:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f0129b64:	89 c1                	mov    %eax,%ecx
f0129b66:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f0129b6d:	10 00 00 
f0129b70:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0129b75:	0f b6 d0             	movzbl %al,%edx
f0129b78:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0129b7e:	01 d0                	add    %edx,%eax
f0129b80:	48                   	dec    %eax
f0129b81:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f0129b87:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0129b8d:	ba 00 00 00 00       	mov    $0x0,%edx
f0129b92:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f0129b98:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0129b9e:	29 d0                	sub    %edx,%eax
f0129ba0:	89 c3                	mov    %eax,%ebx
f0129ba2:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f0129ba9:	10 00 00 
f0129bac:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0129bb1:	0f b6 c0             	movzbl %al,%eax
f0129bb4:	c1 e0 04             	shl    $0x4,%eax
f0129bb7:	89 c2                	mov    %eax,%edx
f0129bb9:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0129bbf:	01 d0                	add    %edx,%eax
f0129bc1:	48                   	dec    %eax
f0129bc2:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f0129bc8:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0129bce:	ba 00 00 00 00       	mov    $0x0,%edx
f0129bd3:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f0129bd9:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0129bdf:	29 d0                	sub    %edx,%eax
f0129be1:	01 d8                	add    %ebx,%eax
f0129be3:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0129be8:	39 c1                	cmp    %eax,%ecx
f0129bea:	74 1d                	je     f0129c09 <test_kfreelast+0x1882>
f0129bec:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129bf0:	75 17                	jne    f0129c09 <test_kfreelast+0x1882>
f0129bf2:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129bf9:	83 ec 0c             	sub    $0xc,%esp
f0129bfc:	68 30 b0 13 f0       	push   $0xf013b030
f0129c01:	e8 2b 72 fd ff       	call   f0100e31 <cprintf>
f0129c06:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f0129c09:	e8 76 aa fd ff       	call   f0104684 <pf_calculate_free_frames>
f0129c0e:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129c11:	74 1d                	je     f0129c30 <test_kfreelast+0x18a9>
f0129c13:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129c17:	75 17                	jne    f0129c30 <test_kfreelast+0x18a9>
f0129c19:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129c20:	83 ec 0c             	sub    $0xc,%esp
f0129c23:	68 8c af 13 f0       	push   $0xf013af8c
f0129c28:	e8 04 72 fd ff       	call   f0100e31 <cprintf>
f0129c2d:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 13) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
f0129c30:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0129c33:	e8 06 32 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0129c38:	29 c3                	sub    %eax,%ebx
f0129c3a:	89 d8                	mov    %ebx,%eax
f0129c3c:	83 f8 0d             	cmp    $0xd,%eax
f0129c3f:	74 1d                	je     f0129c5e <test_kfreelast+0x18d7>
f0129c41:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129c45:	75 17                	jne    f0129c5e <test_kfreelast+0x18d7>
f0129c47:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129c4e:	83 ec 0c             	sub    $0xc,%esp
f0129c51:	68 98 b0 13 f0       	push   $0xf013b098
f0129c56:	e8 d6 71 fd ff       	call   f0100e31 <cprintf>
f0129c5b:	83 c4 10             	add    $0x10,%esp
		lastIndices[13] = (50*kilo)/sizeof(char) - 1;
f0129c5e:	c7 85 b8 fe ff ff ff 	movl   $0xc7ff,-0x148(%ebp)
f0129c65:	c7 00 00 
		ptr = (char*)ptr_allocations[13];
f0129c68:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f0129c6e:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[13]; ++i)
f0129c71:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129c78:	eb 0e                	jmp    f0129c88 <test_kfreelast+0x1901>
		{
			ptr[i] = 13 ;
f0129c7a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0129c7d:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0129c80:	01 d0                	add    %edx,%eax
f0129c82:	c6 00 0d             	movb   $0xd,(%eax)
		if ((uint32) ptr_allocations[13] != (ACTUAL_START + 7*Mega + 16*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
		if ((freeFrames - sys_calculate_free_frames()) != 13) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
		lastIndices[13] = (50*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[13];
		for (i = 0; i < lastIndices[13]; ++i)
f0129c85:	ff 45 f4             	incl   -0xc(%ebp)
f0129c88:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0129c8e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129c91:	7f e7                	jg     f0129c7a <test_kfreelast+0x18f3>
		{
			ptr[i] = 13 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0129c93:	e8 a6 31 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0129c98:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129c9b:	e8 e4 a9 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0129ca0:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[14] = kmalloc(3*Mega-kilo);
f0129ca3:	83 ec 0c             	sub    $0xc,%esp
f0129ca6:	68 00 fc 2f 00       	push   $0x2ffc00
f0129cab:	e8 a3 e5 fd ff       	call   f0108253 <kmalloc>
f0129cb0:	83 c4 10             	add    $0x10,%esp
f0129cb3:	89 85 1c fe ff ff    	mov    %eax,-0x1e4(%ebp)
		if ((uint32) ptr_allocations[14] != (ACTUAL_START + 7*Mega + 68*kilo) ) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
f0129cb9:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f0129cbf:	89 c1                	mov    %eax,%ecx
f0129cc1:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f0129cc8:	10 00 00 
f0129ccb:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0129cd0:	0f b6 d0             	movzbl %al,%edx
f0129cd3:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0129cd9:	01 d0                	add    %edx,%eax
f0129cdb:	48                   	dec    %eax
f0129cdc:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f0129ce2:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0129ce8:	ba 00 00 00 00       	mov    $0x0,%edx
f0129ced:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f0129cf3:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0129cf9:	29 d0                	sub    %edx,%eax
f0129cfb:	89 c3                	mov    %eax,%ebx
f0129cfd:	c7 85 d8 fe ff ff 00 	movl   $0x1000,-0x128(%ebp)
f0129d04:	10 00 00 
f0129d07:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f0129d0c:	0f b6 c0             	movzbl %al,%eax
f0129d0f:	c1 e0 04             	shl    $0x4,%eax
f0129d12:	89 c2                	mov    %eax,%edx
f0129d14:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0129d1a:	01 d0                	add    %edx,%eax
f0129d1c:	48                   	dec    %eax
f0129d1d:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
f0129d23:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0129d29:	ba 00 00 00 00       	mov    $0x0,%edx
f0129d2e:	f7 b5 d8 fe ff ff    	divl   -0x128(%ebp)
f0129d34:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0129d3a:	29 d0                	sub    %edx,%eax
f0129d3c:	01 d8                	add    %ebx,%eax
f0129d3e:	2d 00 b0 8e 09       	sub    $0x98eb000,%eax
f0129d43:	39 c1                	cmp    %eax,%ecx
f0129d45:	74 1d                	je     f0129d64 <test_kfreelast+0x19dd>
f0129d47:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129d4b:	75 17                	jne    f0129d64 <test_kfreelast+0x19dd>
f0129d4d:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129d54:	83 ec 0c             	sub    $0xc,%esp
f0129d57:	68 30 b0 13 f0       	push   $0xf013b030
f0129d5c:	e8 d0 70 fd ff       	call   f0100e31 <cprintf>
f0129d61:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f0129d64:	e8 1b a9 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0129d69:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129d6c:	74 1d                	je     f0129d8b <test_kfreelast+0x1a04>
f0129d6e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129d72:	75 17                	jne    f0129d8b <test_kfreelast+0x1a04>
f0129d74:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129d7b:	83 ec 0c             	sub    $0xc,%esp
f0129d7e:	68 8c af 13 f0       	push   $0xf013af8c
f0129d83:	e8 a9 70 fd ff       	call   f0100e31 <cprintf>
f0129d88:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 768) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
f0129d8b:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0129d8e:	e8 ab 30 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0129d93:	29 c3                	sub    %eax,%ebx
f0129d95:	89 d8                	mov    %ebx,%eax
f0129d97:	3d 00 03 00 00       	cmp    $0x300,%eax
f0129d9c:	74 1d                	je     f0129dbb <test_kfreelast+0x1a34>
f0129d9e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129da2:	75 17                	jne    f0129dbb <test_kfreelast+0x1a34>
f0129da4:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129dab:	83 ec 0c             	sub    $0xc,%esp
f0129dae:	68 98 b0 13 f0       	push   $0xf013b098
f0129db3:	e8 79 70 fd ff       	call   f0100e31 <cprintf>
f0129db8:	83 c4 10             	add    $0x10,%esp
		lastIndices[14] = (3*Mega-kilo)/sizeof(char) - 1;
f0129dbb:	c7 85 bc fe ff ff ff 	movl   $0x2ffbff,-0x144(%ebp)
f0129dc2:	fb 2f 00 
		ptr = (char*)ptr_allocations[14];
f0129dc5:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f0129dcb:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[14]; ++i)
f0129dce:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129dd5:	eb 0e                	jmp    f0129de5 <test_kfreelast+0x1a5e>
		{
			ptr[i] = 14 ;
f0129dd7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0129dda:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0129ddd:	01 d0                	add    %edx,%eax
f0129ddf:	c6 00 0e             	movb   $0xe,(%eax)
		if ((uint32) ptr_allocations[14] != (ACTUAL_START + 7*Mega + 68*kilo) ) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
		if ((freeFrames - sys_calculate_free_frames()) != 768) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
		lastIndices[14] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[14];
		for (i = 0; i < lastIndices[14]; ++i)
f0129de2:	ff 45 f4             	incl   -0xc(%ebp)
f0129de5:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0129deb:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129dee:	7f e7                	jg     f0129dd7 <test_kfreelast+0x1a50>
		{
			ptr[i] = 14 ;
		}
	}

	if (!f) {ce += 25;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f0129df0:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129df4:	75 17                	jne    f0129e0d <test_kfreelast+0x1a86>
f0129df6:	83 45 f0 19          	addl   $0x19,-0x10(%ebp)
f0129dfa:	83 ec 08             	sub    $0x8,%esp
f0129dfd:	ff 75 f0             	pushl  -0x10(%ebp)
f0129e00:	68 64 af 13 f0       	push   $0xf013af64
f0129e05:	e8 27 70 fd ff       	call   f0100e31 <cprintf>
f0129e0a:	83 c4 10             	add    $0x10,%esp
f0129e0d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//kfree one of the newly allocated space that override a previously allocated one
	{
		//kfree 50 KB
		freeFrames = sys_calculate_free_frames() ;
f0129e14:	e8 25 30 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0129e19:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129e1c:	e8 63 a8 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0129e21:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[13]);
f0129e24:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f0129e2a:	83 ec 0c             	sub    $0xc,%esp
f0129e2d:	50                   	push   %eax
f0129e2e:	e8 ab e5 fd ff       	call   f01083de <kfree>
f0129e33:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f0129e36:	e8 49 a8 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0129e3b:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129e3e:	74 1d                	je     f0129e5d <test_kfreelast+0x1ad6>
f0129e40:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129e44:	75 17                	jne    f0129e5d <test_kfreelast+0x1ad6>
f0129e46:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129e4d:	83 ec 0c             	sub    $0xc,%esp
f0129e50:	68 8c af 13 f0       	push   $0xf013af8c
f0129e55:	e8 d7 6f fd ff       	call   f0100e31 <cprintf>
f0129e5a:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 13) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f0129e5d:	e8 dc 2f fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0129e62:	89 c2                	mov    %eax,%edx
f0129e64:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0129e67:	29 c2                	sub    %eax,%edx
f0129e69:	89 d0                	mov    %edx,%eax
f0129e6b:	83 f8 0d             	cmp    $0xd,%eax
f0129e6e:	74 1d                	je     f0129e8d <test_kfreelast+0x1b06>
f0129e70:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129e74:	75 17                	jne    f0129e8d <test_kfreelast+0x1b06>
f0129e76:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129e7d:	83 ec 0c             	sub    $0xc,%esp
f0129e80:	68 f8 af 13 f0       	push   $0xf013aff8
f0129e85:	e8 a7 6f fd ff       	call   f0100e31 <cprintf>
f0129e8a:	83 c4 10             	add    $0x10,%esp
	{
		//50 KB

		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f0129e8d:	83 ec 0c             	sub    $0xc,%esp
f0129e90:	6a 03                	push   $0x3
f0129e92:	e8 42 34 fe ff       	call   f010d2d9 <sys_bypassPageFault>
f0129e97:	83 c4 10             	add    $0x10,%esp

		ptr = (char *) ptr_allocations[13];
f0129e9a:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f0129ea0:	89 45 9c             	mov    %eax,-0x64(%ebp)

		for (i = 0; i < 50*kilo; ++i)
f0129ea3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129eaa:	eb 3c                	jmp    f0129ee8 <test_kfreelast+0x1b61>
		{
			ptr[i] = 10;
f0129eac:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0129eaf:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0129eb2:	01 d0                	add    %edx,%eax
f0129eb4:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f0129eb7:	e8 0b 34 fe ff       	call   f010d2c7 <sys_rcr2>
f0129ebc:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0129ebf:	8b 55 9c             	mov    -0x64(%ebp),%edx
f0129ec2:	01 ca                	add    %ecx,%edx
f0129ec4:	39 d0                	cmp    %edx,%eax
f0129ec6:	74 1d                	je     f0129ee5 <test_kfreelast+0x1b5e>
f0129ec8:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129ecc:	75 17                	jne    f0129ee5 <test_kfreelast+0x1b5e>
f0129ece:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129ed5:	83 ec 0c             	sub    $0xc,%esp
f0129ed8:	68 10 b1 13 f0       	push   $0xf013b110
f0129edd:	e8 4f 6f fd ff       	call   f0100e31 <cprintf>
f0129ee2:	83 c4 10             	add    $0x10,%esp
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		ptr = (char *) ptr_allocations[13];

		for (i = 0; i < 50*kilo; ++i)
f0129ee5:	ff 45 f4             	incl   -0xc(%ebp)
f0129ee8:	81 7d f4 ff c7 00 00 	cmpl   $0xc7ff,-0xc(%ebp)
f0129eef:	7e bb                	jle    f0129eac <test_kfreelast+0x1b25>
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f0129ef1:	83 ec 0c             	sub    $0xc,%esp
f0129ef4:	6a 00                	push   $0x0
f0129ef6:	e8 de 33 fe ff       	call   f010d2d9 <sys_bypassPageFault>
f0129efb:	83 c4 10             	add    $0x10,%esp


		//3 MB
		ptr = (char*)ptr_allocations[14];
f0129efe:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f0129f04:	89 45 9c             	mov    %eax,-0x64(%ebp)
		for (i = 0; i < lastIndices[14]; ++i)
f0129f07:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129f0e:	eb 1e                	jmp    f0129f2e <test_kfreelast+0x1ba7>
		{
			sums[14] += ptr[i] ;
f0129f10:	8b 95 6c fe ff ff    	mov    -0x194(%ebp),%edx
f0129f16:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0129f19:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0129f1c:	01 c8                	add    %ecx,%eax
f0129f1e:	8a 00                	mov    (%eax),%al
f0129f20:	0f be c0             	movsbl %al,%eax
f0129f23:	01 d0                	add    %edx,%eax
f0129f25:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		sys_bypassPageFault(0);


		//3 MB
		ptr = (char*)ptr_allocations[14];
		for (i = 0; i < lastIndices[14]; ++i)
f0129f2b:	ff 45 f4             	incl   -0xc(%ebp)
f0129f2e:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0129f34:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129f37:	7f d7                	jg     f0129f10 <test_kfreelast+0x1b89>
		{
			sums[14] += ptr[i] ;
		}
		if (sums[14] != 14*lastIndices[14])	if (!f) {f=1; cprintf("\nkfree: invalid read after freeing some allocations");}
f0129f39:	8b 8d 6c fe ff ff    	mov    -0x194(%ebp),%ecx
f0129f3f:	8b 95 bc fe ff ff    	mov    -0x144(%ebp),%edx
f0129f45:	89 d0                	mov    %edx,%eax
f0129f47:	01 c0                	add    %eax,%eax
f0129f49:	01 d0                	add    %edx,%eax
f0129f4b:	01 c0                	add    %eax,%eax
f0129f4d:	01 d0                	add    %edx,%eax
f0129f4f:	01 c0                	add    %eax,%eax
f0129f51:	39 c1                	cmp    %eax,%ecx
f0129f53:	74 1d                	je     f0129f72 <test_kfreelast+0x1beb>
f0129f55:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129f59:	75 17                	jne    f0129f72 <test_kfreelast+0x1beb>
f0129f5b:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129f62:	83 ec 0c             	sub    $0xc,%esp
f0129f65:	68 dc b0 13 f0       	push   $0xf013b0dc
f0129f6a:	e8 c2 6e fd ff       	call   f0100e31 <cprintf>
f0129f6f:	83 c4 10             	add    $0x10,%esp
	}

	if (!f) {ce += 15;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f0129f72:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129f76:	75 17                	jne    f0129f8f <test_kfreelast+0x1c08>
f0129f78:	83 45 f0 0f          	addl   $0xf,-0x10(%ebp)
f0129f7c:	83 ec 08             	sub    $0x8,%esp
f0129f7f:	ff 75 f0             	pushl  -0x10(%ebp)
f0129f82:	68 64 af 13 f0       	push   $0xf013af64
f0129f87:	e8 a5 6e fd ff       	call   f0100e31 <cprintf>
f0129f8c:	83 c4 10             	add    $0x10,%esp
f0129f8f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//kfree all remaining allocations
	{
		//kfree 7 KB
		freeFrames = sys_calculate_free_frames() ;
f0129f96:	e8 a3 2e fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0129f9b:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129f9e:	e8 e1 a6 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0129fa3:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[4]);
f0129fa6:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f0129fac:	83 ec 0c             	sub    $0xc,%esp
f0129faf:	50                   	push   %eax
f0129fb0:	e8 29 e4 fd ff       	call   f01083de <kfree>
f0129fb5:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f0129fb8:	e8 c7 a6 fd ff       	call   f0104684 <pf_calculate_free_frames>
f0129fbd:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129fc0:	74 1d                	je     f0129fdf <test_kfreelast+0x1c58>
f0129fc2:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129fc6:	75 17                	jne    f0129fdf <test_kfreelast+0x1c58>
f0129fc8:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129fcf:	83 ec 0c             	sub    $0xc,%esp
f0129fd2:	68 8c af 13 f0       	push   $0xf013af8c
f0129fd7:	e8 55 6e fd ff       	call   f0100e31 <cprintf>
f0129fdc:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 2) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f0129fdf:	e8 5a 2e fe ff       	call   f010ce3e <sys_calculate_free_frames>
f0129fe4:	89 c2                	mov    %eax,%edx
f0129fe6:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0129fe9:	29 c2                	sub    %eax,%edx
f0129feb:	89 d0                	mov    %edx,%eax
f0129fed:	83 f8 02             	cmp    $0x2,%eax
f0129ff0:	74 1d                	je     f012a00f <test_kfreelast+0x1c88>
f0129ff2:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0129ff6:	75 17                	jne    f012a00f <test_kfreelast+0x1c88>
f0129ff8:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0129fff:	83 ec 0c             	sub    $0xc,%esp
f012a002:	68 f8 af 13 f0       	push   $0xf013aff8
f012a007:	e8 25 6e fd ff       	call   f0100e31 <cprintf>
f012a00c:	83 c4 10             	add    $0x10,%esp

		//kfree 2nd 3 MB
		freeFrames = sys_calculate_free_frames() ;
f012a00f:	e8 2a 2e fe ff       	call   f010ce3e <sys_calculate_free_frames>
f012a014:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a017:	e8 68 a6 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012a01c:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[14]);
f012a01f:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f012a025:	83 ec 0c             	sub    $0xc,%esp
f012a028:	50                   	push   %eax
f012a029:	e8 b0 e3 fd ff       	call   f01083de <kfree>
f012a02e:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012a031:	e8 4e a6 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012a036:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a039:	74 1d                	je     f012a058 <test_kfreelast+0x1cd1>
f012a03b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a03f:	75 17                	jne    f012a058 <test_kfreelast+0x1cd1>
f012a041:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a048:	83 ec 0c             	sub    $0xc,%esp
f012a04b:	68 8c af 13 f0       	push   $0xf013af8c
f012a050:	e8 dc 6d fd ff       	call   f0100e31 <cprintf>
f012a055:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012a058:	e8 e1 2d fe ff       	call   f010ce3e <sys_calculate_free_frames>
f012a05d:	89 c2                	mov    %eax,%edx
f012a05f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012a062:	29 c2                	sub    %eax,%edx
f012a064:	89 d0                	mov    %edx,%eax
f012a066:	3d 00 03 00 00       	cmp    $0x300,%eax
f012a06b:	74 1d                	je     f012a08a <test_kfreelast+0x1d03>
f012a06d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a071:	75 17                	jne    f012a08a <test_kfreelast+0x1d03>
f012a073:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a07a:	83 ec 0c             	sub    $0xc,%esp
f012a07d:	68 f8 af 13 f0       	push   $0xf013aff8
f012a082:	e8 aa 6d fd ff       	call   f0100e31 <cprintf>
f012a087:	83 c4 10             	add    $0x10,%esp

		//kfree 1st 3 MB
		freeFrames = sys_calculate_free_frames() ;
f012a08a:	e8 af 2d fe ff       	call   f010ce3e <sys_calculate_free_frames>
f012a08f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a092:	e8 ed a5 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012a097:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[5]);
f012a09a:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f012a0a0:	83 ec 0c             	sub    $0xc,%esp
f012a0a3:	50                   	push   %eax
f012a0a4:	e8 35 e3 fd ff       	call   f01083de <kfree>
f012a0a9:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012a0ac:	e8 d3 a5 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012a0b1:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a0b4:	74 1d                	je     f012a0d3 <test_kfreelast+0x1d4c>
f012a0b6:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a0ba:	75 17                	jne    f012a0d3 <test_kfreelast+0x1d4c>
f012a0bc:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a0c3:	83 ec 0c             	sub    $0xc,%esp
f012a0c6:	68 8c af 13 f0       	push   $0xf013af8c
f012a0cb:	e8 61 6d fd ff       	call   f0100e31 <cprintf>
f012a0d0:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012a0d3:	e8 66 2d fe ff       	call   f010ce3e <sys_calculate_free_frames>
f012a0d8:	89 c2                	mov    %eax,%edx
f012a0da:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012a0dd:	29 c2                	sub    %eax,%edx
f012a0df:	89 d0                	mov    %edx,%eax
f012a0e1:	3d 00 03 00 00       	cmp    $0x300,%eax
f012a0e6:	74 1d                	je     f012a105 <test_kfreelast+0x1d7e>
f012a0e8:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a0ec:	75 17                	jne    f012a105 <test_kfreelast+0x1d7e>
f012a0ee:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a0f5:	83 ec 0c             	sub    $0xc,%esp
f012a0f8:	68 f8 af 13 f0       	push   $0xf013aff8
f012a0fd:	e8 2f 6d fd ff       	call   f0100e31 <cprintf>
f012a102:	83 c4 10             	add    $0x10,%esp

		//kfree 1st 2 KB
		freeFrames = sys_calculate_free_frames() ;
f012a105:	e8 34 2d fe ff       	call   f010ce3e <sys_calculate_free_frames>
f012a10a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a10d:	e8 72 a5 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012a112:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[2]);
f012a115:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f012a11b:	83 ec 0c             	sub    $0xc,%esp
f012a11e:	50                   	push   %eax
f012a11f:	e8 ba e2 fd ff       	call   f01083de <kfree>
f012a124:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012a127:	e8 58 a5 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012a12c:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a12f:	74 1d                	je     f012a14e <test_kfreelast+0x1dc7>
f012a131:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a135:	75 17                	jne    f012a14e <test_kfreelast+0x1dc7>
f012a137:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a13e:	83 ec 0c             	sub    $0xc,%esp
f012a141:	68 8c af 13 f0       	push   $0xf013af8c
f012a146:	e8 e6 6c fd ff       	call   f0100e31 <cprintf>
f012a14b:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 1) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012a14e:	e8 eb 2c fe ff       	call   f010ce3e <sys_calculate_free_frames>
f012a153:	89 c2                	mov    %eax,%edx
f012a155:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012a158:	29 c2                	sub    %eax,%edx
f012a15a:	89 d0                	mov    %edx,%eax
f012a15c:	83 f8 01             	cmp    $0x1,%eax
f012a15f:	74 1d                	je     f012a17e <test_kfreelast+0x1df7>
f012a161:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a165:	75 17                	jne    f012a17e <test_kfreelast+0x1df7>
f012a167:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a16e:	83 ec 0c             	sub    $0xc,%esp
f012a171:	68 f8 af 13 f0       	push   $0xf013aff8
f012a176:	e8 b6 6c fd ff       	call   f0100e31 <cprintf>
f012a17b:	83 c4 10             	add    $0x10,%esp

		//kfree 2nd 2 KB
		freeFrames = sys_calculate_free_frames() ;
f012a17e:	e8 bb 2c fe ff       	call   f010ce3e <sys_calculate_free_frames>
f012a183:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a186:	e8 f9 a4 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012a18b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[3]);
f012a18e:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f012a194:	83 ec 0c             	sub    $0xc,%esp
f012a197:	50                   	push   %eax
f012a198:	e8 41 e2 fd ff       	call   f01083de <kfree>
f012a19d:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012a1a0:	e8 df a4 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012a1a5:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a1a8:	74 1d                	je     f012a1c7 <test_kfreelast+0x1e40>
f012a1aa:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a1ae:	75 17                	jne    f012a1c7 <test_kfreelast+0x1e40>
f012a1b0:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a1b7:	83 ec 0c             	sub    $0xc,%esp
f012a1ba:	68 8c af 13 f0       	push   $0xf013af8c
f012a1bf:	e8 6d 6c fd ff       	call   f0100e31 <cprintf>
f012a1c4:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 1) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012a1c7:	e8 72 2c fe ff       	call   f010ce3e <sys_calculate_free_frames>
f012a1cc:	89 c2                	mov    %eax,%edx
f012a1ce:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012a1d1:	29 c2                	sub    %eax,%edx
f012a1d3:	89 d0                	mov    %edx,%eax
f012a1d5:	83 f8 01             	cmp    $0x1,%eax
f012a1d8:	74 1d                	je     f012a1f7 <test_kfreelast+0x1e70>
f012a1da:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a1de:	75 17                	jne    f012a1f7 <test_kfreelast+0x1e70>
f012a1e0:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a1e7:	83 ec 0c             	sub    $0xc,%esp
f012a1ea:	68 f8 af 13 f0       	push   $0xf013aff8
f012a1ef:	e8 3d 6c fd ff       	call   f0100e31 <cprintf>
f012a1f4:	83 c4 10             	add    $0x10,%esp

		if(start_freeFrames != (sys_calculate_free_frames())) if (!f) {f=1; cprintf("\nWrong kfree: not all pages removed correctly at end");}
f012a1f7:	e8 42 2c fe ff       	call   f010ce3e <sys_calculate_free_frames>
f012a1fc:	89 c2                	mov    %eax,%edx
f012a1fe:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012a201:	39 c2                	cmp    %eax,%edx
f012a203:	74 1d                	je     f012a222 <test_kfreelast+0x1e9b>
f012a205:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a209:	75 17                	jne    f012a222 <test_kfreelast+0x1e9b>
f012a20b:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a212:	83 ec 0c             	sub    $0xc,%esp
f012a215:	68 58 b1 13 f0       	push   $0xf013b158
f012a21a:	e8 12 6c fd ff       	call   f0100e31 <cprintf>
f012a21f:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f012a222:	83 ec 0c             	sub    $0xc,%esp
f012a225:	6a 03                	push   $0x3
f012a227:	e8 ad 30 fe ff       	call   f010d2d9 <sys_bypassPageFault>
f012a22c:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 15; ++i)
f012a22f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a236:	e9 8e 00 00 00       	jmp    f012a2c9 <test_kfreelast+0x1f42>
		{
			ptr = (char *) ptr_allocations[i];
f012a23b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012a23e:	8b 84 85 e4 fd ff ff 	mov    -0x21c(%ebp,%eax,4),%eax
f012a245:	89 45 9c             	mov    %eax,-0x64(%ebp)
			ptr[0] = 10;
f012a248:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012a24b:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f012a24e:	e8 74 30 fe ff       	call   f010d2c7 <sys_rcr2>
f012a253:	89 c2                	mov    %eax,%edx
f012a255:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012a258:	39 c2                	cmp    %eax,%edx
f012a25a:	74 1d                	je     f012a279 <test_kfreelast+0x1ef2>
f012a25c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a260:	75 17                	jne    f012a279 <test_kfreelast+0x1ef2>
f012a262:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a269:	83 ec 0c             	sub    $0xc,%esp
f012a26c:	68 10 b1 13 f0       	push   $0xf013b110
f012a271:	e8 bb 6b fd ff       	call   f0100e31 <cprintf>
f012a276:	83 c4 10             	add    $0x10,%esp
			ptr[lastIndices[i]] = 10;
f012a279:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012a27c:	8b 84 85 84 fe ff ff 	mov    -0x17c(%ebp,%eax,4),%eax
f012a283:	89 c2                	mov    %eax,%edx
f012a285:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012a288:	01 d0                	add    %edx,%eax
f012a28a:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f012a28d:	e8 35 30 fe ff       	call   f010d2c7 <sys_rcr2>
f012a292:	89 c2                	mov    %eax,%edx
f012a294:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012a297:	8b 84 85 84 fe ff ff 	mov    -0x17c(%ebp,%eax,4),%eax
f012a29e:	89 c1                	mov    %eax,%ecx
f012a2a0:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012a2a3:	01 c8                	add    %ecx,%eax
f012a2a5:	39 c2                	cmp    %eax,%edx
f012a2a7:	74 1d                	je     f012a2c6 <test_kfreelast+0x1f3f>
f012a2a9:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a2ad:	75 17                	jne    f012a2c6 <test_kfreelast+0x1f3f>
f012a2af:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a2b6:	83 ec 0c             	sub    $0xc,%esp
f012a2b9:	68 10 b1 13 f0       	push   $0xf013b110
f012a2be:	e8 6e 6b fd ff       	call   f0100e31 <cprintf>
f012a2c3:	83 c4 10             	add    $0x10,%esp
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 15; ++i)
f012a2c6:	ff 45 f4             	incl   -0xc(%ebp)
f012a2c9:	83 7d f4 0e          	cmpl   $0xe,-0xc(%ebp)
f012a2cd:	0f 8e 68 ff ff ff    	jle    f012a23b <test_kfreelast+0x1eb4>
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f012a2d3:	83 ec 0c             	sub    $0xc,%esp
f012a2d6:	6a 00                	push   $0x0
f012a2d8:	e8 fc 2f fe ff       	call   f010d2d9 <sys_bypassPageFault>
f012a2dd:	83 c4 10             	add    $0x10,%esp
	}

	//kfree non-exist item
	{
		//kfree 2 MB
		freeFrames = sys_calculate_free_frames() ;
f012a2e0:	e8 59 2b fe ff       	call   f010ce3e <sys_calculate_free_frames>
f012a2e5:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a2e8:	e8 97 a3 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012a2ed:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[0]);
f012a2f0:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f012a2f6:	83 ec 0c             	sub    $0xc,%esp
f012a2f9:	50                   	push   %eax
f012a2fa:	e8 df e0 fd ff       	call   f01083de <kfree>
f012a2ff:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012a302:	e8 7d a3 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012a307:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a30a:	74 1d                	je     f012a329 <test_kfreelast+0x1fa2>
f012a30c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a310:	75 17                	jne    f012a329 <test_kfreelast+0x1fa2>
f012a312:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a319:	83 ec 0c             	sub    $0xc,%esp
f012a31c:	68 8c af 13 f0       	push   $0xf013af8c
f012a321:	e8 0b 6b fd ff       	call   f0100e31 <cprintf>
f012a326:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f012a329:	e8 10 2b fe ff       	call   f010ce3e <sys_calculate_free_frames>
f012a32e:	89 c2                	mov    %eax,%edx
f012a330:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012a333:	39 c2                	cmp    %eax,%edx
f012a335:	74 1d                	je     f012a354 <test_kfreelast+0x1fcd>
f012a337:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a33b:	75 17                	jne    f012a354 <test_kfreelast+0x1fcd>
f012a33d:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a344:	83 ec 0c             	sub    $0xc,%esp
f012a347:	68 90 b1 13 f0       	push   $0xf013b190
f012a34c:	e8 e0 6a fd ff       	call   f0100e31 <cprintf>
f012a351:	83 c4 10             	add    $0x10,%esp

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f012a354:	e8 e5 2a fe ff       	call   f010ce3e <sys_calculate_free_frames>
f012a359:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a35c:	e8 23 a3 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012a361:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[2]);
f012a364:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f012a36a:	83 ec 0c             	sub    $0xc,%esp
f012a36d:	50                   	push   %eax
f012a36e:	e8 6b e0 fd ff       	call   f01083de <kfree>
f012a373:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012a376:	e8 09 a3 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012a37b:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a37e:	74 1d                	je     f012a39d <test_kfreelast+0x2016>
f012a380:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a384:	75 17                	jne    f012a39d <test_kfreelast+0x2016>
f012a386:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a38d:	83 ec 0c             	sub    $0xc,%esp
f012a390:	68 8c af 13 f0       	push   $0xf013af8c
f012a395:	e8 97 6a fd ff       	call   f0100e31 <cprintf>
f012a39a:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f012a39d:	e8 9c 2a fe ff       	call   f010ce3e <sys_calculate_free_frames>
f012a3a2:	89 c2                	mov    %eax,%edx
f012a3a4:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012a3a7:	39 c2                	cmp    %eax,%edx
f012a3a9:	74 1d                	je     f012a3c8 <test_kfreelast+0x2041>
f012a3ab:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a3af:	75 17                	jne    f012a3c8 <test_kfreelast+0x2041>
f012a3b1:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a3b8:	83 ec 0c             	sub    $0xc,%esp
f012a3bb:	68 90 b1 13 f0       	push   $0xf013b190
f012a3c0:	e8 6c 6a fd ff       	call   f0100e31 <cprintf>
f012a3c5:	83 c4 10             	add    $0x10,%esp

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f012a3c8:	e8 71 2a fe ff       	call   f010ce3e <sys_calculate_free_frames>
f012a3cd:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a3d0:	e8 af a2 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012a3d5:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[8]);
f012a3d8:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f012a3de:	83 ec 0c             	sub    $0xc,%esp
f012a3e1:	50                   	push   %eax
f012a3e2:	e8 f7 df fd ff       	call   f01083de <kfree>
f012a3e7:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012a3ea:	e8 95 a2 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012a3ef:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a3f2:	74 1d                	je     f012a411 <test_kfreelast+0x208a>
f012a3f4:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a3f8:	75 17                	jne    f012a411 <test_kfreelast+0x208a>
f012a3fa:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a401:	83 ec 0c             	sub    $0xc,%esp
f012a404:	68 8c af 13 f0       	push   $0xf013af8c
f012a409:	e8 23 6a fd ff       	call   f0100e31 <cprintf>
f012a40e:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f012a411:	e8 28 2a fe ff       	call   f010ce3e <sys_calculate_free_frames>
f012a416:	89 c2                	mov    %eax,%edx
f012a418:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012a41b:	39 c2                	cmp    %eax,%edx
f012a41d:	74 1d                	je     f012a43c <test_kfreelast+0x20b5>
f012a41f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a423:	75 17                	jne    f012a43c <test_kfreelast+0x20b5>
f012a425:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a42c:	83 ec 0c             	sub    $0xc,%esp
f012a42f:	68 90 b1 13 f0       	push   $0xf013b190
f012a434:	e8 f8 69 fd ff       	call   f0100e31 <cprintf>
f012a439:	83 c4 10             	add    $0x10,%esp

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f012a43c:	e8 fd 29 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f012a441:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a444:	e8 3b a2 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012a449:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[9]);
f012a44c:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012a452:	83 ec 0c             	sub    $0xc,%esp
f012a455:	50                   	push   %eax
f012a456:	e8 83 df fd ff       	call   f01083de <kfree>
f012a45b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012a45e:	e8 21 a2 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012a463:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a466:	74 1d                	je     f012a485 <test_kfreelast+0x20fe>
f012a468:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a46c:	75 17                	jne    f012a485 <test_kfreelast+0x20fe>
f012a46e:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a475:	83 ec 0c             	sub    $0xc,%esp
f012a478:	68 8c af 13 f0       	push   $0xf013af8c
f012a47d:	e8 af 69 fd ff       	call   f0100e31 <cprintf>
f012a482:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f012a485:	e8 b4 29 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f012a48a:	89 c2                	mov    %eax,%edx
f012a48c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012a48f:	39 c2                	cmp    %eax,%edx
f012a491:	74 1d                	je     f012a4b0 <test_kfreelast+0x2129>
f012a493:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a497:	75 17                	jne    f012a4b0 <test_kfreelast+0x2129>
f012a499:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a4a0:	83 ec 0c             	sub    $0xc,%esp
f012a4a3:	68 90 b1 13 f0       	push   $0xf013b190
f012a4a8:	e8 84 69 fd ff       	call   f0100e31 <cprintf>
f012a4ad:	83 c4 10             	add    $0x10,%esp

	}

	if (!f) {ce += 10;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f012a4b0:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a4b4:	75 17                	jne    f012a4cd <test_kfreelast+0x2146>
f012a4b6:	83 45 f0 0a          	addl   $0xa,-0x10(%ebp)
f012a4ba:	83 ec 08             	sub    $0x8,%esp
f012a4bd:	ff 75 f0             	pushl  -0x10(%ebp)
f012a4c0:	68 64 af 13 f0       	push   $0xf013af64
f012a4c5:	e8 67 69 fd ff       	call   f0100e31 <cprintf>
f012a4ca:	83 c4 10             	add    $0x10,%esp
f012a4cd:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//cprintf("\nCongratulations!! your modification is run successfully.\n");

	return 1;
f012a4d4:	b8 01 00 00 00       	mov    $0x1,%eax
}
f012a4d9:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012a4dc:	5b                   	pop    %ebx
f012a4dd:	5f                   	pop    %edi
f012a4de:	5d                   	pop    %ebp
f012a4df:	c3                   	ret    

f012a4e0 <test_krealloc>:

int test_krealloc() {
f012a4e0:	55                   	push   %ebp
f012a4e1:	89 e5                	mov    %esp,%ebp
f012a4e3:	57                   	push   %edi
f012a4e4:	53                   	push   %ebx
f012a4e5:	81 ec 00 02 00 00    	sub    $0x200,%esp
	cprintf("==============================================\n");
f012a4eb:	83 ec 0c             	sub    $0xc,%esp
f012a4ee:	68 74 9e 13 f0       	push   $0xf0139e74
f012a4f3:	e8 39 69 fd ff       	call   f0100e31 <cprintf>
f012a4f8:	83 c4 10             	add    $0x10,%esp
	cprintf(
f012a4fb:	83 ec 0c             	sub    $0xc,%esp
f012a4fe:	68 a4 9e 13 f0       	push   $0xf0139ea4
f012a503:	e8 29 69 fd ff       	call   f0100e31 <cprintf>
f012a508:	83 c4 10             	add    $0x10,%esp
			"MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
	cprintf("==============================================\n");
f012a50b:	83 ec 0c             	sub    $0xc,%esp
f012a50e:	68 74 9e 13 f0       	push   $0xf0139e74
f012a513:	e8 19 69 fd ff       	call   f0100e31 <cprintf>
f012a518:	83 c4 10             	add    $0x10,%esp
	char minByte = 1 << 7;
f012a51b:	c6 45 cf 80          	movb   $0x80,-0x31(%ebp)
	char maxByte = 0x7F;
f012a51f:	c6 45 ce 7f          	movb   $0x7f,-0x32(%ebp)
	short minShort = 1 << 15;
f012a523:	66 c7 45 cc 00 80    	movw   $0x8000,-0x34(%ebp)
	short maxShort = 0x7FFF;
f012a529:	66 c7 45 ca ff 7f    	movw   $0x7fff,-0x36(%ebp)
	int minInt = 1 << 31;
f012a52f:	c7 45 c4 00 00 00 80 	movl   $0x80000000,-0x3c(%ebp)
	int maxInt = 0x7FFFFFFF;
f012a536:	c7 45 c0 ff ff ff 7f 	movl   $0x7fffffff,-0x40(%ebp)
	int *intArr;
	struct MyStruct *structArr;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2,
			lastIndexOfInt, lastIndexOfStruct;
	//[1] Test calling krealloc with VA = NULL. It should call malloc
	void* ptr_allocations[20] = { 0 };
f012a53d:	8d 95 a8 fe ff ff    	lea    -0x158(%ebp),%edx
f012a543:	b9 14 00 00 00       	mov    $0x14,%ecx
f012a548:	b8 00 00 00 00       	mov    $0x0,%eax
f012a54d:	89 d7                	mov    %edx,%edi
f012a54f:	f3 ab                	rep stos %eax,%es:(%edi)
	char* ptr;
	void* newAddress = NULL;
f012a551:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
	int freeDiskFrames;


	int lastIndices[20] = { 0 };
f012a558:	8d 95 58 fe ff ff    	lea    -0x1a8(%ebp),%edx
f012a55e:	b9 14 00 00 00       	mov    $0x14,%ecx
f012a563:	b8 00 00 00 00       	mov    $0x0,%eax
f012a568:	89 d7                	mov    %edx,%edi
f012a56a:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = { 0 };
f012a56c:	8d 95 08 fe ff ff    	lea    -0x1f8(%ebp),%edx
f012a572:	b9 14 00 00 00       	mov    $0x14,%ecx
f012a577:	b8 00 00 00 00       	mov    $0x0,%eax
f012a57c:	89 d7                	mov    %edx,%edi
f012a57e:	f3 ab                	rep stos %eax,%es:(%edi)
	int freeFrames;
	//[1] Allocate all
	{
		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012a580:	e8 b9 28 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f012a585:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[0] = krealloc(NULL, 1 * Mega - kilo);
f012a588:	83 ec 08             	sub    $0x8,%esp
f012a58b:	68 00 fc 0f 00       	push   $0xffc00
f012a590:	6a 00                	push   $0x0
f012a592:	e8 f5 de fd ff       	call   f010848c <krealloc>
f012a597:	83 c4 10             	add    $0x10,%esp
f012a59a:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
		if ((uint32) ptr_allocations[0] < (KERNEL_HEAP_START))
f012a5a0:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012a5a6:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012a5ab:	77 17                	ja     f012a5c4 <test_krealloc+0xe4>
			panic("krealloc: Wrong start address for the allocated space... ");
f012a5ad:	83 ec 04             	sub    $0x4,%esp
f012a5b0:	68 d8 b1 13 f0       	push   $0xf013b1d8
f012a5b5:	68 e2 0e 00 00       	push   $0xee2
f012a5ba:	68 32 9f 13 f0       	push   $0xf0139f32
f012a5bf:	e8 ec 5b fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[0] != ACTUAL_START)
f012a5c4:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012a5ca:	89 c1                	mov    %eax,%ecx
f012a5cc:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f012a5d3:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f012a5d8:	0f b6 d0             	movzbl %al,%edx
f012a5db:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f012a5de:	01 d0                	add    %edx,%eax
f012a5e0:	48                   	dec    %eax
f012a5e1:	89 45 b0             	mov    %eax,-0x50(%ebp)
f012a5e4:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012a5e7:	ba 00 00 00 00       	mov    $0x0,%edx
f012a5ec:	f7 75 b4             	divl   -0x4c(%ebp)
f012a5ef:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012a5f2:	29 d0                	sub    %edx,%eax
f012a5f4:	89 c3                	mov    %eax,%ebx
f012a5f6:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f012a5fd:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f012a602:	0f b6 c0             	movzbl %al,%eax
f012a605:	c1 e0 04             	shl    $0x4,%eax
f012a608:	89 c2                	mov    %eax,%edx
f012a60a:	8b 45 ac             	mov    -0x54(%ebp),%eax
f012a60d:	01 d0                	add    %edx,%eax
f012a60f:	48                   	dec    %eax
f012a610:	89 45 a8             	mov    %eax,-0x58(%ebp)
f012a613:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012a616:	ba 00 00 00 00       	mov    $0x0,%edx
f012a61b:	f7 75 ac             	divl   -0x54(%ebp)
f012a61e:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012a621:	29 d0                	sub    %edx,%eax
f012a623:	01 d8                	add    %ebx,%eax
f012a625:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f012a62a:	39 c1                	cmp    %eax,%ecx
f012a62c:	74 17                	je     f012a645 <test_krealloc+0x165>
			panic("krealloc: Wrong start address for allocated space");
f012a62e:	83 ec 04             	sub    $0x4,%esp
f012a631:	68 14 b2 13 f0       	push   $0xf013b214
f012a636:	68 e4 0e 00 00       	push   $0xee4
f012a63b:	68 32 9f 13 f0       	push   $0xf0139f32
f012a640:	e8 6b 5b fd ff       	call   f01001b0 <_panic>

		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012a645:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012a648:	e8 f1 27 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f012a64d:	29 c3                	sub    %eax,%ebx
f012a64f:	89 d8                	mov    %ebx,%eax
f012a651:	3d 00 01 00 00       	cmp    $0x100,%eax
f012a656:	74 17                	je     f012a66f <test_krealloc+0x18f>
			panic("krealloc: Wrong allocation: ");
f012a658:	83 ec 04             	sub    $0x4,%esp
f012a65b:	68 46 b2 13 f0       	push   $0xf013b246
f012a660:	68 e7 0e 00 00       	push   $0xee7
f012a665:	68 32 9f 13 f0       	push   $0xf0139f32
f012a66a:	e8 41 5b fd ff       	call   f01001b0 <_panic>

		lastIndices[0] = (1 * Mega - kilo) / sizeof(char) - 1;
f012a66f:	c7 85 58 fe ff ff ff 	movl   $0xffbff,-0x1a8(%ebp)
f012a676:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012a679:	e8 c0 27 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f012a67e:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[1] = krealloc(NULL, 1 * Mega - kilo);
f012a681:	83 ec 08             	sub    $0x8,%esp
f012a684:	68 00 fc 0f 00       	push   $0xffc00
f012a689:	6a 00                	push   $0x0
f012a68b:	e8 fc dd fd ff       	call   f010848c <krealloc>
f012a690:	83 c4 10             	add    $0x10,%esp
f012a693:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
		if ((uint32) ptr_allocations[1] < (KERNEL_HEAP_START + 1 * Mega))
f012a699:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012a69f:	3d ff ff 0f f6       	cmp    $0xf60fffff,%eax
f012a6a4:	77 17                	ja     f012a6bd <test_krealloc+0x1dd>
			panic("krealloc: Wrong start address for the allocated space... ");
f012a6a6:	83 ec 04             	sub    $0x4,%esp
f012a6a9:	68 d8 b1 13 f0       	push   $0xf013b1d8
f012a6ae:	68 ef 0e 00 00       	push   $0xeef
f012a6b3:	68 32 9f 13 f0       	push   $0xf0139f32
f012a6b8:	e8 f3 5a fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[1] != ACTUAL_START + (1 * Mega))
f012a6bd:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012a6c3:	89 c1                	mov    %eax,%ecx
f012a6c5:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f012a6cc:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f012a6d1:	0f b6 d0             	movzbl %al,%edx
f012a6d4:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012a6d7:	01 d0                	add    %edx,%eax
f012a6d9:	48                   	dec    %eax
f012a6da:	89 45 a0             	mov    %eax,-0x60(%ebp)
f012a6dd:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012a6e0:	ba 00 00 00 00       	mov    $0x0,%edx
f012a6e5:	f7 75 a4             	divl   -0x5c(%ebp)
f012a6e8:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012a6eb:	29 d0                	sub    %edx,%eax
f012a6ed:	89 c3                	mov    %eax,%ebx
f012a6ef:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f012a6f6:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f012a6fb:	0f b6 c0             	movzbl %al,%eax
f012a6fe:	c1 e0 04             	shl    $0x4,%eax
f012a701:	89 c2                	mov    %eax,%edx
f012a703:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012a706:	01 d0                	add    %edx,%eax
f012a708:	48                   	dec    %eax
f012a709:	89 45 98             	mov    %eax,-0x68(%ebp)
f012a70c:	8b 45 98             	mov    -0x68(%ebp),%eax
f012a70f:	ba 00 00 00 00       	mov    $0x0,%edx
f012a714:	f7 75 9c             	divl   -0x64(%ebp)
f012a717:	8b 45 98             	mov    -0x68(%ebp),%eax
f012a71a:	29 d0                	sub    %edx,%eax
f012a71c:	01 d8                	add    %ebx,%eax
f012a71e:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f012a723:	39 c1                	cmp    %eax,%ecx
f012a725:	74 17                	je     f012a73e <test_krealloc+0x25e>
			panic("krealloc: Wrong start address for allocated space");
f012a727:	83 ec 04             	sub    $0x4,%esp
f012a72a:	68 14 b2 13 f0       	push   $0xf013b214
f012a72f:	68 f1 0e 00 00       	push   $0xef1
f012a734:	68 32 9f 13 f0       	push   $0xf0139f32
f012a739:	e8 72 5a fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012a73e:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012a741:	e8 f8 26 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f012a746:	29 c3                	sub    %eax,%ebx
f012a748:	89 d8                	mov    %ebx,%eax
f012a74a:	3d 00 01 00 00       	cmp    $0x100,%eax
f012a74f:	74 17                	je     f012a768 <test_krealloc+0x288>
			panic("krealloc: Wrong allocation: ");
f012a751:	83 ec 04             	sub    $0x4,%esp
f012a754:	68 46 b2 13 f0       	push   $0xf013b246
f012a759:	68 f3 0e 00 00       	push   $0xef3
f012a75e:	68 32 9f 13 f0       	push   $0xf0139f32
f012a763:	e8 48 5a fd ff       	call   f01001b0 <_panic>

		lastIndices[1] = (1 * Mega - kilo) / sizeof(char) - 1;
f012a768:	c7 85 5c fe ff ff ff 	movl   $0xffbff,-0x1a4(%ebp)
f012a76f:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012a772:	e8 c7 26 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f012a777:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[2] = krealloc(NULL, 1 * Mega - kilo);
f012a77a:	83 ec 08             	sub    $0x8,%esp
f012a77d:	68 00 fc 0f 00       	push   $0xffc00
f012a782:	6a 00                	push   $0x0
f012a784:	e8 03 dd fd ff       	call   f010848c <krealloc>
f012a789:	83 c4 10             	add    $0x10,%esp
f012a78c:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
		if ((uint32) ptr_allocations[2] < (KERNEL_HEAP_START + 2 * Mega))
f012a792:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012a798:	3d ff ff 1f f6       	cmp    $0xf61fffff,%eax
f012a79d:	77 17                	ja     f012a7b6 <test_krealloc+0x2d6>
			panic("krealloc: Wrong start address for the allocated space... ");
f012a79f:	83 ec 04             	sub    $0x4,%esp
f012a7a2:	68 d8 b1 13 f0       	push   $0xf013b1d8
f012a7a7:	68 fb 0e 00 00       	push   $0xefb
f012a7ac:	68 32 9f 13 f0       	push   $0xf0139f32
f012a7b1:	e8 fa 59 fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[2] != ACTUAL_START + (2 * Mega))
f012a7b6:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012a7bc:	89 c1                	mov    %eax,%ecx
f012a7be:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f012a7c5:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f012a7ca:	0f b6 d0             	movzbl %al,%edx
f012a7cd:	8b 45 94             	mov    -0x6c(%ebp),%eax
f012a7d0:	01 d0                	add    %edx,%eax
f012a7d2:	48                   	dec    %eax
f012a7d3:	89 45 90             	mov    %eax,-0x70(%ebp)
f012a7d6:	8b 45 90             	mov    -0x70(%ebp),%eax
f012a7d9:	ba 00 00 00 00       	mov    $0x0,%edx
f012a7de:	f7 75 94             	divl   -0x6c(%ebp)
f012a7e1:	8b 45 90             	mov    -0x70(%ebp),%eax
f012a7e4:	29 d0                	sub    %edx,%eax
f012a7e6:	89 c3                	mov    %eax,%ebx
f012a7e8:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f012a7ef:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f012a7f4:	0f b6 c0             	movzbl %al,%eax
f012a7f7:	c1 e0 04             	shl    $0x4,%eax
f012a7fa:	89 c2                	mov    %eax,%edx
f012a7fc:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012a7ff:	01 d0                	add    %edx,%eax
f012a801:	48                   	dec    %eax
f012a802:	89 45 88             	mov    %eax,-0x78(%ebp)
f012a805:	8b 45 88             	mov    -0x78(%ebp),%eax
f012a808:	ba 00 00 00 00       	mov    $0x0,%edx
f012a80d:	f7 75 8c             	divl   -0x74(%ebp)
f012a810:	8b 45 88             	mov    -0x78(%ebp),%eax
f012a813:	29 d0                	sub    %edx,%eax
f012a815:	01 d8                	add    %ebx,%eax
f012a817:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f012a81c:	39 c1                	cmp    %eax,%ecx
f012a81e:	74 17                	je     f012a837 <test_krealloc+0x357>
			panic("krealloc: Wrong start address for allocated space");
f012a820:	83 ec 04             	sub    $0x4,%esp
f012a823:	68 14 b2 13 f0       	push   $0xf013b214
f012a828:	68 fd 0e 00 00       	push   $0xefd
f012a82d:	68 32 9f 13 f0       	push   $0xf0139f32
f012a832:	e8 79 59 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012a837:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012a83a:	e8 ff 25 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f012a83f:	29 c3                	sub    %eax,%ebx
f012a841:	89 d8                	mov    %ebx,%eax
f012a843:	3d 00 01 00 00       	cmp    $0x100,%eax
f012a848:	74 17                	je     f012a861 <test_krealloc+0x381>
			panic("krealloc: Wrong allocation: ");
f012a84a:	83 ec 04             	sub    $0x4,%esp
f012a84d:	68 46 b2 13 f0       	push   $0xf013b246
f012a852:	68 ff 0e 00 00       	push   $0xeff
f012a857:	68 32 9f 13 f0       	push   $0xf0139f32
f012a85c:	e8 4f 59 fd ff       	call   f01001b0 <_panic>
		lastIndices[2] = (1 * Mega - kilo) / sizeof(int) - 1;
f012a861:	c7 85 60 fe ff ff ff 	movl   $0x3feff,-0x1a0(%ebp)
f012a868:	fe 03 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012a86b:	e8 ce 25 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f012a870:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[3] = krealloc(NULL, 1 * Mega - kilo);
f012a873:	83 ec 08             	sub    $0x8,%esp
f012a876:	68 00 fc 0f 00       	push   $0xffc00
f012a87b:	6a 00                	push   $0x0
f012a87d:	e8 0a dc fd ff       	call   f010848c <krealloc>
f012a882:	83 c4 10             	add    $0x10,%esp
f012a885:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
		if ((uint32) ptr_allocations[3] < (KERNEL_HEAP_START + 3 * Mega))
f012a88b:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012a891:	3d ff ff 2f f6       	cmp    $0xf62fffff,%eax
f012a896:	77 17                	ja     f012a8af <test_krealloc+0x3cf>
			panic("krealloc: Wrong start address for the allocated space... ");
f012a898:	83 ec 04             	sub    $0x4,%esp
f012a89b:	68 d8 b1 13 f0       	push   $0xf013b1d8
f012a8a0:	68 06 0f 00 00       	push   $0xf06
f012a8a5:	68 32 9f 13 f0       	push   $0xf0139f32
f012a8aa:	e8 01 59 fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[3] != ACTUAL_START + (3 * Mega))
f012a8af:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012a8b5:	89 c1                	mov    %eax,%ecx
f012a8b7:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f012a8be:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f012a8c3:	0f b6 d0             	movzbl %al,%edx
f012a8c6:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a8c9:	01 d0                	add    %edx,%eax
f012a8cb:	48                   	dec    %eax
f012a8cc:	89 45 80             	mov    %eax,-0x80(%ebp)
f012a8cf:	8b 45 80             	mov    -0x80(%ebp),%eax
f012a8d2:	ba 00 00 00 00       	mov    $0x0,%edx
f012a8d7:	f7 75 84             	divl   -0x7c(%ebp)
f012a8da:	8b 45 80             	mov    -0x80(%ebp),%eax
f012a8dd:	29 d0                	sub    %edx,%eax
f012a8df:	89 c3                	mov    %eax,%ebx
f012a8e1:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f012a8e8:	10 00 00 
f012a8eb:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f012a8f0:	0f b6 c0             	movzbl %al,%eax
f012a8f3:	c1 e0 04             	shl    $0x4,%eax
f012a8f6:	89 c2                	mov    %eax,%edx
f012a8f8:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012a8fe:	01 d0                	add    %edx,%eax
f012a900:	48                   	dec    %eax
f012a901:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f012a907:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012a90d:	ba 00 00 00 00       	mov    $0x0,%edx
f012a912:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f012a918:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012a91e:	29 d0                	sub    %edx,%eax
f012a920:	01 d8                	add    %ebx,%eax
f012a922:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f012a927:	39 c1                	cmp    %eax,%ecx
f012a929:	74 17                	je     f012a942 <test_krealloc+0x462>
			panic("krealloc: Wrong start address for allocated space");
f012a92b:	83 ec 04             	sub    $0x4,%esp
f012a92e:	68 14 b2 13 f0       	push   $0xf013b214
f012a933:	68 08 0f 00 00       	push   $0xf08
f012a938:	68 32 9f 13 f0       	push   $0xf0139f32
f012a93d:	e8 6e 58 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012a942:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012a945:	e8 f4 24 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f012a94a:	29 c3                	sub    %eax,%ebx
f012a94c:	89 d8                	mov    %ebx,%eax
f012a94e:	3d 00 01 00 00       	cmp    $0x100,%eax
f012a953:	74 17                	je     f012a96c <test_krealloc+0x48c>
			panic("krealloc: Wrong allocation: ");
f012a955:	83 ec 04             	sub    $0x4,%esp
f012a958:	68 46 b2 13 f0       	push   $0xf013b246
f012a95d:	68 0a 0f 00 00       	push   $0xf0a
f012a962:	68 32 9f 13 f0       	push   $0xf0139f32
f012a967:	e8 44 58 fd ff       	call   f01001b0 <_panic>
		lastIndices[3] = (1 * Mega - kilo) / sizeof(int) - 1;
f012a96c:	c7 85 64 fe ff ff ff 	movl   $0x3feff,-0x19c(%ebp)
f012a973:	fe 03 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012a976:	e8 c3 24 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f012a97b:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[4] = krealloc(NULL, 2 * Mega - kilo);
f012a97e:	83 ec 08             	sub    $0x8,%esp
f012a981:	68 00 fc 1f 00       	push   $0x1ffc00
f012a986:	6a 00                	push   $0x0
f012a988:	e8 ff da fd ff       	call   f010848c <krealloc>
f012a98d:	83 c4 10             	add    $0x10,%esp
f012a990:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
		if ((uint32) ptr_allocations[4] < (KERNEL_HEAP_START + 4 * Mega))
f012a996:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012a99c:	3d ff ff 3f f6       	cmp    $0xf63fffff,%eax
f012a9a1:	77 17                	ja     f012a9ba <test_krealloc+0x4da>
			panic("krealloc: Wrong start address for the allocated space... ");
f012a9a3:	83 ec 04             	sub    $0x4,%esp
f012a9a6:	68 d8 b1 13 f0       	push   $0xf013b1d8
f012a9ab:	68 11 0f 00 00       	push   $0xf11
f012a9b0:	68 32 9f 13 f0       	push   $0xf0139f32
f012a9b5:	e8 f6 57 fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[4] != ACTUAL_START + (4 * Mega))
f012a9ba:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012a9c0:	89 c1                	mov    %eax,%ecx
f012a9c2:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f012a9c9:	10 00 00 
f012a9cc:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f012a9d1:	0f b6 d0             	movzbl %al,%edx
f012a9d4:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012a9da:	01 d0                	add    %edx,%eax
f012a9dc:	48                   	dec    %eax
f012a9dd:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f012a9e3:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012a9e9:	ba 00 00 00 00       	mov    $0x0,%edx
f012a9ee:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f012a9f4:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012a9fa:	29 d0                	sub    %edx,%eax
f012a9fc:	89 c3                	mov    %eax,%ebx
f012a9fe:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f012aa05:	10 00 00 
f012aa08:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f012aa0d:	0f b6 c0             	movzbl %al,%eax
f012aa10:	c1 e0 04             	shl    $0x4,%eax
f012aa13:	89 c2                	mov    %eax,%edx
f012aa15:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f012aa1b:	01 d0                	add    %edx,%eax
f012aa1d:	48                   	dec    %eax
f012aa1e:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f012aa24:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012aa2a:	ba 00 00 00 00       	mov    $0x0,%edx
f012aa2f:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f012aa35:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012aa3b:	29 d0                	sub    %edx,%eax
f012aa3d:	01 d8                	add    %ebx,%eax
f012aa3f:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f012aa44:	39 c1                	cmp    %eax,%ecx
f012aa46:	74 17                	je     f012aa5f <test_krealloc+0x57f>
			panic("krealloc: Wrong start address for allocated space");
f012aa48:	83 ec 04             	sub    $0x4,%esp
f012aa4b:	68 14 b2 13 f0       	push   $0xf013b214
f012aa50:	68 13 0f 00 00       	push   $0xf13
f012aa55:	68 32 9f 13 f0       	push   $0xf0139f32
f012aa5a:	e8 51 57 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012aa5f:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012aa62:	e8 d7 23 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f012aa67:	29 c3                	sub    %eax,%ebx
f012aa69:	89 d8                	mov    %ebx,%eax
f012aa6b:	3d 00 02 00 00       	cmp    $0x200,%eax
f012aa70:	74 17                	je     f012aa89 <test_krealloc+0x5a9>
			panic("krealloc: Wrong allocation: ");
f012aa72:	83 ec 04             	sub    $0x4,%esp
f012aa75:	68 46 b2 13 f0       	push   $0xf013b246
f012aa7a:	68 15 0f 00 00       	push   $0xf15
f012aa7f:	68 32 9f 13 f0       	push   $0xf0139f32
f012aa84:	e8 27 57 fd ff       	call   f01001b0 <_panic>
		lastIndices[4] = (2 * Mega - kilo) / sizeof(short) - 1;
f012aa89:	c7 85 68 fe ff ff ff 	movl   $0xffdff,-0x198(%ebp)
f012aa90:	fd 0f 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012aa93:	e8 a6 23 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f012aa98:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[5] = krealloc(NULL, 2 * Mega - kilo);
f012aa9b:	83 ec 08             	sub    $0x8,%esp
f012aa9e:	68 00 fc 1f 00       	push   $0x1ffc00
f012aaa3:	6a 00                	push   $0x0
f012aaa5:	e8 e2 d9 fd ff       	call   f010848c <krealloc>
f012aaaa:	83 c4 10             	add    $0x10,%esp
f012aaad:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
		if ((uint32) ptr_allocations[5] < (KERNEL_HEAP_START + 6 * Mega))
f012aab3:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012aab9:	3d ff ff 5f f6       	cmp    $0xf65fffff,%eax
f012aabe:	77 17                	ja     f012aad7 <test_krealloc+0x5f7>
			panic("krealloc: Wrong start address for the allocated space... ");
f012aac0:	83 ec 04             	sub    $0x4,%esp
f012aac3:	68 d8 b1 13 f0       	push   $0xf013b1d8
f012aac8:	68 1c 0f 00 00       	push   $0xf1c
f012aacd:	68 32 9f 13 f0       	push   $0xf0139f32
f012aad2:	e8 d9 56 fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[5] != ACTUAL_START + (6 * Mega))
f012aad7:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012aadd:	89 c1                	mov    %eax,%ecx
f012aadf:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f012aae6:	10 00 00 
f012aae9:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f012aaee:	0f b6 d0             	movzbl %al,%edx
f012aaf1:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012aaf7:	01 d0                	add    %edx,%eax
f012aaf9:	48                   	dec    %eax
f012aafa:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f012ab00:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012ab06:	ba 00 00 00 00       	mov    $0x0,%edx
f012ab0b:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f012ab11:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012ab17:	29 d0                	sub    %edx,%eax
f012ab19:	89 c3                	mov    %eax,%ebx
f012ab1b:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f012ab22:	10 00 00 
f012ab25:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f012ab2a:	0f b6 c0             	movzbl %al,%eax
f012ab2d:	c1 e0 04             	shl    $0x4,%eax
f012ab30:	89 c2                	mov    %eax,%edx
f012ab32:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012ab38:	01 d0                	add    %edx,%eax
f012ab3a:	48                   	dec    %eax
f012ab3b:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f012ab41:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012ab47:	ba 00 00 00 00       	mov    $0x0,%edx
f012ab4c:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f012ab52:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012ab58:	29 d0                	sub    %edx,%eax
f012ab5a:	01 d8                	add    %ebx,%eax
f012ab5c:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f012ab61:	39 c1                	cmp    %eax,%ecx
f012ab63:	74 17                	je     f012ab7c <test_krealloc+0x69c>
			panic("krealloc: Wrong start address for allocated space");
f012ab65:	83 ec 04             	sub    $0x4,%esp
f012ab68:	68 14 b2 13 f0       	push   $0xf013b214
f012ab6d:	68 1e 0f 00 00       	push   $0xf1e
f012ab72:	68 32 9f 13 f0       	push   $0xf0139f32
f012ab77:	e8 34 56 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012ab7c:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012ab7f:	e8 ba 22 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f012ab84:	29 c3                	sub    %eax,%ebx
f012ab86:	89 d8                	mov    %ebx,%eax
f012ab88:	3d 00 02 00 00       	cmp    $0x200,%eax
f012ab8d:	74 17                	je     f012aba6 <test_krealloc+0x6c6>
			panic("krealloc: Wrong allocation: ");
f012ab8f:	83 ec 04             	sub    $0x4,%esp
f012ab92:	68 46 b2 13 f0       	push   $0xf013b246
f012ab97:	68 20 0f 00 00       	push   $0xf20
f012ab9c:	68 32 9f 13 f0       	push   $0xf0139f32
f012aba1:	e8 0a 56 fd ff       	call   f01001b0 <_panic>
		lastIndices[5] = (2 * Mega - kilo) / sizeof(short) - 1;
f012aba6:	c7 85 6c fe ff ff ff 	movl   $0xffdff,-0x194(%ebp)
f012abad:	fd 0f 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012abb0:	e8 89 22 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f012abb5:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[6] = krealloc(NULL, 3 * Mega - kilo);
f012abb8:	83 ec 08             	sub    $0x8,%esp
f012abbb:	68 00 fc 2f 00       	push   $0x2ffc00
f012abc0:	6a 00                	push   $0x0
f012abc2:	e8 c5 d8 fd ff       	call   f010848c <krealloc>
f012abc7:	83 c4 10             	add    $0x10,%esp
f012abca:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
		if ((uint32) ptr_allocations[6] < (KERNEL_HEAP_START + 8 * Mega))
f012abd0:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012abd6:	3d ff ff 7f f6       	cmp    $0xf67fffff,%eax
f012abdb:	77 17                	ja     f012abf4 <test_krealloc+0x714>
			panic("krealloc: Wrong start address for the allocated space... ");
f012abdd:	83 ec 04             	sub    $0x4,%esp
f012abe0:	68 d8 b1 13 f0       	push   $0xf013b1d8
f012abe5:	68 27 0f 00 00       	push   $0xf27
f012abea:	68 32 9f 13 f0       	push   $0xf0139f32
f012abef:	e8 bc 55 fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[6] != ACTUAL_START + (8 * Mega))
f012abf4:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012abfa:	89 c1                	mov    %eax,%ecx
f012abfc:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f012ac03:	10 00 00 
f012ac06:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f012ac0b:	0f b6 d0             	movzbl %al,%edx
f012ac0e:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012ac14:	01 d0                	add    %edx,%eax
f012ac16:	48                   	dec    %eax
f012ac17:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f012ac1d:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012ac23:	ba 00 00 00 00       	mov    $0x0,%edx
f012ac28:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f012ac2e:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012ac34:	29 d0                	sub    %edx,%eax
f012ac36:	89 c3                	mov    %eax,%ebx
f012ac38:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f012ac3f:	10 00 00 
f012ac42:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f012ac47:	0f b6 c0             	movzbl %al,%eax
f012ac4a:	c1 e0 04             	shl    $0x4,%eax
f012ac4d:	89 c2                	mov    %eax,%edx
f012ac4f:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012ac55:	01 d0                	add    %edx,%eax
f012ac57:	48                   	dec    %eax
f012ac58:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f012ac5e:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012ac64:	ba 00 00 00 00       	mov    $0x0,%edx
f012ac69:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f012ac6f:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012ac75:	29 d0                	sub    %edx,%eax
f012ac77:	01 d8                	add    %ebx,%eax
f012ac79:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f012ac7e:	39 c1                	cmp    %eax,%ecx
f012ac80:	74 17                	je     f012ac99 <test_krealloc+0x7b9>
			panic("krealloc: Wrong start address for allocated space");
f012ac82:	83 ec 04             	sub    $0x4,%esp
f012ac85:	68 14 b2 13 f0       	push   $0xf013b214
f012ac8a:	68 29 0f 00 00       	push   $0xf29
f012ac8f:	68 32 9f 13 f0       	push   $0xf0139f32
f012ac94:	e8 17 55 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012ac99:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012ac9c:	e8 9d 21 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f012aca1:	29 c3                	sub    %eax,%ebx
f012aca3:	89 d8                	mov    %ebx,%eax
f012aca5:	3d 00 03 00 00       	cmp    $0x300,%eax
f012acaa:	74 17                	je     f012acc3 <test_krealloc+0x7e3>
			panic("Wrong allocation: ");
f012acac:	83 ec 04             	sub    $0x4,%esp
f012acaf:	68 7c a3 13 f0       	push   $0xf013a37c
f012acb4:	68 2b 0f 00 00       	push   $0xf2b
f012acb9:	68 32 9f 13 f0       	push   $0xf0139f32
f012acbe:	e8 ed 54 fd ff       	call   f01001b0 <_panic>
		lastIndices[6] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012acc3:	c7 85 70 fe ff ff 7f 	movl   $0x5ff7f,-0x190(%ebp)
f012acca:	ff 05 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012accd:	e8 6c 21 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f012acd2:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[7] = krealloc(NULL, 3 * Mega - kilo);
f012acd5:	83 ec 08             	sub    $0x8,%esp
f012acd8:	68 00 fc 2f 00       	push   $0x2ffc00
f012acdd:	6a 00                	push   $0x0
f012acdf:	e8 a8 d7 fd ff       	call   f010848c <krealloc>
f012ace4:	83 c4 10             	add    $0x10,%esp
f012ace7:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
		if ((uint32) ptr_allocations[7] < (KERNEL_HEAP_START + 11 * Mega))
f012aced:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012acf3:	3d ff ff af f6       	cmp    $0xf6afffff,%eax
f012acf8:	77 17                	ja     f012ad11 <test_krealloc+0x831>
			panic("krealloc: Wrong start address for the allocated space... ");
f012acfa:	83 ec 04             	sub    $0x4,%esp
f012acfd:	68 d8 b1 13 f0       	push   $0xf013b1d8
f012ad02:	68 32 0f 00 00       	push   $0xf32
f012ad07:	68 32 9f 13 f0       	push   $0xf0139f32
f012ad0c:	e8 9f 54 fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[7] != ACTUAL_START + (11 * Mega))
f012ad11:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012ad17:	89 c1                	mov    %eax,%ecx
f012ad19:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f012ad20:	10 00 00 
f012ad23:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f012ad28:	0f b6 d0             	movzbl %al,%edx
f012ad2b:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012ad31:	01 d0                	add    %edx,%eax
f012ad33:	48                   	dec    %eax
f012ad34:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f012ad3a:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012ad40:	ba 00 00 00 00       	mov    $0x0,%edx
f012ad45:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f012ad4b:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012ad51:	29 d0                	sub    %edx,%eax
f012ad53:	89 c3                	mov    %eax,%ebx
f012ad55:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f012ad5c:	10 00 00 
f012ad5f:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f012ad64:	0f b6 c0             	movzbl %al,%eax
f012ad67:	c1 e0 04             	shl    $0x4,%eax
f012ad6a:	89 c2                	mov    %eax,%edx
f012ad6c:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012ad72:	01 d0                	add    %edx,%eax
f012ad74:	48                   	dec    %eax
f012ad75:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f012ad7b:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012ad81:	ba 00 00 00 00       	mov    $0x0,%edx
f012ad86:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f012ad8c:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012ad92:	29 d0                	sub    %edx,%eax
f012ad94:	01 d8                	add    %ebx,%eax
f012ad96:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f012ad9b:	39 c1                	cmp    %eax,%ecx
f012ad9d:	74 17                	je     f012adb6 <test_krealloc+0x8d6>
			panic("krealloc: Wrong start address for allocated space");
f012ad9f:	83 ec 04             	sub    $0x4,%esp
f012ada2:	68 14 b2 13 f0       	push   $0xf013b214
f012ada7:	68 34 0f 00 00       	push   $0xf34
f012adac:	68 32 9f 13 f0       	push   $0xf0139f32
f012adb1:	e8 fa 53 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012adb6:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012adb9:	e8 80 20 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f012adbe:	29 c3                	sub    %eax,%ebx
f012adc0:	89 d8                	mov    %ebx,%eax
f012adc2:	3d 00 03 00 00       	cmp    $0x300,%eax
f012adc7:	74 17                	je     f012ade0 <test_krealloc+0x900>
			panic("krealloc: Wrong allocation: ");
f012adc9:	83 ec 04             	sub    $0x4,%esp
f012adcc:	68 46 b2 13 f0       	push   $0xf013b246
f012add1:	68 36 0f 00 00       	push   $0xf36
f012add6:	68 32 9f 13 f0       	push   $0xf0139f32
f012addb:	e8 d0 53 fd ff       	call   f01001b0 <_panic>
		lastIndices[7] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012ade0:	c7 85 74 fe ff ff 7f 	movl   $0x5ff7f,-0x18c(%ebp)
f012ade7:	ff 05 00 
	char *byteArr1;
	//[3] Test read write access
	{
		//cprintf("\nTest read write access");
		//Test access for the first 1 MB
		freeFrames = sys_calculate_free_frames();
f012adea:	e8 4f 20 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f012adef:	89 45 b8             	mov    %eax,-0x48(%ebp)

		//Write values
		//In 1st 1 MB
		lastIndexOfByte = (1 * Mega - kilo) / sizeof(char) - 1;
f012adf2:	c7 85 34 ff ff ff ff 	movl   $0xffbff,-0xcc(%ebp)
f012adf9:	fb 0f 00 
		byteArr = (char *) ptr_allocations[0];
f012adfc:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012ae02:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
		byteArr[0] = minByte;
f012ae08:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012ae0e:	8a 55 cf             	mov    -0x31(%ebp),%dl
f012ae11:	88 10                	mov    %dl,(%eax)
		byteArr[lastIndexOfByte] = maxByte;
f012ae13:	8b 95 34 ff ff ff    	mov    -0xcc(%ebp),%edx
f012ae19:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012ae1f:	01 c2                	add    %eax,%edx
f012ae21:	8a 45 ce             	mov    -0x32(%ebp),%al
f012ae24:	88 02                	mov    %al,(%edx)

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f012ae26:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012ae2c:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012ae32:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012ae39:	eb 11                	jmp    f012ae4c <test_krealloc+0x96c>
			ptr[i] = 2;
f012ae3b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012ae3e:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012ae44:	01 d0                	add    %edx,%eax
f012ae46:	c6 00 02             	movb   $0x2,(%eax)
		byteArr[0] = minByte;
		byteArr[lastIndexOfByte] = maxByte;

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012ae49:	ff 45 f4             	incl   -0xc(%ebp)
f012ae4c:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012ae52:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012ae55:	7d e4                	jge    f012ae3b <test_krealloc+0x95b>
			ptr[i] = 2;
		}

		//In 3rd 1 MB
		intArr = (int*) ptr_allocations[2];
f012ae57:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012ae5d:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
		intArr[0] = 3;
f012ae63:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012ae69:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
		intArr[lastIndices[2]] = 3;
f012ae6f:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012ae75:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012ae7c:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012ae82:	01 d0                	add    %edx,%eax
f012ae84:	c7 00 03 00 00 00    	movl   $0x3,(%eax)

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
f012ae8a:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012ae90:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012ae96:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f012ae9d:	eb 1b                	jmp    f012aeba <test_krealloc+0x9da>
			intArr[i] = 4;
f012ae9f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012aea2:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012aea9:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012aeaf:	01 d0                	add    %edx,%eax
f012aeb1:	c7 00 04 00 00 00    	movl   $0x4,(%eax)
		intArr[0] = 3;
		intArr[lastIndices[2]] = 3;

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012aeb7:	ff 45 f0             	incl   -0x10(%ebp)
f012aeba:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012aec0:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012aec3:	7d da                	jge    f012ae9f <test_krealloc+0x9bf>
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f012aec5:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012aecb:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012aed1:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f012aed8:	eb 17                	jmp    f012aef1 <test_krealloc+0xa11>
			shortArr[i] = 5;
f012aeda:	8b 45 ec             	mov    -0x14(%ebp),%eax
f012aedd:	01 c0                	add    %eax,%eax
f012aedf:	89 c2                	mov    %eax,%edx
f012aee1:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012aee7:	01 d0                	add    %edx,%eax
f012aee9:	66 c7 00 05 00       	movw   $0x5,(%eax)
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012aeee:	ff 45 ec             	incl   -0x14(%ebp)
f012aef1:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012aef7:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f012aefa:	7d de                	jge    f012aeda <test_krealloc+0x9fa>
			shortArr[i] = 5;
		}

		//In the 2nd 2 MB
		shortArr = (short*) ptr_allocations[5];
f012aefc:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012af02:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
		shortArr[0] = 6;
f012af08:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012af0e:	66 c7 00 06 00       	movw   $0x6,(%eax)
		shortArr[lastIndices[5]] = 6;
f012af13:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012af19:	01 c0                	add    %eax,%eax
f012af1b:	89 c2                	mov    %eax,%edx
f012af1d:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012af23:	01 d0                	add    %edx,%eax
f012af25:	66 c7 00 06 00       	movw   $0x6,(%eax)

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
f012af2a:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012af30:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
		for (int i = 0; i <= lastIndices[6]; i++) {
f012af36:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f012af3d:	eb 49                	jmp    f012af88 <test_krealloc+0xaa8>
			structArr[i].a = 7;
f012af3f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012af42:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012af49:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012af4f:	01 d0                	add    %edx,%eax
f012af51:	c6 00 07             	movb   $0x7,(%eax)
			structArr[i].b = 7;
f012af54:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012af57:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012af5e:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012af64:	01 d0                	add    %edx,%eax
f012af66:	66 c7 40 02 07 00    	movw   $0x7,0x2(%eax)
			structArr[i].c = 7;
f012af6c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012af6f:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012af76:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012af7c:	01 d0                	add    %edx,%eax
f012af7e:	c7 40 04 07 00 00 00 	movl   $0x7,0x4(%eax)
		shortArr[0] = 6;
		shortArr[lastIndices[5]] = 6;

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
		for (int i = 0; i <= lastIndices[6]; i++) {
f012af85:	ff 45 e8             	incl   -0x18(%ebp)
f012af88:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012af8e:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f012af91:	7d ac                	jge    f012af3f <test_krealloc+0xa5f>
			structArr[i].b = 7;
			structArr[i].c = 7;
		}

		//In the last 3 MB
		structArr = (struct MyStruct*) ptr_allocations[7];
f012af93:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012af99:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
		structArr[0].a = 8;
f012af9f:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012afa5:	c6 00 08             	movb   $0x8,(%eax)
		structArr[0].b = 8;
f012afa8:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012afae:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[0].c = 8;
f012afb4:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012afba:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)
		structArr[lastIndices[7]].a = 8;
f012afc1:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012afc7:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012afce:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012afd4:	01 d0                	add    %edx,%eax
f012afd6:	c6 00 08             	movb   $0x8,(%eax)
		structArr[lastIndices[7]].b = 8;
f012afd9:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012afdf:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012afe6:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012afec:	01 d0                	add    %edx,%eax
f012afee:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[lastIndices[7]].c = 8;
f012aff4:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012affa:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012b001:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012b007:	01 d0                	add    %edx,%eax
f012b009:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)

		//Read values: check that the values are successfully written
		if (byteArr[0] != minByte || byteArr[lastIndices[0]] != maxByte)
f012b010:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012b016:	8a 00                	mov    (%eax),%al
f012b018:	3a 45 cf             	cmp    -0x31(%ebp),%al
f012b01b:	75 17                	jne    f012b034 <test_krealloc+0xb54>
f012b01d:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012b023:	89 c2                	mov    %eax,%edx
f012b025:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012b02b:	01 d0                	add    %edx,%eax
f012b02d:	8a 00                	mov    (%eax),%al
f012b02f:	3a 45 ce             	cmp    -0x32(%ebp),%al
f012b032:	74 17                	je     f012b04b <test_krealloc+0xb6b>
			panic(
f012b034:	83 ec 04             	sub    $0x4,%esp
f012b037:	68 64 b2 13 f0       	push   $0xf013b264
f012b03c:	68 79 0f 00 00       	push   $0xf79
f012b041:	68 32 9f 13 f0       	push   $0xf0139f32
f012b046:	e8 65 51 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		ptr = (char*) ptr_allocations[1];
f012b04b:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012b051:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
		if (ptr[0] != 2 || ptr[lastIndices[1]] != 2)
f012b057:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012b05d:	8a 00                	mov    (%eax),%al
f012b05f:	3c 02                	cmp    $0x2,%al
f012b061:	75 16                	jne    f012b079 <test_krealloc+0xb99>
f012b063:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012b069:	89 c2                	mov    %eax,%edx
f012b06b:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012b071:	01 d0                	add    %edx,%eax
f012b073:	8a 00                	mov    (%eax),%al
f012b075:	3c 02                	cmp    $0x2,%al
f012b077:	74 20                	je     f012b099 <test_krealloc+0xbb9>
			panic(
f012b079:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012b07f:	8a 00                	mov    (%eax),%al
f012b081:	0f be c0             	movsbl %al,%eax
f012b084:	50                   	push   %eax
f012b085:	68 a4 b2 13 f0       	push   $0xf013b2a4
f012b08a:	68 7f 0f 00 00       	push   $0xf7f
f012b08f:	68 32 9f 13 f0       	push   $0xf0139f32
f012b094:	e8 17 51 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!, char = %c",
					ptr[0]);

		intArr = (int*) ptr_allocations[2];
f012b099:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012b09f:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
		if (intArr[0] != 3 || intArr[lastIndices[2]] != 3)
f012b0a5:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012b0ab:	8b 00                	mov    (%eax),%eax
f012b0ad:	83 f8 03             	cmp    $0x3,%eax
f012b0b0:	75 1c                	jne    f012b0ce <test_krealloc+0xbee>
f012b0b2:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012b0b8:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012b0bf:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012b0c5:	01 d0                	add    %edx,%eax
f012b0c7:	8b 00                	mov    (%eax),%eax
f012b0c9:	83 f8 03             	cmp    $0x3,%eax
f012b0cc:	74 17                	je     f012b0e5 <test_krealloc+0xc05>
			panic("Wrong allocation stored values are wrongly changed!");
f012b0ce:	83 ec 04             	sub    $0x4,%esp
f012b0d1:	68 f0 b2 13 f0       	push   $0xf013b2f0
f012b0d6:	68 83 0f 00 00       	push   $0xf83
f012b0db:	68 32 9f 13 f0       	push   $0xf0139f32
f012b0e0:	e8 cb 50 fd ff       	call   f01001b0 <_panic>

		intArr = (int*) ptr_allocations[3];
f012b0e5:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012b0eb:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
		if (intArr[0] != 4 || intArr[lastIndices[3]] != 4)
f012b0f1:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012b0f7:	8b 00                	mov    (%eax),%eax
f012b0f9:	83 f8 04             	cmp    $0x4,%eax
f012b0fc:	75 1c                	jne    f012b11a <test_krealloc+0xc3a>
f012b0fe:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012b104:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012b10b:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012b111:	01 d0                	add    %edx,%eax
f012b113:	8b 00                	mov    (%eax),%eax
f012b115:	83 f8 04             	cmp    $0x4,%eax
f012b118:	74 17                	je     f012b131 <test_krealloc+0xc51>
			panic(
f012b11a:	83 ec 04             	sub    $0x4,%esp
f012b11d:	68 64 b2 13 f0       	push   $0xf013b264
f012b122:	68 88 0f 00 00       	push   $0xf88
f012b127:	68 32 9f 13 f0       	push   $0xf0139f32
f012b12c:	e8 7f 50 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[4];
f012b131:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012b137:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
		if (shortArr[0] != 5 || shortArr[lastIndices[4]] != 5)
f012b13d:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012b143:	66 8b 00             	mov    (%eax),%ax
f012b146:	66 83 f8 05          	cmp    $0x5,%ax
f012b14a:	75 1b                	jne    f012b167 <test_krealloc+0xc87>
f012b14c:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012b152:	01 c0                	add    %eax,%eax
f012b154:	89 c2                	mov    %eax,%edx
f012b156:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012b15c:	01 d0                	add    %edx,%eax
f012b15e:	66 8b 00             	mov    (%eax),%ax
f012b161:	66 83 f8 05          	cmp    $0x5,%ax
f012b165:	74 17                	je     f012b17e <test_krealloc+0xc9e>
			panic(
f012b167:	83 ec 04             	sub    $0x4,%esp
f012b16a:	68 64 b2 13 f0       	push   $0xf013b264
f012b16f:	68 8d 0f 00 00       	push   $0xf8d
f012b174:	68 32 9f 13 f0       	push   $0xf0139f32
f012b179:	e8 32 50 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[5];
f012b17e:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012b184:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
		if (shortArr[0] != 6 || shortArr[lastIndices[5]] != 6)
f012b18a:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012b190:	66 8b 00             	mov    (%eax),%ax
f012b193:	66 83 f8 06          	cmp    $0x6,%ax
f012b197:	75 1b                	jne    f012b1b4 <test_krealloc+0xcd4>
f012b199:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012b19f:	01 c0                	add    %eax,%eax
f012b1a1:	89 c2                	mov    %eax,%edx
f012b1a3:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012b1a9:	01 d0                	add    %edx,%eax
f012b1ab:	66 8b 00             	mov    (%eax),%ax
f012b1ae:	66 83 f8 06          	cmp    $0x6,%ax
f012b1b2:	74 17                	je     f012b1cb <test_krealloc+0xceb>
			panic(
f012b1b4:	83 ec 04             	sub    $0x4,%esp
f012b1b7:	68 64 b2 13 f0       	push   $0xf013b264
f012b1bc:	68 92 0f 00 00       	push   $0xf92
f012b1c1:	68 32 9f 13 f0       	push   $0xf0139f32
f012b1c6:	e8 e5 4f fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[6];
f012b1cb:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012b1d1:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
		if (structArr[0].a != 7 || structArr[lastIndices[6]].a != 7)
f012b1d7:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012b1dd:	8a 00                	mov    (%eax),%al
f012b1df:	3c 07                	cmp    $0x7,%al
f012b1e1:	75 1b                	jne    f012b1fe <test_krealloc+0xd1e>
f012b1e3:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012b1e9:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012b1f0:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012b1f6:	01 d0                	add    %edx,%eax
f012b1f8:	8a 00                	mov    (%eax),%al
f012b1fa:	3c 07                	cmp    $0x7,%al
f012b1fc:	74 17                	je     f012b215 <test_krealloc+0xd35>
			panic(
f012b1fe:	83 ec 04             	sub    $0x4,%esp
f012b201:	68 64 b2 13 f0       	push   $0xf013b264
f012b206:	68 97 0f 00 00       	push   $0xf97
f012b20b:	68 32 9f 13 f0       	push   $0xf0139f32
f012b210:	e8 9b 4f fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 7 || structArr[lastIndices[6]].b != 7)
f012b215:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012b21b:	66 8b 40 02          	mov    0x2(%eax),%ax
f012b21f:	66 83 f8 07          	cmp    $0x7,%ax
f012b223:	75 1f                	jne    f012b244 <test_krealloc+0xd64>
f012b225:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012b22b:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012b232:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012b238:	01 d0                	add    %edx,%eax
f012b23a:	66 8b 40 02          	mov    0x2(%eax),%ax
f012b23e:	66 83 f8 07          	cmp    $0x7,%ax
f012b242:	74 17                	je     f012b25b <test_krealloc+0xd7b>
			panic(
f012b244:	83 ec 04             	sub    $0x4,%esp
f012b247:	68 64 b2 13 f0       	push   $0xf013b264
f012b24c:	68 9a 0f 00 00       	push   $0xf9a
f012b251:	68 32 9f 13 f0       	push   $0xf0139f32
f012b256:	e8 55 4f fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 7 || structArr[lastIndices[6]].c != 7)
f012b25b:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012b261:	8b 40 04             	mov    0x4(%eax),%eax
f012b264:	83 f8 07             	cmp    $0x7,%eax
f012b267:	75 1d                	jne    f012b286 <test_krealloc+0xda6>
f012b269:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012b26f:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012b276:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012b27c:	01 d0                	add    %edx,%eax
f012b27e:	8b 40 04             	mov    0x4(%eax),%eax
f012b281:	83 f8 07             	cmp    $0x7,%eax
f012b284:	74 17                	je     f012b29d <test_krealloc+0xdbd>
			panic(
f012b286:	83 ec 04             	sub    $0x4,%esp
f012b289:	68 64 b2 13 f0       	push   $0xf013b264
f012b28e:	68 9d 0f 00 00       	push   $0xf9d
f012b293:	68 32 9f 13 f0       	push   $0xf0139f32
f012b298:	e8 13 4f fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[7];
f012b29d:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012b2a3:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
		if (structArr[0].a != 8 || structArr[lastIndices[7]].a != 8)
f012b2a9:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012b2af:	8a 00                	mov    (%eax),%al
f012b2b1:	3c 08                	cmp    $0x8,%al
f012b2b3:	75 1b                	jne    f012b2d0 <test_krealloc+0xdf0>
f012b2b5:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012b2bb:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012b2c2:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012b2c8:	01 d0                	add    %edx,%eax
f012b2ca:	8a 00                	mov    (%eax),%al
f012b2cc:	3c 08                	cmp    $0x8,%al
f012b2ce:	74 17                	je     f012b2e7 <test_krealloc+0xe07>
			panic(
f012b2d0:	83 ec 04             	sub    $0x4,%esp
f012b2d3:	68 64 b2 13 f0       	push   $0xf013b264
f012b2d8:	68 a2 0f 00 00       	push   $0xfa2
f012b2dd:	68 32 9f 13 f0       	push   $0xf0139f32
f012b2e2:	e8 c9 4e fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 8 || structArr[lastIndices[7]].b != 8)
f012b2e7:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012b2ed:	66 8b 40 02          	mov    0x2(%eax),%ax
f012b2f1:	66 83 f8 08          	cmp    $0x8,%ax
f012b2f5:	75 1f                	jne    f012b316 <test_krealloc+0xe36>
f012b2f7:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012b2fd:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012b304:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012b30a:	01 d0                	add    %edx,%eax
f012b30c:	66 8b 40 02          	mov    0x2(%eax),%ax
f012b310:	66 83 f8 08          	cmp    $0x8,%ax
f012b314:	74 17                	je     f012b32d <test_krealloc+0xe4d>
			panic(
f012b316:	83 ec 04             	sub    $0x4,%esp
f012b319:	68 64 b2 13 f0       	push   $0xf013b264
f012b31e:	68 a5 0f 00 00       	push   $0xfa5
f012b323:	68 32 9f 13 f0       	push   $0xf0139f32
f012b328:	e8 83 4e fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 8 || structArr[lastIndices[7]].c != 8)
f012b32d:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012b333:	8b 40 04             	mov    0x4(%eax),%eax
f012b336:	83 f8 08             	cmp    $0x8,%eax
f012b339:	75 1d                	jne    f012b358 <test_krealloc+0xe78>
f012b33b:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012b341:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012b348:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012b34e:	01 d0                	add    %edx,%eax
f012b350:	8b 40 04             	mov    0x4(%eax),%eax
f012b353:	83 f8 08             	cmp    $0x8,%eax
f012b356:	74 17                	je     f012b36f <test_krealloc+0xe8f>
			panic(
f012b358:	83 ec 04             	sub    $0x4,%esp
f012b35b:	68 64 b2 13 f0       	push   $0xf013b264
f012b360:	68 a8 0f 00 00       	push   $0xfa8
f012b365:	68 32 9f 13 f0       	push   $0xf0139f32
f012b36a:	e8 41 4e fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		if ((freeFrames - sys_calculate_free_frames()) != 0)
f012b36f:	e8 ca 1a fe ff       	call   f010ce3e <sys_calculate_free_frames>
f012b374:	89 c2                	mov    %eax,%edx
f012b376:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012b379:	39 c2                	cmp    %eax,%edx
f012b37b:	74 17                	je     f012b394 <test_krealloc+0xeb4>
			panic(
f012b37d:	83 ec 04             	sub    $0x4,%esp
f012b380:	68 24 b3 13 f0       	push   $0xf013b324
f012b385:	68 ac 0f 00 00       	push   $0xfac
f012b38a:	68 32 9f 13 f0       	push   $0xf0139f32
f012b38f:	e8 1c 4e fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation pages are not loaded successfully into memory");

	}
	cprintf("\nkrealloc: current evaluation = 10%");
f012b394:	83 ec 0c             	sub    $0xc,%esp
f012b397:	68 70 b3 13 f0       	push   $0xf013b370
f012b39c:	e8 90 5a fd ff       	call   f0100e31 <cprintf>
f012b3a1:	83 c4 10             	add    $0x10,%esp

	//[3] Test krealloc by passing size = 0
	{
		//kfree 1st 1 MB
		freeFrames = sys_calculate_free_frames();
f012b3a4:	e8 95 1a fe ff       	call   f010ce3e <sys_calculate_free_frames>
f012b3a9:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012b3ac:	e8 d3 92 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012b3b1:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
		krealloc(ptr_allocations[0], 0);
f012b3b7:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012b3bd:	83 ec 08             	sub    $0x8,%esp
f012b3c0:	6a 00                	push   $0x0
f012b3c2:	50                   	push   %eax
f012b3c3:	e8 c4 d0 fd ff       	call   f010848c <krealloc>
f012b3c8:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012b3cb:	e8 b4 92 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012b3d0:	3b 85 1c ff ff ff    	cmp    -0xe4(%ebp),%eax
f012b3d6:	74 17                	je     f012b3ef <test_krealloc+0xf0f>
			panic(
f012b3d8:	83 ec 04             	sub    $0x4,%esp
f012b3db:	68 94 b3 13 f0       	push   $0xf013b394
f012b3e0:	68 b9 0f 00 00       	push   $0xfb9
f012b3e5:	68 32 9f 13 f0       	push   $0xf0139f32
f012b3ea:	e8 c1 4d fd ff       	call   f01001b0 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012b3ef:	e8 4a 1a fe ff       	call   f010ce3e <sys_calculate_free_frames>
f012b3f4:	89 c2                	mov    %eax,%edx
f012b3f6:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012b3f9:	29 c2                	sub    %eax,%edx
f012b3fb:	89 d0                	mov    %edx,%eax
f012b3fd:	3d 00 01 00 00       	cmp    $0x100,%eax
f012b402:	74 17                	je     f012b41b <test_krealloc+0xf3b>
			panic("krealloc: pages in memory are not freed correctly");
f012b404:	83 ec 04             	sub    $0x4,%esp
f012b407:	68 08 b4 13 f0       	push   $0xf013b408
f012b40c:	68 bb 0f 00 00       	push   $0xfbb
f012b411:	68 32 9f 13 f0       	push   $0xf0139f32
f012b416:	e8 95 4d fd ff       	call   f01001b0 <_panic>

		//kfree 3rd 1 MB
		freeFrames = sys_calculate_free_frames();
f012b41b:	e8 1e 1a fe ff       	call   f010ce3e <sys_calculate_free_frames>
f012b420:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012b423:	e8 5c 92 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012b428:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)

		krealloc(ptr_allocations[2], 0);
f012b42e:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012b434:	83 ec 08             	sub    $0x8,%esp
f012b437:	6a 00                	push   $0x0
f012b439:	50                   	push   %eax
f012b43a:	e8 4d d0 fd ff       	call   f010848c <krealloc>
f012b43f:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012b442:	e8 3d 92 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012b447:	3b 85 1c ff ff ff    	cmp    -0xe4(%ebp),%eax
f012b44d:	74 17                	je     f012b466 <test_krealloc+0xf86>
			panic(
f012b44f:	83 ec 04             	sub    $0x4,%esp
f012b452:	68 94 b3 13 f0       	push   $0xf013b394
f012b457:	68 c4 0f 00 00       	push   $0xfc4
f012b45c:	68 32 9f 13 f0       	push   $0xf0139f32
f012b461:	e8 4a 4d fd ff       	call   f01001b0 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012b466:	e8 d3 19 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f012b46b:	89 c2                	mov    %eax,%edx
f012b46d:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012b470:	29 c2                	sub    %eax,%edx
f012b472:	89 d0                	mov    %edx,%eax
f012b474:	3d 00 01 00 00       	cmp    $0x100,%eax
f012b479:	74 17                	je     f012b492 <test_krealloc+0xfb2>
			panic("krealloc: pages in memory are not freed correctly");
f012b47b:	83 ec 04             	sub    $0x4,%esp
f012b47e:	68 08 b4 13 f0       	push   $0xf013b408
f012b483:	68 c6 0f 00 00       	push   $0xfc6
f012b488:	68 32 9f 13 f0       	push   $0xf0139f32
f012b48d:	e8 1e 4d fd ff       	call   f01001b0 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames();
f012b492:	e8 a7 19 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f012b497:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012b49a:	e8 e5 91 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012b49f:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
		krealloc(ptr_allocations[5], 0);
f012b4a5:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012b4ab:	83 ec 08             	sub    $0x8,%esp
f012b4ae:	6a 00                	push   $0x0
f012b4b0:	50                   	push   %eax
f012b4b1:	e8 d6 cf fd ff       	call   f010848c <krealloc>
f012b4b6:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012b4b9:	e8 c6 91 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012b4be:	3b 85 1c ff ff ff    	cmp    -0xe4(%ebp),%eax
f012b4c4:	74 17                	je     f012b4dd <test_krealloc+0xffd>
			panic(
f012b4c6:	83 ec 04             	sub    $0x4,%esp
f012b4c9:	68 4c 9f 13 f0       	push   $0xf0139f4c
f012b4ce:	68 ce 0f 00 00       	push   $0xfce
f012b4d3:	68 32 9f 13 f0       	push   $0xf0139f32
f012b4d8:	e8 d3 4c fd ff       	call   f01001b0 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 2 * Mega / PAGE_SIZE)
f012b4dd:	e8 5c 19 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f012b4e2:	89 c2                	mov    %eax,%edx
f012b4e4:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012b4e7:	29 c2                	sub    %eax,%edx
f012b4e9:	89 d0                	mov    %edx,%eax
f012b4eb:	3d 00 02 00 00       	cmp    $0x200,%eax
f012b4f0:	74 17                	je     f012b509 <test_krealloc+0x1029>
			panic("krealloc: pages in memory are not freed correctly");
f012b4f2:	83 ec 04             	sub    $0x4,%esp
f012b4f5:	68 08 b4 13 f0       	push   $0xf013b408
f012b4fa:	68 d0 0f 00 00       	push   $0xfd0
f012b4ff:	68 32 9f 13 f0       	push   $0xf0139f32
f012b504:	e8 a7 4c fd ff       	call   f01001b0 <_panic>

		//kfree last 3 MB
		freeFrames = sys_calculate_free_frames();
f012b509:	e8 30 19 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f012b50e:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012b511:	e8 6e 91 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012b516:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
		krealloc(ptr_allocations[7], 0);
f012b51c:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012b522:	83 ec 08             	sub    $0x8,%esp
f012b525:	6a 00                	push   $0x0
f012b527:	50                   	push   %eax
f012b528:	e8 5f cf fd ff       	call   f010848c <krealloc>
f012b52d:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012b530:	e8 4f 91 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012b535:	3b 85 1c ff ff ff    	cmp    -0xe4(%ebp),%eax
f012b53b:	74 17                	je     f012b554 <test_krealloc+0x1074>
			panic(
f012b53d:	83 ec 04             	sub    $0x4,%esp
f012b540:	68 94 b3 13 f0       	push   $0xf013b394
f012b545:	68 d8 0f 00 00       	push   $0xfd8
f012b54a:	68 32 9f 13 f0       	push   $0xf0139f32
f012b54f:	e8 5c 4c fd ff       	call   f01001b0 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 3 * Mega / PAGE_SIZE)
f012b554:	e8 e5 18 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f012b559:	89 c2                	mov    %eax,%edx
f012b55b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012b55e:	29 c2                	sub    %eax,%edx
f012b560:	89 d0                	mov    %edx,%eax
f012b562:	3d 00 03 00 00       	cmp    $0x300,%eax
f012b567:	74 17                	je     f012b580 <test_krealloc+0x10a0>
			panic(
f012b569:	83 ec 04             	sub    $0x4,%esp
f012b56c:	68 3c b4 13 f0       	push   $0xf013b43c
f012b571:	68 db 0f 00 00       	push   $0xfdb
f012b576:	68 32 9f 13 f0       	push   $0xf0139f32
f012b57b:	e8 30 4c fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012b580:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
f012b587:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f012b58e:	eb 48                	jmp    f012b5d8 <test_krealloc+0x10f8>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f012b590:	8b 55 e0             	mov    -0x20(%ebp),%edx
f012b593:	a1 30 ce 2b f0       	mov    0xf02bce30,%eax
f012b598:	83 ec 04             	sub    $0x4,%esp
f012b59b:	8d 8d 04 fe ff ff    	lea    -0x1fc(%ebp),%ecx
f012b5a1:	51                   	push   %ecx
f012b5a2:	52                   	push   %edx
f012b5a3:	50                   	push   %eax
f012b5a4:	e8 3e bf fd ff       	call   f01074e7 <get_page_table>
f012b5a9:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f012b5ac:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f012b5b2:	85 c0                	test   %eax,%eax
f012b5b4:	75 17                	jne    f012b5cd <test_krealloc+0x10ed>
					panic(
f012b5b6:	83 ec 04             	sub    $0x4,%esp
f012b5b9:	68 34 a8 13 f0       	push   $0xf013a834
f012b5be:	68 e7 0f 00 00       	push   $0xfe7
f012b5c3:	68 32 9f 13 f0       	push   $0xf0139f32
f012b5c8:	e8 e3 4b fd ff       	call   f01001b0 <_panic>
			panic(
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012b5cd:	81 45 e0 00 00 40 00 	addl   $0x400000,-0x20(%ebp)
f012b5d4:	83 55 e4 00          	adcl   $0x0,-0x1c(%ebp)
f012b5d8:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012b5dc:	78 b2                	js     f012b590 <test_krealloc+0x10b0>
f012b5de:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012b5e2:	7f 09                	jg     f012b5ed <test_krealloc+0x110d>
f012b5e4:	81 7d e0 ff ef ff ff 	cmpl   $0xffffefff,-0x20(%ebp)
f012b5eb:	76 a3                	jbe    f012b590 <test_krealloc+0x10b0>
							"Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
				}
			}
		}
	}
	cprintf("\b\b\b20%");
f012b5ed:	83 ec 0c             	sub    $0xc,%esp
f012b5f0:	68 7b b4 13 f0       	push   $0xf013b47b
f012b5f5:	e8 37 58 fd ff       	call   f0100e31 <cprintf>
f012b5fa:	83 c4 10             	add    $0x10,%esp
	//Check memory access after kfree by checking sum
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
f012b5fd:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012b603:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012b609:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012b610:	eb 21                	jmp    f012b633 <test_krealloc+0x1153>
			sums[0] += ptr[i];
f012b612:	8b 95 08 fe ff ff    	mov    -0x1f8(%ebp),%edx
f012b618:	8b 4d dc             	mov    -0x24(%ebp),%ecx
f012b61b:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012b621:	01 c8                	add    %ecx,%eax
f012b623:	8a 00                	mov    (%eax),%al
f012b625:	0f be c0             	movsbl %al,%eax
f012b628:	01 d0                	add    %edx,%eax
f012b62a:	89 85 08 fe ff ff    	mov    %eax,-0x1f8(%ebp)
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012b630:	ff 45 dc             	incl   -0x24(%ebp)
f012b633:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012b639:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012b63c:	7d d4                	jge    f012b612 <test_krealloc+0x1132>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012b63e:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012b644:	8b 95 5c fe ff ff    	mov    -0x1a4(%ebp),%edx
f012b64a:	42                   	inc    %edx
f012b64b:	01 d2                	add    %edx,%edx
f012b64d:	39 d0                	cmp    %edx,%eax
f012b64f:	74 17                	je     f012b668 <test_krealloc+0x1188>
			panic("krealloc: invalid read after freeing some allocations");
f012b651:	83 ec 04             	sub    $0x4,%esp
f012b654:	68 84 b4 13 f0       	push   $0xf013b484
f012b659:	68 f9 0f 00 00       	push   $0xff9
f012b65e:	68 32 9f 13 f0       	push   $0xf0139f32
f012b663:	e8 48 4b fd ff       	call   f01001b0 <_panic>

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];
f012b668:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012b66e:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)

		for (i = 0; i <= lastIndices[3]; ++i) {
f012b674:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012b67b:	eb 25                	jmp    f012b6a2 <test_krealloc+0x11c2>
			sums[1] += intArr[i];
f012b67d:	8b 95 0c fe ff ff    	mov    -0x1f4(%ebp),%edx
f012b683:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012b686:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f012b68d:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012b693:	01 c8                	add    %ecx,%eax
f012b695:	8b 00                	mov    (%eax),%eax
f012b697:	01 d0                	add    %edx,%eax
f012b699:	89 85 0c fe ff ff    	mov    %eax,-0x1f4(%ebp)

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];

		for (i = 0; i <= lastIndices[3]; ++i) {
f012b69f:	ff 45 dc             	incl   -0x24(%ebp)
f012b6a2:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012b6a8:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012b6ab:	7d d0                	jge    f012b67d <test_krealloc+0x119d>
			sums[1] += intArr[i];
		}
		if (sums[1] != (lastIndices[3] + 1) * 4)
f012b6ad:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012b6b3:	8b 95 64 fe ff ff    	mov    -0x19c(%ebp),%edx
f012b6b9:	42                   	inc    %edx
f012b6ba:	c1 e2 02             	shl    $0x2,%edx
f012b6bd:	39 d0                	cmp    %edx,%eax
f012b6bf:	74 17                	je     f012b6d8 <test_krealloc+0x11f8>
			panic("krealloc: invalid read after freeing some allocations");
f012b6c1:	83 ec 04             	sub    $0x4,%esp
f012b6c4:	68 84 b4 13 f0       	push   $0xf013b484
f012b6c9:	68 03 10 00 00       	push   $0x1003
f012b6ce:	68 32 9f 13 f0       	push   $0xf0139f32
f012b6d3:	e8 d8 4a fd ff       	call   f01001b0 <_panic>

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];
f012b6d8:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012b6de:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)

		for (i = 0; i <= lastIndices[4]; ++i) {
f012b6e4:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012b6eb:	eb 24                	jmp    f012b711 <test_krealloc+0x1231>
			sums[2] += shortArr[i];
f012b6ed:	8b 95 10 fe ff ff    	mov    -0x1f0(%ebp),%edx
f012b6f3:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012b6f6:	01 c0                	add    %eax,%eax
f012b6f8:	89 c1                	mov    %eax,%ecx
f012b6fa:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012b700:	01 c8                	add    %ecx,%eax
f012b702:	66 8b 00             	mov    (%eax),%ax
f012b705:	98                   	cwtl   
f012b706:	01 d0                	add    %edx,%eax
f012b708:	89 85 10 fe ff ff    	mov    %eax,-0x1f0(%ebp)

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];

		for (i = 0; i <= lastIndices[4]; ++i) {
f012b70e:	ff 45 dc             	incl   -0x24(%ebp)
f012b711:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012b717:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012b71a:	7d d1                	jge    f012b6ed <test_krealloc+0x120d>
			sums[2] += shortArr[i];
		}
		if (sums[2] != (lastIndices[4] + 1) * 5)
f012b71c:	8b 95 10 fe ff ff    	mov    -0x1f0(%ebp),%edx
f012b722:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012b728:	8d 48 01             	lea    0x1(%eax),%ecx
f012b72b:	89 c8                	mov    %ecx,%eax
f012b72d:	c1 e0 02             	shl    $0x2,%eax
f012b730:	01 c8                	add    %ecx,%eax
f012b732:	39 c2                	cmp    %eax,%edx
f012b734:	74 17                	je     f012b74d <test_krealloc+0x126d>
			panic("krealloc: invalid read after freeing some allocations");
f012b736:	83 ec 04             	sub    $0x4,%esp
f012b739:	68 84 b4 13 f0       	push   $0xf013b484
f012b73e:	68 0d 10 00 00       	push   $0x100d
f012b743:	68 32 9f 13 f0       	push   $0xf0139f32
f012b748:	e8 63 4a fd ff       	call   f01001b0 <_panic>

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];
f012b74d:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012b753:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)

		for (i = 0; i <= lastIndices[6]; ++i) {
f012b759:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012b760:	eb 70                	jmp    f012b7d2 <test_krealloc+0x12f2>
			sums[3] += structArr[i].a;
f012b762:	8b 95 14 fe ff ff    	mov    -0x1ec(%ebp),%edx
f012b768:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012b76b:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012b772:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012b778:	01 c8                	add    %ecx,%eax
f012b77a:	8a 00                	mov    (%eax),%al
f012b77c:	0f be c0             	movsbl %al,%eax
f012b77f:	01 d0                	add    %edx,%eax
f012b781:	89 85 14 fe ff ff    	mov    %eax,-0x1ec(%ebp)
			sums[4] += structArr[i].b;
f012b787:	8b 95 18 fe ff ff    	mov    -0x1e8(%ebp),%edx
f012b78d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012b790:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012b797:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012b79d:	01 c8                	add    %ecx,%eax
f012b79f:	66 8b 40 02          	mov    0x2(%eax),%ax
f012b7a3:	98                   	cwtl   
f012b7a4:	01 d0                	add    %edx,%eax
f012b7a6:	89 85 18 fe ff ff    	mov    %eax,-0x1e8(%ebp)
			sums[5] += structArr[i].c;
f012b7ac:	8b 95 1c fe ff ff    	mov    -0x1e4(%ebp),%edx
f012b7b2:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012b7b5:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012b7bc:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012b7c2:	01 c8                	add    %ecx,%eax
f012b7c4:	8b 40 04             	mov    0x4(%eax),%eax
f012b7c7:	01 d0                	add    %edx,%eax
f012b7c9:	89 85 1c fe ff ff    	mov    %eax,-0x1e4(%ebp)

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];

		for (i = 0; i <= lastIndices[6]; ++i) {
f012b7cf:	ff 45 dc             	incl   -0x24(%ebp)
f012b7d2:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012b7d8:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012b7db:	7d 85                	jge    f012b762 <test_krealloc+0x1282>
			sums[3] += structArr[i].a;
			sums[4] += structArr[i].b;
			sums[5] += structArr[i].c;
		}
		if (sums[3] != (lastIndices[6] + 1) * 7
f012b7dd:	8b 8d 14 fe ff ff    	mov    -0x1ec(%ebp),%ecx
f012b7e3:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012b7e9:	8d 50 01             	lea    0x1(%eax),%edx
f012b7ec:	89 d0                	mov    %edx,%eax
f012b7ee:	01 c0                	add    %eax,%eax
f012b7f0:	01 d0                	add    %edx,%eax
f012b7f2:	01 c0                	add    %eax,%eax
f012b7f4:	01 d0                	add    %edx,%eax
f012b7f6:	39 c1                	cmp    %eax,%ecx
f012b7f8:	75 3a                	jne    f012b834 <test_krealloc+0x1354>
				|| sums[4] != (lastIndices[6] + 1) * 7
f012b7fa:	8b 8d 18 fe ff ff    	mov    -0x1e8(%ebp),%ecx
f012b800:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012b806:	8d 50 01             	lea    0x1(%eax),%edx
f012b809:	89 d0                	mov    %edx,%eax
f012b80b:	01 c0                	add    %eax,%eax
f012b80d:	01 d0                	add    %edx,%eax
f012b80f:	01 c0                	add    %eax,%eax
f012b811:	01 d0                	add    %edx,%eax
f012b813:	39 c1                	cmp    %eax,%ecx
f012b815:	75 1d                	jne    f012b834 <test_krealloc+0x1354>
				|| sums[5] != (lastIndices[6] + 1) * 7)
f012b817:	8b 8d 1c fe ff ff    	mov    -0x1e4(%ebp),%ecx
f012b81d:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012b823:	8d 50 01             	lea    0x1(%eax),%edx
f012b826:	89 d0                	mov    %edx,%eax
f012b828:	01 c0                	add    %eax,%eax
f012b82a:	01 d0                	add    %edx,%eax
f012b82c:	01 c0                	add    %eax,%eax
f012b82e:	01 d0                	add    %edx,%eax
f012b830:	39 c1                	cmp    %eax,%ecx
f012b832:	74 17                	je     f012b84b <test_krealloc+0x136b>
			panic("krealloc: invalid read after freeing some allocations");
f012b834:	83 ec 04             	sub    $0x4,%esp
f012b837:	68 84 b4 13 f0       	push   $0xf013b484
f012b83c:	68 1b 10 00 00       	push   $0x101b
f012b841:	68 32 9f 13 f0       	push   $0xf0139f32
f012b846:	e8 65 49 fd ff       	call   f01001b0 <_panic>
	}

	//[4] Test krealloc reallocation with valid and invalid sizes
	{
		int freeDiskFrames;
		void* newAddress = NULL;
f012b84b:	c7 85 18 ff ff ff 00 	movl   $0x0,-0xe8(%ebp)
f012b852:	00 00 00 
		//Try to reallocate 2nd 1 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012b855:	e8 e4 15 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f012b85a:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 15 * kilo);
f012b85d:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012b863:	83 ec 08             	sub    $0x8,%esp
f012b866:	68 00 3c 00 00       	push   $0x3c00
f012b86b:	50                   	push   %eax
f012b86c:	e8 1b cc fd ff       	call   f010848c <krealloc>
f012b871:	83 c4 10             	add    $0x10,%esp
f012b874:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012b87a:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012b880:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012b885:	77 17                	ja     f012b89e <test_krealloc+0x13be>
			panic("krealloc: Wrong start address for the allocated space... ");
f012b887:	83 ec 04             	sub    $0x4,%esp
f012b88a:	68 d8 b1 13 f0       	push   $0xf013b1d8
f012b88f:	68 27 10 00 00       	push   $0x1027
f012b894:	68 32 9f 13 f0       	push   $0xf0139f32
f012b899:	e8 12 49 fd ff       	call   f01001b0 <_panic>
		if (newAddress != ptr_allocations[1])
f012b89e:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012b8a4:	3b 85 18 ff ff ff    	cmp    -0xe8(%ebp),%eax
f012b8aa:	74 17                	je     f012b8c3 <test_krealloc+0x13e3>
			panic(
f012b8ac:	83 ec 04             	sub    $0x4,%esp
f012b8af:	68 bc b4 13 f0       	push   $0xf013b4bc
f012b8b4:	68 2a 10 00 00       	push   $0x102a
f012b8b9:	68 32 9f 13 f0       	push   $0xf0139f32
f012b8be:	e8 ed 48 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012b8c3:	e8 76 15 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f012b8c8:	89 c2                	mov    %eax,%edx
f012b8ca:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012b8cd:	39 c2                	cmp    %eax,%edx
f012b8cf:	74 17                	je     f012b8e8 <test_krealloc+0x1408>
			panic(
f012b8d1:	83 ec 04             	sub    $0x4,%esp
f012b8d4:	68 28 b5 13 f0       	push   $0xf013b528
f012b8d9:	68 2d 10 00 00       	push   $0x102d
f012b8de:	68 32 9f 13 f0       	push   $0xf0139f32
f012b8e3:	e8 c8 48 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 1st 2 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012b8e8:	e8 51 15 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f012b8ed:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], 1 * Mega - kilo);
f012b8f0:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012b8f6:	83 ec 08             	sub    $0x8,%esp
f012b8f9:	68 00 fc 0f 00       	push   $0xffc00
f012b8fe:	50                   	push   %eax
f012b8ff:	e8 88 cb fd ff       	call   f010848c <krealloc>
f012b904:	83 c4 10             	add    $0x10,%esp
f012b907:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012b90d:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012b913:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012b918:	77 17                	ja     f012b931 <test_krealloc+0x1451>
			panic("krealloc: Wrong start address for the allocated space... ");
f012b91a:	83 ec 04             	sub    $0x4,%esp
f012b91d:	68 d8 b1 13 f0       	push   $0xf013b1d8
f012b922:	68 33 10 00 00       	push   $0x1033
f012b927:	68 32 9f 13 f0       	push   $0xf0139f32
f012b92c:	e8 7f 48 fd ff       	call   f01001b0 <_panic>
		if (newAddress != ptr_allocations[4])
f012b931:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012b937:	3b 85 18 ff ff ff    	cmp    -0xe8(%ebp),%eax
f012b93d:	74 17                	je     f012b956 <test_krealloc+0x1476>
			panic(
f012b93f:	83 ec 04             	sub    $0x4,%esp
f012b942:	68 bc b4 13 f0       	push   $0xf013b4bc
f012b947:	68 36 10 00 00       	push   $0x1036
f012b94c:	68 32 9f 13 f0       	push   $0xf0139f32
f012b951:	e8 5a 48 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012b956:	e8 e3 14 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f012b95b:	89 c2                	mov    %eax,%edx
f012b95d:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012b960:	39 c2                	cmp    %eax,%edx
f012b962:	74 17                	je     f012b97b <test_krealloc+0x149b>
			panic(
f012b964:	83 ec 04             	sub    $0x4,%esp
f012b967:	68 28 b5 13 f0       	push   $0xf013b528
f012b96c:	68 39 10 00 00       	push   $0x1039
f012b971:	68 32 9f 13 f0       	push   $0xf0139f32
f012b976:	e8 35 48 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 2nd 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012b97b:	e8 be 14 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f012b980:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 1 * Mega - kilo);
f012b983:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012b989:	83 ec 08             	sub    $0x8,%esp
f012b98c:	68 00 fc 0f 00       	push   $0xffc00
f012b991:	50                   	push   %eax
f012b992:	e8 f5 ca fd ff       	call   f010848c <krealloc>
f012b997:	83 c4 10             	add    $0x10,%esp
f012b99a:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012b9a0:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012b9a6:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012b9ab:	77 17                	ja     f012b9c4 <test_krealloc+0x14e4>
			panic("krealloc: Wrong start address for the allocated space... ");
f012b9ad:	83 ec 04             	sub    $0x4,%esp
f012b9b0:	68 d8 b1 13 f0       	push   $0xf013b1d8
f012b9b5:	68 3f 10 00 00       	push   $0x103f
f012b9ba:	68 32 9f 13 f0       	push   $0xf0139f32
f012b9bf:	e8 ec 47 fd ff       	call   f01001b0 <_panic>
		if (newAddress != ptr_allocations[1])
f012b9c4:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012b9ca:	3b 85 18 ff ff ff    	cmp    -0xe8(%ebp),%eax
f012b9d0:	74 17                	je     f012b9e9 <test_krealloc+0x1509>
			panic(
f012b9d2:	83 ec 04             	sub    $0x4,%esp
f012b9d5:	68 bc b4 13 f0       	push   $0xf013b4bc
f012b9da:	68 42 10 00 00       	push   $0x1042
f012b9df:	68 32 9f 13 f0       	push   $0xf0139f32
f012b9e4:	e8 c7 47 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012b9e9:	e8 50 14 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f012b9ee:	89 c2                	mov    %eax,%edx
f012b9f0:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012b9f3:	39 c2                	cmp    %eax,%edx
f012b9f5:	74 17                	je     f012ba0e <test_krealloc+0x152e>
			panic(
f012b9f7:	83 ec 04             	sub    $0x4,%esp
f012b9fa:	68 28 b5 13 f0       	push   $0xf013b528
f012b9ff:	68 45 10 00 00       	push   $0x1045
f012ba04:	68 32 9f 13 f0       	push   $0xf0139f32
f012ba09:	e8 a2 47 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");



		//Try to reallocate 4th 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012ba0e:	e8 2b 14 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f012ba13:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[3], 1 * Mega - kilo);
f012ba16:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012ba1c:	83 ec 08             	sub    $0x8,%esp
f012ba1f:	68 00 fc 0f 00       	push   $0xffc00
f012ba24:	50                   	push   %eax
f012ba25:	e8 62 ca fd ff       	call   f010848c <krealloc>
f012ba2a:	83 c4 10             	add    $0x10,%esp
f012ba2d:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012ba33:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012ba39:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012ba3e:	77 17                	ja     f012ba57 <test_krealloc+0x1577>
			panic("krealloc: Wrong start address for the allocated space... ");
f012ba40:	83 ec 04             	sub    $0x4,%esp
f012ba43:	68 d8 b1 13 f0       	push   $0xf013b1d8
f012ba48:	68 4d 10 00 00       	push   $0x104d
f012ba4d:	68 32 9f 13 f0       	push   $0xf0139f32
f012ba52:	e8 59 47 fd ff       	call   f01001b0 <_panic>
		if (newAddress != ptr_allocations[3])
f012ba57:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012ba5d:	3b 85 18 ff ff ff    	cmp    -0xe8(%ebp),%eax
f012ba63:	74 17                	je     f012ba7c <test_krealloc+0x159c>
			panic(
f012ba65:	83 ec 04             	sub    $0x4,%esp
f012ba68:	68 6c b5 13 f0       	push   $0xf013b56c
f012ba6d:	68 50 10 00 00       	push   $0x1050
f012ba72:	68 32 9f 13 f0       	push   $0xf0139f32
f012ba77:	e8 34 47 fd ff       	call   f01001b0 <_panic>
					"Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012ba7c:	e8 bd 13 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f012ba81:	89 c2                	mov    %eax,%edx
f012ba83:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012ba86:	39 c2                	cmp    %eax,%edx
f012ba88:	74 17                	je     f012baa1 <test_krealloc+0x15c1>
			panic(
f012ba8a:	83 ec 04             	sub    $0x4,%esp
f012ba8d:	68 28 b5 13 f0       	push   $0xf013b528
f012ba92:	68 53 10 00 00       	push   $0x1053
f012ba97:	68 32 9f 13 f0       	push   $0xf0139f32
f012ba9c:	e8 0f 47 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");
	}
	cprintf("\b\b\b30%");
f012baa1:	83 ec 0c             	sub    $0xc,%esp
f012baa4:	68 4b a7 13 f0       	push   $0xf013a74b
f012baa9:	e8 83 53 fd ff       	call   f0100e31 <cprintf>
f012baae:	83 c4 10             	add    $0x10,%esp
    {
		//Reallocate 2nd 1 MB to 1 MB + 7 KB
		freeFrames = sys_calculate_free_frames();
f012bab1:	e8 88 13 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f012bab6:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1],
f012bab9:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012babf:	83 ec 08             	sub    $0x8,%esp
f012bac2:	68 00 18 10 00       	push   $0x101800
f012bac7:	50                   	push   %eax
f012bac8:	e8 bf c9 fd ff       	call   f010848c <krealloc>
f012bacd:	83 c4 10             	add    $0x10,%esp
f012bad0:	89 45 bc             	mov    %eax,-0x44(%ebp)
				(1 * Mega - kilo) + (7 * kilo));
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012bad3:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012bad6:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012badb:	77 17                	ja     f012baf4 <test_krealloc+0x1614>
			panic("krealloc: Wrong start address for the allocated space... ");
f012badd:	83 ec 04             	sub    $0x4,%esp
f012bae0:	68 d8 b1 13 f0       	push   $0xf013b1d8
f012bae5:	68 5c 10 00 00       	push   $0x105c
f012baea:	68 32 9f 13 f0       	push   $0xf0139f32
f012baef:	e8 bc 46 fd ff       	call   f01001b0 <_panic>
		if (newAddress != ptr_allocations[1])
f012baf4:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012bafa:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012bafd:	74 17                	je     f012bb16 <test_krealloc+0x1636>
			panic(
f012baff:	83 ec 04             	sub    $0x4,%esp
f012bb02:	68 cc b5 13 f0       	push   $0xf013b5cc
f012bb07:	68 5f 10 00 00       	push   $0x105f
f012bb0c:	68 32 9f 13 f0       	push   $0xf0139f32
f012bb11:	e8 9a 46 fd ff       	call   f01001b0 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		if (freeFrames - sys_calculate_free_frames() != 2)
f012bb16:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012bb19:	e8 20 13 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f012bb1e:	29 c3                	sub    %eax,%ebx
f012bb20:	89 d8                	mov    %ebx,%eax
f012bb22:	83 f8 02             	cmp    $0x2,%eax
f012bb25:	74 17                	je     f012bb3e <test_krealloc+0x165e>
			panic("krealloc: pages in memory are not loaded correctly");
f012bb27:	83 ec 04             	sub    $0x4,%esp
f012bb2a:	68 48 b6 13 f0       	push   $0xf013b648
f012bb2f:	68 61 10 00 00       	push   $0x1061
f012bb34:	68 32 9f 13 f0       	push   $0xf0139f32
f012bb39:	e8 72 46 fd ff       	call   f01001b0 <_panic>

		//Reallocate 1st 2 MB to 2 MB + 2 MB
		freeFrames = sys_calculate_free_frames();
f012bb3e:	e8 fb 12 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f012bb43:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (4 * Mega - kilo));
f012bb46:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012bb4c:	83 ec 08             	sub    $0x8,%esp
f012bb4f:	68 00 fc 3f 00       	push   $0x3ffc00
f012bb54:	50                   	push   %eax
f012bb55:	e8 32 c9 fd ff       	call   f010848c <krealloc>
f012bb5a:	83 c4 10             	add    $0x10,%esp
f012bb5d:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012bb60:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012bb63:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012bb68:	77 17                	ja     f012bb81 <test_krealloc+0x16a1>
			panic("krealloc: Wrong start address for the allocated space... ");
f012bb6a:	83 ec 04             	sub    $0x4,%esp
f012bb6d:	68 d8 b1 13 f0       	push   $0xf013b1d8
f012bb72:	68 67 10 00 00       	push   $0x1067
f012bb77:	68 32 9f 13 f0       	push   $0xf0139f32
f012bb7c:	e8 2f 46 fd ff       	call   f01001b0 <_panic>
		if (newAddress != ptr_allocations[4])
f012bb81:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012bb87:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012bb8a:	74 17                	je     f012bba3 <test_krealloc+0x16c3>
			panic(
f012bb8c:	83 ec 04             	sub    $0x4,%esp
f012bb8f:	68 cc b5 13 f0       	push   $0xf013b5cc
f012bb94:	68 6a 10 00 00       	push   $0x106a
f012bb99:	68 32 9f 13 f0       	push   $0xf0139f32
f012bb9e:	e8 0d 46 fd ff       	call   f01001b0 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		//2 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 512)
f012bba3:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012bba6:	e8 93 12 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f012bbab:	29 c3                	sub    %eax,%ebx
f012bbad:	89 d8                	mov    %ebx,%eax
f012bbaf:	3d 00 02 00 00       	cmp    $0x200,%eax
f012bbb4:	74 17                	je     f012bbcd <test_krealloc+0x16ed>
			panic("krealloc: pages in memory are not loaded correctly");
f012bbb6:	83 ec 04             	sub    $0x4,%esp
f012bbb9:	68 48 b6 13 f0       	push   $0xf013b648
f012bbbe:	68 6d 10 00 00       	push   $0x106d
f012bbc3:	68 32 9f 13 f0       	push   $0xf0139f32
f012bbc8:	e8 e3 45 fd ff       	call   f01001b0 <_panic>


	}
	cprintf("\b\b\b60%");
f012bbcd:	83 ec 0c             	sub    $0xc,%esp
f012bbd0:	68 90 a7 13 f0       	push   $0xf013a790
f012bbd5:	e8 57 52 fd ff       	call   f0100e31 <cprintf>
f012bbda:	83 c4 10             	add    $0x10,%esp
	//Test krealloc: Cut & paste
	{
		//Reallocate 1st 2 MB (already reallocated to 4 MB) to 10 MB. It should return new VA
		freeFrames = sys_calculate_free_frames();
f012bbdd:	e8 5c 12 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f012bbe2:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (10 * Mega - kilo));
f012bbe5:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012bbeb:	83 ec 08             	sub    $0x8,%esp
f012bbee:	68 00 fc 9f 00       	push   $0x9ffc00
f012bbf3:	50                   	push   %eax
f012bbf4:	e8 93 c8 fd ff       	call   f010848c <krealloc>
f012bbf9:	83 c4 10             	add    $0x10,%esp
f012bbfc:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012bbff:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012bc02:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012bc07:	77 17                	ja     f012bc20 <test_krealloc+0x1740>
			panic("krealloc: Wrong start address for the allocated space... ");
f012bc09:	83 ec 04             	sub    $0x4,%esp
f012bc0c:	68 d8 b1 13 f0       	push   $0xf013b1d8
f012bc11:	68 78 10 00 00       	push   $0x1078
f012bc16:	68 32 9f 13 f0       	push   $0xf0139f32
f012bc1b:	e8 90 45 fd ff       	call   f01001b0 <_panic>
		if ((uint32) newAddress != ACTUAL_START + (14 * Mega))
f012bc20:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f012bc27:	10 00 00 
f012bc2a:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f012bc2f:	0f b6 d0             	movzbl %al,%edx
f012bc32:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012bc38:	01 d0                	add    %edx,%eax
f012bc3a:	48                   	dec    %eax
f012bc3b:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f012bc41:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012bc47:	ba 00 00 00 00       	mov    $0x0,%edx
f012bc4c:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f012bc52:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012bc58:	29 d0                	sub    %edx,%eax
f012bc5a:	89 c1                	mov    %eax,%ecx
f012bc5c:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f012bc63:	10 00 00 
f012bc66:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f012bc6b:	0f b6 c0             	movzbl %al,%eax
f012bc6e:	c1 e0 04             	shl    $0x4,%eax
f012bc71:	89 c2                	mov    %eax,%edx
f012bc73:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012bc79:	01 d0                	add    %edx,%eax
f012bc7b:	48                   	dec    %eax
f012bc7c:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f012bc82:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012bc88:	ba 00 00 00 00       	mov    $0x0,%edx
f012bc8d:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f012bc93:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012bc99:	29 d0                	sub    %edx,%eax
f012bc9b:	01 c8                	add    %ecx,%eax
f012bc9d:	8d 90 00 40 e0 f6    	lea    -0x91fc000(%eax),%edx
f012bca3:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012bca6:	39 c2                	cmp    %eax,%edx
f012bca8:	74 18                	je     f012bcc2 <test_krealloc+0x17e2>
			panic(
f012bcaa:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012bcad:	50                   	push   %eax
f012bcae:	68 7c b6 13 f0       	push   $0xf013b67c
f012bcb3:	68 7c 10 00 00       	push   $0x107c
f012bcb8:	68 32 9f 13 f0       	push   $0xf0139f32
f012bcbd:	e8 ee 44 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong start address for reallocated space, NSA = %x\nbbb",
					(uint32 )newAddress);
		if (newAddress == ptr_allocations[4])
f012bcc2:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012bcc8:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012bccb:	75 17                	jne    f012bce4 <test_krealloc+0x1804>
			panic(
f012bccd:	83 ec 04             	sub    $0x4,%esp
f012bcd0:	68 c0 b6 13 f0       	push   $0xf013b6c0
f012bcd5:	68 7f 10 00 00       	push   $0x107f
f012bcda:	68 32 9f 13 f0       	push   $0xf0139f32
f012bcdf:	e8 cc 44 fd ff       	call   f01001b0 <_panic>
					"Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
		//6 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 1536)
f012bce4:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012bce7:	e8 52 11 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f012bcec:	29 c3                	sub    %eax,%ebx
f012bcee:	89 d8                	mov    %ebx,%eax
f012bcf0:	3d 00 06 00 00       	cmp    $0x600,%eax
f012bcf5:	74 17                	je     f012bd0e <test_krealloc+0x182e>
			panic("krealloc: pages in memory are not loaded correctly");
f012bcf7:	83 ec 04             	sub    $0x4,%esp
f012bcfa:	68 48 b6 13 f0       	push   $0xf013b648
f012bcff:	68 82 10 00 00       	push   $0x1082
f012bd04:	68 32 9f 13 f0       	push   $0xf0139f32
f012bd09:	e8 a2 44 fd ff       	call   f01001b0 <_panic>

		ptr_allocations[4] = newAddress;
f012bd0e:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012bd11:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
		//lastIndices[4] = (10 * Mega - kilo) / sizeof(short) - 1;

		//Reallocate 1st 3 MB to 6 MB
		freeFrames = sys_calculate_free_frames();
f012bd17:	e8 22 11 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f012bd1c:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (6 * Mega - kilo));
f012bd1f:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012bd25:	83 ec 08             	sub    $0x8,%esp
f012bd28:	68 00 fc 5f 00       	push   $0x5ffc00
f012bd2d:	50                   	push   %eax
f012bd2e:	e8 59 c7 fd ff       	call   f010848c <krealloc>
f012bd33:	83 c4 10             	add    $0x10,%esp
f012bd36:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012bd39:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012bd3c:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012bd41:	77 17                	ja     f012bd5a <test_krealloc+0x187a>
			panic("krealloc: Wrong start address for the allocated space... ");
f012bd43:	83 ec 04             	sub    $0x4,%esp
f012bd46:	68 d8 b1 13 f0       	push   $0xf013b1d8
f012bd4b:	68 8b 10 00 00       	push   $0x108b
f012bd50:	68 32 9f 13 f0       	push   $0xf0139f32
f012bd55:	e8 56 44 fd ff       	call   f01001b0 <_panic>
		if (newAddress != ptr_allocations[6])
f012bd5a:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012bd60:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012bd63:	74 17                	je     f012bd7c <test_krealloc+0x189c>
			panic(
f012bd65:	83 ec 04             	sub    $0x4,%esp
f012bd68:	68 cc b5 13 f0       	push   $0xf013b5cc
f012bd6d:	68 8e 10 00 00       	push   $0x108e
f012bd72:	68 32 9f 13 f0       	push   $0xf0139f32
f012bd77:	e8 34 44 fd ff       	call   f01001b0 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		//3 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 768)
f012bd7c:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012bd7f:	e8 ba 10 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f012bd84:	29 c3                	sub    %eax,%ebx
f012bd86:	89 d8                	mov    %ebx,%eax
f012bd88:	3d 00 03 00 00       	cmp    $0x300,%eax
f012bd8d:	74 17                	je     f012bda6 <test_krealloc+0x18c6>
			panic("krealloc: pages in memory are not loaded correctly");
f012bd8f:	83 ec 04             	sub    $0x4,%esp
f012bd92:	68 48 b6 13 f0       	push   $0xf013b648
f012bd97:	68 91 10 00 00       	push   $0x1091
f012bd9c:	68 32 9f 13 f0       	push   $0xf0139f32
f012bda1:	e8 0a 44 fd ff       	call   f01001b0 <_panic>

		//Reallocate 1st 3 MB (already reallocated to 6 MB) to 20 MB. It should return new VA

		freeFrames = sys_calculate_free_frames();
f012bda6:	e8 93 10 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f012bdab:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (20 * Mega - kilo));
f012bdae:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012bdb4:	83 ec 08             	sub    $0x8,%esp
f012bdb7:	68 00 fc 3f 01       	push   $0x13ffc00
f012bdbc:	50                   	push   %eax
f012bdbd:	e8 ca c6 fd ff       	call   f010848c <krealloc>
f012bdc2:	83 c4 10             	add    $0x10,%esp
f012bdc5:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012bdc8:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012bdcb:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012bdd0:	77 17                	ja     f012bde9 <test_krealloc+0x1909>
			panic("krealloc: Wrong start address for the allocated space... ");
f012bdd2:	83 ec 04             	sub    $0x4,%esp
f012bdd5:	68 d8 b1 13 f0       	push   $0xf013b1d8
f012bdda:	68 98 10 00 00       	push   $0x1098
f012bddf:	68 32 9f 13 f0       	push   $0xf0139f32
f012bde4:	e8 c7 43 fd ff       	call   f01001b0 <_panic>
		if (newAddress == ptr_allocations[6])
f012bde9:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012bdef:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012bdf2:	75 17                	jne    f012be0b <test_krealloc+0x192b>
			panic(
f012bdf4:	83 ec 04             	sub    $0x4,%esp
f012bdf7:	68 c0 b6 13 f0       	push   $0xf013b6c0
f012bdfc:	68 9b 10 00 00       	push   $0x109b
f012be01:	68 32 9f 13 f0       	push   $0xf0139f32
f012be06:	e8 a5 43 fd ff       	call   f01001b0 <_panic>
					"Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
		if ((uint32) newAddress != ACTUAL_START + (24 * Mega))
f012be0b:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f012be12:	10 00 00 
f012be15:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f012be1a:	0f b6 d0             	movzbl %al,%edx
f012be1d:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012be23:	01 d0                	add    %edx,%eax
f012be25:	48                   	dec    %eax
f012be26:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f012be2c:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012be32:	ba 00 00 00 00       	mov    $0x0,%edx
f012be37:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f012be3d:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012be43:	29 d0                	sub    %edx,%eax
f012be45:	89 c1                	mov    %eax,%ecx
f012be47:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f012be4e:	10 00 00 
f012be51:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f012be56:	0f b6 c0             	movzbl %al,%eax
f012be59:	c1 e0 04             	shl    $0x4,%eax
f012be5c:	89 c2                	mov    %eax,%edx
f012be5e:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012be64:	01 d0                	add    %edx,%eax
f012be66:	48                   	dec    %eax
f012be67:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f012be6d:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012be73:	ba 00 00 00 00       	mov    $0x0,%edx
f012be78:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f012be7e:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012be84:	29 d0                	sub    %edx,%eax
f012be86:	01 c8                	add    %ecx,%eax
f012be88:	8d 90 00 40 80 f7    	lea    -0x87fc000(%eax),%edx
f012be8e:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012be91:	39 c2                	cmp    %eax,%edx
f012be93:	74 17                	je     f012beac <test_krealloc+0x19cc>
			panic("krealloc: Wrong start address for reallocated space");
f012be95:	83 ec 04             	sub    $0x4,%esp
f012be98:	68 44 b7 13 f0       	push   $0xf013b744
f012be9d:	68 9d 10 00 00       	push   $0x109d
f012bea2:	68 32 9f 13 f0       	push   $0xf0139f32
f012bea7:	e8 04 43 fd ff       	call   f01001b0 <_panic>
		//3 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 3584)
f012beac:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012beaf:	e8 8a 0f fe ff       	call   f010ce3e <sys_calculate_free_frames>
f012beb4:	29 c3                	sub    %eax,%ebx
f012beb6:	89 d8                	mov    %ebx,%eax
f012beb8:	3d 00 0e 00 00       	cmp    $0xe00,%eax
f012bebd:	74 17                	je     f012bed6 <test_krealloc+0x19f6>
			panic("krealloc: pages in memory are not loaded correctly");
f012bebf:	83 ec 04             	sub    $0x4,%esp
f012bec2:	68 48 b6 13 f0       	push   $0xf013b648
f012bec7:	68 a0 10 00 00       	push   $0x10a0
f012becc:	68 32 9f 13 f0       	push   $0xf0139f32
f012bed1:	e8 da 42 fd ff       	call   f01001b0 <_panic>

		ptr_allocations[6] = newAddress;
f012bed6:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012bed9:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f012bedf:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012bee5:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
		int i;
		sums[0] = 0;
f012beeb:	c7 85 08 fe ff ff 00 	movl   $0x0,-0x1f8(%ebp)
f012bef2:	00 00 00 
		for (i = 0; i <= lastIndices[1]; ++i) {
f012bef5:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012befc:	eb 21                	jmp    f012bf1f <test_krealloc+0x1a3f>
			sums[0] += ptr[i];
f012befe:	8b 95 08 fe ff ff    	mov    -0x1f8(%ebp),%edx
f012bf04:	8b 4d d8             	mov    -0x28(%ebp),%ecx
f012bf07:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012bf0d:	01 c8                	add    %ecx,%eax
f012bf0f:	8a 00                	mov    (%eax),%al
f012bf11:	0f be c0             	movsbl %al,%eax
f012bf14:	01 d0                	add    %edx,%eax
f012bf16:	89 85 08 fe ff ff    	mov    %eax,-0x1f8(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		int i;
		sums[0] = 0;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012bf1c:	ff 45 d8             	incl   -0x28(%ebp)
f012bf1f:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012bf25:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012bf28:	7d d4                	jge    f012befe <test_krealloc+0x1a1e>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012bf2a:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012bf30:	8b 95 5c fe ff ff    	mov    -0x1a4(%ebp),%edx
f012bf36:	42                   	inc    %edx
f012bf37:	01 d2                	add    %edx,%edx
f012bf39:	39 d0                	cmp    %edx,%eax
f012bf3b:	74 17                	je     f012bf54 <test_krealloc+0x1a74>
			panic("krealloc: invalid read after re-allocations");
f012bf3d:	83 ec 04             	sub    $0x4,%esp
f012bf40:	68 78 b7 13 f0       	push   $0xf013b778
f012bf45:	68 ae 10 00 00       	push   $0x10ae
f012bf4a:	68 32 9f 13 f0       	push   $0xf0139f32
f012bf4f:	e8 5c 42 fd ff       	call   f01001b0 <_panic>

		//Test read write access for the new allocated size of 1st 3 MB
		structArr = (struct MyStruct*) ptr_allocations[6];
f012bf54:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012bf5a:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)

		sums[0] = 0;
f012bf60:	c7 85 08 fe ff ff 00 	movl   $0x0,-0x1f8(%ebp)
f012bf67:	00 00 00 
		sums[1] = 0;
f012bf6a:	c7 85 0c fe ff ff 00 	movl   $0x0,-0x1f4(%ebp)
f012bf71:	00 00 00 
		sums[2] = 0;
f012bf74:	c7 85 10 fe ff ff 00 	movl   $0x0,-0x1f0(%ebp)
f012bf7b:	00 00 00 
		for (i = 0; i <= lastIndices[6]; ++i) {
f012bf7e:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012bf85:	eb 70                	jmp    f012bff7 <test_krealloc+0x1b17>
			sums[0] += structArr[i].a;
f012bf87:	8b 95 08 fe ff ff    	mov    -0x1f8(%ebp),%edx
f012bf8d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012bf90:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012bf97:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012bf9d:	01 c8                	add    %ecx,%eax
f012bf9f:	8a 00                	mov    (%eax),%al
f012bfa1:	0f be c0             	movsbl %al,%eax
f012bfa4:	01 d0                	add    %edx,%eax
f012bfa6:	89 85 08 fe ff ff    	mov    %eax,-0x1f8(%ebp)
			sums[1] += structArr[i].b;
f012bfac:	8b 95 0c fe ff ff    	mov    -0x1f4(%ebp),%edx
f012bfb2:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012bfb5:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012bfbc:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012bfc2:	01 c8                	add    %ecx,%eax
f012bfc4:	66 8b 40 02          	mov    0x2(%eax),%ax
f012bfc8:	98                   	cwtl   
f012bfc9:	01 d0                	add    %edx,%eax
f012bfcb:	89 85 0c fe ff ff    	mov    %eax,-0x1f4(%ebp)
			sums[2] += structArr[i].c;
f012bfd1:	8b 95 10 fe ff ff    	mov    -0x1f0(%ebp),%edx
f012bfd7:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012bfda:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012bfe1:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012bfe7:	01 c8                	add    %ecx,%eax
f012bfe9:	8b 40 04             	mov    0x4(%eax),%eax
f012bfec:	01 d0                	add    %edx,%eax
f012bfee:	89 85 10 fe ff ff    	mov    %eax,-0x1f0(%ebp)
		structArr = (struct MyStruct*) ptr_allocations[6];

		sums[0] = 0;
		sums[1] = 0;
		sums[2] = 0;
		for (i = 0; i <= lastIndices[6]; ++i) {
f012bff4:	ff 45 d8             	incl   -0x28(%ebp)
f012bff7:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012bffd:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012c000:	7d 85                	jge    f012bf87 <test_krealloc+0x1aa7>
			sums[1] += structArr[i].b;
			sums[2] += structArr[i].c;

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[6] + 1) * 7
f012c002:	8b 8d 08 fe ff ff    	mov    -0x1f8(%ebp),%ecx
f012c008:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012c00e:	8d 50 01             	lea    0x1(%eax),%edx
f012c011:	89 d0                	mov    %edx,%eax
f012c013:	01 c0                	add    %eax,%eax
f012c015:	01 d0                	add    %edx,%eax
f012c017:	01 c0                	add    %eax,%eax
f012c019:	01 d0                	add    %edx,%eax
f012c01b:	39 c1                	cmp    %eax,%ecx
f012c01d:	75 3a                	jne    f012c059 <test_krealloc+0x1b79>
				|| sums[1] != (lastIndices[6] + 1) * 7
f012c01f:	8b 8d 0c fe ff ff    	mov    -0x1f4(%ebp),%ecx
f012c025:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012c02b:	8d 50 01             	lea    0x1(%eax),%edx
f012c02e:	89 d0                	mov    %edx,%eax
f012c030:	01 c0                	add    %eax,%eax
f012c032:	01 d0                	add    %edx,%eax
f012c034:	01 c0                	add    %eax,%eax
f012c036:	01 d0                	add    %edx,%eax
f012c038:	39 c1                	cmp    %eax,%ecx
f012c03a:	75 1d                	jne    f012c059 <test_krealloc+0x1b79>
				|| sums[2] != (lastIndices[6] + 1) * 7)
f012c03c:	8b 8d 10 fe ff ff    	mov    -0x1f0(%ebp),%ecx
f012c042:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012c048:	8d 50 01             	lea    0x1(%eax),%edx
f012c04b:	89 d0                	mov    %edx,%eax
f012c04d:	01 c0                	add    %eax,%eax
f012c04f:	01 d0                	add    %edx,%eax
f012c051:	01 c0                	add    %eax,%eax
f012c053:	01 d0                	add    %edx,%eax
f012c055:	39 c1                	cmp    %eax,%ecx
f012c057:	74 17                	je     f012c070 <test_krealloc+0x1b90>
			panic("krealloc: invalid read after re-allocations");
f012c059:	83 ec 04             	sub    $0x4,%esp
f012c05c:	68 78 b7 13 f0       	push   $0xf013b778
f012c061:	68 c0 10 00 00       	push   $0x10c0
f012c066:	68 32 9f 13 f0       	push   $0xf0139f32
f012c06b:	e8 40 41 fd ff       	call   f01001b0 <_panic>

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f012c070:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012c076:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)

		sums[0] = 0;
f012c07c:	c7 85 08 fe ff ff 00 	movl   $0x0,-0x1f8(%ebp)
f012c083:	00 00 00 
		for (i = 0; i <= lastIndices[4]; ++i) {
f012c086:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012c08d:	eb 24                	jmp    f012c0b3 <test_krealloc+0x1bd3>
			sums[0] += shortArr[i];
f012c08f:	8b 95 08 fe ff ff    	mov    -0x1f8(%ebp),%edx
f012c095:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012c098:	01 c0                	add    %eax,%eax
f012c09a:	89 c1                	mov    %eax,%ecx
f012c09c:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012c0a2:	01 c8                	add    %ecx,%eax
f012c0a4:	66 8b 00             	mov    (%eax),%ax
f012c0a7:	98                   	cwtl   
f012c0a8:	01 d0                	add    %edx,%eax
f012c0aa:	89 85 08 fe ff ff    	mov    %eax,-0x1f8(%ebp)

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];

		sums[0] = 0;
		for (i = 0; i <= lastIndices[4]; ++i) {
f012c0b0:	ff 45 d8             	incl   -0x28(%ebp)
f012c0b3:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012c0b9:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012c0bc:	7d d1                	jge    f012c08f <test_krealloc+0x1baf>
			sums[0] += shortArr[i];
		}
		if (sums[0] != (lastIndices[4] + 1) * 5)
f012c0be:	8b 95 08 fe ff ff    	mov    -0x1f8(%ebp),%edx
f012c0c4:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012c0ca:	8d 48 01             	lea    0x1(%eax),%ecx
f012c0cd:	89 c8                	mov    %ecx,%eax
f012c0cf:	c1 e0 02             	shl    $0x2,%eax
f012c0d2:	01 c8                	add    %ecx,%eax
f012c0d4:	39 c2                	cmp    %eax,%edx
f012c0d6:	74 17                	je     f012c0ef <test_krealloc+0x1c0f>
			panic("krealloc: invalid read after re-allocations");
f012c0d8:	83 ec 04             	sub    $0x4,%esp
f012c0db:	68 78 b7 13 f0       	push   $0xf013b778
f012c0e0:	68 ca 10 00 00       	push   $0x10ca
f012c0e5:	68 32 9f 13 f0       	push   $0xf0139f32
f012c0ea:	e8 c1 40 fd ff       	call   f01001b0 <_panic>

		//Test krealloc with size = 0 after krealloc 1st 3 MB to 20 MB
		freeFrames = sys_calculate_free_frames();
f012c0ef:	e8 4a 0d fe ff       	call   f010ce3e <sys_calculate_free_frames>
f012c0f4:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012c0f7:	e8 88 85 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012c0fc:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
		krealloc(ptr_allocations[6], 0);
f012c102:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012c108:	83 ec 08             	sub    $0x8,%esp
f012c10b:	6a 00                	push   $0x0
f012c10d:	50                   	push   %eax
f012c10e:	e8 79 c3 fd ff       	call   f010848c <krealloc>
f012c113:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012c116:	e8 69 85 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012c11b:	3b 85 1c ff ff ff    	cmp    -0xe4(%ebp),%eax
f012c121:	74 17                	je     f012c13a <test_krealloc+0x1c5a>
			panic(
f012c123:	83 ec 04             	sub    $0x4,%esp
f012c126:	68 4c 9f 13 f0       	push   $0xf0139f4c
f012c12b:	68 d2 10 00 00       	push   $0x10d2
f012c130:	68 32 9f 13 f0       	push   $0xf0139f32
f012c135:	e8 76 40 fd ff       	call   f01001b0 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 20 * Mega / PAGE_SIZE)
f012c13a:	e8 ff 0c fe ff       	call   f010ce3e <sys_calculate_free_frames>
f012c13f:	89 c2                	mov    %eax,%edx
f012c141:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012c144:	29 c2                	sub    %eax,%edx
f012c146:	89 d0                	mov    %edx,%eax
f012c148:	3d 00 14 00 00       	cmp    $0x1400,%eax
f012c14d:	74 17                	je     f012c166 <test_krealloc+0x1c86>
			panic("krealloc: pages in memory are not freed correctly");
f012c14f:	83 ec 04             	sub    $0x4,%esp
f012c152:	68 08 b4 13 f0       	push   $0xf013b408
f012c157:	68 d4 10 00 00       	push   $0x10d4
f012c15c:	68 32 9f 13 f0       	push   $0xf0139f32
f012c161:	e8 4a 40 fd ff       	call   f01001b0 <_panic>

		//Test kfree after krealloc 1st 2 MB to 10 MB
		freeFrames = sys_calculate_free_frames();
f012c166:	e8 d3 0c fe ff       	call   f010ce3e <sys_calculate_free_frames>
f012c16b:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012c16e:	e8 11 85 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012c173:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
		kfree(ptr_allocations[4]);
f012c179:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012c17f:	83 ec 0c             	sub    $0xc,%esp
f012c182:	50                   	push   %eax
f012c183:	e8 56 c2 fd ff       	call   f01083de <kfree>
f012c188:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012c18b:	e8 f4 84 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012c190:	3b 85 1c ff ff ff    	cmp    -0xe4(%ebp),%eax
f012c196:	74 17                	je     f012c1af <test_krealloc+0x1ccf>
			panic(
f012c198:	83 ec 04             	sub    $0x4,%esp
f012c19b:	68 4c 9f 13 f0       	push   $0xf0139f4c
f012c1a0:	68 dc 10 00 00       	push   $0x10dc
f012c1a5:	68 32 9f 13 f0       	push   $0xf0139f32
f012c1aa:	e8 01 40 fd ff       	call   f01001b0 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 10 * Mega / PAGE_SIZE)
f012c1af:	e8 8a 0c fe ff       	call   f010ce3e <sys_calculate_free_frames>
f012c1b4:	89 c2                	mov    %eax,%edx
f012c1b6:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012c1b9:	29 c2                	sub    %eax,%edx
f012c1bb:	89 d0                	mov    %edx,%eax
f012c1bd:	3d 00 0a 00 00       	cmp    $0xa00,%eax
f012c1c2:	74 17                	je     f012c1db <test_krealloc+0x1cfb>
			panic("krealloc: pages in memory are not freed correctly");
f012c1c4:	83 ec 04             	sub    $0x4,%esp
f012c1c7:	68 08 b4 13 f0       	push   $0xf013b408
f012c1cc:	68 de 10 00 00       	push   $0x10de
f012c1d1:	68 32 9f 13 f0       	push   $0xf0139f32
f012c1d6:	e8 d5 3f fd ff       	call   f01001b0 <_panic>

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012c1db:	c7 45 d0 00 00 00 f6 	movl   $0xf6000000,-0x30(%ebp)
f012c1e2:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f012c1e9:	eb 48                	jmp    f012c233 <test_krealloc+0x1d53>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f012c1eb:	8b 55 d0             	mov    -0x30(%ebp),%edx
f012c1ee:	a1 30 ce 2b f0       	mov    0xf02bce30,%eax
f012c1f3:	83 ec 04             	sub    $0x4,%esp
f012c1f6:	8d 8d 00 fe ff ff    	lea    -0x200(%ebp),%ecx
f012c1fc:	51                   	push   %ecx
f012c1fd:	52                   	push   %edx
f012c1fe:	50                   	push   %eax
f012c1ff:	e8 e3 b2 fd ff       	call   f01074e7 <get_page_table>
f012c204:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f012c207:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012c20d:	85 c0                	test   %eax,%eax
f012c20f:	75 17                	jne    f012c228 <test_krealloc+0x1d48>
					panic(
f012c211:	83 ec 04             	sub    $0x4,%esp
f012c214:	68 34 a8 13 f0       	push   $0xf013a834
f012c219:	68 eb 10 00 00       	push   $0x10eb
f012c21e:	68 32 9f 13 f0       	push   $0xf0139f32
f012c223:	e8 88 3f fd ff       	call   f01001b0 <_panic>
			panic("krealloc: pages in memory are not freed correctly");

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012c228:	81 45 d0 00 00 40 00 	addl   $0x400000,-0x30(%ebp)
f012c22f:	83 55 d4 00          	adcl   $0x0,-0x2c(%ebp)
f012c233:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f012c237:	78 b2                	js     f012c1eb <test_krealloc+0x1d0b>
f012c239:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f012c23d:	7f 09                	jg     f012c248 <test_krealloc+0x1d68>
f012c23f:	81 7d d0 ff ef ff ff 	cmpl   $0xffffefff,-0x30(%ebp)
f012c246:	76 a3                	jbe    f012c1eb <test_krealloc+0x1d0b>
			}
		}

	}

	cprintf("\b\b\b100%\n");
f012c248:	83 ec 0c             	sub    $0xc,%esp
f012c24b:	68 16 a1 13 f0       	push   $0xf013a116
f012c250:	e8 dc 4b fd ff       	call   f0100e31 <cprintf>
f012c255:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test krealloc completed successfully.\n");
f012c258:	83 ec 0c             	sub    $0xc,%esp
f012c25b:	68 a4 b7 13 f0       	push   $0xf013b7a4
f012c260:	e8 cc 4b fd ff       	call   f0100e31 <cprintf>
f012c265:	83 c4 10             	add    $0x10,%esp
	return 0;
f012c268:	b8 00 00 00 00       	mov    $0x0,%eax
}
f012c26d:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012c270:	5b                   	pop    %ebx
f012c271:	5f                   	pop    %edi
f012c272:	5d                   	pop    %ebp
f012c273:	c3                   	ret    

f012c274 <test_krealloc_BF>:


int test_krealloc_BF() {
f012c274:	55                   	push   %ebp
f012c275:	89 e5                	mov    %esp,%ebp
f012c277:	57                   	push   %edi
f012c278:	53                   	push   %ebx
f012c279:	81 ec 10 02 00 00    	sub    $0x210,%esp
	cprintf("==============================================\n");
f012c27f:	83 ec 0c             	sub    $0xc,%esp
f012c282:	68 74 9e 13 f0       	push   $0xf0139e74
f012c287:	e8 a5 4b fd ff       	call   f0100e31 <cprintf>
f012c28c:	83 c4 10             	add    $0x10,%esp
	cprintf(
f012c28f:	83 ec 0c             	sub    $0xc,%esp
f012c292:	68 a4 9e 13 f0       	push   $0xf0139ea4
f012c297:	e8 95 4b fd ff       	call   f0100e31 <cprintf>
f012c29c:	83 c4 10             	add    $0x10,%esp
			"MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
	cprintf("==============================================\n");
f012c29f:	83 ec 0c             	sub    $0xc,%esp
f012c2a2:	68 74 9e 13 f0       	push   $0xf0139e74
f012c2a7:	e8 85 4b fd ff       	call   f0100e31 <cprintf>
f012c2ac:	83 c4 10             	add    $0x10,%esp
	char minByte = 1 << 7;
f012c2af:	c6 45 cf 80          	movb   $0x80,-0x31(%ebp)
	char maxByte = 0x7F;
f012c2b3:	c6 45 ce 7f          	movb   $0x7f,-0x32(%ebp)
	short minShort = 1 << 15;
f012c2b7:	66 c7 45 cc 00 80    	movw   $0x8000,-0x34(%ebp)
	short maxShort = 0x7FFF;
f012c2bd:	66 c7 45 ca ff 7f    	movw   $0x7fff,-0x36(%ebp)
	int minInt = 1 << 31;
f012c2c3:	c7 45 c4 00 00 00 80 	movl   $0x80000000,-0x3c(%ebp)
	int maxInt = 0x7FFFFFFF;
f012c2ca:	c7 45 c0 ff ff ff 7f 	movl   $0x7fffffff,-0x40(%ebp)
	int *intArr;
	struct MyStruct *structArr;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2,
			lastIndexOfInt, lastIndexOfStruct;
	//[1] Test calling krealloc with VA = NULL. It should call malloc
	void* ptr_allocations[20] = { 0 };
f012c2d1:	8d 95 98 fe ff ff    	lea    -0x168(%ebp),%edx
f012c2d7:	b9 14 00 00 00       	mov    $0x14,%ecx
f012c2dc:	b8 00 00 00 00       	mov    $0x0,%eax
f012c2e1:	89 d7                	mov    %edx,%edi
f012c2e3:	f3 ab                	rep stos %eax,%es:(%edi)
	char* ptr;
	void* newAddress = NULL;
f012c2e5:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
	int freeDiskFrames;


	int lastIndices[20] = { 0 };
f012c2ec:	8d 95 48 fe ff ff    	lea    -0x1b8(%ebp),%edx
f012c2f2:	b9 14 00 00 00       	mov    $0x14,%ecx
f012c2f7:	b8 00 00 00 00       	mov    $0x0,%eax
f012c2fc:	89 d7                	mov    %edx,%edi
f012c2fe:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = { 0 };
f012c300:	8d 95 f8 fd ff ff    	lea    -0x208(%ebp),%edx
f012c306:	b9 14 00 00 00       	mov    $0x14,%ecx
f012c30b:	b8 00 00 00 00       	mov    $0x0,%eax
f012c310:	89 d7                	mov    %edx,%edi
f012c312:	f3 ab                	rep stos %eax,%es:(%edi)
	int freeFrames;
	//[1] Allocate all
	{
		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012c314:	e8 25 0b fe ff       	call   f010ce3e <sys_calculate_free_frames>
f012c319:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[0] = krealloc(NULL, 1 * Mega - kilo);
f012c31c:	83 ec 08             	sub    $0x8,%esp
f012c31f:	68 00 fc 0f 00       	push   $0xffc00
f012c324:	6a 00                	push   $0x0
f012c326:	e8 61 c1 fd ff       	call   f010848c <krealloc>
f012c32b:	83 c4 10             	add    $0x10,%esp
f012c32e:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
		if ((uint32) ptr_allocations[0] < (KERNEL_HEAP_START))
f012c334:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f012c33a:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012c33f:	77 17                	ja     f012c358 <test_krealloc_BF+0xe4>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c341:	83 ec 04             	sub    $0x4,%esp
f012c344:	68 d8 b1 13 f0       	push   $0xf013b1d8
f012c349:	68 1a 11 00 00       	push   $0x111a
f012c34e:	68 32 9f 13 f0       	push   $0xf0139f32
f012c353:	e8 58 3e fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[0] != ACTUAL_START)
f012c358:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f012c35e:	89 c1                	mov    %eax,%ecx
f012c360:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f012c367:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f012c36c:	0f b6 d0             	movzbl %al,%edx
f012c36f:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f012c372:	01 d0                	add    %edx,%eax
f012c374:	48                   	dec    %eax
f012c375:	89 45 b0             	mov    %eax,-0x50(%ebp)
f012c378:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012c37b:	ba 00 00 00 00       	mov    $0x0,%edx
f012c380:	f7 75 b4             	divl   -0x4c(%ebp)
f012c383:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012c386:	29 d0                	sub    %edx,%eax
f012c388:	89 c3                	mov    %eax,%ebx
f012c38a:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f012c391:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f012c396:	0f b6 c0             	movzbl %al,%eax
f012c399:	c1 e0 04             	shl    $0x4,%eax
f012c39c:	89 c2                	mov    %eax,%edx
f012c39e:	8b 45 ac             	mov    -0x54(%ebp),%eax
f012c3a1:	01 d0                	add    %edx,%eax
f012c3a3:	48                   	dec    %eax
f012c3a4:	89 45 a8             	mov    %eax,-0x58(%ebp)
f012c3a7:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012c3aa:	ba 00 00 00 00       	mov    $0x0,%edx
f012c3af:	f7 75 ac             	divl   -0x54(%ebp)
f012c3b2:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012c3b5:	29 d0                	sub    %edx,%eax
f012c3b7:	01 d8                	add    %ebx,%eax
f012c3b9:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f012c3be:	39 c1                	cmp    %eax,%ecx
f012c3c0:	74 17                	je     f012c3d9 <test_krealloc_BF+0x165>
			panic("krealloc: Wrong start address for allocated space");
f012c3c2:	83 ec 04             	sub    $0x4,%esp
f012c3c5:	68 14 b2 13 f0       	push   $0xf013b214
f012c3ca:	68 1c 11 00 00       	push   $0x111c
f012c3cf:	68 32 9f 13 f0       	push   $0xf0139f32
f012c3d4:	e8 d7 3d fd ff       	call   f01001b0 <_panic>

		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012c3d9:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c3dc:	e8 5d 0a fe ff       	call   f010ce3e <sys_calculate_free_frames>
f012c3e1:	29 c3                	sub    %eax,%ebx
f012c3e3:	89 d8                	mov    %ebx,%eax
f012c3e5:	3d 00 01 00 00       	cmp    $0x100,%eax
f012c3ea:	74 17                	je     f012c403 <test_krealloc_BF+0x18f>
			panic("krealloc: Wrong allocation: ");
f012c3ec:	83 ec 04             	sub    $0x4,%esp
f012c3ef:	68 46 b2 13 f0       	push   $0xf013b246
f012c3f4:	68 1f 11 00 00       	push   $0x111f
f012c3f9:	68 32 9f 13 f0       	push   $0xf0139f32
f012c3fe:	e8 ad 3d fd ff       	call   f01001b0 <_panic>

		lastIndices[0] = (1 * Mega - kilo) / sizeof(char) - 1;
f012c403:	c7 85 48 fe ff ff ff 	movl   $0xffbff,-0x1b8(%ebp)
f012c40a:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012c40d:	e8 2c 0a fe ff       	call   f010ce3e <sys_calculate_free_frames>
f012c412:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[1] = krealloc(NULL, 1 * Mega - kilo);
f012c415:	83 ec 08             	sub    $0x8,%esp
f012c418:	68 00 fc 0f 00       	push   $0xffc00
f012c41d:	6a 00                	push   $0x0
f012c41f:	e8 68 c0 fd ff       	call   f010848c <krealloc>
f012c424:	83 c4 10             	add    $0x10,%esp
f012c427:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
		if ((uint32) ptr_allocations[1] < (KERNEL_HEAP_START + 1 * Mega))
f012c42d:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012c433:	3d ff ff 0f f6       	cmp    $0xf60fffff,%eax
f012c438:	77 17                	ja     f012c451 <test_krealloc_BF+0x1dd>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c43a:	83 ec 04             	sub    $0x4,%esp
f012c43d:	68 d8 b1 13 f0       	push   $0xf013b1d8
f012c442:	68 27 11 00 00       	push   $0x1127
f012c447:	68 32 9f 13 f0       	push   $0xf0139f32
f012c44c:	e8 5f 3d fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[1] != ACTUAL_START + (1 * Mega))
f012c451:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012c457:	89 c1                	mov    %eax,%ecx
f012c459:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f012c460:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f012c465:	0f b6 d0             	movzbl %al,%edx
f012c468:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012c46b:	01 d0                	add    %edx,%eax
f012c46d:	48                   	dec    %eax
f012c46e:	89 45 a0             	mov    %eax,-0x60(%ebp)
f012c471:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012c474:	ba 00 00 00 00       	mov    $0x0,%edx
f012c479:	f7 75 a4             	divl   -0x5c(%ebp)
f012c47c:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012c47f:	29 d0                	sub    %edx,%eax
f012c481:	89 c3                	mov    %eax,%ebx
f012c483:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f012c48a:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f012c48f:	0f b6 c0             	movzbl %al,%eax
f012c492:	c1 e0 04             	shl    $0x4,%eax
f012c495:	89 c2                	mov    %eax,%edx
f012c497:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012c49a:	01 d0                	add    %edx,%eax
f012c49c:	48                   	dec    %eax
f012c49d:	89 45 98             	mov    %eax,-0x68(%ebp)
f012c4a0:	8b 45 98             	mov    -0x68(%ebp),%eax
f012c4a3:	ba 00 00 00 00       	mov    $0x0,%edx
f012c4a8:	f7 75 9c             	divl   -0x64(%ebp)
f012c4ab:	8b 45 98             	mov    -0x68(%ebp),%eax
f012c4ae:	29 d0                	sub    %edx,%eax
f012c4b0:	01 d8                	add    %ebx,%eax
f012c4b2:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f012c4b7:	39 c1                	cmp    %eax,%ecx
f012c4b9:	74 17                	je     f012c4d2 <test_krealloc_BF+0x25e>
			panic("krealloc: Wrong start address for allocated space");
f012c4bb:	83 ec 04             	sub    $0x4,%esp
f012c4be:	68 14 b2 13 f0       	push   $0xf013b214
f012c4c3:	68 29 11 00 00       	push   $0x1129
f012c4c8:	68 32 9f 13 f0       	push   $0xf0139f32
f012c4cd:	e8 de 3c fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012c4d2:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c4d5:	e8 64 09 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f012c4da:	29 c3                	sub    %eax,%ebx
f012c4dc:	89 d8                	mov    %ebx,%eax
f012c4de:	3d 00 01 00 00       	cmp    $0x100,%eax
f012c4e3:	74 17                	je     f012c4fc <test_krealloc_BF+0x288>
			panic("krealloc: Wrong allocation: ");
f012c4e5:	83 ec 04             	sub    $0x4,%esp
f012c4e8:	68 46 b2 13 f0       	push   $0xf013b246
f012c4ed:	68 2b 11 00 00       	push   $0x112b
f012c4f2:	68 32 9f 13 f0       	push   $0xf0139f32
f012c4f7:	e8 b4 3c fd ff       	call   f01001b0 <_panic>

		lastIndices[1] = (1 * Mega - kilo) / sizeof(char) - 1;
f012c4fc:	c7 85 4c fe ff ff ff 	movl   $0xffbff,-0x1b4(%ebp)
f012c503:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012c506:	e8 33 09 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f012c50b:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[2] = krealloc(NULL, 1 * Mega - kilo);
f012c50e:	83 ec 08             	sub    $0x8,%esp
f012c511:	68 00 fc 0f 00       	push   $0xffc00
f012c516:	6a 00                	push   $0x0
f012c518:	e8 6f bf fd ff       	call   f010848c <krealloc>
f012c51d:	83 c4 10             	add    $0x10,%esp
f012c520:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
		if ((uint32) ptr_allocations[2] < (KERNEL_HEAP_START + 2 * Mega))
f012c526:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f012c52c:	3d ff ff 1f f6       	cmp    $0xf61fffff,%eax
f012c531:	77 17                	ja     f012c54a <test_krealloc_BF+0x2d6>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c533:	83 ec 04             	sub    $0x4,%esp
f012c536:	68 d8 b1 13 f0       	push   $0xf013b1d8
f012c53b:	68 33 11 00 00       	push   $0x1133
f012c540:	68 32 9f 13 f0       	push   $0xf0139f32
f012c545:	e8 66 3c fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[2] != ACTUAL_START + (2 * Mega))
f012c54a:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f012c550:	89 c1                	mov    %eax,%ecx
f012c552:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f012c559:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f012c55e:	0f b6 d0             	movzbl %al,%edx
f012c561:	8b 45 94             	mov    -0x6c(%ebp),%eax
f012c564:	01 d0                	add    %edx,%eax
f012c566:	48                   	dec    %eax
f012c567:	89 45 90             	mov    %eax,-0x70(%ebp)
f012c56a:	8b 45 90             	mov    -0x70(%ebp),%eax
f012c56d:	ba 00 00 00 00       	mov    $0x0,%edx
f012c572:	f7 75 94             	divl   -0x6c(%ebp)
f012c575:	8b 45 90             	mov    -0x70(%ebp),%eax
f012c578:	29 d0                	sub    %edx,%eax
f012c57a:	89 c3                	mov    %eax,%ebx
f012c57c:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f012c583:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f012c588:	0f b6 c0             	movzbl %al,%eax
f012c58b:	c1 e0 04             	shl    $0x4,%eax
f012c58e:	89 c2                	mov    %eax,%edx
f012c590:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012c593:	01 d0                	add    %edx,%eax
f012c595:	48                   	dec    %eax
f012c596:	89 45 88             	mov    %eax,-0x78(%ebp)
f012c599:	8b 45 88             	mov    -0x78(%ebp),%eax
f012c59c:	ba 00 00 00 00       	mov    $0x0,%edx
f012c5a1:	f7 75 8c             	divl   -0x74(%ebp)
f012c5a4:	8b 45 88             	mov    -0x78(%ebp),%eax
f012c5a7:	29 d0                	sub    %edx,%eax
f012c5a9:	01 d8                	add    %ebx,%eax
f012c5ab:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f012c5b0:	39 c1                	cmp    %eax,%ecx
f012c5b2:	74 17                	je     f012c5cb <test_krealloc_BF+0x357>
			panic("krealloc: Wrong start address for allocated space");
f012c5b4:	83 ec 04             	sub    $0x4,%esp
f012c5b7:	68 14 b2 13 f0       	push   $0xf013b214
f012c5bc:	68 35 11 00 00       	push   $0x1135
f012c5c1:	68 32 9f 13 f0       	push   $0xf0139f32
f012c5c6:	e8 e5 3b fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012c5cb:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c5ce:	e8 6b 08 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f012c5d3:	29 c3                	sub    %eax,%ebx
f012c5d5:	89 d8                	mov    %ebx,%eax
f012c5d7:	3d 00 01 00 00       	cmp    $0x100,%eax
f012c5dc:	74 17                	je     f012c5f5 <test_krealloc_BF+0x381>
			panic("krealloc: Wrong allocation: ");
f012c5de:	83 ec 04             	sub    $0x4,%esp
f012c5e1:	68 46 b2 13 f0       	push   $0xf013b246
f012c5e6:	68 37 11 00 00       	push   $0x1137
f012c5eb:	68 32 9f 13 f0       	push   $0xf0139f32
f012c5f0:	e8 bb 3b fd ff       	call   f01001b0 <_panic>
		lastIndices[2] = (1 * Mega - kilo) / sizeof(int) - 1;
f012c5f5:	c7 85 50 fe ff ff ff 	movl   $0x3feff,-0x1b0(%ebp)
f012c5fc:	fe 03 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012c5ff:	e8 3a 08 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f012c604:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[3] = krealloc(NULL, 1 * Mega - kilo);
f012c607:	83 ec 08             	sub    $0x8,%esp
f012c60a:	68 00 fc 0f 00       	push   $0xffc00
f012c60f:	6a 00                	push   $0x0
f012c611:	e8 76 be fd ff       	call   f010848c <krealloc>
f012c616:	83 c4 10             	add    $0x10,%esp
f012c619:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
		if ((uint32) ptr_allocations[3] < (KERNEL_HEAP_START + 3 * Mega))
f012c61f:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012c625:	3d ff ff 2f f6       	cmp    $0xf62fffff,%eax
f012c62a:	77 17                	ja     f012c643 <test_krealloc_BF+0x3cf>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c62c:	83 ec 04             	sub    $0x4,%esp
f012c62f:	68 d8 b1 13 f0       	push   $0xf013b1d8
f012c634:	68 3e 11 00 00       	push   $0x113e
f012c639:	68 32 9f 13 f0       	push   $0xf0139f32
f012c63e:	e8 6d 3b fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[3] != ACTUAL_START + (3 * Mega))
f012c643:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012c649:	89 c1                	mov    %eax,%ecx
f012c64b:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f012c652:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f012c657:	0f b6 d0             	movzbl %al,%edx
f012c65a:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012c65d:	01 d0                	add    %edx,%eax
f012c65f:	48                   	dec    %eax
f012c660:	89 45 80             	mov    %eax,-0x80(%ebp)
f012c663:	8b 45 80             	mov    -0x80(%ebp),%eax
f012c666:	ba 00 00 00 00       	mov    $0x0,%edx
f012c66b:	f7 75 84             	divl   -0x7c(%ebp)
f012c66e:	8b 45 80             	mov    -0x80(%ebp),%eax
f012c671:	29 d0                	sub    %edx,%eax
f012c673:	89 c3                	mov    %eax,%ebx
f012c675:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f012c67c:	10 00 00 
f012c67f:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f012c684:	0f b6 c0             	movzbl %al,%eax
f012c687:	c1 e0 04             	shl    $0x4,%eax
f012c68a:	89 c2                	mov    %eax,%edx
f012c68c:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012c692:	01 d0                	add    %edx,%eax
f012c694:	48                   	dec    %eax
f012c695:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f012c69b:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012c6a1:	ba 00 00 00 00       	mov    $0x0,%edx
f012c6a6:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f012c6ac:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012c6b2:	29 d0                	sub    %edx,%eax
f012c6b4:	01 d8                	add    %ebx,%eax
f012c6b6:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f012c6bb:	39 c1                	cmp    %eax,%ecx
f012c6bd:	74 17                	je     f012c6d6 <test_krealloc_BF+0x462>
			panic("krealloc: Wrong start address for allocated space");
f012c6bf:	83 ec 04             	sub    $0x4,%esp
f012c6c2:	68 14 b2 13 f0       	push   $0xf013b214
f012c6c7:	68 40 11 00 00       	push   $0x1140
f012c6cc:	68 32 9f 13 f0       	push   $0xf0139f32
f012c6d1:	e8 da 3a fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012c6d6:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c6d9:	e8 60 07 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f012c6de:	29 c3                	sub    %eax,%ebx
f012c6e0:	89 d8                	mov    %ebx,%eax
f012c6e2:	3d 00 01 00 00       	cmp    $0x100,%eax
f012c6e7:	74 17                	je     f012c700 <test_krealloc_BF+0x48c>
			panic("krealloc: Wrong allocation: ");
f012c6e9:	83 ec 04             	sub    $0x4,%esp
f012c6ec:	68 46 b2 13 f0       	push   $0xf013b246
f012c6f1:	68 42 11 00 00       	push   $0x1142
f012c6f6:	68 32 9f 13 f0       	push   $0xf0139f32
f012c6fb:	e8 b0 3a fd ff       	call   f01001b0 <_panic>
		lastIndices[3] = (1 * Mega - kilo) / sizeof(int) - 1;
f012c700:	c7 85 54 fe ff ff ff 	movl   $0x3feff,-0x1ac(%ebp)
f012c707:	fe 03 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012c70a:	e8 2f 07 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f012c70f:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[4] = krealloc(NULL, 2 * Mega - kilo);
f012c712:	83 ec 08             	sub    $0x8,%esp
f012c715:	68 00 fc 1f 00       	push   $0x1ffc00
f012c71a:	6a 00                	push   $0x0
f012c71c:	e8 6b bd fd ff       	call   f010848c <krealloc>
f012c721:	83 c4 10             	add    $0x10,%esp
f012c724:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
		if ((uint32) ptr_allocations[4] < (KERNEL_HEAP_START + 4 * Mega))
f012c72a:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012c730:	3d ff ff 3f f6       	cmp    $0xf63fffff,%eax
f012c735:	77 17                	ja     f012c74e <test_krealloc_BF+0x4da>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c737:	83 ec 04             	sub    $0x4,%esp
f012c73a:	68 d8 b1 13 f0       	push   $0xf013b1d8
f012c73f:	68 49 11 00 00       	push   $0x1149
f012c744:	68 32 9f 13 f0       	push   $0xf0139f32
f012c749:	e8 62 3a fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[4] != ACTUAL_START + (4 * Mega))
f012c74e:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012c754:	89 c1                	mov    %eax,%ecx
f012c756:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f012c75d:	10 00 00 
f012c760:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f012c765:	0f b6 d0             	movzbl %al,%edx
f012c768:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012c76e:	01 d0                	add    %edx,%eax
f012c770:	48                   	dec    %eax
f012c771:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f012c777:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012c77d:	ba 00 00 00 00       	mov    $0x0,%edx
f012c782:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f012c788:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012c78e:	29 d0                	sub    %edx,%eax
f012c790:	89 c3                	mov    %eax,%ebx
f012c792:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f012c799:	10 00 00 
f012c79c:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f012c7a1:	0f b6 c0             	movzbl %al,%eax
f012c7a4:	c1 e0 04             	shl    $0x4,%eax
f012c7a7:	89 c2                	mov    %eax,%edx
f012c7a9:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f012c7af:	01 d0                	add    %edx,%eax
f012c7b1:	48                   	dec    %eax
f012c7b2:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f012c7b8:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012c7be:	ba 00 00 00 00       	mov    $0x0,%edx
f012c7c3:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f012c7c9:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012c7cf:	29 d0                	sub    %edx,%eax
f012c7d1:	01 d8                	add    %ebx,%eax
f012c7d3:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f012c7d8:	39 c1                	cmp    %eax,%ecx
f012c7da:	74 17                	je     f012c7f3 <test_krealloc_BF+0x57f>
			panic("krealloc: Wrong start address for allocated space");
f012c7dc:	83 ec 04             	sub    $0x4,%esp
f012c7df:	68 14 b2 13 f0       	push   $0xf013b214
f012c7e4:	68 4b 11 00 00       	push   $0x114b
f012c7e9:	68 32 9f 13 f0       	push   $0xf0139f32
f012c7ee:	e8 bd 39 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012c7f3:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c7f6:	e8 43 06 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f012c7fb:	29 c3                	sub    %eax,%ebx
f012c7fd:	89 d8                	mov    %ebx,%eax
f012c7ff:	3d 00 02 00 00       	cmp    $0x200,%eax
f012c804:	74 17                	je     f012c81d <test_krealloc_BF+0x5a9>
			panic("krealloc: Wrong allocation: ");
f012c806:	83 ec 04             	sub    $0x4,%esp
f012c809:	68 46 b2 13 f0       	push   $0xf013b246
f012c80e:	68 4d 11 00 00       	push   $0x114d
f012c813:	68 32 9f 13 f0       	push   $0xf0139f32
f012c818:	e8 93 39 fd ff       	call   f01001b0 <_panic>
		lastIndices[4] = (2 * Mega - kilo) / sizeof(short) - 1;
f012c81d:	c7 85 58 fe ff ff ff 	movl   $0xffdff,-0x1a8(%ebp)
f012c824:	fd 0f 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012c827:	e8 12 06 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f012c82c:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[5] = krealloc(NULL, 2 * Mega - kilo);
f012c82f:	83 ec 08             	sub    $0x8,%esp
f012c832:	68 00 fc 1f 00       	push   $0x1ffc00
f012c837:	6a 00                	push   $0x0
f012c839:	e8 4e bc fd ff       	call   f010848c <krealloc>
f012c83e:	83 c4 10             	add    $0x10,%esp
f012c841:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
		if ((uint32) ptr_allocations[5] < (KERNEL_HEAP_START + 6 * Mega))
f012c847:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012c84d:	3d ff ff 5f f6       	cmp    $0xf65fffff,%eax
f012c852:	77 17                	ja     f012c86b <test_krealloc_BF+0x5f7>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c854:	83 ec 04             	sub    $0x4,%esp
f012c857:	68 d8 b1 13 f0       	push   $0xf013b1d8
f012c85c:	68 54 11 00 00       	push   $0x1154
f012c861:	68 32 9f 13 f0       	push   $0xf0139f32
f012c866:	e8 45 39 fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[5] != ACTUAL_START + (6 * Mega))
f012c86b:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012c871:	89 c1                	mov    %eax,%ecx
f012c873:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f012c87a:	10 00 00 
f012c87d:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f012c882:	0f b6 d0             	movzbl %al,%edx
f012c885:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012c88b:	01 d0                	add    %edx,%eax
f012c88d:	48                   	dec    %eax
f012c88e:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f012c894:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012c89a:	ba 00 00 00 00       	mov    $0x0,%edx
f012c89f:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f012c8a5:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012c8ab:	29 d0                	sub    %edx,%eax
f012c8ad:	89 c3                	mov    %eax,%ebx
f012c8af:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f012c8b6:	10 00 00 
f012c8b9:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f012c8be:	0f b6 c0             	movzbl %al,%eax
f012c8c1:	c1 e0 04             	shl    $0x4,%eax
f012c8c4:	89 c2                	mov    %eax,%edx
f012c8c6:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012c8cc:	01 d0                	add    %edx,%eax
f012c8ce:	48                   	dec    %eax
f012c8cf:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f012c8d5:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012c8db:	ba 00 00 00 00       	mov    $0x0,%edx
f012c8e0:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f012c8e6:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012c8ec:	29 d0                	sub    %edx,%eax
f012c8ee:	01 d8                	add    %ebx,%eax
f012c8f0:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f012c8f5:	39 c1                	cmp    %eax,%ecx
f012c8f7:	74 17                	je     f012c910 <test_krealloc_BF+0x69c>
			panic("krealloc: Wrong start address for allocated space");
f012c8f9:	83 ec 04             	sub    $0x4,%esp
f012c8fc:	68 14 b2 13 f0       	push   $0xf013b214
f012c901:	68 56 11 00 00       	push   $0x1156
f012c906:	68 32 9f 13 f0       	push   $0xf0139f32
f012c90b:	e8 a0 38 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012c910:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c913:	e8 26 05 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f012c918:	29 c3                	sub    %eax,%ebx
f012c91a:	89 d8                	mov    %ebx,%eax
f012c91c:	3d 00 02 00 00       	cmp    $0x200,%eax
f012c921:	74 17                	je     f012c93a <test_krealloc_BF+0x6c6>
			panic("krealloc: Wrong allocation: ");
f012c923:	83 ec 04             	sub    $0x4,%esp
f012c926:	68 46 b2 13 f0       	push   $0xf013b246
f012c92b:	68 58 11 00 00       	push   $0x1158
f012c930:	68 32 9f 13 f0       	push   $0xf0139f32
f012c935:	e8 76 38 fd ff       	call   f01001b0 <_panic>
		lastIndices[5] = (2 * Mega - kilo) / sizeof(short) - 1;
f012c93a:	c7 85 5c fe ff ff ff 	movl   $0xffdff,-0x1a4(%ebp)
f012c941:	fd 0f 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012c944:	e8 f5 04 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f012c949:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[6] = krealloc(NULL, 3 * Mega - kilo);
f012c94c:	83 ec 08             	sub    $0x8,%esp
f012c94f:	68 00 fc 2f 00       	push   $0x2ffc00
f012c954:	6a 00                	push   $0x0
f012c956:	e8 31 bb fd ff       	call   f010848c <krealloc>
f012c95b:	83 c4 10             	add    $0x10,%esp
f012c95e:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
		if ((uint32) ptr_allocations[6] < (KERNEL_HEAP_START + 8 * Mega))
f012c964:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012c96a:	3d ff ff 7f f6       	cmp    $0xf67fffff,%eax
f012c96f:	77 17                	ja     f012c988 <test_krealloc_BF+0x714>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c971:	83 ec 04             	sub    $0x4,%esp
f012c974:	68 d8 b1 13 f0       	push   $0xf013b1d8
f012c979:	68 5f 11 00 00       	push   $0x115f
f012c97e:	68 32 9f 13 f0       	push   $0xf0139f32
f012c983:	e8 28 38 fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[6] != ACTUAL_START + (8 * Mega))
f012c988:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012c98e:	89 c1                	mov    %eax,%ecx
f012c990:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f012c997:	10 00 00 
f012c99a:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f012c99f:	0f b6 d0             	movzbl %al,%edx
f012c9a2:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012c9a8:	01 d0                	add    %edx,%eax
f012c9aa:	48                   	dec    %eax
f012c9ab:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f012c9b1:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012c9b7:	ba 00 00 00 00       	mov    $0x0,%edx
f012c9bc:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f012c9c2:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012c9c8:	29 d0                	sub    %edx,%eax
f012c9ca:	89 c3                	mov    %eax,%ebx
f012c9cc:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f012c9d3:	10 00 00 
f012c9d6:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f012c9db:	0f b6 c0             	movzbl %al,%eax
f012c9de:	c1 e0 04             	shl    $0x4,%eax
f012c9e1:	89 c2                	mov    %eax,%edx
f012c9e3:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012c9e9:	01 d0                	add    %edx,%eax
f012c9eb:	48                   	dec    %eax
f012c9ec:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f012c9f2:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012c9f8:	ba 00 00 00 00       	mov    $0x0,%edx
f012c9fd:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f012ca03:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012ca09:	29 d0                	sub    %edx,%eax
f012ca0b:	01 d8                	add    %ebx,%eax
f012ca0d:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f012ca12:	39 c1                	cmp    %eax,%ecx
f012ca14:	74 17                	je     f012ca2d <test_krealloc_BF+0x7b9>
			panic("krealloc: Wrong start address for allocated space");
f012ca16:	83 ec 04             	sub    $0x4,%esp
f012ca19:	68 14 b2 13 f0       	push   $0xf013b214
f012ca1e:	68 61 11 00 00       	push   $0x1161
f012ca23:	68 32 9f 13 f0       	push   $0xf0139f32
f012ca28:	e8 83 37 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012ca2d:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012ca30:	e8 09 04 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f012ca35:	29 c3                	sub    %eax,%ebx
f012ca37:	89 d8                	mov    %ebx,%eax
f012ca39:	3d 00 03 00 00       	cmp    $0x300,%eax
f012ca3e:	74 17                	je     f012ca57 <test_krealloc_BF+0x7e3>
			panic("Wrong allocation: ");
f012ca40:	83 ec 04             	sub    $0x4,%esp
f012ca43:	68 7c a3 13 f0       	push   $0xf013a37c
f012ca48:	68 63 11 00 00       	push   $0x1163
f012ca4d:	68 32 9f 13 f0       	push   $0xf0139f32
f012ca52:	e8 59 37 fd ff       	call   f01001b0 <_panic>
		lastIndices[6] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012ca57:	c7 85 60 fe ff ff 7f 	movl   $0x5ff7f,-0x1a0(%ebp)
f012ca5e:	ff 05 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012ca61:	e8 d8 03 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f012ca66:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[7] = krealloc(NULL, 3 * Mega - kilo);
f012ca69:	83 ec 08             	sub    $0x8,%esp
f012ca6c:	68 00 fc 2f 00       	push   $0x2ffc00
f012ca71:	6a 00                	push   $0x0
f012ca73:	e8 14 ba fd ff       	call   f010848c <krealloc>
f012ca78:	83 c4 10             	add    $0x10,%esp
f012ca7b:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
		if ((uint32) ptr_allocations[7] < (KERNEL_HEAP_START + 11 * Mega))
f012ca81:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012ca87:	3d ff ff af f6       	cmp    $0xf6afffff,%eax
f012ca8c:	77 17                	ja     f012caa5 <test_krealloc_BF+0x831>
			panic("krealloc: Wrong start address for the allocated space... ");
f012ca8e:	83 ec 04             	sub    $0x4,%esp
f012ca91:	68 d8 b1 13 f0       	push   $0xf013b1d8
f012ca96:	68 6a 11 00 00       	push   $0x116a
f012ca9b:	68 32 9f 13 f0       	push   $0xf0139f32
f012caa0:	e8 0b 37 fd ff       	call   f01001b0 <_panic>
		if ((uint32) ptr_allocations[7] != ACTUAL_START + (11 * Mega))
f012caa5:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012caab:	89 c1                	mov    %eax,%ecx
f012caad:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f012cab4:	10 00 00 
f012cab7:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f012cabc:	0f b6 d0             	movzbl %al,%edx
f012cabf:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012cac5:	01 d0                	add    %edx,%eax
f012cac7:	48                   	dec    %eax
f012cac8:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f012cace:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012cad4:	ba 00 00 00 00       	mov    $0x0,%edx
f012cad9:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f012cadf:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012cae5:	29 d0                	sub    %edx,%eax
f012cae7:	89 c3                	mov    %eax,%ebx
f012cae9:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f012caf0:	10 00 00 
f012caf3:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f012caf8:	0f b6 c0             	movzbl %al,%eax
f012cafb:	c1 e0 04             	shl    $0x4,%eax
f012cafe:	89 c2                	mov    %eax,%edx
f012cb00:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012cb06:	01 d0                	add    %edx,%eax
f012cb08:	48                   	dec    %eax
f012cb09:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f012cb0f:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012cb15:	ba 00 00 00 00       	mov    $0x0,%edx
f012cb1a:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f012cb20:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012cb26:	29 d0                	sub    %edx,%eax
f012cb28:	01 d8                	add    %ebx,%eax
f012cb2a:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f012cb2f:	39 c1                	cmp    %eax,%ecx
f012cb31:	74 17                	je     f012cb4a <test_krealloc_BF+0x8d6>
			panic("krealloc: Wrong start address for allocated space");
f012cb33:	83 ec 04             	sub    $0x4,%esp
f012cb36:	68 14 b2 13 f0       	push   $0xf013b214
f012cb3b:	68 6c 11 00 00       	push   $0x116c
f012cb40:	68 32 9f 13 f0       	push   $0xf0139f32
f012cb45:	e8 66 36 fd ff       	call   f01001b0 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012cb4a:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012cb4d:	e8 ec 02 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f012cb52:	29 c3                	sub    %eax,%ebx
f012cb54:	89 d8                	mov    %ebx,%eax
f012cb56:	3d 00 03 00 00       	cmp    $0x300,%eax
f012cb5b:	74 17                	je     f012cb74 <test_krealloc_BF+0x900>
			panic("krealloc: Wrong allocation: ");
f012cb5d:	83 ec 04             	sub    $0x4,%esp
f012cb60:	68 46 b2 13 f0       	push   $0xf013b246
f012cb65:	68 6e 11 00 00       	push   $0x116e
f012cb6a:	68 32 9f 13 f0       	push   $0xf0139f32
f012cb6f:	e8 3c 36 fd ff       	call   f01001b0 <_panic>
		lastIndices[7] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012cb74:	c7 85 64 fe ff ff 7f 	movl   $0x5ff7f,-0x19c(%ebp)
f012cb7b:	ff 05 00 
	char *byteArr1;
	//[3] Test read write access
	{
		//cprintf("\nTest read write access");
		//Test access for the first 1 MB
		freeFrames = sys_calculate_free_frames();
f012cb7e:	e8 bb 02 fe ff       	call   f010ce3e <sys_calculate_free_frames>
f012cb83:	89 45 b8             	mov    %eax,-0x48(%ebp)

		//Write values
		//In 1st 1 MB
		lastIndexOfByte = (1 * Mega - kilo) / sizeof(char) - 1;
f012cb86:	c7 85 34 ff ff ff ff 	movl   $0xffbff,-0xcc(%ebp)
f012cb8d:	fb 0f 00 
		byteArr = (char *) ptr_allocations[0];
f012cb90:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f012cb96:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
		byteArr[0] = minByte;
f012cb9c:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012cba2:	8a 55 cf             	mov    -0x31(%ebp),%dl
f012cba5:	88 10                	mov    %dl,(%eax)
		byteArr[lastIndexOfByte] = maxByte;
f012cba7:	8b 95 34 ff ff ff    	mov    -0xcc(%ebp),%edx
f012cbad:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012cbb3:	01 c2                	add    %eax,%edx
f012cbb5:	8a 45 ce             	mov    -0x32(%ebp),%al
f012cbb8:	88 02                	mov    %al,(%edx)

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f012cbba:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012cbc0:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012cbc6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012cbcd:	eb 11                	jmp    f012cbe0 <test_krealloc_BF+0x96c>
			ptr[i] = 2;
f012cbcf:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012cbd2:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012cbd8:	01 d0                	add    %edx,%eax
f012cbda:	c6 00 02             	movb   $0x2,(%eax)
		byteArr[0] = minByte;
		byteArr[lastIndexOfByte] = maxByte;

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012cbdd:	ff 45 f4             	incl   -0xc(%ebp)
f012cbe0:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012cbe6:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012cbe9:	7d e4                	jge    f012cbcf <test_krealloc_BF+0x95b>
			ptr[i] = 2;
		}

		//In 3rd 1 MB
		intArr = (int*) ptr_allocations[2];
f012cbeb:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f012cbf1:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
		intArr[0] = 3;
f012cbf7:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012cbfd:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
		intArr[lastIndices[2]] = 3;
f012cc03:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012cc09:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012cc10:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012cc16:	01 d0                	add    %edx,%eax
f012cc18:	c7 00 03 00 00 00    	movl   $0x3,(%eax)

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
f012cc1e:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012cc24:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012cc2a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f012cc31:	eb 1b                	jmp    f012cc4e <test_krealloc_BF+0x9da>
			intArr[i] = 4;
f012cc33:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012cc36:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012cc3d:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012cc43:	01 d0                	add    %edx,%eax
f012cc45:	c7 00 04 00 00 00    	movl   $0x4,(%eax)
		intArr[0] = 3;
		intArr[lastIndices[2]] = 3;

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012cc4b:	ff 45 f0             	incl   -0x10(%ebp)
f012cc4e:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012cc54:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012cc57:	7d da                	jge    f012cc33 <test_krealloc_BF+0x9bf>
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f012cc59:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012cc5f:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012cc65:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f012cc6c:	eb 17                	jmp    f012cc85 <test_krealloc_BF+0xa11>
			shortArr[i] = 5;
f012cc6e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f012cc71:	01 c0                	add    %eax,%eax
f012cc73:	89 c2                	mov    %eax,%edx
f012cc75:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012cc7b:	01 d0                	add    %edx,%eax
f012cc7d:	66 c7 00 05 00       	movw   $0x5,(%eax)
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012cc82:	ff 45 ec             	incl   -0x14(%ebp)
f012cc85:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012cc8b:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f012cc8e:	7d de                	jge    f012cc6e <test_krealloc_BF+0x9fa>
			shortArr[i] = 5;
		}

		//In the 2nd 2 MB
		shortArr = (short*) ptr_allocations[5];
f012cc90:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012cc96:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
		shortArr[0] = 6;
f012cc9c:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012cca2:	66 c7 00 06 00       	movw   $0x6,(%eax)
		shortArr[lastIndices[5]] = 6;
f012cca7:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012ccad:	01 c0                	add    %eax,%eax
f012ccaf:	89 c2                	mov    %eax,%edx
f012ccb1:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012ccb7:	01 d0                	add    %edx,%eax
f012ccb9:	66 c7 00 06 00       	movw   $0x6,(%eax)

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
f012ccbe:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012ccc4:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
		for (int i = 0; i <= lastIndices[6]; i++) {
f012ccca:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f012ccd1:	eb 49                	jmp    f012cd1c <test_krealloc_BF+0xaa8>
			structArr[i].a = 7;
f012ccd3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012ccd6:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012ccdd:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012cce3:	01 d0                	add    %edx,%eax
f012cce5:	c6 00 07             	movb   $0x7,(%eax)
			structArr[i].b = 7;
f012cce8:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012cceb:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012ccf2:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012ccf8:	01 d0                	add    %edx,%eax
f012ccfa:	66 c7 40 02 07 00    	movw   $0x7,0x2(%eax)
			structArr[i].c = 7;
f012cd00:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012cd03:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012cd0a:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012cd10:	01 d0                	add    %edx,%eax
f012cd12:	c7 40 04 07 00 00 00 	movl   $0x7,0x4(%eax)
		shortArr[0] = 6;
		shortArr[lastIndices[5]] = 6;

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
		for (int i = 0; i <= lastIndices[6]; i++) {
f012cd19:	ff 45 e8             	incl   -0x18(%ebp)
f012cd1c:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012cd22:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f012cd25:	7d ac                	jge    f012ccd3 <test_krealloc_BF+0xa5f>
			structArr[i].b = 7;
			structArr[i].c = 7;
		}

		//In the last 3 MB
		structArr = (struct MyStruct*) ptr_allocations[7];
f012cd27:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012cd2d:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
		structArr[0].a = 8;
f012cd33:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012cd39:	c6 00 08             	movb   $0x8,(%eax)
		structArr[0].b = 8;
f012cd3c:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012cd42:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[0].c = 8;
f012cd48:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012cd4e:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)
		structArr[lastIndices[7]].a = 8;
f012cd55:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012cd5b:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012cd62:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012cd68:	01 d0                	add    %edx,%eax
f012cd6a:	c6 00 08             	movb   $0x8,(%eax)
		structArr[lastIndices[7]].b = 8;
f012cd6d:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012cd73:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012cd7a:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012cd80:	01 d0                	add    %edx,%eax
f012cd82:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[lastIndices[7]].c = 8;
f012cd88:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012cd8e:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012cd95:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012cd9b:	01 d0                	add    %edx,%eax
f012cd9d:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)

		//Read values: check that the values are successfully written
		if (byteArr[0] != minByte || byteArr[lastIndices[0]] != maxByte)
f012cda4:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012cdaa:	8a 00                	mov    (%eax),%al
f012cdac:	3a 45 cf             	cmp    -0x31(%ebp),%al
f012cdaf:	75 17                	jne    f012cdc8 <test_krealloc_BF+0xb54>
f012cdb1:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012cdb7:	89 c2                	mov    %eax,%edx
f012cdb9:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012cdbf:	01 d0                	add    %edx,%eax
f012cdc1:	8a 00                	mov    (%eax),%al
f012cdc3:	3a 45 ce             	cmp    -0x32(%ebp),%al
f012cdc6:	74 17                	je     f012cddf <test_krealloc_BF+0xb6b>
			panic(
f012cdc8:	83 ec 04             	sub    $0x4,%esp
f012cdcb:	68 64 b2 13 f0       	push   $0xf013b264
f012cdd0:	68 b1 11 00 00       	push   $0x11b1
f012cdd5:	68 32 9f 13 f0       	push   $0xf0139f32
f012cdda:	e8 d1 33 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		ptr = (char*) ptr_allocations[1];
f012cddf:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012cde5:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
		if (ptr[0] != 2 || ptr[lastIndices[1]] != 2)
f012cdeb:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012cdf1:	8a 00                	mov    (%eax),%al
f012cdf3:	3c 02                	cmp    $0x2,%al
f012cdf5:	75 16                	jne    f012ce0d <test_krealloc_BF+0xb99>
f012cdf7:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012cdfd:	89 c2                	mov    %eax,%edx
f012cdff:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012ce05:	01 d0                	add    %edx,%eax
f012ce07:	8a 00                	mov    (%eax),%al
f012ce09:	3c 02                	cmp    $0x2,%al
f012ce0b:	74 20                	je     f012ce2d <test_krealloc_BF+0xbb9>
			panic(
f012ce0d:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012ce13:	8a 00                	mov    (%eax),%al
f012ce15:	0f be c0             	movsbl %al,%eax
f012ce18:	50                   	push   %eax
f012ce19:	68 a4 b2 13 f0       	push   $0xf013b2a4
f012ce1e:	68 b7 11 00 00       	push   $0x11b7
f012ce23:	68 32 9f 13 f0       	push   $0xf0139f32
f012ce28:	e8 83 33 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!, char = %c",
					ptr[0]);

		intArr = (int*) ptr_allocations[2];
f012ce2d:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f012ce33:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
		if (intArr[0] != 3 || intArr[lastIndices[2]] != 3)
f012ce39:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012ce3f:	8b 00                	mov    (%eax),%eax
f012ce41:	83 f8 03             	cmp    $0x3,%eax
f012ce44:	75 1c                	jne    f012ce62 <test_krealloc_BF+0xbee>
f012ce46:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012ce4c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012ce53:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012ce59:	01 d0                	add    %edx,%eax
f012ce5b:	8b 00                	mov    (%eax),%eax
f012ce5d:	83 f8 03             	cmp    $0x3,%eax
f012ce60:	74 17                	je     f012ce79 <test_krealloc_BF+0xc05>
			panic("Wrong allocation stored values are wrongly changed!");
f012ce62:	83 ec 04             	sub    $0x4,%esp
f012ce65:	68 f0 b2 13 f0       	push   $0xf013b2f0
f012ce6a:	68 bb 11 00 00       	push   $0x11bb
f012ce6f:	68 32 9f 13 f0       	push   $0xf0139f32
f012ce74:	e8 37 33 fd ff       	call   f01001b0 <_panic>

		intArr = (int*) ptr_allocations[3];
f012ce79:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012ce7f:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
		if (intArr[0] != 4 || intArr[lastIndices[3]] != 4)
f012ce85:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012ce8b:	8b 00                	mov    (%eax),%eax
f012ce8d:	83 f8 04             	cmp    $0x4,%eax
f012ce90:	75 1c                	jne    f012ceae <test_krealloc_BF+0xc3a>
f012ce92:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012ce98:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012ce9f:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012cea5:	01 d0                	add    %edx,%eax
f012cea7:	8b 00                	mov    (%eax),%eax
f012cea9:	83 f8 04             	cmp    $0x4,%eax
f012ceac:	74 17                	je     f012cec5 <test_krealloc_BF+0xc51>
			panic(
f012ceae:	83 ec 04             	sub    $0x4,%esp
f012ceb1:	68 64 b2 13 f0       	push   $0xf013b264
f012ceb6:	68 c0 11 00 00       	push   $0x11c0
f012cebb:	68 32 9f 13 f0       	push   $0xf0139f32
f012cec0:	e8 eb 32 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[4];
f012cec5:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012cecb:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
		if (shortArr[0] != 5 || shortArr[lastIndices[4]] != 5)
f012ced1:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012ced7:	66 8b 00             	mov    (%eax),%ax
f012ceda:	66 83 f8 05          	cmp    $0x5,%ax
f012cede:	75 1b                	jne    f012cefb <test_krealloc_BF+0xc87>
f012cee0:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012cee6:	01 c0                	add    %eax,%eax
f012cee8:	89 c2                	mov    %eax,%edx
f012ceea:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012cef0:	01 d0                	add    %edx,%eax
f012cef2:	66 8b 00             	mov    (%eax),%ax
f012cef5:	66 83 f8 05          	cmp    $0x5,%ax
f012cef9:	74 17                	je     f012cf12 <test_krealloc_BF+0xc9e>
			panic(
f012cefb:	83 ec 04             	sub    $0x4,%esp
f012cefe:	68 64 b2 13 f0       	push   $0xf013b264
f012cf03:	68 c5 11 00 00       	push   $0x11c5
f012cf08:	68 32 9f 13 f0       	push   $0xf0139f32
f012cf0d:	e8 9e 32 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[5];
f012cf12:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012cf18:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
		if (shortArr[0] != 6 || shortArr[lastIndices[5]] != 6)
f012cf1e:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012cf24:	66 8b 00             	mov    (%eax),%ax
f012cf27:	66 83 f8 06          	cmp    $0x6,%ax
f012cf2b:	75 1b                	jne    f012cf48 <test_krealloc_BF+0xcd4>
f012cf2d:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012cf33:	01 c0                	add    %eax,%eax
f012cf35:	89 c2                	mov    %eax,%edx
f012cf37:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012cf3d:	01 d0                	add    %edx,%eax
f012cf3f:	66 8b 00             	mov    (%eax),%ax
f012cf42:	66 83 f8 06          	cmp    $0x6,%ax
f012cf46:	74 17                	je     f012cf5f <test_krealloc_BF+0xceb>
			panic(
f012cf48:	83 ec 04             	sub    $0x4,%esp
f012cf4b:	68 64 b2 13 f0       	push   $0xf013b264
f012cf50:	68 ca 11 00 00       	push   $0x11ca
f012cf55:	68 32 9f 13 f0       	push   $0xf0139f32
f012cf5a:	e8 51 32 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[6];
f012cf5f:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012cf65:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
		if (structArr[0].a != 7 || structArr[lastIndices[6]].a != 7)
f012cf6b:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012cf71:	8a 00                	mov    (%eax),%al
f012cf73:	3c 07                	cmp    $0x7,%al
f012cf75:	75 1b                	jne    f012cf92 <test_krealloc_BF+0xd1e>
f012cf77:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012cf7d:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012cf84:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012cf8a:	01 d0                	add    %edx,%eax
f012cf8c:	8a 00                	mov    (%eax),%al
f012cf8e:	3c 07                	cmp    $0x7,%al
f012cf90:	74 17                	je     f012cfa9 <test_krealloc_BF+0xd35>
			panic(
f012cf92:	83 ec 04             	sub    $0x4,%esp
f012cf95:	68 64 b2 13 f0       	push   $0xf013b264
f012cf9a:	68 cf 11 00 00       	push   $0x11cf
f012cf9f:	68 32 9f 13 f0       	push   $0xf0139f32
f012cfa4:	e8 07 32 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 7 || structArr[lastIndices[6]].b != 7)
f012cfa9:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012cfaf:	66 8b 40 02          	mov    0x2(%eax),%ax
f012cfb3:	66 83 f8 07          	cmp    $0x7,%ax
f012cfb7:	75 1f                	jne    f012cfd8 <test_krealloc_BF+0xd64>
f012cfb9:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012cfbf:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012cfc6:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012cfcc:	01 d0                	add    %edx,%eax
f012cfce:	66 8b 40 02          	mov    0x2(%eax),%ax
f012cfd2:	66 83 f8 07          	cmp    $0x7,%ax
f012cfd6:	74 17                	je     f012cfef <test_krealloc_BF+0xd7b>
			panic(
f012cfd8:	83 ec 04             	sub    $0x4,%esp
f012cfdb:	68 64 b2 13 f0       	push   $0xf013b264
f012cfe0:	68 d2 11 00 00       	push   $0x11d2
f012cfe5:	68 32 9f 13 f0       	push   $0xf0139f32
f012cfea:	e8 c1 31 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 7 || structArr[lastIndices[6]].c != 7)
f012cfef:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012cff5:	8b 40 04             	mov    0x4(%eax),%eax
f012cff8:	83 f8 07             	cmp    $0x7,%eax
f012cffb:	75 1d                	jne    f012d01a <test_krealloc_BF+0xda6>
f012cffd:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012d003:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012d00a:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012d010:	01 d0                	add    %edx,%eax
f012d012:	8b 40 04             	mov    0x4(%eax),%eax
f012d015:	83 f8 07             	cmp    $0x7,%eax
f012d018:	74 17                	je     f012d031 <test_krealloc_BF+0xdbd>
			panic(
f012d01a:	83 ec 04             	sub    $0x4,%esp
f012d01d:	68 64 b2 13 f0       	push   $0xf013b264
f012d022:	68 d5 11 00 00       	push   $0x11d5
f012d027:	68 32 9f 13 f0       	push   $0xf0139f32
f012d02c:	e8 7f 31 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[7];
f012d031:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012d037:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
		if (structArr[0].a != 8 || structArr[lastIndices[7]].a != 8)
f012d03d:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012d043:	8a 00                	mov    (%eax),%al
f012d045:	3c 08                	cmp    $0x8,%al
f012d047:	75 1b                	jne    f012d064 <test_krealloc_BF+0xdf0>
f012d049:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012d04f:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012d056:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012d05c:	01 d0                	add    %edx,%eax
f012d05e:	8a 00                	mov    (%eax),%al
f012d060:	3c 08                	cmp    $0x8,%al
f012d062:	74 17                	je     f012d07b <test_krealloc_BF+0xe07>
			panic(
f012d064:	83 ec 04             	sub    $0x4,%esp
f012d067:	68 64 b2 13 f0       	push   $0xf013b264
f012d06c:	68 da 11 00 00       	push   $0x11da
f012d071:	68 32 9f 13 f0       	push   $0xf0139f32
f012d076:	e8 35 31 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 8 || structArr[lastIndices[7]].b != 8)
f012d07b:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012d081:	66 8b 40 02          	mov    0x2(%eax),%ax
f012d085:	66 83 f8 08          	cmp    $0x8,%ax
f012d089:	75 1f                	jne    f012d0aa <test_krealloc_BF+0xe36>
f012d08b:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012d091:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012d098:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012d09e:	01 d0                	add    %edx,%eax
f012d0a0:	66 8b 40 02          	mov    0x2(%eax),%ax
f012d0a4:	66 83 f8 08          	cmp    $0x8,%ax
f012d0a8:	74 17                	je     f012d0c1 <test_krealloc_BF+0xe4d>
			panic(
f012d0aa:	83 ec 04             	sub    $0x4,%esp
f012d0ad:	68 64 b2 13 f0       	push   $0xf013b264
f012d0b2:	68 dd 11 00 00       	push   $0x11dd
f012d0b7:	68 32 9f 13 f0       	push   $0xf0139f32
f012d0bc:	e8 ef 30 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 8 || structArr[lastIndices[7]].c != 8)
f012d0c1:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012d0c7:	8b 40 04             	mov    0x4(%eax),%eax
f012d0ca:	83 f8 08             	cmp    $0x8,%eax
f012d0cd:	75 1d                	jne    f012d0ec <test_krealloc_BF+0xe78>
f012d0cf:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012d0d5:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012d0dc:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012d0e2:	01 d0                	add    %edx,%eax
f012d0e4:	8b 40 04             	mov    0x4(%eax),%eax
f012d0e7:	83 f8 08             	cmp    $0x8,%eax
f012d0ea:	74 17                	je     f012d103 <test_krealloc_BF+0xe8f>
			panic(
f012d0ec:	83 ec 04             	sub    $0x4,%esp
f012d0ef:	68 64 b2 13 f0       	push   $0xf013b264
f012d0f4:	68 e0 11 00 00       	push   $0x11e0
f012d0f9:	68 32 9f 13 f0       	push   $0xf0139f32
f012d0fe:	e8 ad 30 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		if ((freeFrames - sys_calculate_free_frames()) != 0)
f012d103:	e8 36 fd fd ff       	call   f010ce3e <sys_calculate_free_frames>
f012d108:	89 c2                	mov    %eax,%edx
f012d10a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d10d:	39 c2                	cmp    %eax,%edx
f012d10f:	74 17                	je     f012d128 <test_krealloc_BF+0xeb4>
			panic(
f012d111:	83 ec 04             	sub    $0x4,%esp
f012d114:	68 24 b3 13 f0       	push   $0xf013b324
f012d119:	68 e4 11 00 00       	push   $0x11e4
f012d11e:	68 32 9f 13 f0       	push   $0xf0139f32
f012d123:	e8 88 30 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation pages are not loaded successfully into memory");

	}
	cprintf("\nkrealloc: current evaluation = 10%");
f012d128:	83 ec 0c             	sub    $0xc,%esp
f012d12b:	68 70 b3 13 f0       	push   $0xf013b370
f012d130:	e8 fc 3c fd ff       	call   f0100e31 <cprintf>
f012d135:	83 c4 10             	add    $0x10,%esp

	//[3] Test krealloc by passing size = 0
	{
		//kfree 1st 1 MB
		freeFrames = sys_calculate_free_frames();
f012d138:	e8 01 fd fd ff       	call   f010ce3e <sys_calculate_free_frames>
f012d13d:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012d140:	e8 3f 75 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012d145:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
		krealloc(ptr_allocations[0], 0);
f012d14b:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f012d151:	83 ec 08             	sub    $0x8,%esp
f012d154:	6a 00                	push   $0x0
f012d156:	50                   	push   %eax
f012d157:	e8 30 b3 fd ff       	call   f010848c <krealloc>
f012d15c:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012d15f:	e8 20 75 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012d164:	3b 85 1c ff ff ff    	cmp    -0xe4(%ebp),%eax
f012d16a:	74 17                	je     f012d183 <test_krealloc_BF+0xf0f>
			panic(
f012d16c:	83 ec 04             	sub    $0x4,%esp
f012d16f:	68 94 b3 13 f0       	push   $0xf013b394
f012d174:	68 f1 11 00 00       	push   $0x11f1
f012d179:	68 32 9f 13 f0       	push   $0xf0139f32
f012d17e:	e8 2d 30 fd ff       	call   f01001b0 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012d183:	e8 b6 fc fd ff       	call   f010ce3e <sys_calculate_free_frames>
f012d188:	89 c2                	mov    %eax,%edx
f012d18a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d18d:	29 c2                	sub    %eax,%edx
f012d18f:	89 d0                	mov    %edx,%eax
f012d191:	3d 00 01 00 00       	cmp    $0x100,%eax
f012d196:	74 17                	je     f012d1af <test_krealloc_BF+0xf3b>
			panic("krealloc: pages in memory are not freed correctly");
f012d198:	83 ec 04             	sub    $0x4,%esp
f012d19b:	68 08 b4 13 f0       	push   $0xf013b408
f012d1a0:	68 f3 11 00 00       	push   $0x11f3
f012d1a5:	68 32 9f 13 f0       	push   $0xf0139f32
f012d1aa:	e8 01 30 fd ff       	call   f01001b0 <_panic>

		//kfree 3rd 1 MB
		freeFrames = sys_calculate_free_frames();
f012d1af:	e8 8a fc fd ff       	call   f010ce3e <sys_calculate_free_frames>
f012d1b4:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012d1b7:	e8 c8 74 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012d1bc:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)

		krealloc(ptr_allocations[2], 0);
f012d1c2:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f012d1c8:	83 ec 08             	sub    $0x8,%esp
f012d1cb:	6a 00                	push   $0x0
f012d1cd:	50                   	push   %eax
f012d1ce:	e8 b9 b2 fd ff       	call   f010848c <krealloc>
f012d1d3:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012d1d6:	e8 a9 74 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012d1db:	3b 85 1c ff ff ff    	cmp    -0xe4(%ebp),%eax
f012d1e1:	74 17                	je     f012d1fa <test_krealloc_BF+0xf86>
			panic(
f012d1e3:	83 ec 04             	sub    $0x4,%esp
f012d1e6:	68 94 b3 13 f0       	push   $0xf013b394
f012d1eb:	68 fc 11 00 00       	push   $0x11fc
f012d1f0:	68 32 9f 13 f0       	push   $0xf0139f32
f012d1f5:	e8 b6 2f fd ff       	call   f01001b0 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012d1fa:	e8 3f fc fd ff       	call   f010ce3e <sys_calculate_free_frames>
f012d1ff:	89 c2                	mov    %eax,%edx
f012d201:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d204:	29 c2                	sub    %eax,%edx
f012d206:	89 d0                	mov    %edx,%eax
f012d208:	3d 00 01 00 00       	cmp    $0x100,%eax
f012d20d:	74 17                	je     f012d226 <test_krealloc_BF+0xfb2>
			panic("krealloc: pages in memory are not freed correctly");
f012d20f:	83 ec 04             	sub    $0x4,%esp
f012d212:	68 08 b4 13 f0       	push   $0xf013b408
f012d217:	68 fe 11 00 00       	push   $0x11fe
f012d21c:	68 32 9f 13 f0       	push   $0xf0139f32
f012d221:	e8 8a 2f fd ff       	call   f01001b0 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames();
f012d226:	e8 13 fc fd ff       	call   f010ce3e <sys_calculate_free_frames>
f012d22b:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012d22e:	e8 51 74 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012d233:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
		krealloc(ptr_allocations[5], 0);
f012d239:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012d23f:	83 ec 08             	sub    $0x8,%esp
f012d242:	6a 00                	push   $0x0
f012d244:	50                   	push   %eax
f012d245:	e8 42 b2 fd ff       	call   f010848c <krealloc>
f012d24a:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012d24d:	e8 32 74 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012d252:	3b 85 1c ff ff ff    	cmp    -0xe4(%ebp),%eax
f012d258:	74 17                	je     f012d271 <test_krealloc_BF+0xffd>
			panic(
f012d25a:	83 ec 04             	sub    $0x4,%esp
f012d25d:	68 4c 9f 13 f0       	push   $0xf0139f4c
f012d262:	68 06 12 00 00       	push   $0x1206
f012d267:	68 32 9f 13 f0       	push   $0xf0139f32
f012d26c:	e8 3f 2f fd ff       	call   f01001b0 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 2 * Mega / PAGE_SIZE)
f012d271:	e8 c8 fb fd ff       	call   f010ce3e <sys_calculate_free_frames>
f012d276:	89 c2                	mov    %eax,%edx
f012d278:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d27b:	29 c2                	sub    %eax,%edx
f012d27d:	89 d0                	mov    %edx,%eax
f012d27f:	3d 00 02 00 00       	cmp    $0x200,%eax
f012d284:	74 17                	je     f012d29d <test_krealloc_BF+0x1029>
			panic("krealloc: pages in memory are not freed correctly");
f012d286:	83 ec 04             	sub    $0x4,%esp
f012d289:	68 08 b4 13 f0       	push   $0xf013b408
f012d28e:	68 08 12 00 00       	push   $0x1208
f012d293:	68 32 9f 13 f0       	push   $0xf0139f32
f012d298:	e8 13 2f fd ff       	call   f01001b0 <_panic>

		//kfree last 3 MB
		freeFrames = sys_calculate_free_frames();
f012d29d:	e8 9c fb fd ff       	call   f010ce3e <sys_calculate_free_frames>
f012d2a2:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012d2a5:	e8 da 73 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012d2aa:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
		krealloc(ptr_allocations[7], 0);
f012d2b0:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012d2b6:	83 ec 08             	sub    $0x8,%esp
f012d2b9:	6a 00                	push   $0x0
f012d2bb:	50                   	push   %eax
f012d2bc:	e8 cb b1 fd ff       	call   f010848c <krealloc>
f012d2c1:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012d2c4:	e8 bb 73 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012d2c9:	3b 85 1c ff ff ff    	cmp    -0xe4(%ebp),%eax
f012d2cf:	74 17                	je     f012d2e8 <test_krealloc_BF+0x1074>
			panic(
f012d2d1:	83 ec 04             	sub    $0x4,%esp
f012d2d4:	68 94 b3 13 f0       	push   $0xf013b394
f012d2d9:	68 10 12 00 00       	push   $0x1210
f012d2de:	68 32 9f 13 f0       	push   $0xf0139f32
f012d2e3:	e8 c8 2e fd ff       	call   f01001b0 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 3 * Mega / PAGE_SIZE)
f012d2e8:	e8 51 fb fd ff       	call   f010ce3e <sys_calculate_free_frames>
f012d2ed:	89 c2                	mov    %eax,%edx
f012d2ef:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d2f2:	29 c2                	sub    %eax,%edx
f012d2f4:	89 d0                	mov    %edx,%eax
f012d2f6:	3d 00 03 00 00       	cmp    $0x300,%eax
f012d2fb:	74 17                	je     f012d314 <test_krealloc_BF+0x10a0>
			panic(
f012d2fd:	83 ec 04             	sub    $0x4,%esp
f012d300:	68 3c b4 13 f0       	push   $0xf013b43c
f012d305:	68 13 12 00 00       	push   $0x1213
f012d30a:	68 32 9f 13 f0       	push   $0xf0139f32
f012d30f:	e8 9c 2e fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012d314:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
f012d31b:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f012d322:	eb 48                	jmp    f012d36c <test_krealloc_BF+0x10f8>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f012d324:	8b 55 e0             	mov    -0x20(%ebp),%edx
f012d327:	a1 30 ce 2b f0       	mov    0xf02bce30,%eax
f012d32c:	83 ec 04             	sub    $0x4,%esp
f012d32f:	8d 8d f4 fd ff ff    	lea    -0x20c(%ebp),%ecx
f012d335:	51                   	push   %ecx
f012d336:	52                   	push   %edx
f012d337:	50                   	push   %eax
f012d338:	e8 aa a1 fd ff       	call   f01074e7 <get_page_table>
f012d33d:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f012d340:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012d346:	85 c0                	test   %eax,%eax
f012d348:	75 17                	jne    f012d361 <test_krealloc_BF+0x10ed>
					panic(
f012d34a:	83 ec 04             	sub    $0x4,%esp
f012d34d:	68 34 a8 13 f0       	push   $0xf013a834
f012d352:	68 1f 12 00 00       	push   $0x121f
f012d357:	68 32 9f 13 f0       	push   $0xf0139f32
f012d35c:	e8 4f 2e fd ff       	call   f01001b0 <_panic>
			panic(
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012d361:	81 45 e0 00 00 40 00 	addl   $0x400000,-0x20(%ebp)
f012d368:	83 55 e4 00          	adcl   $0x0,-0x1c(%ebp)
f012d36c:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012d370:	78 b2                	js     f012d324 <test_krealloc_BF+0x10b0>
f012d372:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012d376:	7f 09                	jg     f012d381 <test_krealloc_BF+0x110d>
f012d378:	81 7d e0 ff ef ff ff 	cmpl   $0xffffefff,-0x20(%ebp)
f012d37f:	76 a3                	jbe    f012d324 <test_krealloc_BF+0x10b0>
							"Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
				}
			}
		}
	}
	cprintf("\b\b\b20%");
f012d381:	83 ec 0c             	sub    $0xc,%esp
f012d384:	68 7b b4 13 f0       	push   $0xf013b47b
f012d389:	e8 a3 3a fd ff       	call   f0100e31 <cprintf>
f012d38e:	83 c4 10             	add    $0x10,%esp
	//Check memory access after kfree by checking sum
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
f012d391:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012d397:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012d39d:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012d3a4:	eb 21                	jmp    f012d3c7 <test_krealloc_BF+0x1153>
			sums[0] += ptr[i];
f012d3a6:	8b 95 f8 fd ff ff    	mov    -0x208(%ebp),%edx
f012d3ac:	8b 4d dc             	mov    -0x24(%ebp),%ecx
f012d3af:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012d3b5:	01 c8                	add    %ecx,%eax
f012d3b7:	8a 00                	mov    (%eax),%al
f012d3b9:	0f be c0             	movsbl %al,%eax
f012d3bc:	01 d0                	add    %edx,%eax
f012d3be:	89 85 f8 fd ff ff    	mov    %eax,-0x208(%ebp)
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012d3c4:	ff 45 dc             	incl   -0x24(%ebp)
f012d3c7:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012d3cd:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012d3d0:	7d d4                	jge    f012d3a6 <test_krealloc_BF+0x1132>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012d3d2:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f012d3d8:	8b 95 4c fe ff ff    	mov    -0x1b4(%ebp),%edx
f012d3de:	42                   	inc    %edx
f012d3df:	01 d2                	add    %edx,%edx
f012d3e1:	39 d0                	cmp    %edx,%eax
f012d3e3:	74 17                	je     f012d3fc <test_krealloc_BF+0x1188>
			panic("krealloc: invalid read after freeing some allocations");
f012d3e5:	83 ec 04             	sub    $0x4,%esp
f012d3e8:	68 84 b4 13 f0       	push   $0xf013b484
f012d3ed:	68 31 12 00 00       	push   $0x1231
f012d3f2:	68 32 9f 13 f0       	push   $0xf0139f32
f012d3f7:	e8 b4 2d fd ff       	call   f01001b0 <_panic>

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];
f012d3fc:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012d402:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)

		for (i = 0; i <= lastIndices[3]; ++i) {
f012d408:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012d40f:	eb 25                	jmp    f012d436 <test_krealloc_BF+0x11c2>
			sums[1] += intArr[i];
f012d411:	8b 95 fc fd ff ff    	mov    -0x204(%ebp),%edx
f012d417:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012d41a:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f012d421:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012d427:	01 c8                	add    %ecx,%eax
f012d429:	8b 00                	mov    (%eax),%eax
f012d42b:	01 d0                	add    %edx,%eax
f012d42d:	89 85 fc fd ff ff    	mov    %eax,-0x204(%ebp)

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];

		for (i = 0; i <= lastIndices[3]; ++i) {
f012d433:	ff 45 dc             	incl   -0x24(%ebp)
f012d436:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012d43c:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012d43f:	7d d0                	jge    f012d411 <test_krealloc_BF+0x119d>
			sums[1] += intArr[i];
		}
		if (sums[1] != (lastIndices[3] + 1) * 4)
f012d441:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f012d447:	8b 95 54 fe ff ff    	mov    -0x1ac(%ebp),%edx
f012d44d:	42                   	inc    %edx
f012d44e:	c1 e2 02             	shl    $0x2,%edx
f012d451:	39 d0                	cmp    %edx,%eax
f012d453:	74 17                	je     f012d46c <test_krealloc_BF+0x11f8>
			panic("krealloc: invalid read after freeing some allocations");
f012d455:	83 ec 04             	sub    $0x4,%esp
f012d458:	68 84 b4 13 f0       	push   $0xf013b484
f012d45d:	68 3b 12 00 00       	push   $0x123b
f012d462:	68 32 9f 13 f0       	push   $0xf0139f32
f012d467:	e8 44 2d fd ff       	call   f01001b0 <_panic>

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];
f012d46c:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012d472:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)

		for (i = 0; i <= lastIndices[4]; ++i) {
f012d478:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012d47f:	eb 24                	jmp    f012d4a5 <test_krealloc_BF+0x1231>
			sums[2] += shortArr[i];
f012d481:	8b 95 00 fe ff ff    	mov    -0x200(%ebp),%edx
f012d487:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012d48a:	01 c0                	add    %eax,%eax
f012d48c:	89 c1                	mov    %eax,%ecx
f012d48e:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012d494:	01 c8                	add    %ecx,%eax
f012d496:	66 8b 00             	mov    (%eax),%ax
f012d499:	98                   	cwtl   
f012d49a:	01 d0                	add    %edx,%eax
f012d49c:	89 85 00 fe ff ff    	mov    %eax,-0x200(%ebp)

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];

		for (i = 0; i <= lastIndices[4]; ++i) {
f012d4a2:	ff 45 dc             	incl   -0x24(%ebp)
f012d4a5:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012d4ab:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012d4ae:	7d d1                	jge    f012d481 <test_krealloc_BF+0x120d>
			sums[2] += shortArr[i];
		}
		if (sums[2] != (lastIndices[4] + 1) * 5)
f012d4b0:	8b 95 00 fe ff ff    	mov    -0x200(%ebp),%edx
f012d4b6:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012d4bc:	8d 48 01             	lea    0x1(%eax),%ecx
f012d4bf:	89 c8                	mov    %ecx,%eax
f012d4c1:	c1 e0 02             	shl    $0x2,%eax
f012d4c4:	01 c8                	add    %ecx,%eax
f012d4c6:	39 c2                	cmp    %eax,%edx
f012d4c8:	74 17                	je     f012d4e1 <test_krealloc_BF+0x126d>
			panic("krealloc: invalid read after freeing some allocations");
f012d4ca:	83 ec 04             	sub    $0x4,%esp
f012d4cd:	68 84 b4 13 f0       	push   $0xf013b484
f012d4d2:	68 45 12 00 00       	push   $0x1245
f012d4d7:	68 32 9f 13 f0       	push   $0xf0139f32
f012d4dc:	e8 cf 2c fd ff       	call   f01001b0 <_panic>

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];
f012d4e1:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012d4e7:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)

		for (i = 0; i <= lastIndices[6]; ++i) {
f012d4ed:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012d4f4:	eb 70                	jmp    f012d566 <test_krealloc_BF+0x12f2>
			sums[3] += structArr[i].a;
f012d4f6:	8b 95 04 fe ff ff    	mov    -0x1fc(%ebp),%edx
f012d4fc:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012d4ff:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012d506:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012d50c:	01 c8                	add    %ecx,%eax
f012d50e:	8a 00                	mov    (%eax),%al
f012d510:	0f be c0             	movsbl %al,%eax
f012d513:	01 d0                	add    %edx,%eax
f012d515:	89 85 04 fe ff ff    	mov    %eax,-0x1fc(%ebp)
			sums[4] += structArr[i].b;
f012d51b:	8b 95 08 fe ff ff    	mov    -0x1f8(%ebp),%edx
f012d521:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012d524:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012d52b:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012d531:	01 c8                	add    %ecx,%eax
f012d533:	66 8b 40 02          	mov    0x2(%eax),%ax
f012d537:	98                   	cwtl   
f012d538:	01 d0                	add    %edx,%eax
f012d53a:	89 85 08 fe ff ff    	mov    %eax,-0x1f8(%ebp)
			sums[5] += structArr[i].c;
f012d540:	8b 95 0c fe ff ff    	mov    -0x1f4(%ebp),%edx
f012d546:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012d549:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012d550:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012d556:	01 c8                	add    %ecx,%eax
f012d558:	8b 40 04             	mov    0x4(%eax),%eax
f012d55b:	01 d0                	add    %edx,%eax
f012d55d:	89 85 0c fe ff ff    	mov    %eax,-0x1f4(%ebp)

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];

		for (i = 0; i <= lastIndices[6]; ++i) {
f012d563:	ff 45 dc             	incl   -0x24(%ebp)
f012d566:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012d56c:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012d56f:	7d 85                	jge    f012d4f6 <test_krealloc_BF+0x1282>
			sums[3] += structArr[i].a;
			sums[4] += structArr[i].b;
			sums[5] += structArr[i].c;
		}
		if (sums[3] != (lastIndices[6] + 1) * 7
f012d571:	8b 8d 04 fe ff ff    	mov    -0x1fc(%ebp),%ecx
f012d577:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012d57d:	8d 50 01             	lea    0x1(%eax),%edx
f012d580:	89 d0                	mov    %edx,%eax
f012d582:	01 c0                	add    %eax,%eax
f012d584:	01 d0                	add    %edx,%eax
f012d586:	01 c0                	add    %eax,%eax
f012d588:	01 d0                	add    %edx,%eax
f012d58a:	39 c1                	cmp    %eax,%ecx
f012d58c:	75 3a                	jne    f012d5c8 <test_krealloc_BF+0x1354>
				|| sums[4] != (lastIndices[6] + 1) * 7
f012d58e:	8b 8d 08 fe ff ff    	mov    -0x1f8(%ebp),%ecx
f012d594:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012d59a:	8d 50 01             	lea    0x1(%eax),%edx
f012d59d:	89 d0                	mov    %edx,%eax
f012d59f:	01 c0                	add    %eax,%eax
f012d5a1:	01 d0                	add    %edx,%eax
f012d5a3:	01 c0                	add    %eax,%eax
f012d5a5:	01 d0                	add    %edx,%eax
f012d5a7:	39 c1                	cmp    %eax,%ecx
f012d5a9:	75 1d                	jne    f012d5c8 <test_krealloc_BF+0x1354>
				|| sums[5] != (lastIndices[6] + 1) * 7)
f012d5ab:	8b 8d 0c fe ff ff    	mov    -0x1f4(%ebp),%ecx
f012d5b1:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012d5b7:	8d 50 01             	lea    0x1(%eax),%edx
f012d5ba:	89 d0                	mov    %edx,%eax
f012d5bc:	01 c0                	add    %eax,%eax
f012d5be:	01 d0                	add    %edx,%eax
f012d5c0:	01 c0                	add    %eax,%eax
f012d5c2:	01 d0                	add    %edx,%eax
f012d5c4:	39 c1                	cmp    %eax,%ecx
f012d5c6:	74 17                	je     f012d5df <test_krealloc_BF+0x136b>
			panic("krealloc: invalid read after freeing some allocations");
f012d5c8:	83 ec 04             	sub    $0x4,%esp
f012d5cb:	68 84 b4 13 f0       	push   $0xf013b484
f012d5d0:	68 53 12 00 00       	push   $0x1253
f012d5d5:	68 32 9f 13 f0       	push   $0xf0139f32
f012d5da:	e8 d1 2b fd ff       	call   f01001b0 <_panic>
	}

	//[4] Test krealloc reallocation with valid and invalid sizes
	{
		int freeDiskFrames;
		void* newAddress = NULL;
f012d5df:	c7 85 18 ff ff ff 00 	movl   $0x0,-0xe8(%ebp)
f012d5e6:	00 00 00 
		//Try to reallocate 2nd 1 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012d5e9:	e8 50 f8 fd ff       	call   f010ce3e <sys_calculate_free_frames>
f012d5ee:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 15 * kilo);
f012d5f1:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012d5f7:	83 ec 08             	sub    $0x8,%esp
f012d5fa:	68 00 3c 00 00       	push   $0x3c00
f012d5ff:	50                   	push   %eax
f012d600:	e8 87 ae fd ff       	call   f010848c <krealloc>
f012d605:	83 c4 10             	add    $0x10,%esp
f012d608:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d60e:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012d614:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d619:	77 17                	ja     f012d632 <test_krealloc_BF+0x13be>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d61b:	83 ec 04             	sub    $0x4,%esp
f012d61e:	68 d8 b1 13 f0       	push   $0xf013b1d8
f012d623:	68 5f 12 00 00       	push   $0x125f
f012d628:	68 32 9f 13 f0       	push   $0xf0139f32
f012d62d:	e8 7e 2b fd ff       	call   f01001b0 <_panic>
		if (newAddress != ptr_allocations[1])
f012d632:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012d638:	3b 85 18 ff ff ff    	cmp    -0xe8(%ebp),%eax
f012d63e:	74 17                	je     f012d657 <test_krealloc_BF+0x13e3>
			panic(
f012d640:	83 ec 04             	sub    $0x4,%esp
f012d643:	68 bc b4 13 f0       	push   $0xf013b4bc
f012d648:	68 62 12 00 00       	push   $0x1262
f012d64d:	68 32 9f 13 f0       	push   $0xf0139f32
f012d652:	e8 59 2b fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012d657:	e8 e2 f7 fd ff       	call   f010ce3e <sys_calculate_free_frames>
f012d65c:	89 c2                	mov    %eax,%edx
f012d65e:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d661:	39 c2                	cmp    %eax,%edx
f012d663:	74 17                	je     f012d67c <test_krealloc_BF+0x1408>
			panic(
f012d665:	83 ec 04             	sub    $0x4,%esp
f012d668:	68 28 b5 13 f0       	push   $0xf013b528
f012d66d:	68 65 12 00 00       	push   $0x1265
f012d672:	68 32 9f 13 f0       	push   $0xf0139f32
f012d677:	e8 34 2b fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 1st 2 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012d67c:	e8 bd f7 fd ff       	call   f010ce3e <sys_calculate_free_frames>
f012d681:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], 1 * Mega - kilo);
f012d684:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012d68a:	83 ec 08             	sub    $0x8,%esp
f012d68d:	68 00 fc 0f 00       	push   $0xffc00
f012d692:	50                   	push   %eax
f012d693:	e8 f4 ad fd ff       	call   f010848c <krealloc>
f012d698:	83 c4 10             	add    $0x10,%esp
f012d69b:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d6a1:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012d6a7:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d6ac:	77 17                	ja     f012d6c5 <test_krealloc_BF+0x1451>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d6ae:	83 ec 04             	sub    $0x4,%esp
f012d6b1:	68 d8 b1 13 f0       	push   $0xf013b1d8
f012d6b6:	68 6b 12 00 00       	push   $0x126b
f012d6bb:	68 32 9f 13 f0       	push   $0xf0139f32
f012d6c0:	e8 eb 2a fd ff       	call   f01001b0 <_panic>
		if (newAddress != ptr_allocations[4])
f012d6c5:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012d6cb:	3b 85 18 ff ff ff    	cmp    -0xe8(%ebp),%eax
f012d6d1:	74 17                	je     f012d6ea <test_krealloc_BF+0x1476>
			panic(
f012d6d3:	83 ec 04             	sub    $0x4,%esp
f012d6d6:	68 bc b4 13 f0       	push   $0xf013b4bc
f012d6db:	68 6e 12 00 00       	push   $0x126e
f012d6e0:	68 32 9f 13 f0       	push   $0xf0139f32
f012d6e5:	e8 c6 2a fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012d6ea:	e8 4f f7 fd ff       	call   f010ce3e <sys_calculate_free_frames>
f012d6ef:	89 c2                	mov    %eax,%edx
f012d6f1:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d6f4:	39 c2                	cmp    %eax,%edx
f012d6f6:	74 17                	je     f012d70f <test_krealloc_BF+0x149b>
			panic(
f012d6f8:	83 ec 04             	sub    $0x4,%esp
f012d6fb:	68 28 b5 13 f0       	push   $0xf013b528
f012d700:	68 71 12 00 00       	push   $0x1271
f012d705:	68 32 9f 13 f0       	push   $0xf0139f32
f012d70a:	e8 a1 2a fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 2nd 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012d70f:	e8 2a f7 fd ff       	call   f010ce3e <sys_calculate_free_frames>
f012d714:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 1 * Mega - kilo);
f012d717:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012d71d:	83 ec 08             	sub    $0x8,%esp
f012d720:	68 00 fc 0f 00       	push   $0xffc00
f012d725:	50                   	push   %eax
f012d726:	e8 61 ad fd ff       	call   f010848c <krealloc>
f012d72b:	83 c4 10             	add    $0x10,%esp
f012d72e:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d734:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012d73a:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d73f:	77 17                	ja     f012d758 <test_krealloc_BF+0x14e4>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d741:	83 ec 04             	sub    $0x4,%esp
f012d744:	68 d8 b1 13 f0       	push   $0xf013b1d8
f012d749:	68 77 12 00 00       	push   $0x1277
f012d74e:	68 32 9f 13 f0       	push   $0xf0139f32
f012d753:	e8 58 2a fd ff       	call   f01001b0 <_panic>
		if (newAddress != ptr_allocations[1])
f012d758:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012d75e:	3b 85 18 ff ff ff    	cmp    -0xe8(%ebp),%eax
f012d764:	74 17                	je     f012d77d <test_krealloc_BF+0x1509>
			panic(
f012d766:	83 ec 04             	sub    $0x4,%esp
f012d769:	68 bc b4 13 f0       	push   $0xf013b4bc
f012d76e:	68 7a 12 00 00       	push   $0x127a
f012d773:	68 32 9f 13 f0       	push   $0xf0139f32
f012d778:	e8 33 2a fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012d77d:	e8 bc f6 fd ff       	call   f010ce3e <sys_calculate_free_frames>
f012d782:	89 c2                	mov    %eax,%edx
f012d784:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d787:	39 c2                	cmp    %eax,%edx
f012d789:	74 17                	je     f012d7a2 <test_krealloc_BF+0x152e>
			panic(
f012d78b:	83 ec 04             	sub    $0x4,%esp
f012d78e:	68 28 b5 13 f0       	push   $0xf013b528
f012d793:	68 7d 12 00 00       	push   $0x127d
f012d798:	68 32 9f 13 f0       	push   $0xf0139f32
f012d79d:	e8 0e 2a fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");



		//Try to reallocate 4th 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012d7a2:	e8 97 f6 fd ff       	call   f010ce3e <sys_calculate_free_frames>
f012d7a7:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[3], 1 * Mega - kilo);
f012d7aa:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012d7b0:	83 ec 08             	sub    $0x8,%esp
f012d7b3:	68 00 fc 0f 00       	push   $0xffc00
f012d7b8:	50                   	push   %eax
f012d7b9:	e8 ce ac fd ff       	call   f010848c <krealloc>
f012d7be:	83 c4 10             	add    $0x10,%esp
f012d7c1:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d7c7:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012d7cd:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d7d2:	77 17                	ja     f012d7eb <test_krealloc_BF+0x1577>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d7d4:	83 ec 04             	sub    $0x4,%esp
f012d7d7:	68 d8 b1 13 f0       	push   $0xf013b1d8
f012d7dc:	68 85 12 00 00       	push   $0x1285
f012d7e1:	68 32 9f 13 f0       	push   $0xf0139f32
f012d7e6:	e8 c5 29 fd ff       	call   f01001b0 <_panic>
		if (newAddress != ptr_allocations[3])
f012d7eb:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012d7f1:	3b 85 18 ff ff ff    	cmp    -0xe8(%ebp),%eax
f012d7f7:	74 17                	je     f012d810 <test_krealloc_BF+0x159c>
			panic(
f012d7f9:	83 ec 04             	sub    $0x4,%esp
f012d7fc:	68 6c b5 13 f0       	push   $0xf013b56c
f012d801:	68 88 12 00 00       	push   $0x1288
f012d806:	68 32 9f 13 f0       	push   $0xf0139f32
f012d80b:	e8 a0 29 fd ff       	call   f01001b0 <_panic>
					"Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012d810:	e8 29 f6 fd ff       	call   f010ce3e <sys_calculate_free_frames>
f012d815:	89 c2                	mov    %eax,%edx
f012d817:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d81a:	39 c2                	cmp    %eax,%edx
f012d81c:	74 17                	je     f012d835 <test_krealloc_BF+0x15c1>
			panic(
f012d81e:	83 ec 04             	sub    $0x4,%esp
f012d821:	68 28 b5 13 f0       	push   $0xf013b528
f012d826:	68 8b 12 00 00       	push   $0x128b
f012d82b:	68 32 9f 13 f0       	push   $0xf0139f32
f012d830:	e8 7b 29 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");
	}
	cprintf("\b\b\b30%");
f012d835:	83 ec 0c             	sub    $0xc,%esp
f012d838:	68 4b a7 13 f0       	push   $0xf013a74b
f012d83d:	e8 ef 35 fd ff       	call   f0100e31 <cprintf>
f012d842:	83 c4 10             	add    $0x10,%esp
    {
		//Reallocate 2nd 1 MB to 1 MB + 7 KB
		freeFrames = sys_calculate_free_frames();
f012d845:	e8 f4 f5 fd ff       	call   f010ce3e <sys_calculate_free_frames>
f012d84a:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], (1 * Mega - kilo) + (7 * kilo));
f012d84d:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012d853:	83 ec 08             	sub    $0x8,%esp
f012d856:	68 00 18 10 00       	push   $0x101800
f012d85b:	50                   	push   %eax
f012d85c:	e8 2b ac fd ff       	call   f010848c <krealloc>
f012d861:	83 c4 10             	add    $0x10,%esp
f012d864:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d867:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d86a:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d86f:	77 17                	ja     f012d888 <test_krealloc_BF+0x1614>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d871:	83 ec 04             	sub    $0x4,%esp
f012d874:	68 d8 b1 13 f0       	push   $0xf013b1d8
f012d879:	68 93 12 00 00       	push   $0x1293
f012d87e:	68 32 9f 13 f0       	push   $0xf0139f32
f012d883:	e8 28 29 fd ff       	call   f01001b0 <_panic>
		if (newAddress != ptr_allocations[1])
f012d888:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012d88e:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012d891:	74 17                	je     f012d8aa <test_krealloc_BF+0x1636>
			panic(
f012d893:	83 ec 04             	sub    $0x4,%esp
f012d896:	68 cc b5 13 f0       	push   $0xf013b5cc
f012d89b:	68 96 12 00 00       	push   $0x1296
f012d8a0:	68 32 9f 13 f0       	push   $0xf0139f32
f012d8a5:	e8 06 29 fd ff       	call   f01001b0 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		if (freeFrames - sys_calculate_free_frames() != 2)
f012d8aa:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012d8ad:	e8 8c f5 fd ff       	call   f010ce3e <sys_calculate_free_frames>
f012d8b2:	29 c3                	sub    %eax,%ebx
f012d8b4:	89 d8                	mov    %ebx,%eax
f012d8b6:	83 f8 02             	cmp    $0x2,%eax
f012d8b9:	74 17                	je     f012d8d2 <test_krealloc_BF+0x165e>
			panic("krealloc: pages in memory are not loaded correctly");
f012d8bb:	83 ec 04             	sub    $0x4,%esp
f012d8be:	68 48 b6 13 f0       	push   $0xf013b648
f012d8c3:	68 98 12 00 00       	push   $0x1298
f012d8c8:	68 32 9f 13 f0       	push   $0xf0139f32
f012d8cd:	e8 de 28 fd ff       	call   f01001b0 <_panic>

		//Reallocate 1st 2 MB to 2 MB + 2 MB
		freeFrames = sys_calculate_free_frames();
f012d8d2:	e8 67 f5 fd ff       	call   f010ce3e <sys_calculate_free_frames>
f012d8d7:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (4 * Mega - kilo));
f012d8da:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012d8e0:	83 ec 08             	sub    $0x8,%esp
f012d8e3:	68 00 fc 3f 00       	push   $0x3ffc00
f012d8e8:	50                   	push   %eax
f012d8e9:	e8 9e ab fd ff       	call   f010848c <krealloc>
f012d8ee:	83 c4 10             	add    $0x10,%esp
f012d8f1:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d8f4:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d8f7:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d8fc:	77 17                	ja     f012d915 <test_krealloc_BF+0x16a1>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d8fe:	83 ec 04             	sub    $0x4,%esp
f012d901:	68 d8 b1 13 f0       	push   $0xf013b1d8
f012d906:	68 9e 12 00 00       	push   $0x129e
f012d90b:	68 32 9f 13 f0       	push   $0xf0139f32
f012d910:	e8 9b 28 fd ff       	call   f01001b0 <_panic>
		if (newAddress != ptr_allocations[4])
f012d915:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012d91b:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012d91e:	74 17                	je     f012d937 <test_krealloc_BF+0x16c3>
			panic(
f012d920:	83 ec 04             	sub    $0x4,%esp
f012d923:	68 cc b5 13 f0       	push   $0xf013b5cc
f012d928:	68 a1 12 00 00       	push   $0x12a1
f012d92d:	68 32 9f 13 f0       	push   $0xf0139f32
f012d932:	e8 79 28 fd ff       	call   f01001b0 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		//2 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 512)
f012d937:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012d93a:	e8 ff f4 fd ff       	call   f010ce3e <sys_calculate_free_frames>
f012d93f:	29 c3                	sub    %eax,%ebx
f012d941:	89 d8                	mov    %ebx,%eax
f012d943:	3d 00 02 00 00       	cmp    $0x200,%eax
f012d948:	74 17                	je     f012d961 <test_krealloc_BF+0x16ed>
			panic("krealloc: pages in memory are not loaded correctly");
f012d94a:	83 ec 04             	sub    $0x4,%esp
f012d94d:	68 48 b6 13 f0       	push   $0xf013b648
f012d952:	68 a4 12 00 00       	push   $0x12a4
f012d957:	68 32 9f 13 f0       	push   $0xf0139f32
f012d95c:	e8 4f 28 fd ff       	call   f01001b0 <_panic>


	}
	cprintf("\b\b\b60%");
f012d961:	83 ec 0c             	sub    $0xc,%esp
f012d964:	68 90 a7 13 f0       	push   $0xf013a790
f012d969:	e8 c3 34 fd ff       	call   f0100e31 <cprintf>
f012d96e:	83 c4 10             	add    $0x10,%esp
	//Test krealloc: Cut & paste
	{
		//Reallocate 1st 2 MB (already reallocated to 4 MB) to 10 MB. It should return new VA
		freeFrames = sys_calculate_free_frames();
f012d971:	e8 c8 f4 fd ff       	call   f010ce3e <sys_calculate_free_frames>
f012d976:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (10 * Mega - kilo));
f012d979:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012d97f:	83 ec 08             	sub    $0x8,%esp
f012d982:	68 00 fc 9f 00       	push   $0x9ffc00
f012d987:	50                   	push   %eax
f012d988:	e8 ff aa fd ff       	call   f010848c <krealloc>
f012d98d:	83 c4 10             	add    $0x10,%esp
f012d990:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012d993:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012d996:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d99b:	77 17                	ja     f012d9b4 <test_krealloc_BF+0x1740>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d99d:	83 ec 04             	sub    $0x4,%esp
f012d9a0:	68 d8 b1 13 f0       	push   $0xf013b1d8
f012d9a5:	68 af 12 00 00       	push   $0x12af
f012d9aa:	68 32 9f 13 f0       	push   $0xf0139f32
f012d9af:	e8 fc 27 fd ff       	call   f01001b0 <_panic>
		if ((uint32) newAddress != ACTUAL_START + (11 * Mega))
f012d9b4:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f012d9bb:	10 00 00 
f012d9be:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f012d9c3:	0f b6 d0             	movzbl %al,%edx
f012d9c6:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012d9cc:	01 d0                	add    %edx,%eax
f012d9ce:	48                   	dec    %eax
f012d9cf:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f012d9d5:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012d9db:	ba 00 00 00 00       	mov    $0x0,%edx
f012d9e0:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f012d9e6:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012d9ec:	29 d0                	sub    %edx,%eax
f012d9ee:	89 c1                	mov    %eax,%ecx
f012d9f0:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f012d9f7:	10 00 00 
f012d9fa:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f012d9ff:	0f b6 c0             	movzbl %al,%eax
f012da02:	c1 e0 04             	shl    $0x4,%eax
f012da05:	89 c2                	mov    %eax,%edx
f012da07:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012da0d:	01 d0                	add    %edx,%eax
f012da0f:	48                   	dec    %eax
f012da10:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f012da16:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012da1c:	ba 00 00 00 00       	mov    $0x0,%edx
f012da21:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f012da27:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012da2d:	29 d0                	sub    %edx,%eax
f012da2f:	01 c8                	add    %ecx,%eax
f012da31:	8d 90 00 40 b0 f6    	lea    -0x94fc000(%eax),%edx
f012da37:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012da3a:	39 c2                	cmp    %eax,%edx
f012da3c:	74 18                	je     f012da56 <test_krealloc_BF+0x17e2>
			panic(
f012da3e:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012da41:	50                   	push   %eax
f012da42:	68 7c b6 13 f0       	push   $0xf013b67c
f012da47:	68 b3 12 00 00       	push   $0x12b3
f012da4c:	68 32 9f 13 f0       	push   $0xf0139f32
f012da51:	e8 5a 27 fd ff       	call   f01001b0 <_panic>
					"krealloc: Wrong start address for reallocated space, NSA = %x\nbbb",
					(uint32 )newAddress);
		if (newAddress == ptr_allocations[4])
f012da56:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012da5c:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012da5f:	75 17                	jne    f012da78 <test_krealloc_BF+0x1804>
			panic(
f012da61:	83 ec 04             	sub    $0x4,%esp
f012da64:	68 c0 b6 13 f0       	push   $0xf013b6c0
f012da69:	68 b6 12 00 00       	push   $0x12b6
f012da6e:	68 32 9f 13 f0       	push   $0xf0139f32
f012da73:	e8 38 27 fd ff       	call   f01001b0 <_panic>
					"Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
		//6 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 1536)
f012da78:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012da7b:	e8 be f3 fd ff       	call   f010ce3e <sys_calculate_free_frames>
f012da80:	29 c3                	sub    %eax,%ebx
f012da82:	89 d8                	mov    %ebx,%eax
f012da84:	3d 00 06 00 00       	cmp    $0x600,%eax
f012da89:	74 17                	je     f012daa2 <test_krealloc_BF+0x182e>
			panic("krealloc: pages in memory are not loaded correctly");
f012da8b:	83 ec 04             	sub    $0x4,%esp
f012da8e:	68 48 b6 13 f0       	push   $0xf013b648
f012da93:	68 b9 12 00 00       	push   $0x12b9
f012da98:	68 32 9f 13 f0       	push   $0xf0139f32
f012da9d:	e8 0e 27 fd ff       	call   f01001b0 <_panic>

		ptr_allocations[4] = newAddress;
f012daa2:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012daa5:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
		//lastIndices[4] = (10 * Mega - kilo) / sizeof(short) - 1;

		//Reallocate 1st 3 MB to 4 MB
		freeFrames = sys_calculate_free_frames();
f012daab:	e8 8e f3 fd ff       	call   f010ce3e <sys_calculate_free_frames>
f012dab0:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (4 * Mega - kilo));
f012dab3:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012dab9:	83 ec 08             	sub    $0x8,%esp
f012dabc:	68 00 fc 3f 00       	push   $0x3ffc00
f012dac1:	50                   	push   %eax
f012dac2:	e8 c5 a9 fd ff       	call   f010848c <krealloc>
f012dac7:	83 c4 10             	add    $0x10,%esp
f012daca:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012dacd:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012dad0:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012dad5:	77 17                	ja     f012daee <test_krealloc_BF+0x187a>
			panic("krealloc: Wrong start address for the allocated space... ");
f012dad7:	83 ec 04             	sub    $0x4,%esp
f012dada:	68 d8 b1 13 f0       	push   $0xf013b1d8
f012dadf:	68 c2 12 00 00       	push   $0x12c2
f012dae4:	68 32 9f 13 f0       	push   $0xf0139f32
f012dae9:	e8 c2 26 fd ff       	call   f01001b0 <_panic>
		if (newAddress == ptr_allocations[6])
f012daee:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012daf4:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012daf7:	75 17                	jne    f012db10 <test_krealloc_BF+0x189c>
			panic("Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
f012daf9:	83 ec 04             	sub    $0x4,%esp
f012dafc:	68 c0 b6 13 f0       	push   $0xf013b6c0
f012db01:	68 c4 12 00 00       	push   $0x12c4
f012db06:	68 32 9f 13 f0       	push   $0xf0139f32
f012db0b:	e8 a0 26 fd ff       	call   f01001b0 <_panic>
		if ((uint32)newAddress != ACTUAL_START + 4 * Mega) panic("krealloc: Wrong start address for allocated space");
f012db10:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f012db17:	10 00 00 
f012db1a:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f012db1f:	0f b6 d0             	movzbl %al,%edx
f012db22:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012db28:	01 d0                	add    %edx,%eax
f012db2a:	48                   	dec    %eax
f012db2b:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f012db31:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012db37:	ba 00 00 00 00       	mov    $0x0,%edx
f012db3c:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f012db42:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012db48:	29 d0                	sub    %edx,%eax
f012db4a:	89 c1                	mov    %eax,%ecx
f012db4c:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f012db53:	10 00 00 
f012db56:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f012db5b:	0f b6 c0             	movzbl %al,%eax
f012db5e:	c1 e0 04             	shl    $0x4,%eax
f012db61:	89 c2                	mov    %eax,%edx
f012db63:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012db69:	01 d0                	add    %edx,%eax
f012db6b:	48                   	dec    %eax
f012db6c:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f012db72:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012db78:	ba 00 00 00 00       	mov    $0x0,%edx
f012db7d:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f012db83:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012db89:	29 d0                	sub    %edx,%eax
f012db8b:	01 c8                	add    %ecx,%eax
f012db8d:	8d 90 00 40 40 f6    	lea    -0x9bfc000(%eax),%edx
f012db93:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012db96:	39 c2                	cmp    %eax,%edx
f012db98:	74 17                	je     f012dbb1 <test_krealloc_BF+0x193d>
f012db9a:	83 ec 04             	sub    $0x4,%esp
f012db9d:	68 14 b2 13 f0       	push   $0xf013b214
f012dba2:	68 c5 12 00 00       	push   $0x12c5
f012dba7:	68 32 9f 13 f0       	push   $0xf0139f32
f012dbac:	e8 ff 25 fd ff       	call   f01001b0 <_panic>

		//1 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 256)
f012dbb1:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012dbb4:	e8 85 f2 fd ff       	call   f010ce3e <sys_calculate_free_frames>
f012dbb9:	29 c3                	sub    %eax,%ebx
f012dbbb:	89 d8                	mov    %ebx,%eax
f012dbbd:	3d 00 01 00 00       	cmp    $0x100,%eax
f012dbc2:	74 17                	je     f012dbdb <test_krealloc_BF+0x1967>
			panic("krealloc: pages in memory are not loaded correctly");
f012dbc4:	83 ec 04             	sub    $0x4,%esp
f012dbc7:	68 48 b6 13 f0       	push   $0xf013b648
f012dbcc:	68 c9 12 00 00       	push   $0x12c9
f012dbd1:	68 32 9f 13 f0       	push   $0xf0139f32
f012dbd6:	e8 d5 25 fd ff       	call   f01001b0 <_panic>
		ptr_allocations[6] = newAddress;
f012dbdb:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012dbde:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
		//Reallocate 1st 3 MB (already reallocated to 4 MB) to 20 MB. It should return new VA
		freeFrames = sys_calculate_free_frames();
f012dbe4:	e8 55 f2 fd ff       	call   f010ce3e <sys_calculate_free_frames>
f012dbe9:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (20 * Mega - kilo));
f012dbec:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012dbf2:	83 ec 08             	sub    $0x8,%esp
f012dbf5:	68 00 fc 3f 01       	push   $0x13ffc00
f012dbfa:	50                   	push   %eax
f012dbfb:	e8 8c a8 fd ff       	call   f010848c <krealloc>
f012dc00:	83 c4 10             	add    $0x10,%esp
f012dc03:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012dc06:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012dc09:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012dc0e:	77 17                	ja     f012dc27 <test_krealloc_BF+0x19b3>
			panic("krealloc: Wrong start address for the allocated space... ");
f012dc10:	83 ec 04             	sub    $0x4,%esp
f012dc13:	68 d8 b1 13 f0       	push   $0xf013b1d8
f012dc18:	68 cf 12 00 00       	push   $0x12cf
f012dc1d:	68 32 9f 13 f0       	push   $0xf0139f32
f012dc22:	e8 89 25 fd ff       	call   f01001b0 <_panic>
		if (newAddress == ptr_allocations[6])
f012dc27:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012dc2d:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012dc30:	75 17                	jne    f012dc49 <test_krealloc_BF+0x19d5>
			panic("Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
f012dc32:	83 ec 04             	sub    $0x4,%esp
f012dc35:	68 c0 b6 13 f0       	push   $0xf013b6c0
f012dc3a:	68 d1 12 00 00       	push   $0x12d1
f012dc3f:	68 32 9f 13 f0       	push   $0xf0139f32
f012dc44:	e8 67 25 fd ff       	call   f01001b0 <_panic>
		if ((uint32) newAddress != ACTUAL_START + (21 * Mega))
f012dc49:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f012dc50:	10 00 00 
f012dc53:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f012dc58:	0f b6 d0             	movzbl %al,%edx
f012dc5b:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f012dc61:	01 d0                	add    %edx,%eax
f012dc63:	48                   	dec    %eax
f012dc64:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f012dc6a:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012dc70:	ba 00 00 00 00       	mov    $0x0,%edx
f012dc75:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f012dc7b:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012dc81:	29 d0                	sub    %edx,%eax
f012dc83:	89 c1                	mov    %eax,%ecx
f012dc85:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f012dc8c:	10 00 00 
f012dc8f:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f012dc94:	0f b6 c0             	movzbl %al,%eax
f012dc97:	c1 e0 04             	shl    $0x4,%eax
f012dc9a:	89 c2                	mov    %eax,%edx
f012dc9c:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012dca2:	01 d0                	add    %edx,%eax
f012dca4:	48                   	dec    %eax
f012dca5:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f012dcab:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012dcb1:	ba 00 00 00 00       	mov    $0x0,%edx
f012dcb6:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f012dcbc:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012dcc2:	29 d0                	sub    %edx,%eax
f012dcc4:	01 c8                	add    %ecx,%eax
f012dcc6:	8d 90 00 40 50 f7    	lea    -0x8afc000(%eax),%edx
f012dccc:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012dccf:	39 c2                	cmp    %eax,%edx
f012dcd1:	74 17                	je     f012dcea <test_krealloc_BF+0x1a76>
			panic("krealloc: Wrong start address for reallocated space\n");
f012dcd3:	83 ec 04             	sub    $0x4,%esp
f012dcd6:	68 e0 b7 13 f0       	push   $0xf013b7e0
f012dcdb:	68 d3 12 00 00       	push   $0x12d3
f012dce0:	68 32 9f 13 f0       	push   $0xf0139f32
f012dce5:	e8 c6 24 fd ff       	call   f01001b0 <_panic>
		//3 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != (16 * Mega) / PAGE_SIZE)
f012dcea:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012dced:	e8 4c f1 fd ff       	call   f010ce3e <sys_calculate_free_frames>
f012dcf2:	29 c3                	sub    %eax,%ebx
f012dcf4:	89 d8                	mov    %ebx,%eax
f012dcf6:	3d 00 10 00 00       	cmp    $0x1000,%eax
f012dcfb:	74 17                	je     f012dd14 <test_krealloc_BF+0x1aa0>
			panic("krealloc: pages in memory are not loaded correctly");
f012dcfd:	83 ec 04             	sub    $0x4,%esp
f012dd00:	68 48 b6 13 f0       	push   $0xf013b648
f012dd05:	68 d6 12 00 00       	push   $0x12d6
f012dd0a:	68 32 9f 13 f0       	push   $0xf0139f32
f012dd0f:	e8 9c 24 fd ff       	call   f01001b0 <_panic>

		ptr_allocations[6] = newAddress;
f012dd14:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012dd17:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f012dd1d:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012dd23:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
		int i;
		sums[0] = 0;
f012dd29:	c7 85 f8 fd ff ff 00 	movl   $0x0,-0x208(%ebp)
f012dd30:	00 00 00 
		for (i = 0; i <= lastIndices[1]; ++i) {
f012dd33:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012dd3a:	eb 21                	jmp    f012dd5d <test_krealloc_BF+0x1ae9>
			sums[0] += ptr[i];
f012dd3c:	8b 95 f8 fd ff ff    	mov    -0x208(%ebp),%edx
f012dd42:	8b 4d d8             	mov    -0x28(%ebp),%ecx
f012dd45:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012dd4b:	01 c8                	add    %ecx,%eax
f012dd4d:	8a 00                	mov    (%eax),%al
f012dd4f:	0f be c0             	movsbl %al,%eax
f012dd52:	01 d0                	add    %edx,%eax
f012dd54:	89 85 f8 fd ff ff    	mov    %eax,-0x208(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		int i;
		sums[0] = 0;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012dd5a:	ff 45 d8             	incl   -0x28(%ebp)
f012dd5d:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012dd63:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012dd66:	7d d4                	jge    f012dd3c <test_krealloc_BF+0x1ac8>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012dd68:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f012dd6e:	8b 95 4c fe ff ff    	mov    -0x1b4(%ebp),%edx
f012dd74:	42                   	inc    %edx
f012dd75:	01 d2                	add    %edx,%edx
f012dd77:	39 d0                	cmp    %edx,%eax
f012dd79:	74 17                	je     f012dd92 <test_krealloc_BF+0x1b1e>
			panic("krealloc: invalid read after re-allocations");
f012dd7b:	83 ec 04             	sub    $0x4,%esp
f012dd7e:	68 78 b7 13 f0       	push   $0xf013b778
f012dd83:	68 e4 12 00 00       	push   $0x12e4
f012dd88:	68 32 9f 13 f0       	push   $0xf0139f32
f012dd8d:	e8 1e 24 fd ff       	call   f01001b0 <_panic>

		//Test read write access for the new allocated size of 1st 3 MB
		structArr = (struct MyStruct*) ptr_allocations[6];
f012dd92:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012dd98:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)

		sums[0] = 0;
f012dd9e:	c7 85 f8 fd ff ff 00 	movl   $0x0,-0x208(%ebp)
f012dda5:	00 00 00 
		sums[1] = 0;
f012dda8:	c7 85 fc fd ff ff 00 	movl   $0x0,-0x204(%ebp)
f012ddaf:	00 00 00 
		sums[2] = 0;
f012ddb2:	c7 85 00 fe ff ff 00 	movl   $0x0,-0x200(%ebp)
f012ddb9:	00 00 00 
		for (i = 0; i <= lastIndices[6]; ++i) {
f012ddbc:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012ddc3:	eb 70                	jmp    f012de35 <test_krealloc_BF+0x1bc1>
			sums[0] += structArr[i].a;
f012ddc5:	8b 95 f8 fd ff ff    	mov    -0x208(%ebp),%edx
f012ddcb:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012ddce:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012ddd5:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012dddb:	01 c8                	add    %ecx,%eax
f012dddd:	8a 00                	mov    (%eax),%al
f012dddf:	0f be c0             	movsbl %al,%eax
f012dde2:	01 d0                	add    %edx,%eax
f012dde4:	89 85 f8 fd ff ff    	mov    %eax,-0x208(%ebp)
			sums[1] += structArr[i].b;
f012ddea:	8b 95 fc fd ff ff    	mov    -0x204(%ebp),%edx
f012ddf0:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012ddf3:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012ddfa:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012de00:	01 c8                	add    %ecx,%eax
f012de02:	66 8b 40 02          	mov    0x2(%eax),%ax
f012de06:	98                   	cwtl   
f012de07:	01 d0                	add    %edx,%eax
f012de09:	89 85 fc fd ff ff    	mov    %eax,-0x204(%ebp)
			sums[2] += structArr[i].c;
f012de0f:	8b 95 00 fe ff ff    	mov    -0x200(%ebp),%edx
f012de15:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012de18:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012de1f:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012de25:	01 c8                	add    %ecx,%eax
f012de27:	8b 40 04             	mov    0x4(%eax),%eax
f012de2a:	01 d0                	add    %edx,%eax
f012de2c:	89 85 00 fe ff ff    	mov    %eax,-0x200(%ebp)
		structArr = (struct MyStruct*) ptr_allocations[6];

		sums[0] = 0;
		sums[1] = 0;
		sums[2] = 0;
		for (i = 0; i <= lastIndices[6]; ++i) {
f012de32:	ff 45 d8             	incl   -0x28(%ebp)
f012de35:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012de3b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012de3e:	7d 85                	jge    f012ddc5 <test_krealloc_BF+0x1b51>
			sums[1] += structArr[i].b;
			sums[2] += structArr[i].c;

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[6] + 1) * 7
f012de40:	8b 8d f8 fd ff ff    	mov    -0x208(%ebp),%ecx
f012de46:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012de4c:	8d 50 01             	lea    0x1(%eax),%edx
f012de4f:	89 d0                	mov    %edx,%eax
f012de51:	01 c0                	add    %eax,%eax
f012de53:	01 d0                	add    %edx,%eax
f012de55:	01 c0                	add    %eax,%eax
f012de57:	01 d0                	add    %edx,%eax
f012de59:	39 c1                	cmp    %eax,%ecx
f012de5b:	75 3a                	jne    f012de97 <test_krealloc_BF+0x1c23>
				|| sums[1] != (lastIndices[6] + 1) * 7
f012de5d:	8b 8d fc fd ff ff    	mov    -0x204(%ebp),%ecx
f012de63:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012de69:	8d 50 01             	lea    0x1(%eax),%edx
f012de6c:	89 d0                	mov    %edx,%eax
f012de6e:	01 c0                	add    %eax,%eax
f012de70:	01 d0                	add    %edx,%eax
f012de72:	01 c0                	add    %eax,%eax
f012de74:	01 d0                	add    %edx,%eax
f012de76:	39 c1                	cmp    %eax,%ecx
f012de78:	75 1d                	jne    f012de97 <test_krealloc_BF+0x1c23>
				|| sums[2] != (lastIndices[6] + 1) * 7)
f012de7a:	8b 8d 00 fe ff ff    	mov    -0x200(%ebp),%ecx
f012de80:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012de86:	8d 50 01             	lea    0x1(%eax),%edx
f012de89:	89 d0                	mov    %edx,%eax
f012de8b:	01 c0                	add    %eax,%eax
f012de8d:	01 d0                	add    %edx,%eax
f012de8f:	01 c0                	add    %eax,%eax
f012de91:	01 d0                	add    %edx,%eax
f012de93:	39 c1                	cmp    %eax,%ecx
f012de95:	74 17                	je     f012deae <test_krealloc_BF+0x1c3a>
			panic("krealloc: invalid read after re-allocations");
f012de97:	83 ec 04             	sub    $0x4,%esp
f012de9a:	68 78 b7 13 f0       	push   $0xf013b778
f012de9f:	68 f6 12 00 00       	push   $0x12f6
f012dea4:	68 32 9f 13 f0       	push   $0xf0139f32
f012dea9:	e8 02 23 fd ff       	call   f01001b0 <_panic>

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f012deae:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012deb4:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)

		sums[0] = 0;
f012deba:	c7 85 f8 fd ff ff 00 	movl   $0x0,-0x208(%ebp)
f012dec1:	00 00 00 
		for (i = 0; i <= lastIndices[4]; ++i) {
f012dec4:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012decb:	eb 24                	jmp    f012def1 <test_krealloc_BF+0x1c7d>
			sums[0] += shortArr[i];
f012decd:	8b 95 f8 fd ff ff    	mov    -0x208(%ebp),%edx
f012ded3:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012ded6:	01 c0                	add    %eax,%eax
f012ded8:	89 c1                	mov    %eax,%ecx
f012deda:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012dee0:	01 c8                	add    %ecx,%eax
f012dee2:	66 8b 00             	mov    (%eax),%ax
f012dee5:	98                   	cwtl   
f012dee6:	01 d0                	add    %edx,%eax
f012dee8:	89 85 f8 fd ff ff    	mov    %eax,-0x208(%ebp)

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];

		sums[0] = 0;
		for (i = 0; i <= lastIndices[4]; ++i) {
f012deee:	ff 45 d8             	incl   -0x28(%ebp)
f012def1:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012def7:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012defa:	7d d1                	jge    f012decd <test_krealloc_BF+0x1c59>
			sums[0] += shortArr[i];
		}
		if (sums[0] != (lastIndices[4] + 1) * 5)
f012defc:	8b 95 f8 fd ff ff    	mov    -0x208(%ebp),%edx
f012df02:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012df08:	8d 48 01             	lea    0x1(%eax),%ecx
f012df0b:	89 c8                	mov    %ecx,%eax
f012df0d:	c1 e0 02             	shl    $0x2,%eax
f012df10:	01 c8                	add    %ecx,%eax
f012df12:	39 c2                	cmp    %eax,%edx
f012df14:	74 17                	je     f012df2d <test_krealloc_BF+0x1cb9>
			panic("krealloc: invalid read after re-allocations");
f012df16:	83 ec 04             	sub    $0x4,%esp
f012df19:	68 78 b7 13 f0       	push   $0xf013b778
f012df1e:	68 00 13 00 00       	push   $0x1300
f012df23:	68 32 9f 13 f0       	push   $0xf0139f32
f012df28:	e8 83 22 fd ff       	call   f01001b0 <_panic>

		//Test krealloc with size = 0 after krealloc 1st 3 MB to 20 MB
		freeFrames = sys_calculate_free_frames();
f012df2d:	e8 0c ef fd ff       	call   f010ce3e <sys_calculate_free_frames>
f012df32:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012df35:	e8 4a 67 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012df3a:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
		krealloc(ptr_allocations[6], 0);
f012df40:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012df46:	83 ec 08             	sub    $0x8,%esp
f012df49:	6a 00                	push   $0x0
f012df4b:	50                   	push   %eax
f012df4c:	e8 3b a5 fd ff       	call   f010848c <krealloc>
f012df51:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012df54:	e8 2b 67 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012df59:	3b 85 1c ff ff ff    	cmp    -0xe4(%ebp),%eax
f012df5f:	74 17                	je     f012df78 <test_krealloc_BF+0x1d04>
			panic(
f012df61:	83 ec 04             	sub    $0x4,%esp
f012df64:	68 4c 9f 13 f0       	push   $0xf0139f4c
f012df69:	68 08 13 00 00       	push   $0x1308
f012df6e:	68 32 9f 13 f0       	push   $0xf0139f32
f012df73:	e8 38 22 fd ff       	call   f01001b0 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 20 * Mega / PAGE_SIZE)
f012df78:	e8 c1 ee fd ff       	call   f010ce3e <sys_calculate_free_frames>
f012df7d:	89 c2                	mov    %eax,%edx
f012df7f:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012df82:	29 c2                	sub    %eax,%edx
f012df84:	89 d0                	mov    %edx,%eax
f012df86:	3d 00 14 00 00       	cmp    $0x1400,%eax
f012df8b:	74 17                	je     f012dfa4 <test_krealloc_BF+0x1d30>
			panic("krealloc: pages in memory are not freed correctly");
f012df8d:	83 ec 04             	sub    $0x4,%esp
f012df90:	68 08 b4 13 f0       	push   $0xf013b408
f012df95:	68 0a 13 00 00       	push   $0x130a
f012df9a:	68 32 9f 13 f0       	push   $0xf0139f32
f012df9f:	e8 0c 22 fd ff       	call   f01001b0 <_panic>

		//Test kfree after krealloc 1st 2 MB to 10 MB
		freeFrames = sys_calculate_free_frames();
f012dfa4:	e8 95 ee fd ff       	call   f010ce3e <sys_calculate_free_frames>
f012dfa9:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012dfac:	e8 d3 66 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012dfb1:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
		kfree(ptr_allocations[4]);
f012dfb7:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012dfbd:	83 ec 0c             	sub    $0xc,%esp
f012dfc0:	50                   	push   %eax
f012dfc1:	e8 18 a4 fd ff       	call   f01083de <kfree>
f012dfc6:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012dfc9:	e8 b6 66 fd ff       	call   f0104684 <pf_calculate_free_frames>
f012dfce:	3b 85 1c ff ff ff    	cmp    -0xe4(%ebp),%eax
f012dfd4:	74 17                	je     f012dfed <test_krealloc_BF+0x1d79>
			panic(
f012dfd6:	83 ec 04             	sub    $0x4,%esp
f012dfd9:	68 4c 9f 13 f0       	push   $0xf0139f4c
f012dfde:	68 12 13 00 00       	push   $0x1312
f012dfe3:	68 32 9f 13 f0       	push   $0xf0139f32
f012dfe8:	e8 c3 21 fd ff       	call   f01001b0 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 10 * Mega / PAGE_SIZE)
f012dfed:	e8 4c ee fd ff       	call   f010ce3e <sys_calculate_free_frames>
f012dff2:	89 c2                	mov    %eax,%edx
f012dff4:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012dff7:	29 c2                	sub    %eax,%edx
f012dff9:	89 d0                	mov    %edx,%eax
f012dffb:	3d 00 0a 00 00       	cmp    $0xa00,%eax
f012e000:	74 17                	je     f012e019 <test_krealloc_BF+0x1da5>
			panic("krealloc: pages in memory are not freed correctly");
f012e002:	83 ec 04             	sub    $0x4,%esp
f012e005:	68 08 b4 13 f0       	push   $0xf013b408
f012e00a:	68 14 13 00 00       	push   $0x1314
f012e00f:	68 32 9f 13 f0       	push   $0xf0139f32
f012e014:	e8 97 21 fd ff       	call   f01001b0 <_panic>

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012e019:	c7 45 d0 00 00 00 f6 	movl   $0xf6000000,-0x30(%ebp)
f012e020:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f012e027:	eb 48                	jmp    f012e071 <test_krealloc_BF+0x1dfd>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f012e029:	8b 55 d0             	mov    -0x30(%ebp),%edx
f012e02c:	a1 30 ce 2b f0       	mov    0xf02bce30,%eax
f012e031:	83 ec 04             	sub    $0x4,%esp
f012e034:	8d 8d f0 fd ff ff    	lea    -0x210(%ebp),%ecx
f012e03a:	51                   	push   %ecx
f012e03b:	52                   	push   %edx
f012e03c:	50                   	push   %eax
f012e03d:	e8 a5 94 fd ff       	call   f01074e7 <get_page_table>
f012e042:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f012e045:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f012e04b:	85 c0                	test   %eax,%eax
f012e04d:	75 17                	jne    f012e066 <test_krealloc_BF+0x1df2>
					panic(
f012e04f:	83 ec 04             	sub    $0x4,%esp
f012e052:	68 34 a8 13 f0       	push   $0xf013a834
f012e057:	68 21 13 00 00       	push   $0x1321
f012e05c:	68 32 9f 13 f0       	push   $0xf0139f32
f012e061:	e8 4a 21 fd ff       	call   f01001b0 <_panic>
			panic("krealloc: pages in memory are not freed correctly");

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012e066:	81 45 d0 00 00 40 00 	addl   $0x400000,-0x30(%ebp)
f012e06d:	83 55 d4 00          	adcl   $0x0,-0x2c(%ebp)
f012e071:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f012e075:	78 b2                	js     f012e029 <test_krealloc_BF+0x1db5>
f012e077:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f012e07b:	7f 09                	jg     f012e086 <test_krealloc_BF+0x1e12>
f012e07d:	81 7d d0 ff ef ff ff 	cmpl   $0xffffefff,-0x30(%ebp)
f012e084:	76 a3                	jbe    f012e029 <test_krealloc_BF+0x1db5>
			}
		}

	}

	cprintf("\b\b\b100%\n");
f012e086:	83 ec 0c             	sub    $0xc,%esp
f012e089:	68 16 a1 13 f0       	push   $0xf013a116
f012e08e:	e8 9e 2d fd ff       	call   f0100e31 <cprintf>
f012e093:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test krealloc BF completed successfully.\n");
f012e096:	83 ec 0c             	sub    $0xc,%esp
f012e099:	68 18 b8 13 f0       	push   $0xf013b818
f012e09e:	e8 8e 2d fd ff       	call   f0100e31 <cprintf>
f012e0a3:	83 c4 10             	add    $0x10,%esp
	return 0;
f012e0a6:	b8 00 00 00 00       	mov    $0x0,%eax
}
f012e0ab:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012e0ae:	5b                   	pop    %ebx
f012e0af:	5f                   	pop    %edi
f012e0b0:	5d                   	pop    %ebp
f012e0b1:	c3                   	ret    

f012e0b2 <test_initialize_dyn_block_system>:

//2022
int test_initialize_dyn_block_system(int freeFrames_before, int freeDiskFrames_before, int freeFrames_after, int freeDiskFrames_after)
{
f012e0b2:	55                   	push   %ebp
f012e0b3:	89 e5                	mov    %esp,%ebp
		}
	}

	//===============================================//
	cprintf("\nCongratulations!! test initialize_dyn_block_system of KHEAP completed successfully.\n");
*/	return 0;
f012e0b5:	b8 00 00 00 00       	mov    $0x0,%eax
}
f012e0ba:	5d                   	pop    %ebp
f012e0bb:	c3                   	ret    

f012e0bc <rsttst>:
#include <kern/mem/memory_manager.h>
#include "../cons/console.h"


void rsttst()
{
f012e0bc:	55                   	push   %ebp
f012e0bd:	89 e5                	mov    %esp,%ebp
	tstcnt = 0;
f012e0bf:	c7 05 54 4a 25 f0 00 	movl   $0x0,0xf0254a54
f012e0c6:	00 00 00 
}
f012e0c9:	90                   	nop
f012e0ca:	5d                   	pop    %ebp
f012e0cb:	c3                   	ret    

f012e0cc <inctst>:
void inctst()
{
f012e0cc:	55                   	push   %ebp
f012e0cd:	89 e5                	mov    %esp,%ebp
	tstcnt++;
f012e0cf:	a1 54 4a 25 f0       	mov    0xf0254a54,%eax
f012e0d4:	40                   	inc    %eax
f012e0d5:	a3 54 4a 25 f0       	mov    %eax,0xf0254a54
}
f012e0da:	90                   	nop
f012e0db:	5d                   	pop    %ebp
f012e0dc:	c3                   	ret    

f012e0dd <gettst>:
uint32 gettst()
{
f012e0dd:	55                   	push   %ebp
f012e0de:	89 e5                	mov    %esp,%ebp
	return tstcnt;
f012e0e0:	a1 54 4a 25 f0       	mov    0xf0254a54,%eax
}
f012e0e5:	5d                   	pop    %ebp
f012e0e6:	c3                   	ret    

f012e0e7 <tst>:

void tst(uint32 n, uint32 v1, uint32 v2, char c, int inv)
{
f012e0e7:	55                   	push   %ebp
f012e0e8:	89 e5                	mov    %esp,%ebp
f012e0ea:	83 ec 28             	sub    $0x28,%esp
f012e0ed:	8b 45 14             	mov    0x14(%ebp),%eax
f012e0f0:	88 45 e4             	mov    %al,-0x1c(%ebp)
	int chk = 0;
f012e0f3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	switch (c)
f012e0fa:	0f be 45 e4          	movsbl -0x1c(%ebp),%eax
f012e0fe:	83 f8 65             	cmp    $0x65,%eax
f012e101:	74 5d                	je     f012e160 <tst+0x79>
f012e103:	83 f8 65             	cmp    $0x65,%eax
f012e106:	7f 0a                	jg     f012e112 <tst+0x2b>
f012e108:	83 f8 62             	cmp    $0x62,%eax
f012e10b:	74 73                	je     f012e180 <tst+0x99>
f012e10d:	e9 91 00 00 00       	jmp    f012e1a3 <tst+0xbc>
f012e112:	83 f8 67             	cmp    $0x67,%eax
f012e115:	74 29                	je     f012e140 <tst+0x59>
f012e117:	83 f8 6c             	cmp    $0x6c,%eax
f012e11a:	0f 85 83 00 00 00    	jne    f012e1a3 <tst+0xbc>
	{
	case 'l':
		if (n < v1)
f012e120:	8b 45 08             	mov    0x8(%ebp),%eax
f012e123:	3b 45 0c             	cmp    0xc(%ebp),%eax
f012e126:	73 09                	jae    f012e131 <tst+0x4a>
			chk = 1;
f012e128:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f012e12f:	eb 68                	jmp    f012e199 <tst+0xb2>
	switch (c)
	{
	case 'l':
		if (n < v1)
			chk = 1;
		else if (inv)
f012e131:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f012e135:	74 62                	je     f012e199 <tst+0xb2>
			chk = 1;
f012e137:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f012e13e:	eb 59                	jmp    f012e199 <tst+0xb2>
	case 'g':
		if (n > v1)
f012e140:	8b 45 08             	mov    0x8(%ebp),%eax
f012e143:	3b 45 0c             	cmp    0xc(%ebp),%eax
f012e146:	76 09                	jbe    f012e151 <tst+0x6a>
			chk = 1;
f012e148:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f012e14f:	eb 4b                	jmp    f012e19c <tst+0xb5>
			chk = 1;
		break;
	case 'g':
		if (n > v1)
			chk = 1;
		else if (inv)
f012e151:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f012e155:	74 45                	je     f012e19c <tst+0xb5>
			chk = 1;
f012e157:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f012e15e:	eb 3c                	jmp    f012e19c <tst+0xb5>
	case 'e':
		if (n == v1)
f012e160:	8b 45 08             	mov    0x8(%ebp),%eax
f012e163:	3b 45 0c             	cmp    0xc(%ebp),%eax
f012e166:	75 09                	jne    f012e171 <tst+0x8a>
			chk = 1;
f012e168:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f012e16f:	eb 2e                	jmp    f012e19f <tst+0xb8>
			chk = 1;
		break;
	case 'e':
		if (n == v1)
			chk = 1;
		else if (inv)
f012e171:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f012e175:	74 28                	je     f012e19f <tst+0xb8>
			chk = 1;
f012e177:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f012e17e:	eb 1f                	jmp    f012e19f <tst+0xb8>
	case 'b':
		if (n >= v1 && n <= v2)
f012e180:	8b 45 08             	mov    0x8(%ebp),%eax
f012e183:	3b 45 0c             	cmp    0xc(%ebp),%eax
f012e186:	72 1a                	jb     f012e1a2 <tst+0xbb>
f012e188:	8b 45 08             	mov    0x8(%ebp),%eax
f012e18b:	3b 45 10             	cmp    0x10(%ebp),%eax
f012e18e:	77 12                	ja     f012e1a2 <tst+0xbb>
			chk = 1;
f012e190:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f012e197:	eb 09                	jmp    f012e1a2 <tst+0xbb>
	case 'l':
		if (n < v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f012e199:	90                   	nop
f012e19a:	eb 07                	jmp    f012e1a3 <tst+0xbc>
	case 'g':
		if (n > v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f012e19c:	90                   	nop
f012e19d:	eb 04                	jmp    f012e1a3 <tst+0xbc>
	case 'e':
		if (n == v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f012e19f:	90                   	nop
f012e1a0:	eb 01                	jmp    f012e1a3 <tst+0xbc>
	case 'b':
		if (n >= v1 && n <= v2)
			chk = 1;
		break;
f012e1a2:	90                   	nop
	}

	if (chk == 0) panic("Error!! test fails");
f012e1a3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f012e1a7:	75 14                	jne    f012e1bd <tst+0xd6>
f012e1a9:	83 ec 04             	sub    $0x4,%esp
f012e1ac:	68 58 b8 13 f0       	push   $0xf013b858
f012e1b1:	6a 3c                	push   $0x3c
f012e1b3:	68 6b b8 13 f0       	push   $0xf013b86b
f012e1b8:	e8 f3 1f fd ff       	call   f01001b0 <_panic>
	tstcnt++ ;
f012e1bd:	a1 54 4a 25 f0       	mov    0xf0254a54,%eax
f012e1c2:	40                   	inc    %eax
f012e1c3:	a3 54 4a 25 f0       	mov    %eax,0xf0254a54
	return;
f012e1c8:	90                   	nop
}
f012e1c9:	c9                   	leave  
f012e1ca:	c3                   	ret    

f012e1cb <chktst>:

void chktst(uint32 n)
{
f012e1cb:	55                   	push   %ebp
f012e1cc:	89 e5                	mov    %esp,%ebp
f012e1ce:	83 ec 08             	sub    $0x8,%esp
	if (tstcnt == n)
f012e1d1:	a1 54 4a 25 f0       	mov    0xf0254a54,%eax
f012e1d6:	3b 45 08             	cmp    0x8(%ebp),%eax
f012e1d9:	75 12                	jne    f012e1ed <chktst+0x22>
		cprintf("\nCongratulations... test runs successfully\n");
f012e1db:	83 ec 0c             	sub    $0xc,%esp
f012e1de:	68 84 b8 13 f0       	push   $0xf013b884
f012e1e3:	e8 49 2c fd ff       	call   f0100e31 <cprintf>
f012e1e8:	83 c4 10             	add    $0x10,%esp
	else
		panic("Error!! test fails at final");
}
f012e1eb:	eb 14                	jmp    f012e201 <chktst+0x36>
void chktst(uint32 n)
{
	if (tstcnt == n)
		cprintf("\nCongratulations... test runs successfully\n");
	else
		panic("Error!! test fails at final");
f012e1ed:	83 ec 04             	sub    $0x4,%esp
f012e1f0:	68 b0 b8 13 f0       	push   $0xf013b8b0
f012e1f5:	6a 46                	push   $0x46
f012e1f7:	68 6b b8 13 f0       	push   $0xf013b86b
f012e1fc:	e8 af 1f fd ff       	call   f01001b0 <_panic>
}
f012e201:	c9                   	leave  
f012e202:	c3                   	ret    

f012e203 <nearest_pow2_ceil>:

inline unsigned int nearest_pow2_ceil(unsigned int x) {
f012e203:	55                   	push   %ebp
f012e204:	89 e5                	mov    %esp,%ebp
f012e206:	83 ec 10             	sub    $0x10,%esp
    if (x <= 1) return 1;
f012e209:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f012e20d:	77 07                	ja     f012e216 <nearest_pow2_ceil+0x13>
f012e20f:	b8 01 00 00 00       	mov    $0x1,%eax
f012e214:	eb 20                	jmp    f012e236 <nearest_pow2_ceil+0x33>
    int power = 2;
f012e216:	c7 45 fc 02 00 00 00 	movl   $0x2,-0x4(%ebp)
    x--;
f012e21d:	ff 4d 08             	decl   0x8(%ebp)
    while (x >>= 1) {
f012e220:	eb 08                	jmp    f012e22a <nearest_pow2_ceil+0x27>
    	power <<= 1;
f012e222:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012e225:	01 c0                	add    %eax,%eax
f012e227:	89 45 fc             	mov    %eax,-0x4(%ebp)

inline unsigned int nearest_pow2_ceil(unsigned int x) {
    if (x <= 1) return 1;
    int power = 2;
    x--;
    while (x >>= 1) {
f012e22a:	d1 6d 08             	shrl   0x8(%ebp)
f012e22d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f012e231:	75 ef                	jne    f012e222 <nearest_pow2_ceil+0x1f>
    	power <<= 1;
    }
    return power;
f012e233:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f012e236:	c9                   	leave  
f012e237:	c3                   	ret    

f012e238 <log2_ceil>:
inline unsigned int log2_ceil(unsigned int x) {
f012e238:	55                   	push   %ebp
f012e239:	89 e5                	mov    %esp,%ebp
f012e23b:	83 ec 10             	sub    $0x10,%esp
    if (x <= 1) return 1;
f012e23e:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f012e242:	77 07                	ja     f012e24b <log2_ceil+0x13>
f012e244:	b8 01 00 00 00       	mov    $0x1,%eax
f012e249:	eb 1b                	jmp    f012e266 <log2_ceil+0x2e>
    //int power = 2;
    int bits_cnt = 2 ;
f012e24b:	c7 45 fc 02 00 00 00 	movl   $0x2,-0x4(%ebp)
    x--;
f012e252:	ff 4d 08             	decl   0x8(%ebp)
    while (x >>= 1) {
f012e255:	eb 03                	jmp    f012e25a <log2_ceil+0x22>
    	//power <<= 1;
    	bits_cnt++ ;
f012e257:	ff 45 fc             	incl   -0x4(%ebp)
inline unsigned int log2_ceil(unsigned int x) {
    if (x <= 1) return 1;
    //int power = 2;
    int bits_cnt = 2 ;
    x--;
    while (x >>= 1) {
f012e25a:	d1 6d 08             	shrl   0x8(%ebp)
f012e25d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f012e261:	75 f4                	jne    f012e257 <log2_ceil+0x1f>
    	//power <<= 1;
    	bits_cnt++ ;
    }
    return bits_cnt;
f012e263:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f012e266:	c9                   	leave  
f012e267:	c3                   	ret    

f012e268 <detect_loop_in_FrameInfo_list>:
void detect_loop_in_FrameInfo_list(struct FrameInfo_List* fi_list)
{
f012e268:	55                   	push   %ebp
f012e269:	89 e5                	mov    %esp,%ebp
f012e26b:	83 ec 18             	sub    $0x18,%esp
	struct  FrameInfo * slowPtr = LIST_FIRST(fi_list);
f012e26e:	8b 45 08             	mov    0x8(%ebp),%eax
f012e271:	8b 00                	mov    (%eax),%eax
f012e273:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct  FrameInfo * fastPtr = LIST_FIRST(fi_list);
f012e276:	8b 45 08             	mov    0x8(%ebp),%eax
f012e279:	8b 00                	mov    (%eax),%eax
f012e27b:	89 45 f0             	mov    %eax,-0x10(%ebp)


	while (slowPtr && fastPtr) {
f012e27e:	eb 52                	jmp    f012e2d2 <detect_loop_in_FrameInfo_list+0x6a>
		fastPtr = LIST_NEXT(fastPtr); // advance the fast pointer
f012e280:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012e283:	8b 00                	mov    (%eax),%eax
f012e285:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (fastPtr == slowPtr) // and check if its equal to the slow pointer
f012e288:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012e28b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012e28e:	75 12                	jne    f012e2a2 <detect_loop_in_FrameInfo_list+0x3a>
		{
			cprintf("loop detected in modiflist\n");
f012e290:	83 ec 0c             	sub    $0xc,%esp
f012e293:	68 cc b8 13 f0       	push   $0xf013b8cc
f012e298:	e8 94 2b fd ff       	call   f0100e31 <cprintf>
f012e29d:	83 c4 10             	add    $0x10,%esp
			break;
f012e2a0:	eb 3f                	jmp    f012e2e1 <detect_loop_in_FrameInfo_list+0x79>
		}

		if (fastPtr == NULL) {
f012e2a2:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012e2a6:	74 38                	je     f012e2e0 <detect_loop_in_FrameInfo_list+0x78>
			break; // since fastPtr is NULL we reached the tail
		}

		fastPtr = LIST_NEXT(fastPtr); //advance and check again
f012e2a8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012e2ab:	8b 00                	mov    (%eax),%eax
f012e2ad:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (fastPtr == slowPtr) {
f012e2b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012e2b3:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012e2b6:	75 12                	jne    f012e2ca <detect_loop_in_FrameInfo_list+0x62>
			cprintf("loop detected in list\n");
f012e2b8:	83 ec 0c             	sub    $0xc,%esp
f012e2bb:	68 e8 b8 13 f0       	push   $0xf013b8e8
f012e2c0:	e8 6c 2b fd ff       	call   f0100e31 <cprintf>
f012e2c5:	83 c4 10             	add    $0x10,%esp
			break;
f012e2c8:	eb 17                	jmp    f012e2e1 <detect_loop_in_FrameInfo_list+0x79>
		}

		slowPtr = LIST_NEXT(slowPtr); // advance the slow pointer only once
f012e2ca:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012e2cd:	8b 00                	mov    (%eax),%eax
f012e2cf:	89 45 f4             	mov    %eax,-0xc(%ebp)
{
	struct  FrameInfo * slowPtr = LIST_FIRST(fi_list);
	struct  FrameInfo * fastPtr = LIST_FIRST(fi_list);


	while (slowPtr && fastPtr) {
f012e2d2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f012e2d6:	74 09                	je     f012e2e1 <detect_loop_in_FrameInfo_list+0x79>
f012e2d8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012e2dc:	75 a2                	jne    f012e280 <detect_loop_in_FrameInfo_list+0x18>
f012e2de:	eb 01                	jmp    f012e2e1 <detect_loop_in_FrameInfo_list+0x79>
			cprintf("loop detected in modiflist\n");
			break;
		}

		if (fastPtr == NULL) {
			break; // since fastPtr is NULL we reached the tail
f012e2e0:	90                   	nop
			break;
		}

		slowPtr = LIST_NEXT(slowPtr); // advance the slow pointer only once
	}
	cprintf("finished  loop detection\n");
f012e2e1:	83 ec 0c             	sub    $0xc,%esp
f012e2e4:	68 ff b8 13 f0       	push   $0xf013b8ff
f012e2e9:	e8 43 2b fd ff       	call   f0100e31 <cprintf>
f012e2ee:	83 c4 10             	add    $0x10,%esp
}
f012e2f1:	90                   	nop
f012e2f2:	c9                   	leave  
f012e2f3:	c3                   	ret    

f012e2f4 <scarce_memory>:

void scarce_memory()
{
f012e2f4:	55                   	push   %ebp
f012e2f5:	89 e5                	mov    %esp,%ebp
f012e2f7:	83 ec 28             	sub    $0x28,%esp
	uint32 total_size_tobe_allocated = ((100 - memory_scarce_threshold_percentage)*number_of_frames)/100;
f012e2fa:	a1 c0 a9 2b f0       	mov    0xf02ba9c0,%eax
f012e2ff:	ba 64 00 00 00       	mov    $0x64,%edx
f012e304:	29 c2                	sub    %eax,%edx
f012e306:	a1 d0 cd 2b f0       	mov    0xf02bcdd0,%eax
f012e30b:	0f af c2             	imul   %edx,%eax
f012e30e:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f012e313:	f7 e2                	mul    %edx
f012e315:	89 d0                	mov    %edx,%eax
f012e317:	c1 e8 05             	shr    $0x5,%eax
f012e31a:	89 45 f4             	mov    %eax,-0xc(%ebp)
//	cprintf("total_size_tobe_allocated %d\n", number_of_frames);
	if (((100 - memory_scarce_threshold_percentage)*number_of_frames) % 100 > 0)
f012e31d:	a1 c0 a9 2b f0       	mov    0xf02ba9c0,%eax
f012e322:	ba 64 00 00 00       	mov    $0x64,%edx
f012e327:	29 c2                	sub    %eax,%edx
f012e329:	a1 d0 cd 2b f0       	mov    0xf02bcdd0,%eax
f012e32e:	89 d1                	mov    %edx,%ecx
f012e330:	0f af c8             	imul   %eax,%ecx
f012e333:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f012e338:	f7 e1                	mul    %ecx
f012e33a:	c1 ea 05             	shr    $0x5,%edx
f012e33d:	89 d0                	mov    %edx,%eax
f012e33f:	c1 e0 02             	shl    $0x2,%eax
f012e342:	01 d0                	add    %edx,%eax
f012e344:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012e34b:	01 d0                	add    %edx,%eax
f012e34d:	c1 e0 02             	shl    $0x2,%eax
f012e350:	29 c1                	sub    %eax,%ecx
f012e352:	89 ca                	mov    %ecx,%edx
f012e354:	85 d2                	test   %edx,%edx
f012e356:	74 03                	je     f012e35b <scarce_memory+0x67>
		total_size_tobe_allocated++;
f012e358:	ff 45 f4             	incl   -0xc(%ebp)

	uint32 size_of_already_allocated = number_of_frames - LIST_SIZE(&free_frame_list) ;
f012e35b:	8b 15 d0 cd 2b f0    	mov    0xf02bcdd0,%edx
f012e361:	a1 e4 cd 2b f0       	mov    0xf02bcde4,%eax
f012e366:	29 c2                	sub    %eax,%edx
f012e368:	89 d0                	mov    %edx,%eax
f012e36a:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 size_tobe_allocated = total_size_tobe_allocated - size_of_already_allocated;
f012e36d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012e370:	2b 45 ec             	sub    -0x14(%ebp),%eax
f012e373:	89 45 e8             	mov    %eax,-0x18(%ebp)
//	cprintf("size_of_already_allocated %d\n", size_of_already_allocated);
//	cprintf("size to be allocated %d\n", size_tobe_allocated);
	int i = 0 ;
f012e376:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	struct FrameInfo* ptr_tmp_FI ;
	for (; i <= size_tobe_allocated ; i++)
f012e37d:	eb 12                	jmp    f012e391 <scarce_memory+0x9d>
	{
		allocate_frame(&ptr_tmp_FI) ;
f012e37f:	83 ec 0c             	sub    $0xc,%esp
f012e382:	8d 45 e4             	lea    -0x1c(%ebp),%eax
f012e385:	50                   	push   %eax
f012e386:	e8 9a 8f fd ff       	call   f0107325 <allocate_frame>
f012e38b:	83 c4 10             	add    $0x10,%esp
	uint32 size_tobe_allocated = total_size_tobe_allocated - size_of_already_allocated;
//	cprintf("size_of_already_allocated %d\n", size_of_already_allocated);
//	cprintf("size to be allocated %d\n", size_tobe_allocated);
	int i = 0 ;
	struct FrameInfo* ptr_tmp_FI ;
	for (; i <= size_tobe_allocated ; i++)
f012e38e:	ff 45 f0             	incl   -0x10(%ebp)
f012e391:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012e394:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f012e397:	76 e6                	jbe    f012e37f <scarce_memory+0x8b>
	{
		allocate_frame(&ptr_tmp_FI) ;
	}
}
f012e399:	90                   	nop
f012e39a:	c9                   	leave  
f012e39b:	c3                   	ret    

f012e39c <calc_no_pages_tobe_removed_from_ready_exit_queues>:

uint32 calc_no_pages_tobe_removed_from_ready_exit_queues(uint32 WS_or_MEMORY_flag)
{
f012e39c:	55                   	push   %ebp
f012e39d:	89 e5                	mov    %esp,%ebp
f012e39f:	83 ec 38             	sub    $0x38,%esp
	uint32 no_of_pages_tobe_removed_from_ready = 0;
f012e3a2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 no_of_pages_tobe_removed_from_exit = 0;
f012e3a9:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	uint32 no_of_pages_tobe_removed_from_curenv = 0;
f012e3b0:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	if(WS_or_MEMORY_flag == 1)	// THEN MEMORY SHALL BE FREED
f012e3b7:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f012e3bb:	0f 85 d3 01 00 00    	jne    f012e594 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x1f8>
	{
		for(int i = 0; i < num_of_ready_queues; i++)
f012e3c1:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f012e3c8:	e9 e1 00 00 00       	jmp    f012e4ae <calc_no_pages_tobe_removed_from_ready_exit_queues+0x112>
		{
			struct Env * ptr_ready_env = NULL;
f012e3cd:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
			LIST_FOREACH(ptr_ready_env, &(env_ready_queues[i]))
f012e3d4:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012e3d7:	c1 e0 04             	shl    $0x4,%eax
f012e3da:	05 60 4a 25 f0       	add    $0xf0254a60,%eax
f012e3df:	8b 00                	mov    (%eax),%eax
f012e3e1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f012e3e4:	e9 82 00 00 00       	jmp    f012e46b <calc_no_pages_tobe_removed_from_ready_exit_queues+0xcf>
			{
				int num_of_pages_in_WS = env_page_ws_get_size(ptr_ready_env);
f012e3e9:	83 ec 0c             	sub    $0xc,%esp
f012e3ec:	ff 75 e4             	pushl  -0x1c(%ebp)
f012e3ef:	e8 d8 a2 fd ff       	call   f01086cc <env_page_ws_get_size>
f012e3f4:	83 c4 10             	add    $0x10,%esp
f012e3f7:	89 45 d0             	mov    %eax,-0x30(%ebp)
				int num_of_pages_to_be_removed = curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS / 100;
f012e3fa:	a1 74 41 25 f0       	mov    0xf0254174,%eax
f012e3ff:	8b 90 70 da 01 00    	mov    0x1da70(%eax),%edx
f012e405:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012e408:	0f af c2             	imul   %edx,%eax
f012e40b:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f012e410:	f7 e2                	mul    %edx
f012e412:	89 d0                	mov    %edx,%eax
f012e414:	c1 e8 05             	shr    $0x5,%eax
f012e417:	89 45 e0             	mov    %eax,-0x20(%ebp)
				if ((curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS) % 100 > 0)
f012e41a:	a1 74 41 25 f0       	mov    0xf0254174,%eax
f012e41f:	8b 90 70 da 01 00    	mov    0x1da70(%eax),%edx
f012e425:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012e428:	89 d1                	mov    %edx,%ecx
f012e42a:	0f af c8             	imul   %eax,%ecx
f012e42d:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f012e432:	f7 e1                	mul    %ecx
f012e434:	c1 ea 05             	shr    $0x5,%edx
f012e437:	89 d0                	mov    %edx,%eax
f012e439:	c1 e0 02             	shl    $0x2,%eax
f012e43c:	01 d0                	add    %edx,%eax
f012e43e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012e445:	01 d0                	add    %edx,%eax
f012e447:	c1 e0 02             	shl    $0x2,%eax
f012e44a:	29 c1                	sub    %eax,%ecx
f012e44c:	89 ca                	mov    %ecx,%edx
f012e44e:	85 d2                	test   %edx,%edx
f012e450:	74 03                	je     f012e455 <calc_no_pages_tobe_removed_from_ready_exit_queues+0xb9>
					num_of_pages_to_be_removed++;
f012e452:	ff 45 e0             	incl   -0x20(%ebp)
				no_of_pages_tobe_removed_from_ready += num_of_pages_to_be_removed;
f012e455:	8b 45 e0             	mov    -0x20(%ebp),%eax
f012e458:	01 45 f4             	add    %eax,-0xc(%ebp)
	if(WS_or_MEMORY_flag == 1)	// THEN MEMORY SHALL BE FREED
	{
		for(int i = 0; i < num_of_ready_queues; i++)
		{
			struct Env * ptr_ready_env = NULL;
			LIST_FOREACH(ptr_ready_env, &(env_ready_queues[i]))
f012e45b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012e45e:	c1 e0 04             	shl    $0x4,%eax
f012e461:	05 68 4a 25 f0       	add    $0xf0254a68,%eax
f012e466:	8b 00                	mov    (%eax),%eax
f012e468:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f012e46b:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012e46f:	74 08                	je     f012e479 <calc_no_pages_tobe_removed_from_ready_exit_queues+0xdd>
f012e471:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f012e474:	8b 40 44             	mov    0x44(%eax),%eax
f012e477:	eb 05                	jmp    f012e47e <calc_no_pages_tobe_removed_from_ready_exit_queues+0xe2>
f012e479:	b8 00 00 00 00       	mov    $0x0,%eax
f012e47e:	8b 55 e8             	mov    -0x18(%ebp),%edx
f012e481:	c1 e2 04             	shl    $0x4,%edx
f012e484:	81 c2 68 4a 25 f0    	add    $0xf0254a68,%edx
f012e48a:	89 02                	mov    %eax,(%edx)
f012e48c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012e48f:	c1 e0 04             	shl    $0x4,%eax
f012e492:	05 68 4a 25 f0       	add    $0xf0254a68,%eax
f012e497:	8b 00                	mov    (%eax),%eax
f012e499:	85 c0                	test   %eax,%eax
f012e49b:	0f 85 48 ff ff ff    	jne    f012e3e9 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x4d>
f012e4a1:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012e4a5:	0f 85 3e ff ff ff    	jne    f012e3e9 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x4d>
	uint32 no_of_pages_tobe_removed_from_ready = 0;
	uint32 no_of_pages_tobe_removed_from_exit = 0;
	uint32 no_of_pages_tobe_removed_from_curenv = 0;
	if(WS_or_MEMORY_flag == 1)	// THEN MEMORY SHALL BE FREED
	{
		for(int i = 0; i < num_of_ready_queues; i++)
f012e4ab:	ff 45 e8             	incl   -0x18(%ebp)
f012e4ae:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f012e4b3:	0f b6 c0             	movzbl %al,%eax
f012e4b6:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f012e4b9:	0f 8f 0e ff ff ff    	jg     f012e3cd <calc_no_pages_tobe_removed_from_ready_exit_queues+0x31>
					num_of_pages_to_be_removed++;
				no_of_pages_tobe_removed_from_ready += num_of_pages_to_be_removed;
			}
		}

		struct Env * ptr_exit_env = NULL;
f012e4bf:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		LIST_FOREACH(ptr_exit_env, &env_exit_queue)
f012e4c6:	a1 c4 a9 2b f0       	mov    0xf02ba9c4,%eax
f012e4cb:	89 45 dc             	mov    %eax,-0x24(%ebp)
f012e4ce:	eb 19                	jmp    f012e4e9 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x14d>
		{
			no_of_pages_tobe_removed_from_exit += env_page_ws_get_size(ptr_exit_env);
f012e4d0:	83 ec 0c             	sub    $0xc,%esp
f012e4d3:	ff 75 dc             	pushl  -0x24(%ebp)
f012e4d6:	e8 f1 a1 fd ff       	call   f01086cc <env_page_ws_get_size>
f012e4db:	83 c4 10             	add    $0x10,%esp
f012e4de:	01 45 f0             	add    %eax,-0x10(%ebp)
				no_of_pages_tobe_removed_from_ready += num_of_pages_to_be_removed;
			}
		}

		struct Env * ptr_exit_env = NULL;
		LIST_FOREACH(ptr_exit_env, &env_exit_queue)
f012e4e1:	a1 cc a9 2b f0       	mov    0xf02ba9cc,%eax
f012e4e6:	89 45 dc             	mov    %eax,-0x24(%ebp)
f012e4e9:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f012e4ed:	74 08                	je     f012e4f7 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x15b>
f012e4ef:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012e4f2:	8b 40 44             	mov    0x44(%eax),%eax
f012e4f5:	eb 05                	jmp    f012e4fc <calc_no_pages_tobe_removed_from_ready_exit_queues+0x160>
f012e4f7:	b8 00 00 00 00       	mov    $0x0,%eax
f012e4fc:	a3 cc a9 2b f0       	mov    %eax,0xf02ba9cc
f012e501:	a1 cc a9 2b f0       	mov    0xf02ba9cc,%eax
f012e506:	85 c0                	test   %eax,%eax
f012e508:	75 c6                	jne    f012e4d0 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x134>
f012e50a:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f012e50e:	75 c0                	jne    f012e4d0 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x134>
		{
			no_of_pages_tobe_removed_from_exit += env_page_ws_get_size(ptr_exit_env);
		}

		if(curenv != NULL)
f012e510:	a1 74 41 25 f0       	mov    0xf0254174,%eax
f012e515:	85 c0                	test   %eax,%eax
f012e517:	0f 84 ec 00 00 00    	je     f012e609 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x26d>
		{
			int num_of_pages_in_WS = env_page_ws_get_size(curenv);
f012e51d:	a1 74 41 25 f0       	mov    0xf0254174,%eax
f012e522:	83 ec 0c             	sub    $0xc,%esp
f012e525:	50                   	push   %eax
f012e526:	e8 a1 a1 fd ff       	call   f01086cc <env_page_ws_get_size>
f012e52b:	83 c4 10             	add    $0x10,%esp
f012e52e:	89 45 cc             	mov    %eax,-0x34(%ebp)
			int num_of_pages_to_be_removed = curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS / 100;
f012e531:	a1 74 41 25 f0       	mov    0xf0254174,%eax
f012e536:	8b 90 70 da 01 00    	mov    0x1da70(%eax),%edx
f012e53c:	8b 45 cc             	mov    -0x34(%ebp),%eax
f012e53f:	0f af c2             	imul   %edx,%eax
f012e542:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f012e547:	f7 e2                	mul    %edx
f012e549:	89 d0                	mov    %edx,%eax
f012e54b:	c1 e8 05             	shr    $0x5,%eax
f012e54e:	89 45 d8             	mov    %eax,-0x28(%ebp)
			if ((curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS) % 100 > 0)
f012e551:	a1 74 41 25 f0       	mov    0xf0254174,%eax
f012e556:	8b 90 70 da 01 00    	mov    0x1da70(%eax),%edx
f012e55c:	8b 45 cc             	mov    -0x34(%ebp),%eax
f012e55f:	89 d1                	mov    %edx,%ecx
f012e561:	0f af c8             	imul   %eax,%ecx
f012e564:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f012e569:	f7 e1                	mul    %ecx
f012e56b:	c1 ea 05             	shr    $0x5,%edx
f012e56e:	89 d0                	mov    %edx,%eax
f012e570:	c1 e0 02             	shl    $0x2,%eax
f012e573:	01 d0                	add    %edx,%eax
f012e575:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012e57c:	01 d0                	add    %edx,%eax
f012e57e:	c1 e0 02             	shl    $0x2,%eax
f012e581:	29 c1                	sub    %eax,%ecx
f012e583:	89 ca                	mov    %ecx,%edx
f012e585:	85 d2                	test   %edx,%edx
f012e587:	74 03                	je     f012e58c <calc_no_pages_tobe_removed_from_ready_exit_queues+0x1f0>
				num_of_pages_to_be_removed++;
f012e589:	ff 45 d8             	incl   -0x28(%ebp)
			no_of_pages_tobe_removed_from_curenv = num_of_pages_to_be_removed;
f012e58c:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012e58f:	89 45 ec             	mov    %eax,-0x14(%ebp)
f012e592:	eb 75                	jmp    f012e609 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x26d>
		}
	}
	else	// THEN RAPID PROCESS SHALL BE FREED ONLY
	{
		int num_of_pages_in_WS = env_page_ws_get_size(curenv);
f012e594:	a1 74 41 25 f0       	mov    0xf0254174,%eax
f012e599:	83 ec 0c             	sub    $0xc,%esp
f012e59c:	50                   	push   %eax
f012e59d:	e8 2a a1 fd ff       	call   f01086cc <env_page_ws_get_size>
f012e5a2:	83 c4 10             	add    $0x10,%esp
f012e5a5:	89 45 c8             	mov    %eax,-0x38(%ebp)
		int num_of_pages_to_be_removed = curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS / 100;
f012e5a8:	a1 74 41 25 f0       	mov    0xf0254174,%eax
f012e5ad:	8b 90 70 da 01 00    	mov    0x1da70(%eax),%edx
f012e5b3:	8b 45 c8             	mov    -0x38(%ebp),%eax
f012e5b6:	0f af c2             	imul   %edx,%eax
f012e5b9:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f012e5be:	f7 e2                	mul    %edx
f012e5c0:	89 d0                	mov    %edx,%eax
f012e5c2:	c1 e8 05             	shr    $0x5,%eax
f012e5c5:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		if ((curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS) % 100 > 0)
f012e5c8:	a1 74 41 25 f0       	mov    0xf0254174,%eax
f012e5cd:	8b 90 70 da 01 00    	mov    0x1da70(%eax),%edx
f012e5d3:	8b 45 c8             	mov    -0x38(%ebp),%eax
f012e5d6:	89 d1                	mov    %edx,%ecx
f012e5d8:	0f af c8             	imul   %eax,%ecx
f012e5db:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f012e5e0:	f7 e1                	mul    %ecx
f012e5e2:	c1 ea 05             	shr    $0x5,%edx
f012e5e5:	89 d0                	mov    %edx,%eax
f012e5e7:	c1 e0 02             	shl    $0x2,%eax
f012e5ea:	01 d0                	add    %edx,%eax
f012e5ec:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012e5f3:	01 d0                	add    %edx,%eax
f012e5f5:	c1 e0 02             	shl    $0x2,%eax
f012e5f8:	29 c1                	sub    %eax,%ecx
f012e5fa:	89 ca                	mov    %ecx,%edx
f012e5fc:	85 d2                	test   %edx,%edx
f012e5fe:	74 03                	je     f012e603 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x267>
			num_of_pages_to_be_removed++;
f012e600:	ff 45 d4             	incl   -0x2c(%ebp)
		no_of_pages_tobe_removed_from_curenv = num_of_pages_to_be_removed;
f012e603:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012e606:	89 45 ec             	mov    %eax,-0x14(%ebp)
	}

	return no_of_pages_tobe_removed_from_curenv + no_of_pages_tobe_removed_from_ready + no_of_pages_tobe_removed_from_exit;
f012e609:	8b 55 ec             	mov    -0x14(%ebp),%edx
f012e60c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012e60f:	01 c2                	add    %eax,%edx
f012e611:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012e614:	01 d0                	add    %edx,%eax
}
f012e616:	c9                   	leave  
f012e617:	c3                   	ret    

f012e618 <schenv>:


void schenv()
{
f012e618:	55                   	push   %ebp
f012e619:	89 e5                	mov    %esp,%ebp
f012e61b:	83 ec 18             	sub    $0x18,%esp
	__nl = 0;
f012e61e:	c6 05 6c ce 2b f0 00 	movb   $0x0,0xf02bce6c
	__ne = NULL;
f012e625:	c7 05 f4 cd 2b f0 00 	movl   $0x0,0xf02bcdf4
f012e62c:	00 00 00 
	for (int i = 0; i < num_of_ready_queues; ++i)
f012e62f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012e636:	eb 3a                	jmp    f012e672 <schenv+0x5a>
	{
		if (queue_size(&(env_ready_queues[i])))
f012e638:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012e63b:	c1 e0 04             	shl    $0x4,%eax
f012e63e:	05 60 4a 25 f0       	add    $0xf0254a60,%eax
f012e643:	83 ec 0c             	sub    $0xc,%esp
f012e646:	50                   	push   %eax
f012e647:	e8 61 67 fd ff       	call   f0104dad <queue_size>
f012e64c:	83 c4 10             	add    $0x10,%esp
f012e64f:	85 c0                	test   %eax,%eax
f012e651:	74 1c                	je     f012e66f <schenv+0x57>
		{
			__ne = LIST_LAST(&(env_ready_queues[i]));
f012e653:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012e656:	c1 e0 04             	shl    $0x4,%eax
f012e659:	05 64 4a 25 f0       	add    $0xf0254a64,%eax
f012e65e:	8b 00                	mov    (%eax),%eax
f012e660:	a3 f4 cd 2b f0       	mov    %eax,0xf02bcdf4
			__nl = i;
f012e665:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012e668:	a2 6c ce 2b f0       	mov    %al,0xf02bce6c
			break;
f012e66d:	eb 10                	jmp    f012e67f <schenv+0x67>

void schenv()
{
	__nl = 0;
	__ne = NULL;
	for (int i = 0; i < num_of_ready_queues; ++i)
f012e66f:	ff 45 f4             	incl   -0xc(%ebp)
f012e672:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f012e677:	0f b6 c0             	movzbl %al,%eax
f012e67a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012e67d:	7f b9                	jg     f012e638 <schenv+0x20>
			__ne = LIST_LAST(&(env_ready_queues[i]));
			__nl = i;
			break;
		}
	}
	if (curenv != NULL)
f012e67f:	a1 74 41 25 f0       	mov    0xf0254174,%eax
f012e684:	85 c0                	test   %eax,%eax
f012e686:	0f 84 86 00 00 00    	je     f012e712 <schenv+0xfa>
	{
		if (__ne != NULL)
f012e68c:	a1 f4 cd 2b f0       	mov    0xf02bcdf4,%eax
f012e691:	85 c0                	test   %eax,%eax
f012e693:	74 4b                	je     f012e6e0 <schenv+0xc8>
		{
			if ((__pl + 1) < __nl)
f012e695:	a0 58 4a 25 f0       	mov    0xf0254a58,%al
f012e69a:	0f b6 c0             	movzbl %al,%eax
f012e69d:	8d 50 01             	lea    0x1(%eax),%edx
f012e6a0:	a0 6c ce 2b f0       	mov    0xf02bce6c,%al
f012e6a5:	0f b6 c0             	movzbl %al,%eax
f012e6a8:	39 c2                	cmp    %eax,%edx
f012e6aa:	7d 66                	jge    f012e712 <schenv+0xfa>
			{
				__ne = curenv;
f012e6ac:	a1 74 41 25 f0       	mov    0xf0254174,%eax
f012e6b1:	a3 f4 cd 2b f0       	mov    %eax,0xf02bcdf4
				__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
f012e6b6:	a0 58 4a 25 f0       	mov    0xf0254a58,%al
f012e6bb:	0f b6 c0             	movzbl %al,%eax
f012e6be:	8a 15 44 ce 2b f0    	mov    0xf02bce44,%dl
f012e6c4:	0f b6 d2             	movzbl %dl,%edx
f012e6c7:	4a                   	dec    %edx
f012e6c8:	39 d0                	cmp    %edx,%eax
f012e6ca:	7d 08                	jge    f012e6d4 <schenv+0xbc>
f012e6cc:	a0 58 4a 25 f0       	mov    0xf0254a58,%al
f012e6d1:	40                   	inc    %eax
f012e6d2:	eb 05                	jmp    f012e6d9 <schenv+0xc1>
f012e6d4:	a0 58 4a 25 f0       	mov    0xf0254a58,%al
f012e6d9:	a2 6c ce 2b f0       	mov    %al,0xf02bce6c
		{
			__ne = curenv;
			__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
		}
	}
}
f012e6de:	eb 32                	jmp    f012e712 <schenv+0xfa>
				__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
			}
		}
		else
		{
			__ne = curenv;
f012e6e0:	a1 74 41 25 f0       	mov    0xf0254174,%eax
f012e6e5:	a3 f4 cd 2b f0       	mov    %eax,0xf02bcdf4
			__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
f012e6ea:	a0 58 4a 25 f0       	mov    0xf0254a58,%al
f012e6ef:	0f b6 c0             	movzbl %al,%eax
f012e6f2:	8a 15 44 ce 2b f0    	mov    0xf02bce44,%dl
f012e6f8:	0f b6 d2             	movzbl %dl,%edx
f012e6fb:	4a                   	dec    %edx
f012e6fc:	39 d0                	cmp    %edx,%eax
f012e6fe:	7d 08                	jge    f012e708 <schenv+0xf0>
f012e700:	a0 58 4a 25 f0       	mov    0xf0254a58,%al
f012e705:	40                   	inc    %eax
f012e706:	eb 05                	jmp    f012e70d <schenv+0xf5>
f012e708:	a0 58 4a 25 f0       	mov    0xf0254a58,%al
f012e70d:	a2 6c ce 2b f0       	mov    %al,0xf02bce6c
		}
	}
}
f012e712:	90                   	nop
f012e713:	c9                   	leave  
f012e714:	c3                   	ret    

f012e715 <chksch>:

void chksch(uint8 onoff)
{
f012e715:	55                   	push   %ebp
f012e716:	89 e5                	mov    %esp,%ebp
f012e718:	83 ec 04             	sub    $0x4,%esp
f012e71b:	8b 45 08             	mov    0x8(%ebp),%eax
f012e71e:	88 45 fc             	mov    %al,-0x4(%ebp)
	__pe = NULL;
f012e721:	c7 05 68 ce 2b f0 00 	movl   $0x0,0xf02bce68
f012e728:	00 00 00 
	__ne = NULL;
f012e72b:	c7 05 f4 cd 2b f0 00 	movl   $0x0,0xf02bcdf4
f012e732:	00 00 00 
	__pl = 0 ;
f012e735:	c6 05 58 4a 25 f0 00 	movb   $0x0,0xf0254a58
	__nl = 0 ;
f012e73c:	c6 05 6c ce 2b f0 00 	movb   $0x0,0xf02bce6c
	__chkstatus = onoff;
f012e743:	8a 45 fc             	mov    -0x4(%ebp),%al
f012e746:	a2 f0 cd 2b f0       	mov    %al,0xf02bcdf0
}
f012e74b:	90                   	nop
f012e74c:	c9                   	leave  
f012e74d:	c3                   	ret    

f012e74e <chk1>:
void chk1()
{
f012e74e:	55                   	push   %ebp
f012e74f:	89 e5                	mov    %esp,%ebp
f012e751:	83 ec 08             	sub    $0x8,%esp
	if (__chkstatus == 0)
f012e754:	a0 f0 cd 2b f0       	mov    0xf02bcdf0,%al
f012e759:	84 c0                	test   %al,%al
f012e75b:	74 2b                	je     f012e788 <chk1+0x3a>
		return ;
	__pe = curenv;
f012e75d:	a1 74 41 25 f0       	mov    0xf0254174,%eax
f012e762:	a3 68 ce 2b f0       	mov    %eax,0xf02bce68
	__pl = __nl ;
f012e767:	a0 6c ce 2b f0       	mov    0xf02bce6c,%al
f012e76c:	a2 58 4a 25 f0       	mov    %al,0xf0254a58
	if (__pe == NULL)
f012e771:	a1 68 ce 2b f0       	mov    0xf02bce68,%eax
f012e776:	85 c0                	test   %eax,%eax
f012e778:	75 07                	jne    f012e781 <chk1+0x33>
	{
		__pl = 0;
f012e77a:	c6 05 58 4a 25 f0 00 	movb   $0x0,0xf0254a58
	}
	//cprintf("chk1: current = %s @ level %d\n", __pe == NULL? "NULL" : __pe->prog_name, __pl);
	schenv();
f012e781:	e8 92 fe ff ff       	call   f012e618 <schenv>
f012e786:	eb 01                	jmp    f012e789 <chk1+0x3b>
	__chkstatus = onoff;
}
void chk1()
{
	if (__chkstatus == 0)
		return ;
f012e788:	90                   	nop
	{
		__pl = 0;
	}
	//cprintf("chk1: current = %s @ level %d\n", __pe == NULL? "NULL" : __pe->prog_name, __pl);
	schenv();
}
f012e789:	c9                   	leave  
f012e78a:	c3                   	ret    

f012e78b <chk2>:
void chk2(struct Env* __se)
{
f012e78b:	55                   	push   %ebp
f012e78c:	89 e5                	mov    %esp,%ebp
f012e78e:	53                   	push   %ebx
f012e78f:	83 ec 14             	sub    $0x14,%esp
	if (__chkstatus == 0)
f012e792:	a0 f0 cd 2b f0       	mov    0xf02bcdf0,%al
f012e797:	84 c0                	test   %al,%al
f012e799:	0f 84 35 02 00 00    	je     f012e9d4 <chk2+0x249>
		return ;

	//cprintf("chk2: next = %s @ level %d\n", __ne == NULL? "NULL" : __ne->prog_name, __nl);

	assert_endall(__se == __ne);
f012e79f:	a1 f4 cd 2b f0       	mov    0xf02bcdf4,%eax
f012e7a4:	39 45 08             	cmp    %eax,0x8(%ebp)
f012e7a7:	74 19                	je     f012e7c2 <chk2+0x37>
f012e7a9:	68 19 b9 13 f0       	push   $0xf013b919
f012e7ae:	68 26 b9 13 f0       	push   $0xf013b926
f012e7b3:	68 f8 00 00 00       	push   $0xf8
f012e7b8:	68 6b b8 13 f0       	push   $0xf013b86b
f012e7bd:	e8 a4 1a fd ff       	call   f0100266 <_panic_all>
	//cprintf("%d - %d\n", kclock_read_cnt0_latch() , TIMER_DIV((1000/quantums[__nl])));

	if (__ne != NULL)
f012e7c2:	a1 f4 cd 2b f0       	mov    0xf02bcdf4,%eax
f012e7c7:	85 c0                	test   %eax,%eax
f012e7c9:	0f 84 1b 01 00 00    	je     f012e8ea <chk2+0x15f>
	{
		uint16 upper = TIMER_DIV((1000/quantums[__nl])) ;
f012e7cf:	a0 6c ce 2b f0       	mov    0xf02bce6c,%al
f012e7d4:	0f b6 c0             	movzbl %al,%eax
f012e7d7:	8a 80 e8 cd 2b f0    	mov    -0xfd43218(%eax),%al
f012e7dd:	0f b6 d8             	movzbl %al,%ebx
f012e7e0:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f012e7e5:	99                   	cltd   
f012e7e6:	f7 fb                	idiv   %ebx
f012e7e8:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f012e7ee:	a0 6c ce 2b f0       	mov    0xf02bce6c,%al
f012e7f3:	0f b6 c0             	movzbl %al,%eax
f012e7f6:	8a 80 e8 cd 2b f0    	mov    -0xfd43218(%eax),%al
f012e7fc:	0f b6 d8             	movzbl %al,%ebx
f012e7ff:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f012e804:	99                   	cltd   
f012e805:	f7 fb                	idiv   %ebx
f012e807:	89 c3                	mov    %eax,%ebx
f012e809:	89 c8                	mov    %ecx,%eax
f012e80b:	99                   	cltd   
f012e80c:	f7 fb                	idiv   %ebx
f012e80e:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
		upper = upper % 2 == 1? upper+1 : upper ;
f012e812:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f012e816:	83 e0 01             	and    $0x1,%eax
f012e819:	66 85 c0             	test   %ax,%ax
f012e81c:	74 07                	je     f012e825 <chk2+0x9a>
f012e81e:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f012e822:	40                   	inc    %eax
f012e823:	eb 04                	jmp    f012e829 <chk2+0x9e>
f012e825:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f012e829:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
		uint16 lower = 90 * upper / 100 ;
f012e82d:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
f012e831:	89 d0                	mov    %edx,%eax
f012e833:	c1 e0 02             	shl    $0x2,%eax
f012e836:	01 d0                	add    %edx,%eax
f012e838:	01 c0                	add    %eax,%eax
f012e83a:	01 d0                	add    %edx,%eax
f012e83c:	c1 e0 02             	shl    $0x2,%eax
f012e83f:	01 d0                	add    %edx,%eax
f012e841:	01 c0                	add    %eax,%eax
f012e843:	89 c1                	mov    %eax,%ecx
f012e845:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f012e84a:	f7 e9                	imul   %ecx
f012e84c:	c1 fa 05             	sar    $0x5,%edx
f012e84f:	89 c8                	mov    %ecx,%eax
f012e851:	c1 f8 1f             	sar    $0x1f,%eax
f012e854:	29 c2                	sub    %eax,%edx
f012e856:	89 d0                	mov    %edx,%eax
f012e858:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
		uint16 current = kclock_read_cnt0();
f012e85c:	e8 52 64 fd ff       	call   f0104cb3 <kclock_read_cnt0>
f012e861:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
		//cprintf("current = %d, lower = %d, upper = %d\n", current, lower, upper);
		assert_endall(current > lower && current <= upper) ;
f012e865:	66 8b 45 ea          	mov    -0x16(%ebp),%ax
f012e869:	66 3b 45 ec          	cmp    -0x14(%ebp),%ax
f012e86d:	76 0a                	jbe    f012e879 <chk2+0xee>
f012e86f:	66 8b 45 ea          	mov    -0x16(%ebp),%ax
f012e873:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f012e877:	76 19                	jbe    f012e892 <chk2+0x107>
f012e879:	68 3c b9 13 f0       	push   $0xf013b93c
f012e87e:	68 26 b9 13 f0       	push   $0xf013b926
f012e883:	68 02 01 00 00       	push   $0x102
f012e888:	68 6b b8 13 f0       	push   $0xf013b86b
f012e88d:	e8 d4 19 fd ff       	call   f0100266 <_panic_all>

		for (int i = 0; i < num_of_ready_queues; ++i)
f012e892:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012e899:	eb 42                	jmp    f012e8dd <chk2+0x152>
		{
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __ne->env_id) == NULL);
f012e89b:	a1 f4 cd 2b f0       	mov    0xf02bcdf4,%eax
f012e8a0:	8b 40 4c             	mov    0x4c(%eax),%eax
f012e8a3:	89 c2                	mov    %eax,%edx
f012e8a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012e8a8:	c1 e0 04             	shl    $0x4,%eax
f012e8ab:	05 60 4a 25 f0       	add    $0xf0254a60,%eax
f012e8b0:	83 ec 08             	sub    $0x8,%esp
f012e8b3:	52                   	push   %edx
f012e8b4:	50                   	push   %eax
f012e8b5:	e8 0d 67 fd ff       	call   f0104fc7 <find_env_in_queue>
f012e8ba:	83 c4 10             	add    $0x10,%esp
f012e8bd:	85 c0                	test   %eax,%eax
f012e8bf:	74 19                	je     f012e8da <chk2+0x14f>
f012e8c1:	68 60 b9 13 f0       	push   $0xf013b960
f012e8c6:	68 26 b9 13 f0       	push   $0xf013b926
f012e8cb:	68 06 01 00 00       	push   $0x106
f012e8d0:	68 6b b8 13 f0       	push   $0xf013b86b
f012e8d5:	e8 8c 19 fd ff       	call   f0100266 <_panic_all>
		uint16 lower = 90 * upper / 100 ;
		uint16 current = kclock_read_cnt0();
		//cprintf("current = %d, lower = %d, upper = %d\n", current, lower, upper);
		assert_endall(current > lower && current <= upper) ;

		for (int i = 0; i < num_of_ready_queues; ++i)
f012e8da:	ff 45 f4             	incl   -0xc(%ebp)
f012e8dd:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f012e8e2:	0f b6 c0             	movzbl %al,%eax
f012e8e5:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012e8e8:	7f b1                	jg     f012e89b <chk2+0x110>
		{
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __ne->env_id) == NULL);
		}
	}
	if (__pe != NULL && __pe != __ne)
f012e8ea:	a1 68 ce 2b f0       	mov    0xf02bce68,%eax
f012e8ef:	85 c0                	test   %eax,%eax
f012e8f1:	0f 84 de 00 00 00    	je     f012e9d5 <chk2+0x24a>
f012e8f7:	8b 15 68 ce 2b f0    	mov    0xf02bce68,%edx
f012e8fd:	a1 f4 cd 2b f0       	mov    0xf02bcdf4,%eax
f012e902:	39 c2                	cmp    %eax,%edx
f012e904:	0f 84 cb 00 00 00    	je     f012e9d5 <chk2+0x24a>
	{
		uint8 __tl = __pl == num_of_ready_queues-1 ? __pl : __pl + 1 ;
f012e90a:	a0 58 4a 25 f0       	mov    0xf0254a58,%al
f012e90f:	0f b6 c0             	movzbl %al,%eax
f012e912:	8a 15 44 ce 2b f0    	mov    0xf02bce44,%dl
f012e918:	0f b6 d2             	movzbl %dl,%edx
f012e91b:	4a                   	dec    %edx
f012e91c:	39 d0                	cmp    %edx,%eax
f012e91e:	74 08                	je     f012e928 <chk2+0x19d>
f012e920:	a0 58 4a 25 f0       	mov    0xf0254a58,%al
f012e925:	40                   	inc    %eax
f012e926:	eb 05                	jmp    f012e92d <chk2+0x1a2>
f012e928:	a0 58 4a 25 f0       	mov    0xf0254a58,%al
f012e92d:	88 45 e9             	mov    %al,-0x17(%ebp)
		assert_endall(find_env_in_queue(&(env_ready_queues[__tl]), __pe->env_id) != NULL);
f012e930:	a1 68 ce 2b f0       	mov    0xf02bce68,%eax
f012e935:	8b 40 4c             	mov    0x4c(%eax),%eax
f012e938:	89 c2                	mov    %eax,%edx
f012e93a:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
f012e93e:	c1 e0 04             	shl    $0x4,%eax
f012e941:	05 60 4a 25 f0       	add    $0xf0254a60,%eax
f012e946:	83 ec 08             	sub    $0x8,%esp
f012e949:	52                   	push   %edx
f012e94a:	50                   	push   %eax
f012e94b:	e8 77 66 fd ff       	call   f0104fc7 <find_env_in_queue>
f012e950:	83 c4 10             	add    $0x10,%esp
f012e953:	85 c0                	test   %eax,%eax
f012e955:	75 19                	jne    f012e970 <chk2+0x1e5>
f012e957:	68 a0 b9 13 f0       	push   $0xf013b9a0
f012e95c:	68 26 b9 13 f0       	push   $0xf013b926
f012e961:	68 0c 01 00 00       	push   $0x10c
f012e966:	68 6b b8 13 f0       	push   $0xf013b86b
f012e96b:	e8 f6 18 fd ff       	call   f0100266 <_panic_all>
		for (int i = 0; i < num_of_ready_queues; ++i)
f012e970:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f012e977:	eb 4c                	jmp    f012e9c5 <chk2+0x23a>
		{
			if (i == __tl) continue;
f012e979:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
f012e97d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012e980:	74 3f                	je     f012e9c1 <chk2+0x236>
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __pe->env_id) == NULL) ;
f012e982:	a1 68 ce 2b f0       	mov    0xf02bce68,%eax
f012e987:	8b 40 4c             	mov    0x4c(%eax),%eax
f012e98a:	89 c2                	mov    %eax,%edx
f012e98c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012e98f:	c1 e0 04             	shl    $0x4,%eax
f012e992:	05 60 4a 25 f0       	add    $0xf0254a60,%eax
f012e997:	83 ec 08             	sub    $0x8,%esp
f012e99a:	52                   	push   %edx
f012e99b:	50                   	push   %eax
f012e99c:	e8 26 66 fd ff       	call   f0104fc7 <find_env_in_queue>
f012e9a1:	83 c4 10             	add    $0x10,%esp
f012e9a4:	85 c0                	test   %eax,%eax
f012e9a6:	74 1a                	je     f012e9c2 <chk2+0x237>
f012e9a8:	68 e4 b9 13 f0       	push   $0xf013b9e4
f012e9ad:	68 26 b9 13 f0       	push   $0xf013b926
f012e9b2:	68 10 01 00 00       	push   $0x110
f012e9b7:	68 6b b8 13 f0       	push   $0xf013b86b
f012e9bc:	e8 a5 18 fd ff       	call   f0100266 <_panic_all>
	{
		uint8 __tl = __pl == num_of_ready_queues-1 ? __pl : __pl + 1 ;
		assert_endall(find_env_in_queue(&(env_ready_queues[__tl]), __pe->env_id) != NULL);
		for (int i = 0; i < num_of_ready_queues; ++i)
		{
			if (i == __tl) continue;
f012e9c1:	90                   	nop
	}
	if (__pe != NULL && __pe != __ne)
	{
		uint8 __tl = __pl == num_of_ready_queues-1 ? __pl : __pl + 1 ;
		assert_endall(find_env_in_queue(&(env_ready_queues[__tl]), __pe->env_id) != NULL);
		for (int i = 0; i < num_of_ready_queues; ++i)
f012e9c2:	ff 45 f0             	incl   -0x10(%ebp)
f012e9c5:	a0 44 ce 2b f0       	mov    0xf02bce44,%al
f012e9ca:	0f b6 c0             	movzbl %al,%eax
f012e9cd:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012e9d0:	7f a7                	jg     f012e979 <chk2+0x1ee>
f012e9d2:	eb 01                	jmp    f012e9d5 <chk2+0x24a>
	schenv();
}
void chk2(struct Env* __se)
{
	if (__chkstatus == 0)
		return ;
f012e9d4:	90                   	nop
		{
			if (i == __tl) continue;
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __pe->env_id) == NULL) ;
		}
	}
}
f012e9d5:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f012e9d8:	c9                   	leave  
f012e9d9:	c3                   	ret    

f012e9da <check_boot_pgdir>:
// but it is a pretty good check.
//
uint32 check_va2pa(uint32 *ptr_page_directory, uint32 va);

void check_boot_pgdir()
{
f012e9da:	55                   	push   %ebp
f012e9db:	89 e5                	mov    %esp,%ebp
f012e9dd:	83 ec 18             	sub    $0x18,%esp
		for (i = 0; KERNEL_BASE + i < (uint32)ptr_free_mem; i += PAGE_SIZE)
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}
	#else
	{
		for (i = 0; KERNEL_BASE + i != 0; i += PAGE_SIZE)
f012e9e0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012e9e7:	eb 40                	jmp    f012ea29 <check_boot_pgdir+0x4f>
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
f012e9e9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012e9ec:	8d 90 00 00 00 f0    	lea    -0x10000000(%eax),%edx
f012e9f2:	a1 30 ce 2b f0       	mov    0xf02bce30,%eax
f012e9f7:	83 ec 08             	sub    $0x8,%esp
f012e9fa:	52                   	push   %edx
f012e9fb:	50                   	push   %eax
f012e9fc:	e8 92 01 00 00       	call   f012eb93 <check_va2pa>
f012ea01:	83 c4 10             	add    $0x10,%esp
f012ea04:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012ea07:	74 19                	je     f012ea22 <check_boot_pgdir+0x48>
f012ea09:	68 24 ba 13 f0       	push   $0xf013ba24
f012ea0e:	68 26 b9 13 f0       	push   $0xf013b926
f012ea13:	68 37 01 00 00       	push   $0x137
f012ea18:	68 6b b8 13 f0       	push   $0xf013b86b
f012ea1d:	e8 8e 17 fd ff       	call   f01001b0 <_panic>
		for (i = 0; KERNEL_BASE + i < (uint32)ptr_free_mem; i += PAGE_SIZE)
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}
	#else
	{
		for (i = 0; KERNEL_BASE + i != 0; i += PAGE_SIZE)
f012ea22:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f012ea29:	81 7d f4 00 00 00 10 	cmpl   $0x10000000,-0xc(%ebp)
f012ea30:	75 b7                	jne    f012e9e9 <check_boot_pgdir+0xf>
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}
	#endif
	// check kernel stack
	for (i = 0; i < KERNEL_STACK_SIZE; i += PAGE_SIZE)
f012ea32:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012ea39:	eb 74                	jmp    f012eaaf <check_boot_pgdir+0xd5>
		assert(check_va2pa(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);
f012ea3b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012ea3e:	8d 90 00 80 bf ef    	lea    -0x10408000(%eax),%edx
f012ea44:	a1 30 ce 2b f0       	mov    0xf02bce30,%eax
f012ea49:	83 ec 08             	sub    $0x8,%esp
f012ea4c:	52                   	push   %edx
f012ea4d:	50                   	push   %eax
f012ea4e:	e8 40 01 00 00       	call   f012eb93 <check_va2pa>
f012ea53:	83 c4 10             	add    $0x10,%esp
f012ea56:	c7 45 f0 00 70 18 f0 	movl   $0xf0187000,-0x10(%ebp)
f012ea5d:	81 7d f0 ff ff ff ef 	cmpl   $0xefffffff,-0x10(%ebp)
f012ea64:	77 17                	ja     f012ea7d <check_boot_pgdir+0xa3>
f012ea66:	ff 75 f0             	pushl  -0x10(%ebp)
f012ea69:	68 5c ba 13 f0       	push   $0xf013ba5c
f012ea6e:	68 3c 01 00 00       	push   $0x13c
f012ea73:	68 6b b8 13 f0       	push   $0xf013b86b
f012ea78:	e8 33 17 fd ff       	call   f01001b0 <_panic>
f012ea7d:	8b 55 f0             	mov    -0x10(%ebp),%edx
f012ea80:	8d 8a 00 00 00 10    	lea    0x10000000(%edx),%ecx
f012ea86:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012ea89:	01 ca                	add    %ecx,%edx
f012ea8b:	39 d0                	cmp    %edx,%eax
f012ea8d:	74 19                	je     f012eaa8 <check_boot_pgdir+0xce>
f012ea8f:	68 90 ba 13 f0       	push   $0xf013ba90
f012ea94:	68 26 b9 13 f0       	push   $0xf013b926
f012ea99:	68 3c 01 00 00       	push   $0x13c
f012ea9e:	68 6b b8 13 f0       	push   $0xf013b86b
f012eaa3:	e8 08 17 fd ff       	call   f01001b0 <_panic>
		for (i = 0; KERNEL_BASE + i != 0; i += PAGE_SIZE)
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}
	#endif
	// check kernel stack
	for (i = 0; i < KERNEL_STACK_SIZE; i += PAGE_SIZE)
f012eaa8:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f012eaaf:	81 7d f4 ff 7f 00 00 	cmpl   $0x7fff,-0xc(%ebp)
f012eab6:	76 83                	jbe    f012ea3b <check_boot_pgdir+0x61>
		assert(check_va2pa(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);

	// check for zero/non-zero in PDEs
	for (i = 0; i < NPDENTRIES; i++) {
f012eab8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012eabf:	e9 af 00 00 00       	jmp    f012eb73 <check_boot_pgdir+0x199>
		switch (i) {
f012eac4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012eac7:	3d bb 03 00 00       	cmp    $0x3bb,%eax
f012eacc:	74 11                	je     f012eadf <check_boot_pgdir+0x105>
f012eace:	3d bb 03 00 00       	cmp    $0x3bb,%eax
f012ead3:	72 36                	jb     f012eb0b <check_boot_pgdir+0x131>
f012ead5:	2d bd 03 00 00       	sub    $0x3bd,%eax
f012eada:	83 f8 02             	cmp    $0x2,%eax
f012eadd:	77 2c                	ja     f012eb0b <check_boot_pgdir+0x131>
		case PDX(UVPT):
		case PDX(KERNEL_STACK_TOP-1):
		case PDX(UENVS):
		//2016: READ_ONLY_FRAMES_INFO not valid any more since it can't fit in 4 MB space
		//case PDX(READ_ONLY_FRAMES_INFO):
		assert(ptr_page_directory[i]);
f012eadf:	a1 30 ce 2b f0       	mov    0xf02bce30,%eax
f012eae4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012eae7:	c1 e2 02             	shl    $0x2,%edx
f012eaea:	01 d0                	add    %edx,%eax
f012eaec:	8b 00                	mov    (%eax),%eax
f012eaee:	85 c0                	test   %eax,%eax
f012eaf0:	75 7a                	jne    f012eb6c <check_boot_pgdir+0x192>
f012eaf2:	68 12 bb 13 f0       	push   $0xf013bb12
f012eaf7:	68 26 b9 13 f0       	push   $0xf013b926
f012eafc:	68 47 01 00 00       	push   $0x147
f012eb01:	68 6b b8 13 f0       	push   $0xf013b86b
f012eb06:	e8 a5 16 fd ff       	call   f01001b0 <_panic>
		break;
		default:
			if (i >= PDX(KERNEL_BASE))
f012eb0b:	81 7d f4 bf 03 00 00 	cmpl   $0x3bf,-0xc(%ebp)
f012eb12:	76 2c                	jbe    f012eb40 <check_boot_pgdir+0x166>
				assert(ptr_page_directory[i]);
f012eb14:	a1 30 ce 2b f0       	mov    0xf02bce30,%eax
f012eb19:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012eb1c:	c1 e2 02             	shl    $0x2,%edx
f012eb1f:	01 d0                	add    %edx,%eax
f012eb21:	8b 00                	mov    (%eax),%eax
f012eb23:	85 c0                	test   %eax,%eax
f012eb25:	75 48                	jne    f012eb6f <check_boot_pgdir+0x195>
f012eb27:	68 12 bb 13 f0       	push   $0xf013bb12
f012eb2c:	68 26 b9 13 f0       	push   $0xf013b926
f012eb31:	68 4b 01 00 00       	push   $0x14b
f012eb36:	68 6b b8 13 f0       	push   $0xf013b86b
f012eb3b:	e8 70 16 fd ff       	call   f01001b0 <_panic>
			else
				assert(ptr_page_directory[i] == 0);
f012eb40:	a1 30 ce 2b f0       	mov    0xf02bce30,%eax
f012eb45:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012eb48:	c1 e2 02             	shl    $0x2,%edx
f012eb4b:	01 d0                	add    %edx,%eax
f012eb4d:	8b 00                	mov    (%eax),%eax
f012eb4f:	85 c0                	test   %eax,%eax
f012eb51:	74 1c                	je     f012eb6f <check_boot_pgdir+0x195>
f012eb53:	68 28 bb 13 f0       	push   $0xf013bb28
f012eb58:	68 26 b9 13 f0       	push   $0xf013b926
f012eb5d:	68 4d 01 00 00       	push   $0x14d
f012eb62:	68 6b b8 13 f0       	push   $0xf013b86b
f012eb67:	e8 44 16 fd ff       	call   f01001b0 <_panic>
		case PDX(KERNEL_STACK_TOP-1):
		case PDX(UENVS):
		//2016: READ_ONLY_FRAMES_INFO not valid any more since it can't fit in 4 MB space
		//case PDX(READ_ONLY_FRAMES_INFO):
		assert(ptr_page_directory[i]);
		break;
f012eb6c:	90                   	nop
f012eb6d:	eb 01                	jmp    f012eb70 <check_boot_pgdir+0x196>
		default:
			if (i >= PDX(KERNEL_BASE))
				assert(ptr_page_directory[i]);
			else
				assert(ptr_page_directory[i] == 0);
			break;
f012eb6f:	90                   	nop
	// check kernel stack
	for (i = 0; i < KERNEL_STACK_SIZE; i += PAGE_SIZE)
		assert(check_va2pa(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);

	// check for zero/non-zero in PDEs
	for (i = 0; i < NPDENTRIES; i++) {
f012eb70:	ff 45 f4             	incl   -0xc(%ebp)
f012eb73:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f012eb7a:	0f 86 44 ff ff ff    	jbe    f012eac4 <check_boot_pgdir+0xea>
			else
				assert(ptr_page_directory[i] == 0);
			break;
		}
	}
	cprintf("check_boot_pgdir() succeeded!\n");
f012eb80:	83 ec 0c             	sub    $0xc,%esp
f012eb83:	68 44 bb 13 f0       	push   $0xf013bb44
f012eb88:	e8 a4 22 fd ff       	call   f0100e31 <cprintf>
f012eb8d:	83 c4 10             	add    $0x10,%esp
}
f012eb90:	90                   	nop
f012eb91:	c9                   	leave  
f012eb92:	c3                   	ret    

f012eb93 <check_va2pa>:
// defined by the page directory 'ptr_page_directory'.  The hardware normally performs
// this functionality for us!  We define our own version to help check
// the check_boot_pgdir() function; it shouldn't be used elsewhere.

uint32 check_va2pa(uint32 *ptr_page_directory, uint32 va)
{
f012eb93:	55                   	push   %ebp
f012eb94:	89 e5                	mov    %esp,%ebp
f012eb96:	83 ec 18             	sub    $0x18,%esp
	uint32 *p;

	uint32* dirEntry = &(ptr_page_directory[PDX(va)]);
f012eb99:	8b 45 0c             	mov    0xc(%ebp),%eax
f012eb9c:	c1 e8 16             	shr    $0x16,%eax
f012eb9f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012eba6:	8b 45 08             	mov    0x8(%ebp),%eax
f012eba9:	01 d0                	add    %edx,%eax
f012ebab:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_VARS("dir table entry %x", *dirEntry);

	if (!(*dirEntry & PERM_PRESENT))
f012ebae:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012ebb1:	8b 00                	mov    (%eax),%eax
f012ebb3:	83 e0 01             	and    $0x1,%eax
f012ebb6:	85 c0                	test   %eax,%eax
f012ebb8:	75 0a                	jne    f012ebc4 <check_va2pa+0x31>
		return ~0;
f012ebba:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f012ebbf:	e9 87 00 00 00       	jmp    f012ec4b <check_va2pa+0xb8>
	p = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(*dirEntry));
f012ebc4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012ebc7:	8b 00                	mov    (%eax),%eax
f012ebc9:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f012ebce:	89 45 f0             	mov    %eax,-0x10(%ebp)
f012ebd1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012ebd4:	c1 e8 0c             	shr    $0xc,%eax
f012ebd7:	89 45 ec             	mov    %eax,-0x14(%ebp)
f012ebda:	a1 d0 cd 2b f0       	mov    0xf02bcdd0,%eax
f012ebdf:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f012ebe2:	72 17                	jb     f012ebfb <check_va2pa+0x68>
f012ebe4:	ff 75 f0             	pushl  -0x10(%ebp)
f012ebe7:	68 64 bb 13 f0       	push   $0xf013bb64
f012ebec:	68 63 01 00 00       	push   $0x163
f012ebf1:	68 6b b8 13 f0       	push   $0xf013b86b
f012ebf6:	e8 b5 15 fd ff       	call   f01001b0 <_panic>
f012ebfb:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012ebfe:	2d 00 00 00 10       	sub    $0x10000000,%eax
f012ec03:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//LOG_VARS("ptr to page table  = %x", p);

	if (!(p[PTX(va)] & PERM_PRESENT))
f012ec06:	8b 45 0c             	mov    0xc(%ebp),%eax
f012ec09:	c1 e8 0c             	shr    $0xc,%eax
f012ec0c:	25 ff 03 00 00       	and    $0x3ff,%eax
f012ec11:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012ec18:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012ec1b:	01 d0                	add    %edx,%eax
f012ec1d:	8b 00                	mov    (%eax),%eax
f012ec1f:	83 e0 01             	and    $0x1,%eax
f012ec22:	85 c0                	test   %eax,%eax
f012ec24:	75 07                	jne    f012ec2d <check_va2pa+0x9a>
		return ~0;
f012ec26:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f012ec2b:	eb 1e                	jmp    f012ec4b <check_va2pa+0xb8>

	//LOG_VARS("page phys addres = %x",EXTRACT_ADDRESS(p[PTX(va)]));
	return EXTRACT_ADDRESS(p[PTX(va)]);
f012ec2d:	8b 45 0c             	mov    0xc(%ebp),%eax
f012ec30:	c1 e8 0c             	shr    $0xc,%eax
f012ec33:	25 ff 03 00 00       	and    $0x3ff,%eax
f012ec38:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012ec3f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012ec42:	01 d0                	add    %edx,%eax
f012ec44:	8b 00                	mov    (%eax),%eax
f012ec46:	25 00 f0 ff ff       	and    $0xfffff000,%eax
}
f012ec4b:	c9                   	leave  
f012ec4c:	c3                   	ret    

f012ec4d <printnum>:
 * using specified putch function and associated pointer putdat.
 */
static void
printnum(void (*putch)(int, void*), void *putdat,
	 unsigned long long num, unsigned base, int width, int padc)
{
f012ec4d:	55                   	push   %ebp
f012ec4e:	89 e5                	mov    %esp,%ebp
f012ec50:	53                   	push   %ebx
f012ec51:	83 ec 14             	sub    $0x14,%esp
f012ec54:	8b 45 10             	mov    0x10(%ebp),%eax
f012ec57:	89 45 f0             	mov    %eax,-0x10(%ebp)
f012ec5a:	8b 45 14             	mov    0x14(%ebp),%eax
f012ec5d:	89 45 f4             	mov    %eax,-0xc(%ebp)
	// first recursively print all preceding (more significant) digits
	if (num >= base) {
f012ec60:	8b 45 18             	mov    0x18(%ebp),%eax
f012ec63:	ba 00 00 00 00       	mov    $0x0,%edx
f012ec68:	3b 55 f4             	cmp    -0xc(%ebp),%edx
f012ec6b:	77 55                	ja     f012ecc2 <printnum+0x75>
f012ec6d:	3b 55 f4             	cmp    -0xc(%ebp),%edx
f012ec70:	72 05                	jb     f012ec77 <printnum+0x2a>
f012ec72:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012ec75:	77 4b                	ja     f012ecc2 <printnum+0x75>
		printnum(putch, putdat, num / base, base, width - 1, padc);
f012ec77:	8b 45 1c             	mov    0x1c(%ebp),%eax
f012ec7a:	8d 58 ff             	lea    -0x1(%eax),%ebx
f012ec7d:	8b 45 18             	mov    0x18(%ebp),%eax
f012ec80:	ba 00 00 00 00       	mov    $0x0,%edx
f012ec85:	52                   	push   %edx
f012ec86:	50                   	push   %eax
f012ec87:	ff 75 f4             	pushl  -0xc(%ebp)
f012ec8a:	ff 75 f0             	pushl  -0x10(%ebp)
f012ec8d:	e8 36 1b 00 00       	call   f01307c8 <__udivdi3>
f012ec92:	83 c4 10             	add    $0x10,%esp
f012ec95:	83 ec 04             	sub    $0x4,%esp
f012ec98:	ff 75 20             	pushl  0x20(%ebp)
f012ec9b:	53                   	push   %ebx
f012ec9c:	ff 75 18             	pushl  0x18(%ebp)
f012ec9f:	52                   	push   %edx
f012eca0:	50                   	push   %eax
f012eca1:	ff 75 0c             	pushl  0xc(%ebp)
f012eca4:	ff 75 08             	pushl  0x8(%ebp)
f012eca7:	e8 a1 ff ff ff       	call   f012ec4d <printnum>
f012ecac:	83 c4 20             	add    $0x20,%esp
f012ecaf:	eb 1a                	jmp    f012eccb <printnum+0x7e>
	} else {
		// print any needed pad characters before first digit
		while (--width > 0)
			putch(padc, putdat);
f012ecb1:	83 ec 08             	sub    $0x8,%esp
f012ecb4:	ff 75 0c             	pushl  0xc(%ebp)
f012ecb7:	ff 75 20             	pushl  0x20(%ebp)
f012ecba:	8b 45 08             	mov    0x8(%ebp),%eax
f012ecbd:	ff d0                	call   *%eax
f012ecbf:	83 c4 10             	add    $0x10,%esp
	// first recursively print all preceding (more significant) digits
	if (num >= base) {
		printnum(putch, putdat, num / base, base, width - 1, padc);
	} else {
		// print any needed pad characters before first digit
		while (--width > 0)
f012ecc2:	ff 4d 1c             	decl   0x1c(%ebp)
f012ecc5:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
f012ecc9:	7f e6                	jg     f012ecb1 <printnum+0x64>
			putch(padc, putdat);
	}

	// then print this (the least significant) digit
	putch("0123456789abcdef"[num % base], putdat);
f012eccb:	8b 4d 18             	mov    0x18(%ebp),%ecx
f012ecce:	bb 00 00 00 00       	mov    $0x0,%ebx
f012ecd3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012ecd6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012ecd9:	53                   	push   %ebx
f012ecda:	51                   	push   %ecx
f012ecdb:	52                   	push   %edx
f012ecdc:	50                   	push   %eax
f012ecdd:	e8 f6 1b 00 00       	call   f01308d8 <__umoddi3>
f012ece2:	83 c4 10             	add    $0x10,%esp
f012ece5:	05 b4 bd 13 f0       	add    $0xf013bdb4,%eax
f012ecea:	8a 00                	mov    (%eax),%al
f012ecec:	0f be c0             	movsbl %al,%eax
f012ecef:	83 ec 08             	sub    $0x8,%esp
f012ecf2:	ff 75 0c             	pushl  0xc(%ebp)
f012ecf5:	50                   	push   %eax
f012ecf6:	8b 45 08             	mov    0x8(%ebp),%eax
f012ecf9:	ff d0                	call   *%eax
f012ecfb:	83 c4 10             	add    $0x10,%esp
}
f012ecfe:	90                   	nop
f012ecff:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f012ed02:	c9                   	leave  
f012ed03:	c3                   	ret    

f012ed04 <getuint>:

// Get an unsigned int of various possible sizes from a varargs list,
// depending on the lflag parameter.
static unsigned long long
getuint(va_list *ap, int lflag)
{
f012ed04:	55                   	push   %ebp
f012ed05:	89 e5                	mov    %esp,%ebp
	if (lflag >= 2)
f012ed07:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
f012ed0b:	7e 1c                	jle    f012ed29 <getuint+0x25>
		return va_arg(*ap, unsigned long long);
f012ed0d:	8b 45 08             	mov    0x8(%ebp),%eax
f012ed10:	8b 00                	mov    (%eax),%eax
f012ed12:	8d 50 08             	lea    0x8(%eax),%edx
f012ed15:	8b 45 08             	mov    0x8(%ebp),%eax
f012ed18:	89 10                	mov    %edx,(%eax)
f012ed1a:	8b 45 08             	mov    0x8(%ebp),%eax
f012ed1d:	8b 00                	mov    (%eax),%eax
f012ed1f:	83 e8 08             	sub    $0x8,%eax
f012ed22:	8b 50 04             	mov    0x4(%eax),%edx
f012ed25:	8b 00                	mov    (%eax),%eax
f012ed27:	eb 40                	jmp    f012ed69 <getuint+0x65>
	else if (lflag)
f012ed29:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f012ed2d:	74 1e                	je     f012ed4d <getuint+0x49>
		return va_arg(*ap, unsigned long);
f012ed2f:	8b 45 08             	mov    0x8(%ebp),%eax
f012ed32:	8b 00                	mov    (%eax),%eax
f012ed34:	8d 50 04             	lea    0x4(%eax),%edx
f012ed37:	8b 45 08             	mov    0x8(%ebp),%eax
f012ed3a:	89 10                	mov    %edx,(%eax)
f012ed3c:	8b 45 08             	mov    0x8(%ebp),%eax
f012ed3f:	8b 00                	mov    (%eax),%eax
f012ed41:	83 e8 04             	sub    $0x4,%eax
f012ed44:	8b 00                	mov    (%eax),%eax
f012ed46:	ba 00 00 00 00       	mov    $0x0,%edx
f012ed4b:	eb 1c                	jmp    f012ed69 <getuint+0x65>
	else
		return va_arg(*ap, unsigned int);
f012ed4d:	8b 45 08             	mov    0x8(%ebp),%eax
f012ed50:	8b 00                	mov    (%eax),%eax
f012ed52:	8d 50 04             	lea    0x4(%eax),%edx
f012ed55:	8b 45 08             	mov    0x8(%ebp),%eax
f012ed58:	89 10                	mov    %edx,(%eax)
f012ed5a:	8b 45 08             	mov    0x8(%ebp),%eax
f012ed5d:	8b 00                	mov    (%eax),%eax
f012ed5f:	83 e8 04             	sub    $0x4,%eax
f012ed62:	8b 00                	mov    (%eax),%eax
f012ed64:	ba 00 00 00 00       	mov    $0x0,%edx
}
f012ed69:	5d                   	pop    %ebp
f012ed6a:	c3                   	ret    

f012ed6b <getint>:

// Same as getuint but signed - can't use getuint
// because of sign extension
static long long
getint(va_list *ap, int lflag)
{
f012ed6b:	55                   	push   %ebp
f012ed6c:	89 e5                	mov    %esp,%ebp
	if (lflag >= 2)
f012ed6e:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
f012ed72:	7e 1c                	jle    f012ed90 <getint+0x25>
		return va_arg(*ap, long long);
f012ed74:	8b 45 08             	mov    0x8(%ebp),%eax
f012ed77:	8b 00                	mov    (%eax),%eax
f012ed79:	8d 50 08             	lea    0x8(%eax),%edx
f012ed7c:	8b 45 08             	mov    0x8(%ebp),%eax
f012ed7f:	89 10                	mov    %edx,(%eax)
f012ed81:	8b 45 08             	mov    0x8(%ebp),%eax
f012ed84:	8b 00                	mov    (%eax),%eax
f012ed86:	83 e8 08             	sub    $0x8,%eax
f012ed89:	8b 50 04             	mov    0x4(%eax),%edx
f012ed8c:	8b 00                	mov    (%eax),%eax
f012ed8e:	eb 38                	jmp    f012edc8 <getint+0x5d>
	else if (lflag)
f012ed90:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f012ed94:	74 1a                	je     f012edb0 <getint+0x45>
		return va_arg(*ap, long);
f012ed96:	8b 45 08             	mov    0x8(%ebp),%eax
f012ed99:	8b 00                	mov    (%eax),%eax
f012ed9b:	8d 50 04             	lea    0x4(%eax),%edx
f012ed9e:	8b 45 08             	mov    0x8(%ebp),%eax
f012eda1:	89 10                	mov    %edx,(%eax)
f012eda3:	8b 45 08             	mov    0x8(%ebp),%eax
f012eda6:	8b 00                	mov    (%eax),%eax
f012eda8:	83 e8 04             	sub    $0x4,%eax
f012edab:	8b 00                	mov    (%eax),%eax
f012edad:	99                   	cltd   
f012edae:	eb 18                	jmp    f012edc8 <getint+0x5d>
	else
		return va_arg(*ap, int);
f012edb0:	8b 45 08             	mov    0x8(%ebp),%eax
f012edb3:	8b 00                	mov    (%eax),%eax
f012edb5:	8d 50 04             	lea    0x4(%eax),%edx
f012edb8:	8b 45 08             	mov    0x8(%ebp),%eax
f012edbb:	89 10                	mov    %edx,(%eax)
f012edbd:	8b 45 08             	mov    0x8(%ebp),%eax
f012edc0:	8b 00                	mov    (%eax),%eax
f012edc2:	83 e8 04             	sub    $0x4,%eax
f012edc5:	8b 00                	mov    (%eax),%eax
f012edc7:	99                   	cltd   
}
f012edc8:	5d                   	pop    %ebp
f012edc9:	c3                   	ret    

f012edca <vprintfmt>:
// Main function to format and print a string.
void printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...);

void
vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap)
{
f012edca:	55                   	push   %ebp
f012edcb:	89 e5                	mov    %esp,%ebp
f012edcd:	56                   	push   %esi
f012edce:	53                   	push   %ebx
f012edcf:	83 ec 20             	sub    $0x20,%esp
	unsigned long long num;
	int base, lflag, width, precision, altflag;
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
f012edd2:	eb 17                	jmp    f012edeb <vprintfmt+0x21>
			if (ch == '\0')
f012edd4:	85 db                	test   %ebx,%ebx
f012edd6:	0f 84 af 03 00 00    	je     f012f18b <vprintfmt+0x3c1>
				return;
			putch(ch, putdat);
f012eddc:	83 ec 08             	sub    $0x8,%esp
f012eddf:	ff 75 0c             	pushl  0xc(%ebp)
f012ede2:	53                   	push   %ebx
f012ede3:	8b 45 08             	mov    0x8(%ebp),%eax
f012ede6:	ff d0                	call   *%eax
f012ede8:	83 c4 10             	add    $0x10,%esp
	unsigned long long num;
	int base, lflag, width, precision, altflag;
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
f012edeb:	8b 45 10             	mov    0x10(%ebp),%eax
f012edee:	8d 50 01             	lea    0x1(%eax),%edx
f012edf1:	89 55 10             	mov    %edx,0x10(%ebp)
f012edf4:	8a 00                	mov    (%eax),%al
f012edf6:	0f b6 d8             	movzbl %al,%ebx
f012edf9:	83 fb 25             	cmp    $0x25,%ebx
f012edfc:	75 d6                	jne    f012edd4 <vprintfmt+0xa>
				return;
			putch(ch, putdat);
		}

		// Process a %-escape sequence
		padc = ' ';
f012edfe:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
		width = -1;
f012ee02:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
		precision = -1;
f012ee09:	c7 45 e0 ff ff ff ff 	movl   $0xffffffff,-0x20(%ebp)
		lflag = 0;
f012ee10:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
		altflag = 0;
f012ee17:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	reswitch:
		switch (ch = *(unsigned char *) fmt++) {
f012ee1e:	8b 45 10             	mov    0x10(%ebp),%eax
f012ee21:	8d 50 01             	lea    0x1(%eax),%edx
f012ee24:	89 55 10             	mov    %edx,0x10(%ebp)
f012ee27:	8a 00                	mov    (%eax),%al
f012ee29:	0f b6 d8             	movzbl %al,%ebx
f012ee2c:	8d 43 dd             	lea    -0x23(%ebx),%eax
f012ee2f:	83 f8 55             	cmp    $0x55,%eax
f012ee32:	0f 87 2b 03 00 00    	ja     f012f163 <vprintfmt+0x399>
f012ee38:	8b 04 85 d8 bd 13 f0 	mov    -0xfec4228(,%eax,4),%eax
f012ee3f:	ff e0                	jmp    *%eax

		// flag to pad on the right
		case '-':
			padc = '-';
f012ee41:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
			goto reswitch;
f012ee45:	eb d7                	jmp    f012ee1e <vprintfmt+0x54>

		// flag to pad with 0's instead of spaces
		case '0':
			padc = '0';
f012ee47:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
			goto reswitch;
f012ee4b:	eb d1                	jmp    f012ee1e <vprintfmt+0x54>
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			for (precision = 0; ; ++fmt) {
f012ee4d:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
				precision = precision * 10 + ch - '0';
f012ee54:	8b 55 e0             	mov    -0x20(%ebp),%edx
f012ee57:	89 d0                	mov    %edx,%eax
f012ee59:	c1 e0 02             	shl    $0x2,%eax
f012ee5c:	01 d0                	add    %edx,%eax
f012ee5e:	01 c0                	add    %eax,%eax
f012ee60:	01 d8                	add    %ebx,%eax
f012ee62:	83 e8 30             	sub    $0x30,%eax
f012ee65:	89 45 e0             	mov    %eax,-0x20(%ebp)
				ch = *fmt;
f012ee68:	8b 45 10             	mov    0x10(%ebp),%eax
f012ee6b:	8a 00                	mov    (%eax),%al
f012ee6d:	0f be d8             	movsbl %al,%ebx
				if (ch < '0' || ch > '9')
f012ee70:	83 fb 2f             	cmp    $0x2f,%ebx
f012ee73:	7e 3e                	jle    f012eeb3 <vprintfmt+0xe9>
f012ee75:	83 fb 39             	cmp    $0x39,%ebx
f012ee78:	7f 39                	jg     f012eeb3 <vprintfmt+0xe9>
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			for (precision = 0; ; ++fmt) {
f012ee7a:	ff 45 10             	incl   0x10(%ebp)
				precision = precision * 10 + ch - '0';
				ch = *fmt;
				if (ch < '0' || ch > '9')
					break;
			}
f012ee7d:	eb d5                	jmp    f012ee54 <vprintfmt+0x8a>
			goto process_precision;

		case '*':
			precision = va_arg(ap, int);
f012ee7f:	8b 45 14             	mov    0x14(%ebp),%eax
f012ee82:	83 c0 04             	add    $0x4,%eax
f012ee85:	89 45 14             	mov    %eax,0x14(%ebp)
f012ee88:	8b 45 14             	mov    0x14(%ebp),%eax
f012ee8b:	83 e8 04             	sub    $0x4,%eax
f012ee8e:	8b 00                	mov    (%eax),%eax
f012ee90:	89 45 e0             	mov    %eax,-0x20(%ebp)
			goto process_precision;
f012ee93:	eb 1f                	jmp    f012eeb4 <vprintfmt+0xea>

		case '.':
			if (width < 0)
f012ee95:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012ee99:	79 83                	jns    f012ee1e <vprintfmt+0x54>
				width = 0;
f012ee9b:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
			goto reswitch;
f012eea2:	e9 77 ff ff ff       	jmp    f012ee1e <vprintfmt+0x54>

		case '#':
			altflag = 1;
f012eea7:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
			goto reswitch;
f012eeae:	e9 6b ff ff ff       	jmp    f012ee1e <vprintfmt+0x54>
				precision = precision * 10 + ch - '0';
				ch = *fmt;
				if (ch < '0' || ch > '9')
					break;
			}
			goto process_precision;
f012eeb3:	90                   	nop
		case '#':
			altflag = 1;
			goto reswitch;

		process_precision:
			if (width < 0)
f012eeb4:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012eeb8:	0f 89 60 ff ff ff    	jns    f012ee1e <vprintfmt+0x54>
				width = precision, precision = -1;
f012eebe:	8b 45 e0             	mov    -0x20(%ebp),%eax
f012eec1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f012eec4:	c7 45 e0 ff ff ff ff 	movl   $0xffffffff,-0x20(%ebp)
			goto reswitch;
f012eecb:	e9 4e ff ff ff       	jmp    f012ee1e <vprintfmt+0x54>

		// long flag (doubled for long long)
		case 'l':
			lflag++;
f012eed0:	ff 45 e8             	incl   -0x18(%ebp)
			goto reswitch;
f012eed3:	e9 46 ff ff ff       	jmp    f012ee1e <vprintfmt+0x54>

		// character
		case 'c':
			putch(va_arg(ap, int), putdat);
f012eed8:	8b 45 14             	mov    0x14(%ebp),%eax
f012eedb:	83 c0 04             	add    $0x4,%eax
f012eede:	89 45 14             	mov    %eax,0x14(%ebp)
f012eee1:	8b 45 14             	mov    0x14(%ebp),%eax
f012eee4:	83 e8 04             	sub    $0x4,%eax
f012eee7:	8b 00                	mov    (%eax),%eax
f012eee9:	83 ec 08             	sub    $0x8,%esp
f012eeec:	ff 75 0c             	pushl  0xc(%ebp)
f012eeef:	50                   	push   %eax
f012eef0:	8b 45 08             	mov    0x8(%ebp),%eax
f012eef3:	ff d0                	call   *%eax
f012eef5:	83 c4 10             	add    $0x10,%esp
			break;
f012eef8:	e9 89 02 00 00       	jmp    f012f186 <vprintfmt+0x3bc>

		// error message
		case 'e':
			err = va_arg(ap, int);
f012eefd:	8b 45 14             	mov    0x14(%ebp),%eax
f012ef00:	83 c0 04             	add    $0x4,%eax
f012ef03:	89 45 14             	mov    %eax,0x14(%ebp)
f012ef06:	8b 45 14             	mov    0x14(%ebp),%eax
f012ef09:	83 e8 04             	sub    $0x4,%eax
f012ef0c:	8b 18                	mov    (%eax),%ebx
			if (err < 0)
f012ef0e:	85 db                	test   %ebx,%ebx
f012ef10:	79 02                	jns    f012ef14 <vprintfmt+0x14a>
				err = -err;
f012ef12:	f7 db                	neg    %ebx
			if (err > MAXERROR || (p = error_string[err]) == NULL)
f012ef14:	83 fb 64             	cmp    $0x64,%ebx
f012ef17:	7f 0b                	jg     f012ef24 <vprintfmt+0x15a>
f012ef19:	8b 34 9d 20 bc 13 f0 	mov    -0xfec43e0(,%ebx,4),%esi
f012ef20:	85 f6                	test   %esi,%esi
f012ef22:	75 19                	jne    f012ef3d <vprintfmt+0x173>
				printfmt(putch, putdat, "error %d", err);
f012ef24:	53                   	push   %ebx
f012ef25:	68 c5 bd 13 f0       	push   $0xf013bdc5
f012ef2a:	ff 75 0c             	pushl  0xc(%ebp)
f012ef2d:	ff 75 08             	pushl  0x8(%ebp)
f012ef30:	e8 5e 02 00 00       	call   f012f193 <printfmt>
f012ef35:	83 c4 10             	add    $0x10,%esp
			else
				printfmt(putch, putdat, "%s", p);
			break;
f012ef38:	e9 49 02 00 00       	jmp    f012f186 <vprintfmt+0x3bc>
			if (err < 0)
				err = -err;
			if (err > MAXERROR || (p = error_string[err]) == NULL)
				printfmt(putch, putdat, "error %d", err);
			else
				printfmt(putch, putdat, "%s", p);
f012ef3d:	56                   	push   %esi
f012ef3e:	68 ce bd 13 f0       	push   $0xf013bdce
f012ef43:	ff 75 0c             	pushl  0xc(%ebp)
f012ef46:	ff 75 08             	pushl  0x8(%ebp)
f012ef49:	e8 45 02 00 00       	call   f012f193 <printfmt>
f012ef4e:	83 c4 10             	add    $0x10,%esp
			break;
f012ef51:	e9 30 02 00 00       	jmp    f012f186 <vprintfmt+0x3bc>

		// string
		case 's':
			if ((p = va_arg(ap, char *)) == NULL)
f012ef56:	8b 45 14             	mov    0x14(%ebp),%eax
f012ef59:	83 c0 04             	add    $0x4,%eax
f012ef5c:	89 45 14             	mov    %eax,0x14(%ebp)
f012ef5f:	8b 45 14             	mov    0x14(%ebp),%eax
f012ef62:	83 e8 04             	sub    $0x4,%eax
f012ef65:	8b 30                	mov    (%eax),%esi
f012ef67:	85 f6                	test   %esi,%esi
f012ef69:	75 05                	jne    f012ef70 <vprintfmt+0x1a6>
				p = "(null)";
f012ef6b:	be d1 bd 13 f0       	mov    $0xf013bdd1,%esi
			if (width > 0 && padc != '-')
f012ef70:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012ef74:	7e 6d                	jle    f012efe3 <vprintfmt+0x219>
f012ef76:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
f012ef7a:	74 67                	je     f012efe3 <vprintfmt+0x219>
				for (width -= strnlen(p, precision); width > 0; width--)
f012ef7c:	8b 45 e0             	mov    -0x20(%ebp),%eax
f012ef7f:	83 ec 08             	sub    $0x8,%esp
f012ef82:	50                   	push   %eax
f012ef83:	56                   	push   %esi
f012ef84:	e8 12 05 00 00       	call   f012f49b <strnlen>
f012ef89:	83 c4 10             	add    $0x10,%esp
f012ef8c:	29 45 e4             	sub    %eax,-0x1c(%ebp)
f012ef8f:	eb 16                	jmp    f012efa7 <vprintfmt+0x1dd>
					putch(padc, putdat);
f012ef91:	0f be 45 db          	movsbl -0x25(%ebp),%eax
f012ef95:	83 ec 08             	sub    $0x8,%esp
f012ef98:	ff 75 0c             	pushl  0xc(%ebp)
f012ef9b:	50                   	push   %eax
f012ef9c:	8b 45 08             	mov    0x8(%ebp),%eax
f012ef9f:	ff d0                	call   *%eax
f012efa1:	83 c4 10             	add    $0x10,%esp
		// string
		case 's':
			if ((p = va_arg(ap, char *)) == NULL)
				p = "(null)";
			if (width > 0 && padc != '-')
				for (width -= strnlen(p, precision); width > 0; width--)
f012efa4:	ff 4d e4             	decl   -0x1c(%ebp)
f012efa7:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012efab:	7f e4                	jg     f012ef91 <vprintfmt+0x1c7>
					putch(padc, putdat);
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
f012efad:	eb 34                	jmp    f012efe3 <vprintfmt+0x219>
				if (altflag && (ch < ' ' || ch > '~'))
f012efaf:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f012efb3:	74 1c                	je     f012efd1 <vprintfmt+0x207>
f012efb5:	83 fb 1f             	cmp    $0x1f,%ebx
f012efb8:	7e 05                	jle    f012efbf <vprintfmt+0x1f5>
f012efba:	83 fb 7e             	cmp    $0x7e,%ebx
f012efbd:	7e 12                	jle    f012efd1 <vprintfmt+0x207>
					putch('?', putdat);
f012efbf:	83 ec 08             	sub    $0x8,%esp
f012efc2:	ff 75 0c             	pushl  0xc(%ebp)
f012efc5:	6a 3f                	push   $0x3f
f012efc7:	8b 45 08             	mov    0x8(%ebp),%eax
f012efca:	ff d0                	call   *%eax
f012efcc:	83 c4 10             	add    $0x10,%esp
f012efcf:	eb 0f                	jmp    f012efe0 <vprintfmt+0x216>
				else
					putch(ch, putdat);
f012efd1:	83 ec 08             	sub    $0x8,%esp
f012efd4:	ff 75 0c             	pushl  0xc(%ebp)
f012efd7:	53                   	push   %ebx
f012efd8:	8b 45 08             	mov    0x8(%ebp),%eax
f012efdb:	ff d0                	call   *%eax
f012efdd:	83 c4 10             	add    $0x10,%esp
			if ((p = va_arg(ap, char *)) == NULL)
				p = "(null)";
			if (width > 0 && padc != '-')
				for (width -= strnlen(p, precision); width > 0; width--)
					putch(padc, putdat);
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
f012efe0:	ff 4d e4             	decl   -0x1c(%ebp)
f012efe3:	89 f0                	mov    %esi,%eax
f012efe5:	8d 70 01             	lea    0x1(%eax),%esi
f012efe8:	8a 00                	mov    (%eax),%al
f012efea:	0f be d8             	movsbl %al,%ebx
f012efed:	85 db                	test   %ebx,%ebx
f012efef:	74 24                	je     f012f015 <vprintfmt+0x24b>
f012eff1:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f012eff5:	78 b8                	js     f012efaf <vprintfmt+0x1e5>
f012eff7:	ff 4d e0             	decl   -0x20(%ebp)
f012effa:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f012effe:	79 af                	jns    f012efaf <vprintfmt+0x1e5>
				if (altflag && (ch < ' ' || ch > '~'))
					putch('?', putdat);
				else
					putch(ch, putdat);
			for (; width > 0; width--)
f012f000:	eb 13                	jmp    f012f015 <vprintfmt+0x24b>
				putch(' ', putdat);
f012f002:	83 ec 08             	sub    $0x8,%esp
f012f005:	ff 75 0c             	pushl  0xc(%ebp)
f012f008:	6a 20                	push   $0x20
f012f00a:	8b 45 08             	mov    0x8(%ebp),%eax
f012f00d:	ff d0                	call   *%eax
f012f00f:	83 c4 10             	add    $0x10,%esp
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
				if (altflag && (ch < ' ' || ch > '~'))
					putch('?', putdat);
				else
					putch(ch, putdat);
			for (; width > 0; width--)
f012f012:	ff 4d e4             	decl   -0x1c(%ebp)
f012f015:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012f019:	7f e7                	jg     f012f002 <vprintfmt+0x238>
				putch(' ', putdat);
			break;
f012f01b:	e9 66 01 00 00       	jmp    f012f186 <vprintfmt+0x3bc>

		// (signed) decimal
		case 'd':
			num = getint(&ap, lflag);
f012f020:	83 ec 08             	sub    $0x8,%esp
f012f023:	ff 75 e8             	pushl  -0x18(%ebp)
f012f026:	8d 45 14             	lea    0x14(%ebp),%eax
f012f029:	50                   	push   %eax
f012f02a:	e8 3c fd ff ff       	call   f012ed6b <getint>
f012f02f:	83 c4 10             	add    $0x10,%esp
f012f032:	89 45 f0             	mov    %eax,-0x10(%ebp)
f012f035:	89 55 f4             	mov    %edx,-0xc(%ebp)
			if ((long long) num < 0) {
f012f038:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012f03b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012f03e:	85 d2                	test   %edx,%edx
f012f040:	79 23                	jns    f012f065 <vprintfmt+0x29b>
				putch('-', putdat);
f012f042:	83 ec 08             	sub    $0x8,%esp
f012f045:	ff 75 0c             	pushl  0xc(%ebp)
f012f048:	6a 2d                	push   $0x2d
f012f04a:	8b 45 08             	mov    0x8(%ebp),%eax
f012f04d:	ff d0                	call   *%eax
f012f04f:	83 c4 10             	add    $0x10,%esp
				num = -(long long) num;
f012f052:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012f055:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012f058:	f7 d8                	neg    %eax
f012f05a:	83 d2 00             	adc    $0x0,%edx
f012f05d:	f7 da                	neg    %edx
f012f05f:	89 45 f0             	mov    %eax,-0x10(%ebp)
f012f062:	89 55 f4             	mov    %edx,-0xc(%ebp)
			}
			base = 10;
f012f065:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
			goto number;
f012f06c:	e9 bc 00 00 00       	jmp    f012f12d <vprintfmt+0x363>

		// unsigned decimal
		case 'u':
			num = getuint(&ap, lflag);
f012f071:	83 ec 08             	sub    $0x8,%esp
f012f074:	ff 75 e8             	pushl  -0x18(%ebp)
f012f077:	8d 45 14             	lea    0x14(%ebp),%eax
f012f07a:	50                   	push   %eax
f012f07b:	e8 84 fc ff ff       	call   f012ed04 <getuint>
f012f080:	83 c4 10             	add    $0x10,%esp
f012f083:	89 45 f0             	mov    %eax,-0x10(%ebp)
f012f086:	89 55 f4             	mov    %edx,-0xc(%ebp)
			base = 10;
f012f089:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
			goto number;
f012f090:	e9 98 00 00 00       	jmp    f012f12d <vprintfmt+0x363>

		// (unsigned) octal
		case 'o':
			// Replace this with your code.
			putch('X', putdat);
f012f095:	83 ec 08             	sub    $0x8,%esp
f012f098:	ff 75 0c             	pushl  0xc(%ebp)
f012f09b:	6a 58                	push   $0x58
f012f09d:	8b 45 08             	mov    0x8(%ebp),%eax
f012f0a0:	ff d0                	call   *%eax
f012f0a2:	83 c4 10             	add    $0x10,%esp
			putch('X', putdat);
f012f0a5:	83 ec 08             	sub    $0x8,%esp
f012f0a8:	ff 75 0c             	pushl  0xc(%ebp)
f012f0ab:	6a 58                	push   $0x58
f012f0ad:	8b 45 08             	mov    0x8(%ebp),%eax
f012f0b0:	ff d0                	call   *%eax
f012f0b2:	83 c4 10             	add    $0x10,%esp
			putch('X', putdat);
f012f0b5:	83 ec 08             	sub    $0x8,%esp
f012f0b8:	ff 75 0c             	pushl  0xc(%ebp)
f012f0bb:	6a 58                	push   $0x58
f012f0bd:	8b 45 08             	mov    0x8(%ebp),%eax
f012f0c0:	ff d0                	call   *%eax
f012f0c2:	83 c4 10             	add    $0x10,%esp
			break;
f012f0c5:	e9 bc 00 00 00       	jmp    f012f186 <vprintfmt+0x3bc>

		// pointer
		case 'p':
			putch('0', putdat);
f012f0ca:	83 ec 08             	sub    $0x8,%esp
f012f0cd:	ff 75 0c             	pushl  0xc(%ebp)
f012f0d0:	6a 30                	push   $0x30
f012f0d2:	8b 45 08             	mov    0x8(%ebp),%eax
f012f0d5:	ff d0                	call   *%eax
f012f0d7:	83 c4 10             	add    $0x10,%esp
			putch('x', putdat);
f012f0da:	83 ec 08             	sub    $0x8,%esp
f012f0dd:	ff 75 0c             	pushl  0xc(%ebp)
f012f0e0:	6a 78                	push   $0x78
f012f0e2:	8b 45 08             	mov    0x8(%ebp),%eax
f012f0e5:	ff d0                	call   *%eax
f012f0e7:	83 c4 10             	add    $0x10,%esp
			num = (unsigned long long)
				(uint32) va_arg(ap, void *);
f012f0ea:	8b 45 14             	mov    0x14(%ebp),%eax
f012f0ed:	83 c0 04             	add    $0x4,%eax
f012f0f0:	89 45 14             	mov    %eax,0x14(%ebp)
f012f0f3:	8b 45 14             	mov    0x14(%ebp),%eax
f012f0f6:	83 e8 04             	sub    $0x4,%eax
f012f0f9:	8b 00                	mov    (%eax),%eax

		// pointer
		case 'p':
			putch('0', putdat);
			putch('x', putdat);
			num = (unsigned long long)
f012f0fb:	89 45 f0             	mov    %eax,-0x10(%ebp)
f012f0fe:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				(uint32) va_arg(ap, void *);
			base = 16;
f012f105:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
			goto number;
f012f10c:	eb 1f                	jmp    f012f12d <vprintfmt+0x363>

		// (unsigned) hexadecimal
		case 'x':
			num = getuint(&ap, lflag);
f012f10e:	83 ec 08             	sub    $0x8,%esp
f012f111:	ff 75 e8             	pushl  -0x18(%ebp)
f012f114:	8d 45 14             	lea    0x14(%ebp),%eax
f012f117:	50                   	push   %eax
f012f118:	e8 e7 fb ff ff       	call   f012ed04 <getuint>
f012f11d:	83 c4 10             	add    $0x10,%esp
f012f120:	89 45 f0             	mov    %eax,-0x10(%ebp)
f012f123:	89 55 f4             	mov    %edx,-0xc(%ebp)
			base = 16;
f012f126:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
		number:
			printnum(putch, putdat, num, base, width, padc);
f012f12d:	0f be 55 db          	movsbl -0x25(%ebp),%edx
f012f131:	8b 45 ec             	mov    -0x14(%ebp),%eax
f012f134:	83 ec 04             	sub    $0x4,%esp
f012f137:	52                   	push   %edx
f012f138:	ff 75 e4             	pushl  -0x1c(%ebp)
f012f13b:	50                   	push   %eax
f012f13c:	ff 75 f4             	pushl  -0xc(%ebp)
f012f13f:	ff 75 f0             	pushl  -0x10(%ebp)
f012f142:	ff 75 0c             	pushl  0xc(%ebp)
f012f145:	ff 75 08             	pushl  0x8(%ebp)
f012f148:	e8 00 fb ff ff       	call   f012ec4d <printnum>
f012f14d:	83 c4 20             	add    $0x20,%esp
			break;
f012f150:	eb 34                	jmp    f012f186 <vprintfmt+0x3bc>

		// escaped '%' character
		case '%':
			putch(ch, putdat);
f012f152:	83 ec 08             	sub    $0x8,%esp
f012f155:	ff 75 0c             	pushl  0xc(%ebp)
f012f158:	53                   	push   %ebx
f012f159:	8b 45 08             	mov    0x8(%ebp),%eax
f012f15c:	ff d0                	call   *%eax
f012f15e:	83 c4 10             	add    $0x10,%esp
			break;
f012f161:	eb 23                	jmp    f012f186 <vprintfmt+0x3bc>

		// unrecognized escape sequence - just print it literally
		default:
			putch('%', putdat);
f012f163:	83 ec 08             	sub    $0x8,%esp
f012f166:	ff 75 0c             	pushl  0xc(%ebp)
f012f169:	6a 25                	push   $0x25
f012f16b:	8b 45 08             	mov    0x8(%ebp),%eax
f012f16e:	ff d0                	call   *%eax
f012f170:	83 c4 10             	add    $0x10,%esp
			for (fmt--; fmt[-1] != '%'; fmt--)
f012f173:	ff 4d 10             	decl   0x10(%ebp)
f012f176:	eb 03                	jmp    f012f17b <vprintfmt+0x3b1>
f012f178:	ff 4d 10             	decl   0x10(%ebp)
f012f17b:	8b 45 10             	mov    0x10(%ebp),%eax
f012f17e:	48                   	dec    %eax
f012f17f:	8a 00                	mov    (%eax),%al
f012f181:	3c 25                	cmp    $0x25,%al
f012f183:	75 f3                	jne    f012f178 <vprintfmt+0x3ae>
				/* do nothing */;
			break;
f012f185:	90                   	nop
		}
	}
f012f186:	e9 47 fc ff ff       	jmp    f012edd2 <vprintfmt+0x8>
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
			if (ch == '\0')
				return;
f012f18b:	90                   	nop
			for (fmt--; fmt[-1] != '%'; fmt--)
				/* do nothing */;
			break;
		}
	}
}
f012f18c:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012f18f:	5b                   	pop    %ebx
f012f190:	5e                   	pop    %esi
f012f191:	5d                   	pop    %ebp
f012f192:	c3                   	ret    

f012f193 <printfmt>:

void
printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...)
{
f012f193:	55                   	push   %ebp
f012f194:	89 e5                	mov    %esp,%ebp
f012f196:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	va_start(ap, fmt);
f012f199:	8d 45 10             	lea    0x10(%ebp),%eax
f012f19c:	83 c0 04             	add    $0x4,%eax
f012f19f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	vprintfmt(putch, putdat, fmt, ap);
f012f1a2:	8b 45 10             	mov    0x10(%ebp),%eax
f012f1a5:	ff 75 f4             	pushl  -0xc(%ebp)
f012f1a8:	50                   	push   %eax
f012f1a9:	ff 75 0c             	pushl  0xc(%ebp)
f012f1ac:	ff 75 08             	pushl  0x8(%ebp)
f012f1af:	e8 16 fc ff ff       	call   f012edca <vprintfmt>
f012f1b4:	83 c4 10             	add    $0x10,%esp
	va_end(ap);
}
f012f1b7:	90                   	nop
f012f1b8:	c9                   	leave  
f012f1b9:	c3                   	ret    

f012f1ba <sprintputch>:
	int cnt;
};

static void
sprintputch(int ch, struct sprintbuf *b)
{
f012f1ba:	55                   	push   %ebp
f012f1bb:	89 e5                	mov    %esp,%ebp
	b->cnt++;
f012f1bd:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f1c0:	8b 40 08             	mov    0x8(%eax),%eax
f012f1c3:	8d 50 01             	lea    0x1(%eax),%edx
f012f1c6:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f1c9:	89 50 08             	mov    %edx,0x8(%eax)
	if (b->buf < b->ebuf)
f012f1cc:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f1cf:	8b 10                	mov    (%eax),%edx
f012f1d1:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f1d4:	8b 40 04             	mov    0x4(%eax),%eax
f012f1d7:	39 c2                	cmp    %eax,%edx
f012f1d9:	73 12                	jae    f012f1ed <sprintputch+0x33>
		*b->buf++ = ch;
f012f1db:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f1de:	8b 00                	mov    (%eax),%eax
f012f1e0:	8d 48 01             	lea    0x1(%eax),%ecx
f012f1e3:	8b 55 0c             	mov    0xc(%ebp),%edx
f012f1e6:	89 0a                	mov    %ecx,(%edx)
f012f1e8:	8b 55 08             	mov    0x8(%ebp),%edx
f012f1eb:	88 10                	mov    %dl,(%eax)
}
f012f1ed:	90                   	nop
f012f1ee:	5d                   	pop    %ebp
f012f1ef:	c3                   	ret    

f012f1f0 <vsnprintf>:

int
vsnprintf(char *buf, int n, const char *fmt, va_list ap)
{
f012f1f0:	55                   	push   %ebp
f012f1f1:	89 e5                	mov    %esp,%ebp
f012f1f3:	83 ec 18             	sub    $0x18,%esp
	struct sprintbuf b = {buf, buf+n-1, 0};
f012f1f6:	8b 45 08             	mov    0x8(%ebp),%eax
f012f1f9:	89 45 ec             	mov    %eax,-0x14(%ebp)
f012f1fc:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f1ff:	8d 50 ff             	lea    -0x1(%eax),%edx
f012f202:	8b 45 08             	mov    0x8(%ebp),%eax
f012f205:	01 d0                	add    %edx,%eax
f012f207:	89 45 f0             	mov    %eax,-0x10(%ebp)
f012f20a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	if (buf == NULL || n < 1)
f012f211:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f012f215:	74 06                	je     f012f21d <vsnprintf+0x2d>
f012f217:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f012f21b:	7f 07                	jg     f012f224 <vsnprintf+0x34>
		return -E_INVAL;
f012f21d:	b8 03 00 00 00       	mov    $0x3,%eax
f012f222:	eb 20                	jmp    f012f244 <vsnprintf+0x54>

	// print the string to the buffer
	vprintfmt((void*)sprintputch, &b, fmt, ap);
f012f224:	ff 75 14             	pushl  0x14(%ebp)
f012f227:	ff 75 10             	pushl  0x10(%ebp)
f012f22a:	8d 45 ec             	lea    -0x14(%ebp),%eax
f012f22d:	50                   	push   %eax
f012f22e:	68 ba f1 12 f0       	push   $0xf012f1ba
f012f233:	e8 92 fb ff ff       	call   f012edca <vprintfmt>
f012f238:	83 c4 10             	add    $0x10,%esp

	// null terminate the buffer
	*b.buf = '\0';
f012f23b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f012f23e:	c6 00 00             	movb   $0x0,(%eax)

	return b.cnt;
f012f241:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f012f244:	c9                   	leave  
f012f245:	c3                   	ret    

f012f246 <snprintf>:

int
snprintf(char *buf, int n, const char *fmt, ...)
{
f012f246:	55                   	push   %ebp
f012f247:	89 e5                	mov    %esp,%ebp
f012f249:	83 ec 18             	sub    $0x18,%esp
	va_list ap;
	int rc;

	va_start(ap, fmt);
f012f24c:	8d 45 10             	lea    0x10(%ebp),%eax
f012f24f:	83 c0 04             	add    $0x4,%eax
f012f252:	89 45 f4             	mov    %eax,-0xc(%ebp)
	rc = vsnprintf(buf, n, fmt, ap);
f012f255:	8b 45 10             	mov    0x10(%ebp),%eax
f012f258:	ff 75 f4             	pushl  -0xc(%ebp)
f012f25b:	50                   	push   %eax
f012f25c:	ff 75 0c             	pushl  0xc(%ebp)
f012f25f:	ff 75 08             	pushl  0x8(%ebp)
f012f262:	e8 89 ff ff ff       	call   f012f1f0 <vsnprintf>
f012f267:	83 c4 10             	add    $0x10,%esp
f012f26a:	89 45 f0             	mov    %eax,-0x10(%ebp)
	va_end(ap);

	return rc;
f012f26d:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f012f270:	c9                   	leave  
f012f271:	c3                   	ret    

f012f272 <readline>:
#include <inc/lib.h>

//static char buf[BUFLEN];

void readline(const char *prompt, char* buf)
{
f012f272:	55                   	push   %ebp
f012f273:	89 e5                	mov    %esp,%ebp
f012f275:	83 ec 18             	sub    $0x18,%esp
		int i, c, echoing;

	if (prompt != NULL)
f012f278:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f012f27c:	74 13                	je     f012f291 <readline+0x1f>
		cprintf("%s", prompt);
f012f27e:	83 ec 08             	sub    $0x8,%esp
f012f281:	ff 75 08             	pushl  0x8(%ebp)
f012f284:	68 30 bf 13 f0       	push   $0xf013bf30
f012f289:	e8 a3 1b fd ff       	call   f0100e31 <cprintf>
f012f28e:	83 c4 10             	add    $0x10,%esp

	i = 0;
f012f291:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	echoing = iscons(0);
f012f298:	83 ec 0c             	sub    $0xc,%esp
f012f29b:	6a 00                	push   $0x0
f012f29d:	e8 38 1b fd ff       	call   f0100dda <iscons>
f012f2a2:	83 c4 10             	add    $0x10,%esp
f012f2a5:	89 45 f0             	mov    %eax,-0x10(%ebp)
	while (1) {
		c = getchar();
f012f2a8:	e8 14 1b fd ff       	call   f0100dc1 <getchar>
f012f2ad:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if (c < 0) {
f012f2b0:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012f2b4:	79 22                	jns    f012f2d8 <readline+0x66>
			if (c != -E_EOF)
f012f2b6:	83 7d ec 07          	cmpl   $0x7,-0x14(%ebp)
f012f2ba:	0f 84 ad 00 00 00    	je     f012f36d <readline+0xfb>
				cprintf("read error: %e\n", c);
f012f2c0:	83 ec 08             	sub    $0x8,%esp
f012f2c3:	ff 75 ec             	pushl  -0x14(%ebp)
f012f2c6:	68 33 bf 13 f0       	push   $0xf013bf33
f012f2cb:	e8 61 1b fd ff       	call   f0100e31 <cprintf>
f012f2d0:	83 c4 10             	add    $0x10,%esp
			return;
f012f2d3:	e9 95 00 00 00       	jmp    f012f36d <readline+0xfb>
		} else if (c >= ' ' && i < BUFLEN-1) {
f012f2d8:	83 7d ec 1f          	cmpl   $0x1f,-0x14(%ebp)
f012f2dc:	7e 34                	jle    f012f312 <readline+0xa0>
f012f2de:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
f012f2e5:	7f 2b                	jg     f012f312 <readline+0xa0>
			if (echoing)
f012f2e7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012f2eb:	74 0e                	je     f012f2fb <readline+0x89>
				cputchar(c);
f012f2ed:	83 ec 0c             	sub    $0xc,%esp
f012f2f0:	ff 75 ec             	pushl  -0x14(%ebp)
f012f2f3:	e8 b2 1a fd ff       	call   f0100daa <cputchar>
f012f2f8:	83 c4 10             	add    $0x10,%esp
			buf[i++] = c;
f012f2fb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012f2fe:	8d 50 01             	lea    0x1(%eax),%edx
f012f301:	89 55 f4             	mov    %edx,-0xc(%ebp)
f012f304:	89 c2                	mov    %eax,%edx
f012f306:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f309:	01 d0                	add    %edx,%eax
f012f30b:	8b 55 ec             	mov    -0x14(%ebp),%edx
f012f30e:	88 10                	mov    %dl,(%eax)
f012f310:	eb 56                	jmp    f012f368 <readline+0xf6>
		} else if (c == '\b' && i > 0) {
f012f312:	83 7d ec 08          	cmpl   $0x8,-0x14(%ebp)
f012f316:	75 1f                	jne    f012f337 <readline+0xc5>
f012f318:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f012f31c:	7e 19                	jle    f012f337 <readline+0xc5>
			if (echoing)
f012f31e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012f322:	74 0e                	je     f012f332 <readline+0xc0>
				cputchar(c);
f012f324:	83 ec 0c             	sub    $0xc,%esp
f012f327:	ff 75 ec             	pushl  -0x14(%ebp)
f012f32a:	e8 7b 1a fd ff       	call   f0100daa <cputchar>
f012f32f:	83 c4 10             	add    $0x10,%esp

			i--;
f012f332:	ff 4d f4             	decl   -0xc(%ebp)
f012f335:	eb 31                	jmp    f012f368 <readline+0xf6>
		} else if (c == '\n' || c == '\r') {
f012f337:	83 7d ec 0a          	cmpl   $0xa,-0x14(%ebp)
f012f33b:	74 0a                	je     f012f347 <readline+0xd5>
f012f33d:	83 7d ec 0d          	cmpl   $0xd,-0x14(%ebp)
f012f341:	0f 85 61 ff ff ff    	jne    f012f2a8 <readline+0x36>
			if (echoing)
f012f347:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012f34b:	74 0e                	je     f012f35b <readline+0xe9>
				cputchar(c);
f012f34d:	83 ec 0c             	sub    $0xc,%esp
f012f350:	ff 75 ec             	pushl  -0x14(%ebp)
f012f353:	e8 52 1a fd ff       	call   f0100daa <cputchar>
f012f358:	83 c4 10             	add    $0x10,%esp

			buf[i] = 0;
f012f35b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012f35e:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f361:	01 d0                	add    %edx,%eax
f012f363:	c6 00 00             	movb   $0x0,(%eax)
			return;
f012f366:	eb 06                	jmp    f012f36e <readline+0xfc>
		}
	}
f012f368:	e9 3b ff ff ff       	jmp    f012f2a8 <readline+0x36>
	while (1) {
		c = getchar();
		if (c < 0) {
			if (c != -E_EOF)
				cprintf("read error: %e\n", c);
			return;
f012f36d:	90                   	nop
			buf[i] = 0;
			return;
		}
	}

}
f012f36e:	c9                   	leave  
f012f36f:	c3                   	ret    

f012f370 <atomic_readline>:

void atomic_readline(const char *prompt, char* buf)
{
f012f370:	55                   	push   %ebp
f012f371:	89 e5                	mov    %esp,%ebp
f012f373:	83 ec 18             	sub    $0x18,%esp
	sys_disable_interrupt();
f012f376:	e8 47 dc fd ff       	call   f010cfc2 <sys_disable_interrupt>
	int i, c, echoing;

	if (prompt != NULL)
f012f37b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f012f37f:	74 13                	je     f012f394 <atomic_readline+0x24>
		cprintf("%s", prompt);
f012f381:	83 ec 08             	sub    $0x8,%esp
f012f384:	ff 75 08             	pushl  0x8(%ebp)
f012f387:	68 30 bf 13 f0       	push   $0xf013bf30
f012f38c:	e8 a0 1a fd ff       	call   f0100e31 <cprintf>
f012f391:	83 c4 10             	add    $0x10,%esp

	i = 0;
f012f394:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	echoing = iscons(0);
f012f39b:	83 ec 0c             	sub    $0xc,%esp
f012f39e:	6a 00                	push   $0x0
f012f3a0:	e8 35 1a fd ff       	call   f0100dda <iscons>
f012f3a5:	83 c4 10             	add    $0x10,%esp
f012f3a8:	89 45 f0             	mov    %eax,-0x10(%ebp)
	while (1) {
		c = getchar();
f012f3ab:	e8 11 1a fd ff       	call   f0100dc1 <getchar>
f012f3b0:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if (c < 0) {
f012f3b3:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012f3b7:	79 23                	jns    f012f3dc <atomic_readline+0x6c>
			if (c != -E_EOF)
f012f3b9:	83 7d ec 07          	cmpl   $0x7,-0x14(%ebp)
f012f3bd:	74 13                	je     f012f3d2 <atomic_readline+0x62>
				cprintf("read error: %e\n", c);
f012f3bf:	83 ec 08             	sub    $0x8,%esp
f012f3c2:	ff 75 ec             	pushl  -0x14(%ebp)
f012f3c5:	68 33 bf 13 f0       	push   $0xf013bf33
f012f3ca:	e8 62 1a fd ff       	call   f0100e31 <cprintf>
f012f3cf:	83 c4 10             	add    $0x10,%esp
			sys_enable_interrupt();
f012f3d2:	e8 05 dc fd ff       	call   f010cfdc <sys_enable_interrupt>
			return;
f012f3d7:	e9 9a 00 00 00       	jmp    f012f476 <atomic_readline+0x106>
		} else if (c >= ' ' && i < BUFLEN-1) {
f012f3dc:	83 7d ec 1f          	cmpl   $0x1f,-0x14(%ebp)
f012f3e0:	7e 34                	jle    f012f416 <atomic_readline+0xa6>
f012f3e2:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
f012f3e9:	7f 2b                	jg     f012f416 <atomic_readline+0xa6>
			if (echoing)
f012f3eb:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012f3ef:	74 0e                	je     f012f3ff <atomic_readline+0x8f>
				cputchar(c);
f012f3f1:	83 ec 0c             	sub    $0xc,%esp
f012f3f4:	ff 75 ec             	pushl  -0x14(%ebp)
f012f3f7:	e8 ae 19 fd ff       	call   f0100daa <cputchar>
f012f3fc:	83 c4 10             	add    $0x10,%esp
			buf[i++] = c;
f012f3ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012f402:	8d 50 01             	lea    0x1(%eax),%edx
f012f405:	89 55 f4             	mov    %edx,-0xc(%ebp)
f012f408:	89 c2                	mov    %eax,%edx
f012f40a:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f40d:	01 d0                	add    %edx,%eax
f012f40f:	8b 55 ec             	mov    -0x14(%ebp),%edx
f012f412:	88 10                	mov    %dl,(%eax)
f012f414:	eb 5b                	jmp    f012f471 <atomic_readline+0x101>
		} else if (c == '\b' && i > 0) {
f012f416:	83 7d ec 08          	cmpl   $0x8,-0x14(%ebp)
f012f41a:	75 1f                	jne    f012f43b <atomic_readline+0xcb>
f012f41c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f012f420:	7e 19                	jle    f012f43b <atomic_readline+0xcb>
			if (echoing)
f012f422:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012f426:	74 0e                	je     f012f436 <atomic_readline+0xc6>
				cputchar(c);
f012f428:	83 ec 0c             	sub    $0xc,%esp
f012f42b:	ff 75 ec             	pushl  -0x14(%ebp)
f012f42e:	e8 77 19 fd ff       	call   f0100daa <cputchar>
f012f433:	83 c4 10             	add    $0x10,%esp
			i--;
f012f436:	ff 4d f4             	decl   -0xc(%ebp)
f012f439:	eb 36                	jmp    f012f471 <atomic_readline+0x101>
		} else if (c == '\n' || c == '\r') {
f012f43b:	83 7d ec 0a          	cmpl   $0xa,-0x14(%ebp)
f012f43f:	74 0a                	je     f012f44b <atomic_readline+0xdb>
f012f441:	83 7d ec 0d          	cmpl   $0xd,-0x14(%ebp)
f012f445:	0f 85 60 ff ff ff    	jne    f012f3ab <atomic_readline+0x3b>
			if (echoing)
f012f44b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012f44f:	74 0e                	je     f012f45f <atomic_readline+0xef>
				cputchar(c);
f012f451:	83 ec 0c             	sub    $0xc,%esp
f012f454:	ff 75 ec             	pushl  -0x14(%ebp)
f012f457:	e8 4e 19 fd ff       	call   f0100daa <cputchar>
f012f45c:	83 c4 10             	add    $0x10,%esp
			buf[i] = 0;
f012f45f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012f462:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f465:	01 d0                	add    %edx,%eax
f012f467:	c6 00 00             	movb   $0x0,(%eax)
			sys_enable_interrupt();
f012f46a:	e8 6d db fd ff       	call   f010cfdc <sys_enable_interrupt>
			return;
f012f46f:	eb 05                	jmp    f012f476 <atomic_readline+0x106>
		}
	}
f012f471:	e9 35 ff ff ff       	jmp    f012f3ab <atomic_readline+0x3b>
}
f012f476:	c9                   	leave  
f012f477:	c3                   	ret    

f012f478 <strlen>:

#include <inc/string.h>
#include <inc/assert.h>
int
strlen(const char *s)
{
f012f478:	55                   	push   %ebp
f012f479:	89 e5                	mov    %esp,%ebp
f012f47b:	83 ec 10             	sub    $0x10,%esp
	int n;

	for (n = 0; *s != '\0'; s++)
f012f47e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f012f485:	eb 06                	jmp    f012f48d <strlen+0x15>
		n++;
f012f487:	ff 45 fc             	incl   -0x4(%ebp)
int
strlen(const char *s)
{
	int n;

	for (n = 0; *s != '\0'; s++)
f012f48a:	ff 45 08             	incl   0x8(%ebp)
f012f48d:	8b 45 08             	mov    0x8(%ebp),%eax
f012f490:	8a 00                	mov    (%eax),%al
f012f492:	84 c0                	test   %al,%al
f012f494:	75 f1                	jne    f012f487 <strlen+0xf>
		n++;
	return n;
f012f496:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f012f499:	c9                   	leave  
f012f49a:	c3                   	ret    

f012f49b <strnlen>:

int
strnlen(const char *s, uint32 size)
{
f012f49b:	55                   	push   %ebp
f012f49c:	89 e5                	mov    %esp,%ebp
f012f49e:	83 ec 10             	sub    $0x10,%esp
	int n;

	for (n = 0; size > 0 && *s != '\0'; s++, size--)
f012f4a1:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f012f4a8:	eb 09                	jmp    f012f4b3 <strnlen+0x18>
		n++;
f012f4aa:	ff 45 fc             	incl   -0x4(%ebp)
int
strnlen(const char *s, uint32 size)
{
	int n;

	for (n = 0; size > 0 && *s != '\0'; s++, size--)
f012f4ad:	ff 45 08             	incl   0x8(%ebp)
f012f4b0:	ff 4d 0c             	decl   0xc(%ebp)
f012f4b3:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f012f4b7:	74 09                	je     f012f4c2 <strnlen+0x27>
f012f4b9:	8b 45 08             	mov    0x8(%ebp),%eax
f012f4bc:	8a 00                	mov    (%eax),%al
f012f4be:	84 c0                	test   %al,%al
f012f4c0:	75 e8                	jne    f012f4aa <strnlen+0xf>
		n++;
	return n;
f012f4c2:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f012f4c5:	c9                   	leave  
f012f4c6:	c3                   	ret    

f012f4c7 <strcpy>:

char *
strcpy(char *dst, const char *src)
{
f012f4c7:	55                   	push   %ebp
f012f4c8:	89 e5                	mov    %esp,%ebp
f012f4ca:	83 ec 10             	sub    $0x10,%esp
	char *ret;

	ret = dst;
f012f4cd:	8b 45 08             	mov    0x8(%ebp),%eax
f012f4d0:	89 45 fc             	mov    %eax,-0x4(%ebp)
	while ((*dst++ = *src++) != '\0')
f012f4d3:	90                   	nop
f012f4d4:	8b 45 08             	mov    0x8(%ebp),%eax
f012f4d7:	8d 50 01             	lea    0x1(%eax),%edx
f012f4da:	89 55 08             	mov    %edx,0x8(%ebp)
f012f4dd:	8b 55 0c             	mov    0xc(%ebp),%edx
f012f4e0:	8d 4a 01             	lea    0x1(%edx),%ecx
f012f4e3:	89 4d 0c             	mov    %ecx,0xc(%ebp)
f012f4e6:	8a 12                	mov    (%edx),%dl
f012f4e8:	88 10                	mov    %dl,(%eax)
f012f4ea:	8a 00                	mov    (%eax),%al
f012f4ec:	84 c0                	test   %al,%al
f012f4ee:	75 e4                	jne    f012f4d4 <strcpy+0xd>
		/* do nothing */;
	return ret;
f012f4f0:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f012f4f3:	c9                   	leave  
f012f4f4:	c3                   	ret    

f012f4f5 <strncpy>:

char *
strncpy(char *dst, const char *src, uint32 size) {
f012f4f5:	55                   	push   %ebp
f012f4f6:	89 e5                	mov    %esp,%ebp
f012f4f8:	83 ec 10             	sub    $0x10,%esp
	uint32 i;
	char *ret;

	ret = dst;
f012f4fb:	8b 45 08             	mov    0x8(%ebp),%eax
f012f4fe:	89 45 f8             	mov    %eax,-0x8(%ebp)
	for (i = 0; i < size; i++) {
f012f501:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f012f508:	eb 1f                	jmp    f012f529 <strncpy+0x34>
		*dst++ = *src;
f012f50a:	8b 45 08             	mov    0x8(%ebp),%eax
f012f50d:	8d 50 01             	lea    0x1(%eax),%edx
f012f510:	89 55 08             	mov    %edx,0x8(%ebp)
f012f513:	8b 55 0c             	mov    0xc(%ebp),%edx
f012f516:	8a 12                	mov    (%edx),%dl
f012f518:	88 10                	mov    %dl,(%eax)
		// If strlen(src) < size, null-pad 'dst' out to 'size' chars
		if (*src != '\0')
f012f51a:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f51d:	8a 00                	mov    (%eax),%al
f012f51f:	84 c0                	test   %al,%al
f012f521:	74 03                	je     f012f526 <strncpy+0x31>
			src++;
f012f523:	ff 45 0c             	incl   0xc(%ebp)
strncpy(char *dst, const char *src, uint32 size) {
	uint32 i;
	char *ret;

	ret = dst;
	for (i = 0; i < size; i++) {
f012f526:	ff 45 fc             	incl   -0x4(%ebp)
f012f529:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012f52c:	3b 45 10             	cmp    0x10(%ebp),%eax
f012f52f:	72 d9                	jb     f012f50a <strncpy+0x15>
		*dst++ = *src;
		// If strlen(src) < size, null-pad 'dst' out to 'size' chars
		if (*src != '\0')
			src++;
	}
	return ret;
f012f531:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f012f534:	c9                   	leave  
f012f535:	c3                   	ret    

f012f536 <strlcpy>:

uint32
strlcpy(char *dst, const char *src, uint32 size)
{
f012f536:	55                   	push   %ebp
f012f537:	89 e5                	mov    %esp,%ebp
f012f539:	83 ec 10             	sub    $0x10,%esp
	char *dst_in;

	dst_in = dst;
f012f53c:	8b 45 08             	mov    0x8(%ebp),%eax
f012f53f:	89 45 fc             	mov    %eax,-0x4(%ebp)
	if (size > 0) {
f012f542:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f012f546:	74 30                	je     f012f578 <strlcpy+0x42>
		while (--size > 0 && *src != '\0')
f012f548:	eb 16                	jmp    f012f560 <strlcpy+0x2a>
			*dst++ = *src++;
f012f54a:	8b 45 08             	mov    0x8(%ebp),%eax
f012f54d:	8d 50 01             	lea    0x1(%eax),%edx
f012f550:	89 55 08             	mov    %edx,0x8(%ebp)
f012f553:	8b 55 0c             	mov    0xc(%ebp),%edx
f012f556:	8d 4a 01             	lea    0x1(%edx),%ecx
f012f559:	89 4d 0c             	mov    %ecx,0xc(%ebp)
f012f55c:	8a 12                	mov    (%edx),%dl
f012f55e:	88 10                	mov    %dl,(%eax)
{
	char *dst_in;

	dst_in = dst;
	if (size > 0) {
		while (--size > 0 && *src != '\0')
f012f560:	ff 4d 10             	decl   0x10(%ebp)
f012f563:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f012f567:	74 09                	je     f012f572 <strlcpy+0x3c>
f012f569:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f56c:	8a 00                	mov    (%eax),%al
f012f56e:	84 c0                	test   %al,%al
f012f570:	75 d8                	jne    f012f54a <strlcpy+0x14>
			*dst++ = *src++;
		*dst = '\0';
f012f572:	8b 45 08             	mov    0x8(%ebp),%eax
f012f575:	c6 00 00             	movb   $0x0,(%eax)
	}
	return dst - dst_in;
f012f578:	8b 55 08             	mov    0x8(%ebp),%edx
f012f57b:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012f57e:	29 c2                	sub    %eax,%edx
f012f580:	89 d0                	mov    %edx,%eax
}
f012f582:	c9                   	leave  
f012f583:	c3                   	ret    

f012f584 <strcmp>:

int
strcmp(const char *p, const char *q)
{
f012f584:	55                   	push   %ebp
f012f585:	89 e5                	mov    %esp,%ebp
	while (*p && *p == *q)
f012f587:	eb 06                	jmp    f012f58f <strcmp+0xb>
		p++, q++;
f012f589:	ff 45 08             	incl   0x8(%ebp)
f012f58c:	ff 45 0c             	incl   0xc(%ebp)
}

int
strcmp(const char *p, const char *q)
{
	while (*p && *p == *q)
f012f58f:	8b 45 08             	mov    0x8(%ebp),%eax
f012f592:	8a 00                	mov    (%eax),%al
f012f594:	84 c0                	test   %al,%al
f012f596:	74 0e                	je     f012f5a6 <strcmp+0x22>
f012f598:	8b 45 08             	mov    0x8(%ebp),%eax
f012f59b:	8a 10                	mov    (%eax),%dl
f012f59d:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f5a0:	8a 00                	mov    (%eax),%al
f012f5a2:	38 c2                	cmp    %al,%dl
f012f5a4:	74 e3                	je     f012f589 <strcmp+0x5>
		p++, q++;
	return (int) ((unsigned char) *p - (unsigned char) *q);
f012f5a6:	8b 45 08             	mov    0x8(%ebp),%eax
f012f5a9:	8a 00                	mov    (%eax),%al
f012f5ab:	0f b6 d0             	movzbl %al,%edx
f012f5ae:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f5b1:	8a 00                	mov    (%eax),%al
f012f5b3:	0f b6 c0             	movzbl %al,%eax
f012f5b6:	29 c2                	sub    %eax,%edx
f012f5b8:	89 d0                	mov    %edx,%eax
}
f012f5ba:	5d                   	pop    %ebp
f012f5bb:	c3                   	ret    

f012f5bc <strncmp>:

int
strncmp(const char *p, const char *q, uint32 n)
{
f012f5bc:	55                   	push   %ebp
f012f5bd:	89 e5                	mov    %esp,%ebp
	while (n > 0 && *p && *p == *q)
f012f5bf:	eb 09                	jmp    f012f5ca <strncmp+0xe>
		n--, p++, q++;
f012f5c1:	ff 4d 10             	decl   0x10(%ebp)
f012f5c4:	ff 45 08             	incl   0x8(%ebp)
f012f5c7:	ff 45 0c             	incl   0xc(%ebp)
}

int
strncmp(const char *p, const char *q, uint32 n)
{
	while (n > 0 && *p && *p == *q)
f012f5ca:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f012f5ce:	74 17                	je     f012f5e7 <strncmp+0x2b>
f012f5d0:	8b 45 08             	mov    0x8(%ebp),%eax
f012f5d3:	8a 00                	mov    (%eax),%al
f012f5d5:	84 c0                	test   %al,%al
f012f5d7:	74 0e                	je     f012f5e7 <strncmp+0x2b>
f012f5d9:	8b 45 08             	mov    0x8(%ebp),%eax
f012f5dc:	8a 10                	mov    (%eax),%dl
f012f5de:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f5e1:	8a 00                	mov    (%eax),%al
f012f5e3:	38 c2                	cmp    %al,%dl
f012f5e5:	74 da                	je     f012f5c1 <strncmp+0x5>
		n--, p++, q++;
	if (n == 0)
f012f5e7:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f012f5eb:	75 07                	jne    f012f5f4 <strncmp+0x38>
		return 0;
f012f5ed:	b8 00 00 00 00       	mov    $0x0,%eax
f012f5f2:	eb 14                	jmp    f012f608 <strncmp+0x4c>
	else
		return (int) ((unsigned char) *p - (unsigned char) *q);
f012f5f4:	8b 45 08             	mov    0x8(%ebp),%eax
f012f5f7:	8a 00                	mov    (%eax),%al
f012f5f9:	0f b6 d0             	movzbl %al,%edx
f012f5fc:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f5ff:	8a 00                	mov    (%eax),%al
f012f601:	0f b6 c0             	movzbl %al,%eax
f012f604:	29 c2                	sub    %eax,%edx
f012f606:	89 d0                	mov    %edx,%eax
}
f012f608:	5d                   	pop    %ebp
f012f609:	c3                   	ret    

f012f60a <strchr>:

// Return a pointer to the first occurrence of 'c' in 's',
// or a null pointer if the string has no 'c'.
char *
strchr(const char *s, char c)
{
f012f60a:	55                   	push   %ebp
f012f60b:	89 e5                	mov    %esp,%ebp
f012f60d:	83 ec 04             	sub    $0x4,%esp
f012f610:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f613:	88 45 fc             	mov    %al,-0x4(%ebp)
	for (; *s; s++)
f012f616:	eb 12                	jmp    f012f62a <strchr+0x20>
		if (*s == c)
f012f618:	8b 45 08             	mov    0x8(%ebp),%eax
f012f61b:	8a 00                	mov    (%eax),%al
f012f61d:	3a 45 fc             	cmp    -0x4(%ebp),%al
f012f620:	75 05                	jne    f012f627 <strchr+0x1d>
			return (char *) s;
f012f622:	8b 45 08             	mov    0x8(%ebp),%eax
f012f625:	eb 11                	jmp    f012f638 <strchr+0x2e>
// Return a pointer to the first occurrence of 'c' in 's',
// or a null pointer if the string has no 'c'.
char *
strchr(const char *s, char c)
{
	for (; *s; s++)
f012f627:	ff 45 08             	incl   0x8(%ebp)
f012f62a:	8b 45 08             	mov    0x8(%ebp),%eax
f012f62d:	8a 00                	mov    (%eax),%al
f012f62f:	84 c0                	test   %al,%al
f012f631:	75 e5                	jne    f012f618 <strchr+0xe>
		if (*s == c)
			return (char *) s;
	return 0;
f012f633:	b8 00 00 00 00       	mov    $0x0,%eax
}
f012f638:	c9                   	leave  
f012f639:	c3                   	ret    

f012f63a <strfind>:

// Return a pointer to the first occurrence of 'c' in 's',
// or a pointer to the string-ending null character if the string has no 'c'.
char *
strfind(const char *s, char c)
{
f012f63a:	55                   	push   %ebp
f012f63b:	89 e5                	mov    %esp,%ebp
f012f63d:	83 ec 04             	sub    $0x4,%esp
f012f640:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f643:	88 45 fc             	mov    %al,-0x4(%ebp)
	for (; *s; s++)
f012f646:	eb 0d                	jmp    f012f655 <strfind+0x1b>
		if (*s == c)
f012f648:	8b 45 08             	mov    0x8(%ebp),%eax
f012f64b:	8a 00                	mov    (%eax),%al
f012f64d:	3a 45 fc             	cmp    -0x4(%ebp),%al
f012f650:	74 0e                	je     f012f660 <strfind+0x26>
// Return a pointer to the first occurrence of 'c' in 's',
// or a pointer to the string-ending null character if the string has no 'c'.
char *
strfind(const char *s, char c)
{
	for (; *s; s++)
f012f652:	ff 45 08             	incl   0x8(%ebp)
f012f655:	8b 45 08             	mov    0x8(%ebp),%eax
f012f658:	8a 00                	mov    (%eax),%al
f012f65a:	84 c0                	test   %al,%al
f012f65c:	75 ea                	jne    f012f648 <strfind+0xe>
f012f65e:	eb 01                	jmp    f012f661 <strfind+0x27>
		if (*s == c)
			break;
f012f660:	90                   	nop
	return (char *) s;
f012f661:	8b 45 08             	mov    0x8(%ebp),%eax
}
f012f664:	c9                   	leave  
f012f665:	c3                   	ret    

f012f666 <memset>:


void *
memset(void *v, int c, uint32 n)
{
f012f666:	55                   	push   %ebp
f012f667:	89 e5                	mov    %esp,%ebp
f012f669:	83 ec 10             	sub    $0x10,%esp
	char *p;
	int m;

	p = v;
f012f66c:	8b 45 08             	mov    0x8(%ebp),%eax
f012f66f:	89 45 fc             	mov    %eax,-0x4(%ebp)
	m = n;
f012f672:	8b 45 10             	mov    0x10(%ebp),%eax
f012f675:	89 45 f8             	mov    %eax,-0x8(%ebp)
	while (--m >= 0)
f012f678:	eb 0e                	jmp    f012f688 <memset+0x22>
		*p++ = c;
f012f67a:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012f67d:	8d 50 01             	lea    0x1(%eax),%edx
f012f680:	89 55 fc             	mov    %edx,-0x4(%ebp)
f012f683:	8b 55 0c             	mov    0xc(%ebp),%edx
f012f686:	88 10                	mov    %dl,(%eax)
	char *p;
	int m;

	p = v;
	m = n;
	while (--m >= 0)
f012f688:	ff 4d f8             	decl   -0x8(%ebp)
f012f68b:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f012f68f:	79 e9                	jns    f012f67a <memset+0x14>
		*p++ = c;

	return v;
f012f691:	8b 45 08             	mov    0x8(%ebp),%eax
}
f012f694:	c9                   	leave  
f012f695:	c3                   	ret    

f012f696 <memcpy>:

void *
memcpy(void *dst, const void *src, uint32 n)
{
f012f696:	55                   	push   %ebp
f012f697:	89 e5                	mov    %esp,%ebp
f012f699:	83 ec 10             	sub    $0x10,%esp
	const char *s;
	char *d;

	s = src;
f012f69c:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f69f:	89 45 fc             	mov    %eax,-0x4(%ebp)
	d = dst;
f012f6a2:	8b 45 08             	mov    0x8(%ebp),%eax
f012f6a5:	89 45 f8             	mov    %eax,-0x8(%ebp)
	while (n-- > 0)
f012f6a8:	eb 16                	jmp    f012f6c0 <memcpy+0x2a>
		*d++ = *s++;
f012f6aa:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012f6ad:	8d 50 01             	lea    0x1(%eax),%edx
f012f6b0:	89 55 f8             	mov    %edx,-0x8(%ebp)
f012f6b3:	8b 55 fc             	mov    -0x4(%ebp),%edx
f012f6b6:	8d 4a 01             	lea    0x1(%edx),%ecx
f012f6b9:	89 4d fc             	mov    %ecx,-0x4(%ebp)
f012f6bc:	8a 12                	mov    (%edx),%dl
f012f6be:	88 10                	mov    %dl,(%eax)
	const char *s;
	char *d;

	s = src;
	d = dst;
	while (n-- > 0)
f012f6c0:	8b 45 10             	mov    0x10(%ebp),%eax
f012f6c3:	8d 50 ff             	lea    -0x1(%eax),%edx
f012f6c6:	89 55 10             	mov    %edx,0x10(%ebp)
f012f6c9:	85 c0                	test   %eax,%eax
f012f6cb:	75 dd                	jne    f012f6aa <memcpy+0x14>
		*d++ = *s++;

	return dst;
f012f6cd:	8b 45 08             	mov    0x8(%ebp),%eax
}
f012f6d0:	c9                   	leave  
f012f6d1:	c3                   	ret    

f012f6d2 <memmove>:

void *
memmove(void *dst, const void *src, uint32 n)
{
f012f6d2:	55                   	push   %ebp
f012f6d3:	89 e5                	mov    %esp,%ebp
f012f6d5:	83 ec 10             	sub    $0x10,%esp
	const char *s;
	char *d;

	s = src;
f012f6d8:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f6db:	89 45 fc             	mov    %eax,-0x4(%ebp)
	d = dst;
f012f6de:	8b 45 08             	mov    0x8(%ebp),%eax
f012f6e1:	89 45 f8             	mov    %eax,-0x8(%ebp)
	if (s < d && s + n > d) {
f012f6e4:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012f6e7:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f012f6ea:	73 50                	jae    f012f73c <memmove+0x6a>
f012f6ec:	8b 55 fc             	mov    -0x4(%ebp),%edx
f012f6ef:	8b 45 10             	mov    0x10(%ebp),%eax
f012f6f2:	01 d0                	add    %edx,%eax
f012f6f4:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f012f6f7:	76 43                	jbe    f012f73c <memmove+0x6a>
		s += n;
f012f6f9:	8b 45 10             	mov    0x10(%ebp),%eax
f012f6fc:	01 45 fc             	add    %eax,-0x4(%ebp)
		d += n;
f012f6ff:	8b 45 10             	mov    0x10(%ebp),%eax
f012f702:	01 45 f8             	add    %eax,-0x8(%ebp)
		while (n-- > 0)
f012f705:	eb 10                	jmp    f012f717 <memmove+0x45>
			*--d = *--s;
f012f707:	ff 4d f8             	decl   -0x8(%ebp)
f012f70a:	ff 4d fc             	decl   -0x4(%ebp)
f012f70d:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012f710:	8a 10                	mov    (%eax),%dl
f012f712:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012f715:	88 10                	mov    %dl,(%eax)
	s = src;
	d = dst;
	if (s < d && s + n > d) {
		s += n;
		d += n;
		while (n-- > 0)
f012f717:	8b 45 10             	mov    0x10(%ebp),%eax
f012f71a:	8d 50 ff             	lea    -0x1(%eax),%edx
f012f71d:	89 55 10             	mov    %edx,0x10(%ebp)
f012f720:	85 c0                	test   %eax,%eax
f012f722:	75 e3                	jne    f012f707 <memmove+0x35>
	const char *s;
	char *d;

	s = src;
	d = dst;
	if (s < d && s + n > d) {
f012f724:	eb 23                	jmp    f012f749 <memmove+0x77>
		d += n;
		while (n-- > 0)
			*--d = *--s;
	} else
		while (n-- > 0)
			*d++ = *s++;
f012f726:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012f729:	8d 50 01             	lea    0x1(%eax),%edx
f012f72c:	89 55 f8             	mov    %edx,-0x8(%ebp)
f012f72f:	8b 55 fc             	mov    -0x4(%ebp),%edx
f012f732:	8d 4a 01             	lea    0x1(%edx),%ecx
f012f735:	89 4d fc             	mov    %ecx,-0x4(%ebp)
f012f738:	8a 12                	mov    (%edx),%dl
f012f73a:	88 10                	mov    %dl,(%eax)
		s += n;
		d += n;
		while (n-- > 0)
			*--d = *--s;
	} else
		while (n-- > 0)
f012f73c:	8b 45 10             	mov    0x10(%ebp),%eax
f012f73f:	8d 50 ff             	lea    -0x1(%eax),%edx
f012f742:	89 55 10             	mov    %edx,0x10(%ebp)
f012f745:	85 c0                	test   %eax,%eax
f012f747:	75 dd                	jne    f012f726 <memmove+0x54>
			*d++ = *s++;

	return dst;
f012f749:	8b 45 08             	mov    0x8(%ebp),%eax
}
f012f74c:	c9                   	leave  
f012f74d:	c3                   	ret    

f012f74e <memcmp>:

int
memcmp(const void *v1, const void *v2, uint32 n)
{
f012f74e:	55                   	push   %ebp
f012f74f:	89 e5                	mov    %esp,%ebp
f012f751:	83 ec 10             	sub    $0x10,%esp
	const uint8 *s1 = (const uint8 *) v1;
f012f754:	8b 45 08             	mov    0x8(%ebp),%eax
f012f757:	89 45 fc             	mov    %eax,-0x4(%ebp)
	const uint8 *s2 = (const uint8 *) v2;
f012f75a:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f75d:	89 45 f8             	mov    %eax,-0x8(%ebp)

	while (n-- > 0) {
f012f760:	eb 2a                	jmp    f012f78c <memcmp+0x3e>
		if (*s1 != *s2)
f012f762:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012f765:	8a 10                	mov    (%eax),%dl
f012f767:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012f76a:	8a 00                	mov    (%eax),%al
f012f76c:	38 c2                	cmp    %al,%dl
f012f76e:	74 16                	je     f012f786 <memcmp+0x38>
			return (int) *s1 - (int) *s2;
f012f770:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012f773:	8a 00                	mov    (%eax),%al
f012f775:	0f b6 d0             	movzbl %al,%edx
f012f778:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012f77b:	8a 00                	mov    (%eax),%al
f012f77d:	0f b6 c0             	movzbl %al,%eax
f012f780:	29 c2                	sub    %eax,%edx
f012f782:	89 d0                	mov    %edx,%eax
f012f784:	eb 18                	jmp    f012f79e <memcmp+0x50>
		s1++, s2++;
f012f786:	ff 45 fc             	incl   -0x4(%ebp)
f012f789:	ff 45 f8             	incl   -0x8(%ebp)
memcmp(const void *v1, const void *v2, uint32 n)
{
	const uint8 *s1 = (const uint8 *) v1;
	const uint8 *s2 = (const uint8 *) v2;

	while (n-- > 0) {
f012f78c:	8b 45 10             	mov    0x10(%ebp),%eax
f012f78f:	8d 50 ff             	lea    -0x1(%eax),%edx
f012f792:	89 55 10             	mov    %edx,0x10(%ebp)
f012f795:	85 c0                	test   %eax,%eax
f012f797:	75 c9                	jne    f012f762 <memcmp+0x14>
		if (*s1 != *s2)
			return (int) *s1 - (int) *s2;
		s1++, s2++;
	}

	return 0;
f012f799:	b8 00 00 00 00       	mov    $0x0,%eax
}
f012f79e:	c9                   	leave  
f012f79f:	c3                   	ret    

f012f7a0 <memfind>:

void *
memfind(const void *s, int c, uint32 n)
{
f012f7a0:	55                   	push   %ebp
f012f7a1:	89 e5                	mov    %esp,%ebp
f012f7a3:	83 ec 10             	sub    $0x10,%esp
	const void *ends = (const char *) s + n;
f012f7a6:	8b 55 08             	mov    0x8(%ebp),%edx
f012f7a9:	8b 45 10             	mov    0x10(%ebp),%eax
f012f7ac:	01 d0                	add    %edx,%eax
f012f7ae:	89 45 fc             	mov    %eax,-0x4(%ebp)
	for (; s < ends; s++)
f012f7b1:	eb 15                	jmp    f012f7c8 <memfind+0x28>
		if (*(const unsigned char *) s == (unsigned char) c)
f012f7b3:	8b 45 08             	mov    0x8(%ebp),%eax
f012f7b6:	8a 00                	mov    (%eax),%al
f012f7b8:	0f b6 d0             	movzbl %al,%edx
f012f7bb:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f7be:	0f b6 c0             	movzbl %al,%eax
f012f7c1:	39 c2                	cmp    %eax,%edx
f012f7c3:	74 0d                	je     f012f7d2 <memfind+0x32>

void *
memfind(const void *s, int c, uint32 n)
{
	const void *ends = (const char *) s + n;
	for (; s < ends; s++)
f012f7c5:	ff 45 08             	incl   0x8(%ebp)
f012f7c8:	8b 45 08             	mov    0x8(%ebp),%eax
f012f7cb:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f012f7ce:	72 e3                	jb     f012f7b3 <memfind+0x13>
f012f7d0:	eb 01                	jmp    f012f7d3 <memfind+0x33>
		if (*(const unsigned char *) s == (unsigned char) c)
			break;
f012f7d2:	90                   	nop
	return (void *) s;
f012f7d3:	8b 45 08             	mov    0x8(%ebp),%eax
}
f012f7d6:	c9                   	leave  
f012f7d7:	c3                   	ret    

f012f7d8 <strtol>:

long
strtol(const char *s, char **endptr, int base)
{
f012f7d8:	55                   	push   %ebp
f012f7d9:	89 e5                	mov    %esp,%ebp
f012f7db:	83 ec 10             	sub    $0x10,%esp
	int neg = 0;
f012f7de:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	long val = 0;
f012f7e5:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	// gobble initial whitespace
	while (*s == ' ' || *s == '\t')
f012f7ec:	eb 03                	jmp    f012f7f1 <strtol+0x19>
		s++;
f012f7ee:	ff 45 08             	incl   0x8(%ebp)
{
	int neg = 0;
	long val = 0;

	// gobble initial whitespace
	while (*s == ' ' || *s == '\t')
f012f7f1:	8b 45 08             	mov    0x8(%ebp),%eax
f012f7f4:	8a 00                	mov    (%eax),%al
f012f7f6:	3c 20                	cmp    $0x20,%al
f012f7f8:	74 f4                	je     f012f7ee <strtol+0x16>
f012f7fa:	8b 45 08             	mov    0x8(%ebp),%eax
f012f7fd:	8a 00                	mov    (%eax),%al
f012f7ff:	3c 09                	cmp    $0x9,%al
f012f801:	74 eb                	je     f012f7ee <strtol+0x16>
		s++;

	// plus/minus sign
	if (*s == '+')
f012f803:	8b 45 08             	mov    0x8(%ebp),%eax
f012f806:	8a 00                	mov    (%eax),%al
f012f808:	3c 2b                	cmp    $0x2b,%al
f012f80a:	75 05                	jne    f012f811 <strtol+0x39>
		s++;
f012f80c:	ff 45 08             	incl   0x8(%ebp)
f012f80f:	eb 13                	jmp    f012f824 <strtol+0x4c>
	else if (*s == '-')
f012f811:	8b 45 08             	mov    0x8(%ebp),%eax
f012f814:	8a 00                	mov    (%eax),%al
f012f816:	3c 2d                	cmp    $0x2d,%al
f012f818:	75 0a                	jne    f012f824 <strtol+0x4c>
		s++, neg = 1;
f012f81a:	ff 45 08             	incl   0x8(%ebp)
f012f81d:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)

	// hex or octal base prefix
	if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x'))
f012f824:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f012f828:	74 06                	je     f012f830 <strtol+0x58>
f012f82a:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
f012f82e:	75 20                	jne    f012f850 <strtol+0x78>
f012f830:	8b 45 08             	mov    0x8(%ebp),%eax
f012f833:	8a 00                	mov    (%eax),%al
f012f835:	3c 30                	cmp    $0x30,%al
f012f837:	75 17                	jne    f012f850 <strtol+0x78>
f012f839:	8b 45 08             	mov    0x8(%ebp),%eax
f012f83c:	40                   	inc    %eax
f012f83d:	8a 00                	mov    (%eax),%al
f012f83f:	3c 78                	cmp    $0x78,%al
f012f841:	75 0d                	jne    f012f850 <strtol+0x78>
		s += 2, base = 16;
f012f843:	83 45 08 02          	addl   $0x2,0x8(%ebp)
f012f847:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
f012f84e:	eb 28                	jmp    f012f878 <strtol+0xa0>
	else if (base == 0 && s[0] == '0')
f012f850:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f012f854:	75 15                	jne    f012f86b <strtol+0x93>
f012f856:	8b 45 08             	mov    0x8(%ebp),%eax
f012f859:	8a 00                	mov    (%eax),%al
f012f85b:	3c 30                	cmp    $0x30,%al
f012f85d:	75 0c                	jne    f012f86b <strtol+0x93>
		s++, base = 8;
f012f85f:	ff 45 08             	incl   0x8(%ebp)
f012f862:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
f012f869:	eb 0d                	jmp    f012f878 <strtol+0xa0>
	else if (base == 0)
f012f86b:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f012f86f:	75 07                	jne    f012f878 <strtol+0xa0>
		base = 10;
f012f871:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)

	// digits
	while (1) {
		int dig;

		if (*s >= '0' && *s <= '9')
f012f878:	8b 45 08             	mov    0x8(%ebp),%eax
f012f87b:	8a 00                	mov    (%eax),%al
f012f87d:	3c 2f                	cmp    $0x2f,%al
f012f87f:	7e 19                	jle    f012f89a <strtol+0xc2>
f012f881:	8b 45 08             	mov    0x8(%ebp),%eax
f012f884:	8a 00                	mov    (%eax),%al
f012f886:	3c 39                	cmp    $0x39,%al
f012f888:	7f 10                	jg     f012f89a <strtol+0xc2>
			dig = *s - '0';
f012f88a:	8b 45 08             	mov    0x8(%ebp),%eax
f012f88d:	8a 00                	mov    (%eax),%al
f012f88f:	0f be c0             	movsbl %al,%eax
f012f892:	83 e8 30             	sub    $0x30,%eax
f012f895:	89 45 f4             	mov    %eax,-0xc(%ebp)
f012f898:	eb 42                	jmp    f012f8dc <strtol+0x104>
		else if (*s >= 'a' && *s <= 'z')
f012f89a:	8b 45 08             	mov    0x8(%ebp),%eax
f012f89d:	8a 00                	mov    (%eax),%al
f012f89f:	3c 60                	cmp    $0x60,%al
f012f8a1:	7e 19                	jle    f012f8bc <strtol+0xe4>
f012f8a3:	8b 45 08             	mov    0x8(%ebp),%eax
f012f8a6:	8a 00                	mov    (%eax),%al
f012f8a8:	3c 7a                	cmp    $0x7a,%al
f012f8aa:	7f 10                	jg     f012f8bc <strtol+0xe4>
			dig = *s - 'a' + 10;
f012f8ac:	8b 45 08             	mov    0x8(%ebp),%eax
f012f8af:	8a 00                	mov    (%eax),%al
f012f8b1:	0f be c0             	movsbl %al,%eax
f012f8b4:	83 e8 57             	sub    $0x57,%eax
f012f8b7:	89 45 f4             	mov    %eax,-0xc(%ebp)
f012f8ba:	eb 20                	jmp    f012f8dc <strtol+0x104>
		else if (*s >= 'A' && *s <= 'Z')
f012f8bc:	8b 45 08             	mov    0x8(%ebp),%eax
f012f8bf:	8a 00                	mov    (%eax),%al
f012f8c1:	3c 40                	cmp    $0x40,%al
f012f8c3:	7e 39                	jle    f012f8fe <strtol+0x126>
f012f8c5:	8b 45 08             	mov    0x8(%ebp),%eax
f012f8c8:	8a 00                	mov    (%eax),%al
f012f8ca:	3c 5a                	cmp    $0x5a,%al
f012f8cc:	7f 30                	jg     f012f8fe <strtol+0x126>
			dig = *s - 'A' + 10;
f012f8ce:	8b 45 08             	mov    0x8(%ebp),%eax
f012f8d1:	8a 00                	mov    (%eax),%al
f012f8d3:	0f be c0             	movsbl %al,%eax
f012f8d6:	83 e8 37             	sub    $0x37,%eax
f012f8d9:	89 45 f4             	mov    %eax,-0xc(%ebp)
		else
			break;
		if (dig >= base)
f012f8dc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012f8df:	3b 45 10             	cmp    0x10(%ebp),%eax
f012f8e2:	7d 19                	jge    f012f8fd <strtol+0x125>
			break;
		s++, val = (val * base) + dig;
f012f8e4:	ff 45 08             	incl   0x8(%ebp)
f012f8e7:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012f8ea:	0f af 45 10          	imul   0x10(%ebp),%eax
f012f8ee:	89 c2                	mov    %eax,%edx
f012f8f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012f8f3:	01 d0                	add    %edx,%eax
f012f8f5:	89 45 f8             	mov    %eax,-0x8(%ebp)
		// we don't properly detect overflow!
	}
f012f8f8:	e9 7b ff ff ff       	jmp    f012f878 <strtol+0xa0>
		else if (*s >= 'A' && *s <= 'Z')
			dig = *s - 'A' + 10;
		else
			break;
		if (dig >= base)
			break;
f012f8fd:	90                   	nop
		s++, val = (val * base) + dig;
		// we don't properly detect overflow!
	}

	if (endptr)
f012f8fe:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f012f902:	74 08                	je     f012f90c <strtol+0x134>
		*endptr = (char *) s;
f012f904:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f907:	8b 55 08             	mov    0x8(%ebp),%edx
f012f90a:	89 10                	mov    %edx,(%eax)
	return (neg ? -val : val);
f012f90c:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f012f910:	74 07                	je     f012f919 <strtol+0x141>
f012f912:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012f915:	f7 d8                	neg    %eax
f012f917:	eb 03                	jmp    f012f91c <strtol+0x144>
f012f919:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f012f91c:	c9                   	leave  
f012f91d:	c3                   	ret    

f012f91e <ltostr>:

void
ltostr(long value, char *str)
{
f012f91e:	55                   	push   %ebp
f012f91f:	89 e5                	mov    %esp,%ebp
f012f921:	83 ec 20             	sub    $0x20,%esp
	int neg = 0;
f012f924:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	int s = 0 ;
f012f92b:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	// plus/minus sign
	if (value < 0)
f012f932:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f012f936:	79 13                	jns    f012f94b <ltostr+0x2d>
	{
		neg = 1;
f012f938:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
		str[0] = '-';
f012f93f:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f942:	c6 00 2d             	movb   $0x2d,(%eax)
		value = value * -1 ;
f012f945:	f7 5d 08             	negl   0x8(%ebp)
		s++ ;
f012f948:	ff 45 f8             	incl   -0x8(%ebp)
	}
	do
	{
		int mod = value % 10 ;
f012f94b:	8b 45 08             	mov    0x8(%ebp),%eax
f012f94e:	b9 0a 00 00 00       	mov    $0xa,%ecx
f012f953:	99                   	cltd   
f012f954:	f7 f9                	idiv   %ecx
f012f956:	89 55 ec             	mov    %edx,-0x14(%ebp)
		str[s++] = mod + '0' ;
f012f959:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012f95c:	8d 50 01             	lea    0x1(%eax),%edx
f012f95f:	89 55 f8             	mov    %edx,-0x8(%ebp)
f012f962:	89 c2                	mov    %eax,%edx
f012f964:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f967:	01 d0                	add    %edx,%eax
f012f969:	8b 55 ec             	mov    -0x14(%ebp),%edx
f012f96c:	83 c2 30             	add    $0x30,%edx
f012f96f:	88 10                	mov    %dl,(%eax)
		value = value / 10 ;
f012f971:	8b 4d 08             	mov    0x8(%ebp),%ecx
f012f974:	b8 67 66 66 66       	mov    $0x66666667,%eax
f012f979:	f7 e9                	imul   %ecx
f012f97b:	c1 fa 02             	sar    $0x2,%edx
f012f97e:	89 c8                	mov    %ecx,%eax
f012f980:	c1 f8 1f             	sar    $0x1f,%eax
f012f983:	29 c2                	sub    %eax,%edx
f012f985:	89 d0                	mov    %edx,%eax
f012f987:	89 45 08             	mov    %eax,0x8(%ebp)
	} while (value % 10 != 0);
f012f98a:	8b 4d 08             	mov    0x8(%ebp),%ecx
f012f98d:	b8 67 66 66 66       	mov    $0x66666667,%eax
f012f992:	f7 e9                	imul   %ecx
f012f994:	c1 fa 02             	sar    $0x2,%edx
f012f997:	89 c8                	mov    %ecx,%eax
f012f999:	c1 f8 1f             	sar    $0x1f,%eax
f012f99c:	29 c2                	sub    %eax,%edx
f012f99e:	89 d0                	mov    %edx,%eax
f012f9a0:	c1 e0 02             	shl    $0x2,%eax
f012f9a3:	01 d0                	add    %edx,%eax
f012f9a5:	01 c0                	add    %eax,%eax
f012f9a7:	29 c1                	sub    %eax,%ecx
f012f9a9:	89 ca                	mov    %ecx,%edx
f012f9ab:	85 d2                	test   %edx,%edx
f012f9ad:	75 9c                	jne    f012f94b <ltostr+0x2d>

	//reverse the string
	int start = 0 ;
f012f9af:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int end = s-1 ;
f012f9b6:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012f9b9:	48                   	dec    %eax
f012f9ba:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (neg)
f012f9bd:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f012f9c1:	74 3d                	je     f012fa00 <ltostr+0xe2>
		start = 1 ;
f012f9c3:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
	while(start<end)
f012f9ca:	eb 34                	jmp    f012fa00 <ltostr+0xe2>
	{
		char tmp = str[start] ;
f012f9cc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012f9cf:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f9d2:	01 d0                	add    %edx,%eax
f012f9d4:	8a 00                	mov    (%eax),%al
f012f9d6:	88 45 eb             	mov    %al,-0x15(%ebp)
		str[start] = str[end] ;
f012f9d9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012f9dc:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f9df:	01 c2                	add    %eax,%edx
f012f9e1:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f012f9e4:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f9e7:	01 c8                	add    %ecx,%eax
f012f9e9:	8a 00                	mov    (%eax),%al
f012f9eb:	88 02                	mov    %al,(%edx)
		str[end] = tmp;
f012f9ed:	8b 55 f0             	mov    -0x10(%ebp),%edx
f012f9f0:	8b 45 0c             	mov    0xc(%ebp),%eax
f012f9f3:	01 c2                	add    %eax,%edx
f012f9f5:	8a 45 eb             	mov    -0x15(%ebp),%al
f012f9f8:	88 02                	mov    %al,(%edx)
		start++ ;
f012f9fa:	ff 45 f4             	incl   -0xc(%ebp)
		end-- ;
f012f9fd:	ff 4d f0             	decl   -0x10(%ebp)
	//reverse the string
	int start = 0 ;
	int end = s-1 ;
	if (neg)
		start = 1 ;
	while(start<end)
f012fa00:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fa03:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012fa06:	7c c4                	jl     f012f9cc <ltostr+0xae>
		str[end] = tmp;
		start++ ;
		end-- ;
	}

	str[s] = 0 ;
f012fa08:	8b 55 f8             	mov    -0x8(%ebp),%edx
f012fa0b:	8b 45 0c             	mov    0xc(%ebp),%eax
f012fa0e:	01 d0                	add    %edx,%eax
f012fa10:	c6 00 00             	movb   $0x0,(%eax)
	// we don't properly detect overflow!

}
f012fa13:	90                   	nop
f012fa14:	c9                   	leave  
f012fa15:	c3                   	ret    

f012fa16 <strcconcat>:

void
strcconcat(const char *str1, const char *str2, char *final)
{
f012fa16:	55                   	push   %ebp
f012fa17:	89 e5                	mov    %esp,%ebp
f012fa19:	83 ec 10             	sub    $0x10,%esp
	int len1 = strlen(str1);
f012fa1c:	ff 75 08             	pushl  0x8(%ebp)
f012fa1f:	e8 54 fa ff ff       	call   f012f478 <strlen>
f012fa24:	83 c4 04             	add    $0x4,%esp
f012fa27:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int len2 = strlen(str2);
f012fa2a:	ff 75 0c             	pushl  0xc(%ebp)
f012fa2d:	e8 46 fa ff ff       	call   f012f478 <strlen>
f012fa32:	83 c4 04             	add    $0x4,%esp
f012fa35:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int s = 0 ;
f012fa38:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	for (s=0 ; s < len1 ; s++)
f012fa3f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f012fa46:	eb 17                	jmp    f012fa5f <strcconcat+0x49>
		final[s] = str1[s] ;
f012fa48:	8b 55 fc             	mov    -0x4(%ebp),%edx
f012fa4b:	8b 45 10             	mov    0x10(%ebp),%eax
f012fa4e:	01 c2                	add    %eax,%edx
f012fa50:	8b 4d fc             	mov    -0x4(%ebp),%ecx
f012fa53:	8b 45 08             	mov    0x8(%ebp),%eax
f012fa56:	01 c8                	add    %ecx,%eax
f012fa58:	8a 00                	mov    (%eax),%al
f012fa5a:	88 02                	mov    %al,(%edx)
strcconcat(const char *str1, const char *str2, char *final)
{
	int len1 = strlen(str1);
	int len2 = strlen(str2);
	int s = 0 ;
	for (s=0 ; s < len1 ; s++)
f012fa5c:	ff 45 fc             	incl   -0x4(%ebp)
f012fa5f:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012fa62:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012fa65:	7c e1                	jl     f012fa48 <strcconcat+0x32>
		final[s] = str1[s] ;

	int i = 0 ;
f012fa67:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for (i=0 ; i < len2 ; i++)
f012fa6e:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
f012fa75:	eb 1f                	jmp    f012fa96 <strcconcat+0x80>
		final[s++] = str2[i] ;
f012fa77:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012fa7a:	8d 50 01             	lea    0x1(%eax),%edx
f012fa7d:	89 55 fc             	mov    %edx,-0x4(%ebp)
f012fa80:	89 c2                	mov    %eax,%edx
f012fa82:	8b 45 10             	mov    0x10(%ebp),%eax
f012fa85:	01 c2                	add    %eax,%edx
f012fa87:	8b 4d f8             	mov    -0x8(%ebp),%ecx
f012fa8a:	8b 45 0c             	mov    0xc(%ebp),%eax
f012fa8d:	01 c8                	add    %ecx,%eax
f012fa8f:	8a 00                	mov    (%eax),%al
f012fa91:	88 02                	mov    %al,(%edx)
	int s = 0 ;
	for (s=0 ; s < len1 ; s++)
		final[s] = str1[s] ;

	int i = 0 ;
	for (i=0 ; i < len2 ; i++)
f012fa93:	ff 45 f8             	incl   -0x8(%ebp)
f012fa96:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012fa99:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012fa9c:	7c d9                	jl     f012fa77 <strcconcat+0x61>
		final[s++] = str2[i] ;

	final[s] = 0;
f012fa9e:	8b 55 fc             	mov    -0x4(%ebp),%edx
f012faa1:	8b 45 10             	mov    0x10(%ebp),%eax
f012faa4:	01 d0                	add    %edx,%eax
f012faa6:	c6 00 00             	movb   $0x0,(%eax)
}
f012faa9:	90                   	nop
f012faaa:	c9                   	leave  
f012faab:	c3                   	ret    

f012faac <strsplit>:
int strsplit(char *string, char *SPLIT_CHARS, char **argv, int * argc)
{
f012faac:	55                   	push   %ebp
f012faad:	89 e5                	mov    %esp,%ebp
	// Parse the command string into splitchars-separated arguments
	*argc = 0;
f012faaf:	8b 45 14             	mov    0x14(%ebp),%eax
f012fab2:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	(argv)[*argc] = 0;
f012fab8:	8b 45 14             	mov    0x14(%ebp),%eax
f012fabb:	8b 00                	mov    (%eax),%eax
f012fabd:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012fac4:	8b 45 10             	mov    0x10(%ebp),%eax
f012fac7:	01 d0                	add    %edx,%eax
f012fac9:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	while (1)
	{
		// trim splitchars
		while (*string && strchr(SPLIT_CHARS, *string))
f012facf:	eb 0c                	jmp    f012fadd <strsplit+0x31>
			*string++ = 0;
f012fad1:	8b 45 08             	mov    0x8(%ebp),%eax
f012fad4:	8d 50 01             	lea    0x1(%eax),%edx
f012fad7:	89 55 08             	mov    %edx,0x8(%ebp)
f012fada:	c6 00 00             	movb   $0x0,(%eax)
	*argc = 0;
	(argv)[*argc] = 0;
	while (1)
	{
		// trim splitchars
		while (*string && strchr(SPLIT_CHARS, *string))
f012fadd:	8b 45 08             	mov    0x8(%ebp),%eax
f012fae0:	8a 00                	mov    (%eax),%al
f012fae2:	84 c0                	test   %al,%al
f012fae4:	74 18                	je     f012fafe <strsplit+0x52>
f012fae6:	8b 45 08             	mov    0x8(%ebp),%eax
f012fae9:	8a 00                	mov    (%eax),%al
f012faeb:	0f be c0             	movsbl %al,%eax
f012faee:	50                   	push   %eax
f012faef:	ff 75 0c             	pushl  0xc(%ebp)
f012faf2:	e8 13 fb ff ff       	call   f012f60a <strchr>
f012faf7:	83 c4 08             	add    $0x8,%esp
f012fafa:	85 c0                	test   %eax,%eax
f012fafc:	75 d3                	jne    f012fad1 <strsplit+0x25>
			*string++ = 0;

		//if the command string is finished, then break the loop
		if (*string == 0)
f012fafe:	8b 45 08             	mov    0x8(%ebp),%eax
f012fb01:	8a 00                	mov    (%eax),%al
f012fb03:	84 c0                	test   %al,%al
f012fb05:	74 5a                	je     f012fb61 <strsplit+0xb5>
			break;

		//check current number of arguments
		if (*argc == MAX_ARGUMENTS-1)
f012fb07:	8b 45 14             	mov    0x14(%ebp),%eax
f012fb0a:	8b 00                	mov    (%eax),%eax
f012fb0c:	83 f8 0f             	cmp    $0xf,%eax
f012fb0f:	75 07                	jne    f012fb18 <strsplit+0x6c>
		{
			return 0;
f012fb11:	b8 00 00 00 00       	mov    $0x0,%eax
f012fb16:	eb 66                	jmp    f012fb7e <strsplit+0xd2>
		}

		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
f012fb18:	8b 45 14             	mov    0x14(%ebp),%eax
f012fb1b:	8b 00                	mov    (%eax),%eax
f012fb1d:	8d 48 01             	lea    0x1(%eax),%ecx
f012fb20:	8b 55 14             	mov    0x14(%ebp),%edx
f012fb23:	89 0a                	mov    %ecx,(%edx)
f012fb25:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012fb2c:	8b 45 10             	mov    0x10(%ebp),%eax
f012fb2f:	01 c2                	add    %eax,%edx
f012fb31:	8b 45 08             	mov    0x8(%ebp),%eax
f012fb34:	89 02                	mov    %eax,(%edx)
		while (*string && !strchr(SPLIT_CHARS, *string))
f012fb36:	eb 03                	jmp    f012fb3b <strsplit+0x8f>
			string++;
f012fb38:	ff 45 08             	incl   0x8(%ebp)
			return 0;
		}

		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
		while (*string && !strchr(SPLIT_CHARS, *string))
f012fb3b:	8b 45 08             	mov    0x8(%ebp),%eax
f012fb3e:	8a 00                	mov    (%eax),%al
f012fb40:	84 c0                	test   %al,%al
f012fb42:	74 8b                	je     f012facf <strsplit+0x23>
f012fb44:	8b 45 08             	mov    0x8(%ebp),%eax
f012fb47:	8a 00                	mov    (%eax),%al
f012fb49:	0f be c0             	movsbl %al,%eax
f012fb4c:	50                   	push   %eax
f012fb4d:	ff 75 0c             	pushl  0xc(%ebp)
f012fb50:	e8 b5 fa ff ff       	call   f012f60a <strchr>
f012fb55:	83 c4 08             	add    $0x8,%esp
f012fb58:	85 c0                	test   %eax,%eax
f012fb5a:	74 dc                	je     f012fb38 <strsplit+0x8c>
			string++;
	}
f012fb5c:	e9 6e ff ff ff       	jmp    f012facf <strsplit+0x23>
		while (*string && strchr(SPLIT_CHARS, *string))
			*string++ = 0;

		//if the command string is finished, then break the loop
		if (*string == 0)
			break;
f012fb61:	90                   	nop
		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
		while (*string && !strchr(SPLIT_CHARS, *string))
			string++;
	}
	(argv)[*argc] = 0;
f012fb62:	8b 45 14             	mov    0x14(%ebp),%eax
f012fb65:	8b 00                	mov    (%eax),%eax
f012fb67:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012fb6e:	8b 45 10             	mov    0x10(%ebp),%eax
f012fb71:	01 d0                	add    %edx,%eax
f012fb73:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	return 1 ;
f012fb79:	b8 01 00 00 00       	mov    $0x1,%eax
}
f012fb7e:	c9                   	leave  
f012fb7f:	c3                   	ret    

f012fb80 <str2lower>:


/*2024*/
char* str2lower(char *dst, const char *src)
{
f012fb80:	55                   	push   %ebp
f012fb81:	89 e5                	mov    %esp,%ebp
f012fb83:	83 ec 10             	sub    $0x10,%esp
	//TODO: [PROJECT'23.MS1 - #1] [1] PLAY WITH CODE! - str2lower
	//Comment the following line before start coding...
	//panic("process_command is not implemented yet");
	if(src==NULL||dst==NULL){
f012fb86:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f012fb8a:	74 06                	je     f012fb92 <str2lower+0x12>
f012fb8c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f012fb90:	75 07                	jne    f012fb99 <str2lower+0x19>
		return NULL;
f012fb92:	b8 00 00 00 00       	mov    $0x0,%eax
f012fb97:	eb 4d                	jmp    f012fbe6 <str2lower+0x66>
	}
	char *ref=dst;
f012fb99:	8b 45 08             	mov    0x8(%ebp),%eax
f012fb9c:	89 45 fc             	mov    %eax,-0x4(%ebp)
		while(*src!='\0'){
f012fb9f:	eb 33                	jmp    f012fbd4 <str2lower+0x54>
			if(*src>=65&&*src<=90){
f012fba1:	8b 45 0c             	mov    0xc(%ebp),%eax
f012fba4:	8a 00                	mov    (%eax),%al
f012fba6:	3c 40                	cmp    $0x40,%al
f012fba8:	7e 1a                	jle    f012fbc4 <str2lower+0x44>
f012fbaa:	8b 45 0c             	mov    0xc(%ebp),%eax
f012fbad:	8a 00                	mov    (%eax),%al
f012fbaf:	3c 5a                	cmp    $0x5a,%al
f012fbb1:	7f 11                	jg     f012fbc4 <str2lower+0x44>
				*dst=*src+32;
f012fbb3:	8b 45 0c             	mov    0xc(%ebp),%eax
f012fbb6:	8a 00                	mov    (%eax),%al
f012fbb8:	83 c0 20             	add    $0x20,%eax
f012fbbb:	88 c2                	mov    %al,%dl
f012fbbd:	8b 45 08             	mov    0x8(%ebp),%eax
f012fbc0:	88 10                	mov    %dl,(%eax)
f012fbc2:	eb 0a                	jmp    f012fbce <str2lower+0x4e>
			}
			else{
				*dst=*src;
f012fbc4:	8b 45 0c             	mov    0xc(%ebp),%eax
f012fbc7:	8a 10                	mov    (%eax),%dl
f012fbc9:	8b 45 08             	mov    0x8(%ebp),%eax
f012fbcc:	88 10                	mov    %dl,(%eax)
			}
			src++;
f012fbce:	ff 45 0c             	incl   0xc(%ebp)
			dst++;
f012fbd1:	ff 45 08             	incl   0x8(%ebp)
	//panic("process_command is not implemented yet");
	if(src==NULL||dst==NULL){
		return NULL;
	}
	char *ref=dst;
		while(*src!='\0'){
f012fbd4:	8b 45 0c             	mov    0xc(%ebp),%eax
f012fbd7:	8a 00                	mov    (%eax),%al
f012fbd9:	84 c0                	test   %al,%al
f012fbdb:	75 c4                	jne    f012fba1 <str2lower+0x21>
				*dst=*src;
			}
			src++;
			dst++;
		}
		*dst='\0';
f012fbdd:	8b 45 08             	mov    0x8(%ebp),%eax
f012fbe0:	c6 00 00             	movb   $0x0,(%eax)
		return ref;
f012fbe3:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f012fbe6:	c9                   	leave  
f012fbe7:	c3                   	ret    

f012fbe8 <ide_wait_ready>:
#define IDE_ERR		0x01

static int diskno = 0;

static int ide_wait_ready(bool check_error)
{
f012fbe8:	55                   	push   %ebp
f012fbe9:	89 e5                	mov    %esp,%ebp
f012fbeb:	83 ec 10             	sub    $0x10,%esp
	int r;

	while (((r = inb(0x1F7)) & (IDE_BSY|IDE_DRDY)) != IDE_DRDY)
f012fbee:	90                   	nop
f012fbef:	c7 45 f8 f7 01 00 00 	movl   $0x1f7,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f012fbf6:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012fbf9:	89 c2                	mov    %eax,%edx
f012fbfb:	ec                   	in     (%dx),%al
f012fbfc:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f012fbff:	8a 45 f7             	mov    -0x9(%ebp),%al
f012fc02:	0f b6 c0             	movzbl %al,%eax
f012fc05:	89 45 fc             	mov    %eax,-0x4(%ebp)
f012fc08:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012fc0b:	25 c0 00 00 00       	and    $0xc0,%eax
f012fc10:	83 f8 40             	cmp    $0x40,%eax
f012fc13:	75 da                	jne    f012fbef <ide_wait_ready+0x7>
		/* do nothing */;


	if (check_error && (r & (IDE_DF|IDE_ERR)) != 0)
f012fc15:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f012fc19:	74 11                	je     f012fc2c <ide_wait_ready+0x44>
f012fc1b:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012fc1e:	83 e0 21             	and    $0x21,%eax
f012fc21:	85 c0                	test   %eax,%eax
f012fc23:	74 07                	je     f012fc2c <ide_wait_ready+0x44>
	{
 		LOG_STATMENT(cprintf("ERROR @ ide_wait_ready() = %x(%d)\n",r,r););
		return -1;
f012fc25:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f012fc2a:	eb 05                	jmp    f012fc31 <ide_wait_ready+0x49>
	}
	return 0;
f012fc2c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f012fc31:	c9                   	leave  
f012fc32:	c3                   	ret    

f012fc33 <ide_read>:

int	ide_read(uint32 secno, void *dst, uint32 nsecs)
{
f012fc33:	55                   	push   %ebp
f012fc34:	89 e5                	mov    %esp,%ebp
f012fc36:	57                   	push   %edi
f012fc37:	53                   	push   %ebx
f012fc38:	83 ec 30             	sub    $0x30,%esp
	int r;

	assert(nsecs <= 256);
f012fc3b:	81 7d 10 00 01 00 00 	cmpl   $0x100,0x10(%ebp)
f012fc42:	76 16                	jbe    f012fc5a <ide_read+0x27>
f012fc44:	68 43 bf 13 f0       	push   $0xf013bf43
f012fc49:	68 50 bf 13 f0       	push   $0xf013bf50
f012fc4e:	6a 25                	push   $0x25
f012fc50:	68 65 bf 13 f0       	push   $0xf013bf65
f012fc55:	e8 56 05 fd ff       	call   f01001b0 <_panic>

	//TODO: FUTURE NOTE: This BUSY-WAIT should be replaced by Interrupt to allow the OS to schedule another process till the device become ready [el7 :)]
	ide_wait_ready(0);
f012fc5a:	83 ec 0c             	sub    $0xc,%esp
f012fc5d:	6a 00                	push   $0x0
f012fc5f:	e8 84 ff ff ff       	call   f012fbe8 <ide_wait_ready>
f012fc64:	83 c4 10             	add    $0x10,%esp

	outb(0x1F2, nsecs);
f012fc67:	8b 45 10             	mov    0x10(%ebp),%eax
f012fc6a:	0f b6 c0             	movzbl %al,%eax
f012fc6d:	c7 45 f0 f2 01 00 00 	movl   $0x1f2,-0x10(%ebp)
f012fc74:	88 45 d2             	mov    %al,-0x2e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f012fc77:	8a 45 d2             	mov    -0x2e(%ebp),%al
f012fc7a:	8b 55 f0             	mov    -0x10(%ebp),%edx
f012fc7d:	ee                   	out    %al,(%dx)
	outb(0x1F3, secno & 0xFF);
f012fc7e:	8b 45 08             	mov    0x8(%ebp),%eax
f012fc81:	0f b6 c0             	movzbl %al,%eax
f012fc84:	c7 45 ec f3 01 00 00 	movl   $0x1f3,-0x14(%ebp)
f012fc8b:	88 45 d3             	mov    %al,-0x2d(%ebp)
f012fc8e:	8a 45 d3             	mov    -0x2d(%ebp),%al
f012fc91:	8b 55 ec             	mov    -0x14(%ebp),%edx
f012fc94:	ee                   	out    %al,(%dx)
	outb(0x1F4, (secno >> 8) & 0xFF);
f012fc95:	8b 45 08             	mov    0x8(%ebp),%eax
f012fc98:	c1 e8 08             	shr    $0x8,%eax
f012fc9b:	0f b6 c0             	movzbl %al,%eax
f012fc9e:	c7 45 e8 f4 01 00 00 	movl   $0x1f4,-0x18(%ebp)
f012fca5:	88 45 d4             	mov    %al,-0x2c(%ebp)
f012fca8:	8a 45 d4             	mov    -0x2c(%ebp),%al
f012fcab:	8b 55 e8             	mov    -0x18(%ebp),%edx
f012fcae:	ee                   	out    %al,(%dx)
	outb(0x1F5, (secno >> 16) & 0xFF);
f012fcaf:	8b 45 08             	mov    0x8(%ebp),%eax
f012fcb2:	c1 e8 10             	shr    $0x10,%eax
f012fcb5:	0f b6 c0             	movzbl %al,%eax
f012fcb8:	c7 45 e4 f5 01 00 00 	movl   $0x1f5,-0x1c(%ebp)
f012fcbf:	88 45 d5             	mov    %al,-0x2b(%ebp)
f012fcc2:	8a 45 d5             	mov    -0x2b(%ebp),%al
f012fcc5:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f012fcc8:	ee                   	out    %al,(%dx)
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
f012fcc9:	a1 2c 4a 25 f0       	mov    0xf0254a2c,%eax
f012fcce:	83 e0 01             	and    $0x1,%eax
f012fcd1:	c1 e0 04             	shl    $0x4,%eax
f012fcd4:	88 c2                	mov    %al,%dl
f012fcd6:	8b 45 08             	mov    0x8(%ebp),%eax
f012fcd9:	c1 e8 18             	shr    $0x18,%eax
f012fcdc:	83 e0 0f             	and    $0xf,%eax
f012fcdf:	09 d0                	or     %edx,%eax
f012fce1:	83 c8 e0             	or     $0xffffffe0,%eax
f012fce4:	0f b6 c0             	movzbl %al,%eax
f012fce7:	c7 45 e0 f6 01 00 00 	movl   $0x1f6,-0x20(%ebp)
f012fcee:	88 45 d6             	mov    %al,-0x2a(%ebp)
f012fcf1:	8a 45 d6             	mov    -0x2a(%ebp),%al
f012fcf4:	8b 55 e0             	mov    -0x20(%ebp),%edx
f012fcf7:	ee                   	out    %al,(%dx)
f012fcf8:	c7 45 d8 f7 01 00 00 	movl   $0x1f7,-0x28(%ebp)
f012fcff:	c6 45 d7 20          	movb   $0x20,-0x29(%ebp)
f012fd03:	8a 45 d7             	mov    -0x29(%ebp),%al
f012fd06:	8b 55 d8             	mov    -0x28(%ebp),%edx
f012fd09:	ee                   	out    %al,(%dx)
	outb(0x1F7, 0x20);	// CMD 0x20 means read sector

	for (; nsecs > 0; nsecs--, dst += SECTSIZE) {
f012fd0a:	eb 55                	jmp    f012fd61 <ide_read+0x12e>
		if ((r = ide_wait_ready(1)) < 0)
f012fd0c:	83 ec 0c             	sub    $0xc,%esp
f012fd0f:	6a 01                	push   $0x1
f012fd11:	e8 d2 fe ff ff       	call   f012fbe8 <ide_wait_ready>
f012fd16:	83 c4 10             	add    $0x10,%esp
f012fd19:	89 45 dc             	mov    %eax,-0x24(%ebp)
f012fd1c:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f012fd20:	79 05                	jns    f012fd27 <ide_read+0xf4>
			return r;
f012fd22:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012fd25:	eb 45                	jmp    f012fd6c <ide_read+0x139>
f012fd27:	c7 45 f4 f0 01 00 00 	movl   $0x1f0,-0xc(%ebp)
f012fd2e:	8b 45 0c             	mov    0xc(%ebp),%eax
f012fd31:	89 45 cc             	mov    %eax,-0x34(%ebp)
f012fd34:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
}

static __inline void
insl(int port, void *addr, int cnt)
{
	__asm __volatile("cld\n\trepne\n\tinsl"			:
f012fd3b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012fd3e:	8b 4d cc             	mov    -0x34(%ebp),%ecx
f012fd41:	8b 45 c8             	mov    -0x38(%ebp),%eax
f012fd44:	89 cb                	mov    %ecx,%ebx
f012fd46:	89 df                	mov    %ebx,%edi
f012fd48:	89 c1                	mov    %eax,%ecx
f012fd4a:	fc                   	cld    
f012fd4b:	f2 6d                	repnz insl (%dx),%es:(%edi)
f012fd4d:	89 c8                	mov    %ecx,%eax
f012fd4f:	89 fb                	mov    %edi,%ebx
f012fd51:	89 5d cc             	mov    %ebx,-0x34(%ebp)
f012fd54:	89 45 c8             	mov    %eax,-0x38(%ebp)
	outb(0x1F4, (secno >> 8) & 0xFF);
	outb(0x1F5, (secno >> 16) & 0xFF);
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
	outb(0x1F7, 0x20);	// CMD 0x20 means read sector

	for (; nsecs > 0; nsecs--, dst += SECTSIZE) {
f012fd57:	ff 4d 10             	decl   0x10(%ebp)
f012fd5a:	81 45 0c 00 02 00 00 	addl   $0x200,0xc(%ebp)
f012fd61:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f012fd65:	75 a5                	jne    f012fd0c <ide_read+0xd9>
		if ((r = ide_wait_ready(1)) < 0)
			return r;
		insl(0x1F0, dst, SECTSIZE/4);
	}

	return 0;
f012fd67:	b8 00 00 00 00       	mov    $0x0,%eax
}
f012fd6c:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012fd6f:	5b                   	pop    %ebx
f012fd70:	5f                   	pop    %edi
f012fd71:	5d                   	pop    %ebp
f012fd72:	c3                   	ret    

f012fd73 <ide_write>:

int ide_write(uint32 secno, const void *src, uint32 nsecs)
{
f012fd73:	55                   	push   %ebp
f012fd74:	89 e5                	mov    %esp,%ebp
f012fd76:	56                   	push   %esi
f012fd77:	53                   	push   %ebx
f012fd78:	83 ec 30             	sub    $0x30,%esp
	int r;

	//LOG_STATMENT(cprintf("1 ==> nsecs = %d\n",nsecs);)
	assert(nsecs <= 256);
f012fd7b:	81 7d 10 00 01 00 00 	cmpl   $0x100,0x10(%ebp)
f012fd82:	76 16                	jbe    f012fd9a <ide_write+0x27>
f012fd84:	68 43 bf 13 f0       	push   $0xf013bf43
f012fd89:	68 50 bf 13 f0       	push   $0xf013bf50
f012fd8e:	6a 3f                	push   $0x3f
f012fd90:	68 65 bf 13 f0       	push   $0xf013bf65
f012fd95:	e8 16 04 fd ff       	call   f01001b0 <_panic>

	//LOG_STATMENT(cprintf("2\n");)
	ide_wait_ready(0);
f012fd9a:	83 ec 0c             	sub    $0xc,%esp
f012fd9d:	6a 00                	push   $0x0
f012fd9f:	e8 44 fe ff ff       	call   f012fbe8 <ide_wait_ready>
f012fda4:	83 c4 10             	add    $0x10,%esp

	//LOG_STATMENT(cprintf("3 ==> nsecs = %d\n",nsecs);)
	outb(0x1F2, nsecs);
f012fda7:	8b 45 10             	mov    0x10(%ebp),%eax
f012fdaa:	0f b6 c0             	movzbl %al,%eax
f012fdad:	c7 45 f0 f2 01 00 00 	movl   $0x1f2,-0x10(%ebp)
f012fdb4:	88 45 d2             	mov    %al,-0x2e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f012fdb7:	8a 45 d2             	mov    -0x2e(%ebp),%al
f012fdba:	8b 55 f0             	mov    -0x10(%ebp),%edx
f012fdbd:	ee                   	out    %al,(%dx)
	outb(0x1F3, secno & 0xFF);
f012fdbe:	8b 45 08             	mov    0x8(%ebp),%eax
f012fdc1:	0f b6 c0             	movzbl %al,%eax
f012fdc4:	c7 45 ec f3 01 00 00 	movl   $0x1f3,-0x14(%ebp)
f012fdcb:	88 45 d3             	mov    %al,-0x2d(%ebp)
f012fdce:	8a 45 d3             	mov    -0x2d(%ebp),%al
f012fdd1:	8b 55 ec             	mov    -0x14(%ebp),%edx
f012fdd4:	ee                   	out    %al,(%dx)
	outb(0x1F4, (secno >> 8) & 0xFF);
f012fdd5:	8b 45 08             	mov    0x8(%ebp),%eax
f012fdd8:	c1 e8 08             	shr    $0x8,%eax
f012fddb:	0f b6 c0             	movzbl %al,%eax
f012fdde:	c7 45 e8 f4 01 00 00 	movl   $0x1f4,-0x18(%ebp)
f012fde5:	88 45 d4             	mov    %al,-0x2c(%ebp)
f012fde8:	8a 45 d4             	mov    -0x2c(%ebp),%al
f012fdeb:	8b 55 e8             	mov    -0x18(%ebp),%edx
f012fdee:	ee                   	out    %al,(%dx)
	outb(0x1F5, (secno >> 16) & 0xFF);
f012fdef:	8b 45 08             	mov    0x8(%ebp),%eax
f012fdf2:	c1 e8 10             	shr    $0x10,%eax
f012fdf5:	0f b6 c0             	movzbl %al,%eax
f012fdf8:	c7 45 e4 f5 01 00 00 	movl   $0x1f5,-0x1c(%ebp)
f012fdff:	88 45 d5             	mov    %al,-0x2b(%ebp)
f012fe02:	8a 45 d5             	mov    -0x2b(%ebp),%al
f012fe05:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f012fe08:	ee                   	out    %al,(%dx)
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
f012fe09:	a1 2c 4a 25 f0       	mov    0xf0254a2c,%eax
f012fe0e:	83 e0 01             	and    $0x1,%eax
f012fe11:	c1 e0 04             	shl    $0x4,%eax
f012fe14:	88 c2                	mov    %al,%dl
f012fe16:	8b 45 08             	mov    0x8(%ebp),%eax
f012fe19:	c1 e8 18             	shr    $0x18,%eax
f012fe1c:	83 e0 0f             	and    $0xf,%eax
f012fe1f:	09 d0                	or     %edx,%eax
f012fe21:	83 c8 e0             	or     $0xffffffe0,%eax
f012fe24:	0f b6 c0             	movzbl %al,%eax
f012fe27:	c7 45 e0 f6 01 00 00 	movl   $0x1f6,-0x20(%ebp)
f012fe2e:	88 45 d6             	mov    %al,-0x2a(%ebp)
f012fe31:	8a 45 d6             	mov    -0x2a(%ebp),%al
f012fe34:	8b 55 e0             	mov    -0x20(%ebp),%edx
f012fe37:	ee                   	out    %al,(%dx)
f012fe38:	c7 45 d8 f7 01 00 00 	movl   $0x1f7,-0x28(%ebp)
f012fe3f:	c6 45 d7 30          	movb   $0x30,-0x29(%ebp)
f012fe43:	8a 45 d7             	mov    -0x29(%ebp),%al
f012fe46:	8b 55 d8             	mov    -0x28(%ebp),%edx
f012fe49:	ee                   	out    %al,(%dx)
	outb(0x1F7, 0x30);	// CMD 0x30 means write sector


	for (; nsecs > 0; nsecs--, src += SECTSIZE) {
f012fe4a:	eb 55                	jmp    f012fea1 <ide_write+0x12e>
		if ((r = ide_wait_ready(1)) < 0)
f012fe4c:	83 ec 0c             	sub    $0xc,%esp
f012fe4f:	6a 01                	push   $0x1
f012fe51:	e8 92 fd ff ff       	call   f012fbe8 <ide_wait_ready>
f012fe56:	83 c4 10             	add    $0x10,%esp
f012fe59:	89 45 dc             	mov    %eax,-0x24(%ebp)
f012fe5c:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f012fe60:	79 05                	jns    f012fe67 <ide_write+0xf4>
		{
			LOG_STATMENT(cprintf("FAILURE to write %d sectors to disk\n",nsecs););
			return r;
f012fe62:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012fe65:	eb 45                	jmp    f012feac <ide_write+0x139>
f012fe67:	c7 45 f4 f0 01 00 00 	movl   $0x1f0,-0xc(%ebp)
f012fe6e:	8b 45 0c             	mov    0xc(%ebp),%eax
f012fe71:	89 45 cc             	mov    %eax,-0x34(%ebp)
f012fe74:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
}

static __inline void
outsl(int port, const void *addr, int cnt)
{
	__asm __volatile("cld\n\trepne\n\toutsl"		:
f012fe7b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012fe7e:	8b 4d cc             	mov    -0x34(%ebp),%ecx
f012fe81:	8b 45 c8             	mov    -0x38(%ebp),%eax
f012fe84:	89 cb                	mov    %ecx,%ebx
f012fe86:	89 de                	mov    %ebx,%esi
f012fe88:	89 c1                	mov    %eax,%ecx
f012fe8a:	fc                   	cld    
f012fe8b:	f2 6f                	repnz outsl %ds:(%esi),(%dx)
f012fe8d:	89 c8                	mov    %ecx,%eax
f012fe8f:	89 f3                	mov    %esi,%ebx
f012fe91:	89 5d cc             	mov    %ebx,-0x34(%ebp)
f012fe94:	89 45 c8             	mov    %eax,-0x38(%ebp)
	outb(0x1F5, (secno >> 16) & 0xFF);
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
	outb(0x1F7, 0x30);	// CMD 0x30 means write sector


	for (; nsecs > 0; nsecs--, src += SECTSIZE) {
f012fe97:	ff 4d 10             	decl   0x10(%ebp)
f012fe9a:	81 45 0c 00 02 00 00 	addl   $0x200,0xc(%ebp)
f012fea1:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f012fea5:	75 a5                	jne    f012fe4c <ide_write+0xd9>
		}
	}
	//LOG_STATMENT(cprintf("5\n");)
	//cprintf("returning from ide_write \n");

	return 0;
f012fea7:	b8 00 00 00 00       	mov    $0x0,%eax
}
f012feac:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012feaf:	5b                   	pop    %ebx
f012feb0:	5e                   	pop    %esi
f012feb1:	5d                   	pop    %ebp
f012feb2:	c3                   	ret    

f012feb3 <get_block_size>:
//==================================================================================//

//=====================================================
// 1) GET BLOCK SIZE (including size of its meta data):
//=====================================================
uint32 get_block_size(void* va) {
f012feb3:	55                   	push   %ebp
f012feb4:	89 e5                	mov    %esp,%ebp
f012feb6:	83 ec 10             	sub    $0x10,%esp
	struct BlockMetaData *curBlkMetaData = ((struct BlockMetaData *) va - 1);
f012feb9:	8b 45 08             	mov    0x8(%ebp),%eax
f012febc:	83 e8 10             	sub    $0x10,%eax
f012febf:	89 45 fc             	mov    %eax,-0x4(%ebp)
	return curBlkMetaData->size;
f012fec2:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012fec5:	8b 00                	mov    (%eax),%eax
}
f012fec7:	c9                   	leave  
f012fec8:	c3                   	ret    

f012fec9 <is_free_block>:

//===========================
// 2) GET BLOCK STATUS:
//===========================
int8 is_free_block(void* va) {
f012fec9:	55                   	push   %ebp
f012feca:	89 e5                	mov    %esp,%ebp
f012fecc:	83 ec 10             	sub    $0x10,%esp
	struct BlockMetaData *curBlkMetaData = ((struct BlockMetaData *) va - 1);
f012fecf:	8b 45 08             	mov    0x8(%ebp),%eax
f012fed2:	83 e8 10             	sub    $0x10,%eax
f012fed5:	89 45 fc             	mov    %eax,-0x4(%ebp)
	return curBlkMetaData->is_free;
f012fed8:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012fedb:	8a 40 04             	mov    0x4(%eax),%al
}
f012fede:	c9                   	leave  
f012fedf:	c3                   	ret    

f012fee0 <alloc_block>:

//===========================================
// 3) ALLOCATE BLOCK BASED ON GIVEN STRATEGY:
//===========================================
void *alloc_block(uint32 size, int ALLOC_STRATEGY) {
f012fee0:	55                   	push   %ebp
f012fee1:	89 e5                	mov    %esp,%ebp
f012fee3:	83 ec 18             	sub    $0x18,%esp
	void *va = NULL;
f012fee6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	switch (ALLOC_STRATEGY) {
f012feed:	8b 45 0c             	mov    0xc(%ebp),%eax
f012fef0:	83 f8 02             	cmp    $0x2,%eax
f012fef3:	74 2b                	je     f012ff20 <alloc_block+0x40>
f012fef5:	83 f8 02             	cmp    $0x2,%eax
f012fef8:	7f 07                	jg     f012ff01 <alloc_block+0x21>
f012fefa:	83 f8 01             	cmp    $0x1,%eax
f012fefd:	74 0e                	je     f012ff0d <alloc_block+0x2d>
f012feff:	eb 58                	jmp    f012ff59 <alloc_block+0x79>
f012ff01:	83 f8 03             	cmp    $0x3,%eax
f012ff04:	74 2d                	je     f012ff33 <alloc_block+0x53>
f012ff06:	83 f8 04             	cmp    $0x4,%eax
f012ff09:	74 3b                	je     f012ff46 <alloc_block+0x66>
f012ff0b:	eb 4c                	jmp    f012ff59 <alloc_block+0x79>
	case DA_FF:
		va = alloc_block_FF(size);
f012ff0d:	83 ec 0c             	sub    $0xc,%esp
f012ff10:	ff 75 08             	pushl  0x8(%ebp)
f012ff13:	e8 77 01 00 00       	call   f013008f <alloc_block_FF>
f012ff18:	83 c4 10             	add    $0x10,%esp
f012ff1b:	89 45 f4             	mov    %eax,-0xc(%ebp)
		break;
f012ff1e:	eb 4a                	jmp    f012ff6a <alloc_block+0x8a>
	case DA_NF:
		va = alloc_block_NF(size);
f012ff20:	83 ec 0c             	sub    $0xc,%esp
f012ff23:	ff 75 08             	pushl  0x8(%ebp)
f012ff26:	e8 36 05 00 00       	call   f0130461 <alloc_block_NF>
f012ff2b:	83 c4 10             	add    $0x10,%esp
f012ff2e:	89 45 f4             	mov    %eax,-0xc(%ebp)
		break;
f012ff31:	eb 37                	jmp    f012ff6a <alloc_block+0x8a>
	case DA_BF:
		va = alloc_block_BF(size);
f012ff33:	83 ec 0c             	sub    $0xc,%esp
f012ff36:	ff 75 08             	pushl  0x8(%ebp)
f012ff39:	e8 45 03 00 00       	call   f0130283 <alloc_block_BF>
f012ff3e:	83 c4 10             	add    $0x10,%esp
f012ff41:	89 45 f4             	mov    %eax,-0xc(%ebp)
		break;
f012ff44:	eb 24                	jmp    f012ff6a <alloc_block+0x8a>
	case DA_WF:
		va = alloc_block_WF(size);
f012ff46:	83 ec 0c             	sub    $0xc,%esp
f012ff49:	ff 75 08             	pushl  0x8(%ebp)
f012ff4c:	e8 f3 04 00 00       	call   f0130444 <alloc_block_WF>
f012ff51:	83 c4 10             	add    $0x10,%esp
f012ff54:	89 45 f4             	mov    %eax,-0xc(%ebp)
		break;
f012ff57:	eb 11                	jmp    f012ff6a <alloc_block+0x8a>
	default:
		cprintf("Invalid allocation strategy\n");
f012ff59:	83 ec 0c             	sub    $0xc,%esp
f012ff5c:	68 70 bf 13 f0       	push   $0xf013bf70
f012ff61:	e8 cb 0e fd ff       	call   f0100e31 <cprintf>
f012ff66:	83 c4 10             	add    $0x10,%esp
		break;
f012ff69:	90                   	nop
	}
	return va;
f012ff6a:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f012ff6d:	c9                   	leave  
f012ff6e:	c3                   	ret    

f012ff6f <print_blocks_list>:

//===========================
// 4) PRINT BLOCKS LIST:
//===========================

void print_blocks_list(struct MemBlock_LIST list) {
f012ff6f:	55                   	push   %ebp
f012ff70:	89 e5                	mov    %esp,%ebp
f012ff72:	83 ec 18             	sub    $0x18,%esp
	cprintf("=========================================\n");
f012ff75:	83 ec 0c             	sub    $0xc,%esp
f012ff78:	68 90 bf 13 f0       	push   $0xf013bf90
f012ff7d:	e8 af 0e fd ff       	call   f0100e31 <cprintf>
f012ff82:	83 c4 10             	add    $0x10,%esp
	struct BlockMetaData* blk;
	cprintf("\nDynAlloc Blocks List:\n");
f012ff85:	83 ec 0c             	sub    $0xc,%esp
f012ff88:	68 bb bf 13 f0       	push   $0xf013bfbb
f012ff8d:	e8 9f 0e fd ff       	call   f0100e31 <cprintf>
f012ff92:	83 c4 10             	add    $0x10,%esp
	LIST_FOREACH(blk, &list)
f012ff95:	8b 45 08             	mov    0x8(%ebp),%eax
f012ff98:	89 45 f4             	mov    %eax,-0xc(%ebp)
f012ff9b:	eb 26                	jmp    f012ffc3 <print_blocks_list+0x54>
	{
		cprintf("(size: %d, isFree: %d)\n", blk->size, blk->is_free);
f012ff9d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012ffa0:	8a 40 04             	mov    0x4(%eax),%al
f012ffa3:	0f b6 d0             	movzbl %al,%edx
f012ffa6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012ffa9:	8b 00                	mov    (%eax),%eax
f012ffab:	83 ec 04             	sub    $0x4,%esp
f012ffae:	52                   	push   %edx
f012ffaf:	50                   	push   %eax
f012ffb0:	68 d3 bf 13 f0       	push   $0xf013bfd3
f012ffb5:	e8 77 0e fd ff       	call   f0100e31 <cprintf>
f012ffba:	83 c4 10             	add    $0x10,%esp

void print_blocks_list(struct MemBlock_LIST list) {
	cprintf("=========================================\n");
	struct BlockMetaData* blk;
	cprintf("\nDynAlloc Blocks List:\n");
	LIST_FOREACH(blk, &list)
f012ffbd:	8b 45 10             	mov    0x10(%ebp),%eax
f012ffc0:	89 45 f4             	mov    %eax,-0xc(%ebp)
f012ffc3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f012ffc7:	74 08                	je     f012ffd1 <print_blocks_list+0x62>
f012ffc9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012ffcc:	8b 40 08             	mov    0x8(%eax),%eax
f012ffcf:	eb 05                	jmp    f012ffd6 <print_blocks_list+0x67>
f012ffd1:	b8 00 00 00 00       	mov    $0x0,%eax
f012ffd6:	89 45 10             	mov    %eax,0x10(%ebp)
f012ffd9:	8b 45 10             	mov    0x10(%ebp),%eax
f012ffdc:	85 c0                	test   %eax,%eax
f012ffde:	75 bd                	jne    f012ff9d <print_blocks_list+0x2e>
f012ffe0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f012ffe4:	75 b7                	jne    f012ff9d <print_blocks_list+0x2e>
	{
		cprintf("(size: %d, isFree: %d)\n", blk->size, blk->is_free);
	}
	cprintf("=========================================\n");
f012ffe6:	83 ec 0c             	sub    $0xc,%esp
f012ffe9:	68 90 bf 13 f0       	push   $0xf013bf90
f012ffee:	e8 3e 0e fd ff       	call   f0100e31 <cprintf>
f012fff3:	83 c4 10             	add    $0x10,%esp

}
f012fff6:	90                   	nop
f012fff7:	c9                   	leave  
f012fff8:	c3                   	ret    

f012fff9 <initialize_dynamic_allocator>:
bool is_initialized = 0;
//==================================
// [1] INITIALIZE DYNAMIC ALLOCATOR:
//==================================
void initialize_dynamic_allocator(uint32 daStart,
		uint32 initSizeOfAllocatedSpace) {
f012fff9:	55                   	push   %ebp
f012fffa:	89 e5                	mov    %esp,%ebp
f012fffc:	83 ec 18             	sub    $0x18,%esp
	//=========================================
	//DON'T CHANGE THESE LINES=================
	if (initSizeOfAllocatedSpace == 0)
f012ffff:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0130003:	0f 84 83 00 00 00    	je     f013008c <initialize_dynamic_allocator+0x93>
		return;
	is_initialized = 1;
f0130009:	c7 05 30 4a 25 f0 01 	movl   $0x1,0xf0254a30
f0130010:	00 00 00 
	//=========================================
	//=========================================
	struct BlockMetaData *firstMeta = (struct BlockMetaData *) daStart;
f0130013:	8b 45 08             	mov    0x8(%ebp),%eax
f0130016:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//Heap_MetaBlock.lh_first = firstMeta;
	firstMeta->size = initSizeOfAllocatedSpace;
f0130019:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013001c:	8b 55 0c             	mov    0xc(%ebp),%edx
f013001f:	89 10                	mov    %edx,(%eax)
	firstMeta->is_free = 1;
f0130021:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130024:	c6 40 04 01          	movb   $0x1,0x4(%eax)
	LIST_INSERT_HEAD(&Heap_MetaBlock, firstMeta);
f0130028:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f013002c:	75 14                	jne    f0130042 <initialize_dynamic_allocator+0x49>
f013002e:	83 ec 04             	sub    $0x4,%esp
f0130031:	68 ec bf 13 f0       	push   $0xf013bfec
f0130036:	6a 60                	push   $0x60
f0130038:	68 0f c0 13 f0       	push   $0xf013c00f
f013003d:	e8 6e 01 fd ff       	call   f01001b0 <_panic>
f0130042:	8b 15 34 ce 2b f0    	mov    0xf02bce34,%edx
f0130048:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013004b:	89 50 08             	mov    %edx,0x8(%eax)
f013004e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130051:	8b 40 08             	mov    0x8(%eax),%eax
f0130054:	85 c0                	test   %eax,%eax
f0130056:	74 0d                	je     f0130065 <initialize_dynamic_allocator+0x6c>
f0130058:	a1 34 ce 2b f0       	mov    0xf02bce34,%eax
f013005d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0130060:	89 50 0c             	mov    %edx,0xc(%eax)
f0130063:	eb 08                	jmp    f013006d <initialize_dynamic_allocator+0x74>
f0130065:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130068:	a3 38 ce 2b f0       	mov    %eax,0xf02bce38
f013006d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130070:	a3 34 ce 2b f0       	mov    %eax,0xf02bce34
f0130075:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130078:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
f013007f:	a1 40 ce 2b f0       	mov    0xf02bce40,%eax
f0130084:	40                   	inc    %eax
f0130085:	a3 40 ce 2b f0       	mov    %eax,0xf02bce40
f013008a:	eb 01                	jmp    f013008d <initialize_dynamic_allocator+0x94>
void initialize_dynamic_allocator(uint32 daStart,
		uint32 initSizeOfAllocatedSpace) {
	//=========================================
	//DON'T CHANGE THESE LINES=================
	if (initSizeOfAllocatedSpace == 0)
		return;
f013008c:	90                   	nop
	//Heap_MetaBlock.lh_first = firstMeta;
	firstMeta->size = initSizeOfAllocatedSpace;
	firstMeta->is_free = 1;
	LIST_INSERT_HEAD(&Heap_MetaBlock, firstMeta);

}
f013008d:	c9                   	leave  
f013008e:	c3                   	ret    

f013008f <alloc_block_FF>:

//=========================================
// [4] ALLOCATE BLOCK BY FIRST FIT:
//=========================================

void *alloc_block_FF(uint32 size) {
f013008f:	55                   	push   %ebp
f0130090:	89 e5                	mov    %esp,%ebp
f0130092:	83 ec 28             	sub    $0x28,%esp
	//TODO: [PROJECT'23.MS1 - #6] [3] DYNAMIC ALLOCATOR - alloc_block_FF()
	//panic("alloc_block_FF is not implemented yet");
	if (size == 0) {
f0130095:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0130099:	75 0a                	jne    f01300a5 <alloc_block_FF+0x16>
		return NULL;
f013009b:	b8 00 00 00 00       	mov    $0x0,%eax
f01300a0:	e9 dc 01 00 00       	jmp    f0130281 <alloc_block_FF+0x1f2>
	}
	if (!is_initialized)
f01300a5:	a1 30 4a 25 f0       	mov    0xf0254a30,%eax
f01300aa:	85 c0                	test   %eax,%eax
f01300ac:	75 40                	jne    f01300ee <alloc_block_FF+0x5f>
	{
	uint32 required_size = size + sizeOfMetaData();
f01300ae:	8b 45 08             	mov    0x8(%ebp),%eax
f01300b1:	83 c0 10             	add    $0x10,%eax
f01300b4:	89 45 f0             	mov    %eax,-0x10(%ebp)
	uint32 da_start = (uint32)sbrk(required_size);
f01300b7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01300ba:	83 ec 0c             	sub    $0xc,%esp
f01300bd:	50                   	push   %eax
f01300be:	e8 98 7f fd ff       	call   f010805b <sbrk>
f01300c3:	83 c4 10             	add    $0x10,%esp
f01300c6:	89 45 ec             	mov    %eax,-0x14(%ebp)
	//get new break since it's page aligned! thus, the size can be more than the required one
	uint32 da_break = (uint32)sbrk(0);
f01300c9:	83 ec 0c             	sub    $0xc,%esp
f01300cc:	6a 00                	push   $0x0
f01300ce:	e8 88 7f fd ff       	call   f010805b <sbrk>
f01300d3:	83 c4 10             	add    $0x10,%esp
f01300d6:	89 45 e8             	mov    %eax,-0x18(%ebp)
	initialize_dynamic_allocator(da_start, da_break - da_start);
f01300d9:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01300dc:	2b 45 ec             	sub    -0x14(%ebp),%eax
f01300df:	83 ec 08             	sub    $0x8,%esp
f01300e2:	50                   	push   %eax
f01300e3:	ff 75 ec             	pushl  -0x14(%ebp)
f01300e6:	e8 0e ff ff ff       	call   f012fff9 <initialize_dynamic_allocator>
f01300eb:	83 c4 10             	add    $0x10,%esp
	}

	struct BlockMetaData* iterator, *temp;
	uint32 sizeToAllocate = size + sizeOfMetaData();
f01300ee:	8b 45 08             	mov    0x8(%ebp),%eax
f01300f1:	83 c0 10             	add    $0x10,%eax
f01300f4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	LIST_FOREACH(iterator,&Heap_MetaBlock)
f01300f7:	a1 34 ce 2b f0       	mov    0xf02bce34,%eax
f01300fc:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01300ff:	e9 16 01 00 00       	jmp    f013021a <alloc_block_FF+0x18b>
	{
		if (!iterator->is_free) {
f0130104:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130107:	8a 40 04             	mov    0x4(%eax),%al
f013010a:	84 c0                	test   %al,%al
f013010c:	0f 84 fc 00 00 00    	je     f013020e <alloc_block_FF+0x17f>
			continue;
		} else if (iterator->size < sizeToAllocate) {
f0130112:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130115:	8b 00                	mov    (%eax),%eax
f0130117:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f013011a:	0f 82 f1 00 00 00    	jb     f0130211 <alloc_block_FF+0x182>
			continue;
		}
		if (iterator->is_free && iterator->size >= sizeToAllocate) {
f0130120:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130123:	8a 40 04             	mov    0x4(%eax),%al
f0130126:	84 c0                	test   %al,%al
f0130128:	0f 84 e4 00 00 00    	je     f0130212 <alloc_block_FF+0x183>
f013012e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130131:	8b 00                	mov    (%eax),%eax
f0130133:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0130136:	0f 82 d6 00 00 00    	jb     f0130212 <alloc_block_FF+0x183>
			if (iterator->size - sizeToAllocate < sizeOfMetaData()) {
f013013c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013013f:	8b 00                	mov    (%eax),%eax
f0130141:	2b 45 e4             	sub    -0x1c(%ebp),%eax
f0130144:	83 f8 0f             	cmp    $0xf,%eax
f0130147:	77 12                	ja     f013015b <alloc_block_FF+0xcc>
				iterator->is_free = 0;
f0130149:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013014c:	c6 40 04 00          	movb   $0x0,0x4(%eax)
				return (struct BlockMetaData*) ((uint32) iterator
						+ sizeOfMetaData());
f0130150:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130153:	83 c0 10             	add    $0x10,%eax
			continue;
		}
		if (iterator->is_free && iterator->size >= sizeToAllocate) {
			if (iterator->size - sizeToAllocate < sizeOfMetaData()) {
				iterator->is_free = 0;
				return (struct BlockMetaData*) ((uint32) iterator
f0130156:	e9 26 01 00 00       	jmp    f0130281 <alloc_block_FF+0x1f2>
						+ sizeOfMetaData());
			} else {
				temp = iterator;
f013015b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013015e:	89 45 dc             	mov    %eax,-0x24(%ebp)
				iterator = (struct BlockMetaData *) ((uint32) iterator
f0130161:	8b 55 f4             	mov    -0xc(%ebp),%edx
						+ sizeToAllocate);
f0130164:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0130167:	01 d0                	add    %edx,%eax
				iterator->is_free = 0;
				return (struct BlockMetaData*) ((uint32) iterator
						+ sizeOfMetaData());
			} else {
				temp = iterator;
				iterator = (struct BlockMetaData *) ((uint32) iterator
f0130169:	89 45 f4             	mov    %eax,-0xc(%ebp)
						+ sizeToAllocate);
				iterator->size = temp->size - (size + sizeOfMetaData());
f013016c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f013016f:	8b 00                	mov    (%eax),%eax
f0130171:	2b 45 08             	sub    0x8(%ebp),%eax
f0130174:	8d 50 f0             	lea    -0x10(%eax),%edx
f0130177:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013017a:	89 10                	mov    %edx,(%eax)
				iterator->is_free = 1;
f013017c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013017f:	c6 40 04 01          	movb   $0x1,0x4(%eax)
				LIST_INSERT_AFTER(&Heap_MetaBlock, temp, iterator);
f0130183:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0130187:	74 06                	je     f013018f <alloc_block_FF+0x100>
f0130189:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f013018d:	75 17                	jne    f01301a6 <alloc_block_FF+0x117>
f013018f:	83 ec 04             	sub    $0x4,%esp
f0130192:	68 28 c0 13 f0       	push   $0xf013c028
f0130197:	68 8b 00 00 00       	push   $0x8b
f013019c:	68 0f c0 13 f0       	push   $0xf013c00f
f01301a1:	e8 0a 00 fd ff       	call   f01001b0 <_panic>
f01301a6:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01301a9:	8b 50 08             	mov    0x8(%eax),%edx
f01301ac:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01301af:	89 50 08             	mov    %edx,0x8(%eax)
f01301b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01301b5:	8b 40 08             	mov    0x8(%eax),%eax
f01301b8:	85 c0                	test   %eax,%eax
f01301ba:	74 0c                	je     f01301c8 <alloc_block_FF+0x139>
f01301bc:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01301bf:	8b 40 08             	mov    0x8(%eax),%eax
f01301c2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01301c5:	89 50 0c             	mov    %edx,0xc(%eax)
f01301c8:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01301cb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01301ce:	89 50 08             	mov    %edx,0x8(%eax)
f01301d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01301d4:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01301d7:	89 50 0c             	mov    %edx,0xc(%eax)
f01301da:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01301dd:	8b 40 08             	mov    0x8(%eax),%eax
f01301e0:	85 c0                	test   %eax,%eax
f01301e2:	75 08                	jne    f01301ec <alloc_block_FF+0x15d>
f01301e4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01301e7:	a3 38 ce 2b f0       	mov    %eax,0xf02bce38
f01301ec:	a1 40 ce 2b f0       	mov    0xf02bce40,%eax
f01301f1:	40                   	inc    %eax
f01301f2:	a3 40 ce 2b f0       	mov    %eax,0xf02bce40
				temp->is_free = 0;
f01301f7:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01301fa:	c6 40 04 00          	movb   $0x0,0x4(%eax)
				temp->size = sizeToAllocate;
f01301fe:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0130201:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0130204:	89 10                	mov    %edx,(%eax)
				return (struct BlockMetaData *) ((uint32) temp
						+ sizeOfMetaData());
f0130206:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0130209:	83 c0 10             	add    $0x10,%eax
				iterator->size = temp->size - (size + sizeOfMetaData());
				iterator->is_free = 1;
				LIST_INSERT_AFTER(&Heap_MetaBlock, temp, iterator);
				temp->is_free = 0;
				temp->size = sizeToAllocate;
				return (struct BlockMetaData *) ((uint32) temp
f013020c:	eb 73                	jmp    f0130281 <alloc_block_FF+0x1f2>
	struct BlockMetaData* iterator, *temp;
	uint32 sizeToAllocate = size + sizeOfMetaData();
	LIST_FOREACH(iterator,&Heap_MetaBlock)
	{
		if (!iterator->is_free) {
			continue;
f013020e:	90                   	nop
f013020f:	eb 01                	jmp    f0130212 <alloc_block_FF+0x183>
		} else if (iterator->size < sizeToAllocate) {
			continue;
f0130211:	90                   	nop
	initialize_dynamic_allocator(da_start, da_break - da_start);
	}

	struct BlockMetaData* iterator, *temp;
	uint32 sizeToAllocate = size + sizeOfMetaData();
	LIST_FOREACH(iterator,&Heap_MetaBlock)
f0130212:	a1 3c ce 2b f0       	mov    0xf02bce3c,%eax
f0130217:	89 45 f4             	mov    %eax,-0xc(%ebp)
f013021a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f013021e:	74 08                	je     f0130228 <alloc_block_FF+0x199>
f0130220:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130223:	8b 40 08             	mov    0x8(%eax),%eax
f0130226:	eb 05                	jmp    f013022d <alloc_block_FF+0x19e>
f0130228:	b8 00 00 00 00       	mov    $0x0,%eax
f013022d:	a3 3c ce 2b f0       	mov    %eax,0xf02bce3c
f0130232:	a1 3c ce 2b f0       	mov    0xf02bce3c,%eax
f0130237:	85 c0                	test   %eax,%eax
f0130239:	0f 85 c5 fe ff ff    	jne    f0130104 <alloc_block_FF+0x75>
f013023f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0130243:	0f 85 bb fe ff ff    	jne    f0130104 <alloc_block_FF+0x75>
				return (struct BlockMetaData *) ((uint32) temp
						+ sizeOfMetaData());
			}
		}
	}
	if (sbrk(sizeToAllocate) == (void*) -1) {
f0130249:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f013024c:	83 ec 0c             	sub    $0xc,%esp
f013024f:	50                   	push   %eax
f0130250:	e8 06 7e fd ff       	call   f010805b <sbrk>
f0130255:	83 c4 10             	add    $0x10,%esp
f0130258:	83 f8 ff             	cmp    $0xffffffff,%eax
f013025b:	75 07                	jne    f0130264 <alloc_block_FF+0x1d5>
		return NULL;
f013025d:	b8 00 00 00 00       	mov    $0x0,%eax
f0130262:	eb 1d                	jmp    f0130281 <alloc_block_FF+0x1f2>
	}
	struct BlockMetaData* extendingBlock;
	extendingBlock = (struct BlockMetaData*) ((uint32) Heap_MetaBlock.lh_last);
f0130264:	a1 38 ce 2b f0       	mov    0xf02bce38,%eax
f0130269:	89 45 e0             	mov    %eax,-0x20(%ebp)
	extendingBlock->is_free = 0;
f013026c:	8b 45 e0             	mov    -0x20(%ebp),%eax
f013026f:	c6 40 04 00          	movb   $0x0,0x4(%eax)
	extendingBlock->size = sizeToAllocate;
f0130273:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0130276:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0130279:	89 10                	mov    %edx,(%eax)
	return (struct BlockMetaData*) ((uint32) extendingBlock + sizeOfMetaData());
f013027b:	8b 45 e0             	mov    -0x20(%ebp),%eax
f013027e:	83 c0 10             	add    $0x10,%eax

}
f0130281:	c9                   	leave  
f0130282:	c3                   	ret    

f0130283 <alloc_block_BF>:

//=========================================
// [5] ALLOCATE BLOCK BY BEST FIT:
//=========================================
void *alloc_block_BF(uint32 size) {
f0130283:	55                   	push   %ebp
f0130284:	89 e5                	mov    %esp,%ebp
f0130286:	83 ec 28             	sub    $0x28,%esp
	//TODO: [PROJECT'23.MS1 - BONUS] [3] DYNAMIC ALLOCATOR - alloc_block_BF()
	//panic("alloc_block_BF is not implemented yet");
	if (size == 0) {
f0130289:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f013028d:	75 0a                	jne    f0130299 <alloc_block_BF+0x16>
		return NULL;
f013028f:	b8 00 00 00 00       	mov    $0x0,%eax
f0130294:	e9 a9 01 00 00       	jmp    f0130442 <alloc_block_BF+0x1bf>
	}
	struct BlockMetaData* iterator, *temp, *allocate=NULL;
f0130299:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	uint32 diff = -1;
f01302a0:	c7 45 ec ff ff ff ff 	movl   $0xffffffff,-0x14(%ebp)
	uint32 sizeToAllocate = size + sizeOfMetaData();
f01302a7:	8b 45 08             	mov    0x8(%ebp),%eax
f01302aa:	83 c0 10             	add    $0x10,%eax
f01302ad:	89 45 e8             	mov    %eax,-0x18(%ebp)
	LIST_FOREACH(iterator,&Heap_MetaBlock)
f01302b0:	a1 34 ce 2b f0       	mov    0xf02bce34,%eax
f01302b5:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01302b8:	eb 4d                	jmp    f0130307 <alloc_block_BF+0x84>
	{

		if (!iterator->is_free)
f01302ba:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01302bd:	8a 40 04             	mov    0x4(%eax),%al
f01302c0:	84 c0                	test   %al,%al
f01302c2:	74 37                	je     f01302fb <alloc_block_BF+0x78>
		{
			continue;
		} else if (iterator->size < sizeToAllocate)
f01302c4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01302c7:	8b 00                	mov    (%eax),%eax
f01302c9:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f01302cc:	72 30                	jb     f01302fe <alloc_block_BF+0x7b>
		{
			continue;
		}
		if(allocate==NULL)
f01302ce:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01302d2:	75 06                	jne    f01302da <alloc_block_BF+0x57>
		 {
			allocate=iterator;
f01302d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01302d7:	89 45 f0             	mov    %eax,-0x10(%ebp)
		 }
		uint32 newdiff = iterator->size - sizeToAllocate;
f01302da:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01302dd:	8b 00                	mov    (%eax),%eax
f01302df:	2b 45 e8             	sub    -0x18(%ebp),%eax
f01302e2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		if (diff > newdiff)
f01302e5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01302e8:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f01302eb:	76 12                	jbe    f01302ff <alloc_block_BF+0x7c>
		{
			diff = newdiff;
f01302ed:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01302f0:	89 45 ec             	mov    %eax,-0x14(%ebp)
			allocate = iterator;
f01302f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01302f6:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01302f9:	eb 04                	jmp    f01302ff <alloc_block_BF+0x7c>
	LIST_FOREACH(iterator,&Heap_MetaBlock)
	{

		if (!iterator->is_free)
		{
			continue;
f01302fb:	90                   	nop
f01302fc:	eb 01                	jmp    f01302ff <alloc_block_BF+0x7c>
		} else if (iterator->size < sizeToAllocate)
		{
			continue;
f01302fe:	90                   	nop
		return NULL;
	}
	struct BlockMetaData* iterator, *temp, *allocate=NULL;
	uint32 diff = -1;
	uint32 sizeToAllocate = size + sizeOfMetaData();
	LIST_FOREACH(iterator,&Heap_MetaBlock)
f01302ff:	a1 3c ce 2b f0       	mov    0xf02bce3c,%eax
f0130304:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0130307:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f013030b:	74 08                	je     f0130315 <alloc_block_BF+0x92>
f013030d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130310:	8b 40 08             	mov    0x8(%eax),%eax
f0130313:	eb 05                	jmp    f013031a <alloc_block_BF+0x97>
f0130315:	b8 00 00 00 00       	mov    $0x0,%eax
f013031a:	a3 3c ce 2b f0       	mov    %eax,0xf02bce3c
f013031f:	a1 3c ce 2b f0       	mov    0xf02bce3c,%eax
f0130324:	85 c0                	test   %eax,%eax
f0130326:	75 92                	jne    f01302ba <alloc_block_BF+0x37>
f0130328:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f013032c:	75 8c                	jne    f01302ba <alloc_block_BF+0x37>
		{
			diff = newdiff;
			allocate = iterator;
		}
	}
	if(allocate!=NULL)
f013032e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0130332:	0f 84 d2 00 00 00    	je     f013040a <alloc_block_BF+0x187>
	{
		if (allocate->size - sizeToAllocate < sizeOfMetaData()) {
f0130338:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013033b:	8b 00                	mov    (%eax),%eax
f013033d:	2b 45 e8             	sub    -0x18(%ebp),%eax
f0130340:	83 f8 0f             	cmp    $0xf,%eax
f0130343:	77 12                	ja     f0130357 <alloc_block_BF+0xd4>

				allocate->is_free = 0;
f0130345:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130348:	c6 40 04 00          	movb   $0x0,0x4(%eax)
				return (struct BlockMetaData*) ((uint32) allocate + sizeOfMetaData());
f013034c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013034f:	83 c0 10             	add    $0x10,%eax
f0130352:	e9 eb 00 00 00       	jmp    f0130442 <alloc_block_BF+0x1bf>
			} else {
				temp = allocate;
f0130357:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013035a:	89 45 e0             	mov    %eax,-0x20(%ebp)
				allocate = (struct BlockMetaData *) ((uint32) allocate
f013035d:	8b 55 f0             	mov    -0x10(%ebp),%edx
						+ sizeToAllocate);
f0130360:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0130363:	01 d0                	add    %edx,%eax

				allocate->is_free = 0;
				return (struct BlockMetaData*) ((uint32) allocate + sizeOfMetaData());
			} else {
				temp = allocate;
				allocate = (struct BlockMetaData *) ((uint32) allocate
f0130365:	89 45 f0             	mov    %eax,-0x10(%ebp)
						+ sizeToAllocate);
				allocate->size = temp->size - (size + sizeOfMetaData());
f0130368:	8b 45 e0             	mov    -0x20(%ebp),%eax
f013036b:	8b 00                	mov    (%eax),%eax
f013036d:	2b 45 08             	sub    0x8(%ebp),%eax
f0130370:	8d 50 f0             	lea    -0x10(%eax),%edx
f0130373:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130376:	89 10                	mov    %edx,(%eax)
				allocate->is_free = 1;
f0130378:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013037b:	c6 40 04 01          	movb   $0x1,0x4(%eax)
				LIST_INSERT_AFTER(&Heap_MetaBlock, temp, allocate);
f013037f:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0130383:	74 06                	je     f013038b <alloc_block_BF+0x108>
f0130385:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0130389:	75 17                	jne    f01303a2 <alloc_block_BF+0x11f>
f013038b:	83 ec 04             	sub    $0x4,%esp
f013038e:	68 28 c0 13 f0       	push   $0xf013c028
f0130393:	68 cb 00 00 00       	push   $0xcb
f0130398:	68 0f c0 13 f0       	push   $0xf013c00f
f013039d:	e8 0e fe fc ff       	call   f01001b0 <_panic>
f01303a2:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01303a5:	8b 50 08             	mov    0x8(%eax),%edx
f01303a8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01303ab:	89 50 08             	mov    %edx,0x8(%eax)
f01303ae:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01303b1:	8b 40 08             	mov    0x8(%eax),%eax
f01303b4:	85 c0                	test   %eax,%eax
f01303b6:	74 0c                	je     f01303c4 <alloc_block_BF+0x141>
f01303b8:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01303bb:	8b 40 08             	mov    0x8(%eax),%eax
f01303be:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01303c1:	89 50 0c             	mov    %edx,0xc(%eax)
f01303c4:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01303c7:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01303ca:	89 50 08             	mov    %edx,0x8(%eax)
f01303cd:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01303d0:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01303d3:	89 50 0c             	mov    %edx,0xc(%eax)
f01303d6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01303d9:	8b 40 08             	mov    0x8(%eax),%eax
f01303dc:	85 c0                	test   %eax,%eax
f01303de:	75 08                	jne    f01303e8 <alloc_block_BF+0x165>
f01303e0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01303e3:	a3 38 ce 2b f0       	mov    %eax,0xf02bce38
f01303e8:	a1 40 ce 2b f0       	mov    0xf02bce40,%eax
f01303ed:	40                   	inc    %eax
f01303ee:	a3 40 ce 2b f0       	mov    %eax,0xf02bce40
				temp->is_free = 0;
f01303f3:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01303f6:	c6 40 04 00          	movb   $0x0,0x4(%eax)
				temp->size = sizeToAllocate;
f01303fa:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01303fd:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0130400:	89 10                	mov    %edx,(%eax)
				return (struct BlockMetaData *) ((uint32) temp + sizeOfMetaData());
f0130402:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0130405:	83 c0 10             	add    $0x10,%eax
f0130408:	eb 38                	jmp    f0130442 <alloc_block_BF+0x1bf>
			}
	}
	else{
	if (sbrk(sizeToAllocate) == (void*) -1) {
f013040a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013040d:	83 ec 0c             	sub    $0xc,%esp
f0130410:	50                   	push   %eax
f0130411:	e8 45 7c fd ff       	call   f010805b <sbrk>
f0130416:	83 c4 10             	add    $0x10,%esp
f0130419:	83 f8 ff             	cmp    $0xffffffff,%eax
f013041c:	75 07                	jne    f0130425 <alloc_block_BF+0x1a2>
		return NULL;
f013041e:	b8 00 00 00 00       	mov    $0x0,%eax
f0130423:	eb 1d                	jmp    f0130442 <alloc_block_BF+0x1bf>
	}
	struct BlockMetaData* extendingBlock;
	extendingBlock = (struct BlockMetaData*) ((uint32) Heap_MetaBlock.lh_last);
f0130425:	a1 38 ce 2b f0       	mov    0xf02bce38,%eax
f013042a:	89 45 dc             	mov    %eax,-0x24(%ebp)
	extendingBlock->is_free = 0;
f013042d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0130430:	c6 40 04 00          	movb   $0x0,0x4(%eax)
	extendingBlock->size = sizeToAllocate;
f0130434:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0130437:	8b 55 e8             	mov    -0x18(%ebp),%edx
f013043a:	89 10                	mov    %edx,(%eax)
	return (struct BlockMetaData*) ((uint32) extendingBlock + sizeOfMetaData());
f013043c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f013043f:	83 c0 10             	add    $0x10,%eax
	}


}
f0130442:	c9                   	leave  
f0130443:	c3                   	ret    

f0130444 <alloc_block_WF>:

//=========================================
// [6] ALLOCATE BLOCK BY WORST FIT:
//=========================================
void *alloc_block_WF(uint32 size) {
f0130444:	55                   	push   %ebp
f0130445:	89 e5                	mov    %esp,%ebp
f0130447:	83 ec 08             	sub    $0x8,%esp
	panic("alloc_block_WF is not implemented yet");
f013044a:	83 ec 04             	sub    $0x4,%esp
f013044d:	68 5c c0 13 f0       	push   $0xf013c05c
f0130452:	68 e3 00 00 00       	push   $0xe3
f0130457:	68 0f c0 13 f0       	push   $0xf013c00f
f013045c:	e8 4f fd fc ff       	call   f01001b0 <_panic>

f0130461 <alloc_block_NF>:
}

//=========================================
// [7] ALLOCATE BLOCK BY NEXT FIT:
//=========================================
void *alloc_block_NF(uint32 size) {
f0130461:	55                   	push   %ebp
f0130462:	89 e5                	mov    %esp,%ebp
f0130464:	83 ec 08             	sub    $0x8,%esp
	panic("alloc_block_NF is not implemented yet");
f0130467:	83 ec 04             	sub    $0x4,%esp
f013046a:	68 84 c0 13 f0       	push   $0xf013c084
f013046f:	68 eb 00 00 00       	push   $0xeb
f0130474:	68 0f c0 13 f0       	push   $0xf013c00f
f0130479:	e8 32 fd fc ff       	call   f01001b0 <_panic>

f013047e <free_block>:
}

//===================================================
// [8] FREE BLOCK WITH COALESCING:
//===================================================
void free_block(void *va) {
f013047e:	55                   	push   %ebp
f013047f:	89 e5                	mov    %esp,%ebp
f0130481:	83 ec 10             	sub    $0x10,%esp
	//TODO: [PROJECT'23.MS1 - #7] [3] DYNAMIC ALLOCATOR - free_block()
	//	panic("free_block is not implemented yet");
	if (va == NULL) {
f0130484:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0130488:	0f 84 8c 00 00 00    	je     f013051a <free_block+0x9c>
		return;
	}
	struct BlockMetaData *currBlock = ((struct BlockMetaData *) va - 1);
f013048e:	8b 45 08             	mov    0x8(%ebp),%eax
f0130491:	83 e8 10             	sub    $0x10,%eax
f0130494:	89 45 fc             	mov    %eax,-0x4(%ebp)
	struct BlockMetaData *nextBlock = currBlock->prev_next_info.le_next;
f0130497:	8b 45 fc             	mov    -0x4(%ebp),%eax
f013049a:	8b 40 08             	mov    0x8(%eax),%eax
f013049d:	89 45 f8             	mov    %eax,-0x8(%ebp)
	struct BlockMetaData *prevBlock = currBlock->prev_next_info.le_prev;
f01304a0:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01304a3:	8b 40 0c             	mov    0xc(%eax),%eax
f01304a6:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//address is null or block is already free
	if (/*currBlock->is_free ||*/ currBlock == NULL) {
f01304a9:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f01304ad:	74 6e                	je     f013051d <free_block+0x9f>
		return;
	}

	//freeing the block
	currBlock->is_free = 1;
f01304af:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01304b2:	c6 40 04 01          	movb   $0x1,0x4(%eax)

	//next is free
	if (nextBlock != NULL && nextBlock->is_free) {
f01304b6:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f01304ba:	74 2b                	je     f01304e7 <free_block+0x69>
f01304bc:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01304bf:	8a 40 04             	mov    0x4(%eax),%al
f01304c2:	84 c0                	test   %al,%al
f01304c4:	74 21                	je     f01304e7 <free_block+0x69>
		currBlock->size += nextBlock->size;
f01304c6:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01304c9:	8b 10                	mov    (%eax),%edx
f01304cb:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01304ce:	8b 00                	mov    (%eax),%eax
f01304d0:	01 c2                	add    %eax,%edx
f01304d2:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01304d5:	89 10                	mov    %edx,(%eax)
		nextBlock->is_free = 0;
f01304d7:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01304da:	c6 40 04 00          	movb   $0x0,0x4(%eax)
		nextBlock->size = 0;
f01304de:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01304e1:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	}
	//prev is free or prev and next are free
	if (prevBlock != NULL && prevBlock->is_free) {
f01304e7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01304eb:	74 31                	je     f013051e <free_block+0xa0>
f01304ed:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01304f0:	8a 40 04             	mov    0x4(%eax),%al
f01304f3:	84 c0                	test   %al,%al
f01304f5:	74 27                	je     f013051e <free_block+0xa0>
		prevBlock->size += currBlock->size;
f01304f7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01304fa:	8b 10                	mov    (%eax),%edx
f01304fc:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01304ff:	8b 00                	mov    (%eax),%eax
f0130501:	01 c2                	add    %eax,%edx
f0130503:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130506:	89 10                	mov    %edx,(%eax)
		currBlock->size = 0;
f0130508:	8b 45 fc             	mov    -0x4(%ebp),%eax
f013050b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		currBlock->is_free = 0;
f0130511:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0130514:	c6 40 04 00          	movb   $0x0,0x4(%eax)
f0130518:	eb 04                	jmp    f013051e <free_block+0xa0>
//===================================================
void free_block(void *va) {
	//TODO: [PROJECT'23.MS1 - #7] [3] DYNAMIC ALLOCATOR - free_block()
	//	panic("free_block is not implemented yet");
	if (va == NULL) {
		return;
f013051a:	90                   	nop
f013051b:	eb 01                	jmp    f013051e <free_block+0xa0>
	struct BlockMetaData *currBlock = ((struct BlockMetaData *) va - 1);
	struct BlockMetaData *nextBlock = currBlock->prev_next_info.le_next;
	struct BlockMetaData *prevBlock = currBlock->prev_next_info.le_prev;
	//address is null or block is already free
	if (/*currBlock->is_free ||*/ currBlock == NULL) {
		return;
f013051d:	90                   	nop
		currBlock->size = 0;
		currBlock->is_free = 0;

	}

}
f013051e:	c9                   	leave  
f013051f:	c3                   	ret    

f0130520 <realloc_block_FF>:

//=========================================
// [4] REALLOCATE BLOCK BY FIRST FIT:
//=========================================
void *realloc_block_FF(void* va, uint32 new_size) {
f0130520:	55                   	push   %ebp
f0130521:	89 e5                	mov    %esp,%ebp
f0130523:	83 ec 28             	sub    $0x28,%esp
	//TODO: [PROJECT'23.MS1 - #8] [3] DYNAMIC ALLOCATOR - realloc_block_FF()
	//panic("realloc_block_FF is not implemented yet");

	if (va == NULL && new_size != 0) {
f0130526:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f013052a:	75 19                	jne    f0130545 <realloc_block_FF+0x25>
f013052c:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0130530:	74 13                	je     f0130545 <realloc_block_FF+0x25>
		return alloc_block_FF(new_size);
f0130532:	83 ec 0c             	sub    $0xc,%esp
f0130535:	ff 75 0c             	pushl  0xc(%ebp)
f0130538:	e8 52 fb ff ff       	call   f013008f <alloc_block_FF>
f013053d:	83 c4 10             	add    $0x10,%esp
f0130540:	e9 7f 02 00 00       	jmp    f01307c4 <realloc_block_FF+0x2a4>
	} else if (va != NULL && new_size == 0) {
f0130545:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0130549:	74 1e                	je     f0130569 <realloc_block_FF+0x49>
f013054b:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f013054f:	75 18                	jne    f0130569 <realloc_block_FF+0x49>
		free_block(va);
f0130551:	83 ec 0c             	sub    $0xc,%esp
f0130554:	ff 75 08             	pushl  0x8(%ebp)
f0130557:	e8 22 ff ff ff       	call   f013047e <free_block>
f013055c:	83 c4 10             	add    $0x10,%esp
		return NULL;
f013055f:	b8 00 00 00 00       	mov    $0x0,%eax
f0130564:	e9 5b 02 00 00       	jmp    f01307c4 <realloc_block_FF+0x2a4>
	} else if (va == NULL && new_size == 0) {
f0130569:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f013056d:	75 10                	jne    f013057f <realloc_block_FF+0x5f>
f013056f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0130573:	75 0a                	jne    f013057f <realloc_block_FF+0x5f>
		return NULL;
f0130575:	b8 00 00 00 00       	mov    $0x0,%eax
f013057a:	e9 45 02 00 00       	jmp    f01307c4 <realloc_block_FF+0x2a4>
	}
	uint32 sizeToAllocate = new_size + sizeOfMetaData();
f013057f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130582:	83 c0 10             	add    $0x10,%eax
f0130585:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct BlockMetaData *currBlock = ((struct BlockMetaData *) va - 1);
f0130588:	8b 45 08             	mov    0x8(%ebp),%eax
f013058b:	83 e8 10             	sub    $0x10,%eax
f013058e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	struct BlockMetaData *nextBlock = currBlock->prev_next_info.le_next;
f0130591:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130594:	8b 40 08             	mov    0x8(%eax),%eax
f0130597:	89 45 ec             	mov    %eax,-0x14(%ebp)

	 if (sizeToAllocate < currBlock->size) {
f013059a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013059d:	8b 00                	mov    (%eax),%eax
f013059f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01305a2:	0f 86 0e 01 00 00    	jbe    f01306b6 <realloc_block_FF+0x196>
		 if (currBlock->size - sizeToAllocate < sizeOfMetaData()) {
f01305a8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01305ab:	8b 00                	mov    (%eax),%eax
f01305ad:	2b 45 f4             	sub    -0xc(%ebp),%eax
f01305b0:	83 f8 0f             	cmp    $0xf,%eax
f01305b3:	77 0b                	ja     f01305c0 <realloc_block_FF+0xa0>

		 				return (struct BlockMetaData*) ((uint32) currBlock
		 						+ sizeOfMetaData());
f01305b5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01305b8:	83 c0 10             	add    $0x10,%eax
	struct BlockMetaData *nextBlock = currBlock->prev_next_info.le_next;

	 if (sizeToAllocate < currBlock->size) {
		 if (currBlock->size - sizeToAllocate < sizeOfMetaData()) {

		 				return (struct BlockMetaData*) ((uint32) currBlock
f01305bb:	e9 04 02 00 00       	jmp    f01307c4 <realloc_block_FF+0x2a4>
		 						+ sizeOfMetaData());
		 			}
		 struct BlockMetaData *temp = currBlock;
f01305c0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01305c3:	89 45 e8             	mov    %eax,-0x18(%ebp)
	 currBlock = (struct BlockMetaData *) ((uint32) currBlock
f01305c6:	8b 55 f0             	mov    -0x10(%ebp),%edx
								+ sizeToAllocate);
f01305c9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01305cc:	01 d0                	add    %edx,%eax

		 				return (struct BlockMetaData*) ((uint32) currBlock
		 						+ sizeOfMetaData());
		 			}
		 struct BlockMetaData *temp = currBlock;
	 currBlock = (struct BlockMetaData *) ((uint32) currBlock
f01305ce:	89 45 f0             	mov    %eax,-0x10(%ebp)
								+ sizeToAllocate);
	 currBlock->size = temp->size - (sizeToAllocate /*+ sizeOfMetaData()*/);
f01305d1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01305d4:	8b 00                	mov    (%eax),%eax
f01305d6:	2b 45 f4             	sub    -0xc(%ebp),%eax
f01305d9:	89 c2                	mov    %eax,%edx
f01305db:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01305de:	89 10                	mov    %edx,(%eax)
	 currBlock->is_free = 1;
f01305e0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01305e3:	c6 40 04 01          	movb   $0x1,0x4(%eax)
	 LIST_INSERT_AFTER(&Heap_MetaBlock, temp, currBlock);
f01305e7:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f01305eb:	74 06                	je     f01305f3 <realloc_block_FF+0xd3>
f01305ed:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01305f1:	75 17                	jne    f013060a <realloc_block_FF+0xea>
f01305f3:	83 ec 04             	sub    $0x4,%esp
f01305f6:	68 28 c0 13 f0       	push   $0xf013c028
f01305fb:	68 31 01 00 00       	push   $0x131
f0130600:	68 0f c0 13 f0       	push   $0xf013c00f
f0130605:	e8 a6 fb fc ff       	call   f01001b0 <_panic>
f013060a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013060d:	8b 50 08             	mov    0x8(%eax),%edx
f0130610:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130613:	89 50 08             	mov    %edx,0x8(%eax)
f0130616:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130619:	8b 40 08             	mov    0x8(%eax),%eax
f013061c:	85 c0                	test   %eax,%eax
f013061e:	74 0c                	je     f013062c <realloc_block_FF+0x10c>
f0130620:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0130623:	8b 40 08             	mov    0x8(%eax),%eax
f0130626:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0130629:	89 50 0c             	mov    %edx,0xc(%eax)
f013062c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013062f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0130632:	89 50 08             	mov    %edx,0x8(%eax)
f0130635:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130638:	8b 55 e8             	mov    -0x18(%ebp),%edx
f013063b:	89 50 0c             	mov    %edx,0xc(%eax)
f013063e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130641:	8b 40 08             	mov    0x8(%eax),%eax
f0130644:	85 c0                	test   %eax,%eax
f0130646:	75 08                	jne    f0130650 <realloc_block_FF+0x130>
f0130648:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013064b:	a3 38 ce 2b f0       	mov    %eax,0xf02bce38
f0130650:	a1 40 ce 2b f0       	mov    0xf02bce40,%eax
f0130655:	40                   	inc    %eax
f0130656:	a3 40 ce 2b f0       	mov    %eax,0xf02bce40
	 temp->is_free = 0;
f013065b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013065e:	c6 40 04 00          	movb   $0x0,0x4(%eax)
	 temp->size = sizeToAllocate;
f0130662:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0130665:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0130668:	89 10                	mov    %edx,(%eax)

	   if(currBlock->prev_next_info.le_next!=NULL&&currBlock->prev_next_info.le_next->is_free){
f013066a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013066d:	8b 40 08             	mov    0x8(%eax),%eax
f0130670:	85 c0                	test   %eax,%eax
f0130672:	74 37                	je     f01306ab <realloc_block_FF+0x18b>
f0130674:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130677:	8b 40 08             	mov    0x8(%eax),%eax
f013067a:	8a 40 04             	mov    0x4(%eax),%al
f013067d:	84 c0                	test   %al,%al
f013067f:	74 2a                	je     f01306ab <realloc_block_FF+0x18b>
		   currBlock->size += currBlock->prev_next_info.le_next->size;
f0130681:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130684:	8b 10                	mov    (%eax),%edx
f0130686:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130689:	8b 40 08             	mov    0x8(%eax),%eax
f013068c:	8b 00                	mov    (%eax),%eax
f013068e:	01 c2                	add    %eax,%edx
f0130690:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130693:	89 10                	mov    %edx,(%eax)
		   currBlock->prev_next_info.le_next->is_free = 0;
f0130695:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130698:	8b 40 08             	mov    0x8(%eax),%eax
f013069b:	c6 40 04 00          	movb   $0x0,0x4(%eax)
		   currBlock->prev_next_info.le_next->size = 0;
f013069f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01306a2:	8b 40 08             	mov    0x8(%eax),%eax
f01306a5:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	   }

		return (struct BlockMetaData *) ((uint32) temp + sizeOfMetaData());
f01306ab:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01306ae:	83 c0 10             	add    $0x10,%eax
f01306b1:	e9 0e 01 00 00       	jmp    f01307c4 <realloc_block_FF+0x2a4>
	} else if (sizeToAllocate > currBlock->size) {
f01306b6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01306b9:	8b 00                	mov    (%eax),%eax
f01306bb:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01306be:	0f 83 e9 00 00 00    	jae    f01307ad <realloc_block_FF+0x28d>
		if (nextBlock->is_free && nextBlock != NULL) {
f01306c4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01306c7:	8a 40 04             	mov    0x4(%eax),%al
f01306ca:	84 c0                	test   %al,%al
f01306cc:	0f 84 98 00 00 00    	je     f013076a <realloc_block_FF+0x24a>
f01306d2:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01306d6:	0f 84 8e 00 00 00    	je     f013076a <realloc_block_FF+0x24a>
			if (nextBlock->size == sizeToAllocate - currBlock->size) {
f01306dc:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01306df:	8b 10                	mov    (%eax),%edx
f01306e1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01306e4:	8b 00                	mov    (%eax),%eax
f01306e6:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01306e9:	29 c1                	sub    %eax,%ecx
f01306eb:	89 c8                	mov    %ecx,%eax
f01306ed:	39 c2                	cmp    %eax,%edx
f01306ef:	75 1a                	jne    f013070b <realloc_block_FF+0x1eb>
				currBlock->size = sizeToAllocate;
f01306f1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01306f4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01306f7:	89 10                	mov    %edx,(%eax)
				nextBlock->is_free = 0;
f01306f9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01306fc:	c6 40 04 00          	movb   $0x0,0x4(%eax)
				nextBlock->size = 0;
f0130700:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0130703:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0130709:	eb 57                	jmp    f0130762 <realloc_block_FF+0x242>
			} else if (nextBlock->size - sizeOfMetaData()
f013070b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f013070e:	8b 00                	mov    (%eax),%eax
f0130710:	8d 48 f0             	lea    -0x10(%eax),%ecx
					> sizeToAllocate - currBlock->size) {
f0130713:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130716:	8b 00                	mov    (%eax),%eax
f0130718:	8b 55 f4             	mov    -0xc(%ebp),%edx
f013071b:	29 c2                	sub    %eax,%edx
f013071d:	89 d0                	mov    %edx,%eax
		if (nextBlock->is_free && nextBlock != NULL) {
			if (nextBlock->size == sizeToAllocate - currBlock->size) {
				currBlock->size = sizeToAllocate;
				nextBlock->is_free = 0;
				nextBlock->size = 0;
			} else if (nextBlock->size - sizeOfMetaData()
f013071f:	39 c1                	cmp    %eax,%ecx
f0130721:	76 3f                	jbe    f0130762 <realloc_block_FF+0x242>
					> sizeToAllocate - currBlock->size) {
				struct BlockMetaData *temp = nextBlock;
f0130723:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0130726:	89 45 e4             	mov    %eax,-0x1c(%ebp)
			  	nextBlock = (struct BlockMetaData *) ((uint32) temp
f0130729:	8b 55 e4             	mov    -0x1c(%ebp),%edx
						+ sizeToAllocate);
f013072c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013072f:	01 d0                	add    %edx,%eax
				nextBlock->is_free = 0;
				nextBlock->size = 0;
			} else if (nextBlock->size - sizeOfMetaData()
					> sizeToAllocate - currBlock->size) {
				struct BlockMetaData *temp = nextBlock;
			  	nextBlock = (struct BlockMetaData *) ((uint32) temp
f0130731:	89 45 ec             	mov    %eax,-0x14(%ebp)
						+ sizeToAllocate);
				nextBlock->size = temp->size - sizeToAllocate - currBlock->size;
f0130734:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0130737:	8b 00                	mov    (%eax),%eax
f0130739:	2b 45 f4             	sub    -0xc(%ebp),%eax
f013073c:	89 c2                	mov    %eax,%edx
f013073e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130741:	8b 00                	mov    (%eax),%eax
f0130743:	29 c2                	sub    %eax,%edx
f0130745:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0130748:	89 10                	mov    %edx,(%eax)
				temp->size = 0;
f013074a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f013074d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
				temp->is_free = 0;
f0130753:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0130756:	c6 40 04 00          	movb   $0x0,0x4(%eax)
				currBlock->size = sizeToAllocate;
f013075a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013075d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0130760:	89 10                	mov    %edx,(%eax)
			}
			return (struct BlockMetaData *) ((uint32) currBlock
					+ sizeOfMetaData());
f0130762:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130765:	83 c0 10             	add    $0x10,%eax
				nextBlock->size = temp->size - sizeToAllocate - currBlock->size;
				temp->size = 0;
				temp->is_free = 0;
				currBlock->size = sizeToAllocate;
			}
			return (struct BlockMetaData *) ((uint32) currBlock
f0130768:	eb 5a                	jmp    f01307c4 <realloc_block_FF+0x2a4>
					+ sizeOfMetaData());
		} else if (nextBlock == NULL
f013076a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f013076e:	74 1f                	je     f013078f <realloc_block_FF+0x26f>
				|| nextBlock->size < sizeToAllocate - currBlock->size
f0130770:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0130773:	8b 10                	mov    (%eax),%edx
f0130775:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130778:	8b 00                	mov    (%eax),%eax
f013077a:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f013077d:	29 c1                	sub    %eax,%ecx
f013077f:	89 c8                	mov    %ecx,%eax
f0130781:	39 c2                	cmp    %eax,%edx
f0130783:	72 0a                	jb     f013078f <realloc_block_FF+0x26f>
				|| !nextBlock->is_free) {
f0130785:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0130788:	8a 40 04             	mov    0x4(%eax),%al
f013078b:	84 c0                	test   %al,%al
f013078d:	75 30                	jne    f01307bf <realloc_block_FF+0x29f>
			free_block(currBlock);
f013078f:	83 ec 0c             	sub    $0xc,%esp
f0130792:	ff 75 f0             	pushl  -0x10(%ebp)
f0130795:	e8 e4 fc ff ff       	call   f013047e <free_block>
f013079a:	83 c4 10             	add    $0x10,%esp
			return alloc_block_FF(new_size);
f013079d:	83 ec 0c             	sub    $0xc,%esp
f01307a0:	ff 75 0c             	pushl  0xc(%ebp)
f01307a3:	e8 e7 f8 ff ff       	call   f013008f <alloc_block_FF>
f01307a8:	83 c4 10             	add    $0x10,%esp
f01307ab:	eb 17                	jmp    f01307c4 <realloc_block_FF+0x2a4>

		}
	} else if (sizeToAllocate == currBlock->size) {
f01307ad:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01307b0:	8b 00                	mov    (%eax),%eax
f01307b2:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01307b5:	75 08                	jne    f01307bf <realloc_block_FF+0x29f>
		return (struct BlockMetaData *) ((uint32) currBlock + sizeOfMetaData());
f01307b7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01307ba:	83 c0 10             	add    $0x10,%eax
f01307bd:	eb 05                	jmp    f01307c4 <realloc_block_FF+0x2a4>
	}
	return NULL;
f01307bf:	b8 00 00 00 00       	mov    $0x0,%eax

}
f01307c4:	c9                   	leave  
f01307c5:	c3                   	ret    
f01307c6:	66 90                	xchg   %ax,%ax

f01307c8 <__udivdi3>:
f01307c8:	55                   	push   %ebp
f01307c9:	57                   	push   %edi
f01307ca:	56                   	push   %esi
f01307cb:	53                   	push   %ebx
f01307cc:	83 ec 1c             	sub    $0x1c,%esp
f01307cf:	8b 5c 24 30          	mov    0x30(%esp),%ebx
f01307d3:	8b 4c 24 34          	mov    0x34(%esp),%ecx
f01307d7:	8b 7c 24 38          	mov    0x38(%esp),%edi
f01307db:	89 5c 24 08          	mov    %ebx,0x8(%esp)
f01307df:	89 ca                	mov    %ecx,%edx
f01307e1:	89 f8                	mov    %edi,%eax
f01307e3:	8b 74 24 3c          	mov    0x3c(%esp),%esi
f01307e7:	85 f6                	test   %esi,%esi
f01307e9:	75 2d                	jne    f0130818 <__udivdi3+0x50>
f01307eb:	39 cf                	cmp    %ecx,%edi
f01307ed:	77 65                	ja     f0130854 <__udivdi3+0x8c>
f01307ef:	89 fd                	mov    %edi,%ebp
f01307f1:	85 ff                	test   %edi,%edi
f01307f3:	75 0b                	jne    f0130800 <__udivdi3+0x38>
f01307f5:	b8 01 00 00 00       	mov    $0x1,%eax
f01307fa:	31 d2                	xor    %edx,%edx
f01307fc:	f7 f7                	div    %edi
f01307fe:	89 c5                	mov    %eax,%ebp
f0130800:	31 d2                	xor    %edx,%edx
f0130802:	89 c8                	mov    %ecx,%eax
f0130804:	f7 f5                	div    %ebp
f0130806:	89 c1                	mov    %eax,%ecx
f0130808:	89 d8                	mov    %ebx,%eax
f013080a:	f7 f5                	div    %ebp
f013080c:	89 cf                	mov    %ecx,%edi
f013080e:	89 fa                	mov    %edi,%edx
f0130810:	83 c4 1c             	add    $0x1c,%esp
f0130813:	5b                   	pop    %ebx
f0130814:	5e                   	pop    %esi
f0130815:	5f                   	pop    %edi
f0130816:	5d                   	pop    %ebp
f0130817:	c3                   	ret    
f0130818:	39 ce                	cmp    %ecx,%esi
f013081a:	77 28                	ja     f0130844 <__udivdi3+0x7c>
f013081c:	0f bd fe             	bsr    %esi,%edi
f013081f:	83 f7 1f             	xor    $0x1f,%edi
f0130822:	75 40                	jne    f0130864 <__udivdi3+0x9c>
f0130824:	39 ce                	cmp    %ecx,%esi
f0130826:	72 0a                	jb     f0130832 <__udivdi3+0x6a>
f0130828:	3b 44 24 08          	cmp    0x8(%esp),%eax
f013082c:	0f 87 9e 00 00 00    	ja     f01308d0 <__udivdi3+0x108>
f0130832:	b8 01 00 00 00       	mov    $0x1,%eax
f0130837:	89 fa                	mov    %edi,%edx
f0130839:	83 c4 1c             	add    $0x1c,%esp
f013083c:	5b                   	pop    %ebx
f013083d:	5e                   	pop    %esi
f013083e:	5f                   	pop    %edi
f013083f:	5d                   	pop    %ebp
f0130840:	c3                   	ret    
f0130841:	8d 76 00             	lea    0x0(%esi),%esi
f0130844:	31 ff                	xor    %edi,%edi
f0130846:	31 c0                	xor    %eax,%eax
f0130848:	89 fa                	mov    %edi,%edx
f013084a:	83 c4 1c             	add    $0x1c,%esp
f013084d:	5b                   	pop    %ebx
f013084e:	5e                   	pop    %esi
f013084f:	5f                   	pop    %edi
f0130850:	5d                   	pop    %ebp
f0130851:	c3                   	ret    
f0130852:	66 90                	xchg   %ax,%ax
f0130854:	89 d8                	mov    %ebx,%eax
f0130856:	f7 f7                	div    %edi
f0130858:	31 ff                	xor    %edi,%edi
f013085a:	89 fa                	mov    %edi,%edx
f013085c:	83 c4 1c             	add    $0x1c,%esp
f013085f:	5b                   	pop    %ebx
f0130860:	5e                   	pop    %esi
f0130861:	5f                   	pop    %edi
f0130862:	5d                   	pop    %ebp
f0130863:	c3                   	ret    
f0130864:	bd 20 00 00 00       	mov    $0x20,%ebp
f0130869:	89 eb                	mov    %ebp,%ebx
f013086b:	29 fb                	sub    %edi,%ebx
f013086d:	89 f9                	mov    %edi,%ecx
f013086f:	d3 e6                	shl    %cl,%esi
f0130871:	89 c5                	mov    %eax,%ebp
f0130873:	88 d9                	mov    %bl,%cl
f0130875:	d3 ed                	shr    %cl,%ebp
f0130877:	89 e9                	mov    %ebp,%ecx
f0130879:	09 f1                	or     %esi,%ecx
f013087b:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
f013087f:	89 f9                	mov    %edi,%ecx
f0130881:	d3 e0                	shl    %cl,%eax
f0130883:	89 c5                	mov    %eax,%ebp
f0130885:	89 d6                	mov    %edx,%esi
f0130887:	88 d9                	mov    %bl,%cl
f0130889:	d3 ee                	shr    %cl,%esi
f013088b:	89 f9                	mov    %edi,%ecx
f013088d:	d3 e2                	shl    %cl,%edx
f013088f:	8b 44 24 08          	mov    0x8(%esp),%eax
f0130893:	88 d9                	mov    %bl,%cl
f0130895:	d3 e8                	shr    %cl,%eax
f0130897:	09 c2                	or     %eax,%edx
f0130899:	89 d0                	mov    %edx,%eax
f013089b:	89 f2                	mov    %esi,%edx
f013089d:	f7 74 24 0c          	divl   0xc(%esp)
f01308a1:	89 d6                	mov    %edx,%esi
f01308a3:	89 c3                	mov    %eax,%ebx
f01308a5:	f7 e5                	mul    %ebp
f01308a7:	39 d6                	cmp    %edx,%esi
f01308a9:	72 19                	jb     f01308c4 <__udivdi3+0xfc>
f01308ab:	74 0b                	je     f01308b8 <__udivdi3+0xf0>
f01308ad:	89 d8                	mov    %ebx,%eax
f01308af:	31 ff                	xor    %edi,%edi
f01308b1:	e9 58 ff ff ff       	jmp    f013080e <__udivdi3+0x46>
f01308b6:	66 90                	xchg   %ax,%ax
f01308b8:	8b 54 24 08          	mov    0x8(%esp),%edx
f01308bc:	89 f9                	mov    %edi,%ecx
f01308be:	d3 e2                	shl    %cl,%edx
f01308c0:	39 c2                	cmp    %eax,%edx
f01308c2:	73 e9                	jae    f01308ad <__udivdi3+0xe5>
f01308c4:	8d 43 ff             	lea    -0x1(%ebx),%eax
f01308c7:	31 ff                	xor    %edi,%edi
f01308c9:	e9 40 ff ff ff       	jmp    f013080e <__udivdi3+0x46>
f01308ce:	66 90                	xchg   %ax,%ax
f01308d0:	31 c0                	xor    %eax,%eax
f01308d2:	e9 37 ff ff ff       	jmp    f013080e <__udivdi3+0x46>
f01308d7:	90                   	nop

f01308d8 <__umoddi3>:
f01308d8:	55                   	push   %ebp
f01308d9:	57                   	push   %edi
f01308da:	56                   	push   %esi
f01308db:	53                   	push   %ebx
f01308dc:	83 ec 1c             	sub    $0x1c,%esp
f01308df:	8b 4c 24 30          	mov    0x30(%esp),%ecx
f01308e3:	8b 74 24 34          	mov    0x34(%esp),%esi
f01308e7:	8b 7c 24 38          	mov    0x38(%esp),%edi
f01308eb:	8b 44 24 3c          	mov    0x3c(%esp),%eax
f01308ef:	89 44 24 0c          	mov    %eax,0xc(%esp)
f01308f3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
f01308f7:	89 f3                	mov    %esi,%ebx
f01308f9:	89 fa                	mov    %edi,%edx
f01308fb:	89 4c 24 04          	mov    %ecx,0x4(%esp)
f01308ff:	89 34 24             	mov    %esi,(%esp)
f0130902:	85 c0                	test   %eax,%eax
f0130904:	75 1a                	jne    f0130920 <__umoddi3+0x48>
f0130906:	39 f7                	cmp    %esi,%edi
f0130908:	0f 86 a2 00 00 00    	jbe    f01309b0 <__umoddi3+0xd8>
f013090e:	89 c8                	mov    %ecx,%eax
f0130910:	89 f2                	mov    %esi,%edx
f0130912:	f7 f7                	div    %edi
f0130914:	89 d0                	mov    %edx,%eax
f0130916:	31 d2                	xor    %edx,%edx
f0130918:	83 c4 1c             	add    $0x1c,%esp
f013091b:	5b                   	pop    %ebx
f013091c:	5e                   	pop    %esi
f013091d:	5f                   	pop    %edi
f013091e:	5d                   	pop    %ebp
f013091f:	c3                   	ret    
f0130920:	39 f0                	cmp    %esi,%eax
f0130922:	0f 87 ac 00 00 00    	ja     f01309d4 <__umoddi3+0xfc>
f0130928:	0f bd e8             	bsr    %eax,%ebp
f013092b:	83 f5 1f             	xor    $0x1f,%ebp
f013092e:	0f 84 ac 00 00 00    	je     f01309e0 <__umoddi3+0x108>
f0130934:	bf 20 00 00 00       	mov    $0x20,%edi
f0130939:	29 ef                	sub    %ebp,%edi
f013093b:	89 fe                	mov    %edi,%esi
f013093d:	89 7c 24 0c          	mov    %edi,0xc(%esp)
f0130941:	89 e9                	mov    %ebp,%ecx
f0130943:	d3 e0                	shl    %cl,%eax
f0130945:	89 d7                	mov    %edx,%edi
f0130947:	89 f1                	mov    %esi,%ecx
f0130949:	d3 ef                	shr    %cl,%edi
f013094b:	09 c7                	or     %eax,%edi
f013094d:	89 e9                	mov    %ebp,%ecx
f013094f:	d3 e2                	shl    %cl,%edx
f0130951:	89 14 24             	mov    %edx,(%esp)
f0130954:	89 d8                	mov    %ebx,%eax
f0130956:	d3 e0                	shl    %cl,%eax
f0130958:	89 c2                	mov    %eax,%edx
f013095a:	8b 44 24 08          	mov    0x8(%esp),%eax
f013095e:	d3 e0                	shl    %cl,%eax
f0130960:	89 44 24 04          	mov    %eax,0x4(%esp)
f0130964:	8b 44 24 08          	mov    0x8(%esp),%eax
f0130968:	89 f1                	mov    %esi,%ecx
f013096a:	d3 e8                	shr    %cl,%eax
f013096c:	09 d0                	or     %edx,%eax
f013096e:	d3 eb                	shr    %cl,%ebx
f0130970:	89 da                	mov    %ebx,%edx
f0130972:	f7 f7                	div    %edi
f0130974:	89 d3                	mov    %edx,%ebx
f0130976:	f7 24 24             	mull   (%esp)
f0130979:	89 c6                	mov    %eax,%esi
f013097b:	89 d1                	mov    %edx,%ecx
f013097d:	39 d3                	cmp    %edx,%ebx
f013097f:	0f 82 87 00 00 00    	jb     f0130a0c <__umoddi3+0x134>
f0130985:	0f 84 91 00 00 00    	je     f0130a1c <__umoddi3+0x144>
f013098b:	8b 54 24 04          	mov    0x4(%esp),%edx
f013098f:	29 f2                	sub    %esi,%edx
f0130991:	19 cb                	sbb    %ecx,%ebx
f0130993:	89 d8                	mov    %ebx,%eax
f0130995:	8a 4c 24 0c          	mov    0xc(%esp),%cl
f0130999:	d3 e0                	shl    %cl,%eax
f013099b:	89 e9                	mov    %ebp,%ecx
f013099d:	d3 ea                	shr    %cl,%edx
f013099f:	09 d0                	or     %edx,%eax
f01309a1:	89 e9                	mov    %ebp,%ecx
f01309a3:	d3 eb                	shr    %cl,%ebx
f01309a5:	89 da                	mov    %ebx,%edx
f01309a7:	83 c4 1c             	add    $0x1c,%esp
f01309aa:	5b                   	pop    %ebx
f01309ab:	5e                   	pop    %esi
f01309ac:	5f                   	pop    %edi
f01309ad:	5d                   	pop    %ebp
f01309ae:	c3                   	ret    
f01309af:	90                   	nop
f01309b0:	89 fd                	mov    %edi,%ebp
f01309b2:	85 ff                	test   %edi,%edi
f01309b4:	75 0b                	jne    f01309c1 <__umoddi3+0xe9>
f01309b6:	b8 01 00 00 00       	mov    $0x1,%eax
f01309bb:	31 d2                	xor    %edx,%edx
f01309bd:	f7 f7                	div    %edi
f01309bf:	89 c5                	mov    %eax,%ebp
f01309c1:	89 f0                	mov    %esi,%eax
f01309c3:	31 d2                	xor    %edx,%edx
f01309c5:	f7 f5                	div    %ebp
f01309c7:	89 c8                	mov    %ecx,%eax
f01309c9:	f7 f5                	div    %ebp
f01309cb:	89 d0                	mov    %edx,%eax
f01309cd:	e9 44 ff ff ff       	jmp    f0130916 <__umoddi3+0x3e>
f01309d2:	66 90                	xchg   %ax,%ax
f01309d4:	89 c8                	mov    %ecx,%eax
f01309d6:	89 f2                	mov    %esi,%edx
f01309d8:	83 c4 1c             	add    $0x1c,%esp
f01309db:	5b                   	pop    %ebx
f01309dc:	5e                   	pop    %esi
f01309dd:	5f                   	pop    %edi
f01309de:	5d                   	pop    %ebp
f01309df:	c3                   	ret    
f01309e0:	3b 04 24             	cmp    (%esp),%eax
f01309e3:	72 06                	jb     f01309eb <__umoddi3+0x113>
f01309e5:	3b 7c 24 04          	cmp    0x4(%esp),%edi
f01309e9:	77 0f                	ja     f01309fa <__umoddi3+0x122>
f01309eb:	89 f2                	mov    %esi,%edx
f01309ed:	29 f9                	sub    %edi,%ecx
f01309ef:	1b 54 24 0c          	sbb    0xc(%esp),%edx
f01309f3:	89 14 24             	mov    %edx,(%esp)
f01309f6:	89 4c 24 04          	mov    %ecx,0x4(%esp)
f01309fa:	8b 44 24 04          	mov    0x4(%esp),%eax
f01309fe:	8b 14 24             	mov    (%esp),%edx
f0130a01:	83 c4 1c             	add    $0x1c,%esp
f0130a04:	5b                   	pop    %ebx
f0130a05:	5e                   	pop    %esi
f0130a06:	5f                   	pop    %edi
f0130a07:	5d                   	pop    %ebp
f0130a08:	c3                   	ret    
f0130a09:	8d 76 00             	lea    0x0(%esi),%esi
f0130a0c:	2b 04 24             	sub    (%esp),%eax
f0130a0f:	19 fa                	sbb    %edi,%edx
f0130a11:	89 d1                	mov    %edx,%ecx
f0130a13:	89 c6                	mov    %eax,%esi
f0130a15:	e9 71 ff ff ff       	jmp    f013098b <__umoddi3+0xb3>
f0130a1a:	66 90                	xchg   %ax,%ax
f0130a1c:	39 44 24 04          	cmp    %eax,0x4(%esp)
f0130a20:	72 ea                	jb     f0130a0c <__umoddi3+0x134>
f0130a22:	89 d9                	mov    %ebx,%ecx
f0130a24:	e9 62 ff ff ff       	jmp    f013098b <__umoddi3+0xb3>
